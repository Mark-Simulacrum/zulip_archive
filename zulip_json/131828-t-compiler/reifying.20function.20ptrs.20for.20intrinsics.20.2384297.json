[
    {
        "content": "<p>hello world</p>",
        "id": 240480809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622127573
    },
    {
        "content": "<p>So the reason lang items and intrinsics have historically been different was in directionality – code provides lang items to the compiler and compiler provides intrinsics to code.</p>",
        "id": 240481207,
        "sender_full_name": "nagisa",
        "timestamp": 1622127702
    },
    {
        "content": "<p>not sure if we _must_ have these as separate entities though.</p>",
        "id": 240481250,
        "sender_full_name": "nagisa",
        "timestamp": 1622127719
    },
    {
        "content": "<p>It seems like a distinction that provides very little value.</p>",
        "id": 240481354,
        "sender_full_name": "nagisa",
        "timestamp": 1622127741
    },
    {
        "content": "<p>I think the most major shareholder in preserving intrinsics would be simd crates.</p>",
        "id": 240481449,
        "sender_full_name": "nagisa",
        "timestamp": 1622127773
    },
    {
        "content": "<p>The list of intrinsics is much larger than the list of lang items. In addition you can't easily check if something is a lang item, which is necessary for codegen of calls to intrinscs. You can only easily check which <code>DefId</code> corresponds to a given lang item, not if the <code>DefId</code> is a lang item. Reifying function pointers for intrinsics will require shims.</p>",
        "id": 240501765,
        "sender_full_name": "bjorn3",
        "timestamp": 1622136121
    },
    {
        "content": "<p>Why are you talking about lang items? They seem mostly unrelated to intrinsics -- as you say, provider and consumer are exactly reversed.</p>",
        "id": 240538226,
        "sender_full_name": "RalfJ",
        "timestamp": 1622153059
    },
    {
        "content": "<p>I was replying to <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> saying that there is little value in the distinction.</p>",
        "id": 240576881,
        "sender_full_name": "bjorn3",
        "timestamp": 1622191820
    },
    {
        "content": "<p>In the meeting (i would paste a link to the topic if I could figure out how to get it from the mobile app) <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> suggested that they would like to remove intronsics entirely.</p>",
        "id": 240578839,
        "sender_full_name": "nagisa",
        "timestamp": 1622193000
    },
    {
        "content": "<p>(my messages were hoping that the context would appear shortly thereafter)</p>",
        "id": 240578933,
        "sender_full_name": "nagisa",
        "timestamp": 1622193036
    },
    {
        "content": "<blockquote>\n<p>you can't easily check if something is a lang item</p>\n</blockquote>\n<p>That seems fixable, I known some people in <span class=\"user-group-mention\" data-user-group-id=\"3456\">@T-clippy</span> wanted it for diagnostics</p>",
        "id": 240583698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622195773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240481449\">said</a>:</p>\n<blockquote>\n<p>I think the most major shareholder in preserving intrinsics would be simd crates.</p>\n</blockquote>\n<p>actually... they often want a Rust body that has a slow version of the intrinsic... which would be easier with lang items</p>",
        "id": 240585837,
        "sender_full_name": "oli",
        "timestamp": 1622197180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240538226\">said</a>:</p>\n<blockquote>\n<p>Why are you talking about lang items? They seem mostly unrelated to intrinsics -- as you say, provider and consumer are exactly reversed.</p>\n</blockquote>\n<p>lang items can be both. a function that the compiler can override with arbitrary logic</p>",
        "id": 240585980,
        "sender_full_name": "oli",
        "timestamp": 1622197274
    },
    {
        "content": "<p>When a lang item is a \"consumer\" (eg <code>extern \"Rust\" { #[lang=\"panic_impl\"] fn panic_impl(pi: &amp;PanicInfo&lt;'_&gt;) -&gt; !; }</code>) it is still provided by rust code elsewhere and not by the compiler. All such lang items are weak lang items which can be provided anywhere in the crate graph for as long as it is provided at all. The matching between provider and consumer of a lang item happens by using a fixed name in the symbol mangling. The codegen backend doesn't know anything about it, unlike intrinsics.</p>",
        "id": 240588613,
        "sender_full_name": "bjorn3",
        "timestamp": 1622199091
    },
    {
        "content": "<p>In my memory we did have intrinsic-ish lang items in the past. They would look a lot like:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[lang = &quot;foo&quot;]\nfn foo(...) -&gt; ... {\n    foo(...)\n}\n</code></pre></div>",
        "id": 240591782,
        "sender_full_name": "nagisa",
        "timestamp": 1622201626
    },
    {
        "content": "<p>That is drop_in_place, which is even more special than most intrinsics as it gets is's own MIR depending in the type param. Arguably it should be an actual intrinsic.</p>",
        "id": 240592679,
        "sender_full_name": "bjorn3",
        "timestamp": 1622202272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240578839\">said</a>:</p>\n<blockquote>\n<p>In the meeting (i would paste a link to the topic if I could figure out how to get it from the mobile app) <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> suggested that they would like to remove intronsics entirely.</p>\n</blockquote>\n<p>Link to start of (short) conversation: <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-27.20.2354818/near/240479357\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-27.20.2354818/near/240479357</a></p>",
        "id": 240608062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622210537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240538226\">said</a>:</p>\n<blockquote>\n<p>Why are you talking about lang items? They seem mostly unrelated to intrinsics -- as you say, provider and consumer are exactly reversed.</p>\n</blockquote>\n<p>I consider them totally equivalent</p>",
        "id": 240608084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210550
    },
    {
        "content": "<p>lang items are just \"things known to the compiler for some purpose\"</p>",
        "id": 240608094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210555
    },
    {
        "content": "<p>we use them for all kinds of reasons</p>",
        "id": 240608102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210560
    },
    {
        "content": "<p>one of them is to imbue them with special semantics</p>",
        "id": 240608111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210565
    },
    {
        "content": "<p>e.g., the <code>Sized</code> trait</p>",
        "id": 240608124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240585837\">said</a>:</p>\n<blockquote>\n<p>actually... they often want a Rust body that has a slow version of the intrinsic... which would be easier with lang items</p>\n</blockquote>\n<p>this is exactly it</p>",
        "id": 240608182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210598
    },
    {
        "content": "<p>I think if we remodeled intrinsics as lang items, we could have their function bodies either be equivalent things, or ust have them directly invoke themselves.</p>",
        "id": 240608224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210621
    },
    {
        "content": "<p>that way, if you reference it indirectly, you get the actual function</p>",
        "id": 240608255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210641
    },
    {
        "content": "<p>but when you invoke the lang item directly, you get the specially optimized version</p>",
        "id": 240608313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622210652
    },
    {
        "content": "<p>That seems like a footgun for enabling reification. Like, if some function was a simd operation and the implementation was a slow scalar version then a function pointer would be kind of a footgun in that instance?</p>",
        "id": 240620456,
        "sender_full_name": "nagisa",
        "timestamp": 1622215802
    },
    {
        "content": "<p>Though I guess what stdsimd or similar could do is probably:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[cfg(target_feature=&quot;foo&quot;)]\n#[lang=&quot;someop&quot;]\nfn someop(...) {\n     // slow scalar impl\n}\n\n#[cfg(not(target_feature=&quot;foo&quot;))]\n#[lang=&quot;someop&quot;]\nfn someop(...) {\n    someop()\n}\n</code></pre></div>\n<p>?</p>",
        "id": 240620663,
        "sender_full_name": "nagisa",
        "timestamp": 1622215896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240620456\">said</a>:</p>\n<blockquote>\n<p>That seems like a footgun for enabling reification. Like, if some function was a simd operation and the implementation was a slow scalar version then a function pointer would be kind of a footgun in that instance?</p>\n</blockquote>\n<p>Yeah, I think there'd be value in having the compile warn, if not error, if you get a function pointer to something that makes no sense as a function (such as <code>likely</code> and <code>unlikely</code>).</p>",
        "id": 240636723,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622223277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240583698\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>you can't easily check if something is a lang item</p>\n</blockquote>\n<p>That seems fixable, I known some people in <span class=\"user-group-mention silent\" data-user-group-id=\"3456\">T-clippy</span> wanted it for diagnostics</p>\n</blockquote>\n<p>FWIW we have \"diagnostic items\" for that usecase</p>",
        "id": 240695574,
        "sender_full_name": "RalfJ",
        "timestamp": 1622284454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240608182\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240585837\">said</a>:</p>\n<blockquote>\n<p>actually... they often want a Rust body that has a slow version of the intrinsic... which would be easier with lang items</p>\n</blockquote>\n<p>this is exactly it</p>\n</blockquote>\n<p>this makes no sense to me, at least not for \"true\" intrinsics, i.e. those that actually expand the expressiveness of the language. there is no way to implement those in a \"slow Rust body\".<br>\nwe could of course do some awful hack to coerce the lang item mechanism into this shape, but IMO it would be exactly that -- an awful hack 8at least the proposals I have seen so far, which seem to be along the lines of <code>drop_in_place</code>).</p>",
        "id": 240695594,
        "sender_full_name": "RalfJ",
        "timestamp": 1622284528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240636723\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/240620456\">said</a>:</p>\n<blockquote>\n<p>That seems like a footgun for enabling reification. Like, if some function was a simd operation and the implementation was a slow scalar version then a function pointer would be kind of a footgun in that instance?</p>\n</blockquote>\n<p>Yeah, I think there'd be value in having the compile warn, if not error, if you get a function pointer to something that makes no sense as a function (such as <code>likely</code> and <code>unlikely</code>).</p>\n</blockquote>\n<p>good point, we probably need a list of intrinsics that we allow fn ptrs for<br>\n(trying to get back on topic here, the entire lang item thing is off-topic for the problem at hand^^)</p>",
        "id": 240695647,
        "sender_full_name": "RalfJ",
        "timestamp": 1622284591
    },
    {
        "content": "<p>does this potential unification of lang items and intrinsics also apply to \"compiler built-ins\" like <a href=\"https://doc.rust-lang.org/src/core/macros/mod.rs.html#739-742\">format_args</a>?</p>",
        "id": 240710769,
        "sender_full_name": "bstrie",
        "timestamp": 1622307231
    },
    {
        "content": "<p>probably not, macros work fine like they are now</p>",
        "id": 240710830,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622307303
    },
    {
        "content": "<p>sure, I'm just annoyed at what feels like an arbitrary subcategory of lang items :P</p>",
        "id": 240710963,
        "sender_full_name": "bstrie",
        "timestamp": 1622307526
    },
    {
        "content": "<p>hmm, I guess we could replace <code>#[rustc_builtin_macro = \"core_panic\"]</code> with <code>#[lang_item = \"core_panic_macro\"]</code> if that's what you mean?</p>",
        "id": 240711130,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622307774
    },
    {
        "content": "<p>might make things slightly simpler</p>",
        "id": 240711136,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622307789
    },
    {
        "content": "<p>simpler for who? I don't think it would be much simpler for the compiler, it would have to start validating that the item is actually a macro</p>",
        "id": 240712649,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622310112
    },
    {
        "content": "<p>apparently we already have <code>Target::MacroDef</code> for lang items, so we already do that</p>",
        "id": 240712939,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622310542
    },
    {
        "content": "<p>Should I make a separate topic to discuss what we are going to do about this <em>for the 1.53-beta</em> that becomes stable in ~two weeks?</p>",
        "id": 241320520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622668336
    },
    {
        "content": "<p>in fact that was what <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> suggested on <a href=\"https://github.com/rust-lang/rust/issues/84297#issuecomment-845327107\">github 13 days ago</a></p>",
        "id": 241320583,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622668389
    },
    {
        "content": "<p>It's definitely the case that likely just reverting (as we did for 1.52) would be appropriate</p>",
        "id": 241320598,
        "sender_full_name": "simulacrum",
        "timestamp": 1622668409
    },
    {
        "content": "<p>oh, whoops, I left out a message there that was in my head but never written</p>",
        "id": 241320602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622668411
    },
    {
        "content": "<p>yeah, I think reverting on mainline+beta is the way to go right now</p>",
        "id": 241320629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622668428
    },
    {
        "content": "<p>(note that there's some const fn unstable functions fallout, largely discoverable by chasing compiler errors)</p>",
        "id": 241320789,
        "sender_full_name": "simulacrum",
        "timestamp": 1622668532
    },
    {
        "content": "<p>could likely be avoided with some work but it's not something I pursued</p>",
        "id": 241320811,
        "sender_full_name": "simulacrum",
        "timestamp": 1622668553
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> , is the commit you added to PR <a href=\"https://github.com/rust-lang/rust/issues/81238\">#81238</a> something that has to be reverted too?</p>",
        "id": 241321940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622669124
    },
    {
        "content": "<p>or is that change to the clippy lint something that should stay even when Ralf’s change is reverted?</p>",
        "id": 241321953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622669139
    },
    {
        "content": "<p>checking..</p>",
        "id": 241322021,
        "sender_full_name": "Mara",
        "timestamp": 1622669168
    },
    {
        "content": "<p>that should be reverted too, if the rest of that PR is reverted</p>",
        "id": 241322115,
        "sender_full_name": "Mara",
        "timestamp": 1622669235
    },
    {
        "content": "<p>okay thanks! (I don’t know much about clippy and so I didn’t know how to interpret the addition of that empty string in the path)</p>",
        "id": 241322238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622669296
    },
    {
        "content": "<p>i believe the <code>extern \"rust-intrinsic\" {</code> block is seen as a 'module' with an empty name, in those paths.</p>",
        "id": 241322334,
        "sender_full_name": "Mara",
        "timestamp": 1622669374
    },
    {
        "content": "<p>I see, that … well, I won’t say it makes sense, but its something I can understand.</p>",
        "id": 241322555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622669482
    },
    {
        "content": "<p>haha</p>",
        "id": 241322569,
        "sender_full_name": "Mara",
        "timestamp": 1622669490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/241320789\">said</a>:</p>\n<blockquote>\n<p>(note that there's some const fn unstable functions fallout, largely discoverable by chasing compiler errors)</p>\n</blockquote>\n<p>Ah, I misunderstood what you were getting at here. <code>ptr::write</code> is now a <code>const fn</code>. But our stabilty attribute system should be keeping that from being observable outside of the stdlib, right?</p>",
        "id": 241555866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622822113
    },
    {
        "content": "<p>Yes, but it can't even be unstable const if you revert the PR that changed to direct intrinsics, iirc. I forget why...</p>",
        "id": 241559580,
        "sender_full_name": "simulacrum",
        "timestamp": 1622823756
    },
    {
        "content": "<p>One more thing: Don’t we need to revert PR <a href=\"https://github.com/rust-lang/rust/issues/84404\">#84404</a> on the beta (and probably mainline) too?</p>",
        "id": 241582005,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622834774
    },
    {
        "content": "<p>I guess we’ll find out after I finish this revert and add a proper regression test. :)</p>",
        "id": 241582073,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622834805
    },
    {
        "content": "<p>(it’s entirely possible that the code path added in PR <a href=\"https://github.com/rust-lang/rust/issues/84404\">#84404</a> is just unreachable now. Or at least, once I added the revert, the <strong>test</strong> added in <a href=\"https://github.com/rust-lang/rust/issues/84404\">#84404</a> needs to be reverted too.)</p>",
        "id": 241582193,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622834875
    },
    {
        "content": "<p>hm, I would expect no, but not sure.</p>",
        "id": 241582287,
        "sender_full_name": "simulacrum",
        "timestamp": 1622834914
    },
    {
        "content": "<p>test should probably be modified</p>",
        "id": 241582293,
        "sender_full_name": "simulacrum",
        "timestamp": 1622834920
    },
    {
        "content": "<p>i.e., to use some other intrinsic pair, like likely/unlikely perhaps</p>",
        "id": 241582306,
        "sender_full_name": "simulacrum",
        "timestamp": 1622834931
    },
    {
        "content": "<p>Ah that’s a good idea</p>",
        "id": 241582317,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622834938
    },
    {
        "content": "<p>and I think we should land on master and beta branches a ~equivalent patch, to avoid doing this in future cycles</p>",
        "id": 241582351,
        "sender_full_name": "simulacrum",
        "timestamp": 1622834962
    },
    {
        "content": "<p>yep yep</p>",
        "id": 241582461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622835009
    },
    {
        "content": "<p>I’ll make it part of the PR, which will be targetting mainline first</p>",
        "id": 241582480,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622835023
    },
    {
        "content": "<p>great</p>",
        "id": 241582574,
        "sender_full_name": "simulacrum",
        "timestamp": 1622835086
    },
    {
        "content": "<p>Test case for <a href=\"https://github.com/rust-lang/rust/issues/84404\">#84404</a> uses intrinsics directly so it will be unaffected.</p>",
        "id": 241585683,
        "sender_full_name": "tm",
        "timestamp": 1622836665
    },
    {
        "content": "<p>Ah, but despite being in the intrinsics module those haven't been intrinsics. I forgot how confusingly it is organized</p>",
        "id": 241588349,
        "sender_full_name": "tm",
        "timestamp": 1622838089
    },
    {
        "content": "<p>yeah its unfortunate. :)</p>",
        "id": 241588929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622838441
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , should I see if someone else can review PR <a href=\"https://github.com/rust-lang/rust/issues/86003\">#86003</a> ?</p>",
        "id": 241976496,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623181967
    },
    {
        "content": "<p>no, I can take a quick look -- it's mostly reverts I think</p>",
        "id": 241976587,
        "sender_full_name": "simulacrum",
        "timestamp": 1623182010
    },
    {
        "content": "<p>yep that’s right</p>",
        "id": 241976602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623182021
    },
    {
        "content": "<p>alright, r+'d with p=1</p>",
        "id": 241976784,
        "sender_full_name": "simulacrum",
        "timestamp": 1623182083
    },
    {
        "content": "<p>thanks so much!</p>",
        "id": 241976838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623182103
    },
    {
        "content": "<p>it'd be good to verify it backports cleanly and if not fix it up, while it's on your mind</p>",
        "id": 241976853,
        "sender_full_name": "simulacrum",
        "timestamp": 1623182108
    },
    {
        "content": "<p>but it'll probably be not too hard, so can be done in next round of backports. I know you're busy this week.</p>",
        "id": 241977015,
        "sender_full_name": "simulacrum",
        "timestamp": 1623182162
    },
    {
        "content": "<p>I’ll look into it!</p>",
        "id": 242084186,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623252621
    },
    {
        "content": "<p>so the short-term workaround impacted Rust-GPU (I guess we accidentally relied on the intrinsics being used directly?), which meant I finally had an excuse to go implement reification</p>",
        "id": 244196818,
        "sender_full_name": "eddyb",
        "timestamp": 1624910363
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-lang/rust/issues/86699\">#86699</a> for the reification change alone, but I also have the revert ready to flip <code>ptr::{copy,copy_nonoverlapping}</code> back into intrinsics</p>",
        "id": 244196957,
        "sender_full_name": "eddyb",
        "timestamp": 1624910426
    },
    {
        "content": "<p>(it could genuinely be a +1-1 change, if not for the type-level \"ABI\" thing and tests)</p>",
        "id": 244197248,
        "sender_full_name": "eddyb",
        "timestamp": 1624910573
    },
    {
        "content": "<p>interesting, I never realized there were intrinsics that were exported directly, as opposed to being wrapped in fns</p>",
        "id": 244199207,
        "sender_full_name": "bstrie",
        "timestamp": 1624911597
    },
    {
        "content": "<p><code>transmute</code> has to be, because its size check can't be expressed with a <code>where</code> bound (<em>yet</em>)</p>",
        "id": 244199327,
        "sender_full_name": "eddyb",
        "timestamp": 1624911649
    },
    {
        "content": "<p>funnily enough there's some non-intrinsic functions in <code>core::intrinsics</code>, that only exist because their names were at some point or another stable, and so we had to keep them</p>",
        "id": 244199376,
        "sender_full_name": "eddyb",
        "timestamp": 1624911694
    },
    {
        "content": "<p>with the reification working (and especially not exposing the pseudo-ABI in the <code>fn</code> pointer type), we should be able to make them back into actual intrinsics, backwards-compatibly</p>",
        "id": 244199602,
        "sender_full_name": "eddyb",
        "timestamp": 1624911790
    },
    {
        "content": "<p>(to be fair, two of the current set are <code>copy</code> and <code>copy_nonoverlapping</code>, which is where this all started in the first place)</p>",
        "id": 244200165,
        "sender_full_name": "eddyb",
        "timestamp": 1624912065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would it make sense to discuss <a href=\"https://github.com/rust-lang/rust/issues/86699\">#86699</a> at the meeting today? I'm curious what it would take to get it merged (or declined, at least in its current form)</p>",
        "id": 244521041,
        "sender_full_name": "eddyb",
        "timestamp": 1625118085
    },
    {
        "content": "<p>I'll tag it <code>I-nominated</code> but I'm not sure that's what I should do</p>",
        "id": 244526976,
        "sender_full_name": "eddyb",
        "timestamp": 1625123558
    },
    {
        "content": "<p>added <code>T-compiler</code> so the nomination ends up in the correct bin :)</p>",
        "id": 244534407,
        "sender_full_name": "apiraino",
        "timestamp": 1625128658
    },
    {
        "content": "<p>thanks, I always forget that part!</p>",
        "id": 244553072,
        "sender_full_name": "eddyb",
        "timestamp": 1625139841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can you clarify for me the statement \"the implementation of lowered intrinsics was removed from both codegen and interpreter” — do we currently have a intrinsics lowering pass? Or was it something we tried, and then removed, and hope to put back in again?</p>",
        "id": 245319852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754084
    },
    {
        "content": "<p>haven't had time yet to look at that, but my understanding was that a MIR pass was added, and the intrinsics the pass handles are not implemented at all in codegen or miri, anymore</p>",
        "id": 245320062,
        "sender_full_name": "eddyb",
        "timestamp": 1625754162
    },
    {
        "content": "<p>I wonder if it would make sense to look into generating a mir shim, them running that same pass on the shim?</p>",
        "id": 245320322,
        "sender_full_name": "nagisa",
        "timestamp": 1625754252
    },
    {
        "content": "<p>to avoid having multiple implementations of the same intrinsic.</p>",
        "id": 245320333,
        "sender_full_name": "nagisa",
        "timestamp": 1625754261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245320062\">said</a>:</p>\n<blockquote>\n<p>haven't had time yet to look at that, but my understanding was that a MIR pass was added, and the intrinsics the pass handles are not implemented at all in codegen or miri, anymore</p>\n</blockquote>\n<p>correct</p>",
        "id": 245321209,
        "sender_full_name": "oli",
        "timestamp": 1625754649
    },
    {
        "content": "<p><code>copy_nonoverlapping</code> is one of those intrinsics that no longer has implementation in codegen. Running the pass for shims should work just fine.</p>",
        "id": 245347519,
        "sender_full_name": "tm",
        "timestamp": 1625766677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245320322\">said</a>:</p>\n<blockquote>\n<p>I wonder if it would make sense to look into generating a mir shim, them running that same pass on the shim?</p>\n</blockquote>\n<p>yupp, that's p much the same thing I want to do, as per the first sentence of <a href=\"https://github.com/rust-lang/rust/pull/86699#issuecomment-870745885\">https://github.com/rust-lang/rust/pull/86699#issuecomment-870745885</a></p>",
        "id": 245415706,
        "sender_full_name": "eddyb",
        "timestamp": 1625819719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Is there a good reason to have the  'intrinsic' ABI, as opposed to (say) lang-items? I guess that it allows us to have duplicate declarations, but I don't know that this is a good thing. I remember that it is perhaps relevant to SIMD.</p>",
        "id": 245424059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625824978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what we should've done years ago is just slap an attribute on them (or on the <code>extern</code> block) and use <code>extern \"Rust\"</code></p>",
        "id": 245424097,
        "sender_full_name": "eddyb",
        "timestamp": 1625825014
    },
    {
        "content": "<p>Also, do we (I hope) prevent <code>extern \"rust-intrinsic\" fn()</code> from being a type?</p>",
        "id": 245424101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245424097\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> what we should've done years ago is just slap an attribute on them (or on the <code>extern</code> block) and use <code>extern \"Rust\"</code></p>\n</blockquote>\n<p>That seems roughly equivalent, yes--- is there a reason we can't do that now?</p>",
        "id": 245424123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245424101\">said</a>:</p>\n<blockquote>\n<p>Also, do we (I hope) prevent <code>extern \"rust-intrinsic\" fn()</code> from being a type?</p>\n</blockquote>\n<p>It is unstable.</p>",
        "id": 245424133,
        "sender_full_name": "bjorn3",
        "timestamp": 1625825037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245424101\">said</a>:</p>\n<blockquote>\n<p>Also, do we (I hope) prevent <code>extern \"rust-intrinsic\" fn()</code> from being a type?</p>\n</blockquote>\n<p>it's unstable and now useless, but nothing else stops it</p>",
        "id": 245424180,
        "sender_full_name": "eddyb",
        "timestamp": 1625825050
    },
    {
        "content": "<p>I guess that the type of <code>transmute</code> <em>before</em> coercion is a just a zero-size function type?</p>",
        "id": 245424201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825076
    },
    {
        "content": "<p>yeah, and the ABI is not part of the type anyway</p>",
        "id": 245424214,
        "sender_full_name": "eddyb",
        "timestamp": 1625825087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think what keeps happening is either lang items, or a different better proposal keeps popping up on our radar, and we ignore the \"obvious\" solution of fixing the ABI <em>now</em></p>",
        "id": 245424230,
        "sender_full_name": "eddyb",
        "timestamp": 1625825104
    },
    {
        "content": "<p>using <code>#[rustc_intrinsic]</code> and <code>#[rustc_platform_intrinsic]</code> or w/e</p>",
        "id": 245424248,
        "sender_full_name": "eddyb",
        "timestamp": 1625825115
    },
    {
        "content": "<p><del>speaking of I have a WIP branch for nuking <code>extern \"rust-call\"</code> by adding a very limited VG impl for internal use only, that I should get back to, but that's offtopic</del></p>",
        "id": 245424349,
        "sender_full_name": "eddyb",
        "timestamp": 1625825169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245424230\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I think what keeps happening is either lang items, or a different better proposal keeps popping up on our radar, and we ignore the \"obvious\" solution of fixing the ABI <em>now</em></p>\n</blockquote>\n<p>(but also we never RFC or w/e it)</p>",
        "id": 245424373,
        "sender_full_name": "eddyb",
        "timestamp": 1625825190
    },
    {
        "content": "<p>I <em>feel</em> like lang-items are the obvious thing, but <code>#[rustc_intrinsic]</code> seems also ok</p>",
        "id": 245424402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825225
    },
    {
        "content": "<p>presumably more like <code>#[rustc_intrinsic(name)]</code>, I guess?</p>",
        "id": 245424431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825252
    },
    {
        "content": "<p>or maybe we just take the name from the function itself</p>",
        "id": 245424441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825260
    },
    {
        "content": "<p>ultimately the point (from a lang POV) is that \"there are special functions in libcore that are well known to the compiler\"</p>",
        "id": 245424490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825283
    },
    {
        "content": "<p>Lang items can currently only be looked up. You can't check if an item is a lang item.</p>",
        "id": 245424515,
        "sender_full_name": "bjorn3",
        "timestamp": 1625825285
    },
    {
        "content": "<p>sure you can</p>",
        "id": 245424524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825290
    },
    {
        "content": "<p>but it's awkward :)</p>",
        "id": 245424541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245424490\">said</a>:</p>\n<blockquote>\n<p>ultimately the point (from a lang POV) is that \"there are special functions in libcore that are well known to the compiler\"</p>\n</blockquote>\n<p>this is more what I am getting at, I don't have a strong opinion about the impl mechanism</p>",
        "id": 245424571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825328
    },
    {
        "content": "<p>tbh I feel like every time lang items are brought up near intrinsics, fixing this gets pushed farther into the future :P</p>",
        "id": 245424579,
        "sender_full_name": "eddyb",
        "timestamp": 1625825334
    },
    {
        "content": "<p>I don't really know what the difference is between lang items and intrinsics, but if making a separate category of attribute helps, I'm in favor :)</p>",
        "id": 245424597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825353
    },
    {
        "content": "<p>I guess the difference is:</p>\n<ul>\n<li>intrinsic: a function which, when directly called, has its body inlined with special semantics that are otherwise impossible</li>\n<li>lang item: other \"well known\" items that are referenced by the compiler rules, but their semantics are identical or close to the original thing (e.g., Clone has special impls)</li>\n</ul>\n<p>I think most lang items behave like any other item of their kind, they just get used by the rules in various ways. This is probably the distinction. I'm not sure if it's a hard rule, but it's generally true.</p>",
        "id": 245424866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825547
    },
    {
        "content": "<p>That seems fine to me.</p>",
        "id": 245424877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825561
    },
    {
        "content": "<p>yeah, sounds good</p>",
        "id": 245425059,
        "sender_full_name": "eddyb",
        "timestamp": 1625825709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you said \"lang proposal\" on the PR, what's the procedure you were thinking of? I may have heard something about lang team MCPs, are those a thing nowadays?</p>",
        "id": 245425096,
        "sender_full_name": "eddyb",
        "timestamp": 1625825750
    },
    {
        "content": "<p>Yes</p>",
        "id": 245425158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825772
    },
    {
        "content": "<p>I just spent a bunch of time writing new docs, but they're still in a PR</p>",
        "id": 245425173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825786
    },
    {
        "content": "<p>that said, the docs include an \"alternative route\" of nominating a PR</p>",
        "id": 245425184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825797
    },
    {
        "content": "<p>so you're ok :)</p>",
        "id": 245425188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/245425173\">said</a>:</p>\n<blockquote>\n<p>I just spent a bunch of time writing new docs, but they're still in a PR</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/lang-team/pull/105\">https://github.com/rust-lang/lang-team/pull/105</a></p>",
        "id": 245425208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825818
    },
    {
        "content": "<p>when are the lang meetings? if you don't mind me showing up</p>",
        "id": 245425219,
        "sender_full_name": "eddyb",
        "timestamp": 1625825826
    },
    {
        "content": "<p>Don't mind at all!</p>",
        "id": 245425225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825833
    },
    {
        "content": "<p>(and if my schedule doesn't conflict)</p>",
        "id": 245425230,
        "sender_full_name": "eddyb",
        "timestamp": 1625825837
    },
    {
        "content": "<p><a href=\"https://lang-team.rust-lang.org/calendar.html\">https://lang-team.rust-lang.org/calendar.html</a></p>",
        "id": 245425234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625825839
    },
    {
        "content": "<p>hah neat docs</p>",
        "id": 245425260,
        "sender_full_name": "eddyb",
        "timestamp": 1625825855
    },
    {
        "content": "<p><del>there's grammar wg meetings? (sorry, this is getting offtopic)</del> nvm, outdated</p>",
        "id": 245425454,
        "sender_full_name": "eddyb",
        "timestamp": 1625826001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I didn't get around to making a proposal yet (got busy with some other stuff) - does <a href=\"https://github.com/rust-lang/rust/pull/86699#issuecomment-883584970\">https://github.com/rust-lang/rust/pull/86699#issuecomment-883584970</a> mean I don't have to open an \"initiative\" issue for it?</p>",
        "id": 246630342,
        "sender_full_name": "eddyb",
        "timestamp": 1626805656
    },
    {
        "content": "<p>You don't need to open an initiative.</p>",
        "id": 246644821,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626812776
    },
    {
        "content": "<p>Assuming that lang FCP goes through, consider this pre-approval for any subsequent PR implementing this behavior without having to re-check with the lang team.</p>",
        "id": 246644883,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626812815
    },
    {
        "content": "<p>(Assuming it follows the general outline of \"make intrinsics work as if they were functions\".)</p>",
        "id": 246644911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626812833
    }
]