[
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span></p>",
        "id": 147364044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760674
    },
    {
        "content": "<p>pong</p>",
        "id": 147364057,
        "sender_full_name": "oli",
        "timestamp": 1541760703
    },
    {
        "content": "<p>I'm trying to understand the semantics you desire and what you believe to be implemented</p>",
        "id": 147364062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760720
    },
    {
        "content": "<p>e.g. \"will only work if a function call is promoted in the same crate where the rustc_promotable function is declared.\"</p>",
        "id": 147364105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760728
    },
    {
        "content": "<p>but this: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=04f9d23f0b4d0f1fcfe8150c92fb4a43\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=04f9d23f0b4d0f1fcfe8150c92fb4a43\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=04f9d23f0b4d0f1fcfe8150c92fb4a43</a></p>",
        "id": 147364110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760747
    },
    {
        "content": "<p>does not compile</p>",
        "id": 147364111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760749
    },
    {
        "content": "<p>I.... what... I have almost the exact same test in the test suite</p>",
        "id": 147364130,
        "sender_full_name": "oli",
        "timestamp": 1541760801
    },
    {
        "content": "<p>lemme check</p>",
        "id": 147364132,
        "sender_full_name": "oli",
        "timestamp": 1541760803
    },
    {
        "content": "<p>I was actually looking at some tests that I noted failures in last night while reviewing NLL stuff</p>",
        "id": 147364138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760830
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=6db68998a74c8c9975358a4787330601\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=6db68998a74c8c9975358a4787330601\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=6db68998a74c8c9975358a4787330601</a> works</p>",
        "id": 147364188,
        "sender_full_name": "oli",
        "timestamp": 1541760864
    },
    {
        "content": "<p>I gotta run in a moment, I'll be back on mobile in 10 minutes</p>",
        "id": 147364195,
        "sender_full_name": "oli",
        "timestamp": 1541760878
    },
    {
        "content": "<p>wha tthe heck</p>",
        "id": 147364200,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760885
    },
    {
        "content": "<p>you made it depend on #[stable] attributes ...?</p>",
        "id": 147364204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760899
    },
    {
        "content": "<p>stability attributes probably</p>",
        "id": 147364205,
        "sender_full_name": "oli",
        "timestamp": 1541760899
    },
    {
        "content": "<p>idk</p>",
        "id": 147364212,
        "sender_full_name": "oli",
        "timestamp": 1541760909
    },
    {
        "content": "<p>it seems</p>",
        "id": 147364216,
        "sender_full_name": "oli",
        "timestamp": 1541760917
    },
    {
        "content": "<p>oh right</p>",
        "id": 147364220,
        "sender_full_name": "oli",
        "timestamp": 1541760927
    },
    {
        "content": "<p>hah \"rustc_promotable attribute must be paired with either stable or unstable attribute\"</p>",
        "id": 147364223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760931
    },
    {
        "content": "<p>why didn't I get that message earlier?</p>",
        "id": 147364228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760937
    },
    {
        "content": "<p>#[rustc_promotable] lives inside the stability struct</p>",
        "id": 147364231,
        "sender_full_name": "oli",
        "timestamp": 1541760940
    },
    {
        "content": "<p>brb</p>",
        "id": 147364234,
        "sender_full_name": "oli",
        "timestamp": 1541760951
    },
    {
        "content": "<p>okay and you don't get the message without #![feature(staged_api)]</p>",
        "id": 147364283,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541760981
    },
    {
        "content": "<p>Probably would be good to just reject the #[rustc_promotable] attribute if staged_api is off.</p>",
        "id": 147364287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541761011
    },
    {
        "content": "<p>Somewhat hard to do I think, but I'll have a look</p>",
        "id": 147364379,
        "sender_full_name": "oli",
        "timestamp": 1541761142
    },
    {
        "content": "<p>The stability parsing system needs an overhaul imo</p>",
        "id": 147364390,
        "sender_full_name": "oli",
        "timestamp": 1541761174
    },
    {
        "content": "<p>I wonder how many other queries only work if invoked and cached from the crate where their items are defined in</p>",
        "id": 147364512,
        "sender_full_name": "oli",
        "timestamp": 1541761309
    },
    {
        "content": "<blockquote>\n<p>Somewhat hard to do I think, but I'll have a look</p>\n</blockquote>\n<p>what, the rejection of <code>#[rustc_promotable]</code> ? really? I would think its just a matter of checking the feature settings if we encounter that attribute?</p>",
        "id": 147365178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541762255
    },
    {
        "content": "<p>I'm now trying to make a unit test for the cross-crate scenario. But that seems to compile fine (once one uses staged_api and what not...)</p>",
        "id": 147365529,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541762790
    },
    {
        "content": "<p>So I'm still a little confused about whether this applies to all cross-crate scenarios, or if its something particular about libstd ...</p>",
        "id": 147365534,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541762814
    },
    {
        "content": "<p>I don't see how libstd could be special that way. Did you try it without the const fn feature gate?</p>",
        "id": 147365827,
        "sender_full_name": "oli",
        "timestamp": 1541763320
    },
    {
        "content": "<p>oh, no</p>",
        "id": 147365832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763332
    },
    {
        "content": "<p>let me see about that.</p>",
        "id": 147365834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763337
    },
    {
        "content": "<p>so the const_fn feature gate is expected to loosen the rules here?</p>",
        "id": 147365845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763361
    },
    {
        "content": "<p>still seems to compile</p>",
        "id": 147365902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763404
    },
    {
        "content": "<p>let me show you my current test</p>",
        "id": 147365906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763410
    },
    {
        "content": "<p><a href=\"http://issue_55806_lib.rs\" target=\"_blank\" title=\"http://issue_55806_lib.rs\">issue_55806_lib.rs</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![stable(feature = </span><span class=\"s\">&quot;unit_test&quot;</span><span class=\"cp\">, since=</span><span class=\"s\">&quot;1.0.0&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(staged_api, rustc_attrs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![crate_type=</span><span class=\"s\">&quot;lib&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[stable(feature = </span><span class=\"s\">&quot;unit_test&quot;</span><span class=\"cp\">, since=</span><span class=\"s\">&quot;1.0.0&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[rustc_promotable]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><a href=\"http://issue-55806-xc.rs\" target=\"_blank\" title=\"http://issue-55806-xc.rs\">issue-55806-xc.rs</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">issue_55806_lib</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">issue_55806_lib</span>::<span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147365976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763497
    },
    {
        "content": "<p>Then this command <code>./build/x86_64-unknown-linux-gnu/stage1/bin/rustc ../../issue_55806_lib.rs &amp;&amp; ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc ../../issue-55806-xc.rs --extern issue_55806_lib=./libissue_55806_lib.rlib</code> runs without any error.</p>",
        "id": 147365992,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763532
    },
    {
        "content": "<p>let me try attaching it to the <code>impl</code> of a type, to see if that makes a difference...</p>",
        "id": 147366092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763630
    },
    {
        "content": "<p>These tests look correct to me</p>",
        "id": 147366126,
        "sender_full_name": "oli",
        "timestamp": 1541763699
    },
    {
        "content": "<p>as in, you'd expect them to fail into the same bug category, right?</p>",
        "id": 147366128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763719
    },
    {
        "content": "<p>Yes</p>",
        "id": 147366168,
        "sender_full_name": "oli",
        "timestamp": 1541763746
    },
    {
        "content": "<p>I don't know much about how query results are cached. Maybe its something goofy interaction there</p>",
        "id": 147366173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763769
    },
    {
        "content": "<p>I'm debugging this right now, not sure yet whether the promoted info gets lost or all stab info</p>",
        "id": 147366190,
        "sender_full_name": "oli",
        "timestamp": 1541763808
    },
    {
        "content": "<p>Are we purging stab info for stable items?</p>",
        "id": 147366195,
        "sender_full_name": "oli",
        "timestamp": 1541763822
    },
    {
        "content": "<p>I dunno</p>",
        "id": 147366197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763831
    },
    {
        "content": "<p>Shall I re-assign this bug to you  in any case? Do you expect to have much time to debug it today?</p>",
        "id": 147366253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763845
    },
    {
        "content": "<p>Yes</p>",
        "id": 147366254,
        "sender_full_name": "oli",
        "timestamp": 1541763856
    },
    {
        "content": "<p>In an hour or two</p>",
        "id": 147366257,
        "sender_full_name": "oli",
        "timestamp": 1541763866
    },
    {
        "content": "<p>(i expect to be going on paternity leave on Tuesday, and will be gone for ~2 weeks, so I'm trying to take care of as much stuff as I can today)</p>",
        "id": 147366261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541763875
    },
    {
        "content": "<p>Don't hesitate to assign things to me to get them off your plate</p>",
        "id": 147366271,
        "sender_full_name": "oli",
        "timestamp": 1541763903
    },
    {
        "content": "<p>(its mostly boring stuff. I <em>hope</em>!)</p>",
        "id": 147368432,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541766775
    },
    {
        "content": "<p>oh no... I don't think the stability attributes are good for being used here. They are inherited down to child items. So a const fn declared inside a <code>rustc_promotable</code> const fn will also be promotable</p>",
        "id": 147376931,
        "sender_full_name": "oli",
        "timestamp": 1541775689
    },
    {
        "content": "<p>this is independent of the issue at hand, but it seems moderately dangerous that we can attach <code>#[rustc_promotable]</code> to modules and everything inside will be promotable</p>",
        "id": 147377009,
        "sender_full_name": "oli",
        "timestamp": 1541775728
    },
    {
        "content": "<p>fun fact: only the inherent methods on builtin ints exhibit this behavior</p>",
        "id": 147380554,
        "sender_full_name": "oli",
        "timestamp": 1541779117
    },
    {
        "content": "<p>all other promotable const fns work</p>",
        "id": 147380563,
        "sender_full_name": "oli",
        "timestamp": 1541779125
    },
    {
        "content": "<p>Ok, so I have circled this in. it gets weird now: when the value is put into the <code>stab_map</code>, it correctly has <code>promotable = true</code>. When I read this stability from another crate, it has all other values the same (like <code>feature = \"rustc\"</code> and <code>since = \"1.0.0\"), except </code>promotable` is now false.</p>",
        "id": 147382838,
        "sender_full_name": "oli",
        "timestamp": 1541781138
    },
    {
        "content": "<p>and it's not even related to cross crate</p>",
        "id": 147382964,
        "sender_full_name": "oli",
        "timestamp": 1541781244
    },
    {
        "content": "<p>and... it's only for the unsigned builtin types</p>",
        "id": 147383825,
        "sender_full_name": "oli",
        "timestamp": 1541782076
    },
    {
        "content": "<p><code>E-too-many-macros</code></p>",
        "id": 147383886,
        "sender_full_name": "oli",
        "timestamp": 1541782108
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/55828\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55828\">https://github.com/rust-lang/rust/pull/55828</a> fixes it with two lines -.-</p>",
        "id": 147384600,
        "sender_full_name": "oli",
        "timestamp": 1541782745
    }
]