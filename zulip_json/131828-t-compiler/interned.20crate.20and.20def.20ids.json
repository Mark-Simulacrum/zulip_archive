[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<p>Starting a fresh discussion on replacing ids with something stable.</p>\n<p>My idea was to intern the information that the id references at creation time. So a DefId now becomes an interned DefPath plus possibly even some other things that we normally have queries for. Similarly a CrateId could become an interned handle to the crate metadata. In the latter case this means it's somewhat mutable due to lazy loading, but I think we can make that work out.</p>\n<p>This kind of interning avoids a lot of lookups. I'm not sure how much havoc it'll cause on incremental, but if we avoid putting spans into the interned values it should cause few unwanted invalidations.</p>",
        "id": 276539884,
        "sender_full_name": "oli",
        "timestamp": 1648156199
    },
    {
        "content": "<p>How is that different from what we already have?</p>",
        "id": 276540005,
        "sender_full_name": "bjorn3",
        "timestamp": 1648156257
    },
    {
        "content": "<p>The incr comp issues with them are because we leak too much about the intern index itself. That is the order and the actual value.</p>",
        "id": 276540078,
        "sender_full_name": "bjorn3",
        "timestamp": 1648156304
    },
    {
        "content": "<p>Do you mean using the same interner for all compilation sessions reusing the same incr cache? So holes are never filled?</p>",
        "id": 276540362,
        "sender_full_name": "bjorn3",
        "timestamp": 1648156463
    },
    {
        "content": "<p>I we are going to remove ids, why not just replace DefId by DefPathHash and CrateNum by StableCrateId?</p>",
        "id": 276541677,
        "sender_full_name": "cjgillot",
        "timestamp": 1648157189
    },
    {
        "content": "<p>Indexing with the hashes or stable ids requires hashmaps instead of vecs and may not be performant</p>",
        "id": 276542092,
        "sender_full_name": "oli",
        "timestamp": 1648157411
    },
    {
        "content": "<p>CrateNum, DefIndex, and DefId are basically already interning keys (that unfortunately leak their numeric values). So I think we could probably replace:</p>\n<ul>\n<li><code>CrateNum</code> with <code>type  CrateId = Interned&lt;(crate-name, disambiguation-info)&gt;</code></li>\n<li><code>DefIndex/LocalDefId</code> with <code>type  LocalDefId = Interned&lt;DefPath&gt;</code></li>\n<li><code>DefId</code> with <code>type DefId = Interned&lt;(CrateId, DefPath)&gt;</code></li>\n</ul>\n<p>Of course the interned value could also contain stable hashes to accelerate things. DefPath could be represented as pointers into a tree of DefKeys,  much like we already have in the DefPathTable now.</p>\n<p>An approach to make this a bit more efficient could be to not use pointers, but <code>u32</code> IDs that stay <em>stable across compilation sessions</em> (as suggested <a href=\"https://hackmd.io/T1efvPvUTbSuiKD3mKhvuA#Make-pointer-like-IDs-stable-across-compilation-session-boundaries-STABLE_IDS\">here</a>). That would effectively turn interning IDs into constants as far as incr. comp. is concerned, and we would not have to worry about them not implementing Ord or hashing their numeric values verbatim.</p>",
        "id": 276593535,
        "sender_full_name": "mw",
        "timestamp": 1648200296
    },
    {
        "content": "<blockquote>\n<p>CrateNum with type  CrateId = Interned&lt;(crate-name, disambiguation-info)&gt;</p>\n</blockquote>\n<p>Technically that is missing <code>is-exe</code>: <a href=\"https://github.com/rust-lang/rust/blob/8a0c55046c7092d9e019dad03729e8d32e38df72/compiler/rustc_span/src/def_id.rs#L152\">https://github.com/rust-lang/rust/blob/8a0c55046c7092d9e019dad03729e8d32e38df72/compiler/rustc_span/src/def_id.rs#L152</a></p>",
        "id": 276593991,
        "sender_full_name": "bjorn3",
        "timestamp": 1648200564
    },
    {
        "content": "<p>that would be part of \"disambiguation-info\"</p>",
        "id": 276594815,
        "sender_full_name": "mw",
        "timestamp": 1648201112
    },
    {
        "content": "<p>please read the above as pseudo-code :) It's meant more as a conceptual sketch rather than a strict definition of what I think it could look like.</p>",
        "id": 276594960,
        "sender_full_name": "mw",
        "timestamp": 1648201211
    },
    {
        "content": "<p>I also think that it might be a good idea to switch to a regular, pointer-based interning approach before trying out the persistent IDs optimization on top of it.</p>",
        "id": 276595061,
        "sender_full_name": "mw",
        "timestamp": 1648201292
    },
    {
        "content": "<p>the advantage of something using pointers, in my opinion, is that it is much more clear that one mustn't fingerprint or persist their numerical values, whereas currently that can happen quite easily by accident.</p>",
        "id": 276595187,
        "sender_full_name": "mw",
        "timestamp": 1648201399
    },
    {
        "content": "<p>Both pointer based interning and persistent IDs suffer from the fact that their values are not dense and thus any map keyed by them needs to be a hashmap and not an IndexVec as is currently the case.</p>",
        "id": 276595351,
        "sender_full_name": "bjorn3",
        "timestamp": 1648201527
    },
    {
        "content": "<p>If we start with DefId we don't even have the issue of size changes</p>",
        "id": 276595360,
        "sender_full_name": "oli",
        "timestamp": 1648201537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/interned.20crate.20and.20def.20ids/near/276595351\">said</a>:</p>\n<blockquote>\n<p>Both pointer based interning and persistent IDs suffer from the fact that their values are not dense and thus any map keyed by them needs to be a hashmap and not an IndexVec as is currently the case.</p>\n</blockquote>\n<p>That is true. I'm not sure, however, how much of an actual perf impact that has.</p>",
        "id": 276595435,
        "sender_full_name": "mw",
        "timestamp": 1648201587
    },
    {
        "content": "<p>At least for persistent IDs, we might win back quite a bit of performance in some cases because we can fingerprint the much smaller values verbatim, without having to look up their corresponding stable version.</p>",
        "id": 276595628,
        "sender_full_name": "mw",
        "timestamp": 1648201685
    },
    {
        "content": "<p>That would make incr comp less deterministic though as it now depends on the edit history.</p>",
        "id": 276595911,
        "sender_full_name": "bjorn3",
        "timestamp": 1648201878
    },
    {
        "content": "<p>While currently it is a pure function from input to incr comp cache. (ignoring all bugs)</p>",
        "id": 276595980,
        "sender_full_name": "bjorn3",
        "timestamp": 1648201915
    },
    {
        "content": "<p>Yes, that is the major concern here. It does make me uneasy</p>",
        "id": 276595986,
        "sender_full_name": "mw",
        "timestamp": 1648201918
    },
    {
        "content": "<p>I think it's the main reason why we didn't do it from the beginning</p>",
        "id": 276596065,
        "sender_full_name": "mw",
        "timestamp": 1648201946
    },
    {
        "content": "<p>of course back then we didn't anticipate how much trouble the current approach would cause :)</p>",
        "id": 276596120,
        "sender_full_name": "mw",
        "timestamp": 1648201986
    },
    {
        "content": "<p>Also aren't a large part of the issues caused by spans which your proposal says nothing about?</p>",
        "id": 276596148,
        "sender_full_name": "bjorn3",
        "timestamp": 1648202010
    },
    {
        "content": "<p>spans are a separate problem, yes</p>",
        "id": 276596228,
        "sender_full_name": "mw",
        "timestamp": 1648202053
    },
    {
        "content": "<p>Another potential problem with persistent IDs is that there still would need to be some translation while importing them from upstream crates. That could turn out to be a source of bugs.</p>",
        "id": 276596613,
        "sender_full_name": "mw",
        "timestamp": 1648202286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/131828-t-compiler/topic/interned.20crate.20and.20def.20ids/near/276593535\">said</a>:</p>\n<blockquote>\n<p>An approach to make this a bit more efficient could be to not use pointers, but <code>u32</code> IDs that stay <em>stable across compilation sessions</em> (as suggested <a href=\"https://hackmd.io/T1efvPvUTbSuiKD3mKhvuA#Make-pointer-like-IDs-stable-across-compilation-session-boundaries-STABLE_IDS\">here</a>). That would effectively turn interning IDs into constants as far as incr. comp. is concerned, and we would not have to worry about them not implementing Ord or hashing their numeric values verbatim.</p>\n</blockquote>\n<p>Upon further reflection, I think the additional \"Persistent IDs\" optimization is probably too risky because of the issues already mentioned: (1) the results of incr. comp. will depend on the complete history of compilation sessions, and (2) there's risk of accidentally using IDs from upstream crates verbatim instead of translating them.</p>\n<p>However, making IDs interned pointers to something stable, as suggested initially, still seems like something that's definitely worth a try, in my opinion.</p>",
        "id": 277114767,
        "sender_full_name": "mw",
        "timestamp": 1648631379
    },
    {
        "content": "<p>I'll start an experiment with DefId then</p>",
        "id": 277116114,
        "sender_full_name": "oli",
        "timestamp": 1648632069
    },
    {
        "content": "<p>I'm wondering if CrateNum would be easier</p>",
        "id": 277117364,
        "sender_full_name": "mw",
        "timestamp": 1648632737
    },
    {
        "content": "<p>but with DefId you don't have to worry about data type size and indices being contiguous, so nevermind :)</p>",
        "id": 277117525,
        "sender_full_name": "mw",
        "timestamp": 1648632825
    },
    {
        "content": "<p>Yea ^^ also if cratenum gets a lifetime, so must DefId, so the annoying part of the work needs to be done anyway</p>",
        "id": 277119268,
        "sender_full_name": "oli",
        "timestamp": 1648633834
    }
]