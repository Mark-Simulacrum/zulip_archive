[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> , would you agree that at this point, this is either not-a-bug or a T-libs issue?</p>",
        "id": 160000672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551790963
    },
    {
        "content": "<p>I commented on the issue, but yes, not-a-bug, someone misused <code>mem::uninitialized</code></p>",
        "id": 160000801,
        "sender_full_name": "oli",
        "timestamp": 1551791093
    },
    {
        "content": "<p>Basically using <code>mem::uninitialized</code> is UB unless your type has a valid value for all bits patterns, and even then it's questionable</p>",
        "id": 160000916,
        "sender_full_name": "oli",
        "timestamp": 1551791164
    },
    {
        "content": "<p>okay, in this case I think the <code>mem::uninitialized</code> originates from the <code>arraydeque</code>  crate</p>",
        "id": 160001017,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551791265
    },
    {
        "content": "<p>Luckily this is trivial to demo, so I can file a bug with the <code>arraydeque</code> crate itself:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tester</span>: <span class=\"nc\">ArrayDeque</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ArrayDeque</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">tester</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">());</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160001770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551791897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> , just to be clear, your <a href=\"https://github.com/rust-lang/rust/issues/58684#issuecomment-469678452\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58684#issuecomment-469678452\">comment</a> is just meant to reenforce the statement that this is not a bug in <code>rustc</code> nor <code>libstd</code>, but rather a misuse of <code>mem::uninitialized</code>, right?</p>",
        "id": 160002529,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551792498
    },
    {
        "content": "<p>Yes. <code>ManuallyDrop::&lt;T&gt;::new(uninitialized())</code>is invalid for most/all <code>T</code>.</p>",
        "id": 160002569,
        "sender_full_name": "nagisa",
        "timestamp": 1551792544
    },
    {
        "content": "<p>If <code>let x: T = uninitialized()</code> is wrong, then <code>let x: ManuallyDrop&lt;T&gt; = uninitialized</code> or <code>let x = ManuallyDrop::&lt;T&gt;::from(uninitialized())</code> is also wrong.</p>",
        "id": 160002616,
        "sender_full_name": "nagisa",
        "timestamp": 1551792601
    },
    {
        "content": "<p>okay thanks. I was actually trying to remember the name of <code>MaybeUninit</code> (and I was definitely staring at <code>ManuallyDrop</code> trying to remember it), so your comment was certainly appreciated.</p>",
        "id": 160002673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551792608
    },
    {
        "content": "<blockquote>\n<p>Yes. <code>ManuallyDrop::&lt;T&gt;::new(uninitialized())</code>is invalid for most/all <code>T</code>.</p>\n</blockquote>\n<p>Hmm. I would at least think that if <code>uninitialized</code> is <em>valid</em> for <code>T</code>, then it is also valid for <code>ManuallyDrop::&lt;T&gt;</code>,  no?</p>",
        "id": 160002724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551792671
    },
    {
        "content": "<p>or wait, is there something I'm overlooking with drop flag initialization?</p>",
        "id": 160002741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551792686
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 160002749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551792695
    },
    {
        "content": "<p><code>most</code> is the right thing</p>",
        "id": 160002815,
        "sender_full_name": "nagisa",
        "timestamp": 1551792731
    },
    {
        "content": "<p>if <code>let x: T = uninitialized()</code> is valid, then it is also valid to construct ManuallyDrop of the same, or use that <code>x</code> in general</p>",
        "id": 160002828,
        "sender_full_name": "nagisa",
        "timestamp": 1551792758
    },
    {
        "content": "<p>okay. I think that answers that question.</p>",
        "id": 160002842,
        "sender_full_name": "pnkfelix",
        "timestamp": 1551792769
    }
]