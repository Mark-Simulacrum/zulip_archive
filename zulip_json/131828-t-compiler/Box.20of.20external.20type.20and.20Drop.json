[
    {
        "content": "<p>Oookay, so I have the following setup:</p>\n<ul>\n<li>no_std</li>\n<li>FFI-heavy crate, building safe wrappers around C functions</li>\n<li>Custom allocator that is guaranteed just to call C memalign and free (meaning that the alloc Layout is unused for dealloc)</li>\n<li>Modeling C pointers to plain old data structs as <code>Box&lt;T&gt;</code> -&gt; With my custom allocator, allocating a struct from C and dropping the Box, or allocating as Box and freeing from C should be fine</li>\n<li><code>extern</code> types for opaque C structs<br>\n... and now we have a problem: I can Box::from_raw() a pointer to such an external type, but as it's impossible for Rust to determine the Layout, dropping the Box simply does nothing instead of freeing the data</li>\n</ul>\n<p>Now I'm wondering if it would be possible to extend GlobalAlloc in a way that would allow allocators that don't need to know the layout for dealloc? I assume doing this in a backwards-compatible way would be very difficult and likely not worth the added complexity...</p>\n<p>If this is not feasible, should we at least add a lint against creating a Box of an <code>extern</code> type? Directly related: <a href=\"https://github.com/rust-lang/rust/issues/49708\" title=\"https://github.com/rust-lang/rust/issues/49708\">https://github.com/rust-lang/rust/issues/49708</a> - if we had a trait that would disallow size_of_val and align_of_val for <code>extern</code> types, the same trait bound could be added to Box&lt;T&gt;, as a Box of something that can't be deallocated doesn't make sense IMO.</p>\n<p>Thoughts?</p>",
        "id": 195988571,
        "sender_full_name": "NeoRaider",
        "timestamp": 1588355285
    },
    {
        "content": "<p>My first thought would be to not use <code>Box</code>, but roll your own \"owned pointer\" type. I think you are leaving the space <code>Box</code> is designed for.</p>",
        "id": 196051894,
        "sender_full_name": "RalfJ",
        "timestamp": 1588426436
    },
    {
        "content": "<p>Implement deref and/or derefmut and drop and you are good to go</p>",
        "id": 196052380,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1588427168
    },
    {
        "content": "<p>And might as well make your newtype  repr(transparent)</p>",
        "id": 196052958,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1588427892
    },
    {
        "content": "<p>Thanks, that's what I went for.</p>",
        "id": 196055175,
        "sender_full_name": "NeoRaider",
        "timestamp": 1588431294
    }
]