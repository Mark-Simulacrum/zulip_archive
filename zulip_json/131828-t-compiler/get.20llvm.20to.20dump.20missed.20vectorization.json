[
    {
        "content": "<p>So, clang seems to have a way to log when it missed some vectorizations on loops: <a href=\"https://llvm.org/docs/Vectorizers.html#id6\">https://llvm.org/docs/Vectorizers.html#id6</a></p>\n<p>Does anyone know if llvm has a generic version of this? it seems like this is a clang-specific thing but im wondering if its just a thin wrapper over some LLVM thing that we ideally could run ourselves and have a way to identify why llvm missed some vectorizations, which would be very helpful for a lot of projects.</p>",
        "id": 247511433,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627503309
    },
    {
        "content": "<p>actually remarks seem to be an llvm thing, not a clang specific thing <a href=\"https://llvm.org/docs/Remarks.html\">https://llvm.org/docs/Remarks.html</a></p>",
        "id": 247512634,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627503940
    },
    {
        "content": "<p>You can use <code>-Cllvm-args</code> to pass arbitrary arguments to LLVM. They don't always exactly match clang though.</p>",
        "id": 247515604,
        "sender_full_name": "bjorn3",
        "timestamp": 1627505469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah it seems that the remark flags are the same for llvm/clang, although i expect it would dump an absolute ton of remarks, although it can probably easily be filtered with a script based on the origin of the remark</p>",
        "id": 247517914,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627506598
    },
    {
        "content": "<p>ill explore this more, if this works well it should be really helpful to have as an unstable rustc flag or something of the sort</p>",
        "id": 247518029,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627506659
    },
    {
        "content": "<p>ooh its actually dumping somewhat useful info:</p>\n<div class=\"codehilite\"><pre><span></span><code>remark: /rustc/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5\\library\\core\\src\\iter\\adapters\\zip.rs:228:0: loop not vectorized\n</code></pre></div>\n<p>this is with pass-remarks-missed, then with analysis:</p>\n<div class=\"codehilite\"><pre><span></span><code>remark: /rustc/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5\\library\\core\\src\\iter\\adapters\\zip.rs:228:0: loop not vectorized: loop control flow is not understood by vectorizer\nremark: /rustc/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5\\library\\alloc\\src\\raw_vec.rs:337:0: loop not vectorized: loop contains a switch statement\nremark: /rustc/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5\\library\\alloc\\src\\vec\\mod.rs:1667:0: loop not vectorized: value that could not be identified as reduction is used outside the loop\nremark: /rustc/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5\\library\\core\\src\\iter\\adapters\\zip.rs:228:0: loop not vectorized: could not determine number of loop iterations\n</code></pre></div>",
        "id": 247519470,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627507399
    },
    {
        "content": "<p>this being the function: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">new</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247519505,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627507422
    },
    {
        "content": "<p>although the info is kind of in the wrong place because the iterator calls arent inlined</p>",
        "id": 247519588,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627507473
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>shorter, vectorizes :D</p>\n<p><a href=\"https://rust.godbolt.org/z/YG1jT7vjr\">https://rust.godbolt.org/z/YG1jT7vjr</a></p>",
        "id": 247520209,
        "sender_full_name": "The 8472",
        "timestamp": 1627507892
    },
    {
        "content": "<p>yeah i realize what the issue here is, i just wanted to see if llvm could tell me what it is</p>",
        "id": 247520236,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627507913
    },
    {
        "content": "<p>sorry, couldn't resist the godbolt golfing</p>",
        "id": 247520330,
        "sender_full_name": "The 8472",
        "timestamp": 1627507964
    },
    {
        "content": "<p>lol</p>",
        "id": 247520331,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627507969
    },
    {
        "content": "<p>for some reason i cant pass <code>-pass-remarks-output</code> to rustc</p>",
        "id": 247520396,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508036
    },
    {
        "content": "<p>I didn't know about remarks this will be useful for optimization work <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 247520606,
        "sender_full_name": "The 8472",
        "timestamp": 1627508195
    },
    {
        "content": "<p>i think the last remark is the useful one, the rest are kind of meh</p>",
        "id": 247520622,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508207
    },
    {
        "content": "<p>because it cant figure out if a and b are the same length</p>",
        "id": 247520645,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508222
    },
    {
        "content": "<p>im guessing vectorization is run before inlining, which is why this is pointing to external functions</p>",
        "id": 247520719,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508281
    },
    {
        "content": "<p>I'm pretty sure it happens after inlining. some vectorization potential is only unlocked when the caller context is known</p>",
        "id": 247520809,
        "sender_full_name": "The 8472",
        "timestamp": 1627508332
    },
    {
        "content": "<p>then it might be preserving info about the original function</p>",
        "id": 247520845,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508370
    },
    {
        "content": "<p>yeah, debuginfo does that too</p>",
        "id": 247520917,
        "sender_full_name": "The 8472",
        "timestamp": 1627508411
    },
    {
        "content": "<p>yeah although this makes it a little bit less user friendly</p>",
        "id": 247520961,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508453
    },
    {
        "content": "<p><code>-C remark=all</code> prints LLVM optimization remarks.</p>",
        "id": 247521303,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627508744
    },
    {
        "content": "<p>it prints nothing for some reason</p>",
        "id": 247521463,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508870
    },
    {
        "content": "<p>using <code>RUSTFLAGS=\"-C remark=all\"</code></p>",
        "id": 247521528,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627508905
    },
    {
        "content": "<p>ah it prints something with cargo rustc but not cargo build, odd</p>",
        "id": 247521776,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627509099
    },
    {
        "content": "<p>doesnt print anything related to vectorization however</p>",
        "id": 247522002,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627509257
    },
    {
        "content": "<p>I also researched the non-vectorized version more, and it turns out llvm is really bad at vectorizing anything with a vector push. Im guessing llvm has no idea how to propagate the data flow info through the loop and guess that theres no way the vec can realloc</p>",
        "id": 247526781,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627512602
    },
    {
        "content": "<p>this vectorizes which proves it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo_with_unsafe_length_assertion</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">().</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">std</span>::<span class=\"n\">hint</span>::<span class=\"n\">unreachable_unchecked</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">new</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247526836,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627512621
    },
    {
        "content": "<p>which further proves that iterators are so much better than \"manual\" loops like this <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 247526894,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1627512674
    },
    {
        "content": "<p>to be fair, significant amounts of unsafe code in the standard library are dedicated to optimize the collect version of this case.</p>",
        "id": 247527615,
        "sender_full_name": "The 8472",
        "timestamp": 1627513197
    }
]