[
    {
        "content": "<p>as part of investigating <a href=\"https://github.com/rust-lang/rust/issues/91671\">#91671</a>, I want to bootstrap Rust on  Linux x86_64 host (x86_64-unknown-linux-gnu, I think) with support for targeting Apple M1 (aarch64-apple-darwin).</p>",
        "id": 265844304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202199
    },
    {
        "content": "<p>Before I got to the point of bootstrapping my own <code>rustc</code> for this, I was able to figure out what incantations to give to <code>rustup</code> to be able to cross-compile to  aarch64-apple-darwin, at least to sufficient degree that I could observe the LLVM problem I'm debugging.</p>",
        "id": 265844504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202346
    },
    {
        "content": "<p>but when it comes to actually <em>building</em> a local <code>rustc</code> with the necessary bits built in, I hit a snag</p>",
        "id": 265844587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202376
    },
    {
        "content": "<p>I was under the impression that in general it was <em>hard</em> to cross-compile for macOS, primarily because of needing macOS libraries around.</p>",
        "id": 265844610,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640202397
    },
    {
        "content": "<p>I guess I <del>should</del> could first simplify things by targeting aarch64-linux instead of apple-darwin</p>",
        "id": 265844679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202439
    },
    {
        "content": "<p>(I wasn't doing that, because I was using an Apple M1 to investigate the problem locally, and so it made the most sense to me to focus on cross-compiling to that platform, <em>if</em> it is feasible to do that bootstrap. And since the nightly compiler we distribute supports it, I figured I could do it too....)</p>",
        "id": 265844797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Q.3A.20bootstrap.20Linux.20w.2F.20cross-compile.20to.20Apple.20M1.20support.3F/near/265844610\">said</a>:</p>\n<blockquote>\n<p>I was under the impression that in general it was <em>hard</em> to cross-compile for macOS, primarily because of needing macOS libraries around.</p>\n</blockquote>\n<p>Do our CI systems deal with this by having the Mac OS libraries accessible to their docker images?</p>",
        "id": 265844872,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202566
    },
    {
        "content": "<p>In any case, the specific snag I am hitting is this error: </p>\n<div class=\"codehilite\"><pre><span></span><code>  running: &quot;cc&quot; &quot;-O0&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-g&quot; &quot;-fno-omit-frame-pointer&quot; &quot;-arch&quot; &quot;arm64&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; \\\n&quot;-arch&quot; &quot;arm64&quot; &quot;-stdlib=libc++&quot; &quot;-I&quot; &quot;/media/pnkfelix/Rust/issue_91671/rust-91671/src/llvm-project/compiler-rt/lib/builtins&quot; &quot;-fno-builtin&quot; &quot;-fvisibility=hidden&quot; &quot;-\\\nffreestanding&quot; &quot;-DVISIBILITY_HIDDEN&quot; &quot;-o&quot; &quot;/media/pnkfelix/Rust/issue_91671/rust-91671/objdir-dbg/build/x86_64-unknown-linux-gnu/stage1-std/aarch64-apple-darwin/debu\\\ng/build/compiler_builtins-ff733c215b8d9a3e/out/lse_cas1_relax.o&quot; &quot;-c&quot; &quot;/media/pnkfelix/Rust/issue_91671/rust-91671/objdir-dbg/build/x86_64-unknown-linux-gnu/stage1-s\\\ntd/aarch64-apple-darwin/debug/build/compiler_builtins-ff733c215b8d9a3e/out/lse_cas1_relax.S&quot;\n  cargo:warning=cc: error: unrecognized command-line option ‘-arch’\n  cargo:warning=cc: error: unrecognized command-line option ‘-arch’\n  cargo:warning=cc: error: unrecognized command-line option ‘-stdlib=libc++’\n  exit status: 1\n</code></pre></div>",
        "id": 265844927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202599
    },
    {
        "content": "<p>I.e. it seems like I'm clearly invoking a compiler with flags that it doesn't expect. so I am then inferring that I need to feed in the path to a different compiler for cross-compilation purposes?</p>",
        "id": 265845025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202647
    },
    {
        "content": "<p>The CI compiles everything for Apple on Apple hardware AFAIK.</p>",
        "id": 265845090,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1640202709
    },
    {
        "content": "<p>I think if we could reliably cross-compile we <em>would</em>. At the moment, I think bors is rate-limited by macOS hardware.</p>",
        "id": 265845234,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640202784
    },
    {
        "content": "<p>Wait, the Linux x86_64 rustc that has support for Apple M1 output is built on an Apple M1 ?</p>",
        "id": 265845244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202791
    },
    {
        "content": "<p>We have a Linux rustc with support for Apple M1 output?</p>",
        "id": 265845410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640202908
    },
    {
        "content": "<p>In any case, I don't <em>need</em> to target Apple M1 to reproduce this bug. I.e. I just trivially reproduced the seg fault again when targeting <code>arch64-unknown-linux-gnu</code></p>",
        "id": 265845412,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Q.3A.20bootstrap.20Linux.20w.2F.20cross-compile.20to.20Apple.20M1.20support.3F/near/265845410\">said</a>:</p>\n<blockquote>\n<p>We have a Linux rustc with support for Apple M1 output?</p>\n</blockquote>\n<p>At the very least, it lets you choose that as a target.</p>",
        "id": 265845427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202923
    },
    {
        "content": "<p>I hadn't had the impression that it was generally feasible to <code>rustup target add</code> a macOS target on a non-macOS system.</p>",
        "id": 265845436,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640202928
    },
    {
        "content": "<p>(without massive hackery and dubiously legal copying of native libraries)</p>",
        "id": 265845455,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640202945
    },
    {
        "content": "<p>Indeed. There is <a href=\"https://github.com/tpoechtrager/osxcross\">https://github.com/tpoechtrager/osxcross</a> but that is quite experimental.</p>",
        "id": 265845527,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1640202978
    },
    {
        "content": "<p><a href=\"https://github.com/pnkfelix/issue-91671-a64-doctestfail/blob/main/repro.sh\">https://github.com/pnkfelix/issue-91671-a64-doctestfail/blob/main/repro.sh</a></p>",
        "id": 265845547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640202992
    },
    {
        "content": "<p>Note that its entirely possible that <em>if</em> a binary were generated here, that it doesn't actually work. My goal here wasn't to actually produce M1 output; it was to reproduce a segfault within LLVM that seems correlated to Aarch64 target<strong>s</strong></p>",
        "id": 265845607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640203052
    },
    {
        "content": "<p>but I was indeed able to do <code>rustup target add aarch64-apple-darwin</code></p>",
        "id": 265845709,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640203113
    },
    {
        "content": "<p>If it is reproducible with <code>arch64-unknown-linux-gnu</code> the additional flaming hoops one would need to jump through to get macos cross compilation working are probably not worth it.</p>",
        "id": 265845749,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1640203153
    },
    {
        "content": "<p>(sorry, mistyped before from when I locally edited script to target <code>aarch64-unknown-linux-gnu</code> instead)</p>",
        "id": 265845754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640203158
    },
    {
        "content": "<p>yeah okay. I'm still fascinated that its so hard to recreate the environment our CI must be using...</p>",
        "id": 265845794,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640203185
    },
    {
        "content": "<p>but I'll go investigate whether things go more smoothly when bootstrapping to target aarch64-unknown-linux-gnu instead of aarch64-apple-darwin.</p>",
        "id": 265845953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640203235
    },
    {
        "content": "<p>(if nothing else, that at least fails with an error that I find far more immediately actionable: <code>couldn't find required command: \"aarch64-linux-gnu-gcc\"</code>)</p>",
        "id": 265846326,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640203325
    },
    {
        "content": "<p>(okay, targeting <code>aarch64-linux-gnu-gcc</code> went more smoothly, as expected)</p>",
        "id": 265848330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1640204491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Q.3A.20bootstrap.20Linux.20w.2F.20cross-compile.20to.20Apple.20M1.20support.3F/near/265845709\">said</a>:</p>\n<blockquote>\n<p>but I was indeed able to do <code>rustup target add aarch64-apple-darwin</code></p>\n</blockquote>\n<p>That <code>rust-std</code> target was built on a macOS machine.  CI doesn't build all std targets on every host.  Each std target distribution is generally built once in one of the myriad of CI jobs and uploaded to a common bucket.  When you run <code>rustup target add ...</code>, that is agnostic to your host.  You can install any target, but they may not all work (unless you employ some heroics).</p>",
        "id": 265864750,
        "sender_full_name": "Eric Huss",
        "timestamp": 1640214540
    }
]