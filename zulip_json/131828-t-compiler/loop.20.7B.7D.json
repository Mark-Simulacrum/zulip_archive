[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span></p>",
        "id": 159638979,
        "sender_full_name": "nagisa",
        "timestamp": 1551378744
    },
    {
        "content": "<p>To anybody reading along, <a href=\"#narrow/stream/185694-t-compiler.2Fwg-meta/topic/LLVM.20WG/near/159637873\" title=\"#narrow/stream/185694-t-compiler.2Fwg-meta/topic/LLVM.20WG/near/159637873\">see this first</a></p>",
        "id": 159639023,
        "sender_full_name": "nagisa",
        "timestamp": 1551378774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> what happens is that once you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">i32</span> <span class=\"vg\">@foo</span><span class=\"p\">()</span><span class=\"c\">;</span>\n<span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"nv nv-Anonymous\">%0</span>\n</pre></div>\n\n\n<p>that gets optimised out in following steps:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">call</span> <span class=\"kt\">void</span> <span class=\"vg\">@foo</span><span class=\"p\">()</span>\n<span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"k\">undef</span> <span class=\"c\">; because foo never terminates</span>\n</pre></div>\n\n\n<p>then</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">; foo call removed because it is readnone and its results are never used and it has no side-effects</span>\n<span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"k\">undef</span> <span class=\"c\">; because foo never terminates</span>\n</pre></div>",
        "id": 159639201,
        "sender_full_name": "nagisa",
        "timestamp": 1551378868
    },
    {
        "content": "<p>At some point (does not matter whether it happens before or after the call removal) the return instruction also becomes <code>unreachable</code></p>",
        "id": 159639374,
        "sender_full_name": "nagisa",
        "timestamp": 1551378973
    },
    {
        "content": "<p>and that is why you end with a function that contains a single <code>unreachable</code> rather than an infinite loop.</p>",
        "id": 159639393,
        "sender_full_name": "nagisa",
        "timestamp": 1551378992
    },
    {
        "content": "<p>making sure that such <code>@foo</code> is never marked as side-effect-free (which any of <code>readnone</code>, <code>readonly</code> or <code>writeonly</code> imply) resolves this issue in my testing</p>",
        "id": 159639510,
        "sender_full_name": "nagisa",
        "timestamp": 1551379078
    },
    {
        "content": "<p>Seems simple enough, right?</p>",
        "id": 159639633,
        "sender_full_name": "nagisa",
        "timestamp": 1551379150
    },
    {
        "content": "<p>First thing I proposed to LLVM people is to just consider <code>noreturn</code> attribute as a \"this has side-effects\" but apparently it is possible that this is not always inferred right.</p>",
        "id": 159639785,
        "sender_full_name": "nagisa",
        "timestamp": 1551379235
    },
    {
        "content": "<p>That seems like something that should be the case regardless of whether it covers all cases...</p>",
        "id": 159639916,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1551379319
    },
    {
        "content": "<p>That’s how I felt as well. Then we can also somehow make sure that analysis for noreturn always runs as a dependency for the analysis for readnone and (read|write)only</p>",
        "id": 159640064,
        "sender_full_name": "nagisa",
        "timestamp": 1551379381
    },
    {
        "content": "<p>For that purpose you're not interested in noreturn though, but in maybe noreturn. Basically pretty much any function that has a loop without known tripcount.</p>",
        "id": 159640198,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1551379454
    },
    {
        "content": "<p>Indeed, and that was the part that I had trouble with <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 159640306,
        "sender_full_name": "nagisa",
        "timestamp": 1551379545
    },
    {
        "content": "<p>I’m fairly unfamiliar with how that area of code works.</p>",
        "id": 159640378,
        "sender_full_name": "nagisa",
        "timestamp": 1551379575
    }
]