[
    {
        "content": "<p>What would need to happen internally to permit unstable trait impls? If that is even desired.</p>",
        "id": 245438730,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625835340
    },
    {
        "content": "<p>you'd have to make the trait selection logic aware of them at least</p>",
        "id": 245439440,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625835719
    },
    {
        "content": "<p>theoretically, I believe we could even warn if an unstable impl is about to make some code ambiguous, by removing unstable impls during winnowing and emitting a warning there</p>",
        "id": 245439599,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625835807
    },
    {
        "content": "<p>but I'm not sure if this would miss some edge case</p>",
        "id": 245439621,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625835819
    },
    {
        "content": "<p>I think the bigger issue is that trait selection is (and has to be) \"global\", for soundness, but which unstable features are enabled is a \"local\" property</p>",
        "id": 245455336,
        "sender_full_name": "eddyb",
        "timestamp": 1625843320
    },
    {
        "content": "<p>so for every single possible trait query, you'd have to <em>not only</em> make an explicit <em>choice</em> of what's responsible for \"the enabled unstable features set\", but <em>also</em> somehow never cause such a query to happen again with a different choice</p>",
        "id": 245455460,
        "sender_full_name": "eddyb",
        "timestamp": 1625843398
    },
    {
        "content": "<p>the closest thing we can do is make an <code>impl</code> hidden from method selection, i.e. make method calls not resolve to a trait if the resulting <code>impl</code> is marked in a certain way. I believe this is how the <code>IntoIterator</code> for arrays issue was resolved</p>",
        "id": 245455623,
        "sender_full_name": "eddyb",
        "timestamp": 1625843456
    },
    {
        "content": "<p>that's pretty much only possible because the choice of where a method comes from is recorded. but how bounds got satisfied isn't, and is always recomputed (with caching). this is especially significant cross-crate</p>",
        "id": 245455822,
        "sender_full_name": "eddyb",
        "timestamp": 1625843556
    },
    {
        "content": "<p>you compile a function in a crate, and then codegen it by using it from another crate, the necessary trait impl selection gets done in the context of the latter</p>",
        "id": 245455901,
        "sender_full_name": "eddyb",
        "timestamp": 1625843605
    },
    {
        "content": "<p>ah, yeah, so we could only fail compilation when trying to use an unstable impl, not warn and continue</p>",
        "id": 245456008,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625843652
    },
    {
        "content": "<p>hmm there's a thing that requires very little internal work, which is to inject certain unstable features into the <code>ParamEnv</code> of every generic definition which can observe them being enabled</p>",
        "id": 245456096,
        "sender_full_name": "eddyb",
        "timestamp": 1625843705
    },
    {
        "content": "<p>i.e. pretend there's a <code>(): FooEnabled</code> bound in the <code>where</code> clauses, but don't require it of users of that generic</p>",
        "id": 245456290,
        "sender_full_name": "eddyb",
        "timestamp": 1625843777
    },
    {
        "content": "<p>then the \"unstable\" impls can depend on <code>(): FooEnabled</code> (which can have a <code>#[rustc_on_unimplemented]</code> to explain itself etc.)</p>",
        "id": 245456350,
        "sender_full_name": "eddyb",
        "timestamp": 1625843818
    },
    {
        "content": "<p>as long as the trait has no associated items, we can get away with never selecting it in codegen, and effectively treating it as an (erased) \"axiom\"</p>",
        "id": 245456440,
        "sender_full_name": "eddyb",
        "timestamp": 1625843869
    },
    {
        "content": "<p>and because it's like a weird sugar <em>on top of</em> an unmodified trait system, we get to keep all the soundness properties</p>",
        "id": 245456538,
        "sender_full_name": "eddyb",
        "timestamp": 1625843896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Unstable.20trait.20impls/near/245456440\">said</a>:</p>\n<blockquote>\n<p>as long as the trait has no associated items, we can get away with never selecting it in codegen, and effectively treating it as an (erased) \"axiom\"</p>\n</blockquote>\n<p>heh just rememebred codegen might not even keep <code>ParamEnv</code>s today</p>",
        "id": 245457399,
        "sender_full_name": "eddyb",
        "timestamp": 1625844248
    },
    {
        "content": "<p>(it would be unsound to specialize on such feature marker traits unless we actually track <code>ParamEnv</code>s in codegen, but maybe we don't really want to enable specialization like that anyway, there might be more pitfalls)</p>",
        "id": 245460012,
        "sender_full_name": "eddyb",
        "timestamp": 1625845604
    },
    {
        "content": "<p>Would the same mechanism work for having visibility on trait impls?</p>",
        "id": 245464799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625847993
    },
    {
        "content": "<p>I would love to have actual private impls or <code>pub(crate)</code> impls, rather than the sealing pattern.</p>",
        "id": 245464904,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625848041
    },
    {
        "content": "<p>tbh I would only use this hack sparingly. the fact that the sealing pattern exists <em>and works</em> makes me very dubious of considering a replacement for it</p>",
        "id": 245470419,
        "sender_full_name": "eddyb",
        "timestamp": 1625850654
    },
    {
        "content": "<p>also, the <code>FooEnabled</code> traits would be lang items. I don't know how would create similar traits in a stable way for users' own privacy boundaries</p>",
        "id": 245470552,
        "sender_full_name": "eddyb",
        "timestamp": 1625850719
    },
    {
        "content": "<p>oh also, the \"paradoxical axiom\" of having <code>(): FooEnabled</code> in the <code>ParamEnv</code> would only be triggered in unstable-feature-using code, which makes any issues with it far less grave IMO</p>",
        "id": 245470708,
        "sender_full_name": "eddyb",
        "timestamp": 1625850782
    },
    {
        "content": "<p>So not only would it be difficult (unsurprising given it hasn't been done), but it would likely have a notable performance impact?</p>",
        "id": 245499279,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625864933
    },
    {
        "content": "<p>wrt private impls, that would also be nice but would presumably run into similar issues from what has been said. Having <code>#[sealed]</code> would still be nice</p>",
        "id": 245499413,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625864982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Unstable.20trait.20impls/near/245499279\">said</a>:</p>\n<blockquote>\n<p>So not only would it be difficult (unsurprising given it hasn't been done), but it would likely have a notable performance impact?</p>\n</blockquote>\n<p>why performance impact?</p>",
        "id": 245657463,
        "sender_full_name": "eddyb",
        "timestamp": 1626077739
    },
    {
        "content": "<p>It would add overhead to resolving every trait, no?</p>",
        "id": 245694874,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626100681
    },
    {
        "content": "<p>hmm, the <code>ParamEnv</code>s would be different when type-checking anything in a crate that enables the feature. I guess I can see how uncached searches would take a small hit</p>",
        "id": 245814759,
        "sender_full_name": "eddyb",
        "timestamp": 1626178394
    },
    {
        "content": "<p>it shouldn't affect any stable code, or unstable code that doesn't use any of the unstable features that support this kind of \"unstable trait <code>impl</code>\" thing</p>",
        "id": 245814828,
        "sender_full_name": "eddyb",
        "timestamp": 1626178438
    }
]