[
    {
        "content": "<p>I'd like to consider shipping <code>rustc</code> as a single statically linked executable. This would mean that compiler plugins and compiler backends (as they exist today) would no longer be supported without a custom built compiler. I'm wondering who the users of these features are.</p>",
        "id": 187611470,
        "sender_full_name": "Zoxc",
        "timestamp": 1581047808
    },
    {
        "content": "<p>I think we could still make plugins works by creating proxy methods that take TLS state from the main executable and set it on the plugin.</p>",
        "id": 187614086,
        "sender_full_name": "Zoxc",
        "timestamp": 1581052035
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> since you might care about this =P</p>",
        "id": 187615176,
        "sender_full_name": "Zoxc",
        "timestamp": 1581053908
    },
    {
        "content": "<p>Thanks for pinging me. What is the benifit of completely statically linking rustc? Removing support for hotplug codegen backends would mean that I would have to either build a rustc with support, or I have to integrate cg_clif into rustc, in which case I would have to somehow hack bootstrap to only build a libstd with the resulting compiler, not a whole rustc. In either case the development cycle for cg_cluf gets increased significantly. Also removing <a href=\"http://librustc_driver.so\" target=\"_blank\" title=\"http://librustc_driver.so\">librustc_driver.so</a> would significantly increase the size of rustdoc, miri, clippy and other projects using rustc as library.</p>",
        "id": 187615454,
        "sender_full_name": "bjorn3",
        "timestamp": 1581054417
    },
    {
        "content": "<p>Pretty much just performance. It could use ThinLTO, a executable-only TLS model, it would lower startup costs by not having a dylib filled with symbols.</p>\n<p>But I do think we could keep hotplug codegen stuff working by just transferring TLS state when calling into the dylib. I haven't come up with a case that wouldn't work with yet</p>",
        "id": 187615739,
        "sender_full_name": "Zoxc",
        "timestamp": 1581054953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> I think it would be worthwhile to resolve how much of a performance benefit it'd be. If it's 1-2% I think the costs are probably not worth it.</p>",
        "id": 187636619,
        "sender_full_name": "simulacrum",
        "timestamp": 1581080280
    },
    {
        "content": "<p>ThinLTO alone gives -4% on <code>syntex_syntax</code> (probably more if LLVM used it too). I'm waiting on <a href=\"https://github.com/rust-lang/rust/pull/67759\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67759\">https://github.com/rust-lang/rust/pull/67759</a> to do a perf run.</p>",
        "id": 187637248,
        "sender_full_name": "Zoxc",
        "timestamp": 1581080790
    },
    {
        "content": "<p>I'm confused -- can't we already do ThinLTO across most of the compiler? We only ship 1-2 shared libraries today for the compiler, so those could participate in ThinLTO <em>today</em> -- we don't need static linking for that?</p>",
        "id": 187637626,
        "sender_full_name": "simulacrum",
        "timestamp": 1581081160
    },
    {
        "content": "<p>I feel like I was talking about this with somebody recently, probably <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>? I think we came to the conclusion that <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> suggests -- that we could apply ThinLTO (and PGO) to rustc without going all the way to static linking by having a large library.</p>",
        "id": 187639242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581082563
    },
    {
        "content": "<p>Plugins are used by at least servo for their custom GC lint. I think we should devise an alternative for that at some point, but it's not been high on the priority list.</p>",
        "id": 187639280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581082588
    },
    {
        "content": "<p>Yes, and we already have that today, at least as far as I can tell. Presumably enabling thinlto and pgo is a matter of ci time and some legwork in bootstrap</p>",
        "id": 187639336,
        "sender_full_name": "simulacrum",
        "timestamp": 1581082656
    },
    {
        "content": "<p>In fact I feel like we already do it in some cases</p>",
        "id": 187639355,
        "sender_full_name": "simulacrum",
        "timestamp": 1581082681
    },
    {
        "content": "<p>Yes I agree that we do not need a statically linked compiler it the only purpose is to get PGO/LTO/etc benefits, we should start out by applying those techniques to <a href=\"http://librustc_driver.so\" target=\"_blank\" title=\"http://librustc_driver.so\">librustc_driver.so</a> and go from there</p>",
        "id": 187640227,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1581083387
    },
    {
        "content": "<p>so maybe we can just open an issue to track the work that needs to be done here? I did a brief search and it doesn't look like any existing issue covers the desiderata here?</p>",
        "id": 187850876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1581363709
    },
    {
        "content": "<p>We don't support ThinLTO for dylibs. Not sure if there's any technical limitations or if it's just not implemented. cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 188826537,
        "sender_full_name": "Zoxc",
        "timestamp": 1582393730
    },
    {
        "content": "<p>I don't know either. The check to not support ThinLTO for Rust dylibs was in there from before I got to work with the code. IIRC, compiling the LLVM backend dylib with xLTO worked fine though.</p>",
        "id": 188915185,
        "sender_full_name": "mw",
        "timestamp": 1582540847
    },
    {
        "content": "<p>I removed the check for dylibs + LTO and added <code>Dylib</code> to <code>each_linked_rlib</code> and it seems to just work. I'll do a perf run when LLVM 10 lands.</p>",
        "id": 188978331,
        "sender_full_name": "Zoxc",
        "timestamp": 1582587743
    }
]