[
    {
        "content": "<p>Hey everyone,</p>\n<p>In recent discussions with <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> the topic of binary sizes and stripping came up, so we were wondering: what are everyone's thoughts on having stripping by default for builds that opt out of debuginfo (that is, <code>-Cstrip=debuginfo</code> when <code>-Cdebuginfo=0</code>) now that <code>-Cstrip</code> is on stable ? </p>\n<p>I just tried a Hello World: it's 3.6MB, and we know most of this size comes from the stdlib's debuginfo (which is built at <code>-Cdebuginfo=2</code> IIRC). Does it seem sensible to strip that if one doesn't opt into having debuginfo at all ?  The binary is 364KB when stripped (303K with <code>-Cstrip=symbols</code> if someone wants to know the minimum size easily attainable when users need that).</p>\n<p>That change would mean the standard library's frames in backtraces would lose their lineinfo, so it is a visible change. I'm not sure whether that information is used a lot in release builds for instance (maybe by sentry and similar crash reporting tools ? maybe they require users to have debuginfo turned on ?) or how useful it is in practice (but Hyrum's law makes it likely that someone is relying on that).</p>\n<p>Is that something that would require an MCP or RFC ? Are there maybe other concerns that would make this default value inconvenient (possibly discussed elsewhere and that I've missed) ? The newly formed <code>wg-debugging</code> could have thoughts about this as well.</p>",
        "id": 274951196,
        "sender_full_name": "lqd",
        "timestamp": 1646991333
    },
    {
        "content": "<p>I think an MCP would be the right level for gathering consensus. It does sound like a reasonable proposal to me.</p>",
        "id": 274952360,
        "sender_full_name": "mw",
        "timestamp": 1646991990
    },
    {
        "content": "<p>It's worth noting that the current behaviour is inconsistent in one way -- by default <code>std</code> gets debuginfo but nothing else does. This change would eliminate that inconsistency.</p>",
        "id": 274956908,
        "sender_full_name": "nnethercote",
        "timestamp": 1646994581
    },
    {
        "content": "<p>(Oh, I see now that @lqd already said that)</p>",
        "id": 274956998,
        "sender_full_name": "nnethercote",
        "timestamp": 1646994624
    },
    {
        "content": "<p>does stripping the binary every time add any significant amount of time to the compilation?</p>",
        "id": 274958621,
        "sender_full_name": "bstrie",
        "timestamp": 1646995568
    },
    {
        "content": "<p>@lqd: I think you said it made things slightly faster? (I'm not certain, but I think the stripping happens in memory, before things are written to disk.)</p>",
        "id": 274959081,
        "sender_full_name": "nnethercote",
        "timestamp": 1646995884
    },
    {
        "content": "<p>I think the disk space effect is significant. It would avoid the case where a newcomer runs <code>rustc helloworld.rs</code>, sees the executable is 4MB and decides that \"Rust sucks\".</p>",
        "id": 274959205,
        "sender_full_name": "nnethercote",
        "timestamp": 1646995946
    },
    {
        "content": "<p>For gcc/clang on non-macOS platforms and for wasm-ld we use the <code>--strip-debug</code>/<code>--strip-all</code> linker argument. For macOS we use a separate strip invocation. For msvc we use <code>/DEBUG:NONE</code>.</p>",
        "id": 274960013,
        "sender_full_name": "bjorn3",
        "timestamp": 1646996409
    },
    {
        "content": "<p>If stripping is done as part of the linker invocation it should be faster as it can omit copying and relocating the debuginfo. If it is done as a separate command it is slower.</p>",
        "id": 274960109,
        "sender_full_name": "bjorn3",
        "timestamp": 1646996447
    },
    {
        "content": "<p>I think cargo should default to <code>strip=debuginfo</code> if none of the crates are compiled with debuginfo. It shouldn't strip if something like <code>[profile.release.package.foo] debuginfo = 1</code> is used I think.</p>",
        "id": 274960205,
        "sender_full_name": "bjorn3",
        "timestamp": 1646996513
    },
    {
        "content": "<p>Right, stripping definitely shouldn't happen if debuginfo is requested. But does Cargo need to be involved? This could be default behaviour for rustc.</p>",
        "id": 274961136,
        "sender_full_name": "nnethercote",
        "timestamp": 1646997063
    },
    {
        "content": "<p>If the single crate for which debuginfo is requested is not the crate that is being linked, how would rustc distinguish between this and libstd having debuginfo that should be stripped? From the perspective of rustc, libstd is just a regular crate for which debuginfo was requested.</p>",
        "id": 274961375,
        "sender_full_name": "bjorn3",
        "timestamp": 1646997192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Stripping.20by.20default.20.3F/near/274959081\">said</a>:</p>\n<blockquote>\n<p>@lqd: I think you said it made things slightly faster? (I'm not certain, but I think the stripping happens in memory, before things are written to disk.)</p>\n</blockquote>\n<p>yeah, slightly faster on the simpler debug scripts we've seen, like &lt;10% on <code>syn</code>'s IIRC. Within noise in general, regular crate compilation, on the builds I've seen (but haven't looked at projects with huge amounts of debuginfo, or a big number of crates to begin with).</p>",
        "id": 274961397,
        "sender_full_name": "lqd",
        "timestamp": 1646997214
    },
    {
        "content": "<p>split debuginfo could also be related to this discussion</p>\n<p>(and that msvc has external debuginfo, so windows should already have smaller executables by default thanks to that)</p>",
        "id": 274961673,
        "sender_full_name": "lqd",
        "timestamp": 1646997398
    }
]