[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/244199327\">said</a>:</p>\n<blockquote>\n<p><code>transmute</code> has to be, because its size check can't be expressed with a <code>where</code> bound (<em>yet</em>)</p>\n</blockquote>\n<p>mwahahaha</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Satisfied</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Predicate</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Satisfied</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Predicate</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">transmogrify</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">e</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Predicate</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Satisfied</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">transmogrify</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// compiles</span>\n<span class=\"w\">    </span><span class=\"c1\">// let z: u8 = unsafe { transmogrify(x) }; // compiler error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244203493,
        "sender_full_name": "bstrie",
        "timestamp": 1624913803
    },
    {
        "content": "<p>sadly it's weirder than that, but it <em>could</em> be an intrinsic or a builtin trait</p>",
        "id": 244203569,
        "sender_full_name": "eddyb",
        "timestamp": 1624913851
    },
    {
        "content": "<p>(it can handle situations where <code>size_of</code> can't give you a value, like <code>Box&lt;T&gt;</code> vs <code>*mut T</code> with <code>T: ?Sized</code>)</p>",
        "id": 244203676,
        "sender_full_name": "eddyb",
        "timestamp": 1624913900
    },
    {
        "content": "<p>(yes, actually attempting to replace <code>todo!</code> with <code>transmute</code> gives me some guff about \"dependently-sized types\" :P )</p>",
        "id": 244203743,
        "sender_full_name": "bstrie",
        "timestamp": 1624913944
    },
    {
        "content": "<p>oh that's just the compiler still doing its own checks, which can't really ever work with your where bound</p>",
        "id": 244203943,
        "sender_full_name": "eddyb",
        "timestamp": 1624914034
    },
    {
        "content": "<p>what I mean is a deeper mismatch tho</p>",
        "id": 244204067,
        "sender_full_name": "eddyb",
        "timestamp": 1624914111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> so, say, if the current behavior was just \"the two sizes must be equal\", then your approach would be fine, and we'd just need to remove the builtin check. the <code>where</code> clause could even go on the intrinsic definition itself. but that's sadly <em>not</em> equivalent</p>",
        "id": 244204291,
        "sender_full_name": "eddyb",
        "timestamp": 1624914221
    },
    {
        "content": "<p>the current behavior is more like \"there must be a valid reason to be able to assume <code>T</code> and <code>U</code> <em>will</em> have the same size, across every monomorphization of the caller\"</p>",
        "id": 244204402,
        "sender_full_name": "eddyb",
        "timestamp": 1624914280
    },
    {
        "content": "<p>the sizes being constant (like in your <code>where</code> clause) is just one of supported \"solutions\"</p>",
        "id": 244204457,
        "sender_full_name": "eddyb",
        "timestamp": 1624914308
    },
    {
        "content": "<p>I alluded to the other one (at least I think there's only two main ones) - which btw I think even works with e.g. <code>Option&lt;Box&lt;T&gt;&gt;</code> or <code>Option&lt;Rc&lt;T&gt;&gt;</code></p>",
        "id": 244204602,
        "sender_full_name": "eddyb",
        "timestamp": 1624914368
    },
    {
        "content": "<p>There was even a suggestion for adding such a special rule for <code>U = MaybeUninit&lt;T&gt;</code>, IIRC</p>",
        "id": 244210023,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1624917707
    },
    {
        "content": "<p>While we're on the topic, can I cheekily invite any reviews of <a href=\"https://github.com/rust-lang/rust/pull/86281\">https://github.com/rust-lang/rust/pull/86281</a> ? :)</p>",
        "id": 244217678,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1624923347
    },
    {
        "content": "<p>That was the suggestion I had in mind <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 244318111,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1624987993
    }
]