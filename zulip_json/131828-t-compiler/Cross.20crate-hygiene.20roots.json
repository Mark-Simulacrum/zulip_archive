[
    {
        "content": "<p>I've been attempting to changing decoding of hygiene to preserve the 'root' from other crates, instead of mapping foreign roots to the 'root' of the current crate. However, as described here <a href=\"https://github.com/rust-lang/rust/issues/84429#issuecomment-830851900\">https://github.com/rust-lang/rust/issues/84429#issuecomment-830851900</a>, there's a lot of code that seems to be relying on the existence of a single root (instead of a 'forest' of <code>ExpnId</code> trees).</p>\n<p>I've been trying the alternate approach I described, where we 'attach' the roots of other crates to the root of the current crate. However, this approach has some problems of its own - since we copy foreign <code>SyntaxContext</code>s into the current crate when decoding, we could end up with a complicated situtation when multiple crates are involved. For example, we could decode the root <code>SyntaxContext</code> from another crate, creating the tree <code>crate_a_root#0 -&gt; crate_b_root#1</code>. We would then serialize that tree into the current crate's metadata, and then decode it from a <em>different</em> crate, creating the tree <code>crate_c_root#0 -&gt; crate_a_root#1 -&gt; crate_b_root#1</code>, instead of <code>crate_c_root#0 -&gt; crate_b_root#1</code>.</p>\n<p>I'm not sure if this alternate approach will end up being any less difficult to implement, or whether or not it will even be correct. cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 240119024,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621894114
    },
    {
        "content": "<blockquote>\n<p>I've been trying the alternate approach I described, where we 'attach' the roots of other crates to the root of the current crate.</p>\n</blockquote>\n<p>I'd expect this approach to create more problems than solve, modifying algorithms to not expect a single root should be better.<br>\n(This is mostly an intuition, I don't currently have time to look into anything in detail.)</p>",
        "id": 240709909,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622305895
    }
]