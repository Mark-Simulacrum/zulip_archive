[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have a preference for how to express \"the minimum of all the following lifetimes\" in HIR?</p>",
        "id": 154859348,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547143675
    },
    {
        "content": "<p>I'm looking to clean up the async/await implementation and one of the big issues is that you can't have multiple different named lifetime parameters</p>",
        "id": 154859449,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547143773
    },
    {
        "content": "<p>because the returned <code>impl Future</code> can live only as long as the shortest input lifetime</p>",
        "id": 154859513,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547143818
    },
    {
        "content": "<p>and there's not a way to express that at the moment AFAICT</p>",
        "id": 154859519,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547143825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> well <code>'a</code> and <code>'b...'z: 'a</code></p>",
        "id": 154874999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547157119
    },
    {
        "content": "<p>is how you would express it</p>",
        "id": 154875048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547157137
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"na\">&#39;b</span>: <span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"na\">&#39;c</span>: <span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154875098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547157195
    },
    {
        "content": "<p>not sure if that's what you want in HIR</p>",
        "id": 154875105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547157198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yeah I wasn't sure if there was a better way than introducing a new unnameable lifetime everywhere</p>",
        "id": 154875705,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547157728
    },
    {
        "content": "<p>but I can certainly do it that way</p>",
        "id": 154875718,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547157744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> can you say a bit more about what's causing the root error?</p>",
        "id": 154877409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159213
    },
    {
        "content": "<p>or maybe I just need to revisit this with a clear head</p>",
        "id": 154877428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> today we don't allow <code>async fn</code> with multiple named lifetimes in the arguments</p>",
        "id": 154877436,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159243
    },
    {
        "content": "<p>basically i'm wondering if the right path is instead to fix impl trait or something like that</p>",
        "id": 154877437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159243
    },
    {
        "content": "<p>yeah maybe</p>",
        "id": 154877445,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159251
    },
    {
        "content": "<p>we do this because we need a lifetime to tack onto the <code>impl Future&lt;...&gt; + 'something</code> in the return type</p>",
        "id": 154877461,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159274
    },
    {
        "content": "<p>we also ban multiple elided lifetimes for the same reason</p>",
        "id": 154877512,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159289
    },
    {
        "content": "<p>and require that you name them</p>",
        "id": 154877515,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159298
    },
    {
        "content": "<p>So I'm looking to remove that restriction</p>",
        "id": 154877567,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159386
    },
    {
        "content": "<p>because aturon and boats thought it was a blocker for stabilization</p>",
        "id": 154877630,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159405
    },
    {
        "content": "<p>but I'm not quite of the best path towards a fix</p>",
        "id": 154877651,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547159429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you have some other thought about how we should be handling this?</p>",
        "id": 154878294,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547160109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> sorry I had to disappear and just got back to read</p>",
        "id": 154944411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238334
    },
    {
        "content": "<p>It would be great if you could give me a specific example</p>",
        "id": 154944439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238357
    },
    {
        "content": "<p>sure!</p>",
        "id": 154944487,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238365
    },
    {
        "content": "<p>in particular, I'm wondering:</p>\n<p>Is this related to that problem of \"hidden lifetimes\" that we encontered with impl trait?</p>",
        "id": 154944491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238370
    },
    {
        "content": "<p>Not particularly, no</p>",
        "id": 154944501,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238382
    },
    {
        "content": "<p>ok</p>",
        "id": 154944509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238404
    },
    {
        "content": "<p>then an example would definitely be useful</p>",
        "id": 154944517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238412
    },
    {
        "content": "<p><code>async fn foo&lt;'a, 'b&gt;(x: &amp;'a u8, y: &amp;'b u8) {}</code></p>",
        "id": 154944534,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238427
    },
    {
        "content": "<p>needs to desugar to something like</p>",
        "id": 154944537,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238432
    },
    {
        "content": "<p><code>fn foo&lt;'a, 'b, 'c&gt;(x: &amp;'a u8, y: &amp;'b u8) -&gt; impl Future&lt;Output = ()&gt; + 'c where 'a: 'c, 'b: 'c { ... }</code></p>",
        "id": 154944593,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238482
    },
    {
        "content": "<p>or rather</p>",
        "id": 154944640,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238504
    },
    {
        "content": "<p><code>fn foo&lt;'a, 'b&gt;(x: &amp;'a u8, y: &amp;'b u8) -&gt; impl Future&lt;Output = ()&gt; + 'intersection_of_a_and_b { ... }</code></p>",
        "id": 154944672,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238536
    },
    {
        "content": "<p>it seems at least partly related</p>",
        "id": 154944718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238592
    },
    {
        "content": "<p>\"medium related\"?</p>",
        "id": 154944773,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238609
    },
    {
        "content": "<p>it's a distinct issue</p>",
        "id": 154944777,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547238613
    },
    {
        "content": "<p>(I have to say I sometimes regret that we didn't adopt the \"explicit captures in the impl\" design)</p>",
        "id": 154944801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238638
    },
    {
        "content": "<p>well, is it?</p>",
        "id": 154944813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238646
    },
    {
        "content": "<p>/me thinks a bit</p>",
        "id": 154944872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238715
    },
    {
        "content": "<p>the intention is clearly that you should be able to \"work with\" data from <code>x</code> and <code>y</code> during the fn as normal</p>",
        "id": 154944927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238743
    },
    {
        "content": "<p>I think what i'm wondering about is basically \"why do we need a <code>'c</code> exactly\"</p>",
        "id": 154944959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238798
    },
    {
        "content": "<p><em>if</em> we had the <code>impl&lt;...&gt;</code> explicit syntax, you might have imagined desugaring to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(...)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>syntax, right?</p>",
        "id": 154945041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238876
    },
    {
        "content": "<p>I'm trying to remember what our HIR setup is internally, wondering if we can desugar to something that doesn't have a direct syntax right now</p>",
        "id": 154945085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547238937
    },
    {
        "content": "<p>I don't believe there's a direct way to represent that in HIR today</p>",
        "id": 154945675,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> similarly, it's not just an issue with named lifetimes but also with elided ones</p>",
        "id": 154945686,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239493
    },
    {
        "content": "<p>I think you can represent it</p>",
        "id": 154945706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547239508
    },
    {
        "content": "<p>oh?</p>",
        "id": 154945712,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239515
    },
    {
        "content": "<p>put another way, this desugars into an existential type</p>",
        "id": 154945716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547239518
    },
    {
        "content": "<p>(ultimately)</p>",
        "id": 154945724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547239523
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>existential type Foo&lt;&#39;a, &#39;b&gt;;\n\nfn foo&lt;&#39;a, &#39;b&gt;(...) -&gt; Foo&lt;&#39;a, &#39;b&gt;\n</pre></div>",
        "id": 154945741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547239545
    },
    {
        "content": "<p>I'm not sure how straightforward it is to set that stuff up, but I think that is what you want to express, isn't it?</p>",
        "id": 154945790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547239564
    },
    {
        "content": "<p>here's the code in question: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2086\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2086\">https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2086</a></p>",
        "id": 154945806,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239578
    },
    {
        "content": "<p>and it does this today by pushing a bound on: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2285\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2285\">https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2285</a></p>",
        "id": 154945866,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239647
    },
    {
        "content": "<p>but perhaps if we didn't use <code>lower_existential_impl_trait</code> and bypassed it</p>",
        "id": 154945889,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239678
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2236\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2236\">https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2236</a></p>",
        "id": 154945891,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239679
    },
    {
        "content": "<p>we could add more things to the lifetime_defs list <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L1345\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L1345\">https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L1345</a></p>",
        "id": 154945996,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239751
    },
    {
        "content": "<p>and we could omit that lifetime bound entirely</p>",
        "id": 154946033,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239797
    },
    {
        "content": "<p>Yeah, that fails on nightly today</p>",
        "id": 154946265,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> : <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9688e3897e0dddf9a7ddae5ab0c46ad8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9688e3897e0dddf9a7ddae5ab0c46ad8\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9688e3897e0dddf9a7ddae5ab0c46ad8</a></p>",
        "id": 154946287,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547239990
    },
    {
        "content": "<p>\"ambiguous lifetime bound: neither 'a nor 'b outlives the other\"</p>",
        "id": 154946305,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547240008
    },
    {
        "content": "<p>ah yeah we added that limitation</p>",
        "id": 154946530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240183
    },
    {
        "content": "<p>I've been thinking about how to lift it by making the region solver smarter</p>",
        "id": 154946543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240203
    },
    {
        "content": "<p>(for other reasons)</p>",
        "id": 154946545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240206
    },
    {
        "content": "<p>but I guess that's probably a bit off</p>",
        "id": 154946552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240216
    },
    {
        "content": "<p>well, I guess that adding an implicit bound is the best we can do today; I'd probably prefer that to making the HIR more magical.. btw how do we deal with \"late-bound vs early-bound\" today in this sort of thing, do you know? do we effectively make all regions in an async fn early bound?</p>",
        "id": 154946634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547240287
    },
    {
        "content": "<p>I believe the opposite</p>",
        "id": 154949897,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547243365
    },
    {
        "content": "<p>if you try and apply any lifetimes</p>",
        "id": 154949903,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547243371
    },
    {
        "content": "<p>(manually)</p>",
        "id": 154949913,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547243380
    },
    {
        "content": "<p>it complains that you can't apply late-bound lifetimes</p>",
        "id": 154949914,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547243386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So for now you'd recommend introducing a new unnameable (in the surface lang) lifetime that we can use for this purpose? And somehow specifying that <code>'_</code> must outlive that lifetime?</p>",
        "id": 154950271,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547243748
    },
    {
        "content": "<p>it all seems extremely dodgy to me but I don't have a good idea of how to do this in a more principled way</p>",
        "id": 154950341,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547243790
    },
    {
        "content": "<p>Well, I guess I'm going to give this a shot b.c. after sleeping on it for a while I still have no idea how to do this in a more reasonable way</p>",
        "id": 155285863,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547670814
    },
    {
        "content": "<p>so my plan is to expand all elided lifetimes in elidable input positions to separate named <code>elided async lifetime #&lt;..&gt;</code> lifetimes</p>",
        "id": 155285952,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547670859
    },
    {
        "content": "<p>add them all to the parameters of the fn</p>",
        "id": 155285978,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547670881
    },
    {
        "content": "<p>and add a lifetime named <code>async</code> (note the lack of a <code>'</code> to prevent collision) and add a requirement to the where clause that all lifetimes that appear in the function signature that aren't introduced there (by e.g. <code>for&lt;..&gt;</code> or elided lifetimes inside <code>fn</code>/<code>Fn</code> syntax) must outlive the lifetime named <code>async</code></p>",
        "id": 155286162,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547671031
    },
    {
        "content": "<p>this seems likely to cause some messy code and some less-than-desirable diagnostics</p>",
        "id": 155286180,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547671049
    },
    {
        "content": "<p>but It's all I've come up with at this point</p>",
        "id": 155286193,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547671059
    }
]