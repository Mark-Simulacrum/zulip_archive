[
    {
        "content": "<p>hello, the error handling project could use some help from the compiler team to figure out how best to implement our backtrace in core proof of concept as part of stabilizing backtrace</p>",
        "id": 223314685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101226
    },
    {
        "content": "<p>relevant thread: <a href=\"#narrow/stream/257204-project-error-handling/topic/backtrace.20stabilization\">https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling/topic/backtrace.20stabilization</a><br>\nrelevant draft PR: <a href=\"https://github.com/rust-lang/rust/pull/77384\">https://github.com/rust-lang/rust/pull/77384</a></p>",
        "id": 223314724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101270
    },
    {
        "content": "<p>the issue at hand is that we need to add a hook vaguely similar to <code>#[panic_handler]</code></p>",
        "id": 223314796,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101297
    },
    {
        "content": "<p>or maybe more than one hook</p>",
        "id": 223314799,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101300
    },
    {
        "content": "<p>which provides the functionality for a <code>core::backtrace::Backtrace</code> type</p>",
        "id": 223314819,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101319
    },
    {
        "content": "<p>and which is provided by <code>std</code></p>",
        "id": 223314831,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101328
    },
    {
        "content": "<p>the rub being I think we need to also provide an implementation by default when <code>std</code> isn't linked in</p>",
        "id": 223314843,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101338
    },
    {
        "content": "<p>which I don't think <code>#[panic_handler]</code> or any of the similar hooks do</p>",
        "id": 223314874,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611101362
    },
    {
        "content": "<blockquote>\n<p>Jane Lusby: my impression is that the type of hooks that we want currently don't have any prior art<br>\nJane Lusby: and we'd need to add some new support in the compiler</p>\n</blockquote>\n<p>can you expand on why these hooks are different?</p>",
        "id": 223317315,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103214
    },
    {
        "content": "<p>and what are the hooks actually doing? could you use something like <code>set_panic_hook</code> that works at runtime?</p>",
        "id": 223317337,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103239
    },
    {
        "content": "<p>also only vaguely related, but I've been thinking for a while about a <code>global_resource</code> attribute, instead of special casing all these things in the compiler</p>",
        "id": 223317495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103368
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"219805\">@devsnek</span> was the one telling me how he had to go through like 30 different places to make <code>no_mangle</code> unconditionally link into the binary</p>",
        "id": 223317527,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core/near/223317495\">said</a>:</p>\n<blockquote>\n<p>also only vaguely related, but I've been thinking for a while about a <code>global_resource</code> attribute, instead of special casing all these things in the compiler</p>\n</blockquote>\n<p>I think a lot of this boils down to existential traits</p>",
        "id": 223317555,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103433
    },
    {
        "content": "<p>hmm? how are traits related?</p>",
        "id": 223317612,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103458
    },
    {
        "content": "<p>where we'd want to have a trait for like \"BacktraceImplementation\" and declare that there exists one implementor of that trait somewhere in the crate graph, and define that extern trait in core then impl it in std</p>",
        "id": 223317626,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103480
    },
    {
        "content": "<p>ah ok, you mean it in a different sense than the compiler uses it</p>",
        "id": 223317643,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103495
    },
    {
        "content": "<p>yea</p>",
        "id": 223317648,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103500
    },
    {
        "content": "<p>theres an RFC somewhere</p>",
        "id": 223317654,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103503
    },
    {
        "content": "<p>you want like a \"global implementor\"</p>",
        "id": 223317660,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103507
    },
    {
        "content": "<p>that someone brought up last time I talked about these hooks</p>",
        "id": 223317662,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103509
    },
    {
        "content": "<p>yea</p>",
        "id": 223317663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103511
    },
    {
        "content": "<p>which is what I took you to mean by global_resource</p>",
        "id": 223317670,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103523
    },
    {
        "content": "<p>i think they're both approaching the same idea</p>",
        "id": 223317679,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core/near/223317495\">said</a>:</p>\n<blockquote>\n<p>also only vaguely related, but I've been thinking for a while about a <code>global_resource</code> attribute, instead of special casing all these things in the compiler</p>\n</blockquote>\n<p>this would be pretty cool. i think both rust users and rust devs would find it clearer :)</p>",
        "id": 223317686,
        "sender_full_name": "devsnek",
        "timestamp": 1611103537
    },
    {
        "content": "<p>I have no idea how it would actually work, but it would be nice to generalize this</p>",
        "id": 223317703,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103560
    },
    {
        "content": "<p>that would also let users use it too - imagine if you had <code>#[global_resource(async_executor = \"tokio\")]</code> or something</p>",
        "id": 223317756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103584
    },
    {
        "content": "<p>i was just about to say, you could tell rust to use a specific async executor</p>",
        "id": 223317772,
        "sender_full_name": "devsnek",
        "timestamp": 1611103609
    },
    {
        "content": "<p>as long as there's some <code>Executor</code> interface you can suddenly abstract over executors in libraries</p>",
        "id": 223317782,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103622
    },
    {
        "content": "<p><a href=\"#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables</a></p>",
        "id": 223317783,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103622
    },
    {
        "content": "<p>here's the RFC</p>",
        "id": 223317815,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103659
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2492\">https://github.com/rust-lang/rfcs/pull/2492</a></p>",
        "id": 223317816,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103659
    },
    {
        "content": "<p>but I don't want to block this proof of concept on that RFC</p>",
        "id": 223317826,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core/near/223317826\">said</a>:</p>\n<blockquote>\n<p>but I don't want to block this proof of concept on that RFC</p>\n</blockquote>\n<p>yeah, it would just be nice to have</p>",
        "id": 223317892,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103700
    },
    {
        "content": "<p>for sure</p>",
        "id": 223317895,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103705
    },
    {
        "content": "<p>that rfc looks very cool as well</p>",
        "id": 223317934,
        "sender_full_name": "devsnek",
        "timestamp": 1611103742
    },
    {
        "content": "<p>so the question is, how would we do this now for a <code>std::core::Backtrace</code> type</p>",
        "id": 223317977,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103782
    },
    {
        "content": "<p>and I think there's one design question we might want to answer first</p>",
        "id": 223317992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103795
    },
    {
        "content": "<p>which is</p>",
        "id": 223317993,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103796
    },
    {
        "content": "<p>what should <code>std::core::Backtrace</code> do in no_std environments with no backtrace impl</p>",
        "id": 223318049,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103809
    },
    {
        "content": "<p>should the user have to provide it themselves, similar to <code>#[panic_handler]</code> or should we provide a default impl that just always returns empty disabled backtraces</p>",
        "id": 223318081,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103840
    },
    {
        "content": "<p>what do you mean by <code>std::core</code>?</p>",
        "id": 223318086,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103843
    },
    {
        "content": "<p>fk</p>",
        "id": 223318091,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103846
    },
    {
        "content": "<p>core::backtrace::Backtrace</p>",
        "id": 223318095,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103850
    },
    {
        "content": "<p>that was a brainfart</p>",
        "id": 223318098,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103853
    },
    {
        "content": "<p>np</p>",
        "id": 223318104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611103858
    },
    {
        "content": "<p>getting towards the end of my workday, lol</p>",
        "id": 223318117,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103866
    },
    {
        "content": "<p>my expectation is that we'd want the latter design</p>",
        "id": 223318138,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103889
    },
    {
        "content": "<p>but then i go back to \"how do we provide a default implementation of an extern function in the compiler automatically\" or w/e that really boils down to</p>",
        "id": 223318168,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611103917
    },
    {
        "content": "<p>FWIW I think it would backwards compatible to start by requiring a <code>#[backtrace_generator]</code> or whatever and then add a default later</p>",
        "id": 223318283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611104002
    },
    {
        "content": "<p>I guess the question is if that's <em>useful</em> or not</p>",
        "id": 223318305,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611104021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core/near/223318283\">said</a>:</p>\n<blockquote>\n<p>FWIW I think it would backwards compatible to start by requiring a <code>#[backtrace_generator]</code> or whatever and then add a default later</p>\n</blockquote>\n<p>I'm surprised this would be backwards compatible</p>",
        "id": 223318595,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104247
    },
    {
        "content": "<p>do no_std binaries already require nightly and feature flags?</p>",
        "id": 223318609,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104265
    },
    {
        "content": "<p>i would think adding this would make existing no_std code that doesn't already have <code>#[backtrace_generator]</code> stop compiling</p>",
        "id": 223318661,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104286
    },
    {
        "content": "<p>no_std is stable</p>",
        "id": 223318691,
        "sender_full_name": "devsnek",
        "timestamp": 1611104312
    },
    {
        "content": "<p>I think you need nightly to write a no_std <em>binary</em>, though</p>",
        "id": 223318702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611104319
    },
    {
        "content": "<p>nop</p>",
        "id": 223318733,
        "sender_full_name": "devsnek",
        "timestamp": 1611104352
    },
    {
        "content": "<p>also i guess it doesn't really matter if we actually implement the default hook stuff</p>",
        "id": 223318768,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104393
    },
    {
        "content": "<p>since this is only a proof of concept</p>",
        "id": 223318782,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104401
    },
    {
        "content": "<p>not something that will be merged</p>",
        "id": 223318817,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104405
    },
    {
        "content": "<p>we just need to be sure we could later write the big PR to move the error trait to core</p>",
        "id": 223318838,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core/near/223318702\">said</a>:</p>\n<blockquote>\n<p>I think you need nightly to write a no_std <em>binary</em>, though</p>\n</blockquote>\n<p>yeah:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: language item required, but not found: `eh_personality`\n</code></pre></div>\n<p>and then adding a lang_item needs nightly</p>",
        "id": 223318864,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611104446
    },
    {
        "content": "<p>so maybe we should just leverage lang items for onw</p>",
        "id": 223318919,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104485
    },
    {
        "content": "<p>and then once we've got that working talk to the libs team about the eventual design concerns around no_std</p>",
        "id": 223318937,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104502
    },
    {
        "content": "<p>and see if they want additional research on those issues or if we're already confident we can solve them down the line</p>",
        "id": 223318947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104514
    },
    {
        "content": "<p>that certainly makes it easier</p>",
        "id": 223319027,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611104554
    },
    {
        "content": "<p>(I do not have strong opinions on any of this)</p>",
        "id": 223319034,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611104561
    },
    {
        "content": "<p>now hold on there josh</p>",
        "id": 223320927,
        "sender_full_name": "Lokathor",
        "timestamp": 1611106028
    },
    {
        "content": "<p>with panic=abort, i'm fairly sure that you can make a no_std binary, though IIRC that was never mentioned in any release info</p>",
        "id": 223320957,
        "sender_full_name": "Lokathor",
        "timestamp": 1611106058
    },
    {
        "content": "<p>oh hmm good point</p>",
        "id": 223321089,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611106163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> so maybe this wouldn't be backwards compatible</p>",
        "id": 223321098,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611106171
    },
    {
        "content": "<p>Confirmed. I pulled up an old project, you can use Stable to make a <code>no_std</code> binary.</p>\n<p>But you need Nightly to unwind or to alloc</p>",
        "id": 223321256,
        "sender_full_name": "Lokathor",
        "timestamp": 1611106268
    },
    {
        "content": "<p>yup, stable no_std binaries work even on hosted platforms :)</p>",
        "id": 223321576,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611106505
    },
    {
        "content": "<p>you have to use <code>#![no_main]</code> too I think</p>",
        "id": 223321586,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611106520
    },
    {
        "content": "<p>like on embedded</p>",
        "id": 223321593,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611106528
    },
    {
        "content": "<p>Yeah, here's the reduced gist: <a href=\"https://gist.github.com/rust-play/6c8dd8bbaf9403887a482b5d5da01ecd\">https://gist.github.com/rust-play/6c8dd8bbaf9403887a482b5d5da01ecd</a></p>",
        "id": 223321750,
        "sender_full_name": "Lokathor",
        "timestamp": 1611106654
    },
    {
        "content": "<p>Hmm</p>",
        "id": 223323877,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611108644
    },
    {
        "content": "<p>That seems fine still</p>",
        "id": 223323965,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611108765
    },
    {
        "content": "<p>Actually that might provide a path forward to emulate</p>",
        "id": 223323984,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611108801
    },
    {
        "content": "<p>I'll have to look into how the various lang items get handled when writing a stable nostd binary</p>",
        "id": 223324002,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611108839
    },
    {
        "content": "<p>I'm assuming we could still handle linking in a default fn for the backtrace hooks in a real impl later, and that the proof of concept can just define a lang items for now</p>",
        "id": 223324064,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611108893
    },
    {
        "content": "<p>you could maybe have a look at the recent-ish default alloc error handler (it's implemented, just currently unstable)</p>",
        "id": 223324095,
        "sender_full_name": "Lokathor",
        "timestamp": 1611108934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/backtrace.20hooks.20in.20core/near/223318702\">said</a>:</p>\n<blockquote>\n<p>I think you need nightly to write a no_std <em>binary</em>, though</p>\n</blockquote>\n<p>that's what the embedded book suggests anyway (if not then can be corrected)</p>",
        "id": 223343828,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1611131411
    },
    {
        "content": "<p>Yeah that is incorrect. if the embedded book says that it should be corrected.</p>",
        "id": 223380646,
        "sender_full_name": "Lokathor",
        "timestamp": 1611153654
    },
    {
        "content": "<p>hmm, not on this page <a href=\"https://rust-embedded.github.io/book/intro/no-std.html\">https://rust-embedded.github.io/book/intro/no-std.html</a></p>",
        "id": 223380992,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611153799
    },
    {
        "content": "<p><a href=\"https://rust-embedded.github.io/book/start/qemu.html\">https://rust-embedded.github.io/book/start/qemu.html</a> I had to search for a while but found it here</p>",
        "id": 223393139,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1611158359
    },
    {
        "content": "<p>ah, that page is correct, you've gotta use no_main on stable</p>",
        "id": 223399430,
        "sender_full_name": "Lokathor",
        "timestamp": 1611160834
    },
    {
        "content": "<p>Sorry for confusion then, somehow it stuck with me that I <em>need</em> nightly. Glad to hear it's not the case <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223405232,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1611163225
    },
    {
        "content": "<p>hello again</p>",
        "id": 225248773,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612487612
    },
    {
        "content": "<p>I'm working on this a bit more rn and currently trying to use lang_items to setup the hooks, basing it off of <code>lang = \"panic_impl\"</code></p>",
        "id": 225248836,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612487654
    },
    {
        "content": "<p>and i have no idea how to test this</p>",
        "id": 225248845,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612487665
    },
    {
        "content": "<p>because my version of core wont compile because of unknown lang items, and I don't know how to get it to build a compiler first and use that</p>",
        "id": 225248863,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612487685
    },
    {
        "content": "<p>my best guess is <code>--keep-stage</code></p>",
        "id": 225248907,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612487724
    },
    {
        "content": "<p>and to stagger the work</p>",
        "id": 225248913,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612487727
    },
    {
        "content": "<p>but I don't know how this would then pass CI</p>",
        "id": 225248918,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1612487732
    },
    {
        "content": "<p>cfg(stage0) maybe?</p>",
        "id": 225249116,
        "sender_full_name": "nagisa",
        "timestamp": 1612487911
    },
    {
        "content": "<p>The compiler changes you made will be present to code/std when <code>cfg(not(stage0))</code></p>",
        "id": 225249226,
        "sender_full_name": "nagisa",
        "timestamp": 1612488014
    },
    {
        "content": "<p>it's <code>cfg(bootstrap)</code> now, it was changed a while back</p>",
        "id": 225250404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612489011
    }
]