[
    {
        "content": "<p>The LLVM IR generated for a trivial <code>drop_in_place</code> function looks like this in a release build:</p>",
        "id": 206238700,
        "sender_full_name": "njn",
        "timestamp": 1596792769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>; core::ptr::drop_in_place::&lt;std::thread::local::AccessError&gt;\n; Function Attrs: nonlazybind uwtable\ndefine internal void @_RINvNtCseeAmXa5bjUx_4core3ptr13drop_in_placeNtNtNtCsbHjphw8CCgR_3std6thread5l\nocal11AccessErrorECs3LJk5zYATtk_5cargo(%&quot;std::thread::local::AccessError&quot;* %_1) unnamed_addr #1 {\nstart:\n  %0 = alloca {}, align 1\n  ret void\n}\n</code></pre></div>",
        "id": 206238706,
        "sender_full_name": "njn",
        "timestamp": 1596792778
    },
    {
        "content": "<p>And for a debug build:</p>\n<div class=\"codehilite\"><pre><span></span><code>; core::ptr::drop_in_place::&lt;std::thread::local::AccessError&gt;\n; Function Attrs: nonlazybind uwtable\ndefine internal void @_RINvNtCseeAmXa5bjUx_4core3ptr13drop_in_placeNtNtNtCsbHjphw8CCgR_3std6thread5l\nocal11AccessErrorECsjWOLik5knP7_5cargo(%&quot;std::thread::local::AccessError&quot;* %_1) unnamed_addr #0 !dbg\n !204877 {\nstart:\n  %_1.dbg.spill = alloca %&quot;std::thread::local::AccessError&quot;*, align 8\n  %0 = alloca {}, align 1\n  store %&quot;std::thread::local::AccessError&quot;* %_1, %&quot;std::thread::local::AccessError&quot;** %_1.dbg.spill,\n align 8\n  call void @llvm.dbg.declare(metadata %&quot;std::thread::local::AccessError&quot;** %_1.dbg.spill, metadata\n!204882, metadata !DIExpression()), !dbg !204885\n  ret void, !dbg !204885\n}\n</code></pre></div>",
        "id": 206238739,
        "sender_full_name": "njn",
        "timestamp": 1596792810
    },
    {
        "content": "<p>My LLVM-fu is weak, but that appears to allocate some small or zero-sized on the stack, and then immediately return</p>",
        "id": 206238842,
        "sender_full_name": "njn",
        "timestamp": 1596792899
    },
    {
        "content": "<p>Would it be possible to just not generate these functions?</p>",
        "id": 206238877,
        "sender_full_name": "njn",
        "timestamp": 1596792927
    },
    {
        "content": "<p>There are a lot of them, e.g. often 100s in a large crate</p>",
        "id": 206239001,
        "sender_full_name": "njn",
        "timestamp": 1596793050
    },
    {
        "content": "<p>A similar case, this time for <code>drop</code>:</p>",
        "id": 206239022,
        "sender_full_name": "njn",
        "timestamp": 1596793069
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>; core::mem::drop::&lt;u8&gt;\n; Function Attrs: inlinehint nonlazybind uwtable\ndefine internal void @_RINvNtCseeAmXa5bjUx_4core3mem4drophECs3LJk5zYATtk_5cargo(i8 %_x) unnamed_addr\n #0 {\nstart:\n  br label %bb1\n\nbb1:                                              ; preds = %start\n  ret void\n}\n</code></pre></div>",
        "id": 206239027,
        "sender_full_name": "njn",
        "timestamp": 1596793074
    },
    {
        "content": "<p><code>drop_in_place</code> is often the single function contributing most of the LLVM IR lines. I was planning to look into the MIR shim generation to see if there's an easy fix for that.</p>",
        "id": 206239423,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596793451
    },
    {
        "content": "<p>Seems like some \"don't generate it if it's trivial, don't call it if it's trivial\" logic could be useful?</p>",
        "id": 206239585,
        "sender_full_name": "njn",
        "timestamp": 1596793581
    },
    {
        "content": "<p>You need the trivial drop glue for trait objects, but last time I checked the code trivial drop glue should at least already be shared between types. Maybe that logic doesn't work though.</p>",
        "id": 206239728,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596793690
    },
    {
        "content": "<p>In the <code>cargo</code> crate, this exact pattern appears at the end of 5265 functions</p>\n<div class=\"codehilite\"><pre><span></span><code>  br label %bb1\n\nbb1:                                              ; preds = %start\n  ret void\n}\n</code></pre></div>",
        "id": 206239815,
        "sender_full_name": "njn",
        "timestamp": 1596793800
    },
    {
        "content": "<p>skimming through them, there are no other branches to the label, i.e. it's unnecessary</p>",
        "id": 206239924,
        "sender_full_name": "njn",
        "timestamp": 1596793902
    },
    {
        "content": "<p>codegen might create a dedicated return block to point all <code>Return</code> terminators to. I think I've read that LLVM deals better with a single <code>ret</code> instruction in the function. Could be wrong though.</p>",
        "id": 206239935,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596793908
    },
    {
        "content": "<p>These are all really simple functions without any need for branches</p>",
        "id": 206239995,
        "sender_full_name": "njn",
        "timestamp": 1596793941
    },
    {
        "content": "<p>Ah, if there's only one branch to it then yeah, seems unnecesary</p>",
        "id": 206240039,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596793988
    },
    {
        "content": "<p>I'm seeing it with non-void returns, too. Lots of funcs like this:</p>",
        "id": 206240129,
        "sender_full_name": "njn",
        "timestamp": 1596794043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>; core::mem::needs_drop::&lt;(cargo::core::source::source_id::SourceId, alloc::string::String)&gt;\n; Function Attrs: inlinehint nonlazybind uwtable\ndefine internal zeroext i1 @_RINvNtCseeAmXa5bjUx_4core3mem10needs_dropTNtNtNtNtCs3LJk5zYATtk_5cargo4\ncore6source9source_id8SourceIdNtNtCsdfan3MWuEp4_5alloc6string6StringEEBM_() unnamed_addr #0 {\nstart:\n  %0 = alloca i8, align 1\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %0)\n  store i8 1, i8* %0, align 1\n  %1 = load i8, i8* %0, align 1, !range !3\n  %2 = trunc i8 %1 to i1\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* %0)\n  br label %bb1\n\nbb1:                                              ; preds = %start\n  ret i1 %2\n}\n</code></pre></div>",
        "id": 206240144,
        "sender_full_name": "njn",
        "timestamp": 1596794054
    },
    {
        "content": "<p>Another interesting one:</p>\n<div class=\"codehilite\"><pre><span></span><code>; core::mem::take::&lt;core::option::Option&lt;alloc::rc::Rc&lt;(alloc::string::String, cargo::core::resolver\n::types::RcList&lt;alloc::string::String&gt;)&gt;&gt;&gt;\n; Function Attrs: inlinehint nonlazybind uwtable\ndefine internal i64* @_RINvNtCseeAmXa5bjUx_4core3mem4takeINtNtB4_6option6OptionINtNtCsdfan3MWuEp4_5a\nlloc2rc2RcTNtNtBX_6string6StringINtNtNtNtCs3LJk5zYATtk_5cargo4core8resolver5types6RcListB1o_EEEEEB1S\n_(i64** align 8 dereferenceable(8) %dest) unnamed_addr #0 {\nstart:\n; call &lt;core::option::Option&lt;alloc::rc::Rc&lt;(alloc::string::String, cargo::core::resolver::types::RcL\nist&lt;alloc::string::String&gt;)&gt;&gt; as core::default::Default&gt;::default\n  %_3 = call i64* @_RNvXs9_NtCseeAmXa5bjUx_4core6optionINtB5_6OptionINtNtCsdfan3MWuEp4_5alloc2rc2RcT\nNtNtBP_6string6StringINtNtNtNtCs3LJk5zYATtk_5cargo4core8resolver5types6RcListB1g_EEEENtNtB7_7default\n7Default7defaultB1K_()\n  br label %bb1\n\nbb1:                                              ; preds = %start\n; call core::mem::replace::&lt;core::option::Option&lt;alloc::rc::Rc&lt;(alloc::string::String, cargo::core::\nresolver::types::RcList&lt;alloc::string::String&gt;)&gt;&gt;&gt;\n  %0 = call i64* @_RINvNtCseeAmXa5bjUx_4core3mem7replaceINtNtB4_6option6OptionINtNtCsdfan3MWuEp4_5al\nloc2rc2RcTNtNtB10_6string6StringINtNtNtNtCs3LJk5zYATtk_5cargo4core8resolver5types6RcListB1r_EEEEEB1W\n_(i64** align 8 dereferenceable(8) %dest, i64* %_3)\n  br label %bb2\n\nbb2:                                              ; preds = %bb1\n  ret i64* %0\n}\n</code></pre></div>",
        "id": 206240323,
        "sender_full_name": "njn",
        "timestamp": 1596794182
    },
    {
        "content": "<p>That has two unnecessary branches to two unnecessary labels</p>",
        "id": 206240335,
        "sender_full_name": "njn",
        "timestamp": 1596794199
    },
    {
        "content": "<p>skimming through this file, I haven't yet found a branch that was necessary(!)</p>",
        "id": 206240390,
        "sender_full_name": "njn",
        "timestamp": 1596794264
    },
    {
        "content": "<p>Lots of functions with three unnecessary branches to three unnecessary labels</p>",
        "id": 206240480,
        "sender_full_name": "njn",
        "timestamp": 1596794346
    },
    {
        "content": "<p>in debug builds there are debug annotations associated with these branches and labels, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>  br label %bb1, !dbg !363425\n\nbb1:                                              ; preds = %start\n  ret i64* %0, !dbg !363426\n}\n</code></pre></div>",
        "id": 206240591,
        "sender_full_name": "njn",
        "timestamp": 1596794417
    },
    {
        "content": "<p>Not sure if they are important, but might explain why they're present</p>",
        "id": 206240606,
        "sender_full_name": "njn",
        "timestamp": 1596794431
    },
    {
        "content": "<p>There is already code to prevent an unnecessary jump from the function prelude to the start mir block in case there is no jump from any mir block to the start block (aka the start mir block has no predecessors). Something similar could be done for the return block when there is exactly one predecessor.</p>",
        "id": 206240926,
        "sender_full_name": "bjorn3",
        "timestamp": 1596794740
    },
    {
        "content": "<p>Why does that code use <code>call</code> instead of <code>invoke</code>? Is <code>-Cpanic=abort</code> in that example <span class=\"user-mention\" data-user-id=\"120989\">@njn</span>?</p>",
        "id": 206241171,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596794964
    },
    {
        "content": "<p>Sorry, I just turned that computer off for the weekend</p>",
        "id": 206241229,
        "sender_full_name": "njn",
        "timestamp": 1596795006
    },
    {
        "content": "<p>Reasonable</p>",
        "id": 206241251,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596795027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> It's not just the return block, as shown by the example above with <code>bb2</code></p>",
        "id": 206241271,
        "sender_full_name": "njn",
        "timestamp": 1596795053
    },
    {
        "content": "<p>The \"bb\" labels suggest that every basic block is getting its own label, and we always branch from one basic block to the next even when it's not necessary, or something like that</p>",
        "id": 206241986,
        "sender_full_name": "njn",
        "timestamp": 1596795688
    },
    {
        "content": "<p>If i could interject quickly: currently mir only generates a single return block (except for the generator transform which can insert more) but there is an optmization being worked on that would push returns up into predecessors (see issue: <a href=\"https://github.com/rust-lang/rust/issues/72022\">https://github.com/rust-lang/rust/issues/72022</a>, opt: <a href=\"https://github.com/rust-lang/rust/pull/74839\">https://github.com/rust-lang/rust/pull/74839</a>)</p>",
        "id": 206242344,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1596795998
    },
    {
        "content": "<p>That seems quite different. I'm complaining about small functions with straight-line code having one or more obviously unnecessary <code>br label %bbN / bbN:</code> pairs...</p>",
        "id": 206243011,
        "sender_full_name": "njn",
        "timestamp": 1596796669
    },
    {
        "content": "<p>it seems like this would be handled by this optimization (or really SimplifyCfg) or are you talking about this occuring purely in debug builds?</p>",
        "id": 206245050,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1596798538
    },
    {
        "content": "<p>the existence of the block for return is probably just naive codegen especially since previously there oculd only be a single return for the whole function</p>",
        "id": 206245136,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1596798605
    },
    {
        "content": "<p>Maybe they could be handled by this optimization, but \"move returns up to previous blocks\" sounds different to \"remove unnecessary branch/label pairs\".  And as I said before: it's not just the return block, as shown by the example above with bb2</p>",
        "id": 206245664,
        "sender_full_name": "njn",
        "timestamp": 1596799079
    },
    {
        "content": "<p>that might just happen with <code>-Cpanic=abort</code>, otherwise codegen should be using <code>invoke</code> instead of <code>call</code>, which is a terminator and <em>requires</em> the next block to exist</p>",
        "id": 206245765,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596799165
    }
]