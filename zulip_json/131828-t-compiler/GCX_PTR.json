[
    {
        "content": "<p>How does <a href=\"https://github.com/rust-lang/rust/blob/c058a8b8dc5dea0ed9b33e14da9e317e2749fcd7/src/librustc_middle/ty/query/job.rs#L13-L14\">this code</a> work?</p>",
        "id": 205555191,
        "sender_full_name": "njn",
        "timestamp": 1596167181
    },
    {
        "content": "<p>How does that <code>gcx_ptr</code> ref get returned as a pointer outside the closure without some kind of lifetime problems?</p>",
        "id": 205555203,
        "sender_full_name": "njn",
        "timestamp": 1596167229
    },
    {
        "content": "<p>(I'm fiddling with this code, and when I changed it slightly I do get lifetime errors.)</p>",
        "id": 205555207,
        "sender_full_name": "njn",
        "timestamp": 1596167246
    },
    {
        "content": "<p>My goal here is to simply eliminate <code>GCX_PTR</code>, because it's almost exactly duplicating the <code>TLV</code> that holds the <code>ImplicitCtxt</code></p>",
        "id": 205555249,
        "sender_full_name": "njn",
        "timestamp": 1596167288
    },
    {
        "content": "<p>And it's only used by the deadlock handler for the parallel compiler</p>",
        "id": 205555254,
        "sender_full_name": "njn",
        "timestamp": 1596167299
    },
    {
        "content": "<p>The <code>LocalKey</code> <a href=\"https://doc.rust-lang.org/std/thread/struct.LocalKey.html#method.with\">docs</a> say \"The <code>with</code> method yields a reference to the contained value which cannot be sent across threads or escape the given closure.\"</p>",
        "id": 205555322,
        "sender_full_name": "njn",
        "timestamp": 1596167447
    },
    {
        "content": "<p>It sure seems like the reference is escaping the given closure</p>",
        "id": 205555328,
        "sender_full_name": "njn",
        "timestamp": 1596167467
    },
    {
        "content": "<p>Maybe because <code>GCX_PTR</code> is a thread-local with type <code>Lock&lt;usize&gt;</code>, and <code>Lock</code> is <code>Send</code> and <code>Sync</code>?</p>",
        "id": 205555482,
        "sender_full_name": "njn",
        "timestamp": 1596167728
    },
    {
        "content": "<p>Or maybe because this fn is <code>unsafe</code>?</p>",
        "id": 205556983,
        "sender_full_name": "njn",
        "timestamp": 1596170157
    },
    {
        "content": "<p>It casts the reference to a raw ptr and back.</p>",
        "id": 205563300,
        "sender_full_name": "bjorn3",
        "timestamp": 1596178751
    },
    {
        "content": "<p>Within the closure it doesn't do the \"and back\" part</p>",
        "id": 205563430,
        "sender_full_name": "njn",
        "timestamp": 1596178910
    }
]