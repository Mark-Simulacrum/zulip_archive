[
    {
        "content": "<p>If a code base have a bunch of <code>write!</code> but some parts only need to write one character or one byte, to keep consistency with the code base, one would usually do <code>write!(buf, \"a\")</code> which results in slightly worse generated code. I wonder if we should allow <code>char</code> and <code>u8</code> as input to <code>format_args!</code> to allow that?</p>",
        "id": 206450305,
        "sender_full_name": "pickfire",
        "timestamp": 1597058553
    },
    {
        "content": "<p>Why not just fix the generated code?</p>",
        "id": 206450329,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597058587
    },
    {
        "content": "<p>Generated code is fixed in <a href=\"https://github.com/rust-lang/rust/pull/75358\">https://github.com/rust-lang/rust/pull/75358</a> only without extra arguments.</p>",
        "id": 206451205,
        "sender_full_name": "pickfire",
        "timestamp": 1597059379
    },
    {
        "content": "<p>But I think the generated code to write a single byte, single char and str is different. I didn't check and maybe I am wrong.</p>",
        "id": 206451237,
        "sender_full_name": "pickfire",
        "timestamp": 1597059433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/131828-t-compiler/topic/format_args!.20accept.20u8.20and.20char/near/206450329\">said</a>:</p>\n<blockquote>\n<p>Why not just fix the generated code?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> is it possible?</p>",
        "id": 206451260,
        "sender_full_name": "pickfire",
        "timestamp": 1597059459
    },
    {
        "content": "<p>byte, char, and str are all different things though, so they should end up with different code</p>",
        "id": 206451998,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597060207
    },
    {
        "content": "<p>I don't think it's possible to fix the underlying efficiency problems (with or without adding new surface features to <code>format_args!</code>) without changing what it expands to, and thus the implementation of <code>core::fmt::Arguments</code></p>",
        "id": 206452172,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597060352
    },
    {
        "content": "<p>That is totally something I'd like to see, but also a large amount of work (for example, to ensure the generated code stays simple enough to not regress compile times)</p>",
        "id": 206452216,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597060395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> Do you think adding support for <code>char</code> and <code>u8</code> a good idea or do you have anything in mind to let the user easily optimize it?</p>",
        "id": 206464608,
        "sender_full_name": "pickfire",
        "timestamp": 1597068630
    },
    {
        "content": "<p>I don't see how that would be implemented in a way that's faster than what we have now</p>",
        "id": 206464656,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068661
    },
    {
        "content": "<p>But currently char and byte is probably faster than str. So why not?</p>",
        "id": 206464694,
        "sender_full_name": "pickfire",
        "timestamp": 1597068689
    },
    {
        "content": "<p><code>format_args!(\"{}\", some_u8)</code> should already compile down to filling a <code>core::fmt::Arguments</code> with just the formatting of the <code>u8</code></p>",
        "id": 206464716,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068700
    },
    {
        "content": "<p>Oh, so it is the same as using bytes and chars?</p>",
        "id": 206464747,
        "sender_full_name": "pickfire",
        "timestamp": 1597068714
    },
    {
        "content": "<p>It should be?</p>",
        "id": 206464826,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068739
    },
    {
        "content": "<p>Well in any case, the first step should be to actually find out that this is currently too slow and would be improved by your change</p>",
        "id": 206464881,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068773
    },
    {
        "content": "<p>Oh, you mean when you want to write a raw <code>u8</code> to the writer?</p>",
        "id": 206464917,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068796
    },
    {
        "content": "<p>That shouldn't go through <code>format_args!</code> at all, it's meant for UTF-8 data only</p>",
        "id": 206464966,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597068819
    },
    {
        "content": "<p>I meant it may be good to use <code>write!()</code> for everywhere for consistency, leaving some place for <code>write_char</code> may look weird, <code>write!()</code> is a macro so it can be tuned to handle raw <code>u8</code> too, or just a single <code>char</code>.</p>",
        "id": 206465251,
        "sender_full_name": "pickfire",
        "timestamp": 1597068949
    },
    {
        "content": "<p>But yes, the changes may be in <code>write!()</code> but not in <code>format_args!()</code>.</p>",
        "id": 206465321,
        "sender_full_name": "pickfire",
        "timestamp": 1597068973
    },
    {
        "content": "<p>I don't think that change makes sense, but the libs team would have to decide on this</p>",
        "id": 206465429,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597069032
    },
    {
        "content": "<p>I don't think that the <code>write!</code> macro should accept things that aren't strings, because that would make it less type safe to use.</p>",
        "id": 206487023,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079786
    },
    {
        "content": "<p>I do, however, think that there should be easier ways to work with bytes.</p>",
        "id": 206487051,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079809
    },
    {
        "content": "<p>If you want something that automatically figures out what you have, you could define a trait for the things you want to write. That would be application-specific though.</p>",
        "id": 206487246,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079920
    },
    {
        "content": "<p>Should we move this discussion to <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a>?</p>",
        "id": 206540994,
        "sender_full_name": "pickfire",
        "timestamp": 1597122983
    },
    {
        "content": "<p><code>write!</code> is a macro and I think it should accepts stuff that is writable, rather that just strictly strings. It can improve readability a lot and gives performance boost with little change, like how those find and replace <code>Pattern</code> API is.</p>",
        "id": 206541016,
        "sender_full_name": "pickfire",
        "timestamp": 1597123072
    },
    {
        "content": "<p>I know that it <em>can</em>. But I'm not sure it should.</p>",
        "id": 206541709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597124198
    },
    {
        "content": "<p>I would love to have a <code>write_bytes!</code>. Usually I just call <code>.write_all</code> though.</p>",
        "id": 206541783,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597124338
    },
    {
        "content": "<p>I think it <em>can</em> and it <em>should</em>.</p>",
        "id": 206543250,
        "sender_full_name": "pickfire",
        "timestamp": 1597126407
    },
    {
        "content": "<p>But I don't mean using it for <code>&amp;[u8]</code>, I am just saying a single <code>char</code> and <code>u8</code>. Either way, I don't have much opinion on writing bytes but it would be good to have that.</p>",
        "id": 206543348,
        "sender_full_name": "pickfire",
        "timestamp": 1597126535
    },
    {
        "content": "<p>Are you talking about a literal, or an arbitrary expression of that type?</p>",
        "id": 206544774,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597128475
    },
    {
        "content": "<p>If the former, that's not <em>too</em> harmful, but it doesn't seem all that helpful either.</p>",
        "id": 206544823,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597128502
    },
    {
        "content": "<p>If the latter, that would reduce the compiler's ability to give good errors.</p>",
        "id": 206544847,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597128541
    },
    {
        "content": "<p>(Also, in the case of a u8, that should only work with io, not fmt, but <code>write!</code> normally works with both.)</p>",
        "id": 206544861,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597128586
    },
    {
        "content": "<p>I mean something like <code>write!(buf, 'a')</code> or <code>write!(buf, b'a')</code>.</p>",
        "id": 206581429,
        "sender_full_name": "pickfire",
        "timestamp": 1597155956
    },
    {
        "content": "<p>Perf is nice bonus it we can get, however <code>write!</code> macro is for easy, not performance.<br>\nWhen it come down to perf, one should use specialized methods.</p>",
        "id": 206582420,
        "sender_full_name": "lzutao",
        "timestamp": 1597156420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span>  that's not the usual \"bending the curve\" Rust talk <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 206585594,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597157929
    },
    {
        "content": "<p>thanks for the pointer. Never saw that talk before.</p>",
        "id": 206586401,
        "sender_full_name": "lzutao",
        "timestamp": 1597158326
    },
    {
        "content": "<p>Well, why not we call it easy performance? It still remains easy, more to that it gets more performance easy too.</p>",
        "id": 206700439,
        "sender_full_name": "pickfire",
        "timestamp": 1597242128
    },
    {
        "content": "<p>I don't see how. Macros don't have way to overload its inputs AFAIK.</p>",
        "id": 206701314,
        "sender_full_name": "lzutao",
        "timestamp": 1597242555
    },
    {
        "content": "<p>Unless you want another separate macro. But in that case why not use specialized methods though.</p>",
        "id": 206701469,
        "sender_full_name": "lzutao",
        "timestamp": 1597242611
    },
    {
        "content": "<p>Oh, let me think. <code>write!</code> expands to <code>Arguments::new_v1</code>. Maybe we could generic its arguments there.</p>",
        "id": 206701628,
        "sender_full_name": "lzutao",
        "timestamp": 1597242681
    },
    {
        "content": "<p>Good idea. But does anyone from the libs team think this is a good idea?</p>",
        "id": 206897503,
        "sender_full_name": "pickfire",
        "timestamp": 1597379716
    },
    {
        "content": "<p>(you may want to ask in <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a>)</p>",
        "id": 207508480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919499
    }
]