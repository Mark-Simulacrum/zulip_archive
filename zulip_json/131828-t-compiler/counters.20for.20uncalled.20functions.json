[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> and I were talking about how to emit coverage counters set to 0 for functions which aren't called</p>",
        "id": 217216520,
        "sender_full_name": "tmandry",
        "timestamp": 1605746516
    },
    {
        "content": "<p>the problem, as I understand it, is that a <code>MonoItem</code> never gets generated for these functions, so codegen never happens for them</p>",
        "id": 217216593,
        "sender_full_name": "tmandry",
        "timestamp": 1605746563
    },
    {
        "content": "<p>Richâ€“ it sounds like you were planning to put code in the partitioner that picks a codegen unit to emit these</p>",
        "id": 217216623,
        "sender_full_name": "tmandry",
        "timestamp": 1605746604
    },
    {
        "content": "<p>as in this module? <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/partitioning/index.html\"><code>rustc_mir::monomorphize::partitioning</code></a></p>",
        "id": 217216713,
        "sender_full_name": "tmandry",
        "timestamp": 1605746679
    },
    {
        "content": "<p>I'm thinking that I could iterate over the CGUs here: <a href=\"https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs#L618\">https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs#L618</a></p>",
        "id": 217216734,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605746708
    },
    {
        "content": "<p>Would -Z link-dead-code help with that? That's what tarpaulin does.</p>",
        "id": 217216756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605746741
    },
    {
        "content": "<p>Or whatever link-dead-code does internally</p>",
        "id": 217216818,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605746775
    },
    {
        "content": "<p>collect a list of all <code>MonoItem</code>s in all CGUs, and  use an <code>ItemLikeVisitor</code> to find all <code>Fn</code> items, compare them, and any <code>Fn</code> without a <code>MonoItem</code> should be added to the coverage map in the first (just to pick one) CGU.</p>",
        "id": 217216831,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605746797
    },
    {
        "content": "<p>It doesn't appear to help</p>",
        "id": 217216843,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605746816
    },
    {
        "content": "<p>(-Z link-dead-code)</p>",
        "id": 217216850,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605746827
    },
    {
        "content": "<p>(-C link-dead-code actually)</p>",
        "id": 217216975,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605746931
    },
    {
        "content": "<p>One example of the issue is <a href=\"https://github.com/richkadel/rust/blob/48ab271775c7f2abbd124d4775a8d29408c36700/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs#L9-L14\">https://github.com/richkadel/rust/blob/48ab271775c7f2abbd124d4775a8d29408c36700/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs#L9-L14</a></p>",
        "id": 217217109,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605747045
    },
    {
        "content": "<blockquote>\n<p>collect a list of all <code>MonoItem</code>s in all CGUs, and  use an <code>ItemLikeVisitor</code> to find all <code>Fn</code> items, compare them, and any <code>Fn</code> without a <code>MonoItem</code> should be added to the coverage map in the first (just to pick one) CGU.</p>\n</blockquote>\n<p>ok and I guess that would mean calling a coverageinfo method directly from rustc_codegen_ssa?</p>",
        "id": 217217138,
        "sender_full_name": "tmandry",
        "timestamp": 1605747071
    },
    {
        "content": "<p>The async function body for <code>g()</code> is never invoked, so it's closure is never included as a <code>MonoItem</code></p>",
        "id": 217217158,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605747092
    },
    {
        "content": "<p><code>FunctionCoverage</code> is implemented in <code>rustc_codegen_ssa</code> actually. It should be fine.</p>",
        "id": 217217300,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605747217
    },
    {
        "content": "<p>yeah that's fine, just trying to get an idea</p>",
        "id": 217217474,
        "sender_full_name": "tmandry",
        "timestamp": 1605747366
    },
    {
        "content": "<p>I was thinking that we might already do such a walk over HIR items in the mono item collector, but that's probably not right</p>",
        "id": 217217650,
        "sender_full_name": "tmandry",
        "timestamp": 1605747524
    },
    {
        "content": "<p>we probably only \"seed\" it with public functions (or <code>main</code>) and collect the transitive closure of what they call</p>",
        "id": 217217681,
        "sender_full_name": "tmandry",
        "timestamp": 1605747571
    },
    {
        "content": "<p>so while I think walking HIR in the codegen stage <em>feels</em> wrong to me, since I'm not aware of anything like that we do today</p>",
        "id": 217217822,
        "sender_full_name": "tmandry",
        "timestamp": 1605747684
    },
    {
        "content": "<p>it definitely seems like the simplest way of implementing this</p>",
        "id": 217217890,
        "sender_full_name": "tmandry",
        "timestamp": 1605747736
    },
    {
        "content": "<p>..so, any objections? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 217218057,
        "sender_full_name": "tmandry",
        "timestamp": 1605747855
    },
    {
        "content": "<p>I might be able to implement it as a new query provider</p>",
        "id": 217218062,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605747859
    },
    {
        "content": "<p>That's how the original mono_items are created:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">collect_and_partition_mono_items</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">CrateNum</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217218239,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605747990
    },
    {
        "content": "<p>using the query system for caching might be helpful here</p>",
        "id": 217218254,
        "sender_full_name": "tmandry",
        "timestamp": 1605748005
    },
    {
        "content": "<p>This seems appropriate</p>",
        "id": 217218267,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605748022
    },
    {
        "content": "<p>do we have a query for all of the function items in HIR?</p>",
        "id": 217218277,
        "sender_full_name": "tmandry",
        "timestamp": 1605748033
    },
    {
        "content": "<p>I wouldn't be surprised if other code needs that</p>",
        "id": 217218305,
        "sender_full_name": "tmandry",
        "timestamp": 1605748063
    },
    {
        "content": "<p>Maybe... I haven't seen that. Most code just writes an ItemLikeVisitor, from what I've seen (not that there are many examples of this)</p>",
        "id": 217218383,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605748117
    },
    {
        "content": "<p>A similar query may be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">all_traits</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">CrateNum</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"p\">[</span><span class=\"n\">DefId</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217218424,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605748171
    },
    {
        "content": "<p>could be that it's cheap enough to do the crawl every time, or maybe every use is a bit different</p>",
        "id": 217218430,
        "sender_full_name": "tmandry",
        "timestamp": 1605748176
    },
    {
        "content": "<p>Maybe this one would be good:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">mir_keys</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">CrateNum</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">FxHashSet</span><span class=\"o\">&lt;</span><span class=\"n\">LocalDefId</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217218533,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605748244
    },
    {
        "content": "<p><code>Finds the full set of DefIds within the current crate that have MIR associated with them.</code></p>",
        "id": 217218587,
        "sender_full_name": "tmandry",
        "timestamp": 1605748312
    },
    {
        "content": "<p>yeah, that does seem promising :)</p>",
        "id": 217218616,
        "sender_full_name": "tmandry",
        "timestamp": 1605748324
    },
    {
        "content": "<p>Now that I think about it, this should help with generic and <code>#[inline]</code> functions too</p>",
        "id": 217218686,
        "sender_full_name": "tmandry",
        "timestamp": 1605748370
    },
    {
        "content": "<p>we should emit zero counters for them if they're never invoked by the local crate</p>",
        "id": 217218708,
        "sender_full_name": "tmandry",
        "timestamp": 1605748389
    },
    {
        "content": "<p>and if they're invoked by a downstream crate, that crate can add new counters for the same code regions (that doesn't break anything does it?)</p>",
        "id": 217218789,
        "sender_full_name": "tmandry",
        "timestamp": 1605748449
    },
    {
        "content": "<p>(in fact this applies to any public function, not just generic or <code>#[inline]</code> ones)</p>",
        "id": 217218808,
        "sender_full_name": "tmandry",
        "timestamp": 1605748469
    },
    {
        "content": "<p>I <em>think</em> that's OK? They are zeros otherwise. Should just be whatever new counters + 0</p>",
        "id": 217218820,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605748491
    },
    {
        "content": "<p>and assuming that works, I wonder if we can emit a single zero counter for the entire span of the body, or have to break it up into the same spans we would use if the function were being codegenned</p>",
        "id": 217219376,
        "sender_full_name": "tmandry",
        "timestamp": 1605749075
    },
    {
        "content": "<p>but I'm derailing a bit</p>",
        "id": 217219402,
        "sender_full_name": "tmandry",
        "timestamp": 1605749113
    },
    {
        "content": "<p>Grr   mobile app issues</p>",
        "id": 217220657,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605750487
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 217220672,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605750510
    },
    {
        "content": "<p>I should have the computed counters but I don't want to add them because it would add unnecessary weight to the coverage map</p>",
        "id": 217220773,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605750610
    },
    {
        "content": "<p>So I completed the implementation of this last night, but it doesn't work <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span> </p>\n<p>I spent part of today trying to understand why. There are actually a couple of issues.</p>\n<ol>\n<li>For the original case I was trying to solve, it compiles, the binary runs, and <code>llvm-profdata</code> indexes the file, but <code>llvm-show</code> fails with `:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>error: if: Failed to load coverage: Malformed instrumentation profile data\n</code></pre></div>\n<p>As far as I can tell, the coverage map  (looking at LLVM IR, and debug logs) is consistent. Assuming that's true, I think the main difference is, the function record refers to a function (by mangled symbol) that is not defined in LLVM IR. By definition, it was not codegenned. My guess is, <code>llvm-cov</code> fails if the coverage map includes coverage for a function that does not exist.</p>\n<p>Maybe my guess is wrong, but I'm not sure what other explanations might be.</p>\n<ol start=\"2\">\n<li>I also tried to reproduce this by defining an unused public function in my simple test program, along with the test <code>main()</code>. I was a little surprised to see the unused function showed no coverage. It was codegenned, so my new code did not come into play. (I think <code>pub</code> functions are found by the <code>RootCollector()</code>, along with <code>main()</code>.)</li>\n</ol>\n<p>I'm confused by this because <code>llvm-cov show --debug</code> shows that the tool recognizes the counter for this code region:</p>\n<div class=\"codehilite\"><pre><span></span><code>Counter in file 0 3:20 -&gt; 5:2\n</code></pre></div>\n<p>But I'd expect the lines to show counts of <code>0</code>, and they don't. There are no counts.</p>\n<p>I think the linker may be filtering it out.</p>\n<p>Maybe the linker filtered out that uncalled function, but if it did, it's curious why <code>llvm-cov</code> did not fail like it did for the missing closure (my first issue above).</p>\n<p>(FYI: I also tried explicitly setting <code>-C link-dead-code=on</code> (which should already be the default anyway, when using <code>-Z instrument-coverage</code>) but it didn't make a difference.)</p>\n<p>I don't see any <code>llvm-cov</code> flags to force it to include stats for the counters for uncalled functions. </p>\n<p>Considering both of these issues, I'm concerned that if I try to resolve problem 1 (say, but forcing the unused closure to be codegenned), it may not solve my original requirement after all. I want to see the lines/region counted (with a zero 0). </p>\n<p>I may need to defer this issue if I can't find some practical workarounds.</p>",
        "id": 217343379,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605827377
    },
    {
        "content": "<p>FYI, I'm seeing a similar problem (same <code>llvm-cov</code> error message) in this coverage bug report: <a href=\"https://github.com/rust-lang/rust/issues/79175#issuecomment-730796279\">https://github.com/rust-lang/rust/issues/79175#issuecomment-730796279</a></p>\n<p>I've included some analysis and a possible common cause.</p>",
        "id": 217354331,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605838187
    }
]