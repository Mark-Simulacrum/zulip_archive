[
    {
        "content": "<p>was talking with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about rustc-bisect after I've heard of it during the weekly meeting</p>",
        "id": 164180880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556206300
    },
    {
        "content": "<p>would be nice to be able to run <code>cargo bisect-rustc</code> on the project itself</p>",
        "id": 164180986,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556206349
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>)</p>",
        "id": 164181474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206629
    },
    {
        "content": "<p>Yeah, so, I think cargo-bisect-rustc is awesome but could be made a lot simpler</p>",
        "id": 164181486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206638
    },
    {
        "content": "<p>My \"north star\" is that when somebody reports a regression</p>",
        "id": 164181492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206647
    },
    {
        "content": "<p>They should be able to go to their project</p>",
        "id": 164181499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206651
    },
    {
        "content": "<p>And instead of doing <code>cargo build</code> do <code>cargo install cargo-bisect-rustc; cargo bisect-rustc</code></p>",
        "id": 164181514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206662
    },
    {
        "content": "<p>and they should get a \"report\" they can paste into the bug report</p>",
        "id": 164181535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206674
    },
    {
        "content": "<p>it would say something like:</p>\n<hr>\n<p>Regression occurred on <strong>nightly-2018-04-28</strong> and specifically PR <a href=\"https://github.com/rust-lang/rust/issues/12153\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/12153\">#12153</a> (cc @authors of the pr, @rust-lang/compiler)</p>",
        "id": 164181629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206707
    },
    {
        "content": "<p>Then there would be options to do more advanced stuff</p>",
        "id": 164181642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206714
    },
    {
        "content": "<p>The way I imagine this working is a few things:</p>\n<ul>\n<li>First, we bisect using nightly builds -- but we assume the currently installed nightly is the end point, and we search exponentially backwards to find a start point</li>\n</ul>",
        "id": 164181678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206737
    },
    {
        "content": "<ul>\n<li>Once we know the nightly where it went wrong, we checkout (into a temporary directory) <code>rust-lang/rust</code> and we use the SHA1-range for the nightly to get a PR range</li>\n</ul>",
        "id": 164181746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206765
    },
    {
        "content": "<ul>\n<li>Then we bisect within the PRs, if possible</li>\n</ul>",
        "id": 164181753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206769
    },
    {
        "content": "<ul>\n<li>Finally we emit the output</li>\n</ul>",
        "id": 164181760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206777
    },
    {
        "content": "<p>Ideally, we'd use GH API to include information in that output, like the list of PRs in the nightly etc, but</p>",
        "id": 164181841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556206814
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164181957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556206905
    },
    {
        "content": "<blockquote>\n<p>and they should get a \"report\" they can paste into the bug report</p>\n</blockquote>\n<p>though maybe it takes a while to run :)</p>",
        "id": 164186648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556210084
    },
    {
        "content": "<p>I am happy to hand off ownership or review PRs but do not have bandwidth for this sort of overhaul myself</p>",
        "id": 164196581,
        "sender_full_name": "simulacrum",
        "timestamp": 1556216734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm trying to find somebody else to do it, indeed :)</p>",
        "id": 164291300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556307247
    },
    {
        "content": "<p>It seems like what needs to happen is for <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I to sit down and kind of draw up a roadmap, eh? I could see this being a (potentially small) working group, though I think there might be enough work that 2 or 3 people could hack on it together</p>",
        "id": 164301713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556316245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164314222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1556334023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc-bisect/near/164181486\" title=\"#narrow/stream/131828-t-compiler/topic/rustc-bisect/near/164181486\">these are the comments I was referring to</a></p>",
        "id": 176930536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569849378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> FYI I'm going to take this task slowly meanwhile I'm doing other things</p>",
        "id": 177257286,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570117487
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 177257353,
        "sender_full_name": "simulacrum",
        "timestamp": 1570117545
    },
    {
        "content": "<p>I'm around for questions and such most of the time, though it's been a while since I looked into this</p>",
        "id": 177257363,
        "sender_full_name": "simulacrum",
        "timestamp": 1570117558
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 177257419,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570117571
    },
    {
        "content": "<p>yeah I was going to ask if you had any thought in general</p>",
        "id": 177257440,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570117584
    },
    {
        "content": "<p>first I'm starting to check how the tool works</p>",
        "id": 177257453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570117594
    },
    {
        "content": "<p>Yeah so there's two parts to any bisection tool:</p>\n<ul>\n<li>getting the \"artifacts\" (in our case, rustc binaries)</li>\n<li>actual bisection bit</li>\n</ul>",
        "id": 177257523,
        "sender_full_name": "simulacrum",
        "timestamp": 1570117646
    },
    {
        "content": "<p>the actual bisection bit is actually not a trivial algorithm, particularly as we want to do so without actually knowing all of the points</p>",
        "id": 177257555,
        "sender_full_name": "simulacrum",
        "timestamp": 1570117667
    },
    {
        "content": "<p>it's also (AFAICT) a literally not possible problem, we have to use heuristics, for our case</p>",
        "id": 177257620,
        "sender_full_name": "simulacrum",
        "timestamp": 1570117690
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> FYI I'm going to take this task slowly meanwhile I'm doing other things</p>\n</blockquote>\n<p>I've created this <a href=\"https://github.com/spastorino/cargo-bisect-sample\" target=\"_blank\" title=\"https://github.com/spastorino/cargo-bisect-sample\">https://github.com/spastorino/cargo-bisect-sample</a> as a sample app so it's easier to play with this tool and in particular it helps to build more automation around cargo-bisect-rustc</p>",
        "id": 177257691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570117751
    },
    {
        "content": "<p>now yes :)</p>",
        "id": 177257693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570117753
    },
    {
        "content": "<blockquote>\n<p>it's also (AFAICT) a literally not possible problem, we have to use heuristics, for our case</p>\n</blockquote>\n<p>To elaborate on this a bit...</p>\n<p>We don't generally know what a given result means. In particular, say we have compilers A B C D E (ordered by ~time). A given crate may work on A, C, E due to unrelated breakage in B and D. This means that when bisecting, we don't know whether a bad result means we've reached an edge and should go the other way, or if we're just in the middle somewhere.</p>",
        "id": 177258465,
        "sender_full_name": "simulacrum",
        "timestamp": 1570118285
    },
    {
        "content": "<p>This can also be thought of as the problem that bisection only truly works on a monotonic graph -- you need to only go from broken to working or working to broken at most once</p>",
        "id": 177258504,
        "sender_full_name": "simulacrum",
        "timestamp": 1570118317
    },
    {
        "content": "<p>The main pain point with cargo bisect rustc from a usability perspective is that it is rather hard to determine what the user wants, and talking about the range you want to bisect over is also not really easy: what does \"start\" or \"end\" mean? If it's seen temporally, e.g. start is 2019-01-01 and end is today, then it's a bit weird that the first thing we'll test is today's nightly</p>",
        "id": 177258744,
        "sender_full_name": "simulacrum",
        "timestamp": 1570118450
    },
    {
        "content": "<p>anyway this is all mostly a bit of a brain dump right now :)</p>",
        "id": 177258792,
        "sender_full_name": "simulacrum",
        "timestamp": 1570118477
    },
    {
        "content": "<p>I can try to answer specific questions -- probably easier to deal with than my saying lots of things</p>",
        "id": 177258816,
        "sender_full_name": "simulacrum",
        "timestamp": 1570118500
    },
    {
        "content": "<p>yeah, I understand what you meant</p>",
        "id": 177259979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570119196
    },
    {
        "content": "<p>I guess in a tool like this there should be some premises that may not hold on projects and at that point the tool may not work correctly</p>",
        "id": 177260018,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570119224
    },
    {
        "content": "<p>but I guess it would be sane to assume that you provide a start and an end and there's only one point of failure in between or else the tool may not work</p>",
        "id": 177260128,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570119277
    },
    {
        "content": "<p>we could even start from the last nightly assuming that that's the not working version and going back until there's one that works</p>",
        "id": 177260156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570119302
    },
    {
        "content": "<p>but again, always assuming that there's just one failure between those two points</p>",
        "id": 177260183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570119317
    },
    {
        "content": "<p>and it's the one you're looking for</p>",
        "id": 177260190,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570119323
    },
    {
        "content": "<p>Right. I personally think we might want to give up on bisection for the common case -- just linear scan</p>",
        "id": 177261403,
        "sender_full_name": "simulacrum",
        "timestamp": 1570120110
    },
    {
        "content": "<p>linear scan is plenty fast if we're doing so recently</p>",
        "id": 177261428,
        "sender_full_name": "simulacrum",
        "timestamp": 1570120126
    },
    {
        "content": "<p>is part of the plan here to make <code>rustc-bisect</code> able to do its own local builds, to get a finer grain than what the CI nightlies provide?</p>",
        "id": 177270079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570125738
    },
    {
        "content": "<p>(because there are additional pain points I would anticipate in automating that process, especially if you do not do clean checkouts+builds in between each run)</p>",
        "id": 177270116,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570125772
    },
    {
        "content": "<p>hm, I think I would say at this point no</p>",
        "id": 177270766,
        "sender_full_name": "simulacrum",
        "timestamp": 1570126172
    },
    {
        "content": "<p>since 'random person' does not want to compile rustc</p>",
        "id": 177270774,
        "sender_full_name": "simulacrum",
        "timestamp": 1570126179
    },
    {
        "content": "<p>and bisecting between two rustc bors commits is usually not too hard for a compiler dev</p>",
        "id": 177270802,
        "sender_full_name": "simulacrum",
        "timestamp": 1570126196
    },
    {
        "content": "<p>another pain point is looking for the absence of some output (a warning, or a specific error), grep -v does not help here</p>",
        "id": 177270874,
        "sender_full_name": "lqd",
        "timestamp": 1570126216
    },
    {
        "content": "<p>one thought I have had is to run things with rendered-ansi mode and basically UI test it</p>",
        "id": 177270927,
        "sender_full_name": "simulacrum",
        "timestamp": 1570126256
    },
    {
        "content": "<p>it's a bit error prone but maybe having a \"collection of allowed outputs\" vs. just one is viable there</p>",
        "id": 177270945,
        "sender_full_name": "simulacrum",
        "timestamp": 1570126269
    },
    {
        "content": "<p>I guess those are orthogonal -- I was imagining that we could have a mode for \"I want this error code emitted\", and another with the UI testing</p>",
        "id": 177271000,
        "sender_full_name": "simulacrum",
        "timestamp": 1570126306
    },
    {
        "content": "<p>until then I will make a PR to the tutorial to add the git log command to list bors' commits inside a date range, not a big deal but at least can save someone else a couple minutes looking for that</p>",
        "id": 177271543,
        "sender_full_name": "lqd",
        "timestamp": 1570126634
    },
    {
        "content": "<p>indeed</p>",
        "id": 177271581,
        "sender_full_name": "simulacrum",
        "timestamp": 1570126665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> leaving this as a draft we can use to define goals and tasks</p>",
        "id": 177301946,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570150360
    },
    {
        "content": "<p><a href=\"https://hackmd.io/Ipu9wSL4SCyx9_adR6GKLg\" target=\"_blank\" title=\"https://hackmd.io/Ipu9wSL4SCyx9_adR6GKLg\">https://hackmd.io/Ipu9wSL4SCyx9_adR6GKLg</a></p>",
        "id": 177301949,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570150366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> about <a href=\"https://hackmd.io/Ipu9wSL4SCyx9_adR6GKLg\" target=\"_blank\" title=\"https://hackmd.io/Ipu9wSL4SCyx9_adR6GKLg\">https://hackmd.io/Ipu9wSL4SCyx9_adR6GKLg</a> that we were talking about</p>",
        "id": 177360939,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570209889
    },
    {
        "content": "<p>in particular the tasking</p>",
        "id": 177360957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570209905
    },
    {
        "content": "<p>first of all I was wondering about the <code>Use currently installed nightly as end point</code></p>",
        "id": 177361002,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570209931
    },
    {
        "content": "<p>I think that's probably ok if the users has nightly as the default toolchain</p>",
        "id": 177361025,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570209957
    },
    {
        "content": "<p>but what if the default is stable and there's one or two nightlies?</p>",
        "id": 177361071,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570209968
    },
    {
        "content": "<p>should we discover one?</p>",
        "id": 177361077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570209972
    },
    {
        "content": "<p>I think no</p>",
        "id": 177361097,
        "sender_full_name": "simulacrum",
        "timestamp": 1570209996
    },
    {
        "content": "<p>should we just have a prerequisite of or do have a nightly version as default toolchain or please provide an end point</p>",
        "id": 177361107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210002
    },
    {
        "content": "<p>that's both hard and not really helpful</p>",
        "id": 177361108,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210002
    },
    {
        "content": "<p>yeah I think so</p>",
        "id": 177361114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210010
    },
    {
        "content": "<p>I left some notes in the doc</p>",
        "id": 177361124,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210018
    },
    {
        "content": "<p>I guess I'd go with if you provide an end, we use that one</p>",
        "id": 177361132,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210024
    },
    {
        "content": "<p>otherwise the default toolchain is used</p>",
        "id": 177361147,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210034
    },
    {
        "content": "<p>whatever is that default toolchain</p>",
        "id": 177361170,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210046
    },
    {
        "content": "<p>but it would abort if the start is newer than that one</p>",
        "id": 177361185,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210057
    },
    {
        "content": "<p>I would personally say actually that we don't accept the end toolchain in anyway except for the default one in the current environment</p>",
        "id": 177361212,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210076
    },
    {
        "content": "<p>you may want to look for a regression you're hitting on stable I guess</p>",
        "id": 177361216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210077
    },
    {
        "content": "<blockquote>\n<p>I would personally say actually that we don't accept the end toolchain in anyway except for the default one in the current environment</p>\n</blockquote>\n<p>that's exactly what I'm saying, right? :)</p>",
        "id": 177361277,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210100
    },
    {
        "content": "<p>my english is ungreat and from time to time I need to recheck obvious things :)</p>",
        "id": 177361289,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210112
    },
    {
        "content": "<p>ah, well, \"I guess I'd go with if you provide an end, we use that one\" I interpreted as being you can provide it in other ways</p>",
        "id": 177361294,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210118
    },
    {
        "content": "<p>I meant, if you do from the command line end=2019-08-07 that one would be used</p>",
        "id": 177361364,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210189
    },
    {
        "content": "<p>to be clear this means that the expected workflow is strictly that you start by doing <code>cargo +toolchain check</code>, this fails. So before you file a bug report, you run <code>cargo +toolchain bisect-rustc</code> and that'll look for the first successful nightly/SHA going backwards in time.</p>",
        "id": 177361366,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210190
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 177361439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210227
    },
    {
        "content": "<p>so I'm saying that we would scale back and not provide nearly as many CLI flags -- or maybe \"hide\" them behind some advanced interface</p>",
        "id": 177361441,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210227
    },
    {
        "content": "<p>yep agreed</p>",
        "id": 177361455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210242
    },
    {
        "content": "<p>I think it makes a lot of sense to make the tool be sort of intelligent but overall pretty 'not tunable' at least initially</p>",
        "id": 177361468,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210255
    },
    {
        "content": "<p>what do you mean by not tunable?</p>",
        "id": 177361487,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210273
    },
    {
        "content": "<p>i.e. not too many options, does basically the same thing everytime</p>",
        "id": 177361498,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210287
    },
    {
        "content": "<p>ok</p>",
        "id": 177361572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570210327
    },
    {
        "content": "<p>to be clear I think we can issue breaking changes without a problem here at this point</p>",
        "id": 177361634,
        "sender_full_name": "simulacrum",
        "timestamp": 1570210367
    },
    {
        "content": "<p>hey back, sorry went to have lunch</p>",
        "id": 177365390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213023
    },
    {
        "content": "<p>next about <code>Find a starting point going exponentially backwards</code></p>",
        "id": 177365402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you added a comment there saying what the tool currently does</p>",
        "id": 177365435,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213067
    },
    {
        "content": "<p>but I'm a bit confused here</p>",
        "id": 177365441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213072
    },
    {
        "content": "<p>the tool works by using a start and end and does what you say</p>",
        "id": 177365501,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213088
    },
    {
        "content": "<p>in this case we would be looking for a working version</p>",
        "id": 177365530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213108
    },
    {
        "content": "<p>unsure if the best way to search would be the same in these cases</p>",
        "id": 177365597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213161
    },
    {
        "content": "<p>ah yes you are right</p>",
        "id": 177365609,
        "sender_full_name": "simulacrum",
        "timestamp": 1570213170
    },
    {
        "content": "<p>unsure I got exactly the meaning of your comments</p>",
        "id": 177365619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213176
    },
    {
        "content": "<p>ah ok</p>",
        "id": 177365620,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213177
    },
    {
        "content": "<p>I was remembering wrong and the exact handling is wrong</p>",
        "id": 177365625,
        "sender_full_name": "simulacrum",
        "timestamp": 1570213179
    },
    {
        "content": "<p>er, is complicated and probably wrong</p>",
        "id": 177365637,
        "sender_full_name": "simulacrum",
        "timestamp": 1570213186
    },
    {
        "content": "<p>what is wrong sorry?</p>",
        "id": 177365659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213201
    },
    {
        "content": "<p>ah my reasoning</p>",
        "id": 177365884,
        "sender_full_name": "simulacrum",
        "timestamp": 1570213343
    },
    {
        "content": "<p>I still wonder what's the best way to go back</p>",
        "id": 177366258,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213605
    },
    {
        "content": "<p>isn't maybe nice to try first with the latest available stable?</p>",
        "id": 177366308,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213643
    },
    {
        "content": "<p>I meant, you want to quickly find a working version in this phase</p>",
        "id": 177366421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213715
    },
    {
        "content": "<p>of course you don't want to start from version 1.0 or a previous one :P</p>",
        "id": 177366454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213739
    },
    {
        "content": "<p>and if that fails maybe keep jumping through stables?</p>",
        "id": 177366530,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570213794
    },
    {
        "content": "<p>I would not do that, it's error prone</p>",
        "id": 177367073,
        "sender_full_name": "simulacrum",
        "timestamp": 1570214129
    },
    {
        "content": "<p>it is fairly fast and effective to do the 2x backwards that I suggested</p>",
        "id": 177367085,
        "sender_full_name": "simulacrum",
        "timestamp": 1570214141
    },
    {
        "content": "<p>this does [today; 2 days ago; 4 days ago; 8 days ago; 16 days ago; 1 month ago; 2 months ago] -- that's 7 hops max for most new things</p>",
        "id": 177367171,
        "sender_full_name": "simulacrum",
        "timestamp": 1570214185
    },
    {
        "content": "<p>and most likely it'll be within the first couple</p>",
        "id": 177367178,
        "sender_full_name": "simulacrum",
        "timestamp": 1570214191
    },
    {
        "content": "<p>you could even be more aggressive and start 1 day ago -&gt; 4 days ago  -&gt; 8 days ago -&gt; 16 days ago</p>",
        "id": 177367211,
        "sender_full_name": "simulacrum",
        "timestamp": 1570214217
    },
    {
        "content": "<p>(fwiw, everything that's in the hackmd looks great to me, and I agree that avoiding a checkout is good if we can do it)</p>",
        "id": 177367282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570214271
    },
    {
        "content": "<p>stepping back 1 day, 2, 4 etc is exactly what I had in mind</p>",
        "id": 177367363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570214307
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 177367446,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570214389
    },
    {
        "content": "<blockquote>\n<p>(fwiw, everything that's in the hackmd looks great to me, and I agree that avoiding a checkout is good if we can do it)</p>\n</blockquote>\n<p>now about this ^^^</p>",
        "id": 177367740,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570214558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    - I would avoid a checkout here, it&#39;s pretty expensive disk space/network and quite slow\n    - We can either query GitHub API or I would not mind us running a Rust server somewhere on rust infra for this\n</pre></div>",
        "id": 177367745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570214561
    },
    {
        "content": "<p>what would be the idea then?</p>",
        "id": 177367755,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570214569
    },
    {
        "content": "<p>you query Github API and get a range of PRs and after that?</p>",
        "id": 177367808,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570214604
    },
    {
        "content": "<p>unsure either what you meant by having a Rust server</p>",
        "id": 177367833,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570214628
    },
    {
        "content": "<p>are you suggesting that in order to use this the user should already have a rustc copy around?</p>",
        "id": 177367929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570214672
    },
    {
        "content": "<p>ah so you should not need a checkout</p>",
        "id": 177369138,
        "sender_full_name": "simulacrum",
        "timestamp": 1570215478
    },
    {
        "content": "<p>a checkout is pretty heavy</p>",
        "id": 177369147,
        "sender_full_name": "simulacrum",
        "timestamp": 1570215483
    },
    {
        "content": "<p>we can query the github API for everything we could get from the checkout</p>",
        "id": 177369195,
        "sender_full_name": "simulacrum",
        "timestamp": 1570215494
    },
    {
        "content": "<p>or, if that's hard or slow, I meant we could have an HTTP server that helps out bisectors by providing helpful and not-really-rate limited endpoints</p>",
        "id": 177369220,
        "sender_full_name": "simulacrum",
        "timestamp": 1570215525
    },
    {
        "content": "<p>internally this could either go to github API or reference local github repo or something</p>",
        "id": 177369270,
        "sender_full_name": "simulacrum",
        "timestamp": 1570215564
    },
    {
        "content": "<p>but I meant, unsure if we are talking about the same thing</p>",
        "id": 177369279,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215573
    },
    {
        "content": "<p>once you found that the regression happened on nightly-X-Y-Z</p>",
        "id": 177369291,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215587
    },
    {
        "content": "<p>you may want to find the rustc commit that've caused the problem</p>",
        "id": 177369342,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215603
    },
    {
        "content": "<p>with Github API we can find a set of commits where the culprit is included</p>",
        "id": 177369402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215655
    },
    {
        "content": "<p>but in order to know which one is it we need to bisect through them</p>",
        "id": 177369420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215672
    },
    {
        "content": "<p>still that's what the tool already does</p>",
        "id": 177369428,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215690
    },
    {
        "content": "<p>maybe that's what you meant</p>",
        "id": 177369435,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215693
    },
    {
        "content": "<p>all what new code needs to do is find start and end commits and call the existing bisect function</p>",
        "id": 177369501,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215742
    },
    {
        "content": "<p>so the code would check Github and all that</p>",
        "id": 177369515,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215759
    },
    {
        "content": "<p>if that's what you meant agree :)</p>",
        "id": 177369523,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570215764
    },
    {
        "content": "<p>yes, that's basically it</p>",
        "id": 177370667,
        "sender_full_name": "simulacrum",
        "timestamp": 1570216745
    },
    {
        "content": "<p>we already have full commits from nightlies for start/end so we just need a list of commits</p>",
        "id": 177370682,
        "sender_full_name": "simulacrum",
        "timestamp": 1570216768
    },
    {
        "content": "<p>also</p>",
        "id": 177370745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570216803
    },
    {
        "content": "<p>can't we just take sha's from the nightlies?</p>",
        "id": 177370777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570216826
    },
    {
        "content": "<p>there's no need to go to github api</p>",
        "id": 177370796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570216846
    },
    {
        "content": "<p>I meant the range in which we can look for a PR is ... the good nigthly and the bad nightly that's next to it</p>",
        "id": 177370838,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570216884
    },
    {
        "content": "<p>right</p>",
        "id": 177371248,
        "sender_full_name": "simulacrum",
        "timestamp": 1570217228
    },
    {
        "content": "<p>but to get the per-SHA artifacts you need to enumerate SHAs inbetween those</p>",
        "id": 177371268,
        "sender_full_name": "simulacrum",
        "timestamp": 1570217240
    },
    {
        "content": "<p>that requires API</p>",
        "id": 177371279,
        "sender_full_name": "simulacrum",
        "timestamp": 1570217250
    },
    {
        "content": "<p>but isn't that we the tool already does?</p>",
        "id": 177372824,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570218261
    },
    {
        "content": "<p>right yeah we have that logic already</p>",
        "id": 177373087,
        "sender_full_name": "simulacrum",
        "timestamp": 1570218451
    },
    {
        "content": "<p>so ... there's nothing we need to add then in that regard :)</p>",
        "id": 177373416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570218655
    },
    {
        "content": "<p>well the last thing may be bisecting within the PR</p>",
        "id": 177373463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570218688
    },
    {
        "content": "<p>I guess the tool doesn't do that currently, right?</p>",
        "id": 177373483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570218703
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>- Bisect on beta/stable\n    - go to &#39;real&#39; nightly by looking at version and looking up appropriate branch point nightly\n    - e.g. for 1.39 (currently in beta) branched on September 26th 2019 (date of 1.38 release, ~easily computable with 6 week offsets)\n    - so you&#39;d want nightly-2019-09-27 (this is not perfect, but good enough)\n</pre></div>",
        "id": 177376204,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570220909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm not sure what that means ^^^</p>",
        "id": 177376220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570220924
    },
    {
        "content": "<p>bisecting within a single PR is not tenable for anyone not a compiler dev, you need to build the compiler, this tool will not support that</p>",
        "id": 177376257,
        "sender_full_name": "simulacrum",
        "timestamp": 1570220959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I was proposing a way to bisect into nightlies when given a beta build as the default</p>",
        "id": 177376281,
        "sender_full_name": "simulacrum",
        "timestamp": 1570220987
    },
    {
        "content": "<p>you can sort of \"unwrap\" a beta to get the nightly when it branched</p>",
        "id": 177376297,
        "sender_full_name": "simulacrum",
        "timestamp": 1570221000
    },
    {
        "content": "<p>but this is pretty far future, I wouldn't worry about it too much for now</p>",
        "id": 177376373,
        "sender_full_name": "simulacrum",
        "timestamp": 1570221036
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 177376389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570221053
    },
    {
        "content": "<p>thank you very much for helping me plan this :)</p>",
        "id": 177376424,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570221088
    },
    {
        "content": "<p>sure thing</p>",
        "id": 177376549,
        "sender_full_name": "simulacrum",
        "timestamp": 1570221170
    },
    {
        "content": "<p>gets me off of doing it eventually :)</p>",
        "id": 177376555,
        "sender_full_name": "simulacrum",
        "timestamp": 1570221177
    }
]