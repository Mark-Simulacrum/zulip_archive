[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> -- I was idly thinking to myself about how to make rustc development more amenable to incremental compilation. One of the challenges of course is the need to build a full stage2 build to get things working. If I recall, the main reason we need to do this is for symbol names and dynamic linking, right? (I mean, it's a good idea for when doing a full bootstrap anyway, but in terms of day-to-day development, it'd be nice to avoid.) Does the new work you did on a more a specified dynamic linking algorithm help at all here?</p>",
        "id": 191659082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077138
    },
    {
        "content": "<p>I... I'll need to break that down</p>",
        "id": 191659124,
        "sender_full_name": "eddyb",
        "timestamp": 1585077171
    },
    {
        "content": "<blockquote>\n<p>Does the new work you did on a more a specified dynamic linking algorithm help at all here?</p>\n</blockquote>\n<p>doesn't sound like anything I worked on</p>",
        "id": 191659154,
        "sender_full_name": "eddyb",
        "timestamp": 1585077185
    },
    {
        "content": "<p>sorry I was just typing nonsense</p>",
        "id": 191659232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077231
    },
    {
        "content": "<p>doing too many things at once</p>",
        "id": 191659238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077235
    },
    {
        "content": "<p>I meant symbol naming algorithm</p>",
        "id": 191659241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077238
    },
    {
        "content": "<p>building the compiler locally is never really needed for local work (unless you want to build clippy or miri which need custom drivers)</p>",
        "id": 191659242,
        "sender_full_name": "eddyb",
        "timestamp": 1585077238
    },
    {
        "content": "<p>I don't think symbol names factor into this at all</p>",
        "id": 191659295,
        "sender_full_name": "eddyb",
        "timestamp": 1585077252
    },
    {
        "content": "<p>I could be just totally off base :)</p>",
        "id": 191659310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077265
    },
    {
        "content": "<p>but I definitely remember that <em>at some point</em> stage1 builds would fail with stuff like custom derive, and I <em>believe</em> this was related to symbol naming</p>",
        "id": 191659330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do people actually use stage2 for day to day dev?</p>",
        "id": 191659342,
        "sender_full_name": "centril",
        "timestamp": 1585077285
    },
    {
        "content": "<p>I've tested on stage1 for years now, we just don't have a way to tell <code>x.py</code> aka <code>bootstrap</code> to only build the compiler once but otherwise run as many tests as possible (instead of whitelisting a dozen testsuites like I do)</p>",
        "id": 191659391,
        "sender_full_name": "eddyb",
        "timestamp": 1585077311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> aaaah I see. no, symbol names were just what you were seeing in errors</p>",
        "id": 191659409,
        "sender_full_name": "eddyb",
        "timestamp": 1585077324
    },
    {
        "content": "<p>that's incompatible <code>proc_macro</code> ABI to be exact</p>",
        "id": 191659428,
        "sender_full_name": "eddyb",
        "timestamp": 1585077339
    },
    {
        "content": "<p>I fixed it... some time last year, I think?</p>",
        "id": 191659439,
        "sender_full_name": "eddyb",
        "timestamp": 1585077346
    },
    {
        "content": "<p>I used to use stage1 exclusively but at some point I changed to using stage2 because I was encountering too many annoying problems with stage2</p>",
        "id": 191659449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077357
    },
    {
        "content": "<p>but I'd be happy to know that's all outdated</p>",
        "id": 191659454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077361
    },
    {
        "content": "<p>I use <code>./x.py --keep-stage 1 test --stage 1 --pass check --bless src/test/ui/</code> myself</p>",
        "id": 191659516,
        "sender_full_name": "centril",
        "timestamp": 1585077379
    },
    {
        "content": "<p>(in which case I wonder if we should consider changing the default, or making some easy way so that when compiler devs setup their environment for home builds, stage1 is the default?)</p>",
        "id": 191659524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077383
    },
    {
        "content": "<p>at minimum we should adjust our rustc-dev-guide instructions here, although I confess I've not checked what they currently say</p>",
        "id": 191659561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585077414
    },
    {
        "content": "<p>(well, <code>--keep-stage 1</code> after the first build on a new branch)</p>",
        "id": 191659570,
        "sender_full_name": "centril",
        "timestamp": 1585077420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191659439\" title=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191659439\">said</a>:</p>\n<blockquote>\n<p>I fixed it... some time last year, I think?</p>\n</blockquote>\n<p>You mean <a href=\"https://github.com/rust-lang/rust/issues/49219\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49219\">#49219</a>?</p>",
        "id": 191659577,
        "sender_full_name": "bjorn3",
        "timestamp": 1585077423
    },
    {
        "content": "<p>so, here's the thing: <code>./x.py test --stage 1</code> doesn't build the compiler only once</p>",
        "id": 191659580,
        "sender_full_name": "eddyb",
        "timestamp": 1585077424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah I was looking for the link, but you're faster :P</p>",
        "id": 191659602,
        "sender_full_name": "eddyb",
        "timestamp": 1585077442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway you  want <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>. I've discussed this sort of thing with them before</p>",
        "id": 191659647,
        "sender_full_name": "eddyb",
        "timestamp": 1585077466
    },
    {
        "content": "<p>The only test that always fails for me when testing stage1 is the hotplug-codegen-backend test, so that might indeed have to do with dynamic linking</p>",
        "id": 191659711,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1585077486
    },
    {
        "content": "<p>Yeah, hotplug-codegen-backend needs to be compiled for the same rustc libraries as the rustc it will be linked to.</p>",
        "id": 191659792,
        "sender_full_name": "bjorn3",
        "timestamp": 1585077539
    },
    {
        "content": "<p>it's <em>so much worse</em></p>",
        "id": 191659808,
        "sender_full_name": "eddyb",
        "timestamp": 1585077546
    },
    {
        "content": "<p>so first of all that test clearly needs <code>// ignore-stage1</code> or w/e</p>",
        "id": 191659846,
        "sender_full_name": "eddyb",
        "timestamp": 1585077570
    },
    {
        "content": "<p><em>but also</em>, it's <code>fulldeps</code>. which means that even at <code>--stage 1</code> it builds <code>stage2</code>!</p>",
        "id": 191659946,
        "sender_full_name": "eddyb",
        "timestamp": 1585077606
    },
    {
        "content": "<p><code>fulldeps</code> tests are the bane of my existence and we should (IMO) eradicate them</p>",
        "id": 191659975,
        "sender_full_name": "eddyb",
        "timestamp": 1585077620
    },
    {
        "content": "<p>or at least change the way we run them? I don't even know anymore</p>",
        "id": 191660031,
        "sender_full_name": "eddyb",
        "timestamp": 1585077652
    },
    {
        "content": "<p>Why are they needed instead of being stage2-only tests?</p>",
        "id": 191660094,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1585077692
    },
    {
        "content": "<p>imo, fulldeps tests should be eradicated, yes, and if <em>really</em> needed can be replaced with custom drivers I think (e.g., we build <code>rustc-test-xx</code> and the only thing it does is run a modified rustc that acts like the current fulldeps test did), which should be possible to do at any stage</p>",
        "id": 191660126,
        "sender_full_name": "simulacrum",
        "timestamp": 1585077711
    },
    {
        "content": "<p>for the record, this is (still) my VSCode <code>tasks.json</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"c1\">// See https://go.microsoft.com/fwlink/?LinkId=733558</span>\n    <span class=\"c1\">// for the documentation about the tasks.json format</span>\n    <span class=\"s2\">&quot;version&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;2.0.0&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;tasks&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;label&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;remote&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;type&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;shell&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;command&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;yes &#39;&#39; | head -n $(tput lines) &amp;&amp; clear -x &amp;&amp; git push build -qf $((git stash create; echo HEAD) | head -n1):build-1 &amp;&amp; ssh -t build.lyken.rs \\&quot;env SSL_CERT_FILE=/etc/ssl/certs/ca-bundle.crt nix-shell -E &#39;with import&lt;nixpkgs&gt;{};clangStdenv.mkDerivation{name=\\\\\\&quot;name\\\\\\&quot;;hardeningDisable=[\\\\\\&quot;all\\\\\\&quot;];buildInputs=[ccache cmake fish file gdb libedit libgit2 libxml2 ncurses ninja openssl pkgconfig python37 ripgrep swig which zlib];}&#39; --run &#39;cd /home/eddy/Projects/rust-1 &amp;&amp; git checkout -q --detach build-1 &amp;&amp; ./x.py test --stage 0 src/tools/tidy &amp;&amp; rm -f src/test/debuginfo/issue-22656.rs &amp;&amp; ./x.py test --no-fail-fast --stage 1 src/test/{rustdoc,rustdoc-ui,mir-opt,codegen,codegen-units,incremental,pretty,debuginfo,compile-fail,run-make,run-fail,ui}&#39;\\&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;group&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;kind&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;build&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;isDefault&quot;</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">&quot;options&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;shell&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;executable&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;bash&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;args&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;-c&quot;</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">&quot;presentation&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;echo&quot;</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 191660187,
        "sender_full_name": "eddyb",
        "timestamp": 1585077727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> the ignore-stage1 thing came later</p>",
        "id": 191660251,
        "sender_full_name": "eddyb",
        "timestamp": 1585077765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191659846\" title=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191659846\">said</a>:</p>\n<blockquote>\n<p>so first of all that test clearly needs <code>// ignore-stage1</code> or w/e</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/70368\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70368\">#70368</a></p>",
        "id": 191660288,
        "sender_full_name": "bjorn3",
        "timestamp": 1585077782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> it's... weird. some <code>*-fulldeps</code> tests just use a tiny compiler dependency, like <code>graphviz</code> (I am not kidding, <code>run-make-fulldeps/save-analysis</code> is literally just that)</p>",
        "id": 191660533,
        "sender_full_name": "eddyb",
        "timestamp": 1585077895
    },
    {
        "content": "<p>^ For reference: <a href=\"https://github.com/rust-lang/rust/blob/2dcf54f564c6d8bbf48960fb9aaec88a0e2e062a/src/test/run-make-fulldeps/save-analysis/foo.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2dcf54f564c6d8bbf48960fb9aaec88a0e2e062a/src/test/run-make-fulldeps/save-analysis/foo.rs\">https://github.com/rust-lang/rust/blob/2dcf54f564c6d8bbf48960fb9aaec88a0e2e062a/src/test/run-make-fulldeps/save-analysis/foo.rs</a></p>",
        "id": 191660674,
        "sender_full_name": "bjorn3",
        "timestamp": 1585077970
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/2dcf54f564c6d8bbf48960fb9aaec88a0e2e062a/src/test/run-make-fulldeps/save-analysis/foo.rs#L7-L8\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2dcf54f564c6d8bbf48960fb9aaec88a0e2e062a/src/test/run-make-fulldeps/save-analysis/foo.rs#L7-L8\">lmao</a></p>",
        "id": 191660712,
        "sender_full_name": "eddyb",
        "timestamp": 1585077991
    },
    {
        "content": "<p>I love how some shotgun/exhaustive tests can read like a shitpost (the classic one is weird-syntax or w/e it was called)</p>",
        "id": 191660777,
        "sender_full_name": "eddyb",
        "timestamp": 1585078038
    },
    {
        "content": "<p>You mean <a href=\"https://github.com/rust-lang/rust/blob/2dcf54f564c6d8bbf48960fb9aaec88a0e2e062a/src/test/ui/weird-exprs.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2dcf54f564c6d8bbf48960fb9aaec88a0e2e062a/src/test/ui/weird-exprs.rs\"><code>weird-exprs.rs</code></a>?</p>",
        "id": 191660899,
        "sender_full_name": "bjorn3",
        "timestamp": 1585078093
    },
    {
        "content": "<blockquote>\n<p>// Just a grab bag of stuff that you wouldn't want to actually write.</p>\n</blockquote>",
        "id": 191660935,
        "sender_full_name": "bjorn3",
        "timestamp": 1585078107
    },
    {
        "content": "<p>s/wouldn't want/shouldn't want :)</p>",
        "id": 191660970,
        "sender_full_name": "bjorn3",
        "timestamp": 1585078129
    },
    {
        "content": "<p>Stage two was useful for finding bugs in my polymorphisation work that compiling std or the tests didn't catch, there should still be a easy way to build stage two locally and it should be tested in CI. Prior to the polymorphisation, very rarely did I ever need stage two when hacking on rustc.</p>",
        "id": 191662451,
        "sender_full_name": "davidtwco",
        "timestamp": 1585078954
    },
    {
        "content": "<p>Yes to both those points</p>",
        "id": 191662653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079096
    },
    {
        "content": "<p>IMO we should treat it like \"full bootstrap\" today (which today means stage2-std is actually built and not a copy of stage1-std)</p>",
        "id": 191663368,
        "sender_full_name": "eddyb",
        "timestamp": 1585079493
    },
    {
        "content": "<p>as in, you might want it in some cases, and it's on for CI</p>",
        "id": 191663405,
        "sender_full_name": "eddyb",
        "timestamp": 1585079516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191660187\" title=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191660187\">said</a>:</p>\n<blockquote>\n<p>for the record, this is (still) my VSCode <code>tasks.json</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// ...</span>\n            <span class=\"s2\">&quot;command&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;yes &#39;&#39; | head -n $(tput lines) &amp;&amp; clear -x &amp;&amp; git push build -qf $((git stash create; echo HEAD) | head -n1):build-1 &amp;&amp; ssh -t build.lyken.rs \\&quot;env SSL_CERT_FILE=/etc/ssl/certs/ca-bundle.crt nix-shell -E &#39;with import&lt;nixpkgs&gt;{};clangStdenv.mkDerivation{name=\\\\\\&quot;name\\\\\\&quot;;hardeningDisable=[\\\\\\&quot;all\\\\\\&quot;];buildInputs=[ccache cmake fish file gdb libedit libgit2 libxml2 ncurses ninja openssl pkgconfig python37 ripgrep swig which zlib];}&#39; --run &#39;cd /home/eddy/Projects/rust-1 &amp;&amp; git checkout -q --detach build-1 &amp;&amp; ./x.py test --stage 0 src/tools/tidy &amp;&amp; rm -f src/test/debuginfo/issue-22656.rs &amp;&amp; ./x.py test --no-fail-fast --stage 1 src/test/{rustdoc,rustdoc-ui,mir-opt,codegen,codegen-units,incremental,pretty,debuginfo,compile-fail,run-make,run-fail,ui}&#39;\\&quot;&quot;</span>\n<span class=\"c1\">// ...</span>\n</pre></div>\n\n\n</blockquote>\n<p>oops I forgot about this. what I meant to say is that this is the test command:<br>\n<code>./x.py test --no-fail-fast --stage 1 src/test/{rustdoc,rustdoc-ui,mir-opt,codegen,codegen-units,incremental,pretty,debuginfo,compile-fail,run-make,run-fail,ui}</code></p>",
        "id": 191663566,
        "sender_full_name": "eddyb",
        "timestamp": 1585079599
    },
    {
        "content": "<p>oh wow literally a dozen test suites</p>",
        "id": 191663615,
        "sender_full_name": "eddyb",
        "timestamp": 1585079629
    },
    {
        "content": "<p>(run-fail &amp; compile-fail are vestigial)</p>",
        "id": 191664307,
        "sender_full_name": "centril",
        "timestamp": 1585079959
    },
    {
        "content": "<p>but they still exist, right? ideally we'd get rid of them</p>",
        "id": 191665079,
        "sender_full_name": "eddyb",
        "timestamp": 1585080368
    },
    {
        "content": "<p>I wish refactoring <code>compiletest</code> would be easy</p>",
        "id": 191665099,
        "sender_full_name": "eddyb",
        "timestamp": 1585080382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yea we want to move them to UI tests</p>",
        "id": 191665755,
        "sender_full_name": "centril",
        "timestamp": 1585080769
    },
    {
        "content": "<p>For whatever reason, I often end up with weird errors when I try incremental stage 1 builds, and now I just don't run anything and let the CI warn me if I can</p>",
        "id": 191687610,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585094003
    },
    {
        "content": "<p>Also related: would it be possible to do a check-only compiler? that is, a compiler that is incapable of doing anything except a <code>cargo check</code>. Would that allow us to just run UI tests by building the check-only compiler with beta + incremental and then running ui tests with the check-only compiler?</p>",
        "id": 191687720,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585094082
    },
    {
        "content": "<p>the only thing you could skip is LLVM I guess?</p>",
        "id": 191703578,
        "sender_full_name": "eddyb",
        "timestamp": 1585115835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> at a minimum you can just run <code>./x.py test --stage 1 src/ui</code></p>",
        "id": 191703583,
        "sender_full_name": "eddyb",
        "timestamp": 1585115855
    },
    {
        "content": "<p>would be useful to know what commands you got errors for and how you're enabling incremental, too</p>",
        "id": 191703627,
        "sender_full_name": "eddyb",
        "timestamp": 1585115889
    },
    {
        "content": "<p>since I set <code>incremental = true</code> in <code>config.toml</code> and never pass <code>-i</code></p>",
        "id": 191703629,
        "sender_full_name": "eddyb",
        "timestamp": 1585115900
    },
    {
        "content": "<p>I think the <code>-i</code> flag is weird and easy to miss if you're typing commands by hand and I frankly don't know what will happen then, probably nothing good</p>",
        "id": 191703642,
        "sender_full_name": "eddyb",
        "timestamp": 1585115933
    },
    {
        "content": "<p>oh, hmm... maybe that's it... I didn't know there was a config.toml setting for that. I always use <code>./x.py test --stage 1 -i</code> except that often results in weird compile errors or strange test failures, so then I resort to <code>./x.py test --stage 1</code> which often works but sometimes it doesn't.  I haven't been keeping track of the exact tests that fail though. I can do that in the future</p>",
        "id": 191840177,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585198237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191703629\" title=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/191703629\">said</a>:</p>\n<blockquote>\n<p>since I set <code>incremental = true</code> in <code>config.toml</code> and never pass <code>-i</code></p>\n</blockquote>\n<p>I'm not doing this in general because incremental gives me troubles from time to time</p>",
        "id": 192086179,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585346850
    },
    {
        "content": "<p>right now ...</p>",
        "id": 192086180,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585346852
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: unused attribute\n    --&gt; src/libcore/num/mod.rs:4176:13\n     |\n2446 | / macro_rules! uint_impl {\n2447 | |     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,                                                                                                                                                2448 | |         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n2449 | |         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n...    |\n4176 | |             #[allow_internal_unstable(const_fn_union)]\n     | |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...    |\n4334 | |     }\n4335 | | }\n     | |_- in this expansion of `uint_impl!`\n...\n4850 | /     uint_impl! { u64, u64, 64, 18446744073709551615, &quot;&quot;, &quot;&quot;, 12, &quot;0xaa00000000006e1&quot;, &quot;0x6e10aa&quot;,\n4851 | |     &quot;0x1234567890123456&quot;, &quot;0x5634129078563412&quot;, &quot;0x6a2c48091e6a2c48&quot;,\n4852 | |     &quot;[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]&quot;,\n4853 | |     &quot;[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]&quot;,\n4854 | |     &quot;&quot;, &quot;&quot;}\n     | |___________- in this macro invocation\n</pre></div>",
        "id": 192086191,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585346865
    },
    {
        "content": "<p>getting a bunch of errors like this ^^^</p>",
        "id": 192086210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585346878
    },
    {
        "content": "<p>so I prefer to pass -i unless it doesn't work like right now :)</p>",
        "id": 192086269,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585346894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah that's a known bug, it just doesn't constantly trigger. I tend to nuke <code>stage0-std</code> when that happens</p>",
        "id": 192086571,
        "sender_full_name": "eddyb",
        "timestamp": 1585347139
    },
    {
        "content": "<p>still totally worth it</p>",
        "id": 192086578,
        "sender_full_name": "eddyb",
        "timestamp": 1585347145
    },
    {
        "content": "<p>(but yeah we should fix that bug already lol)</p>",
        "id": 192086591,
        "sender_full_name": "eddyb",
        "timestamp": 1585347158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/192086571\" title=\"#narrow/stream/131828-t-compiler/topic/do.20we.20really.20need.20stage2.2E.2E.3F/near/192086571\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> yeah that's a known bug, it just doesn't constantly trigger. I tend to nuke <code>stage0-std</code> when that happens</p>\n</blockquote>\n<p>what do you mean exactly?</p>",
        "id": 192089047,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349038
    },
    {
        "content": "<p>exactly by what?</p>",
        "id": 192089159,
        "sender_full_name": "eddyb",
        "timestamp": 1585349100
    },
    {
        "content": "<p>it's an incremental bug that triggers from time to time and I <code>rm -rf build/*/stage0-std</code> when it happens</p>",
        "id": 192089199,
        "sender_full_name": "eddyb",
        "timestamp": 1585349134
    },
    {
        "content": "<p>and after that it goes away?, it was consistently happening to me</p>",
        "id": 192089283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349181
    },
    {
        "content": "<p>well, yes, unless you change <code>libcore</code> again</p>",
        "id": 192089298,
        "sender_full_name": "eddyb",
        "timestamp": 1585349195
    },
    {
        "content": "<p>I don't know the exact condition, I think enough code in <code>libcore</code> has to change, so that attributes go out of sync</p>",
        "id": 192089335,
        "sender_full_name": "eddyb",
        "timestamp": 1585349241
    },
    {
        "content": "<p>I was doing some <code>librustc_mir</code> changes</p>",
        "id": 192089338,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349243
    },
    {
        "content": "<p>how could you see that failure? <code>libcore</code> can't change if you just edit <code>librustc_mir</code></p>",
        "id": 192089365,
        "sender_full_name": "eddyb",
        "timestamp": 1585349261
    },
    {
        "content": "<p>were you switching between branches or rebasing?</p>",
        "id": 192089375,
        "sender_full_name": "eddyb",
        "timestamp": 1585349268
    },
    {
        "content": "<p>so I've compiled last master</p>",
        "id": 192089472,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349340
    },
    {
        "content": "<p>then switched to a branch that has one extra commit</p>",
        "id": 192089483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349353
    },
    {
        "content": "<p>rebased to put that one on top of master</p>",
        "id": 192089487,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349360
    },
    {
        "content": "<p>and tried to compile</p>",
        "id": 192089491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349362
    },
    {
        "content": "<p>in the process you've touched something in <code>libcore</code></p>",
        "id": 192089501,
        "sender_full_name": "eddyb",
        "timestamp": 1585349374
    },
    {
        "content": "<p>nope</p>",
        "id": 192089513,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349383
    },
    {
        "content": "<p>you can avoid that by rebasing directly, without switching to the branch you want to rebase first</p>",
        "id": 192089518,
        "sender_full_name": "eddyb",
        "timestamp": 1585349387
    },
    {
        "content": "<p>but I see what you meant</p>",
        "id": 192089574,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349407
    },
    {
        "content": "<p>e.g. <code>git rebase master my-branch</code></p>",
        "id": 192089579,
        "sender_full_name": "eddyb",
        "timestamp": 1585349409
    },
    {
        "content": "<p>yeah, makes sense <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 192089610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1585349449
    }
]