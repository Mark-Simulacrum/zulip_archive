[
    {
        "content": "<p>Why does cargo recompile crates that depend on a changed crate even if there are no public API changes? Has it just not been implemented yet?</p>",
        "id": 200968610,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592276420
    },
    {
        "content": "<p>Cargo doesn't understand any of the details of the actual crate source code, so it always needs to re-run rustc</p>",
        "id": 200969948,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592278595
    },
    {
        "content": "<p>On top of that, changing private functions can legitimately cause other crates to need to recompiled, due to inlining</p>",
        "id": 200969974,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592278656
    },
    {
        "content": "<p>also, I don't think the currently incremental compilation infrastructure allows determining if only private functions have changed</p>",
        "id": 200970052,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592278777
    },
    {
        "content": "<p>not all query results are serialized to disk, and not everything is query-ified</p>",
        "id": 200970065,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592278798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/incremental.20compilation.20question/near/200970052\">said</a>:</p>\n<blockquote>\n<p>also, I don't think the currently incremental compilation infrastructure allows determining if only private functions have changed</p>\n</blockquote>\n<p>Hmm... I think you might still need to rebuild the other crate if the private function was inlined into a public one or if a public inlined function uses a private type that changed...</p>",
        "id": 200971033,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592280302
    },
    {
        "content": "<p>Couldn't Cargo theoretically only re-run codegen and skip everything else?</p>",
        "id": 201053835,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592331235
    },
    {
        "content": "<p>Codegen is often the most expensive part</p>",
        "id": 201054004,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592331300
    },
    {
        "content": "<p>Wouldn't it still cut down a bit on compile times?</p>",
        "id": 201055024,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592331765
    },
    {
        "content": "<p>Sure, but how would Cargo know when it can do this? Why not use the existing incremental compilation support for this? Pretty sure that already works cross-crate to some extent.</p>",
        "id": 201056626,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592332535
    },
    {
        "content": "<p>I guess I'll have to read up on incremental compilation :)</p>",
        "id": 201057291,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592332872
    },
    {
        "content": "<p>I noticed that <code>./x.py</code> seems to compile rustc in release mode. Is there a way to compile in dev mode, which I assume would be much faster?</p>",
        "id": 201058004,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592333237
    },
    {
        "content": "<p>See <code>config.toml</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code># Whether or not to optimize the compiler and standard library.\n#\n# Note: the slowness of the non optimized compiler compiling itself usually\n#       outweighs the time gains in not doing optimizations, therefore a\n#       full bootstrap takes much more time with `optimize` set to false.\n#optimize = true\n</code></pre></div>",
        "id": 201058130,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592333306
    },
    {
        "content": "<p>If I'm just doing Stage 1, then dev mode would probably be faster since the compiler isn't compiling itself, right?</p>",
        "id": 201059496,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592333966
    },
    {
        "content": "<p>Or have I mixed it up?</p>",
        "id": 201059529,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592333985
    },
    {
        "content": "<p>it still builds libstd</p>",
        "id": 201059616,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592334015
    },
    {
        "content": "<p>So you recommend using release mode?</p>",
        "id": 201060107,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592334269
    },
    {
        "content": "<p>In my experience, the gains from building in debug mode are far outweighted by the additional time taken to run <code>./x.py test</code></p>",
        "id": 201066318,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592337572
    },
    {
        "content": "<p>though the last time I tried that was several months ago</p>",
        "id": 201066364,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592337588
    },
    {
        "content": "<p>its not clear from this conversation, so just to be clear: The <code>optimize</code> and <code>debug</code> settings in <code>config.toml</code> for <code>rustc</code> are completely independent knobs</p>",
        "id": 201066629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592337689
    },
    {
        "content": "<p>i.e. saying \"dev mode\" versus \"release mode\" isn't clearly conveying what <code>config.toml</code> changes you are suggesting</p>",
        "id": 201066728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592337723
    },
    {
        "content": "<p>(and yes, pretty much everyone leaves <code>optimize</code> set to its default of <code>true</code>, due to the drawbacks listed in the <code>config.toml</code> comments.)</p>",
        "id": 201066795,
        "sender_full_name": "pnkfelix",
        "timestamp": 1592337766
    },
    {
        "content": "<p>I've also found that builds with debug info make the linker use a huge amount of memory.</p>",
        "id": 201066975,
        "sender_full_name": "Amanieu",
        "timestamp": 1592337856
    },
    {
        "content": "<p>good point - I meant to say <code>optimize = false</code> rather than <code>debug = false</code></p>",
        "id": 201067017,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592337874
    },
    {
        "content": "<p>I've set <code>debuginfo-level=1</code> rather than <code>debug=true</code>, due to extreme disk space usage requirements of <code>debug=true</code></p>",
        "id": 201067236,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592337967
    },
    {
        "content": "<p>it's so bad that it uncovered a bug in backtrace printing <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> (<a href=\"https://github.com/rust-lang/rust/issues/69151\">https://github.com/rust-lang/rust/issues/69151</a>)</p>",
        "id": 201067325,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592338024
    },
    {
        "content": "<p>So the summary is:</p>\n<ul>\n<li>set <code>optimize</code> to <code>true</code></li>\n<li>set <code>debug</code> to <code>false</code>, unless you are stepping through in a debugger</li>\n</ul>\n<p>Is that correct?</p>",
        "id": 201087691,
        "sender_full_name": "Noah Lev",
        "timestamp": 1592351266
    },
    {
        "content": "<p>I tend to set <code>debug=true</code> regardless personally... but then again I also tend to run out of memory and disk space too... I guess it depends on what you are doing and what machine you are building on.</p>",
        "id": 201154834,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592406489
    },
    {
        "content": "<p><code>debug = true</code> is still a bad development default IMO</p>\n<p>I manually set <code>debuginfo-level = 1</code> (gives you backtraces) and <code>debug-assertions = true</code> (gives you <code>debug!</code> logging)</p>",
        "id": 202046037,
        "sender_full_name": "eddyb",
        "timestamp": 1593137592
    },
    {
        "content": "<p>I could see <code>debuginfo-level-std = 2</code>, if you're trying to debug a compiled program, but debugging <code>rustc</code> in an actual debugger doesn't seem realistic</p>",
        "id": 202046094,
        "sender_full_name": "eddyb",
        "timestamp": 1593137645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/incremental.20compilation.20question/near/202046037\">said</a>:</p>\n<blockquote>\n<p><code>debug = true</code> is still a bad development default IMO</p>\n</blockquote>\n<p>We probably should be treating this as a bug to be addressed. For example, if <code>debug = true</code> is so resource-intensive as to be useless, then we should change its meaning (or provide more than a boolean for its value, so that we can provide a one-stop-shop for people looking to adopt \"best practice for rustc development env.\"</p>",
        "id": 202609456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593629912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think it's also been broken for a while, as in &gt;2GB of debuginfo causes crashes in libbacktrace. or maybe that was from LLVM debuginfo, rustc's might be smaller</p>",
        "id": 202620621,
        "sender_full_name": "eddyb",
        "timestamp": 1593635610
    },
    {
        "content": "<p>I keep coming across <code>debug = true</code> once every few months and I don't have the energy to fight about it, last time I looked it seemed by debuginfo level being 2 was a knowing decision</p>",
        "id": 202620734,
        "sender_full_name": "eddyb",
        "timestamp": 1593635658
    },
    {
        "content": "<p>It seems <em>entirely</em> reasonable to me to just change the default, and change the comment to say \"only change this to <code>true</code> if you want to run rustc in a debugger\".</p>",
        "id": 202625471,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593638388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/incremental.20compilation.20question/near/202620621\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> I think it's also been broken for a while, as in &gt;2GB of debuginfo causes crashes in libbacktrace. or maybe that was from LLVM debuginfo, rustc's might be smaller</p>\n</blockquote>\n<p>the &gt; 2gb crash should have been fixed a while ago</p>",
        "id": 202628661,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1593640522
    },
    {
        "content": "<p>which is not to say that having &gt; 2gb of debug info is a good idea</p>",
        "id": 202628675,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1593640536
    },
    {
        "content": "<p>I'll see if I can make a PR changing the default sometime this week</p>",
        "id": 202676696,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593690139
    },
    {
        "content": "<p>I'll change a bunch of other defaults at the same time just so they can see discussion, if people agree on things I can split those into a separate PR</p>",
        "id": 202676714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593690166
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73964\">https://github.com/rust-lang/rust/pull/73964</a></p>",
        "id": 202685794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593695675
    },
    {
        "content": "<p>This should probably be an MCP so I opened one: <a href=\"https://github.com/rust-lang/compiler-team/issues/326\">https://github.com/rust-lang/compiler-team/issues/326</a></p>",
        "id": 202696532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593700465
    },
    {
        "content": "<p>Would it be possible to set optimize=false only for some crates? Say I work on rustc_mir_build, what if all of the compiler is optimized except that crate? That would mean much shorter recompilation when I touch that crate, but still tolerable test performance</p>",
        "id": 202712040,
        "sender_full_name": "Nadrieril",
        "timestamp": 1593707544
    },
    {
        "content": "<p>You can use <code>[profile.release.package.crate_name]</code> in <code>Cargo.toml</code> for that.</p>",
        "id": 202712165,
        "sender_full_name": "bjorn3",
        "timestamp": 1593707605
    },
    {
        "content": "<p>In the top-level Cargo.toml?</p>",
        "id": 202712684,
        "sender_full_name": "Nadrieril",
        "timestamp": 1593707839
    },
    {
        "content": "<p>Yes</p>",
        "id": 202712829,
        "sender_full_name": "bjorn3",
        "timestamp": 1593707900
    },
    {
        "content": "<p>ohh yeah I see things like that! Amazing thanks, you might have significantly improved my life x)</p>",
        "id": 202712878,
        "sender_full_name": "Nadrieril",
        "timestamp": 1593707921
    },
    {
        "content": "<p>Oh, that would be worth adding to <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html\">https://rustc-dev-guide.rust-lang.org/building/suggested.html</a></p>",
        "id": 202742705,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593722908
    },
    {
        "content": "<p>Would you mind making a quick PR?</p>",
        "id": 202742715,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593722916
    },
    {
        "content": "<p>Done :) <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/780\">https://github.com/rust-lang/rustc-dev-guide/pull/780</a></p>",
        "id": 202746090,
        "sender_full_name": "Nadrieril",
        "timestamp": 1593724885
    }
]