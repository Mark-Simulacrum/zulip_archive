[
    {
        "content": "<p>Just a temperature check: how would people feel about a patch that modifies the compiler CLI so that <code>-O</code> takes an optional argument for the level to optimize at. That is, <code>-O[sz0-3]</code> would be equivalent to <code>-Copt-level=[sz0-3]</code>. (I believe getopt already supports this, although we don't use it for anything).</p>\n<p>The current behavior, where <code>-O</code> is <code>-Copt-level=2</code>, would continue unchanged for compatibility ofc, even if it often is not what people usually want, as it's a different default value for \"optimized\" than cargo chose for <code>--release</code>. (Or we could change it — I don't have strong feelings, and think think that choice is mostly unrelated to giving it an argument, which I'd want to do even if the default were <code>3</code>)</p>\n<p>The justification for doing this is pretty small, and entirely about  it being slightly more convenient. I often see people often (on IRLO, here, and just in various places in the community) already refer to the different optimization levels as <code>-O&lt;level&gt;</code> rather than typing out <code>-Copt-level=&lt;level&gt;</code>, even though this refers to a CLI parameter convention that the compiler they're talking about doesn't even accept.</p>\n<p>(It's also just a bit of a hassle to type out the whole thing in other cases when you're not going through cargo — I often think about this when doing things on godbolt, for example)</p>",
        "id": 249186645,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1628728496
    },
    {
        "content": "<p>+1 to this. Especially on not going through cargo.<br>\nI use rust in autotools projects, and if I'm setting flags explicitly (so I don't get the default of -C opt-level=2 -C debug-info=2 that I wrote into the macro - which is kinda easy to forget since it's just barely more than 1% of said macro), it's both kinda tedious and at the same time easy to forget (since I also sometimes set CFLAGS/CXXFLAGS in the same project) to have to write -C opt-level=&lt;whatever&gt; for an option commonly used and written as -O&lt;whatever&gt; in other clis. </p>\n<p>For example, if I wanted to set the most aggressive optimization level in an autotools project using C++, C, and Rust, I'd run <code>CFLAGS=\"-O3\" CXXFLAGS=\"-O3\" RUSTFLAGS=\"-C opt-level=3\" ../configure</code>, and remembering that third option isn't -O3 seems like it would be very fun, especially since this would be written infrequently (setting it for configure sets it by default for subsequent invocations of make).</p>",
        "id": 249191209,
        "sender_full_name": "Connor Horman",
        "timestamp": 1628734443
    },
    {
        "content": "<p>I'm supportive. I often forget that this isn't allowed, and will talk about using options like <code>-Os</code> and <code>-Oz</code> to the confusion of other people :-)</p>",
        "id": 249997812,
        "sender_full_name": "tmandry",
        "timestamp": 1629384835
    },
    {
        "content": "<p>I think it needs an MCP</p>",
        "id": 249997879,
        "sender_full_name": "tmandry",
        "timestamp": 1629384849
    },
    {
        "content": "<p>I'm somewhat -1 on having multiple ways to do the same or similar things on the CLI. A most prominent recent example that comes to mind is unclear precedence between <code>--target</code>, <code>-Ctarget-cpu</code> and <code>-Ctarget-feature</code>. I think this has similar issues.</p>",
        "id": 249999882,
        "sender_full_name": "nagisa",
        "timestamp": 1629385595
    },
    {
        "content": "<p>fair point. I'm thinking of this as a \"short form\" for a commonly used option, like many CLIs have</p>",
        "id": 250000421,
        "sender_full_name": "tmandry",
        "timestamp": 1629385826
    },
    {
        "content": "<p>the precedence is whatever would already exist if you wrote <code>-Copt-level=2 -Copt-level=3</code></p>",
        "id": 250000462,
        "sender_full_name": "Lokathor",
        "timestamp": 1629385844
    },
    {
        "content": "<p>the target and target features args are only confusing because they don't do identical things. Having -O3 would be exactly the same as -Copt-level=3, no new combination rules</p>",
        "id": 250000739,
        "sender_full_name": "Lokathor",
        "timestamp": 1629385933
    },
    {
        "content": "<p>I'm not sure that's entirely true in presence of multiple codegen backends.</p>",
        "id": 250005517,
        "sender_full_name": "nagisa",
        "timestamp": 1629388166
    },
    {
        "content": "<p>[0-3sz] as a value doesn't necessarily make sense for all of the backends, and <code>-Copt-level</code> should be read more as a <code>-Cllvm-opt-level</code> and not <code>-Canybackend-opt-level</code>.</p>",
        "id": 250005636,
        "sender_full_name": "nagisa",
        "timestamp": 1629388208
    },
    {
        "content": "<p>why would it be any different from <code>-O3</code> though?</p>",
        "id": 250005794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629388287
    },
    {
        "content": "<p>What would be any different? <code>-O -Ccodegen-backend=x</code> can pick an appropriate default that can be considered \"optimized\" for any codegen backend. <code>-O3</code> doesn't necessarily translate to anything meaningful for the codegen backends that aren't LLVM.</p>",
        "id": 250006124,
        "sender_full_name": "nagisa",
        "timestamp": 1629388414
    },
    {
        "content": "<p>but then I guess rustc's CLI story is a huge mess anyway, so I guess I don't feel _that_ strongly against this to block it in anyway.</p>",
        "id": 250007565,
        "sender_full_name": "nagisa",
        "timestamp": 1629389035
    },
    {
        "content": "<blockquote>\n<p>-O3 doesn't necessarily translate to anything meaningful for the codegen backends that aren't LLVM.</p>\n</blockquote>\n<p>I guess I'm just confused why we wouldn't translate it to <code>-O</code> if it really doesn't mean anything for other backends</p>",
        "id": 250007760,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629389124
    },
    {
        "content": "<p>like, rustc can decide what level \"3\" means, it doesn't have to be exactly what llvm says</p>",
        "id": 250007794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629389141
    },
    {
        "content": "<p>Yeah, opt-level is a stable part of both Cargo.toml and rustc, including what values are acceptable inputs.</p>\n<p>If you're suggesting that alternative backends would possibly not accept the same build configuration inputs that's a <em>very</em> radical take on things. That would break tons of crates.</p>",
        "id": 250016633,
        "sender_full_name": "Lokathor",
        "timestamp": 1629393281
    },
    {
        "content": "<p>If other backends didn't accept a particular optimization setting, it could map it to something else instead (at worst, make it a no-op). This is what I noted when I proposed -C opt-level=g on IRLO, the llvm backend could treat it identically to 1, but it could be distinct for other backends/impls.</p>",
        "id": 250019973,
        "sender_full_name": "Connor Horman",
        "timestamp": 1629394739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> using a different backend would require a manual user action so use of those backends disallowing certain flag combinations can't be breaking.</p>",
        "id": 250021893,
        "sender_full_name": "nagisa",
        "timestamp": 1629395597
    },
    {
        "content": "<p>kinda similar to how editions work in that sense.</p>",
        "id": 250022345,
        "sender_full_name": "nagisa",
        "timestamp": 1629395777
    },
    {
        "content": "<p>I'm not sure if silently ignoring no-op options is a good idea overall. Its pretty frustrating most of the time when you specify something and there's no indication that things are not working as you want.</p>",
        "id": 250022462,
        "sender_full_name": "nagisa",
        "timestamp": 1629395832
    },
    {
        "content": "<p>If an illegal opt-level is ignored for a backend that's probably fine, but if it's gonna be a build error then yes it is technically true that it's non-breaking but no one will care about how technically correct you might be. All they'll see is \"this backend doesn't work with many of my dependencies or even many of my own crates, that's useless\".</p>",
        "id": 250022706,
        "sender_full_name": "Lokathor",
        "timestamp": 1629395928
    },
    {
        "content": "<p>can crates modify the profile on the per-crate basis? I thought you can only adjust things like these at the root crate</p>",
        "id": 250038692,
        "sender_full_name": "nagisa",
        "timestamp": 1629402120
    },
    {
        "content": "<p>I don't think crates can modify it for upstream people, but you can change the settings for your dependents if that's what you mean</p>",
        "id": 250038882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629402195
    }
]