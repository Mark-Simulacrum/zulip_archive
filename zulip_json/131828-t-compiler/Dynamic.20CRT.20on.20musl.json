[
    {
        "content": "<p>Does something like <code>RUSTFLAGS=\"-Ctarget-feature=-crt-static -Clinker=musl-gcc\" cargo build --release --target x86_64-unknown-linux-musl</code> work for anyone?</p>",
        "id": 226137213,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613137062
    },
    {
        "content": "<p>Looks like the <code>x86_64-alpine-linux-musl</code> target works on Alpine</p>",
        "id": 226137617,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613137316
    },
    {
        "content": "<p>Soo.. Some users have been asking for musl <code>rust-analyzer</code> binaries. We can try to compile it for musl, but it needs <code>dlopen</code>, and AIUI that needs a dynamically linked <code>libc</code> there.</p>",
        "id": 226138361,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613137748
    },
    {
        "content": "<p>I was able to build some code in an Alpine container, but I can't run it on my system (Arch), even though I have a dynamic <code>musl</code> installed</p>",
        "id": 226138434,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613137797
    },
    {
        "content": "<p>If rust-analyzer is compiled against musl, all proc macros must also be compiled against musl. You are not allowed to mix two libc in a single process.</p>",
        "id": 226138499,
        "sender_full_name": "bjorn3",
        "timestamp": 1613137821
    },
    {
        "content": "<p>And probably with a dynamic musl</p>",
        "id": 226138528,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613137844
    },
    {
        "content": "<p>But I think that's the default on Alpine, because <code>-C target-feature=+crt-static</code> fails to link</p>",
        "id": 226138554,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613137864
    },
    {
        "content": "<p>So I guess my questions are:</p>\n<ul>\n<li>if we ship pre-built Alpine binaries, will people be able to run them on the same Alpine version? (I guess so)</li>\n<li>are people actually running Alpine on their computers or dev environments?</li>\n<li>what happens on other musl distros like Void Linux? (I guess they won't work?)</li>\n</ul>",
        "id": 226138827,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138017
    },
    {
        "content": "<p>It depends on if musl has a stable abi like glibc or not. If it has, it should also work on Void Linux, otherwise it will only run on the same Alpine version as the one used to build rust-analyzer.</p>",
        "id": 226139026,
        "sender_full_name": "bjorn3",
        "timestamp": 1613138127
    },
    {
        "content": "<p>Yeah, I posted on <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4956#issuecomment-778210126\">https://github.com/rust-analyzer/rust-analyzer/issues/4956#issuecomment-778210126</a></p>",
        "id": 226139178,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138211
    },
    {
        "content": "<p>Wiki says:</p>\n<blockquote>\n<p>The dynamic runtime is a single file with stable ABI allowing race-free updates and the static linking support allows an application to be deployed as a single portable binary without significant size overhead.</p>\n</blockquote>",
        "id": 226139217,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138247
    },
    {
        "content": "<p>Nope, my binary is missing <code>libgcc_s</code> on <code>voidlinux-musl</code></p>",
        "id": 226139611,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138463
    },
    {
        "content": "<p><code>libgcc_s</code> is one of the options to use as unwinder.</p>",
        "id": 226139809,
        "sender_full_name": "bjorn3",
        "timestamp": 1613138540
    },
    {
        "content": "<p>I thought it had some math functions. So it's only used for <code>panic = \"abort\"</code>?</p>",
        "id": 226139928,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138609
    },
    {
        "content": "<p>No, it is used for <code>panic = \"unwind\"</code>.</p>",
        "id": 226139958,
        "sender_full_name": "bjorn3",
        "timestamp": 1613138628
    },
    {
        "content": "<p>Yeah, sorry, typo</p>",
        "id": 226139999,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138644
    },
    {
        "content": "<p>You could try building libstd with the <code>llvm-libunwind</code> feature enabled.</p>",
        "id": 226140081,
        "sender_full_name": "bjorn3",
        "timestamp": 1613138672
    },
    {
        "content": "<p>Looks like it's still needed even with <code>panic = \"abort\"</code>. Not that it would help with RA, of course, since it needs unwinds</p>",
        "id": 226140222,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138752
    },
    {
        "content": "<p>With <code>panic = \"abort\"</code>, backtraces are still printed, so the unwinder is still needed.</p>",
        "id": 226140595,
        "sender_full_name": "bjorn3",
        "timestamp": 1613138920
    },
    {
        "content": "<p>Oh, right</p>",
        "id": 226140662,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613138954
    },
    {
        "content": "<p>Hmm, it seems to work, but I can't confirm that the proc macro server is actually doing something</p>",
        "id": 226141726,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613139510
    },
    {
        "content": "<p>Well, we can ship some binaries and see what users say</p>",
        "id": 226141760,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613139525
    },
    {
        "content": "<p>You should use <code>CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc</code> instead of <code>-C linker=musl-gcc</code> because proc-macros are built for the host and they need host linker.</p>",
        "id": 226168970,
        "sender_full_name": "mati865",
        "timestamp": 1613151030
    },
    {
        "content": "<p>Thanks. That doesn't help in my case, but it's a good thing to keep in mind.</p>",
        "id": 226169515,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613151238
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 226169862,
        "sender_full_name": "mati865",
        "timestamp": 1613151367
    },
    {
        "content": "<p><code>/usr/bin/ld: cannot find -lgcc_s</code></p>",
        "id": 226171457,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613152021
    },
    {
        "content": "<p>This is only on Arch, when compiling for dynamic musl. Compiling on Alpine works.</p>",
        "id": 226171556,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613152039
    },
    {
        "content": "<p>I do have a <code>libgcc_s</code> somewhere, but it's probably not picking it up</p>",
        "id": 226171762,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613152080
    },
    {
        "content": "<p>Ah, you need unwinder for musl. It's often not build unless you obtain full musl toolchain like this one: <a href=\"https://github.com/richfelker/musl-cross-make\">https://github.com/richfelker/musl-cross-make</a><br>\nIt doesn't pick <code>libgcc_s</code> from your system because it's compiled for glibc.</p>",
        "id": 226173208,
        "sender_full_name": "mati865",
        "timestamp": 1613152602
    },
    {
        "content": "<p>Hmm. So if I do that, which <code>libgcc_s</code> will it pick?</p>",
        "id": 226173525,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613152730
    },
    {
        "content": "<p>I mean, people have been asking specifically for Alpine builds, and there's a usable <code>libgcc_s</code>, so I'm tempted to build it in an Alpine container and call it a day.</p>",
        "id": 226173640,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613152777
    },
    {
        "content": "<p>Otherwise I'm not sure if dynamic executables using <code>musl</code> and <code>libgcc_s</code> are actually going to be portable enough to be useful for anyone</p>",
        "id": 226173781,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613152814
    },
    {
        "content": "<p>unwinder like <code>libgcc_s</code> is tied to the compiler, your system gcc will always pick unwinder for glibc<br>\nif you install full musl toolchain it will use its own <code>libgcc_s</code></p>",
        "id": 226178319,
        "sender_full_name": "mati865",
        "timestamp": 1613155059
    },
    {
        "content": "<p>Yeah, but the executable will link it dynamically, so it's hard to distribute. At least harder than distributing one that only links to musl. E.g. Void seems to have musl, but not libgcc_s</p>",
        "id": 226185409,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613158767
    },
    {
        "content": "<p>they should be.  alpine does not really make any changes to musl</p>",
        "id": 226199646,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613166026
    },
    {
        "content": "<p>My binaries built on Alpine don't work on my Arch system (nor on Void/musl), and I can't easily build them the other way around. So it still seems finicky.</p>",
        "id": 226200458,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613166482
    },
    {
        "content": "<p>Strange.  They should work on Void/musl.  We do link to libc dynamically, like on glibc though.</p>",
        "id": 226213327,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613174627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Dynamic.20CRT.20on.20musl/near/226200458\">said</a>:</p>\n<blockquote>\n<p>My binaries built on Alpine don't work on my Arch system (nor on Void/musl), and I can't easily build them the other way around. So it still seems finicky.</p>\n</blockquote>\n<p>If the binary is dynamically linked to libgcc_s it won't work on Arch because you don't have libgcc_s for musl. You only have libgcc_s linked to glibc that cannot be used with musl. <br>\nOn Alpine (no clue about Void) containers libgcc_s is not installed by the default and you have to install it manually (using package manager), maybe the same applies to Void. If toolchain version on Alpine isn't much newer than on Void the binary should work.</p>",
        "id": 226220397,
        "sender_full_name": "mati865",
        "timestamp": 1613182067
    }
]