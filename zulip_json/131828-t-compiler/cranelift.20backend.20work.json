[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> -- so I keep hearing about all the great work you've been doing on a cranelift backend off in a side branch. I'm curious to hear more about the status and benefits -- i.e., we've thought that cranelift might give us \"very fast\" debug builds, is that true? It might be worth thinking about bringing that work in tree, no? I was pondering whether we ought to suggest a design meeting to talk it over.</p>",
        "id": 187639393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581082684
    },
    {
        "content": "<p>Currently a fair amount of programs compile and run. Unfortunately multithreaded program's don't yet work. (<a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/388\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/388\">bjorn3/rustc_codegen_cranelift#388</a>) It is currently blocked on getting my Cranelift PR for TLS support (<a href=\"https://github.com/bytecodealliance/cranelift/issues/1174\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1174\">bytecodealliance/cranelift#1174</a>) merged.</p>\n<p>As for the benefits: The goal is indeed to give much faster debug builds. I recently ran the debug builds of the rustc-perf suite: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/878\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/878\">bjorn3/rustc_codegen_cranelift#878</a>. For clean builds the improvements can be up to 60%, though it is sometimes slower (dylib loading time?) For incremental builds the build times are almost always slower, as no codegen units are stored in the incremental cache yet.</p>\n<p>I am definitively interested in bringing it in tree, though I think the Cranelift PR should be merged first. A design meeting would be nice. I don't have a clear path forward apart from getting multithreading support though.</p>",
        "id": 187640665,
        "sender_full_name": "bjorn3",
        "timestamp": 1581083718
    },
    {
        "content": "<blockquote>\n<p>work you've been doing on a cranelift backend off in a side branch.</p>\n</blockquote>\n<p>I am actually developing it in a separate repo without any relation to rust-lang/rust (bjorn3/rustc_codegen_cranelift). I use the hotplug codegen backend api to load it into an unmodified rustc. This saves me a lot of compilation time and rebase work.</p>",
        "id": 187640949,
        "sender_full_name": "bjorn3",
        "timestamp": 1581083948
    },
    {
        "content": "<p>That's awesome</p>",
        "id": 187642716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581085238
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> and me could one day accidentally create an alternative Rust universe that doesn't use rustc...</p>",
        "id": 187643217,
        "sender_full_name": "matklad",
        "timestamp": 1581085637
    },
    {
        "content": "<p>one that lazily JIT-compiles each function separately as it's being run? <span aria-label=\"dream\" class=\"emoji emoji-1f4ad\" role=\"img\" title=\"dream\">:dream:</span></p>",
        "id": 187645798,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581087456
    },
    {
        "content": "<blockquote>\n<p>one that lazily JIT-compiles each function separately as it's being run? <span aria-label=\"dream\" class=\"emoji emoji-1f4ad\" role=\"img\" title=\"dream\">:dream:</span></p>\n</blockquote>\n<p>That shouldn't be too hard. cg_clif already has JIT support. It does currently compile all functions at the same time, but it should be possible to compile everything lazy. Maybe I will implement it today :)</p>",
        "id": 187648849,
        "sender_full_name": "bjorn3",
        "timestamp": 1581089276
    },
    {
        "content": "<p>I think the rest of the compiler isn't quite lazy enough yet, but that's already pretty awesome :)</p>",
        "id": 187649153,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581089443
    },
    {
        "content": "<p>/me is trying to implement this lazy jit compilation, but gdb got a SIGSEGV :(</p>",
        "id": 188026534,
        "sender_full_name": "bjorn3",
        "timestamp": 1581524889
    },
    {
        "content": "<p>I know at least something that I did wrong, but still gdb should not crash.</p>",
        "id": 188027228,
        "sender_full_name": "bjorn3",
        "timestamp": 1581525250
    },
    {
        "content": "<p>I tried to find a debug package for gdb to get a useful backtrace, but the latest is for debian jessie.</p>",
        "id": 188027302,
        "sender_full_name": "bjorn3",
        "timestamp": 1581525287
    },
    {
        "content": "<p>This is all I got:</p>\n<div class=\"codehilite\"><pre><span></span>#0  0x000055555584f857 in ?? ()\n#1  0x0000555555851d52 in ?? ()\n#2  0x000055555585170f in ?? ()\n#3  0x000055555585170f in ?? ()\n#4  0x000055555570ca2d in ?? ()\n#5  0x000055555570cabe in ?? ()\n#6  0x000055555561d8d3 in ?? ()\n#7  0x000055555574c563 in ?? ()\n#8  0x000055555568b029 in linux_ptrace_test_ret_to_nx_instr ()\n#9  0x00005555557ac8f5 in ?? ()\n#10 0x000055555574cc42 in ?? ()\n#11 0x00005555557569a5 in ?? ()\n#12 0x000055555576ce4d in ?? ()\n#13 0x000055555576d04f in ?? ()\n#14 0x000055555576d0f5 in ?? ()\n#15 0x000055555576698b in ?? ()\n#16 0x00005555557635ff in ?? ()\n#17 0x0000555555767b16 in ?? ()\n#18 0x00005555555ec898 in ?? ()\n#19 0x00007ffff735509b in __libc_start_main () from /lib/x86_64-linux-gnu/libc.so.6\n#20 0x00005555555ed48a in ?? ()\n</pre></div>",
        "id": 188027339,
        "sender_full_name": "bjorn3",
        "timestamp": 1581525310
    },
    {
        "content": "<p>I now got it working a bit. It now <em>only</em> crashes after a few calls.</p>",
        "id": 188033353,
        "sender_full_name": "bjorn3",
        "timestamp": 1581528891
    },
    {
        "content": "<p>I think I found the problem: I didn't implement returning from the function shim yet.</p>",
        "id": 188035149,
        "sender_full_name": "bjorn3",
        "timestamp": 1581529859
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\"><pre><span></span>Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\nNew Instance { def: Item(DefId(0:34 ~ mini_core_hello_world[317d]::start[0])), substs: [()] } @ 0x7f110d0a6000\nNew Instance { def: Item(DefId(0:51 ~ mini_core_hello_world[317d]::main[0])), substs: [] } @ 0x7f110d190000\nNew Instance { def: Item(DefId(0:48 ~ mini_core_hello_world[317d]::take_unique[0])), substs: [] } @ 0x7f110d17e000\nNew Instance { def: Item(DefId(0:47 ~ mini_core_hello_world[317d]::take_f32[0])), substs: [] } @ 0x7f110d183000\nNew Instance { def: Item(DefId(0:50 ~ mini_core_hello_world[317d]::call_return_u128_pair[0])), substs: [] } @ 0x7f110d195000\nNew Instance { def: Item(DefId(0:49 ~ mini_core_hello_world[317d]::return_u128_pair[0])), substs: [] } @ 0x7f110d19a000\nHello printf\nHello\nWorld!\nNew Instance { def: DropGlue(DefId(1:228 ~ mini_core[8787]::drop_in_place[0]), Some(mini_core::Box&lt;dyn SomeTrait&gt;)), substs: [mini_core::Box&lt;dyn SomeTrait&gt;] } @ 0x7f110d19f000\nNew Instance { def: DropGlue(DefId(1:228 ~ mini_core[8787]::drop_in_place[0]), None), substs: [&amp;str] } @ 0x7f110d1a4000\nNew Instance { def: Item(DefId(1:248 ~ mini_core[8787]::box_free[0])), substs: [dyn SomeTrait] } @ 0x7f110d1a9000\nNew Instance { def: Item(DefId(0:12 ~ mini_core_hello_world[317d]::{{impl}}[1]::object_safe[0])), substs: [] } @ 0x7f110d1ae000\nabc\nNew Instance { def: Item(DefId(0:61 ~ mini_core_hello_world[317d]::main[0]::zeroed[0])), substs: [(u8, u8)] } @ 0x7f110d1b3000\nExisting @ 0x7f110d19f000\nNew Instance { def: DropGlue(DefId(1:228 ~ mini_core[8787]::drop_in_place[0]), Some(NoisyDrop)), substs: [NoisyDrop] } @ 0x7f110cc3c000\nNew Instance { def: Item(DefId(0:19 ~ mini_core_hello_world[317d]::{{impl}}[2]::drop[0])), substs: [] } @ 0x7f110cc41000\nBoxed outer got dropped!\nNew Instance { def: DropGlue(DefId(1:228 ~ mini_core[8787]::drop_in_place[0]), Some(NoisyDropInner)), substs: [NoisyDropInner] } @ 0x7f110cc46000\nNew Instance { def: Item(DefId(0:21 ~ mini_core_hello_world[317d]::{{impl}}[3]::drop[0])), substs: [] } @ 0x7f110cc4b000\nInner got dropped!\nExisting @ 0x7f110d1a9000\nNew Instance { def: DropGlue(DefId(1:228 ~ mini_core[8787]::drop_in_place[0]), Some([NoisyDropInner; 2])), substs: [[NoisyDropInner; 2]] } @ 0x7f110cc55000\nExisting @ 0x7f110cc4b000\nInner got dropped!\nExisting @ 0x7f110cc4b000\nInner got dropped!\nNew Instance { def: ClosureOnceShim { call_once: DefId(1:222 ~ mini_core[8787]::FnOnce[0]::call_once[0]) }, substs: [[closure@example/mini_core_hello_world.rs:237:17: 237:28], ((),)] } @ 0x7f110cc5a000\nNew Instance { def: Item(DefId(0:860 ~ mini_core_hello_world[317d]::main[0]::{{closure}}[1])), substs: [i8, extern &quot;rust-call&quot; fn(((),)) -&gt; u8] } @ 0x7f110cc5f000\nNew Instance { def: Item(DefId(0:859 ~ mini_core_hello_world[317d]::check_niche_behavior[0])), substs: [] } @ 0x7f110d09a000\nNew Instance { def: Item(DefId(0:8 ~ mini_core_hello_world[317d]::{{impl}}[0]::report[0])), substs: [] } @ 0x7f110cc64000\n</pre></div>",
        "id": 188035373,
        "sender_full_name": "bjorn3",
        "timestamp": 1581529981
    },
    {
        "content": "<p>You can find it at the <code>wip_lazy_jit</code> branch.</p>",
        "id": 188035476,
        "sender_full_name": "bjorn3",
        "timestamp": 1581530045
    },
    {
        "content": "<p>I hope to do some clean-up tomorrow to then create a PR.</p>",
        "id": 188037096,
        "sender_full_name": "bjorn3",
        "timestamp": 1581530971
    },
    {
        "content": "<blockquote>\n<p>I hope to do some clean-up tomorrow to then create a PR.</p>\n</blockquote>\n<p>Haven't done this yet, but the Cranelift TLS PR got merged today, so I was able to merge <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/784\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/784\">bjorn3/rustc_codegen_cranelift#784</a>, which makes it possible to run multi-threaded programs.</p>",
        "id": 189139080,
        "sender_full_name": "bjorn3",
        "timestamp": 1582739655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Thank you for your great work! I am so excited about the progress.<br>\nDo you have a guesstimate when it will be ready to compile stuff? Or pass rustc test suite if it’s easier for you to answer?</p>",
        "id": 189139473,
        "sender_full_name": "Yerkebulan Tulibergenov",
        "timestamp": 1582739937
    },
    {
        "content": "<p>Many things already work. The rustc test suite is a hard one to fully pass, as it checks the exact error message for errors happening during codegen, it tests many unstable features not yet implemented in cg_clif and there are also tests for the exact llvm ir and asm generated. I don't have any idea how long it will take for most programs to compile, but I hope it won't be several years :)</p>",
        "id": 189142197,
        "sender_full_name": "bjorn3",
        "timestamp": 1582741463
    },
    {
        "content": "<p>If you have any idea for an executable to test, commenting on <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/247\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/247\">bjorn3/rustc_codegen_cranelift#247</a> is appreciated. You don't have to test if it compiles and runs.</p>",
        "id": 189142444,
        "sender_full_name": "bjorn3",
        "timestamp": 1582741613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> what if we moved the cg_clif backend into tree and then ignored certain UI tests that cranelift cannot handle yet?</p>",
        "id": 189143347,
        "sender_full_name": "centril",
        "timestamp": 1582742000
    },
    {
        "content": "<p>and then you can work on them one by one</p>",
        "id": 189143355,
        "sender_full_name": "centril",
        "timestamp": 1582742007
    },
    {
        "content": "<p>I rather like the fact that cg_clif is out of tree. It saves much disk space (no LLVM checkout and no rustc build artifacts) and it makes compilation much faster, as I can use a rustup installed nightly, instead of building it myself.</p>\n<p>I do have a branch of cg_clif with the necessary commands to run the rustc test suite. It does removes the most tests depending on unimplemented features. I haven't updated it in a while, but I think I will rebase it soon.</p>",
        "id": 189145490,
        "sender_full_name": "bjorn3",
        "timestamp": 1582742993
    },
    {
        "content": "<p>I'm sure we can mark tests as LLVM specific without moving cg_clif in-tree</p>",
        "id": 189145647,
        "sender_full_name": "Zoxc",
        "timestamp": 1582743068
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/2142b538d605b81a0176c9d11b7c77c79c4aa739/test.sh#L98\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/2142b538d605b81a0176c9d11b7c77c79c4aa739/test.sh#L98\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/2142b538d605b81a0176c9d11b7c77c79c4aa739/test.sh#L98</a></p>",
        "id": 189145799,
        "sender_full_name": "bjorn3",
        "timestamp": 1582743160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> oh but don't you want to like have CI ensure no regressions in cg_clif at some point?</p>",
        "id": 189146252,
        "sender_full_name": "centril",
        "timestamp": 1582743451
    },
    {
        "content": "<p>Marking tests which can not possibly work on non-LLVM backends, like checking llvm ir or asm output, as such makes sense to me. Marking tests that require a feature not yet implemented in cg_clif though would mean that I have to make a PR every time I implement something new.</p>",
        "id": 189146342,
        "sender_full_name": "bjorn3",
        "timestamp": 1582743498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/cranelift.20backend.20work/near/189146252\" title=\"#narrow/stream/131828-t-compiler/topic/cranelift.20backend.20work/near/189146252\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> oh but don't you want to like have CI ensure no regressions in cg_clif at some point?</p>\n</blockquote>\n<p>Yes, I run <code>./test.sh</code> on Travis CI for that.</p>",
        "id": 189146403,
        "sender_full_name": "bjorn3",
        "timestamp": 1582743556
    },
    {
        "content": "<p>Did you mean changes on the rustc side?</p>",
        "id": 189146588,
        "sender_full_name": "bjorn3",
        "timestamp": 1582743640
    },
    {
        "content": "<p>If so, almost all breakages were either a changed api or a patch to libstd and friends not applying anymore. Any miscompilations were I believe my fault.</p>",
        "id": 189146758,
        "sender_full_name": "bjorn3",
        "timestamp": 1582743738
    },
    {
        "content": "<p>There is just one case that a breakage was rustc's fault: printing every mir statement panicked, or rather still panics.</p>",
        "id": 189146866,
        "sender_full_name": "bjorn3",
        "timestamp": 1582743823
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67558\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67558\">#67558</a></p>",
        "id": 189147043,
        "sender_full_name": "bjorn3",
        "timestamp": 1582743894
    },
    {
        "content": "<p>Found another: <a href=\"https://github.com/rust-lang/rust/issues/64872\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64872\">#64872</a>, likely wouldn't have failed if cg_clif was in-tree though</p>",
        "id": 189147278,
        "sender_full_name": "bjorn3",
        "timestamp": 1582744026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah rustc side</p>",
        "id": 189147646,
        "sender_full_name": "centril",
        "timestamp": 1582744260
    },
    {
        "content": "<p>maybe it's too soon though</p>",
        "id": 189147720,
        "sender_full_name": "centril",
        "timestamp": 1582744310
    },
    {
        "content": "<p>I implemented incremental caching of object files yesterday. This drastically improved the results on the rustc-perf suite: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/878#issuecomment-597871730\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/878#issuecomment-597871730\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/878#issuecomment-597871730</a> There are still cases where cg_clif is a ~30-60% regression over cg_llvm though.</p>",
        "id": 190377407,
        "sender_full_name": "bjorn3",
        "timestamp": 1584011215
    },
    {
        "content": "<p>This is really incredible work <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>!</p>",
        "id": 190385866,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584017833
    },
    {
        "content": "<p>Next step: do a run with -Zself-profile to find the cause of the remaining reds.</p>",
        "id": 190386830,
        "sender_full_name": "bjorn3",
        "timestamp": 1584018413
    },
    {
        "content": "<p>If there's anything you need on the <code>self-profile</code> side, feel free to ping me or post in <a class=\"stream\" data-stream-id=\"187831\" href=\"/#narrow/stream/187831-t-compiler.2Fwg-self-profile\">#t-compiler/wg-self-profile</a></p>",
        "id": 190387288,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584018684
    },
    {
        "content": "<p>Just knowing how much time is spent during analysis vs codegen vs linking is probably enough in this case. I think the reds are partially caused by the linker having to process a larger libstd than the optimized libstd of cg_llvm. If I need anything more than that that is missing, I will post in #t-compiler/wg-self-profile.</p>",
        "id": 190387893,
        "sender_full_name": "bjorn3",
        "timestamp": 1584019083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I went ahead and added A-cranelift, <a href=\"https://github.com/rust-lang/rust/labels/A-cranelift\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/labels/A-cranelift\">https://github.com/rust-lang/rust/labels/A-cranelift</a></p>",
        "id": 190388111,
        "sender_full_name": "centril",
        "timestamp": 1584019252
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 190388841,
        "sender_full_name": "bjorn3",
        "timestamp": 1584019728
    },
    {
        "content": "<p>Working on sifting through the issues mentioning \"cranelift\" to see what to add to it <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 190388903,
        "sender_full_name": "centril",
        "timestamp": 1584019767
    },
    {
        "content": "<p>I have added the label to two issues.</p>",
        "id": 190389381,
        "sender_full_name": "bjorn3",
        "timestamp": 1584020015
    },
    {
        "content": "<p>I don't think <a href=\"https://github.com/rust-lang/rust/issues/55993\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55993\">#55993</a> deserves the label. It isn't necessary for cg_clif, but is just deduplicating some code between rustc and Cranelift.</p>",
        "id": 190389913,
        "sender_full_name": "bjorn3",
        "timestamp": 1584020303
    },
    {
        "content": "<p>removed that one; I've added the label to the ones I thought were relevant; have a look and see if some were erroneously added</p>",
        "id": 190390114,
        "sender_full_name": "centril",
        "timestamp": 1584020427
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/55931\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55931\">#55931</a> is an issue while compiling cg_clif itself, while <a href=\"https://github.com/rust-lang/rust/issues/69924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69924\">#69924</a> is an issue while generating a backtrace during compilation with cg_clif. both should be reproducable without cg_clif. in the former case cg_clif is not executing, while in the later case cg_clif doesn't execute any unsafe code.</p>",
        "id": 190390513,
        "sender_full_name": "bjorn3",
        "timestamp": 1584020681
    },
    {
        "content": "<p>ah, removed the label on those</p>",
        "id": 190390709,
        "sender_full_name": "centril",
        "timestamp": 1584020817
    },
    {
        "content": "<p>I have added the label to one more issue. I think the issue is now applied to all issues it should be applied to and not applied to issues it shouldn't be applied to.</p>",
        "id": 190391629,
        "sender_full_name": "bjorn3",
        "timestamp": 1584021357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> what wuld you think about doing a design meeting to discuss the work you've been doing on cranelift?</p>",
        "id": 190392127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584021590
    },
    {
        "content": "<p>I can think of a number of different possible focuses</p>",
        "id": 190392139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584021596
    },
    {
        "content": "<ul>\n<li>learning how things work, learning more about cranelift -- that could also be a Compiler Lecture Series candidate :) (kind of let that drop off...)</li>\n</ul>",
        "id": 190392230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584021622
    },
    {
        "content": "<ul>\n<li>talking about how to support cranelift work -- do we want to bring in tree, for example?</li>\n</ul>",
        "id": 190392265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584021647
    },
    {
        "content": "<p>I think cg_clif now supports enough programs since new multithreading support that working towards upstreaming this now makes some sense. (preferably as a submodule like miri and clippy)</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I am interested in a design meeting.</p>",
        "id": 190393345,
        "sender_full_name": "bjorn3",
        "timestamp": 1584022254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Did you miss my response due to the meeting happening at the same time?</p>",
        "id": 190419425,
        "sender_full_name": "bjorn3",
        "timestamp": 1584034419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I did!</p>",
        "id": 190419551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584034463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> can you <a href=\"https://github.com/rust-lang/compiler-team/issues/new?assignees=&amp;labels=meeting-proposal&amp;template=meeting-proposal.md&amp;title=%28My+meeting+proposal%29\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/new?assignees=&amp;labels=meeting-proposal&amp;template=meeting-proposal.md&amp;title=%28My+meeting+proposal%29\">open a proposal</a> on compiler-team?</p>",
        "id": 190419608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584034496
    },
    {
        "content": "<p>it doesn't need to be super detailed to start</p>",
        "id": 190419618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584034502
    },
    {
        "content": "<p>it'd be great to do that before tomorrow though</p>",
        "id": 190419627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584034505
    },
    {
        "content": "<p>ideally we'd also create a hackmd with some notes on status and some prompts for what meeting shoudl discuss, but we can hammer that out async too</p>",
        "id": 190419664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584034527
    },
    {
        "content": "<p>Sure will open a proposal.</p>",
        "id": 190419722,
        "sender_full_name": "bjorn3",
        "timestamp": 1584034554
    },
    {
        "content": "<p>A submodule makes sense to start with; at some point we should consider moving everything in tree though</p>",
        "id": 190419881,
        "sender_full_name": "centril",
        "timestamp": 1584034608
    },
    {
        "content": "<p>A <code>-Z cranelift</code> flag might also make sense, both for rustc and cargo</p>",
        "id": 190419923,
        "sender_full_name": "centril",
        "timestamp": 1584034627
    },
    {
        "content": "<p>With the current infra that would be -Zcodegen-backend=cranelift</p>",
        "id": 190420081,
        "sender_full_name": "bjorn3",
        "timestamp": 1584034690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> ah; that works, maybe we can make it more convenient cargo side</p>",
        "id": 190420357,
        "sender_full_name": "centril",
        "timestamp": 1584034817
    },
    {
        "content": "<p>Sure, it would also be nice to support the jit mode in cargo</p>",
        "id": 190420466,
        "sender_full_name": "bjorn3",
        "timestamp": 1584034867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/cranelift.20backend.20work/near/190419608\" title=\"#narrow/stream/131828-t-compiler/topic/cranelift.20backend.20work/near/190419608\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> can you <a href=\"https://github.com/rust-lang/compiler-team/issues/new?assignees=&amp;labels=meeting-proposal&amp;template=meeting-proposal.md&amp;title=%28My+meeting+proposal%29\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/new?assignees=&amp;labels=meeting-proposal&amp;template=meeting-proposal.md&amp;title=%28My+meeting+proposal%29\">open a proposal</a> on compiler-team?</p>\n</blockquote>\n<p>Is <a href=\"https://gist.github.com/bjorn3/d77f1b5b3cc69575295aa3f931cac053\" target=\"_blank\" title=\"https://gist.github.com/bjorn3/d77f1b5b3cc69575295aa3f931cac053\">https://gist.github.com/bjorn3/d77f1b5b3cc69575295aa3f931cac053</a> about right?</p>",
        "id": 190435270,
        "sender_full_name": "bjorn3",
        "timestamp": 1584042076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess the above quote didn't count as a pingable mention?</p>",
        "id": 190438946,
        "sender_full_name": "bjorn3",
        "timestamp": 1584043990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> looks great :)</p>",
        "id": 190448643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584049226
    },
    {
        "content": "<p>and indeed the \"quote\" doesn't ping</p>",
        "id": 190448651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584049233
    },
    {
        "content": "<p>(in general you can do <code>@_**Foo**</code> to mention someone without pinging them)</p>",
        "id": 190448669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584049247
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/compiler-team/issues/257\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/257\">rust-lang/compiler-team#257</a></p>",
        "id": 190449747,
        "sender_full_name": "bjorn3",
        "timestamp": 1584050023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I think it would be good to get some agenda items for the meeting -- e.g., one question I might want to answer is whether it makes sense to land things in-tree, so that it is CI gated and such</p>",
        "id": 190450887,
        "sender_full_name": "simulacrum",
        "timestamp": 1584050730
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@bjorn3/HJL5ryFS8\" target=\"_blank\" title=\"https://hackmd.io/@bjorn3/HJL5ryFS8\">https://hackmd.io/@bjorn3/HJL5ryFS8</a></p>",
        "id": 190491877,
        "sender_full_name": "bjorn3",
        "timestamp": 1584098315
    },
    {
        "content": "<p>Feedback is welcome</p>",
        "id": 190492427,
        "sender_full_name": "bjorn3",
        "timestamp": 1584098816
    },
    {
        "content": "<p>Hey! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Do we imagine adding a cranelift backend for rustc having any implications for supporting portable SIMD? It’s currently being built out-of-tree on LLVM intrinsics. cc <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 213355483,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602712694
    },
    {
        "content": "<p>Oh the entire library back end would need to be rebuilt</p>",
        "id": 213355875,
        "sender_full_name": "Lokathor",
        "timestamp": 1602712928
    },
    {
        "content": "<p>the public api would be the same</p>",
        "id": 213355897,
        "sender_full_name": "Lokathor",
        "timestamp": 1602712949
    },
    {
        "content": "<p>The <code>simd_*</code> platform-intrinsics are already implemented/emulated in cg_clif as well as a subset of the llvm intrinsics used by the regex crate, the rand crate and their dependencies.</p>",
        "id": 213357716,
        "sender_full_name": "bjorn3",
        "timestamp": 1602714288
    },
    {
        "content": "<p>Patching the sysroot has been a pain because of having to update the patches regularly. I am glad I don't have to anymore.</p>",
        "id": 213357876,
        "sender_full_name": "bjorn3",
        "timestamp": 1602714379
    },
    {
        "content": "<p>Would portable SIMD end up effectively “racing” with the cranelift backend if one introduces a significant amount of work for the other?</p>",
        "id": 213357907,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602714416
    },
    {
        "content": "<p>I hope most if not all of the operations used by portable simd could use (newly introduced) <code>simd_*</code> platform intrinsics that are architecture and vector size independent. This would allow easy emulation of them implemented once per operation.</p>",
        "id": 213358101,
        "sender_full_name": "bjorn3",
        "timestamp": 1602714547
    },
    {
        "content": "<p>Thanks! :slight_smile: Sounds like it’s at least on Portable SIMD to find out so I’ll move discussion back over to <a class=\"stream\" data-stream-id=\"257879\" href=\"/#narrow/stream/257879-project-portable-simd\">#project-portable-simd</a> <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 213358331,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602714690
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://github.com/rust-lang/rust/issues/77975\">#77975</a> has been merged, so you can now use <code>codegen-backends = [\"llvm\", \"cranelift\"]</code> in <code>config.toml</code> to build cg_clif as part of rustc. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 214627955,
        "sender_full_name": "bjorn3",
        "timestamp": 1603743714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Is it possible to bootstrap rustc with cranelift via the cargo.toml?</p>",
        "id": 214636452,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603748210
    },
    {
        "content": "<p>actually, I guess a stage1 bootstrap won't be possible until the next beta bump</p>",
        "id": 214636479,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603748231
    },
    {
        "content": "<p>Due to <a href=\"https://github.com/rust-lang/rust/issues/77458\">#77458</a> a bootstrap using cg_clif currently fails. I have successfully bootstrapped rustc using cg_clif in the past. This is done by removing llvm from <code>codegen-backends</code> and only setting cranelift.</p>",
        "id": 214638133,
        "sender_full_name": "bjorn3",
        "timestamp": 1603749244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> cg_clif is not built by default, so stage0 can't use it even at the next vbeta bump. Only from stage1 on is it possible to bootstrap. If you set <code>full-bootstrap</code> to true, a rustc built using cg_clif will build rustc again.</p>",
        "id": 214638264,
        "sender_full_name": "bjorn3",
        "timestamp": 1603749345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/cranelift.20backend.20work/near/214638133\">said</a>:</p>\n<blockquote>\n<p>Due to <a href=\"https://github.com/rust-lang/rust/issues/77458\">#77458</a> a bootstrap using cg_clif currently fails. I have successfully bootstrapped rustc using cg_clif in the past. This is done by removing llvm from <code>codegen-backends</code> and only setting cranelift.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I think the fix for that is just to change <code>{}</code> to <code>{:?}</code>, right?</p>",
        "id": 214640748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603750974
    },
    {
        "content": "<p>Found a better solution in <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/commit/2be0596810bd34e4d50ecda5ad2b71f8370d7e00\">https://github.com/bjorn3/rustc_codegen_cranelift/commit/2be0596810bd34e4d50ecda5ad2b71f8370d7e00</a>. cg_llvm used <code>with_no_trimmed_paths</code> for the same code.</p>",
        "id": 214680019,
        "sender_full_name": "bjorn3",
        "timestamp": 1603793228
    },
    {
        "content": "<p>errors in <code>cg_clif</code> are reported using only <code>src/module/submodule.rs</code> instead of <code>compiler/rustc_codegen_cranelift/src/module/submodule.rs</code> which prevents my IDE from quickly jumping to the relevant file. Does one of you know why this is the case?</p>\n<p>For example</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n   --&gt; src/value_and_place.rs:486:87\n    |\n486 |                         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), from_traits);\n    |                                                                                       ^^^^^^^^^^^ expected struct `Binder`, found reference\n    |\n    = note: expected struct `Binder&lt;_&gt;`\n            found reference `&amp;Binder&lt;&amp;rustc_middle::ty::List&lt;ExistentialPredicate&lt;&#39;_&gt;&gt;&gt;`\n</code></pre></div>\n\n\n<p>instead of something like</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0585]: found a documentation comment that doesn&#39;t document anything\n  --&gt; compiler/rustc_codegen_ssa/src/mir/mod.rs:80:5\n   |\n78 |     locals: IndexVec&lt;mir::Local, LocalRef&lt;&#39;tcx, Bx::Value&gt;&gt;\n   |                                                            - help: missing comma here: `,`\n79 |\n80 |     /// All `VarDebugInfo` from the MIR body, partitioned by `Local`.\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n</code></pre></div>",
        "id": 214801768,
        "sender_full_name": "lcnr",
        "timestamp": 1603869242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> cg_clif is in it's own workspace. I use profile overrides to compile all build dependencies (not just build scripts) without optimizations and compile all regular dependencies with optimizations even in debug mode (so incremental compilation is fast while making compiling using cg_clif as fast as possible) Cargo complains if you use profile overrides in a non-root crate. Also I use <code>Cargo.lock</code> to fix the cranelift dependency git version instead of a <code>rev</code> to allow for updating using only <code>cargo update -p cranelift-codegen</code>)</p>",
        "id": 214821244,
        "sender_full_name": "bjorn3",
        "timestamp": 1603883143
    },
    {
        "content": "<p>I have just encountered the same thing. It is very hard to effectively fix breakage in <code>rustc_codegen_cranelift</code>. Can you move the overrides to the <code>Cargo.toml</code> in the root and place <code>rustc_codegen_cranelift</code> into the main workspace?</p>",
        "id": 214959956,
        "sender_full_name": "oli",
        "timestamp": 1603975106
    },
    {
        "content": "<p>I can move the overrides, but then they don't apply when doing out of tree development anymore.</p>",
        "id": 214960022,
        "sender_full_name": "bjorn3",
        "timestamp": 1603975169
    },
    {
        "content": "<p>A workaround is to open <code>code compiler/rustc_codegen_cranelift</code> and then <code>cd ../..</code> within the terminal there, but it's annoying to have to switch to that.</p>\n<p>I do realize the out of tree dev will get impacted by that. We have the same problem with miri and its <code>Cargo.lock</code>. I don't have a good solution for this... Not sure what to do</p>",
        "id": 214960193,
        "sender_full_name": "oli",
        "timestamp": 1603975277
    },
    {
        "content": "<p>As a hack maybe the rustc wrapper of bootstrap can <code>cd ../..</code> and extend the source path passed to rustc with <code>compiler/rustc_codegen_cranelift</code> when the crate name is <code>rustc_codegen_cranelift</code>? All other paths should be absolute.</p>",
        "id": 214960363,
        "sender_full_name": "bjorn3",
        "timestamp": 1603975379
    },
    {
        "content": "<p>hmm.. the wrapper can probably invoke <code>cargo --manifest-path=compiler/rustc_codegen_cranelift/Cargo.toml</code>, which will then work out of the box I think</p>",
        "id": 214960421,
        "sender_full_name": "oli",
        "timestamp": 1603975429
    },
    {
        "content": "<p>I'll experiment and see what bootstrap says</p>",
        "id": 214960487,
        "sender_full_name": "oli",
        "timestamp": 1603975445
    },
    {
        "content": "<p>I don't think so. Cargo always cd's into the workspace root I think. And for <a href=\"http://crates.io\">crates.io</a> dependencies into the respective source dir.</p>",
        "id": 214960526,
        "sender_full_name": "bjorn3",
        "timestamp": 1603975476
    },
    {
        "content": "<p>Side note, I just found</p>\n<div class=\"codehilite\"><pre><span></span><code>        // If we&#39;re building from git sources, we need to vendor a complete distribution.\n        if builder.rust_info.is_git() {\n            // Vendor all Cargo dependencies\n            let mut cmd = Command::new(&amp;builder.initial_cargo);\n            cmd.arg(&quot;vendor&quot;)\n                .arg(&quot;--sync&quot;)\n                .arg(builder.src.join(&quot;./src/tools/rust-analyzer/Cargo.toml&quot;))\n                .arg(builder.src.join(&quot;./compiler/rustc_codegen_cranelift/Cargo.toml&quot;))\n                .current_dir(&amp;plain_dst_src);\n            builder.run(&amp;mut cmd);\n        }\n</code></pre></div>\n\n\n<p>that can be removed now, right?</p>",
        "id": 214960575,
        "sender_full_name": "oli",
        "timestamp": 1603975511
    },
    {
        "content": "<p>Why?</p>",
        "id": 214960597,
        "sender_full_name": "bjorn3",
        "timestamp": 1603975530
    },
    {
        "content": "<p>oh wait, this is building the dist package?</p>",
        "id": 214960610,
        "sender_full_name": "oli",
        "timestamp": 1603975540
    },
    {
        "content": "<p>sorry, I got confused about where I was</p>",
        "id": 214960620,
        "sender_full_name": "oli",
        "timestamp": 1603975547
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1097\">bjorn3/rustc_codegen_cranelift#1097</a> is a curious bug. During rustc bootstrap it hangs, while trying to reproduce it separately causes a crash due to <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1063\">bjorn3/rustc_codegen_cranelift#1063</a>.</p>",
        "id": 215132004,
        "sender_full_name": "bjorn3",
        "timestamp": 1604081775
    },
    {
        "content": "<p>I can't reproduce the hang outside of rustc. I already tried to run <code>\"0.1\".parse::&lt;Single&gt;()</code>, which should exactly be what rustc does.</p>",
        "id": 215136469,
        "sender_full_name": "bjorn3",
        "timestamp": 1604084089
    },
    {
        "content": "<p>Running it in release mode reproduced it.</p>",
        "id": 215136518,
        "sender_full_name": "bjorn3",
        "timestamp": 1604084117
    },
    {
        "content": "<p>/me spent all day debugging this issue. turns out it is a one line fix <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 215204214,
        "sender_full_name": "bjorn3",
        "timestamp": 1604167992
    },
    {
        "content": "<p>Fixing this issue seems to fix rustc bootstrapping using cg_clif. At least now successfully builds the sysroot.</p>",
        "id": 215210513,
        "sender_full_name": "bjorn3",
        "timestamp": 1604176001
    },
    {
        "content": "<p>I wrote a post about my debugging process to fix bootstrapping using cg_clif: <a href=\"https://bjorn3.github.io/2020/11/01/fixing-rustc-bootstrap-with-cg_clif.html\">https://bjorn3.github.io/2020/11/01/fixing-rustc-bootstrap-with-cg_clif.html</a></p>",
        "id": 215239353,
        "sender_full_name": "bjorn3",
        "timestamp": 1604229035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I just tried to build the cranelift backend and it gave an ICE about <code>trimmed_def_paths</code>. I think I remember you fixing a bug like this recently - is it waiting on a subtree sync?</p>",
        "id": 215251603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604248746
    },
    {
        "content": "<p>Yes, that is one of the bugs fixed by the subtree sync.</p>",
        "id": 215251664,
        "sender_full_name": "bjorn3",
        "timestamp": 1604248804
    },
    {
        "content": "<p>in case people are interested: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/720\">https://github.com/rust-lang/blog.rust-lang.org/pull/720</a></p>",
        "id": 215255190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604254417
    },
    {
        "content": "<p>While we do not check cranelift on CI yet, will <code>./x.py test compiler/rustc_codegen_cranelift</code> test everything that you would expect to be tested?</p>",
        "id": 215583773,
        "sender_full_name": "oli",
        "timestamp": 1604498544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> No, I haven't implemented testing of cg_clif in bootstrap yet. What should work is removing <code>compiler/rustc_codegen_cranelift/rust-toolchain</code>, overriding the rustc for <code>compiler/rustc_codegen_cranelift</code> or the whole rust source to the newly compiled rustc and then run <code>./test.sh</code> from <code>compiler/rustc_codegen_cranelift</code>. You may want to comment out <code>scripts/tests.sh extended_sysroot</code> in <code>test.sh</code> though. Those are some extra tests that are unlikely to fail when the rest succeeds, but take a long time.</p>",
        "id": 215584231,
        "sender_full_name": "bjorn3",
        "timestamp": 1604498734
    },
    {
        "content": "<p>Thanks! I'll do some experimentation with that</p>",
        "id": 215585086,
        "sender_full_name": "oli",
        "timestamp": 1604499103
    },
    {
        "content": "<blockquote>\n<p>Happy to merge with date bumped to November 16th (or whatever is current when you do so), please ping me on Zulip so I can quickly hit the button.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ping :) <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/720\">https://github.com/rust-lang/blog.rust-lang.org/pull/720</a></p>",
        "id": 216826558,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605492576
    },
    {
        "content": "<p>Published a new progress report: <a href=\"https://bjorn3.github.io/2021/01/07/progress-report-dec-2020.html\">https://bjorn3.github.io/2021/01/07/progress-report-dec-2020.html</a></p>",
        "id": 221934067,
        "sender_full_name": "bjorn3",
        "timestamp": 1610021216
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> for the feedback and <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> for suggesting lazy compilation in jit mode.</p>",
        "id": 221934132,
        "sender_full_name": "bjorn3",
        "timestamp": 1610021255
    },
    {
        "content": "<p>I have been working on refactoring of the abi handling in cg_clif to use the same abi calculation code as cg_llvm. It seems that the only missing thing currently is the handling of <code>PassMode::Cast</code>. Once that is done it should be possible to link crates compiled with cg_clif against crates compiled with cg_llvm. For example to optimize dependencies, but still have fast compilation of the crate you are working. I am going to continue working on it tomorrow.</p>",
        "id": 224102578,
        "sender_full_name": "bjorn3",
        "timestamp": 1611694937
    },
    {
        "content": "<p>If you want to try it out checkout the <code>abi_compat</code> branch. It currently crashes when substracting two i128 in <a href=\"http://std_example.rs\">std_example.rs</a> due to not yet handling <code>PassMode::Cast</code>.</p>",
        "id": 224102734,
        "sender_full_name": "bjorn3",
        "timestamp": 1611695003
    },
    {
        "content": "<p>I got <code>PassMode::Cast</code> implemented. This doesn't help with checked 128bit ops though as they use the indirect pass mode while the intrinsic  call code expects the pair pass mode. Will fix tomorrow.</p>",
        "id": 224535607,
        "sender_full_name": "bjorn3",
        "timestamp": 1611955375
    },
    {
        "content": "<p>Apart from the 128bit op problem nothing seems to be broken or have caused a significant runtime regression.</p>",
        "id": 224535695,
        "sender_full_name": "bjorn3",
        "timestamp": 1611955439
    },
    {
        "content": "<p>Fixed it. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"balloon\" class=\"emoji emoji-1f388\" role=\"img\" title=\"balloon\">:balloon:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I can now link cg_clif compiled crates against a cg_llvm compiled sysroot! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"balloon\" class=\"emoji emoji-1f388\" role=\"img\" title=\"balloon\">:balloon:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Curiously enough for simple-raytracer it is a little slower though.</p>",
        "id": 224577736,
        "sender_full_name": "bjorn3",
        "timestamp": 1612001334
    },
    {
        "content": "<p>Seems there is still a problem when linking a cg_llvm compiled bevy against a cg_clif compiled example game.</p>",
        "id": 224578428,
        "sender_full_name": "bjorn3",
        "timestamp": 1612002293
    },
    {
        "content": "<p>I think it is an alignment problem for a stack value. Cranelift currently doesn't have any option to set the alignment of stack slots.</p>",
        "id": 224578678,
        "sender_full_name": "bjorn3",
        "timestamp": 1612002612
    },
    {
        "content": "<p>Yup, alignment was the problem. Forcing all stack slots to have a size that is a multiple of 16 fixed it. It just works!!!</p>",
        "id": 224579212,
        "sender_full_name": "bjorn3",
        "timestamp": 1612003579
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/1131\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/1131</a></p>",
        "id": 224581142,
        "sender_full_name": "bjorn3",
        "timestamp": 1612006574
    },
    {
        "content": "<p>Fwiw stack alignment is abi property and differs between targets</p>",
        "id": 224593090,
        "sender_full_name": "nagisa",
        "timestamp": 1612024093
    },
    {
        "content": "<p>This is not a problem of the alignment of the overall stack. That is already correctly handled by Cranelift. This is an individual stack slot not being aligned to 16 bytes as required because an earlier stack slot was smaller and no padding was added beyond the padding necessary to align to 8 bytes that is always applied. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a4eaefc6700205f5b7564d43b9f928f6c22ef15f/cranelift/codegen/src/machinst/abi_impl.rs#L592\">https://github.com/bytecodealliance/wasmtime/blob/a4eaefc6700205f5b7564d43b9f928f6c22ef15f/cranelift/codegen/src/machinst/abi_impl.rs#L592</a></p>",
        "id": 224594926,
        "sender_full_name": "bjorn3",
        "timestamp": 1612026783
    },
    {
        "content": "<p>Um, what??? All I did was re-enabling the MIR inliner for just the sysroot:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./raytracer_cg_llvm\n8101 milliseconds elapsed.\n$ ../build/cargo.sh run\n5371 milliseconds elapsed.\n</code></pre></div>",
        "id": 224599454,
        "sender_full_name": "bjorn3",
        "timestamp": 1612033175
    },
    {
        "content": "<p>Previously the perf win wasn't as big. I presume this win is because of <a href=\"https://github.com/rust-lang/rust/issues/68828\">#68828</a>. It may be a good idea to enable to for the official libstd builds too. (Provided that we are confident that the MIR inliner doesn't cause miscompilations.)</p>",
        "id": 224599586,
        "sender_full_name": "bjorn3",
        "timestamp": 1612033316
    },
    {
        "content": "<p>we still have a (pre existing but more frequently happening if MIR inlining happens) bug that I would consider a blocker: <a href=\"https://github.com/rust-lang/rust/issues/81403\">https://github.com/rust-lang/rust/issues/81403</a></p>",
        "id": 224600639,
        "sender_full_name": "oli",
        "timestamp": 1612034515
    },
    {
        "content": "<p>I would also add <a href=\"https://github.com/rust-lang/rust/issues/78442\">#78442</a> to the list. Running test suite with -Zmir-opt-level=2 and -Zvalidate-mir reveals a few more.</p>",
        "id": 224600764,
        "sender_full_name": "tm",
        "timestamp": 1612034663
    },
    {
        "content": "<p>ok, I'm creating a meta issue for enabling mir inlining by default (if there isn't already one, looking rn)</p>",
        "id": 224601154,
        "sender_full_name": "oli",
        "timestamp": 1612035154
    },
    {
        "content": "<p>and here we go: <a href=\"https://github.com/rust-lang/rust/issues/81567\">https://github.com/rust-lang/rust/issues/81567</a></p>",
        "id": 224601413,
        "sender_full_name": "oli",
        "timestamp": 1612035504
    },
    {
        "content": "<p>all that said... we could still enable the inliner for bootstrap even without exposing it to users</p>",
        "id": 224601435,
        "sender_full_name": "oli",
        "timestamp": 1612035569
    },
    {
        "content": "<p>your issue lists inline(always), what effect does mir inline have on that?</p>",
        "id": 224612514,
        "sender_full_name": "Lokathor",
        "timestamp": 1612051158
    },
    {
        "content": "<p>specifically, last i heard, currently inline(always) has the \"secret\" effect of being able to force an inline across a function feature boundary. This is actually very <strong>bad</strong> to do on accident. So that's one area we need to be careful with if mir inline will expand how often that happens.</p>",
        "id": 224612586,
        "sender_full_name": "Lokathor",
        "timestamp": 1612051272
    },
    {
        "content": "<p>What is a function feature boundary?</p>",
        "id": 224612604,
        "sender_full_name": "tm",
        "timestamp": 1612051321
    },
    {
        "content": "<p>you mean across target features? I think the MIR inliner takes that into account</p>",
        "id": 224612635,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612051323
    },
    {
        "content": "<p>but so does LLVM's normal inlining pass</p>",
        "id": 224612650,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612051346
    },
    {
        "content": "<p>if inline(always) circumvents it that's a soundness issue</p>",
        "id": 224612652,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612051360
    },
    {
        "content": "<p>It <em>is</em> a soundness issue, yes</p>",
        "id": 224613732,
        "sender_full_name": "Lokathor",
        "timestamp": 1612053144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> A target feature such as <code>avx</code> or <code>thumb</code></p>",
        "id": 224613739,
        "sender_full_name": "Lokathor",
        "timestamp": 1612053176
    },
    {
        "content": "<p>that is: if \"this function doesn't have avx\" and then you call a function with avx enabled, that's what i mean. or if you have thumb off or on and you call a function with the opposite setting.</p>",
        "id": 224613810,
        "sender_full_name": "Lokathor",
        "timestamp": 1612053281
    },
    {
        "content": "<p>is this related to <a href=\"https://github.com/rust-lang/rust/issues/79865\">https://github.com/rust-lang/rust/issues/79865</a> or a different issue? I can't find one that matches exactly</p>",
        "id": 224613829,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612053349
    },
    {
        "content": "<p>That could be related to that issue? I'm not familiar with this problem as having a specific issue, but it came up during discussion of the <code>instruction_set</code> function attribute and how it would or wouldn't interact properly with inline assembly.</p>",
        "id": 224614279,
        "sender_full_name": "Lokathor",
        "timestamp": 1612054148
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> if you recall back to that  i think you were the one who checked at the time if you could force an inline past a function feature barrier.</p>",
        "id": 224614294,
        "sender_full_name": "Lokathor",
        "timestamp": 1612054193
    },
    {
        "content": "<p>LLVM will inline across a feature barrier for <code>alwaysinline</code>but not normal <code>inlinehint</code>.</p>",
        "id": 224614358,
        "sender_full_name": "Amanieu",
        "timestamp": 1612054260
    },
    {
        "content": "<p>I don't think this behavior is documented anywhere though.</p>",
        "id": 224614422,
        "sender_full_name": "Amanieu",
        "timestamp": 1612054326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/cranelift.20backend.20work/near/224612586\">said</a>:</p>\n<blockquote>\n<p>specifically, last i heard, currently inline(always) has the \"secret\" effect of being able to force an inline across a function feature boundary. This is actually very <strong>bad</strong> to do on accident. So that's one area we need to be careful with if mir inline will expand how often that happens.</p>\n</blockquote>\n<p>Actually it's not so bad because then it will only use the features of the outer function when inlining. So it shouldn't cause any soundness issues, just maybe poor performance.</p>",
        "id": 224614446,
        "sender_full_name": "Amanieu",
        "timestamp": 1612054429
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 224614505,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612054522
    },
    {
        "content": "<p>thanks for the explanation!</p>",
        "id": 224614509,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612054528
    },
    {
        "content": "<p>LLVM runs different passes for <code>alwaysinline</code> and <code>inlinehint</code>. I wouldn't be surprised if somebody adjusted/fixed the regular inliner and forgot <code>inlinealways</code> case. Or perhaps that was very intentional choice.</p>",
        "id": 224615308,
        "sender_full_name": "nagisa",
        "timestamp": 1612055832
    },
    {
        "content": "<p>I could go either way on this, in case its not a bug in the inliner, its just a responsibility on the front-end to make sure things are right, and in our case <code>#[inline(always)]</code> probably shouldn't become <code>inlinealways</code> in case it'd be unsound.</p>",
        "id": 224615375,
        "sender_full_name": "nagisa",
        "timestamp": 1612055894
    },
    {
        "content": "<p>Looks intentional: \"Never inline functions with conflicting attributes (unless callee has always-inline attribute).\"</p>",
        "id": 224615456,
        "sender_full_name": "tm",
        "timestamp": 1612056008
    },
    {
        "content": "<p>OTOH, at least target_feature attributes infect the definition with unsafe, so we could very well just punt the responsibility on the user here… so many options!</p>",
        "id": 224615471,
        "sender_full_name": "nagisa",
        "timestamp": 1612056065
    },
    {
        "content": "<p>One thing LLVM checks for that is still missing from MIR inliner is exposing returns twice functions (if this is something we want to support).</p>",
        "id": 224615612,
        "sender_full_name": "tm",
        "timestamp": 1612056353
    },
    {
        "content": "<p>ah, that'd be <a href=\"https://github.com/rust-lang/rust/issues/58314\">https://github.com/rust-lang/rust/issues/58314</a></p>",
        "id": 224615671,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612056415
    },
    {
        "content": "<p>If we just bar <code>instruction_set</code> and <code>inline(always)</code> from being used in the same function, we should be good</p>",
        "id": 224622595,
        "sender_full_name": "Lokathor",
        "timestamp": 1612068787
    },
    {
        "content": "<p>Actually, even then, only if <code>asm!</code> is used within the function.</p>",
        "id": 224623304,
        "sender_full_name": "Lokathor",
        "timestamp": 1612069691
    },
    {
        "content": "<p>New progress report: <a href=\"https://bjorn3.github.io/2021/02/01/progress-report-jan-2021.html\">https://bjorn3.github.io/2021/02/01/progress-report-jan-2021.html</a></p>",
        "id": 224788053,
        "sender_full_name": "bjorn3",
        "timestamp": 1612212276
    },
    {
        "content": "<p>For windows compat, would there be worth in me doing work to add <code>.bat</code> equivalents to the sh files?</p>",
        "id": 224807677,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612221486
    },
    {
        "content": "<p>This may need some of the patches from <code>wip_windows_support3</code>, but I'm going for a native <code>windows-msvc</code> toolchain, so just to get it building I only need to drop the <code>__{register, deregister}_frame</code> fns</p>",
        "id": 224816140,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612227263
    },
    {
        "content": "<p>I don't think it makes sense to add <code>.bat</code> files at least for now. They will get out of sync with the <code>.sh</code> files as they aren't tested.</p>",
        "id": 224834228,
        "sender_full_name": "bjorn3",
        "timestamp": 1612248237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Given the recent improvements to cg_clif I think it may make sense to start distributing it using rustup on the nightly channel just like miri. How would I make this happen?</p>",
        "id": 224857930,
        "sender_full_name": "bjorn3",
        "timestamp": 1612264904
    },
    {
        "content": "<p>Ah, let me fork off a thread</p>",
        "id": 224858127,
        "sender_full_name": "simulacrum",
        "timestamp": 1612265026
    },
    {
        "content": "<p>New progress report: <a href=\"https://bjorn3.github.io/2021/04/13/progress-report-april-2021.html\">https://bjorn3.github.io/2021/04/13/progress-report-april-2021.html</a></p>",
        "id": 234305496,
        "sender_full_name": "bjorn3",
        "timestamp": 1618311855
    },
    {
        "content": "<p>Finally!!! <a href=\"https://github.com/rust-lang/rust/pull/81746#issuecomment-882084357\">https://github.com/rust-lang/rust/pull/81746#issuecomment-882084357</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"confetti\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"confetti\">:confetti:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 246387436,
        "sender_full_name": "bjorn3",
        "timestamp": 1626626804
    },
    {
        "content": "<p>tl;dr: dist of cg_clif finally works on windows</p>",
        "id": 246387445,
        "sender_full_name": "bjorn3",
        "timestamp": 1626626837
    },
    {
        "content": "<p>it will be awesome to finally get cg_clif on nightly via rustup. congrats on getting this working ! (also: thanks a whole lot for all the incredible work :)</p>",
        "id": 246388224,
        "sender_full_name": "lqd",
        "timestamp": 1626627828
    },
    {
        "content": "<p>Outstanding work! I look forward to being able to use it on nightly. And notably adding a run for CI, given that I have caught a bug before.</p>",
        "id": 246403710,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626649503
    },
    {
        "content": "<p>Published another progress report: <a href=\"https://bjorn3.github.io/2021/08/05/progress-report-july-2021.html\">https://bjorn3.github.io/2021/08/05/progress-report-july-2021.html</a></p>",
        "id": 248514433,
        "sender_full_name": "bjorn3",
        "timestamp": 1628187056
    },
    {
        "content": "<p>Build of <a href=\"https://github.com/rust-lang/rust/pull/81746\">https://github.com/rust-lang/rust/pull/81746</a> now passes on windows!</p>",
        "id": 271757026,
        "sender_full_name": "bjorn3",
        "timestamp": 1644774531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Awesome! That's wonderful to hear. I look forward to trying it out via rustup.</p>",
        "id": 271758856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644777304
    }
]