[
    {
        "content": "<p>I'm close to making it possible to statically link glibc on <code>linux-gnu</code> targets. I managed to make the necessary changes to the <code>libc</code> crate, and the only issue left is some linker errors trying to get at symbols that would normally come from <code>libgcc_s</code> when dynamically linking:</p>\n<div class=\"codehilite\"><pre><span></span><code>          /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/10/../../../x86_64-linux-gnu/libc.a(iofclose.o):(.data.rel.local.DW.ref.__gcc_personality_v0[DW.ref.__gcc_personality_v0]+0x0): undefined reference to `__gcc_personality_v0&#39;\n          /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/10/../../../x86_64-linux-gnu/libc.a(strtof128_l.o): in function `round_and_return&#39;:\n          (.text+0x1d1): undefined reference to `__multf3&#39;\n          /usr/bin/ld: (.text+0x227): undefined reference to `__addtf3&#39;\n          /usr/bin/ld: (.text+0x36c): undefined reference to `__multf3&#39;\n          /usr/bin/ld: (.text+0x400): undefined reference to `__multf3&#39;\n          /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/10/../../../x86_64-linux-gnu/libc.a(strtof128_l.o): in function `____strtof128_l_internal&#39;:\n          (.text+0x1641): undefined reference to `__multf3&#39;\n          /usr/bin/ld: (.text+0x1a95): undefined reference to `__multf3&#39;\n          /usr/bin/ld: (.text+0x22f2): undefined reference to `__multf3&#39;\n          /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/10/../../../x86_64-linux-gnu/libc.a(strtof128_l.o):(.text+0x24d0): more undefined references to `__multf3&#39; follow\n          /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/10/../../../x86_64-linux-gnu/libc.a(printf_fp.o): in function `__printf_fp_l&#39;:\n          (.text+0x544): undefined reference to `__unordtf2&#39;\n          /usr/bin/ld: (.text+0x57c): undefined reference to `__unordtf2&#39;\n          /usr/bin/ld: (.text+0x5a2): undefined reference to `__letf2&#39;\n          /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/10/../../../x86_64-linux-gnu/libc.a(printf_fphex.o): in function `__printf_fphex&#39;:\n          (.text+0xa3): undefined reference to `__unordtf2&#39;\n          /usr/bin/ld: (.text+0xde): undefined reference to `__unordtf2&#39;\n          /usr/bin/ld: (.text+0xfb): undefined reference to `__letf2&#39;\n          collect2: error: ld returned 1 exit status\n</code></pre></div>",
        "id": 210650050,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600578808
    },
    {
        "content": "<p>I could just arrange for an appropriate <code>#[link]</code> line pulling in libgcc when statically linking, or use <code>late_link_args_static</code>.</p>",
        "id": 210650154,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600579025
    },
    {
        "content": "<p>But as far as I can tell, I <em>think</em> that the <em>only</em> reason this actually works is that libstd is built with unwind support, and unwind is unconditionally linking <code>gcc_s</code> on Linux.</p>",
        "id": 210650157,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600579066
    },
    {
        "content": "<p><code>library/unwind/build.rs</code> contains this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;linux&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;musl&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// linking for musl is handled in lib.rs</span>\n<span class=\"w\">            </span><span class=\"n\">llvm_libunwind</span>::<span class=\"n\">compile</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;android&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;cargo:rustc-link-lib=gcc_s&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210650253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600579226
    },
    {
        "content": "<p>I think that's the only thing pulling in any part of <code>libgcc</code> in a normal build.</p>",
        "id": 210650568,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600579882
    },
    {
        "content": "<p>I don't think it makes sense to use link args in the target definition here, because you only need libgcc here if you're linking libc and std; programs that use no_std don't need it.</p>",
        "id": 210654545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600587914
    },
    {
        "content": "<p>I'm also hesitant to use the libc crate's link options to add libgcc and libgcc_eh, because that's assuming you always want to get those functions from there, and not from, say, compiler-builtins.</p>",
        "id": 210654604,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600588001
    },
    {
        "content": "<p>I would really appreciate some help figuring out the right solution for this. Happy to implement whatever it ends up being.</p>",
        "id": 210654682,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600588118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> you have to do something like musl does: <a href=\"https://github.com/rust-lang/rust/blob/10b3595ba6a4c658c9dea105488fc562c815e434/library/unwind/src/lib.rs#L42\">https://github.com/rust-lang/rust/blob/10b3595ba6a4c658c9dea105488fc562c815e434/library/unwind/src/lib.rs#L42</a></p>",
        "id": 210660071,
        "sender_full_name": "mati865",
        "timestamp": 1600598128
    },
    {
        "content": "<p>I've already done that, adding a dependency on gcc_s when dynamic, and gcc_eh when static. But that's part of the unwind crate, and doesn't seem like the right place to insert a dependency on libgcc (as opposed to libgcc_eh).</p>",
        "id": 210660136,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600598260
    },
    {
        "content": "<p>I had a similar issue before. </p>\n<p>I wanted to use <code>harfbuzz</code> which depends on <code>fontconfig</code>. </p>\n<p>When building the corresponding c library <code>harfbuzz</code>, it needs to know whether the c library <code>fontconfig</code> is built, and locate its c headers.</p>\n<p>When using the prebuilt library of c library <code>harfbuzz</code>, since it's already including c library <code>fontconfig</code> as a dependency, it should somehow tell the <code>fontconfig</code> library to use the already prebuilt <code>fontconfig</code> along side the c library <code>harfbuzz</code>.</p>\n<p>So i guess this is \"dependency crate wants to fine-tune the details of how the crates it depends on does ffi\"</p>",
        "id": 210695403,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600653082
    },
    {
        "content": "<p>In theory we might be able to workaround this with a lot of \"feature\"s on the crate that was depended upon (which i think will work, but a little too hacky).</p>",
        "id": 210695458,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600653223
    },
    {
        "content": "<p>I was also imagining that the <code>metabuild</code> mechanism can somehow see the whole crate graph and help decide what the correct configuration would be.</p>",
        "id": 210695508,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600653294
    },
    {
        "content": "<p>I just filed <a href=\"https://github.com/rust-lang/rust/issues/76992\">https://github.com/rust-lang/rust/issues/76992</a> , which should help with part of this.</p>",
        "id": 210696391,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600654791
    },
    {
        "content": "<p>I think I can solve the rest.</p>",
        "id": 210696392,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600654798
    },
    {
        "content": "<p>I think hack like this one would help you: <a href=\"https://github.com/rust-lang/rust/blob/a409a233e02b1864d1b76495a1f946bb56c7aeb2/compiler/rustc_target/src/spec/windows_gnu_base.rs#L37-L63\">https://github.com/rust-lang/rust/blob/a409a233e02b1864d1b76495a1f946bb56c7aeb2/compiler/rustc_target/src/spec/windows_gnu_base.rs#L37-L63</a><br>\nBut AFAIK it will also link those libs for <code>no_std</code> programs which is bad.</p>",
        "id": 210710458,
        "sender_full_name": "mati865",
        "timestamp": 1600674803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> That's where I ended up, but yeah, it's not ideal.</p>",
        "id": 210711114,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600675375
    },
    {
        "content": "<p>On the other hand, in practice those libraries will get completely omitted if unused.</p>",
        "id": 210711146,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600675412
    },
    {
        "content": "<p>The other alternative I could imagine would be to embed the knowledge of which libraries to link in the <code>libc</code> crate, and then that crate would have to change if we ever decided to move those functions from libgcc to compiler-builtins.</p>",
        "id": 210711229,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600675467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/static.20glibc.20and.20compiler.20builtins/near/210711146\">said</a>:</p>\n<blockquote>\n<p>On the other hand, in practice those libraries will get completely omitted if unused.</p>\n</blockquote>\n<p>I imagine they would be an issue when used tries to manually implement  symbols from them (again for <code>no_std</code>).<br>\nIt's not that big deal on Windows where <code>no_std</code> basically doesn't work yet but on Unix this is scary.</p>",
        "id": 210711406,
        "sender_full_name": "mati865",
        "timestamp": 1600675626
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 210711766,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600675854
    },
    {
        "content": "<p>Do you think it'd be a reasonably un-painful transition to move from libc pulling in gcc and gcc_eh to wanting to use compiler-builtins instead, if we want to change that in the future?</p>",
        "id": 210711803,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600675889
    },
    {
        "content": "<p>Because if so, I can easily just add those two libraries to the libc crate and be done with it. :)</p>",
        "id": 210711819,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600675904
    },
    {
        "content": "<p>You mean replacing libgcc with compiler-builtins and libgcc_eh with libunwind?</p>",
        "id": 210712067,
        "sender_full_name": "mati865",
        "timestamp": 1600676102
    },
    {
        "content": "<p>Aren't we already using compiler-builtins on linux-gnu, and just not implementing all the functions libgcc does?</p>",
        "id": 210712117,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600676158
    },
    {
        "content": "<p>But in any case, yes, something like that for instance. :)</p>",
        "id": 210712137,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600676163
    },
    {
        "content": "<p>I can imagine ways to make that transition easily enough.</p>",
        "id": 210712207,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600676228
    },
    {
        "content": "<blockquote>\n<p>Aren't we already using compiler-builtins on linux-gnu, and just not implementing all the functions libgcc does?</p>\n</blockquote>\n<p>AFAIK we are doing that for Rust code but not for other libraries.</p>",
        "id": 210712224,
        "sender_full_name": "mati865",
        "timestamp": 1600676247
    },
    {
        "content": "<p>Ah. OK, then this seems reasonable enough.</p>",
        "id": 210712240,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600676269
    },
    {
        "content": "<p>I'll try doing it that way and see how well it works.</p>",
        "id": 210712247,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600676277
    },
    {
        "content": "<p>I'd love to use compiler-builtins and libunwind more so we have no dependencies on libgcc*.<br>\nOn <code>i686-*-windows-gnu</code> we have to use either <code>libgcc_s_dw2-1.dll</code> (linked by <code>gcc_s</code> import library) or <code>libunwind.dll</code>, otherwise exception handling will break. For all other targets I care about (<code>*linux*</code> and  <code>*windows-gnu*</code>) this should work fine.</p>",
        "id": 210712647,
        "sender_full_name": "mati865",
        "timestamp": 1600676590
    },
    {
        "content": "<p>Well, if in the future we want to get there, the libc crate could always update to have a feature flag for \"omit gcc libraries in favor of compiler builtins\", and avoid emitting the <code>#[link</code> directives for those libraries in that case.</p>",
        "id": 210712746,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600676673
    },
    {
        "content": "<p>Sounds good :D</p>",
        "id": 210713097,
        "sender_full_name": "mati865",
        "timestamp": 1600676948
    },
    {
        "content": "<p>As an aside, I feel like the whole <code>target-feature=+crt-static</code> mechanism is a lot of special-casing of the C library. It seems like, in general, the top-level crate should be able to decide whether it's linking statically or dynamically, and dependency crates should mostly just say \"I want the <code>foo</code> library\" unless they actually need to link different libraries for the static and dynamic cases.</p>",
        "id": 210713299,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677106
    },
    {
        "content": "<p>I'd love to mostly just pass <code>-lfoo -lbar</code> on the linker command line, from the various crates, and <em>just</em> pass rustc one option that tells it to pass <code>-static</code> (or <code>-Wl,-Bstatic</code>), without needing things like cargo feature flags in individual library crates.</p>",
        "id": 210713395,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677162
    },
    {
        "content": "<p>I don't think it should be up to the individual cargo crates whether they want to link statically or dynamically, in the common case. (In uncommon cases, sure, they <em>could</em> control it, but they shouldn't have to always map a feature flag to this, they should get information from the top-level build for what kind of linking it intends to do.)</p>",
        "id": 210713412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677177
    },
    {
        "content": "<p>In any case, just managed to successfully build a static glibc-based binary using the libc-crate-based approach. Now to submit patches...</p>",
        "id": 210713536,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677282
    },
    {
        "content": "<p>I'll submit the rust-lang/rust patches as soon as <a href=\"https://github.com/rust-lang/libc/pull/1899\">https://github.com/rust-lang/libc/pull/1899</a> gets merged into libc and released.</p>",
        "id": 210713603,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> Thanks for talking through the problem with me; I appreciate it.</p>",
        "id": 210713698,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677375
    },
    {
        "content": "<p>As an intermediate step, would you mind reviewing <a href=\"https://github.com/rust-lang/rust/pull/77003\">https://github.com/rust-lang/rust/pull/77003</a> ?</p>",
        "id": 210714053,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677625
    },
    {
        "content": "<p>IIRC when <code>crt-static</code> was introduced the only \"normal\" static target was <code>*linux-musl</code> and it could not link dynamically. Things were a bit different back then but I do agree with \"the top-level crate should be able to decide whether it's linking statically or dynamically\".</p>\n<blockquote>\n<p>I'd love to mostly just pass <code>-lfoo -lbar</code> on the linker command line, from the various crates, and <em>just</em> pass rustc one option that tells it to pass <code>-static</code> (or <code>-Wl,-Bstatic</code>), without needing things like cargo feature flags in individual library crates.</p>\n</blockquote>\n<p>I think this should be still doable.</p>\n<blockquote>\n<p>As an intermediate step, would you mind reviewing <a href=\"https://github.com/rust-lang/rust/pull/77003\">https://github.com/rust-lang/rust/pull/77003</a> ?</p>\n</blockquote>\n<p>I'll take a look but I'm not one to make the decision here.</p>",
        "id": 210714745,
        "sender_full_name": "mati865",
        "timestamp": 1600678220
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/libc/pull/1899\">https://github.com/rust-lang/libc/pull/1899</a> would be more readable if it was done with a macro ;)</p>",
        "id": 210716667,
        "sender_full_name": "mati865",
        "timestamp": 1600679483
    }
]