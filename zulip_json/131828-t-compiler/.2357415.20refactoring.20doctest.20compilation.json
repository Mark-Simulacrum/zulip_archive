[
    {
        "content": "<p>i'm investigating a possible refactoring of doctest compilation, and i'm wondering: is there some easy hook for a compiler driver to modify a crate after macro expansion, then continue with the rest of compilation as normal, without having to prep and call the phases individually?</p>",
        "id": 154602955,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546896749
    },
    {
        "content": "<p>in <code>compile_input</code> i see several locations that call a <code>controller_entry_point</code> macro but i'm not sure what that's for</p>",
        "id": 154603032,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546896826
    },
    {
        "content": "<p>ooh, now i see it, looks like there are some callbacks on the <code>CompileController</code>, i'll try that</p>",
        "id": 154603285,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546897057
    },
    {
        "content": "<p>oh wait, i can't modify the <code>expanded_crate</code> because it's only a shared reference</p>",
        "id": 154603628,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546897345
    },
    {
        "content": "<p>looking at this more, it doesn't seem like the compile controller is meant for what i wanted to use it for</p>",
        "id": 154605061,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546898525
    },
    {
        "content": "<p>seems more for introspection than in-process modification</p>",
        "id": 154605085,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546898538
    },
    {
        "content": "<p>looks like you can modify the crate before expansion, but not after? i wonder if i can just change the phases or add a new one &gt;_&gt;</p>",
        "id": 154605294,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546898704
    },
    {
        "content": "<p>hmm, changing the <code>expanded_crate</code> to be an owned Crate instead of a borrowed one will affect more than just the <code>after_expansion</code> pass, since other passes also use that field :/</p>",
        "id": 154608576,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546901904
    },
    {
        "content": "<p>and because of the way the ownership works, it would require the crate to be cloned a couple times, if i understand it right</p>",
        "id": 154608864,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546902271
    },
    {
        "content": "<p>is it feasible to turn it from an <code>Option&lt;&amp;Crate&gt;</code> to an <code>Option&lt;&amp;mut Crate&gt;</code>? i'd have to move where <code>after_expansion</code> callbacks are called, but otherwise i don't think that will affect existing callbacks any</p>",
        "id": 154608890,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546902328
    },
    {
        "content": "<p>unless i'm missing some kind of variance implication, as usual</p>",
        "id": 154608897,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546902344
    },
    {
        "content": "<p>Cloning the crate multiple times seems like it would severely regress performance. Maybe a <code>custom_expansion</code> callback would be better?</p>",
        "id": 154633034,
        "sender_full_name": "oli",
        "timestamp": 1546939644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> i'm not familiar with <code>custom_expansion</code>, where's that?</p>",
        "id": 154646203,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546956007
    },
    {
        "content": "<p>It doesn't exist. I meant creating a new one</p>",
        "id": 154646222,
        "sender_full_name": "oli",
        "timestamp": 1546956025
    },
    {
        "content": "<p>any existing work i can base off of? i've added stuff to <code>syntax::ext::expand::InvocationCollector</code> before, but i dunno if that's still the right place to put something, especially if it's going to be conditionally applied</p>",
        "id": 154646829,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546956535
    },
    {
        "content": "<p>I would have assumed that one would duplicate the <code>after_expansion</code> entry (and change to <code>&amp;mut</code>) and then go backwards from all call sites to <code>after_expansion</code> to figure out a good call site for <code>custom_expansion</code>.<br>\nWhy would it be conditional? The default impl for the rustc driver could simply be an empty function.</p>",
        "id": 154647000,
        "sender_full_name": "oli",
        "timestamp": 1546956711
    },
    {
        "content": "<p>oh, i was starting to think of something totally different from a compiler driver</p>",
        "id": 154647073,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546956769
    },
    {
        "content": "<p>adding the new hook would work though</p>",
        "id": 154647090,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546956790
    },
    {
        "content": "<p>something like a full-crate proc macro?</p>",
        "id": 154647092,
        "sender_full_name": "oli",
        "timestamp": 1546956793
    },
    {
        "content": "<p>i was starting to think of directly editing the macro expansion process itself, like what i did for <code>#[doc(include)]</code></p>",
        "id": 154647114,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546956836
    },
    {
        "content": "<p>I think there were ideas like that for custom test drivers</p>",
        "id": 154647118,
        "sender_full_name": "oli",
        "timestamp": 1546956840
    },
    {
        "content": "<p>hmm... can't you just do <code>#![my_custom_attribute_macro]</code> in the crate root for the same effect?</p>",
        "id": 154647199,
        "sender_full_name": "oli",
        "timestamp": 1546956877
    },
    {
        "content": "<p>or are attribute macros run from the outside first?</p>",
        "id": 154647212,
        "sender_full_name": "oli",
        "timestamp": 1546956896
    },
    {
        "content": "<p>/me stares into middle-distance at the thought of <code>#![doctest]</code></p>",
        "id": 154647243,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546956932
    },
    {
        "content": "<p><em>that</em> may be brilliant, but i'm wondering if we're talking past each other again</p>",
        "id": 154647295,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546956967
    },
    {
        "content": "<p>(i gotta run, but i'll be back in ~20 minutes)</p>",
        "id": 154647343,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546957028
    },
    {
        "content": "<p>I'm around for a few hours <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span> just ping me</p>",
        "id": 154647359,
        "sender_full_name": "oli",
        "timestamp": 1546957043
    },
    {
        "content": "<p>okay so the thought of making a proc-macro that does the doctest massaging is just too good</p>",
        "id": 154649900,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546959503
    },
    {
        "content": "<p>but i'm concerned about making sure it runs after regular macro expansion &gt;_&gt;</p>",
        "id": 154649905,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546959517
    },
    {
        "content": "<p>to make sure that any other macros that create <code>fn main</code> have already had the chance to run</p>",
        "id": 154649920,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546959532
    },
    {
        "content": "<p>(i'm thinking of things like the first release of quicli which gave a <code>main!</code> macro that did just that)</p>",
        "id": 154649956,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546959573
    },
    {
        "content": "<p>oof, i need to rethink my approach, plain doctests will likely fail parsing to begin with because they'll just have a bunch of expressions floating in module scope <span class=\"emoji emoji-1f629\" title=\"weary\">:weary:</span></p>",
        "id": 154658249,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1546966425
    },
    {
        "content": "<p>okay, after experimenting with a vanilla proc-macro to massage doctests, i think it's <em>possible</em>, but probably more cumbersome than it's worth</p>\n<p>and i don't know how i'd hook it into the compile process anyway</p>",
        "id": 155196866,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1547580441
    },
    {
        "content": "<p>i looked a little more at the compile controller stuff and i'm not sure there's a way to really do something on the libsyntax side without completely reimplementing <code>rustc_driver::driver::phase_1_parse_input</code> with new parsing code &gt;_&gt;</p>",
        "id": 155196997,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1547580549
    },
    {
        "content": "<p>am i completely off-base? is attempting to parse something that looks like a doctest (inner attributes, some items, and some expressions that need to be wrapped by a main function) going to cause that much more headache?</p>",
        "id": 155197168,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1547580686
    }
]