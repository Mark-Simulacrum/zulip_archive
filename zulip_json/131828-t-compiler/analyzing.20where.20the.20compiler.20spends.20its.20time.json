[
    {
        "content": "<p>So one of the follow-up items from our last steering meeting was:</p>\n<blockquote>\n<p>gather statistics about where we spend our time from perf and perhaps elsewhere</p>\n</blockquote>\n<p>I was wondering whether <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span>,  or anyone else might be interesting in taking a stab at this. I figured we'd <em>start</em> by selecting some benchmarks and designing a methodology.</p>\n<p>Actually, maybe the approach we should do is to schedule a 1hr slot or so to work out the plan, and then open up some issues?</p>",
        "id": 148647180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543334505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> do you still feel good about your \"scenarios\"</p>",
        "id": 148647204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543334519
    },
    {
        "content": "<p>The RLS case does not measure actual RLS performance very well.</p>",
        "id": 148648142,
        "sender_full_name": "mw",
        "timestamp": 1543335155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm interested and always happy to help out where I can.</p>",
        "id": 148648155,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543335167
    },
    {
        "content": "<p>It should maybe be renamed to CHECK</p>",
        "id": 148648158,
        "sender_full_name": "mw",
        "timestamp": 1543335172
    },
    {
        "content": "<p>maybe we could meet to dsicuss and plan out tomorrow, say around 10am boston time( same as compiler mtg)?</p>",
        "id": 148648208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543335220
    },
    {
        "content": "<p>I'm not feeling well today and it's late for <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 148648224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543335229
    },
    {
        "content": "<p>I'm not so sure about the DIST scenario. It's important, but it's compile time might not be too important</p>",
        "id": 148648227,
        "sender_full_name": "mw",
        "timestamp": 1543335234
    },
    {
        "content": "<p>not sure <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> what your constraints are tho</p>",
        "id": 148648231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543335236
    },
    {
        "content": "<p>of course we could chat on zulip</p>",
        "id": 148648246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543335242
    },
    {
        "content": "<p>Zulip is always fine and I probably find time to schedule a 1hr meeting in</p>",
        "id": 148648322,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543335294
    },
    {
        "content": "<p>tomorrow works for me</p>",
        "id": 148648361,
        "sender_full_name": "mw",
        "timestamp": 1543335330
    },
    {
        "content": "<p>I will create a calendar invite</p>",
        "id": 148648769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543335662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> and <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  I am interested in optimization problems but unfortunately don't know enough. If someone is willing to coach me, I would love to take a piece of the work.</p>",
        "id": 148651749,
        "sender_full_name": "blitzerr",
        "timestamp": 1543338155
    },
    {
        "content": "<p>I want to get full tracing of queries and whatever else compiler does. I think it should be fairly easy to derive information about perf from that.</p>",
        "id": 148653225,
        "sender_full_name": "nagisa",
        "timestamp": 1543339433
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> â€”</p>",
        "id": 148718166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418210
    },
    {
        "content": "<p>so I just woke up from a nap :)</p>",
        "id": 148718175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418216
    },
    {
        "content": "<p>want to chat?</p>",
        "id": 148718180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418221
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 148718377,
        "sender_full_name": "mw",
        "timestamp": 1543418375
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 148718382,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543418380
    },
    {
        "content": "<p>we could chat over video but maybe zulip will suffice?</p>",
        "id": 148718391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418390
    },
    {
        "content": "<p>both is fine with me</p>",
        "id": 148718463,
        "sender_full_name": "mw",
        "timestamp": 1543418409
    },
    {
        "content": "<p>Whichever works for me</p>",
        "id": 148718464,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543418411
    },
    {
        "content": "<p>mainly I was hoping we could kind of draw up a \"plan\" regarding what to measure</p>",
        "id": 148718471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418421
    },
    {
        "content": "<p>I'm trying now to bring some of this back in cache a bit</p>",
        "id": 148718504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> and I chatted a bit about making <code>-Zself-profile</code> more detailed</p>",
        "id": 148718554,
        "sender_full_name": "mw",
        "timestamp": 1543418503
    },
    {
        "content": "<p>i.e. I gave him my wishlist :)</p>",
        "id": 148718571,
        "sender_full_name": "mw",
        "timestamp": 1543418518
    },
    {
        "content": "<p>=)</p>",
        "id": 148718681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> where was the list of issues you had for different scenarios?</p>",
        "id": 148718712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418629
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/48750\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48750\">https://github.com/rust-lang/rust/issues/48750</a></p>",
        "id": 148718718,
        "sender_full_name": "mw",
        "timestamp": 1543418641
    },
    {
        "content": "<p>also, maybe we can separate out future impovements to self-profile from things we can measure now?</p>",
        "id": 148718753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418643
    },
    {
        "content": "<p>(in other words, can we make measurements without those, or do we feel like we have to do self-profile improvements?)</p>",
        "id": 148718786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418682
    },
    {
        "content": "<p>yes, let's start with defining a goal for the conversation</p>",
        "id": 148718790,
        "sender_full_name": "mw",
        "timestamp": 1543418687
    },
    {
        "content": "<p>I guess we could use the perf measurements</p>",
        "id": 148718792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418688
    },
    {
        "content": "<p>my main goal is to help us drive our prioritization for upcoming year</p>",
        "id": 148718826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418719
    },
    {
        "content": "<p>are we interested in defining a methodology for measuring compiler performance?</p>",
        "id": 148718834,
        "sender_full_name": "mw",
        "timestamp": 1543418727
    },
    {
        "content": "<p>because that would be a big topic</p>",
        "id": 148718846,
        "sender_full_name": "mw",
        "timestamp": 1543418739
    },
    {
        "content": "<p>I'm not entirely sure what that means</p>",
        "id": 148718917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418781
    },
    {
        "content": "<p>I think I was imagining something less ambitious though</p>",
        "id": 148718934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418803
    },
    {
        "content": "<p>yes, me too</p>",
        "id": 148718940,
        "sender_full_name": "mw",
        "timestamp": 1543418813
    },
    {
        "content": "<p>more like identifying a set of specific test cases and specific things we can figure out from them</p>",
        "id": 148718941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418813
    },
    {
        "content": "<p>(but <a href=\"https://github.com/rust-lang/rust/issues/48750\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48750\">https://github.com/rust-lang/rust/issues/48750</a> is more ambitious :) )</p>",
        "id": 148718958,
        "sender_full_name": "mw",
        "timestamp": 1543418829
    },
    {
        "content": "<p>I looked at the meeting notes and the discussion around profiling seemed to be in the context of determining how much time is spent prior to the start of the query system. The discussion seemed to mostly be about pushing more early stuff into queries <a href=\"#narrow/stream/131828-t-compiler/subject/steering.20meeting.202018-11-16/near/147824772\" title=\"#narrow/stream/131828-t-compiler/subject/steering.20meeting.202018-11-16/near/147824772\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/subject/steering.20meeting.202018-11-16/near/147824772</a></p>",
        "id": 148719038,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543418900
    },
    {
        "content": "<p>I think I would probably start with things like \"major phases\":</p>\n<ul>\n<li>how much time is spent doing trait solving</li>\n<li>type-checking</li>\n<li>parsing</li>\n<li>macro expansion</li>\n<li>resolution</li>\n<li>trans</li>\n<li>collection</li>\n<li>LLVM optimization</li>\n</ul>\n<p>and perhaps \"incremental overhead\" (ratio of from-scratch builds) as well as \"current incremental potential\" (ratio of \"no-change builds\")?</p>",
        "id": 148719073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418932
    },
    {
        "content": "<p>I figure <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> that the best way to design a more complete system is to first do some specific things for specific tests</p>",
        "id": 148719100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418958
    },
    {
        "content": "<p>and then generalize</p>",
        "id": 148719102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543418962
    },
    {
        "content": "<p>do the <code>-Zself-profile</code> categories match with the list above?</p>",
        "id": 148719204,
        "sender_full_name": "mw",
        "timestamp": 1543419018
    },
    {
        "content": "<p>I don't know :)</p>",
        "id": 148719208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419022
    },
    {
        "content": "<p>We don't have as many categories</p>",
        "id": 148719216,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543419028
    },
    {
        "content": "<p>roughly, but not entirely</p>",
        "id": 148719227,
        "sender_full_name": "mw",
        "timestamp": 1543419036
    },
    {
        "content": "<p>I guess it would be possible to tweak them</p>",
        "id": 148719235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419047
    },
    {
        "content": "<p>I was looking at <a href=\"https://www.draw.io/?state={%22ids%22:[%221pI_69tI8uz83Sd7V7TvzltRACFUDPoO2%22],%22action%22:%22open%22,%22userId%22:%22114050878502958257910%22}#G1pI_69tI8uz83Sd7V7TvzltRACFUDPoO2\" target=\"_blank\" title=\"https://www.draw.io/?state={%22ids%22:[%221pI_69tI8uz83Sd7V7TvzltRACFUDPoO2%22],%22action%22:%22open%22,%22userId%22:%22114050878502958257910%22}#G1pI_69tI8uz83Sd7V7TvzltRACFUDPoO2\">my diagram</a></p>",
        "id": 148719237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419052
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/profiling.rs#L125\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/util/profiling.rs#L125\">https://github.com/rust-lang/rust/blob/master/src/librustc/util/profiling.rs#L125</a></p>",
        "id": 148719253,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543419062
    },
    {
        "content": "<p>We can certainly tweak them</p>",
        "id": 148719270,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543419074
    },
    {
        "content": "<p>it seems like we definitely want to get a handle on what parsing/name-resolution/macro-expansion costs, because that informs the \"extend query system earlier\" question</p>",
        "id": 148719278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419091
    },
    {
        "content": "<p>yes</p>",
        "id": 148719294,
        "sender_full_name": "mw",
        "timestamp": 1543419111
    },
    {
        "content": "<p>I imagine trying to get the costs of trait selection etc -- which is a cross-cutting thing, not easily handled by <code>-Zself-profile</code>, but relatively easily handled by <code>perf-focus</code> -- would be of interest too</p>",
        "id": 148719345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419125
    },
    {
        "content": "<p>I've measured it before but I'd like to update it, particularly in light of existing work on chalk</p>",
        "id": 148719355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419136
    },
    {
        "content": "<p>One thing I don't really know is how to estimate the impact of MIR <em>optimizations</em></p>",
        "id": 148719382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419174
    },
    {
        "content": "<p>only half of trait selection is a query, right?</p>",
        "id": 148719387,
        "sender_full_name": "mw",
        "timestamp": 1543419178
    },
    {
        "content": "<p>some parts of trait selection are queries, yeah, but some parts aren't</p>",
        "id": 148719401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419190
    },
    {
        "content": "<p>(part of the chalk transition plan is to finish that conversion)</p>",
        "id": 148719424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419212
    },
    {
        "content": "<p>what about \"polymorphization\"?</p>",
        "id": 148719439,
        "sender_full_name": "mw",
        "timestamp": 1543419228
    },
    {
        "content": "<p>that seems like something that we could get numbers on</p>",
        "id": 148719473,
        "sender_full_name": "mw",
        "timestamp": 1543419242
    },
    {
        "content": "<p>i.e. how much LLVM IR would we save by deduplication</p>",
        "id": 148719509,
        "sender_full_name": "mw",
        "timestamp": 1543419264
    },
    {
        "content": "<p>right so we can get some rough bounds</p>",
        "id": 148719512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419270
    },
    {
        "content": "<p>it'd be nice to know:</p>",
        "id": 148719515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419273
    },
    {
        "content": "<ul>\n<li>how much LLVM IR results from monomorphized copies (i.e., more than one copy)</li>\n</ul>",
        "id": 148719526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419284
    },
    {
        "content": "<ul>\n<li>how much LLVM's existing mergefunc can remove</li>\n</ul>",
        "id": 148719546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419307
    },
    {
        "content": "<p>ok, so we have three specific questions so far:</p>",
        "id": 148719649,
        "sender_full_name": "mw",
        "timestamp": 1543419385
    },
    {
        "content": "<ul>\n<li>how much time is spent before queries</li>\n</ul>",
        "id": 148719663,
        "sender_full_name": "mw",
        "timestamp": 1543419395
    },
    {
        "content": "<ul>\n<li>how much could we save by polymorphization</li>\n</ul>",
        "id": 148719674,
        "sender_full_name": "mw",
        "timestamp": 1543419413
    },
    {
        "content": "<ul>\n<li>how much time is spent in trait selection</li>\n</ul>",
        "id": 148719685,
        "sender_full_name": "mw",
        "timestamp": 1543419425
    },
    {
        "content": "<p>I would add another one:</p>",
        "id": 148719709,
        "sender_full_name": "mw",
        "timestamp": 1543419443
    },
    {
        "content": "<ul>\n<li>how much time can we save via parallel queries</li>\n</ul>",
        "id": 148719723,
        "sender_full_name": "mw",
        "timestamp": 1543419454
    },
    {
        "content": "<p>I was wondering about that</p>",
        "id": 148719732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419462
    },
    {
        "content": "<p>how are you planning to estimate that?</p>",
        "id": 148719737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419467
    },
    {
        "content": "<p>because that's something we can measure right now</p>",
        "id": 148719739,
        "sender_full_name": "mw",
        "timestamp": 1543419470
    },
    {
        "content": "<p>I'd also like to capture the \"where in general do we spend our time\" -- e.g. I have some \"rule of thumb\" numbers of like \"50% type check, 50% trans/LLVM\" that I think are pretty dated, and I would like to update</p>",
        "id": 148719805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419497
    },
    {
        "content": "<blockquote>\n<p>because that's something we can measure right now</p>\n</blockquote>\n<p>using the existing support?</p>",
        "id": 148719814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419504
    },
    {
        "content": "<p>well, we can get an upper bound by finding out how much time we spend in queries to begin with</p>",
        "id": 148719821,
        "sender_full_name": "mw",
        "timestamp": 1543419512
    },
    {
        "content": "<p>yes</p>",
        "id": 148719829,
        "sender_full_name": "mw",
        "timestamp": 1543419518
    },
    {
        "content": "<p>this ties back into -Zself-profile</p>",
        "id": 148719855,
        "sender_full_name": "mw",
        "timestamp": 1543419541
    },
    {
        "content": "<p>I think</p>",
        "id": 148719861,
        "sender_full_name": "mw",
        "timestamp": 1543419544
    },
    {
        "content": "<p>so if we can answer those bullets you raised plus maybe a fifth of </p>\n<ul>\n<li>breakdown of time into high-level phases (roughly what <code>-Zself-profile</code> is designed to produce)</li>\n</ul>\n<p>that'd be amazing</p>",
        "id": 148719868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419551
    },
    {
        "content": "<p>we would need to split LLVM and \"codegen\" though</p>",
        "id": 148719872,
        "sender_full_name": "mw",
        "timestamp": 1543419558
    },
    {
        "content": "<p>now the question is -- for which crates to measure :)</p>",
        "id": 148719878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419562
    },
    {
        "content": "<p>Yeah, we'd need to make <code>-Zself-profile</code> work with parallel queries</p>",
        "id": 148719879,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543419563
    },
    {
        "content": "<blockquote>\n<p>we would need to split LLVM and \"codegen\" though</p>\n</blockquote>\n<p>yes, I'd like to see those separated</p>",
        "id": 148719881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419567
    },
    {
        "content": "<p>(It doesn't currently)</p>",
        "id": 148719887,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543419574
    },
    {
        "content": "<p>we can start without integrating self-profile and parallel queries, I think</p>",
        "id": 148719974,
        "sender_full_name": "mw",
        "timestamp": 1543419617
    },
    {
        "content": "<p>i.e. finding out how much time we spend in queries to begin with</p>",
        "id": 148719991,
        "sender_full_name": "mw",
        "timestamp": 1543419635
    },
    {
        "content": "<p>regarding which crates to measure:</p>",
        "id": 148720019,
        "sender_full_name": "mw",
        "timestamp": 1543419665
    },
    {
        "content": "<ul>\n<li>it would be great to have some kind of aggregation over the perf.rlo measurements</li>\n</ul>",
        "id": 148720035,
        "sender_full_name": "mw",
        "timestamp": 1543419687
    },
    {
        "content": "<ul>\n<li>I think that crates can be quite different, so a simple aggregation might be misleading :/</li>\n</ul>",
        "id": 148720060,
        "sender_full_name": "mw",
        "timestamp": 1543419711
    },
    {
        "content": "<p>hmm</p>",
        "id": 148720143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419747
    },
    {
        "content": "<p>this is a typical challenge</p>",
        "id": 148720151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419754
    },
    {
        "content": "<p>but we can try to pick a good \"middleground\" crate</p>",
        "id": 148720179,
        "sender_full_name": "mw",
        "timestamp": 1543419768
    },
    {
        "content": "<p>i.e. something that has a bit of everything?</p>",
        "id": 148720195,
        "sender_full_name": "mw",
        "timestamp": 1543419780
    },
    {
        "content": "<p>or maybe the larger the project, the better?</p>",
        "id": 148720227,
        "sender_full_name": "mw",
        "timestamp": 1543419812
    },
    {
        "content": "<p>to the extent that we're going to have to do manual profiling</p>",
        "id": 148720230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419814
    },
    {
        "content": "<p>I'd like to avoid measuring a ton of crates</p>",
        "id": 148720343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419823
    },
    {
        "content": "<p>yeah</p>",
        "id": 148720427,
        "sender_full_name": "mw",
        "timestamp": 1543419829
    },
    {
        "content": "<p>but maybe that's arguing for us setting up more automated variants ;)</p>",
        "id": 148720434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419834
    },
    {
        "content": "<p>I feel like I'd like to measure the stylo/script crates</p>",
        "id": 148720459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419842
    },
    {
        "content": "<p>since they are \"in production\" and known pain points</p>",
        "id": 148720490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419860
    },
    {
        "content": "<p>yeah</p>",
        "id": 148720499,
        "sender_full_name": "mw",
        "timestamp": 1543419870
    },
    {
        "content": "<p>I wonder if it would make sense to measure librustc</p>",
        "id": 148720503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419873
    },
    {
        "content": "<p>it seems pretty dang slow to me</p>",
        "id": 148720509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419876
    },
    {
        "content": "<p>and/or libstd</p>",
        "id": 148720512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419879
    },
    {
        "content": "<p>not sure if they are \"representative\" but they are near and dear to <em>our</em> hearts :)</p>",
        "id": 148720533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419899
    },
    {
        "content": "<p>yeah</p>",
        "id": 148720588,
        "sender_full_name": "mw",
        "timestamp": 1543419919
    },
    {
        "content": "<p>I wonder if we could do a sort of \"breadth-first search\" approach -- basically, try to measure a few crates and see how much they diverge (probably we should aim for things likely to diverge)</p>",
        "id": 148720592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419923
    },
    {
        "content": "<p>if they are all showing similar results, we can stop</p>",
        "id": 148720597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419928
    },
    {
        "content": "<p>if we are seeing a lot of variation, we can draw some more samples</p>",
        "id": 148720603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419935
    },
    {
        "content": "<p>I am imagining trying to pick from the various categories you drew up</p>",
        "id": 148720610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419941
    },
    {
        "content": "<p>I mean, when I think of perf.rlo results in general: most optimization benefit all crates</p>",
        "id": 148720617,
        "sender_full_name": "mw",
        "timestamp": 1543419947
    },
    {
        "content": "<p>unless they are edge cases</p>",
        "id": 148720629,
        "sender_full_name": "mw",
        "timestamp": 1543419956
    },
    {
        "content": "<p>yes</p>",
        "id": 148720701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419982
    },
    {
        "content": "<p>it would be helpful at some point to go over perf and try to categorize</p>",
        "id": 148720711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419990
    },
    {
        "content": "<p>I have some feeling for this from NLL</p>",
        "id": 148720718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543419994
    },
    {
        "content": "<p>though my memory is fading :)</p>",
        "id": 148720734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420003
    },
    {
        "content": "<p>but e.g. keccak is an edge case, very very large CFG, otherwise very simple</p>",
        "id": 148720739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420013
    },
    {
        "content": "<p>Targeting \"general\" crates makes sense to me. It seems like people complain about compiler perf for most crates not just the edge-case ones.</p>",
        "id": 148720764,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420032
    },
    {
        "content": "<p>yeah, the various *-stress crates too</p>",
        "id": 148720771,
        "sender_full_name": "mw",
        "timestamp": 1543420039
    },
    {
        "content": "<p>I agree</p>",
        "id": 148720785,
        "sender_full_name": "mw",
        "timestamp": 1543420056
    },
    {
        "content": "<p>I think we should measure </p>\n<ul>\n<li>serde-*</li>\n<li>ripgrep-*</li>\n</ul>",
        "id": 148720792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420065
    },
    {
        "content": "<p>well let's try to look at the categories I guess</p>",
        "id": 148720803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420076
    },
    {
        "content": "<p>well I guess this is distinct from the scenarios in <a href=\"https://github.com/rust-lang/rust/issues/48750\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48750\">https://github.com/rust-lang/rust/issues/48750</a></p>",
        "id": 148720855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420093
    },
    {
        "content": "<p>yes</p>",
        "id": 148721060,
        "sender_full_name": "mw",
        "timestamp": 1543420155
    },
    {
        "content": "<p>I am imagining sort of :</p>\n<ul>\n<li>application (ripgrep)</li>\n<li>popular libraries (serde, maybe regex)</li>\n<li>large and complex (script, rustc?)</li>\n</ul>",
        "id": 148721191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420164
    },
    {
        "content": "<p>serde is interesting because maybe some costs from using it are deferred until the code is instantiated</p>",
        "id": 148721319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420186
    },
    {
        "content": "<p>Is winapi still super slow?</p>",
        "id": 148721324,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420189
    },
    {
        "content": "<p>since I imagine it's tons of generics</p>",
        "id": 148721333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420193
    },
    {
        "content": "<p>mm good call</p>",
        "id": 148721334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420197
    },
    {
        "content": "<p>I guess that's hard to measure since you have to build on Windows</p>",
        "id": 148721337,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420199
    },
    {
        "content": "<p>measuring on windows is hard of course</p>",
        "id": 148721338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420200
    },
    {
        "content": "<p>:(</p>",
        "id": 148721385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420205
    },
    {
        "content": "<p>maybe I can justify buying that Surface Pro after all ;)</p>",
        "id": 148721411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420222
    },
    {
        "content": "<p>it also depends on the version, I think</p>",
        "id": 148721421,
        "sender_full_name": "mw",
        "timestamp": 1543420228
    },
    {
        "content": "<p>newer versions are faster to compile</p>",
        "id": 148721427,
        "sender_full_name": "mw",
        "timestamp": 1543420236
    },
    {
        "content": "<p>Yeah, I seem to recall they restructured the crate to make it faster</p>",
        "id": 148721439,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420248
    },
    {
        "content": "<p>but I think there are some open issues on GH about winapi being slow</p>",
        "id": 148721444,
        "sender_full_name": "mw",
        "timestamp": 1543420258
    },
    {
        "content": "<p>I sort of recall <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> that we tried to do a categorization of this kind at <em>some</em> point</p>",
        "id": 148721445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420261
    },
    {
        "content": "<p>yeah, probably as part of setting up perf.rlo</p>",
        "id": 148721484,
        "sender_full_name": "mw",
        "timestamp": 1543420303
    },
    {
        "content": "<p>and/or the scenarios</p>",
        "id": 148721491,
        "sender_full_name": "mw",
        "timestamp": 1543420312
    },
    {
        "content": "<p>ok, so...</p>",
        "id": 148721543,
        "sender_full_name": "mw",
        "timestamp": 1543420336
    },
    {
        "content": "<p>ps only mildly related but I missed <a href=\"https://github.com/rust-lang/rust/issues/48750#issuecomment-400148645\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48750#issuecomment-400148645\">this insightful comment</a> from <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> somehow.</p>",
        "id": 148721549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420341
    },
    {
        "content": "<p>(about how to weight multiple runs)</p>",
        "id": 148721556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420351
    },
    {
        "content": "<p>so far we've only talked about \"raw\" compilation performance</p>",
        "id": 148721558,
        "sender_full_name": "mw",
        "timestamp": 1543420352
    },
    {
        "content": "<p>do we care about RLS?</p>",
        "id": 148721572,
        "sender_full_name": "mw",
        "timestamp": 1543420370
    },
    {
        "content": "<p>well</p>",
        "id": 148721575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420378
    },
    {
        "content": "<p>I mean, of course, we care :)</p>",
        "id": 148721577,
        "sender_full_name": "mw",
        "timestamp": 1543420380
    },
    {
        "content": "<p>what do you mean by RLS, to start :)</p>",
        "id": 148721578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420382
    },
    {
        "content": "<p>the actual RLS</p>",
        "id": 148721591,
        "sender_full_name": "mw",
        "timestamp": 1543420395
    },
    {
        "content": "<p>so</p>",
        "id": 148721607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420412
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 148721614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420419
    },
    {
        "content": "<p>I guess it'd be useful just to measure save-analysis</p>",
        "id": 148721622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420439
    },
    {
        "content": "<p>and whatever else the RLS does <em>literally right now</em></p>",
        "id": 148721668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420447
    },
    {
        "content": "<p>it's also interesting to try and estimate what are the biggest obstacles to the RLS being able to interactively invoke the compiler, but I think that some of our measurements (e.g., looking at parse time etc) are relevant to that</p>",
        "id": 148721683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420476
    },
    {
        "content": "<p>yes, we don't have any numbers on that at all, I think</p>",
        "id": 148721686,
        "sender_full_name": "mw",
        "timestamp": 1543420480
    },
    {
        "content": "<p>I'm sort of inclined to measure the things we listed and then \"reconvene\"</p>",
        "id": 148721709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420516
    },
    {
        "content": "<p>since our time is almost up, can we try to distill some concrete action items?</p>",
        "id": 148721722,
        "sender_full_name": "mw",
        "timestamp": 1543420534
    },
    {
        "content": "<p>though maybe it'd be good to at least figure out how to measure RLS  save analysis</p>",
        "id": 148721723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420536
    },
    {
        "content": "<p>an easy one would be separating codegen and LLVM in self-profile</p>",
        "id": 148721796,
        "sender_full_name": "mw",
        "timestamp": 1543420582
    },
    {
        "content": "<p>that would also be useful, I think</p>",
        "id": 148721803,
        "sender_full_name": "mw",
        "timestamp": 1543420597
    },
    {
        "content": "<p>Is \"codegen\" the time spent emitting LLVM BC but not time running LLVM passes + linking?</p>",
        "id": 148721849,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420651
    },
    {
        "content": "<p>yes</p>",
        "id": 148721878,
        "sender_full_name": "mw",
        "timestamp": 1543420680
    },
    {
        "content": "<p>do we want to create a \"benchmark\" repository ?</p>",
        "id": 148721974,
        "sender_full_name": "mw",
        "timestamp": 1543420752
    },
    {
        "content": "<p>let's review. We identified a few \"raw perf\" measurements that'd be useful:</p>\n<ul>\n<li>how much time is spent before queries</li>\n<li>how much could we save by polymorphization (get some rough bounds to start?)</li>\n<li>how much time is spent in trait selection</li>\n<li>how much time can we save via parallel queries</li>\n<li>rough breakdown of where we spend our time, ideally into something like this?<br>\n    - parser<br>\n    - resolution/macro-expansion<br>\n    - type-checking<br>\n    - borrow-checking<br>\n    - MIR optimization<br>\n    - translation<br>\n    - LLVM optimization</li>\n</ul>\n<p>We mentioned the idea of measuring on a few crates like:</p>\n<ul>\n<li>popular library:<ul>\n<li>serde-*</li>\n<li>regex</li>\n</ul>\n</li>\n<li>big and important:<ul>\n<li>script</li>\n<li>stylo </li>\n<li>rustc</li>\n</ul>\n</li>\n</ul>\n<p>and see where that goes</p>",
        "id": 148721979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420758
    },
    {
        "content": "<blockquote>\n<p>do we want to create a \"benchmark\" repository ?</p>\n</blockquote>\n<p>well, we have the existing one, right?</p>",
        "id": 148721990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420768
    },
    {
        "content": "<p>one action item would be:</p>\n<ul>\n<li>measure trait selection time for those crates :)</li>\n</ul>",
        "id": 148722007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420789
    },
    {
        "content": "<p>I can take that one on</p>",
        "id": 148722009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420792
    },
    {
        "content": "<p>(I guess we have to settle on a specific rustc)</p>",
        "id": 148722067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420807
    },
    {
        "content": "<p>2018 beta compiler?</p>",
        "id": 148722091,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420827
    },
    {
        "content": "<p>why not :)</p>",
        "id": 148722108,
        "sender_full_name": "mw",
        "timestamp": 1543420844
    },
    {
        "content": "<p>I'll look into parallel query performance</p>",
        "id": 148722166,
        "sender_full_name": "mw",
        "timestamp": 1543420886
    },
    {
        "content": "<blockquote>\n<p>an easy one would be separating codegen and LLVM in self-profile</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you want to try adjusting self-profile then?</p>",
        "id": 148722202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420918
    },
    {
        "content": "<p>Sure!</p>",
        "id": 148722245,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420924
    },
    {
        "content": "<p>can you add the percentage column too?</p>",
        "id": 148722259,
        "sender_full_name": "mw",
        "timestamp": 1543420940
    },
    {
        "content": "<p>how does it presently handle \"pre-query\" time?</p>",
        "id": 148722265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420943
    },
    {
        "content": "<p>@mw I'll look in to that too</p>",
        "id": 148722284,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420960
    },
    {
        "content": "<p>the big question mark then is \"polymorphization\"â€” I'd like to check-in a bit with <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> here, as I recall them doing some measurements that seem relevant</p>",
        "id": 148722308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543420990
    },
    {
        "content": "<p>I'd have to check. We have some ad-hoc timers for certain things.</p>",
        "id": 148722310,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543420990
    },
    {
        "content": "<p>Parsing is one of those I think</p>",
        "id": 148722318,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543421000
    },
    {
        "content": "<p>I think the other bullet points are sort of \"covered\", or at least would be if we tweak self-profile and then run it :)</p>",
        "id": 148722324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421012
    },
    {
        "content": "<blockquote>\n<ul>\n<li>rough breakdown of where we spend our time, ideally into something like this?<br>\n    - parser<br>\n    - resolution/macro-expansion<br>\n    - type-checking<br>\n    - borrow-checking<br>\n    - MIR optimization<br>\n    - translation<br>\n    - LLVM optimization</li>\n</ul>\n</blockquote>\n<p>This seems like a good references for self-profile categories</p>",
        "id": 148722342,
        "sender_full_name": "mw",
        "timestamp": 1543421035
    },
    {
        "content": "<p>(I'm not sure if that breakdown is good btw it was just kind of ad-hoc)</p>",
        "id": 148722393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421050
    },
    {
        "content": "<p>but I think it sounds \"roughly right\", maybe a few missing things</p>",
        "id": 148722413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421077
    },
    {
        "content": "<p>it'd be interesting to know if there are significant time sinks <em>not</em> on that list</p>",
        "id": 148722427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421096
    },
    {
        "content": "<p>I'll take a look later and report back if I find anything</p>",
        "id": 148722470,
        "sender_full_name": "mw",
        "timestamp": 1543421135
    },
    {
        "content": "<p>From a self-interest POV, I have a crate that takes ~3s (20s in release) to compile (just doing a <code>touch src/lib.rs</code>). It's not a popular crate, but I think it'd be great if there's enough automated mechanism for people to participate in this by providing info somehow.</p>",
        "id": 148722478,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543421144
    },
    {
        "content": "<p>interesting</p>",
        "id": 148722567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421202
    },
    {
        "content": "<p>when we do ad-hoc measurements, as I think <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and I sort of plan to do,</p>",
        "id": 148722587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421227
    },
    {
        "content": "<p>we should definitely document what we are doing and how</p>",
        "id": 148722595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421233
    },
    {
        "content": "<p>that would permit us to \"crowd-source\" a bit</p>",
        "id": 148722607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421239
    },
    {
        "content": "<p>yeah</p>",
        "id": 148722618,
        "sender_full_name": "mw",
        "timestamp": 1543421246
    },
    {
        "content": "<p>to start <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> you might run with <code>-Zself-profile</code> =)</p>",
        "id": 148722631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421255
    },
    {
        "content": "<p>though I think we should use perf.rlo as much as we can</p>",
        "id": 148722769,
        "sender_full_name": "mw",
        "timestamp": 1543421381
    },
    {
        "content": "<p>ok do we feel like we have concrete action items? I have down:</p>\n<ul>\n<li>measure trait times on the given crates (niko)</li>\n<li>measure parallel performance (mw)</li>\n<li>tweak self-profile (wesleywiser)</li>\n<li>talk to alex about what they measured for polymorph (niko)</li>\n</ul>",
        "id": 148722780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421395
    },
    {
        "content": "<blockquote>\n<p>though I think we should use perf.rlo as much as we can</p>\n</blockquote>\n<p>yes definitely</p>",
        "id": 148722784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421398
    },
    {
        "content": "<p>I would like to see self-profile available for perf.rlo, in particular</p>",
        "id": 148722842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421409
    },
    {
        "content": "<p>I had talked to <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> about that, it didn't seem too hard as I recall</p>",
        "id": 148722854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421419
    },
    {
        "content": "<p>They're working on it, I believe</p>",
        "id": 148722867,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543421430
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/rustc-perf/issues/299\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf/issues/299\">https://github.com/rust-lang-nursery/rustc-perf/issues/299</a></p>",
        "id": 148722876,
        "sender_full_name": "mw",
        "timestamp": 1543421440
    },
    {
        "content": "<p>it'd be great if we could easily get the data for any given test and/or aggregated over sets of tests...</p>",
        "id": 148722878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421440
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 148722889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421458
    },
    {
        "content": "<p>I need to run soon. Is there anything else we should talk about?</p>",
        "id": 148723078,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543421633
    },
    {
        "content": "<p>I'll post thoughts about the list of categories within the next hour</p>",
        "id": 148723148,
        "sender_full_name": "mw",
        "timestamp": 1543421674
    },
    {
        "content": "<p>other than that, I think we all have something to do for now, right?</p>",
        "id": 148723274,
        "sender_full_name": "mw",
        "timestamp": 1543421806
    },
    {
        "content": "<p>My secret ambition is that y'all teach the compiler to teach me (and other users) how to \"make go fast\"</p>",
        "id": 148724640,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543422973
    },
    {
        "content": "<p>Additional categories might be<br>\n- constant evaluation<br>\n- type collection (i.e. lowering from HIR to Ty)</p>",
        "id": 148724730,
        "sender_full_name": "mw",
        "timestamp": 1543423067
    },
    {
        "content": "<p>\"type collection\" (which could use a better name) would include the following:<br>\n        [] fn type_of: TypeOfItem(DefId) -&gt; Ty&lt;'tcx&gt;,<br>\n        [] fn generics_of: GenericsOfItem(DefId) -&gt; &amp;'tcx ty::Generics,<br>\n        [] fn predicates_of: PredicatesOfItem(DefId) -&gt; Lrc&lt;ty::GenericPredicates&lt;'tcx&gt;&gt;,<br>\n        [] fn predicates_defined_on: PredicatesDefinedOnItem(DefId)<br>\n        [] fn explicit_predicates_of: ExplicitPredicatesOfItem(DefId)<br>\n        [] fn inferred_outlives_of: InferredOutlivesOf(DefId) -&gt; Lrc&lt;Vec&lt;ty::Predicate&lt;'tcx&gt;&gt;&gt;,<br>\n        [] fn super_predicates_of: SuperPredicatesOfItem(DefId) -&gt; Lrc&lt;ty::GenericPredicates&lt;'tcx&gt;&gt;,<br>\n        [] fn type_param_predicates: type_param_predicates((DefId, DefId))<br>\n        [] fn trait_def: TraitDefOfItem(DefId) -&gt; &amp;'tcx ty::TraitDef,<br>\n        [] fn adt_def: Adt<br>\n        [] fn variances_of: ItemVariances(DefId) -&gt; Lrc&lt;Vec&lt;ty::Variance&gt;&gt;,</p>",
        "id": 148724839,
        "sender_full_name": "mw",
        "timestamp": 1543423157
    },
    {
        "content": "<p>Yes, I'm working on the self profile feature -- I ran into a few blocks due to rustc not producing appropriate output (invalid JSON) but I believe they've all been fixed, but I ran out of time last week to work on it because of that</p>",
        "id": 148745046,
        "sender_full_name": "simulacrum",
        "timestamp": 1543440479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> question â€”Â for the serde-* stuff on prof, do we have any scenario that tests \"code using serde\"?</p>",
        "id": 148880894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543604087
    },
    {
        "content": "<p>I think cargo does, for example</p>",
        "id": 148880904,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604103
    },
    {
        "content": "<p>ok but not one named \"serde\" :)</p>",
        "id": 148881280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543604430
    },
    {
        "content": "<p>(and not a \"canonical\" one)</p>",
        "id": 148881283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543604435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Is that what you were referring to?</p>",
        "id": 148881412,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604564
    },
    {
        "content": "<p>Oh, you mean other proc macros?</p>",
        "id": 148881413,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604564
    },
    {
        "content": "<p>Maybe the servo crates? They have proc macros of their own</p>",
        "id": 148881414,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604564
    },
    {
        "content": "<p><a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> uses diesel, I believe</p>",
        "id": 148881415,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604564
    },
    {
        "content": "<p>then.. no, I don't think so</p>",
        "id": 148881416,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604564
    },
    {
        "content": "<p>uh Zulip is displaying my messages way out of order -- I think my wifi is being quite flaky right now -- but I would say that servo is the most non-canonical example of proc macro use, but it's also a lot so isn't the best example</p>",
        "id": 148881486,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604627
    },
    {
        "content": "<p>I'd be happy to add another benchmark if you'd like</p>",
        "id": 148881536,
        "sender_full_name": "simulacrum",
        "timestamp": 1543604645
    },
    {
        "content": "<p>ok not sure 100% what I want tbh :)</p>",
        "id": 148881995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543605055
    },
    {
        "content": "<p>apparently I can't build the script crate without having installed X11</p>",
        "id": 148882010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543605067
    },
    {
        "content": "<p>which.. I guess I can do :P</p>",
        "id": 148882014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543605071
    },
    {
        "content": "<p>so far, I've found trait solving seems to occupy relatively little (0-5%) of the time in the crates I've looked at (serde, style)</p>",
        "id": 148882730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543605806
    },
    {
        "content": "<p>it's lower than I expected, really</p>",
        "id": 148882734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543605813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if I'm running locally ...</p>",
        "id": 148883604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606620
    },
    {
        "content": "<p>hmm</p>",
        "id": 148883620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606631
    },
    {
        "content": "<p>I geuss there are tools to \"run the harness\"</p>",
        "id": 148883622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606638
    },
    {
        "content": "<p>I should really use those instead of doing everything manually :)</p>",
        "id": 148883630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606645
    },
    {
        "content": "<p>sorry, that wasn't a question</p>",
        "id": 148883636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606650
    },
    {
        "content": "<p>perhaps an actual question is:</p>",
        "id": 148883642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606653
    },
    {
        "content": "<p>I can use <code>perf record</code> on the harness itsel</p>",
        "id": 148883654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606660
    },
    {
        "content": "<p>it'll have some noise, but I guess the vast majority of time is running rustc so it's not that interesting</p>",
        "id": 148883663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606671
    },
    {
        "content": "<p>is there some way though to introduce a per-test-scenario use of <code>perf</code>?</p>",
        "id": 148883710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606686
    },
    {
        "content": "<p>(not on the server, just locally)</p>",
        "id": 148883711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606691
    },
    {
        "content": "<p>you mean profiling using rustc-perf ? like <a href=\"https://github.com/rust-lang-nursery/rustc-perf/tree/master/collector#profiling\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf/tree/master/collector#profiling\">this</a> ?</p>",
        "id": 148883794,
        "sender_full_name": "lqd",
        "timestamp": 1543606801
    },
    {
        "content": "<p>lol um yes</p>",
        "id": 148883959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606941
    },
    {
        "content": "<p>I sort of remember those docs now</p>",
        "id": 148883964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606951
    },
    {
        "content": "<p>anyway right now I'm just trying to get that stuff to build</p>",
        "id": 148883971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606961
    },
    {
        "content": "<p>I recently reinstalled my OS and don't have a lot of base packages it seems</p>",
        "id": 148883973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606969
    },
    {
        "content": "<p>e.g., openssl-dev...</p>",
        "id": 148883975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543606972
    },
    {
        "content": "<p>right now I just get </p>\n<div class=\"codehilite\"><pre><span></span>error: failed to run custom build command for `openssl v0.9.24`\nprocess didn&#39;t exit successfully: `/home/nmatsakis/versioned/rustc-perf/target/release/build/openssl-7743ee6a3ccb90da/build-script-build` (exit code: 101)\n--- stderr\nthread &#39;main&#39; panicked at &#39;Unable to detect OpenSSL version&#39;, /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-0.9.24/build.rs:16:14\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\nwarning: build failed, waiting for other jobs to finish...\n</pre></div>\n\n\n<p>but I think I have everything installed I'm supposed to have :/</p>",
        "id": 148884548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543607506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> out of curiosity, what does <code>openssl version</code> say?</p>",
        "id": 148884667,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1543607609
    },
    {
        "content": "<p>openssl 0.9.24 is an old release of the crate, and i don't think it supports the latest openssl</p>",
        "id": 148884731,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1543607645
    },
    {
        "content": "<p>(i've had problems with it when arch moved from openssl 1.0 to 1.1)</p>",
        "id": 148884743,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1543607666
    },
    {
        "content": "<p>yeah looks like openssl 1.0.1+ requires rust-openssl 0.10</p>",
        "id": 148884869,
        "sender_full_name": "lqd",
        "timestamp": 1543607766
    },
    {
        "content": "<p>ah</p>",
        "id": 148885158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133692\">@QuietMisdreavus</span> I get </p>\n<div class=\"codehilite\"><pre><span></span>OpenSSL 1.1.1 FIPS  11 Sep 2018\n</pre></div>",
        "id": 148885170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608040
    },
    {
        "content": "<p>I wonder where that dependency comes from</p>",
        "id": 148885172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608045
    },
    {
        "content": "<p>(I filed <a href=\"https://github.com/sfackler/rust-openssl/issues/1024\" target=\"_blank\" title=\"https://github.com/sfackler/rust-openssl/issues/1024\">https://github.com/sfackler/rust-openssl/issues/1024</a>, as an aside)</p>",
        "id": 148885179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608054
    },
    {
        "content": "<p><a href=\"https://github.com/sfackler/rust-openssl/issues/987#issuecomment-419246104\" target=\"_blank\" title=\"https://github.com/sfackler/rust-openssl/issues/987#issuecomment-419246104\">https://github.com/sfackler/rust-openssl/issues/987#issuecomment-419246104</a></p>",
        "id": 148885216,
        "sender_full_name": "lqd",
        "timestamp": 1543608104
    },
    {
        "content": "<p>yup, too new, i bet</p>",
        "id": 148885221,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1543608109
    },
    {
        "content": "<p>grr</p>",
        "id": 148885287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608134
    },
    {
        "content": "<p>there's about a bajillion things that depend on openssl 0.9</p>",
        "id": 148885344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608211
    },
    {
        "content": "<p>according to <code>cargo tree</code> anyway :)</p>",
        "id": 148885423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608261
    },
    {
        "content": "<p>maybe there's a way to install an older version of openssl...</p>",
        "id": 148885531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543608391
    },
    {
        "content": "<p>gah.  I can't  get this to build at all</p>",
        "id": 148888735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543611385
    },
    {
        "content": "<p>/me throws up hands in frustration</p>",
        "id": 148888742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543611391
    },
    {
        "content": "<p>Iâ€™ve noticed that compiler always gets into some stage that is not parallelized at all multiple times within a compilation</p>",
        "id": 150685654,
        "sender_full_name": "nagisa",
        "timestamp": 1543674895
    },
    {
        "content": "<p>that is, it stays at 100% CPU for a while, then jumps to somewhere near 1600, then back to 100, then to 1600 while it is codegenning and finally falls of once there are not enough codegen units to saturate the cores</p>",
        "id": 150685669,
        "sender_full_name": "nagisa",
        "timestamp": 1543674952
    },
    {
        "content": "<p>we might win something if we made those sequential parts more parallel <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 150685712,
        "sender_full_name": "nagisa",
        "timestamp": 1543674968
    },
    {
        "content": "<p>which reminds me, this <code>-Zself-profile</code> output (since it does not <em>yet</em> output a full trace) lacks distinction between <em>user</em> time and <em>cpu</em> time, there might be some value in making that distinction and displaying it somehow.</p>",
        "id": 150685743,
        "sender_full_name": "nagisa",
        "timestamp": 1543675072
    },
    {
        "content": "<p>I've found that around 80 codegen units is ideal, with parallel queries =P</p>",
        "id": 150686188,
        "sender_full_name": "Zoxc",
        "timestamp": 1543675971
    },
    {
        "content": "<p>Can we get a beta build with parallel queries enabled? So I can build rustc using it</p>",
        "id": 150686310,
        "sender_full_name": "Zoxc",
        "timestamp": 1543676271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> You can always build it yourself and specify it in <code>rustc=</code> in config.toml</p>",
        "id": 150686428,
        "sender_full_name": "simulacrum",
        "timestamp": 1543676433
    },
    {
        "content": "<p>I don't think it'll be easy to get a proper beta build though (since queries are probably not stable enough for wide distribution)</p>",
        "id": 150686430,
        "sender_full_name": "simulacrum",
        "timestamp": 1543676460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Well I want something prebuild so I could use it just by <code>./x.py -p check</code> or something like that. Doesn't have to be something proper</p>",
        "id": 150686876,
        "sender_full_name": "Zoxc",
        "timestamp": 1543677460
    },
    {
        "content": "<p>I don't think we publish artifacts right now -- you could possibly put up a PR that enables it by default, run bors try, and use those artifacts...</p>",
        "id": 150686923,
        "sender_full_name": "simulacrum",
        "timestamp": 1543677505
    },
    {
        "content": "<p>(that PR could target beta to have the beta compiler)</p>",
        "id": 150686927,
        "sender_full_name": "simulacrum",
        "timestamp": 1543677521
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> seems like I can build rustc-perf now, thanks!</p>",
        "id": 150842743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926185
    },
    {
        "content": "<p>I'm sure you pinged me on discord, I've got a lot of pending pings there, harder to keep up with those</p>",
        "id": 150842746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543926198
    },
    {
        "content": "<p>ok so <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> â€”</p>\n<p>I managed to gather some usable perf stats from all the benchmarks now. I've created a <a href=\"https://docs.google.com/spreadsheets/d/10lke3DOSZuopYHE2R7iL3EK8v0dSqH5bJ7Z31UYKsOA/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/10lke3DOSZuopYHE2R7iL3EK8v0dSqH5bJ7Z31UYKsOA/edit?usp=sharing\">google spreadsheet</a> mapping out how much time each of the tests spends in trait analysis + type-checking (note that these are two distinct sheets, and that these times are overlapping).</p>",
        "id": 151008652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105359
    },
    {
        "content": "<p>I can also do other slices as we like</p>",
        "id": 151008656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105364
    },
    {
        "content": "<p>this is from a run using the beta compiler :)</p>",
        "id": 151008662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544105369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Is that spreadsheet perhaps very selectively shared? I at least can't access it :)</p>",
        "id": 151010081,
        "sender_full_name": "simulacrum",
        "timestamp": 1544106544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I also cannot access it :)</p>",
        "id": 151011416,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1544107640
    },
    {
        "content": "<p>oops</p>",
        "id": 151012132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108344
    },
    {
        "content": "<p><a href=\"https://docs.google.com/spreadsheets/d/10lke3DOSZuopYHE2R7iL3EK8v0dSqH5bJ7Z31UYKsOA/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/10lke3DOSZuopYHE2R7iL3EK8v0dSqH5bJ7Z31UYKsOA/edit?usp=sharing\">updated link</a></p>",
        "id": 151012185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 151012219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108413
    },
    {
        "content": "<p>I'm not <em>100%</em> confident in those numbers, maybe 90-95% :P</p>",
        "id": 151012233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108435
    },
    {
        "content": "<p>I'm debating about how to slice them better</p>",
        "id": 151012238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108442
    },
    {
        "content": "<p>e.g. I'd like to see them grouped by stuff \"all check things\"</p>",
        "id": 151012258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108458
    },
    {
        "content": "<p>I guess I can do this in google docs if I learn how</p>",
        "id": 151012264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108464
    },
    {
        "content": "<p>or I could edit my script :)</p>",
        "id": 151012269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108467
    },
    {
        "content": "<blockquote>\n<p>I'm not <em>100%</em> confident in those numbers, maybe 90-95% :P</p>\n</blockquote>\n<p>in particular, when I inspect the stack traces I get from <code>perf script -i</code>, they look... correct-ish, but sometimes smaller than I expect</p>",
        "id": 151012308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108514
    },
    {
        "content": "<p>note also that to gather those numbers, I had to disable frame-pointer optimization</p>",
        "id": 151012354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544108526
    },
    {
        "content": "<p>so I was looking back at this list from before:</p>\n<ul>\n<li>parser</li>\n<li>resolution/macro-expansion</li>\n<li>type-checking -- search for <code>librustc_typeck::check</code></li>\n<li>borrow-checking -- search for <code>librustc_borrowck</code> or <code>librustc_mir::borrow_check</code></li>\n<li>MIR optimization</li>\n<li>translation</li>\n<li>LLVM optimization</li>\n</ul>\n<p>need to find good things to search for on the stack to identify each of those categories...</p>",
        "id": 151015496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544110840
    }
]