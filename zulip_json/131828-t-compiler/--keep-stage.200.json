[
    {
        "content": "<p>I want to keep stage0-std but rebuild the stage 1 compiler and standard library. <code>--keep-stage 0</code> used to work for this, but now it won't rebuild the stage 1 compiler even if it changed. What's the story here?</p>",
        "id": 211035304,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600881960
    },
    {
        "content": "<p>The full command I'm using is <code>./x.py build --stage 1 --keep-stage 0 -- library/std</code></p>",
        "id": 211035727,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600882138
    },
    {
        "content": "<p>This should have always not worked</p>",
        "id": 211035848,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882199
    },
    {
        "content": "<p>What should I be using?</p>",
        "id": 211035947,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600882233
    },
    {
        "content": "<p>(I remember it did, but perhaps I'm mistaken: It was a while ago)</p>",
        "id": 211036008,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600882265
    },
    {
        "content": "<p>so I think what you're doing is just not supported, but I guess maybe I'm not entirely clear -- you're changing both std and the compiler, but you want to avoid a full compiler rebuild, right?</p>",
        "id": 211036026,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882279
    },
    {
        "content": "<p>you can comment out/delete these lines <a href=\"https://github.com/Mark-Simulacrum/rust/blob/2fdfda911c10f9ca8a60d2445d0def6e26a5928c/src/bootstrap/compile.rs#L473-L477\">https://github.com/Mark-Simulacrum/rust/blob/2fdfda911c10f9ca8a60d2445d0def6e26a5928c/src/bootstrap/compile.rs#L473-L477</a> in bootstrap to accomplish that</p>",
        "id": 211036106,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882316
    },
    {
        "content": "<p>keep-stage was and remains a hack</p>",
        "id": 211036172,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/--keep-stage.200/near/211036172\">said</a>:</p>\n<blockquote>\n<p>keep-stage was and remains a hack</p>\n</blockquote>\n<p>I hear this all the time, but it mostly works, and saves a ton of time when it does.</p>",
        "id": 211036268,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600882384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/--keep-stage.200/near/211036026\">said</a>:</p>\n<blockquote>\n<p>so I think what you're doing is just not supported, but I guess maybe I'm not entirely clear -- you're changing both std and the compiler, but you want to avoid a full compiler rebuild, right?</p>\n</blockquote>\n<p>This is correct yes.</p>",
        "id": 211036431,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600882450
    },
    {
        "content": "<p>Yeah, the reason I added it is because it's great to have as a power tool</p>",
        "id": 211036468,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882476
    },
    {
        "content": "<p>really what you want is to give bootstrap a small graph</p>",
        "id": 211036486,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882485
    },
    {
        "content": "<p>(well the graph exists, you want to prune edges/vertices from it)</p>",
        "id": 211036535,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882502
    },
    {
        "content": "<p>I suspect the real solution to your particular problem is to make stage0-std less eagerly rebuilt, e.g., we'd version it or something along the lines of the \"beta std for rustc\" proposal</p>",
        "id": 211036632,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882548
    },
    {
        "content": "<p>but it'd be more eagerly versioned, like, anytime you want to use something new from it you just bump a version somewhere</p>",
        "id": 211036719,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882576
    },
    {
        "content": "<p>Does the first compiler that gets build have <code>stage == 0</code> or <code>stage == 1</code>?</p>",
        "id": 211036900,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600882670
    },
    {
        "content": "<p>uhhh</p>",
        "id": 211037514,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> so I am not sure what you mean exactly</p>",
        "id": 211037528,
        "sender_full_name": "simulacrum",
        "timestamp": 1600882974
    },
    {
        "content": "<p>the first librustc that gets compiled ends up as part of stage1/bin/rustc</p>",
        "id": 211037582,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883011
    },
    {
        "content": "<p>does that help?</p>",
        "id": 211037599,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883021
    },
    {
        "content": "<p>Right, so I would expect <code>compiler.stage == 1</code> at the line you linked, which means that <code>if</code> shouldn't be taken for<code>--keep-stage 0</code></p>",
        "id": 211037750,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600883096
    },
    {
        "content": "<p>So I'm skeptical that commenting that section out will help.</p>",
        "id": 211037839,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600883141
    },
    {
        "content": "<p>But maybe <code>compiler</code> is the compiler that's being used, not the one that's being built?</p>",
        "id": 211038005,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600883215
    },
    {
        "content": "<p>no</p>",
        "id": 211038343,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883379
    },
    {
        "content": "<p>yeah</p>",
        "id": 211038353,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883382
    },
    {
        "content": "<p>compiler is what's going to compile it</p>",
        "id": 211038364,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883387
    },
    {
        "content": "<p>that's true... almost everywhere in bootstrap, and is actually a bug in some sense (but not for this case so don't worry about it)</p>",
        "id": 211038433,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883408
    },
    {
        "content": "<p>So I guess I find it a bit surprising that <code>--keep-stage 0</code> keeps the stage 0 standard library <em>and</em> the stage 1 compiler.</p>",
        "id": 211038489,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600883440
    },
    {
        "content": "<p>it keeps everything <em>built by</em> the stage 0 compiler</p>",
        "id": 211038770,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883557
    },
    {
        "content": "<p>i.e., the beta compiler</p>",
        "id": 211038778,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883562
    },
    {
        "content": "<p>(also known as \"stage0 artifacts\")</p>",
        "id": 211038798,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883576
    },
    {
        "content": "<p>I would not be opposed to adding <code>--keep stage0-std</code>  or some similar syntax, which would've been helpful to you in this case.</p>",
        "id": 211038856,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883605
    },
    {
        "content": "<p>or, for easier parsing, just keep-std-stage or so</p>",
        "id": 211038897,
        "sender_full_name": "simulacrum",
        "timestamp": 1600883628
    },
    {
        "content": "<p>Yeah, I'll open a PR at some point. For reference, I'm making some changes to how <code>rustc_const_unstable</code> interacts with <code>unstable</code>, as well as adding some specific feature gates to replace <code>const_fn</code>. I guess the common use-case for <code>--keep-stage</code> is for people just changing the standard library.</p>",
        "id": 211039250,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600883770
    },
    {
        "content": "<p>Although I don't really know why they would want to ignore changes to the compiler in that case.</p>",
        "id": 211039594,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600883918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> the <em>intended</em> use case I'm aware of is \"I built the compiler once, I want to edit std, and I want to compile third-party crates with that edited toolchain\"</p>",
        "id": 211040884,
        "sender_full_name": "simulacrum",
        "timestamp": 1600884442
    },
    {
        "content": "<p>keep-stage 0 facilitates that perfectly</p>",
        "id": 211040900,
        "sender_full_name": "simulacrum",
        "timestamp": 1600884452
    },
    {
        "content": "<p>the other, IMO more questionable, use case is keep-stage 1, where you want to save a std compile after changing the compiler. I've always had std compiles in stage1 be fast enough that I've not worried about it, personally, but people use it.</p>",
        "id": 211041004,
        "sender_full_name": "simulacrum",
        "timestamp": 1600884497
    },
    {
        "content": "<p><code>--keep-std-stage 0</code> would also work for that first use-case I think, and it fits my mental model better, so is obviously correct <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>.</p>",
        "id": 211041108,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600884559
    },
    {
        "content": "<p>Yeah, it's less than a minute on my laptop usually.</p>",
        "id": 211041150,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600884590
    },
    {
        "content": "<p>I'll put something together. I'm doing <code>(compiler.stage + 1)</code> locally, so <code>--keep-stage</code> acts like <code>--keep-stage-std</code>. Thanks for the help.</p>",
        "id": 211041353,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600884673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> oh yeah, it would, good point</p>",
        "id": 211041524,
        "sender_full_name": "simulacrum",
        "timestamp": 1600884766
    },
    {
        "content": "<p>really I'm not actually sure there's any point to keeping the compiler...</p>",
        "id": 211041545,
        "sender_full_name": "simulacrum",
        "timestamp": 1600884777
    },
    {
        "content": "<p>(like if you want that you can move up a stage usually and keep the previous stage std)</p>",
        "id": 211041581,
        "sender_full_name": "simulacrum",
        "timestamp": 1600884794
    },
    {
        "content": "<p>so maybe we should just delete those lines and call it a day</p>",
        "id": 211041601,
        "sender_full_name": "simulacrum",
        "timestamp": 1600884805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/--keep-stage.200/near/211036486\">said</a>:</p>\n<blockquote>\n<p>really what you want is to give bootstrap a small graph</p>\n</blockquote>\n<p><del>don't build master rustc with master libstd</del></p>",
        "id": 211075770,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600905229
    }
]