[
    {
        "content": "<p>I submitted a (tiny) PR, and it's been rejected several times because sections of it don't match <code>rustfmt</code>. That's fine, I want everything to match rustfmt, but in this case it was existing code that I had moved from one file to a different one.</p>\n<p>So I ran <code>cargo fmt</code> over the Rust tree, and it changed a huge number of things. Why is the Rust tree not fmt-clean?</p>\n<p>Also, is there a way to run the same check that the GitHub bot will run, but run it locally before I submit my PR? I don't like submitting a PR that wastes people's time and machine resources, especially over whitespace formatting. But I want to emphasize -- I 100% agree with the reason to have a canonical format, I'm just asking for some help with our PR process relating to it.</p>",
        "id": 216630199,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605282813
    },
    {
        "content": "<p>You should use x.py fmt</p>",
        "id": 216630219,
        "sender_full_name": "simulacrum",
        "timestamp": 1605282822
    },
    {
        "content": "<p>Ahh, so that's the secret sauce. Does that format only edited regions?</p>",
        "id": 216630303,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605282848
    },
    {
        "content": "<p>cargo fmt is probably either formatting things not currently canonicalized (e.g., submodules? or clippy)</p>",
        "id": 216630307,
        "sender_full_name": "simulacrum",
        "timestamp": 1605282850
    },
    {
        "content": "<p>or just not picking up rustfmt.toml for some reason</p>",
        "id": 216630339,
        "sender_full_name": "simulacrum",
        "timestamp": 1605282858
    },
    {
        "content": "<p>No, it'll reformat the whole repository</p>",
        "id": 216630362,
        "sender_full_name": "simulacrum",
        "timestamp": 1605282864
    },
    {
        "content": "<p>well, everything needed</p>",
        "id": 216630377,
        "sender_full_name": "simulacrum",
        "timestamp": 1605282874
    },
    {
        "content": "<p>It's what is run on CI</p>",
        "id": 216630398,
        "sender_full_name": "simulacrum",
        "timestamp": 1605282880
    },
    {
        "content": "<p>You can use the underlying rustfmt binary to format specific files</p>",
        "id": 216630430,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605282892
    },
    {
        "content": "<p><code>cargo fmt</code> will likely either use stable or nightly rustfmt (depending on which version you set as global default), but <code>./x.py fmt</code> uses the version matching the beta compiler.</p>",
        "id": 216630433,
        "sender_full_name": "bjorn3",
        "timestamp": 1605282894
    },
    {
        "content": "<p>Ok, sounds good.</p>",
        "id": 216630476,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605282908
    },
    {
        "content": "<p>I wonder if there's a way to have cargo say something if you don't go through x.py</p>",
        "id": 216630551,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605282942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> actually, no, x.py fmt uses a pinned nightly -- we need unstable features, can't do that with beta rustfmt</p>",
        "id": 216630557,
        "sender_full_name": "simulacrum",
        "timestamp": 1605282946
    },
    {
        "content": "<p>I had an idea for <code>check/build</code> but I don't think <code>fmt</code> runs build scripts</p>",
        "id": 216630591,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605282959
    },
    {
        "content": "<p>I'm in the habit of running formatting directly in VS Code all the time, so it was strange to me that it formatted differently than that the GH bot wanted.</p>",
        "id": 216630787,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605283021
    },
    {
        "content": "<p>Yeah, I doubt we could make it happen without a cargo change, though I think that's not out of the picture</p>",
        "id": 216630802,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20is.20Rust.20not.20rustfmt-clean.3F/near/216630430\">said</a>:</p>\n<blockquote>\n<p>You can use the underlying rustfmt binary to format specific files</p>\n</blockquote>\n<p>(It's located in <code>build/&lt;your-target-triple&gt;/stage0/bin/rustfmt</code>)</p>",
        "id": 216630894,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605283070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> fwiw, I use vim, but it should be relatively easy I imagine to switch vs code to use the correct rustfmt for rust-lang/rust (it should be roughly in build/x86_64-unknown-linux-gnu/stage0/bin/rustfmt,</p>",
        "id": 216630899,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283072
    },
    {
        "content": "<p>honestly the better solution is to use <code>rust-toolchain</code> <a href=\"https://github.com/rust-lang/rust/issues/76419\">https://github.com/rust-lang/rust/issues/76419</a></p>",
        "id": 216630937,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283082
    },
    {
        "content": "<p>I need to get around to adding that</p>",
        "id": 216631003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283097
    },
    {
        "content": "<p>er, but there's different toolchains for rustfmt and like, everything else</p>",
        "id": 216631156,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283166
    },
    {
        "content": "<p>right: <a href=\"https://github.com/rust-lang/rust/issues/76419#issuecomment-700817055\">https://github.com/rust-lang/rust/issues/76419#issuecomment-700817055</a></p>",
        "id": 216631189,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283182
    },
    {
        "content": "<p>oh though actually, that might be a way to force cargo to not work</p>",
        "id": 216631257,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283204
    },
    {
        "content": "<p>could we put a rust-toolchain file that said \"x-py-is-the-thing-you-want\"?</p>",
        "id": 216631312,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283217
    },
    {
        "content": "<p>ooh I really like that</p>",
        "id": 216631325,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283225
    },
    {
        "content": "<p>one sec let me try</p>",
        "id": 216631333,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283227
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ cargo check\nerror: invalid channel name &#39;use-x.py-instead&#39; in &#39;/home/joshua/rustc/rust-toolchain&#39;\nerror: caused by: invalid toolchain name: &#39;use-x.py-instead&#39;\n</code></pre></div>",
        "id": 216631381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283246
    },
    {
        "content": "<p>I love it</p>",
        "id": 216631391,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283248
    },
    {
        "content": "<p>hm it did not work for me on a cargo fmt attempt</p>",
        "id": 216631444,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283268
    },
    {
        "content": "<p>it works for me - do you not have rust installed through rustup maybe?</p>",
        "id": 216631501,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283289
    },
    {
        "content": "<p>I do...</p>",
        "id": 216631519,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283296
    },
    {
        "content": "<p>hm, maybe I have an override set?</p>",
        "id": 216631582,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283320
    },
    {
        "content": "<p>aha, yep, that was it</p>",
        "id": 216631694,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283347
    },
    {
        "content": "<p>lol, this makes bootstrap very confused though</p>\n<div class=\"codehilite\"><pre><span></span><code>$ xpy check\nUpdating only changed submodules\nSubmodules updated in 0.01 seconds\nerror: invalid channel name &#39;use-x.py-instead&#39; in &#39;/home/joshua/rustc/rust-toolchain&#39;\nerror: caused by: invalid toolchain name: &#39;use-x.py-instead&#39;\nerror: invalid channel name &#39;use-x.py-instead&#39; in &#39;/home/joshua/rustc/rust-toolchain&#39;\nerror: caused by: invalid toolchain name: &#39;use-x.py-instead&#39;\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\nChecking std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n</code></pre></div>",
        "id": 216632092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283514
    },
    {
        "content": "<p>I think this is because I added <code>rustc --version</code> checking to determine teh host platform?</p>",
        "id": 216632133,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283530
    },
    {
        "content": "<p>I could run that in <code>/</code> instead</p>",
        "id": 216632140,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283533
    },
    {
        "content": "<p>Perhaps, yeah</p>",
        "id": 216632839,
        "sender_full_name": "simulacrum",
        "timestamp": 1605283794
    },
    {
        "content": "<p>yup, this fixed it:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/bootstrap.py b/src/bootstrap/bootstrap.py</span>\n<span class=\"gh\">index 54d0a23dec5..56a6660fe93 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/bootstrap.py</span>\n<span class=\"gi\">+++ b/src/bootstrap/bootstrap.py</span>\n<span class=\"gu\">@@ -193,7 +193,10 @@ def default_build_triple(verbose):</span>\n     # install, use their preference. This fixes most issues with Windows builds\n     # being detected as GNU instead of MSVC.\n     try:\n<span class=\"gd\">-        version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"])</span>\n<span class=\"gi\">+        # https://stackoverflow.com/questions/48333999</span>\n<span class=\"gi\">+        fs_root = os.path.abspath('.').split(os.path.sep)[0]+os.path.sep</span>\n<span class=\"gi\">+        version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],</span>\n<span class=\"gi\">+                cwd=fs_root)</span>\n         host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n         triple = host.split(\"host: \")[1]\n         if verbose:\n</code></pre></div>",
        "id": 216633339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283907
    },
    {
        "content": "<p>making a PR with that now</p>",
        "id": 216633349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605283911
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79021\">https://github.com/rust-lang/rust/pull/79021</a></p>",
        "id": 216635244,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605284746
    }
]