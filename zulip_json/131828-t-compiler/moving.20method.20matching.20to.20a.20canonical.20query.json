[
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 156887246,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452427
    },
    {
        "content": "<p>so about moving method matching to a canonical query</p>",
        "id": 156887257,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452452
    },
    {
        "content": "<p>I think the main problem with doing it \"directly\" is that method matching has a lot of inputs</p>",
        "id": 156887267,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452465
    },
    {
        "content": "<p>things like the privacy of methods</p>",
        "id": 156887275,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452473
    },
    {
        "content": "<p>but it might be possible to do it \"indirectly\"</p>",
        "id": 156887284,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452483
    },
    {
        "content": "<p>where there's a query that returns the set of matching methods</p>",
        "id": 156887292,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452499
    },
    {
        "content": "<p>and their priorities</p>",
        "id": 156887298,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452518
    },
    {
        "content": "<blockquote>\n<p>I think the main problem with doing it \"directly\" is that method matching has a lot of inputs</p>\n</blockquote>\n<p>(Do you just mean there'd be a lot of data in the query key?)</p>",
        "id": 156887338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452525
    },
    {
        "content": "<p>the problem is that privacy is based on a NodeId</p>",
        "id": 156887351,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452542
    },
    {
        "content": "<p>so if we do it directly, we really won't be having any deduplication</p>",
        "id": 156887358,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452555
    },
    {
        "content": "<p>well, only within a module</p>",
        "id": 156887368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452565
    },
    {
        "content": "<p>consider hygiene</p>",
        "id": 156887375,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452581
    },
    {
        "content": "<p>(i.e., there is presumably some \"canonicalization\" we can do to the node-id)</p>",
        "id": 156887376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452581
    },
    {
        "content": "<p>it makes this sort of thing so much more fun</p>",
        "id": 156887387,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452589
    },
    {
        "content": "<p>I'm not really convinced anymore that \"type-related\" lookups should work via hygiene</p>",
        "id": 156887394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452601
    },
    {
        "content": "<p>but that's a separate matter</p>",
        "id": 156887396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452604
    },
    {
        "content": "<p>sure me too</p>",
        "id": 156887399,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452608
    },
    {
        "content": "<p>but that's what @jseyfried implemented back in the day</p>",
        "id": 156887404,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452616
    },
    {
        "content": "<p><em>regardless</em> I agree that your idea is good</p>",
        "id": 156887405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452617
    },
    {
        "content": "<p>if we can make it work</p>",
        "id": 156887410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452623
    },
    {
        "content": "<p>which one, the PR</p>",
        "id": 156887412,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452624
    },
    {
        "content": "<p>no, I haven't read the PR yet</p>",
        "id": 156887418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452631
    },
    {
        "content": "<p>or having a \"table ignoring privacy\"</p>",
        "id": 156887421,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452634
    },
    {
        "content": "<p>I mean that if we could do method lookups that can ignore privacy and return enough results to \"customize\" to each site</p>",
        "id": 156887468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452644
    },
    {
        "content": "<p>that seems like it could result in a lot more re-use</p>",
        "id": 156887475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452653
    },
    {
        "content": "<p>anyway I should read your PR</p>",
        "id": 156887488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548452670
    },
    {
        "content": "<p>actually, it's [WIP] because I might be rewriting it</p>",
        "id": 156887506,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452692
    },
    {
        "content": "<p>but I wanted to see whether my approach to composing canonicalization is OK</p>",
        "id": 156887662,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452833
    },
    {
        "content": "<p>i.e. <a href=\"https://github.com/rust-lang/rust/pull/57885/files#diff-dd3531c645441fc4588d997838e391f5R813\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57885/files#diff-dd3531c645441fc4588d997838e391f5R813\">https://github.com/rust-lang/rust/pull/57885/files#diff-dd3531c645441fc4588d997838e391f5R813</a></p>",
        "id": 156887668,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548452843
    },
    {
        "content": "<p>and I think I'm saved by ObjectCandidate being weird</p>",
        "id": 156888226,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453458
    },
    {
        "content": "<p>I'm not sure I quite get what is being composed</p>",
        "id": 156888326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548453539
    },
    {
        "content": "<p>you instantiate the canonical self-ty with variables</p>",
        "id": 156888336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548453547
    },
    {
        "content": "<p>then invoke <code>canonicalize_response</code> on the new struct which seems to be largely built from the result of that, right?</p>",
        "id": 156888358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548453574
    },
    {
        "content": "<p>I guess I don't see anything that stands out as wrong to me</p>",
        "id": 156888442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548453619
    },
    {
        "content": "<p>but I feel like maybe I'm missing something because I'm not quite sure what you are concerned about</p>",
        "id": 156888455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548453633
    },
    {
        "content": "<p>yea</p>",
        "id": 156888510,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453689
    },
    {
        "content": "<p>So I start with a Canonical&lt;QueryResult&lt;T&gt;&gt;</p>",
        "id": 156888528,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453706
    },
    {
        "content": "<p>and I first open the canonical</p>",
        "id": 156888532,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453711
    },
    {
        "content": "<p>then I \"map\" the QueryResult</p>",
        "id": 156888536,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453715
    },
    {
        "content": "<p>then I canonicalize it again</p>",
        "id": 156888540,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453719
    },
    {
        "content": "<p>the \"weird\" thing here is that I'm splitting the Canonical &amp; the QueryResult</p>",
        "id": 156888604,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453748
    },
    {
        "content": "<p>where most methods treat Canonical&lt;QueryResult&lt;-&gt;&gt; as a single unit</p>",
        "id": 156888616,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453763
    },
    {
        "content": "<p>but I suppose that's just the thing that is OK</p>",
        "id": 156888629,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453775
    },
    {
        "content": "<p>and now I'm trying to investigate whether it's possible to have an ObjectCandidate be sensitive to just the def-id of the trait object</p>",
        "id": 156888666,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453820
    },
    {
        "content": "<p>while ignoring its substs</p>",
        "id": 156888671,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453823
    },
    {
        "content": "<p>and then I'll have to do none of this canonicalization business</p>",
        "id": 156888676,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453831
    },
    {
        "content": "<p>but this seems subtle</p>",
        "id": 156888725,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453844
    },
    {
        "content": "<p>and I'm trying to work it out</p>",
        "id": 156888732,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548453849
    },
    {
        "content": "<p>ok. I don't see an obvious problem but I will try to give it a bit more concentrated time</p>",
        "id": 156888960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548454047
    },
    {
        "content": "<p>let me add something to my calendar :)</p>",
        "id": 156888963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548454050
    },
    {
        "content": "<p>I'd like to read it more closely anyway</p>",
        "id": 156888971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548454057
    },
    {
        "content": "<p>you mean my PR?</p>",
        "id": 156888992,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548454080
    },
    {
        "content": "<p>Yes. I won't really have time to look closely until Monday anyway</p>",
        "id": 156889052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548454094
    },
    {
        "content": "<p>I think there's some subtle problem with <code>arbitrary_self_types</code> that could cause the simpler approach to ICE</p>",
        "id": 156889055,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548454098
    },
    {
        "content": "<p>ok</p>",
        "id": 156889059,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548454099
    },
    {
        "content": "<p>which means we need to do this approach instead of the simpler one</p>",
        "id": 156889090,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548454131
    },
    {
        "content": "<p>wait, in the universes world, does <code>dyn for&lt;'a&gt; Foo&lt;'a, Output=&amp;'a $0&gt;</code> unify with <code>dyn Foo&lt;'$0, Output=$1&gt;</code>?</p>",
        "id": 157061017,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548712433
    },
    {
        "content": "<p>I mean, in a probe context? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 157061025,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548712442
    },
    {
        "content": "<p>and now I found a stupid simple way of cutting away that gordian know</p>",
        "id": 157062305,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548713682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> presently, they do unify but should generate an error later in region solving. I think that for trait solving at least we may have to get a bit smarter, though.</p>",
        "id": 157120964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782473
    },
    {
        "content": "<p>that's what I thought, but it turns out I don't need that</p>",
        "id": 157135024,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1548793561
    }
]