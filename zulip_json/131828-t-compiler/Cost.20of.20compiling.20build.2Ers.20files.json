[
    {
        "content": "<p>Compiling build scripts seems to take a longer time than I would expect, given that they're often tiny programs.</p>",
        "id": 273431006,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004037
    },
    {
        "content": "<p>E.g. I just looked at <code>syn</code>'s <a href=\"https://github.com/dtolnay/syn/blob/master/build.rs\">build script</a>. Compiling it takes 0.4s and 676M instructions on my machine, which seems high for such a small program.</p>",
        "id": 273431028,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004084
    },
    {
        "content": "<p>The rustc invocation is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc --crate-name build_script_build --edition=2018 build.rs --error-format=json \\\n   --json=diagnostic-rendered-ansi,artifacts --crate-type bin --emit=dep-info,link \\\n  -C embed-bitcode=no -C debug-assertions=off --cfg &#39;feature=&quot;clone-impls&quot;&#39; \\\n  --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;derive&quot;&#39; --cfg &#39;feature=&quot;parsing&quot;&#39; \\\n  --cfg &#39;feature=&quot;printing&quot;&#39; --cfg &#39;feature=&quot;proc-macro&quot;&#39; --cfg &#39;feature=&quot;quote&quot;&#39; \\\n  -C metadata=55d66fe66df86733 -C extra-filename=-55d66fe66df86733 \\\n  --out-dir /home/njn/dev/syn-1.0.86/target/release/build/syn-55d66fe66df86733 \\\n  -L dependency=/home/njn/dev/syn-1.0.86/target/release/deps\n</code></pre></div>",
        "id": 273431035,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004107
    },
    {
        "content": "<p>The Cachegrind profile is dominated by LLVM backend stuff.</p>",
        "id": 273431081,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004141
    },
    {
        "content": "<p><code>-Ztime-passes</code> says this (I've excluded all passes that took <code>0.000s</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>time:   0.001; rss:   58MB -&gt;   60MB (   +2MB)  parse_crate\ntime:   0.010; rss:   63MB -&gt;   82MB (  +19MB)  expand_crate\ntime:   0.010; rss:   63MB -&gt;   82MB (  +19MB)  macro_expand_crate\ntime:   0.002; rss:   82MB -&gt;   88MB (   +6MB)  late_resolve_crate\ntime:   0.003; rss:   82MB -&gt;   88MB (   +6MB)  resolve_crate\ntime:   0.014; rss:   60MB -&gt;   88MB (  +28MB)  configure_and_expand\ntime:   0.001; rss:   88MB -&gt;   88MB (   +0MB)  hir_lowering\ntime:   0.001; rss:   93MB -&gt;   93MB (   +0MB)  misc_checking_1\ntime:   0.001; rss:   97MB -&gt;  101MB (   +4MB)  wf_checking\ntime:   0.001; rss:  101MB -&gt;  105MB (   +4MB)  item_types_checking\ntime:   0.008; rss:  105MB -&gt;  112MB (   +7MB)  item_bodies_checking\ntime:   0.010; rss:   93MB -&gt;  112MB (  +19MB)  type_check_crate\ntime:   0.004; rss:  114MB -&gt;  119MB (   +6MB)  MIR_borrow_checking\ntime:   0.001; rss:  119MB -&gt;  119MB (   +0MB)  misc_checking_3\ntime:   0.021; rss:  119MB -&gt;  141MB (  +22MB)  monomorphization_collector_graph_walk\ntime:   0.003; rss:  141MB -&gt;  142MB (   +1MB)  partition_and_assert_distinct_symbols\ntime:   0.027; rss:  142MB -&gt;  164MB (  +22MB)  codegen_to_LLVM_IR\ntime:   0.053; rss:  119MB -&gt;  164MB (  +44MB)  codegen_crate\ntime:   0.002; rss:  163MB -&gt;  120MB (  -43MB)  free_global_ctxt\ntime:   0.049; rss:  146MB -&gt;  116MB (  -30MB)  LLVM_passes(crate)\ntime:   0.021; rss:  119MB -&gt;  115MB (   -4MB)  finish_ongoing_codegen\ntime:   0.155; rss:  115MB -&gt;  116MB (   +1MB)  run_linker\ntime:   0.001; rss:  116MB -&gt;  116MB (   +0MB)  link_binary_remove_temps\ntime:   0.157; rss:  115MB -&gt;  116MB (   +1MB)  link_binary\ntime:   0.157; rss:  115MB -&gt;  116MB (   +1MB)  link_crate\ntime:   0.179; rss:  119MB -&gt;  116MB (   -3MB)  link\ntime:   0.276; rss:   47MB -&gt;  101MB (  +54MB)  total\n</code></pre></div>",
        "id": 273431082,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004144
    },
    {
        "content": "<p>If I add <code>-C link-arg=-fuse-ld=lld</code> the last part changes to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>time:   0.074; rss:  115MB -&gt;  117MB (   +1MB)  run_linker\ntime:   0.001; rss:  117MB -&gt;  117MB (   +0MB)  link_binary_remove_temps\ntime:   0.076; rss:  115MB -&gt;  117MB (   +1MB)  link_binary\ntime:   0.076; rss:  115MB -&gt;  117MB (   +1MB)  link_crate\ntime:   0.098; rss:  123MB -&gt;  117MB (   -6MB)  link\ntime:   0.189; rss:   47MB -&gt;  102MB (  +54MB)  total\n</code></pre></div>",
        "id": 273431090,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004164
    },
    {
        "content": "<p>So linking seems to be much of it. Interesting that <code>link_binary</code>/<code>link-crate</code>/<code>link</code> are all high. I don't know which one of these actually counts the time to invoke the linker? Given that their sum is greater than the total, perhaps they overlap</p>",
        "id": 273431096,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004181
    },
    {
        "content": "<p>Also, the amount of data written to disk is quite high. In <code>target/release/build/syn-55d66fe66df86733/</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>-rwxrwxr-x 1 njn njn 3772408 Feb 28 09:47 build-script-build*\n-rwxrwxr-x 1 njn njn 4829040 Feb 28 10:07 build_script_build-55d66fe66df86733*\n-rw-rw-r-- 1 njn njn     240 Feb 28 10:07 build_script_build-55d66fe66df86733.d\n</code></pre></div>",
        "id": 273431114,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004221
    },
    {
        "content": "<p>8.5 MB!</p>",
        "id": 273431117,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004227
    },
    {
        "content": "<p>If I run <code>strip</code> on the binary files I get a ~10x reduction in their size</p>\n<div class=\"codehilite\"><pre><span></span><code>-rwxrwxr-x 1 njn njn 403856 Feb 28 10:15 build-script-build*\n-rwxrwxr-x 1 njn njn 427176 Feb 28 10:15 build_script_build-55d66fe66df86733*\n-rw-rw-r-- 1 njn njn    240 Feb 28 10:07 build_script_build-55d66fe66df86733.d\n</code></pre></div>",
        "id": 273431161,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004248
    },
    {
        "content": "<p>Interesting that there is no <code>-C opt-level</code> in the command, probably a good thing to not compile build scripts at high optimization levels</p>",
        "id": 273431178,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273431178\">said</a>:</p>\n<blockquote>\n<p>Interesting that there is no <code>-C opt-level</code> in the command, probably a good thing to not compile build scripts at high optimization levels</p>\n</blockquote>\n<p>That was a change in Cargo a few versions ago, to default to not optimizing build-only dependencies.</p>",
        "id": 273431237,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646004369
    },
    {
        "content": "<p>Is there some \"don't put debuginfo into build scripts\" thing we can do?</p>",
        "id": 273431248,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004399
    },
    {
        "content": "<p>Quite possibly! We have native strip support in rustc now.</p>",
        "id": 273431270,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646004447
    },
    {
        "content": "<p>Can you time the rustc invocation for the build script, and then time it again with <code>-C strip=symbols</code> added?</p>",
        "id": 273431315,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646004485
    },
    {
        "content": "<p><code>build_script_build-55d66fe66df86733</code> and <code>build-script-build</code> should be hard-links on linux.</p>",
        "id": 273431322,
        "sender_full_name": "Eric Huss",
        "timestamp": 1646004502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> they were different sizes before (as shown above), but I just cleaned and re-built and now they're identical O_o</p>",
        "id": 273431538,
        "sender_full_name": "nnethercote",
        "timestamp": 1646004706
    },
    {
        "content": "<p>Oh, maybe because I was mucking around with some <code>cargo</code> invocations and some direct <code>rustc</code> invocations</p>",
        "id": 273431763,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005036
    },
    {
        "content": "<p>question: Are we sure it's not wiser to pass <code>-Copt-level=1</code> to build-only deps? The time to run a few passes might genuinely be shorter than the time to emit large swathes of data.</p>",
        "id": 273431769,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> there's enough variance that I can't easily tell if <code>-C strip=symbols</code> is an improvement; possibly a slight one. It certainly results in less disk space being used.</p>",
        "id": 273431782,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005079
    },
    {
        "content": "<p>Would you expect it to be faster? Is stripping pure post-processing? in that case I'd expect it to be slower</p>",
        "id": 273431830,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005095
    },
    {
        "content": "<p>I believe it's pure post-processing, it might be in-memory though.</p>",
        "id": 273431852,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I just tried <code>C opt-level=1</code>. For this build script it's clearly much worse, almost 2x slwoer</p>",
        "id": 273431859,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005140
    },
    {
        "content": "<p>Ahh.</p>",
        "id": 273431861,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005145
    },
    {
        "content": "<p>Shame.</p>",
        "id": 273431863,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> size of the disk artifact is very similar</p>",
        "id": 273431876,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005178
    },
    {
        "content": "<p>oh. hm. does the artifact shrink with <code>-Copt-level=2</code>? or <code>s</code>?</p>",
        "id": 273431930,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005218
    },
    {
        "content": "<blockquote>\n<p>time:   0.002; rss:  163MB -&gt;  120MB (  -43MB)  free_global_ctxt<br>\ntime:   0.049; rss:  146MB -&gt;  116MB (  -30MB)  LLVM_passes(crate)</p>\n</blockquote>\n<p>hmm, looks like these are the only steps that drop disk space.</p>",
        "id": 273431967,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> those MB values are RSS (memory)</p>",
        "id": 273432034,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005392
    },
    {
        "content": "<p>ohhh.</p>",
        "id": 273432041,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005402
    },
    {
        "content": "<p><code>-Copt-level=2</code> and <code>-Copt-level=s</code> don't help with the disk size either (only tiny changes)</p>",
        "id": 273432048,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005420
    },
    {
        "content": "<p>tsk.</p>",
        "id": 273432051,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005431
    },
    {
        "content": "<p>I wonder if <code>-C strip=symbols</code> (or <code>-C strip=debuginfo</code>, which is almost as small in this case) would be a reasonable default for build scripts</p>",
        "id": 273432173,
        "sender_full_name": "nnethercote",
        "timestamp": 1646005574
    },
    {
        "content": "<p>Probably.</p>",
        "id": 273432401,
        "sender_full_name": "Jubilee",
        "timestamp": 1646005837
    },
    {
        "content": "<p>a lot of debuginfo seems unexpected since <code>-Cdebuginfo=</code> should default to 0 here ?</p>",
        "id": 273433083,
        "sender_full_name": "lqd",
        "timestamp": 1646006522
    },
    {
        "content": "<p>Good point... I tried adding <code>-Cdebuginfo=0</code> explicitly, didn't change things. But <code>-Cdebuginfo=1</code> makes it slightly bigger, and <code>-Cdebuginfo=2</code> a bit bigger again</p>",
        "id": 273433802,
        "sender_full_name": "nnethercote",
        "timestamp": 1646007496
    },
    {
        "content": "<p>Also, not sure why <code>--emit=dep-info</code> is necessary, though it's tiny in this case</p>",
        "id": 273433971,
        "sender_full_name": "nnethercote",
        "timestamp": 1646007779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273433083\">said</a>:</p>\n<blockquote>\n<p>a lot of debuginfo seems unexpected since <code>-Cdebuginfo=</code> should default to 0 here ?</p>\n</blockquote>\n<p>It's likely almost all from the standard library.</p>",
        "id": 273434377,
        "sender_full_name": "Eric Huss",
        "timestamp": 1646008227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273433971\">said</a>:</p>\n<blockquote>\n<p>Also, not sure why <code>--emit=dep-info</code> is necessary, though it's tiny in this case</p>\n</blockquote>\n<p>It is used to know when the build script needs to be rebuilt.  For example, this can happen if the build script depends on an environment variable.</p>",
        "id": 273434388,
        "sender_full_name": "Eric Huss",
        "timestamp": 1646008268
    },
    {
        "content": "<p>checking this was why I was comparing this to a hello world, thank you</p>",
        "id": 273434400,
        "sender_full_name": "lqd",
        "timestamp": 1646008300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273434377\">said</a>:</p>\n<blockquote>\n<p>It's likely almost all from the standard library.</p>\n</blockquote>\n<p>Mmm, yes, the <code>.debug_pubnames</code> section is full of <code>std</code> stuff</p>",
        "id": 273434514,
        "sender_full_name": "nnethercote",
        "timestamp": 1646008467
    },
    {
        "content": "<p>So <code>std</code> debuginfo is always put into a binary?</p>",
        "id": 273434531,
        "sender_full_name": "nnethercote",
        "timestamp": 1646008549
    },
    {
        "content": "<p>(at least <code>-C strip=debuginfo</code> looks a bit faster locally)</p>",
        "id": 273434583,
        "sender_full_name": "lqd",
        "timestamp": 1646008603
    },
    {
        "content": "<p>Could we link builds scripts dynamically, at least to libstd?</p>",
        "id": 273455941,
        "sender_full_name": "oli",
        "timestamp": 1646035399
    },
    {
        "content": "<p>ignoring all other concerns, it would at least reduce the time they take to build (-30% for syn's), and the resulting binary size (30x) :)</p>",
        "id": 273462349,
        "sender_full_name": "lqd",
        "timestamp": 1646039697
    },
    {
        "content": "<blockquote>\n<p>Could we link builds scripts dynamically, at least to libstd?</p>\n</blockquote>\n<p>That could potentially cause compilation errors. The dynamic linking story of rust/cargo is rather bad.</p>",
        "id": 273485359,
        "sender_full_name": "bjorn3",
        "timestamp": 1646053352
    },
    {
        "content": "<p>We already do for proc-macros, IIRC</p>",
        "id": 273507214,
        "sender_full_name": "cuviper",
        "timestamp": 1646062594
    },
    {
        "content": "<p>Proc macros are statically linked to all rust libraries.</p>",
        "id": 273509061,
        "sender_full_name": "bjorn3",
        "timestamp": 1646063272
    },
    {
        "content": "<p>Wasm build scripts? Or even better no build scripts yay</p>",
        "id": 273510234,
        "sender_full_name": "nagisa",
        "timestamp": 1646063676
    },
    {
        "content": "<p>let's just interpret them with miri</p>",
        "id": 273510550,
        "sender_full_name": "lqd",
        "timestamp": 1646063791
    },
    {
        "content": "<p>miri tends to be very slow. Even if most build scripts are small enough that interpretation is faster, there exists build scripts that do a lot of computation. So we need to be some opt in or JIT situation.</p>",
        "id": 273510739,
        "sender_full_name": "Eh2406",
        "timestamp": 1646063879
    },
    {
        "content": "<p>(that was facetious)</p>",
        "id": 273510821,
        "sender_full_name": "lqd",
        "timestamp": 1646063899
    },
    {
        "content": "<p>there a few crates whose build scripts mostly deal with MSRV and where we may find ways to help in the future (in the topic of \"even better no build scripts yay\")</p>",
        "id": 273511865,
        "sender_full_name": "lqd",
        "timestamp": 1646064208
    },
    {
        "content": "<p>I won't cry if you make <code>autocfg</code> unnecessary <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 273524800,
        "sender_full_name": "cuviper",
        "timestamp": 1646069436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273431237\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273431178\">said</a>:</p>\n<blockquote>\n<p>Interesting that there is no <code>-C opt-level</code> in the command, probably a good thing to not compile build scripts at high optimization levels</p>\n</blockquote>\n<p>That was a change in Cargo a few versions ago, to default to not optimizing build-only dependencies.</p>\n</blockquote>\n<p>Do you have a link to the relevant PR? It would be interesting to see what was involved, code-wise and process-wise, to get this change in. Given that <code>-Cstrip=debuginfo</code> might me the most practical possibilty here</p>",
        "id": 273547746,
        "sender_full_name": "nnethercote",
        "timestamp": 1646079566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273462349\">said</a>:</p>\n<blockquote>\n<p>ignoring all other concerns, it would at least reduce the time they take to build (-30% for syn's, and a few percent better with <code>lld</code>/<code>mold</code>), and the resulting binary size (30x) <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Which change did you get these measurements with? I didn't see results nearly that good...</p>",
        "id": 273547899,
        "sender_full_name": "nnethercote",
        "timestamp": 1646079628
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/8500\">https://github.com/rust-lang/cargo/pull/8500</a></p>",
        "id": 273549121,
        "sender_full_name": "bjorn3",
        "timestamp": 1646080250
    },
    {
        "content": "<p>for the perf win I think @lqd was refering to dynamic linking.</p>",
        "id": 273549191,
        "sender_full_name": "bjorn3",
        "timestamp": 1646080310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cost.20of.20compiling.20build.2Ers.20files/near/273549191\">said</a>:</p>\n<blockquote>\n<p>for the perf win I think @lqd was refering to dynamic linking.</p>\n</blockquote>\n<p>I was indeed referring to building with dynamic linking :)</p>",
        "id": 273550812,
        "sender_full_name": "lqd",
        "timestamp": 1646080914
    }
]