[
    {
        "content": "<p>So I get segfaults from <code>issue-44056.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// compile-pass</span>\n<span class=\"c1\">// only-x86_64</span>\n<span class=\"c1\">// no-prefer-dynamic</span>\n<span class=\"c1\">// compile-flags: -Ctarget-feature=+avx -Clto</span>\n</pre></div>\n\n\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span>&gt; rustc +rust-5-stage2 issue-44056.rs -Ctarget-feature<span class=\"o\">=</span>+avx -Clto\nSegmentation fault <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Does anybody else see this? It's pretty annoying. Prevents me from really running the full test suite.</p>",
        "id": 147840455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397008
    },
    {
        "content": "<p>It has <em>something</em> to do with the AVX</p>",
        "id": 147840471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397030
    },
    {
        "content": "<p>Hmm, I also see other failures:</p>\n<div class=\"codehilite\"><pre><span></span>---- [run-pass] run-pass/lto-many-codegen-units.rs stdout ----\n\nerror: test compilation failed although it shouldn&#39;t!\nstatus: signal: 11\ncommand: &quot;/home/nmatsakis/versioned/rust-5/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&quot; &quot;/home/nmatsakis/versioned/rust-5/src/test/run-pass/lto-many-codegen-units.rs&quot; &quot;--target=x86_64-unknown-linux-g\\\nnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-o&quot; &quot;/home/nmatsakis/versioned/rust-5/build/x86_64-unknown-linux-gnu/test/run-pass/lto-many-codegen-units/a&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/hom\\\ne/nmatsakis/versioned/rust-5/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-C&quot; &quot;lto&quot; &quot;-C&quot; &quot;codegen-units=8&quot; &quot;-L&quot; &quot;/home/nmatsakis/versioned/rust-5/build/x86_64-unknown-linux-gnu/test/run-pass\\\n/lto-many-codegen-units/auxiliary&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n\n------------------------------------------\n\nthread &#39;[run-pass] run-pass/lto-many-codegen-units.rs&#39; panicked at &#39;explicit panic&#39;, tools/compiletest/src/runtest.rs:3282:9\n</pre></div>",
        "id": 147841219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397672
    },
    {
        "content": "<p><em>something</em> is weird :(</p>",
        "id": 147841262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was also seeing <code>lto-many-codegen-units</code> fail on my inlining branch. I assumed it was due to my changes, but perhaps not?</p>",
        "id": 147841495,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1542397892
    },
    {
        "content": "<p>who can say :)</p>",
        "id": 147841511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397909
    },
    {
        "content": "<p>I see far more failures than just that one</p>",
        "id": 147841525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397920
    },
    {
        "content": "<p>all of them are tests with \"lto\" in the name though</p>",
        "id": 147841579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397928
    },
    {
        "content": "<p>Here's the failures I was seeing:</p>\n<div class=\"codehilite\"><pre><span></span>    [run-pass] run-pass/associated-consts/associated-const-cross-crate-defaults.rs\n    [run-pass] run-pass/associated-consts/associated-const-use-default.rs\n    [run-pass] run-pass/backtrace-debuginfo.rs\n    [run-pass] run-pass/cross-crate/xcrate_generic_fn_nested_return.rs\n    [run-pass] run-pass/debuginfo-lto.rs\n    [run-pass] run-pass/fat-lto.rs\n    [run-pass] run-pass/generator/smoke.rs\n    [run-pass] run-pass/issues/issue-11205.rs\n    [run-pass] run-pass/lto-many-codegen-units.rs\n    [run-pass] run-pass/lto-still-runs-thread-dtors.rs\n    [run-pass] run-pass/optimization-fuel-0.rs\n    [run-pass] run-pass/optimization-fuel-1.rs\n    [run-pass] run-pass/panic-runtime/lto-abort.rs\n    [run-pass] run-pass/panic-runtime/lto-unwind.rs\n    [run-pass] run-pass/rfcs/rfc-2005-default-binding-mode/constref.rs\n    [run-pass] run-pass/sepcomp/sepcomp-lib-lto.rs\n    [run-pass] run-pass/stack-probes-lto.rs\n    [run-pass] run-pass/ufcs-polymorphic-paths.rs\n</pre></div>",
        "id": 147841583,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1542397934
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failures:\n    [run-pass] run-pass/debuginfo-lto.rs\n    [run-pass] run-pass/fat-lto.rs\n    [run-pass] run-pass/lto-many-codegen-units.rs\n    [run-pass] run-pass/lto-still-runs-thread-dtors.rs\n    [run-pass] run-pass/panic-runtime/lto-abort.rs\n    [run-pass] run-pass/panic-runtime/lto-unwind.rs\n    [run-pass] run-pass/sepcomp/sepcomp-lib-lto.rs\n    [run-pass] run-pass/stack-probes-lto.rs\n</pre></div>",
        "id": 147841585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397940
    },
    {
        "content": "<p>got me :)</p>",
        "id": 147841597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397952
    },
    {
        "content": "<p>Well that's useful to me. Now I know the LTO ones might not be my fault <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 147841629,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1542397983
    },
    {
        "content": "<p>from <code>journalctl -b | tail</code>:</p>\n<div class=\"codehilite\"><pre><span></span>                                                            Stack trace of thread 15257:\n                                                            #0  0x00007fd2221bf3c3 n/a (/home/nmatsakis/versioned/rust-5/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/codegen\\\n-backends/librustc_codegen_llvm-llvm.so)\nNov 16 14:38:23 athena.localdomain audit[1]: SERVICE_STOP pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg=&#39;unit=systemd-coredump@66-18182-0 comm=&quot;systemd&quot; exe=&quot;/usr/lib/sy\\\nstemd/systemd&quot; hostname=? addr=? terminal=? res=success&#39;\nNov 16 14:38:24 athena.localdomain abrt-server[19001]: Deleting problem directory ccpp-2018-11-16-14:38:23.764102-13200 (dup of ccpp-2018-11-16-09:53:58.514123-11457)\nNov 16 14:38:24 athena.localdomain abrt-notification[19441]: Process 11457 (rustc) crashed in ??()\n</pre></div>",
        "id": 147841640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397987
    },
    {
        "content": "<p>some kind of crash in LLVM</p>",
        "id": 147841642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> any thoughts on what might cause this? <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span></p>",
        "id": 147841661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398008
    },
    {
        "content": "<p>I have a number of tests that fail for me locally as well: <a href=\"#narrow/stream/131828-t-compiler/subject/local-ui-test-failures\" title=\"#narrow/stream/131828-t-compiler/subject/local-ui-test-failures\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/subject/local-ui-test-failures</a></p>",
        "id": 147859207,
        "sender_full_name": "nagisa",
        "timestamp": 1542420053
    },
    {
        "content": "<p>So one thing that could be a cause is that you perhaps forgot to update your submodules? Another – there is that LLVM stamp file which prevents LLVM from rebuilding even if submodule is updated in some cases… and yet another – perhaps your config.toml is \"too\" different from the CI’s?</p>",
        "id": 147859257,
        "sender_full_name": "nagisa",
        "timestamp": 1542420131
    },
    {
        "content": "<p>to be clear, I haven’t looked too closely at any of those.</p>",
        "id": 147859259,
        "sender_full_name": "nagisa",
        "timestamp": 1542420144
    },
    {
        "content": "<p>run <code>rm build/*/llvm/llvm-finished-building</code> - if you're lucky, it will trigger a partial rebuild and only a few C++ files will need to be recompiled</p>",
        "id": 147869781,
        "sender_full_name": "eddyb",
        "timestamp": 1542443409
    },
    {
        "content": "<p>so I tried a complete rebuild</p>",
        "id": 147882139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470205
    },
    {
        "content": "<p>building LLVM fails like so:</p>\n<div class=\"codehilite\"><pre><span></span>/home/nmatsakis/versioned/rust-2/src/llvm/include/llvm/CodeGen/SchedulerRegistry.h:40:52: warning: cast between incompatible function types from ‘llvm::RegisterScheduler::FunctionPassCtor’ {aka ‘llvm::Sc\\\nheduleDAGSDNodes* (*)(llvm::SelectionDAGISel*, llvm::CodeGenOpt::Level)’} to ‘llvm::MachinePassCtor’ {aka ‘void* (*)()’} [-Wcast-function-type]\n   : MachinePassRegistryNode(N, D, (MachinePassCtor)C)\n                                                    ^\n[ 84%] Linking CXX static library ../../libLLVMX86CodeGen.a\n[ 84%] Built target LLVMX86CodeGen\ngmake: *** [Makefile:152: all] Error 2\nthread &#39;main&#39; panicked at &#39;\ncommand did not execute successfully, got: exit code: 2\n</pre></div>",
        "id": 147882140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470211
    },
    {
        "content": "<p>this happen to me basically every time; if I start again, it will pass</p>",
        "id": 147882141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470221
    },
    {
        "content": "<p>I always shrugged it off but now I think maybe it's connected</p>",
        "id": 147882146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470228
    },
    {
        "content": "<p>strangely, nothing there shows up in <code>journalctl</code></p>",
        "id": 147882155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470249
    },
    {
        "content": "<p>I thnk this is the actual error:</p>\n<div class=\"codehilite\"><pre><span></span>/usr/include/c++/8/bits/basic_string.h: In constructor ‘std::__cxx11::basic_string&lt;_CharT, _Traits, _Alloc&gt;::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string&lt;_CharT, _Traits, _Alloc&gt;::pointer, _Allo\\\nc&amp;&amp;)’:\n/usr/include/c++/8/bits/basic_string.h:149:4: internal compiler error: in cp_parser_lookup_name, at cp/parser.c:26145\n  : allocator_type(std::move(__a)), _M_p(__dat) { }\n    ^~~~~~~~~~~~~~\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee &lt;http://bugzilla.redhat.com/bugzilla&gt; for instructions.\nThe bug is not reproducible, so it is likely a hardware or OS problem.\n</pre></div>",
        "id": 147882198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470309
    },
    {
        "content": "<p>maybe upgrading to FC29 actually <em>will</em> help</p>",
        "id": 147882201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470324
    },
    {
        "content": "<p>What is your $CC/$CXX?</p>",
        "id": 147882211,
        "sender_full_name": "nagisa",
        "timestamp": 1542470380
    },
    {
        "content": "<p>can't tell you right now, rebooting :)</p>",
        "id": 147882257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470405
    },
    {
        "content": "<p>I found that compiling with $CC=clang/$CXX=clang++ is significantly more involved and error prone compared to $CC=gcc/$CXX=g++</p>",
        "id": 147882271,
        "sender_full_name": "nagisa",
        "timestamp": 1542470441
    },
    {
        "content": "<p>I think I am using gcc</p>",
        "id": 147882328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470535
    },
    {
        "content": "<p>unless rust is picking clang for me</p>",
        "id": 147882329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470541
    },
    {
        "content": "<p>what’s the version?</p>",
        "id": 147882346,
        "sender_full_name": "nagisa",
        "timestamp": 1542470608
    },
    {
        "content": "<p>I can confirm that 7.3.0 and 8.2.1 definitely work.</p>",
        "id": 147882349,
        "sender_full_name": "nagisa",
        "timestamp": 1542470629
    },
    {
        "content": "<p>8.2.1</p>",
        "id": 147882394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470672
    },
    {
        "content": "<p>gcc version 8.2.1 20181105 (Red Hat 8.2.1-5) (GCC)</p>",
        "id": 147882396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470681
    },
    {
        "content": "<p>currently upgrading, though, which I wanted to do anyway</p>",
        "id": 147882399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470691
    },
    {
        "content": "<p>everybody knows the best way to debug a problem is to add more variables, after all</p>",
        "id": 147882421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542470710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still successfully getting through compilation into linking (with 8.2.0 this time)</p>",
        "id": 147883183,
        "sender_full_name": "nagisa",
        "timestamp": 1542472155
    },
    {
        "content": "<p>well, FC29 solved my immediate problems, but I still get irregular crashes from <strong>stage0 rustc</strong>:</p>\n<div class=\"codehilite\"><pre><span></span>[54386.877422] rustc[13315]: segfault at 10 ip 00007f5e74719540 sp 00007f5d8dbfd128 error 4 in librustc_codegen_llvm-llvm.so[7f5e725a8000+24a7000]\n[54386.877431] Code: cf 41 83 c1 01 21 cf 48 8d 34 7f 49 8d 14 f2 49 8b 34 f2 4c 39 f6 74 90 eb d3 4d 85 c0 49 0f 45 d0 eb 99 cc cc cc cc cc cc cc &lt;8a&gt; 0e 89 c8 04 fc 3c 1a 76 1f 89 ca 80 c2 ff 31 c0 80 \\\nfa 02 48 0f\n[55694.589465] rustc[26736]: segfault at 8 ip 00007f2c1943f031 sp 00007f2c07fc00f0 error 4 in libc-2.28.so[7f2c193da000+14d000]\n[55694.589474] Code: 1f 84 00 00 00 00 00 66 90 f3 0f 1e fa 53 48 83 ec 10 48 8b 05 d0 8e 13 00 48 8b 00 48 85 c0 0f 85 84 00 00 00 48 85 ff 74 6f &lt;48&gt; 8b 47 f8 48 8d 77 f0 a8 02 75 3b 48 8b 15 24 8d 13 \\\n00 64 48 83\n</pre></div>\n\n\n<p>the core dumps are getting truncated, I'm not sure how to change that:</p>\n<div class=\"codehilite\"><pre><span></span>Sun 2018-11-18 07:00:16 EST   12843  1000  1000  11 truncated /home/nmatsakis/versioned/rust-2/build/x86_64-unknown-linux-gnu/stage0/bin/rustc\nSun 2018-11-18 07:22:06 EST   24592  1000  1000  11 truncated /home/nmatsakis/versioned/rust-2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc\n</pre></div>",
        "id": 147919123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542551720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>ulimit -c 0</code> I think?</p>",
        "id": 147919165,
        "sender_full_name": "simulacrum",
        "timestamp": 1542551788
    },
    {
        "content": "<p>the ulimit is already set to unlimited</p>",
        "id": 147919167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542551801
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&gt; <span class=\"nb\">ulimit</span> -c\nunlimited\n</pre></div>",
        "id": 147919168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542551811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Hm, what about <code>cat /proc/sys/kernel/core_pattern</code>? Maybe that's cutting it somehow?</p>",
        "id": 147919229,
        "sender_full_name": "simulacrum",
        "timestamp": 1542551979
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>|/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e\n</pre></div>",
        "id": 147919270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542552004
    },
    {
        "content": "<p>I just have <code>core</code> in that file, maybe systemd has some special behavior?</p>",
        "id": 147919278,
        "sender_full_name": "simulacrum",
        "timestamp": 1542552045
    },
    {
        "content": "<p>Maybe also check core_pipe_limit in that same directory?</p>",
        "id": 147919281,
        "sender_full_name": "simulacrum",
        "timestamp": 1542552063
    },
    {
        "content": "<p>plausible. <code>core_pipe_limit</code> is set to <code>0</code></p>",
        "id": 147919293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542552100
    },
    {
        "content": "<p>I'm not really familiar with all this machinery</p>",
        "id": 147919300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542552112
    },
    {
        "content": "<p>Yeah, me neither -- I know historically if that file didn't  contain just <code>core</code> or something then I'd end up with no logs whatsoever</p>",
        "id": 147919344,
        "sender_full_name": "simulacrum",
        "timestamp": 1542552152
    },
    {
        "content": "<p>from <code>/etc/systemd/coremap.conf</code>:</p>\n<div class=\"codehilite\"><pre><span></span>[Coredump]\n#Storage=external\n#Compress=yes\n#ProcessSizeMax=2G\n#ExternalSizeMax=2G\n#JournalSizeMax=767M\n#MaxUse=\n#KeepFree=\n</pre></div>",
        "id": 147919359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542552234
    },
    {
        "content": "<p>perhaps those limits are the problem</p>",
        "id": 147919360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542552238
    },
    {
        "content": "<p>(upped to 8G, we'll see)</p>",
        "id": 147919458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542552405
    },
    {
        "content": "<p>Does seem plausible</p>",
        "id": 147919510,
        "sender_full_name": "simulacrum",
        "timestamp": 1542552590
    },
    {
        "content": "<p>I should probably file an issue, or search for others</p>",
        "id": 147919657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542552857
    },
    {
        "content": "<p>at least I can now build LLVM w/o mysterious crashes, it seems</p>",
        "id": 147919924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542553490
    }
]