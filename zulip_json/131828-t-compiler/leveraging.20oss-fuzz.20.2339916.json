[
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"247084\">@Siavosh Zarrasvand</span> , lets discuss fuzzing ideas here</p>",
        "id": 182096516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574935881
    },
    {
        "content": "<p>(for now I'm using issue <a href=\"https://github.com/rust-lang/rust/issues/39916\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/39916\">#39916</a> as an anchor, just because I like to put <em>some</em> issue into each topic when I can. But its possible we will eventually want to spawn off a separate issue dedicated solely to OSS-Fuzz itself. Issue <a href=\"https://github.com/rust-lang/rust/issues/39916\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/39916\">#39916</a> is a bit broader, dare I say \"fuzzier\" in scope.)</p>",
        "id": 182096596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574935949
    },
    {
        "content": "<p>I suspect first steps would be to do a survey of what we already have implemented in <a href=\"https://github.com/rust-fuzz\" target=\"_blank\" title=\"https://github.com/rust-fuzz\">https://github.com/rust-fuzz</a></p>",
        "id": 182096628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574936001
    },
    {
        "content": "<p>also, it seems this group has a dedicated irc channel (<code>#rust-fuzz</code> on <a href=\"http://irc.mozilla.org\" target=\"_blank\" title=\"http://irc.mozilla.org\">irc.mozilla.org</a>). I wonder if they can be convinced to come to zulip as well.</p>",
        "id": 182096691,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574936050
    },
    {
        "content": "<p>now, to be fair, I think the stuff in <a href=\"https://github.com/rust-fuzz\" target=\"_blank\" title=\"https://github.com/rust-fuzz\">https://github.com/rust-fuzz</a> is dedicated to fuzzing projects implemented in Rust. While my own personal interest is in specifically fuzzing the <code>rustc</code> compiler</p>",
        "id": 182096945,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574936291
    },
    {
        "content": "<p>EDIT: I wrote this before I saw what you written. I agree. <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> </p>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Initially, it seems to me we need to identify two things. </p>\n<ol>\n<li>What tools we are going to use</li>\n<li>What we're going to fuzz</li>\n</ol>\n<p>OSS-Fuzz supports libfuzzer and American Fuzzy Lop (AFL), the tests would need to be written in those frameworks. If they are not, there is a chance Google would not accept the submission to be run on their servers, but of course, we can try to speak to them if we choose not to use them.</p>\n<p>libfuzzer: <a href=\"http://llvm.org/docs/LibFuzzer.html\" target=\"_blank\" title=\"http://llvm.org/docs/LibFuzzer.html\">http://llvm.org/docs/LibFuzzer.html</a><br>\nAFL: <a href=\"http://lcamtuf.coredump.cx/afl/\" target=\"_blank\" title=\"http://lcamtuf.coredump.cx/afl/\">http://lcamtuf.coredump.cx/afl/</a></p>\n<p>There is one QuickCheck like crate for Rust: <a href=\"https://docs.rs/quickcheck/0.9.0/quickcheck/\" target=\"_blank\" title=\"https://docs.rs/quickcheck/0.9.0/quickcheck/\">https://docs.rs/quickcheck/0.9.0/quickcheck/</a><br>\nQuickCheck: <a href=\"http://hackage.haskell.org/package/QuickCheck\" target=\"_blank\" title=\"http://hackage.haskell.org/package/QuickCheck\">http://hackage.haskell.org/package/QuickCheck</a></p>\n<p>Two articles on Fuzzing vs QuickCheck/Property testing: </p>\n<p><a href=\"https://danluu.com/testing/\" target=\"_blank\" title=\"https://danluu.com/testing/\">https://danluu.com/testing/</a><br>\n<a href=\"https://medium.com/@oherrala/quickcheck-or-fuzzing-which-one-to-use-98d200e9609b\" target=\"_blank\" title=\"https://medium.com/@oherrala/quickcheck-or-fuzzing-which-one-to-use-98d200e9609b\">https://medium.com/@oherrala/quickcheck-or-fuzzing-which-one-to-use-98d200e9609b</a></p>",
        "id": 182109913,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574948992
    },
    {
        "content": "<blockquote>\n<p>now, to be fair, I think the stuff in <a href=\"https://github.com/rust-fuzz\" target=\"_blank\" title=\"https://github.com/rust-fuzz\">https://github.com/rust-fuzz</a> is dedicated to fuzzing projects implemented in Rust. While my own personal interest is in specifically fuzzing the <code>rustc</code> compiler</p>\n</blockquote>\n<p>Same here. The rust compiler and some runtime. Tokio is very high on my priorities...</p>",
        "id": 182109985,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574949044
    },
    {
        "content": "<p>My personal preference: </p>\n<p>I would go for fuzzing as it gives higher coverage. Well setup, we should be able perform property testing through fuzzing as well, I don't really see why we wouldn't be able to do that. </p>\n<p>With regards to targets, I would say </p>\n<p>rustc<br>\nstd, for example async-std <br>\nruntimes like Tokio</p>",
        "id": 182110140,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574949208
    },
    {
        "content": "<p>(I probably won't be able to chat live at this point because I have to prep for the compiler meeting and then I have to go home and take care of my kids for the evening)</p>",
        "id": 182110147,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574949214
    },
    {
        "content": "<p>I'm pretty ignorant of APIs for libfuzzer and AFL, but I can review them.</p>",
        "id": 182110223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574949280
    },
    {
        "content": "<p>there is an AFL crate in rust-fuzz: <a href=\"https://github.com/rust-fuzz/afl.rs\" target=\"_blank\" title=\"https://github.com/rust-fuzz/afl.rs\">https://github.com/rust-fuzz/afl.rs</a></p>",
        "id": 182110253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574949314
    },
    {
        "content": "<p>but I don't know if that's a wrapper around <a href=\"http://lcamtuf.coredump.cx/afl/\" target=\"_blank\" title=\"http://lcamtuf.coredump.cx/afl/\">http://lcamtuf.coredump.cx/afl/</a>, or if it is something else</p>",
        "id": 182110291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574949351
    },
    {
        "content": "<blockquote>\n<p>I'm pretty ignorant of APIs for libfuzzer and AFL, but I can review them.</p>\n</blockquote>\n<p>Happy to answer questions as I can learn that way. My background on the lower layers is reverse engineering, exploit development, some embedded programming. So I have no experience in compiler development but really eager to understand your thought process.</p>\n<p>If it saves you time, write the questions and I'll provide answers <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 182110339,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574949366
    },
    {
        "content": "<p>I understand what it means to fuzz rustc, in terms of observing the compiler's behavior on variations of legal source code.</p>",
        "id": 182110416,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574949464
    },
    {
        "content": "<p>I'm not sure I understand what you mean by fuzzing std, though.</p>",
        "id": 182110428,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574949474
    },
    {
        "content": "<p>is that just a matter of trying to identify new test inputs from existing tests for std ?</p>",
        "id": 182110487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574949496
    },
    {
        "content": "<blockquote>\n<p>is that just a matter of trying to identify new test inputs from existing tests for std ?</p>\n</blockquote>\n<p>Using a fuzzing testing approach to test some std-libraries, ideally the IO-related ones. For example tokio, fuzzing http-request/response methods to identify edge cases.</p>",
        "id": 182110596,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574949597
    },
    {
        "content": "<p>I suppose you're already aware of it, but <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> did explore fuzzying in rust, and has written some docs about the experience. I'm pinging them just in case, and this is an interesting link with some of their findings <a href=\"https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb\" target=\"_blank\" title=\"https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb\">https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb</a></p>",
        "id": 182112445,
        "sender_full_name": "pachi",
        "timestamp": 1574950957
    },
    {
        "content": "<blockquote>\n<p>I suppose you're already aware of it, but <span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> did explore fuzzying in rust, and has written some docs about the experience. I'm pinging them just in case, and this is an interesting link with some of their findings <a href=\"https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb\" target=\"_blank\" title=\"https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb\">https://medium.com/@shnatsel/how-ive-found-vulnerability-in-a-popular-rust-crate-and-you-can-too-3db081a67fb</a></p>\n</blockquote>\n<p>I did read that post a while ago I believe. Also read a couple of other fuzzing attempts, one in particular at the compiler that found 8 issues. I posted it somewhere here before. </p>\n<p>Perhaps useful to make a list of past approaches for reference and put it on gist. I'm out now but will sort when back <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 182117282,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574954898
    },
    {
        "content": "<blockquote>\n<p>also, it seems this group has a dedicated irc channel (<code>#rust-fuzz</code> on <a href=\"http://irc.mozilla.org\" target=\"_blank\" title=\"http://irc.mozilla.org\">irc.mozilla.org</a>). I wonder if they can be convinced to come to zulip as well.</p>\n</blockquote>\n<p>Shouldn’t be too hard, you’ve already convinced at least 1 person there. <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> is also here.</p>",
        "id": 182129842,
        "sender_full_name": "nagisa",
        "timestamp": 1574967302
    },
    {
        "content": "<p>I don't really actively monitor zulip though</p>",
        "id": 182129858,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1574967331
    },
    {
        "content": "<blockquote>\n<p>now, to be fair, I think the stuff in <a href=\"https://github.com/rust-fuzz\" target=\"_blank\" title=\"https://github.com/rust-fuzz\">https://github.com/rust-fuzz</a> is dedicated to fuzzing projects implemented in Rust. While my own personal interest is in specifically fuzzing the <code>rustc</code> compiler</p>\n</blockquote>\n<p>My undergrad was about that specifically. Fuzzing a compiler with traditional tools is… not that feasible.</p>",
        "id": 182129865,
        "sender_full_name": "nagisa",
        "timestamp": 1574967346
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>now, to be fair, I think the stuff in <a href=\"https://github.com/rust-fuzz\" target=\"_blank\" title=\"https://github.com/rust-fuzz\">https://github.com/rust-fuzz</a> is dedicated to fuzzing projects implemented in Rust. While my own personal interest is in specifically fuzzing the <code>rustc</code> compiler</p>\n</blockquote>\n<p>My undergrad was about that specifically. Fuzzing a compiler with traditional tools is… not that feasible.</p>\n</blockquote>\n<p>Please elaborate <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 182139914,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574981385
    },
    {
        "content": "<p>The state becomes very large very quickly. You want to fuzz separate components, but in compiler code later phases/stages etc often have many presumptions based on what the previous stages do and filter out.</p>",
        "id": 182140663,
        "sender_full_name": "nagisa",
        "timestamp": 1574982784
    },
    {
        "content": "<p>Those are two major problems. If you had infinite memory, fuzzing whole compiler with traditional branch-tracking tools wouldn’t be a problem. Alas.</p>",
        "id": 182140710,
        "sender_full_name": "nagisa",
        "timestamp": 1574982845
    },
    {
        "content": "<blockquote>\n<p>Those are two major problems. If you had infinite memory, fuzzing whole compiler with traditional branch-tracking tools wouldn’t be a problem. Alas.</p>\n</blockquote>\n<p>I do not disagree with this. I do have some ideas for mitigation, will write after I trial and error.</p>",
        "id": 182143584,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574988367
    },
    {
        "content": "<p>Ah, I had a look, and Google's OSS-Fuzz docs even mention what I had in my head: <br>\n<a href=\"https://github.com/google/oss-fuzz/blob/master/docs/faq.md#can-i-launch-an-additional-process-eg-a-daemon-from-my-fuzz-target\" target=\"_blank\" title=\"https://github.com/google/oss-fuzz/blob/master/docs/faq.md#can-i-launch-an-additional-process-eg-a-daemon-from-my-fuzz-target\">https://github.com/google/oss-fuzz/blob/master/docs/faq.md#can-i-launch-an-additional-process-eg-a-daemon-from-my-fuzz-target</a></p>\n<p>i.e, dump fuzzing is efficient, on very limited scopes. Have many fuzz targets instead.</p>",
        "id": 182143606,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1574988470
    },
    {
        "content": "<p>Yeah hence: fuzz separate components. but that is a non trivial problem too. Could adapt the compiler code, of course, but that’s also non-trivial problem.</p>",
        "id": 182145129,
        "sender_full_name": "nagisa",
        "timestamp": 1574991389
    },
    {
        "content": "<p>Leaving this here for now for reference. Please ignore it. <a href=\"https://github.com/SiavoshZarrasvand/Awesome-Fuzzing/blob/master/awesome-fuzzing.md\" target=\"_blank\" title=\"https://github.com/SiavoshZarrasvand/Awesome-Fuzzing/blob/master/awesome-fuzzing.md\">https://github.com/SiavoshZarrasvand/Awesome-Fuzzing/blob/master/awesome-fuzzing.md</a></p>",
        "id": 182195854,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1575051217
    },
    {
        "content": "<p>When building rustc from source, is it good to set </p>\n<p><code># Build a multi-threaded rustc\nparallel-compiler = true</code></p>\n<p>?</p>",
        "id": 182374151,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1575311189
    },
    {
        "content": "<p>Also, is there a way to alternate between different settings when compiling and fuzzing the targets? For example to have one rustc  target compiled with <code>jemalloc</code> and one without.</p>",
        "id": 182374461,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1575311385
    },
    {
        "content": "<p>generally speaking, for now, probably no -- we don't ship a parallel compiler by default for now</p>",
        "id": 182377218,
        "sender_full_name": "simulacrum",
        "timestamp": 1575313012
    },
    {
        "content": "<p>You can alternate between them probably most easily by just having separate checkouts, though that's pretty expensive on disk space</p>",
        "id": 182377247,
        "sender_full_name": "simulacrum",
        "timestamp": 1575313035
    }
]