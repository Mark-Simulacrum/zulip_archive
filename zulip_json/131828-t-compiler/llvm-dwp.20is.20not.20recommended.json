[
    {
        "content": "<p>So the author of the llvm-dwp tool had <a href=\"https://reviews.llvm.org/D96678#2566422\">this</a> to say about llvm-dwp. We currently ship rust-llvm-dwp as a tool that we use when <code>-Csplit-debuginfo=packed</code> is supplied by the user. I think given this we should switch away? cc <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> thoughts?</p>",
        "id": 226567575,
        "sender_full_name": "nagisa",
        "timestamp": 1613505506
    },
    {
        "content": "<p>I don't know much about dwp (I did the macos stuff mostly, not the split-dwarf stuff), but I would agree that if the author of dwp says we shouldn't use it then we shouldn't use it</p>",
        "id": 226567925,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613505652
    },
    {
        "content": "<p>I used it because binutils dwp didn’t support DWARF 5. As I understand it, LLVM might output DWARF 5 for some targets so that seemed like something we needed. I’m certainly open to alternatives but I don’t know what else would be suitable at the moment.</p>",
        "id": 226568417,
        "sender_full_name": "davidtwco",
        "timestamp": 1613505822
    },
    {
        "content": "<p>The author of that comment mentions that they have patches for DWARF 5 and other dwp implementations so that might be an option in future.</p>",
        "id": 226568584,
        "sender_full_name": "davidtwco",
        "timestamp": 1613505886
    },
    {
        "content": "<p>I wonder how hard would something like this be to implement in terms of gimli.</p>",
        "id": 226577997,
        "sender_full_name": "nagisa",
        "timestamp": 1613510340
    },
    {
        "content": "<p>I would love a gimli implementation. That would mean one less LLVM tool coupled with rustc outside of cg_llvm. Thereby making it easier to not use LLVM at all.</p>",
        "id": 226619596,
        "sender_full_name": "bjorn3",
        "timestamp": 1613544615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you know what versions of Dwarf gimli supports? I havent found any specification on the repo.</p>",
        "id": 226650830,
        "sender_full_name": "Darley Barreto",
        "timestamp": 1613566061
    },
    {
        "content": "<p>As far as I know it mostly supports DWARFv5. There may be some things missing though.</p>",
        "id": 226651025,
        "sender_full_name": "bjorn3",
        "timestamp": 1613566179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I've implemented a dwp tool in Rust using gimli/object, you can find it here: <a href=\"https://github.com/davidtwco/thorin/\">https://github.com/davidtwco/thorin/</a> </p>\n<p>My goal is to use it to solve <a href=\"https://github.com/rust-lang/rust/issues/81024\">#81024</a> (<a href=\"https://github.com/rust-lang/rust/issues/89819\">#89819</a> didn't pan out as a fix, and we wanted to switch away from llvm-dwp for reasons documented in this thread anyway). I've added support for it to read dwarf objects from an archive input file, so we should be able to put our dependency dwarf objects into rlibs and give those to the new dwp tool. </p>\n<p>I've tested it against llvm-dwp's test suite, but haven't added a test suite or CI to the project itself yet, it fails a bunch of llvm's tests but primarily because of differences in diagnostic output, it's basically on-par functionality-wise. I'd appreciate some reviews, issues or pull requests if you spot anywhere I've done something stupid and it could be better (my starting point was a passing familiarity with what dwarf was, so there's bound to be something).</p>",
        "id": 263564004,
        "sender_full_name": "davidtwco",
        "timestamp": 1638529762
    },
    {
        "content": "<p>Nice!</p>",
        "id": 263564178,
        "sender_full_name": "bjorn3",
        "timestamp": 1638529865
    },
    {
        "content": "<p>How does the performance compare?</p>",
        "id": 263564205,
        "sender_full_name": "bjorn3",
        "timestamp": 1638529886
    },
    {
        "content": "<p>No idea.</p>",
        "id": 263564385,
        "sender_full_name": "davidtwco",
        "timestamp": 1638529968
    },
    {
        "content": "<p>Haven't checked, I tried not to do anything I thought would be slow, so hopefully it's decent - certainly it's something we can improve if it isn't.</p>",
        "id": 263564440,
        "sender_full_name": "davidtwco",
        "timestamp": 1638530007
    },
    {
        "content": "<p>The naming on this crate is excellent! <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 263588386,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1638542360
    },
    {
        "content": "<p>I've updated <a href=\"https://github.com/rust-lang/rust/issues/89819\">#89819</a> with the changes required so that rustc uses <code>thorin</code> - there's still changes we ought to make before actually landing a patch that switches to <code>thorin</code>, but I don't think any of those would prevent us going through whatever processes are required for the team to decide whether to accept the new dependency or not - is it just an MCP for that?</p>",
        "id": 263606794,
        "sender_full_name": "davidtwco",
        "timestamp": 1638550436
    },
    {
        "content": "<p>According to <a href=\"https://rust-lang.github.io/compiler-team/procedures/crates/\">our docs</a>, it's just an FCP when we get to merging, so I'll think about that later.</p>",
        "id": 263607909,
        "sender_full_name": "davidtwco",
        "timestamp": 1638550896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/131828-t-compiler/topic/llvm-dwp.20is.20not.20recommended/near/263607909\">said</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://rust-lang.github.io/compiler-team/procedures/crates/\">our docs</a>, it's just an FCP when we get to merging, so I'll think about that later.</p>\n</blockquote>\n<p>This pull request and the new dependency have been reviewed and are ready to land now - based on a reading of that policy, it’s just pending decisions about if/where we move the repository (<code>rust-lang</code> is suggested in the policy, but <code>gimli-rs</code> has been suggested on the thread - of course that would depend on the <code>gimli-rs</code> folks, depends what we wanted); adding the compiler team to the <a href=\"http://crates.io\">crates.io</a> package as owners; and an FCP for the new dependency in general.</p>",
        "id": 265451289,
        "sender_full_name": "davidtwco",
        "timestamp": 1639872600
    },
    {
        "content": "<p>FWIW, the primary goal of rust-lang is \"not an individual account\", at least IMO -- mostly to avoid being blocked on either forking or a ~single person, at an infra level.</p>",
        "id": 265452322,
        "sender_full_name": "simulacrum",
        "timestamp": 1639874340
    },
    {
        "content": "<p>(So either gimli or rust-lang are probably ok, though I'd probably express a slight preference for the latter, at least to start; it may make sense to invite gimli-rs folks if they'd be interested in maintaining it though).</p>",
        "id": 265452329,
        "sender_full_name": "simulacrum",
        "timestamp": 1639874376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> it probably also makes sense to consult <a href=\"https://rust-lang.github.io/rfcs/3119-rust-crate-ownership.html\">https://rust-lang.github.io/rfcs/3119-rust-crate-ownership.html</a> for the <a href=\"http://crates.io\">crates.io</a> publication and such, as a likely more recent doc than that of the compiler team</p>",
        "id": 265452396,
        "sender_full_name": "simulacrum",
        "timestamp": 1639874521
    },
    {
        "content": "<p>thanks to <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span>’s help, <code>thorin</code> is now at <a href=\"https://github.com/rust-lang/thorin\">https://github.com/rust-lang/thorin</a> and the compiler team are owners on <a href=\"http://crates.io\">crates.io</a>.</p>",
        "id": 265487619,
        "sender_full_name": "davidtwco",
        "timestamp": 1639931048
    },
    {
        "content": "<p>We can either r=nagisa on <a href=\"https://github.com/rust-lang/rust/issues/89819\">#89819</a> or do an fcp before landing it (that should be on a pull request updating our out-of-tree list in the compiler-team repository, according to those documents, but that list hasn’t been updated since it was created by the looks of things).</p>",
        "id": 265487813,
        "sender_full_name": "davidtwco",
        "timestamp": 1639931325
    }
]