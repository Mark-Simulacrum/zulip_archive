[
    {
        "content": "<p>I have just seen that the following query backtrace (or variants of it) are super common:</p>",
        "id": 136099268,
        "sender_full_name": "oli",
        "timestamp": 1539940143
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 136099272,
        "sender_full_name": "oli",
        "timestamp": 1539940147
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#0 [const_eval] const-evaluating `&lt;std::collections::VecDeque&lt;A&gt; as std::cmp::PartialEq&lt;&amp;&#39;b mut [B; _]&gt;&gt;::{{constant}}`\n#1 [evaluate_obligation] evaluating trait selection obligation `_: std::cmp::PartialEq&lt;_&gt;`\n#2 [typeck_tables_of] processing `X`\n#3 [mir_built] processing `X`\n#4 [unsafety_check_result] processing `X`\n#5 [mir_const] processing `X`\n#6 [mir_const_qualif] processing `X`\n  --&gt; /home/oliver/Projects/rust/rust/src/test/ui/consts/const-integer-bool-ops.rs:18:18\n   |\nLL | const ARR: [i32; X] = [99; 34];\n   |                  ^\n#7 [mir_const_qualif] processing `ARR::{{constant}}`\n#8 [const_eval] const-evaluating `ARR::{{constant}}`\n#9 [check_item_well_formed] processing `ARR`\n</pre></div>",
        "id": 136099274,
        "sender_full_name": "oli",
        "timestamp": 1539940149
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 136099276,
        "sender_full_name": "oli",
        "timestamp": 1539940151
    },
    {
        "content": "<p>So for evaluating an array length, we are out of some reason computing obligations about array equality</p>",
        "id": 136099360,
        "sender_full_name": "oli",
        "timestamp": 1539940225
    },
    {
        "content": "<p>I just feel like that is wrong, considering <code>X</code> is defined as <code>const X: usize = 42 &amp;&amp; 39;</code></p>",
        "id": 136099402,
        "sender_full_name": "oli",
        "timestamp": 1539940307
    },
    {
        "content": "<p>(yes that is an error, it's from a ui test)</p>",
        "id": 136099411,
        "sender_full_name": "oli",
        "timestamp": 1539940322
    },
    {
        "content": "<p>are you referring to the <code>#0</code> entry?</p>",
        "id": 136101806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539943720
    },
    {
        "content": "<p>sounds like the problem is that the trait obligation is \"underconstrained\" and the trait solver goes crazy looking at impls...</p>",
        "id": 136101813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539943740
    },
    {
        "content": "<p>hm. ok, I'll try to reproduce with successfully compiling code, makes sense that erroneous code might do weird things</p>",
        "id": 136102477,
        "sender_full_name": "oli",
        "timestamp": 1539944643
    }
]