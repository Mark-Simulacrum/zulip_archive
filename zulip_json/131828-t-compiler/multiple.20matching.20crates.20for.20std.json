[
    {
        "content": "<p>I pretty regularly get this error</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0464]: multiple matching crates for `std`\n  |\n  = note: candidates:\n          crate `std`: /home/nmatsakis/versioned/rust-4/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-7d634c14e33e4972.rlib\n</code></pre></div>\n<p>Do other people have this problem? I'm not doing anything particularly interesting, mostly <code>x.py build</code> and the occasional <code>x.py test</code>. Sometimes <code>x.py check</code>. I am using vscode.</p>",
        "id": 224537603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611956504
    },
    {
        "content": "<p>I get similar errors whenever I save a file while <code>x.py build</code> is running, I think because that triggers rust-analyzer to run <code>x.py check</code>. Sometimes I get linker errors on <code>rustc_driver</code> instead</p>",
        "id": 224538800,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611957162
    },
    {
        "content": "<p>One I get often too is</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0460]: found possibly newer version of crate `std` which `rustc_errors` depends on\n  --&gt; compiler/rustc_interface/src/callbacks.rs:12:5\n   |\n12 | use rustc_errors::{Diagnostic, TRACK_DIAGNOSTICS};\n   |     ^^^^^^^^^^^^\n   |\n   = note: perhaps that crate needs to be recompiled?\n   = note: the following crate versions were found:\n           crate `std`: /home/nadrieril/wip/rustc/rustc/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-3837264880d10a1c.rmeta\n           crate `rustc_errors`: /home/nadrieril/wip/rustc/rustc/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_errors-b06ce8b7ed1bcc93.rmeta\n</code></pre></div>",
        "id": 224538888,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611957228
    },
    {
        "content": "<p>Yes, i get some like that</p>",
        "id": 224539531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611957583
    },
    {
        "content": "<p>Super frustrating</p>",
        "id": 224539540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611957588
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rust/issues/1\">#1</a> most likely cause is parallel builds of x.py check and x.py build</p>",
        "id": 224544476,
        "sender_full_name": "simulacrum",
        "timestamp": 1611959297
    },
    {
        "content": "<p>my recommendation is to do something like 'cd otherdir &amp;&amp; ./x.py check' in vscode if you can pull it off</p>",
        "id": 224544512,
        "sender_full_name": "simulacrum",
        "timestamp": 1611959321
    },
    {
        "content": "<p>it's probably rust-analyzer running x.py check</p>",
        "id": 224545220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611959753
    },
    {
        "content": "<p>It's surprising though, because I often get cargo waiting on a lock, which I guess is exactly to prevent these sorts of things</p>",
        "id": 224561558,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611975255
    },
    {
        "content": "<p>I guess this means the error appears in between cargo invocations, probably when x.py does some magic with the sysroot?</p>",
        "id": 224561580,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611975324
    },
    {
        "content": "<p>Correct</p>",
        "id": 224562793,
        "sender_full_name": "simulacrum",
        "timestamp": 1611977239
    },
    {
        "content": "<p>Is there a way to synchronize this?</p>",
        "id": 224585158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612013304
    },
    {
        "content": "<p>I don't know what you meant by <code>cd otherdir</code> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> -- what other dir?</p>",
        "id": 224585164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612013318
    },
    {
        "content": "<p>build is relative to the cwd by default, so any other directory should work, i.e., <code>cd foo &amp;&amp; ./../x.py check</code> would create a separate build directory inside foo.</p>",
        "id": 224585467,
        "sender_full_name": "tm",
        "timestamp": 1612013804
    },
    {
        "content": "<p>oh, I understand now</p>",
        "id": 224585566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612013953
    },
    {
        "content": "<p>that's...quite a hack, but makes sense!</p>",
        "id": 224585569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612013961
    },
    {
        "content": "<p>maybe we should introduce a lock to x.py instead though</p>",
        "id": 224585581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612013990
    },
    {
        "content": "<p>Yeah, I ... don't disagree that we should. Just haven't gotten around to it. I think there's an open bug.</p>",
        "id": 224586388,
        "sender_full_name": "simulacrum",
        "timestamp": 1612015127
    },
    {
        "content": "<p>It's not trivial to get a file lock right cross platform and I'm not sure there's nice crates already.</p>",
        "id": 224586956,
        "sender_full_name": "simulacrum",
        "timestamp": 1612015904
    },
    {
        "content": "<p>How does cargo do it?</p>",
        "id": 224587798,
        "sender_full_name": "Nadrieril",
        "timestamp": 1612017089
    },
    {
        "content": "<p>isn't this a python script</p>",
        "id": 224588615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612018290
    },
    {
        "content": "<p>maybe python has come convenient snippet for this..?</p>",
        "id": 224588617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612018302
    },
    {
        "content": "<p>(well, I realize it shells out to rust almost immediately)</p>",
        "id": 224588623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612018307
    },
    {
        "content": "<p>I think cargo hand rolls it to some extent</p>",
        "id": 224589021,
        "sender_full_name": "simulacrum",
        "timestamp": 1612018831
    },
    {
        "content": "<p>I'm not aware of any python facility to do it</p>",
        "id": 224589028,
        "sender_full_name": "simulacrum",
        "timestamp": 1612018844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/multiple.20matching.20crates.20for.20std/near/224586388\">said</a>:</p>\n<blockquote>\n<p>Yeah, I ... don't disagree that we should. Just haven't gotten around to it. I think there's an open bug.</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/76661\">https://github.com/rust-lang/rust/issues/76661</a></p>",
        "id": 224602504,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612037082
    },
    {
        "content": "<p>Wow, you're saying that for once, my workflow of making fresh <code>objdir/</code> with different variants of <code>config.toml</code> is actually a win? (Potentially?)</p>",
        "id": 225333951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612548081
    },
    {
        "content": "<p>it'll definitely help with this</p>",
        "id": 225334209,
        "sender_full_name": "simulacrum",
        "timestamp": 1612548203
    },
    {
        "content": "<p>I hadn't, until this moment, actually tried building (<code>../x.py build &amp;&amp; ../x.py test</code>) in two such directories for the same src root <em>concurrently</em>. It does not work as well as I had hoped.</p>",
        "id": 225342822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612552317
    }
]