[
    {
        "content": "<p>I have been thinking about adding a <code>#[cfg(codegen_backend)]</code> cfg for conditional codegen based on the codegen backend used. This would for example allow me to upstream the last remaining patch to the standard library that cg_clif needs. Does this sound like a good idea?</p>\n<p><em>For those who are curious: The patch is to return false from <code>has_cpuid</code>. This is necessary because Cranelift doesn't have a <code>cpuid</code> instruction. Returning false also disables detection of most target features, which results in not requiring implementation of the associated intrinsics in cg_clif.</em></p>",
        "id": 201479453,
        "sender_full_name": "bjorn3",
        "timestamp": 1592662854
    },
    {
        "content": "<p>I would personally be okay with this as a permanently unstable thing - I think we should work really hard that end user code doesn't need to do this. I also don't really understand what you mean by cranelift not having a cpuid instruction - I thought cranelift didn't look at inline assembly?</p>",
        "id": 201479653,
        "sender_full_name": "simulacrum",
        "timestamp": 1592663200
    },
    {
        "content": "<blockquote>\n<p>I would personally be okay with this as a permanently unstable thing</p>\n</blockquote>\n<p>Ok</p>\n<blockquote>\n<p>I think we should work really hard that end user code doesn't need to do this.</p>\n</blockquote>\n<p>I completely agree. There used to be many patches to the standard library for unimplemented things that I didn't want to upstream. Now it is just a single thing related to SIMD, which is hard to implement due to the sheer amount of intrinsics anyway.</p>\n<blockquote>\n<p>I thought cranelift didn't look at inline assembly?</p>\n</blockquote>\n<p>Indeed. cg_clif does however check for certain known <code>asm!()</code> blocks and generates something sensible when possible or emits a trap when not possible. For example a black box gets codegened to nothing. And so does the <code>__rust_probestack</code> implementation in compiler-builtins. (I disabled probestack in Cranelift) If Cranelift had a <code>cpuid</code> instruction, I could use it to codegen the <code>cpuid</code> asm block. I currently have to codegen a trap instead.</p>",
        "id": 201479958,
        "sender_full_name": "bjorn3",
        "timestamp": 1592663855
    },
    {
        "content": "<blockquote>\n<p>Indeed. cg_clif does however check for certain known asm!() blocks and generates something sensible when possible or emits a trap when not possible. For example a black box gets codegened to nothing. And so does the __rust_probestack implementation in compiler-builtins. (I disabled probestack in Cranelift) If Cranelift had a cpuid instruction, I could use it to codegen the cpuid asm block. I currently have to codegen a trap instead.</p>\n</blockquote>\n<p>I'm really confused by this to be honest, if you already have special logic like this can't you utilize it to fill in the cpuid mask with say zeroes or whatever?</p>",
        "id": 201482228,
        "sender_full_name": "simulacrum",
        "timestamp": 1592666830
    },
    {
        "content": "<p>(i.e. implement cpuid returning default values)</p>",
        "id": 201482231,
        "sender_full_name": "simulacrum",
        "timestamp": 1592666843
    },
    {
        "content": "<p>I don't know what the default value is for which cpuid call.</p>",
        "id": 201482357,
        "sender_full_name": "bjorn3",
        "timestamp": 1592667027
    },
    {
        "content": "<p>I guess one option is to make target_cpuid the flag rather than making it codegen-backend specific, which seems maybe somewhat more reasonable</p>",
        "id": 201482464,
        "sender_full_name": "simulacrum",
        "timestamp": 1592667184
    },
    {
        "content": "<p>I'm assuming that adding a cpuid intrinsic would be relatively straightforward, and you're just concerned about all the other intrinsics that would be expected to work based on what cpuid returns?</p>",
        "id": 201482655,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592667490
    },
    {
        "content": "<p>It should be straightforward to auto-generate a pile of intrinsic functions for individual instructions by using the XML descriptions of the intrinsics.</p>",
        "id": 201482672,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592667555
    },
    {
        "content": "<p>If you had all of those intrinsics generated, would there be any other reason to not have cpuid?</p>",
        "id": 201482678,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592667593
    },
    {
        "content": "<p>I might be able to get someone to implement that code generator to build all the intrinsics, if that will help.</p>",
        "id": 201482905,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592667849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Add.20.23.5Bcfg(codegen_backend).5D/near/201482678\">said</a>:</p>\n<blockquote>\n<p>If you had all of those intrinsics generated, would there be any other reason to not have cpuid?</p>\n</blockquote>\n<p>When all those intrinsics have codegen, there is no reason to not have <code>cpuid</code>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Add.20.23.5Bcfg(codegen_backend).5D/near/201482672\">said</a>:</p>\n<blockquote>\n<p>It should be straightforward to auto-generate a pile of intrinsic functions for individual instructions by using the XML descriptions of the intrinsics.</p>\n</blockquote>\n<p>The intrinsics I need to implement are the LLVM intrinsics (eg for SSE2: <a href=\"https://github.com/rust-lang/stdarch/blob/b17efd88af158b14b32ff394efb57c1b90179bf5/crates/core_arch/src/x86/sse2.rs#L3016-L3167\">https://github.com/rust-lang/stdarch/blob/b17efd88af158b14b32ff394efb57c1b90179bf5/crates/core_arch/src/x86/sse2.rs#L3016-L3167</a>) used to implement the SIMD intrinsics in <code>core::arch</code>. For the different vector/lane sizes the names of those intrinsics are relatively similar for similar operations. This means that it is easy to implement intrinsics that work for any vector/lane size. The problem is more that there are a lot of different operations, which each have to get their own codegen. There are also intrinsics like <code>lvm.x86.pause</code> or <code>llvm.x86.xsave</code> that don't have equivalent Cranelift instructions.</p>",
        "id": 201484426,
        "sender_full_name": "bjorn3",
        "timestamp": 1592669618
    },
    {
        "content": "<p>I almost forgot the biggest problem: The <code>simd_extract</code> <code>platform-intrinsic</code> requires a constant as last argument. However <code>_mm_extract_epi16</code> is a wrapper around it, which doesn't pass a constant argument. Instead it requires its last argument to be constant itself and uses <code>#[inline]</code>. This works fine for LLVM, as the argument is a constant after optimizations. For Cranelift however there is no inlining support and Cranelift requires it to already be constant when generating the clif ir, not just after optimizations. The <code>extractlane</code> clif instruction takes a <code>u8</code> as argument, not a <code>Value</code> for the lane selection. <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/666\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/666</a></p>",
        "id": 201484821,
        "sender_full_name": "bjorn3",
        "timestamp": 1592670084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ^</p>",
        "id": 201484825,
        "sender_full_name": "bjorn3",
        "timestamp": 1592670106
    },
    {
        "content": "<p>I find idea of code <code>cfg</code>ing based on one of the many backends scary, but I wouldnâ€™t might so much if it was for now perma-unstable std-only thing.</p>",
        "id": 201510819,
        "sender_full_name": "nagisa",
        "timestamp": 1592705346
    }
]