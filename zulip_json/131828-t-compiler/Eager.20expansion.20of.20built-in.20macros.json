[
    {
        "content": "<p>Certain built-in macros expand arguments <em>before</em> expanding the macro itself, which is very different from the way macros usually work. The most common use for this feature is probably</p>\n<div class=\"codehilite\"><pre><span></span> include!(concat!(env!(&quot;OUT_DIR&quot;), &quot;/bindings.rs&quot;));\n</pre></div>\n\n\n<p>pattern, where both <code>concat!</code> and <code>include!</code> \"evaluate\" arguments before doing their thing. </p>\n<p>Is there any documentation/interesting PR about this behavior? How it interacts with name resolution?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>, <span class=\"user-mention\" data-user-id=\"216201\">@Edwin Cheng</span></p>",
        "id": 180420206,
        "sender_full_name": "matklad",
        "timestamp": 1573476635
    },
    {
        "content": "<p>Maybe off-topic : this is a RFC for general eager expansion  <a href=\"https://github.com/rust-lang/rfcs/pull/2320\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2320\">https://github.com/rust-lang/rfcs/pull/2320</a></p>",
        "id": 180421091,
        "sender_full_name": "Edwin Cheng",
        "timestamp": 1573477310
    },
    {
        "content": "<p>The interesting PR happened in 2013 to support a specific use case - <a href=\"https://github.com/rust-lang/rust/pull/9740\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/9740\">https://github.com/rust-lang/rust/pull/9740</a>.</p>",
        "id": 180447690,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573497161
    },
    {
        "content": "<p>jbclements was a hygiene expert back then, and here's his reaction to that PR - <a href=\"https://github.com/rust-lang/rust/pull/9740#issuecomment-28265862\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/9740#issuecomment-28265862\">https://github.com/rust-lang/rust/pull/9740#issuecomment-28265862</a>.</p>",
        "id": 180447730,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573497212
    },
    {
        "content": "<p>Since then and until 1.0 a bunch of code depended on this in practice and this is how eager expansion got into stable Rust.</p>",
        "id": 180447824,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573497298
    },
    {
        "content": "<blockquote>\n<p>How it interacts with name resolution?</p>\n</blockquote>\n<p>Eagerly expanded macros (and also macros eagerly expanded by eagerly expanded macros, which actually happens in practice too!) are resolved at the location of the \"root\" macro that performs the eager expansion on its arguments.</p>",
        "id": 180448000,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573497422
    },
    {
        "content": "<p>If some name cannot be resolved at the eager expansion time it's considered unresolved, even if becomes available later (e.g. from a glob import or other macro).</p>",
        "id": 180448145,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573497551
    },
    {
        "content": "<p>Eagerly expanded macros don't add anything to the module structure of the crate and don't build any speculative module structures, i.e. they are expanded in a \"flat\" way even if tokens in them look like modules.</p>",
        "id": 180448231,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573497626
    },
    {
        "content": "<p>In other words, it kinda works for simple cases for which it was originally intended, and we need to live with it because it's available on stable and widely relied upon.</p>",
        "id": 180448347,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573497725
    },
    {
        "content": "<blockquote>\n<p>Eagerly expanded macros don't add anything to the module structure</p>\n</blockquote>\n<p>To clarify, this means that it's impossible to define items with eager macros? I.e, there's no way to sneak in an <code>impl</code> via <code>concat_idents!</code>?</p>",
        "id": 180832057,
        "sender_full_name": "matklad",
        "timestamp": 1573825030
    },
    {
        "content": "<p>In general, it seems like proper eager expansion throws a wrench into the incremental name resolution. At the moment, we incrementalise nameres by making each macro expansion a query, whose arguments are a macro def id and a token tree. By resolving the macro, we condense all resolver context into a single integer. For eager expansion, however, we would need the full set of visible  names as a query argument. </p>\n<p>Cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just in case, as they suggested the way to handle non-eager macros incrementally.</p>",
        "id": 180833749,
        "sender_full_name": "matklad",
        "timestamp": 1573826208
    },
    {
        "content": "<p>Or perhaps it's not that bad, if we just use a function to expand an eager-macro, and then just intern the resulting token tree? Ie, we will be interning really large and complex values. Ie, using interning not like traditional space-saving interning, but just like a key-value store</p>",
        "id": 180835256,
        "sender_full_name": "matklad",
        "timestamp": 1573827120
    },
    {
        "content": "<p>oh, cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> :)</p>",
        "id": 180845529,
        "sender_full_name": "matklad",
        "timestamp": 1573833569
    },
    {
        "content": "<blockquote>\n<p>To clarify, this means that it's impossible to define items with eager macros? I.e, there's no way to sneak in an impl via concat_idents!?</p>\n</blockquote>\n<p>Correct. This also means it's not possible to create temporary items (e.g. additional macros, or modules, or imports) being used only during the expansion.<br>\nThe eager expansion RFC has a bunch of examples like this - <a href=\"https://github.com/pierzchalski/rfcs/blob/macro-expansion-api/text/0000-eager-macro-expansion.md#appendix-a-corner-cases\" target=\"_blank\" title=\"https://github.com/pierzchalski/rfcs/blob/macro-expansion-api/text/0000-eager-macro-expansion.md#appendix-a-corner-cases\">https://github.com/pierzchalski/rfcs/blob/macro-expansion-api/text/0000-eager-macro-expansion.md#appendix-a-corner-cases</a>.</p>",
        "id": 180915175,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573916281
    },
    {
        "content": "<blockquote>\n<p>In general, it seems like proper eager expansion throws a wrench into the incremental name resolution.</p>\n</blockquote>\n<p>Non-proper eager expansion seems to break incremental (as you are describing it) as well.<br>\nSince the macro needs to resolve names in its arguments, the current resolver state becomes the macro's input.</p>",
        "id": 180915246,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573916397
    },
    {
        "content": "<blockquote>\n<p>If some name cannot be resolved at the eager expansion time it's considered unresolved, even if becomes available later (e.g. from a glob import or other macro).</p>\n</blockquote>\n<p>I think this part is fixable without too much complications.<br>\nThe macro's output can be changed from <code>TokenStream</code> to <code>Result&lt;TokenStream, Indeterminate&gt;</code> (internally), and if the macro returns <code>Indeterminate</code> it just returns to the queue to be tried again later.</p>\n<blockquote>\n<p>Eagerly expanded macros don't add anything to the module structure of the crate and don't build any speculative module structures, i.e. they are expanded in a \"flat\" way even if tokens in them look like modules.</p>\n</blockquote>\n<p>And this is something we may want to leave as is - explicitly specify eager expansion as being \"flat\" / \"token-only\" and tell users to deal with it.<br>\nOtherwise implementing speculative module structures is a big serious work, and work like this very rarely gets done, see <a href=\"https://github.com/rust-lang/rust/issues/43081\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43081\">#43081</a> (unless perhaps some payed person/people are focusing on it full-time).</p>",
        "id": 180915834,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1573917385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I'm not quite clear on whether this got \"resolved\" here</p>",
        "id": 181143121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574190007
    },
    {
        "content": "<p>Let me resummarize to be sure I understand</p>",
        "id": 181143158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574190031
    },
    {
        "content": "<p>the core problem here is that expanding <em>certain macros</em> (e.g., <code>include!</code>) \"eagerly evaluate\" their arguments</p>",
        "id": 181143204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574190056
    },
    {
        "content": "<p>right now, in rust-analyzer, expanding macros in general is a query</p>",
        "id": 181143224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574190066
    },
    {
        "content": "<p>and that query doesn't have access to enough state to do that eager evaluation</p>",
        "id": 181143247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574190075
    },
    {
        "content": "<p>correct?</p>",
        "id": 181143253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574190080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , correct!</p>",
        "id": 181145977,
        "sender_full_name": "matklad",
        "timestamp": 1574191737
    }
]