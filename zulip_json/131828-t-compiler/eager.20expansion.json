[
    {
        "content": "<p>This is to discuss macro eager expansion, in particular w.r.t. <span class=\"user-mention\" data-user-id=\"201856\">@Edward Pierzchalski</span>'s recent RFC and @nrc's older one.</p>",
        "id": 157679182,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1549448214
    },
    {
        "content": "<p>Ah... I don't think @nrc is on Zulip</p>",
        "id": 157679195,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1549448226
    },
    {
        "content": "<p>For future reference, here are links to the <a href=\"https://github.com/rust-lang/rfcs/pull/2320\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2320\">eRFC</a> by me and the <a href=\"https://github.com/nrc/rfcs/blob/eager-expand/text/0000-eager.md\" target=\"_blank\" title=\"https://github.com/nrc/rfcs/blob/eager-expand/text/0000-eager.md\">RFC</a> by nrc.</p>",
        "id": 157679889,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1549449082
    },
    {
        "content": "<p>Yep, good.</p>",
        "id": 157712999,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1549477776
    },
    {
        "content": "<p>So... apparently @nrc is leaving Rust or at least hugely decreasing participation.</p>",
        "id": 157713110,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1549477827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"201856\">@Edward Pierzchalski</span></p>",
        "id": 157713126,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1549477836
    },
    {
        "content": "<p>We could have a chat with <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> about this though, who is sort of the macros guru.</p>",
        "id": 157713183,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1549477874
    },
    {
        "content": "<p>Are you free for a meeting some time next week? :-)</p>",
        "id": 157713216,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1549477899
    },
    {
        "content": "<p>I should be pretty free next week for a meeting. However, if I recall correctly petrochenkov and jseyfried were too busy or otherwise not keen on participate much on this. Should we pull in <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> or llogic?</p>",
        "id": 157726503,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1549487476
    },
    {
        "content": "<p>For anyone interested, after discussion between <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> and myself, the RFC has been polished and updated (and might enter FCP soonish?), so if you have any feedback now's the time!</p>",
        "id": 160526593,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1552345823
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"201856\">@Edward Pierzchalski</span> , I have some questions to pose while I write my suggested edits to the RFC</p>",
        "id": 177145790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570020423
    },
    {
        "content": "<p>(but I wanted to double-check that you are active here before writing them out in this topic)</p>",
        "id": 177145923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570020541
    },
    {
        "content": "<p>Sure, go ahead (but I'm just about to go to bed, so I'll respond later)</p>",
        "id": 177150136,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1570023334
    },
    {
        "content": "<p>okay, first question (and any of these may reflect gross ignorance on my part)</p>",
        "id": 177150236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023372
    },
    {
        "content": "<p><span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span>  Do you expect anyone using the API to not immediately call <code>.await</code> after invoking <code>eb.expand()</code>?</p>",
        "id": 177150291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023408
    },
    {
        "content": "<p>I'm basically trying to imagine what my code would look like, and I don't understand what the value is of exposing the <code>Future</code> by returning it, versus having it call <code>.await</code> itself within the implementation of <code>fn expand(self)</code></p>",
        "id": 177150348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023452
    },
    {
        "content": "<p><span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span> <code>ExpansionBuilder::from_tokens(tokens: TokenStream) -&gt; Result&lt;Self, ParseError&gt;</code> takes <code>tokens</code> by value, and tries to parse it. What is it going to parse it as: An expression? Or just as a token-tree?</p>",
        "id": 177150640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023614
    },
    {
        "content": "<p>(I'm guessing \"token-tree\", but I wanted to double-check.)</p>",
        "id": 177150654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023630
    },
    {
        "content": "<p>(or maybe its expecting a forest of token trees? namely, I don't yet know how it handles trailing input after the first token tree it parses)</p>",
        "id": 177150831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023759
    },
    {
        "content": "<p>One goal I have is to try to revise the text so that we can illustrate the API by showing the <em>definition</em> of the declarative <code>expand!</code> in an appendix.</p>",
        "id": 177150924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023828
    },
    {
        "content": "<p>That is, instead of saying \"here's some useful functionality that is specified by this RFC\" (and leaving it unclear whether this is some fundamental new feature being supplied), I'm anticipating it could say \"the <code>ExpansionBuilder</code> API is all you need. For example, check out the definition of the declarative <code>expand!</code>,  given in Appendix Z.\"</p>",
        "id": 177151124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570023927
    },
    {
        "content": "<blockquote>\n<p><span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span>  Do you expect anyone using the API to not immediately call <code>.await</code> after invoking <code>eb.expand()</code>?</p>\n</blockquote>\n<p>That's a fair point. I suppose the other way of making it clear to the caller that <code>expand</code> is a potentially blocking, long-running operation is to... put it in the docs? One situation where that might backfire is when your proc macro does IO - then you want to be very clear about where such long-running things occur.</p>",
        "id": 177202292,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1570058843
    },
    {
        "content": "<blockquote>\n<p><span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span> <code>ExpansionBuilder::from_tokens(tokens: TokenStream) -&gt; Result&lt;Self, ParseError&gt;</code> takes <code>tokens</code> by value, and tries to parse it. What is it going to parse it as: An expression? Or just as a token-tree?</p>\n</blockquote>\n<p>The compiler needs to identify where in the input there might be a macro invocation, which means it needs to do 'real' parsing at some point (we could push that back to when the user calls <code>expand</code> though, and just do token tree parsing here like you say). If we do eager parsing, I'm unsure as to whether we need grammar-context-aware constructors (<code>from_expr_tokens</code>, <code>from_item_tokens</code>, etc).</p>\n<p>One alternative is to force <code>from_tokens</code> to only accept a single 'direct and complete' invocation (accepting <code>foo!()</code> but rejecting <code>let x = 5; foo!()</code>) and leaving it up to the caller to find and extract any macros in the input, but this causes issues if we ever want to support 'location aware' macro expansion (e.g. handling <code>super</code> when expanding <code>mod a { super::foo!{} }</code>).</p>",
        "id": 177203257,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1570059859
    },
    {
        "content": "<blockquote>\n<p>One goal I have is to try to revise the text so that we can illustrate the API by showing the <em>definition</em> of the declarative <code>expand!</code> in an appendix.</p>\n</blockquote>\n<p>That's a good idea, and I hoped to do so in an earlier draft, but I didn't feel like dealing with the details of input parsing and interpolation at the time. I might try and take a crack at it this weekend.</p>",
        "id": 177203465,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1570060124
    },
    {
        "content": "<blockquote>\n<p>If we do eager parsing, I'm unsure as to whether we need grammar-context-aware constructors (<code>from_expr_tokens</code>, <code>from_item_tokens</code>, etc).</p>\n</blockquote>\n<p>Yes, this is exactly the problem I was anticipating.</p>",
        "id": 177225643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570092940
    },
    {
        "content": "<p>The good news is that a Builder interface like this lets you add new constructors later</p>",
        "id": 177225702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570092968
    },
    {
        "content": "<p>So I suspect the \"right\" answer will be delay the identification of macro invocations to the point where the user calls <code>expand</code>. (I'm trying to guess the value one would get from doing the identification of the invocations more upfront, and to be honest I'm drawing a blank, since its not like the ExpansionBuilder API allows one to <em>inspect</em> those identified invocations, right?)</p>",
        "id": 177225832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570093087
    },
    {
        "content": "<p>Right, so maybe there's no harm in going all the way in the other direction and making <code>from_tokens</code> infallible, moving <em>all</em> the parsing logic and error reporting up to <code>expand</code>.</p>",
        "id": 177294532,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1570141592
    },
    {
        "content": "<p>I suppose it's worth thinking a bit more about how the compiler will look for invocations in a token stream, see if we need those <code>_expr</code> variants for an MVP anyway</p>",
        "id": 177294721,
        "sender_full_name": "Edward Pierzchalski",
        "timestamp": 1570141803
    }
]