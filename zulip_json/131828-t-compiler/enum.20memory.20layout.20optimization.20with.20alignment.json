[
    {
        "content": "<p>Is there any former discussion or working issue about store enum tag in unused alignment bytes? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Currently, the output are 16 and 24, but it seems that it's possible to make the output as 16 and 16.</p>\n<p>For another struct <code>struct B (i64, i8, bool);</code>, its size is 16, so the optimization seems worth it.</p>",
        "id": 268994243,
        "sender_full_name": "TennyZhuang",
        "timestamp": 1642908653
    },
    {
        "content": "<p>Padding is <code>uninit</code>, which can't be used for discriminants because it's intentionally not preserved by copies.</p>\n<p>If you want them both to be 16, you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(u8)]</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">ZeroByte</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ZeroByte</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=d24cd920af9aca44d5c55e7e16ce6078\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=d24cd920af9aca44d5c55e7e16ce6078</a>&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>[src/main.rs:4] std::mem::size_of::&lt;A&gt;() = 16\n[src/main.rs:5] std::mem::size_of::&lt;Option&lt;A&gt;&gt;() = 16\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 268994672,
        "sender_full_name": "scottmcm",
        "timestamp": 1642909394
    }
]