[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> mainly I think if we do libast/libparser/liblowering refactorings now, then it's way nicer to hack on diagnostics without having to recompile things only depending on AST but not parser</p>",
        "id": 175632694,
        "sender_full_name": "centril",
        "timestamp": 1568387082
    },
    {
        "content": "<p>Seems fine for me to do!</p>",
        "id": 175633064,
        "sender_full_name": "matklad",
        "timestamp": 1568387285
    },
    {
        "content": "<p>It's just that it won't be <em>directly</em> beneficial for rust-analyzer, as I don't think it can use rustc AST</p>",
        "id": 175633137,
        "sender_full_name": "matklad",
        "timestamp": 1568387331
    },
    {
        "content": "<p>sure</p>",
        "id": 175633165,
        "sender_full_name": "centril",
        "timestamp": 1568387349
    },
    {
        "content": "<p>My thoughts on extracting the parser is that there are two possible approaches:</p>\n<ul>\n<li>parser builds a specifc tree</li>\n<li>parser is supplied with some callback interface (typed or untyped), and is agnostic of the tree</li>\n</ul>",
        "id": 175633214,
        "sender_full_name": "matklad",
        "timestamp": 1568387385
    },
    {
        "content": "<p>Swift at the moment is transitioning to the CST based on the first idea</p>",
        "id": 175633296,
        "sender_full_name": "matklad",
        "timestamp": 1568387408
    },
    {
        "content": "<p>Basically, the parser builds two trees at once.</p>",
        "id": 175633310,
        "sender_full_name": "matklad",
        "timestamp": 1568387418
    },
    {
        "content": "<p>hmm would <code>syn</code> be considered a CST?</p>",
        "id": 175633341,
        "sender_full_name": "eddyb",
        "timestamp": 1568387444
    },
    {
        "content": "<p>or is it more like a parse tree</p>",
        "id": 175633366,
        "sender_full_name": "eddyb",
        "timestamp": 1568387469
    },
    {
        "content": "<p>Yeah, I should have said parse treee</p>",
        "id": 175633386,
        "sender_full_name": "matklad",
        "timestamp": 1568387482
    },
    {
        "content": "<p>syn seems like a CST</p>",
        "id": 175633390,
        "sender_full_name": "centril",
        "timestamp": 1568387488
    },
    {
        "content": "<p>(with comments and whitespace)</p>",
        "id": 175633401,
        "sender_full_name": "matklad",
        "timestamp": 1568387494
    },
    {
        "content": "<p>syn tries to keep all the tokens AFAIK</p>",
        "id": 175633404,
        "sender_full_name": "eddyb",
        "timestamp": 1568387497
    },
    {
        "content": "<p>(that it gets from <code>TokenStream</code>)</p>",
        "id": 175633415,
        "sender_full_name": "eddyb",
        "timestamp": 1568387506
    },
    {
        "content": "<p>fair... seems like something in-between then</p>",
        "id": 175633428,
        "sender_full_name": "centril",
        "timestamp": 1568387515
    },
    {
        "content": "<p>I think that's the definition of CST according to megamodel</p>",
        "id": 175633482,
        "sender_full_name": "matklad",
        "timestamp": 1568387533
    },
    {
        "content": "<p>and if you add ws and comments, you'll get a parse tree. Riht?</p>",
        "id": 175633509,
        "sender_full_name": "matklad",
        "timestamp": 1568387549
    },
    {
        "content": "<p>parse tree and CST seem synonymous according to wiki</p>",
        "id": 175633527,
        "sender_full_name": "centril",
        "timestamp": 1568387565
    },
    {
        "content": "<blockquote>\n<p>A parse tree or parsing tree[1] or derivation tree or concrete syntax tree is an ordered, rooted tree that represents the syntactic structure of a string according to some context-free grammar. The term parse tree itself is used primarily in computational linguistics; in theoretical syntax, the term syntax tree is more common.</p>\n</blockquote>",
        "id": 175633535,
        "sender_full_name": "centril",
        "timestamp": 1568387573
    },
    {
        "content": "<p>but not accodring to <a href=\"http://grammarware.github.io/parsing/\" target=\"_blank\" title=\"http://grammarware.github.io/parsing/\">http://grammarware.github.io/parsing/</a></p>",
        "id": 175633578,
        "sender_full_name": "matklad",
        "timestamp": 1568387605
    },
    {
        "content": "<p>anyway, building both ast and parse tree seems nice</p>",
        "id": 175633675,
        "sender_full_name": "matklad",
        "timestamp": 1568387656
    },
    {
        "content": "<p><em>but</em> it makes the parser dependent on the AST, which will make it harder to use it in rust-analyzer, which totally doesn't want rustc's AST</p>",
        "id": 175633723,
        "sender_full_name": "matklad",
        "timestamp": 1568387690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  can you tl;dr the reasons why rustc's AST is bad for RA?</p>",
        "id": 175633789,
        "sender_full_name": "centril",
        "timestamp": 1568387745
    },
    {
        "content": "<p>An alternative is to make the parser just traverse a parse tree, without actually building it. Than rustc can produce AST out of it, and rust-analyzer will build a parsee tree</p>",
        "id": 175633792,
        "sender_full_name": "matklad",
        "timestamp": 1568387746
    },
    {
        "content": "<p>it has types, it has spans (more generally, identity), it doesn't have whiespace, it doesn't have comments,  it is mutable</p>",
        "id": 175633900,
        "sender_full_name": "matklad",
        "timestamp": 1568387790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  sounds like you want another IR before <code>ast::</code> then</p>",
        "id": 175633933,
        "sender_full_name": "centril",
        "timestamp": 1568387821
    },
    {
        "content": "<p>has types -- different nodes are represented by different Rust types</p>",
        "id": 175633956,
        "sender_full_name": "matklad",
        "timestamp": 1568387835
    },
    {
        "content": "<p>(we want to move away from mutability, at least I do :P)</p>",
        "id": 175633962,
        "sender_full_name": "eddyb",
        "timestamp": 1568387836
    },
    {
        "content": "<p>Yeah, exactly, I want parse tree</p>",
        "id": 175633974,
        "sender_full_name": "matklad",
        "timestamp": 1568387842
    },
    {
        "content": "<blockquote>\n<ul>\n<li>parser is supplied with some callback interface (typed or untyped), and is agnostic of the tree</li>\n</ul>\n</blockquote>\n<p>This sounds like tagless-final; using a trait for \"callback\"</p>",
        "id": 175634072,
        "sender_full_name": "centril",
        "timestamp": 1568387887
    },
    {
        "content": "<p>Another big thing for me is indentity: I want <code>a + b</code>  to always be just <code>a + b</code>, and not <code>a + b</code> in <code>main.rs:42:10</code></p>",
        "id": 175634082,
        "sender_full_name": "matklad",
        "timestamp": 1568387892
    },
    {
        "content": "<p>How to marry that with hygiene and macro expansion is an open question though...</p>",
        "id": 175634113,
        "sender_full_name": "matklad",
        "timestamp": 1568387919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  i.e. you don't want spans</p>",
        "id": 175634139,
        "sender_full_name": "centril",
        "timestamp": 1568387936
    },
    {
        "content": "<p>exactly</p>",
        "id": 175634180,
        "sender_full_name": "matklad",
        "timestamp": 1568387966
    },
    {
        "content": "<p>hmm</p>",
        "id": 175634217,
        "sender_full_name": "eddyb",
        "timestamp": 1568387991
    },
    {
        "content": "<p>what if AST nodes were interned, with a single attached quantity</p>",
        "id": 175634269,
        "sender_full_name": "eddyb",
        "timestamp": 1568388003
    },
    {
        "content": "<p>a \"size\"</p>",
        "id": 175634277,
        "sender_full_name": "eddyb",
        "timestamp": 1568388006
    },
    {
        "content": "<p>which you could use to attach data to AST nodes in flat arrays</p>",
        "id": 175634293,
        "sender_full_name": "eddyb",
        "timestamp": 1568388018
    },
    {
        "content": "<p>wait no this is the \"relative node ID\" thing</p>",
        "id": 175634300,
        "sender_full_name": "eddyb",
        "timestamp": 1568388024
    },
    {
        "content": "<p>I just thought about it in a weird way</p>",
        "id": 175634304,
        "sender_full_name": "eddyb",
        "timestamp": 1568388029
    },
    {
        "content": "<p>:D</p>",
        "id": 175634308,
        "sender_full_name": "oli",
        "timestamp": 1568388032
    },
    {
        "content": "<p>(oops)</p>",
        "id": 175634310,
        "sender_full_name": "eddyb",
        "timestamp": 1568388035
    },
    {
        "content": "<p>If we want a zero cost solution then another IR in-between <code>TokenStream</code> and <code>ast::</code> may be \"expensive\" for rustc in terms of compile-perf...</p>\n<p>A tagless-final approach might be better</p>",
        "id": 175634315,
        "sender_full_name": "centril",
        "timestamp": 1568388037
    },
    {
        "content": "<p>nah the current AST is not good by any stretch of the imagination</p>",
        "id": 175634344,
        "sender_full_name": "eddyb",
        "timestamp": 1568388058
    },
    {
        "content": "<p>I'd rather replace it with something like this</p>",
        "id": 175634363,
        "sender_full_name": "eddyb",
        "timestamp": 1568388069
    },
    {
        "content": "<p>how did I forget about the relative thing, now I need to figure out how to use it more...</p>",
        "id": 175634386,
        "sender_full_name": "eddyb",
        "timestamp": 1568388092
    },
    {
        "content": "<blockquote>\n<p>nah the current AST is not good by any stretch of the imagination</p>\n</blockquote>\n<p>Sure, but an added <del>pass</del> transform might make not-good worse?</p>",
        "id": 175634390,
        "sender_full_name": "centril",
        "timestamp": 1568388095
    },
    {
        "content": "<p>you'd not have a pass</p>",
        "id": 175634411,
        "sender_full_name": "eddyb",
        "timestamp": 1568388111
    },
    {
        "content": "<p>you'd use the superior representation directly :P</p>",
        "id": 175634464,
        "sender_full_name": "eddyb",
        "timestamp": 1568388125
    },
    {
        "content": "<p>Yeah, I think we just don't need AST ideally. We can run nameres/macro expansion on the parse tree, and then lower the bodies into a proper simple IR (HIR or direclty MIR)</p>",
        "id": 175634511,
        "sender_full_name": "matklad",
        "timestamp": 1568388162
    },
    {
        "content": "<p>(basically anything that is tree-shaped can have data attached to it in a similar tree shape <em>or</em> in a flat manner with just a single \"total number of subnodes\" number per node)</p>",
        "id": 175634555,
        "sender_full_name": "eddyb",
        "timestamp": 1568388189
    },
    {
        "content": "<p>I want to implement this <em>so badly</em> right now</p>",
        "id": 175634563,
        "sender_full_name": "eddyb",
        "timestamp": 1568388193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yeah, that's roughly the plan for rust-analyzer. We currently use in-file offsets and not sizes, but that's not a super big difference</p>",
        "id": 175634713,
        "sender_full_name": "matklad",
        "timestamp": 1568388278
    },
    {
        "content": "<blockquote>\n<p>We can run nameres/macro expansion on the parse tree, and then lower the bodies into a proper simple IR (HIR or direclty MIR)</p>\n</blockquote>\n<p>Sounds like it would complicate spec efforts tho? nameres on a more \"untyped\" structure sounds harder to specify... Also, idk how you get directly to MIR lol...</p>",
        "id": 175634732,
        "sender_full_name": "centril",
        "timestamp": 1568388293
    },
    {
        "content": "<p>You can have typed views over untyped datastructure</p>",
        "id": 175634788,
        "sender_full_name": "matklad",
        "timestamp": 1568388342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> sounds like \"typing it\" on-demand?</p>",
        "id": 175635088,
        "sender_full_name": "centril",
        "timestamp": 1568388508
    },
    {
        "content": "<p>I mean \"do what Swift libsyntax does\"</p>",
        "id": 175635345,
        "sender_full_name": "matklad",
        "timestamp": 1568388657
    },
    {
        "content": "<p>A nice benefit here is that the green layer of Swift's syntax is so simple, that I feel it could be safely put into a shared interface</p>",
        "id": 175635398,
        "sender_full_name": "matklad",
        "timestamp": 1568388690
    },
    {
        "content": "<p>Hm, <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 175635416,
        "sender_full_name": "matklad",
        "timestamp": 1568388706
    },
    {
        "content": "<blockquote>\n<p>I mean \"do what Swift libsyntax does\"</p>\n</blockquote>\n<p>Guess I have to look more at swift then =)</p>",
        "id": 175635528,
        "sender_full_name": "centril",
        "timestamp": 1568388774
    },
    {
        "content": "<p>Yeah, I think if the parser builds a dumb green tree, that would be a rather simple an uncontroversial way forwad.</p>\n<p>That is, at the first stage, parer produces a green tree, and then we build a currrent AST over it (this increases alloc pressure somewhat, but I believe we can temporary stomach it just fine)</p>\n<p>At the next stage, we slowly replace processing of the AST with processing of the green tree (my understanding is that immutable green tree is basically what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> wants)</p>\n<p>At the next stage, if we find a need for this, we implement a red layer for convenience API on top</p>",
        "id": 175635720,
        "sender_full_name": "matklad",
        "timestamp": 1568388898
    },
    {
        "content": "<blockquote>\n<p>We currently use in-file offsets and not sizes, but that's not a super big difference</p>\n</blockquote>\n<p>I mean \"node count\" not \"source length\"</p>",
        "id": 175635793,
        "sender_full_name": "eddyb",
        "timestamp": 1568388951
    },
    {
        "content": "<p><a href=\"https://github.com/apple/swift/tree/master/lib/Syntax\" target=\"_blank\" title=\"https://github.com/apple/swift/tree/master/lib/Syntax\">https://github.com/apple/swift/tree/master/lib/Syntax</a> &lt;- I consider this a required reading for discussing IDE syntax trees</p>",
        "id": 175635797,
        "sender_full_name": "matklad",
        "timestamp": 1568388955
    },
    {
        "content": "<p>this allows attaching e.g. spans orthogonally</p>",
        "id": 175635804,
        "sender_full_name": "eddyb",
        "timestamp": 1568388959
    },
    {
        "content": "<p>and interning the AST!</p>",
        "id": 175635850,
        "sender_full_name": "eddyb",
        "timestamp": 1568388966
    },
    {
        "content": "<p>I wonder if you could have layers of interning :P</p>",
        "id": 175635874,
        "sender_full_name": "eddyb",
        "timestamp": 1568388997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> source <em>lenght</em> (as opposed to offsets) allows interning as well. I actually do that in rowan</p>",
        "id": 175635878,
        "sender_full_name": "matklad",
        "timestamp": 1568389000
    },
    {
        "content": "<p>so <code>a + b</code> twice would be interned at both levels, but <code>a + b</code> vs <code>a+b</code> would only share one interning level</p>",
        "id": 175635929,
        "sender_full_name": "eddyb",
        "timestamp": 1568389034
    },
    {
        "content": "<p><a href=\"https://github.com/rust-analyzer/rowan/blob/a00ccb60ea99eccbc7f24d31ee83e925e0d8258d/src/green.rs#L151-L156\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rowan/blob/a00ccb60ea99eccbc7f24d31ee83e925e0d8258d/src/green.rs#L151-L156\">https://github.com/rust-analyzer/rowan/blob/a00ccb60ea99eccbc7f24d31ee83e925e0d8258d/src/green.rs#L151-L156</a></p>",
        "id": 175635933,
        "sender_full_name": "matklad",
        "timestamp": 1568389038
    },
    {
        "content": "<p>^ interning</p>",
        "id": 175635943,
        "sender_full_name": "matklad",
        "timestamp": 1568389046
    },
    {
        "content": "<p>yeah I know but code being written exactly the same twice is not necessarily as likely</p>",
        "id": 175635983,
        "sender_full_name": "eddyb",
        "timestamp": 1568389075
    },
    {
        "content": "<p>That's true, but I am not sure we need more layers between \"parse tree\" and \"name resolves AST\"</p>",
        "id": 175636197,
        "sender_full_name": "matklad",
        "timestamp": 1568389207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> in terms of reading material, I'd say that <a href=\"https://github.com/apple/swift/tree/master/lib/Syntax\" target=\"_blank\" title=\"https://github.com/apple/swift/tree/master/lib/Syntax\">https://github.com/apple/swift/tree/master/lib/Syntax</a> is still the best concentrated source of info. The libsyntax2 RFCs is also still mostly relevant</p>",
        "id": 183374188,
        "sender_full_name": "matklad",
        "timestamp": 1576253797
    },
    {
        "content": "<p>@matklad <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I landed here from the design meeting log... if either of you is interested in documenting the parser for the rustc-guide (after refactorings) that would be awesome!</p>",
        "id": 183374300,
        "sender_full_name": "mark-i-m",
        "timestamp": 1576253872
    },
    {
        "content": "<p>There are no super good docs about how rust-analyzer syntax tree and parser works right now. I think it will be useful for me to write such a document, as I think we've almost reached the fixed point of the design</p>",
        "id": 183374367,
        "sender_full_name": "matklad",
        "timestamp": 1576253890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> you were interested in changing the number of people with shared knowledge of rustc + ra parsers/syntax trees. </p>\n<p>I think I can ramp up anybody pretty quickly regarging ra implementation. The only condition for success is that the person needs to implement some small feature for rust-analyzer, just to get the feeling of the real API</p>",
        "id": 183374493,
        "sender_full_name": "matklad",
        "timestamp": 1576253984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> documenting librustc_parse would probably be something for me then since I've sorta become the expert on that crate now</p>",
        "id": 183374599,
        "sender_full_name": "centril",
        "timestamp": 1576254045
    },
    {
        "content": "<p>I'm not sure what granularity you're seeking</p>",
        "id": 183374622,
        "sender_full_name": "centril",
        "timestamp": 1576254066
    },
    {
        "content": "<p>The source code is getting fairly well documented</p>",
        "id": 183374639,
        "sender_full_name": "centril",
        "timestamp": 1576254081
    },
    {
        "content": "<p>For <em>existing</em> reading material about rust-analyzer specifically, this API walkthrough tests is a good starting point: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4/crates/ra_syntax/src/lib.rs#L193\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4/crates/ra_syntax/src/lib.rs#L193\">https://github.com/rust-analyzer/rust-analyzer/blob/ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4/crates/ra_syntax/src/lib.rs#L193</a></p>",
        "id": 183374672,
        "sender_full_name": "matklad",
        "timestamp": 1576254101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> also, now that we've split librustc_parse into its own crate, things should probably get a bit easier</p>",
        "id": 183374838,
        "sender_full_name": "centril",
        "timestamp": 1576254196
    },
    {
        "content": "<blockquote>\n<p>I think it will be useful for me to write such a document,</p>\n</blockquote>\n<p>Hm, <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> , what about this deal: <strong>you</strong> write this document, but I am obliged to answer all your questions, give required screen-sharing sessions, etc? :)</p>",
        "id": 183374955,
        "sender_full_name": "matklad",
        "timestamp": 1576254250
    },
    {
        "content": "<p>maybe I should join in on that</p>",
        "id": 183375026,
        "sender_full_name": "centril",
        "timestamp": 1576254302
    },
    {
        "content": "<p>(the goal here is not to save my work, but to forcefully dissipate knowledge)</p>",
        "id": 183375053,
        "sender_full_name": "matklad",
        "timestamp": 1576254322
    },
    {
        "content": "<p>I want in too</p>",
        "id": 183375065,
        "sender_full_name": "qmx",
        "timestamp": 1576254329
    },
    {
        "content": "<p>That would be interesting, I just don't know what my availability will be ^_^</p>",
        "id": 183375076,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1576254336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> right; and it would be good if e.g. <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> also were in on it</p>",
        "id": 183375153,
        "sender_full_name": "centril",
        "timestamp": 1576254369
    },
    {
        "content": "<p>maybe not the writing, but also understanding RA</p>",
        "id": 183375180,
        "sender_full_name": "centril",
        "timestamp": 1576254392
    },
    {
        "content": "<p>Once we have the doc, anyone should be able to understand how syntax works</p>",
        "id": 183375213,
        "sender_full_name": "matklad",
        "timestamp": 1576254416
    },
    {
        "content": "<p>but I may have questions also, which is why I want in ^^</p>",
        "id": 183375246,
        "sender_full_name": "centril",
        "timestamp": 1576254448
    },
    {
        "content": "<p>I think it makes sense if there's a single <em>core</em> person, who is in charge of understanding everything and putting it down to paper.  This can be me (as I've already did the first half), or somebody else. I estimate the amount of work here as 1 day.</p>\n<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> , <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> who wants to make a commitment here? :)</p>",
        "id": 183375614,
        "sender_full_name": "matklad",
        "timestamp": 1576254685
    },
    {
        "content": "<p>I can try, but again, I won't be available until the upcoming year</p>",
        "id": 183383757,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1576260451
    },
    {
        "content": "<p>I am starting with an old-school markdown document: <a href=\"https://hackmd.io/XoQrzR8GRLa64jpjylQ7Bw\" target=\"_blank\" title=\"https://hackmd.io/XoQrzR8GRLa64jpjylQ7Bw\">https://hackmd.io/XoQrzR8GRLa64jpjylQ7Bw</a></p>",
        "id": 185224466,
        "sender_full_name": "matklad",
        "timestamp": 1578585094
    },
    {
        "content": "<p>I've run out of steam for today (and will be running to my German class), so, if you have time, it's a good time to comment on what's not clear so far (and point/correct uncountable number of typos :) )</p>",
        "id": 185237750,
        "sender_full_name": "matklad",
        "timestamp": 1578592628
    },
    {
        "content": "<p>cool, I'll do a review pass</p>",
        "id": 185241653,
        "sender_full_name": "qmx",
        "timestamp": 1578595112
    },
    {
        "content": "<p>thanks for the write-up, it's great even in draft form</p>",
        "id": 185241673,
        "sender_full_name": "qmx",
        "timestamp": 1578595126
    },
    {
        "content": "<p>Finished the second part about parsing.</p>",
        "id": 185312514,
        "sender_full_name": "matklad",
        "timestamp": 1578665455
    },
    {
        "content": "<p>I'll draft a concrete proposal for librari-ification, which I hope to dedicate a t-compiler design meeting to: <a href=\"https://hackmd.io/ifjST_Y4R-SQ0AWiEcU6FQ\" target=\"_blank\" title=\"https://hackmd.io/ifjST_Y4R-SQ0AWiEcU6FQ\">https://hackmd.io/ifjST_Y4R-SQ0AWiEcU6FQ</a></p>",
        "id": 185312575,
        "sender_full_name": "matklad",
        "timestamp": 1578665515
    },
    {
        "content": "<p>I only fixed a typo on the first review pass</p>",
        "id": 185321639,
        "sender_full_name": "qmx",
        "timestamp": 1578671330
    },
    {
        "content": "<p>lemme read the second part</p>",
        "id": 185321649,
        "sender_full_name": "qmx",
        "timestamp": 1578671335
    },
    {
        "content": "<p>it feels to me that the Parser section was a little bit more abstract than the rest , but it still reads good</p>",
        "id": 185324733,
        "sender_full_name": "qmx",
        "timestamp": 1578673186
    },
    {
        "content": "<p>I'll try to read the code around Sink and Source to see if things get a little bit clearer to me (might be my lack of exposure to the rust-analyzer code)</p>",
        "id": 185325335,
        "sender_full_name": "qmx",
        "timestamp": 1578673543
    },
    {
        "content": "<p>Finished proposal and submitted a meeting proposal</p>",
        "id": 185340096,
        "sender_full_name": "matklad",
        "timestamp": 1578682899
    }
]