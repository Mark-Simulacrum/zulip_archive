[
    {
        "content": "<p>I discovered this when trying to print fn address, issue at <a href=\"https://github.com/rust-lang/rust/issues/75239\">#75239</a><br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0b9f2e9d8623576f54350c09d41bf8d6\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0b9f2e9d8623576f54350c09d41bf8d6</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:p}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Left</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:p}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>stdout:</p>\n<div class=\"codehilite\"><pre><span></span><code>0x565408422000\n0x565408422000\n</code></pre></div>\n\n\n<p>Is this behaviour expected and documented elsewhere?<br>\ncc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 206261968,
        "sender_full_name": "lzutao",
        "timestamp": 1596809862
    },
    {
        "content": "<p>it's not guarenteed to be stable AFAIK</p>",
        "id": 206262223,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596809963
    },
    {
        "content": "<p>llvm sometimes deduplicates functions if they are the same</p>",
        "id": 206262287,
        "sender_full_name": "lcnr",
        "timestamp": 1596809992
    },
    {
        "content": "<p>it's the address of a local variable, though in this case it looks like it might be promoted?</p>",
        "id": 206262290,
        "sender_full_name": "simulacrum",
        "timestamp": 1596809995
    },
    {
        "content": "<p>i think there is an open issue somewhere</p>",
        "id": 206262340,
        "sender_full_name": "lcnr",
        "timestamp": 1596810003
    },
    {
        "content": "<p>note that in this case they'd have different return values, and this is <em>not</em> printing the address of the function</p>",
        "id": 206262381,
        "sender_full_name": "simulacrum",
        "timestamp": 1596810022
    },
    {
        "content": "<p>oh, I misread</p>",
        "id": 206262445,
        "sender_full_name": "lcnr",
        "timestamp": 1596810061
    },
    {
        "content": "<p>both <code>bar</code> and <code>size_of::&lt;Left&gt;</code> are ZST</p>",
        "id": 206262491,
        "sender_full_name": "lcnr",
        "timestamp": 1596810080
    },
    {
        "content": "<p>so the pointers just point into the void <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 206262510,
        "sender_full_name": "lcnr",
        "timestamp": 1596810089
    },
    {
        "content": "<p>maybe that's it...</p>",
        "id": 206262516,
        "sender_full_name": "lcnr",
        "timestamp": 1596810096
    },
    {
        "content": "<p>if so, is <code>&amp;fn</code> actually useful?</p>",
        "id": 206262915,
        "sender_full_name": "lzutao",
        "timestamp": 1596810294
    },
    {
        "content": "<p>you need <code>&amp;fn as *const ()</code></p>",
        "id": 206262950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596810310
    },
    {
        "content": "<p>er, no</p>",
        "id": 206262964,
        "sender_full_name": "simulacrum",
        "timestamp": 1596810319
    },
    {
        "content": "<p>you want <code>fn as *const () as usize</code> or so</p>",
        "id": 206262980,
        "sender_full_name": "simulacrum",
        "timestamp": 1596810327
    },
    {
        "content": "<p><a href=\"https://gitlab.com/YottaDB/Lang/YDBRust/-/blob/master/src/simple_api/mod.rs#L1866\">https://gitlab.com/YottaDB/Lang/YDBRust/-/blob/master/src/simple_api/mod.rs#L1866</a></p>",
        "id": 206263009,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596810335
    },
    {
        "content": "<p>yeah, what <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> said</p>",
        "id": 206263029,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596810346
    },
    {
        "content": "<p>if <code>&amp;fn</code> is not useful, does it make sense to make a lint about using it?</p>",
        "id": 206263162,
        "sender_full_name": "lzutao",
        "timestamp": 1596810402
    },
    {
        "content": "<p>I think that's a great idea</p>",
        "id": 206263245,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596810467
    },
    {
        "content": "<p>hm well that's not quite true</p>",
        "id": 206263318,
        "sender_full_name": "simulacrum",
        "timestamp": 1596810486
    },
    {
        "content": "<p>there are times when you want a pointer to a pointer</p>",
        "id": 206263336,
        "sender_full_name": "simulacrum",
        "timestamp": 1596810492
    },
    {
        "content": "<p>e.g., if you want <code>dyn Fn()</code> from a function pointer</p>",
        "id": 206263363,
        "sender_full_name": "simulacrum",
        "timestamp": 1596810509
    },
    {
        "content": "<p>in any case I'd start with a clippy lint</p>",
        "id": 206263384,
        "sender_full_name": "simulacrum",
        "timestamp": 1596810528
    },
    {
        "content": "<p>I think the lint should be about using pointers to a ZST</p>",
        "id": 206264540,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811066
    },
    {
        "content": "<p>well, I guess that's not quite right since <code>*const ()</code> is also a ZST ... maybe about using pointers to function items instead of function pointers?</p>",
        "id": 206264611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811097
    },
    {
        "content": "<p>I've never really understood why functions decay to pointers to function items instead of function pointers</p>",
        "id": 206264731,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811156
    },
    {
        "content": "<p>hm?</p>",
        "id": 206264810,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811192
    },
    {
        "content": "<p>what do you mean pointers to function items?</p>",
        "id": 206264826,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811201
    },
    {
        "content": "<p>if you use <code>f</code> in an expression context, it will not have a meaningful address</p>",
        "id": 206264987,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811267
    },
    {
        "content": "<p>e.g. the transmute in the link I posted</p>",
        "id": 206265010,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811276
    },
    {
        "content": "<p>you need to use <code>f as *const ()</code> for it to be useful</p>",
        "id": 206265023,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811286
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/reference/types/function-item.html#function-item-types\">https://doc.rust-lang.org/reference/types/function-item.html#function-item-types</a></p>",
        "id": 206265060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811305
    },
    {
        "content": "<p>er, right, because functions have a unique type (which is actually good)</p>",
        "id": 206265061,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811305
    },
    {
        "content": "<p>you want that for things like <code>[].iter().map(std::convert::identity)</code> to not need to de-virtualize</p>",
        "id": 206265148,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811333
    },
    {
        "content": "<p>I think using it in a context that doesn't expect <code>Fn</code> should be a lint, then</p>",
        "id": 206265297,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811424
    },
    {
        "content": "<p>e.g. <code>map(f)</code> is fine, but <code>transmute(f)</code> or <code>f == f</code>should be a lint</p>",
        "id": 206265333,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811442
    },
    {
        "content": "<p>hm well, perhaps</p>",
        "id": 206265382,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811454
    },
    {
        "content": "<p>though... I would expect it to not compile in almost all other contexts?</p>",
        "id": 206265403,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811468
    },
    {
        "content": "<p>well clearly it does <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> hence <span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> posted his question</p>",
        "id": 206265441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811485
    },
    {
        "content": "<p>That code sample doesn't do anything but take a reference though</p>",
        "id": 206265479,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811516
    },
    {
        "content": "<p>and we can't know what you're going to do with that reference</p>",
        "id": 206265495,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811525
    },
    {
        "content": "<p>clippy could walk the HIR, couldn't it?</p>",
        "id": 206265564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811561
    },
    {
        "content": "<p>I'd expect this to be a clippy lint, not in rustc itself</p>",
        "id": 206265614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811568
    },
    {
        "content": "<p>I mean <em>maybe</em> but it'd be hard</p>",
        "id": 206265626,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811575
    },
    {
        "content": "<p>or at least it feels hard :)</p>",
        "id": 206265673,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811598
    },
    {
        "content": "<p>well, fair enough :P but I think it would be worthwhile, that 6 line comment came about because I spent an hour debugging a segfault</p>",
        "id": 206265916,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811701
    },
    {
        "content": "<p>I mean that's sort of on you in some sense when you write unsafe code, and don't verify what you're taking a pointer to :)</p>",
        "id": 206266036,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811764
    },
    {
        "content": "<p>but you're not wrong</p>",
        "id": 206266040,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811768
    },
    {
        "content": "<p>it might be interesting to special-case converting a &amp;T where T is a ZST to a <code>*const</code> as a warning, though it would need to be post-monomorphization which is not great.</p>",
        "id": 206266171,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811821
    },
    {
        "content": "<p>I don't know that there needs to be a change in behavior, that seems much more risky haha</p>",
        "id": 206266253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811872
    },
    {
        "content": "<p>but a lint 'this doesn't do what you think it does' would have been <em>very</em> helpful</p>",
        "id": 206266276,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811884
    },
    {
        "content": "<p>I didn't say anything about behavior change?</p>",
        "id": 206266303,
        "sender_full_name": "simulacrum",
        "timestamp": 1596811901
    },
    {
        "content": "<p>oh oh I misread</p>",
        "id": 206266330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596811913
    },
    {
        "content": "<p>beyond the fact that <code>&amp;fn()</code> is a ptr-to-ptr, it is also the case that different functions can have the same address and the same function can have different addresses. see e.g. <a href=\"https://github.com/rust-lang/rust/issues/54685\">https://github.com/rust-lang/rust/issues/54685</a>, <a href=\"https://github.com/rust-lang/rust/issues/70861\">https://github.com/rust-lang/rust/issues/70861</a>.</p>",
        "id": 206336780,
        "sender_full_name": "RalfJ",
        "timestamp": 1596872044
    },
    {
        "content": "<p>Off-topic: according to <a href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">https://doc.rust-lang.org/nightly/std/primitive.fn.html</a> , <code>fn() -&gt; usize</code> also implements <code>fmt::Pointer</code> trait.<br>\nWhy I cannot print it with <code>{:p}</code> format directly but having to cast to <code>*const ()</code> ?<br>\nif I cannot, what does Pointer do ?</p>",
        "id": 206342258,
        "sender_full_name": "lzutao",
        "timestamp": 1596882650
    },
    {
        "content": "<p>Are you sure you tried to print a function pointer (<code>fn()</code>) and not a function item (<code>fn() { function_name }</code>)? Did you explicitly cast it to a function pointer? (<code>println!(\"{:p}\", function_name as fn());</code>)</p>",
        "id": 206342790,
        "sender_full_name": "bjorn3",
        "timestamp": 1596883690
    },
    {
        "content": "<p>You always get exactly one chance for an implicit coercion to happen. If rustc didn't think it was necessary at that point, it won't ever try again.</p>",
        "id": 206342818,
        "sender_full_name": "bjorn3",
        "timestamp": 1596883764
    },
    {
        "content": "<p>I'm confused. If <code>bar</code> is a function item, is <code>&amp;bar</code> a function pointer/reference?</p>",
        "id": 206343849,
        "sender_full_name": "lzutao",
        "timestamp": 1596885616
    },
    {
        "content": "<p><code>&amp;bar</code> should be a reference to a function item</p>",
        "id": 206344082,
        "sender_full_name": "lcnr",
        "timestamp": 1596886099
    },
    {
        "content": "<p>so a reference to a ZST</p>",
        "id": 206344085,
        "sender_full_name": "lcnr",
        "timestamp": 1596886108
    },
    {
        "content": "<p>unless coercion happens, in which case <code>&amp;bar</code> is a reference to a function pointer afaik</p>",
        "id": 206344093,
        "sender_full_name": "lcnr",
        "timestamp": 1596886130
    },
    {
        "content": "<p>Thank you. I got it. Although I expect most people would fall in the same trap like me.<br>\nOr at least all C/C++ developers would expect <code>bar</code> to be a function pointer.<br>\nI don't blame anyone. It is just confusing. The compiler and the book seems like not helping to explain things.</p>",
        "id": 206344572,
        "sender_full_name": "lzutao",
        "timestamp": 1596887135
    },
    {
        "content": "<p>Yeah it is confusing. the expression <code>bar</code> is a \"singleton type\", a ZST, representing the particular function <code>bar</code>. that singleton type coerces to a function pointer.</p>",
        "id": 206391620,
        "sender_full_name": "RalfJ",
        "timestamp": 1596973720
    },
    {
        "content": "<p>feel free to submit PRs or report issues if you find concrete places that you think could explain this better :)</p>",
        "id": 206391626,
        "sender_full_name": "RalfJ",
        "timestamp": 1596973737
    }
]