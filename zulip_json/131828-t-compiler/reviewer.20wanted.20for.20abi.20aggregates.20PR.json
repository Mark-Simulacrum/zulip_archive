[
    {
        "content": "<p>So I put <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> as reviewer for <a href=\"https://github.com/rust-lang/rust/pull/57645\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57645\">https://github.com/rust-lang/rust/pull/57645</a>, but I'm not sure if they're super busy or what. I was wondering if <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> you might want to review it?</p>",
        "id": 156392165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547838757
    },
    {
        "content": "<p>while I do have a fairly extensive knowledge of ARM/AARCH ABIs, I have no idea how they ought to behave in presence of ZSTs and I haven’t been following the issue too closely.</p>",
        "id": 156395689,
        "sender_full_name": "nagisa",
        "timestamp": 1547841859
    },
    {
        "content": "<p>Hmm. I wonder who might be good. <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> or <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span>, perhaps? =)</p>",
        "id": 156395975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547842155
    },
    {
        "content": "<p>tbh I don't claim a <em>deep</em> knowledge, I'm kind of going on what arielb1 wrote + a dash of \"instinct\"</p>",
        "id": 156395984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547842173
    },
    {
        "content": "<p>though the rules seem to make logical sense, which might be a red flag <span class=\"emoji emoji-1f6a9\" title=\"triangular flag\">:triangular_flag:</span></p>",
        "id": 156395990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547842188
    },
    {
        "content": "<p>i.e., it seems like variable-length arrays <em>ought</em> to disable the homogeneous aggregate check, since they indicate data that you can't \"see\"</p>",
        "id": 156396049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547842215
    },
    {
        "content": "<blockquote>\n<p>tbh I don't claim a <em>deep</em> knowledge, I'm kind of going on what arielb1 wrote + a dash of \"instinct\"</p>\n</blockquote>\n<p>that said, I did add explicit tests for a variety of cases where we are matching the (experimentally detected) behavior on clang</p>",
        "id": 156396073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547842265
    },
    {
        "content": "<p>so at least from a certain \"black box\" perspective, seems good</p>",
        "id": 156396076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547842274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> thanks for the review BTW.</p>",
        "id": 156642379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193350
    },
    {
        "content": "<p>or at least \"once over\"</p>",
        "id": 156642390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193362
    },
    {
        "content": "<p>Curious to get feedback on <a href=\"https://github.com/rust-lang/rust/issues/56877#issuecomment-456436520\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56877#issuecomment-456436520\">this comment</a>.</p>",
        "id": 156642529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193474
    },
    {
        "content": "<blockquote>\n<p>Curious to get feedback on <a href=\"https://github.com/rust-lang/rust/issues/56877#issuecomment-456436520\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56877#issuecomment-456436520\">this comment</a>.</p>\n</blockquote>\n<p>I think we should just deal with pantomdata for now and leave arrays for another day</p>",
        "id": 156642730,
        "sender_full_name": "nagisa",
        "timestamp": 1548193646
    },
    {
        "content": "<p>FWIW another thing I’ve found out that <code>[T; N]</code> as passed by value is not actually representable in C currently.</p>",
        "id": 156642753,
        "sender_full_name": "nagisa",
        "timestamp": 1548193681
    },
    {
        "content": "<p>i.e. you cannot declare <code>fn foo(x: [u8; 128])</code> in C. At all.</p>",
        "id": 156642836,
        "sender_full_name": "nagisa",
        "timestamp": 1548193720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> so -- basically we filter out zero-sized, repr-rust things only?</p>",
        "id": 156642877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193753
    },
    {
        "content": "<p>and if you have e.g. a zero-sized C struct</p>",
        "id": 156642904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193779
    },
    {
        "content": "<p>we still consider the resulting thing not homogeneous</p>",
        "id": 156642912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193789
    },
    {
        "content": "<p>i.e.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">u8</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// not homogeneous because `f`</span>\n</pre></div>",
        "id": 156642981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193816
    },
    {
        "content": "<p>but</p>",
        "id": 156642990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193821
    },
    {
        "content": "<p>I guess. I’m not entirely clear what behaviour really zero sized repr(C) should imply, because C does not allow declaring zero-sized structs AFAIK.</p>",
        "id": 156643000,
        "sender_full_name": "nagisa",
        "timestamp": 1548193829
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">u8</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// homogeneous, because `Foo` is repr(rust)</span>\n</pre></div>",
        "id": 156643012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193839
    },
    {
        "content": "<blockquote>\n<p>I guess. I’m not entirely clear what behaviour really zero sized repr(C) should imply, because C does not allow declaring zero-sized structs AFAIK.</p>\n</blockquote>\n<p>clang and gcc support them via extension</p>",
        "id": 156643017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193848
    },
    {
        "content": "<p>(and they are filtered out when considered homogeneous aggregates, afaik)</p>",
        "id": 156643045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193867
    },
    {
        "content": "<p>however, I agree they are rare and weird</p>",
        "id": 156643054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193871
    },
    {
        "content": "<p>also, C++ and C differ</p>",
        "id": 156643061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193877
    },
    {
        "content": "<p>we've traditionally \"sided\" with C here though</p>",
        "id": 156643068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193888
    },
    {
        "content": "<p>okay, so in that case we should match that, I guess. Not sure how much we want to support C <em>extensions</em>.</p>",
        "id": 156643079,
        "sender_full_name": "nagisa",
        "timestamp": 1548193899
    },
    {
        "content": "<p>(C++ excludes zero-sized things, recasting them as requiring at least one byte)</p>",
        "id": 156643083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193903
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 156643095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193913
    },
    {
        "content": "<p>Still, I think if we're going to give it semantics, then matching gcc is good, presuming gcc is not doing something crazy.</p>",
        "id": 156643157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193929
    },
    {
        "content": "<p>The annoying thing is that we can't <em>not</em> give it semantics</p>",
        "id": 156643164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193935
    },
    {
        "content": "<p>i.e., we have to generate <em>some</em> code :)</p>",
        "id": 156643171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193942
    },
    {
        "content": "<p>but otoh I think it's kind of rare and we have room to change things here as long as we're sort of generally making more things work</p>",
        "id": 156643194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193961
    },
    {
        "content": "<p>(e.g., we're changing things <em>right now</em>)</p>",
        "id": 156643208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193978
    },
    {
        "content": "<p>anyway I'm definitely game to land a repr-rust-only PR to start</p>",
        "id": 156643229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548193997
    },
    {
        "content": "<p>we can always expand to more cases</p>",
        "id": 156643235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548194004
    },
    {
        "content": "<p>(it does seem like we need a way to declare \"flexible array\", though)</p>",
        "id": 156643250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548194015
    },
    {
        "content": "<p>Absolutely. That pattern is very common in C code.</p>",
        "id": 156643263,
        "sender_full_name": "nagisa",
        "timestamp": 1548194035
    },
    {
        "content": "<p>hmm, I guess filtering down to \"just repr-rust\" will be a bit trickier than I thought</p>",
        "id": 156643446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548194158
    },
    {
        "content": "<p>I have to add some flags or something</p>",
        "id": 156643453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548194162
    },
    {
        "content": "<p>basically something like the <code>has_vla</code> flag but simpler</p>",
        "id": 156643538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548194203
    },
    {
        "content": "<p>(because the code in question doesn't really know what <em>types</em> it is looking at)</p>",
        "id": 156643584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548194251
    },
    {
        "content": "<p>That PR ended up being very clean, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>!</p>",
        "id": 156863715,
        "sender_full_name": "nagisa",
        "timestamp": 1548433216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> yes, it came out nice -- in part because we did the simple thing :)</p>",
        "id": 156873734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548441878
    },
    {
        "content": "<p>Hey, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , can I get a quick clarification about a <a href=\"https://github.com/rust-lang/rust/pull/57645/files#diff-3a730665c4c7b9d276f4566c9d1fa832R3\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57645/files#diff-3a730665c4c7b9d276f4566c9d1fa832R3\">comment</a> in a test from that PR ?</p>",
        "id": 158612041,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550235432
    },
    {
        "content": "<p>in particular, I am trying to figure out the intent of the word \"ignore\" in \"Show that <code>homogeneous_aggregate</code> code ignores zero-length arrays.\"</p>",
        "id": 158612108,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550235485
    },
    {
        "content": "<p>I had thought the intent was that a zero-length array field would <em>not</em> be filtered out, at least not yet, in the homogenous aggregate check. And from what I can tell, that test is encoding my expectation.</p>",
        "id": 158612143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550235542
    },
    {
        "content": "<p>oh, wait, no, that test is not encoding my expectation</p>",
        "id": 158612171,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550235583
    },
    {
        "content": "<p>(I misunderstood because the test embeds an \"error message\", but that is just an artifact of how we are exposing the layout for the test via <code>#[rustc_layout(..)]</code></p>",
        "id": 158612243,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550235630
    },
    {
        "content": "<p>Okay so now after re-reading the comment thread on PR <a href=\"https://github.com/rust-lang/rust/issues/56877\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56877\">#56877</a> I guess you <em>did</em> settle on filtering out all ZSTs, not just the Rust ones.</p>",
        "id": 158612290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550235691
    },
    {
        "content": "<p>(posted summary of my understanding in the description of newly filed issue <a href=\"https://github.com/rust-lang/rust/issues/58487\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58487\">#58487</a> )</p>",
        "id": 158612708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550236140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yes, this changed back and forth a few times so I can't blame you for being confused. But in my last conversation with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> we settled on \"just screen out ZSTs\"</p>",
        "id": 158638659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256565
    },
    {
        "content": "<p>yay zulip only took half a minute to get me here</p>",
        "id": 158639472,
        "sender_full_name": "eddyb",
        "timestamp": 1550257189
    },
    {
        "content": "<p>yeah the ZST case where it's <code>T data[];</code> at the end of a struct is unrepresentable in Rust, and that doesn't make much sense for by-value passing anyway, so we should be free to ignore ZSTs</p>",
        "id": 158639637,
        "sender_full_name": "eddyb",
        "timestamp": 1550257290
    }
]