[
    {
        "content": "<p>How does specialization currently interact with inference? Not knowing much about the internals of inference, it <em>feels</em> like only the generic impl need be taken into account, as the specialized impls are inherently subsumed by it type-wise (the resolver should handle it, not inference, is my thought).</p>\n<p>I ask because I was trying to make a change to a stdlib type, but would need specialization to avoid a significant regression in runtime performance among existing code. Unfortunately, the inference fails when I add the specialization, which I believe to be a case of <a href=\"https://github.com/rust-lang/rust/issues/46363\">rust-lang/rust#46363</a>. If the specialized impls functionally ignored for inference purposes, this issue wouldn't existâ€¦I think.</p>",
        "id": 232724103,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617267410
    },
    {
        "content": "<p>Looks like I'm not the first one to expect specialization to not affect inference either: <a href=\"https://github.com/rust-lang/rust/issues/36262\">rust-lang/rust#36262</a></p>",
        "id": 232724502,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617267629
    },
    {
        "content": "<p>Specialized impls are not ignored for inference (the same code is used for both inference and codegen).</p>",
        "id": 232724506,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1617267631
    },
    {
        "content": "<p>Is there any way to work around this? I suspect not, but you never know. The code I was trying to write is functionally identical to the first example in <a href=\"https://github.com/rust-lang/rust/issues/36262\">#36262</a></p>",
        "id": 232724926,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617267844
    },
    {
        "content": "<p>I didn't realize that the same code was used for inference and codegen, though. That would certainly explain things to an extent.</p>",
        "id": 232724991,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617267884
    },
    {
        "content": "<p>Use a private trait for specialization?</p>",
        "id": 232725010,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1617267894
    },
    {
        "content": "<p>And then fully qualify the paths.</p>",
        "id": 232725062,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1617267923
    },
    {
        "content": "<p>As in create an identical trait locally, then just delegate the methods in the public trait?</p>",
        "id": 232725134,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617267960
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/std-dev-guide/blob/master/src/code-considerations/using-unstable-lang/specialization.md\">https://github.com/rust-lang/std-dev-guide/blob/master/src/code-considerations/using-unstable-lang/specialization.md</a></p>",
        "id": 232725358,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1617268060
    },
    {
        "content": "<p>So basically! I'll give it a shot. Thanks for the info!</p>",
        "id": 232725515,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1617268134
    }
]