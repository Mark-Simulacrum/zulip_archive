[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> =)</p>",
        "id": 168137240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560520878
    },
    {
        "content": "<p>just got here!</p>",
        "id": 168137263,
        "sender_full_name": "eddyb",
        "timestamp": 1560520894
    },
    {
        "content": "<p>Today we had scheduled to discuss <a href=\"https://github.com/rust-lang/compiler-team/issues/104\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/104\">compiler-team#104</a></p>",
        "id": 168137281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560520918
    },
    {
        "content": "<p>I'll go fix <a href=\"https://github.com/rust-lang/rust/pull/61817#issuecomment-501948291\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61817#issuecomment-501948291\">https://github.com/rust-lang/rust/pull/61817#issuecomment-501948291</a> now</p>",
        "id": 168137336,
        "sender_full_name": "eddyb",
        "timestamp": 1560520928
    },
    {
        "content": "<ul>\n<li><strong>Title:</strong> Planning the <code>'gcx, 'tcx</code> transition</li>\n<li><strong>Type:</strong> technical</li>\n<li><strong>Proposed by:</strong> @nikomatsakis (but cc @eddyb, @Zoxc)</li>\n<li><strong>Link:</strong> <a href=\"https://hackmd.io/vtYAICC-SpqgwByjS_E_Uw\" target=\"_blank\" title=\"https://hackmd.io/vtYAICC-SpqgwByjS_E_Uw\">hackmd document here</a></li>\n<li><strong>Scheduled dates for discussion:</strong><ul>\n<li>2019-06-14</li>\n</ul>\n</li>\n</ul>",
        "id": 168137340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560520936
    },
    {
        "content": "<p>Step 1) Merge <a href=\"https://github.com/rust-lang/rust/pull/61817\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61817\">https://github.com/rust-lang/rust/pull/61817</a><br>\nStep 2) Done? =P</p>",
        "id": 168137372,
        "sender_full_name": "Zoxc",
        "timestamp": 1560520971
    },
    {
        "content": "<p>well in principle I guess we wanted to check whether this is the final product</p>",
        "id": 168137397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560520993
    },
    {
        "content": "<p>there were musings about e.g. renaming the variables</p>",
        "id": 168137404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560521002
    },
    {
        "content": "<p>(to <code>cx</code> or <code>db</code> or what not)</p>",
        "id": 168137418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560521014
    },
    {
        "content": "<p>Yeah so I think the technical questions of how to do the merge have largely been resolved but</p>",
        "id": 168137419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521015
    },
    {
        "content": "<p>so, I was going to take a gradual approach</p>",
        "id": 168137428,
        "sender_full_name": "eddyb",
        "timestamp": 1560521020
    },
    {
        "content": "<p>(a) do we just want to let PRs bitrot? (I think yes)</p>",
        "id": 168137444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521030
    },
    {
        "content": "<p>but it'd be good if we advice for authors</p>",
        "id": 168137461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521040
    },
    {
        "content": "<p>on how to update</p>",
        "id": 168137503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521045
    },
    {
        "content": "<p>but since it's possible to do it uniformly, in-place, I think we should separate getting to <code>tcx: TyCtxt&lt;'tcx&gt;</code> from renaming it in the future</p>",
        "id": 168137509,
        "sender_full_name": "eddyb",
        "timestamp": 1560521049
    },
    {
        "content": "<p>We already broke PRs by removing <code>'a</code> from <code>TyCtxt</code></p>",
        "id": 168137510,
        "sender_full_name": "Zoxc",
        "timestamp": 1560521052
    },
    {
        "content": "<p>that doesn't invalidate what I wrote :)</p>",
        "id": 168137519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521060
    },
    {
        "content": "<p>the rustc guide should be updated ASAP</p>",
        "id": 168137532,
        "sender_full_name": "eddyb",
        "timestamp": 1560521071
    },
    {
        "content": "<p>and (b) let's talk a bit about the ultimate naming and conventions we want, I think?</p>",
        "id": 168137554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521086
    },
    {
        "content": "<p>But let's start with (a) ?</p>",
        "id": 168137559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521092
    },
    {
        "content": "<p>I think renaming <code>TyCtxt</code> to <code>QueryCtxt</code> makes sense. And it make make sense to do it now, since we brake PRs anyway</p>",
        "id": 168137560,
        "sender_full_name": "Zoxc",
        "timestamp": 1560521092
    },
    {
        "content": "<p>I think what would be useful is</p>",
        "id": 168137572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521100
    },
    {
        "content": "<p>well hmm I wonder if we can do it without knowing our end state.. I think it'd be useful to have some tracking issue showing the steps for the transition</p>",
        "id": 168137605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521121
    },
    {
        "content": "<p>and giving some advice -- it seems like eddyb  did the work by some brute force search and replace</p>",
        "id": 168137624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521134
    },
    {
        "content": "<p>so just copying and pasting those steps is what I have in mind</p>",
        "id": 168137631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521139
    },
    {
        "content": "<p>(so others can do them on their code)</p>",
        "id": 168137639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521147
    },
    {
        "content": "<p>note that these changes were hard because they're not just alpha renames, the type parametrization changes :P</p>",
        "id": 168137700,
        "sender_full_name": "eddyb",
        "timestamp": 1560521171
    },
    {
        "content": "<p>Say a bit more?</p>",
        "id": 168137725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521187
    },
    {
        "content": "<p>ah I see, you mean fixing their PRs, not renaming the contexts in the future</p>",
        "id": 168137741,
        "sender_full_name": "eddyb",
        "timestamp": 1560521198
    },
    {
        "content": "<p>right so we've already landed the <code>'a</code> removal PR --</p>",
        "id": 168137771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521222
    },
    {
        "content": "<p>so the fix for that is basically .. rewrite <code>TyCtxt&lt;'_, ...&gt;</code> to <code>TyCtxt&lt;...&gt;</code></p>",
        "id": 168137784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521234
    },
    {
        "content": "<p>I suspect, however, that most conflicts would be fixed by simply reacting to compiler errors</p>",
        "id": 168137789,
        "sender_full_name": "eddyb",
        "timestamp": 1560521238
    },
    {
        "content": "<p>once we land the next PR, there are some more rewrites?</p>",
        "id": 168137795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521244
    },
    {
        "content": "<p>most PRs don't touch signatures that much</p>",
        "id": 168137804,
        "sender_full_name": "eddyb",
        "timestamp": 1560521251
    },
    {
        "content": "<blockquote>\n<p>I suspect, however, that most conflicts would be fixed by simply reacting to compiler errors</p>\n</blockquote>\n<p>well having context for what was done is really helpful</p>",
        "id": 168137806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521253
    },
    {
        "content": "<p>right, I just mean, you don't need my mass-replacement tricks, you can just go <code>TyCtxt&lt;?, ?, 'tcx&gt;</code> -&gt; <code>TyCtxt&lt;'tcx&gt;</code> and you're good to go</p>",
        "id": 168137899,
        "sender_full_name": "eddyb",
        "timestamp": 1560521298
    },
    {
        "content": "<p>so at least for the historical record <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can you highlight the steps that have happened thus far, up to and including <a href=\"https://github.com/rust-lang/rust/pull/61817\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61817\">https://github.com/rust-lang/rust/pull/61817</a> ?</p>",
        "id": 168137904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521300
    },
    {
        "content": "<p>right, ok</p>",
        "id": 168137923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521317
    },
    {
        "content": "<p>makes sense</p>",
        "id": 168137926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521321
    },
    {
        "content": "<p>we've banned unused lifetimes: <a href=\"https://github.com/rust-lang/rust/issues/61735\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61735\">#61735</a> (this means that when you replace uses of a lifetime you'll also be directed to remove its definition, if explicit)</p>",
        "id": 168137949,
        "sender_full_name": "eddyb",
        "timestamp": 1560521343
    },
    {
        "content": "<p>at the moment, <code>lift</code> is still a thing -- I'm trying to remember -- I guess there are no other massive simplifications yet?</p>",
        "id": 168137953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521344
    },
    {
        "content": "<p>/me takes some notes in the hackmd</p>",
        "id": 168137982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521363
    },
    {
        "content": "<p>(what was the PR that removed the <code>'a</code> from <code>TyCtxt</code>?)</p>",
        "id": 168138033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521402
    },
    {
        "content": "<p>you're too fast for me!</p>",
        "id": 168138066,
        "sender_full_name": "eddyb",
        "timestamp": 1560521410
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61722\">https://github.com/rust-lang/rust/pull/61722</a></p>",
        "id": 168138085,
        "sender_full_name": "Zoxc",
        "timestamp": 1560521426
    },
    {
        "content": "<p>we've removed the first lifetime of <code>TyCtxt</code>: <a href=\"https://github.com/rust-lang/rust/issues/61722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61722\">#61722</a> - affected PRs need to do the same, and simply remove unused lifetimes after that</p>",
        "id": 168138097,
        "sender_full_name": "eddyb",
        "timestamp": 1560521436
    },
    {
        "content": "<p>and finally, <a href=\"https://github.com/rust-lang/rust/issues/61817\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61817\">#61817</a> requires replacing <code>'gcx</code> lifetimes with <code>'tcx</code> ones, and passing one less lifetime when <code>'gcx, 'tcx</code> was previously taken</p>",
        "id": 168138189,
        "sender_full_name": "eddyb",
        "timestamp": 1560521501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> one guiding principle is that when adapting your code past this PR you <em>should never</em> need to introduce a new lifetime, you're only removing them</p>",
        "id": 168138280,
        "sender_full_name": "eddyb",
        "timestamp": 1560521534
    },
    {
        "content": "<ul>\n<li>PRs thus far:<br>\n    - ban unused lifetimes: <a href=\"https://github.com/rust-lang/rust/pull/61722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61722\">#61735</a><br>\n    - remove the <code>'a</code> <a href=\"https://github.com/rust-lang/rust/pull/61722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61722\">#61722</a><br>\n    - centralize to <code>TyCtxt&lt;'tcx&gt;</code> <a href=\"https://github.com/rust-lang/rust/pull/61817\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61817\">#61817</a></li>\n<li>So, to make the transition:<br>\n    - rewrite <code>TyCtxt&lt;.., 'tcx&gt;</code> to <code>TyCtxt&lt;'tcx&gt;</code><br>\n    - replace unused lifetimes with <code>'_</code>, typically</li>\n</ul>",
        "id": 168138312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521563
    },
    {
        "content": "<p>e.g. adding <code>&lt;'gcx&gt;</code> to an <code>impl</code>/<code>fn</code> is wrong</p>",
        "id": 168138313,
        "sender_full_name": "eddyb",
        "timestamp": 1560521564
    },
    {
        "content": "<p>that's my summary thus far</p>",
        "id": 168138321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521568
    },
    {
        "content": "<p>but I'll add that note, that's a good point</p>",
        "id": 168138326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521572
    },
    {
        "content": "<p>one weird edge case is <code>TyCtxt&lt;'_, 'tcx, '_&gt;</code>, that also needs to become <code>TyCtxt&lt;'tcx&gt;</code></p>",
        "id": 168138346,
        "sender_full_name": "eddyb",
        "timestamp": 1560521592
    },
    {
        "content": "<p>(so it's not as simple as \"leave only the last lifetime\")</p>",
        "id": 168138357,
        "sender_full_name": "eddyb",
        "timestamp": 1560521602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also, \"ask eddyb if you hit a weird issue and they're online\" :P</p>",
        "id": 168138384,
        "sender_full_name": "eddyb",
        "timestamp": 1560521636
    },
    {
        "content": "<p>ok I mean it basically comes down to</p>",
        "id": 168138441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521664
    },
    {
        "content": "<p>the worst part about <a href=\"https://github.com/rust-lang/rust/issues/61817\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61817\">#61817</a> was a <code>HashStable</code> <code>impl</code> which used <code>'gcx</code> instead of <code>'a</code> for something and it ended up with a requirement that two unrelated lifetimes be the same</p>",
        "id": 168138449,
        "sender_full_name": "eddyb",
        "timestamp": 1560521678
    },
    {
        "content": "<p>you probably just always want <code>TyCtxt&lt;'tcx&gt;</code> or <code>TyCtxt&lt;'_&gt;</code>?</p>",
        "id": 168138451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521681
    },
    {
        "content": "<p>Yeah, we're doing <code>TyCtxt&lt;'a, 'gcx, 'tcx&gt;</code> to <code>TyCtxt&lt;'gcx&gt;</code> but calling it <code>TyCtxt&lt;'tcx&gt;</code></p>",
        "id": 168138454,
        "sender_full_name": "Zoxc",
        "timestamp": 1560521684
    },
    {
        "content": "<p>and which caused lifetime errors in derived code</p>",
        "id": 168138458,
        "sender_full_name": "eddyb",
        "timestamp": 1560521689
    },
    {
        "content": "<p>(of course that assumes people are following general conventions)</p>",
        "id": 168138463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes. also, <code>'lcx</code> -&gt; <code>'tcx</code> (but that's much rarer)</p>",
        "id": 168138488,
        "sender_full_name": "eddyb",
        "timestamp": 1560521721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> something we could do is go over the affected PRs (as reported by @bors) and paste a link to a summary like this?</p>",
        "id": 168138590,
        "sender_full_name": "eddyb",
        "timestamp": 1560521782
    },
    {
        "content": "<p>OK. this seems great. I'll try to write up some brief notes and open a tracking issue</p>",
        "id": 168138594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521785
    },
    {
        "content": "<p>I could do it if I don't forget</p>",
        "id": 168138601,
        "sender_full_name": "eddyb",
        "timestamp": 1560521796
    },
    {
        "content": "<p>and then yeah we can post the link to the affected PRs, I guess</p>",
        "id": 168138602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521797
    },
    {
        "content": "<p>GitHub already shows a bunch in <a href=\"https://github.com/rust-lang/rust/issues/61722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61722\">#61722</a></p>",
        "id": 168138617,
        "sender_full_name": "eddyb",
        "timestamp": 1560521814
    },
    {
        "content": "<p>should we discuss the bikeshed-y questions? :)</p>",
        "id": 168138739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560521900
    },
    {
        "content": "<p>for \"renaming away from TyCtxt\", I propose to think about the guiding principles first, and then bikeshed later</p>",
        "id": 168138753,
        "sender_full_name": "eddyb",
        "timestamp": 1560521921
    },
    {
        "content": "<p>e.g. we <em>really</em> want this context to extend back to parsing, so it having \"Ty(pe)\" in the name (or \"Mir\", as I've offhandedly proposed) would be misleading/incorrect. this is why \"query\" or salsa's \"database\" (\"db\") come to mind. other options are some variations on \"rustc\" or \"compile(r)\"</p>",
        "id": 168138821,
        "sender_full_name": "eddyb",
        "timestamp": 1560521988
    },
    {
        "content": "<p>another thing is that we should have an uniform naming scheme for contexts - at some point I renamed a bunch of things in <code>rustc_codegen_llvm</code> using a new scheme, but haven't added it to anything else (that scheme is something like <code>fx: FooCx</code>)</p>",
        "id": 168138920,
        "sender_full_name": "eddyb",
        "timestamp": 1560522060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> discussed having other context which only has access to types. So that could be a <code>TyCtxt</code> and <code>QueryCtxt</code>would be the thing with access to executing queries.</p>",
        "id": 168138930,
        "sender_full_name": "Zoxc",
        "timestamp": 1560522067
    },
    {
        "content": "<blockquote>\n<p>should we discuss the bikeshed-y questions? :)</p>\n</blockquote>\n<p>quick note: I created <a href=\"https://github.com/rust-lang/rust/issues/61838\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61838\">https://github.com/rust-lang/rust/issues/61838</a> (tracking issue)</p>",
        "id": 168138943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522085
    },
    {
        "content": "<p>what do you mean \"only\"?!</p>",
        "id": 168138946,
        "sender_full_name": "eddyb",
        "timestamp": 1560522087
    },
    {
        "content": "<p>very few things work without queries</p>",
        "id": 168138952,
        "sender_full_name": "eddyb",
        "timestamp": 1560522096
    },
    {
        "content": "<p>You can create types and do operations on types which do not require queries</p>",
        "id": 168139013,
        "sender_full_name": "Zoxc",
        "timestamp": 1560522126
    },
    {
        "content": "<p>anyway, we should either undo that <code>rustc_codegen_llvm</code> change, use it everywhere, or come up with a third naming scheme</p>",
        "id": 168139024,
        "sender_full_name": "eddyb",
        "timestamp": 1560522137
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that linking the name to something specific like <em>types</em> seems overly narrow</p>",
        "id": 168139035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522142
    },
    {
        "content": "<blockquote>\n<p>I propose to think about the guiding principles first</p>\n</blockquote>\n<p>1) The shorter the better!</p>",
        "id": 168139044,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560522154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> I think that linking together allocation/interning and query execution is important</p>",
        "id": 168139051,
        "sender_full_name": "eddyb",
        "timestamp": 1560522157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> heh, yeah. this is why I like <code>qx: QueryCx&lt;'q&gt;</code></p>",
        "id": 168139071,
        "sender_full_name": "eddyb",
        "timestamp": 1560522182
    },
    {
        "content": "<p>As an experience report, I've been very happy with salsa's <code>db: Database</code> convention -- it is very easy to explain and people seem to get it quite naturally.</p>",
        "id": 168139083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522190
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274\">https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274</a></p>",
        "id": 168139094,
        "sender_full_name": "Zoxc",
        "timestamp": 1560522208
    },
    {
        "content": "<p><code>db</code> is also unlikely to arise randomly in code</p>",
        "id": 168139100,
        "sender_full_name": "eddyb",
        "timestamp": 1560522213
    },
    {
        "content": "<p>But I'm a bit unsure what <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> is saying so I'd like to understand that better</p>",
        "id": 168139102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522215
    },
    {
        "content": "<p>and <code>db: RustcDb&lt;'db&gt;</code> feels pretty nice</p>",
        "id": 168139123,
        "sender_full_name": "eddyb",
        "timestamp": 1560522230
    },
    {
        "content": "<blockquote>\n<p><code>db</code> is also unlikely to arise randomly in code</p>\n</blockquote>\n<p><code>db: DiagnosticBuilder</code> ;)</p>",
        "id": 168139126,
        "sender_full_name": "oli",
        "timestamp": 1560522235
    },
    {
        "content": "<p>If I see \"db\" in a random place in the Rust repo</p>",
        "id": 168139189,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522272
    },
    {
        "content": "<p>its definitely going to be ambiguous</p>",
        "id": 168139195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522279
    },
    {
        "content": "<p><code>tcx</code> isn't. I suspect <code>qx</code> wouldn't be, either.</p>",
        "id": 168139205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> dammit</p>",
        "id": 168139211,
        "sender_full_name": "eddyb",
        "timestamp": 1560522301
    },
    {
        "content": "<blockquote>\n<p>See <a href=\"https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274\">https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274</a></p>\n</blockquote>\n<p>OK, this helps. So the idea is that sometimes we have \"pure functions\" and we'd like to give them access to only limited parts of the state, such as the interning caches. The salsa answer here would be to use traits for this -- give that code access to the <code>db</code>, but with a restricted trait (e.g., an <code>db: &amp;impl InterningDatabase</code>)</p>",
        "id": 168139222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522313
    },
    {
        "content": "<p>(I'm not just talking about source code; I'm including comments or snippets from chat sessions)</p>",
        "id": 168139232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522324
    },
    {
        "content": "<blockquote>\n<p>its definitely going to be ambiguous</p>\n</blockquote>\n<p>we can of course rewrite those places, but that's more work.</p>",
        "id": 168139240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522332
    },
    {
        "content": "<p>I don't like the \"database\" terminology <em>too</em> much in general but it seemed neat in the context of salsa</p>",
        "id": 168139306,
        "sender_full_name": "eddyb",
        "timestamp": 1560522364
    },
    {
        "content": "<p>I'm thinking about the <code>x</code> convention --</p>",
        "id": 168139329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522387
    },
    {
        "content": "<p>My experience has been that <code>tcx</code> is very confusing for newcomers</p>",
        "id": 168139339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522396
    },
    {
        "content": "<p>or at least most of the times that I explain what it is, people go \"ah, so that's what it is\" :)</p>",
        "id": 168139350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522414
    },
    {
        "content": "<p>I think it's not a huge deal --</p>",
        "id": 168139371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522429
    },
    {
        "content": "<p>you have to learn that pretty quickly :)</p>",
        "id": 168139373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522432
    },
    {
        "content": "<p>but if we can find something that's more immediately accessible, seems good</p>",
        "id": 168139379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522439
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>See <a href=\"https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274\">https://github.com/rust-lang/rust/pull/59505#issuecomment-478573274</a></p>\n</blockquote>\n<p>OK, this helps. So the idea is that sometimes we have \"pure functions\" and we'd like to give them access to only limited parts of the state, such as the interning caches. The salsa answer here would be to use traits for this -- give that code access to the <code>db</code>, but with a restricted trait (e.g., an <code>db: &amp;impl InterningDatabase</code>)</p>\n</blockquote>\n<p>in theory I want to support ideas like this. But in practice, what it often leads to, is that when I'm in the midst of debugging, I end up having to thread state down from a caller in order to get access to the context object (<code>qx</code> or whatever) that I would have otherwise already had on hand.</p>",
        "id": 168139381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522441
    },
    {
        "content": "<p>I think having just 1 lifetime instead of 3 is very helpful already</p>",
        "id": 168139399,
        "sender_full_name": "Zoxc",
        "timestamp": 1560522458
    },
    {
        "content": "<p>However, if we continue to offer our thread-local accessors for the <code>qx</code></p>",
        "id": 168139404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522463
    },
    {
        "content": "<p>I agree that reducing the lifetimes is very helpful :)</p>",
        "id": 168139424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522481
    },
    {
        "content": "<p>with thread-local accessors, the need to thread the state down goes away (and thus my objection dissolves)</p>",
        "id": 168139479,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522492
    },
    {
        "content": "<p>It seems like \"query context\" and \"database\" are the two main contenders right now?</p>",
        "id": 168139518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522526
    },
    {
        "content": "<p>One other thing I wanted to say:</p>",
        "id": 168139523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> oh, regarding that, I wanted to say that <code>lift</code> is still useful for \"going between unrelated lifetimes\" (i.e. using it with TLS) even though the <code>'tcx -&gt; 'gcx</code> use is gone</p>",
        "id": 168139544,
        "sender_full_name": "eddyb",
        "timestamp": 1560522547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> something involving \"rustc\" or \"compiler\" too</p>",
        "id": 168139572,
        "sender_full_name": "eddyb",
        "timestamp": 1560522578
    },
    {
        "content": "<p>It's definitely a common thing to have \"contexts\" all over the code, as <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> pointed out, and having a convention there seems good -- but does it make sense for the \"main compiler context\" to also follow that convenion, or is worth distinguishing it? It's kind of the \"ur-context\" from which all others derive, and it's special in that it's the only one that hosts queries, so I can see a case for distinct conventions. But not sure.</p>",
        "id": 168139597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that's where I see \"db\" come in</p>",
        "id": 168139673,
        "sender_full_name": "eddyb",
        "timestamp": 1560522614
    },
    {
        "content": "<p>I wouldn't need to tack \"context\" onto \"db\"</p>",
        "id": 168139681,
        "sender_full_name": "eddyb",
        "timestamp": 1560522620
    },
    {
        "content": "<p>that's kind of my point, right</p>",
        "id": 168139685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522623
    },
    {
        "content": "<blockquote>\n<p>with thread-local accessors, the need to thread the state down goes away (and thus my objection dissolves)</p>\n</blockquote>\n<p>(and also, when the motivation is not just an abstract notion of \"code purity\", but rather a concrete thing like \"this allows us to use a cache and eases the proof that its correct\", then my objection also goes away)</p>",
        "id": 168139687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522629
    },
    {
        "content": "<p>(I was going to say <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that I think the correctness of the incremental caches outweighs that)</p>",
        "id": 168139711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522651
    },
    {
        "content": "<p>(but I agree that people should generally just take the tcx and be done with it otherwise)</p>",
        "id": 168139746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522667
    },
    {
        "content": "<p>note that the <code>DiagnosticBuilder</code> case can be ignored, it's easily changed and <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span> is working on stuff in this direction anyway. I just wanted to bring it up</p>",
        "id": 168139755,
        "sender_full_name": "oli",
        "timestamp": 1560522677
    },
    {
        "content": "<p>I don't know how to shorten <code>rustc</code> otherwise <code>rustc: Rustc&lt;'r&gt;</code> might be easier on everyone?</p>",
        "id": 168139815,
        "sender_full_name": "eddyb",
        "timestamp": 1560522716
    },
    {
        "content": "<p>I also agree it doesn't seem like the <em>killer objection</em></p>",
        "id": 168139867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522724
    },
    {
        "content": "<p>like, you're passing the compiler around :P</p>",
        "id": 168139877,
        "sender_full_name": "eddyb",
        "timestamp": 1560522727
    },
    {
        "content": "<blockquote>\n<p>I don't know how to shorten <code>rustc</code> otherwise <code>rustc: Rustc&lt;'r&gt;</code> might be easier on everyone?</p>\n</blockquote>\n<p>that's an interesting idea :)</p>",
        "id": 168139885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522737
    },
    {
        "content": "<p>(and nowadays we can move the lifetime outside it btw)</p>",
        "id": 168139891,
        "sender_full_name": "eddyb",
        "timestamp": 1560522740
    },
    {
        "content": "<p>we had to add a lint against <code>&amp;TyCtxt</code> because people intuitively did that</p>",
        "id": 168139932,
        "sender_full_name": "eddyb",
        "timestamp": 1560522772
    },
    {
        "content": "<p>the other thing that salsa does which I continu to think we may want eventually -- though I know <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has concerns -- is that it breaks up the \"database\" into traits, one per crate, so that you don't have to define all the queries in one place. This makes it meaningful to talk about things like <code>db: &amp;impl TypeCheckDatabase</code> (just those queries that the type checker needs)</p>",
        "id": 168139966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522801
    },
    {
        "content": "<p>and <code>TyCtxt</code> being a struct of references is an artifact of the <code>'gcx</code>/<code>'tcx</code> split (I wonder if we'll speed up the codegen time of rustc if we clean that stuff up :P?)</p>",
        "id": 168139970,
        "sender_full_name": "eddyb",
        "timestamp": 1560522805
    },
    {
        "content": "<p>I feel like names like rustc don't scale to that as easily</p>",
        "id": 168139975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522810
    },
    {
        "content": "<blockquote>\n<p>I don't know how to shorten <code>rustc</code> otherwise <code>rustc: Rustc&lt;'r&gt;</code> might be easier on everyone?</p>\n</blockquote>\n<p>(what, you think <code>rc</code> might be confusing?) <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 168139987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I almost said it out loud!</p>",
        "id": 168139996,
        "sender_full_name": "eddyb",
        "timestamp": 1560522831
    },
    {
        "content": "<p>but it seemed too obvious to even bring it up</p>",
        "id": 168140002,
        "sender_full_name": "eddyb",
        "timestamp": 1560522836
    },
    {
        "content": "<p>\"lrc\" :P</p>",
        "id": 168140052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522848
    },
    {
        "content": "<p><code>rs: Rust&lt;'rs&gt;</code></p>",
        "id": 168140070,
        "sender_full_name": "eddyb",
        "timestamp": 1560522867
    },
    {
        "content": "<p>let's rename <code>rustc</code> to <code>rsc</code></p>",
        "id": 168140084,
        "sender_full_name": "eddyb",
        "timestamp": 1560522885
    },
    {
        "content": "<p>So I guess we have:</p>\n<ul>\n<li><code>qx: QueryCx&lt;'q&gt;</code></li>\n<li><code>db: Database&lt;'db&gt;</code></li>\n<li><code>rs: Rust&lt;'rs&gt;</code> ?</li>\n</ul>",
        "id": 168140095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522893
    },
    {
        "content": "<p>I'm not sure how serious you were <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> but it's...kinda cute?</p>",
        "id": 168140104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522903
    },
    {
        "content": "<p>or doctor rust: <code>rx: Rust&lt;'rx&gt;</code></p>",
        "id": 168140123,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560522920
    },
    {
        "content": "<p>do we want to piss off <a href=\"https://swtch.com/~rsc/\" target=\"_blank\" title=\"https://swtch.com/~rsc/\">https://swtch.com/~rsc/</a>, hmmm</p>",
        "id": 168140128,
        "sender_full_name": "eddyb",
        "timestamp": 1560522928
    },
    {
        "content": "<p>Also <code>Session&lt;'s&gt;</code>?</p>",
        "id": 168140151,
        "sender_full_name": "Zoxc",
        "timestamp": 1560522950
    },
    {
        "content": "<p>\"if you wanted to work on Go why did you put RS in your name\"</p>",
        "id": 168140155,
        "sender_full_name": "eddyb",
        "timestamp": 1560522952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> ah, nice!</p>",
        "id": 168140167,
        "sender_full_name": "eddyb",
        "timestamp": 1560522961
    },
    {
        "content": "<p>Session?</p>",
        "id": 168140227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522974
    },
    {
        "content": "<p>/me contemplates</p>",
        "id": 168140232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522981
    },
    {
        "content": "<p><code>ss: Sess&lt;'ss&gt;</code>. wait, SS has negative connotations :(</p>",
        "id": 168140233,
        "sender_full_name": "eddyb",
        "timestamp": 1560522981
    },
    {
        "content": "<p>It implies to me that there is something \"longer lived\" that we are connected to, I guess maybe the incremental state?</p>",
        "id": 168140253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560522990
    },
    {
        "content": "<p>And merge <code>TyCtxt</code> with our existing <code>Session</code> struct =P</p>",
        "id": 168140256,
        "sender_full_name": "Zoxc",
        "timestamp": 1560522992
    },
    {
        "content": "<p>Ah, yeah, I forgot about the existing <code>sess</code></p>",
        "id": 168140271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> whereas this context we want is a generation within the session :P?</p>",
        "id": 168140285,
        "sender_full_name": "eddyb",
        "timestamp": 1560523024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> regarding salsa, and taking inspiration from the <code>FooCx</code> scheme, what about <code>db: &amp;impl TypeckDb</code>?</p>",
        "id": 168140428,
        "sender_full_name": "eddyb",
        "timestamp": 1560523106
    },
    {
        "content": "<p>I wouldn't mind that</p>",
        "id": 168140444,
        "sender_full_name": "eddyb",
        "timestamp": 1560523123
    },
    {
        "content": "<p>yes, seems fine. I've been trending away from abbreviations where I can but \"db\" seems ok</p>",
        "id": 168140463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523143
    },
    {
        "content": "<p>I also don't like the database term. That's for storing and loading stuff, not for computation =P</p>",
        "id": 168140472,
        "sender_full_name": "Zoxc",
        "timestamp": 1560523146
    },
    {
        "content": "<p>you could use that to hide all the typesystem-related stuff from <code>libsyntax</code></p>",
        "id": 168140474,
        "sender_full_name": "eddyb",
        "timestamp": 1560523147
    },
    {
        "content": "<p>/me pours some Prolog clauses onto <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span></p>",
        "id": 168140505,
        "sender_full_name": "eddyb",
        "timestamp": 1560523178
    },
    {
        "content": "<p>(but I used to agree. salsa is the only place where it feels okay)</p>",
        "id": 168140534,
        "sender_full_name": "eddyb",
        "timestamp": 1560523194
    },
    {
        "content": "<p>hmmmm regarding the libsyntax comment, we might want to switch to salsa's model? instead of making libsyntax depend on librustc?</p>",
        "id": 168140648,
        "sender_full_name": "eddyb",
        "timestamp": 1560523245
    },
    {
        "content": "<p>I wonder what the performance penalty is like</p>",
        "id": 168140663,
        "sender_full_name": "eddyb",
        "timestamp": 1560523258
    },
    {
        "content": "<p>we can discuss; I don't know that there is one</p>",
        "id": 168140729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523316
    },
    {
        "content": "<p>at least in salsa there is just one point of virtual dispatch (or none, if you use <code>&amp;impl ...</code>)</p>",
        "id": 168140791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523331
    },
    {
        "content": "<p>(i.e., you can use <code>&amp;dyn</code>)</p>",
        "id": 168140805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523341
    },
    {
        "content": "<p>it might make sense to have <code>librustc_hir</code> and<code>librustc_ty</code> and have code that just doesn't see \"more advanced\" queries</p>",
        "id": 168140810,
        "sender_full_name": "eddyb",
        "timestamp": 1560523344
    },
    {
        "content": "<p>yes, I think it makes sense to switch. But it's probably a good topic to dive into later.</p>",
        "id": 168140823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> OOOOOOOOH</p>",
        "id": 168140843,
        "sender_full_name": "eddyb",
        "timestamp": 1560523377
    },
    {
        "content": "<p>I feel like we reached the end of our \"bikeshedding\" section but I don't know if we have a clear consensus</p>",
        "id": 168140847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523379
    },
    {
        "content": "<p>I guess we could do a little poll :)</p>",
        "id": 168140876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523402
    },
    {
        "content": "<p>(we should also ask if we think renaming is worthwhile at all)</p>",
        "id": 168140884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523412
    },
    {
        "content": "<p>I think we can take longer on it</p>",
        "id": 168140929,
        "sender_full_name": "eddyb",
        "timestamp": 1560523439
    },
    {
        "content": "<p>(I tend to think it is -- I think these little bits of naming add up and form a mental tax that I'm only lately becoming aware of.)</p>",
        "id": 168140933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523441
    },
    {
        "content": "<p>but I also agree I feel very little rush</p>",
        "id": 168140978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523445
    },
    {
        "content": "<p>given that <code>tcx: TyCtxt&lt;'tcx&gt;</code> \"just works\"</p>",
        "id": 168140993,
        "sender_full_name": "eddyb",
        "timestamp": 1560523456
    },
    {
        "content": "<p>maybe we record the options and let this settle --</p>",
        "id": 168140996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523461
    },
    {
        "content": "<p>and plan a later session to talk out the salsa composition model and how that might work?</p>",
        "id": 168141020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523475
    },
    {
        "content": "<p>not sure if that influences the decision but I think maybe it does a little</p>",
        "id": 168141031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523481
    },
    {
        "content": "<p>so, with salsa: you pay the cost of monomorphization, which I don't think we want (it would cause <code>rustc_interface</code> or <code>rustc_driver</code> to compile <em>the entirety</em> of rustc that uses <code>tcx</code> today. and it doesn't work with the TLS stuff). we'd have to use <code>&amp;dyn</code> everywhere. would <code>&amp;dyn</code> at least not do a virtual call in the case when it hits the cache?</p>",
        "id": 168141078,
        "sender_full_name": "eddyb",
        "timestamp": 1560523509
    },
    {
        "content": "<p>or is salsa so much simpler than I thought it was =)))</p>\n<p>(given the fact that <code>TyCtxt</code> contains one big struct of <code>fn</code> pointers per crate, I thought Salsa also had to store them somewhere)</p>",
        "id": 168141103,
        "sender_full_name": "eddyb",
        "timestamp": 1560523521
    },
    {
        "content": "<p>There were the options I saw:</p>\n<ul>\n<li><code>qx: QueryCx&lt;'q&gt;</code></li>\n<li><code>db: Database&lt;'db&gt;</code></li>\n<li><code>db: RustcDb&lt;'db&gt;</code></li>\n<li><code>rs: Rust&lt;'rs&gt;</code></li>\n<li><code>rx: Rust&lt;'rx&gt;</code></li>\n<li><code>s: Session&lt;'s&gt;</code> //?</li>\n</ul>",
        "id": 168141148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523553
    },
    {
        "content": "<blockquote>\n<p>would <code>&amp;dyn</code> at least not do a virtual call in the case when it hits the cache?</p>\n</blockquote>\n<p>no you do pay a virtual call even when cached</p>",
        "id": 168141227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523586
    },
    {
        "content": "<p><code>db: RustcDb&lt;'db&gt;</code> is one I liked I think</p>",
        "id": 168141231,
        "sender_full_name": "eddyb",
        "timestamp": 1560523588
    },
    {
        "content": "<blockquote>\n<p>no you do pay a virtual call even when cached</p>\n</blockquote>\n<p>okay yeah I assumed Salsa was magical when it simply didn't have the same optimizations =))</p>",
        "id": 168141303,
        "sender_full_name": "eddyb",
        "timestamp": 1560523659
    },
    {
        "content": "<p>I was always hoping we can get incremental to the point where monomorphizing everything at the end is fine</p>",
        "id": 168141425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523737
    },
    {
        "content": "<p>it's...probably not there yet :)</p>",
        "id": 168141446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523752
    },
    {
        "content": "<p>All right, thanks everybody! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 168141468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523771
    },
    {
        "content": "<p>I really hope we don’t go with <code>db</code>. For some reason I’d even prefer <code>s</code>, which seems absurd ...</p>",
        "id": 168141473,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560523775
    },
    {
        "content": "<p>Interesting. I really like it, but I'm open to the alternatives too</p>",
        "id": 168141499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523800
    },
    {
        "content": "<p>(To me, it just feels like the right metaphor, esp. with queries -- it's the place where all the data lives, and you are fetching things out of it)</p>",
        "id": 168141596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523831
    },
    {
        "content": "<p>but I am happy to let the options sit a bit</p>",
        "id": 168141615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523844
    },
    {
        "content": "<p>it probably makes sense to try and record some notes about each option</p>",
        "id": 168141662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560523886
    },
    {
        "content": "<p>Is it going to be a top level context with nothing above it?</p>",
        "id": 168141788,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560523978
    },
    {
        "content": "<p>Perhaps not because there can be multiple \"sessions\" with entirely independent contexts?</p>",
        "id": 168141817,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560524009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> top-level but there is stuff in <code>rustc_interface</code> which creates one such context for every incremental \"generation\" (i.e. after every change to the inputs)</p>",
        "id": 168141915,
        "sender_full_name": "eddyb",
        "timestamp": 1560524060
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>- We are not thrilled with `TyCtxt&amp;lt;&#39;tcx&amp;gt;` and are considering some alternatives:\n    - `qx: QueryCx&amp;lt;&#39;q&amp;gt;`\n        - couple with `x` being the suffix we use for &quot;contexts&quot; in general (this convention was adopted in trans, but not elsewhere)\n    - `db: RustcDb&amp;lt;&#39;db&amp;gt;` (or perhaps `db: Database&amp;lt;&#39;db&amp;gt;`)\n        - if we do more modules, then `RustcDb` might also be `ParsingDb` (for parsing-related queries), `TypeckDb` (for type-related queries), etc\n        - though there are some impl concerns around that; salsa style modules do impose \n            - dyn dispatch for each call, even cache hits; or,\n            - monomorphization costs\n    - `rs: Rust&amp;lt;&#39;rs&amp;gt;`\n    - `rx: Rust&amp;lt;&#39;rx&amp;gt;`\n        - this is the &quot;rust compiler&quot;, so maybe that should be the basis of the name?\n    - `s: Session&amp;lt;&#39;s&amp;gt;`\n        - related to existing `tcx.sess`\n        - session of &quot;what&quot;?\n</pre></div>",
        "id": 168141931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524078
    },
    {
        "content": "<p>so it's technically not a rustc session for RLS, because the \"session\" can survive for many generations</p>",
        "id": 168141933,
        "sender_full_name": "eddyb",
        "timestamp": 1560524080
    },
    {
        "content": "<p>er, I edited a bit more,</p>",
        "id": 168141975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>seß: Seß&lt;'seß&gt;</code></p>",
        "id": 168141990,
        "sender_full_name": "eddyb",
        "timestamp": 1560524137
    },
    {
        "content": "<p>but take a look at <a href=\"https://hackmd.io/vtYAICC-SpqgwByjS_E_Uw?edit\" target=\"_blank\" title=\"https://hackmd.io/vtYAICC-SpqgwByjS_E_Uw?edit\">the hackmd</a> and add your own thoughts</p>",
        "id": 168141991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524137
    },
    {
        "content": "<p>I can try to consolidate if it gets messy</p>",
        "id": 168141993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524139
    },
    {
        "content": "<p>I can type that with AltGr+W</p>",
        "id": 168141998,
        "sender_full_name": "eddyb",
        "timestamp": 1560524145
    },
    {
        "content": "<p>I prefer just merging crates into librustc instead of having a modular query system, especially since Rust doesn't have a module system</p>",
        "id": 168142077,
        "sender_full_name": "Zoxc",
        "timestamp": 1560524187
    },
    {
        "content": "<p>don't you like to hack around the lack of ML modules with <code>trait</code>s <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 168142099,
        "sender_full_name": "eddyb",
        "timestamp": 1560524215
    },
    {
        "content": "<p>the crate separation exists for a reason. I wouldn't want to split the crates <em>too</em> much but I wouldn't e.g. merge <code>libsyntax</code> <em>into</em> <code>librustc</code>, just e.g. the AST (and make <code>libsyntax</code> depend on <code>librustc</code>)</p>",
        "id": 168142227,
        "sender_full_name": "eddyb",
        "timestamp": 1560524290
    },
    {
        "content": "<p>It adds too much syntatic overhead, for very little benefit.</p>\n<p>I also like having a central list of queries, as it's useful to keep the amount of queries low (for performance reasons) and it gives kind of an overview of the compiler</p>",
        "id": 168142313,
        "sender_full_name": "Zoxc",
        "timestamp": 1560524361
    },
    {
        "content": "<p>ok, I gotta run, but I'll leave the hackmd world editable for a bit longer</p>",
        "id": 168142317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524363
    },
    {
        "content": "<p>(I would prefer to have a system that supports crate splits, but I don't care to argue it now :)</p>",
        "id": 168142339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FWIW the problem is not with incremental - if we do MIR-only rlibs for rustc we'd have codegen at the end anyway - then making the code generic over the context would only result in noise (i.e. new type parameters on every context <code>struct</code>) but not a perf difference</p>",
        "id": 168142410,
        "sender_full_name": "eddyb",
        "timestamp": 1560524408
    },
    {
        "content": "<p>It does introduce a type parameter, that's true. I've thought about trying to make it so that you have <code>db: DB</code> instead of <code>db: &amp;DB</code>, so that you are just making everything parameteric over the type parameter only</p>",
        "id": 168142491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524480
    },
    {
        "content": "<p>so it's 1. when codegen happens 2. noooooiseeeee</p>",
        "id": 168142509,
        "sender_full_name": "eddyb",
        "timestamp": 1560524495
    },
    {
        "content": "<p>(<code>db: impl Database</code>)</p>",
        "id": 168142511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560524498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> one cool thing would be these databases to have not just queries but also arenas/interners for various entities</p>",
        "id": 168142522,
        "sender_full_name": "eddyb",
        "timestamp": 1560524515
    },
    {
        "content": "<p>this is one of those things I want a DSL to automate away, and salsa's derives are <em>kind of</em> a high-level compiler DSL :P</p>",
        "id": 168142610,
        "sender_full_name": "eddyb",
        "timestamp": 1560524553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the generic problem would be alleviated by having entire crates generic over<code>&lt;'db, DB: RustcDb&lt;'db&gt;&gt;</code> :P</p>",
        "id": 168142869,
        "sender_full_name": "eddyb",
        "timestamp": 1560524758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<blockquote>\n<p>stuff in rustc_interface which creates one such context for every incremental \"generation\" (i.e. after every change to the inputs) ... so it's technically not a rustc session for RLS, because the \"session\" can survive for many generations</p>\n</blockquote>\n<p>I don't understand what are \"generation\", \"input\" and \"session\" here.<br>\nAny specific examples?</p>",
        "id": 168143028,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560524873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  hang on how are we merging <a href=\"https://github.com/rust-lang/rust/issues/61817\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61817\">#61817</a>? who's r+'-ing it? are we treeclose-ing?</p>",
        "id": 168143099,
        "sender_full_name": "eddyb",
        "timestamp": 1560524906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> right now you have to run <code>rustc</code> multiple times with <code>-Cincremental=some-dir-name</code> (which <code>cargo</code> does for you) to incrementally recompile with different \"input\" (i.e. the contents of the files and maybe CLI flags)</p>",
        "id": 168143157,
        "sender_full_name": "eddyb",
        "timestamp": 1560524952
    },
    {
        "content": "<p>you can call each of those different runs, \"generations\"</p>",
        "id": 168143179,
        "sender_full_name": "eddyb",
        "timestamp": 1560524968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> so a \"rustc session\", ran by RLS, might contain many such generations, as many as one per keypress :P</p>",
        "id": 168143274,
        "sender_full_name": "eddyb",
        "timestamp": 1560525013
    },
    {
        "content": "<p>How can you review such large PRs? =P</p>",
        "id": 168143375,
        "sender_full_name": "Zoxc",
        "timestamp": 1560525101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh dammit we didn't discuss whether to merge the rustfmt commit!</p>",
        "id": 168143386,
        "sender_full_name": "eddyb",
        "timestamp": 1560525116
    },
    {
        "content": "<p>how did I forget about it</p>",
        "id": 168143389,
        "sender_full_name": "eddyb",
        "timestamp": 1560525120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> scrolling while squinting</p>",
        "id": 168143434,
        "sender_full_name": "eddyb",
        "timestamp": 1560525128
    },
    {
        "content": "<p>I know github doesn't handle them =P</p>",
        "id": 168143455,
        "sender_full_name": "Zoxc",
        "timestamp": 1560525151
    },
    {
        "content": "<p>ugh</p>",
        "id": 168143471,
        "sender_full_name": "eddyb",
        "timestamp": 1560525162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> imagine a loop that handles both input changes (by throwing away the global context and starting a new generation, but reusing incremental state) and IDE requests (e.g. \"go to def\", by querying the appropriate information from the current generation's context) - that's kinda RLS. or will be, in the future (the current situation is a bit messy and the whole \"save-analysis\" is a disaster we still need to recover from)</p>",
        "id": 168143521,
        "sender_full_name": "eddyb",
        "timestamp": 1560525205
    },
    {
        "content": "<p>Doesn't the rustfmt commit touch the same lines as the PR? So it shouldn't matter?</p>",
        "id": 168143528,
        "sender_full_name": "Zoxc",
        "timestamp": 1560525213
    },
    {
        "content": "<p>it may touch the entire signature where the first commit might only have touched one argument type</p>",
        "id": 168143598,
        "sender_full_name": "eddyb",
        "timestamp": 1560525248
    },
    {
        "content": "<p>other than that, yes</p>",
        "id": 168143609,
        "sender_full_name": "eddyb",
        "timestamp": 1560525260
    },
    {
        "content": "<p>The changes lines are the same for both commits and the whole PR, so including it shouldn't cause more breakage</p>",
        "id": 168143651,
        "sender_full_name": "Zoxc",
        "timestamp": 1560525298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <br>\nI see, so it' s a hypothetical future design rather than something that already exists in rustc.<br>\nIf those generations work with \"same code\" more or less, then it's indeed reasonable to keep all the global data (like symbol interner), which is apparently going to be a part of this <code>BikeshedCtxt</code>.</p>",
        "id": 168143684,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560525328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> maybe. I believe right now it might start from scratch every single time (and is forced to reload from disk). while RLS might not be using it yet (not sure), the code should already exist in <code>rustc_interface</code> (<span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> knows more)</p>",
        "id": 168143780,
        "sender_full_name": "eddyb",
        "timestamp": 1560525391
    },
    {
        "content": "<p>There's only code to load from disk right now</p>",
        "id": 168143836,
        "sender_full_name": "Zoxc",
        "timestamp": 1560525434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> damn we forgot to discuss that, but I got the feeling that it was unanimous that we'll do this, so I guess I can just scroll through it, sign off and you can treeclose and force it through whenever you have a few hours time</p>",
        "id": 168143941,
        "sender_full_name": "oli",
        "timestamp": 1560525503
    },
    {
        "content": "<p>haha</p>",
        "id": 168143976,
        "sender_full_name": "eddyb",
        "timestamp": 1560525538
    },
    {
        "content": "<p>let's do it!</p>",
        "id": 168144005,
        "sender_full_name": "eddyb",
        "timestamp": 1560525555
    },
    {
        "content": "<blockquote>\n<p>oh dammit we didn't discuss whether to merge the rustfmt commit!</p>\n</blockquote>\n<p>GitHub recently implemented a little UX \"improvement\" - <code>+100 -500</code> line diffs are no longer reported for separate commits.<br>\nSo e.g. I don't even known how much of that PR is rustfmt and how much is lifetime changes without cloning it locally.<br>\n<span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span></p>",
        "id": 168144008,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560525561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> oh right. I can check!</p>",
        "id": 168144039,
        "sender_full_name": "eddyb",
        "timestamp": 1560525601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> if you go to the commit directly you still get that info: <a href=\"https://github.com/rust-lang/rust/commit/65257a9bd7d5fc31dec583923f7b4977400de6e6\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/65257a9bd7d5fc31dec583923f7b4977400de6e6\">https://github.com/rust-lang/rust/commit/65257a9bd7d5fc31dec583923f7b4977400de6e6</a></p>",
        "id": 168144159,
        "sender_full_name": "oli",
        "timestamp": 1560525654
    },
    {
        "content": "<p><code>git log --shortstat</code>:</p>\n<div class=\"codehilite\"><pre><span></span>commit 94cfb14651528288deaa84fd386648ca7520acdb (HEAD -&gt; begone-gcx-attempt-2, origin/begone-gcx-attempt-2)\nAuthor: Eduard-Mihai Burtescu &lt;edy.burt@gmail.com&gt;\nDate:   Fri Jun 14 01:32:15 2019 +0300\n\n    Run `rustfmt --file-lines ...` for changes from previous commits.\n\n 107 files changed, 813 insertions(+), 1159 deletions(-)\n\ncommit 65257a9bd7d5fc31dec583923f7b4977400de6e6\nAuthor: Eduard-Mihai Burtescu &lt;edy.burt@gmail.com&gt;\nDate:   Fri Jun 14 00:48:52 2019 +0300\n\n    Unify all uses of &#39;gcx and &#39;tcx.\n\n 341 files changed, 3110 insertions(+), 3336 deletions(-)\n</pre></div>",
        "id": 168144195,
        "sender_full_name": "eddyb",
        "timestamp": 1560525680
    },
    {
        "content": "<p>oh dammit</p>",
        "id": 168144216,
        "sender_full_name": "eddyb",
        "timestamp": 1560525701
    },
    {
        "content": "<p>that doesn't give me the delta of files touched</p>",
        "id": 168144223,
        "sender_full_name": "eddyb",
        "timestamp": 1560525709
    },
    {
        "content": "<p>I guess I can try to compute it? both commits combined are:</p>\n<div class=\"codehilite\"><pre><span></span> 341 files changed, 3628 insertions(+), 4200 deletions(-)\n</pre></div>",
        "id": 168144312,
        "sender_full_name": "eddyb",
        "timestamp": 1560525758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <br>\nThat's better than nothing, perhaps there's some way to go to the commit directly without doing manual URL editing?</p>",
        "id": 168144556,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560525924
    },
    {
        "content": "<p>yes</p>",
        "id": 168144569,
        "sender_full_name": "oli",
        "timestamp": 1560525934
    },
    {
        "content": "<p>you can click the commit id in the PR commit view</p>",
        "id": 168144579,
        "sender_full_name": "oli",
        "timestamp": 1560525942
    },
    {
        "content": "<p>Seems like it's not insignificant then. I'd prefer to leave rustfmt off then. I'd find it much easier to spot that only <code>TyCtxt</code> changed if there's no formatting changes too</p>",
        "id": 168144727,
        "sender_full_name": "Zoxc",
        "timestamp": 1560526022
    },
    {
        "content": "<p>so the sum is <code>+3923 -4495</code> but the actual combination is <code>+3628 -4200</code></p>",
        "id": 168144774,
        "sender_full_name": "eddyb",
        "timestamp": 1560526051
    },
    {
        "content": "<p>I second <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>'s motion for brevity; <code>qx: QCx&lt;'q&gt;</code> would be neat</p>",
        "id": 168144885,
        "sender_full_name": "centril",
        "timestamp": 1560526121
    },
    {
        "content": "<p>so <code>+295 -295</code> (i.e. <code>295</code> changed lines) are shared</p>",
        "id": 168144887,
        "sender_full_name": "eddyb",
        "timestamp": 1560526122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> sorry, got distracted: so my guess is that the second commit has <code>+518 -864</code> changes which touch lines not touched by the main commit</p>",
        "id": 168145693,
        "sender_full_name": "eddyb",
        "timestamp": 1560526567
    },
    {
        "content": "<p>the large negative diff is from multi-line signatures collapsing into a single line now, I think?</p>",
        "id": 168145774,
        "sender_full_name": "eddyb",
        "timestamp": 1560526624
    },
    {
        "content": "<p>I added some notes from the gcx, tcx design meeting here:</p>\n<p><a href=\"https://github.com/rust-lang/compiler-team/pull/108\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/pull/108\">https://github.com/rust-lang/compiler-team/pull/108</a></p>\n<p>these are basically the hackmd proposal plus the notes I made live. </p>\n<p>Do we think this transition is basically done? (i.e., all affected PRs are updated etc)</p>",
        "id": 168680417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561123192
    },
    {
        "content": "<p>From the T-compiler meeting yesterday it sounded like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> was treating it as \"gone done done.\"</p>",
        "id": 168680549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561123319
    },
    {
        "content": "<p>yeah pretty much. it's just the longer-term renaming that's yet to be started on</p>",
        "id": 168699475,
        "sender_full_name": "eddyb",
        "timestamp": 1561137818
    }
]