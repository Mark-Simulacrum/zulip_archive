[
    {
        "content": "<p>I gave a first try to <a href=\"https://github.com/rust-lang/rust/issues/70853\" title=\"https://github.com/rust-lang/rust/issues/70853\">https://github.com/rust-lang/rust/issues/70853</a> with <a href=\"https://github.com/rust-lang/rust/pull/70909\" title=\"https://github.com/rust-lang/rust/pull/70909\">https://github.com/rust-lang/rust/pull/70909</a><br>\nI know its really a tiny change compared to whats needed but i wanted to start with an easy-to-discuss change so that i can be confident i am not heading in the wrong direction.</p>",
        "id": 193262825,
        "sender_full_name": "marmeladema",
        "timestamp": 1586303844
    },
    {
        "content": "<p>oh it's fine to do it in steps</p>",
        "id": 193262839,
        "sender_full_name": "eddyb",
        "timestamp": 1586303873
    },
    {
        "content": "<p>Yep, the issue implies really a lot of tiny changes all over the place. Doing that in one go is pretty much unfeasible imo.</p>",
        "id": 193263019,
        "sender_full_name": "marmeladema",
        "timestamp": 1586304017
    },
    {
        "content": "<p>Thanks for the  quick review!</p>",
        "id": 193263072,
        "sender_full_name": "marmeladema",
        "timestamp": 1586304075
    },
    {
        "content": "<p>by the nit I mean <a href=\"https://github.com/rust-lang/rust/pull/70909#discussion_r405181950\" title=\"https://github.com/rust-lang/rust/pull/70909#discussion_r405181950\">https://github.com/rust-lang/rust/pull/70909#discussion_r405181950</a> btw</p>",
        "id": 193263158,
        "sender_full_name": "eddyb",
        "timestamp": 1586304136
    },
    {
        "content": "<p>the maps thing can be done later</p>",
        "id": 193263165,
        "sender_full_name": "eddyb",
        "timestamp": 1586304140
    },
    {
        "content": "<p>Ok, i'll keep that in mind.</p>",
        "id": 193263216,
        "sender_full_name": "marmeladema",
        "timestamp": 1586304187
    },
    {
        "content": "<p>About <a href=\"https://github.com/rust-lang/rust/pull/70909\" title=\"https://github.com/rust-lang/rust/pull/70909\">https://github.com/rust-lang/rust/pull/70909</a>, <strong>eddyb</strong> you approved but what are the next steps? Shall I push more commits to it? Or wait for that to be merged first and do another PR?</p>",
        "id": 193318865,
        "sender_full_name": "marmeladema",
        "timestamp": 1586352323
    },
    {
        "content": "<p>wait for it to be merged, unless you have more commits ready and it's not in a rollup or something</p>",
        "id": 193318982,
        "sender_full_name": "eddyb",
        "timestamp": 1586352367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> yeah so I guess feel free to add commits to it until <a href=\"https://buildbot2.rust-lang.org/homu/queue/rust\" title=\"https://buildbot2.rust-lang.org/homu/queue/rust\">https://buildbot2.rust-lang.org/homu/queue/rust</a> shows your PR is getting close to being tested - right now \"the tree is closed\" probably because of some GitHub Pages breakage, so nothing is landed anyway</p>",
        "id": 193326465,
        "sender_full_name": "eddyb",
        "timestamp": 1586355554
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 193328170,
        "sender_full_name": "marmeladema",
        "timestamp": 1586356214
    },
    {
        "content": "<p>I am continuing to work locally for now but I have a question. Should <code>as_local_hir_id</code> in librustc_hir and librustc_middle take a <code>LocalDefId</code> as argument instead of a bare <code>DefId</code>?</p>",
        "id": 193328310,
        "sender_full_name": "marmeladema",
        "timestamp": 1586356279
    },
    {
        "content": "<p>According to the issue description:</p>\n<blockquote>\n<p>you are more likely to see older idioms (e.g., tcx.as_local_hir_id(def_id).unwrap()). Code like this should be refactored to take a LocalDefId instead of a DefId and their caller made responsible for asserting that a given DefId is local.</p>\n</blockquote>",
        "id": 193328726,
        "sender_full_name": "marmeladema",
        "timestamp": 1586356465
    },
    {
        "content": "<p>yeah</p>",
        "id": 193328919,
        "sender_full_name": "eddyb",
        "timestamp": 1586356559
    },
    {
        "content": "<p>Cool because all those calls to <code>.as_local_hir_id(def_id.to_def_id())</code> are making me crazy</p>",
        "id": 193329263,
        "sender_full_name": "marmeladema",
        "timestamp": 1586356710
    },
    {
        "content": "<p>I mean, i need to add the <code>.to_def_id</code> temporarily so that i can progress step by step, but i want to clean this up</p>",
        "id": 193329356,
        "sender_full_name": "marmeladema",
        "timestamp": 1586356754
    },
    {
        "content": "<p>btw, if <code>def_id: DefId</code>, then <code>.as_local_hir_id(def_id).unwrap())</code> should be <code>.as_local_hir_id(def_id.expect_local())</code> - it shouldn't need to return <code>Option</code> itself if the input is <code>LocalDefId</code></p>",
        "id": 193330581,
        "sender_full_name": "eddyb",
        "timestamp": 1586357324
    },
    {
        "content": "<p>Noted.</p>",
        "id": 193337438,
        "sender_full_name": "marmeladema",
        "timestamp": 1586360199
    },
    {
        "content": "<p>I tried to change <code>local_def_id(...)</code> to return a <code>LocalDefId</code>, but its breaking literally everywhere. Especially in calls to <code>tcx.generics_of()</code> <code>tcx.typeof()</code>, <code>tcx.variances_of()</code>, etc... Should those methods changed to only accept a <code>LocalDefId</code>? If not it implies adding <code>.to_def_id()</code> everywhere?</p>",
        "id": 193339726,
        "sender_full_name": "marmeladema",
        "timestamp": 1586361077
    },
    {
        "content": "<p>Those queries work fine for cross-crate <code>DefId</code>'s. When queries are called on cross-crate <code>DefId</code>'s they often just get dispatched to a different method.</p>",
        "id": 193340017,
        "sender_full_name": "bjorn3",
        "timestamp": 1586361205
    },
    {
        "content": "<p>I wish I had seen this PR earlier. I think this could simplify my PR to add more DefKinds</p>",
        "id": 193340161,
        "sender_full_name": "mark-i-m",
        "timestamp": 1586361261
    },
    {
        "content": "<p>So, its my first contribution so i slowly understanding how to compiler works. But for example, i tried to look for the implementation of <code>variances_of</code> and i found something in <code>src/librustc_typeck/variance/mod.rs</code>. And the first line of variances_of is<code>tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\")</code></p>",
        "id": 193340618,
        "sender_full_name": "marmeladema",
        "timestamp": 1586361461
    },
    {
        "content": "<p>It sounds that this one should accept a LocalDefId? Or is there another implementation for cross-crate queries somewhere that i missed?</p>",
        "id": 193340711,
        "sender_full_name": "marmeladema",
        "timestamp": 1586361493
    },
    {
        "content": "<p>For example <code>generics_of</code> for local <code>DefId</code>'s is at <a href=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_typeck/collect.rs#L66\" title=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_typeck/collect.rs#L66\">https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_typeck/collect.rs#L66</a>, while <code>generics_of</code> for cross-crate <code>DefId</code>'s is at <a href=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L92\" title=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L92\">https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L92</a></p>",
        "id": 193340721,
        "sender_full_name": "bjorn3",
        "timestamp": 1586361498
    },
    {
        "content": "<p>Oh cool i'll take a look to those</p>",
        "id": 193340749,
        "sender_full_name": "marmeladema",
        "timestamp": 1586361520
    },
    {
        "content": "<p>So basically, i am doomed and I have to add calls to <code>.to_def_id()</code> all over the place :'(</p>",
        "id": 193340883,
        "sender_full_name": "marmeladema",
        "timestamp": 1586361592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Why don't we make the helper methods on <code>TyCtxt</code> that look up query results take an <code>impl Into&lt;DefId&gt;</code> instead of a <code>DefId</code>?</p>",
        "id": 193351181,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586366234
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> nice job so far! Thanks for taking this on.</p>",
        "id": 193351232,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586366258
    },
    {
        "content": "<p>oh right I noted that down somewhere</p>",
        "id": 193351242,
        "sender_full_name": "eddyb",
        "timestamp": 1586366263
    },
    {
        "content": "<p>the <code>Into</code> thing</p>",
        "id": 193351252,
        "sender_full_name": "eddyb",
        "timestamp": 1586366269
    },
    {
        "content": "<p>/me then proceeded to forget it</p>",
        "id": 193351267,
        "sender_full_name": "eddyb",
        "timestamp": 1586366279
    },
    {
        "content": "<p>you'd likely want a different trait just so <code>.into()</code> doesn't become prevalent idk</p>",
        "id": 193351341,
        "sender_full_name": "eddyb",
        "timestamp": 1586366297
    },
    {
        "content": "<p>but generally you could make all the queries have an <code>impl Into</code> wrapper if we wanted to</p>",
        "id": 193351385,
        "sender_full_name": "eddyb",
        "timestamp": 1586366325
    },
    {
        "content": "<p>maybe a separate trait</p>",
        "id": 193351395,
        "sender_full_name": "eddyb",
        "timestamp": 1586366329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> this is easier due to the single-argument nature of queries (which is mostly because Rust has no VG, although the macros could let us allow more arities, hmm :P</p>",
        "id": 193351472,
        "sender_full_name": "eddyb",
        "timestamp": 1586366369
    },
    {
        "content": "<p>I don't have a problem with <code>Into</code>, but we can take a poll re: <code>Into</code> vs a custom trait at some point.</p>",
        "id": 193353090,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586367114
    },
    {
        "content": "<p>So about the trait. In the link for cross-crate <code>generics_of</code> defined here: <a href=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L72\" title=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L72\">https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L72</a><br>\nthere is the <code>IntoArgs</code> trait implemented for <code>DefId</code>. But i don't think the same mechanism is used for local crate?</p>",
        "id": 193358184,
        "sender_full_name": "marmeladema",
        "timestamp": 1586369718
    },
    {
        "content": "<p>Because i thought i could maybe implement it for <code>LocalDefId</code></p>",
        "id": 193358400,
        "sender_full_name": "marmeladema",
        "timestamp": 1586369830
    },
    {
        "content": "<p>that's unrelated</p>",
        "id": 193359060,
        "sender_full_name": "eddyb",
        "timestamp": 1586370164
    },
    {
        "content": "<p>Ok, sorry i am a bit lost :/</p>",
        "id": 193359114,
        "sender_full_name": "marmeladema",
        "timestamp": 1586370192
    },
    {
        "content": "<p>that <code>IntoArgs</code> is just a local hack</p>",
        "id": 193359146,
        "sender_full_name": "eddyb",
        "timestamp": 1586370210
    },
    {
        "content": "<p>nobody using the query system would see it</p>",
        "id": 193359159,
        "sender_full_name": "eddyb",
        "timestamp": 1586370217
    },
    {
        "content": "<p>that trait is private to that module</p>",
        "id": 193359180,
        "sender_full_name": "eddyb",
        "timestamp": 1586370229
    },
    {
        "content": "<p>and it just does a simple job</p>",
        "id": 193359249,
        "sender_full_name": "eddyb",
        "timestamp": 1586370244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> this is the <code>TyCtxt::generics_of</code> function <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/query/plumbing.rs#L424\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/query/plumbing.rs#L424\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/query/plumbing.rs#L424</a></p>",
        "id": 193359583,
        "sender_full_name": "eddyb",
        "timestamp": 1586370407
    },
    {
        "content": "<p>and every ohter query entry-point</p>",
        "id": 193359592,
        "sender_full_name": "eddyb",
        "timestamp": 1586370412
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/query/plumbing.rs#L461\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/query/plumbing.rs#L461\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/query/plumbing.rs#L461</a> just below</p>",
        "id": 193359606,
        "sender_full_name": "eddyb",
        "timestamp": 1586370419
    },
    {
        "content": "<p>so yeah you could replace <code>key: $K</code> by <code>key: impl Into&lt;$K&gt;</code></p>",
        "id": 193359642,
        "sender_full_name": "eddyb",
        "timestamp": 1586370439
    },
    {
        "content": "<p>and then <code>key.into()</code> in the body</p>",
        "id": 193359666,
        "sender_full_name": "eddyb",
        "timestamp": 1586370448
    },
    {
        "content": "<p>actually the first one calls the second one so maybe don't use <code>.into()</code> in the first one</p>",
        "id": 193359711,
        "sender_full_name": "eddyb",
        "timestamp": 1586370471
    },
    {
        "content": "<p>Why is it better to call <code>.into()</code> in the second one rather than in the first one?</p>",
        "id": 193360795,
        "sender_full_name": "marmeladema",
        "timestamp": 1586370922
    },
    {
        "content": "<p>(I don't mind either, its just not clear to me why one is better than the other)</p>",
        "id": 193360856,
        "sender_full_name": "marmeladema",
        "timestamp": 1586370952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> it's either both or just in the second one. but if both take <code>impl Into</code>, and the first calls the second, the first doesn't have to call <code>.into()</code> <em>itself</em></p>",
        "id": 193360978,
        "sender_full_name": "eddyb",
        "timestamp": 1586370992
    },
    {
        "content": "<p>it can just pass whatever it got, along</p>",
        "id": 193361019,
        "sender_full_name": "eddyb",
        "timestamp": 1586371011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> if you want to add more commits to this PR, lmk to r- it <a href=\"https://github.com/rust-lang/rust/pull/70909#issuecomment-611072623\" title=\"https://github.com/rust-lang/rust/pull/70909#issuecomment-611072623\">https://github.com/rust-lang/rust/pull/70909#issuecomment-611072623</a></p>",
        "id": 193364839,
        "sender_full_name": "eddyb",
        "timestamp": 1586372801
    },
    {
        "content": "<p>Nah its fine, i'll do another PR.</p>",
        "id": 193366546,
        "sender_full_name": "marmeladema",
        "timestamp": 1586373590
    },
    {
        "content": "<p>So i have other commits ready, and I originally thought the first PR would be merged by that time but here we are. I fear that if i add more commits, the PR will be so big that i will endup rebasing and fixing big conflicts all the time to keep up with upstream changes. I am not sure how should I proceed.</p>",
        "id": 193421772,
        "sender_full_name": "marmeladema",
        "timestamp": 1586421723
    },
    {
        "content": "<p>oh yeah it takes a while :P</p>",
        "id": 193421991,
        "sender_full_name": "eddyb",
        "timestamp": 1586421882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> it's prioritized so all we have to do is review it quickly</p>",
        "id": 193422118,
        "sender_full_name": "eddyb",
        "timestamp": 1586421970
    },
    {
        "content": "<p>(if you push to the current PR)</p>",
        "id": 193422136,
        "sender_full_name": "eddyb",
        "timestamp": 1586421983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> wait, do any of those commits change queries to take <code>impl Into</code>?</p>",
        "id": 193422175,
        "sender_full_name": "eddyb",
        "timestamp": 1586422011
    },
    {
        "content": "<p>because <em>that</em> should be a separate PR of its own</p>",
        "id": 193422184,
        "sender_full_name": "eddyb",
        "timestamp": 1586422021
    },
    {
        "content": "<p>Yes ...</p>",
        "id": 193422192,
        "sender_full_name": "marmeladema",
        "timestamp": 1586422030
    },
    {
        "content": "<p>it has too many implications outside of the scope of this change</p>",
        "id": 193422203,
        "sender_full_name": "eddyb",
        "timestamp": 1586422043
    },
    {
        "content": "<p>I can have a separate PR for the impl Into</p>",
        "id": 193422208,
        "sender_full_name": "marmeladema",
        "timestamp": 1586422049
    },
    {
        "content": "<p>small things can go in the current PR, as long as it's not getting close to the top of <a href=\"https://buildbot2.rust-lang.org/homu/queue/rust\" title=\"https://buildbot2.rust-lang.org/homu/queue/rust\">https://buildbot2.rust-lang.org/homu/queue/rust</a></p>",
        "id": 193422287,
        "sender_full_name": "eddyb",
        "timestamp": 1586422100
    },
    {
        "content": "<p>just don't forget to ping me here so I go review the PR again</p>",
        "id": 193422301,
        "sender_full_name": "eddyb",
        "timestamp": 1586422117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> Unfortunately, I don't there is any good way around the who rebasing/conflicts problem. Almost all of my refactoring PRs have had to be rebased multiple times. It's a struggle.</p>",
        "id": 193451332,
        "sender_full_name": "mark-i-m",
        "timestamp": 1586439629
    },
    {
        "content": "<p>Ok, then, everyone is in the same boat i guess :) I'll do the PR for the Into DefId first anyway as its kind of needed before further changes</p>",
        "id": 193453437,
        "sender_full_name": "marmeladema",
        "timestamp": 1586440677
    },
    {
        "content": "<p>Here we go <a href=\"https://github.com/rust-lang/rust/pull/70956\" title=\"https://github.com/rust-lang/rust/pull/70956\">https://github.com/rust-lang/rust/pull/70956</a></p>",
        "id": 193458363,
        "sender_full_name": "marmeladema",
        "timestamp": 1586442862
    },
    {
        "content": "<p>I have split my next PR in two to make progress while the discussion for <code>`impl Into&lt;$K&gt;</code> is going on: <a href=\"https://github.com/rust-lang/rust/pull/70986\" title=\"https://github.com/rust-lang/rust/pull/70986\">https://github.com/rust-lang/rust/pull/70986</a></p>",
        "id": 193560339,
        "sender_full_name": "marmeladema",
        "timestamp": 1586518471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> do you want this to land first, or do you want to simplify it if we do the <code>impl Into</code> stuff?</p>",
        "id": 193560506,
        "sender_full_name": "eddyb",
        "timestamp": 1586518684
    },
    {
        "content": "<p>this does not rely on the <code>impl Into</code> stuff so i can be merged right now</p>",
        "id": 193560545,
        "sender_full_name": "marmeladema",
        "timestamp": 1586518749
    },
    {
        "content": "<p>The next commit, which is not part of this PR, is to change the return type of <code>local_def_id()</code> function but it implies adding <code>.to_def_id()</code> all over the place. Its \"only\" for this commit that i wanted to add the <code>impl Into</code> stuff. To keep the code base cleaner and to save me the burden of fixing hundreds of errors manually.</p>",
        "id": 193560733,
        "sender_full_name": "marmeladema",
        "timestamp": 1586518938
    },
    {
        "content": "<p>aaah I see</p>",
        "id": 193560964,
        "sender_full_name": "eddyb",
        "timestamp": 1586519180
    },
    {
        "content": "<p>And if the <code>impl Into</code> stuff is too controversial, i can call <code>.to_def_id()</code> everywhere I guess.</p>",
        "id": 193561091,
        "sender_full_name": "marmeladema",
        "timestamp": 1586519348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> you told me a few days ago that once <code>as_local_hir_id</code> takes a <code>LocalDefId</code> then it should not return an <code>Option&lt;&gt;</code> anymore. But how do i get rid of the check for <code>DUMMY_HIR_ID</code>? Right now the code does:<br>\n<code>if hir_id != DUMMY_HIR_ID { Some(hir_id) } else { None }</code></p>",
        "id": 193581594,
        "sender_full_name": "marmeladema",
        "timestamp": 1586532567
    },
    {
        "content": "<p>ughhh <code>DUMMY_HIR_ID</code> shouldn't exist</p>",
        "id": 193581638,
        "sender_full_name": "eddyb",
        "timestamp": 1586532588
    },
    {
        "content": "<p>is it really constructed in practice?</p>",
        "id": 193581645,
        "sender_full_name": "eddyb",
        "timestamp": 1586532594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> try changing the code (without modifying signatures) to <code>assert_ne!(hir_id, DUMMY_HIR_ID)</code> and see if tests still pass</p>",
        "id": 193581773,
        "sender_full_name": "eddyb",
        "timestamp": 1586532636
    },
    {
        "content": "<p>Ok thanks, i'll try that</p>",
        "id": 193581912,
        "sender_full_name": "marmeladema",
        "timestamp": 1586532703
    },
    {
        "content": "<p>I have 3 failing tests:<br>\n    [ui] ui/save-analysis/issue-68621.rs<br>\n    [ui] ui/type-alias-impl-trait/issue-63279.rs<br>\n    [ui] ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs</p>",
        "id": 193594488,
        "sender_full_name": "marmeladema",
        "timestamp": 1586539402
    },
    {
        "content": "<p>huuuh</p>",
        "id": 193594757,
        "sender_full_name": "eddyb",
        "timestamp": 1586539537
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/68744/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7L840-R840\" title=\"https://github.com/rust-lang/rust/pull/68744/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7L840-R840\">https://github.com/rust-lang/rust/pull/68744/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7L840-R840</a></p>",
        "id": 193594915,
        "sender_full_name": "eddyb",
        "timestamp": 1586539612
    },
    {
        "content": "<p>this looks like the wrong fix if I had to guess</p>",
        "id": 193594933,
        "sender_full_name": "eddyb",
        "timestamp": 1586539620
    },
    {
        "content": "<p>yeah it's impossible <a href=\"https://github.com/rust-lang/rust/blob/8926bb497d9b127eb318aea5aed0e745d8381591/src/librustc_passes/hir_id_validator.rs#L146-L154\" title=\"https://github.com/rust-lang/rust/blob/8926bb497d9b127eb318aea5aed0e745d8381591/src/librustc_passes/hir_id_validator.rs#L146-L154\">https://github.com/rust-lang/rust/blob/8926bb497d9b127eb318aea5aed0e745d8381591/src/librustc_passes/hir_id_validator.rs#L146-L154</a></p>",
        "id": 193595156,
        "sender_full_name": "eddyb",
        "timestamp": 1586539735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> so the bug is that <code>DUMMY_HIR_ID</code> exists and things pass it around (but it doesn't come from the HIR)</p>",
        "id": 193595199,
        "sender_full_name": "eddyb",
        "timestamp": 1586539768
    },
    {
        "content": "<p>ah no I found it</p>",
        "id": 193595311,
        "sender_full_name": "eddyb",
        "timestamp": 1586539815
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src/librustc_ast_lowering/lib.rs#L569-L595\" title=\"https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src/librustc_ast_lowering/lib.rs#L569-L595\">https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src/librustc_ast_lowering/lib.rs#L569-L595</a></p>",
        "id": 193595419,
        "sender_full_name": "eddyb",
        "timestamp": 1586539876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> so you could add an <code>assert_ne!(ast_node_id, DUMMY_NODE_ID)</code> in that function I just linked</p>",
        "id": 193595585,
        "sender_full_name": "eddyb",
        "timestamp": 1586539948
    },
    {
        "content": "<p>to see when the AST is malformed</p>",
        "id": 193595618,
        "sender_full_name": "eddyb",
        "timestamp": 1586539971
    },
    {
        "content": "<p>we really shouldn't be allowing this anymore...</p>",
        "id": 193595628,
        "sender_full_name": "eddyb",
        "timestamp": 1586539978
    },
    {
        "content": "<p>Ok i added the new assert and i am recompiling/rerunning the tests</p>",
        "id": 193595851,
        "sender_full_name": "marmeladema",
        "timestamp": 1586540093
    },
    {
        "content": "<p><a href=\"https://paste.ee/p/u8Vb4\" title=\"https://paste.ee/p/u8Vb4\">https://paste.ee/p/u8Vb4</a><br>\ndoes that help?</p>",
        "id": 193600693,
        "sender_full_name": "marmeladema",
        "timestamp": 1586542730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> that's not in <code>rustc_ast_lowering</code></p>",
        "id": 193601292,
        "sender_full_name": "eddyb",
        "timestamp": 1586543159
    },
    {
        "content": "<p>hum, i added the assert as the first line in the function oO</p>",
        "id": 193601568,
        "sender_full_name": "marmeladema",
        "timestamp": 1586543314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> just means it doesn't get triggered</p>",
        "id": 193602004,
        "sender_full_name": "eddyb",
        "timestamp": 1586543550
    },
    {
        "content": "<p>which means we can remove <code>DUMMY_HIR_ID</code>, maybe</p>",
        "id": 193602017,
        "sender_full_name": "eddyb",
        "timestamp": 1586543559
    },
    {
        "content": "<p>Should it be a separate issue?</p>",
        "id": 193603624,
        "sender_full_name": "marmeladema",
        "timestamp": 1586544468
    },
    {
        "content": "<p>Also, should <code>Res::Def(DefKind, LocalDefId)</code>? Instead of DefId</p>",
        "id": 193604499,
        "sender_full_name": "marmeladema",
        "timestamp": 1586544927
    },
    {
        "content": "<p>no, because it contains cross-crate things too</p>",
        "id": 193604747,
        "sender_full_name": "eddyb",
        "timestamp": 1586545055
    },
    {
        "content": "<p>like when you write <code>String</code>, that's <code>Res::Def(DefKind::Struct, DefId(alloc::string::String))</code></p>",
        "id": 193604772,
        "sender_full_name": "eddyb",
        "timestamp": 1586545077
    },
    {
        "content": "<p>ok</p>",
        "id": 193605166,
        "sender_full_name": "marmeladema",
        "timestamp": 1586545288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/193603624\" title=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/193603624\">said</a>:</p>\n<blockquote>\n<p>Should it be a separate issue?</p>\n</blockquote>\n<p>probably, yeah</p>",
        "id": 193605192,
        "sender_full_name": "eddyb",
        "timestamp": 1586545308
    },
    {
        "content": "<p>I am trying to go forward with accepting direct <code>LocalDefId</code> as argument to <code>as_local_hir_id()</code> but it forces to add call to <code>.expect_local()</code> everywhere because there not a lot of places that already uses <code>LocalDefId</code></p>",
        "id": 193654038,
        "sender_full_name": "marmeladema",
        "timestamp": 1586602082
    },
    {
        "content": "<p>I guess some types that hold a DefId could hold a LocalDefId but i am don't know how to recognize those cases</p>",
        "id": 193654072,
        "sender_full_name": "marmeladema",
        "timestamp": 1586602119
    },
    {
        "content": "<p>For example, in librustc_middle, should FnDef or Closure hold a LocalDefId instead of a DefId <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 193654372,
        "sender_full_name": "marmeladema",
        "timestamp": 1586602577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> yeah it's tricky but for example types can't use <code>LocalDefId</code></p>",
        "id": 193655328,
        "sender_full_name": "eddyb",
        "timestamp": 1586604142
    },
    {
        "content": "<p>because they work cross-crate</p>",
        "id": 193655334,
        "sender_full_name": "eddyb",
        "timestamp": 1586604160
    },
    {
        "content": "<p>it's mostly things that need the HIR</p>",
        "id": 193655340,
        "sender_full_name": "eddyb",
        "timestamp": 1586604173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> basically you can bubble up an <code>expect_local</code> through functions and then see if the data type always results in <code>expect_local</code> getting called</p>",
        "id": 193655349,
        "sender_full_name": "eddyb",
        "timestamp": 1586604202
    },
    {
        "content": "<p>I am getting a panic during <code>./x.py test</code> but the backtraces don't contain file and line number, is there a way to enable those debug info?</p>",
        "id": 193681523,
        "sender_full_name": "marmeladema",
        "timestamp": 1586642061
    },
    {
        "content": "<p><code>debuginfo-level =  1</code> in <code>config.toml</code></p>",
        "id": 193681887,
        "sender_full_name": "eddyb",
        "timestamp": 1586642586
    },
    {
        "content": "<p>great thanks</p>",
        "id": 193681989,
        "sender_full_name": "marmeladema",
        "timestamp": 1586642756
    },
    {
        "content": "<p>So I have a branch ready where <code>as_local_hir_id</code> accepts <code>LocalDefId</code> instead of a <code>DefId</code> but it still rely on the <code>impl Into&lt;$K&gt;</code> for queries.</p>",
        "id": 193711795,
        "sender_full_name": "marmeladema",
        "timestamp": 1586695723
    },
    {
        "content": "<p>And <code>as_local_hir_id</code> still returns an <code>Option&lt;&gt;</code> because I haven't get rid of <code>DUMMY_HIR_ID</code> yet.</p>",
        "id": 193711807,
        "sender_full_name": "marmeladema",
        "timestamp": 1586695787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> but the assert you added <code>rustc_ast_lowering</code> never failed right?</p>",
        "id": 193711876,
        "sender_full_name": "eddyb",
        "timestamp": 1586695899
    },
    {
        "content": "<p>so the problem is things passing <code>DUMMY_HIR_ID</code> where a <code>HirId</code> is expected</p>",
        "id": 193711906,
        "sender_full_name": "eddyb",
        "timestamp": 1586695922
    },
    {
        "content": "<p>And since <a href=\"https://github.com/rust-lang/rust/pull/70961\" title=\"https://github.com/rust-lang/rust/pull/70961\">https://github.com/rust-lang/rust/pull/70961</a> seems to slow. So i might add calls to <code>to_def_id()</code> everywhere. Should not take too long now that i have properly configured my code editor :P</p>",
        "id": 193711930,
        "sender_full_name": "marmeladema",
        "timestamp": 1586695944
    },
    {
        "content": "<p>So the 3 failings tests all fail in <code>has_typeck_tables</code> from <code>librustc_typeck/check/mod.rs</code></p>",
        "id": 193711957,
        "sender_full_name": "marmeladema",
        "timestamp": 1586695991
    },
    {
        "content": "<p>And yes, the assert in ast lowering never triggered, only the one in <code>as_local_hir_id</code></p>",
        "id": 193711961,
        "sender_full_name": "marmeladema",
        "timestamp": 1586696021
    },
    {
        "content": "<p>did GH search just break? <a href=\"https://github.com/rust-lang/rust/search?q=DUMMY_HIR_ID\" title=\"https://github.com/rust-lang/rust/search?q=DUMMY_HIR_ID\">https://github.com/rust-lang/rust/search?q=DUMMY_HIR_ID</a></p>",
        "id": 193712003,
        "sender_full_name": "eddyb",
        "timestamp": 1586696046
    },
    {
        "content": "<p>it works for me?</p>",
        "id": 193712017,
        "sender_full_name": "marmeladema",
        "timestamp": 1586696091
    },
    {
        "content": "<p>it says \" We couldn’t find any code matching 'DUMMY_HIR_ID' in rust-lang/rust \"</p>",
        "id": 193712030,
        "sender_full_name": "eddyb",
        "timestamp": 1586696113
    },
    {
        "content": "<p>this works though <a href=\"https://github.com/search?q=DUMMY_HIR_ID+repo%3Arust-lang%2Frust+extension%3Ars&amp;type=Code&amp;ref=advsearch&amp;l=&amp;l=\" title=\"https://github.com/search?q=DUMMY_HIR_ID+repo%3Arust-lang%2Frust+extension%3Ars&amp;type=Code&amp;ref=advsearch&amp;l=&amp;l=\">https://github.com/search?q=DUMMY_HIR_ID+repo%3Arust-lang%2Frust+extension%3Ars&amp;type=Code&amp;ref=advsearch&amp;l=&amp;l=</a></p>",
        "id": 193712040,
        "sender_full_name": "eddyb",
        "timestamp": 1586696129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> anyway I'll go through them and let you know which can be easily fixed</p>",
        "id": 193712060,
        "sender_full_name": "eddyb",
        "timestamp": 1586696151
    },
    {
        "content": "<p>if we can replace all of them with valid IDs or <code>Option&lt;HirId&gt;</code>, then we can get rid of <code>DUMMY_HIR_ID</code></p>",
        "id": 193712115,
        "sender_full_name": "eddyb",
        "timestamp": 1586696194
    },
    {
        "content": "<p>or maybe I should do that separately</p>",
        "id": 193712119,
        "sender_full_name": "eddyb",
        "timestamp": 1586696221
    },
    {
        "content": "<p>Here is the \"more detailed\" backtrace but line numbers are from my local branch: <a href=\"https://paste.ee/p/0XUZy\" title=\"https://paste.ee/p/0XUZy\">https://paste.ee/p/0XUZy</a></p>",
        "id": 193712125,
        "sender_full_name": "marmeladema",
        "timestamp": 1586696238
    },
    {
        "content": "<p>And about <code>impl Into&lt;$K&gt;</code>, shall i ignore for now and add calls to <code>to_def_id</code>?</p>",
        "id": 193712172,
        "sender_full_name": "marmeladema",
        "timestamp": 1586696291
    },
    {
        "content": "<p>good news :) <a href=\"https://github.com/rust-lang/rust/pull/70961#issuecomment-612612269\" title=\"https://github.com/rust-lang/rust/pull/70961#issuecomment-612612269\">https://github.com/rust-lang/rust/pull/70961#issuecomment-612612269</a></p>",
        "id": 193712872,
        "sender_full_name": "eddyb",
        "timestamp": 1586697449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> so you can base your work on that PR :D</p>",
        "id": 193712917,
        "sender_full_name": "eddyb",
        "timestamp": 1586697515
    },
    {
        "content": "<p>Oh great!</p>",
        "id": 193714912,
        "sender_full_name": "marmeladema",
        "timestamp": 1586700963
    },
    {
        "content": "<p>Hu :/ rustdoc tests are failing. Probably because at some point <code>as_local_hir_id</code> returns <code>None</code> because of some <code>DUMMY_HIR_ID</code> somewhere. I think we should remove that dummy id before going further. Its too confusing otherwise.</p>",
        "id": 193717658,
        "sender_full_name": "marmeladema",
        "timestamp": 1586705619
    },
    {
        "content": "<p>By the way, are we merging <a href=\"https://github.com/rust-lang/rust/pull/70961\" title=\"https://github.com/rust-lang/rust/pull/70961\">https://github.com/rust-lang/rust/pull/70961</a>?</p>",
        "id": 193766888,
        "sender_full_name": "marmeladema",
        "timestamp": 1586780724
    },
    {
        "content": "<p>I kind of wanted some feedback but we don't have to I don't think</p>",
        "id": 193766977,
        "sender_full_name": "eddyb",
        "timestamp": 1586780778
    },
    {
        "content": "<p>So i rebased my changes over master but now the compiler is is crashing here: <a href=\"https://paste.ee/p/7mwBb\" title=\"https://paste.ee/p/7mwBb\">https://paste.ee/p/7mwBb</a><br>\nFailure seems to b restricted to this specific commit: <a href=\"https://github.com/marmeladema/rust/commit/3d00f8dfee5e3fb92e7b75a5d7ce58d02dd10a9a\" title=\"https://github.com/marmeladema/rust/commit/3d00f8dfee5e3fb92e7b75a5d7ce58d02dd10a9a\">https://github.com/marmeladema/rust/commit/3d00f8dfee5e3fb92e7b75a5d7ce58d02dd10a9a</a><br>\nThe one before builds and passes the tests properly</p>",
        "id": 194066586,
        "sender_full_name": "marmeladema",
        "timestamp": 1586972553
    },
    {
        "content": "<p>It crashes in <code>find_entry</code> on this code <code>let node = owner.nodes[id.local_id].as_ref();</code>:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;index out of bounds: the len is 513 but the index is 980954&#39;, /home/adema/code/rust/src/libcore/slice/mod.rs:2872:10\n</pre></div>",
        "id": 194066853,
        "sender_full_name": "marmeladema",
        "timestamp": 1586972671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> do you have any advises on how to debug my issue? I don't know what to look for :/</p>",
        "id": 194067145,
        "sender_full_name": "marmeladema",
        "timestamp": 1586972790
    },
    {
        "content": "<p>looking now</p>",
        "id": 194205107,
        "sender_full_name": "eddyb",
        "timestamp": 1586973971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> sounds like a <code>HirId</code> was decomposed</p>",
        "id": 194205496,
        "sender_full_name": "eddyb",
        "timestamp": 1586974201
    },
    {
        "content": "<p>and the <code>LocalDefId</code> and <code>ItemLocalId</code> are for different defs</p>",
        "id": 194205578,
        "sender_full_name": "eddyb",
        "timestamp": 1586974223
    },
    {
        "content": "<p><code>def_id.local_def_index == hir_id.owner.local_def_index</code> can be just <code>def_id == hir_id.owner</code> but that couldn't cause this</p>",
        "id": 194205663,
        "sender_full_name": "eddyb",
        "timestamp": 1586974281
    },
    {
        "content": "<p>I'll try that anyway, since i don't have any other idea^^</p>",
        "id": 194206049,
        "sender_full_name": "marmeladema",
        "timestamp": 1586974453
    },
    {
        "content": "<p>I mean, it's just a nit</p>",
        "id": 194206067,
        "sender_full_name": "eddyb",
        "timestamp": 1586974467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> you're sure it's that commit o_O?</p>",
        "id": 194206154,
        "sender_full_name": "eddyb",
        "timestamp": 1586974531
    },
    {
        "content": "<p>Well, i'll try again the previous commits, but there is only two commits over master in this branch</p>",
        "id": 194206295,
        "sender_full_name": "marmeladema",
        "timestamp": 1586974594
    },
    {
        "content": "<p>so its either this one of the one before</p>",
        "id": 194206311,
        "sender_full_name": "marmeladema",
        "timestamp": 1586974602
    },
    {
        "content": "<p>previous one being this? <a href=\"https://github.com/rust-lang/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979\" title=\"https://github.com/rust-lang/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979\">https://github.com/rust-lang/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979</a></p>",
        "id": 194206639,
        "sender_full_name": "eddyb",
        "timestamp": 1586974796
    },
    {
        "content": "<p>yes exactly</p>",
        "id": 194206705,
        "sender_full_name": "marmeladema",
        "timestamp": 1586974812
    },
    {
        "content": "<p><a href=\"https://github.com/marmeladema/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979\" title=\"https://github.com/marmeladema/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979\">https://github.com/marmeladema/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979</a></p>",
        "id": 194206799,
        "sender_full_name": "marmeladema",
        "timestamp": 1586974867
    },
    {
        "content": "<p>I am retrying the commit i thought was working</p>",
        "id": 194207548,
        "sender_full_name": "marmeladema",
        "timestamp": 1586975261
    },
    {
        "content": "<p>lets see</p>",
        "id": 194207570,
        "sender_full_name": "marmeladema",
        "timestamp": 1586975269
    },
    {
        "content": "<p>this is stumping me</p>",
        "id": 194207937,
        "sender_full_name": "eddyb",
        "timestamp": 1586975414
    },
    {
        "content": "<p>there's nothing you did that, at a glance, could ever cause this</p>",
        "id": 194207956,
        "sender_full_name": "eddyb",
        "timestamp": 1586975422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> only thing I can think of would be if you got variable shadowing wrong in a critical part of the compiler</p>",
        "id": 194208203,
        "sender_full_name": "eddyb",
        "timestamp": 1586975539
    },
    {
        "content": "<p>the first commit touches even less code <em>sigh</em></p>",
        "id": 194208280,
        "sender_full_name": "eddyb",
        "timestamp": 1586975580
    },
    {
        "content": "<p>btw pro tip: <a href=\"https://github.com/marmeladema/rust/commit/3d00f8dfee5e3fb92e7b75a5d7ce58d02dd10a9a?w=1\" title=\"https://github.com/marmeladema/rust/commit/3d00f8dfee5e3fb92e7b75a5d7ce58d02dd10a9a?w=1\">https://github.com/marmeladema/rust/commit/3d00f8dfee5e3fb92e7b75a5d7ce58d02dd10a9a?w=1</a> (specifically the <code>?w=1</code> ignores whitespace changes)</p>",
        "id": 194208356,
        "sender_full_name": "eddyb",
        "timestamp": 1586975610
    },
    {
        "content": "<p>Yeah i was kind of thinking of a shadowed variable somewhere. But i have not found it yet.</p>",
        "id": 194209091,
        "sender_full_name": "marmeladema",
        "timestamp": 1586975897
    },
    {
        "content": "<p>wait why is it...</p>",
        "id": 194209475,
        "sender_full_name": "eddyb",
        "timestamp": 1586976099
    },
    {
        "content": "<p>that's a weird <code>HirId</code> you have there</p>",
        "id": 194209498,
        "sender_full_name": "eddyb",
        "timestamp": 1586976110
    },
    {
        "content": "<p>isn't <code>num::from_str_radix</code> a <code>fn</code>?</p>",
        "id": 194209521,
        "sender_full_name": "eddyb",
        "timestamp": 1586976121
    },
    {
        "content": "<p>the <code>HirId</code> should have <code>local_id == ItemLocalId(0)</code></p>",
        "id": 194209573,
        "sender_full_name": "eddyb",
        "timestamp": 1586976137
    },
    {
        "content": "<p>btw I got that name from <a href=\"https://paste.ee/p/7mwBb#s=0&amp;l=410\" title=\"https://paste.ee/p/7mwBb#s=0&amp;l=410\">https://paste.ee/p/7mwBb#s=0&amp;l=410</a></p>",
        "id": 194209652,
        "sender_full_name": "eddyb",
        "timestamp": 1586976185
    },
    {
        "content": "<p>this is so weird</p>",
        "id": 194210054,
        "sender_full_name": "eddyb",
        "timestamp": 1586976354
    },
    {
        "content": "<p>I can confirm that <a href=\"https://github.com/rust-lang/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979\" title=\"https://github.com/rust-lang/rust/commit/a989b80d44863480c9fe54e818f932fd83a0c979\">a989b80d44863480c9fe54e818f932fd83a0c979</a> buids and passes the tests</p>",
        "id": 194210294,
        "sender_full_name": "marmeladema",
        "timestamp": 1586976467
    },
    {
        "content": "<p>the only thing I can suggest is to try and figure out if you can <code>debug!</code> the exact accessed <code>HirId</code> and what's happening there</p>",
        "id": 194210436,
        "sender_full_name": "eddyb",
        "timestamp": 1586976519
    },
    {
        "content": "<p>I don't see how this could happen</p>",
        "id": 194210465,
        "sender_full_name": "eddyb",
        "timestamp": 1586976532
    },
    {
        "content": "<p>not to mention that 980954 is huge</p>",
        "id": 194210483,
        "sender_full_name": "eddyb",
        "timestamp": 1586976539
    },
    {
        "content": "<p>Thanks, i'll add debug print everywhere i can :D</p>",
        "id": 194210602,
        "sender_full_name": "marmeladema",
        "timestamp": 1586976598
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[attrs] id=HirId { owner: DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0]), local_id: 980954 }\n[find_entry] id=HirId { owner: DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0]), local_id: 980954 }\n</pre></div>",
        "id": 194222968,
        "sender_full_name": "marmeladema",
        "timestamp": 1586982496
    },
    {
        "content": "<p>oh, <code>DefId</code> debug-prints well :D</p>",
        "id": 194223027,
        "sender_full_name": "eddyb",
        "timestamp": 1586982537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> yeah so now you need to figure out how far back that is injected</p>",
        "id": 194223206,
        "sender_full_name": "eddyb",
        "timestamp": 1586982628
    },
    {
        "content": "<p>AFAIK that <code>980954</code> is nonsense</p>",
        "id": 194223223,
        "sender_full_name": "eddyb",
        "timestamp": 1586982646
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[check_attributes]\n    hir_id=HirId { owner: DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0]), local_id: 0 }\n    local_def_id(hir_id)=DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0])\n[codegen_fn_attrs] id=DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0])\n[get_attrs] did=DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0])\n[attrs] id=HirId { owner: DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0]), local_id: 980954 }\n[find_entry] id=HirId { owner: DefId(0:678 ~ core[d046]::num[0]::from_str_radix[0]), local_id: 980954 }\n</pre></div>",
        "id": 194225147,
        "sender_full_name": "marmeladema",
        "timestamp": 1586983635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> should <code>as_local_def_id (as_local_hir_d(def_id)) == def_id</code>?</p>",
        "id": 194225644,
        "sender_full_name": "marmeladema",
        "timestamp": 1586983891
    },
    {
        "content": "<p>yes</p>",
        "id": 194225678,
        "sender_full_name": "eddyb",
        "timestamp": 1586983908
    },
    {
        "content": "<p>oh right you can assert that very early, whenever the relevant tables are created</p>",
        "id": 194225784,
        "sender_full_name": "eddyb",
        "timestamp": 1586983949
    },
    {
        "content": "<p>yeah that was one of my idea</p>",
        "id": 194225821,
        "sender_full_name": "marmeladema",
        "timestamp": 1586983973
    },
    {
        "content": "<p>anyway yeah <code>check_attributes</code> has the right <code>HirId</code> but the <code>LocalDefId -&gt; HirId</code> table seems broken</p>",
        "id": 194226484,
        "sender_full_name": "eddyb",
        "timestamp": 1586984279
    },
    {
        "content": "<p>Surprisingly, sometime when i recompile, the same bug in find_entry happens but with another backtrace</p>",
        "id": 194231874,
        "sender_full_name": "marmeladema",
        "timestamp": 1586987117
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>query stack during panic:\n#0 [param_env] processing `cmp::Ordering::Less::{{constant}}#0`\n#1 [collect_mod_item_types] collecting item types in module `cmp`\n#2 [analysis] running analysis passes on this crate\n</pre></div>",
        "id": 194231895,
        "sender_full_name": "marmeladema",
        "timestamp": 1586987134
    },
    {
        "content": "<p>this is somewhat disturbing :P</p>",
        "id": 194231934,
        "sender_full_name": "eddyb",
        "timestamp": 1586987155
    },
    {
        "content": "<p>almost sounds like a miscompilation of rustc</p>",
        "id": 194231994,
        "sender_full_name": "eddyb",
        "timestamp": 1586987169
    },
    {
        "content": "<p>is <code>find_entry</code> recursive somehow?</p>",
        "id": 194232372,
        "sender_full_name": "marmeladema",
        "timestamp": 1586987409
    },
    {
        "content": "<p>no</p>",
        "id": 194232387,
        "sender_full_name": "eddyb",
        "timestamp": 1586987421
    },
    {
        "content": "<p>oh i was tricked by the closure in the backtrace</p>",
        "id": 194233190,
        "sender_full_name": "marmeladema",
        "timestamp": 1586987861
    },
    {
        "content": "<p>whatever the backtrace, local_id is always equal to 980954</p>",
        "id": 194235014,
        "sender_full_name": "marmeladema",
        "timestamp": 1586988905
    },
    {
        "content": "<p>its like corrupted in an almost predictable way</p>",
        "id": 194235042,
        "sender_full_name": "marmeladema",
        "timestamp": 1586988923
    },
    {
        "content": "<p>I did a <code>x.py clean</code> and rebuilt and the crash are still happening</p>",
        "id": 194245213,
        "sender_full_name": "marmeladema",
        "timestamp": 1586996873
    },
    {
        "content": "<p>is there a function where hirid are created? so that i can print each of them to check who is creating that bogus hirid?</p>",
        "id": 194245282,
        "sender_full_name": "marmeladema",
        "timestamp": 1586996914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> look in <code>src/librustc_ast_lowering</code></p>",
        "id": 194245292,
        "sender_full_name": "eddyb",
        "timestamp": 1586996938
    },
    {
        "content": "<p>all of <code>HirId</code> creation should be <em>somewhere</em> in there</p>",
        "id": 194245301,
        "sender_full_name": "eddyb",
        "timestamp": 1586996949
    },
    {
        "content": "<p>searching for <code>HirId {</code> might be the easiest way to find all the places</p>",
        "id": 194245315,
        "sender_full_name": "eddyb",
        "timestamp": 1586996968
    },
    {
        "content": "<p>can someone create an hirid after the call to init_node_id_to_hir_id_mapping?</p>",
        "id": 194245322,
        "sender_full_name": "marmeladema",
        "timestamp": 1586996983
    },
    {
        "content": "<p>not sure</p>",
        "id": 194245328,
        "sender_full_name": "eddyb",
        "timestamp": 1586996992
    },
    {
        "content": "<p>it's a bit of a mess right now</p>",
        "id": 194245335,
        "sender_full_name": "eddyb",
        "timestamp": 1586997001
    },
    {
        "content": "<p>haha <code>HirId {</code> matches on function that returns an HirId of course^^</p>",
        "id": 194245433,
        "sender_full_name": "marmeladema",
        "timestamp": 1586997067
    },
    {
        "content": "<p>lol</p>",
        "id": 194245437,
        "sender_full_name": "eddyb",
        "timestamp": 1586997075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> i created <a href=\"https://github.com/rust-lang/rust/pull/71215\" title=\"https://github.com/rust-lang/rust/pull/71215\">https://github.com/rust-lang/rust/pull/71215</a> as a draft because i want to see if tests passes in CI, because i am totally lost in space right now. I added another commit to remove all unnecessary <code>unwrap()</code> but i don't think it will help fix my issue</p>",
        "id": 194357174,
        "sender_full_name": "marmeladema",
        "timestamp": 1587066180
    },
    {
        "content": "<p>ping me when CI finishes</p>",
        "id": 194357886,
        "sender_full_name": "eddyb",
        "timestamp": 1587066509
    },
    {
        "content": "<p>LOL tests now pass locally with the new commit</p>",
        "id": 194360666,
        "sender_full_name": "marmeladema",
        "timestamp": 1587067835
    },
    {
        "content": "<p>uhhh oh</p>",
        "id": 194360923,
        "sender_full_name": "eddyb",
        "timestamp": 1587067959
    },
    {
        "content": "<p>/me gets nervous about potential miscompilation</p>",
        "id": 194360963,
        "sender_full_name": "eddyb",
        "timestamp": 1587067983
    },
    {
        "content": "<p>or maybe it was accidentally doing incremental at stage1? but that doesn't make much sense</p>",
        "id": 194361016,
        "sender_full_name": "eddyb",
        "timestamp": 1587068020
    },
    {
        "content": "<p>I do have incremental compilation enabled in my config</p>",
        "id": 194361333,
        "sender_full_name": "marmeladema",
        "timestamp": 1587068163
    },
    {
        "content": "<p>yeah but still, it shouldn't trigger in stage1, AFAIK</p>",
        "id": 194361420,
        "sender_full_name": "eddyb",
        "timestamp": 1587068216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> GHA tests passed <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 194362334,
        "sender_full_name": "marmeladema",
        "timestamp": 1587068628
    },
    {
        "content": "<p>At some point i wondered if I should have kept <code>as_loca_hir_id(DefId) -&gt; Option&lt;HirId&gt;</code> but introduce <code>local_def_id_to_hir_id(LocalDefId) -&gt; HirId</code></p>",
        "id": 194364354,
        "sender_full_name": "marmeladema",
        "timestamp": 1587069565
    },
    {
        "content": "<p>because all those calls to <code>as_local().map()</code> they should be abstracted over a function</p>",
        "id": 194364468,
        "sender_full_name": "marmeladema",
        "timestamp": 1587069604
    },
    {
        "content": "<p>but at the same time, it helps to have explicitly call as_local() to identify more code that could be converted to <code>LocalDefId</code> only</p>",
        "id": 194364540,
        "sender_full_name": "marmeladema",
        "timestamp": 1587069650
    },
    {
        "content": "<p>yes :D</p>",
        "id": 194365402,
        "sender_full_name": "eddyb",
        "timestamp": 1587070113
    },
    {
        "content": "<p>When you say <code>More .as_local().map( in if let RHS.</code></p>",
        "id": 194365662,
        "sender_full_name": "marmeladema",
        "timestamp": 1587070218
    },
    {
        "content": "<p>what do you mean exactly? I am not sure i understand</p>",
        "id": 194365685,
        "sender_full_name": "marmeladema",
        "timestamp": 1587070231
    },
    {
        "content": "<p>I thought I could annotate all the places</p>",
        "id": 194365693,
        "sender_full_name": "eddyb",
        "timestamp": 1587070234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> see the first comment</p>",
        "id": 194365701,
        "sender_full_name": "eddyb",
        "timestamp": 1587070241
    },
    {
        "content": "<p>I gave up after a few :P</p>",
        "id": 194365714,
        "sender_full_name": "eddyb",
        "timestamp": 1587070251
    },
    {
        "content": "<p>its about shadowing def_id with <code>if let Some(def_id) = def_id.as_local()</code> and doing to lookup for hir_id later in another variable?</p>",
        "id": 194365786,
        "sender_full_name": "marmeladema",
        "timestamp": 1587070292
    },
    {
        "content": "<p>yeah</p>",
        "id": 194365799,
        "sender_full_name": "eddyb",
        "timestamp": 1587070301
    },
    {
        "content": "<p>Ok! Sorry i was not sure and because there are so many, I did not want to spend hours changing something that i had misunderstood</p>",
        "id": 194365891,
        "sender_full_name": "marmeladema",
        "timestamp": 1587070348
    },
    {
        "content": "<p>np</p>",
        "id": 194365906,
        "sender_full_name": "eddyb",
        "timestamp": 1587070357
    },
    {
        "content": "<p>oops I should've used this feature <a href=\"https://github.com/rust-lang/rust/pull/71215/files?w=1\" title=\"https://github.com/rust-lang/rust/pull/71215/files?w=1\">https://github.com/rust-lang/rust/pull/71215/files?w=1</a></p>",
        "id": 194368452,
        "sender_full_name": "eddyb",
        "timestamp": 1587071746
    },
    {
        "content": "<p>I think i've fixed all the comments</p>",
        "id": 194376967,
        "sender_full_name": "marmeladema",
        "timestamp": 1587076929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> were you able to search for all instances, not just the ones I commented on?</p>",
        "id": 194377245,
        "sender_full_name": "eddyb",
        "timestamp": 1587077238
    },
    {
        "content": "<p>I looked for all i could find</p>",
        "id": 194377272,
        "sender_full_name": "marmeladema",
        "timestamp": 1587077272
    },
    {
        "content": "<p>okay I'll show you a trick in a sec :P</p>",
        "id": 194377322,
        "sender_full_name": "eddyb",
        "timestamp": 1587077288
    },
    {
        "content": "<p>You can look at the commit I added, there is a few more fixes than the one you commented :P</p>",
        "id": 194377333,
        "sender_full_name": "marmeladema",
        "timestamp": 1587077306
    },
    {
        "content": "<p>I'm using the \"Viewed\" checkboxes</p>",
        "id": 194377357,
        "sender_full_name": "eddyb",
        "timestamp": 1587077328
    },
    {
        "content": "<p>ah yeah saw that</p>",
        "id": 194377375,
        "sender_full_name": "marmeladema",
        "timestamp": 1587077347
    },
    {
        "content": "<p>so the trick is that you can go to this URL: <a href=\"https://github.com/rust-lang/rust/pull/71215.patch\" title=\"https://github.com/rust-lang/rust/pull/71215.patch\">https://github.com/rust-lang/rust/pull/71215.patch</a></p>",
        "id": 194377455,
        "sender_full_name": "eddyb",
        "timestamp": 1587077414
    },
    {
        "content": "<p>ah but not even firefox lets me do regexes on that :P</p>",
        "id": 194377507,
        "sender_full_name": "eddyb",
        "timestamp": 1587077477
    },
    {
        "content": "<p>anyway just searching <code>.as_local().map(|</code> I'm seeing a bunch of <code>if let</code>s</p>",
        "id": 194377580,
        "sender_full_name": "eddyb",
        "timestamp": 1587077525
    },
    {
        "content": "<p>you might be able to do <code>git diff master</code> or something  to see the same thing locally</p>",
        "id": 194377595,
        "sender_full_name": "eddyb",
        "timestamp": 1587077535
    },
    {
        "content": "<p>hu still?</p>",
        "id": 194377605,
        "sender_full_name": "marmeladema",
        "timestamp": 1587077540
    },
    {
        "content": "<p>wait</p>",
        "id": 194377645,
        "sender_full_name": "eddyb",
        "timestamp": 1587077564
    },
    {
        "content": "<p>is the joke on me</p>",
        "id": 194377661,
        "sender_full_name": "eddyb",
        "timestamp": 1587077583
    },
    {
        "content": "<p>ah yes it is</p>",
        "id": 194377674,
        "sender_full_name": "eddyb",
        "timestamp": 1587077591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> I used the wrong suffix</p>",
        "id": 194377682,
        "sender_full_name": "eddyb",
        "timestamp": 1587077597
    },
    {
        "content": "<p>if you use <code>.diff</code> instead of <code>.patch</code> it's the entire combined diff</p>",
        "id": 194377706,
        "sender_full_name": "eddyb",
        "timestamp": 1587077619
    },
    {
        "content": "<p>if you use <code>.patch</code>, it's usable for things like <code>git am</code>, it has the exact commit history :P</p>",
        "id": 194377770,
        "sender_full_name": "eddyb",
        "timestamp": 1587077648
    },
    {
        "content": "<p>yep i use that trick sometime too</p>",
        "id": 194377859,
        "sender_full_name": "marmeladema",
        "timestamp": 1587077748
    },
    {
        "content": "<p>i think i've missed one or two</p>",
        "id": 194377867,
        "sender_full_name": "marmeladema",
        "timestamp": 1587077760
    },
    {
        "content": "<p>I posted a comment on two</p>",
        "id": 194377915,
        "sender_full_name": "eddyb",
        "timestamp": 1587077767
    },
    {
        "content": "<p>can't easily find more :P</p>",
        "id": 194377921,
        "sender_full_name": "eddyb",
        "timestamp": 1587077773
    },
    {
        "content": "<p>this finds exactly one of them <code>curl 'https://patch-diff.githubusercontent.com/raw/rust-lang/rust/pull/71215.diff' | rg -C10 '^\\+.*if let.*=$'</code></p>",
        "id": 194378038,
        "sender_full_name": "eddyb",
        "timestamp": 1587077873
    },
    {
        "content": "<p>anyway yeah I think we're now ready for perf :D</p>",
        "id": 194378130,
        "sender_full_name": "eddyb",
        "timestamp": 1587077917
    },
    {
        "content": "<p>(after you fix the last two. just so you don't have to push again while it does its thing)</p>",
        "id": 194378197,
        "sender_full_name": "eddyb",
        "timestamp": 1587077975
    },
    {
        "content": "<p>i fixed your two comments, i could not find more</p>",
        "id": 194378396,
        "sender_full_name": "marmeladema",
        "timestamp": 1587078096
    },
    {
        "content": "<p>i've pushed</p>",
        "id": 194378417,
        "sender_full_name": "marmeladema",
        "timestamp": 1587078107
    },
    {
        "content": "<p>thanks! :D</p>",
        "id": 194378539,
        "sender_full_name": "eddyb",
        "timestamp": 1587078195
    },
    {
        "content": "<p>Assuming that perf tests are ok, what would the next steps?</p>",
        "id": 194379354,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079012
    },
    {
        "content": "<p>For example, is there query that should only accept a localdefid and never a generic defid? Because we could probably change the key</p>",
        "id": 194379446,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> by the way <code>local_def_id_to_hir_id</code> already exists lol and <code>as_local_hir_id</code> calls it :D</p>",
        "id": 194379730,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079351
    },
    {
        "content": "<p>yeah I know :P</p>",
        "id": 194379743,
        "sender_full_name": "eddyb",
        "timestamp": 1587079361
    },
    {
        "content": "<p>I mean, I saw it on your PR</p>",
        "id": 194379751,
        "sender_full_name": "eddyb",
        "timestamp": 1587079366
    },
    {
        "content": "<p>so we could get rid of <code>as_local_hir_id</code> entirely</p>",
        "id": 194379758,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079371
    },
    {
        "content": "<p>it's a bit long, but if you like it...</p>",
        "id": 194379770,
        "sender_full_name": "eddyb",
        "timestamp": 1587079384
    },
    {
        "content": "<p>the other thing is that I want the directions to be symmetrical</p>",
        "id": 194379777,
        "sender_full_name": "eddyb",
        "timestamp": 1587079392
    },
    {
        "content": "<p>i.e. <code>hir_id_to_local_def_id</code></p>",
        "id": 194379785,
        "sender_full_name": "eddyb",
        "timestamp": 1587079398
    },
    {
        "content": "<p>well, its just that it exists</p>",
        "id": 194379790,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079402
    },
    {
        "content": "<p>if you pick the one you want</p>",
        "id": 194379791,
        "sender_full_name": "eddyb",
        "timestamp": 1587079403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/194379790\" title=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/194379790\">said</a>:</p>\n<blockquote>\n<p>well, its just that it exists</p>\n</blockquote>\n<p>you're rewriting the compiler, what's a little renaming :P</p>",
        "id": 194379829,
        "sender_full_name": "eddyb",
        "timestamp": 1587079424
    },
    {
        "content": "<p>and having <code>local</code> in the name makes it pretty clear</p>",
        "id": 194379841,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079433
    },
    {
        "content": "<p>yeah that is a bonus</p>",
        "id": 194379860,
        "sender_full_name": "eddyb",
        "timestamp": 1587079442
    },
    {
        "content": "<p>actually, this is good, because eventually we want <code>LocalDefId &lt;-&gt; HirId</code> to be free</p>",
        "id": 194379898,
        "sender_full_name": "eddyb",
        "timestamp": 1587079463
    },
    {
        "content": "<p>i.e. each <code>LocalDefId</code> would be the root of a HIR subtree</p>",
        "id": 194379910,
        "sender_full_name": "eddyb",
        "timestamp": 1587079477
    },
    {
        "content": "<p>so the longer name will incentivize that transition</p>",
        "id": 194380051,
        "sender_full_name": "eddyb",
        "timestamp": 1587079597
    },
    {
        "content": "<p>and tbh a lot of functions in the compiler are longer that that already^^</p>",
        "id": 194380097,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079639
    },
    {
        "content": "<p>lol</p>",
        "id": 194380115,
        "sender_full_name": "eddyb",
        "timestamp": 1587079661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> as for queries, that is easy, -ish</p>",
        "id": 194380128,
        "sender_full_name": "eddyb",
        "timestamp": 1587079675
    },
    {
        "content": "<p>first off, you exclude <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L90-L236\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L90-L236\">https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L90-L236</a></p>",
        "id": 194380198,
        "sender_full_name": "eddyb",
        "timestamp": 1587079711
    },
    {
        "content": "<p>as all of those are supported cross-crate</p>",
        "id": 194380212,
        "sender_full_name": "eddyb",
        "timestamp": 1587079726
    },
    {
        "content": "<p>then, for the remaining queries that take <code>DefId</code>s, find where they're provided and see if they <code>expect_local</code> right away</p>",
        "id": 194380252,
        "sender_full_name": "eddyb",
        "timestamp": 1587079765
    },
    {
        "content": "<p>those two facts combined means they can be changed to take <code>LocalDefId</code></p>",
        "id": 194380257,
        "sender_full_name": "eddyb",
        "timestamp": 1587079776
    },
    {
        "content": "<p>ok</p>",
        "id": 194380262,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079778
    },
    {
        "content": "<p>very cool thank you</p>",
        "id": 194380333,
        "sender_full_name": "marmeladema",
        "timestamp": 1587079813
    },
    {
        "content": "<p>thank you for taking this on :D</p>",
        "id": 194380636,
        "sender_full_name": "eddyb",
        "timestamp": 1587080145
    },
    {
        "content": "<p>I can't do anything more complicated with what i know about the compiler right now, so a bit of refactor allows me to learn a bit of things work.</p>",
        "id": 194380768,
        "sender_full_name": "marmeladema",
        "timestamp": 1587080243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> perf test is done :D</p>",
        "id": 194409299,
        "sender_full_name": "marmeladema",
        "timestamp": 1587112197
    },
    {
        "content": "<p>aaaaaa love the noiseless :D</p>",
        "id": 194429407,
        "sender_full_name": "eddyb",
        "timestamp": 1587125149
    },
    {
        "content": "<p>Of the perf results?</p>",
        "id": 194437627,
        "sender_full_name": "marmeladema",
        "timestamp": 1587129247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> could / should <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_hir/lang_items.rs#L87\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_hir/lang_items.rs#L87\">https://github.com/rust-lang/rust/blob/master/src/librustc_hir/lang_items.rs#L87</a> return an <code>Option&lt;LocalDefId&gt;</code> instead?</p>",
        "id": 194438320,
        "sender_full_name": "marmeladema",
        "timestamp": 1587129582
    },
    {
        "content": "<p>no, lang items can be from other crates</p>",
        "id": 194438426,
        "sender_full_name": "eddyb",
        "timestamp": 1587129610
    },
    {
        "content": "<p>this is very sad :(</p>",
        "id": 194438495,
        "sender_full_name": "marmeladema",
        "timestamp": 1587129635
    },
    {
        "content": "<p>e.g. when you compile regular user code, all lang items are from <code>core</code>, <code>alloc</code> and <code>std</code></p>",
        "id": 194438511,
        "sender_full_name": "eddyb",
        "timestamp": 1587129640
    },
    {
        "content": "<p>ok</p>",
        "id": 194438525,
        "sender_full_name": "marmeladema",
        "timestamp": 1587129648
    },
    {
        "content": "<p>I am changing <code>associated_items</code> query to accept a<code>LocalDefId</code> instead of a <code>DefId</code> but i endup adding expect_local() everywhere</p>",
        "id": 194439396,
        "sender_full_name": "marmeladema",
        "timestamp": 1587129995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> that doesn't sound like a local query</p>",
        "id": 194439466,
        "sender_full_name": "eddyb",
        "timestamp": 1587130029
    },
    {
        "content": "<p>iirc, its not in a list of external queries</p>",
        "id": 194439555,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130067
    },
    {
        "content": "<p>ah, this is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L106-L111\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L106-L111\">https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L106-L111</a></p>",
        "id": 194439667,
        "sender_full_name": "eddyb",
        "timestamp": 1587130101
    },
    {
        "content": "<p>so, for <code>associated_items</code>: <a href=\"https://github.com/rust-lang/rust/search?q=%22fn+associated_items%22&amp;unscoped_q=%22fn+associated_items%22\" title=\"https://github.com/rust-lang/rust/search?q=%22fn+associated_items%22&amp;unscoped_q=%22fn+associated_items%22\">https://github.com/rust-lang/rust/search?q=%22fn+associated_items%22&amp;unscoped_q=%22fn+associated_items%22</a></p>",
        "id": 194439752,
        "sender_full_name": "eddyb",
        "timestamp": 1587130130
    },
    {
        "content": "<p>Yes this is the one i am modifying</p>",
        "id": 194439818,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> so here's the giveaway: the <code>def_id</code> isn't <code>.expect_local</code>'d, instead it's used to call a global query <a href=\"https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src/librustc_ty/ty.rs#L223-L224\" title=\"https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src/librustc_ty/ty.rs#L223-L224\">https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src/librustc_ty/ty.rs#L223-L224</a></p>",
        "id": 194439822,
        "sender_full_name": "eddyb",
        "timestamp": 1587130163
    },
    {
        "content": "<p>if it had <code>.expect_local</code> then you could change its signature</p>",
        "id": 194439859,
        "sender_full_name": "eddyb",
        "timestamp": 1587130180
    },
    {
        "content": "<p>but <code>associated_item_def_ids</code> expect a local id</p>",
        "id": 194439946,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130210
    },
    {
        "content": "<p>and its the first called in <code>associated_items</code></p>",
        "id": 194439978,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130223
    },
    {
        "content": "<p>no it doesn't: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L106-L111\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L106-L111\">https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/decoder/cstore_impl.rs#L106-L111</a></p>",
        "id": 194439990,
        "sender_full_name": "eddyb",
        "timestamp": 1587130228
    },
    {
        "content": "<p>oh I see</p>",
        "id": 194440032,
        "sender_full_name": "eddyb",
        "timestamp": 1587130241
    },
    {
        "content": "<p>okay this is kind of confusing at first</p>",
        "id": 194440071,
        "sender_full_name": "eddyb",
        "timestamp": 1587130252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> the <em>function</em> <code>associated_item_def_ids</code> is the local-only provider for that query</p>",
        "id": 194440122,
        "sender_full_name": "eddyb",
        "timestamp": 1587130271
    },
    {
        "content": "<p>but <code>tcx.associated_item_def_ids</code> can dispatch to the <code>rustc_metadata</code> provider</p>",
        "id": 194440144,
        "sender_full_name": "eddyb",
        "timestamp": 1587130286
    },
    {
        "content": "<p>hu ooook</p>",
        "id": 194440164,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130294
    },
    {
        "content": "<p>every makes much more sense now</p>",
        "id": 194440184,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130307
    },
    {
        "content": "<p>phew</p>",
        "id": 194440197,
        "sender_full_name": "eddyb",
        "timestamp": 1587130312
    },
    {
        "content": "<p>Thanks</p>",
        "id": 194440297,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130339
    },
    {
        "content": "<p>/me was worried they'd make it worse</p>",
        "id": 194440302,
        "sender_full_name": "eddyb",
        "timestamp": 1587130341
    },
    {
        "content": "<p>so identifying queries than should be converted to a local def is not that simple^^</p>",
        "id": 194440386,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130383
    },
    {
        "content": "<p>yeaaaah</p>",
        "id": 194440458,
        "sender_full_name": "eddyb",
        "timestamp": 1587130410
    },
    {
        "content": "<p>but usually the local-only stuff has <code>expect_local</code> quite early</p>",
        "id": 194440498,
        "sender_full_name": "eddyb",
        "timestamp": 1587130426
    },
    {
        "content": "<p><code>typeck_tables_of</code>, for example, should have <code>expect_local</code> + no <code>rustc_metadata</code> counterpart</p>",
        "id": 194440567,
        "sender_full_name": "eddyb",
        "timestamp": 1587130450
    },
    {
        "content": "<p>Ok i'll look into this one first then</p>",
        "id": 194440746,
        "sender_full_name": "marmeladema",
        "timestamp": 1587130542
    },
    {
        "content": "<p>Sorry to bother you with all my questions but i noticed that  <code>typeck_tables_of</code> has <code>cache_on_disk_if { key.is_local() }</code></p>",
        "id": 194441981,
        "sender_full_name": "marmeladema",
        "timestamp": 1587131123
    },
    {
        "content": "<p>Why cache that on disk if its only available for the local crate?</p>",
        "id": 194442024,
        "sender_full_name": "marmeladema",
        "timestamp": 1587131143
    },
    {
        "content": "<p>haha</p>",
        "id": 194442134,
        "sender_full_name": "eddyb",
        "timestamp": 1587131191
    },
    {
        "content": "<p>probably copy-paste</p>",
        "id": 194442140,
        "sender_full_name": "eddyb",
        "timestamp": 1587131194
    },
    {
        "content": "<p>idk if there's a shorthand for <code>cache_on_disk_if { true }</code></p>",
        "id": 194442171,
        "sender_full_name": "eddyb",
        "timestamp": 1587131205
    },
    {
        "content": "<p>but why even bother caching that? Its already in memory because its the local crate right?</p>",
        "id": 194442245,
        "sender_full_name": "marmeladema",
        "timestamp": 1587131244
    },
    {
        "content": "<p>\"on disk\" means between incremental compilations</p>",
        "id": 194442422,
        "sender_full_name": "eddyb",
        "timestamp": 1587131302
    },
    {
        "content": "<p>completely separate system to <code>rmeta</code></p>",
        "id": 194442447,
        "sender_full_name": "eddyb",
        "timestamp": 1587131311
    },
    {
        "content": "<p>oh ok</p>",
        "id": 194442549,
        "sender_full_name": "marmeladema",
        "timestamp": 1587131351
    },
    {
        "content": "<p>(one day maybe we can combine them and have <code>rmeta</code> just be a partial incremental snapshot or something)</p>",
        "id": 194443389,
        "sender_full_name": "eddyb",
        "timestamp": 1587131743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> should <code>trait_impls</code> in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_hir/hir.rs#L619\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_hir/hir.rs#L619\">https://github.com/rust-lang/rust/blob/master/src/librustc_hir/hir.rs#L619</a> use <code>LocalDefId</code>?</p>",
        "id": 194448875,
        "sender_full_name": "marmeladema",
        "timestamp": 1587133926
    },
    {
        "content": "<p>The comment for the struct states that </p>\n<div class=\"codehilite\"><pre><span></span>/// The top-level data structure that stores the entire contents of\n/// the crate currently being compiled.\n</pre></div>",
        "id": 194448958,
        "sender_full_name": "marmeladema",
        "timestamp": 1587133965
    },
    {
        "content": "<p>not for the <code>DefId</code>, I believe that's the trait being implemented</p>",
        "id": 194448960,
        "sender_full_name": "eddyb",
        "timestamp": 1587133966
    },
    {
        "content": "<p><code>Vec&lt;HirId&gt;</code> OTOH.... could totally be <code>LocalDefId</code></p>",
        "id": 194448996,
        "sender_full_name": "eddyb",
        "timestamp": 1587133982
    },
    {
        "content": "<p>same for modules and proc macros</p>",
        "id": 194449027,
        "sender_full_name": "eddyb",
        "timestamp": 1587133997
    },
    {
        "content": "<p>stuff like this lol <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_hir/hir.rs#L1793\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_hir/hir.rs#L1793\">https://github.com/rust-lang/rust/blob/master/src/librustc_hir/hir.rs#L1793</a></p>",
        "id": 194449088,
        "sender_full_name": "eddyb",
        "timestamp": 1587134021
    },
    {
        "content": "<p><code>ItemId</code>, <code>ImplItemId</code> and <code>TraitItemId</code> could all hold <code>LocalDefId</code>s</p>",
        "id": 194449210,
        "sender_full_name": "eddyb",
        "timestamp": 1587134051
    },
    {
        "content": "<p>instead of <code>HirId</code>s</p>",
        "id": 194449217,
        "sender_full_name": "eddyb",
        "timestamp": 1587134055
    },
    {
        "content": "<p>Dunno if that would help for my current \"problem\". I trying to check if <code>trait_impls_of</code> is purely local or not</p>",
        "id": 194449613,
        "sender_full_name": "marmeladema",
        "timestamp": 1587134193
    },
    {
        "content": "<p>sorry</p>",
        "id": 194449637,
        "sender_full_name": "eddyb",
        "timestamp": 1587134204
    },
    {
        "content": "<p>it's not local</p>",
        "id": 194449663,
        "sender_full_name": "eddyb",
        "timestamp": 1587134216
    },
    {
        "content": "<p>thanks^^</p>",
        "id": 194449685,
        "sender_full_name": "marmeladema",
        "timestamp": 1587134225
    },
    {
        "content": "<p>ah i think <code>def_span</code> should take a local def id because its unwrap() if not local</p>",
        "id": 194450211,
        "sender_full_name": "marmeladema",
        "timestamp": 1587134413
    },
    {
        "content": "<p><code>def_span</code> is in the <code>rustc_metadata</code> list :P</p>",
        "id": 194450284,
        "sender_full_name": "eddyb",
        "timestamp": 1587134450
    },
    {
        "content": "<p>oh but its a query?</p>",
        "id": 194450351,
        "sender_full_name": "marmeladema",
        "timestamp": 1587134477
    },
    {
        "content": "<p>damn, i missed that</p>",
        "id": 194450413,
        "sender_full_name": "marmeladema",
        "timestamp": 1587134503
    },
    {
        "content": "<p>oh no my PR broke clippy</p>",
        "id": 194481583,
        "sender_full_name": "marmeladema",
        "timestamp": 1587148051
    },
    {
        "content": "<p>that's normal, until we switch to <code>git subtree</code></p>",
        "id": 194482270,
        "sender_full_name": "eddyb",
        "timestamp": 1587148360
    },
    {
        "content": "<p>I am right to think that <code>mir_borrowck</code> query should take a <code>LocalDefId</code>?</p>",
        "id": 194497025,
        "sender_full_name": "marmeladema",
        "timestamp": 1587156103
    },
    {
        "content": "<p>As well as probably <code>mir_validated</code></p>",
        "id": 194497137,
        "sender_full_name": "marmeladema",
        "timestamp": 1587156164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> i am trying to convert a <code>DefIdSet</code> to a <code>FxHashSet&lt;LocalDefId&gt;</code>but it triggers an error because it does not implement a train for <code>ArenaAllocatable</code></p>",
        "id": 194540282,
        "sender_full_name": "marmeladema",
        "timestamp": 1587210282
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>ArenaAllocatable` is not satisfied\n  --&gt; src/librustc_mir/transform/mod.rs:97:21\n   |\n97 |     tcx.arena.alloc(set)\n   |                     ^^^\n   |                     |\n   |                     expected an implementor of trait `rustc_middle::arena::ArenaAllocatable`\n   |                     help: consider borrowing here: `&amp;set`\n   |\n   = note: required because of the requirements on the impl of `rustc_middle::arena::ArenaAllocatable` for `std::collections::HashSet&lt;rustc_span::def_id::LocalDefId, std::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;`\n</pre></div>",
        "id": 194540288,
        "sender_full_name": "marmeladema",
        "timestamp": 1587210307
    },
    {
        "content": "<p>there's a thing somewhere</p>",
        "id": 194540290,
        "sender_full_name": "eddyb",
        "timestamp": 1587210314
    },
    {
        "content": "<p>lemme find it</p>",
        "id": 194540292,
        "sender_full_name": "eddyb",
        "timestamp": 1587210324
    },
    {
        "content": "<p>I grepped <code>ArenaAllocatable</code> but what i found wasnt very useful</p>",
        "id": 194540297,
        "sender_full_name": "marmeladema",
        "timestamp": 1587210352
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/arena.rs#L37\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/arena.rs#L37\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/arena.rs#L37</a></p>",
        "id": 194540344,
        "sender_full_name": "eddyb",
        "timestamp": 1587210414
    },
    {
        "content": "<p>we should also remove <code>{DefId,Node}{Map,Set}</code> and any other aliases</p>",
        "id": 194540355,
        "sender_full_name": "eddyb",
        "timestamp": 1587210479
    },
    {
        "content": "<p>they offer no benefits IMO</p>",
        "id": 194540392,
        "sender_full_name": "eddyb",
        "timestamp": 1587210487
    },
    {
        "content": "<p>Ok, i might do that but in another PR</p>",
        "id": 194540395,
        "sender_full_name": "marmeladema",
        "timestamp": 1587210511
    },
    {
        "content": "<p>great that works fine! Thank you!</p>",
        "id": 194540704,
        "sender_full_name": "marmeladema",
        "timestamp": 1587210977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> about <code>mir_validated</code> and <code>mir_borrowck</code> taking a LocalDefId, does that seem sensible?</p>",
        "id": 194540942,
        "sender_full_name": "marmeladema",
        "timestamp": 1587211322
    },
    {
        "content": "<p>probably, yeah</p>",
        "id": 194540983,
        "sender_full_name": "eddyb",
        "timestamp": 1587211338
    },
    {
        "content": "<p>since those only happen locally, and only <code>optimized_mir</code>, I think, is serialized cross-crate</p>",
        "id": 194540996,
        "sender_full_name": "eddyb",
        "timestamp": 1587211356
    },
    {
        "content": "<p><code>mir_borrowck</code> definitely, <code>mir_validated</code> only if <code>rmeta::encoder</code> doesn't mention it</p>",
        "id": 194541005,
        "sender_full_name": "eddyb",
        "timestamp": 1587211382
    },
    {
        "content": "<p>ok</p>",
        "id": 194541012,
        "sender_full_name": "marmeladema",
        "timestamp": 1587211390
    },
    {
        "content": "<p>(but I suspect it doesn't)</p>",
        "id": 194541021,
        "sender_full_name": "eddyb",
        "timestamp": 1587211419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> when do you think <a href=\"https://github.com/rust-lang/rust/pull/71215\" title=\"https://github.com/rust-lang/rust/pull/71215\">https://github.com/rust-lang/rust/pull/71215</a> will land? I am starting to have quite of a long list of commits locally on top of this</p>",
        "id": 194547237,
        "sender_full_name": "marmeladema",
        "timestamp": 1587220022
    },
    {
        "content": "<p>oh drat we were too late</p>",
        "id": 194547250,
        "sender_full_name": "eddyb",
        "timestamp": 1587220055
    },
    {
        "content": "<p>next week, after the next version of Rust is released</p>",
        "id": 194547251,
        "sender_full_name": "varkor",
        "timestamp": 1587220060
    },
    {
        "content": "<p>it's fine to base a new PR on top of it, since it was approved</p>",
        "id": 194547299,
        "sender_full_name": "eddyb",
        "timestamp": 1587220083
    },
    {
        "content": "<p><code>git subtree</code> can't come soon enough Q_Q</p>",
        "id": 194547303,
        "sender_full_name": "eddyb",
        "timestamp": 1587220090
    },
    {
        "content": "<p>Hum, in this case, should the target branch be master or my already approved branch?</p>",
        "id": 194547312,
        "sender_full_name": "marmeladema",
        "timestamp": 1587220123
    },
    {
        "content": "<p>oh that's always <code>master</code>, you'd just note in the PR description that it's based on another PR</p>",
        "id": 194547331,
        "sender_full_name": "eddyb",
        "timestamp": 1587220161
    },
    {
        "content": "<p>and we have the label S-blocked now</p>",
        "id": 194547333,
        "sender_full_name": "eddyb",
        "timestamp": 1587220167
    },
    {
        "content": "<p>ok</p>",
        "id": 194547411,
        "sender_full_name": "marmeladema",
        "timestamp": 1587220265
    },
    {
        "content": "<p>About <code>entry_fn</code> query, it takes a cratenum as argument, but i _think_ i've only see it called with <code>CRATE_LOCAL</code></p>",
        "id": 194547607,
        "sender_full_name": "marmeladema",
        "timestamp": 1587220535
    },
    {
        "content": "<p>So should it does not take any argument and return a LocalDefId? Or could i introduce a <code>local_entry_fn</code> query to return such a LocalDefId?</p>",
        "id": 194547670,
        "sender_full_name": "marmeladema",
        "timestamp": 1587220598
    },
    {
        "content": "<p>the argument doesn't matter although we might want to change it idk</p>",
        "id": 194549271,
        "sender_full_name": "eddyb",
        "timestamp": 1587222740
    },
    {
        "content": "<p>it should return <code>LocalDefId</code> though</p>",
        "id": 194549275,
        "sender_full_name": "eddyb",
        "timestamp": 1587222749
    },
    {
        "content": "<p>Hum can it return a LocalDefId if you request the entrypoint of a crate that is not the local one?</p>",
        "id": 194549393,
        "sender_full_name": "marmeladema",
        "timestamp": 1587222888
    },
    {
        "content": "<p>you can't do that</p>",
        "id": 194549433,
        "sender_full_name": "eddyb",
        "timestamp": 1587222922
    },
    {
        "content": "<p>there are a bunch of <code>CrateNum</code> arguments that are always <code>LOCAL_CRATE</code></p>",
        "id": 194549439,
        "sender_full_name": "eddyb",
        "timestamp": 1587222933
    },
    {
        "content": "<p>maybe they should be <code>()</code> or some <code>struct LocalCrate;</code> idk</p>",
        "id": 194549489,
        "sender_full_name": "eddyb",
        "timestamp": 1587222964
    },
    {
        "content": "<p>but if we change them, we should change them all at once otherwise it would be confusing</p>",
        "id": 194549496,
        "sender_full_name": "eddyb",
        "timestamp": 1587222980
    },
    {
        "content": "<p>Oh ok, it a bit weird to even have an argument then no? If it fails with any other value than the current crate</p>",
        "id": 194549499,
        "sender_full_name": "marmeladema",
        "timestamp": 1587222993
    },
    {
        "content": "<p>we didn't support <code>()</code> arguments back when they were added</p>",
        "id": 194549510,
        "sender_full_name": "eddyb",
        "timestamp": 1587223015
    },
    {
        "content": "<p>I understand, i can add an assert in entry_fn as start that enforce that the argument is local crate</p>",
        "id": 194549513,
        "sender_full_name": "marmeladema",
        "timestamp": 1587223021
    },
    {
        "content": "<p>oh yeah they should all have it</p>",
        "id": 194549523,
        "sender_full_name": "eddyb",
        "timestamp": 1587223031
    },
    {
        "content": "<p>in the mean time</p>",
        "id": 194549525,
        "sender_full_name": "marmeladema",
        "timestamp": 1587223035
    },
    {
        "content": "<p>Ok  sounds good</p>",
        "id": 194549533,
        "sender_full_name": "marmeladema",
        "timestamp": 1587223049
    },
    {
        "content": "<p>if one of the queries that takes <code>CrateNum</code> (and is only used with <code>LOCAL_CRATE</code>) is missing one of those asserts, that's a mistake</p>",
        "id": 194549537,
        "sender_full_name": "eddyb",
        "timestamp": 1587223055
    },
    {
        "content": "<p>I am slowly converting queries to local_def_id and removing expect_local where i can</p>",
        "id": 194549544,
        "sender_full_name": "marmeladema",
        "timestamp": 1587223069
    },
    {
        "content": "<p>entry_fn i am not sure exactly, but from what i've seen its only called with LOCAL_CRATE</p>",
        "id": 194549595,
        "sender_full_name": "marmeladema",
        "timestamp": 1587223096
    },
    {
        "content": "<p>yeah that makes sense, we only search for <code>fn main</code> within one crate</p>",
        "id": 194549604,
        "sender_full_name": "eddyb",
        "timestamp": 1587223116
    },
    {
        "content": "<p>anyway, making the proc macro that you use to define queries allow argument counts != 1 and tupling them for the internals (but not for the <code>tcx</code> methods) would make this more sensible</p>",
        "id": 194549635,
        "sender_full_name": "eddyb",
        "timestamp": 1587223189
    },
    {
        "content": "<p>because you'd call <code>tcx.entry_fn()</code></p>",
        "id": 194549638,
        "sender_full_name": "eddyb",
        "timestamp": 1587223197
    },
    {
        "content": "<p>but that's more effort</p>",
        "id": 194549686,
        "sender_full_name": "eddyb",
        "timestamp": 1587223223
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  here we go: <a href=\"https://github.com/rust-lang/rust/pull/71292\" title=\"https://github.com/rust-lang/rust/pull/71292\">https://github.com/rust-lang/rust/pull/71292</a><br>\nI made one commit per query (sometime I cheated and handled 2 queries in one commit I have to admit :p)</p>",
        "id": 194554005,
        "sender_full_name": "marmeladema",
        "timestamp": 1587229267
    },
    {
        "content": "<p>I am starting to lack of ideas on how to find places that i could convert to use <code>LocalDefId</code></p>",
        "id": 194554103,
        "sender_full_name": "marmeladema",
        "timestamp": 1587229407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/194481583\" title=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/194481583\">said</a>:</p>\n<blockquote>\n<p>oh no my PR broke clippy</p>\n</blockquote>\n<p>another (or the same) PR also broke Miri. it's fine, the fix wasnt hard. ;)</p>",
        "id": 194586217,
        "sender_full_name": "RalfJ",
        "timestamp": 1587285303
    },
    {
        "content": "<p>Oh sorry it that was me, but yeah i changed / am changing some methods prototype about hird / defid etc so anyone using those will be broken :/</p>",
        "id": 194586578,
        "sender_full_name": "marmeladema",
        "timestamp": 1587285906
    },
    {
        "content": "<p>This one <a href=\"https://github.com/rust-lang/rust/pull/71292\" title=\"https://github.com/rust-lang/rust/pull/71292\">https://github.com/rust-lang/rust/pull/71292</a> might also break miri again</p>",
        "id": 194586632,
        "sender_full_name": "marmeladema",
        "timestamp": 1587285985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> i rebased over master in both PR. The perf results look good by the way: <a href=\"https://perf.rust-lang.org/compare.html?start=339a938fa6582d5c6f84d811680a1031c684c1c6&amp;end=a70b0e7f3482873f39970306a89e352ead61b4f5\" title=\"https://perf.rust-lang.org/compare.html?start=339a938fa6582d5c6f84d811680a1031c684c1c6&amp;end=a70b0e7f3482873f39970306a89e352ead61b4f5\">https://perf.rust-lang.org/compare.html?start=339a938fa6582d5c6f84d811680a1031c684c1c6&amp;end=a70b0e7f3482873f39970306a89e352ead61b4f5</a></p>",
        "id": 194592569,
        "sender_full_name": "marmeladema",
        "timestamp": 1587295259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/194586578\" title=\"#narrow/stream/131828-t-compiler/topic/LocalDefId.20instead.20of.20DefId.20where.20possible/near/194586578\">said</a>:</p>\n<blockquote>\n<p>Oh sorry it that was me, but yeah i changed / am changing some methods prototype about hird / defid etc so anyone using those will be broken :/</p>\n</blockquote>\n<p>that's okay, this happens with refactorings :)</p>",
        "id": 194593575,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296789
    },
    {
        "content": "<p>the hardest part of me usually is figuring out from the PR what the pattern  is -- typically the actual fix is quite mechanical. For example for <a href=\"https://github.com/rust-lang/miri/pull/1327\" title=\"https://github.com/rust-lang/miri/pull/1327\">https://github.com/rust-lang/miri/pull/1327</a> I had to learn about <code>to_def_id</code>.</p>",
        "id": 194593597,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296872
    },
    {
        "content": "<p>so if the PR description says something like \"to fix tools, you likely just need to insert <code>to_def_id()</code> in places where typechecking fails\", that helps a lot</p>",
        "id": 194593639,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296895
    },
    {
        "content": "<p>Also Cc'ing tool maintainers <em>after the PR landed</em> can help, so we can more quickly identify the PR. (please not before that, the actual PR review discussion would just be noise in my inbox.^^)</p>",
        "id": 194593655,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296951
    },
    {
        "content": "<p>Oh yeah i should have though about that! I'll keep that in mind!</p>",
        "id": 194593657,
        "sender_full_name": "marmeladema",
        "timestamp": 1587296971
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> i assume you maintain miri. Who else should cc for other tools?</p>",
        "id": 194593830,
        "sender_full_name": "marmeladema",
        "timestamp": 1587297232
    },
    {
        "content": "<p>looks like <code>@matthiaskrgr</code> usually does the rustup for clippy</p>",
        "id": 194594250,
        "sender_full_name": "RalfJ",
        "timestamp": 1587297863
    },
    {
        "content": "<p>(my GH handle is <code>@RalfJung</code>)</p>",
        "id": 194594251,
        "sender_full_name": "RalfJ",
        "timestamp": 1587297868
    },
    {
        "content": "<p>not sure if any other tool would be affected?</p>",
        "id": 194594256,
        "sender_full_name": "RalfJ",
        "timestamp": 1587297897
    },
    {
        "content": "<p>Ok thanks. I'll tag both of you in the PRs when its merged.</p>",
        "id": 194595111,
        "sender_full_name": "marmeladema",
        "timestamp": 1587299167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> thanks &lt;3</p>",
        "id": 194596897,
        "sender_full_name": "RalfJ",
        "timestamp": 1587301742
    },
    {
        "content": "<p>Oh no conflicts again. When does the beta freeze ends?^^</p>",
        "id": 194616319,
        "sender_full_name": "marmeladema",
        "timestamp": 1587327715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> <a href=\"https://forge.rust-lang.org/\" title=\"https://forge.rust-lang.org/\">https://forge.rust-lang.org/</a></p>",
        "id": 194617593,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587329624
    },
    {
        "content": "<p>Oh thank you, i was not aware of that forge :)</p>",
        "id": 194620317,
        "sender_full_name": "marmeladema",
        "timestamp": 1587334274
    },
    {
        "content": "<p>Is the no breaking week over? According to the forge, it should but i don't think the new release is out yet?</p>",
        "id": 194896262,
        "sender_full_name": "marmeladema",
        "timestamp": 1587540530
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can i re-approve the PR \"myself\" but tagging you? I've other seen people do something like \"@bors r=eddyb\"</p>",
        "id": 194896681,
        "sender_full_name": "marmeladema",
        "timestamp": 1587540848
    },
    {
        "content": "<p>Only org members can order bors around. I've added it back to the queue. Beta branched yesterday BTW. That happens before the previous beta gets promoted to stable</p>",
        "id": 194950709,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587570347
    },
    {
        "content": "<p>Ok thank you for the explanations!</p>",
        "id": 194953283,
        "sender_full_name": "marmeladema",
        "timestamp": 1587571396
    },
    {
        "content": "<p>I believe that an org member can give someone the permission to approve a particular PR. But I haven't seen that often <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 194953550,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1587571511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> just rebased <a href=\"https://github.com/rust-lang/rust/pull/71215\" title=\"https://github.com/rust-lang/rust/pull/71215\">https://github.com/rust-lang/rust/pull/71215</a></p>",
        "id": 195030428,
        "sender_full_name": "marmeladema",
        "timestamp": 1587630096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> Another merge conflict <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span>. Sorry about the bad luck. Once you rebase you'll be at the top of the queue again.</p>",
        "id": 195102285,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587667181
    },
    {
        "content": "<p>Thanks again for working on this! I was very happy to see how fast you resolved most of <a href=\"https://github.com/rust-lang/rust/issues/70853\" title=\"https://github.com/rust-lang/rust/issues/70853\">#70853</a> between <a href=\"https://github.com/rust-lang/rust/issues/71215\" title=\"https://github.com/rust-lang/rust/issues/71215\">#71215</a> and <a href=\"https://github.com/rust-lang/rust/issues/71292\" title=\"https://github.com/rust-lang/rust/issues/71292\">#71292</a></p>",
        "id": 195102466,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587667278
    },
    {
        "content": "<p>haha no worries, i am rebasing right now lets hope i won't mess up anything^^</p>",
        "id": 195102742,
        "sender_full_name": "marmeladema",
        "timestamp": 1587667428
    },
    {
        "content": "<p>running the tests locally as we speak :)</p>",
        "id": 195108644,
        "sender_full_name": "marmeladema",
        "timestamp": 1587670245
    },
    {
        "content": "<p>i can't wait for my new laptop to arrive so that i can compile faster</p>",
        "id": 195108734,
        "sender_full_name": "marmeladema",
        "timestamp": 1587670287
    },
    {
        "content": "<p>Rebase is done for <a href=\"https://github.com/rust-lang/rust/pull/71215\" title=\"https://github.com/rust-lang/rust/pull/71215\">https://github.com/rust-lang/rust/pull/71215</a></p>",
        "id": 195110113,
        "sender_full_name": "marmeladema",
        "timestamp": 1587670982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> lets hope next rollup won't conflict again</p>",
        "id": 195110327,
        "sender_full_name": "marmeladema",
        "timestamp": 1587671100
    },
    {
        "content": "<p>hu build were cancelled?</p>",
        "id": 195110409,
        "sender_full_name": "marmeladema",
        "timestamp": 1587671152
    },
    {
        "content": "<p>I am doomed lol</p>",
        "id": 195110416,
        "sender_full_name": "marmeladema",
        "timestamp": 1587671158
    },
    {
        "content": "<p>Maybe a CI issue, try <code>git commit --amend --no-edit --date \"$(date)\"</code> followed by a force push?</p>",
        "id": 195110662,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587671276
    },
    {
        "content": "<p>Done! <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> <br>\nThank you help helping me through this</p>",
        "id": 195110854,
        "sender_full_name": "marmeladema",
        "timestamp": 1587671373
    },
    {
        "content": "<p>hum cancelled again. I think GHA is having a hard time</p>",
        "id": 195112049,
        "sender_full_name": "marmeladema",
        "timestamp": 1587672002
    },
    {
        "content": "<p>Oh well. BACK IN THE QUEUE.</p>",
        "id": 195112858,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587672409
    },
    {
        "content": "<p>Apparently there are errors while building librustdoc: <a href=\"https://dev.azure.com/rust-lang/rust/_build/results?buildId=27278&amp;view=logs&amp;j=74054d28-c774-5fab-ecc2-352fe71b230e&amp;t=6fac545a-db64-5c3f-de7a-e9f2d46d7eae\" title=\"https://dev.azure.com/rust-lang/rust/_build/results?buildId=27278&amp;view=logs&amp;j=74054d28-c774-5fab-ecc2-352fe71b230e&amp;t=6fac545a-db64-5c3f-de7a-e9f2d46d7eae\">https://dev.azure.com/rust-lang/rust/_build/results?buildId=27278&amp;view=logs&amp;j=74054d28-c774-5fab-ecc2-352fe71b230e&amp;t=6fac545a-db64-5c3f-de7a-e9f2d46d7eae</a></p>",
        "id": 195125180,
        "sender_full_name": "marmeladema",
        "timestamp": 1587679527
    },
    {
        "content": "<p>but I don't know how to build it myself locally to fix the errors</p>",
        "id": 195125211,
        "sender_full_name": "marmeladema",
        "timestamp": 1587679545
    },
    {
        "content": "<p>I might just have to rebase again to reproduce the CI errors</p>",
        "id": 195126071,
        "sender_full_name": "marmeladema",
        "timestamp": 1587680088
    },
    {
        "content": "<p>Rebased <a href=\"https://github.com/rust-lang/rust/pull/71215\" title=\"https://github.com/rust-lang/rust/pull/71215\">https://github.com/rust-lang/rust/pull/71215</a> again. Its starting to be boring to rebase all the time :o</p>",
        "id": 195128644,
        "sender_full_name": "marmeladema",
        "timestamp": 1587681887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> if you could approve one more time that would be awesome</p>",
        "id": 195129038,
        "sender_full_name": "marmeladema",
        "timestamp": 1587682203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the first PR got merged. I cc'ed you on it to warn you that it might break miri.</p>",
        "id": 195154819,
        "sender_full_name": "marmeladema",
        "timestamp": 1587713905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> do you think you will have some time to take a look at <a href=\"https://github.com/rust-lang/rust/pull/71292\" title=\"https://github.com/rust-lang/rust/pull/71292\">https://github.com/rust-lang/rust/pull/71292</a>?</p>",
        "id": 195278763,
        "sender_full_name": "marmeladema",
        "timestamp": 1587810559
    },
    {
        "content": "<p>I read through it and for all the parts of the compiler I'm familiar with it looks correct. You'll want eddy to review the rest though.</p>",
        "id": 195287102,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587824794
    },
    {
        "content": "<p>sorry, I've been ignoring Rust stuff for the past week, looking at it now!</p>",
        "id": 195380612,
        "sender_full_name": "eddyb",
        "timestamp": 1587972137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> alright, is this PR the only thing you had waiting on me?</p>",
        "id": 195383149,
        "sender_full_name": "eddyb",
        "timestamp": 1587973925
    },
    {
        "content": "<p>Yep :) At least for me</p>",
        "id": 195383190,
        "sender_full_name": "marmeladema",
        "timestamp": 1587973967
    },
    {
        "content": "<p>Thanks, I'll fix the formatting nit and rebase over master</p>",
        "id": 195383203,
        "sender_full_name": "marmeladema",
        "timestamp": 1587973985
    },
    {
        "content": "<p>Oh right you already approved! Thanks!</p>",
        "id": 195383314,
        "sender_full_name": "marmeladema",
        "timestamp": 1587974091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> If you want more, there's <a href=\"https://github.com/rust-lang/rust/issues/71205\" title=\"https://github.com/rust-lang/rust/issues/71205\">#71205</a> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 195383579,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1587974339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> that will have to wait with everything else in my GH notifications</p>",
        "id": 195383756,
        "sender_full_name": "eddyb",
        "timestamp": 1587974436
    },
    {
        "content": "<p>I was asking for something related, just because it's easier to do it first</p>",
        "id": 195383776,
        "sender_full_name": "eddyb",
        "timestamp": 1587974451
    },
    {
        "content": "<p>and also <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> has been waiting for me for the past week</p>",
        "id": 195383792,
        "sender_full_name": "eddyb",
        "timestamp": 1587974461
    },
    {
        "content": "<p>Yeah, I see you have 30+ PRs assigned to you <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 195383809,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1587974468
    },
    {
        "content": "<p>I do? dear lord</p>",
        "id": 195383827,
        "sender_full_name": "eddyb",
        "timestamp": 1587974479
    },
    {
        "content": "<p>Good luck :D</p>",
        "id": 195383863,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1587974498
    },
    {
        "content": "<p>partey <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 195392980,
        "sender_full_name": "lcnr",
        "timestamp": 1587980012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> i've cc'ed you in the PR, but I broke miri again</p>",
        "id": 195531906,
        "sender_full_name": "marmeladema",
        "timestamp": 1588061999
    },
    {
        "content": "<p>I've never built miri but i guess i could try to fix it myself</p>",
        "id": 195532008,
        "sender_full_name": "marmeladema",
        "timestamp": 1588062062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> here is a proposal to replace the argument type of entry_fn  to <code>()</code>: <a href=\"https://github.com/rust-lang/rust/pull/71648\" title=\"https://github.com/rust-lang/rust/pull/71648\">https://github.com/rust-lang/rust/pull/71648</a></p>",
        "id": 195591391,
        "sender_full_name": "marmeladema",
        "timestamp": 1588091974
    },
    {
        "content": "<p>just that one :P?</p>",
        "id": 195591421,
        "sender_full_name": "eddyb",
        "timestamp": 1588091989
    },
    {
        "content": "<p>haha i wanted to check first if that was fine :) i'll do some more if the approach is sensible</p>",
        "id": 195591541,
        "sender_full_name": "marmeladema",
        "timestamp": 1588092030
    },
    {
        "content": "<p>Especially, i had to implement the <code>Key</code> trait for <code>()</code></p>",
        "id": 195591659,
        "sender_full_name": "marmeladema",
        "timestamp": 1588092081
    },
    {
        "content": "<p>Huhu niko answer about \"no local crate\" made think for a second that all the work i did to try to convert most things to <code>LocalDefId</code> was useless :'(</p>",
        "id": 195593975,
        "sender_full_name": "marmeladema",
        "timestamp": 1588093039
    },
    {
        "content": "<p>haha no</p>",
        "id": 195594052,
        "sender_full_name": "eddyb",
        "timestamp": 1588093074
    },
    {
        "content": "<p>that is far into the future at the pace we're moving at</p>",
        "id": 195594120,
        "sender_full_name": "eddyb",
        "timestamp": 1588093090
    },
    {
        "content": "<p>and it's more useful in the interim than just using <code>DefId</code> everywhere</p>",
        "id": 195594148,
        "sender_full_name": "eddyb",
        "timestamp": 1588093102
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 195594231,
        "sender_full_name": "marmeladema",
        "timestamp": 1588093138
    },
    {
        "content": "<p>Is there a reason why <code>codegen_fn_attrs</code> takes a <code>DefId</code> as its argument? Will it be called for non-local IDs? Or is it because you haven't already reached it?</p>",
        "id": 195863779,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263547
    },
    {
        "content": "<p>I mean, for the time being, is it safe to just slap a <code>.expect_local()</code> in here?</p>",
        "id": 195863936,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263615
    },
    {
        "content": "<p>It will be called for foreign statics to know if they are for example <code>#[thread_local]</code>.</p>",
        "id": 195863957,
        "sender_full_name": "bjorn3",
        "timestamp": 1588263626
    },
    {
        "content": "<p>I need it for <code>#[target_feature]</code></p>",
        "id": 195864013,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263653
    },
    {
        "content": "<p>I'd expect you can't have <code>#[target_feature]</code> on a foreign static, right?</p>",
        "id": 195864114,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263704
    },
    {
        "content": "<p>It may be possible that <code>codegen_fn_attrs</code> is the one to perform that validation.</p>",
        "id": 195864289,
        "sender_full_name": "bjorn3",
        "timestamp": 1588263791
    },
    {
        "content": "<p><code>#[target_feature]</code> is applied to <code>#[inline]</code> intrinsics in stdsimd, which means that they are often codegened from the foreign crate libcore.</p>",
        "id": 195864305,
        "sender_full_name": "bjorn3",
        "timestamp": 1588263801
    },
    {
        "content": "<p>I'm gonna read the code then <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 195864340,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263817
    },
    {
        "content": "<p>Thanks for the answers!</p>",
        "id": 195864352,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263825
    },
    {
        "content": "<p>np</p>",
        "id": 195864381,
        "sender_full_name": "bjorn3",
        "timestamp": 1588263839
    },
    {
        "content": "<p>Hmm, I don't think it is in <code>codegen_fn_attrs</code></p>",
        "id": 195864579,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263928
    },
    {
        "content": "<p>I remember seeing that kind of checks</p>",
        "id": 195864600,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263939
    },
    {
        "content": "<p>But not there</p>",
        "id": 195864608,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588263942
    },
    {
        "content": "<p>Oh that's <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_passes/check_attr.rs#L201\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_passes/check_attr.rs#L201\"><code>rustc_passes::check_attr::check_target_feature</code></a></p>",
        "id": 195865260,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588264208
    },
    {
        "content": "<p>isn't codegen_fn_attrs saved cross-crate?</p>",
        "id": 195932647,
        "sender_full_name": "eddyb",
        "timestamp": 1588309564
    },
    {
        "content": "<p>oh huh no</p>",
        "id": 195932682,
        "sender_full_name": "eddyb",
        "timestamp": 1588309619
    },
    {
        "content": "<p>I guess all it needs is available cross-crate</p>",
        "id": 195932687,
        "sender_full_name": "eddyb",
        "timestamp": 1588309626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> anyway, it's used all the time with functions, not just statics, cross-crate</p>",
        "id": 195932711,
        "sender_full_name": "eddyb",
        "timestamp": 1588309678
    },
    {
        "content": "<p>since it's what, uhh, codegen uses :P</p>",
        "id": 195932755,
        "sender_full_name": "eddyb",
        "timestamp": 1588309697
    },
    {
        "content": "<p>to check various properties of functions</p>",
        "id": 195932761,
        "sender_full_name": "eddyb",
        "timestamp": 1588309712
    },
    {
        "content": "<p>So if I need to do checking only, I can do that check if the ID is local? I'd assume that if you pass a cross-crate ID, that crate would already have been checked?</p>",
        "id": 195945248,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588326147
    },
    {
        "content": "<p>that makes sense... ideally this would be split :/</p>",
        "id": 195946435,
        "sender_full_name": "eddyb",
        "timestamp": 1588327158
    },
    {
        "content": "<p>and/or the query cached cross-crate</p>",
        "id": 195946447,
        "sender_full_name": "eddyb",
        "timestamp": 1588327171
    },
    {
        "content": "<p>Alright, thanks a lot for the clarifications <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span></p>",
        "id": 195947482,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1588328142
    },
    {
        "content": "<p>I might have a \"fix\" for <a href=\"https://github.com/rust-lang/rust/issues/71104\" title=\"https://github.com/rust-lang/rust/issues/71104\">#71104</a> !</p>",
        "id": 196063511,
        "sender_full_name": "marmeladema",
        "timestamp": 1588443034
    },
    {
        "content": "<p>well ... a partial fix^^</p>",
        "id": 196064152,
        "sender_full_name": "marmeladema",
        "timestamp": 1588444096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> if you have some time. I tried to fix that fixme i added in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_privacy/lib.rs#L947\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_privacy/lib.rs#L947\">https://github.com/rust-lang/rust/blob/master/src/librustc_privacy/lib.rs#L947</a><br>\nI replaced the call to <code>opt_local_def_id_to_hir_id</code> by <code>as_local_hir_id</code> to reproduce the crash. It crashes for a rustdoc test: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/rustdoc/macro-in-closure.rs\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/rustdoc/macro-in-closure.rs\">https://github.com/rust-lang/rust/blob/master/src/test/rustdoc/macro-in-closure.rs</a></p>\n<p>I added some debug info to print the node_id&lt;-&gt;def_id and node_id&lt;-&gt;hir_id tables: <a href=\"https://paste.ee/p/ESN8m\" title=\"https://paste.ee/p/ESN8m\">https://paste.ee/p/ESN8m</a></p>\n<p>I believe that individually node_id&lt;-&gt;def_id tables and node_id&lt;-&gt;hir_id tables are valid. Its when going from def_id to hir_id that it crashes because both set of tables are not in sync</p>",
        "id": 196070461,
        "sender_full_name": "marmeladema",
        "timestamp": 1588454248
    },
    {
        "content": "<p>Because node_id_to_hir_id and hir_id_to_node_id seems to only be set once in <code>init_node_id_to_hir_id_mapping</code>, my best guess is that there is bug around <code>create_def_with_parent</code> which seems to be the only function that manipulate <code>def_id_to_node_id</code> and <code>node_id_to_def_id</code></p>",
        "id": 196070661,
        "sender_full_name": "marmeladema",
        "timestamp": 1588454540
    },
    {
        "content": "<p>My investigations have lead to <code>librustc_resolve</code> which add new def_id without adding corresponding hir_id</p>",
        "id": 196071995,
        "sender_full_name": "marmeladema",
        "timestamp": 1588456800
    },
    {
        "content": "<p>it must be on purpose?</p>",
        "id": 196072036,
        "sender_full_name": "marmeladema",
        "timestamp": 1588456825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> trying to catch up, what's the status of this? also, I should've suggested PMs, those generally work better for me...</p>",
        "id": 202035357,
        "sender_full_name": "eddyb",
        "timestamp": 1593125743
    },
    {
        "content": "<p>So i  made some progress with <a href=\"https://github.com/rust-lang/rust/issues/50928\">https://github.com/rust-lang/rust/issues/50928</a> which ultimately got closed. Dealing with that issue made me promote LocalDefId in more places. I also converted save_analysis to use hir tree</p>",
        "id": 202036587,
        "sender_full_name": "marmeladema",
        "timestamp": 1593126814
    },
    {
        "content": "<p>But strictly speaking about <a href=\"https://github.com/rust-lang/rust/issues/70853\">https://github.com/rust-lang/rust/issues/70853</a> its not clear what remains to be changed.</p>",
        "id": 202036709,
        "sender_full_name": "marmeladema",
        "timestamp": 1593126903
    },
    {
        "content": "<p>fair enough, thanks</p>",
        "id": 202038182,
        "sender_full_name": "eddyb",
        "timestamp": 1593128371
    },
    {
        "content": "<p>had some time today and propagated a few more <code>expect_local</code>s upwards: <a href=\"https://github.com/rust-lang/rust/pull/73796\">https://github.com/rust-lang/rust/pull/73796</a></p>",
        "id": 202182050,
        "sender_full_name": "lcnr",
        "timestamp": 1593258176
    },
    {
        "content": "<p>there are still a few calls which I did not look at, so there is still work to do here</p>",
        "id": 202182159,
        "sender_full_name": "lcnr",
        "timestamp": 1593258359
    }
]