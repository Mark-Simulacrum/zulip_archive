[
    {
        "content": "<p>my take on this is that we should always erase lifetimes (<em>not</em> inner late-bound ones though!) in the <code>Substs</code>/<code>ParamEnv</code> when we const-eval anything (and maybe sure to not return a <code>Ty</code>/<code>Substs</code> from const-eval, so the user is forced to reuse the original type to make a <code>ty::Const</code> and doesn't risk losing information etc.)</p>",
        "id": 170712779,
        "sender_full_name": "eddyb",
        "timestamp": 1562929041
    },
    {
        "content": "<p>ok I added an event to help me remember :) maybe <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>, or others will be able to make it, but maybe not? I forget -- there was one other person working on the const generics PR -- but I forgot their name?</p>",
        "id": 170712783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562929044
    },
    {
        "content": "<p>say more, why are lifetimes the problem?</p>",
        "id": 170712794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562929065
    },
    {
        "content": "<p>though I think I remember adding an <code>erase_lifetimes</code> step at some point when trying to untangle the current code</p>",
        "id": 170712847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562929088
    },
    {
        "content": "<p>they're not, but we don't need to canonicalize them. I remember you yourself hit lifetime inference vars at some point</p>",
        "id": 170712858,
        "sender_full_name": "eddyb",
        "timestamp": 1562929108
    },
    {
        "content": "<p>and for type/const infer vars, we can canonicalize <em>but</em> it doesn't have to be a proper canonicalization query because there is no inference going on in miri and it would just rely on placeholders as opaque things</p>",
        "id": 170712903,
        "sender_full_name": "eddyb",
        "timestamp": 1562929177
    },
    {
        "content": "<p>so it's more like the old \"freshening\"</p>",
        "id": 170712910,
        "sender_full_name": "eddyb",
        "timestamp": 1562929200
    },
    {
        "content": "<p>and we just make layout return a layout error instead of ICE-ing, for those placeholders</p>",
        "id": 170712965,
        "sender_full_name": "eddyb",
        "timestamp": 1562929216
    },
    {
        "content": "<p>so some things will fail (if they need further inference to progress) while others will work just fine (e.g. parameters in scope that aren't used by the constant MIR itself, but were instantiated with inference vars)</p>",
        "id": 170713007,
        "sender_full_name": "eddyb",
        "timestamp": 1562929289
    },
    {
        "content": "<p>and that should be enough to handle everything without disallowing <code>ty::Const</code>s that used to fail \"<code>lift_to_global</code>\" (i.e. that contain inference vars)</p>",
        "id": 170713069,
        "sender_full_name": "eddyb",
        "timestamp": 1562929343
    },
    {
        "content": "<p>which means that even without early normalization, the implementation will have less cases in which it just gives up</p>",
        "id": 170713086,
        "sender_full_name": "eddyb",
        "timestamp": 1562929398
    },
    {
        "content": "<p>I wish I thought of using freshening back when I added all of those cases :/</p>",
        "id": 170713093,
        "sender_full_name": "eddyb",
        "timestamp": 1562929420
    },
    {
        "content": "<p>I can't make a meeting this week</p>",
        "id": 170715339,
        "sender_full_name": "oli",
        "timestamp": 1562932259
    },
    {
        "content": "<p>Next week Monday or Friday is OK though.</p>",
        "id": 170715351,
        "sender_full_name": "oli",
        "timestamp": 1562932283
    },
    {
        "content": "<p>I'm not able to make a meeting today either; the latter half of next week would work though.</p>",
        "id": 170717246,
        "sender_full_name": "varkor",
        "timestamp": 1562934369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218608\">@yodal</span> was the other person involved with const generics.</p>",
        "id": 170717262,
        "sender_full_name": "varkor",
        "timestamp": 1562934394
    },
    {
        "content": "<p>I can try to make it to any meeting, but I can make no promises and I don't know how much input I will be able to provide</p>",
        "id": 170718193,
        "sender_full_name": "yodal",
        "timestamp": 1562935327
    },
    {
        "content": "<p>I've been gone from the rustc scene for almost two months now due to work</p>",
        "id": 170718213,
        "sender_full_name": "yodal",
        "timestamp": 1562935370
    },
    {
        "content": "<p>Well <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> even if the others aren't around, do you want to talk about constants and normalization? I'd be happy to schedule a time to chat when others can't make it, too, but also happy to discuss a bit beforehand. :)</p>",
        "id": 170724018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562939913
    },
    {
        "content": "<p>sure</p>",
        "id": 170724051,
        "sender_full_name": "eddyb",
        "timestamp": 1562939946
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 170724052,
        "sender_full_name": "eddyb",
        "timestamp": 1562939953
    },
    {
        "content": "<p>you mean <a href=\"#narrow/stream/131828-t-compiler/topic/.60unwrap_usize.60.20should.20at.20least.20try.20.2359369/near/170712858\" title=\"#narrow/stream/131828-t-compiler/topic/.60unwrap_usize.60.20should.20at.20least.20try.20.2359369/near/170712858\">these comments</a>?</p>",
        "id": 170724078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562939987
    },
    {
        "content": "<p>I created a new topic but we can pop back to that one :)</p>",
        "id": 170724093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562939996
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 170724102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940002
    },
    {
        "content": "<p>I'm not 100% sure where I'd like to start but -- to refresh my memory -- <a href=\"https://github.com/rust-lang/rust/issues/59369\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59369\">#59369</a> basically tries to evaluate constants when it would otherwise error</p>",
        "id": 170724227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940099
    },
    {
        "content": "<p>there are various <code>unwrap</code> calls from the rests of lifts and things where it's not obvious to me that they make sense</p>",
        "id": 170724340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940182
    },
    {
        "content": "<p>I kind of want to step back and just outline how we think things <em>should</em> be working ideally</p>",
        "id": 170724347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940192
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 170724379,
        "sender_full_name": "eddyb",
        "timestamp": 1562940237
    },
    {
        "content": "<p>ideally we never \"fail to lift\"</p>",
        "id": 170724433,
        "sender_full_name": "eddyb",
        "timestamp": 1562940270
    },
    {
        "content": "<p>ok</p>",
        "id": 170724445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940287
    },
    {
        "content": "<p>I combined the two zulip topics into one now :P</p>",
        "id": 170724448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940292
    },
    {
        "content": "<p>anyway, I agree we should never fail to lift, because presumably we should be canonicalizing</p>",
        "id": 170724476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940314
    },
    {
        "content": "<p>and for now, I'd prefer to gracefully fail, just like today, if we want to merge something</p>",
        "id": 170724502,
        "sender_full_name": "eddyb",
        "timestamp": 1562940341
    },
    {
        "content": "<p>(note that erasing regions isn't really all that relevant, since they get \"normalized\" when you canonicalize anyway)</p>",
        "id": 170724506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940344
    },
    {
        "content": "<p>because we're turning user errors into ICEs if we have <code>.unwrap()</code> there</p>",
        "id": 170724511,
        "sender_full_name": "eddyb",
        "timestamp": 1562940354
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 170724518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940360
    },
    {
        "content": "<p>yeah I just think it's a waste to canonicalize lifetimes :P</p>",
        "id": 170724563,
        "sender_full_name": "eddyb",
        "timestamp": 1562940368
    },
    {
        "content": "<p>can you give me a sense for when this <code>try_eval_bits</code> code is going to get called?</p>",
        "id": 170724565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940370
    },
    {
        "content": "<p>it's basically lazy normalization for anything that wants the concrete value of a <code>ty::Const</code></p>",
        "id": 170724596,
        "sender_full_name": "eddyb",
        "timestamp": 1562940404
    },
    {
        "content": "<p>usually things that check the length of an array type</p>",
        "id": 170724603,
        "sender_full_name": "eddyb",
        "timestamp": 1562940414
    },
    {
        "content": "<p>which presumably we eventually want</p>",
        "id": 170724613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940424
    },
    {
        "content": "<p>like layout (which needs to report a layout error, not ICE) or various checks that special-case <code>0</code> (which can be conservative if the value is unknown)</p>",
        "id": 170724632,
        "sender_full_name": "eddyb",
        "timestamp": 1562940456
    },
    {
        "content": "<p>right, ok</p>",
        "id": 170724648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940477
    },
    {
        "content": "<p>I'm trying to figure out what I want to ask</p>",
        "id": 170724734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940566
    },
    {
        "content": "<p>last time I was digging in this code I felt like:</p>\n<ul>\n<li>obviously I want to do lazy norm (and I've been thinking a bit about how best to proceed there, which we could discuss separately)</li>\n<li>but also I'm not clear why const generics are any different than the rest of the code, it feels like we could use the same \"eager norm fixed point\" scheme that we use for other projections</li>\n</ul>",
        "id": 170724831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940662
    },
    {
        "content": "<p>but it was a bit hard to investigate the latter because the setup was kind of \"different\"</p>",
        "id": 170724843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940681
    },
    {
        "content": "<p>specifically i'm not sure why <code>where Foo&lt;SomeType::Item&gt;: Bar</code> is different from <code>[T; SomeConstant]</code></p>",
        "id": 170724932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940734
    },
    {
        "content": "<p>but in any case, maybe I can just outline what I <em>think</em> the intended design is and you can kind of correct me</p>",
        "id": 170724949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940760
    },
    {
        "content": "<p>sorry, got distracted chasing down a few types</p>",
        "id": 170725080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940884
    },
    {
        "content": "<p>in particular I just remembered that one of the things this PR changes is something to do with how <code>ConstValue</code> works, right?</p>",
        "id": 170725088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940900
    },
    {
        "content": "<p>ok, well, given that <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and others can't attend -- perhaps we can schedule another time to dig, and I'll read into the code in the meantime. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm going to reassign that PR to you for review, I <em>think</em> I am fine with it, if I understand what's going on.</p>",
        "id": 170725205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940989
    }
]