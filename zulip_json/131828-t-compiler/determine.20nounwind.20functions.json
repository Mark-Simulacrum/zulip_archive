[
    {
        "content": "<p>I think it would be nice if we could determine that functions cannot unwind (panic), in order to drop unnecessary landing pads. Something similar to the PruneEH pass in LLVM.</p>\n<p>However, I'm not sure how to best do this within the query framework. Assuming for now that SCCs should always yield the conservative result, would it be fine to make use of the query cycle detection for that?</p>",
        "id": 146798236,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1541427808
    },
    {
        "content": "<p>Not sure what SCCs are, but using the query cycle detector for anything but aborting compilation entirely is evil (I've been told).</p>",
        "id": 146817231,
        "sender_full_name": "oli",
        "timestamp": 1541445741
    },
    {
        "content": "<p>The best I can come up with is to use the mir_optimized query and recurse on the MIR you get back (putting all the seen DefIds in a hashset to detect recursion and duplicate calls). This sadly doesn't scale well, because you're redoing the recursion detection on MIRs that you've done it before in another query</p>",
        "id": 146817423,
        "sender_full_name": "oli",
        "timestamp": 1541445953
    },
    {
        "content": "<blockquote>\n<p>what SCCs are,</p>\n</blockquote>\n<p>By previous context, I'd guess <a href=\"https://en.wikipedia.org/wiki/Strongly_connected_component\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Strongly_connected_component\">strongly connected component</a></p>",
        "id": 146822922,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1541451080
    },
    {
        "content": "<p>Yeah, I meant strongly connected components. A lot of call graph oriented optimizations like to partition the cyclic call graph as an acyclic graph of SCCs, so that the acyclic (generally easy) and cyclic (generally hard) parts can be treated separately.</p>",
        "id": 146824191,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1541452264
    },
    {
        "content": "<p>we have in general a need for being able to find SCCs of the callgraph; we need it for inlining too</p>",
        "id": 147543752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542048291
    },
    {
        "content": "<p>there is SCC code in <code>rustc_data_structures</code></p>",
        "id": 147543753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542048298
    },
    {
        "content": "<p>just need to model the graph</p>",
        "id": 147543754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542048302
    },
    {
        "content": "<p>I've chatted with <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> about doing this from time to time</p>",
        "id": 147543767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542048317
    }
]