[
    {
        "content": "<p>Last I heard, async/await is built on top of generators. When async/await stabilizes, will generators <em>also</em> stabilize?</p>",
        "id": 133974007,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953084
    },
    {
        "content": "<p>there is no need to do that and many reasons not to, they're two rather different features after all</p>",
        "id": 133974043,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536953156
    },
    {
        "content": "<p>Sure, but people <em>also</em> want generators</p>",
        "id": 133974168,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953333
    },
    {
        "content": "<blockquote>\n<p>many reasons not to</p>\n</blockquote>\n<p>May I find a list of those somewhere?</p>",
        "id": 133974182,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953364
    },
    {
        "content": "<p>probably in the tracking issue...</p>",
        "id": 133974185,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953371
    },
    {
        "content": "<blockquote>\n<p>Sure, but people <em>also</em> want generators</p>\n</blockquote>\n<p>yeah but i don't see what that has to do with tying the stabilization of generators to the stabilization of async/await</p>",
        "id": 133974193,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536953389
    },
    {
        "content": "<p>i'm sure you can find a bunch of unresolved questions in the tracking issue but the underlying reason is, it's a big and complicated feature and the only merged RFC for it was an <em>experimental</em> one</p>",
        "id": 133974283,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536953489
    },
    {
        "content": "<p>One <em>possible</em> reason that it would require it is if async/await were merely desugared to generators. I believe that to be the case at some point in the past.</p>",
        "id": 133974285,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953510
    },
    {
        "content": "<p>no, stable surface syntax can desugar to unstable things. e.g. the desugaring for <code>?</code> uses (or for the longest time used) an unstable trait</p>",
        "id": 133974344,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536953563
    },
    {
        "content": "<p>I'm also assuming that if async await is battle-hardened enough to stabilize, then transitively so must generators</p>",
        "id": 133974345,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953564
    },
    {
        "content": "<p>the difference is</p>",
        "id": 133974347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953572
    },
    {
        "content": "<p>we are not wanting to stabilize the traits that generators implement</p>",
        "id": 133974349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953578
    },
    {
        "content": "<p>and various other details</p>",
        "id": 133974350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953581
    },
    {
        "content": "<p>which are not \"exposed\" by the async/await pattern</p>",
        "id": 133974361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953589
    },
    {
        "content": "<p>not to say it wouldn't be nice!</p>",
        "id": 133974365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953603
    },
    {
        "content": "<p>I'd love to be able to write iterators in line</p>",
        "id": 133974368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953608
    },
    {
        "content": "<p>I wonder if you can abuse async await to do that... :P</p>",
        "id": 133974377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953632
    },
    {
        "content": "<p>Is it valid to say that async/await uses a subset of (possible?) generator functionality?</p>",
        "id": 133974442,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953700
    },
    {
        "content": "<p>e.g., as <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> says </p>\n<blockquote>\n<p>it's a big and complicated feature</p>\n</blockquote>",
        "id": 133974464,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953740
    },
    {
        "content": "<blockquote>\n<p>Is it valid to say that async/await uses a subset of (possible?) generator functionality?</p>\n</blockquote>\n<p>that is true</p>",
        "id": 133974482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953762
    },
    {
        "content": "<p>e.g., you can only yield <code>()</code> values :)</p>",
        "id": 133974525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953789
    },
    {
        "content": "<p>not that this is a point of contention</p>",
        "id": 133974533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953806
    },
    {
        "content": "<blockquote>\n<p>e.g., you can only yield <code>()</code> values :)</p>\n</blockquote>\n<p>huh. I would have na√Øvely expected that the <code>Future</code>'s / <code>Stream</code>'s <code>Item</code> would have been yielded. I guess instead it's just yielding to go to the next step in the state machine (starting to talk out of my depth here)</p>",
        "id": 133974621,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536953897
    },
    {
        "content": "<p>No, the yields occur when an <code>await</code> cannot complete immediately</p>",
        "id": 133974656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953944
    },
    {
        "content": "<p>the <code>Item</code> is \"returned\", I believe</p>",
        "id": 133974664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536953954
    },
    {
        "content": "<p>(This is where I wish that RFCs / the reference was updated with post-implementation changes, so I could go spelunking without looking into source code)</p>",
        "id": 133974729,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536954015
    },
    {
        "content": "<p>On a scale of \"no big\" to \"woah\", any gut feelings on how much code is needed to go from what async/await uses now(-ish) to completing  a hypothetical generators RFC?</p>",
        "id": 133974836,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536954172
    },
    {
        "content": "<p>probably very little code but triple digit number of comments of bikeshedding</p>",
        "id": 133974866,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536954214
    },
    {
        "content": "<p>My first version of that comment was \"what it would take to go from\" and I realized that would include such discussions, so I tried to focus on what I was more interested in <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 133974939,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1536954299
    }
]