[
    {
        "content": "<p>How does the version of clang installed by <code>src/ci/scripts/install-clang.sh</code> get updated? I'm trying to figure out if that's using a version that's older than the rust-lang/rust submodule commit.</p>",
        "id": 237100446,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620004687
    },
    {
        "content": "<p>In particular, I think it might be missing commit <code>a6ea391b832573830b011f26013ebaa946032250</code>.</p>",
        "id": 237100463,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620004710
    },
    {
        "content": "<p>Hm, I'm not sure which repo that commit hash is from, but generally we don't bump unless there's a reason to</p>",
        "id": 237101833,
        "sender_full_name": "simulacrum",
        "timestamp": 1620006247
    },
    {
        "content": "<p>I think in theory at least we can bump without too much hassle to something newer than 10.0.0, but it's likely some work to track down relevant tarballs and get that going</p>",
        "id": 237101877,
        "sender_full_name": "simulacrum",
        "timestamp": 1620006315
    },
    {
        "content": "<p>If someone wants to do the legwork to get those tarballs ready, then I or someone else on infra (e.g., Pietro) can put them in S3 quickly.</p>",
        "id": 237101908,
        "sender_full_name": "simulacrum",
        "timestamp": 1620006354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> That specific bugfix is blocking the ability to update compiler-builtins to get support for moutline-atomics, which is needed for aarch64 musl.</p>",
        "id": 237104199,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620008720
    },
    {
        "content": "<p>(and eventually aarch64 in general)</p>",
        "id": 237104209,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620008728
    },
    {
        "content": "<p>That commit hash is from the llvm-project repo.</p>",
        "id": 237104266,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620008765
    },
    {
        "content": "<p>The commit is in rust-lang/llvm-project and in the rust-lang/rust submodule, it just may not be in the compiled version used in CI.</p>",
        "id": 237104318,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620008807
    },
    {
        "content": "<p>Well, the clang used there is a stock 10.0.0 clang I suspect</p>",
        "id": 237104333,
        "sender_full_name": "simulacrum",
        "timestamp": 1620008829
    },
    {
        "content": "<p>So the right tarball would just be a git-archive of <code>rustc/12.0-2021-04-15</code>.</p>",
        "id": 237104338,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620008845
    },
    {
        "content": "<p>No, we don't build clang I think on CI? I'd expect it to be a binary tarball</p>",
        "id": 237104347,
        "sender_full_name": "simulacrum",
        "timestamp": 1620008866
    },
    {
        "content": "<p>Where do we get the binary tarball from?</p>",
        "id": 237104353,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620008877
    },
    {
        "content": "<p>No idea - maybe someone built it at some point, maybe it's from llvm directly</p>",
        "id": 237104405,
        "sender_full_name": "simulacrum",
        "timestamp": 1620008901
    },
    {
        "content": "<p>Probably possible to look through git history</p>",
        "id": 237104419,
        "sender_full_name": "simulacrum",
        "timestamp": 1620008920
    },
    {
        "content": "<p>Ah, found some indications.</p>",
        "id": 237104444,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620008969
    },
    {
        "content": "<p>I'm a bit hesitant to bump to anything not released, and even clang 10 is pretty recent... is this a nice to have, i.e. we can cfg detect or whatever and still work but more slowly on older c compilers?</p>",
        "id": 237104445,
        "sender_full_name": "simulacrum",
        "timestamp": 1620008970
    },
    {
        "content": "<p>No, this is \"we will fail to link with any multithreaded C code compiled by recent GCC or clang, and soon with Rust code compiled by LLVM\".</p>",
        "id": 237104509,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620009007
    },
    {
        "content": "<p>(on aarch64)</p>",
        "id": 237104516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620009014
    },
    {
        "content": "<p>It's not unreleased, it's LLVM 12.</p>",
        "id": 237104545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620009037
    },
    {
        "content": "<p>At least, it's on the LLVM 12 branch, not completely sure yet if it was before or after the release.</p>",
        "id": 237104552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620009057
    },
    {
        "content": "<p>The commit is from early February so I'm hoping that It <em>did</em> make the release.</p>",
        "id": 237104589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620009107
    },
    {
        "content": "<p>Do we need a similar bump on Linux (at least musl aarch64) builders? The file you cite is only for windows/macOS</p>",
        "id": 237142744,
        "sender_full_name": "simulacrum",
        "timestamp": 1620038696
    },
    {
        "content": "<p>I think our Linux builders mostly use distro clang or gcc, so it may be quite painful to get clang 12 there...</p>",
        "id": 237143011,
        "sender_full_name": "simulacrum",
        "timestamp": 1620038846
    },
    {
        "content": "<p>Bumping for aarch64 Windows is the only requirement.</p>",
        "id": 237184422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620057398
    },
    {
        "content": "<p>The fix isn't needed for other targets, even aarch64 Linux, I <em>think</em>.</p>",
        "id": 237184526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620057444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Would it be possible to coordinate an upload of the upstream LLVM binary compiled release for aarch64 Windows, to the S3 bucket? I can take a look at updating the CI script, but I don't have permission to the bucket.</p>",
        "id": 237184898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620057601
    },
    {
        "content": "<p>A windows-specific patch (or even windows and macos) seems OK -- I'd be happy to do the upload if you file a PR with the relevant patch and a link to an existing tarball location (or happy to get that over pm, whatever)</p>",
        "id": 237186118,
        "sender_full_name": "simulacrum",
        "timestamp": 1620058080
    },
    {
        "content": "<p>I'll work on that today.</p>",
        "id": 237187678,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620058795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> So, I can easily point to an updated tarball for macos, ready for upload. Apparently, the process for Windows is to download the .exe installer, run it under wine with specific command-line options, and then tar up the resulting directory.</p>",
        "id": 237199855,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620063952
    },
    {
        "content": "<p>Seems fine to me, though I can't help with running the exe (I guess maybe with wine but seems not great).</p>",
        "id": 237199984,
        "sender_full_name": "simulacrum",
        "timestamp": 1620063999
    },
    {
        "content": "<p>So, should I just run that, tar it up, and stick it somewhere that you can grab and upload?</p>",
        "id": 237200736,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620064297
    },
    {
        "content": "<p>/me feels like long-term the <em>right</em> solution would be to poke LLVM upstream and ask for non-exe Windows binary releases.</p>",
        "id": 237200781,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620064318
    },
    {
        "content": "<p>/me wonders if he can dissect the .exe using well-established tools for extracting installers.</p>",
        "id": 237200965,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620064367
    },
    {
        "content": "<p>Success!</p>",
        "id": 237202445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620064875
    },
    {
        "content": "<p>Extracting the Windows .exe installer with <code>7z x -oclang-temp/ LLVM-10.0.0-win64.exe</code> produces a folder almost identical to <code>https://ci-mirrors.rust-lang.org/rustc/LLVM-10.0.0-win64.tar.gz</code>, except that the former also includes the NSIS plugin directory (which we don't care about) and the latter includes <code>Uninstall.exe</code> (which we don't care about).</p>",
        "id": 237202716,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620064966
    },
    {
        "content": "<p>So I think I can modify the CI to let us just use the upstream-supplied .exe, rather than requiring someone to install it with Wine and upload the result.</p>",
        "id": 237202842,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620065009
    },
    {
        "content": "<p>Hm, that seems OK to me, presuming it's reliable; I see no reason why it wouldn't be.</p>",
        "id": 237203117,
        "sender_full_name": "simulacrum",
        "timestamp": 1620065097
    },
    {
        "content": "<p>As a starting point, could you please download a copy of <a href=\"https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe\">https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe</a> , and upload it to the CI mirror so it appears as <code>https://ci-mirrors.rust-lang.org/rustc/LLVM-10.0.0-win64.exe</code>?</p>",
        "id": 237203397,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620065200
    },
    {
        "content": "<p>Can you also do the same for <a href=\"https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/LLVM-12.0.0-win64.exe\">https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/LLVM-12.0.0-win64.exe</a> and <a href=\"https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/clang+llvm-12.0.0-x86_64-apple-darwin.tar.xz\">https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/clang+llvm-12.0.0-x86_64-apple-darwin.tar.xz</a> (the latter of which should be downloadable as <code>https://ci-mirrors.rust-lang.org/rustc/clang%2Bllvm-12.0.0-x86_64-apple-darwin.tar.xz</code> )?</p>",
        "id": 237203882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620065385
    },
    {
        "content": "<p>I'll then do this in two separate PRs: the first switching to using the .exe for Windows but sticking with LLVM 10, and the second upgrading to LLVM 12.</p>",
        "id": 237203975,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620065412
    },
    {
        "content": "<p>Sure. I can do that right now.</p>",
        "id": 237204406,
        "sender_full_name": "simulacrum",
        "timestamp": 1620065597
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 237204499,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620065641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> is it intentional that the llvm 12 link is win32?</p>",
        "id": 237204764,
        "sender_full_name": "simulacrum",
        "timestamp": 1620065742
    },
    {
        "content": "<p>(the llvm 10 link is win64)</p>",
        "id": 237204779,
        "sender_full_name": "simulacrum",
        "timestamp": 1620065750
    },
    {
        "content": "<p>Um. No, that's me failing at copy and paste. :)</p>",
        "id": 237204967,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620065823
    },
    {
        "content": "<p>Edited above.</p>",
        "id": 237205010,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620065845
    },
    {
        "content": "<p>Alright, should all be uploaded.</p>",
        "id": 237205036,
        "sender_full_name": "simulacrum",
        "timestamp": 1620065857
    },
    {
        "content": "<p>Let me know if any of it runs into trouble.</p>",
        "id": 237205183,
        "sender_full_name": "simulacrum",
        "timestamp": 1620065916
    },
    {
        "content": "<p>Will do.</p>",
        "id": 237205569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620066080
    },
    {
        "content": "<p>LLVM 10 looks good, PR shortly.</p>",
        "id": 237205594,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620066092
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/84874\">https://github.com/rust-lang/rust/pull/84874</a></p>",
        "id": 237206328,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620066371
    },
    {
        "content": "<p>Assuming that looks good to you, and passes CI, would you mind sending it through bors with p=1 so that I can start on the LLVM 12 upgrade afterwards?</p>",
        "id": 237206398,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620066409
    },
    {
        "content": "<p>Hm, I'm happy for further work to be based on this commit, but I'm not sure rushing it through CI is necessary?</p>",
        "id": 237207594,
        "sender_full_name": "simulacrum",
        "timestamp": 1620066817
    },
    {
        "content": "<p>Purely a request, on the basis of \"I'd love to do more than one cycle today\". But I can always work on it later.</p>",
        "id": 237208448,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620067132
    },
    {
        "content": "<p>Not sure I follow - why would it block you?</p>",
        "id": 237208500,
        "sender_full_name": "simulacrum",
        "timestamp": 1620067153
    },
    {
        "content": "<p>Because if this approach works I'd like to switch to clang from LLVM 12 using the same approach, and if it doesn't work then switching to clang from LLVM 12 will need a different approach.</p>",
        "id": 237208724,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620067236
    },
    {
        "content": "<p>Ah, I see. I'm fine if you want to p=1 the PR, but CI is likely to be busy with stable builds regardless (once I finish applying backports of stuff)</p>",
        "id": 237208832,
        "sender_full_name": "simulacrum",
        "timestamp": 1620067283
    },
    {
        "content": "<p>Not a problem.</p>",
        "id": 237208859,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620067296
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 237209234,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620067445
    }
]