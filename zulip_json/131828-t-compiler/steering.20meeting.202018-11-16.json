[
    {
        "content": "<p><strong>Reminder:</strong> Steering meeting planned <strong>this Friday</strong>. I just posted a <a href=\"https://internals.rust-lang.org/t/compiler-steering-committee-meeting/8588/19?u=nikomatsakis\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/compiler-steering-committee-meeting/8588/19?u=nikomatsakis\">comment on internals</a> laying out some thoughts for an agenda. Feedback desired!</p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span></p>",
        "id": 147669925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542204870
    },
    {
        "content": "<p>I can't make this meeting :( I'll try to catch up on everything afterwards!</p>",
        "id": 147816844,
        "sender_full_name": "varkor",
        "timestamp": 1542375243
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span> meeting in a few minutes</p>",
        "id": 147821504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380258
    },
    {
        "content": "<p>/me makes a sandwich first</p>",
        "id": 147821690,
        "sender_full_name": "nagisa",
        "timestamp": 1542380409
    },
    {
        "content": "<p>Now you've made me hungry, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>",
        "id": 147821831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380584
    },
    {
        "content": "<p>Let's get started at 10:05, seems like a nice round number</p>",
        "id": 147821931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380665
    },
    {
        "content": "<p>o/</p>",
        "id": 147821946,
        "sender_full_name": "mw",
        "timestamp": 1542380688
    },
    {
        "content": "<p>o/</p>",
        "id": 147821995,
        "sender_full_name": "davidtwco",
        "timestamp": 1542380739
    },
    {
        "content": "<p>o/</p>",
        "id": 147822006,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542380755
    },
    {
        "content": "<p>So, I had proposed that we work more on \"future planning\"</p>",
        "id": 147822055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380774
    },
    {
        "content": "<p>Specifically <a href=\"https://internals.rust-lang.org/t/compiler-steering-committee-meeting/8588/19?u=nikomatsakis\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/compiler-steering-committee-meeting/8588/19?u=nikomatsakis\">I wrote</a></p>\n<blockquote>\n<p>I still hope we can talk about our priorities and planning for the next year. I'd like to do a few things:</p>\n<ul>\n<li>Gather up all the major initiatives that are being contemplated, and ensure that they are represented in some way on <a href=\"https://drive.google.com/file/d/1pI_69tI8uz83Sd7V7TvzltRACFUDPoO2/view\" target=\"_blank\" title=\"https://drive.google.com/file/d/1pI_69tI8uz83Sd7V7TvzltRACFUDPoO2/view\">my compiler planning diagram</a></li>\n<li>For each one, identify:<ul>\n<li>Major steps or refactorings that ought to be represented themselves</li>\n<li>Experiments we can do to get an estimate for how effective something will be (especially relevant to performance tasks)</li>\n<li>Figure out places where it would be helpful to discuss in detail at the All Hands</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>however, I don't think we necessarily need to focus just on refactorings of the compiler. I guess the question is sort of \"what do we think our major priorities should be and how can we structure ourselves to achieve them\"...?</p>",
        "id": 147822124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380865
    },
    {
        "content": "<p>I've been thinking a bit about conway's law (“… organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations\")</p>",
        "id": 147822197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380928
    },
    {
        "content": "<p>the flip side I guess is that we should look at what we want and try to organize for it :)</p>",
        "id": 147822201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380940
    },
    {
        "content": "<p>I think the answer depends (among other things) on what projects we can find interested people for</p>",
        "id": 147822224,
        "sender_full_name": "mw",
        "timestamp": 1542380962
    },
    {
        "content": "<p>maybe. I feel like people will come to most projects, if we have available leadership, but that is the trick</p>",
        "id": 147822241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542380987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> had an interesting post talking about another angle on compiler performance as well</p>",
        "id": 147822305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381010
    },
    {
        "content": "<p>ok, replace \"people\" with \"leaders\" in the above :)</p>",
        "id": 147822309,
        "sender_full_name": "mw",
        "timestamp": 1542381012
    },
    {
        "content": "<p>the idea of building more distributed caching</p>",
        "id": 147822317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381023
    },
    {
        "content": "<blockquote>\n<p>ok, replace \"people\" with \"leaders\" in the above :)</p>\n</blockquote>\n<p>I think the trick here is also that we can't expect to just figure this out up front, to some extent. It's kind of a cycle. But I guess we can find a few things and hope to expand from there</p>",
        "id": 147822339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381048
    },
    {
        "content": "<p>(We talked before about having working groups with 2 leaders, an idea which I like)</p>",
        "id": 147822356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381073
    },
    {
        "content": "<p>but it seems like starting from \"people\" is tricky, since we're an open organization etc, so it seems better to somehow explore the \"tech side\" a bit first?</p>",
        "id": 147822373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381109
    },
    {
        "content": "<p>anyway, one thought I had when it comes to compiler perf was trying to talk about (a) if we have big ideas that could be transformative and (b) how we can evaluate their potential</p>",
        "id": 147822432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381139
    },
    {
        "content": "<p>sure, we need some details on the individual projects before people can know if they'd want to lead them</p>",
        "id": 147822439,
        "sender_full_name": "mw",
        "timestamp": 1542381155
    },
    {
        "content": "<p>I have things I would love to work on/lead, but I’m worried about my time</p>",
        "id": 147822453,
        "sender_full_name": "nagisa",
        "timestamp": 1542381186
    },
    {
        "content": "<p>also a factor</p>",
        "id": 147822459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381195
    },
    {
        "content": "<p>(I’ve already talked about this with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> last all-hands)</p>",
        "id": 147822461,
        "sender_full_name": "nagisa",
        "timestamp": 1542381200
    },
    {
        "content": "<p>this would be somewhat mitigated by having more than one person in the lead</p>",
        "id": 147822523,
        "sender_full_name": "mw",
        "timestamp": 1542381256
    },
    {
        "content": "<p>at the highest level, I think our ideas for \"radically transforming\" total compilation time are roughly this:</p>\n<ul>\n<li>parallelize with many threads</li>\n<li>do what we do better:<br>\n    - type-check faster, trait checking, etc<br>\n    - optimize MIR and generate better LLVM<br>\n    - need to look at \"time breakdown\" across projects a bit perhaps?</li>\n<li>defer, coallesce, and avoid work<br>\n    - multi-crate compilation model<br>\n    - MIR-only rlibs, which helps identify duplicates as well as dead code<br>\n    - \"polymorphization\" to coallesce monomorphized instances that have the same code</li>\n<li>distribute and cache work across machines</li>\n</ul>",
        "id": 147822529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381260
    },
    {
        "content": "<p>I'm not sure if the second \"do what we do better\" category is useful</p>",
        "id": 147822634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381370
    },
    {
        "content": "<p>I guess maybe parallel compilation is along that theme too :)</p>",
        "id": 147822644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381386
    },
    {
        "content": "<p>there might be another category, specific to incr. comp.: cache work that we don't cache now</p>",
        "id": 147822661,
        "sender_full_name": "mw",
        "timestamp": 1542381414
    },
    {
        "content": "<p>interesting</p>",
        "id": 147822674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381426
    },
    {
        "content": "<p>e.g. when a compilation session fails</p>",
        "id": 147822676,
        "sender_full_name": "mw",
        "timestamp": 1542381429
    },
    {
        "content": "<p>I was thinking that RLS etc is sort of an orthogonal category</p>",
        "id": 147822678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381432
    },
    {
        "content": "<p>Just thought of it, but a nice way to visualise our query engine and time everything takes would be nice. I have some inspired ideas on it…</p>",
        "id": 147822686,
        "sender_full_name": "nagisa",
        "timestamp": 1542381442
    },
    {
        "content": "<p>(though incremental is not specific to rLS)</p>",
        "id": 147822688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381444
    },
    {
        "content": "<p>At the very least to more easily deduce where bottlenecks are, etc.</p>",
        "id": 147822760,
        "sender_full_name": "nagisa",
        "timestamp": 1542381492
    },
    {
        "content": "<p>FWIW I've found a useful rule of thumb to be \"if this thing I'm optimizing takes zero time, will that radically improve things?\" -- where an example is that if type checking took zero time in rustc I feel like it wouldn't be that radically different an experience than we have today</p>",
        "id": 147822765,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1542381502
    },
    {
        "content": "<p>in my mental venn diagram RLS and batch-compilation intersect at the query engine</p>",
        "id": 147822768,
        "sender_full_name": "mw",
        "timestamp": 1542381507
    },
    {
        "content": "<blockquote>\n<p>FWIW I've found a useful rule of thumb to be \"if this thing I'm optimizing takes zero time, will that radically improve things?\" -- where an example is that if type checking took zero time in rustc I feel like it wouldn't be that radically different an experience than we have today</p>\n</blockquote>\n<p>I .. am not sure</p>",
        "id": 147822794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381543
    },
    {
        "content": "<p>I also find that useful</p>",
        "id": 147822801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381548
    },
    {
        "content": "<p>(something to measure at least)</p>",
        "id": 147822809,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1542381568
    },
    {
        "content": "<p>I think in general this comes back to having a better picture of our profiles</p>",
        "id": 147822811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> did great work here but it hasn't made it full circle into perf yet :(</p>",
        "id": 147822820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381579
    },
    {
        "content": "<p>in particular, I think that for some \"use cases\"/\"scenarios\" type-check etc can be quite significant</p>",
        "id": 147822827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381598
    },
    {
        "content": "<p>I also suspect we won't find a \"silver bullet\", but more we'll do 2 or 3 things that are high impact</p>",
        "id": 147822878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381614
    },
    {
        "content": "<p>but together are better</p>",
        "id": 147822883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381621
    },
    {
        "content": "<p>true yeah</p>",
        "id": 147822888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1542381624
    },
    {
        "content": "<p>that said, I do agree that type-checking alone is not going to be enough</p>",
        "id": 147822895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381631
    },
    {
        "content": "<blockquote>\n<p>in my mental venn diagram RLS and batch-compilation intersect at the query engine</p>\n</blockquote>\n<p>I'm not 100% sure what this means, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 147822906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381654
    },
    {
        "content": "<p>I guess just that they both build on it?</p>",
        "id": 147822917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381671
    },
    {
        "content": "<blockquote>\n<p>I'm not 100% sure what this means, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>\n</blockquote>\n<p>that the central evaluation model must support both, but the goals are a bit at a tension</p>",
        "id": 147822919,
        "sender_full_name": "mw",
        "timestamp": 1542381675
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> totally agree about having more ability to visualize queries etc</p>",
        "id": 147822922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381683
    },
    {
        "content": "<p>That would be <a href=\"https://github.com/rust-lang/rust/issues/53631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53631\">https://github.com/rust-lang/rust/issues/53631</a>, and related issues. Turns out I had already documented some of my ideas here.</p>",
        "id": 147822987,
        "sender_full_name": "nagisa",
        "timestamp": 1542381728
    },
    {
        "content": "<p>yeah, I guess I think that if we were going to engineer for a radically better RLS experience, the priorities would be very different</p>",
        "id": 147822991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381738
    },
    {
        "content": "<p>I think there was speculation that killing off <code>NodeId</code> would help with incremental (but I don't know the details/have the measurements to know whether it was a priority)? <a href=\"https://github.com/rust-lang/rust/issues/50928\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50928\">https://github.com/rust-lang/rust/issues/50928</a></p>",
        "id": 147822993,
        "sender_full_name": "Zack M. Davis",
        "timestamp": 1542381743
    },
    {
        "content": "<p>interesting</p>",
        "id": 147823000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381752
    },
    {
        "content": "<p>it's true, NodeId is not incremental friendly</p>",
        "id": 147823007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381759
    },
    {
        "content": "<p>that's mostly clean up at this point though</p>",
        "id": 147823033,
        "sender_full_name": "mw",
        "timestamp": 1542381786
    },
    {
        "content": "<p>i.e. it won't change performance, just code quality</p>",
        "id": 147823041,
        "sender_full_name": "mw",
        "timestamp": 1542381801
    },
    {
        "content": "<p>c'mon everybody loves convering from nodeid to hirid to defid to hirid and back</p>",
        "id": 147823052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381822
    },
    {
        "content": "<p>(improving code quality is also a way to improve contributor experience and improve our overall velocity)</p>",
        "id": 147823097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381845
    },
    {
        "content": "<p>it's what I do for fun on the weekend</p>",
        "id": 147823098,
        "sender_full_name": "mw",
        "timestamp": 1542381846
    },
    {
        "content": "<p>well so in terms of <a href=\"#narrow/stream/131828-t-compiler/subject/steering.20meeting.202018-11-16/near/147822529\" title=\"#narrow/stream/131828-t-compiler/subject/steering.20meeting.202018-11-16/near/147822529\">my bullet list above</a>, I guess my first question is: does anybody have any ideas that don't fit those categories?</p>",
        "id": 147823117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381867
    },
    {
        "content": "<p>I'm not saying we shouldn't do it :)</p>",
        "id": 147823122,
        "sender_full_name": "mw",
        "timestamp": 1542381870
    },
    {
        "content": "<p>perhaps they are so broad it's not possible :)</p>",
        "id": 147823125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381871
    },
    {
        "content": "<p>if not, maybe we should drill a bit more into one of them?</p>",
        "id": 147823145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381895
    },
    {
        "content": "<p>incremental compilation wouldn't fit</p>",
        "id": 147823179,
        "sender_full_name": "mw",
        "timestamp": 1542381908
    },
    {
        "content": "<p>I propose for the purposes of this meeting, we focus not on RLS btw, but rather \"batch performance\"</p>",
        "id": 147823187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381912
    },
    {
        "content": "<p>yeah =) I meant the list to be specific to batch compilation</p>",
        "id": 147823197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381923
    },
    {
        "content": "<p>aaaah hiii (/me was paying attention to rebase and missed the notification)</p>",
        "id": 147823199,
        "sender_full_name": "eddyb",
        "timestamp": 1542381925
    },
    {
        "content": "<p>well, maybe into \"avoid work\"</p>",
        "id": 147823201,
        "sender_full_name": "mw",
        "timestamp": 1542381927
    },
    {
        "content": "<p>I'd like to circle back to RLS at some point</p>",
        "id": 147823221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381951
    },
    {
        "content": "<p>but it seems like we're already 25 min in and we have to start somewhere :)</p>",
        "id": 147823226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542381960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there could be ways to improve time in the backend (linking, LTO) as well, but I haven’t looked too much at it.</p>",
        "id": 147823284,
        "sender_full_name": "nagisa",
        "timestamp": 1542381988
    },
    {
        "content": "<p>at the very least it seems to me that clang’s LTO is doing ThinLTO much better than we, somehow</p>",
        "id": 147823297,
        "sender_full_name": "nagisa",
        "timestamp": 1542382006
    },
    {
        "content": "<p>I think there's one thing that isn't explicitly covered, which affects UX. We currently are <em>average</em> in continuing past some points for errors. We continue after <em>some</em> parse errors, and we continue after <em>some</em> type check errors, but the experience of making the type checker happy and then being inundated with borrow checker errors is still the norm.</p>",
        "id": 147823299,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542382007
    },
    {
        "content": "<p>interesting <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> ; dsymutil is something that Anthony Jones at Mozilla always points out as a surprising time consumer during linking on mac</p>",
        "id": 147823310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> very good point, that's <em>particularly problemetic</em> on RLS, I think</p>",
        "id": 147823328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382044
    },
    {
        "content": "<p>also defaulting to LLD would help with linking heavy codebases</p>",
        "id": 147823331,
        "sender_full_name": "mw",
        "timestamp": 1542382048
    },
    {
        "content": "<p>also, the new lint ordering is bad</p>",
        "id": 147823334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382052
    },
    {
        "content": "<p>that is, I often get warnings about e.g. unused imports</p>",
        "id": 147823339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382059
    },
    {
        "content": "<p>I think that is tied to parallelizing work, if the unit of work are smaller it'd give us more ergonomic handling of those cases.</p>",
        "id": 147823341,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542382062
    },
    {
        "content": "<p>that are only unused because of typos or type-check errors later</p>",
        "id": 147823343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382064
    },
    {
        "content": "<p>I have previously said we should look for all the <code>fatal</code> calls and just remove them</p>",
        "id": 147823345,
        "sender_full_name": "eddyb",
        "timestamp": 1542382067
    },
    {
        "content": "<p>so that's good but I feel like another category of goal</p>",
        "id": 147823353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382079
    },
    {
        "content": "<p>more in the RLS camp, though perhaps distinct</p>",
        "id": 147823394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382084
    },
    {
        "content": "<p>still, definitely worth noting</p>",
        "id": 147823403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382091
    },
    {
        "content": "<p>(I also wanted to talk more about error messages at some point, perhaps a \"UX\" pillar is a good thing to look at)</p>",
        "id": 147823414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382103
    },
    {
        "content": "<p>interesting</p>",
        "id": 147823428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382120
    },
    {
        "content": "<p>there's no real need to stop the compiler if there's anything else it could be doing, even across crates (but we don't have the infra for that yet)</p>",
        "id": 147823433,
        "sender_full_name": "eddyb",
        "timestamp": 1542382125
    },
    {
        "content": "<p>(I guess I'll come back afterwards and make minutes and note this stuff somewhere)</p>",
        "id": 147823437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382131
    },
    {
        "content": "<p>so yeah I was going to propose we talk a bit more about this bullet point:</p>\n<ul>\n<li>defer, coallesce, and avoid work<ul>\n<li>multi-crate compilation model</li>\n<li>MIR-only rlibs, which helps identify duplicates as well as dead code</li>\n<li>\"polymorphization\" to coallesce monomorphized instances that have the same code</li>\n</ul>\n</li>\n</ul>",
        "id": 147823460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382163
    },
    {
        "content": "<p>if a part of the compiler cannot handle incomplete/erroneous information, it should react to that itself and skip itself</p>",
        "id": 147823465,
        "sender_full_name": "eddyb",
        "timestamp": 1542382170
    },
    {
        "content": "<p>(agreed)</p>",
        "id": 147823471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382180
    },
    {
        "content": "<p>(as opposed to preemptively stopping everything to avoid that situation)</p>",
        "id": 147823542,
        "sender_full_name": "eddyb",
        "timestamp": 1542382212
    },
    {
        "content": "<blockquote>\n<p>multi-crate compilation model</p>\n</blockquote>\n<p>as long as we make it work better than C’s multi-file compilation, we win by default!</p>",
        "id": 147823559,
        "sender_full_name": "nagisa",
        "timestamp": 1542382234
    },
    {
        "content": "<p>That's the direction I feel we've been going in, it's just a lot of work :-/</p>",
        "id": 147823560,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542382236
    },
    {
        "content": "<p>I could see that being a \"working group\"</p>",
        "id": 147823570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382252
    },
    {
        "content": "<p>i.e., come up with a design, which probably involves more use of sentinel values etc, and push it through</p>",
        "id": 147823588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382265
    },
    {
        "content": "<p>AFAIK the most work would be updating all the tests that would cause all sorts of warnings/errors</p>",
        "id": 147823590,
        "sender_full_name": "eddyb",
        "timestamp": 1542382268
    },
    {
        "content": "<p>the working group that never stops working</p>",
        "id": 147823593,
        "sender_full_name": "mw",
        "timestamp": 1542382269
    },
    {
        "content": "<p>it .. feels like it has an end</p>",
        "id": 147823595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382279
    },
    {
        "content": "<p>at some point, there are no more <code>fatal</code> calls :)</p>",
        "id": 147823597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382285
    },
    {
        "content": "<p>there aren't even that many today!</p>",
        "id": 147823620,
        "sender_full_name": "eddyb",
        "timestamp": 1542382301
    },
    {
        "content": "<p>the working group that doesn't stop working even if it fails</p>",
        "id": 147823625,
        "sender_full_name": "mw",
        "timestamp": 1542382310
    },
    {
        "content": "<p>most of it is the driver stopping if any errors were reported</p>",
        "id": 147823627,
        "sender_full_name": "eddyb",
        "timestamp": 1542382312
    },
    {
        "content": "<p>I...get the pun now</p>",
        "id": 147823632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382319
    },
    {
        "content": "<p>/me groans</p>",
        "id": 147823679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382328
    },
    {
        "content": "<p>so I think polymorphization is pretty straightforward</p>",
        "id": 147823703,
        "sender_full_name": "mw",
        "timestamp": 1542382367
    },
    {
        "content": "<p>anyway, so, we have some estimates of mir-only rlibs from <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> 's work -- one thing I'd really like to see us do is to try and estimate how much opportunity there is for what I'm calling \"polymorphization\" -- basically identifying cases where we can avoid instantiating MIR for each value of its type parameters.</p>",
        "id": 147823706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382370
    },
    {
        "content": "<p>we've seen some stabs here</p>",
        "id": 147823710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382373
    },
    {
        "content": "<p>i.e. it doesn't depend on other things</p>",
        "id": 147823713,
        "sender_full_name": "mw",
        "timestamp": 1542382375
    },
    {
        "content": "<p>there are many knobs to turn</p>",
        "id": 147823716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382378
    },
    {
        "content": "<blockquote>\n<p>\"polymorphization\" to coallesce monomorphized instances that have the same code</p>\n</blockquote>\n<p>is this referring to the same thing as LLVM’s merge-functions pass?</p>",
        "id": 147823725,
        "sender_full_name": "nagisa",
        "timestamp": 1542382385
    },
    {
        "content": "<p>yes, but better I would think</p>",
        "id": 147823731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382392
    },
    {
        "content": "<p>multi-crate + mir-only rlibs interact, I think</p>",
        "id": 147823742,
        "sender_full_name": "mw",
        "timestamp": 1542382398
    },
    {
        "content": "<p>I think the best thing to do is to do what we do in miri</p>",
        "id": 147823743,
        "sender_full_name": "eddyb",
        "timestamp": 1542382399
    },
    {
        "content": "<p>well, that was one of my questions actually</p>",
        "id": 147823745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382400
    },
    {
        "content": "<p>miri can evaluate still-polymorphic code</p>",
        "id": 147823761,
        "sender_full_name": "eddyb",
        "timestamp": 1542382410
    },
    {
        "content": "<p>I don't know whether there are places that could be mergerd, but merge-functions doesn't see it</p>",
        "id": 147823770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382417
    },
    {
        "content": "<p>if I understand you, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, that's on the far  end of the spectrum,</p>",
        "id": 147823792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382439
    },
    {
        "content": "<p>(it will error if e.g. layout needs to know a type parameter, but in the absence of that, it will keep working)</p>",
        "id": 147823823,
        "sender_full_name": "eddyb",
        "timestamp": 1542382442
    },
    {
        "content": "<p>i.e., we identify not only cases where the static code is the same, but cases where we could thread some dictionaries etc</p>",
        "id": 147823853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382452
    },
    {
        "content": "<p>no, it's trivial: just make sure you don't choke on params</p>",
        "id": 147823856,
        "sender_full_name": "eddyb",
        "timestamp": 1542382455
    },
    {
        "content": "<p>that..is not trivial when generating code</p>",
        "id": 147823865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382464
    },
    {
        "content": "<p>miri doesn't do any dictionary passing</p>",
        "id": 147823870,
        "sender_full_name": "eddyb",
        "timestamp": 1542382472
    },
    {
        "content": "<p>well doing it in MIR would help in two respects: we could merge functions while they are still polymorphic (avoiding redoing some work) <em>and</em> we could then merge the monomorphisations as well (avoiding extra work of translating to LLVM IR and waiting for LLVM to optimize)</p>",
        "id": 147823876,
        "sender_full_name": "nagisa",
        "timestamp": 1542382481
    },
    {
        "content": "<p>maybe we're talking past each other</p>",
        "id": 147823879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382486
    },
    {
        "content": "<p>it just doesn't die on parametrized code if the evaluation doesn't depend on parameters</p>",
        "id": 147823882,
        "sender_full_name": "eddyb",
        "timestamp": 1542382488
    },
    {
        "content": "<p>ok, the <em>if</em> the tricky bit</p>",
        "id": 147823887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382495
    },
    {
        "content": "<p>that is, I thnk the first level is:</p>",
        "id": 147823894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382499
    },
    {
        "content": "<p>figuring out when you depend on the parameters and how</p>",
        "id": 147823905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382506
    },
    {
        "content": "<p>so that you can share the same LLVM code</p>",
        "id": 147823909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382511
    },
    {
        "content": "<p>the next level is:</p>",
        "id": 147823914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382514
    },
    {
        "content": "<p>e.g. miri can evaluate <code>Vec::new()</code> polymorphically</p>",
        "id": 147823915,
        "sender_full_name": "eddyb",
        "timestamp": 1542382515
    },
    {
        "content": "<p>figuring out when you could make the LLVM code take dictionaries</p>",
        "id": 147823920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382520
    },
    {
        "content": "<p>sure, that's the first (and easier) level</p>",
        "id": 147823928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382529
    },
    {
        "content": "<p>I would presume we will shoot for the first level to start</p>",
        "id": 147823935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382535
    },
    {
        "content": "<p>we can fix codegen to do the same, then have a simple analysis</p>",
        "id": 147823943,
        "sender_full_name": "eddyb",
        "timestamp": 1542382544
    },
    {
        "content": "<p>yes, that is what I am proposing :)</p>",
        "id": 147823957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382553
    },
    {
        "content": "<p>previous attempts failed because they introduced a much more complex mechanism</p>",
        "id": 147823959,
        "sender_full_name": "eddyb",
        "timestamp": 1542382555
    },
    {
        "content": "<p>than making codegen not choke on still-polymorphic code</p>",
        "id": 147824007,
        "sender_full_name": "eddyb",
        "timestamp": 1542382568
    },
    {
        "content": "<p>I was further going to propose</p>",
        "id": 147824009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382569
    },
    {
        "content": "<p>that we start by trying to do the analysis</p>",
        "id": 147824014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382572
    },
    {
        "content": "<p>so we can estimate how effective it is</p>",
        "id": 147824020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382577
    },
    {
        "content": "<p>(that is of course most of the work)</p>",
        "id": 147824028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382588
    },
    {
        "content": "<p>but that's ok</p>",
        "id": 147824029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382590
    },
    {
        "content": "<p>+100 for more statistics</p>",
        "id": 147824036,
        "sender_full_name": "eddyb",
        "timestamp": 1542382592
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>, something I was wondering about</p>",
        "id": 147824041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382596
    },
    {
        "content": "<p>(catching up with what you said)</p>",
        "id": 147824046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382601
    },
    {
        "content": "<p>the 'tcx/'gcx split arose from statistics :P</p>",
        "id": 147824047,
        "sender_full_name": "eddyb",
        "timestamp": 1542382603
    },
    {
        "content": "<p>which I'm not even sure hold anymore</p>",
        "id": 147824054,
        "sender_full_name": "eddyb",
        "timestamp": 1542382609
    },
    {
        "content": "<p>in LLVM, are there cases where we generate nominal types that prevent merge func ?</p>",
        "id": 147824061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382615
    },
    {
        "content": "<p>e.g. if you have two structs that have the same layout</p>",
        "id": 147824081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382632
    },
    {
        "content": "<p>will they get merged?</p>",
        "id": 147824085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382638
    },
    {
        "content": "<p>I never checked, but I doubt it would be an issue.</p>",
        "id": 147824094,
        "sender_full_name": "nagisa",
        "timestamp": 1542382652
    },
    {
        "content": "<p>we generate nominal types based on the Rust type identity and I doubt LLVM merges them</p>",
        "id": 147824096,
        "sender_full_name": "eddyb",
        "timestamp": 1542382652
    },
    {
        "content": "<blockquote>\n<p>we generate nominal types based on the Rust type identity and I doubt LLVM merges them</p>\n</blockquote>\n<p>this was roughly my assumption, but I am not sure</p>",
        "id": 147824110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382666
    },
    {
        "content": "<p>basically I'm trying to figure out</p>",
        "id": 147824121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382680
    },
    {
        "content": "<p>especially since LLVM still has those accursed pointee types</p>",
        "id": 147824132,
        "sender_full_name": "eddyb",
        "timestamp": 1542382682
    },
    {
        "content": "<p>how much <em>more</em> merging we would be able to do than LLVM can do -- obviously doing it earlier is also just better</p>",
        "id": 147824168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382695
    },
    {
        "content": "<p>debuginfo is a bit of a problem here since it needs monomorphic code generally</p>",
        "id": 147824173,
        "sender_full_name": "mw",
        "timestamp": 1542382698
    },
    {
        "content": "<p>hmm yes -- also debuginfo is a good thing to cover in the \"UX\" area</p>",
        "id": 147824188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> debuginfo usually doesn’t work with merged functions either way</p>",
        "id": 147824191,
        "sender_full_name": "nagisa",
        "timestamp": 1542382720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> we can assume that if the code doesn't e.g. access through pointers, then debuginfo can be opaque about it</p>",
        "id": 147824213,
        "sender_full_name": "eddyb",
        "timestamp": 1542382740
    },
    {
        "content": "<p>PS: For the minutes, I am going to pay special attention to any message that has <span class=\"emoji emoji-1f446\" title=\"point up\">:point_up:</span> on it</p>",
        "id": 147824240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382761
    },
    {
        "content": "<p>so if you see something you think we should definitely remember to note, add that emoji :)</p>",
        "id": 147824248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382770
    },
    {
        "content": "<p>oh this reminds me</p>",
        "id": 147824267,
        "sender_full_name": "eddyb",
        "timestamp": 1542382794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> could we preemptively get rid of pointee types by making every pointer a <code>*{}</code> and then ptrcasting before each load/store?</p>",
        "id": 147824309,
        "sender_full_name": "nagisa",
        "timestamp": 1542382803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> sort of, but you're slowing down LLVM</p>",
        "id": 147824323,
        "sender_full_name": "eddyb",
        "timestamp": 1542382819
    },
    {
        "content": "<blockquote>\n<p>we can assume that if the code doesn't e.g. access through pointers, then debuginfo can be opaque about it</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> are you sure? it seems like when running gdb, you might want to print things the code doesn't directly touch</p>",
        "id": 147824324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382822
    },
    {
        "content": "<p>I feel like we should talk to <span class=\"user-mention\" data-user-id=\"129503\">@Tom Tromey</span> about this</p>",
        "id": 147824336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382839
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/rls/issues/6#issuecomment-436942412\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rls/issues/6#issuecomment-436942412\">https://github.com/rust-lang-nursery/rls/issues/6#issuecomment-436942412</a></p>",
        "id": 147824340,
        "sender_full_name": "eddyb",
        "timestamp": 1542382842
    },
    {
        "content": "<p>I mean we are literally editing gdb/lldb to make them understand Rust</p>",
        "id": 147824348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382851
    },
    {
        "content": "<p>it's at least not a trivial yes or no</p>",
        "id": 147824351,
        "sender_full_name": "mw",
        "timestamp": 1542382853
    },
    {
        "content": "<p>perhaps they can understand this too</p>",
        "id": 147824352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382855
    },
    {
        "content": "<p>so I won't make anyone read that, but, it vaguely mentions that we wanted to do a bunch for 2018</p>",
        "id": 147824366,
        "sender_full_name": "eddyb",
        "timestamp": 1542382867
    },
    {
        "content": "<p>more specifically, I was supposed to look into things like moving incremental quieres earlier than HIR</p>",
        "id": 147824388,
        "sender_full_name": "eddyb",
        "timestamp": 1542382897
    },
    {
        "content": "<p>do we have any plans for making sure these things... happen?</p>",
        "id": 147824455,
        "sender_full_name": "eddyb",
        "timestamp": 1542382925
    },
    {
        "content": "<p>and how we should prioritize low-hanging-fruit vs large-scale refactors?</p>",
        "id": 147824473,
        "sender_full_name": "eddyb",
        "timestamp": 1542382965
    },
    {
        "content": "<p>(note for later: one other thing I think we could measure-- I hypothesize that when you have a lot of dependencies from <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>, much of the code within is not used by your crate, but we still force you type-check and build it, at least the first time. It might be nice if we didn't, or at least if we did it very late in the cycle. We could measure how much that would matter.)</p>",
        "id": 147824478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382972
    },
    {
        "content": "<blockquote>\n<p>and how we should prioritize low-hanging-fruit vs large-scale refactors?</p>\n</blockquote>\n<p>that is <strong>precisely</strong> what I want us to be talking about :)</p>",
        "id": 147824486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382984
    },
    {
        "content": "<p>basically I think the answer is \"yes\" we have plans -- and we are trying to make them</p>",
        "id": 147824498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542382996
    },
    {
        "content": "<p>stepping back one bit, we are trying in general within Rust to encourage the teams to set goals for themselves and organize to achieve them (and then track and report on our progress)</p>",
        "id": 147824529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383041
    },
    {
        "content": "<p>having well-thought out plans will certainly help with convincing whomever is paying you</p>",
        "id": 147824571,
        "sender_full_name": "mw",
        "timestamp": 1542383048
    },
    {
        "content": "<p>bandwidth hasn't gotten much better, and it's also hard to keep track of everything  happening with incremental (at various scales)</p>",
        "id": 147824586,
        "sender_full_name": "eddyb",
        "timestamp": 1542383067
    },
    {
        "content": "<p>one thing I would love to have <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is a more complete diagram listing the kinds of big refactors we think we need and what each one enables, how they interact</p>",
        "id": 147824592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383073
    },
    {
        "content": "<p>right, that would be very useful</p>",
        "id": 147824607,
        "sender_full_name": "eddyb",
        "timestamp": 1542383094
    },
    {
        "content": "<p>it seems like \"end-to-end query\" is an important step</p>",
        "id": 147824610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383097
    },
    {
        "content": "<p>e.g., it will enable more parallelization</p>",
        "id": 147824618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383104
    },
    {
        "content": "<p>more incremental</p>",
        "id": 147824626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383108
    },
    {
        "content": "<p>maybe not right away, as we also have to make the queries \"smaller\"</p>",
        "id": 147824634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383115
    },
    {
        "content": "<p>but eventually :)</p>",
        "id": 147824636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383117
    },
    {
        "content": "<p>I also believe we have piled on more tech debt than is good for us</p>",
        "id": 147824661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383151
    },
    {
        "content": "<p>I'm not entirely convinced. we spend almost no time before the query system</p>",
        "id": 147824668,
        "sender_full_name": "mw",
        "timestamp": 1542383157
    },
    {
        "content": "<p>so while I want us to focus on results, I think we need to also do cleanup</p>",
        "id": 147824670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383160
    },
    {
        "content": "<p>well from what I can see some cleanup is happening all the time</p>",
        "id": 147824729,
        "sender_full_name": "nagisa",
        "timestamp": 1542383185
    },
    {
        "content": "<p>wasn't e.g. librustc or libsyntax spending like 5 seconds in parsing and expansion?</p>",
        "id": 147824733,
        "sender_full_name": "eddyb",
        "timestamp": 1542383187
    },
    {
        "content": "<p>e.g. the LLVM traitification thing.</p>",
        "id": 147824734,
        "sender_full_name": "nagisa",
        "timestamp": 1542383189
    },
    {
        "content": "<blockquote>\n<p>I'm not entirely convinced. we spend almost no time before the query system</p>\n</blockquote>\n<p>fair point</p>",
        "id": 147824739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383193
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>, I guess it depends on our goals again -- e.g., if we ever want to get to faster updates for RLS, it's clearly key</p>",
        "id": 147824754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383221
    },
    {
        "content": "<p>and RLS wants, ideally, milliseconds</p>",
        "id": 147824758,
        "sender_full_name": "eddyb",
        "timestamp": 1542383223
    },
    {
        "content": "<p>also we are very likely to increase in time in early frontend if we make our parsing more complex (GLL) etc.</p>",
        "id": 147824764,
        "sender_full_name": "nagisa",
        "timestamp": 1542383226
    },
    {
        "content": "<p>or put more constructively: I support any initiative that collects numbers on where we should optimize</p>",
        "id": 147824772,
        "sender_full_name": "mw",
        "timestamp": 1542383237
    },
    {
        "content": "<p>which seems to be the general direction the language is heading towards</p>",
        "id": 147824777,
        "sender_full_name": "nagisa",
        "timestamp": 1542383241
    },
    {
        "content": "<blockquote>\n<p>well from what I can see some cleanup is happening all the time</p>\n</blockquote>\n<p>some, yes. but it's never been an explicit goal for us.</p>",
        "id": 147824792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I wouldn't want to introduce GLL unless it helps with parse times</p>",
        "id": 147824794,
        "sender_full_name": "eddyb",
        "timestamp": 1542383256
    },
    {
        "content": "<p>specifically, GLL is one of the ways we can get fine-grained incremental parsing</p>",
        "id": 147824802,
        "sender_full_name": "eddyb",
        "timestamp": 1542383271
    },
    {
        "content": "<blockquote>\n<p>or put more constructively: I support any initiative that collects numbers on where we should optimize</p>\n</blockquote>\n<p>ok so maybe this should be one our top priorities for next steering meeting</p>",
        "id": 147824804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> you might end up having no choice but to introduce it regardless <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 147824806,
        "sender_full_name": "nagisa",
        "timestamp": 1542383276
    },
    {
        "content": "<p>should I assume that's <em>not</em> a goal for 2019 :)?</p>",
        "id": 147824807,
        "sender_full_name": "eddyb",
        "timestamp": 1542383278
    },
    {
        "content": "<p>maybe we can stop here, actually, and try to collect our thoughts in last 10 mionutes</p>",
        "id": 147824809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383281
    },
    {
        "content": "<p>specifically:</p>",
        "id": 147824850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383285
    },
    {
        "content": "<p>what are some action items and information we can gather to help us?</p>",
        "id": 147824854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Ideally, the RLS could have a way to do local type checking on the current file, while at the same time kicking off a global incremental compilation. That way you can type/borrow check with information you have, while letting the full check happen later once the actual compilation finishes.</p>",
        "id": 147824865,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542383305
    },
    {
        "content": "<p>I don't think that's something we're geared to do.</p>",
        "id": 147824872,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542383315
    },
    {
        "content": "<p>one I see is:</p>\n<ul>\n<li>take another stab at collecting and organizing ideas, incorporating ideas around UX in particular, but also breaking out RLS from batch compilation</li>\n</ul>",
        "id": 147824874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> it actually is</p>",
        "id": 147824876,
        "sender_full_name": "eddyb",
        "timestamp": 1542383324
    },
    {
        "content": "<p>another I see is:</p>\n<ul>\n<li>gather statistics about where we spend our time from perf and perhaps elsewhere</li>\n</ul>",
        "id": 147824878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383334
    },
    {
        "content": "<p>\"local type-checking\" just means \"run the type-checking query for all the items in this module\"</p>",
        "id": 147824895,
        "sender_full_name": "eddyb",
        "timestamp": 1542383350
    },
    {
        "content": "<p>there's no reason not to do something more local, even, depending on the user's viewport</p>",
        "id": 147824910,
        "sender_full_name": "eddyb",
        "timestamp": 1542383369
    },
    {
        "content": "<p>perhaps:</p>\n<ul>\n<li>draw up a proposal for polymorphization analysis / strategy ?</li>\n</ul>",
        "id": 147824911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383370
    },
    {
        "content": "<p>I volunteer for collecting some numbers on how parallel queries performs these days</p>",
        "id": 147825002,
        "sender_full_name": "mw",
        "timestamp": 1542383421
    },
    {
        "content": "<blockquote>\n<p>should I assume that's <em>not</em> a goal for 2019 :)?</p>\n</blockquote>\n<p>in all seriousness, I think it is a legit question whether \"fine-grained incremental parsing\" should be a goal for 2019 or not -- it seems to depend on whether we are prioritizing RLS or batch</p>",
        "id": 147825005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and someone needs to draw the graph of refactor dependencies</p>",
        "id": 147825006,
        "sender_full_name": "eddyb",
        "timestamp": 1542383426
    },
    {
        "content": "<blockquote>\n<p>I volunteer for collecting some numbers on how parallel queries performs these days</p>\n</blockquote>\n<p>ah great</p>",
        "id": 147825016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> glad to hear that, and it makes sense. I guess it'd be a factor of exposing that to the RLS.</p>",
        "id": 147825019,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542383435
    },
    {
        "content": "<p>so another:</p>\n<ul>\n<li>status report on parallel query performance (assigned to mw)</li>\n</ul>",
        "id": 147825024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> TBH RLS could do it today if it was properly integrated and not siphoning data through a side-channel</p>",
        "id": 147825041,
        "sender_full_name": "eddyb",
        "timestamp": 1542383462
    },
    {
        "content": "<p>so it's more of an RLS design problem</p>",
        "id": 147825048,
        "sender_full_name": "eddyb",
        "timestamp": 1542383470
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, nice</p>\n<ul>\n<li>lay out refactor dependencies</li>\n</ul>\n<p>(fwiw I've taken a few stabs at this but will try again)</p>",
        "id": 147825057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383475
    },
    {
        "content": "<p>let me collect those actions items into a hackmd doc</p>",
        "id": 147825067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383487
    },
    {
        "content": "<p>should I just make one for each steering meeting? and a master one?  is hackmd our \"etherpad-like thing of choice\"?</p>",
        "id": 147825097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383511
    },
    {
        "content": "<p>maybe we should make a github repository</p>",
        "id": 147825100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383515
    },
    {
        "content": "<p>it seems to be the hip thing to do these days</p>",
        "id": 147825106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383519
    },
    {
        "content": "<p>frankly, technical debt should be work items just as important as new features</p>",
        "id": 147825118,
        "sender_full_name": "eddyb",
        "timestamp": 1542383522
    },
    {
        "content": "<p>it could host the rustc-guide etc</p>",
        "id": 147825151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383525
    },
    {
        "content": "<blockquote>\n<p>frankly, technical debt should be work items just as important as new features</p>\n</blockquote>\n<p>I agree</p>",
        "id": 147825156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383530
    },
    {
        "content": "<p>having an official plan that we could get people working on full-time would be great</p>",
        "id": 147825187,
        "sender_full_name": "eddyb",
        "timestamp": 1542383561
    },
    {
        "content": "<p>One thing that I've hit my head against, most recently trying to add an integrated lint in the libsyntax, is that the crate dependency graph is a bit coarse. When doing refactorings I often end up with circular dependencies that would ideally be fixed by making those crates smaller. Is that something that we should be doing proactively (smaller loosely tied crates) rather than reactively?</p>",
        "id": 147825213,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542383589
    },
    {
        "content": "<p>It doesn't happen often, but I feel this is something that will come up with the proposed refactors.</p>",
        "id": 147825229,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542383613
    },
    {
        "content": "<p>And ties back to a separate conversation about moving <em>some</em> crates off repo.</p>",
        "id": 147825243,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1542383632
    },
    {
        "content": "<p>as in, being able to say, at the level of rust-lang/compiler, that you can't have these X, Y, Z nice things, without certain prerequisites, and have e.g. managers not involved with the development get behind that</p>",
        "id": 147825249,
        "sender_full_name": "eddyb",
        "timestamp": 1542383636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> the solution is almost never to split crates up</p>",
        "id": 147825299,
        "sender_full_name": "eddyb",
        "timestamp": 1542383657
    },
    {
        "content": "<p>in fact we can probably unsplit several crates nowadays, the split is no longer meaningful</p>",
        "id": 147825312,
        "sender_full_name": "eddyb",
        "timestamp": 1542383674
    },
    {
        "content": "<p>reusable components, sure, but part of the compiler mainly need an \"API root\" crate, e.g. <code>librustc</code> and its query engine</p>",
        "id": 147825341,
        "sender_full_name": "eddyb",
        "timestamp": 1542383711
    },
    {
        "content": "<p>(speaking of reusable components, <a href=\"https://github.com/rust-lang/rust/issues/55993\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55993\">https://github.com/rust-lang/rust/issues/55993</a>)</p>",
        "id": 147825362,
        "sender_full_name": "eddyb",
        "timestamp": 1542383739
    },
    {
        "content": "<blockquote>\n<p>One thing that I've hit my head against, most recently trying to add an integrated lint in the libsyntax, is that the crate dependency graph is a bit coarse. When doing refactorings I often end up with circular dependencies that would ideally be fixed by making those crates smaller. Is that something that we should be doing proactively (smaller loosely tied crates) rather than reactively?</p>\n</blockquote>\n<p>I would like to start refactoring the compiler into smaller crates, yes. I used to feel differently but my opinions have changed. I'd also like us to pay careful attention to the interfaces between those crates, and see if we can do better.</p>",
        "id": 147825452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383807
    },
    {
        "content": "<p>but I think this is something we should talk about</p>",
        "id": 147825459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383812
    },
    {
        "content": "<p>the current divisions are fairly random</p>",
        "id": 147825463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383816
    },
    {
        "content": "<p>I think we should have less crates, but also more structured</p>",
        "id": 147825493,
        "sender_full_name": "eddyb",
        "timestamp": 1542383865
    },
    {
        "content": "<blockquote>\n<p>reusable components, sure, but part of the compiler mainly need an \"API root\" crate, e.g. <code>librustc</code> and its query engine</p>\n</blockquote>\n<p>(note that the salsa design explicitly avoids having a root place where all queries are declared -- rather, each crate declares traits that are composed at the very end)</p>",
        "id": 147825500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383881
    },
    {
        "content": "<p>(e.g. <code>librustc_syntax</code> / <code>librustc_front</code>)</p>",
        "id": 147825543,
        "sender_full_name": "eddyb",
        "timestamp": 1542383886
    },
    {
        "content": "<p>which is an alternative</p>",
        "id": 147825545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how much overhead does that have?</p>",
        "id": 147825559,
        "sender_full_name": "eddyb",
        "timestamp": 1542383901
    },
    {
        "content": "<p>but I've got to run, I'm going to try and draw up the bullet points though</p>",
        "id": 147825562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383903
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how much overhead does that have?</p>\n</blockquote>\n<p>zero?</p>",
        "id": 147825565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383909
    },
    {
        "content": "<p>not sure what you mean by overhead though, I assume runtime overhead?</p>",
        "id": 147825585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383925
    },
    {
        "content": "<p>everything is built against <code>impl Trait</code>, so statically dispatched</p>",
        "id": 147825590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383933
    },
    {
        "content": "<p>it will cause a lot of the LLVM work to be deferred to the final crate</p>",
        "id": 147825596,
        "sender_full_name": "mw",
        "timestamp": 1542383939
    },
    {
        "content": "<p>yes</p>",
        "id": 147825605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383944
    },
    {
        "content": "<p>but .. you're going to compile anyway</p>",
        "id": 147825619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383949
    },
    {
        "content": "<p>is everything generic over traits?</p>",
        "id": 147825625,
        "sender_full_name": "eddyb",
        "timestamp": 1542383954
    },
    {
        "content": "<p>everything that needs to interact with the query system, yes</p>",
        "id": 147825632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383962
    },
    {
        "content": "<p>that... won't work in rustc</p>",
        "id": 147825637,
        "sender_full_name": "eddyb",
        "timestamp": 1542383967
    },
    {
        "content": "<p>I'd like though to work on making those traits <code>dyn</code> capable, that'd be nice</p>",
        "id": 147825642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383972
    },
    {
        "content": "<p>they're not now, I think they could be</p>",
        "id": 147825644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542383975
    },
    {
        "content": "<p>not without more work than everything we've already thought about doing</p>",
        "id": 147825655,
        "sender_full_name": "eddyb",
        "timestamp": 1542383982
    },
    {
        "content": "<p>(as I said, I don't see why they couldn't be dyn capable traits, but it would take some refactorings to do it)</p>",
        "id": 147825721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542384006
    },
    {
        "content": "<p>we already dispatch queries in rustc through fn pointers anyway, so no difference there</p>",
        "id": 147825741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542384023
    },
    {
        "content": "<p>anyway, I'm not proposing that, just saying that it's worth considering</p>",
        "id": 147825753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542384031
    },
    {
        "content": "<p>the important bit is that the set of fn pointers is fixed</p>",
        "id": 147825764,
        "sender_full_name": "eddyb",
        "timestamp": 1542384039
    },
    {
        "content": "<p>you need extra indirection if you want it to be pluggable</p>",
        "id": 147825773,
        "sender_full_name": "eddyb",
        "timestamp": 1542384048
    },
    {
        "content": "<p>at best an array, at worst an <code>AnyMap</code></p>",
        "id": 147825801,
        "sender_full_name": "eddyb",
        "timestamp": 1542384073
    },
    {
        "content": "<p>that is one direction; there are others. but let's defer this, as we are out of time, and I have to run :)</p>",
        "id": 147825817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542384094
    },
    {
        "content": "<p>do we need runtime pluggability?</p>",
        "id": 147825826,
        "sender_full_name": "mw",
        "timestamp": 1542384104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh if you're making a list, you can throw in there \"type-check on MIR instead of HIR\" (i.e. don't run inference separate to the NLL type-checking), that might be an interesting aspect. and in general, moving away from doing things on the HIR</p>",
        "id": 147825834,
        "sender_full_name": "eddyb",
        "timestamp": 1542384110
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 147825840,
        "sender_full_name": "mw",
        "timestamp": 1542384117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> we need cross-crate pluggability</p>",
        "id": 147825845,
        "sender_full_name": "eddyb",
        "timestamp": 1542384120
    },
    {
        "content": "<p>I'll try to draw up some notes. I think I might make a rust-compiler-team repository, as well, to start hosting these minutes, design documents, and other things</p>",
        "id": 147825877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542384123
    },
    {
        "content": "<p>I've not had much to contribute to this discussion, but I really enjoyed reading it, thanks everyone.</p>",
        "id": 147825892,
        "sender_full_name": "davidtwco",
        "timestamp": 1542384129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> do you mean do <strong>all</strong> type inference on MIR? I'm not sure how that would work, as we need to do type-inference to even <strong>construct</strong> the MIR...? If you meant region checking and borrow checking, that's already on there.</p>",
        "id": 147825949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542384183
    },
    {
        "content": "<p>I think I wrote to you about this... elsewhere, idk where</p>",
        "id": 147825971,
        "sender_full_name": "eddyb",
        "timestamp": 1542384206
    },
    {
        "content": "<p>you can encode uninferred HIR into MIR without much effort</p>",
        "id": 147825998,
        "sender_full_name": "eddyb",
        "timestamp": 1542384230
    },
    {
        "content": "<p>most of the control-flow doesn't even depend on type inference</p>",
        "id": 147826045,
        "sender_full_name": "eddyb",
        "timestamp": 1542384245
    },
    {
        "content": "<p>Making inference lazy would make it work all the time without necessarily requiring full inference <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 147826177,
        "sender_full_name": "nagisa",
        "timestamp": 1542384354
    },
    {
        "content": "<p>Didn’t we have an item on making more things lazy?</p>",
        "id": 147826235,
        "sender_full_name": "nagisa",
        "timestamp": 1542384380
    },
    {
        "content": "<p>I don't mean that :P</p>",
        "id": 147826259,
        "sender_full_name": "eddyb",
        "timestamp": 1542384392
    },
    {
        "content": "<p>Sure, but I believe there are some language constructs that could make cfg depend on inference/types</p>",
        "id": 147826318,
        "sender_full_name": "nagisa",
        "timestamp": 1542384455
    },
    {
        "content": "<p>(associated constants come to mind)</p>",
        "id": 147826329,
        "sender_full_name": "nagisa",
        "timestamp": 1542384478
    },
    {
        "content": "<p>it's only the unwind path that can change, last I checked</p>",
        "id": 147826381,
        "sender_full_name": "eddyb",
        "timestamp": 1542384502
    }
]