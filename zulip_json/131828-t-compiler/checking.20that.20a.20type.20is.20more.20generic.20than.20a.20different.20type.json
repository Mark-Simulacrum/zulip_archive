[
    {
        "content": "<p>How can I check that an impl holds for all concrete instantiations of a generic type?</p>",
        "id": 204359468,
        "sender_full_name": "lcnr",
        "timestamp": 1595177395
    },
    {
        "content": "<p>i.e. I want to return the following in this example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204359517,
        "sender_full_name": "lcnr",
        "timestamp": 1595177445
    },
    {
        "content": "<p><code>Vec&lt;()&gt; := true</code>, <code>Vec&lt;U&gt; := true</code>,  <code>Vec&lt;Vec&lt;T&gt;&gt; := true</code>, <code>T := false</code></p>",
        "id": 204359539,
        "sender_full_name": "lcnr",
        "timestamp": 1595177487
    },
    {
        "content": "<p>To elaborate, I want to get</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>to compile</p>",
        "id": 204359766,
        "sender_full_name": "lcnr",
        "timestamp": 1595177707
    },
    {
        "content": "<p>Opened a wip PR for this <a href=\"https://github.com/rust-lang/rust/issues/74525\">#74525</a></p>",
        "id": 204359980,
        "sender_full_name": "lcnr",
        "timestamp": 1595177948
    },
    {
        "content": "<p>My problem in more detail: <a href=\"https://github.com/rust-lang/rust/pull/74525/files#r456931789\">https://github.com/rust-lang/rust/pull/74525/files#r456931789</a></p>\n<blockquote>\n<p>So we end up here if we have exactly one impl candidate which is negative.</p>\n<p>We only have a negative impl for Foo&lt;()&gt; here, while the self type is actually more generic (Foo&lt;_&gt;).<br>\nSo if Foo is an auto trait we should return ambiguous in this case, as Foo can be implemented here, e.g. Foo&lt;u8&gt;.</p>\n<p>I don't know how we can detect that the impl is at least as general as the current self type rn though, need some help for<br>\nthis. (I don't think I have to write a new type relation for this thinking )</p>\n</blockquote>",
        "id": 204360435,
        "sender_full_name": "lcnr",
        "timestamp": 1595178439
    }
]