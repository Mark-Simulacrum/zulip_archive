[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I have a question about dataflow.<br>\nIf I understand normal dataflow correctly, if you have a <code>BOTTOM_VALUE = false</code> and you <code>gen</code> a value, this spreads and marks all following blocks as also being <code>true</code> for that value. Is there a way to set it up so the a block's value is only <code>true</code> if <em>all</em> incoming blocks are <code>true</code> for that value?</p>",
        "id": 183454598,
        "sender_full_name": "oli",
        "timestamp": 1576351639
    },
    {
        "content": "<p>Besides initializing all entry sets to <code>true</code>, <code>BOTTOM_VALUE = true</code> will use intersection instead of union as the <a href=\"https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src/librustc_mir/dataflow/mod.rs#L654-L659\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src/librustc_mir/dataflow/mod.rs#L654-L659\">default join operator</a>. I believe \"gen\"-ing bits still sets them to <code>true</code>, regardless of <code>BOTTOM_VALUE</code>.</p>",
        "id": 183454772,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576351897
    },
    {
        "content": "<p>Oh... so if I override the <code>start_block_effect</code> to be the opposite of <code>BOTTOM_VALUE</code>, this may just work out</p>",
        "id": 183454983,
        "sender_full_name": "oli",
        "timestamp": 1576352121
    },
    {
        "content": "<p>hmm no <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 183455047,
        "sender_full_name": "oli",
        "timestamp": 1576352179
    },
    {
        "content": "<p>if you want to the initial value of the block entry sets to be <code>false</code>, <code>BOTTOM_VALUE</code> should be <code>false</code>, and you should override the <code>join</code> operator instead.</p>",
        "id": 183455060,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576352208
    },
    {
        "content": "<p>You could explain the analysis you're trying to do if you want more help.</p>",
        "id": 183455146,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576352329
    },
    {
        "content": "<p>ok, so I have a ZST <code>Idx</code> so every block just has one bit. I set this bit when I encounter a <code>TerminatorKind::Call</code> to a specific function. I want to be able to ask at each location whether the function has been called if we got to this place in the MIR</p>",
        "id": 183455204,
        "sender_full_name": "oli",
        "timestamp": 1576352409
    },
    {
        "content": "<p>this means <code>if some_cond { specific_function(); /* here it's true */ } /* here it's false */</code></p>",
        "id": 183455216,
        "sender_full_name": "oli",
        "timestamp": 1576352444
    },
    {
        "content": "<p>It seems like you want <code>BOTTOM_VALUE</code> to be <code>false</code> (function not called before this point) and the <code>join</code> operator to be union (if the function could have been called in one predecessor but not another, it could have been called in this basic block).</p>",
        "id": 183455309,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576352595
    },
    {
        "content": "<p>Oh, there's no <code>else</code> in your example. You mean function has <em>definitely</em> been called, not <em>maybe</em> been called?</p>",
        "id": 183455365,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576352654
    },
    {
        "content": "<p>yes</p>",
        "id": 183455394,
        "sender_full_name": "oli",
        "timestamp": 1576352706
    },
    {
        "content": "<p>that's my problem. <code>maybe</code> is easy I got that working quickly</p>",
        "id": 183455396,
        "sender_full_name": "oli",
        "timestamp": 1576352718
    },
    {
        "content": "<p>but I don't think dataflow supports my use case</p>",
        "id": 183455398,
        "sender_full_name": "oli",
        "timestamp": 1576352728
    },
    {
        "content": "<p>In that case yeah, <code>BOTTOM_VALUE</code> is <code>false</code> (function not definitely called) and the <code>join</code> operator is intersection (if the function was definitely called in one predecessor but not definitely called in another, it has not definitely been called in this basic block.</p>",
        "id": 183455405,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576352746
    },
    {
        "content": "<p>So.. that's what I tried earlier. I reran and dumped all the state changes. What's happening right now is that <code>specific_function(); foo();</code> says that at <code>foo</code> the bit is false. I dumped all joins and what I'm seeing is two intersects: <code>[] &amp; [MyBit]</code> and <code>[] &amp; []</code>. So I'm guessing that the initial state is also joined with the newly set bits?</p>",
        "id": 183455903,
        "sender_full_name": "oli",
        "timestamp": 1576353447
    },
    {
        "content": "<p>Ugh, sorry. Yes you're right.</p>",
        "id": 183455960,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576353533
    },
    {
        "content": "<p>So, I mean this is fairly easy to write without duplicating too much dataflow (I'm just looking at basic blocks after all), I was just hoping I could make it work with dataflow so I don't have to write the <code>dirty_set</code> logic :D</p>",
        "id": 183456133,
        "sender_full_name": "oli",
        "timestamp": 1576353747
    },
    {
        "content": "<p>One last try. how about setting <code>BOTTOM_VALUE</code> to <code>true</code> with the same gen/kill semantics (<code>FnDefinitelyCalled</code>), then the START_BLOCK state to <code>false</code> in <code>initalize_start_block</code>.</p>",
        "id": 183456222,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576353849
    },
    {
        "content": "<p>You mentioned this above</p>",
        "id": 183456227,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576353868
    },
    {
        "content": "<p>and indeed this is what <a href=\"https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src/librustc_mir/dataflow/impls/mod.rs#L384\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src/librustc_mir/dataflow/impls/mod.rs#L384\"><code>DefinitelyInitalizedPlaces</code></a> does, which has similar semantics</p>",
        "id": 183456336,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576354040
    },
    {
        "content": "<p>Hmm... I thought I tried this, but may have screwed up, I'll see what that does tomorrow morning.</p>",
        "id": 183456739,
        "sender_full_name": "oli",
        "timestamp": 1576354632
    },
    {
        "content": "<p>It works!! Thanks</p>",
        "id": 183478540,
        "sender_full_name": "oli",
        "timestamp": 1576397670
    },
    {
        "content": "<p>/me goes write some docs</p>",
        "id": 183478541,
        "sender_full_name": "oli",
        "timestamp": 1576397676
    }
]