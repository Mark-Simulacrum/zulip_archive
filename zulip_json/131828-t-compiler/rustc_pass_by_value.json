[
    {
        "content": "<p>I'm working on a change to how <code>ty::Ty</code> is represented, to make clearer the uniqueness requirement of it and other interned types. As part of this I have changed an in-progress definition of it from this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[rustc_diagnostic_item = &quot;Ty&quot;]\n#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\npub type Ty&lt;&#39;tcx&gt; = &amp;&#39;tcx Uniq&lt;TyS&lt;&#39;tcx&gt;&gt;;\n</code></pre></div>\n<p>to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n#[rustc_diagnostic_item = &quot;Ty&quot;]\npub struct Ty&lt;&#39;tcx&gt;(&amp;&#39;tcx Uniq&lt;TyS&lt;&#39;tcx&gt;&gt;);\n</code></pre></div>\n<p>AFAICT, the <code>rustc_pass_by_value</code> on the <code>type</code> version did nothing. E.g. there are a ton of <code>Ty</code> methods that take a <code>&amp;self</code> parameter. But after making the change, I get lots of compiler lint errors about these methods, <em>even though I don't have <code>rustc_pass_by_value</code> on the <code>struct</code> version</em>. Is this expected?</p>",
        "id": 269489649,
        "sender_full_name": "nnethercote",
        "timestamp": 1643234662
    },
    {
        "content": "<p>I think the lint may be basing it on <code>#[rustc_diagnostic_item = \"Ty\"]</code> rather than <code>rustc_pass_by_value</code> (just a guess).</p>",
        "id": 269492923,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643236260
    },
    {
        "content": "<p>Or not... hmm. I have no idea then.</p>",
        "id": 269493254,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643236464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc_pass_by_value/near/269492923\">said</a>:</p>\n<blockquote>\n<p>I think the lint may be basing it on <code>#[rustc_diagnostic_item = \"Ty\"]</code> rather than <code>rustc_pass_by_value</code> (just a guess).</p>\n</blockquote>\n<p>the lint has been reworked recently</p>",
        "id": 269531257,
        "sender_full_name": "lcnr",
        "timestamp": 1643265275
    },
    {
        "content": "<p>so the bootstrap compiler uses <code>#[rustc_diagnostic_item = \"Ty\"]</code> while the new one uses <code>#[cfg_attr(not(bootstrap), rustc_pass_by_value)]</code></p>",
        "id": 269531278,
        "sender_full_name": "lcnr",
        "timestamp": 1643265305
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/92646\">https://github.com/rust-lang/rust/pull/92646</a></p>",
        "id": 269531291,
        "sender_full_name": "lcnr",
        "timestamp": 1643265329
    },
    {
        "content": "<blockquote>\n<p>Is this expected?</p>\n</blockquote>\n<p>kinda, while updating the lint i did add a branch which couldn't be hit for <code>ty::Ty</code> so there were places where it didn't trigger. I think it still triggered for <code>ty::Ty</code> in some cases before this, idk for sure though</p>",
        "id": 269531428,
        "sender_full_name": "lcnr",
        "timestamp": 1643265469
    }
]