[
    {
        "content": "<p>Is there some reason why the compiler (with optimizations enabled) would generate code like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>    0036:   48 85 f6                test   %rsi,%rsi\n    0039:   0f 85 95 00 00 00       jne    00d4 &lt;_ZN3foo3foo17h3398b7961e5013deE+0xd4&gt;\n    003f:   e9 9b 00 00 00          jmpq   00df &lt;_ZN3foo3foo17h3398b7961e5013deE+0xdf&gt;\n</code></pre></div>",
        "id": 203778942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594679077
    },
    {
        "content": "<p>Why not generate a single <code>je</code>?</p>",
        "id": 203778975,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594679109
    },
    {
        "content": "<p>What would be the best way to diagnose this, and where would be the best place to report it?</p>",
        "id": 203780999,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594680564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> typically with stuff like this, the thing to try and do is reproduce it in clang and report it to LLVM</p>",
        "id": 203795156,
        "sender_full_name": "eddyb",
        "timestamp": 1594696584
    },
    {
        "content": "<p>or at least that's my view</p>",
        "id": 203795161,
        "sender_full_name": "eddyb",
        "timestamp": 1594696603
    },
    {
        "content": "<p>I don't think that pattern is surprising, but I don't remember the explanation. cc <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span></p>",
        "id": 203795172,
        "sender_full_name": "eddyb",
        "timestamp": 1594696640
    },
    {
        "content": "<p>IIUC, neither jump target is right after the block you've shown. Using a single <code>je</code> and no <code>jmp</code> only works if the target of the latter would be right after the <code>je</code>, but there can be several reasons why the blocks are not laid out that way. Most basically, if there are several blocks jumping to +0xdf, only one of them can get there by fall through (unless you want to duplicate the block), so the others will have to jump there.</p>",
        "id": 203801498,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594706770
    },
    {
        "content": "<p>Ah, I see. So the likely scenario is that it wasn't trivial for LLVM to arrange for one of the blocks to follow as a fall-through? That makes sense.</p>",
        "id": 203808874,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594714637
    },
    {
        "content": "<p>I don't know the rest of the specific example you were looking at, but often it's not just \"not trivial\" to get fall-through but fall-through would be a worse option. For example, consider</p>\n<div class=\"codehilite\"><pre><span></span><code>bb0:\n    if (cond1) goto bb2 else goto bb3\nbb1:\n    if (cond2) goto bb2 else goto bb4\n</code></pre></div>\n\n\n<p>You can't have both bb0 and bb1 fall-through to bb2, unless you duplicate bb2 and that probably hurts more than it helps (for code size if bb2 is reasonably large; also for runtime performance if the respective branches are unlikely).</p>",
        "id": 203832086,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594732983
    },
    {
        "content": "<p>And outside of these cases where you'd have to duplicate blocks, it may also be that a block order that results in more unconditional jumps than strictly necessary is still beneficial overall, e.g. due to branch probabilities. (And yes, of course there's also cases where the compiler output just isn't optimal.)</p>",
        "id": 203832632,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594733268
    }
]