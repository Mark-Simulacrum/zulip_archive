[
    {
        "content": "<p>Hello!</p>\n<p>I was wondering if there has ever been any work done or if its been discussed the ability to dynamically switch out rustc backends for specific functions? It would be great to be able to create inline shaders with something like rust-gpu or (once rustc can do this) compile specific functions to ptx to be run similar to CUDA C++.</p>",
        "id": 243266574,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624133180
    },
    {
        "content": "<p>perhaps through a special proc macro such as <code>#[backend = \"rust-gpu\"]</code> or <code>#[backend(target = \"nvptx64-nvidia-cuda\"))]</code>. However, this would probably require some changes in the internal backend API as well as some bikeshedding to dictate how this should actually behave and where it generates code</p>",
        "id": 243266661,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624133327
    },
    {
        "content": "<p>Inline shaders for rust-gpu would work with <code>#[cfg(target_arch)]</code> already I think. Per-function backend switching won't help as cpu and gpu code use different targets and you can only have a single target per compilation session. (macro expansion and eg type layout depend on the specific target)</p>",
        "id": 243270350,
        "sender_full_name": "bjorn3",
        "timestamp": 1624138730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah i forgot about cfg :/<br>\nBut how would inline shaders work? wouldnt u have to recompile everything twice</p>",
        "id": 243270506,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624138924
    },
    {
        "content": "<p>Yes, you have to do that anyway as every function can in principle be used by both the cpu code and the shader. When compiling dependencies it is not known yet who uses it.</p>",
        "id": 243270528,
        "sender_full_name": "bjorn3",
        "timestamp": 1624139009
    },
    {
        "content": "<p>cant you figure that out in the codegen?</p>",
        "id": 243270536,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139034
    },
    {
        "content": "<p>ah but that would require per-function switching haha</p>",
        "id": 243270587,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139077
    },
    {
        "content": "<p>One thing that might be interesting to explore in the future is an NVVM backend, NVVM IR is a subset of LLVM IR that can be fed to libnvvm to produce very efficient gpu code, it's what cuda C++ uses</p>",
        "id": 243270622,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139152
    },
    {
        "content": "<p>In addition how would you handle typechecking of <code>let foo: [u8; size_of::&lt;Foo&gt;] = [0];</code>? The size of <code>Foo</code> may depend on if it is compiled for the cpu or gpu.</p>",
        "id": 243270667,
        "sender_full_name": "bjorn3",
        "timestamp": 1624139169
    },
    {
        "content": "<p>It might be possible to literally just rip out the debug and unwinding parts of the llvm codegen and feed the llvm ir to nvvm, but im not sure</p>",
        "id": 243270668,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139171
    },
    {
        "content": "<p>sadly rust cant be compiled to nvptx64 on windows because of some llvm dylib thing...</p>",
        "id": 243270674,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139203
    },
    {
        "content": "<p>Yeah makes sense, rust has too much utility for target-specific things that this isnt possible</p>",
        "id": 243270685,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139237
    },
    {
        "content": "<p>Yeah compiling to native (vendor specific) gpu shader code using LLVM is an option.</p>",
        "id": 243270689,
        "sender_full_name": "bjorn3",
        "timestamp": 1624139255
    },
    {
        "content": "<p>i dont think llvm can compile to spirv or something like it, i know it can compile to ptx though, that u can run using the cuda driver api</p>",
        "id": 243270731,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139284
    },
    {
        "content": "<p>Rust-gpu doesn't use LLVM as the SPIR-V backend of LLVM is supposedly unable to handle most LLVM ir emitted by rustc.</p>",
        "id": 243270739,
        "sender_full_name": "bjorn3",
        "timestamp": 1624139299
    },
    {
        "content": "<p>but if you try to compile for nvptx64-nvidia-cuda on windows and use nvptx intrinsics you get some really nice linker errors :)</p>",
        "id": 243270742,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139305
    },
    {
        "content": "<p>also, NVVM has gpu-specific optimizations llvm doesnt have</p>",
        "id": 243270757,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139330
    },
    {
        "content": "<p>this is what im talking about <a href=\"https://docs.nvidia.com/cuda/nvvm-ir-spec/index.html\">https://docs.nvidia.com/cuda/nvvm-ir-spec/index.html</a></p>",
        "id": 243270768,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139348
    },
    {
        "content": "<p>The issue is that rustc 100% emits LLVM IR that is not compatible with NVVM IR</p>",
        "id": 243270777,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139369
    },
    {
        "content": "<p>So a special nvvm codegen would probably need to be written, perhaps using llvm for its builder functions but just not doing some things that are restricted</p>",
        "id": 243270851,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you know of any resources to understand how rustc codegen backends work? anything that helped u write the cranelift one? ;)</p>",
        "id": 243270981,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624139658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> For shader compilation, you might also look at the artifact dependencies RFC.</p>",
        "id": 243277530,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624149778
    },
    {
        "content": "<p>Interesting</p>",
        "id": 243277536,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624149799
    },
    {
        "content": "<p>Im mostly concerned with cuda right now, its just much easier and better for what i make and shaders usually perform worse, so being able to compile rust to nvvm ir would be my ultimate goal</p>",
        "id": 243277588,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624149845
    },
    {
        "content": "<p>I might explore if making a new codegen or forking the existing llvm one to work with nvvm restrictions may work</p>",
        "id": 243277605,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624149893
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> do you know of any resources to understand how rustc codegen backends work? anything that helped u write the cranelift one? ;)</p>\n</blockquote>\n<p>Reading the source of cg_ssa/llvm amd miri.</p>",
        "id": 243287186,
        "sender_full_name": "bjorn3",
        "timestamp": 1624166517
    },
    {
        "content": "<p>miri? interesting, im currently reading the rustc-codegen-llvm code</p>",
        "id": 243289880,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624171645
    },
    {
        "content": "<p>the nice thing is an NVVM backend is basically just subtractive development on the llvm codegen because its a subset of llvm ir. Although ill start from scratch and take bits from the llvm codegen if i need to</p>",
        "id": 243289926,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624171702
    },
    {
        "content": "<p>last time i read the backend's source code, im pretty sure cg_ssa didnt exist, this makes things so much easier <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 243289933,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624171756
    },
    {
        "content": "<p>It is sometimes easier to read miri to understand how a mir construct or intrinsic works than to read cg_ssa as the code is often cleaner.</p>",
        "id": 243290877,
        "sender_full_name": "bjorn3",
        "timestamp": 1624173672
    },
    {
        "content": "<p>i see</p>",
        "id": 243291687,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624175217
    },
    {
        "content": "<p>it seems with cg_ssa i dont have to worry about mir -&gt; ir which is nice</p>",
        "id": 243291694,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624175248
    },
    {
        "content": "<p>I think it still makes sense to select codegen on crate boundaries.</p>",
        "id": 243340121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624251634
    },
    {
        "content": "<p>Rather than intra-crate boundaries.</p>",
        "id": 243340129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624251649
    },
    {
        "content": "<p>yeah, crates are codegen units.<br>\nmaybe the thing that's really needed is making it possible to define inline crates.</p>",
        "id": 243342434,
        "sender_full_name": "Jubilee",
        "timestamp": 1624255085
    }
]