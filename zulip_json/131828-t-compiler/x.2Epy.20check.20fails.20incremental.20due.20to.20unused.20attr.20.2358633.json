[
    {
        "content": "<p>so this is an old issue that I plugged some time ago</p>",
        "id": 183270355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576164997
    },
    {
        "content": "<p>but its rearing its head again</p>",
        "id": 183270379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576165007
    },
    {
        "content": "<p>I think things have gotten hectic since we've started not removing incremental caches all the time (cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>)</p>",
        "id": 183270435,
        "sender_full_name": "eddyb",
        "timestamp": 1576165039
    },
    {
        "content": "<p>when it works, it's great, when it doesn't, <code>rm -r</code></p>",
        "id": 183270458,
        "sender_full_name": "eddyb",
        "timestamp": 1576165050
    },
    {
        "content": "<p>but here one runs into it during every attempt to develop on a certain part of libcore ?</p>",
        "id": 183270556,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576165084
    },
    {
        "content": "<p>this is true, we're now essentially never cleaning out your target directories</p>",
        "id": 183270560,
        "sender_full_name": "simulacrum",
        "timestamp": 1576165084
    },
    {
        "content": "<p>(previously a change in e.g. libstd would cause all of the librustc_* incremental caches to be destroyed, even if they were likely still mostly usable, and fixing that is why we changed anything here)</p>",
        "id": 183270611,
        "sender_full_name": "eddyb",
        "timestamp": 1576165113
    },
    {
        "content": "<p>so maybe I misunderstand</p>",
        "id": 183270683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576165144
    },
    {
        "content": "<p>huh, wait, what are we doing here?</p>",
        "id": 183270686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576165146
    },
    {
        "content": "<p>we're just re-using the old incremental data even though the compiler has changed in the interim?</p>",
        "id": 183270699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576165156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> presumably rustc itself can detect that situation?</p>",
        "id": 183270739,
        "sender_full_name": "eddyb",
        "timestamp": 1576165180
    },
    {
        "content": "<p>it certainly can't :)</p>",
        "id": 183270757,
        "sender_full_name": "mw",
        "timestamp": 1576165193
    },
    {
        "content": "<p>getting some strong deja-vu about this</p>",
        "id": 183270815,
        "sender_full_name": "eddyb",
        "timestamp": 1576165210
    },
    {
        "content": "<p>I mean if it could</p>",
        "id": 183270830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576165222
    },
    {
        "content": "<p>It can usually, but not during bootstrapping</p>",
        "id": 183270833,
        "sender_full_name": "mw",
        "timestamp": 1576165223
    },
    {
        "content": "<p>it'd be no different than us doing <code>rm -rf</code></p>",
        "id": 183270849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576165230
    },
    {
        "content": "<p>because it relies on git commit hashes</p>",
        "id": 183270854,
        "sender_full_name": "mw",
        "timestamp": 1576165235
    },
    {
        "content": "<p>(right?)</p>",
        "id": 183270856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576165236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> but isn't the problem  that beta changed?</p>",
        "id": 183270874,
        "sender_full_name": "eddyb",
        "timestamp": 1576165247
    },
    {
        "content": "<p><code>stage1</code> doesn't use incremental AFAIK, so a locally built compiler isn't a concern</p>",
        "id": 183270901,
        "sender_full_name": "eddyb",
        "timestamp": 1576165266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> hm, that should be detected, I guess</p>",
        "id": 183270911,
        "sender_full_name": "mw",
        "timestamp": 1576165272
    },
    {
        "content": "<p>and <code>./x.py check</code> doesn't run a locally built compiler anyway</p>",
        "id": 183270916,
        "sender_full_name": "eddyb",
        "timestamp": 1576165277
    },
    {
        "content": "<p>this might be a differently problem then</p>",
        "id": 183271036,
        "sender_full_name": "mw",
        "timestamp": 1576165334
    },
    {
        "content": "<p>hmm based on <a href=\"https://github.com/rust-lang/rust/issues/58633#issuecomment-562738568\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58633#issuecomment-562738568\">https://github.com/rust-lang/rust/issues/58633#issuecomment-562738568</a> it might be a problem with reusing caches for different compilation modes</p>",
        "id": 183271078,
        "sender_full_name": "eddyb",
        "timestamp": 1576165372
    },
    {
        "content": "<p>do we still fill the \"used attributes\" map as a side-effect of certain queries?</p>",
        "id": 183271119,
        "sender_full_name": "mw",
        "timestamp": 1576165398
    },
    {
        "content": "<p>but I get something similar when beta changes (... or so I thought?), i.e. spurious attribute-related errors, and I have to nuke stage0-std. and I don't ever use <code>./x.py check</code></p>",
        "id": 183271123,
        "sender_full_name": "eddyb",
        "timestamp": 1576165401
    },
    {
        "content": "<p>if the <code>[tracked]</code> and <code>[untracked]</code> annoations for commandline args are correct, different modes should not be a problem</p>",
        "id": 183271240,
        "sender_full_name": "mw",
        "timestamp": 1576165449
    },
    {
        "content": "<p>but if used-attributes detection relies on certain queries to run, but incremental skips those queries...</p>",
        "id": 183271335,
        "sender_full_name": "mw",
        "timestamp": 1576165500
    },
    {
        "content": "<p>hmm. is that a sign that the used-attribute architecture needs to change?</p>",
        "id": 183271407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576165545
    },
    {
        "content": "<p>maybe my issue isn't beta changing but libstd changing in a way that breaks that incremental-unfriendly attribute tracking</p>",
        "id": 183271427,
        "sender_full_name": "eddyb",
        "timestamp": 1576165559
    },
    {
        "content": "<p>if it relies on side-effects: yes</p>",
        "id": 183271431,
        "sender_full_name": "mw",
        "timestamp": 1576165561
    },
    {
        "content": "<p>lets maybe spawn this converation off a parallel topic?</p>",
        "id": 183271505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576165587
    },
    {
        "content": "<p>at least it would need special handling in that case (like diagnostics)</p>",
        "id": 183271506,
        "sender_full_name": "mw",
        "timestamp": 1576165587
    },
    {
        "content": "<p>for longer term discussion</p>",
        "id": 183271523,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576165597
    },
    {
        "content": "<blockquote>\n<p>but if used-attributes detection relies on certain queries to run, but incremental skips those queries...</p>\n</blockquote>",
        "id": 183811849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576724559
    },
    {
        "content": "<p>its looking more and more to me like the architecture for the unused_attributes lint needs to change</p>",
        "id": 183811867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576724586
    },
    {
        "content": "<p>we track the set in a field <a href=\"https://github.com/rust-lang/rust/blob/master/src/libsyntax/lib.rs#L42\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/libsyntax/lib.rs#L42\">here</a> of a <code>Globals</code> struct that is kept in TLS <a href=\"https://github.com/rust-lang/rust/blob/c605199e89572e586a5f37bc698c48b6a10896fb/src/libsyntax/lib.rs#L74\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c605199e89572e586a5f37bc698c48b6a10896fb/src/libsyntax/lib.rs#L74\">here</a>. And then each time we need to add to the database or query it, we do a <a href=\"https://github.com/rust-lang/rust/blob/master/src/libsyntax/attr/mod.rs#L32\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/libsyntax/attr/mod.rs#L32\">TLS access</a></p>",
        "id": 183811917,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576724661
    },
    {
        "content": "<p>the data there is not per-cgu though, so we cannot readily save and reload the relevant portion as part of incremental compilation.</p>",
        "id": 183812015,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576724807
    },
    {
        "content": "<p>One thing I'm not clear on is why <em>any</em> <code>rustc_attribute</code> is being flagged as <code>Normal</code> rather than <code>Whitelisted</code></p>",
        "id": 183812033,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576724847
    },
    {
        "content": "<p>it is perhaps worth noting that the mark_used/mark_known attribute piece is something that might be \"relatively\" easy to remove based on past investigations, replacing by instead storing that information inline inside the Attribute (perhaps in an Arc, but I'm not sure even that is necessary -- I <em>think</em> we basically don't clone Attributes today). We'd need to walk the AST to detect unused attributes, but I think that's not too hard.</p>\n<p>I think the ideal might be to move everything past AST construction that looks at attributes to a query that we'd be able to check for being executed (e.g., has \"attribute(AttrId)\" run? if so, it's been used). This is a pretty invasive change though</p>",
        "id": 183812116,
        "sender_full_name": "simulacrum",
        "timestamp": 1576724983
    },
    {
        "content": "<blockquote>\n<p>One thing I'm not clear on is why <em>any</em> <code>rustc_attribute</code> is being flagged as <code>Normal</code> rather than <code>Whitelisted</code></p>\n</blockquote>\n<p>I don't think this matters ultimately, though it may point at an immediate fix. But my impression that the problem here is one that we could see in <em>any</em> Rust project, not just libstd/libcore, it's not a matter of rustc attributes or other types of attributes.</p>",
        "id": 183812169,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725025
    },
    {
        "content": "<blockquote>\n<p>my impression that the problem here is one that we could see in any Rust project</p>\n</blockquote>\n<p>I thought that too, but I have had difficulty constructing a case that <em>didn't</em> use some kind of <code>rustc_attribute</code>.</p>",
        "id": 183812188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576725090
    },
    {
        "content": "<p>(And IIRC, Normal just means that we might emit unused errors, which seems correct for any attribute, right? Regardless of it being rustc-specific?)</p>",
        "id": 183812191,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725117
    },
    {
        "content": "<p>I'll look into the <code>allow_internal_unstable</code> example provided on <a href=\"https://github.com/rust-lang/rust/issues/64764\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64764\">#64764</a> though</p>",
        "id": 183812232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576725128
    },
    {
        "content": "<p>I think it might be that we are far more eager about using non-rustc-specific attributes, i.e., we're almost guaranteed to mark them as used regardless of which queries run</p>",
        "id": 183812238,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725147
    },
    {
        "content": "<p>this is very much not true of at least some rustc attributes though I imagine (since they're only visited by e.g. typeck or so)</p>",
        "id": 183812243,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725162
    },
    {
        "content": "<blockquote>\n<p>(And IIRC, Normal just means that we might emit unused errors, which seems correct for any attribute, right? Regardless of it being rustc-specific?)</p>\n</blockquote>\n<p>Right; but it seems less risky to <del>omit</del> fail to emit unused errors for <code>rustc_attributes</code> given the fragility of the architecture, at least for these cases.</p>",
        "id": 183812246,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576725180
    },
    {
        "content": "<blockquote>\n<p>I think it might be that we are far more eager about using non-rustc-specific attributes, i.e., we're almost guaranteed to mark them as used regardless of which queries run</p>\n</blockquote>\n<p>yes this matches my own running hypothesis about my failure to replicate</p>",
        "id": 183812311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576725286
    },
    {
        "content": "<p>Sure -- I agree that we might be able to patch over the problem by whitelisting rustc-specific attrs for now</p>",
        "id": 183812561,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725646
    },
    {
        "content": "<p>but then at that point, is that buying us anything vs the approach taken in <a href=\"https://github.com/rust-lang/rust/issues/67101\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67101\">#67101</a> of just doing <code>#[allow(unused_attributes)]</code> at the relevant module(s) ?</p>",
        "id": 183812635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576725735
    },
    {
        "content": "<p>(it would buy us something if we were aware of <em>non</em>-<code>rustc_attribute</code> cases that <code>unused_attributes</code> readily catches. I guess custom attributes were the original impetus...)</p>",
        "id": 183812664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576725795
    },
    {
        "content": "<p>I think no.</p>",
        "id": 183812723,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725878
    },
    {
        "content": "<p>I would personally not be entirely against just giving up on unused attributes <em>entirely</em> for now</p>",
        "id": 183812731,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725890
    },
    {
        "content": "<p>Since it seems like in almost all cases if we're not using it we don't really want that to be a lint</p>",
        "id": 183812746,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725919
    },
    {
        "content": "<p>i.e., it's either a future compat hazard if we do start using it or is just a questionable choice to accept it</p>",
        "id": 183812757,
        "sender_full_name": "simulacrum",
        "timestamp": 1576725952
    },
    {
        "content": "<p>okay, yeah, I reviewed the history a bit in <a href=\"https://github.com/rust-lang/rfcs/pull/572\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/572\">RFC 572</a>.  I think we have reached the point where the <code>unused_attribute</code> lint is indeed not buying us anything at all.</p>",
        "id": 183813745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576727393
    },
    {
        "content": "<p>and therefore I too would be okay with the idea of just throwing out that functionality.</p>",
        "id": 183813789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576727417
    },
    {
        "content": "<p>though I should double-check behavior on syntax extensions that leverage secondary attributes as a way to signal info from within the input syntax to the macro</p>",
        "id": 183814077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576727944
    },
    {
        "content": "<p>I'd like to just explicitly list which attributes are allowed and where.</p>",
        "id": 183818243,
        "sender_full_name": "Zoxc",
        "timestamp": 1576733841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> I think that essentially mirrors what I said? Unless I'm misunderstanding -- though we could also <em>not</em> do that yet, but still delete the unused attributes lint.</p>",
        "id": 183843141,
        "sender_full_name": "simulacrum",
        "timestamp": 1576760950
    },
    {
        "content": "<p>is this an actual topic ...</p>",
        "id": 193052946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184583
    },
    {
        "content": "<p>okay yes it is</p>",
        "id": 193053046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184614
    },
    {
        "content": "<p>(but its better after an alpha rename. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> )</p>",
        "id": 193053119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184648
    },
    {
        "content": "<p>I'm just revisiting <a href=\"https://github.com/rust-lang/rust/issues/58633\" title=\"https://github.com/rust-lang/rust/issues/58633\">#58633</a> after seeing <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's <a href=\"https://github.com/rust-lang/rust/issues/58633#issuecomment-609471084\" title=\"https://github.com/rust-lang/rust/issues/58633#issuecomment-609471084\">comment from last night</a>:</p>\n<blockquote>\n<p>Should we just demote <code>unused_attributes</code> to warn-only at stage0?</p>\n<p>It's getting pretty boring to nuke <code>stage0-std</code> every time I rebase and something has changed in libstd (looks even more frequent nowadays), and I've heard people say they don't set <code>incremental = true</code> in <code>cargo.toml</code> because of these \"unused attribute\" errors, which is a shame.</p>\n</blockquote>",
        "id": 193053265,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184706
    },
    {
        "content": "<p>The only reason I can think of to <em>not</em> do what eddyb suggests (namely demoting <code>unused_attributes</code> to warn-only at stage0) is the question of whether we should be doing something more invasive to fix the problem. And the only reason to do something more invasive would be if we expect users <em>outside</em> of rustbuild to be running into this</p>",
        "id": 193053540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184812
    },
    {
        "content": "<p>but even then, we can <em>wait</em> until someone actually complains</p>",
        "id": 193053645,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184848
    },
    {
        "content": "<p>we should do something more invasive but the UX is getting worse</p>",
        "id": 193053694,
        "sender_full_name": "eddyb",
        "timestamp": 1586184867
    },
    {
        "content": "<p>warn-only would be temporary (famous last words) until we know the problem is fixed</p>",
        "id": 193053738,
        "sender_full_name": "eddyb",
        "timestamp": 1586184889
    },
    {
        "content": "<p>that is, the only drawback to doing what eddyb suggests is that it would demotivate the more invasive fix, but the <strong>wins</strong> from doing what eddyb suggests are so significant</p>",
        "id": 193053746,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184894
    },
    {
        "content": "<p>that we would be foolish to not do it</p>",
        "id": 193053754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586184899
    },
    {
        "content": "<p>and it's also probably trivial, depending how lint overriding works it could be exactly one line in one crate</p>",
        "id": 193053826,
        "sender_full_name": "eddyb",
        "timestamp": 1586184930
    },
    {
        "content": "<p>or a few lines in <code>src/bootstrap/bin/rustc.rs</code></p>",
        "id": 193053867,
        "sender_full_name": "eddyb",
        "timestamp": 1586184946
    },
    {
        "content": "<p>whereas fixing the incremental side of this... seems hard</p>",
        "id": 193053905,
        "sender_full_name": "eddyb",
        "timestamp": 1586184961
    },
    {
        "content": "<p>(and if we have to do it on a case-by-case basis, it has to be fixed in <em>beta</em>, because that's the only compiler used incrementally when building Rust)</p>",
        "id": 193054004,
        "sender_full_name": "eddyb",
        "timestamp": 1586184994
    },
    {
        "content": "<p>what do you mean by \"case by case\" basis?</p>",
        "id": 193054596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586185210
    },
    {
        "content": "<p>some of the comments on the issue looked like they were talking about changing the definition of the attribute to <code>Whitelisted</code> or something like that</p>",
        "id": 193054843,
        "sender_full_name": "eddyb",
        "timestamp": 1586185325
    },
    {
        "content": "<p>ah okay</p>",
        "id": 193057031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586186221
    },
    {
        "content": "<p>ugh I can't change <code>libstd</code> at all without hitting this</p>",
        "id": 193170675,
        "sender_full_name": "eddyb",
        "timestamp": 1586258040
    },
    {
        "content": "<p>/me is playing with moving <code>str</code> into the library</p>",
        "id": 193170725,
        "sender_full_name": "eddyb",
        "timestamp": 1586258049
    },
    {
        "content": "<blockquote>\n<p>= note: <code>-D unused-attributes</code> implied by <code>-D warnings</code></p>\n</blockquote>",
        "id": 193173905,
        "sender_full_name": "eddyb",
        "timestamp": 1586259817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <code>#![cfg_attr(bootstrap, warn(unused_attributes))]</code> still causes warnings to turn into errors :(</p>",
        "id": 193173980,
        "sender_full_name": "eddyb",
        "timestamp": 1586259848
    },
    {
        "content": "<p>because of what \"warn\" means there</p>",
        "id": 193173994,
        "sender_full_name": "eddyb",
        "timestamp": 1586259857
    },
    {
        "content": "<p>it's \"error\" with  \"deny warnings\"</p>",
        "id": 193174013,
        "sender_full_name": "eddyb",
        "timestamp": 1586259871
    },
    {
        "content": "<p>maybe I can do it through the CLI?</p>",
        "id": 193174034,
        "sender_full_name": "eddyb",
        "timestamp": 1586259893
    },
    {
        "content": "<p>If anything I'd expect us to allow them</p>",
        "id": 193174092,
        "sender_full_name": "simulacrum",
        "timestamp": 1586259934
    },
    {
        "content": "<p>You can edit rustbuild to do so, look in fn cargo in <a href=\"http://builder.rs\" title=\"http://builder.rs\">builder.rs</a></p>",
        "id": 193174132,
        "sender_full_name": "simulacrum",
        "timestamp": 1586259960
    },
    {
        "content": "<p>yeah testing that now</p>",
        "id": 193174215,
        "sender_full_name": "eddyb",
        "timestamp": 1586259984
    },
    {
        "content": "<p><code>-Wunused-attributes</code> doesn't work either <em>sigh</em></p>",
        "id": 193174398,
        "sender_full_name": "eddyb",
        "timestamp": 1586260092
    },
    {
        "content": "<p>All warnings are promoted to errors when <code>-Dwarnings</code> is used, even when you explicitly said <code>-Wunused-attributes</code>. Only <code>-Aunused-attributes</code> will work. <code>-Dwarnings</code> is enabled by default when <code>deny-warnings</code> is set to true in <code>config.toml</code>.</p>",
        "id": 193174653,
        "sender_full_name": "bjorn3",
        "timestamp": 1586260269
    },
    {
        "content": "<p>yeaaaaaah</p>",
        "id": 193174668,
        "sender_full_name": "eddyb",
        "timestamp": 1586260279
    },
    {
        "content": "<p>found that out the \"hard\" way</p>",
        "id": 193174685,
        "sender_full_name": "eddyb",
        "timestamp": 1586260287
    },
    {
        "content": "<p>Maybe add a <code>--cap-lint=unused-attributes=warn</code> to rustc to cap only specific lints?</p>",
        "id": 193174790,
        "sender_full_name": "bjorn3",
        "timestamp": 1586260342
    },
    {
        "content": "<p>OH OH</p>",
        "id": 193174807,
        "sender_full_name": "eddyb",
        "timestamp": 1586260353
    },
    {
        "content": "<p>I forgot about cap-lint</p>",
        "id": 193174811,
        "sender_full_name": "eddyb",
        "timestamp": 1586260356
    },
    {
        "content": "<p>Rustc only has <code>--cap-lints</code> to cap all lints. I was proposing to add a <code>--cap-lint</code> to only cap a single lint.</p>",
        "id": 193174932,
        "sender_full_name": "bjorn3",
        "timestamp": 1586260419
    },
    {
        "content": "<p>oh...</p>",
        "id": 193175097,
        "sender_full_name": "eddyb",
        "timestamp": 1586260512
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/70881\" title=\"https://github.com/rust-lang/rust/issues/70881\">#70881</a> FWIW</p>",
        "id": 193176001,
        "sender_full_name": "eddyb",
        "timestamp": 1586260884
    }
]