[
    {
        "content": "<p>Before I open an issue, am I wrong expecting that the output from using -Clto and -Clto=thin on a staticlib crate should be structurally identical? Because they currently aren't. The former creates one .o for all of the generated code, while the former creates a .o per crate, like without LTO.</p>",
        "id": 206530104,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1597106644
    },
    {
        "content": "<p>Thin lto produces the same number of object file outputs as there were imports</p>",
        "id": 206535206,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1597113579
    },
    {
        "content": "<p>What it does is inlining across objects then optimizes in parallel</p>",
        "id": 206535251,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1597113606
    },
    {
        "content": "<p>But in any case it's expected the structure is different</p>",
        "id": 206535267,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1597113653
    },
    {
        "content": "<p>I would have expected the same \"flattened\" output, with thin vs. flat being an implementation detail of how the compiler gets there.</p>",
        "id": 206536013,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1597114947
    },
    {
        "content": "<p>Note that I'm talking about staticlib, where the .a contains machine code, not llvm IR</p>",
        "id": 206536099,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1597115080
    },
    {
        "content": "<p>If its using lto, wouldn't the .a contain llir, by design?</p>",
        "id": 206554790,
        "sender_full_name": "Connor Horman",
        "timestamp": 1597137360
    },
    {
        "content": "<p>Not for staticlib crates</p>",
        "id": 206624372,
        "sender_full_name": "Mike Hommey",
        "timestamp": 1597176294
    }
]