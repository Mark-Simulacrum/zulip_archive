[
    {
        "content": "<p>I tried figuring this out from the source code, but it seems a bit unclear whether rustc can handle multiple versions of the same file, for uses such as rust-analyzer, where the compilation results and internal data structures for one version are partially shared with another version. Or is everything thrown away after each compilation?</p>",
        "id": 225436975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612657210
    },
    {
        "content": "<p>Are you talking about incremental compilation?</p>",
        "id": 225438554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612660080
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/query.html\">https://rustc-dev-guide.rust-lang.org/query.html</a></p>",
        "id": 225438595,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612660104
    },
    {
        "content": "<p>Yes, but more specifically about how rustc is able to represent the file and point to spans in the file when it has multiple versions of the same file in flight. I'm looking for example at <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/enum.FileName.html\"><code>FileName</code></a> which doesn't have what I would call a versioning system on its files, such as you can find in the LSP protocol for example. Or perhaps it uses virtual paths with a hash of some kind?</p>",
        "id": 225439654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612661737
    },
    {
        "content": "<p>rust-analyzer works on an entire crate graph, while a rustc invocation is currently limited to building only a single crate (although it can load arbitrarily many other crates as dependencies)</p>\n<p>rust-analyzer has a split between files (<code>FileId</code> for actual on-disk files, <code>HirFileId</code> for either real files or the results of macro expansions), and crates (<code>CrateId</code>, <code>DefMap</code>)</p>",
        "id": 225439708,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612661811
    },
    {
        "content": "<p>I'm not entirely sure what exactly you mean by \"multiple versions\" of the same file. Are you talking about applying different <code>#[cfg]</code>s to a file? Or about having 2 <code>mod</code>-declarations with the same <code>#[path]</code>?</p>",
        "id": 225439717,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612661860
    },
    {
        "content": "<p>As far as incremental compilation is concerned, files don't exist and only a single snapshot of a crate is ever stored on disk, so it can't run into problems here, I believe</p>",
        "id": 225439763,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612661939
    },
    {
        "content": "<p>I mean like if you use r-a to <code>cargo check</code> a crate, then make a change to the crate and <code>cargo check</code> again, ideally reusing most of the previous work (i.e. incremental compilation), meaning that you will have some spans pointing to outdated versions of a file</p>",
        "id": 225439765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612661944
    },
    {
        "content": "<p>Oh I see, you don't ever check files that aren't on disk?</p>",
        "id": 225439772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612661971
    },
    {
        "content": "<p>Cargo and rustc don't know about in-memory files when using rust-analyzer</p>",
        "id": 225439821,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612662010
    },
    {
        "content": "<p>They do when using RLS, because that implements its own rustc file loader that uses its VFS</p>",
        "id": 225439823,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612662046
    },
    {
        "content": "<p>So all the live feedback is 100% rust-analyzer code, not rustc?</p>",
        "id": 225439825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612662062
    },
    {
        "content": "<p>yeah</p>",
        "id": 225439829,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612662069
    },
    {
        "content": "<p>But I don't really understand how this solves any issues with spans. I believe spans are currently a (rather volatile) component of the query system, so any change in spans results in recomputation of the queries that access the span data.</p>",
        "id": 225439887,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612662206
    },
    {
        "content": "<p>The reason I ask is because I'm writing a similar kind of language server and I sometimes have the problem that spans are byte positions into a file that no longer matches the actual file on disk or the file in the user's editor so you can get drift or just completely wrong positions. I was curious what rustc et al are doing to address this kind of issue</p>",
        "id": 225439938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612662336
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 225439981,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612662413
    },
    {
        "content": "<p>rust-analyzer will not update <code>cargo check</code> diagnostics to point to the right line when you type</p>",
        "id": 225439987,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612662431
    },
    {
        "content": "<p>this is something it should probably start doing at some point, because <code>cargo check</code> can only be re-run on save, so you currently end up with diagnostics all over the place (and worse, suggestions that modify the wrong place)</p>",
        "id": 225440033,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612662499
    }
]