[
    {
        "content": "<p>There's been a lot of discussion of projection caching/deduplication spread across several github issues. I'm creating this thread as a central place for discussing it.</p>\n<p>PR <a href=\"https://github.com/rust-lang/rust/pull/91065\">https://github.com/rust-lang/rust/pull/91065</a> recently landed, so we now have a test for the original <code>EvaluatedToOkModuloRegions</code> incr comp fingerprint ICE. This should allow us to be more confident in making changes to projection caching/deduplication.</p>\n<p>There are two main oustanding issues: An enormous performance regression when compiling certain crates (<a href=\"https://github.com/rust-lang/rust/issues/89195\">https://github.com/rust-lang/rust/issues/89195</a>), and a spurious compilation failure (<a href=\"https://github.com/rust-lang/rust/issues/90662\">https://github.com/rust-lang/rust/issues/90662</a>)</p>\n<p>The spurious compilation failure is an issue with the 'speculative' evaluation of predicates that I introduced. There doesn't seem to be a good way to fix that, so I believe that we should remove it entirely.</p>\n<p>There are three open PRs that all perform some form of projection obligation de-duplication: <a href=\"https://github.com/rust-lang/rust/pull/84944\">https://github.com/rust-lang/rust/pull/84944</a>, <a href=\"https://github.com/rust-lang/rust/pull/90423\">https://github.com/rust-lang/rust/pull/90423</a>, <a href=\"https://github.com/rust-lang/rust/pull/91186\">https://github.com/rust-lang/rust/pull/91186</a>. They are all pretty similar, but differ in where exactly the deduplication is performed, and additional performance optimizations around duplicate checking.</p>\n<p>PR <a href=\"https://github.com/rust-lang/rust/pull/89831\">https://github.com/rust-lang/rust/pull/89831</a> re-introduces a different form of projection-related caching that I had previously removed. It also removes 'speculative evaluation', though I could split that out into another PR.</p>\n<p>I think we should decide on a preferred de-duplication strategy, and then merge the PR corresponding to that strategy. We can then attempt to remove speculative evaluation, and then look at re-introducing the 'projection completion cache' if it's still necessary for performance.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 264238105,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639007437
    },
    {
        "content": "<p>(I think the \"spurious compilation failure\" link is incorrect)</p>",
        "id": 264238282,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639007581
    },
    {
        "content": "<p>Thanks, fixed</p>",
        "id": 264238691,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639007932
    },
    {
        "content": "<p>Personally, I think we can start by merging <a href=\"https://github.com/rust-lang/rust/issues/90423\">#90423</a> as it is the smallest and is ready to go. After that, we can evaluate if deduplication in other places is still worthwhile.</p>",
        "id": 264238760,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639008002
    },
    {
        "content": "<p>Very interested to hear others' opinions though!</p>",
        "id": 264238885,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639008023
    },
    {
        "content": "<p>I have tested <a href=\"https://github.com/rust-lang/rust/issues/84944\">#84944</a> against the reproducers in <a href=\"https://github.com/rust-lang/rust/issues/74456\">#74456</a> and <a href=\"https://github.com/rust-lang/rust/issues/91598\">#91598</a> <br>\nI think the others should check if they solve those cases too.</p>",
        "id": 264239063,
        "sender_full_name": "The 8472",
        "timestamp": 1639008141
    },
    {
        "content": "<p>I'm having trouble testing <a href=\"https://github.com/rust-lang/rust/issues/74456\">https://github.com/rust-lang/rust/issues/74456</a> - one of the dependencies is parsing the rustc version, and is crashing with a stage1 compiler</p>",
        "id": 264239703,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639008549
    },
    {
        "content": "<p>Organizing the perf reports:</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/84944\">#84944</a> -&gt; <a href=\"https://perf.rust-lang.org/compare.html?start=2d11e257945c710d406e77903764ad4b7a52bda5&amp;end=cfbeb503faad5f1b68441b15f8f2660bbe95bfa8\">perf run</a> from May, most likely outdated. I suspect the diesel doc win was already usurped by another PR.<br>\n<a href=\"https://github.com/rust-lang/rust/issues/90423\">#90423</a> -&gt; <a href=\"https://perf.rust-lang.org/compare.html?start=0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c&amp;end=a01d1671ef29634b4dd21dcd4342a2981fabcdf7\">perf run</a><br>\n<a href=\"https://github.com/rust-lang/rust/issues/91186\">#91186</a> -&gt; <a href=\"https://perf.rust-lang.org/compare.html?start=dd549dcab404ec4c7d07b5a83aca5bdd7171138f&amp;end=1937cf62d0cb08000a49346c146830a7de817de3\">perf run</a><br>\n<a href=\"https://github.com/rust-lang/rust/issues/89831\">#89831</a> -&gt; <a href=\"https://perf.rust-lang.org/compare.html?start=5dab47dcd8267b8769421b46532414ec36d625e3&amp;end=c80bb240f9760b0b0ed2e6045d60508129d31f26\">perf run</a></p>",
        "id": 264239722,
        "sender_full_name": "The 8472",
        "timestamp": 1639008569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Projection.20caching.2Fdeduplication/near/264239703\">said</a>:</p>\n<blockquote>\n<p>I'm having trouble testing <a href=\"https://github.com/rust-lang/rust/issues/74456\">https://github.com/rust-lang/rust/issues/74456</a> - one of the dependencies is parsing the rustc version, and is crashing with a stage1 compiler</p>\n</blockquote>\n<p>Yeah, it required some minor patches to get it to work, but it still reproduced with them. Let's see if I still have them</p>",
        "id": 264239794,
        "sender_full_name": "The 8472",
        "timestamp": 1639008620
    },
    {
        "content": "<p>We should see if we can add <a href=\"https://github.com/rust-lang/rust/issues/91598\">https://github.com/rust-lang/rust/issues/91598</a> to rustc-perf, if we can get the compilation time back to the ~1 second it was before the regression</p>",
        "id": 264239879,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639008709
    },
    {
        "content": "<p>or a minimized version of it</p>",
        "id": 264239933,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639008726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Subject: [PATCH 2/2] make reproducer work\n\n---\n Cargo.toml          |  5 ++++-\n core-error/build.rs | 12 ++----------\n 2 files changed, 6 insertions(+), 11 deletions(-)\n\ndiff --git a/Cargo.toml b/Cargo.toml\nindex 0314eda..d82b998 100644\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -13,4 +13,7 @@ serde = { version = &quot;1.0.113&quot;, features = [&quot;derive&quot;] }\n futures = &quot;0.3.5&quot;\n\n [workspace]\n-members = [&quot;thiserror/impl&quot;, &quot;protocol/derive&quot;, &quot;protocol&quot;, &quot;protocol-mve-transport&quot;, &quot;core-error&quot;, &quot;thiserror&quot;, &quot;core-futures-io&quot;, &quot;erasure-traits&quot;]\n\\ No newline at end of file\n+members = [&quot;thiserror/impl&quot;, &quot;protocol/derive&quot;, &quot;protocol&quot;, &quot;protocol-mve-transport&quot;, &quot;core-error&quot;, &quot;thiserror&quot;, &quot;core-futures-io&quot;, &quot;erasure-traits&quot;]\n+\n+[patch.crates-io]\n+core-error = { path = &quot;./core-error&quot; }\n\\ No newline at end of file\ndiff --git a/core-error/build.rs b/core-error/build.rs\nindex 8673872..b1dbbf7 100644\n--- a/core-error/build.rs\n+++ b/core-error/build.rs\n@@ -1,13 +1,5 @@\n-extern crate version_check;\n-\n fn main() {\n-    let (version, _channel, _date) = version_check::triple().expect(&quot;Rustc to give us its version&quot;);\n-\n-    for i in 0..65536 {\n-        if version.at_least(&amp;format!(&quot;1.{}.0&quot;, i)) {\n-            println!(&quot;cargo:rustc-cfg=rustc_1_{}_0&quot;, i)\n-        } else {\n-            break;\n-        }\n+    for i in 0..58 {\n+        println!(&quot;cargo:rustc-cfg=rustc_1_{}_0&quot;, i);\n     }\n }\n--\n2.33.1\n</code></pre></div>",
        "id": 264240086,
        "sender_full_name": "The 8472",
        "timestamp": 1639008874
    },
    {
        "content": "<p>I think the issue was that the version parser doesn't like the -dev suffix on local builds.</p>",
        "id": 264240175,
        "sender_full_name": "The 8472",
        "timestamp": 1639008952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Projection.20caching.2Fdeduplication/near/264239879\">said</a>:</p>\n<blockquote>\n<p>We should see if we can add <a href=\"https://github.com/rust-lang/rust/issues/91598\">https://github.com/rust-lang/rust/issues/91598</a> to rustc-perf, if we can get the compilation time back to the ~1 second it was before the regression</p>\n</blockquote>\n<p>Anything that takes &gt;5s is probably too long, but I'm guessing removing some of the type complexity to minimize that test is pretty straightforward, I'd be happy to accept a PR adding it. We can probably get away with something a bit longer in the short-term but it would be good to make that very short :)</p>",
        "id": 264240380,
        "sender_full_name": "simulacrum",
        "timestamp": 1639009097
    },
    {
        "content": "<p>My PR <a href=\"https://github.com/rust-lang/rust/pull/90423\">https://github.com/rust-lang/rust/pull/90423</a> definitely helps with <a href=\"https://github.com/rust-lang/rust/issues/91598\">https://github.com/rust-lang/rust/issues/91598</a> - it now compiles in ~20 seconds (excluding dependencies)</p>",
        "id": 264240397,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009114
    },
    {
        "content": "<p>which is not nearly as good as it was before, but is better than the &gt; 5 minutes and &gt; 7GB of memory that it takes for me without the patch</p>",
        "id": 264240422,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009139
    },
    {
        "content": "<p>So, I think merging <a href=\"https://github.com/rust-lang/rust/pull/90423\">https://github.com/rust-lang/rust/pull/90423</a> to start could be a good idea</p>",
        "id": 264240468,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009192
    },
    {
        "content": "<p>I think one of the other deduplication PRs did a more complicated deduplication strategy (an explicit check and optimization for a case with a small number of predicates)</p>",
        "id": 264240539,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009221
    },
    {
        "content": "<p>PR <a href=\"https://github.com/rust-lang/rust/pull/91186\">https://github.com/rust-lang/rust/pull/91186</a> does that</p>",
        "id": 264240559,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009247
    },
    {
        "content": "<p>that PR appears to add the deduplication in pretty much the same spot as mine</p>",
        "id": 264240687,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009347
    },
    {
        "content": "<p>No, it also deduplicates the whole vec that's being extended, not just the values that are being added. I have seen cases where that function would try to add only duplicates to an obligation vec containing elements. I haven't checked which cases drive the compile time explosions though.</p>",
        "id": 264240713,
        "sender_full_name": "The 8472",
        "timestamp": 1639009377
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 264240726,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009391
    },
    {
        "content": "<p>the best-case performance improvement is larger (6.7% vs 6.0%). Should we merge it instead of mine?</p>",
        "id": 264240744,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639009417
    },
    {
        "content": "<p>Well, it has the downside that it may end up recomputing the hashset for deduplication more often. So there could in principle be some pathological cases where it negatively impacts compile times that don't happen to be covered by perf rlo.<br>\nI have tried to minimize the impact of such a scenario by amortizing the deduplication (running on every vec expansion, i.e. powers of two growth).<br>\nThat still leaves one possible pathological case where something tries to add a single duplicate item at a time many times.</p>\n<p>A better solution is possible but it requires wider changes. Basically replacing the <code>Vec</code> with an ordered set.</p>",
        "id": 264241045,
        "sender_full_name": "The 8472",
        "timestamp": 1639009634
    },
    {
        "content": "<p>I think the first best step is to merge <a href=\"https://github.com/rust-lang/rust/issues/90423\">#90423</a></p>",
        "id": 264248958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639016773
    },
    {
        "content": "<p>Then we can see if removing the extra deduplication as <a href=\"https://github.com/rust-lang/rust/issues/84944\">#84944</a> helps</p>",
        "id": 264249007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639016862
    },
    {
        "content": "<p>Then also see how <em>only</em> removing speculative execution looks.</p>",
        "id": 264249066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639016934
    },
    {
        "content": "<p>(Since that should fix the regressions)</p>",
        "id": 264249073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639016946
    },
    {
        "content": "<p>Those together should fix the regressions in both behavior and moderately in performance</p>",
        "id": 264249085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639016977
    },
    {
        "content": "<p>We can then try to win back more perf with completion, etc.</p>",
        "id": 264249095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639016997
    },
    {
        "content": "<p>PR <a href=\"https://github.com/rust-lang/rust/pull/90423\">https://github.com/rust-lang/rust/pull/90423</a> has been merged - it turned out to only cause a very small regression</p>",
        "id": 264638694,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639336294
    },
    {
        "content": "<p>Any way we can get one of the one of the  perf regressions test cases (<a href=\"https://github.com/rust-lang/rust/issues/91598\">#91598</a>/#89195/#89601/#91830) as a perf benchmark? Also...should those issued be closed?</p>",
        "id": 264740688,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639416494
    },
    {
        "content": "<p>Has the reproducer in <a href=\"https://github.com/rust-lang/rust/issues/74456\">#74456</a> been checked?</p>",
        "id": 264749755,
        "sender_full_name": "The 8472",
        "timestamp": 1639420036
    },
    {
        "content": "<p>I don't know</p>",
        "id": 264757512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639423755
    },
    {
        "content": "<p>Ran the testcase from <a href=\"https://github.com/rust-lang/rust/issues/74456\">#74456</a> against master, memory or compile times don't explode anymore.</p>",
        "id": 265225577,
        "sender_full_name": "The 8472",
        "timestamp": 1639691980
    }
]