[
    {
        "content": "<p>I've noticed this sequence happening a lot in <code>find_library_crate</code>.</p>\n<ul>\n<li>We're searching for the file for <code>std</code>.</li>\n<li>There are two candidates in the directory: <code>libstd_detect-8d6701fb958915ad.rlib</code>, <code>libstd-f3ab5b1dea981f17.rlib</code>.</li>\n<li>The first one is clearly not a match, but the search just checks for the prefix <code>libstd</code> and the suffix <code>.rlib</code> and decides they are both candidates.</li>\n<li>We read metadata for the first one, see that it's a mismatch, and ignore it.</li>\n<li>We read metadata for the second one and succeed.</li>\n</ul>",
        "id": 270651989,
        "sender_full_name": "nnethercote",
        "timestamp": 1643936269
    },
    {
        "content": "<p>I want to avoid reading the <code>libstd_detect</code> rlib, but I'm having trouble seeing how to do it safely. Usually, the bit after the <code>libstd</code> should have the form <code>-&lt;hex-id&gt;</code>, but that <code>-&lt;hex-id&gt;</code> comes from the <code>--extra-filename</code> option and so could take any form.</p>",
        "id": 270652329,
        "sender_full_name": "nnethercote",
        "timestamp": 1643936477
    },
    {
        "content": "<p>Given that most crates use <code>std</code>, AFAICT we're unnecessarily reading <code>libstd_detect-$ID.rlib</code> for most crates, and it's a 400KB file on my Linux box.</p>",
        "id": 270653479,
        "sender_full_name": "nnethercote",
        "timestamp": 1643937356
    },
    {
        "content": "<p>So that seems like a non-trivial amount of wasted I/O</p>",
        "id": 270653537,
        "sender_full_name": "nnethercote",
        "timestamp": 1643937376
    },
    {
        "content": "<p>Instead of checking for a prefix match, could it collect the leading characters <code>[a-z_]+</code> of the filename, and then compare for an equality match?</p>",
        "id": 270653818,
        "sender_full_name": "Eric Huss",
        "timestamp": 1643937620
    },
    {
        "content": "<p>potentially 'easy' option: could we just rename libstd_detect to not have a libstd prefix?</p>",
        "id": 270654412,
        "sender_full_name": "simulacrum",
        "timestamp": 1643938046
    },
    {
        "content": "<p>I guess it's a <a href=\"http://crates.io\">crates.io</a> library (<a href=\"https://docs.rs/std_detect/latest/std_detect/\">https://docs.rs/std_detect/latest/std_detect/</a>) but I <em>think</em> Cargo supports arbitrarily naming the actual rlib with a [lib] section, regardless of the package name?</p>",
        "id": 270654510,
        "sender_full_name": "simulacrum",
        "timestamp": 1643938124
    },
    {
        "content": "<p>That might not be a great solution in general (e.g., I imagine there's a similarish problem with serde_{json,derive,...} and serde, but it seems like it might work OK for this specific case</p>",
        "id": 270654608,
        "sender_full_name": "simulacrum",
        "timestamp": 1643938157
    },
    {
        "content": "<p>I'd certainly prefer a general solution if possible. But the fact that <code>--extra-filename</code> can have anything in it (even if that more or less never happens in practice) makes it hard <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 270655446,
        "sender_full_name": "nnethercote",
        "timestamp": 1643938674
    },
    {
        "content": "<p>TIL <code>rustc -Cextra-filename=foobar a.rs</code> produces an executable called <code>afoobar</code>.</p>",
        "id": 270655754,
        "sender_full_name": "nnethercote",
        "timestamp": 1643938759
    },
    {
        "content": "<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span>  Oh, I thought the <code>-</code> was added by rustc. That indeed adds a wrinkle.</p>",
        "id": 270655883,
        "sender_full_name": "Eric Huss",
        "timestamp": 1643938808
    },
    {
        "content": "<p><code>libstd</code> is actually an unusual case. Normally we're looking for a crate name + suffix combination like <code>addr2line-176a3e84acbe6734</code>, and it's an exact match (modulo the <code>lib</code> at start and <code>.rlib</code> at the end)</p>",
        "id": 270655910,
        "sender_full_name": "nnethercote",
        "timestamp": 1643938833
    },
    {
        "content": "<p>Yeah, I see in Cargo's output stuff like <code>-C extra-filename=-48fd7f9efcc4e9e5</code></p>",
        "id": 270655951,
        "sender_full_name": "nnethercote",
        "timestamp": 1643938869
    },
    {
        "content": "<p>Even doing something ultra-dumb but simple, like hardwiring it to skip over <code>std_detect</code> when searching for <code>std</code>, possibly falls down in the obscure corner case where someone uses <code>-C extra-filename=_detect-ABCD</code>...</p>",
        "id": 270656134,
        "sender_full_name": "nnethercote",
        "timestamp": 1643939026
    },
    {
        "content": "<p>I tried exactly that hardwired check. On <code>helloworld</code>, which is affected, it reduced the number of instructions executed by a mere ~20,000 instructions, out of about 45M.</p>",
        "id": 270658910,
        "sender_full_name": "nnethercote",
        "timestamp": 1643940945
    },
    {
        "content": "<p>The comments in <code>locator.rs</code> say \"reading metadata is quite slow\" but this result suggests otherwise. 20,000 instructions to read metadata from a 400KB rlib seems remarkably little to me.</p>",
        "id": 270659013,
        "sender_full_name": "nnethercote",
        "timestamp": 1643941009
    },
    {
        "content": "<p>Maybe try an exact match first and only look at the prefix ones if that doesn't work out?</p>",
        "id": 270683489,
        "sender_full_name": "The 8472",
        "timestamp": 1643964007
    },
    {
        "content": "<p>We use <code>mmap</code> not <code>read</code> for getting the crate metadata, so only a couple of pages worth of data is actually read. It needs to read the ar archive member headers until <code>lib.rmeta</code>, the header of the <code>lib.rmeta</code> file to check the rustc version and get the crate root offset and then the crate root to get the actual Svh.</p>",
        "id": 270703998,
        "sender_full_name": "bjorn3",
        "timestamp": 1643975670
    },
    {
        "content": "<p>the mmap manipulation costs are not trivial in some circumstances. UI and rustdoc tests spawn a lot of shortlived rustc instances and the mmap and process teardown spend a few percent in the kernel just doing memory stuff. So if we could avoid mmaping the rlib in the first place it could still save some overhead in those scenarios. For big-and-slow compilation scenarios like rustc itself it won't make much of a difference though.</p>",
        "id": 270705006,
        "sender_full_name": "The 8472",
        "timestamp": 1643976249
    },
    {
        "content": "<p>Put the library names into a vector and sort them with a predicate saying how likely entries are to match what's being looked for?</p>",
        "id": 270839271,
        "sender_full_name": "nagisa",
        "timestamp": 1644082606
    },
    {
        "content": "<p>Faulting the pages into memory can be quite expensive, files more so, even if its just a few.</p>",
        "id": 270839361,
        "sender_full_name": "nagisa",
        "timestamp": 1644082689
    },
    {
        "content": "<p>but since this is only happening for 1 crate once per compilation, the overhead is probably quite minimal overall.</p>",
        "id": 270839373,
        "sender_full_name": "nagisa",
        "timestamp": 1644082717
    }
]