[
    {
        "content": "<p>Hello! There's been some discussion on <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a> about introducing <code>tracing</code> into Chalk, which would make it transitive dependency of <code>rustc</code>, I believe. I also believe that this might require a MCP for the introduction of new/different logging dependency. Am I correct? Is the introduction of tracing be something that y'all would be opposed to?</p>\n<p>Regardless if an MCP is required, I'd like to put together a small PR (with the intention of discarding it!) where <code>log</code> is replaced with <code>tracing</code> in rustc. There's been a few situations where a drop-in replacement of <code>log</code> with <code>tracing</code> resulted in a non-trivial performance improvements. Off the top of my head, Eliza Weisman observed that replacing <code>log</code> with <code>tracing</code> in <a href=\"https://github.com/hyperium/h2\">h2</a> for <em>fully disabled log statements</em> yielded a p99 performance improvement of 2 ms; dropping from 3ms to 1ms. I'm not sure I expect something as dramatic as this in <code>rustc</code> (given H2 is an interactive system and <code>rustc</code> is batch-optimized...), but measuring the compiler performance impact might be useful.</p>",
        "id": 198545690,
        "sender_full_name": "David Barsky",
        "timestamp": 1590257200
    },
    {
        "content": "<p>(Measuring and accepting a change in rustc might allow for less work in Chalk to feature-flag out some of tracing's more advanced macros _and_—this is a big maybe—yield performance improvements in <code>rustc</code>.)</p>",
        "id": 198545721,
        "sender_full_name": "David Barsky",
        "timestamp": 1590257270
    },
    {
        "content": "<p>It's worth noting that with some (roughly) planned refactoring to Chalk crate structure, tracing probably won't even be a transitive dependency of <code>librustc_middle</code>, only <code>librustc_traits</code></p>",
        "id": 198546343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590258441
    },
    {
        "content": "<p>Oh, good to hear. I now realize you mentioned this yesterday, but I didn't process it. Thanks for the correction and sorry for making you repeat it :)</p>",
        "id": 198547147,
        "sender_full_name": "David Barsky",
        "timestamp": 1590259747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> one thing to note is that, in rustc anyway, I think logging is compiled out in release builds</p>",
        "id": 198798658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590516077
    },
    {
        "content": "<p>in particular, if debug-assertions is not enabled</p>",
        "id": 198798685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590516087
    },
    {
        "content": "<p>ah, then this will be a no-op. excellent!</p>",
        "id": 198798732,
        "sender_full_name": "David Barsky",
        "timestamp": 1590516109
    },
    {
        "content": "<p>I would love to have <code>tracing</code> in rustc instead of plain <code>log</code></p>",
        "id": 198799249,
        "sender_full_name": "oli",
        "timestamp": 1590516361
    },
    {
        "content": "<p>if we can get more structured logs out, I'm a fan</p>",
        "id": 198799328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590516382
    },
    {
        "content": "<p>I mean... as already stated, we can start with a drop-in replacement and then slowly play with the advanced features</p>",
        "id": 198799410,
        "sender_full_name": "oli",
        "timestamp": 1590516433
    },
    {
        "content": "<p>Okay, to make sure I understand the conclusions:</p>\n<ul>\n<li>this <em>won't</em> require feature-flagging out advanced <code>tracing</code> features in Chalk.</li>\n<li>adding <code>tracing</code> to rustc <em>will</em> require an MCP?</li>\n</ul>",
        "id": 198803565,
        "sender_full_name": "David Barsky",
        "timestamp": 1590518480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Tracing.20in.20rustc/near/198798658\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"198819\">David Barsky</span> one thing to note is that, in rustc anyway, I think logging is compiled out in release builds</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>$ echo &quot;fn main() {}&quot; | RUSTC_LOG=trace rustc -\n[INFO  rustc_metadata::creader] resolving crate `std`\n[INFO  rustc_metadata::creader] falling back to a load\n[INFO  rustc_metadata::locator] lib candidate: /home/bjorn/.rustup/toolchains/nightly-2020-05-25-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-265ff16c7b6b86f9.rlib\n[...]\n[INFO  rustc_codegen_ssa::back::link] linker stderr:\n\n[INFO  rustc_codegen_ssa::back::link] linker stdout:\n</code></pre></div>\n\n\n<p>Info and higher are enabled when debug assertions are disables: <a href=\"https://github.com/rust-lang/rust/blob/7b73d14b0b35e7b4f79f2d71dc1bbbab31698288/src/librustc_hir/Cargo.toml#L21\">https://github.com/rust-lang/rust/blob/7b73d14b0b35e7b4f79f2d71dc1bbbab31698288/src/librustc_hir/Cargo.toml#L21</a></p>",
        "id": 198805796,
        "sender_full_name": "bjorn3",
        "timestamp": 1590519471
    },
    {
        "content": "<p>With <a href=\"https://github.com/rust-lang/rust/issues/75143\">#75143</a> merged does anything else need to be done before I can start replacing <code>debug</code> with <code>#[instrument]</code> where it's beneficial?</p>",
        "id": 212739798,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602186059
    },
    {
        "content": "<p>Benchmark it on a high traffic function</p>",
        "id": 212739987,
        "sender_full_name": "oli",
        "timestamp": 1602186166
    },
    {
        "content": "<p>Other than hypothetical perf problems, we can go crazy with tracing now</p>",
        "id": 212740049,
        "sender_full_name": "oli",
        "timestamp": 1602186212
    },
    {
        "content": "<p>Well. I'm thinking about trait solving, which should be good for perf testing.</p>",
        "id": 212740142,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602186246
    },
    {
        "content": "<p>One thing to consider is also whether to use spans or to use events, as we didn't have this distinction before. I don't know because I haven't tested, but I would assume spans are more expensive</p>",
        "id": 212742058,
        "sender_full_name": "oli",
        "timestamp": 1602187304
    },
    {
        "content": "<p>[knocks on wood] spans shouldn't be more expensive than events; they're almost the same underlying structure.</p>",
        "id": 212971459,
        "sender_full_name": "David Barsky",
        "timestamp": 1602433216
    },
    {
        "content": "<p>i'd maybe hold of on going wild with <code>#[instrument]</code> until <a href=\"https://github.com/tokio-rs/tracing/pull/989\">https://github.com/tokio-rs/tracing/pull/989</a> lands, if only to reduce refactoring churn</p>",
        "id": 212971481,
        "sender_full_name": "David Barsky",
        "timestamp": 1602433305
    },
    {
        "content": "<p>Oh nice, that'll make things easier</p>",
        "id": 212973210,
        "sender_full_name": "oli",
        "timestamp": 1602436298
    }
]