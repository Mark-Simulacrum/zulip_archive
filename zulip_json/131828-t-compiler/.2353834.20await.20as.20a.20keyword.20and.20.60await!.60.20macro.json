[
    {
        "content": "<p>o/</p>",
        "id": 133910620,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536869805
    },
    {
        "content": "<p>woah weird</p>",
        "id": 133910628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869812
    },
    {
        "content": "<p>for some reason I saw my message twice</p>",
        "id": 133910631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869816
    },
    {
        "content": "<p>but I guess there was only one since when I deleted it we had nothing</p>",
        "id": 133910637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869822
    },
    {
        "content": "<p>ok, so ...</p>",
        "id": 133910640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869824
    },
    {
        "content": "<p>somebody was claiming I know something :P</p>",
        "id": 133910666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869857
    },
    {
        "content": "<p>actually, what I implemented was not quite the same as what you want to do</p>",
        "id": 133910681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869875
    },
    {
        "content": "<p>right now, what happens on 2018 if you use <code>await</code>? I'm guessing you get an error?</p>",
        "id": 133910741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869897
    },
    {
        "content": "<p>that..seems not to be true</p>",
        "id": 133910779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536869946
    },
    {
        "content": "<p>uhh can you make an example today? I tried this but I get weird errors :)</p>",
        "id": 133910896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(await_macro)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(async_await)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(generators)]</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">await</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133910897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870042
    },
    {
        "content": "<p>e.g. I don't know what future crate to import</p>",
        "id": 133910906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870055
    },
    {
        "content": "<p>Right now you get no errors</p>",
        "id": 133911027,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870170
    },
    {
        "content": "<p>And you don't have to use futures at all</p>",
        "id": 133911042,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870179
    },
    {
        "content": "<p>it's just <code>async fn bar() -&gt; u32</code></p>",
        "id": 133911054,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870186
    },
    {
        "content": "<p>You also don't need <code>feature(generators)</code></p>",
        "id": 133911089,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870219
    },
    {
        "content": "<p>oh right</p>",
        "id": 133911138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870244
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?gist=73798a772604624f7afb651d3e885c0a&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=73798a772604624f7afb651d3e885c0a&amp;version=nightly&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=73798a772604624f7afb651d3e885c0a&amp;version=nightly&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 133911148,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(async_await, await_macro, futures_api)]</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">await</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 133911155,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870262
    },
    {
        "content": "<blockquote>\n<p>it's just <code>async fn bar() -&gt; u32</code></p>\n</blockquote>\n<p>I still have mixed feelings about that :P (not relevant, I know)</p>",
        "id": 133911156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870264
    },
    {
        "content": "<p>ok, so, this continues to work in Rust 2018</p>",
        "id": 133911169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870282
    },
    {
        "content": "<p>for...some reason</p>",
        "id": 133911174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870288
    },
    {
        "content": "<p><code>async fn bar() -&gt; impl Future&lt;Output = u32&gt;</code> &lt;- so noisy</p>",
        "id": 133911180,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870298
    },
    {
        "content": "<p>anyways</p>",
        "id": 133911185,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870305
    },
    {
        "content": "<p>(man, I am always confused by how our parser handles keywords)</p>",
        "id": 133911192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870312
    },
    {
        "content": "<p>so one question that I don't know is: why does <code>try</code> error on Rust 2018?</p>",
        "id": 133911197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870322
    },
    {
        "content": "<p>it is kind of surprising to me that one works and one doesn't</p>",
        "id": 133911274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870379
    },
    {
        "content": "<blockquote>\n<p><code>async fn bar() -&gt; impl Future&lt;Output = u32&gt;</code> &lt;- so noisy</p>\n</blockquote>\n<p>yep...mixed feelings I said, and I meant it :)</p>",
        "id": 133911299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870414
    },
    {
        "content": "<p>anyways, if you don't know what's going on, I'm happy to investigate more before bugging you ;)</p>",
        "id": 133911322,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870450
    },
    {
        "content": "<p>oh</p>",
        "id": 133911326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870462
    },
    {
        "content": "<p>centril just mentioned you might know what to do because you implemented this for try!</p>",
        "id": 133911327,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870462
    },
    {
        "content": "<p>the reason is simple</p>",
        "id": 133911328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870464
    },
    {
        "content": "<p>await is not a keyword at all</p>",
        "id": 133911330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870466
    },
    {
        "content": "<p>in Rust 2018</p>",
        "id": 133911331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870470
    },
    {
        "content": "<p>only async is</p>",
        "id": 133911333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870472
    },
    {
        "content": "<p>yup</p>",
        "id": 133911338,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870475
    },
    {
        "content": "<p>ok ok</p>",
        "id": 133911340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870479
    },
    {
        "content": "<p>and we want to make it a keyword</p>",
        "id": 133911342,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870482
    },
    {
        "content": "<p><em>so</em></p>",
        "id": 133911343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870482
    },
    {
        "content": "<p>there are sort of two parts</p>",
        "id": 133911381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870485
    },
    {
        "content": "<p>but allow it if <code>await_macro</code> is enabled</p>",
        "id": 133911387,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870492
    },
    {
        "content": "<p>so I think what you want to do is probably this:</p>",
        "id": 133911391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870503
    },
    {
        "content": "<ul>\n<li>make it a (conditional) keyword</li>\n</ul>",
        "id": 133911394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870507
    },
    {
        "content": "<ul>\n<li>in the parser, if you see this keyword followed by <code>!</code>, convert it into a macro</li>\n</ul>",
        "id": 133911400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870517
    },
    {
        "content": "<ul>\n<li>add some code in <code>ast_validation</code> that looks for invocations of the macro <code>await</code></li>\n</ul>",
        "id": 133911406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870526
    },
    {
        "content": "<ul>\n<li>and checks the feature-gate</li>\n</ul>",
        "id": 133911410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870532
    },
    {
        "content": "<p>something roughly like that</p>",
        "id": 133911413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870542
    },
    {
        "content": "<p>(e.g., the parser doesn't know about the feature gates, so it can't check on its own)</p>",
        "id": 133911430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870572
    },
    {
        "content": "<p>sg</p>",
        "id": 133911431,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870573
    },
    {
        "content": "<p>at least I don't <em>think</em> it does</p>",
        "id": 133911434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870580
    },
    {
        "content": "<p>it definitely didn't used to</p>",
        "id": 133911440,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870590
    },
    {
        "content": "<p>besides, this will yield better errors I think</p>",
        "id": 133911444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870598
    },
    {
        "content": "<p>cool, thanks for the pointer!</p>",
        "id": 133911492,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536870606
    },
    {
        "content": "<p>np</p>",
        "id": 133911501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870621
    },
    {
        "content": "<p>let me know if you hit any other problems...</p>",
        "id": 133911502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536870625
    },
    {
        "content": "<p>std::await!</p>",
        "id": 133918425,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879232
    },
    {
        "content": "<p>:(</p>",
        "id": 133918429,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879240
    },
    {
        "content": "<p>I guess we can just break it for now?</p>",
        "id": 133918470,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879249
    },
    {
        "content": "<p>also <code>use std::await;</code></p>",
        "id": 133918498,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879339
    },
    {
        "content": "<p><code>use std::await as foo;</code></p>",
        "id": 133918501,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879348
    },
    {
        "content": "<p>ick, then we'd break <a href=\"https://github.com/tokio-rs/tokio/blob/master/tokio-async-await/src/lib.rs#L80\" target=\"_blank\" title=\"https://github.com/tokio-rs/tokio/blob/master/tokio-async-await/src/lib.rs#L80\">https://github.com/tokio-rs/tokio/blob/master/tokio-async-await/src/lib.rs#L80</a></p>",
        "id": 133918612,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879503
    },
    {
        "content": "<p>so we can't do that :/</p>",
        "id": 133918615,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879508
    },
    {
        "content": "<p>One option would be to not treat it as a keyword at all</p>",
        "id": 133918628,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879550
    },
    {
        "content": "<p>and just error if we see it in the AST</p>",
        "id": 133918630,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879557
    },
    {
        "content": "<p>but then we won't get the edition transition lint</p>",
        "id": 133918633,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879565
    },
    {
        "content": "<p>:(</p>",
        "id": 133918636,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 133918644,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1536879593
    },
    {
        "content": "<p>wait, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>, what is <code>std::await</code>?</p>",
        "id": 133956367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536935463
    },
    {
        "content": "<p>oic</p>",
        "id": 133956384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536935478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> we could write our own lint tailored for <code>await</code> I guess</p>",
        "id": 133956416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536935517
    },
    {
        "content": "<p>what a mess</p>",
        "id": 133956417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536935518
    },
    {
        "content": "<p>can't we come up with some other name for the macro? :P</p>",
        "id": 133956453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536935524
    },
    {
        "content": "<p><code>r#await</code>..boom, done. :P</p>",
        "id": 133956460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536935530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> did you ever decide how to proceed here?</p>",
        "id": 133972774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536951871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I imagine we could special case and permit <code>await</code> in paths as well</p>",
        "id": 133972793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536951896
    },
    {
        "content": "<p>and filter for it</p>",
        "id": 133972800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536951902
    },
    {
        "content": "<p>same way that we were talking about doing for macros</p>",
        "id": 133972811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536951910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> are you going to be able to look into this after all?</p>",
        "id": 134338337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537478926
    },
    {
        "content": "<p>Sure, I can do this</p>",
        "id": 134340080,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1537480617
    }
]