[
    {
        "content": "<p>I won't be able to take part in todays meeting. I'll read through the log afterwards, feel free to assign stuff to me XD I'll look at it on tuesday at the latest</p>",
        "id": 163640679,
        "sender_full_name": "oli",
        "timestamp": 1555585217
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 163642358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555587093
    },
    {
        "content": "<p>as a reminder to the rest of <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> , we'll be having our weekly meeting in this topic, starting in about 2.5 hours.</p>",
        "id": 163642372,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555587114
    },
    {
        "content": "<p>I will be doing <a href=\"#narrow/stream/131828-t-compiler/topic/pre-meeting.20triage.202019-04-18.20.2354818/near/163642347\" title=\"#narrow/stream/131828-t-compiler/topic/pre-meeting.20triage.202019-04-18.20.2354818/near/163642347\">pre-meeting triage</a> in parallel topic.</p>",
        "id": 163642423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555587143
    },
    {
        "content": "<p>What working groups are checking in today?</p>",
        "id": 163643544,
        "sender_full_name": "davidtwco",
        "timestamp": 1555588089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> funny you ask that; I spent a little while trying to find that table that I think you made showing an ad-hoc schedule</p>",
        "id": 163646559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555590795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> but I could not find it and decided it was more important to move forward with pre-triage</p>",
        "id": 163646583,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555590809
    },
    {
        "content": "<p>if you can find it and point me at it (and then I'll add it to the agenda at <a href=\"https://github.com/rust-lang/rust/issues/54818\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54818\">#54818</a>) that would be great</p>",
        "id": 163646597,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555590834
    },
    {
        "content": "<p>I only ask so that the people have a chance to prepare something, here's <a href=\"https://github.com/rust-lang/compiler-team/blob/master/about/triage-meeting.md#working-group-check-in\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/blob/master/about/triage-meeting.md#working-group-check-in\">the schedule</a>.</p>",
        "id": 163647126,
        "sender_full_name": "davidtwco",
        "timestamp": 1555591252
    },
    {
        "content": "<p>of course; that is the same  reason I wanted to look it up</p>",
        "id": 163647308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555591389
    },
    {
        "content": "<p>so okay, schedule says wg-llvm and wg-async-await</p>",
        "id": 163647336,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555591414
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> , do you think you will be around to provide a check-in regarding what's going on with WG-llvm?</p>",
        "id": 163647359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555591440
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> has said in the past that the rustc meeting time is not good for them; will <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> be available to provide a check-in from the WG-async-await ?</p>",
        "id": 163647449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555591487
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span></p>",
        "id": 163653782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596080
    },
    {
        "content": "<p>another week, another case of felix not finishing all the pre-triage he wanted.</p>",
        "id": 163653863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596124
    },
    {
        "content": "<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> has said in the past that the rustc meeting time is not good for them; will <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> be available to provide a check-in from the WG-async-await ?</p>\n</blockquote>\n<p>yep</p>",
        "id": 163653936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555596163
    },
    {
        "content": "<p>So there are a lot of P-high issues</p>",
        "id": 163653946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596172
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+label%3AP-high++sort%3Aupdated-desc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+label%3AP-high++sort%3Aupdated-desc\">P-high issues</a></p>",
        "id": 163653982,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596186
    },
    {
        "content": "<p>but we also have a lot of nominated issues (and maybe PRs)</p>",
        "id": 163654014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596203
    },
    {
        "content": "<p>that I would prefer to try to get through today</p>",
        "id": 163654027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596212
    },
    {
        "content": "<p>So I'll just ask everyone watching: Take a look at the list of P-high issues above. The ones assigned to you, please do try to write a note regarding status</p>",
        "id": 163654114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596247
    },
    {
        "content": "<p>The ones not assigned to you, consider taking it. (If you are in this meeting and cannot be assigned to issues, let me know and I'll see about adding you to the appropriate group so that you <em>can</em>)</p>",
        "id": 163654174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596290
    },
    {
        "content": "<blockquote>\n<p>So there are a lot of P-high issues</p>\n</blockquote>\n<p>yeah there are :(</p>",
        "id": 163654243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555596336
    },
    {
        "content": "<p>And if you have an issue assigned to you that you <em>know</em> you do not have time to address in the next two weeks: Consider trying to find someone else to mentor</p>",
        "id": 163654248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596338
    },
    {
        "content": "<p>and/or delegate to</p>",
        "id": 163654254,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596345
    },
    {
        "content": "<p>(by \"address\", I don't <em>necessarily</em> mean \"fix 100%\")</p>",
        "id": 163654337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596381
    },
    {
        "content": "<p>e.g. some of these bugs are known long standing work items.</p>",
        "id": 163654350,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596394
    },
    {
        "content": "<p>okay that's all I'll say for now about the P-high list</p>",
        "id": 163654358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596402
    },
    {
        "content": "<p>we have <em>zero</em> <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=label%3Abeta-nominated+label%3AT-compiler+sort%3Aupdated-desc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=label%3Abeta-nominated+label%3AT-compiler+sort%3Aupdated-desc\">beta backport nominations</a></p>",
        "id": 163654387,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596431
    },
    {
        "content": "<p>There is <em>one</em> <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=+label%3Astable-nominated+label%3AT-compiler+sort%3Aupdated-desc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=+label%3Astable-nominated+label%3AT-compiler+sort%3Aupdated-desc\">stable backport nomination</a></p>",
        "id": 163654427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596459
    },
    {
        "content": "<p>namely \"Use informational target machine for metadata\" <a href=\"https://github.com/rust-lang/rust/issues/58605\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58605\">#58605</a></p>",
        "id": 163654445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596475
    },
    {
        "content": "<p>So I don't know much about this bug nor about its fix</p>",
        "id": 163654582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596543
    },
    {
        "content": "<blockquote>\n<p>hey <span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> , do you think you will be around to provide a check-in regarding what's going on with WG-llvm?</p>\n</blockquote>\n<p>sure.</p>",
        "id": 163654611,
        "sender_full_name": "nagisa",
        "timestamp": 1555596570
    },
    {
        "content": "<p>I can't remember if this bug only occurred for cortex-m?</p>",
        "id": 163654614,
        "sender_full_name": "mw",
        "timestamp": 1555596574
    },
    {
        "content": "<p>the original fixed issue was <a href=\"https://github.com/rust-lang/rust/issues/58323\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58323\">#58323</a></p>",
        "id": 163654625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596585
    },
    {
        "content": "<p>because if it does then a backport is not warranted, I think</p>",
        "id": 163654634,
        "sender_full_name": "mw",
        "timestamp": 1555596595
    },
    {
        "content": "<p>but the claim is that it also fixes <a href=\"https://github.com/rust-lang/rust/issues/59898\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59898\">#59898</a></p>",
        "id": 163654637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596597
    },
    {
        "content": "<p>I don't know what <code>--features=\"stm32f429\"</code> denotes</p>",
        "id": 163654781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596663
    },
    {
        "content": "<p>does that mean something that is similarly only on cortex-m ?</p>",
        "id": 163654796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596675
    },
    {
        "content": "<p>another embedded platform</p>",
        "id": 163654803,
        "sender_full_name": "mw",
        "timestamp": 1555596681
    },
    {
        "content": "<p>I <em>think</em> the bug in question could occur for any <code>cargo check</code> use?</p>",
        "id": 163654844,
        "sender_full_name": "nagisa",
        "timestamp": 1555596720
    },
    {
        "content": "<p>someone said that reproduced \"on linux\", but I don't know if that meant embedded linux</p>",
        "id": 163654907,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596743
    },
    {
        "content": "<p>My inclination is to only backport-to-stable if we end up releasing a point release for stable otherwise.</p>",
        "id": 163654912,
        "sender_full_name": "nagisa",
        "timestamp": 1555596745
    },
    {
        "content": "<p>or desktop linux?</p>",
        "id": 163654914,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596746
    },
    {
        "content": "<p>for some other reason</p>",
        "id": 163654927,
        "sender_full_name": "nagisa",
        "timestamp": 1555596759
    },
    {
        "content": "<blockquote>\n<p>My inclination is to only backport-to-stable if we end up releasing a point release for stable otherwise.</p>\n</blockquote>\n<p>cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> -- any reason to think we will do so?</p>",
        "id": 163654942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555596769
    },
    {
        "content": "<p><code>cargo check</code> definitely didn't break on Linux in general</p>",
        "id": 163654947,
        "sender_full_name": "mw",
        "timestamp": 1555596773
    },
    {
        "content": "<p>okay well</p>",
        "id": 163655024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we have sort of already scheduled a 1.34.1 but we may change our minds since some reexports that we thought we were going to do may not be happening</p>",
        "id": 163655037,
        "sender_full_name": "centril",
        "timestamp": 1555596832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> would you say that there's a risk attached to backporting?</p>",
        "id": 163655041,
        "sender_full_name": "mw",
        "timestamp": 1555596837
    },
    {
        "content": "<p>I would very much rather avoid backporting it to stable, yeah.</p>",
        "id": 163655100,
        "sender_full_name": "nagisa",
        "timestamp": 1555596856
    },
    {
        "content": "<p>I think we're talking about \"cross-compile <code>cargo check</code>\"</p>",
        "id": 163655124,
        "sender_full_name": "eddyb",
        "timestamp": 1555596878
    },
    {
        "content": "<p>Seeing how many iterations this required to get right (and how spaghetti the code in question was before) I’m not at all confident the patch is rock-stable</p>",
        "id": 163655138,
        "sender_full_name": "nagisa",
        "timestamp": 1555596892
    },
    {
        "content": "<p>is there anyone here who wants to argue <em>for</em> backporting?</p>",
        "id": 163655145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596898
    },
    {
        "content": "<p><code>cargo check</code> on a project that is destined to run on an embedded board, presumably w/o even an OS on it</p>",
        "id": 163655164,
        "sender_full_name": "eddyb",
        "timestamp": 1555596910
    },
    {
        "content": "<p>I'd say not backporting might result in worse developer experiece, but it could be marginal enough to not matter</p>",
        "id": 163655186,
        "sender_full_name": "eddyb",
        "timestamp": 1555596932
    },
    {
        "content": "<p>and presumably it's fixed on beta? so people could use that for a while? or is that unacceptable</p>",
        "id": 163655234,
        "sender_full_name": "eddyb",
        "timestamp": 1555596963
    },
    {
        "content": "<p>they apparently can also work around by choosing different opt-levels</p>",
        "id": 163655277,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596974
    },
    {
        "content": "<p>which ... they can do specifically for a <code>cargo check</code> dev profile?</p>",
        "id": 163655298,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555596988
    },
    {
        "content": "<p>sounds like it's not worth the risk</p>",
        "id": 163655358,
        "sender_full_name": "mw",
        "timestamp": 1555597027
    },
    {
        "content": "<blockquote>\n<p>they apparently can also work around by choosing different opt-levels</p>\n</blockquote>\n<p>(I'm basing this on <a href=\"https://github.com/rust-lang/rust/issues/59898#issuecomment-482462866\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59898#issuecomment-482462866\">one of the comments</a>; I'm not certain its generally true.)</p>",
        "id": 163655371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597036
    },
    {
        "content": "<p>okay. lets decline to backport and wait to see who yells in response.</p>",
        "id": 163655391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597055
    },
    {
        "content": "<p>the plan was to release 1.34.1 next week, mainly to include the ICE fixes but also to let me learn the release process</p>",
        "id": 163655423,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1555597081
    },
    {
        "content": "<p>next, <a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">beta regressions</a></p>",
        "id": 163655512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597115
    },
    {
        "content": "<p>if the backport is declined... well, we're not going to do a point release for just one clippy ice fix</p>",
        "id": 163655520,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1555597122
    },
    {
        "content": "<p>only beta regression is \"Tuple indexing regression\" <a href=\"https://github.com/rust-lang/rust/issues/59553\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59553\">#59553</a></p>",
        "id": 163655540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597138
    },
    {
        "content": "<p>I think the main thing here is I want to make sure someone is assigned to this</p>",
        "id": 163655577,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597165
    },
    {
        "content": "<p>the general dialogue is that we may be fine just letting the \"regression\" slide</p>",
        "id": 163655590,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597179
    },
    {
        "content": "<p>without adding future-compat warning stuff</p>",
        "id": 163655596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597185
    },
    {
        "content": "<p>(depending on how crater goes)</p>",
        "id": 163655606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597190
    },
    {
        "content": "<p>but I don't like having it unassigned.</p>",
        "id": 163655611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597194
    },
    {
        "content": "<p>So: Anyone want to take a bug that may require ZERO effort?</p>",
        "id": 163655673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597207
    },
    {
        "content": "<p>heh</p>",
        "id": 163655695,
        "sender_full_name": "eddyb",
        "timestamp": 1555597222
    },
    {
        "content": "<blockquote>\n<p>only beta regression is \"Tuple indexing regression\" <a href=\"https://github.com/rust-lang/rust/issues/59553\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59553\">#59553</a></p>\n</blockquote>\n<p>hmm I am ... of mixed minds about this change.</p>",
        "id": 163655700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597228
    },
    {
        "content": "<p>I actually hit something similar and didn't realize <code>tuple.0usize</code> was ever allowed</p>",
        "id": 163655718,
        "sender_full_name": "eddyb",
        "timestamp": 1555597243
    },
    {
        "content": "<p>i.e., obviously we wish that we didn't permit this but is it worth regressing things?</p>",
        "id": 163655720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597245
    },
    {
        "content": "<p>I think we are too liberal with C-future-compatibility lints</p>",
        "id": 163655741,
        "sender_full_name": "centril",
        "timestamp": 1555597262
    },
    {
        "content": "<p>I want to see a significant reduction of them and be more strict with when they are used</p>",
        "id": 163655784,
        "sender_full_name": "centril",
        "timestamp": 1555597283
    },
    {
        "content": "<p>I didn't have in mind a lint</p>",
        "id": 163655789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597292
    },
    {
        "content": "<p>(I have to say, it's really painful to generate a plain integer, more so than I would've hoped for... we should've just removed literal suffixes before 1.0 :P)</p>",
        "id": 163655792,
        "sender_full_name": "eddyb",
        "timestamp": 1555597293
    },
    {
        "content": "<p>I had in mind never changing this behavior at all</p>",
        "id": 163655800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597298
    },
    {
        "content": "<p>Why is the macro expander including a literal suffix here?</p>",
        "id": 163655814,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597313
    },
    {
        "content": "<p><code>quote!</code> is</p>",
        "id": 163655856,
        "sender_full_name": "eddyb",
        "timestamp": 1555597322
    },
    {
        "content": "<p>or is it <code>quote!</code> thats doing that?</p>",
        "id": 163655865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597323
    },
    {
        "content": "<p>Basically I think we should consider reverting <a href=\"https://github.com/rust-lang/rust/pull/59421\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59421\">https://github.com/rust-lang/rust/pull/59421</a></p>",
        "id": 163655886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597332
    },
    {
        "content": "<p>it's the behavior for interpolating an integer in <code>quote!</code> and I think it's maybe a bit much</p>",
        "id": 163655909,
        "sender_full_name": "eddyb",
        "timestamp": 1555597353
    },
    {
        "content": "<p>The end user is using quote incorrectly</p>",
        "id": 163655913,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597355
    },
    {
        "content": "<p>(And, I think we probably need to have a broader conversation / RFC on this topic to create better guidelines. I've noticed it is coming up a lot lately.)</p>",
        "id": 163655922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597362
    },
    {
        "content": "<p>I don't agree with a permanent revert; it clearly seems like a bug to me</p>",
        "id": 163655943,
        "sender_full_name": "centril",
        "timestamp": 1555597381
    },
    {
        "content": "<p>It's a one line change to the users crate to get this fixed for them</p>",
        "id": 163655950,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597384
    },
    {
        "content": "<blockquote>\n<p>The end user is using quote incorrectly</p>\n</blockquote>\n<p>For what it's worth, I'm pretty sure I used <code>quote!</code> exactly like this in salsa :)</p>",
        "id": 163655957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597386
    },
    {
        "content": "<p>I don't have a problem with warning that you shouldn't have a literal suffix, and just letting it slide</p>",
        "id": 163655967,
        "sender_full_name": "eddyb",
        "timestamp": 1555597391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> why is this an incorrect use of quote? Are you only supposed to interpolate string data or something?</p>",
        "id": 163655984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597408
    },
    {
        "content": "<blockquote>\n<p>I don't agree with a permanent revert; it clearly seems like a bug to me</p>\n</blockquote>\n<p>I appreciate that, but I think at minimum we should have the broader conversation</p>",
        "id": 163655985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597408
    },
    {
        "content": "<p>We can make this warn in beta and stable for a bit</p>",
        "id": 163655991,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597412
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/gll/blob/master/src/generate/rust.rs#L833-L835\" target=\"_blank\" title=\"https://github.com/rust-lang/gll/blob/master/src/generate/rust.rs#L833-L835\">https://github.com/rust-lang/gll/blob/master/src/generate/rust.rs#L833-L835</a></p>",
        "id": 163656007,
        "sender_full_name": "eddyb",
        "timestamp": 1555597430
    },
    {
        "content": "<p>I promise you that this will affect code that is not on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a></p>",
        "id": 163656051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597443
    },
    {
        "content": "<p>this is how you're supposed to get the unsuffixed literals</p>",
        "id": 163656062,
        "sender_full_name": "eddyb",
        "timestamp": 1555597446
    },
    {
        "content": "<blockquote>\n<p>We can make this warn in beta and stable for a bit</p>\n</blockquote>\n<p>at minimum I thnk we sohuld do this</p>",
        "id": 163656065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what does that broader conversation look like? </p>\n<p>I'm also concerned that we still don't have the minimum lint levels infrastructure</p>",
        "id": 163656085,
        "sender_full_name": "centril",
        "timestamp": 1555597470
    },
    {
        "content": "<p>At minimum I think someone should take this bug</p>",
        "id": 163656086,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597470
    },
    {
        "content": "<p>Basically, I'd want to judge \"how important is it to fix this\".</p>",
        "id": 163656089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597474
    },
    {
        "content": "<p>Of course, I spoke with David in Montevideo and he was adamant that quote wouldn't change for this and was convinced, and Taylor was of a kind that we should just let it ride the train</p>",
        "id": 163656102,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597483
    },
    {
        "content": "<p>what do you mean by \"quote wouldn't change\"?</p>",
        "id": 163656158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597512
    },
    {
        "content": "<p>I think David is right; the bug is in users of <code>quote!</code>, not in <code>quote!</code> itself</p>",
        "id": 163656160,
        "sender_full_name": "centril",
        "timestamp": 1555597514
    },
    {
        "content": "<p>I think <code>quote!</code> is a bit too hard on this, but it could be backwards-incompat for <code>quote!</code> to change anyway</p>",
        "id": 163656162,
        "sender_full_name": "eddyb",
        "timestamp": 1555597515
    },
    {
        "content": "<p>can we determine that <code>quote!</code> was involved from the span (expansion stack)</p>",
        "id": 163656190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597550
    },
    {
        "content": "<p>and provide better feedback on usage then?</p>",
        "id": 163656202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597557
    },
    {
        "content": "<p>I'd prefer it if <code>quote!</code> made you do <code>#i: usize</code> if you wanted a certain type, but, like I said, literal suffixes are <br>\n bad in the first place,,,</p>",
        "id": 163656255,
        "sender_full_name": "eddyb",
        "timestamp": 1555597566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> we could maybe track whether the literal was synthetic</p>",
        "id": 163656269,
        "sender_full_name": "eddyb",
        "timestamp": 1555597582
    },
    {
        "content": "<p>What is the <em>motivation</em> to do <a href=\"https://github.com/rust-lang/rust/pull/59421/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59421/\">https://github.com/rust-lang/rust/pull/59421/</a> ?</p>",
        "id": 163656273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597584
    },
    {
        "content": "<p>We can add a note pointing at the ticket</p>",
        "id": 163656286,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597593
    },
    {
        "content": "<p>Like, why <em>not</em> continue to accept this behavior, perhaps deprecated?</p>",
        "id": 163656292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597602
    },
    {
        "content": "<p>not <code>quote!</code> specifically, but using a <code>Literal</code> constructor</p>",
        "id": 163656294,
        "sender_full_name": "eddyb",
        "timestamp": 1555597605
    },
    {
        "content": "<p>With a shirt explanation of what changed</p>",
        "id": 163656295,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it fixes a bug where random garbage was allowed in tuple indexing</p>",
        "id": 163656319,
        "sender_full_name": "centril",
        "timestamp": 1555597623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well maybe its was beaqcuse we accepted too many kindsof literals: <a href=\"https://github.com/rust-lang/rust/issues/59418\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59418\">#59418</a></p>",
        "id": 163656336,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597633
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4280ded6698f9f9f3877ad0498769cb7\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4280ded6698f9f9f3877ad0498769cb7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4280ded6698f9f9f3877ad0498769cb7</a></p>",
        "id": 163656338,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597635
    },
    {
        "content": "<p>we could therefore do a more narrow fix</p>",
        "id": 163656351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 163656356,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597646
    },
    {
        "content": "<p>Certainly</p>",
        "id": 163656369,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597654
    },
    {
        "content": "<p>what does \"more narrow fix\" entail?</p>",
        "id": 163656400,
        "sender_full_name": "centril",
        "timestamp": 1555597675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> this is how <code>quote!</code> causes this: <a href=\"https://docs.rs/quote/0.6.12/src/quote/to_tokens.rs.html#123-127\" target=\"_blank\" title=\"https://docs.rs/quote/0.6.12/src/quote/to_tokens.rs.html#123-127\">https://docs.rs/quote/0.6.12/src/quote/to_tokens.rs.html#123-127</a></p>",
        "id": 163656409,
        "sender_full_name": "eddyb",
        "timestamp": 1555597680
    },
    {
        "content": "<blockquote>\n<p>What is the motivation to do <a href=\"https://github.com/rust-lang/rust/pull/59421/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59421/\">https://github.com/rust-lang/rust/pull/59421/</a> ?</p>\n</blockquote>\n<p>The struct doesn't have a field named <code>0usize</code>.<br>\n<code>0</code> is not really a number in that position, it's an identifier.</p>",
        "id": 163656412,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555597681
    },
    {
        "content": "<p>But that would still be different behavior to rust 1.1x</p>",
        "id": 163656460,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> as you can see below that, it explicitly uses <code>_suffixed</code> constructors</p>",
        "id": 163656489,
        "sender_full_name": "eddyb",
        "timestamp": 1555597716
    },
    {
        "content": "<p>A more narrow change would be accepting 0usize for now <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 163656496,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597722
    },
    {
        "content": "<blockquote>\n<p>what does \"more narrow fix\" entail?</p>\n</blockquote>\n<p>(I imagine it would involve only rejecting suffixes that do not look like existing suffixes.)</p>",
        "id": 163656509,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597733
    },
    {
        "content": "<p>we could then mark the suffixes as synthetic and allow them with a warning despite erroring on <code>tuple.0usize</code> parsed from source code</p>",
        "id": 163656566,
        "sender_full_name": "eddyb",
        "timestamp": 1555597765
    },
    {
        "content": "<p>The only one would be usize and maybe i32</p>",
        "id": 163656569,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597769
    },
    {
        "content": "<p>So</p>",
        "id": 163656579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597774
    },
    {
        "content": "<p>We are in the weeds officially</p>",
        "id": 163656586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597780
    },
    {
        "content": "<p>But the good news is</p>",
        "id": 163656603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597785
    },
    {
        "content": "<p>we clearly have a lot of people excited about discussing this</p>",
        "id": 163656619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> that's betting on only some types being used but I wouldn't be so sure</p>",
        "id": 163656624,
        "sender_full_name": "eddyb",
        "timestamp": 1555597798
    },
    {
        "content": "<p>So can one of you agree to take on this bug and then we can move on in this meeting?</p>",
        "id": 163656682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597806
    },
    {
        "content": "<p>if you want nothing to be done, you can assign it to me :P</p>",
        "id": 163656689,
        "sender_full_name": "eddyb",
        "timestamp": 1555597810
    },
    {
        "content": "<p>I agree with such a narrow fix as a <em>temporary</em> hack; I don't agree with random garbage and hacks into the grammar of the language</p>",
        "id": 163656692,
        "sender_full_name": "centril",
        "timestamp": 1555597811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> eh, we're a long way from properly filtering stuff like this in any model of the grammar</p>",
        "id": 163656729,
        "sender_full_name": "eddyb",
        "timestamp": 1555597841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> not sure what the point is?</p>",
        "id": 163656786,
        "sender_full_name": "centril",
        "timestamp": 1555597878
    },
    {
        "content": "<p>it'd be more interesting if we allowed <code>tuple.0.1.2.3</code> but  that's... tricky, in terms of what we treat as a \"literal\" for macro_rules and proc macros</p>",
        "id": 163656799,
        "sender_full_name": "eddyb",
        "timestamp": 1555597885
    },
    {
        "content": "<p>that's it</p>",
        "id": 163656808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597890
    },
    {
        "content": "<blockquote>\n<p>So can one of you agree to take on this bug and then we can move on in this meeting?</p>\n</blockquote>\n<p>I will try to lead it to resolution.</p>",
        "id": 163656811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555597892
    },
    {
        "content": "<p>no more discussion of ths issue</p>",
        "id": 163656819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597894
    },
    {
        "content": "<p>we have <a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">three stable-t-nightly regressions</a></p>",
        "id": 163656899,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597924
    },
    {
        "content": "<p>Can take it too if Niko is to busy</p>",
        "id": 163656903,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597927
    },
    {
        "content": "<p>Sync off line</p>",
        "id": 163656914,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555597937
    },
    {
        "content": "<p>(split it into a new topic)</p>",
        "id": 163656927,
        "sender_full_name": "centril",
        "timestamp": 1555597952
    },
    {
        "content": "<p>the two ones marked P-high were filed within the last week</p>",
        "id": 163656929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555597955
    },
    {
        "content": "<p>and they are unassigned. (So, see note above about considering assigning yourself to P-hihg tickets)</p>",
        "id": 163656995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598003
    },
    {
        "content": "<p>but I'm not going to spell them out now</p>",
        "id": 163657008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598014
    },
    {
        "content": "<p>(becasue we are so pressed for time)</p>",
        "id": 163657018,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598022
    },
    {
        "content": "<p>there are two <a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AS-waiting-on-team+label%3AT-compiler+sort%3Aupdated-desc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AS-waiting-on-team+label%3AT-compiler+sort%3Aupdated-desc\">PRs marked Waiting-on-team</a> for us</p>",
        "id": 163657086,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598044
    },
    {
        "content": "<p>the first is one we've oft discussed, \"[do not merge] Measure performance impact of local interners\" <a href=\"https://github.com/rust-lang/rust/issues/57214\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57214\">#57214</a></p>",
        "id": 163657109,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598063
    },
    {
        "content": "<p>but I don't think we''re waiting anymore here, right?<br>\nit looks like everyone has now resolved their concerns</p>",
        "id": 163657146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598100
    },
    {
        "content": "<p>so I'll update the labels accordingly</p>",
        "id": 163657175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598115
    },
    {
        "content": "<p>next: \"Add llvm.sideeffect to potential infinite loops and recursions\" <a href=\"https://github.com/rust-lang/rust/issues/59546\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59546\">#59546</a></p>",
        "id": 163657193,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598127
    },
    {
        "content": "<p>Still needs to have its performance benchmarked, not aware of any changes there</p>",
        "id": 163657208,
        "sender_full_name": "nagisa",
        "timestamp": 1555598147
    },
    {
        "content": "<p>hmm. this was changed to waiting-on-team 3 days ago</p>",
        "id": 163657216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598152
    },
    {
        "content": "<p>but I agree with <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>",
        "id": 163657224,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598157
    },
    {
        "content": "<p>we need performance benchmark results</p>",
        "id": 163657236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598162
    },
    {
        "content": "<p>Do we expect to ask the PR author to provide that? Or do we task someone else with it internally?</p>",
        "id": 163657301,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598193
    },
    {
        "content": "<p>who's the developer in charge of <a href=\"http://lolbench.rs\" target=\"_blank\" title=\"http://lolbench.rs\">lolbench.rs</a>?</p>",
        "id": 163657330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598225
    },
    {
        "content": "<p>Since we have <code>lolbench</code> we should figure out how to easily get that to run. That’s @nbp I think.</p>",
        "id": 163657353,
        "sender_full_name": "nagisa",
        "timestamp": 1555598245
    },
    {
        "content": "<p>who’s in charge of lolbench</p>",
        "id": 163657360,
        "sender_full_name": "nagisa",
        "timestamp": 1555598252
    },
    {
        "content": "<p>@anp GH, I think</p>",
        "id": 163657377,
        "sender_full_name": "mw",
        "timestamp": 1555598269
    },
    {
        "content": "<p>its not <span class=\"user-mention\" data-user-id=\"130111\">@Adam Perry</span>  ?</p>",
        "id": 163657380,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598270
    },
    {
        "content": "<p>I'll write a follow-up comment on <a href=\"https://github.com/rust-lang/rust/issues/59546\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59546\">#59546</a> explaining our position</p>",
        "id": 163657485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598312
    },
    {
        "content": "<p>Maybe. So last time we talked about it, it is apparently possible to run these benchmarks locally, except it takes like a day.</p>",
        "id": 163657486,
        "sender_full_name": "nagisa",
        "timestamp": 1555598312
    },
    {
        "content": "<p>I'd be willing to run them on my machine, if somebody links to some isntructions</p>",
        "id": 163657509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598328
    },
    {
        "content": "<p>It's pretty idle these days, sadly</p>",
        "id": 163657533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598344
    },
    {
        "content": "<p>/me hasn't compiled rustc in too long :(</p>",
        "id": 163657540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598348
    },
    {
        "content": "<p>there are <em>ten</em> <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AI-nominated+label%3AT-compiler+sort%3Aupdated-desc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AI-nominated+label%3AT-compiler+sort%3Aupdated-desc\">I-nominated T-compiler issues</a></p>",
        "id": 163657572,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598374
    },
    {
        "content": "<p>which is too many for us to go through <em>and</em> do the WG checkins, I think</p>",
        "id": 163657585,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598384
    },
    {
        "content": "<p>some of them I either nominated or left nominated because I didn't know how to prioiritize them</p>",
        "id": 163657664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598424
    },
    {
        "content": "<p>and I tagged \"Decouple nightly RLS from Clippy\" <a href=\"https://github.com/rust-lang/rust/issues/59761\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59761\">#59761</a> as T-compiler because I wasn't sure if T-compiler could/should be assisting with that decoupling</p>",
        "id": 163657696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598462
    },
    {
        "content": "<p>I have already written the text for WG-llvm checkin, so unless there are any questions, it will take a minute for you to read throguh</p>",
        "id": 163657711,
        "sender_full_name": "nagisa",
        "timestamp": 1555598473
    },
    {
        "content": "<p>there are a cuple that I do think are high priority to figure out</p>",
        "id": 163657738,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598500
    },
    {
        "content": "<p>so let me try to cherry-pick them</p>",
        "id": 163657743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598505
    },
    {
        "content": "<p>\"Can define and use async fn without feature gate on nightly\" <a href=\"https://github.com/rust-lang/rust/issues/60069\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60069\">#60069</a></p>",
        "id": 163657745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598508
    },
    {
        "content": "<p><code>#![feature(futures_api)]</code> is in FCP for stabilization, but <code>async fn</code> might be leaking through on it</p>",
        "id": 163657812,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598539
    },
    {
        "content": "<p>it seems at very least we should <em>block</em> that stabilization until this is resolved, right?</p>",
        "id": 163657826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598556
    },
    {
        "content": "<p>who wants to take point on this?</p>",
        "id": 163657838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you maybe give it to <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  ?</p>",
        "id": 163657857,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598583
    },
    {
        "content": "<p>this should be very easy to fix</p>",
        "id": 163657871,
        "sender_full_name": "varkor",
        "timestamp": 1555598588
    },
    {
        "content": "<p>I can take a look :)</p>",
        "id": 163657881,
        "sender_full_name": "varkor",
        "timestamp": 1555598599
    },
    {
        "content": "<blockquote>\n<p>it seems at very least we should <em>block</em> that stabilization until this is resolved, right?</p>\n</blockquote>\n<p>seems correct</p>",
        "id": 163657892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598608
    },
    {
        "content": "<p>okay I'm assigning to <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> , thahks!</p>",
        "id": 163657893,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598608
    },
    {
        "content": "<p>If we have pr to gate it properly, would that be enough to beta backport and let future continue?</p>",
        "id": 163657908,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555598615
    },
    {
        "content": "<p>Would a beta backport be required?</p>",
        "id": 163657920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598634
    },
    {
        "content": "<p>(Seems ok, if so)</p>",
        "id": 163657927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598640
    },
    {
        "content": "<p>(That is, is the stabilization on beta?)</p>",
        "id": 163657975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598652
    },
    {
        "content": "<p>(I thought it wasn't yet)</p>",
        "id": 163657981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555598660
    },
    {
        "content": "<p>Depends on where on the tracks future_api is</p>",
        "id": 163657984,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555598663
    },
    {
        "content": "<p>I don't think we would need to backport, if it's never actually usuable without a feature flag</p>",
        "id": 163657986,
        "sender_full_name": "varkor",
        "timestamp": 1555598665
    },
    {
        "content": "<p>it would be good to link to the appropriate tracking issue</p>",
        "id": 163657996,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598679
    },
    {
        "content": "<p>(my attempt to quickly search for it failed)</p>",
        "id": 163658021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598704
    },
    {
        "content": "<p>there's one more nominated issue that I want to try to discuss here before we do the WG-checkin</p>",
        "id": 163658072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598733
    },
    {
        "content": "<p>this one: \"regression in deterministic generation of binary from 1.32 to 1.33\" <a href=\"https://github.com/rust-lang/rust/issues/59542\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59542\">#59542</a></p>",
        "id": 163658081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598740
    },
    {
        "content": "<p>a problem here is that the issue reporter hasn't actually provided a test input</p>",
        "id": 163658159,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598766
    },
    {
        "content": "<p>just descriptions of behavior</p>",
        "id": 163658167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598772
    },
    {
        "content": "<p>but I wanted to ask</p>",
        "id": 163658209,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598818
    },
    {
        "content": "<p>what guarantees are we providing today, supposedly, w.r.t. determinism of builds?</p>",
        "id": 163658235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598834
    },
    {
        "content": "<p><code>std::future::Future</code> won't be backported to 1.35.</p>",
        "id": 163658243,
        "sender_full_name": "centril",
        "timestamp": 1555598841
    },
    {
        "content": "<p>I know we <em>want</em> to get to reproducible builds</p>",
        "id": 163658250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598847
    },
    {
        "content": "<p>but is a regression with respect to them actually a P-high thing?</p>",
        "id": 163658260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598861
    },
    {
        "content": "<p>I don’t think we have guaranteed anything, but people do rely on it</p>",
        "id": 163658273,
        "sender_full_name": "nagisa",
        "timestamp": 1555598869
    },
    {
        "content": "<p>no guarantees, I think, but it's been a soft goal for a while</p>",
        "id": 163658278,
        "sender_full_name": "mw",
        "timestamp": 1555598876
    },
    {
        "content": "<p>I would have said no, its not P-high, but there is a comment in the issue saying that many people are relying on it</p>",
        "id": 163658280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598878
    },
    {
        "content": "<p>this is not about reproducible builds with the same configuration</p>",
        "id": 163658351,
        "sender_full_name": "eddyb",
        "timestamp": 1555598914
    },
    {
        "content": "<p>it's \"reproducible while changing the source dir\"</p>",
        "id": 163658357,
        "sender_full_name": "eddyb",
        "timestamp": 1555598922
    },
    {
        "content": "<p>oh right, I should edit that title</p>",
        "id": 163658384,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555598945
    },
    {
        "content": "<p>I doubt determinism for <em>actual</em> identical builds broke as badly, or at all</p>",
        "id": 163658395,
        "sender_full_name": "eddyb",
        "timestamp": 1555598961
    },
    {
        "content": "<blockquote>\n<p>it's \"reproducible while changing the source dir\"</p>\n</blockquote>\n<p>that's what --remap-path-prefix is there for</p>",
        "id": 163658463,
        "sender_full_name": "mw",
        "timestamp": 1555599002
    },
    {
        "content": "<p>i.e. that's the only real reason for having that feature</p>",
        "id": 163658508,
        "sender_full_name": "mw",
        "timestamp": 1555599030
    },
    {
        "content": "<p>wait, so is it supposed to allow reproducible builds, or not?</p>",
        "id": 163658518,
        "sender_full_name": "eddyb",
        "timestamp": 1555599036
    },
    {
        "content": "<blockquote>\n<p>I would have said no, its not P-high, but there is a comment in the issue saying that many people are relying on it</p>\n</blockquote>\n<p>I think it's a \"soft guarantee\" we should try to preserve if it's achievable</p>",
        "id": 163658519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599036
    },
    {
        "content": "<p>(but I guess I should read the issue to understand the particulars)</p>",
        "id": 163658536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599057
    },
    {
        "content": "<p>yes, it should allow reproducible builds (and has done so in the past)</p>",
        "id": 163658552,
        "sender_full_name": "mw",
        "timestamp": 1555599064
    },
    {
        "content": "<p>like, symbol hashes change <em>despite</em> <code>--remap-path-prefix</code></p>",
        "id": 163658562,
        "sender_full_name": "eddyb",
        "timestamp": 1555599072
    },
    {
        "content": "<p>okay. <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> , do you think you can take point on this issue?</p>",
        "id": 163658573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599087
    },
    {
        "content": "<p>I'm not sure from the description in the issue</p>",
        "id": 163658577,
        "sender_full_name": "mw",
        "timestamp": 1555599091
    },
    {
        "content": "<p>at this point its mostly about interacting withteh issue filers</p>",
        "id": 163658580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599097
    },
    {
        "content": "<p>I don't expect us to take action until they provide us with a real test case</p>",
        "id": 163658587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599106
    },
    {
        "content": "<p>but it sounds like they need help making one</p>",
        "id": 163658591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599113
    },
    {
        "content": "<p>I feel that if we don't have tests for it we haven't committed to not breaking it 2¢</p>",
        "id": 163658593,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1555599116
    },
    {
        "content": "<p>yes, I can take it</p>",
        "id": 163658598,
        "sender_full_name": "mw",
        "timestamp": 1555599121
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/rust-lang/rust/issues/59542#issuecomment-482853270\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59542#issuecomment-482853270\">https://github.com/rust-lang/rust/issues/59542#issuecomment-482853270</a>&gt; is where I noticed the symbol hashes are wildly different</p>",
        "id": 163658665,
        "sender_full_name": "eddyb",
        "timestamp": 1555599146
    },
    {
        "content": "<p>(I imagine many in the community could similarly assist with such feedback for the filer, who is a self-admitted newbie)</p>",
        "id": 163658667,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599148
    },
    {
        "content": "<p>with some exceptions, maybe those don't depend on whatever happens to depend on file paths</p>",
        "id": 163658696,
        "sender_full_name": "eddyb",
        "timestamp": 1555599176
    },
    {
        "content": "<p>I still don't know if this is P-high or P-medium, but maybe that is something that <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> can also resolve</p>",
        "id": 163658709,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599183
    },
    {
        "content": "<p>sure</p>",
        "id": 163658722,
        "sender_full_name": "mw",
        "timestamp": 1555599194
    },
    {
        "content": "<p>so lets spend the remaining ... <strong>seven</strong> minutes on WG checkin</p>",
        "id": 163658723,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599196
    },
    {
        "content": "<p>...</p>",
        "id": 163658724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> do you think incremental could be used to diagnose this? that is, measure what incremental thinks has changed?</p>",
        "id": 163658725,
        "sender_full_name": "eddyb",
        "timestamp": 1555599201
    },
    {
        "content": "<p>since <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> already has notes typed up</p>",
        "id": 163658726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599203
    },
    {
        "content": "<p>lets start with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 163658732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599206
    },
    {
        "content": "<p>WG-llvm had a somewhat quiet period (but I cannot say I have been following happenings too closely either). The work on optimisation of the <code>overflow</code> intrinsics has continued. An option of not emitting <code>overflow</code> intrinsics for <code>add/sub</code> at all (and instead emitting IR that achieves this without an intrinisic) has come up as well, but that needs to be implemented and benchmarked to evaluate the impact first. In LLVM world there is a recent discussion about reworking/improving the noalias system to better suit C’s <code>restrict</code> semantics, which is something that may be relevant to us as well. We have a PR to Rust that solves the long-standing <code>loop {}</code> bug, but benchmarks need to be ran there as well to verify that it does not regress performance of unrelated code. I have on top of my TODO list to implement fixes to LLVM which would resolve this once-and-for-all properly, but am not finding much time for OSS work lately. <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> or <span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> may have more say about overall progress on their specific efforts.</p>",
        "id": 163658733,
        "sender_full_name": "nagisa",
        "timestamp": 1555599207
    },
    {
        "content": "<p>from .. whoa!</p>",
        "id": 163658736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599211
    },
    {
        "content": "<p>I gotta run in a min</p>",
        "id": 163658749,
        "sender_full_name": "nagisa",
        "timestamp": 1555599223
    },
    {
        "content": "<p>gotta get some food before my workday begins</p>",
        "id": 163658756,
        "sender_full_name": "nagisa",
        "timestamp": 1555599230
    },
    {
        "content": "<p>so here you go</p>",
        "id": 163658758,
        "sender_full_name": "nagisa",
        "timestamp": 1555599232
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> !</p>",
        "id": 163658813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599246
    },
    {
        "content": "<p>if you have any qeustions</p>",
        "id": 163658821,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599253
    },
    {
        "content": "<p>don't ask them now</p>",
        "id": 163658826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599258
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> later after they eat</p>",
        "id": 163658832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> this all sounds pretty exciting, nice</p>",
        "id": 163658834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599266
    },
    {
        "content": "<p>works for me.</p>",
        "id": 163658843,
        "sender_full_name": "nagisa",
        "timestamp": 1555599274
    },
    {
        "content": "<p>okay, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , you have the remaining time to report from <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-await</span></p>",
        "id": 163658869,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599296
    },
    {
        "content": "<p>So, </p>\n<p># Async-await check-in</p>",
        "id": 163658872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599299
    },
    {
        "content": "<p>Presently we are <a href=\"https://github.com/rust-lang/rust/labels/AsyncAwait-Blocking\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/labels/AsyncAwait-Blocking\">working through blocking issues</a></p>",
        "id": 163658912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599323
    },
    {
        "content": "<p>Some of the things tagged as AsyncAwait-Blocking perhaps shouldn't be, though</p>",
        "id": 163658927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599333
    },
    {
        "content": "<p>(These are meant to be issues that would block stabilizing an initial MVP of async await)</p>",
        "id": 163658940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599348
    },
    {
        "content": "<p>The most notable issues:</p>",
        "id": 163658951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599355
    },
    {
        "content": "<ul>\n<li>We expect to start implementing builtin syntax for async-await. The precise syntax is not yet settled but most of the work is independent from that anyway.</li>\n</ul>",
        "id": 163659009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599369
    },
    {
        "content": "<ul>\n<li>Taylor and I have been talking about how to extend the region inferencers (lexical + NLL) to be a bit smarter about interactions with <code>impl Trait</code>. This is a bit of a tricky area, but <a href=\"https://github.com/rust-lang/rust/issues/56238#issuecomment-483846160\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56238#issuecomment-483846160\">we have some plans</a>. It's needed to support async fns whose arguments have multiple lifetimes (e.g., <code>async fn foo(x: &amp;mut i32, y: &amp;mut i32)</code>). See <a href=\"https://github.com/rust-lang/rust/issues/56238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56238\">#56238</a>.</li>\n</ul>",
        "id": 163659030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599388
    },
    {
        "content": "<ul>\n<li><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> is working on reducing the <em>size</em> of generators by adusting their layout. This has been an ongoing effort with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> too.</li>\n</ul>",
        "id": 163659066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599421
    },
    {
        "content": "<p>There is one more thing, but any questions on those before I continue? :)</p>",
        "id": 163659109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599446
    },
    {
        "content": "<blockquote>\n<p>See <a href=\"https://github.com/rust-lang/rust/issues/5623\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/5623\">#5623</a>.</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/56238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56238\">#56238</a> (for those following along)</p>",
        "id": 163659117,
        "sender_full_name": "davidtwco",
        "timestamp": 1555599449
    },
    {
        "content": "<p>The thorniest bug remains \"Unused arguments to async fn are dropped too early\" <a href=\"https://github.com/rust-lang/rust/issues/54716\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54716\">#54716</a>.</p>",
        "id": 163659148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599480
    },
    {
        "content": "<p>We wanted to solve it by desugaring something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">pat</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>into </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"p\">...</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163659207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599497
    },
    {
        "content": "<p>but (a) that revealed some subtle inconsistencies with the actual drop order for regular functions (which isn't as consistent as one might like) and (b) this wasn't so easy to do because it required more invasive changes to the AST and HIR than expected.</p>",
        "id": 163659226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599518
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> was pushing on that)</p>",
        "id": 163659243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599528
    },
    {
        "content": "<p>In the meantime, cramertj has raised some arguments that perhaps the drop-order should remain as is, though I am personally unconvinced.</p>",
        "id": 163659264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599542
    },
    {
        "content": "<p>I think we're still going to want to do some fix here, but I'm not sure quite what</p>",
        "id": 163659288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599558
    },
    {
        "content": "<p>is this a compiler or language issue?</p>",
        "id": 163659307,
        "sender_full_name": "varkor",
        "timestamp": 1555599569
    },
    {
        "content": "<p>(It was one thing I had hoped to talk about in a possible design meeting)</p>",
        "id": 163659309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599570
    },
    {
        "content": "<p>Both, really.</p>",
        "id": 163659316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599579
    },
    {
        "content": "<p>The problem, to be clear, is that if you have an unused argument</p>",
        "id": 163659405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599618
    },
    {
        "content": "<p>In the present desugaring</p>",
        "id": 163659410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599621
    },
    {
        "content": "<p>it is never captured by the <code>async move { }</code> block</p>",
        "id": 163659417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599627
    },
    {
        "content": "<p>I'm curious about the invasive changes, fwiw</p>",
        "id": 163659426,
        "sender_full_name": "eddyb",
        "timestamp": 1555599635
    },
    {
        "content": "<p>and hence it gets dropped <em>immediately</em> when <code>foo</code> is called (i.e., before the future has begun to work)</p>",
        "id": 163659435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599645
    },
    {
        "content": "<p>But most users would expect the unused argument to get dropped when the future completes (i.e., when the <code>async move</code> block \"returns\")</p>",
        "id": 163659488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599671
    },
    {
        "content": "<blockquote>\n<p>I'm curious about the invasive changes, fwiw</p>\n</blockquote>\n<p>Yeah, I don't really have the details on the tip of my tongue right now</p>",
        "id": 163659517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599691
    },
    {
        "content": "<p>Though <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> could certainly point you to their PR</p>",
        "id": 163659531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599703
    },
    {
        "content": "<blockquote>\n<p>But most users would expect the unused argument to get dropped when the future completes (i.e., when the <code>async move</code> block \"returns\")</p>\n</blockquote>\n<p>anyway the reason I said both is that, presuming that we want some form of this behavior, it's not entirely obvious how to implement it</p>",
        "id": 163659551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599722
    },
    {
        "content": "<p>the desugaring you provided makes sense to me fwiw</p>",
        "id": 163659621,
        "sender_full_name": "eddyb",
        "timestamp": 1555599755
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> part of the problem is that we have no name <code>arg0</code> to refer to the \"argument that got given\" (i.e., without the pattern)</p>",
        "id": 163659623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599756
    },
    {
        "content": "<blockquote>\n<p>the desugaring you provided makes sense to me fwiw</p>\n</blockquote>\n<p>yes, to me too, I continue to think that's what we want</p>",
        "id": 163659635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599769
    },
    {
        "content": "<p>however, I have a simpler one :P</p>",
        "id": 163659643,
        "sender_full_name": "eddyb",
        "timestamp": 1555599773
    },
    {
        "content": "<blockquote>\n<p>Though @davidtwco could certainly point you to their PR</p>\n</blockquote>\n<p>I had this working, but it broke when I rebased and stopped specifying the <code>&lt;ty&gt;</code> in <code>let &lt;pat&gt;: &lt;ty&gt; = __arg0;</code>. It causes a type inference error now and I've struggled to resolve that, would appreciate any thoughts people have on resolving that in <a href=\"https://github.com/rust-lang/rust/issues/59823\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59823\">#59823</a>.</p>",
        "id": 163659650,
        "sender_full_name": "davidtwco",
        "timestamp": 1555599775
    },
    {
        "content": "<blockquote>\n<p>however, I have a simpler one :P</p>\n</blockquote>\n<p>do tell :)</p>",
        "id": 163659668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so this change to introduce <code>let pat = arg0;</code> is done in <code>lowering.rs</code>, right?</p>",
        "id": 163659676,
        "sender_full_name": "centril",
        "timestamp": 1555599791
    },
    {
        "content": "<p><code>let _ = binding;</code> for each binding in the enclosing fn's argument list</p>",
        "id": 163659683,
        "sender_full_name": "eddyb",
        "timestamp": 1555599800
    },
    {
        "content": "<p>/me needs to leave</p>",
        "id": 163659686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599805
    },
    {
        "content": "<p>thank you <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 163659706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555599814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that doesn't handle cases like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">Blah</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163659741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599836
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> so this change to introduce <code>let pat = arg0;</code> is done in <code>lowering.rs</code>, right?</p>\n</blockquote>\n<p>That's where we introduce the statement into the HIR, but I construct it in the parser because I need to use it in name resolution and a few other places.</p>",
        "id": 163659808,
        "sender_full_name": "davidtwco",
        "timestamp": 1555599851
    },
    {
        "content": "<p>(Should we continue in <a class=\"stream\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-t-compiler.2Fwg-async-await\">#t-compiler/wg-async-await</a> though?)</p>",
        "id": 163659813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555599855
    },
    {
        "content": "<blockquote>\n<p>(Should we continue in <a class=\"stream\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-t-compiler.2Fwg-async-await\">#t-compiler/wg-async-await</a> though?)</p>\n</blockquote>\n<p><a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/.2354716.20drop.20order\">this topic</a></p>",
        "id": 163659850,
        "sender_full_name": "davidtwco",
        "timestamp": 1555599881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <em>whoops</em>, I miscalculated the scopes. in that case, just do the proposed desugaring</p>",
        "id": 163659862,
        "sender_full_name": "eddyb",
        "timestamp": 1555599894
    },
    {
        "content": "<p>possibly dumb question, the maintainers are who set the p-high labels?</p>",
        "id": 163663500,
        "sender_full_name": "Nick Lawrence",
        "timestamp": 1555602402
    },
    {
        "content": "<p>Should we write up a summary of this week's meeting? (I also volunteer to write said summary if it's desired)</p>",
        "id": 163679122,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555613087
    },
    {
        "content": "<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> part of the problem is that we have no name <code>arg0</code> to refer to the \"argument that got given\" (i.e., without the pattern)</p>\n</blockquote>\n<p>clearly Rust needs something analogous to the <code>arguments</code> object in Javascript (&lt;/sarcasm&gt;)</p>",
        "id": 163692999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555623543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> you joke, but with VG, something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(...</span><span class=\"n\">args</span>: <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>could be used, to do what you need this for, today:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"nc\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and we could even allow this before actually letting you have <code>&lt;...Args&gt;(...args: Args)</code> (i.e. actual variadic generics)</p>",
        "id": 163723347,
        "sender_full_name": "eddyb",
        "timestamp": 1555664848
    },
    {
        "content": "<blockquote>\n<p>Should we write up a summary of this week's meeting? (I also volunteer to write said summary if it's desired)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I think we should try to do some summaries of trigae meteings -- did you ever do this?</p>",
        "id": 163939247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555967974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/compiler-team/pull/66\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/pull/66\">https://github.com/rust-lang/compiler-team/pull/66</a> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163939943,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555968449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Just in case you didn't see my reply yesterday:</p>\n<p><a href=\"https://github.com/rust-lang/compiler-team/pull/66\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/pull/66\">https://github.com/rust-lang/compiler-team/pull/66</a></p>",
        "id": 163990349,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556026507
    },
    {
        "content": "<p>Ah, great! merged, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 164113286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556134954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> you mentioned posting it in an internals thread, did you do so? Not sure which thread you would use :)</p>",
        "id": 164117449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556137993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I posted it in the thread you created ~2 weeks ago for triage meetings</p>\n<p><a href=\"https://internals.rust-lang.org/t/compiler-team-triage-meeting/9803/3?u=wesleywiser\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/compiler-team-triage-meeting/9803/3?u=wesleywiser\">https://internals.rust-lang.org/t/compiler-team-triage-meeting/9803/3?u=wesleywiser</a></p>",
        "id": 164117477,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556138033
    },
    {
        "content": "<p>Ooookay</p>",
        "id": 164117607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556138142
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 164117611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556138145
    },
    {
        "content": "<p>/me can't remember what they did this morning, much less 2 weeks ago</p>",
        "id": 164117626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556138157
    },
    {
        "content": "<p>(apparently)</p>",
        "id": 164117682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556138169
    },
    {
        "content": "<p>Haha no worries, I'm the same way</p>",
        "id": 164117691,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556138183
    },
    {
        "content": "<p>Is the general structure of the notes what you were expecting/ok?</p>",
        "id": 164117715,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556138206
    },
    {
        "content": "<p>I can also volunteer to continue writing them going forward if that's valuable</p>",
        "id": 164117740,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556138226
    },
    {
        "content": "<p>I think it's great, yeah</p>",
        "id": 164117838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556138285
    }
]