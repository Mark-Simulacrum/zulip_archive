[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> maybe we can chat here rather than via github</p>",
        "id": 178837377,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571823507
    },
    {
        "content": "<p>sure</p>",
        "id": 178837521,
        "sender_full_name": "mw",
        "timestamp": 1571823631
    },
    {
        "content": "<p>to confirm: there is no rlib version of libstd anywhere here? (e.g. no left-over file from a previous compilation or something)</p>",
        "id": 178837769,
        "sender_full_name": "mw",
        "timestamp": 1571823835
    },
    {
        "content": "<p>hmm I thought I did cargo clean first but I'll check</p>",
        "id": 178837878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571823952
    },
    {
        "content": "<p>after <code>cargo clean &amp;&amp; cargo build</code>, we have: <code>.d</code> files for compiler_builtins, core, getopts, std, and test. We also have <code>rlib</code> and <code>rmeta</code> files for libcompiler_builtins, libcore, libgetopts. And we have libstd.dylib.</p>",
        "id": 178838071,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824089
    },
    {
        "content": "<p>ok</p>",
        "id": 178838090,
        "sender_full_name": "mw",
        "timestamp": 1571824113
    },
    {
        "content": "<p>the minification builds very fast, by the way</p>",
        "id": 178838096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824121
    },
    {
        "content": "<p><a href=\"https://dxr.mozilla.org/rust/source/src/librustc_mir/monomorphize/collector.rs#833\" target=\"_blank\" title=\"https://dxr.mozilla.org/rust/source/src/librustc_mir/monomorphize/collector.rs#833\">https://dxr.mozilla.org/rust/source/src/librustc_mir/monomorphize/collector.rs#833</a></p>",
        "id": 178838102,
        "sender_full_name": "mw",
        "timestamp": 1571824127
    },
    {
        "content": "<p>so if you have a computer handy, you may want to go ahead and try it locally</p>",
        "id": 178838111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824137
    },
    {
        "content": "<p>this is where rustc checks if there is an upstream impl available</p>",
        "id": 178838116,
        "sender_full_name": "mw",
        "timestamp": 1571824144
    },
    {
        "content": "<p>(by \"builds\", of course mean \"gets to the final linker failure)</p>",
        "id": 178838126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824153
    },
    {
        "content": "<blockquote>\n<p>this is where rustc checks if there is an upstream impl available</p>\n</blockquote>\n<p>Okay I'll investigate that</p>",
        "id": 178838142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824172
    },
    {
        "content": "<p>and this is where stuff from dylibs should get filtered out: <a href=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\" target=\"_blank\" title=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\">https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247</a></p>",
        "id": 178838307,
        "sender_full_name": "mw",
        "timestamp": 1571824295
    },
    {
        "content": "<p>too bad there's not more <code>debug!</code> instrumentation in those files. :)</p>",
        "id": 178838420,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824382
    },
    {
        "content": "<p>but I can add it readily enough</p>",
        "id": 178838431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824388
    },
    {
        "content": "<p><code>__ZN4core6Object6method17h3c307b2b614e132dE</code> probably comes from <code>libcore</code>?</p>",
        "id": 178838606,
        "sender_full_name": "mw",
        "timestamp": 1571824506
    },
    {
        "content": "<p>i.e. it is already present in <code>libcore.rlib</code> which then gets linked into <code>libstd.dylib</code>?</p>",
        "id": 178838644,
        "sender_full_name": "mw",
        "timestamp": 1571824546
    },
    {
        "content": "<p>let me see</p>",
        "id": 178838776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824646
    },
    {
        "content": "<p><code>nm -m libcore.rlib</code> says: </p>\n<div class=\"codehilite\"><pre><span></span>...\n0000000000000000 (__TEXT,__text) external __ZN4core6Object6method17hacde9ba387d5faafE\n...\n</pre></div>",
        "id": 178838865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824703
    },
    {
        "content": "<p>so yes that sounds right</p>",
        "id": 178838876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824715
    },
    {
        "content": "<p>is compiling the downstream crate going to transitively look at libcore.rlib?</p>",
        "id": 178838897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824738
    },
    {
        "content": "<p>even if the downstream crate only references libstd, not libcore?</p>",
        "id": 178838916,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824751
    },
    {
        "content": "<p>(also, try compiling with <code>-Z symbol_mangling_version=v0</code> -- then generic args will show up in symbol names)</p>",
        "id": 178839038,
        "sender_full_name": "mw",
        "timestamp": 1571824853
    },
    {
        "content": "<p>is the downstream crate referencing anything from libcore?</p>",
        "id": 178839096,
        "sender_full_name": "mw",
        "timestamp": 1571824896
    },
    {
        "content": "<p>well, there's kind of a diamond situation</p>",
        "id": 178839163,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824942
    },
    {
        "content": "<p>libtest has <a href=\"https://github.com/pnkfelix/rust_issue_64872_repro/blob/17078083f37b9e57668e1f8df9e63d60518151d7/sysroot_src/src/libtest/Cargo.toml#L11\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust_issue_64872_repro/blob/17078083f37b9e57668e1f8df9e63d60518151d7/sysroot_src/src/libtest/Cargo.toml#L11\">two upstream deps</a>, <code>getopts</code> and <code>std2</code></p>",
        "id": 178839175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571824961
    },
    {
        "content": "<p>and then just does <code>extern crate getopts;</code> (and nothing else) in its <a href=\"https://github.com/pnkfelix/rust_issue_64872_repro/blob/17078083f37b9e57668e1f8df9e63d60518151d7/sysroot_src/src/libtest/lib.rs#L1\" target=\"_blank\" title=\"https://github.com/pnkfelix/rust_issue_64872_repro/blob/17078083f37b9e57668e1f8df9e63d60518151d7/sysroot_src/src/libtest/lib.rs#L1\"><code>lib.rs</code></a></p>",
        "id": 178839227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825017
    },
    {
        "content": "<p>getopts references <code>std::Object</code></p>",
        "id": 178839247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825041
    },
    {
        "content": "<p>(sorry for the potential confusion; at some point I renamed the local <code>std</code> to <code>std2</code>)</p>",
        "id": 178839305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825070
    },
    {
        "content": "<p>and it fails when trying to link libtest, right?</p>",
        "id": 178839342,
        "sender_full_name": "mw",
        "timestamp": 1571825106
    },
    {
        "content": "<p>anyway, the point is, <code>libtest</code> does not reference anything from <code>libcore</code> itself. <code>getopts</code> is <em>indirectly</em> referencing <code>trait Object</code>, which is defined in <code>libcore</code> but re-exported from <code>libstd</code></p>",
        "id": 178839355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825116
    },
    {
        "content": "<p>that's right, it fails when trying to link <code>libtest</code>.</p>",
        "id": 178839359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825126
    },
    {
        "content": "<p>/me has to go get lunch now</p>",
        "id": 178839493,
        "sender_full_name": "mw",
        "timestamp": 1571825248
    },
    {
        "content": "<p>k. talk later.</p>",
        "id": 178839557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825293
    },
    {
        "content": "<p>I'm still not entirely clear on what the situation is exactly. I'll take another look later, actually trying to compile the repro locally</p>",
        "id": 178839569,
        "sender_full_name": "mw",
        "timestamp": 1571825304
    },
    {
        "content": "<p>did it not work out of the box for you?</p>",
        "id": 178839587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825322
    },
    {
        "content": "<p>(it might not repro on linux)</p>",
        "id": 178839598,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825331
    },
    {
        "content": "<p>I did not try</p>",
        "id": 178839599,
        "sender_full_name": "mw",
        "timestamp": 1571825332
    },
    {
        "content": "<p>oh okay</p>",
        "id": 178839603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825336
    },
    {
        "content": "<p>I only have linux available. we'll see</p>",
        "id": 178839615,
        "sender_full_name": "mw",
        "timestamp": 1571825347
    },
    {
        "content": "<p>whoa! removing <code>-C debuginfo=2</code> made the link succeed (?!)</p>",
        "id": 178839819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825537
    },
    {
        "content": "<p>I did not expect that...</p>",
        "id": 178839824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825545
    },
    {
        "content": "<p>namely, removing it from the compilation of <code>getopts</code> make the link succeed.</p>",
        "id": 178839855,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571825597
    },
    {
        "content": "<p>hmm. I guess we must look at the libcore.rlib and/or libcore.rmeta even after we've compiled libstd to a dylib...?</p>",
        "id": 178842849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571828889
    },
    {
        "content": "<p>Yes, Rust dylibs don't duplicate the crate metadata of rlibs they include (I think)</p>",
        "id": 178843362,
        "sender_full_name": "mw",
        "timestamp": 1571829429
    },
    {
        "content": "<p>hmm</p>",
        "id": 178843496,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829583
    },
    {
        "content": "<p>so reviewing things, I don't know how to \"fix\" this as is</p>",
        "id": 178843501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829593
    },
    {
        "content": "<p>We compile libcore as an rlib (only)</p>",
        "id": 178843558,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829612
    },
    {
        "content": "<p>and then later we compile libstd as a dylib</p>",
        "id": 178843567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829621
    },
    {
        "content": "<p>but we've already a decision to export the monomorphization from libcore</p>",
        "id": 178843581,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829638
    },
    {
        "content": "<p>and the downstream crates see that export in the metadata</p>",
        "id": 178843590,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829655
    },
    {
        "content": "<p>But its possible the \"right\" fix here is to change the user's code, so that they start compiling libcore with <code>crate-type = [\"dylib\", \"rlib\"]</code></p>",
        "id": 178843610,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829683
    },
    {
        "content": "<p>is that what they should have been doing from the outset anyway?</p>",
        "id": 178843619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829697
    },
    {
        "content": "<p>Or are you supposed to be able to create crate A as an rlib, and then have crate B wrap it up as a dylib, and downstream crates C, D, etc that only see B should all be unaware that crate A was compiled as an rlib?</p>",
        "id": 178843692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829753
    },
    {
        "content": "<p>because if you're supposed to be able to have that setup (with A:rlib, B:dylib, and no one cares), then it seems like we <em>have</em> to have B revise the crate metadata for what it took from A so that it doesn't re-export the generics.</p>",
        "id": 178843778,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571829849
    },
    {
        "content": "<p>it <em>should</em> work</p>",
        "id": 178843835,
        "sender_full_name": "mw",
        "timestamp": 1571829931
    },
    {
        "content": "<p><a href=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\" target=\"_blank\" title=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\">https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247</a> this piece of code is supposed to filter monomorphizations out in the crate that would <em>use</em> them</p>",
        "id": 178843909,
        "sender_full_name": "mw",
        "timestamp": 1571829976
    },
    {
        "content": "<p>and symbol name disambiguation should take care of there being no symbol conflicts</p>",
        "id": 178843936,
        "sender_full_name": "mw",
        "timestamp": 1571830009
    },
    {
        "content": "<p>ah sorry, you linked that before and I didn't include it in my instrumentation</p>",
        "id": 178843969,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571830073
    },
    {
        "content": "<p>the error does not seem to occur on linux, btw :/</p>",
        "id": 178844037,
        "sender_full_name": "mw",
        "timestamp": 1571830116
    },
    {
        "content": "<p>right, I think the original bug filer noted the same</p>",
        "id": 178844060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571830147
    },
    {
        "content": "<p>ugh rustc_metadata doesn't have debug! logging. :(</p>",
        "id": 178844282,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571830400
    },
    {
        "content": "<p>... or... I can't use in the <code>provide!</code> macro...?</p>",
        "id": 178844346,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571830453
    },
    {
        "content": "<p>or, heh, i have to import it.</p>",
        "id": 178844473,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571830615
    },
    {
        "content": "<p>/me knows how to program in Rust, really</p>",
        "id": 178844487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571830625
    },
    {
        "content": "<p>on linux, the symbol is question is listed as undefined by <code>nm</code> for <code>libtest.so</code></p>",
        "id": 178844615,
        "sender_full_name": "mw",
        "timestamp": 1571830797
    },
    {
        "content": "<p>but the linker just doesn't seem to care there?</p>",
        "id": 178844668,
        "sender_full_name": "mw",
        "timestamp": 1571830810
    },
    {
        "content": "<p>because it's also unused?</p>",
        "id": 178844675,
        "sender_full_name": "mw",
        "timestamp": 1571830818
    },
    {
        "content": "<p>hmm</p>",
        "id": 178844686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571830832
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\" target=\"_blank\" title=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\">https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247</a> this piece of code is supposed to filter monomorphizations out in the crate that would <em>use</em> them</p>\n</blockquote>\n<p>in the above statement, <em>which</em> crate do you expect to do the filtering here? getopts?</p>",
        "id": 178844900,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571831002
    },
    {
        "content": "<p>in my instrumentation, <code>remove_generics</code> always ends up false (for both <code>getopts</code> and for <code>test</code>)</p>",
        "id": 178845062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571831107
    },
    {
        "content": "<p>for getopts, the linkage is always <code>None</code>. For test, the linkage is always <code>Some(Static)</code>. (and for std, the linkage is always <code>Some(Static)</code>)</p>",
        "id": 178845236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571831202
    },
    {
        "content": "<p>libgetopts</p>",
        "id": 178845241,
        "sender_full_name": "mw",
        "timestamp": 1571831207
    },
    {
        "content": "<p>so, when compiling <code>getopts</code> then <code> remove_generics</code> should be true for <code>libcore</code> and <code>libstd</code></p>",
        "id": 178845412,
        "sender_full_name": "mw",
        "timestamp": 1571831348
    },
    {
        "content": "<p>okay. I can dig more into why its not</p>",
        "id": 178845426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571831372
    },
    {
        "content": "<p>hmm. we are passing <code>-C prefer-dynamic</code> to compile <code>libstd</code>...</p>",
        "id": 178846039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571831970
    },
    {
        "content": "<p>and that affects the <code>dependency_formats</code> computation</p>",
        "id": 178846048,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571831986
    },
    {
        "content": "<p>namely here: <a href=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/dependency_format.rs#85\" target=\"_blank\" title=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/dependency_format.rs#85\">https://dxr.mozilla.org/rust/source/src/librustc_metadata/dependency_format.rs#85</a></p>",
        "id": 178846117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571832004
    },
    {
        "content": "<p>but for <code>getopts</code> we are not passing <code>-C prefer-dynamic</code></p>",
        "id": 178846188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571832080
    },
    {
        "content": "<p>Nope I'm not going to be able to just walk through this code</p>",
        "id": 178846252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571832134
    },
    {
        "content": "<p>you see why I want to get rid of Rust dylibs <code>:P</code></p>",
        "id": 178846255,
        "sender_full_name": "mw",
        "timestamp": 1571832136
    },
    {
        "content": "<p>I'll have to instrument <code>depedency_format::calculate_type</code> to figure out what's going on there</p>",
        "id": 178846266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571832155
    },
    {
        "content": "<p>I think only <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> really understands dependency formats</p>",
        "id": 178846281,
        "sender_full_name": "mw",
        "timestamp": 1571832169
    },
    {
        "content": "<blockquote>\n<p>but for <code>getopts</code> we are not passing <code>-C prefer-dynamic</code></p>\n</blockquote>\n<p>you might be on to something here. <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> might be better able to help you.</p>",
        "id": 178846408,
        "sender_full_name": "mw",
        "timestamp": 1571832305
    },
    {
        "content": "<p>yeah. I figure I'll get a little more info about what's happening whtin <code>dependency_format</code></p>",
        "id": 178846423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571832327
    },
    {
        "content": "<p>(just adding <code>-C prefer-dynamic</code> to the <code>getopts</code> compilation didn't fix anything, though)</p>",
        "id": 178846431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571832346
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> , in <a href=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\" target=\"_blank\" title=\"https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247\">https://dxr.mozilla.org/rust/source/src/librustc_metadata/cstore_impl.rs#247</a> , it currently sets <code>remove_generics</code> to true only if it sees linkage = <code>Some(IncludedFromDylib)</code> or linkage = <code>Some(Dynamic)</code>. But what is linkage = <code>None</code> supposed to denote there?</p>",
        "id": 178848790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571834171
    },
    {
        "content": "<p>I guess you already pointed out that only <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> understands dependency formats</p>",
        "id": 178848827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571834221
    },
    {
        "content": "<p>(anyway I would think that if its <code>None</code>, we shouldn't be assuming we can load an upstream dep from it)</p>",
        "id": 178849044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571834394
    },
    {
        "content": "<p>yes, I think this is a matrix of crate-nums</p>",
        "id": 178849098,
        "sender_full_name": "mw",
        "timestamp": 1571834416
    },
    {
        "content": "<p>and <code>None</code> means that that crates just does not dependent on that other crate</p>",
        "id": 178849115,
        "sender_full_name": "mw",
        "timestamp": 1571834436
    },
    {
        "content": "<p>and if that's the case, then there shouldn't <em>be</em> anything to remove in the first place?</p>",
        "id": 178849147,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571834469
    },
    {
        "content": "<p>(or rather, there shouldn't be any imports, and therefore it shouldn't matter if we remove the generics or no)</p>",
        "id": 178849234,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571834535
    },
    {
        "content": "<p>yeah, the matrix thing actually doesn;'t make sense, does it?</p>",
        "id": 178849246,
        "sender_full_name": "mw",
        "timestamp": 1571834548
    },
    {
        "content": "<p>maybe crate nums would have to be translated?</p>",
        "id": 178849259,
        "sender_full_name": "mw",
        "timestamp": 1571834563
    },
    {
        "content": "<p>I'm starting to think more and more that that code does not do what I thought it did</p>",
        "id": 178849350,
        "sender_full_name": "mw",
        "timestamp": 1571834650
    },
    {
        "content": "<p>what I thought it did was: if the upstream crate in question is a dylib or an rlib that comes packaged as part of a dylib, then remove the generics</p>",
        "id": 178849401,
        "sender_full_name": "mw",
        "timestamp": 1571834718
    },
    {
        "content": "<blockquote>\n<p>and <code>None</code> means that that crates just does not dependent on that other crate</p>\n</blockquote>\n<p>in the above, do you mean \"not <em>immediately</em> dependent\" ?</p>",
        "id": 178849686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571834974
    },
    {
        "content": "<p>e.g. getopts says it depends <em>just</em> on libstd</p>",
        "id": 178849708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571834993
    },
    {
        "content": "<p>and so it only has a single crate in its tcx.sess.crate_types (which I believe corresponds to libstd)</p>",
        "id": 178849779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835022
    },
    {
        "content": "<p>but you still have DefId's running around for other crates like core</p>",
        "id": 178849798,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835032
    },
    {
        "content": "<p>So there can be an indirect dependency</p>",
        "id": 178849809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835050
    },
    {
        "content": "<p>right?</p>",
        "id": 178849819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835057
    },
    {
        "content": "<p>yeah, and shouldn't it also depend on std2 in the example?</p>",
        "id": 178849826,
        "sender_full_name": "mw",
        "timestamp": 1571835063
    },
    {
        "content": "<p>oh, sorry, std2 <em>is</em> the std</p>",
        "id": 178849837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835071
    },
    {
        "content": "<p>I think that supposed alpha-rename in my code is causing more harm than good in our discussion. :)</p>",
        "id": 178849859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835097
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[dependencies.std2]\npath = &quot;../libstd&quot;\n</pre></div>",
        "id": 178849891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835122
    },
    {
        "content": "<p>Okay, here's an idea: <code>collector::should_monomorphize_locally</code> should, in its determination of whether it can link to something upstream, incorporate a similar computation to what <code>cstore_impl::exported_symbols</code> is doing. Right?</p>",
        "id": 178850773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835714
    },
    {
        "content": "<p>that is, we should be trying to use the same logic when we tag a DefId as being something we can reliably link to from upstream</p>",
        "id": 178850838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835735
    },
    {
        "content": "<p>that is, from the conversation so far, it sounds like a mismatch in those two computations <em>within</em> the compilation of getopts</p>",
        "id": 178850998,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835858
    },
    {
        "content": "<p>(as opposed to a mismatch across compiles of two (or more) distinct crates)</p>",
        "id": 178851020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571835883
    },
    {
        "content": "<p>(and now, reading over the comment thread on PR <a href=\"https://github.com/rust-lang/rust/issues/64324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64324\">#64324</a>, I'm relieved to note that it seems like <em>everyone</em>, including <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> , finds the code here confusing...)</p>",
        "id": 178851652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571836334
    },
    {
        "content": "<p><code>should_monomorphize_locally </code> is based on <code>upstream_monomorphization_for</code> which in turn is based on <code>exported_symbols</code>, so the check is already done</p>",
        "id": 178854185,
        "sender_full_name": "mw",
        "timestamp": 1571837972
    },
    {
        "content": "<p>hmm</p>",
        "id": 178854297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838040
    },
    {
        "content": "<p>so those are actually already factored in a way as not to duplicate the logic</p>",
        "id": 178854366,
        "sender_full_name": "mw",
        "timestamp": 1571838093
    },
    {
        "content": "<p>The result is nonetheless inconsistent</p>",
        "id": 178854382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838102
    },
    {
        "content": "<p>because the filtering in <code>cstore_impl::exported_symbols</code> seems to be broken, somehow</p>",
        "id": 178854453,
        "sender_full_name": "mw",
        "timestamp": 1571838126
    },
    {
        "content": "<p>Right</p>",
        "id": 178854465,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838135
    },
    {
        "content": "<p>What do you think of this: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">243</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">245</span><span class=\"p\">,</span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">provide</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cdata</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"c1\">// from this crate.</span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">formats</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">dependency_formats</span><span class=\"p\">(</span><span class=\"n\">LOCAL_CRATE</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">remove_generics</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">formats</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">krate</span><span class=\"p\">.</span><span class=\"n\">as_usize</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linkage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">krate</span><span class=\"p\">.</span><span class=\"n\">as_usize</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">linkage</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Linkage</span>::<span class=\"n\">IncludedFromDylib</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Linkage</span>::<span class=\"n\">Dynamic</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"c1\">// rust-lang/rust#64872 if we got `None`, then this</span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"c1\">// must be an indirect dependency (e.g. a symbol in</span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"c1\">// `core` that we&#39;re accessing through `std`). Best to</span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"c1\">// assume we cannot load such monomorphization either.</span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178854549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838213
    },
    {
        "content": "<p>I'm not thrilled with the fact that I don't really understand the <code>linkage</code> computation.</p>",
        "id": 178854630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838257
    },
    {
        "content": "<p>i.e., should <code>dependency_formats</code> instead be returning a list that <em>includes</em> the crates that we depend on transitively?</p>",
        "id": 178854692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838316
    },
    {
        "content": "<p>yeah, looks like <code>None</code> and <code>Some(NotLinked)</code> are the same</p>",
        "id": 178854889,
        "sender_full_name": "mw",
        "timestamp": 1571838465
    },
    {
        "content": "<p>... but this doesn't set <code>remove_generics</code> to true for <code>Some(NotLinked)</code> either ...</p>",
        "id": 178854961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838496
    },
    {
        "content": "<p>which seems wrong too</p>",
        "id": 178854981,
        "sender_full_name": "mw",
        "timestamp": 1571838514
    },
    {
        "content": "<p>but maybe in that case the list is always empty to begin with?</p>",
        "id": 178855007,
        "sender_full_name": "mw",
        "timestamp": 1571838535
    },
    {
        "content": "<p>you mean how <code>Some(NotLinked)</code> is not handled?</p>",
        "id": 178855010,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838538
    },
    {
        "content": "<blockquote>\n<p>you mean how <code>Some(NotLinked)</code> is not handled?</p>\n</blockquote>\n<p>yes</p>",
        "id": 178855029,
        "sender_full_name": "mw",
        "timestamp": 1571838549
    },
    {
        "content": "<p>Maybe.</p>",
        "id": 178855051,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838554
    },
    {
        "content": "<p>Certainly the list in this case is non-empty.</p>",
        "id": 178855062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838564
    },
    {
        "content": "<p>Okay well the diff I showed you above does \"fix\" this</p>",
        "id": 178855083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838580
    },
    {
        "content": "<p>Not sure if its a <em>good</em> fix</p>",
        "id": 178855095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838592
    },
    {
        "content": "<p>I''ve added some debug output that gives me the following for getopts:</p>",
        "id": 178855156,
        "sender_full_name": "mw",
        "timestamp": 1571838607
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>crate: &quot;core&quot;\n - (NonGeneric(DefId(2:16 ~ core[ecd7]::unused[0])), Rust)\n - (Generic(DefId(2:11 ~ core[ecd7]::Object[0]::method[0]), [&amp;u32]), Rust)\ncrate: &quot;std&quot;\n - (NonGeneric(DefId(1:23 ~ std[c479]::__rdl_alloc[0])), Rust)\n - (NonGeneric(DefId(1:26 ~ std[c479]::__rdl_alloc_zeroed[0])), Rust)\n - (NonGeneric(DefId(1:25 ~ std[c479]::__rdl_realloc[0])), Rust)\n - (NonGeneric(DefId(1:24 ~ std[c479]::__rdl_dealloc[0])), Rust)\n - (NonGeneric(DefId(1:20 ~ std[c479]::rust_eh_personality[0])), Rust)\ncrate: &quot;compiler_builtins&quot;\n - (NonGeneric(DefId(3:13 ~ compiler_builtins[6753]::probestack[0]::__rust_probestack[0])), Rust)\n</pre></div>",
        "id": 178855160,
        "sender_full_name": "mw",
        "timestamp": 1571838612
    },
    {
        "content": "<blockquote>\n<p>Not sure if its a good fix</p>\n</blockquote>\n<p>Maybe it should be:</p>\n<div class=\"codehilite\"><pre><span></span>            match linkage {\n                 Some(Linkage::Static) =&gt; false,\n                 _ =&gt; true,\n            }\n</pre></div>",
        "id": 178855266,
        "sender_full_name": "mw",
        "timestamp": 1571838706
    },
    {
        "content": "<p>heh</p>",
        "id": 178855322,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838723
    },
    {
        "content": "<p>I like it.</p>",
        "id": 178855375,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838762
    },
    {
        "content": "<p>Every other case does indeed sound like something where you shoudn't be attempting to load monomorphizations</p>",
        "id": 178855406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838781
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/issues/64324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64324\">#64324</a> already is kind of a work-around)</p>",
        "id": 178855543,
        "sender_full_name": "mw",
        "timestamp": 1571838857
    },
    {
        "content": "<p>Okay I'll see about putting up a PR with that.</p>",
        "id": 178855549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838859
    },
    {
        "content": "<p>hardest part will be making unit test(s) that accurately capture the original problem.</p>",
        "id": 178855571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838875
    },
    {
        "content": "<p>Yeah, r? Alex on it to be sure :)</p>",
        "id": 178855579,
        "sender_full_name": "mw",
        "timestamp": 1571838877
    },
    {
        "content": "<p>I guess I could just turn my current reduction into a <code>run-make</code> test</p>",
        "id": 178855652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838946
    },
    {
        "content": "<p>or do we already have tests (outside of <code>run-make</code>) that exercise <code>no_core</code>+<code>no_std</code>? I guess I should look for that first.</p>",
        "id": 178855747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571838974
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 178858337,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571840704
    },
    {
        "content": "<p>reading some backscroll now <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 178858350,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571840710
    },
    {
        "content": "<p>sounds like y'all got a fix in the meantime though?</p>",
        "id": 178858456,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571840787
    },
    {
        "content": "<p>happy to help clear things up if anything remains</p>",
        "id": 178858460,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571840792
    },
    {
        "content": "<p><code>dependency_format</code> is the bane of my existence</p>",
        "id": 178858468,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571840800
    },
    {
        "content": "<p>I'm very sad I had to write that code</p>",
        "id": 178858473,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571840805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> what do you think of the hypotheses up above? Especially with respect to the meaning of <code>linkage == None</code> ?</p>",
        "id": 178865330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571844563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> oh hm I didn't read closely enough to see the possible hypotheses</p>",
        "id": 178865500,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571844631
    },
    {
        "content": "<p>do you have a link to the message?</p>",
        "id": 178865507,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571844635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> sorry, i missed your follow up Q yesterday. This is the specific thing I was asking about: <a href=\"#narrow/stream/131828-t-compiler/topic/dylib.20linking.20.2364872/near/178848790\" title=\"#narrow/stream/131828-t-compiler/topic/dylib.20linking.20.2364872/near/178848790\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/dylib.20linking.20.2364872/near/178848790</a></p>",
        "id": 178929218,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571904069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> oh ok that sounds reasonable to me as a possible solution</p>",
        "id": 178960181,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571928859
    },
    {
        "content": "<p>if it passes tests sounds good to me :)</p>",
        "id": 178960189,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1571928866
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> , regarding your comment on the -Z flag: I'm not sure if I'm communicating the situation clearly here</p>",
        "id": 179444739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572449783
    },
    {
        "content": "<p>My goal at this point is to address the semantic regression</p>",
        "id": 179444764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572449798
    },
    {
        "content": "<p>If there is a performance regression in terms of lack of sharing, that is a evidence of further work that does indeed need to be done. (Or rather, the fact that the <code>-Z</code> flag is currently necessary <em>is</em> such evidence showing that further work is necessary...)</p>",
        "id": 179444833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572449840
    },
    {
        "content": "<p>But I do not think we should be blocking PR <a href=\"https://github.com/rust-lang/rust/issues/65781\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65781\">#65781</a> based on the question of whether we witness a reduction in shared generics</p>",
        "id": 179444881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572449875
    },
    {
        "content": "<p>Or maybe let me put it this way: Can you, in your feedback, please address the scenario I described in my github <a href=\"https://github.com/rust-lang/rust/pull/65781#issuecomment-547345124\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65781#issuecomment-547345124\">comment on the PR</a> ?</p>",
        "id": 179445247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572450078
    },
    {
        "content": "<p>(Of course one possible response to all of this is to say \"we should not be prioritizing a fix to the linkage problem of rlib &lt;- dylib &lt;- rlib &lt;- dylib over the (as of yet unmeasured) cost of less sharing of generics for rlibs where are currently observing <code>None</code> for the dependency_format calculation\")</p>",
        "id": 179446014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572450477
    },
    {
        "content": "<p>I'm going to nominate this for discussion at the team meeting tomorrow; I think I need more input (unless I find a better fix in the meantime that is also readily backportable)</p>",
        "id": 179446160,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572450544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> oh sorry yeah sure, I'll leave comments on the PR</p>",
        "id": 179449005,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1572452033
    },
    {
        "content": "<p>Thanks for the feedback and background info <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> !!! I think the steps you outlined sound good</p>",
        "id": 179456410,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572456728
    }
]