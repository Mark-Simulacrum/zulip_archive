[
    {
        "content": "<p>The roadmap mentions <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2229-capture-disjoint-fields.md\">this RFC</a>, and I have a question regarding the current behavior of iterators.</p>\n<p>So say you have this code (this is a WIP PR of mir-opt const-prop circa April)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// Struct declaration (abridged)</span>\n<span class=\"k\">struct</span> <span class=\"nc\">ConstPropagator</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ecx</span>: <span class=\"nc\">InterpCx</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ConstPropMachine</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">locals_of_current_block</span>: <span class=\"nc\">BitSet</span><span class=\"o\">&lt;</span><span class=\"n\">Local</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// (...)</span>\n\n<span class=\"c1\">// Then, inside of a function:</span>\n<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">locals_of_current_block</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"bp\">Self</span>::<span class=\"n\">remove_const</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ecx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This code would not compile, for <code>self.locals_of_current_block</code> is borrowed immutably by <code>iter()</code>, and <code>Self::remove_const</code> needs to borrow <code>self.ecx</code> mutably. This, however, doesn't make sense to me if the compiler was able to borrow disjoint fields independently of one another back then. </p>\n<p>So, I'm guessing that this error has something to do with the aforementioned RFC. Is there a closure under the hood?</p>",
        "id": 203450830,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1594334315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> this actually doesn't have anything to do with RFC 2229, there is no closure  here</p>",
        "id": 204207155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594993459
    },
    {
        "content": "<p>also, I would expect this to type-check</p>",
        "id": 204207171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594993471
    },
    {
        "content": "<p>that is, I do not expect a borrow-checker error, based on what I see in this snippet alone</p>",
        "id": 204207215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594993502
    },
    {
        "content": "<p>Really?? Oh noes. I wish I had known this back then. I could've made a copy of the error. I remember it as being a borrow-checker error.</p>",
        "id": 204242715,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011115
    },
    {
        "content": "<p>I mean you probably were getting a borrow check error, it's just that it was probably due to some other code, or perhaps you didn't quite describe it correctly in your snippet</p>",
        "id": 204242792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595011171
    },
    {
        "content": "<p>Yes, I think that's it</p>",
        "id": 204242823,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011190
    },
    {
        "content": "<p>e.g., maybe you had <code>self.iter_locals_of_current_block()</code> or something?</p>",
        "id": 204242825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595011192
    },
    {
        "content": "<p>basically I would guess that something was borrowing <code>self</code> as a whole</p>",
        "id": 204242881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595011204
    },
    {
        "content": "<p>Yes</p>",
        "id": 204242899,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011212
    },
    {
        "content": "<p>Yes, that was it</p>",
        "id": 204242909,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011215
    },
    {
        "content": "<p>Un</p>",
        "id": 204242914,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011218
    },
    {
        "content": "<p>Um</p>",
        "id": 204242919,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011219
    },
    {
        "content": "<p>It was</p>",
        "id": 204242925,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011221
    },
    {
        "content": "<p>in any case, I think the next improvement after closures (and perhaps polonius...) would likely be to try and have some way for methods to declare the fields they actually use</p>",
        "id": 204242940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595011231
    },
    {
        "content": "<p><code>self.remove_const(local)</code></p>",
        "id": 204242948,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011234
    },
    {
        "content": "<p>I don't quite know what it looks like</p>",
        "id": 204242949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595011235
    },
    {
        "content": "<p>but it's a common ergonomic pain point for sure</p>",
        "id": 204242964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595011244
    },
    {
        "content": "<p>in my ideal world we might even be able to infer it... but ...</p>",
        "id": 204243010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595011269
    },
    {
        "content": "<p>And that borrowed self mutably</p>",
        "id": 204243018,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011273
    },
    {
        "content": "<p>(Even tho internally it didn't have any conflict, because it mutated only <code>ecx</code>)</p>",
        "id": 204243153,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011326
    },
    {
        "content": "<p>Oh, being able to declare which fields you use would be so nice</p>",
        "id": 204243228,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011379
    },
    {
        "content": "<p>I mean being able to infer it would be nicer</p>",
        "id": 204243253,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011391
    },
    {
        "content": "<p>But that feels to me like it would require some serious effort</p>",
        "id": 204243335,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011437
    },
    {
        "content": "<p>Now, would the compiler be able to... check if you're using only the fields that you say you're using?</p>",
        "id": 204243453,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011470
    },
    {
        "content": "<p>Ideally I'd want that to error if I'm using more than I say I do, if that makes sense</p>",
        "id": 204243552,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595011504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> yes I imagine such checking would be necessary for soundness of the feature.</p>",
        "id": 204255962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you reckon that such checking is possible? I don't know how to weigh the difficulty of it. It must be, right?</p>",
        "id": 204256557,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595018521
    },
    {
        "content": "<p>It depends on what your expectations are for such a feature</p>",
        "id": 204256703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018607
    },
    {
        "content": "<p>e.g. if a method <code>m</code> calls a method <code>p</code></p>",
        "id": 204256809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018667
    },
    {
        "content": "<p>and <code>m</code> states that it uses (only) fields <code>self.f</code> and <code>self.g</code> (of <code>self</code>, that is)</p>",
        "id": 204256850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018689
    },
    {
        "content": "<p>and <code>p</code> has no declaration in place</p>",
        "id": 204256862,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018699
    },
    {
        "content": "<p>should that be rejected?</p>",
        "id": 204256875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018706
    },
    {
        "content": "<p>personally I suspect that if we made significant progress on declared fields we might want to revisit the \"fields in traits\" RFC, as that would pretty closely match possible functionality</p>",
        "id": 204256936,
        "sender_full_name": "simulacrum",
        "timestamp": 1595018752
    },
    {
        "content": "<p>If you look at how we handle type-checking elsewhere, we tend to require callees to declare such things up front</p>",
        "id": 204256938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> so I guess my answer is: I don't think it would be hard to implement in the compiler; the harder part is whether people will be happy about all the declarations they'd have to add in practice to use the feature.</p>",
        "id": 204257050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018810
    },
    {
        "content": "<p>(but maybe we'd loosen our restrictions here, e.g. maybe non-<code>pub</code> methods in a crate would allow their field usage to be inferred...)</p>",
        "id": 204257118,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595018855
    },
    {
        "content": "<p>That sounds like a fair compromise</p>",
        "id": 204257387,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595018978
    },
    {
        "content": "<p>I guess that as the compiler got smarter, you could start omitting some of those declarations as well <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 204257488,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595019016
    },
    {
        "content": "<p>Well I mean, if it ever got that far</p>",
        "id": 204257519,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595019028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nhey! could you explain what the ergonomic issues are? I am not sure I get it and curious - thanks</p>",
        "id": 204297003,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595071919
    },
    {
        "content": "<p>to determine, on say: <code>&amp;mut self</code> that not the entire struct needs to be mutable but only part of it based on actual accesses, and then ease the borrow checker rules?</p>",
        "id": 204297104,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595072053
    },
    {
        "content": "<p>like <code>&amp;mut self::(field1, field2, field3)</code> or something?</p>",
        "id": 204297326,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595072466
    },
    {
        "content": "<p>I think my suggested syntax was <code>self: &amp;mut Self { a, b, c }</code> or similar (i.e. have a syntax for refining a struct type by which fields are available, which would be related by subtyping etc.) but that's mostly bikeshedding</p>",
        "id": 204298405,
        "sender_full_name": "eddyb",
        "timestamp": 1595074589
    },
    {
        "content": "<p>{ } is quite good actually! But that makes it a dedicated type?</p>",
        "id": 204308718,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595092009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> the information has to be in the type anyway in order for it to correctly propagate and get checked</p>",
        "id": 204324197,
        "sender_full_name": "eddyb",
        "timestamp": 1595118347
    },
    {
        "content": "<p>otherwise maybe you managed to limit field access but e.g. you could still pass that <code>self</code> to a function that expects a whole <code>&amp;mut Foo</code></p>",
        "id": 204324242,
        "sender_full_name": "eddyb",
        "timestamp": 1595118379
    },
    {
        "content": "<p>it requires far too many special-cases if not done through the typesystem</p>",
        "id": 204324246,
        "sender_full_name": "eddyb",
        "timestamp": 1595118402
    },
    {
        "content": "<p>I'm not saying it's a bad thing, just interesting!</p>",
        "id": 204369939,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595191295
    },
    {
        "content": "<p>yeah, it does really want to be part of the type</p>",
        "id": 205964374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596577222
    },
    {
        "content": "<p>though egads</p>",
        "id": 205964392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596577232
    },
    {
        "content": "<p>:)</p>",
        "id": 205964394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596577235
    },
    {
        "content": "<p>but maybe we can add some inference in the future, we should enable it to begin with</p>",
        "id": 205964406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596577243
    }
]