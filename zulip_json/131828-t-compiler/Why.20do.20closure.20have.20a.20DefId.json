[
    {
        "content": "<p>Hello!<br>\nThis is rather a broad question I suppose but during name resolution closures get assigned a <code>DefId</code> whereas they are never the owners of any <code>HirId</code>. All the children hir node of a closure (and the closure itself actually) have the enclosing fn as <code>HirId</code> owner.<br>\nThis behavior is relied upon in a lot of different places in the compiler actually: all  nodes in a function are indexed using their <code>local_id</code> against a same unique parent owner but sometime the <code>DefId</code> of the closure is accessed for various checks.</p>",
        "id": 199681597,
        "sender_full_name": "marmeladema",
        "timestamp": 1591221083
    },
    {
        "content": "<p>This is actually why internally the compiler has to maintain lookup tables to go through <code>DefId</code> -&gt; <code>HirId</code> and <code>HirId</code> -&gt; <code>DefId</code></p>",
        "id": 199681757,
        "sender_full_name": "marmeladema",
        "timestamp": 1591221193
    },
    {
        "content": "<p>IIUC we need a defid because later stages of the compiler primarily use DefIds for stuff. In particular, the closure desugars to a struct that implements the <code>Fn*</code> traits. In order to do stuff with that closure at later stages in the compilation, that struct needs a defid.</p>",
        "id": 199687923,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591225435
    },
    {
        "content": "<p>(take with a grain of salt, as I'm not really sure of this)</p>",
        "id": 199687980,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591225452
    },
    {
        "content": "<p>I find it strange that the statements inside a closure aren't tied to the DefId of the closure, not that closures have a DefId to begin with. Is there a reason this must be so? Would changing this reduce the number of mappings we have to store somehow?</p>",
        "id": 199697224,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591234772
    },
    {
        "content": "<p>(Seems like a good candidate for a major change proposal)</p>",
        "id": 199697301,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591234863
    },
    {
        "content": "<p>I tried to change it and make the DefId a real owner during lowering, and it breaks tons of stuff on later compilation stages because there are a lot of list of local id only that all refers to the same owner, especially in region checking. C</p>",
        "id": 199713627,
        "sender_full_name": "marmeladema",
        "timestamp": 1591256148
    },
    {
        "content": "<p>and the fix is not just to store list of HirId instead. Some algorithms need to be \"fixed\" for that new layout of hir ids</p>",
        "id": 199713732,
        "sender_full_name": "marmeladema",
        "timestamp": 1591256242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20closure.20have.20a.20DefId/near/199713627\">said</a>:</p>\n<blockquote>\n<p>I tried to change it and make the DefId a real owner during lowering, and it breaks tons of stuff on later compilation stages because there are a lot of list of local id only that all refers to the same owner, especially in region checking. C</p>\n</blockquote>\n<p>Obviously changing it would be quite a bit of work, and this is a practical reason not to make this change, but is there a fundamental reason that statements inside a closure aren't tied to the <code>DefId</code> of a closure?</p>",
        "id": 199772741,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591287877
    },
    {
        "content": "<p>I cannot really answer that question but some part like region checking uses that behavior<br>\nmaybe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> knows a bit more?</p>",
        "id": 199789294,
        "sender_full_name": "marmeladema",
        "timestamp": 1591295493
    },
    {
        "content": "<p>You might be able to find out more on the wg-rfc-2229 channel, since iiuc, they deal with closures and borrow checking as their bread and butter</p>",
        "id": 199791718,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591296633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> suggests that <a href=\"https://github.com/rust-lang/rust/pull/63849#issuecomment-537270464\">this would indeed be possible</a>. I do think this kind of change would need to go through MCP though.</p>",
        "id": 199805784,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591303292
    },
    {
        "content": "<p>By the way what does MCP mean?</p>",
        "id": 199810693,
        "sender_full_name": "marmeladema",
        "timestamp": 1591306126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span>  Major change proposal. AFAIK, it's just a new way to propose changes that are either big enough to require some process (not just a pull request) or as a previous step to a full RFC</p>",
        "id": 199811512,
        "sender_full_name": "pachi",
        "timestamp": 1591306608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> <a href=\"https://forge.rust-lang.org/compiler/mcp.html\">https://forge.rust-lang.org/compiler/mcp.html</a></p>",
        "id": 199811557,
        "sender_full_name": "pachi",
        "timestamp": 1591306640
    },
    {
        "content": "<p>Thanks i figure it was some kind of process but i did not what the acronym meant</p>",
        "id": 199811597,
        "sender_full_name": "marmeladema",
        "timestamp": 1591306664
    },
    {
        "content": "<p>Glad to help, you're doing a great work!</p>",
        "id": 199811982,
        "sender_full_name": "pachi",
        "timestamp": 1591306864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20closure.20have.20a.20DefId/near/199772741\">said</a>:</p>\n<blockquote>\n<p>Obviously changing it would be quite a bit of work, and this is a practical reason not to make this change, but is there a fundamental reason that statements inside a closure aren't tied to the <code>DefId</code> of a closure?</p>\n</blockquote>\n<p>in some sense yes</p>",
        "id": 199933670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390876
    },
    {
        "content": "<p>closure bodies are type-checked in one inference context with their parent function</p>",
        "id": 199933700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390893
    },
    {
        "content": "<p>you can observe this if you do</p>",
        "id": 199933710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390901
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// influences the type of `y`</span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199933794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390929
    },
    {
        "content": "<p>or things like that</p>",
        "id": 199933799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390932
    },
    {
        "content": "<p>so the \"hir-ids\" kind of reflect that</p>",
        "id": 199933819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390948
    },
    {
        "content": "<p>and this is also why the typeck-tables for closures and their parents etc are all produced \"together\"</p>",
        "id": 199933842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390964
    },
    {
        "content": "<p>not to say it couldn't be changed</p>",
        "id": 199933863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591390977
    },
    {
        "content": "<p>Thank you for the explaination</p>",
        "id": 199937419,
        "sender_full_name": "marmeladema",
        "timestamp": 1591393332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would it make sense to not give a <code>DefId</code> to closures?</p>",
        "id": 199937463,
        "sender_full_name": "marmeladema",
        "timestamp": 1591393384
    },
    {
        "content": "<p>Closures types need to be referred to cross crate (for inlining, opaque types, etc...)</p>",
        "id": 199938323,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591394041
    },
    {
        "content": "<p>Maybe using a <code>DefId</code> + <code>ItemLocalId</code> is possible there, but it sounds like just as much work.</p>",
        "id": 199938442,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591394120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20closure.20have.20a.20DefId/near/199933819\">said</a>:</p>\n<blockquote>\n<p>so the \"hir-ids\" kind of reflect that</p>\n</blockquote>\n<p>It would be ideal if changes to code <em>inside</em> the closure did not invalidate <code>HirId</code>s for subsequent code outside the closure's definition. I kind of doubt that doing this would have any practical benefit for incremental compilation, however. Maybe I'm wrong?</p>",
        "id": 199983934,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591462642
    },
    {
        "content": "<p>ideal from an incremental point of view that is. Maybe this makes type-checking harder.</p>",
        "id": 199987856,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591468973
    },
    {
        "content": "<p>well, the point is that changes to code inside the closure <em>can</em> affect type-checking for things outside the closure</p>",
        "id": 200236395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591713043
    },
    {
        "content": "<p>I don't think there would be any practical benefits from trying to separate them</p>",
        "id": 200236423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591713057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20closure.20have.20a.20DefId/near/199938442\">said</a>:</p>\n<blockquote>\n<p>Maybe using a <code>DefId</code> + <code>ItemLocalId</code> is possible there, but it sounds like just as much work.</p>\n</blockquote>\n<p>That is basically what a <code>HirId</code> is right? If so could we just use an <code>HirId</code> to reference closures and not assign them <code>DefId</code> at all?</p>",
        "id": 200246245,
        "sender_full_name": "marmeladema",
        "timestamp": 1591716578
    },
    {
        "content": "<p>An <code>HirId</code> is a <code>LocalDefId</code> + <code>ItemLocalId</code>.</p>",
        "id": 200246696,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591716732
    },
    {
        "content": "<p>Oh right sorry :/</p>",
        "id": 200246820,
        "sender_full_name": "marmeladema",
        "timestamp": 1591716778
    },
    {
        "content": "<p>It kind of side question, but cross crate referencing works using serialized data that we load when analyzing one crate?</p>",
        "id": 200247442,
        "sender_full_name": "marmeladema",
        "timestamp": 1591716993
    },
    {
        "content": "<p>If so how do we handle serialization of HirId in such contexts? Because we do serialize HirId already</p>",
        "id": 200247503,
        "sender_full_name": "marmeladema",
        "timestamp": 1591717019
    },
    {
        "content": "<p>Ah I get it now. For example, changing the body of a closure could affect the inferred return type, which would then affect inference in the caller.</p>",
        "id": 200249775,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591717869
    },
    {
        "content": "<p>There's also the interaction between capture and inference</p>",
        "id": 200249920,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591717926
    },
    {
        "content": "<p>We don't serialize <code>HirId</code>s to crate metadata</p>",
        "id": 200250112,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591718010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"225949\">Nathan Corbyn</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20closure.20have.20a.20DefId/near/200249920\">said</a>:</p>\n<blockquote>\n<p>There's also the interaction between capture and inference</p>\n</blockquote>\n<p>Does that apply in-to-out or just out-to-in?</p>",
        "id": 200250305,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591718077
    },
    {
        "content": "<p>(sorry, a bit off topic)</p>",
        "id": 200250341,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591718093
    },
    {
        "content": "<p>Ok! I've just had to deal with <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/mod.rs#L321-L324\">https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/mod.rs#L321-L324</a> recently</p>",
        "id": 200250363,
        "sender_full_name": "marmeladema",
        "timestamp": 1591718100
    },
    {
        "content": "<p>And i thought we were (de)serializing HirId as part of the <code>ModData</code> struct</p>",
        "id": 200250448,
        "sender_full_name": "marmeladema",
        "timestamp": 1591718129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20closure.20have.20a.20DefId/near/199933794\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// influences the type of `y`</span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I just noticed Niko mentioned this already - I think it works both ways</p>",
        "id": 200250505,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591718154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> do you know what we end up serializing in this case?</p>",
        "id": 200250651,
        "sender_full_name": "marmeladema",
        "timestamp": 1591718206
    },
    {
        "content": "<p>No, it serializes <code>Res&lt;HirId&gt;</code>, but they're never <code>Res::Local</code></p>",
        "id": 200250652,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591718208
    },
    {
        "content": "<p>Ok</p>",
        "id": 200250674,
        "sender_full_name": "marmeladema",
        "timestamp": 1591718216
    },
    {
        "content": "<p>Data is coming from <a href=\"https://github.com/marmeladema/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src/librustc_resolve/imports.rs#L1396\">https://github.com/marmeladema/rust/blob/e75922246152e3d9a353e41a643025fc7ffb0f67/src/librustc_resolve/imports.rs#L1396</a> btw</p>",
        "id": 200250988,
        "sender_full_name": "marmeladema",
        "timestamp": 1591718327
    },
    {
        "content": "<p>So TL;DR is it makes sense for closure not be the real owner of its \"children\" and at the same time it makes sense for them to have a <code>DefId</code>. I guess the hope to make all DefId hir owner is kind if impossible to achieve</p>",
        "id": 200251700,
        "sender_full_name": "marmeladema",
        "timestamp": 1591718564
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 202036878,
        "sender_full_name": "marmeladema",
        "timestamp": 1593127074
    },
    {
        "content": "<p>So yeah I created this thread because I wanted to investigate your ideas of making all LocalDefId hir owner, but at least for closure, it seems difficult</p>",
        "id": 202037065,
        "sender_full_name": "marmeladema",
        "timestamp": 1593127274
    },
    {
        "content": "<p>so on the side of making all of them HIR owners, I had envisioned having some sort of enum that's a subset of <code>hir::Node</code> (and have it be called <code>hir::Owner</code>), and have all of the <code>hir::map</code> collection and HIR visitors interact with that to avoid a massive amount of code duplication</p>",
        "id": 202037173,
        "sender_full_name": "eddyb",
        "timestamp": 1593127385
    },
    {
        "content": "<p>specifically for closures, <code>TypeckTables</code> is, I suspect, 99% of the problem. there are two problems I can think of:</p>\n<ol>\n<li>currently <code>typeck_tables_of</code> on a closure returns the parent's <code>TypeckTables</code>, and <code>TypeckTables</code> is designed around being keyed on <code>ItemLocalId</code></li>\n<li>custom visitor doesn't call <code>typeck_tables_of</code> / <code>body_tables</code> / etc. to change <code>TypeckTables</code> when switching between the parent and the closure</li>\n</ol>",
        "id": 202037335,
        "sender_full_name": "eddyb",
        "timestamp": 1593127543
    },
    {
        "content": "<p>(small aside, we should probably rename <code>ItemLocalId</code> with <code>IntraOwnerId</code> or something, both because \"item\" should probably be replaced with \"owner\" but also \"local\" is probably unnecessary confusing)</p>",
        "id": 202037404,
        "sender_full_name": "eddyb",
        "timestamp": 1593127598
    },
    {
        "content": "<p>Yeah I think a few struct and methods around HirId should be renamed. About closure, previous people in the thread said closure where not considered their own owner for reasons about type checking outside of the closure</p>",
        "id": 202037523,
        "sender_full_name": "marmeladema",
        "timestamp": 1593127723
    },
    {
        "content": "<p>AFAIK it's 100% because of <code>TypeckTables</code>' design</p>",
        "id": 202037540,
        "sender_full_name": "eddyb",
        "timestamp": 1593127747
    },
    {
        "content": "<p>which may have been introduced at the same time as <code>HirId</code>, I forget</p>",
        "id": 202037549,
        "sender_full_name": "eddyb",
        "timestamp": 1593127758
    },
    {
        "content": "<p>all the maps in it are keyed by <code>ItemLocalId</code> and everything shares one <code>LocalDefId</code> (HIR owner, really)</p>",
        "id": 202037574,
        "sender_full_name": "eddyb",
        "timestamp": 1593127792
    },
    {
        "content": "<p>yeah I did try to make closure HirId owner and I had to deal with all those maps of ItemLocalId</p>",
        "id": 202037646,
        "sender_full_name": "marmeladema",
        "timestamp": 1593127832
    },
    {
        "content": "<p>but also closures aren't the only one, they're just the biggest case. I found half a dozen more, and I probably still have the abandoned branches somewhere (they were before I realized I needed a <code>hir::Owner</code> enum or similar to avoid massive code duplication)</p>",
        "id": 202037691,
        "sender_full_name": "eddyb",
        "timestamp": 1593127871
    },
    {
        "content": "<p>So why would be the use of that <code>hir::Owner</code> enum?</p>",
        "id": 202037769,
        "sender_full_name": "marmeladema",
        "timestamp": 1593127926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20closure.20have.20a.20DefId/near/202037540\">said</a>:</p>\n<blockquote>\n<p>AFAIK it's 100% because of <code>TypeckTables</code>' design</p>\n</blockquote>\n<p>well, am I lying? not sure. I was getting to the other side of this which is that \"item-like\" (items, trait items, impl items, and I guess foreign items) were considered special (and still kind of are) in a bunch of places and I have a vendetta against them</p>",
        "id": 202037776,
        "sender_full_name": "eddyb",
        "timestamp": 1593127932
    },
    {
        "content": "<p>and closures are not \"item-like\" so they just didn't get to be HIR owners</p>",
        "id": 202037804,
        "sender_full_name": "eddyb",
        "timestamp": 1593127962
    },
    {
        "content": "<p>not sure which is \"more overriding\", that or <code>TypeckTables</code>. I guess they conspire to make it harder to make closures owners</p>",
        "id": 202037830,
        "sender_full_name": "eddyb",
        "timestamp": 1593127985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> everywhere you see the same code written thrice for items, impl items, and trait items, it would make that go away. there's a lot of stuff in <code>hir::map</code> especially</p>",
        "id": 202037845,
        "sender_full_name": "eddyb",
        "timestamp": 1593128013
    },
    {
        "content": "<p>it would also allow any visitor to easily handle situations when the <code>HirId</code> owner changes (to avoid being caught by surprise - for whatever reason)</p>",
        "id": 202037921,
        "sender_full_name": "eddyb",
        "timestamp": 1593128072
    },
    {
        "content": "<p>anyway back to the 2 problems I stated</p>",
        "id": 202037927,
        "sender_full_name": "eddyb",
        "timestamp": 1593128079
    },
    {
        "content": "<p>problem 1. should be easy to deal with, we just create one <code>TypeckTables</code> per closure and have a map inside the parent, so that <code>typeck_tables_of</code> can grab it from there (there's probably gonna be a funny thing where we probably want nested closures to each track their children <code>TypeckTables</code>, instead of flattening it, just to keep it sane)</p>",
        "id": 202037943,
        "sender_full_name": "eddyb",
        "timestamp": 1593128103
    },
    {
        "content": "<p>and the nice thing is that we can do it today (which is something I had thought about then forgot), i.e. we can make it so <code>typeck_tables_of</code> returns different <code>TypeckTables</code> for a closure and its parent (even if they both use the parent as the HIR owner)</p>",
        "id": 202038001,
        "sender_full_name": "eddyb",
        "timestamp": 1593128162
    },
    {
        "content": "<p>which would force us to fix problem 2. without any of the complications arising from making non-\"item-likes\" HIR owners</p>",
        "id": 202038043,
        "sender_full_name": "eddyb",
        "timestamp": 1593128195
    },
    {
        "content": "<p>(the fix is on a case by case basis, but presumably it involves things like e.g. hooking <code>visit_nested_body</code>, or handling <code>ExprKind::Closure</code> specially)</p>",
        "id": 202038079,
        "sender_full_name": "eddyb",
        "timestamp": 1593128241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> does my suggestion for the first step (nest <code>TypeckTables</code> instead of sharing them between closures and their parents, w/o changing anything about HIR owners) make sense? I can do into detail if you want</p>",
        "id": 202038163,
        "sender_full_name": "eddyb",
        "timestamp": 1593128341
    },
    {
        "content": "<p>I will try to get familiar with TypeckTables a bit more first. But yeah if you had some time to write that plan into more detail that would be awesome and i'd be glad to help!</p>",
        "id": 202038256,
        "sender_full_name": "marmeladema",
        "timestamp": 1593128426
    },
    {
        "content": "<p>Right now, i have to logoff to get some sleep first :P</p>",
        "id": 202038269,
        "sender_full_name": "marmeladema",
        "timestamp": 1593128451
    },
    {
        "content": "<p>Thank you for all the explanations, let's continue tomorrow if that's ok for you</p>",
        "id": 202038313,
        "sender_full_name": "marmeladema",
        "timestamp": 1593128511
    },
    {
        "content": "<p><code>TypeckTables</code> is a poorly named (<a href=\"https://github.com/rust-lang/rust/pull/72983\">https://github.com/rust-lang/rust/pull/72983</a>) grabbag of type-inference/checking results (like types of expression/pattern nodes, <code>DefId</code>s for method calls, what coercions are needed by expressions, etc.)</p>",
        "id": 202038885,
        "sender_full_name": "eddyb",
        "timestamp": 1593129022
    },
    {
        "content": "<p>because closures have shared inference with their parent (only closures have this, all other bodies are isolated inference-wise), they use the same <code>TypeckTables</code></p>",
        "id": 202038921,
        "sender_full_name": "eddyb",
        "timestamp": 1593129097
    },
    {
        "content": "<p>and this is where <code>typeck_tables_of(closure)</code> just returns <code>typeck_tables_of(parent)</code> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L981-L986\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L981-L986</a></p>",
        "id": 202038975,
        "sender_full_name": "eddyb",
        "timestamp": 1593129161
    },
    {
        "content": "<p>aww, that relies on <code>closure_base_def_id</code>, so maybe what I said about flattening being bad doesn't hold. but maybe there's a <code>closure_parent_def_id</code>?</p>",
        "id": 202039006,
        "sender_full_name": "eddyb",
        "timestamp": 1593129216
    }
]