[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"247084\">@Siavosh Zarrasvand</span> opened <a href=\"https://github.com/rust-lang/compiler-team/issues/212\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/212\">compiler-team#212</a>, a proposal to fuzz the rust compiler and stdlib:</p>\n<blockquote>\n<p>Creating a OSS Fuzz project for Rust Compiler and stdlib <a href=\"https://github.com/rust-lang/compiler-team/issues/212\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/212\">compiler-team#212</a> </p>\n</blockquote>\n<p>I'm opening this topic to discuss the idea a bit. Some of the questions I wanted to ask:</p>\n<ul>\n<li>can we direct the fuzzing in particular ways? <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and I were talking about the idea of using fuzzing to target and test incremental. This is something I think <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and I talked about but  we never did, as far as I know.</li>\n<li>if we were to do this, are we concerned about the number of bug reports we'll get? I guess they might serve as an interesting ICE-breaker topic as well, since I expect many to be minor.</li>\n<li>any other related thoughts?</li>\n</ul>",
        "id": 179428578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440619
    },
    {
        "content": "<blockquote>\n<ul>\n<li>if we were to do this, are we concerned about the number of bug reports we'll get?</li>\n</ul>\n</blockquote>\n<p>Hmm.  I hadn't thought of this; it does seem like a potential headache.</p>",
        "id": 179428721,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572440702
    },
    {
        "content": "<p>we don't really have any great methodology in place for identify duplicate bugs</p>",
        "id": 179428756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572440734
    },
    {
        "content": "<p>(and to be fair, I don't even know what the state of the art is in that area; as far as I know its still open research to correlate such things...)</p>",
        "id": 179428781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572440751
    },
    {
        "content": "<p>It seems non-useful, i.e., if we expected soundness bugs to be uncovered, then that seems useful</p>",
        "id": 179428932,
        "sender_full_name": "simulacrum",
        "timestamp": 1572440850
    },
    {
        "content": "<p>but if it's just finding ICEs -- well, we have 268 of those filed right now :)</p>",
        "id": 179429008,
        "sender_full_name": "simulacrum",
        "timestamp": 1572440883
    },
    {
        "content": "<p>so finding more doesn't seem too useful</p>",
        "id": 179429023,
        "sender_full_name": "simulacrum",
        "timestamp": 1572440890
    },
    {
        "content": "<p>we can certainly categorize which kinds of bugs are worth filing</p>",
        "id": 179429063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572440926
    },
    {
        "content": "<p>also: an ICE exposed solely by incremental, that has a <em>reprodicible</em> test case, <em>is</em> useful</p>",
        "id": 179429213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441003
    },
    {
        "content": "<p>that is, I think we have a number of ICE's filed that are associated with incremental, but the bug filers often do not have a reproducible test case on hand, because they are not certain <em>why</em> it started failing, and <code>cargo clean</code> makes the bug go away</p>",
        "id": 179429268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441051
    },
    {
        "content": "<p>and those bugs are often essentially non-actionable.</p>",
        "id": 179429278,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441062
    },
    {
        "content": "<p>So my claim is that fuzzing might provide a way to get easy to reproduce bugs in incremental-compilation</p>",
        "id": 179429311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441095
    },
    {
        "content": "<p>oh, yes, definitely true</p>",
        "id": 179429456,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441178
    },
    {
        "content": "<p>(also, it would just give me more faith that we are exercising more corner cases for incremental compilation testing. Right now I am scared to close the bugs that do not have non-reproducible test cases, because I don't want to lose the record that a latent bug <em>is</em> still believed to be present ...)</p>",
        "id": 179429460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441181
    },
    {
        "content": "<p>my impression was that fuzzing is not testing incremental? If we can do that, then amazing!</p>",
        "id": 179429484,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441196
    },
    {
        "content": "<p>My idea that I was saying to Niko was to use fuzzing as a way to test incremental</p>",
        "id": 179429497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441212
    },
    {
        "content": "<p>Fuzzing is nice, but it's a fairly blunt instrument; sometime we should start using proper property based testing as well</p>",
        "id": 179429499,
        "sender_full_name": "centril",
        "timestamp": 1572441212
    },
    {
        "content": "<p>one crazy thought: run the ui test suite in incremental mode with a single directory</p>",
        "id": 179429503,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441219
    },
    {
        "content": "<p>i.e. compile, change a bit, compile incrementally, then clean, then compile from scratch</p>",
        "id": 179429517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441231
    },
    {
        "content": "<p>and compare the latter two compilation sessions</p>",
        "id": 179429567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441244
    },
    {
        "content": "<p>because, ideally, they would have the same diagnostic output, if any</p>",
        "id": 179429592,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441263
    },
    {
        "content": "<p>yes, that's true</p>",
        "id": 179429598,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441271
    },
    {
        "content": "<blockquote>\n<p>Fuzzing is nice, but it's a fairly blunt instrument; sometime we should start using proper property based testing as well</p>\n</blockquote>\n<p>I am a bit confused -- these seem pretty equivalent to me? In the sense that our property is \"equivalent whether using incremental or not\"</p>",
        "id": 179429641,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441298
    },
    {
        "content": "<blockquote>\n<p>one crazy thought: run the ui test suite in incremental mode with a single directory</p>\n</blockquote>\n<p>can you elaborate on this? Like, every test input would use the same shared incremental store?</p>",
        "id": 179429642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441299
    },
    {
        "content": "<p>Right, yeah</p>",
        "id": 179429656,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441305
    },
    {
        "content": "<p>obviously this would mean -j1 or so</p>",
        "id": 179429672,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441317
    },
    {
        "content": "<p>but we would expect that incremental does not \"hide\" anything</p>",
        "id": 179429692,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441330
    },
    {
        "content": "<p>sure. Is part of the idea that many of our tests have similar filenames etc ?</p>",
        "id": 179429699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441333
    },
    {
        "content": "<p>(i'm just trying to understand what corner case this is expecting to tickle)</p>",
        "id": 179429725,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441354
    },
    {
        "content": "<p>oh, I was thinking we rename them to <a href=\"http://foo.rs\" target=\"_blank\" title=\"http://foo.rs\">foo.rs</a> or w/e, not different names</p>",
        "id": 179429741,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441360
    },
    {
        "content": "<p>this is just an easy corpus for which we have pre-existing output</p>",
        "id": 179429789,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441369
    },
    {
        "content": "<p>gotcha</p>",
        "id": 179429797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> With property based testing in terms of quickcheck and proptest you define how to generate data types and how to shrink them yourself</p>",
        "id": 179429856,
        "sender_full_name": "centril",
        "timestamp": 1572441421
    },
    {
        "content": "<p>hm well okay, I guess \"better\" in some sense, but in our case I have no _good_ idea how one would do that. I guess maybe taking wg-grammar's grammar and generate output based on that</p>",
        "id": 179429912,
        "sender_full_name": "simulacrum",
        "timestamp": 1572441466
    },
    {
        "content": "<p>basically yes, for some syntax -- but you can also property test some smaller parts of the compiler or just the standard library</p>",
        "id": 179430025,
        "sender_full_name": "centril",
        "timestamp": 1572441525
    },
    {
        "content": "<p>I agree that proptesting is good</p>",
        "id": 179430058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441551
    },
    {
        "content": "<p>one can also generate ASTs directly and not take a syntax detour</p>",
        "id": 179430079,
        "sender_full_name": "centril",
        "timestamp": 1572441566
    },
    {
        "content": "<p>but the simplicity of fuzzing does make it an attractive option, just in terms of having its infrastructure be super super simple</p>",
        "id": 179430092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441576
    },
    {
        "content": "<p>(and thus easy for purposes of onboarding contributor)</p>",
        "id": 179430111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think they can be complementary</p>",
        "id": 179430183,
        "sender_full_name": "centril",
        "timestamp": 1572441608
    },
    {
        "content": "<p>I agree with the complementary nature</p>",
        "id": 179430195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441616
    },
    {
        "content": "<p>and they need not stand in each other's way</p>",
        "id": 179430198,
        "sender_full_name": "centril",
        "timestamp": 1572441617
    },
    {
        "content": "<p>(it's worth noting that the proposal also describes libstd; although that's not our \"balliwick\", it could definitely be useful)</p>",
        "id": 179430368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441732
    },
    {
        "content": "<p>(I think t-compiler should be empowered to improve libstd when it doesn't change the spec; much like t-compiler can improve the language when it doesn't change the spec)</p>",
        "id": 179430499,
        "sender_full_name": "centril",
        "timestamp": 1572441824
    },
    {
        "content": "<p>... anyone's welcome to contribute changes  (to libstd). (or at least propose PRs thereof.) If you're talking about having power to <em>approve</em> changes, I don't see the need nor want the responsibility</p>",
        "id": 179430680,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572441924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  if you have r+ you can even add new unstable APIs (with T-libs blessing) if you think it's reasonable and small</p>",
        "id": 179430841,
        "sender_full_name": "centril",
        "timestamp": 1572442024
    },
    {
        "content": "<p>(anyways... different subject)</p>",
        "id": 179430852,
        "sender_full_name": "centril",
        "timestamp": 1572442031
    },
    {
        "content": "<blockquote>\n<p>(I think t-compiler should be empowered to improve libstd when it doesn't change the spec; much like t-compiler can improve the language when it doesn't change the spec)</p>\n</blockquote>\n<p>obviously. I'm just saying that maybe part of the answer is: let's try this out, but focused on libs</p>",
        "id": 179430986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442120
    },
    {
        "content": "<p>though I personally think the incremental fuzzing is a good ide</p>",
        "id": 179430992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442129
    },
    {
        "content": "<p>I'm not sure, maybe <span class=\"user-mention\" data-user-id=\"247084\">@Siavosh Zarrasvand</span> can clarify, what sort of fuzzing they had in mind -- i.e., we don't have to necessarily just mutate random bytes, we can do more structured changes</p>",
        "id": 179431031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442159
    },
    {
        "content": "<p>for example, we might try renaming variables</p>",
        "id": 179431037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think that's a great idea; running fuzzing &amp; PBT on the standard library should be way easier</p>",
        "id": 179431059,
        "sender_full_name": "centril",
        "timestamp": 1572442175
    },
    {
        "content": "<p>or other things that we expect to be \"perfect\" in some sense</p>",
        "id": 179431064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442175
    },
    {
        "content": "<p>especially for PBT, you can define some small properties for some algorithmic parts like iterators</p>",
        "id": 179431104,
        "sender_full_name": "centril",
        "timestamp": 1572442201
    },
    {
        "content": "<p>Maybe worth asking GHC what they do -- I have a feeling they use a lot of QuickCheck for stuff</p>",
        "id": 179431216,
        "sender_full_name": "centril",
        "timestamp": 1572442259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes, especially letting the fuzzer alter bits on a working seed input file will probably never allow it to get past the lexer. <br>\nFuzzers can usually be programmed to alter only specific parts of the input file using string matching. We could start with very basic <a href=\"http://main.rs\" target=\"_blank\" title=\"http://main.rs\">main.rs</a> files and fuzz the syntax initially (see this approach: <a href=\"https://github.com/vegard/prog-fuzz\" target=\"_blank\" title=\"https://github.com/vegard/prog-fuzz\">https://github.com/vegard/prog-fuzz</a>) and increase coverage to std library modules long term. I was hoping to start very small and build incrementally. </p>\n<p>Regarding bug concerns, the initial bugs on the compiler will have near 0 severity. They will crash rustc with input that it doesn't know how to lex. Later on in the std libraries, issues could have some severity...</p>",
        "id": 179431587,
        "sender_full_name": "Siavosh Zarrasvand",
        "timestamp": 1572442497
    }
]