[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74101\">https://github.com/rust-lang/rust/issues/74101</a> ends up with multiple distinct cycle errors.</p>\n<p>This leads me to believe that we are somehow able to recover from cycle errors,<br>\nwhich is somewhat surprising to me. How are we able to do so?</p>",
        "id": 203006635,
        "sender_full_name": "lcnr",
        "timestamp": 1594050890
    },
    {
        "content": "<p>Not sure, but MIR inlining needs that too</p>",
        "id": 203006721,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594050937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  is working on side-stepping query cycles for the MIR inliner <a href=\"https://github.com/rust-lang/rust/pull/68828\">https://github.com/rust-lang/rust/pull/68828</a>.</p>\n<p>(Just in case the general idea is helpful for <a href=\"https://github.com/rust-lang/rust/issues/74101\">#74101</a>)</p>",
        "id": 203009930,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594052276
    },
    {
        "content": "<p>That PR is interesting, haven't looked into <a href=\"https://github.com/rust-lang/rust/issues/74101\">#74101</a> so I can't say what has to be done there yet.</p>\n<p>After reading that issue it seems like all query cycles are fatal atm <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> So the reason we get multiple \"error[E0391]: cycle detected\" is probably something else</p>",
        "id": 203012188,
        "sender_full_name": "lcnr",
        "timestamp": 1594053449
    },
    {
        "content": "<p>In the context of salsa, I'm working on a proposal to integrate the chalk recursive solver that would extend salsa with the ability to handle some kinds of cycles without errors at all</p>",
        "id": 203045742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594072758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> does it involve not caching the intermediary products within the cycle? does it involve fixpoint?</p>",
        "id": 203047608,
        "sender_full_name": "eddyb",
        "timestamp": 1594074016
    },
    {
        "content": "<p>(<code>cyclotron</code> does both and I still don't feel 100% comfortable claiming that \"gives you soundness\". it works for some usecases like parsing, at least for a context-free grammar, but I don't know what the full set of limitations should be)</p>",
        "id": 203047664,
        "sender_full_name": "eddyb",
        "timestamp": 1594074096
    },
    {
        "content": "<p>I guess the problem is that you have to have some sort of \"empty result\" to start the fixpoint from, and where the cycle was entered is what will start out as empty, so you could still have sensitivity to query order</p>",
        "id": 203047779,
        "sender_full_name": "eddyb",
        "timestamp": 1594074205
    },
    {
        "content": "<p>like an easy way to visualize this is to imagine N queries that call eachother in a loop and all return <code>IndexSet&lt;usize&gt;</code> or something, each inserting their number (one of each 0..N) - when the <code>IndexSet</code> reaches <code>N</code> elements, the fixpoint finishes, since further inserts will not change the set, but the iteration order (or even just the first element in the set) will reveal which query was first called</p>",
        "id": 203047940,
        "sender_full_name": "eddyb",
        "timestamp": 1594074341
    },
    {
        "content": "<p>for Chalk the soundness is part of the solver design, but for arbitrary user code it's more subtle</p>",
        "id": 203048048,
        "sender_full_name": "eddyb",
        "timestamp": 1594074417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://hackmd.io/FCrUiW27TnKw3MTvRtfPjQ\">this is a description of the proposal</a>: in short it has fixed point semantics, yes. It is not however meant to imply that it is universally applicable. It only works some of the time, I agree. It happens to address what chalk needs well enough.</p>",
        "id": 203054307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079397
    },
    {
        "content": "<p>at least so long as we don't need to handle negative cycles...</p>",
        "id": 203054355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079411
    },
    {
        "content": "<p>...which I <em>think</em> we don't. If we did, it's possible to do so, but it makes the proposal significantly more complex.</p>",
        "id": 203054365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079428
    },
    {
        "content": "<p>I'm not sure what cyclotron is :)</p>",
        "id": 203054372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079443
    },
    {
        "content": "<p>it's my implementation of a somewhat inefficient way to do pretty much this :P</p>",
        "id": 203054383,
        "sender_full_name": "eddyb",
        "timestamp": 1594079458
    },
    {
        "content": "<p>ok :)</p>",
        "id": 203054401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079485
    },
    {
        "content": "<p>chalk's recursive solver is <a href=\"http://rust-lang.github.io/chalk/book/recursive/search_graph.html\">documented here</a>...</p>",
        "id": 203054412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079504
    },
    {
        "content": "<p>in the case of cycles, it does some amount of caching, but only within a particular iteration</p>",
        "id": 203054457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079523
    },
    {
        "content": "<p>though once the cycle is complete (fixed point is reached),</p>",
        "id": 203054467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079530
    },
    {
        "content": "<p>it adds all the intermediate values into the final cache</p>",
        "id": 203054470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079535
    },
    {
        "content": "<p>this is basically the model I intended to port to salsa</p>",
        "id": 203054472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079540
    },
    {
        "content": "<p>it doesn't work for negative goals or other \"non-monotonic\" elements in a cycle</p>",
        "id": 203054492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079567
    },
    {
        "content": "<p>(by negative goal, I mean trying to prove <code>X</code> is true if <code>not { Y }</code>, as could maybe occur with specialization)</p>",
        "id": 203054512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079592
    },
    {
        "content": "<p>the word \"graph\" suggests to me it's closer to an algorithm like GLL (which can suspend multiple \"callers\" per \"query\" and resume them all on (every) success)</p>",
        "id": 203054525,
        "sender_full_name": "eddyb",
        "timestamp": 1594079617
    },
    {
        "content": "<p>but I'm guessing <code>salsa</code> can't do anything like that and has to actually keep executing the cycle until fixpoint, right?</p>",
        "id": 203054539,
        "sender_full_name": "eddyb",
        "timestamp": 1594079639
    },
    {
        "content": "<p>/me is amused by algorithmic convergence, and how parsing and trait solving could share a computational model</p>",
        "id": 203054637,
        "sender_full_name": "eddyb",
        "timestamp": 1594079743
    },
    {
        "content": "<p>anyway, I didn't have to rant that much, but yeah, monotonic fixpoints is what I was thinking of, neat</p>",
        "id": 203054709,
        "sender_full_name": "eddyb",
        "timestamp": 1594079818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/non.20fatal.20cycle.20errors/near/203054539\">said</a>:</p>\n<blockquote>\n<p>but I'm guessing <code>salsa</code> can't do anything like that and has to actually keep executing the cycle until fixpoint, right?</p>\n</blockquote>\n<p>yes, the SLG solver in chalk does an approach more like that, but right now I'm thinking it has \"less promise\" than the recursive one, sadly</p>",
        "id": 203054861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594079947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/non.20fatal.20cycle.20errors/near/203054861\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/non.20fatal.20cycle.20errors/near/203054539\">said</a>:</p>\n<blockquote>\n<p>but I'm guessing <code>salsa</code> can't do anything like that and has to actually keep executing the cycle until fixpoint, right?</p>\n</blockquote>\n<p>yes, the SLG solver in chalk does an approach more like that, but right now I'm thinking it has \"less promise\" than the recursive one, sadly</p>\n</blockquote>\n<p>:(</p>",
        "id": 203056488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594081623
    },
    {
        "content": "<p>okay so <a href=\"https://github.com/rust-lang/rust/issues/74199\">https://github.com/rust-lang/rust/issues/74199</a> also continues after a cycle error and hits an ICE. How does this happen?</p>",
        "id": 204312643,
        "sender_full_name": "lcnr",
        "timestamp": 1595097672
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_middle/ty/query/plumbing.rs#L173\">https://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_middle/ty/query/plumbing.rs#L173</a><br>\n<a href=\"https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src/librustc_middle/ty/query/values.rs#L18\">https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src/librustc_middle/ty/query/values.rs#L18</a></p>\n<p>It returns an <code>ty::Error</code> from the query after emitting the error diagnostic.</p>",
        "id": 204312945,
        "sender_full_name": "bjorn3",
        "timestamp": 1595098102
    },
    {
        "content": "<p>thanks </p>\n<p>idk what I think about this <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span> but at least it now makes sense why this is happening <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 204313090,
        "sender_full_name": "lcnr",
        "timestamp": 1595098341
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// The result type of each query must implement `Clone`, and additionally</span>\n<span class=\"c1\">// `ty::query::values::Value`, which produces an appropriate placeholder</span>\n<span class=\"c1\">// (error) value if the query resulted in a query cycle.</span>\n<span class=\"c1\">// Queries marked with `fatal_cycle` do not need the latter implementation,</span>\n<span class=\"c1\">// as they will raise an fatal error on query cycles instead</span>\n</code></pre></div>",
        "id": 204313183,
        "sender_full_name": "lcnr",
        "timestamp": 1595098521
    },
    {
        "content": "<p>Are these queries then always marked as <code>red</code>?</p>",
        "id": 204313297,
        "sender_full_name": "lcnr",
        "timestamp": 1595098741
    },
    {
        "content": "<p>Does it matter much? The incremental caches will not be written when there are any errors.</p>",
        "id": 204313715,
        "sender_full_name": "bjorn3",
        "timestamp": 1595099448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/non.20fatal.20cycle.20errors/near/204313715\">said</a>:</p>\n<blockquote>\n<p>Does it matter much? The incremental caches will not be written when there are any errors.</p>\n</blockquote>\n<p>results in the same thing <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> caching queries which are part of a cycle error would end up being unsound afaik</p>",
        "id": 204313772,
        "sender_full_name": "lcnr",
        "timestamp": 1595099584
    },
    {
        "content": "<p>so that seems fine to me</p>",
        "id": 204313777,
        "sender_full_name": "lcnr",
        "timestamp": 1595099595
    }
]