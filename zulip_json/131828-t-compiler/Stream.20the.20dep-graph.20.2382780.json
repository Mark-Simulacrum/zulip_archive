[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I don't understand your comment:</p>\n<blockquote>\n<p>I think it would be nice if there was a way for the dep graph to be re-used for a different compilation session inside the same process without serialization. In combination with re-using deserialized metadata, this should make it possible to significantly reduce compilation time for for example a repl I think. This PR would make it impossible to do so. Whether or not this is a significant enough hypothetical future change or not is another question.</p>\n</blockquote>\n<p>Do you mean in the perspective of a rust interpreter, which has to repeatedly re-traverse the same dep-graph?</p>",
        "id": 229113947,
        "sender_full_name": "cjgillot",
        "timestamp": 1615051304
    },
    {
        "content": "<p>I am planning to have the dep-graph loading be a simple memmap + some bookkeeping. This would help on the deserialization time.<br>\nHowever, having multiple sessions of the same crate in fly seems odd.</p>",
        "id": 229114252,
        "sender_full_name": "cjgillot",
        "timestamp": 1615051598
    },
    {
        "content": "<p>Currently when you have a REPL or anything else that could benefit from incremental compilation and that runs within a single process (eg <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1087\">bjorn3/rustc_codegen_cranelift#1087</a>), every time a completely new compilation session has to be started that deserializes many things each time. It did be nice if the already deserialized things could be returned from one compilation session and re-used for the next one. This would avoid disk access, deserialization (and optionally serialization) costs. For crate metadata, it should be possible. For the dep graph this would also be possible currently, but after your PR, there is no deserialized dep graph to re-use anymore. Only a serialized dep graph on the disk.</p>",
        "id": 229114297,
        "sender_full_name": "bjorn3",
        "timestamp": 1615051648
    },
    {
        "content": "<p>In that regard, <a href=\"https://github.com/rust-lang/rust/issues/82345\">#82345</a> may be better suited: only have one dep-graph at all, and clean it at the end of the session.</p>",
        "id": 229114548,
        "sender_full_name": "cjgillot",
        "timestamp": 1615051883
    },
    {
        "content": "<p>Indeed</p>",
        "id": 229114612,
        "sender_full_name": "bjorn3",
        "timestamp": 1615051925
    },
    {
        "content": "<p>On the other hand that PR has much less of a memory usage reduction. I am kind of split between both approaches.</p>",
        "id": 229114686,
        "sender_full_name": "bjorn3",
        "timestamp": 1615052012
    },
    {
        "content": "<p>Actually, <a href=\"https://github.com/rust-lang/rust/issues/82780\">#82780</a> does not forbid recording the dep-graph, it does it for the <code>query-dep-graph</code> tests. I think your concern is solvable by adding yet one more case to the <code>process_node</code> function.</p>",
        "id": 229114837,
        "sender_full_name": "cjgillot",
        "timestamp": 1615052140
    },
    {
        "content": "<p>I am fine with landing <a href=\"https://github.com/rust-lang/rust/issues/82780\">#82780</a>. If necessary I will see what I need to do when/if I get around implementing this idea.</p>",
        "id": 229115188,
        "sender_full_name": "bjorn3",
        "timestamp": 1615052497
    },
    {
        "content": "<p>Ok, don't hesitate to ping me when you get to it.</p>",
        "id": 229115980,
        "sender_full_name": "cjgillot",
        "timestamp": 1615053233
    }
]