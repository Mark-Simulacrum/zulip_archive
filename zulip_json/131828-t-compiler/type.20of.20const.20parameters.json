[
    {
        "content": "<p>I wish to explicitly forbid const parameters with generic types.</p>\n<p>Why I think supporting them is not worth it for now:</p>",
        "id": 203399143,
        "sender_full_name": "lcnr",
        "timestamp": 1594307928
    },
    {
        "content": "<ul>\n<li><code>ConstKind::Unevaluated</code> uses its parents generics, meaning that for <code>fn foo&lt;T, const N: [u8; 1 + 2]&gt;()</code> we represent <code>1 + 2</code> as <code>ConstKind::Unevaluated(def, substs = [T, N], promoted = None)</code>.</li>\n</ul>",
        "id": 203399399,
        "sender_full_name": "lcnr",
        "timestamp": 1594308032
    },
    {
        "content": "<p>This happens because <code>Node::AnonConst</code> use their parents generics, i.e. it currently has the following chain <code>1 + 3</code> -&gt; <code>[u8; _]</code> -&gt; <code>fn foo</code>.</p>",
        "id": 203399582,
        "sender_full_name": "lcnr",
        "timestamp": 1594308114
    },
    {
        "content": "<p>As both <code>T</code> and <code>N</code> are taken directly from the generics of <code>fn foo</code>, we can't really keep the current <code>generics_of</code> impl if we want to support generic const param types</p>",
        "id": 203399888,
        "sender_full_name": "lcnr",
        "timestamp": 1594308241
    },
    {
        "content": "<ul>\n<li>We also have a more difficult version of <a href=\"https://github.com/rust-lang/rust/pull/74113\">https://github.com/rust-lang/rust/pull/74113</a> around type inference here.<br>\ni.e. how should we deal with the following examples (at least I believe that this is the case)</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">()}</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Should we infer the type of `T` from the body of `N`?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// We probably want to use the type of `T` when type checking `N`.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203400569,
        "sender_full_name": "lcnr",
        "timestamp": 1594308509
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/rust/issues/74152\">#74152</a> for this and ended up implementing the first step of that issue in <a href=\"https://github.com/rust-lang/rust/issues/74159\">#74159</a></p>",
        "id": 203400783,
        "sender_full_name": "lcnr",
        "timestamp": 1594308611
    },
    {
        "content": "<p>To correctly detect if we are inside of the type of a const param I would do the following:</p>\n<ul>\n<li>don't simply use the parent item when computing the parent generics by skipping some item kinds<br>\n   i.e. instead of <code>1 + 3</code> -&gt; <code>[u8; _]</code> -&gt; <code>fn foo</code> I want <code>1 + 3</code> -&gt; <code>fn foo</code></li>\n</ul>",
        "id": 203400968,
        "sender_full_name": "lcnr",
        "timestamp": 1594308714
    },
    {
        "content": "<ul>\n<li>stop using the parent generics if we are inside of the <code>ty</code> of a <code>GenericParamKind::Const { ty }</code> of the parent (hir) generics</li>\n</ul>",
        "id": 203401175,
        "sender_full_name": "lcnr",
        "timestamp": 1594308790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>\n<ul>\n<li>do you want this change?</li>\n</ul>",
        "id": 203401356,
        "sender_full_name": "lcnr",
        "timestamp": 1594308873
    },
    {
        "content": "<ul>\n<li>does my idea on how to implement this seem correct?</li>\n</ul>",
        "id": 203401379,
        "sender_full_name": "lcnr",
        "timestamp": 1594308886
    },
    {
        "content": "<p>we're not supposed to allow generic parameters in const param types</p>",
        "id": 203403685,
        "sender_full_name": "eddyb",
        "timestamp": 1594309928
    },
    {
        "content": "<p>this is part of the initial const generics limitations</p>",
        "id": 203403709,
        "sender_full_name": "eddyb",
        "timestamp": 1594309942
    },
    {
        "content": "<p>we do though, which I want to change rn</p>",
        "id": 203403726,
        "sender_full_name": "lcnr",
        "timestamp": 1594309950
    },
    {
        "content": "<p>no that's just a bug</p>",
        "id": 203403734,
        "sender_full_name": "eddyb",
        "timestamp": 1594309957
    },
    {
        "content": "<p>i.e. a missing check</p>",
        "id": 203403751,
        "sender_full_name": "eddyb",
        "timestamp": 1594309961
    },
    {
        "content": "<p>it's not supposed to be allowed</p>",
        "id": 203403762,
        "sender_full_name": "eddyb",
        "timestamp": 1594309966
    },
    {
        "content": "<p>yeah, then I want to implement this check and need feedback <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 203403794,
        "sender_full_name": "lcnr",
        "timestamp": 1594309985
    },
    {
        "content": "<p>we'd need traits and whatnot to limit the types to the ones for which const generics are allowed etc.</p>",
        "id": 203403816,
        "sender_full_name": "eddyb",
        "timestamp": 1594309996
    },
    {
        "content": "<p>you can do banning in name resolution</p>",
        "id": 203403866,
        "sender_full_name": "eddyb",
        "timestamp": 1594310023
    },
    {
        "content": "<p>the same way we disallow <code>struct Foo&lt;T = U, U&gt;</code></p>",
        "id": 203403971,
        "sender_full_name": "eddyb",
        "timestamp": 1594310051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203403866\">said</a>:</p>\n<blockquote>\n<p>you can do banning in name resolution</p>\n</blockquote>\n<p>I already did <a href=\"https://github.com/rust-lang/rust/pull/74159\">https://github.com/rust-lang/rust/pull/74159</a></p>",
        "id": 203403988,
        "sender_full_name": "lcnr",
        "timestamp": 1594310059
    },
    {
        "content": "<p>then you don't need to change anything else?</p>",
        "id": 203404029,
        "sender_full_name": "eddyb",
        "timestamp": 1594310075
    },
    {
        "content": "<p>I do! <code>foo&lt;const N: [u8; 1 + 2]&gt;</code> is broken</p>",
        "id": 203404060,
        "sender_full_name": "lcnr",
        "timestamp": 1594310091
    },
    {
        "content": "<p>because <code>1 + 2</code> contains <code>N</code> in its substs</p>",
        "id": 203404081,
        "sender_full_name": "lcnr",
        "timestamp": 1594310103
    },
    {
        "content": "<p>okay but that's not about anything user-facing</p>",
        "id": 203404097,
        "sender_full_name": "eddyb",
        "timestamp": 1594310109
    },
    {
        "content": "<p>that is, the check and this problem are separate</p>",
        "id": 203404119,
        "sender_full_name": "eddyb",
        "timestamp": 1594310121
    },
    {
        "content": "<p>well, it causes a cycle error</p>",
        "id": 203404129,
        "sender_full_name": "lcnr",
        "timestamp": 1594310124
    },
    {
        "content": "<p>which is fairly userfacing</p>",
        "id": 203404136,
        "sender_full_name": "lcnr",
        "timestamp": 1594310129
    },
    {
        "content": "<p>what I mean is it sounds like you want to add a check to solve this problem</p>",
        "id": 203404160,
        "sender_full_name": "eddyb",
        "timestamp": 1594310142
    },
    {
        "content": "<p>but the check is required by what we agreed to implement as const generics</p>",
        "id": 203404184,
        "sender_full_name": "eddyb",
        "timestamp": 1594310151
    },
    {
        "content": "<p>and separate from this problem</p>",
        "id": 203404190,
        "sender_full_name": "eddyb",
        "timestamp": 1594310157
    },
    {
        "content": "<p>We need to change the way generic parents are handled</p>",
        "id": 203404233,
        "sender_full_name": "lcnr",
        "timestamp": 1594310163
    },
    {
        "content": "<p>sure it's just not related to the check</p>",
        "id": 203404246,
        "sender_full_name": "eddyb",
        "timestamp": 1594310172
    },
    {
        "content": "<p>This is what I need feedback on rn:<br>\n<a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203400968\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203400968</a></p>",
        "id": 203404275,
        "sender_full_name": "lcnr",
        "timestamp": 1594310185
    },
    {
        "content": "<p>like, \"I wish to explicitly forbid const parameters with generic types.\" is uncontroversial, in fact it's required</p>",
        "id": 203404311,
        "sender_full_name": "eddyb",
        "timestamp": 1594310211
    },
    {
        "content": "<p>but that's different from anything to do with <code>generics_of</code></p>",
        "id": 203404343,
        "sender_full_name": "eddyb",
        "timestamp": 1594310232
    },
    {
        "content": "<p>we seem to be talking past each other rn</p>",
        "id": 203404547,
        "sender_full_name": "lcnr",
        "timestamp": 1594310317
    },
    {
        "content": "<p>Let me state my problem step by step so you can intersect where you disagree</p>",
        "id": 203404582,
        "sender_full_name": "lcnr",
        "timestamp": 1594310334
    },
    {
        "content": "<ol>\n<li>We want <code>fn foo&lt;const N: [u8; 1 + 2]&gt;</code> to compile</li>\n</ol>",
        "id": 203404626,
        "sender_full_name": "lcnr",
        "timestamp": 1594310349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203400968\">said</a>:</p>\n<blockquote>\n<ul>\n<li>don't simply use the parent item when computing the parent generics by skipping some item kinds<br>\n   i.e. instead of <code>1 + 3</code> -&gt; <code>[u8; _]</code> -&gt; <code>fn foo</code> I want <code>1 + 3</code> -&gt; <code>fn foo</code></li>\n</ul>\n</blockquote>\n<p>I don't think any change is necessary here</p>",
        "id": 203404638,
        "sender_full_name": "eddyb",
        "timestamp": 1594310358
    },
    {
        "content": "<p>actually I don't even think <code>1 + 3</code> -&gt; <code>[u8; _]</code> -&gt; <code>fn foo</code> happens today</p>",
        "id": 203404701,
        "sender_full_name": "eddyb",
        "timestamp": 1594310388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> yes, but framing that as \"forbidding const parameters with generic types\" is incorrect IMO</p>",
        "id": 203404773,
        "sender_full_name": "eddyb",
        "timestamp": 1594310407
    },
    {
        "content": "<p>at the start of the topic it sounds like you're talking about about the user writing a generic parameter in the type</p>",
        "id": 203404837,
        "sender_full_name": "eddyb",
        "timestamp": 1594310438
    },
    {
        "content": "<p>whereas this problem is more internal to the implementation</p>",
        "id": 203404865,
        "sender_full_name": "eddyb",
        "timestamp": 1594310449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203404773\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> yes, but framing that as \"forbidding const parameters with generic types\" is incorrect IMO</p>\n</blockquote>\n<p>From discussion in const generics issues it seems like you/ <span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span>  wanted to allow this in the future, which is why I explicitly stated this at the start of this discussion</p>",
        "id": 203404926,
        "sender_full_name": "lcnr",
        "timestamp": 1594310478
    },
    {
        "content": "<p>Forbidding generic types is a requirement if  we want to fix the implementation, which is why I mentioned this</p>",
        "id": 203405000,
        "sender_full_name": "lcnr",
        "timestamp": 1594310505
    },
    {
        "content": "<p>we can make it work in the future with some limitations</p>",
        "id": 203405004,
        "sender_full_name": "eddyb",
        "timestamp": 1594310507
    },
    {
        "content": "<p>it's orthogonal to fixing the implementation when the user didn't ask for any generic parameters in the type of the const param</p>",
        "id": 203405113,
        "sender_full_name": "eddyb",
        "timestamp": 1594310547
    },
    {
        "content": "<p>that is, as a future extension, we can try to make it work (or just give up and never do it), but <em>now</em> we can assume it's never the case</p>",
        "id": 203405331,
        "sender_full_name": "eddyb",
        "timestamp": 1594310642
    },
    {
        "content": "<p>similar how today we have associated types without generic parameters but GATs are being/were designed and are being/will be implemented</p>",
        "id": 203405457,
        "sender_full_name": "eddyb",
        "timestamp": 1594310683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> here's a fun exercise: what happens if you have <code>struct Foo&lt;T, U = [u8; 1+2]&gt;(T, U);</code>?</p>",
        "id": 203405696,
        "sender_full_name": "eddyb",
        "timestamp": 1594310782
    },
    {
        "content": "<p>With lazy norm I would expect a cycle error</p>",
        "id": 203405764,
        "sender_full_name": "lcnr",
        "timestamp": 1594310822
    },
    {
        "content": "<p>without lazy norm everything works fine</p>",
        "id": 203405786,
        "sender_full_name": "lcnr",
        "timestamp": 1594310833
    },
    {
        "content": "<p>let me check <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 203405801,
        "sender_full_name": "lcnr",
        "timestamp": 1594310838
    },
    {
        "content": "<p>oh oops I'm not making it use parent generics lol</p>",
        "id": 203405983,
        "sender_full_name": "eddyb",
        "timestamp": 1594310915
    },
    {
        "content": "<p>yeah it ICEs lol</p>",
        "id": 203406016,
        "sender_full_name": "eddyb",
        "timestamp": 1594310936
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc_middle</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">subst</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">554</span>:<span class=\"mi\">17</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">U</span><span class=\"o\">/</span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">substituting</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"o\">=</span><span class=\"nb\">Some</span><span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">]))</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">12</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">^^^^^^</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203406024,
        "sender_full_name": "lcnr",
        "timestamp": 1594310941
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fe719231d2c620d6bf56fa8858040d84\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fe719231d2c620d6bf56fa8858040d84</a></p>",
        "id": 203406097,
        "sender_full_name": "eddyb",
        "timestamp": 1594310980
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203406107,
        "sender_full_name": "eddyb",
        "timestamp": 1594310986
    },
    {
        "content": "<p>that's, IMO, the same bug</p>",
        "id": 203406196,
        "sender_full_name": "eddyb",
        "timestamp": 1594311015
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203406201,
        "sender_full_name": "lcnr",
        "timestamp": 1594311021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203406196\">said</a>:</p>\n<blockquote>\n<p>that's, IMO, the same bug</p>\n</blockquote>\n<p>I think so too, which I want to fix by not supplying <code>T, U</code> to <code>1 + 2</code></p>",
        "id": 203406259,
        "sender_full_name": "lcnr",
        "timestamp": 1594311042
    },
    {
        "content": "<p>yes, anything inside the definition of generic parameters shouldn't see those generic parameters in scope</p>",
        "id": 203406304,
        "sender_full_name": "eddyb",
        "timestamp": 1594311067
    },
    {
        "content": "<p>Though, what about <code>Foo&lt;T, U = [u8; std::mem::size_of&lt;T&gt;]&gt;</code></p>",
        "id": 203406381,
        "sender_full_name": "lcnr",
        "timestamp": 1594311100
    },
    {
        "content": "<p>exactly, I was gonna bring that up</p>",
        "id": 203406395,
        "sender_full_name": "eddyb",
        "timestamp": 1594311107
    },
    {
        "content": "<p>I think we should disallow this in name resolution</p>",
        "id": 203406411,
        "sender_full_name": "eddyb",
        "timestamp": 1594311116
    },
    {
        "content": "<p>as \"unimplementable for now\"</p>",
        "id": 203406464,
        "sender_full_name": "eddyb",
        "timestamp": 1594311123
    },
    {
        "content": "<p>So the limitation is: We are inside of a const context + inside of a generic param ty/default =&gt; forbid generic params</p>",
        "id": 203406561,
        "sender_full_name": "lcnr",
        "timestamp": 1594311172
    },
    {
        "content": "<p>I think so yeah</p>",
        "id": 203406598,
        "sender_full_name": "eddyb",
        "timestamp": 1594311186
    },
    {
        "content": "<p>nice <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 203406633,
        "sender_full_name": "lcnr",
        "timestamp": 1594311203
    },
    {
        "content": "<p>Now back to <code>ty::Generics</code></p>",
        "id": 203406654,
        "sender_full_name": "lcnr",
        "timestamp": 1594311215
    },
    {
        "content": "<p>not all generic params though, just those from the same list of params as what this is in</p>",
        "id": 203406659,
        "sender_full_name": "eddyb",
        "timestamp": 1594311217
    },
    {
        "content": "<p>(think method using params of impl)</p>",
        "id": 203406689,
        "sender_full_name": "eddyb",
        "timestamp": 1594311237
    },
    {
        "content": "<p>wait no nvm that's still broken, isn't it?</p>",
        "id": 203406738,
        "sender_full_name": "eddyb",
        "timestamp": 1594311248
    },
    {
        "content": "<p>i think that's fine if we do it right</p>",
        "id": 203406789,
        "sender_full_name": "lcnr",
        "timestamp": 1594311275
    },
    {
        "content": "<p>let me quickly write an example of what I mean here</p>",
        "id": 203406807,
        "sender_full_name": "lcnr",
        "timestamp": 1594311285
    },
    {
        "content": "<p>I guess it wouldn't ICE exactly as these examples do</p>",
        "id": 203406818,
        "sender_full_name": "eddyb",
        "timestamp": 1594311287
    },
    {
        "content": "<p>since the parent substitutions would entirely exist</p>",
        "id": 203406855,
        "sender_full_name": "eddyb",
        "timestamp": 1594311311
    },
    {
        "content": "<p>and <code>ty::Generics</code> can represent that case</p>",
        "id": 203406876,
        "sender_full_name": "eddyb",
        "timestamp": 1594311326
    },
    {
        "content": "<p>what <code>ty::Generics</code> can't represent today is subsets</p>",
        "id": 203406888,
        "sender_full_name": "eddyb",
        "timestamp": 1594311335
    },
    {
        "content": "<p>hopefully maybe that will improve with Chalk</p>",
        "id": 203406906,
        "sender_full_name": "eddyb",
        "timestamp": 1594311348
    },
    {
        "content": "<p>This already works I guess</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203407013,
        "sender_full_name": "lcnr",
        "timestamp": 1594311400
    },
    {
        "content": "<p>heh</p>",
        "id": 203407040,
        "sender_full_name": "eddyb",
        "timestamp": 1594311416
    },
    {
        "content": "<p>although <code>N</code> in the array length isn't an unevaluated expression</p>",
        "id": 203407110,
        "sender_full_name": "eddyb",
        "timestamp": 1594311453
    },
    {
        "content": "<p>yeah, <code>ConstKind::Unevaluated</code> currently always breaks</p>",
        "id": 203407139,
        "sender_full_name": "lcnr",
        "timestamp": 1594311472
    },
    {
        "content": "<p>because it contains ALL THE SUBSTS</p>",
        "id": 203407161,
        "sender_full_name": "lcnr",
        "timestamp": 1594311482
    },
    {
        "content": "<p>okay so for <code>generics_of</code>: you can walk the nodes up through types until you find the generic param node - although I'm not 100% sure the type is a child of the generic param?</p>",
        "id": 203407271,
        "sender_full_name": "eddyb",
        "timestamp": 1594311516
    },
    {
        "content": "<p>I guess I can find out</p>",
        "id": 203407279,
        "sender_full_name": "eddyb",
        "timestamp": 1594311520
    },
    {
        "content": "<p>awww <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/hir/map/collector.rs#L360-L363\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/hir/map/collector.rs#L360-L363</a></p>",
        "id": 203407360,
        "sender_full_name": "eddyb",
        "timestamp": 1594311558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> the walk call there should look like this: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/hir/map/collector.rs#L424-L426\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/hir/map/collector.rs#L424-L426</a></p>",
        "id": 203407410,
        "sender_full_name": "eddyb",
        "timestamp": 1594311594
    },
    {
        "content": "<p>then you should be able to find the node just by walking up the HIR</p>",
        "id": 203407466,
        "sender_full_name": "eddyb",
        "timestamp": 1594311605
    },
    {
        "content": "<p>will have to look at this, kind of afraid of something like this breaking because of this :/</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">Value</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"p\">}]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203410311,
        "sender_full_name": "lcnr",
        "timestamp": 1594312957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> well you'd stop at an item node, at the very least</p>",
        "id": 203427377,
        "sender_full_name": "eddyb",
        "timestamp": 1594322196
    },
    {
        "content": "<p><code>struct</code> and <code>impl</code> will continue to have no generics parent</p>",
        "id": 203427418,
        "sender_full_name": "eddyb",
        "timestamp": 1594322225
    },
    {
        "content": "<p>and anything inside them would never go beyond them</p>",
        "id": 203427470,
        "sender_full_name": "eddyb",
        "timestamp": 1594322261
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/74159\">https://github.com/rust-lang/rust/pull/74159</a> now works, even if I fear that it is somewhat inefficient <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 203437192,
        "sender_full_name": "lcnr",
        "timestamp": 1594327083
    },
    {
        "content": "<p>Well, structs in the type of const params ICE for completely different reasons <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> why is this all such a damn mess</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/74199\">https://github.com/rust-lang/rust/issues/74199</a></p>",
        "id": 203438960,
        "sender_full_name": "lcnr",
        "timestamp": 1594327937
    },
    {
        "content": "<p>Sorry, this week has been very busy with deadlines.</p>",
        "id": 203613215,
        "sender_full_name": "varkor",
        "timestamp": 1594501205
    },
    {
        "content": "<p>I don't understand where the original check went: this should have already been forbidden. It must have accidentally been removed, but I'm not sure how.</p>",
        "id": 203613224,
        "sender_full_name": "varkor",
        "timestamp": 1594501230
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> did not want this sort of check in name resolution. It should be in the same place that does <code>structural_match</code> checking.</p>",
        "id": 203613231,
        "sender_full_name": "varkor",
        "timestamp": 1594501253
    },
    {
        "content": "<p>Maybe it got messed up when all the <code>structural_match</code> refactoring was going on?</p>",
        "id": 203613237,
        "sender_full_name": "varkor",
        "timestamp": 1594501265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> wait what does any of this have to do with <code>structural_match</code>?</p>",
        "id": 203618517,
        "sender_full_name": "eddyb",
        "timestamp": 1594510736
    },
    {
        "content": "<p>it needs to be in name resolution because you can't avoid ICE-ing if it does resolve</p>",
        "id": 203618522,
        "sender_full_name": "eddyb",
        "timestamp": 1594510757
    },
    {
        "content": "<p>this is the same reason why we handle <code>struct Foo&lt;T = T&gt;</code> in name resolution</p>",
        "id": 203618624,
        "sender_full_name": "eddyb",
        "timestamp": 1594510930
    },
    {
        "content": "<p>we can do both later, and it might a good idea to do that, but we'd have to augment <code>AstConv</code> with \"generic parameters in scope\"</p>",
        "id": 203618629,
        "sender_full_name": "eddyb",
        "timestamp": 1594510970
    },
    {
        "content": "<p>currently we just trust name resolution</p>",
        "id": 203618632,
        "sender_full_name": "eddyb",
        "timestamp": 1594510986
    },
    {
        "content": "<p>I thought what we were doing previously was checking whether a type was structural_match to decide whether to allow it. Types with generic parameters were forbidden as part of that check.</p>",
        "id": 203618678,
        "sender_full_name": "varkor",
        "timestamp": 1594511094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> so to explain a bit, you can't allow creating a <code>ty::Param(...)</code> (in <code>rustc_typeck::astconv</code>) that refers to a type parameter that is not going to be available for substitution later, as it will ICE. so if we want to prevent that in <code>rustc_typeck</code> we have to perfectly model \"type parameters in scope\" instead of relying on <code>rustc_resolve</code>'s (more direct) understanding</p>",
        "id": 203618679,
        "sender_full_name": "eddyb",
        "timestamp": 1594511097
    },
    {
        "content": "<p>I may be misremembering though.</p>",
        "id": 203618684,
        "sender_full_name": "varkor",
        "timestamp": 1594511103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> that doesn't prevent the type from existing</p>",
        "id": 203618689,
        "sender_full_name": "eddyb",
        "timestamp": 1594511116
    },
    {
        "content": "<p>and ICE-ing anything it touches</p>",
        "id": 203618692,
        "sender_full_name": "eddyb",
        "timestamp": 1594511125
    },
    {
        "content": "<p>Right.</p>",
        "id": 203618693,
        "sender_full_name": "varkor",
        "timestamp": 1594511131
    },
    {
        "content": "<p>so one of two places needs to block this, and IMO if we switch to <code>rustc_typeck</code> we should move the thing about type parameter defaults there too</p>",
        "id": 203618748,
        "sender_full_name": "eddyb",
        "timestamp": 1594511182
    },
    {
        "content": "<p>since we'd have the information to disallow it there and it would be cleaner than the hack in <code>rustc_resolve</code></p>",
        "id": 203618751,
        "sender_full_name": "eddyb",
        "timestamp": 1594511200
    },
    {
        "content": "<p>That does seem like the most natural place, but would require some refactoring, so probably sticking it in resolve is best for now.</p>",
        "id": 203618753,
        "sender_full_name": "varkor",
        "timestamp": 1594511223
    },
    {
        "content": "<p>it's just... work. and it might be easy to get wrong \"generic parameters in scope\", not sure (it might just as well be straight-forward)</p>",
        "id": 203618756,
        "sender_full_name": "eddyb",
        "timestamp": 1594511229
    },
    {
        "content": "<p>right. and to be clear, AFAICT I'd welcome the refactor</p>",
        "id": 203618760,
        "sender_full_name": "eddyb",
        "timestamp": 1594511244
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 203618763,
        "sender_full_name": "varkor",
        "timestamp": 1594511260
    },
    {
        "content": "<p>maybe I should've tried it a while back (read: many years ago) to deal with the ICEs from the broken <code>generics_of</code> for constant expressions</p>",
        "id": 203618765,
        "sender_full_name": "eddyb",
        "timestamp": 1594511277
    },
    {
        "content": "<p>Unfortunately I don't have much time to write code at the moment :(</p>",
        "id": 203618803,
        "sender_full_name": "varkor",
        "timestamp": 1594511290
    },
    {
        "content": "<p>working on <code>rustc</code> is a recipe for accumulating a lifetime of regrets,,,</p>",
        "id": 203618804,
        "sender_full_name": "eddyb",
        "timestamp": 1594511290
    },
    {
        "content": "<p>:P</p>",
        "id": 203618807,
        "sender_full_name": "varkor",
        "timestamp": 1594511300
    },
    {
        "content": "<p>It continues to get better, little by little, refactor by refactor.</p>",
        "id": 203618821,
        "sender_full_name": "varkor",
        "timestamp": 1594511352
    },
    {
        "content": "<p>I guess for now we can open up a C-cleanup issue to keep a record of this somewhere.</p>",
        "id": 203618875,
        "sender_full_name": "varkor",
        "timestamp": 1594511409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203618821\">said</a>:</p>\n<blockquote>\n<p>It continues to get better, little by little, refactor by refactor.</p>\n</blockquote>\n<p>If only people who like to accumulate technical debt weren't much more productive than those who like cleaning it up...</p>",
        "id": 203636022,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594546522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203618679\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> so to explain a bit, you can't allow creating a <code>ty::Param(...)</code> (in <code>rustc_typeck::astconv</code>) that refers to a type parameter that is not going to be available for substitution later, as it will ICE</p>\n</blockquote>\n<p>I see.<br>\nIt should be some generic check for type parameters than are \"not in scope in typeck sense\", if it's done in resolve.<br>\nThe last time I've seen it implemented it was a very special case for const generics.</p>",
        "id": 203636133,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594546726
    },
    {
        "content": "<p>Without these peculiarities with ICEs from substs, a generic parameter is just one of many kinds of non structurally-comparable types, so I suggested to unify these checks.</p>",
        "id": 203636190,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594546876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> arguably, yes, but that (checking it in the \"is structural match\" logic) only works if the generic parameter is actually \"in scope\" (and we could allow it if we just had something like a <code>T: StructuralMatch</code> bound the user could use), which is sadly not the case</p>",
        "id": 203660240,
        "sender_full_name": "eddyb",
        "timestamp": 1594586710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203636133\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203618679\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> so to explain a bit, you can't allow creating a <code>ty::Param(...)</code> (in <code>rustc_typeck::astconv</code>) that refers to a type parameter that is not going to be available for substitution later, as it will ICE</p>\n</blockquote>\n<p>I see.<br>\nIt should be some generic check for type parameters than are \"not in scope in typeck sense\", if it's done in resolve.<br>\nThe last time I've seen it implemented it was a very special case for const generics.</p>\n</blockquote>\n<p>fair, although the \"type parameter defaults only seeing type parameters before, not after\" rule is weirdly specific and complicates things</p>",
        "id": 203660319,
        "sender_full_name": "eddyb",
        "timestamp": 1594586855
    },
    {
        "content": "<p>also the difference between \"type param default / const param type (or default if we add those)\" and bounds makes it ugly, since bounds don't have any restrictions</p>",
        "id": 203660369,
        "sender_full_name": "eddyb",
        "timestamp": 1594586900
    }
]