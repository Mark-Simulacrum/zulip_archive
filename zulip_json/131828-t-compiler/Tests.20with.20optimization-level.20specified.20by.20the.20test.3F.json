[
    {
        "content": "<p>I remember us having a lot of trouble with tests not being able to specify the optimisation level they are aimed to. Usually the workaround was to use <code>-Cno-prepopulate-passes</code>. Well, now that I’m trying to make some tests for <code>#[optimize]</code> attribute, that does not work, because doing a <code>-Cno-prepopulate-passes</code> does not actually influence the optimisation flags, so something like the following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(optimize_attribute)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[optimize(size)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[optimize(speed)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">speed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>cannot be tested with various sets of <code>-O</code> and <code>-Copt-level</code> flags to ensure the correct codegen. Any easy way out?</p>",
        "id": 137008401,
        "sender_full_name": "nagisa",
        "timestamp": 1541162027
    },
    {
        "content": "<p>There are notable differences in how these functions are compiled with different flags (esp. the <code>foo</code>) function. This is what is generated with no optimisation flags:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">; Function Attrs: nonlazybind optnone uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@test</span><span class=\"err\">::foo</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"p\">}</span> <span class=\"vg\">@llvm.sadd.with.overflow.i32</span><span class=\"p\">(</span><span class=\"k\">i32</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">2</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">extractvalue</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"p\">}</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"m\">0</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">extractvalue</span> <span class=\"p\">{</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"p\">}</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"k\">i1</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%panic</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span><span class=\"p\">,</span> <span class=\"nv\">!prof</span> <span class=\"nv nv-Anonymous\">!1</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n<span class=\"p\">&lt;</span><span class=\"err\">snip</span><span class=\"p\">&gt;</span>\n\n<span class=\"nl\">panic:</span>                                            <span class=\"c\">; preds = %start</span>\n<span class=\"p\">&lt;</span><span class=\"err\">snip</span><span class=\"p\">&gt;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>whereas if compiled with <code>-Copt-level=z</code> you get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">; Function Attrs: minsize norecurse nounwind nonlazybind optsize readnone uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@test</span><span class=\"err\">::foo</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"m\">4</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and so on and forth.</p>",
        "id": 137009001,
        "sender_full_name": "nagisa",
        "timestamp": 1541162186
    },
    {
        "content": "<p>It would be ideal, even, if we could use the same test file with multiple configurations… just like <a href=\"https://github.com/llvm-mirror/llvm/blob/master/test/CodeGen/ARM/umulo-128-legalisation-lowering.ll#L2\" target=\"_blank\" title=\"https://github.com/llvm-mirror/llvm/blob/master/test/CodeGen/ARM/umulo-128-legalisation-lowering.ll#L2\">LLVM does it</a>.</p>",
        "id": 137009631,
        "sender_full_name": "nagisa",
        "timestamp": 1541162363
    },
    {
        "content": "<p><strong>TL;DR</strong> I’m looking a way to write a codegen test that can vary over an optimization level flag.</p>",
        "id": 137027930,
        "sender_full_name": "nagisa",
        "timestamp": 1541166885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> can you use revisions to do it?</p>",
        "id": 137073267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183258
    },
    {
        "content": "<p>you can do <code>// revisions: foo bar</code> for example in a test</p>",
        "id": 137073272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183266
    },
    {
        "content": "<p>and then do <code>//[foo] compile-flags: ...</code></p>",
        "id": 137073276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183271
    },
    {
        "content": "<p>and <code>//[bar] compile-flags: ...</code></p>",
        "id": 137073279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183276
    },
    {
        "content": "<p>revisions sound nice, but can one specify arbitrary compile-flags? What I need is specifically <code>-Copt-level</code>. I recall it wasn’t possible before.</p>",
        "id": 137100178,
        "sender_full_name": "nagisa",
        "timestamp": 1541221640
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// revisions: NO-OPT SIZE-OPT SPEED-OPT</span>\n<span class=\"c1\">// [NO-OPT] compile-flags: -Copt-level=0</span>\n<span class=\"c1\">// [SIZE-OPT] compile-flags: -Copt-level=s</span>\n<span class=\"c1\">// [SPEED-OPT] compile-flags: -Copt-level=3</span>\n\n<span class=\"cp\">#![feature(optimize_attribute)]</span><span class=\"w\"></span>\n\n<span class=\"c1\">// NO-OPT: Function Attrs:{{.*}}optnone</span>\n<span class=\"c1\">// NO-OPT-NOT: {{optsize|minsize}}</span>\n<span class=\"c1\">// NO-OPT-NEXT: @nothing</span>\n<span class=\"c1\">// NO-OPT: ret i32 %1</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// SIZE-OPT: Function Attrs:{{.*}}optsize</span>\n<span class=\"c1\">// SIZE-OPT-NOT: {{minsize|optnone}}</span>\n<span class=\"c1\">// SIZE-OPT-NEXT: @nothing</span>\n<span class=\"c1\">// SIZE-OPT-NEXT: start</span>\n<span class=\"c1\">// SIZE-OPT-NEXT: ret i32 4</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// SPEED-OPT: Function Attrs:</span>\n<span class=\"c1\">// SPEED-OPT-NOT: {{minsize|optnone|optsize}}</span>\n<span class=\"c1\">// SPEED-OPT-NEXT: @nothing</span>\n<span class=\"c1\">// SPEED-OPT-NEXT: start</span>\n<span class=\"c1\">// SPEED-OPT-NEXT: ret i32 4</span>\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">nothing</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// CHECK: Function Attrs:{{.*}} minsize{{.*}}optsize</span>\n<span class=\"c1\">// CHECK-NEXT: @size</span>\n<span class=\"c1\">// CHECK-NEXT: start</span>\n<span class=\"c1\">// CHECK-NEXT: ret i32 4</span>\n<span class=\"cp\">#[optimize(size)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// CHECK: Function Attrs:</span>\n<span class=\"c1\">// CHECK-NOT: {{minsize|optsize|optnone}}</span>\n<span class=\"c1\">// CHECK-NEXT: @speed</span>\n<span class=\"c1\">// CHECK-NEXT: start</span>\n<span class=\"c1\">// CHECK-NEXT: ret i32 4</span>\n<span class=\"cp\">#[optimize(speed)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">speed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 137106297,
        "sender_full_name": "nagisa",
        "timestamp": 1541236192
    },
    {
        "content": "<p>is the test I’m trying to write. Alas, the codegen tests do not support \"revisions\" in the first place: </p>\n<div class=\"codehilite\"><pre><span></span>---- [codegen] codegen/optimize-attr-1.rs#NO-OPT stdout ----\nthread &#39;[codegen] codegen/optimize-attr-1.rs#NO-OPT&#39; panicked at &#39;revisions not relevant here&#39;, tools/compiletest/src/runtest.rs:2093:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</pre></div>",
        "id": 137106389,
        "sender_full_name": "nagisa",
        "timestamp": 1541236330
    },
    {
        "content": "<p>I was just encountering this yesterday. providing <code>-Copt-level</code> in a <code>// compile-flags</code> is no good because the test driver will also inject its own <code>-O</code> and then the <code>rustc</code> invocation will error out because of multiple <code>opt-level</code> options being provided</p>",
        "id": 146857060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541500408
    },
    {
        "content": "<p>Maybe we can add a <code>// opt-level: ...</code> annotation for the test, and then that overrides whatever the default is in <code>compiletest</code> ?</p>",
        "id": 146857069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541500440
    },
    {
        "content": "<p>(my own scenario was a run-pass test, not a codegen one, but I imagine the issues are similar...)</p>",
        "id": 146857117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541500486
    },
    {
        "content": "<p>Hmm. Doesn't the same scenario arguably arise with debuginfo-tests? I had to actually manually add <code>-g</code> to a test just now via <code>// compile-flags: ...</code>, which strikes me as odd because the config.toml.example says that <code>debuginfo-tests=true</code> is the default...</p>",
        "id": 146864234,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541510445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> It shouldn't be too hard to add revisions support for codegen tests. <code>runtest.rs</code> has most of the code.</p>",
        "id": 146864762,
        "sender_full_name": "mw",
        "timestamp": 1541511085
    },
    {
        "content": "<p>yeah, but revisions is of least concern to me, I’ll have to work on making sure <code>-Copt-level</code> works in <code>compile-flags</code>.</p>",
        "id": 146873375,
        "sender_full_name": "nagisa",
        "timestamp": 1541519664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> what do you think of instead adding a <code>// opt-level: N</code> (and <code>// debuginfo: N</code>) property to tests?</p>",
        "id": 146873527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541519854
    },
    {
        "content": "<p>(that then overrides any default in use by the compiletest environment)</p>",
        "id": 146873544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541519881
    },
    {
        "content": "<p>doesn’t sound general enough – I’m sure we’ll end up hitting more obscure flags like these in the future.</p>",
        "id": 146876380,
        "sender_full_name": "nagisa",
        "timestamp": 1541522124
    },
    {
        "content": "<p>I’d rather just parse the compile-flags line and override all default options in compiletest.</p>",
        "id": 146876401,
        "sender_full_name": "nagisa",
        "timestamp": 1541522148
    },
    {
        "content": "<p>hmm. well at some point we'll have to wonder if we're better off pulling the option definitions out into their own crate that <code>compiletest</code> could link to...</p>",
        "id": 146885410,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541530554
    },
    {
        "content": "<p>maybe add something like // ignore-default-flags: &lt;flags not to add by default&gt;</p>",
        "id": 146928352,
        "sender_full_name": "mw",
        "timestamp": 1541582403
    },
    {
        "content": "<p>@mw that sounds just has hard to implement as what <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> is describing, and harder to use, no?</p>",
        "id": 146932593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541588519
    },
    {
        "content": "<p>oh right, I didn't see that. Seems like a fine solution.</p>",
        "id": 146969194,
        "sender_full_name": "mw",
        "timestamp": 1541607472
    }
]