[
    {
        "content": "<p>At the moment, dataflow iteration begins processing blocks in order of ascending IDs (<code>BasicBlock(0)</code>, <code>BasicBlock(1)</code>, etc.). However, for maximum efficiency during <em>forward</em> dataflow, basic blocks should be processed in reverse post-order. My guess is that the current ID ordering is pretty close to RPO for most functions, but it might be worth doing a perf run anyways.</p>\n<p>Additionally, there is currently a <em>backward</em> dataflow analysis for liveness which is also iterating over blocks in order of ascending IDs. I think this could be sped up by initializing the <code>WorkQueue</code> in postorder (or alternatively reverse post-order on the reverse CFG).</p>",
        "id": 168761069,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561229297
    },
    {
        "content": "<p>Does anyone have an opinion on whether this is worth pursuing? The implementation is pretty simple, I would just need someone to trigger a perf run.</p>",
        "id": 168761146,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561229478
    },
    {
        "content": "<p>Worth doing, yes.</p>",
        "id": 168762355,
        "sender_full_name": "nagisa",
        "timestamp": 1561231792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>, should I open an issue for this as well to solicit discussion? Or just a PR?</p>",
        "id": 168762492,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561232013
    },
    {
        "content": "<p>PR is sufficient.</p>",
        "id": 168762549,
        "sender_full_name": "nagisa",
        "timestamp": 1561232114
    },
    {
        "content": "<p>Okay, I think I'll do the forward and reverse cases separately.</p>",
        "id": 168762777,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561232526
    },
    {
        "content": "<p>That way they can get benchmarked independently</p>",
        "id": 168762812,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561232611
    },
    {
        "content": "<p>Forward is <a href=\"https://github.com/rust-lang/rust/issues/62062\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62062\">#62062</a></p>",
        "id": 168763844,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561234578
    },
    {
        "content": "<p>Reverse is <a href=\"https://github.com/rust-lang/rust/issues/62063\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62063\">#62063</a></p>",
        "id": 168764778,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561236532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> bors failed for <a href=\"https://github.com/rust-lang/rust/issues/62062\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62062\">#62062</a>. Both PRs include a change to the API for <code>WorkQueue</code> since I assumed they both had to be based on <code>master</code>.</p>",
        "id": 168765085,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561237173
    },
    {
        "content": "<p>How should I proceed?</p>",
        "id": 168765086,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561237182
    },
    {
        "content": "<p>They both should be independently based on master, yes. This looks like an unrelated failure to me.</p>",
        "id": 168765147,
        "sender_full_name": "nagisa",
        "timestamp": 1561237285
    },
    {
        "content": "<p>Ah, okay</p>",
        "id": 168765148,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561237293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Some tests failed since there were unreachable basic blocks in the <code>mir::Body</code>. The easiest way to preserve the original behavior is to re-add all basic-block indexes after doing traversal, which will pick up any unreachable ones. A further optimization might be to add a dead block elimination pass that gets run before dataflow, but that is probably outside the scope of this PR.</p>",
        "id": 168766582,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561240251
    },
    {
        "content": "<p>Results are in for forward analysis: <a href=\"https://perf.rust-lang.org/compare.html?start=d6884aedd5b8709c44c849d055d454db2f78042e&amp;end=0905d6a630cb4afc3f894f9e91c1a7a20c32416b\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=d6884aedd5b8709c44c849d055d454db2f78042e&amp;end=0905d6a630cb4afc3f894f9e91c1a7a20c32416b\">https://perf.rust-lang.org/compare.html?start=d6884aedd5b8709c44c849d055d454db2f78042e&amp;end=0905d6a630cb4afc3f894f9e91c1a7a20c32416b</a></p>",
        "id": 168802541,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561312932
    },
    {
        "content": "<p>Seems pretty <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> to me? This suggests that either forward dataflow is a small component of perf, or that basic block ordering is pretty close to RPO.</p>",
        "id": 168802615,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561313074
    },
    {
        "content": "<p>And now for backward: <a href=\"https://perf.rust-lang.org/compare.html?start=a96ba969156d257e5d5b692946fa8fe40ed6543a&amp;end=56b7200c037e2a958f7d907e778b87e58beb7079\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=a96ba969156d257e5d5b692946fa8fe40ed6543a&amp;end=56b7200c037e2a958f7d907e778b87e58beb7079\">https://perf.rust-lang.org/compare.html?start=a96ba969156d257e5d5b692946fa8fe40ed6543a&amp;end=56b7200c037e2a958f7d907e778b87e58beb7079</a></p>",
        "id": 168806958,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561321483
    },
    {
        "content": "<p>Interestingly, <code>deep-vector-opt</code> tops the list for both forwards and backwards ordering, despite containing only a single basic block. I'm thinking maybe it starts with a panic edge for each <code>vec.insert</code> which then gets optimized away?</p>",
        "id": 168807078,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561321788
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018</a></p>",
        "id": 168807079,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561321790
    },
    {
        "content": "<p>There's the source for <code>deep-vector</code></p>",
        "id": 168807080,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561321799
    },
    {
        "content": "<p>remember that ordering the blocks in whatever order is also work.</p>",
        "id": 168807310,
        "sender_full_name": "nagisa",
        "timestamp": 1561322212
    },
    {
        "content": "<p>though little enough of it that I think it does not matter.</p>",
        "id": 168807317,
        "sender_full_name": "nagisa",
        "timestamp": 1561322244
    },
    {
        "content": "<p>I might try logging the number of dataflow iterations (maybe as a percentage of basic blocks as well). In the backwards case, I expect we're doing about twice as many iterations as we need to, but CFGs are small enough that it doesn't outweigh the overhead from doing an extra traversal in most cases.</p>",
        "id": 168810095,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561327793
    },
    {
        "content": "<p>I'll try testing locally.</p>",
        "id": 168810141,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561327817
    },
    {
        "content": "<p>Also, how do I print the time taken in each phase of the compiler? Is it granular enough to get time in dataflow?</p>",
        "id": 168810157,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561327887
    },
    {
        "content": "<p><code>-Z time-passes</code></p>",
        "id": 168810198,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561327937
    },
    {
        "content": "<p><a href=\"https://forge.rust-lang.org/profile-queries.html\" target=\"_blank\" title=\"https://forge.rust-lang.org/profile-queries.html\">https://forge.rust-lang.org/profile-queries.html</a></p>",
        "id": 168810200,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561327960
    },
    {
        "content": "<p>Found it <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 168810201,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561327966
    }
]