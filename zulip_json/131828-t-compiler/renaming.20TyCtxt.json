[
    {
        "content": "<p>I think we should add two aliases for TyCtxt and start using them:</p>\n<div class=\"codehilite\"><pre><span></span>type Qx&lt;&#39;qx&gt; = TyCtxt&lt;&#39;static, &#39;qx, &#39;qx&gt;;\ntype Lx&lt;&#39;qx, &#39;lx&gt; = TyCtxt&lt;&#39;static, &#39;qx, &#39;lx&gt;;\n</pre></div>\n\n\n<p>In the future we might want to make these separate type so we could drop the local <code>interner</code> field from <code>Qx</code>.</p>",
        "id": 151111055,
        "sender_full_name": "Zoxc",
        "timestamp": 1544189283
    },
    {
        "content": "<p>I'm not sure that's the best distinction</p>",
        "id": 151111372,
        "sender_full_name": "eddyb",
        "timestamp": 1544189527
    },
    {
        "content": "<p>also, the lifetime order is wrong (as it has been pointed out for a while)</p>",
        "id": 151111391,
        "sender_full_name": "eddyb",
        "timestamp": 1544189554
    },
    {
        "content": "<p>and I'd make <code>'a</code> equal to (the current) <code>'tcx</code> not <code>'static</code>, just to keep a few things simpler</p>",
        "id": 151111447,
        "sender_full_name": "eddyb",
        "timestamp": 1544189614
    },
    {
        "content": "<p>also, there's a real question of whether we need the local split at all anymore</p>",
        "id": 151111465,
        "sender_full_name": "eddyb",
        "timestamp": 1544189639
    },
    {
        "content": "<p>4 years ago or so, when I gathered the stats that led to the split, for <code>librustc</code> I found something like 90% of the interner entries had inference variables in them</p>",
        "id": 151111543,
        "sender_full_name": "eddyb",
        "timestamp": 1544189688
    },
    {
        "content": "<p>I wonder if Chalk and everything else change the calculus here</p>",
        "id": 151111557,
        "sender_full_name": "eddyb",
        "timestamp": 1544189700
    },
    {
        "content": "<p>also, the naming scheme I used in <code>rustc_codegen_llvm</code> would mean <code>qx: QueryCx</code>, not <code>qx: Qx</code></p>",
        "id": 151112606,
        "sender_full_name": "eddyb",
        "timestamp": 1544190709
    },
    {
        "content": "<p>that is, the type is written less often and should be more descriptive than the variable names</p>",
        "id": 151112672,
        "sender_full_name": "eddyb",
        "timestamp": 1544190746
    },
    {
        "content": "<p><code>Cx</code> is enough to indicate \"context\"</p>",
        "id": 151112683,
        "sender_full_name": "eddyb",
        "timestamp": 1544190753
    },
    {
        "content": "<p><code>lx: LocalCx</code> doesn't seem so bad, and we can relatively easily rename it if we find something better</p>",
        "id": 151112699,
        "sender_full_name": "eddyb",
        "timestamp": 1544190781
    },
    {
        "content": "<p>although it still looks... off to me</p>",
        "id": 151113244,
        "sender_full_name": "eddyb",
        "timestamp": 1544191273
    },
    {
        "content": "<p><code>tx: TyCx</code> might be better</p>",
        "id": 151113277,
        "sender_full_name": "eddyb",
        "timestamp": 1544191290
    },
    {
        "content": "<p>not to mention you don't want to take a <code>QueryCx</code> if you want to perform a query, as we have no way to automate what we currently call <code>.global_tcx()</code></p>",
        "id": 151113345,
        "sender_full_name": "eddyb",
        "timestamp": 1544191340
    },
    {
        "content": "<p>maybe if we make them references we can do some trickery - I remember not being able to pull off something sensible but maybe that's because I wanted access to the fields on <code>GlobalCtxt</code> - if we move <code>hir</code> to a method that might not be a problem anymore?</p>",
        "id": 151113513,
        "sender_full_name": "eddyb",
        "timestamp": 1544191485
    },
    {
        "content": "<p>I guess you'd still not want to have a cyclic <code>Deref</code> impl and it wouldn't even work meh</p>",
        "id": 151113553,
        "sender_full_name": "eddyb",
        "timestamp": 1544191534
    },
    {
        "content": "<p>What do you mean you don't want a <code>QueryCx</code> if you want to perform a query?</p>",
        "id": 151114282,
        "sender_full_name": "Zoxc",
        "timestamp": 1544192163
    },
    {
        "content": "<p>because it's too restrictive</p>",
        "id": 151123016,
        "sender_full_name": "eddyb",
        "timestamp": 1544199804
    },
    {
        "content": "<p>I can't just pass a local context to it</p>",
        "id": 151123023,
        "sender_full_name": "eddyb",
        "timestamp": 1544199817
    },
    {
        "content": "<p>in today's terms, <code>TyCtxt&lt;'_, 'tcx, 'tcx&gt;</code> is unnecessarily restrictive as a function argument type</p>",
        "id": 151123112,
        "sender_full_name": "eddyb",
        "timestamp": 1544199899
    },
    {
        "content": "<p>btw, in Salsa we adopted the term \"database\" instead of \"context\", with the acronym <code>db</code>... I sort of like it better</p>",
        "id": 151532901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544629052
    },
    {
        "content": "<p>re: whether the global/local split is worthwhile, I've been wondering that. I think that for Chalk integration -- which requires ultimately \"inference variables\" that persist beyond an individual function etc -- I'd ultimately rather not use <code>TyVar</code> but just keep everything in the global arena, but it's not entirely clear yet</p>",
        "id": 151532967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544629102
    },
    {
        "content": "<p>In any case I think we should think carefully about the names -- this is a chance to make the compiler more accessible</p>",
        "id": 151532979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544629122
    },
    {
        "content": "<p>BTW, in some places we use db for diagnostic builder, instead of err.</p>",
        "id": 151619822,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1544718497
    }
]