[
    {
        "content": "<p>I just saw <a href=\"https://github.com/rust-lang/rust/blob/ee5d8d37baaf5b5a81a98396952839c73ae41c68/compiler/rustc_middle/src/mir/interpret/mod.rs#L281\">this line of code</a> in the compiler:</p>\n<div class=\"codehilite\"><pre><span></span><code>        let idx = usize::try_from(decoder.read_u32()).unwrap();\n</code></pre></div>",
        "id": 268333163,
        "sender_full_name": "nnethercote",
        "timestamp": 1642470324
    },
    {
        "content": "<p>Is there a good reason why it isn't just this?</p>\n<div class=\"codehilite\"><pre><span></span><code>        let idx = decoder.read_u32() as usize;\n</code></pre></div>",
        "id": 268333183,
        "sender_full_name": "nnethercote",
        "timestamp": 1642470355
    },
    {
        "content": "<p>Is usize always 32 or 64 bits?</p>",
        "id": 268333226,
        "sender_full_name": "nnethercote",
        "timestamp": 1642470372
    },
    {
        "content": "<p>I think we (std) \"support\" a 16-bit usize, though I doubt you can compile rustc for that target. I suspect it's written that way to avoid as-casting which is generally less obviously correct.</p>",
        "id": 268334249,
        "sender_full_name": "simulacrum",
        "timestamp": 1642471230
    },
    {
        "content": "<p>super-ultra safe mode(TM)</p>",
        "id": 268336687,
        "sender_full_name": "nnethercote",
        "timestamp": 1642473848
    },
    {
        "content": "<p>When usize is at least 32bits the panic in the try_from version should be trivially optimized away I think.</p>",
        "id": 268358076,
        "sender_full_name": "bjorn3",
        "timestamp": 1642494888
    },
    {
        "content": "<p>If there are a lot of these, it might be worth an infallible <code>trait AsUsize</code></p>",
        "id": 268416178,
        "sender_full_name": "cuviper",
        "timestamp": 1642522681
    },
    {
        "content": "<p>See also <a href=\"https://github.com/rust-lang/rust/issues/49415\">https://github.com/rust-lang/rust/issues/49415</a></p>",
        "id": 268416424,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642522766
    },
    {
        "content": "<p>Outside of the compiler, I've also wanted something like this that would straight-up fail at compilation time. The <code>as</code> casts never fail and the <code>TryFrom</code> fails at run time.</p>",
        "id": 268417258,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642523097
    },
    {
        "content": "<p>But it's the same root thing: \"This application never cares to run on a 16-bit platform\".</p>",
        "id": 268417355,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642523140
    },
    {
        "content": "<p>to be fair, <code>librustc_driver</code> alone is a thousand times too big for a 16-bit address space</p>",
        "id": 268417757,
        "sender_full_name": "cuviper",
        "timestamp": 1642523287
    },
    {
        "content": "<p>Absolutely, which is why I think it's fair to be up front and encode that in the source. It would also clear up those lines a bit.</p>",
        "id": 268417966,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642523373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Curious.20try_from/near/268358076\">said</a>:</p>\n<blockquote>\n<p>When usize is at least 32bits the panic in the try_from version should be trivially optimized away I think.</p>\n</blockquote>",
        "id": 268418108,
        "sender_full_name": "cuviper",
        "timestamp": 1642523414
    },
    {
        "content": "<p>That has also been my experience.</p>",
        "id": 268418134,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642523429
    },
    {
        "content": "<p>I mean that the source code would be cleaned up, visually.</p>",
        "id": 268418186,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642523456
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/51564\">#51564</a> made it so there isn't even any branch in the impl, so just the <code>unwrap</code> has to be optimized out</p>",
        "id": 268418200,
        "sender_full_name": "cuviper",
        "timestamp": 1642523461
    },
    {
        "content": "<p><code>try_from_unbounded</code></p>",
        "id": 268418309,
        "sender_full_name": "cuviper",
        "timestamp": 1642523504
    },
    {
        "content": "<p>To be clear, I'm agreeing with the idea of the <code>AsUsize</code> trait, and just not implementing it for 16-bit platforms (replacing with an error that specifically states \"hey we don't do that here\")</p>",
        "id": 268418453,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642523546
    },
    {
        "content": "<p>sure. it also doesn't have to start in <code>core</code> -- the compiler can add that trait somewhere to experiment on its own</p>",
        "id": 268418609,
        "sender_full_name": "cuviper",
        "timestamp": 1642523602
    },
    {
        "content": "<p>Agreed. I'm only mentioning my the outside-the-compiler usage and Simon Sapin's usage as \"you are not alone in wanting this\".</p>",
        "id": 268418809,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1642523663
    },
    {
        "content": "<p>This is definitely a widely wished for thing.  It's (related to) the mythical \"portability lint\": &lt;<a href=\"http://rust-lang.github.io/rfcs/1868-portability-lint.html\">http://rust-lang.github.io/rfcs/1868-portability-lint.html</a>&gt;</p>",
        "id": 268427271,
        "sender_full_name": "scottmcm",
        "timestamp": 1642526937
    },
    {
        "content": "<p>I get 10 matches for <code>/usize::try_from.*unwrap/</code> in the compiler, and 1,111 matches for <code>/as usize/</code>. The latter is probably too general for this comparison, but still.</p>",
        "id": 268442234,
        "sender_full_name": "nnethercote",
        "timestamp": 1642533641
    },
    {
        "content": "<p>The original unwrap in question should probably be documented that it fails on 16 bit platforms however, unless itâ€™s guaranteed that the code cannot run there</p>",
        "id": 268914485,
        "sender_full_name": "asquared31415",
        "timestamp": 1642805679
    }
]