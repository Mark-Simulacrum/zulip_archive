[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> The first step is making this parse, yes. The tests in<code>src/test/ui/parser/</code>are a good precedent.</p>",
        "id": 210065916,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600119144
    },
    {
        "content": "<p>Well, actually most of them are <code>compile-fail</code>. Perhaps you could look at the first few PRs for <code>async</code> blocks? I think you'll be able to figure something out.</p>",
        "id": 210066220,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600119312
    },
    {
        "content": "<p>right</p>",
        "id": 210068266,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600120698
    },
    {
        "content": "<p>that's what I also thought, checking <code>async</code> and/or <code>unsafe</code></p>",
        "id": 210068287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600120724
    },
    {
        "content": "<p>sorry that I haven't commented about this, I didn't have time to properly start until now</p>",
        "id": 210781149,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600712847
    },
    {
        "content": "<p>but I'm right now trying to invest some minutes on this</p>",
        "id": 210781163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600712857
    },
    {
        "content": "<p>I'm going to add this under <code>inline_const</code> feature flag, is that right?</p>",
        "id": 210781303,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600712924
    },
    {
        "content": "<p>There's been some disagreement around what this should be called. As the implementer, it's up to you. That's the name I would prefer, since it's clearer about what's going on behind the scenes and also someday we might have inline constants that don't actually look like <code>const { }</code> (the new <code>asm</code> macro has this already).</p>",
        "id": 210782031,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600713346
    },
    {
        "content": "<p>However,  if you feel strongly one way or the other, do that.</p>",
        "id": 210782160,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600713394
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, would use that one would be easy to rename if consensus arise about a different name</p>",
        "id": 210782202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713416
    },
    {
        "content": "<p>I'm procrastinating on how to organize myself on tackling this issue :P</p>",
        "id": 210782262,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713446
    },
    {
        "content": "<p>but I guess I'm going to start adding the flag, then parsing and so on, so a top down approach</p>",
        "id": 210782313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713471
    },
    {
        "content": "<p>I have doubts on how to test things along the way but ...</p>",
        "id": 210782335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713482
    },
    {
        "content": "<p>I was more or less laying this out <a href=\"https://hackmd.io/2BGhGBkLRYK_V3keeLdWig\">https://hackmd.io/2BGhGBkLRYK_V3keeLdWig</a></p>",
        "id": 210782492,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713552
    },
    {
        "content": "<p>but I'm not sure to be honest, I guess I'll find out as I go</p>",
        "id": 210782509,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713566
    },
    {
        "content": "<p>but in case there's something wrong there please let me know</p>",
        "id": 210782519,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713575
    },
    {
        "content": "<p>there's stuff that I took from some comments here and there</p>",
        "id": 210782541,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713590
    },
    {
        "content": "<p>No worries, yeah, that's the correct approach. You've just got to dive in. The compiler will guide you as you work your way down. <code>// compile-flags: -Z parse-only</code> might be helpful for testing by the way.</p>",
        "id": 210782613,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600713611
    },
    {
        "content": "<p>to test parsing?</p>",
        "id": 210782653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713639
    },
    {
        "content": "<p>cool</p>",
        "id": 210782659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713641
    },
    {
        "content": "<p>I have been wondering and also procrastinating if there's not a PR that more or less does something similar to just compare and such</p>",
        "id": 210782721,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600713669
    },
    {
        "content": "<p>grepping for that in the test suite might help if you're looking for inspiration when writing parser tests</p>",
        "id": 210782935,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600713775
    },
    {
        "content": "<p>Like I said, I don't know of anything in particular. You're free to look around of course.</p>",
        "id": 210782995,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600713817
    },
    {
        "content": "<p>Might be able to look at <code>async {}</code> blocks or <code>catch{}</code> blocks (from way back).</p>",
        "id": 210783406,
        "sender_full_name": "scottmcm",
        "timestamp": 1600714023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210783406\">said</a>:</p>\n<blockquote>\n<p>Might be able to look at <code>async {}</code> blocks or <code>catch{}</code> blocks (from way back).</p>\n</blockquote>\n<p>gonna check <code>catch {}</code></p>",
        "id": 210783671,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600714178
    },
    {
        "content": "<p>tangent in case I forget it later: for steps except parsing, I would expect this to be nearly identical to repeat expressions <code>[0; expr]</code>, so it probably makes sense to mostly copy what we are doing there</p>",
        "id": 210783960,
        "sender_full_name": "lcnr",
        "timestamp": 1600714324
    },
    {
        "content": "<p>is precedence of this kind of stuff discussed somewhere?</p>",
        "id": 210787245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600715821
    },
    {
        "content": "<p>I'd expect this to live here <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast/src/util/parser.rs#L328-L336\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast/src/util/parser.rs#L328-L336</a> but just in case ...</p>",
        "id": 210787281,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600715841
    },
    {
        "content": "<p>yeah, I don't think we ever need parens here</p>",
        "id": 210787495,
        "sender_full_name": "lcnr",
        "timestamp": 1600715940
    },
    {
        "content": "<p>I don't know if <code>master</code> has moved since you sent that, but I'd expect it goes with <code>Loop</code> and <code>TryBlock</code> and <code>Async</code> and <code>Struct</code> in the section below the highlighted one.</p>",
        "id": 210788250,
        "sender_full_name": "scottmcm",
        "timestamp": 1600716352
    },
    {
        "content": "<p>oh ups, yeah. I expect us to return <code>PREC_PAREN</code> for inline consts</p>",
        "id": 210788355,
        "sender_full_name": "lcnr",
        "timestamp": 1600716399
    },
    {
        "content": "<p>thought you linked to that match arm</p>",
        "id": 210788375,
        "sender_full_name": "lcnr",
        "timestamp": 1600716413
    },
    {
        "content": "<p>yeah, sorry, I meant that section</p>",
        "id": 210788403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600716428
    },
    {
        "content": "<p>I've wrongly edited it</p>",
        "id": 210788409,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600716435
    },
    {
        "content": "<p>another question, in features that are not yet stabilized as this one, how is in general checked the activation of the feature?</p>",
        "id": 210788584,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600716533
    },
    {
        "content": "<p>I meant, is it explicitly checked in the parser?</p>",
        "id": 210788609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600716548
    },
    {
        "content": "<p>is it automagically done in some way?</p>",
        "id": 210788631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600716557
    },
    {
        "content": "<p>I think we don't have to put the parser changes between a feature gate</p>",
        "id": 210788805,
        "sender_full_name": "lcnr",
        "timestamp": 1600716649
    },
    {
        "content": "<p>We have an ast pass which checks for feature gates which we use for const generics</p>",
        "id": 210788858,
        "sender_full_name": "lcnr",
        "timestamp": 1600716682
    },
    {
        "content": "<p>which is probably also what we can use here</p>",
        "id": 210788880,
        "sender_full_name": "lcnr",
        "timestamp": 1600716701
    },
    {
        "content": "<p>right, that's what I was looking for :)</p>",
        "id": 210788947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600716729
    },
    {
        "content": "<p>I thought we do need to check in the parser so that it can't be put in a <code>#[cfg]</code> on stable?</p>",
        "id": 210789883,
        "sender_full_name": "scottmcm",
        "timestamp": 1600717266
    },
    {
        "content": "<p>(To avoid accidentally being forced to parse the syntax forever even if it's never stable)</p>",
        "id": 210789934,
        "sender_full_name": "scottmcm",
        "timestamp": 1600717301
    },
    {
        "content": "<p>that's true, don't we have that issue with const generics too <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 210790260,
        "sender_full_name": "lcnr",
        "timestamp": 1600717500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210789883\">said</a>:</p>\n<blockquote>\n<p>I thought we do need to check in the parser so that it can't be put in a <code>#[cfg]</code> on stable?</p>\n</blockquote>\n<p>ohh makes sense</p>",
        "id": 210790303,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600717534
    },
    {
        "content": "<p>maybe grep <code>self.sess.gated_spans.gate(sym::async_closure, span); </code>then</p>",
        "id": 210790620,
        "sender_full_name": "lcnr",
        "timestamp": 1600717688
    },
    {
        "content": "<p>which seems like a good starting point <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 210790644,
        "sender_full_name": "lcnr",
        "timestamp": 1600717706
    },
    {
        "content": "<p>when lowering the ast expression to hir, isn't it a way to generate noop or something like that?</p>",
        "id": 210797731,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721249
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast_lowering/src/expr.rs#L28\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast_lowering/src/expr.rs#L28</a></p>",
        "id": 210797775,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721273
    },
    {
        "content": "<p>like I guess it's nice if there <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> I can just generate something that it's just ignored</p>",
        "id": 210797865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721313
    },
    {
        "content": "<p>was going to do</p>",
        "id": 210797890,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721324
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">ExprKind</span>::<span class=\"n\">AnonConst</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210797896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721326
    },
    {
        "content": "<p>but that would crash :)</p>",
        "id": 210797924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721345
    },
    {
        "content": "<p>well I guess to test it <code>-Z parse-only</code> won't exercise that so it will be fine</p>",
        "id": 210797979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721388
    },
    {
        "content": "<p>yeah, if you want to use <code>parse-only</code> this is hopefully enough <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 210798103,
        "sender_full_name": "lcnr",
        "timestamp": 1600721434
    },
    {
        "content": "<p>Otherwise you might use a <code>ExprKind::Lit</code> with some dummy value here</p>",
        "id": 210798120,
        "sender_full_name": "lcnr",
        "timestamp": 1600721452
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 210798327,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721554
    },
    {
        "content": "<p>makes sense</p>",
        "id": 210798337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600721557
    },
    {
        "content": "<p>or add <code>ExprKind::InlineConst</code> and  just keep on working without ever testing your changes, it's not like there could be any issues <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 210798542,
        "sender_full_name": "lcnr",
        "timestamp": 1600721671
    },
    {
        "content": "<p>right, it will work :)</p>",
        "id": 210799553,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600722178
    },
    {
        "content": "<p>but anyway, let's do the \"right\" thing :P</p>",
        "id": 210799575,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600722188
    },
    {
        "content": "<p>I've just written a test without the feature flag and I'm getting</p>",
        "id": 210800402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600722576
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: expected identifier, found `{`\n  --&gt; /home/santiago/src/oss/rust3/src/test/ui/parser/inline_const.rs:5:11\n   |\nLL |     const {\n   |           ^ expected identifier\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 210800405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600722579
    },
    {
        "content": "<p>I'm calling <code>self.sess.gated_spans.gate(sym::inline_const, span);</code></p>",
        "id": 210800714,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600722716
    },
    {
        "content": "<p>I would have guessed that that would show an error mentioning that the feature flag is not on?</p>",
        "id": 210800811,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600722755
    },
    {
        "content": "<p>well, need to read <code>gate</code> fn code</p>",
        "id": 210800831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600722766
    },
    {
        "content": "<p>Without the feature flag the parser likely tries to parse it as a <code>const NAME: Type = Expr;</code> item</p>",
        "id": 210801858,
        "sender_full_name": "oli",
        "timestamp": 1600723361
    },
    {
        "content": "<p>no, I think this is wrongly parsed, I'm adding code to parse this on parser/expr.rs but this is catched earlier</p>",
        "id": 210801861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600723363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I was answering to myself but I think yeah I'm doing this too late regardless of the feature flag</p>",
        "id": 210802069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600723480
    },
    {
        "content": "<p>I guess I need to do what I'm doing, which is parsing <code>const {</code> on expr but adjust ...</p>",
        "id": 210802599,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600723771
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/mod.rs#L864-L871\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/mod.rs#L864-L871</a></p>",
        "id": 210802630,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600723792
    },
    {
        "content": "<p>to look ahead that it's not a <code>const {</code> thing</p>",
        "id": 210802720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600723832
    },
    {
        "content": "<p>?</p>",
        "id": 210802725,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600723835
    },
    {
        "content": "<p>might it be easier to use <code>self.eat_keywork(kw::Const)</code> directly here</p>",
        "id": 210802962,
        "sender_full_name": "lcnr",
        "timestamp": 1600723946
    },
    {
        "content": "<p>at the same place we are currently parsing async blocks</p>",
        "id": 210802993,
        "sender_full_name": "lcnr",
        "timestamp": 1600723967
    },
    {
        "content": "<p>you meant to just parse the expression at that point?</p>",
        "id": 210803023,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600723986
    },
    {
        "content": "<p>I would expect us to work in <code>compiler/rustc_parse/src/parser/expr.rs</code></p>",
        "id": 210803148,
        "sender_full_name": "lcnr",
        "timestamp": 1600724050
    },
    {
        "content": "<p>around line <code>1050</code></p>",
        "id": 210803183,
        "sender_full_name": "lcnr",
        "timestamp": 1600724070
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">eat_keyword</span><span class=\"p\">(</span><span class=\"n\">kw</span>::<span class=\"n\">Const</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parse_block_expr</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">parsing</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210803264,
        "sender_full_name": "lcnr",
        "timestamp": 1600724123
    },
    {
        "content": "<p>similar to <code>kw::Unsafe</code> I guess</p>",
        "id": 210803300,
        "sender_full_name": "lcnr",
        "timestamp": 1600724147
    },
    {
        "content": "<p>yeah, so ... that's exactly what I'm doing</p>",
        "id": 210803395,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724182
    },
    {
        "content": "<p>can you show me the diff</p>",
        "id": 210803407,
        "sender_full_name": "lcnr",
        "timestamp": 1600724191
    },
    {
        "content": "<p>cause I would expect this to work</p>",
        "id": 210803426,
        "sender_full_name": "lcnr",
        "timestamp": 1600724200
    },
    {
        "content": "<p>(or the github link)</p>",
        "id": 210803435,
        "sender_full_name": "lcnr",
        "timestamp": 1600724205
    },
    {
        "content": "<p>let me push</p>",
        "id": 210803445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724209
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/tree/const-exprs-rfc-2920\">https://github.com/spastorino/rust/tree/const-exprs-rfc-2920</a></p>",
        "id": 210803512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724253
    },
    {
        "content": "<p>I don't think we want to use <code>parse_anon_const_expr</code></p>",
        "id": 210803755,
        "sender_full_name": "lcnr",
        "timestamp": 1600724407
    },
    {
        "content": "<p>that's used to parse array lengths and repeat expressions</p>",
        "id": 210803771,
        "sender_full_name": "lcnr",
        "timestamp": 1600724419
    },
    {
        "content": "<p><code>const {</code> can be parsed like an ordinary block</p>",
        "id": 210803797,
        "sender_full_name": "lcnr",
        "timestamp": 1600724442
    },
    {
        "content": "<p>so I expect the following to work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\">  </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210803850,
        "sender_full_name": "lcnr",
        "timestamp": 1600724487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210803755\">said</a>:</p>\n<blockquote>\n<p>I don't think we want to use <code>parse_anon_const_expr</code></p>\n</blockquote>\n<p>but this just parses an expr and returns an <code>AnonConst</code> out of that</p>",
        "id": 210803877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724513
    },
    {
        "content": "<p>yeah, but we want to parse a <em>block</em>, not an <em>expression</em></p>",
        "id": 210803935,
        "sender_full_name": "lcnr",
        "timestamp": 1600724528
    },
    {
        "content": "<p>ohh right, I'm not parsing that</p>",
        "id": 210803964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724545
    },
    {
        "content": "<p>ok ok</p>",
        "id": 210803966,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724546
    },
    {
        "content": "<p>need to leave now, thanks for helping</p>",
        "id": 210803989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724556
    },
    {
        "content": "<p>I might also be missing something here though, because blocks are expressions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210804000,
        "sender_full_name": "lcnr",
        "timestamp": 1600724561
    },
    {
        "content": "<p>This line seems relevant: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Note: when adding new syntax here, don&#39;t forget to adjust `TokenKind::can_begin_expr()`.</span>\n</code></pre></div>",
        "id": 210804019,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600724576
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 210804210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600724658
    },
    {
        "content": "<p>yeah, parse expr doesn't explain what's happening to you, as <code>[0; {}]</code> parses correctly. mb</p>\n<p>you still want to parse a block here though :)</p>",
        "id": 210804325,
        "sender_full_name": "lcnr",
        "timestamp": 1600724734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210804019\">said</a>:</p>\n<blockquote>\n<p>This line seems relevant: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Note: when adding new syntax here, don't forget to adjust `TokenKind::can_begin_expr()`.</span>\n</code></pre></div>\n\n</blockquote>\n<p>hey, I'm just back to check all this</p>",
        "id": 210915300,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600800859
    },
    {
        "content": "<p>unsure I got correctly what you meant here</p>",
        "id": 210915310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600800869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210804325\">said</a>:</p>\n<blockquote>\n<p>yeah, parse expr doesn't explain what's happening to you, as <code>[0; {}]</code> parses correctly. mb</p>\n<p>you still want to parse a block here though :)</p>\n</blockquote>\n<p>I'm looking into this, wondering if something like <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/expr.rs#L1502-L1523\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/expr.rs#L1502-L1523</a> would be what I need</p>",
        "id": 210915455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600800944
    },
    {
        "content": "<p>investigating a bit</p>",
        "id": 210915462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600800947
    },
    {
        "content": "<p>seems more like <a href=\"https://github.com/rust-lang/rust/blob/bf5cbd6b64ad331ff4198db45da6b72dc978d73a/compiler/rustc_parse/src/parser/stmt.rs#L305-L310\">https://github.com/rust-lang/rust/blob/bf5cbd6b64ad331ff4198db45da6b72dc978d73a/compiler/rustc_parse/src/parser/stmt.rs#L305-L310</a> what I want</p>",
        "id": 210915718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801097
    },
    {
        "content": "<p>or <a href=\"https://github.com/rust-lang/rust/blob/bf5cbd6b64ad331ff4198db45da6b72dc978d73a/compiler/rustc_parse/src/parser/stmt.rs#L250-L257\">https://github.com/rust-lang/rust/blob/bf5cbd6b64ad331ff4198db45da6b72dc978d73a/compiler/rustc_parse/src/parser/stmt.rs#L250-L257</a></p>",
        "id": 210915790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801147
    },
    {
        "content": "<p>hmm, <code>parse_block</code> seems the most correct here</p>",
        "id": 210915838,
        "sender_full_name": "lcnr",
        "timestamp": 1600801179
    },
    {
        "content": "<p>I guess we don't want inner attributes so ...</p>",
        "id": 210915843,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801182
    },
    {
        "content": "<p>yeah</p>",
        "id": 210915847,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801183
    },
    {
        "content": "<p>but that's not something I am too familiar with <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 210915877,
        "sender_full_name": "lcnr",
        "timestamp": 1600801200
    },
    {
        "content": "<p>I meant, I guess <code>const { }</code> is not a thing we decorate with attributes</p>",
        "id": 210916011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801247
    },
    {
        "content": "<p>?</p>",
        "id": 210916032,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801252
    },
    {
        "content": "<p>yeah, at least not at the beginning</p>",
        "id": 210916054,
        "sender_full_name": "lcnr",
        "timestamp": 1600801261
    },
    {
        "content": "<p>right <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 210916075,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210915310\">said</a>:</p>\n<blockquote>\n<p>unsure I got correctly what you meant here</p>\n</blockquote>\n<p>re this, it looks like appending kw::Const to <code>ident_can_begin_expr</code> is what's needed here</p>",
        "id": 210916161,
        "sender_full_name": "lcnr",
        "timestamp": 1600801302
    },
    {
        "content": "<p>ohh right</p>",
        "id": 210917137,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801716
    },
    {
        "content": "<p>what is exactly <code>P</code> in <code>P&lt;Expr&gt;</code>?</p>",
        "id": 210917469,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801801
    },
    {
        "content": "<p>it's a pointer to an expression I guess</p>",
        "id": 210917613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801859
    },
    {
        "content": "<p>ohh I see <a href=\"https://github.com/rust-lang/rust/blob/bf5cbd6b64ad331ff4198db45da6b72dc978d73a/compiler/rustc_ast/src/ptr.rs#L32-L35\">https://github.com/rust-lang/rust/blob/bf5cbd6b64ad331ff4198db45da6b72dc978d73a/compiler/rustc_ast/src/ptr.rs#L32-L35</a></p>",
        "id": 210917648,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801881
    },
    {
        "content": "<p>ahh I guess this is why <code>mk_expr</code> is constantly called in the code</p>",
        "id": 210917772,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600801940
    },
    {
        "content": "<p><code>P</code> is weird</p>",
        "id": 210917875,
        "sender_full_name": "lcnr",
        "timestamp": 1600802013
    },
    {
        "content": "<p>esp I don't get why <code>fn P</code> requires <code>T</code> to be 'static</p>",
        "id": 210917903,
        "sender_full_name": "lcnr",
        "timestamp": 1600802032
    },
    {
        "content": "<blockquote>\n<p>P&lt;T&gt; disallows mutating its inner T, unlike Box&lt;T&gt; (unless it contains an Unsafe interior, but that may be denied later). This mainly prevents mistakes, but can also enforces a kind of \"purity\".</p>\n</blockquote>",
        "id": 210918077,
        "sender_full_name": "lcnr",
        "timestamp": 1600802099
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ptr/struct.P.html#impl-DerefMut\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ptr/struct.P.html#impl-DerefMut</a></p>",
        "id": 210918103,
        "sender_full_name": "lcnr",
        "timestamp": 1600802111
    },
    {
        "content": "<p>what</p>",
        "id": 210918107,
        "sender_full_name": "lcnr",
        "timestamp": 1600802113
    },
    {
        "content": "<p>will open a new topic for this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210918151,
        "sender_full_name": "lcnr",
        "timestamp": 1600802141
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 210920957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600803580
    },
    {
        "content": "<p>I'm still getting the very same error, hmm</p>",
        "id": 210921679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600803921
    },
    {
        "content": "<p>by that I meant</p>",
        "id": 210922840,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600804460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: expected identifier, found `{`\n  --&gt; /home/santiago/src/oss/rust3/src/test/ui/parser/inline_const.rs:6:11\n   |\nLL |     const {\n   |           ^ expected identifier\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 210922849,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600804465
    },
    {
        "content": "<p>can you push to github?</p>",
        "id": 210922886,
        "sender_full_name": "lcnr",
        "timestamp": 1600804483
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:const-exprs-rfc-2920\">https://github.com/rust-lang/rust/compare/master...spastorino:const-exprs-rfc-2920</a></p>",
        "id": 210923108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600804594
    },
    {
        "content": "<p>so we prefer <code>const VALUE: ty</code> to expressions here</p>",
        "id": 210923239,
        "sender_full_name": "lcnr",
        "timestamp": 1600804670
    },
    {
        "content": "<p>It seems like we have to look at the next token there and decide on what to do</p>",
        "id": 210923322,
        "sender_full_name": "lcnr",
        "timestamp": 1600804693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210802720\">said</a>:</p>\n<blockquote>\n<p>to look ahead that it's not a <code>const {</code> thing</p>\n</blockquote>\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> ?</p>",
        "id": 210923438,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600804755
    },
    {
        "content": "<p>I meant, what I was guessing before in <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/mod.rs#L864-L871\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/mod.rs#L864-L871</a></p>",
        "id": 210923766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600804875
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> jup</p>",
        "id": 210924026,
        "sender_full_name": "lcnr",
        "timestamp": 1600804999
    },
    {
        "content": "<p>maybe in <code>parse_stmt_without_recovery</code> before <code>parse_item_common</code>?</p>",
        "id": 210924637,
        "sender_full_name": "lcnr",
        "timestamp": 1600805302
    },
    {
        "content": "<p>I was checking also <code>parse_item_common</code> and those fns</p>",
        "id": 210925681,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600805836
    },
    {
        "content": "<p>but ... I'm not sure if that's a better place ?</p>",
        "id": 210925857,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600805898
    },
    {
        "content": "<p>also we could also add a feature flag check at that point</p>",
        "id": 210925934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600805943
    },
    {
        "content": "<p>to not modify anything on the parser if the feature flag is not enabled</p>",
        "id": 210925959,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600805959
    },
    {
        "content": "<p>otherwise we would be probably modifying the parse error we are giving</p>",
        "id": 210926013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600805994
    },
    {
        "content": "<blockquote>\n<p>but ... I'm not sure if that's a better place ?</p>\n</blockquote>\n<p>that's where I would put it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but it's maybe better to ask <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> or <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> here</p>",
        "id": 210926172,
        "sender_full_name": "lcnr",
        "timestamp": 1600806060
    },
    {
        "content": "<p>I was directly modifying <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/mod.rs#L864-L871\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/parser/mod.rs#L864-L871</a></p>",
        "id": 210926304,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600806129
    },
    {
        "content": "<p>it doesn't work either <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 210926357,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600806167
    },
    {
        "content": "<p>I see why though</p>",
        "id": 210926651,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600806328
    },
    {
        "content": "<p><code>parse_stmt_without_recovery</code> looks like a good candidate for this disambiguation.<br>\nThings like <code>union U { ... }</code> vs <code>union { ... }</code> are already disambiguated there.</p>",
        "id": 210928525,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600807248
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 210928598,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600807297
    }
]