[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<p>you online?</p>",
        "id": 133275001,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1536001908
    },
    {
        "content": "<p>I had some thoughts about <a href=\"https://github.com/rust-lang/rust/issues/53843\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53843\">#53843</a></p>\n<p>The issue there is that autoderef does not resolve nested obligations while evaluating the chain.</p>\n<p>The problem is that autoderef runs in a \"probe\" context from which the fulfillcx can't be accessed. I think the solution would be to move autoderef to be a canonical query, where <code>autoderef(Γ ⊢ canonical--ty, n)</code> is an <code>(canonical-substs, ty, obligations)</code> triple.</p>",
        "id": 133275122,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1536002112
    },
    {
        "content": "<p>The current QueryResult struct does not support returning obligations, so I was wondering whether the best way of handling this would be by having a separate \"probe\" and \"confirm\" stages, where only the confirm returns obligations.</p>",
        "id": 133275240,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1536002359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Could you look at <a href=\"https://github.com/rust-lang/rust/pull/53778\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53778\">https://github.com/rust-lang/rust/pull/53778</a> sooner?<br>\nIt's a prerequisite for a number of other PRs that need to be done until beta (which is pretty soon).</p>",
        "id": 133281261,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1536014011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> hmm, the goal with queries is not to <strong>have</strong> to return obligations, but instead to \"fully process\" the obligations in situ, and just return the results. Does that not work in this case — perhaps because of ambiguity?</p>",
        "id": 133308623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536065122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> (sure)</p>",
        "id": 133308627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536065131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<p>Sure. The intent of autoderef is that, say, when you want to deref <code>Vec&lt;$0&gt;</code>, you will get <code>[$0]</code> (the ref type is \"implicit\"). If that deref impl had obligations on <code>$0</code> (I can't seem to find any), they would also need to be processed.</p>",
        "id": 133326683,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1536084630
    },
    {
        "content": "<p>Or if you autoderef <code>Pin&lt;Option&lt;$0&gt;&gt;</code>, you get <code>Option&lt;$0&gt; where $0: Unpin</code></p>\n<p>Or in canonical language, that would be something like <code>dest = Option&lt;$α&gt;, substs = [$0 &lt;- $α], obligations = [$α: Unpin]</code> where α is the \"canonical output\" type.</p>",
        "id": 133326905,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1536084868
    },
    {
        "content": "<p>Hmm. Yes, of course. So we want to do some sort of \"shallow\" testing. Well, in any case, it should be possible to create a canonical query result that includes obligations without any great difficulty.</p>",
        "id": 133328097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536086123
    },
    {
        "content": "<blockquote>\n<p>The current QueryResult struct does not support returning obligations, so I was wondering whether the best way of handling this would be by having a separate \"probe\" and \"confirm\" stages, where only the confirm returns obligations.</p>\n</blockquote>\n<p>I'm re-reading this question of yours :)</p>",
        "id": 133328172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536086193
    },
    {
        "content": "<p>I'm not sure if the probe/confirm is worth it, trying to think that over. It seems like you could just have a <code>QueryResult&lt;AutoDerefResult&gt;</code> where the <code>AutoDerefResult</code> includes the \"deferred\" obligations that we do not evaluate</p>",
        "id": 133328216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536086245
    },
    {
        "content": "<p>this is going to be a fun thing to figure out in chalk :P</p>",
        "id": 133328249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536086282
    }
]