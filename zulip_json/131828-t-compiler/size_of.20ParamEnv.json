[
    {
        "content": "<p><code>ParamEnv</code> is 24 bytes, but 8 of those bytes are taken up by a <code>Reveal</code> field really only needs a single bit.</p>",
        "id": 202752607,
        "sender_full_name": "njn",
        "timestamp": 1593729940
    },
    {
        "content": "<p>Any suggestions how to squeeze it into 16 bytes?</p>",
        "id": 202752621,
        "sender_full_name": "njn",
        "timestamp": 1593729949
    },
    {
        "content": "<p>Such a change would likely have good perf effects, because <code>ParamEnv</code> appears within <code>Obligation</code>,  and shrinking that has had good effects in the past</p>",
        "id": 202752684,
        "sender_full_name": "njn",
        "timestamp": 1593729982
    },
    {
        "content": "<p>Apart from encoding it in the list pointer... not really</p>",
        "id": 202752853,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593730161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I think I tried that once, but couldn't get it to work</p>",
        "id": 202752979,
        "sender_full_name": "njn",
        "timestamp": 1593730262
    },
    {
        "content": "<p>Hmm, the <code>def_id</code> mentions chalk, is it only used by the chalk integration?</p>",
        "id": 202753004,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593730294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> Seems so. <a href=\"https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src/librustc_trait_selection/traits/chalk_fulfill.rs#L131-L148\">This</a> is the only place it's used</p>",
        "id": 202753356,
        "sender_full_name": "njn",
        "timestamp": 1593730617
    },
    {
        "content": "<p>I guess I could remove that, and see what the perf effects are like</p>",
        "id": 202753399,
        "sender_full_name": "njn",
        "timestamp": 1593730661
    },
    {
        "content": "<p>I found my old patch attempting to encode the bit in the list pointer... in my notes I mentioned problems with <code>?Sized</code></p>",
        "id": 202754201,
        "sender_full_name": "njn",
        "timestamp": 1593731292
    },
    {
        "content": "<p>I was going to suggest making use of the \"this is always paired with an empty environment\" on Reveal::All, but I think that's actually untrue?</p>",
        "id": 202755390,
        "sender_full_name": "simulacrum",
        "timestamp": 1593732658
    },
    {
        "content": "<p>at least there seem to be cases where it isn't true</p>",
        "id": 202755446,
        "sender_full_name": "simulacrum",
        "timestamp": 1593732719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@Nicholas Nethercote</span> hm so actually, we should be able to pack it into the option around the defid, even if it is a bit ugly</p>",
        "id": 202755516,
        "sender_full_name": "simulacrum",
        "timestamp": 1593732788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the <code>reveal</code> field is used quite extensively</p>",
        "id": 202755529,
        "sender_full_name": "njn",
        "timestamp": 1593732825
    },
    {
        "content": "<p>DefId should have at least ~256 niches in it</p>",
        "id": 202755530,
        "sender_full_name": "simulacrum",
        "timestamp": 1593732826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> we need a bool + int, not a <code>Foo | Bar(int)</code></p>",
        "id": 202755591,
        "sender_full_name": "njn",
        "timestamp": 1593732866
    },
    {
        "content": "<p>I think the niches allow the latter, but not the former</p>",
        "id": 202755598,
        "sender_full_name": "njn",
        "timestamp": 1593732873
    },
    {
        "content": "<p>let me try it on playground...</p>",
        "id": 202755610,
        "sender_full_name": "simulacrum",
        "timestamp": 1593732885
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 202755614,
        "sender_full_name": "njn",
        "timestamp": 1593732891
    },
    {
        "content": "<p>(i.e. the niches allow you to steal up to 256 values from the range of an int, but we need an entire bit, which would halve the range)</p>",
        "id": 202755683,
        "sender_full_name": "njn",
        "timestamp": 1593732962
    },
    {
        "content": "<p>ah perhaps, yes</p>",
        "id": 202756018,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733225
    },
    {
        "content": "<p>current layout I think:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: layout_of(ParamEnv) = Layout {\n    fields: Arbitrary {\n        offsets: [\n            Size {\n                raw: 0,\n            },\n            Size {\n                raw: 16,\n            },\n            Size {\n                raw: 8,\n            },\n        ],\n        memory_index: [\n            0,\n            2,\n            1,\n        ],\n    },\n    variants: Single {\n        index: 0,\n    },\n    abi: Aggregate {\n        sized: true,\n    },\n    largest_niche: Some(\n        Niche {\n            offset: Size {\n                raw: 12,\n            },\n            scalar: Scalar {\n                value: Int(\n                    I32,\n                    false,\n                ),\n                valid_range: 0..=4294967041,\n            },\n        },\n    ),\n    align: AbiAndPrefAlign {\n        abi: Align {\n            pow2: 3,\n        },\n        pref: Align {\n            pow2: 3,\n        },\n    },\n    size: Size {\n        raw: 24,\n    },\n}\n</code></pre></div>",
        "id": 202756025,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@Nicholas Nethercote</span> does this match your expectation?</p>",
        "id": 202756039,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>print-type-size type: `rustc_middle::ty::ParamEnv`: 24 bytes, alignment: 8 bytes\nprint-type-size     field `.caller_bounds`: 8 bytes\nprint-type-size     field `.def_id`: 8 bytes\nprint-type-size     field `.reveal`: 1 bytes\nprint-type-size     end padding: 7 bytes\n</code></pre></div>",
        "id": 202756084,
        "sender_full_name": "njn",
        "timestamp": 1593733317
    },
    {
        "content": "<p>hm yes that seems equivalent...</p>",
        "id": 202756132,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733350
    },
    {
        "content": "<p>I think your output says we could squeeze a 32-bit integer in</p>",
        "id": 202756134,
        "sender_full_name": "njn",
        "timestamp": 1593733352
    },
    {
        "content": "<p>which is definitely true :)</p>",
        "id": 202756153,
        "sender_full_name": "njn",
        "timestamp": 1593733383
    },
    {
        "content": "<p>(I find that new layout style info very hard to read)</p>",
        "id": 202756161,
        "sender_full_name": "njn",
        "timestamp": 1593733394
    },
    {
        "content": "<p>how do you get print-type-size to work? Do I need to use the type somewhere?</p>",
        "id": 202756169,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733407
    },
    {
        "content": "<p>(doesn't even name the fields)</p>",
        "id": 202756171,
        "sender_full_name": "njn",
        "timestamp": 1593733410
    },
    {
        "content": "<p><a href=\"https://blog.mozilla.org/nnethercote/2018/11/09/how-to-get-the-size-of-rust-types-with-zprint-type-sizes/\">https://blog.mozilla.org/nnethercote/2018/11/09/how-to-get-the-size-of-rust-types-with-zprint-type-sizes/</a> :)</p>",
        "id": 202756222,
        "sender_full_name": "njn",
        "timestamp": 1593733433
    },
    {
        "content": "<p>hm maybe I'm doing something wrong</p>",
        "id": 202756305,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733482
    },
    {
        "content": "<p>it doesn't seem to give me anything about ParamEnv</p>",
        "id": 202756312,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733490
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Mark-Simulacrum/fc7f19d8e89a9b4fa1369a51b740be41\">https://gist.github.com/Mark-Simulacrum/fc7f19d8e89a9b4fa1369a51b740be41</a></p>",
        "id": 202756417,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733594
    },
    {
        "content": "<p>but yeah my output indicates a niche in bytes 12-16 I think</p>",
        "id": 202756498,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> follow the instructions in the blog post more carefully :)</p>",
        "id": 202756513,
        "sender_full_name": "njn",
        "timestamp": 1593733738
    },
    {
        "content": "<p>you need <code>rustc_private</code> in your code, and <code>RUSTC_BOOTSTRAP=1</code> in your invocation</p>",
        "id": 202756528,
        "sender_full_name": "njn",
        "timestamp": 1593733765
    },
    {
        "content": "<p>I see a 1.5% instruction count win on <code>serde</code> after removing the only-used-by-chalk <code>ParamEnv::def_id</code> field</p>",
        "id": 202756578,
        "sender_full_name": "njn",
        "timestamp": 1593733805
    },
    {
        "content": "<p>er that seems wrong? Like my code is compiling</p>",
        "id": 202756580,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733808
    },
    {
        "content": "<p>I am using nightly...</p>",
        "id": 202756589,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733829
    },
    {
        "content": "<p>does it like, not print the current crate? that would be odd</p>",
        "id": 202756595,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733847
    },
    {
        "content": "<p>Here's my program:</p>",
        "id": 202756599,
        "sender_full_name": "njn",
        "timestamp": 1593733856
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>extern crate rustc_middle;\nextern crate rustc_infer;\nfn main() {\n    let _x = std::mem::size_of::&lt;rustc_middle::traits::ObligationCauseData&gt;();\n    let _x = std::mem::size_of::&lt;rustc_infer::traits::PredicateObligation&lt;&#39;_&gt;&gt;();\n}\n</code></pre></div>",
        "id": 202756602,
        "sender_full_name": "njn",
        "timestamp": 1593733860
    },
    {
        "content": "<p>does it not work with nightlies?</p>",
        "id": 202756667,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733931
    },
    {
        "content": "<p>oh, that might not work with nightly, ObligationCauseData might be too new</p>",
        "id": 202756670,
        "sender_full_name": "njn",
        "timestamp": 1593733937
    },
    {
        "content": "<p>no I mean I can't get type-sizes to work at all for locally-defined types</p>",
        "id": 202756675,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733956
    },
    {
        "content": "<p>e.g. your program still gives me the same output</p>",
        "id": 202756677,
        "sender_full_name": "simulacrum",
        "timestamp": 1593733964
    },
    {
        "content": "<p>this works</p>",
        "id": 202756686,
        "sender_full_name": "njn",
        "timestamp": 1593734000
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>\\#![feature(rustc_private)]\nextern crate rustc_middle;\nfn main() {\n    let _x = std::mem::size_of::&lt;rustc_middle::ty::ParamEnv&gt;();\n}\n</code></pre></div>",
        "id": 202756689,
        "sender_full_name": "njn",
        "timestamp": 1593734005
    },
    {
        "content": "<p>compiled with <code>RUSTC_BOOTSTRAP=1 rustc +nightly -Zprint-type-sizes b.rs</code></p>",
        "id": 202756695,
        "sender_full_name": "njn",
        "timestamp": 1593734023
    },
    {
        "content": "<p>yeah that does</p>",
        "id": 202756700,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734039
    },
    {
        "content": "<p>you almost certainly don't need bootstrap, btw</p>",
        "id": 202756740,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734047
    },
    {
        "content": "<p>oh huh</p>",
        "id": 202756755,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734074
    },
    {
        "content": "<p>maybe I was just blind</p>",
        "id": 202756756,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734077
    },
    {
        "content": "<p>anyway okay so I seem to be matching</p>",
        "id": 202756762,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734091
    },
    {
        "content": "<p>true, the bootsttap isn't necessary</p>",
        "id": 202756764,
        "sender_full_name": "njn",
        "timestamp": 1593734095
    },
    {
        "content": "<p>in conclusion, stealing a bit from the Option&lt;DefId&gt; isn't possible</p>",
        "id": 202756779,
        "sender_full_name": "njn",
        "timestamp": 1593734126
    },
    {
        "content": "<p>stealing a bit from the pointer should be possible, but I couldn't get it to work last time I tried</p>",
        "id": 202756782,
        "sender_full_name": "njn",
        "timestamp": 1593734136
    },
    {
        "content": "<p>hm so cratenum today allows for a full 2^64 crates</p>",
        "id": 202756832,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734173
    },
    {
        "content": "<p>or I guess 2^32</p>",
        "id": 202756843,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734191
    },
    {
        "content": "<p>minus one for <code>ReservedForIncrCompCache</code>, yes</p>",
        "id": 202757488,
        "sender_full_name": "njn",
        "timestamp": 1593734720
    },
    {
        "content": "<p>well, we actually take out a full 256 from any rustc_index declared type</p>",
        "id": 202757530,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734748
    },
    {
        "content": "<p>but regardless that doesn't really help us</p>",
        "id": 202757533,
        "sender_full_name": "simulacrum",
        "timestamp": 1593734756
    },
    {
        "content": "<p>I think it's true that List pointers always have the bottom bit empty -- they must be aligned same as a usize at least</p>",
        "id": 202758461,
        "sender_full_name": "simulacrum",
        "timestamp": 1593735713
    },
    {
        "content": "<p>it'll be a pain to remove reveal because it's <code>pub</code> I guess</p>",
        "id": 202758550,
        "sender_full_name": "simulacrum",
        "timestamp": 1593735808
    },
    {
        "content": "<p>ah okay, so I think I see why rustc can't make this optimization today (or at least one reason): niches are always represented as ranges of values rather than masks</p>",
        "id": 202758900,
        "sender_full_name": "simulacrum",
        "timestamp": 1593736160
    },
    {
        "content": "<p>so alignment doesn't help rustc at all I think</p>",
        "id": 202758907,
        "sender_full_name": "simulacrum",
        "timestamp": 1593736173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@Nicholas Nethercote</span> well filed <a href=\"https://github.com/rust-lang/rust/pull/73978\">https://github.com/rust-lang/rust/pull/73978</a></p>",
        "id": 202760348,
        "sender_full_name": "simulacrum",
        "timestamp": 1593738280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> nice! I will review if/when the perf results look good</p>",
        "id": 202760428,
        "sender_full_name": "njn",
        "timestamp": 1593738413
    },
    {
        "content": "<p>yep, review was mostly tentative anyway (though I believe it's in a reasonable to land state, i.e., no big hacks)</p>",
        "id": 202760447,
        "sender_full_name": "simulacrum",
        "timestamp": 1593738451
    },
    {
        "content": "<p>though definitely some opportunities for polish</p>",
        "id": 202760452,
        "sender_full_name": "simulacrum",
        "timestamp": 1593738459
    },
    {
        "content": "<p>and an assert as to the bit I'm using being available seems reasonable too, though I think the only way it wouldn't be is if usize is 8-bits and that's just not happening</p>",
        "id": 202760501,
        "sender_full_name": "simulacrum",
        "timestamp": 1593738485
    },
    {
        "content": "<p>How hard <em>would</em> it be to teach rustc to use aligned pointers for niches?</p>",
        "id": 202773679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593759571
    },
    {
        "content": "<p>Because I suspect there are <em>many</em> structures that would benefit from that.</p>",
        "id": 202773749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593759616
    },
    {
        "content": "<p>Enums containing a reference in each branch, for instance.</p>",
        "id": 202773790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593759693
    },
    {
        "content": "<p>That is not possible. It must always be possible to take a reference to a field. If you were to use the bits fixed by alignment as discriminant for two variants containing a reference, then one of the variants would get a misaligned reference, which means that it is not safe to take a reference to that variant field.</p>",
        "id": 202777854,
        "sender_full_name": "bjorn3",
        "timestamp": 1593763660
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I also previously looked at shrinking <code>ParamEnv</code> after working on <a href=\"https://github.com/rust-lang/rust/pull/72962\">https://github.com/rust-lang/rust/pull/72962</a> gj <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> </p>\n<p>If we were to only allow 2^31 - 1 different <code>CrateId</code>s we should have 1 bit per <code>DefId</code> to encode something, which might be better for<br>\n<code>ParamEnv</code> (as the caller bounds seem to be more frequently used than the <code>DefId</code>) and might help in a few other places as well</p>\n<p>i.e. we can have tagged union of <code>DefId + &amp;'tcx AtLeastAlign2</code> which only takes 8 bytes.</p>",
        "id": 202779157,
        "sender_full_name": "lcnr",
        "timestamp": 1593764757
    },
    {
        "content": "<p>the rust compiler truly is a place of micro optimizations <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 202779409,
        "sender_full_name": "lcnr",
        "timestamp": 1593764908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> yeah, maybe. it's harder to do things with DefId and packing -- pointers are easier to cast in/out.</p>",
        "id": 202795017,
        "sender_full_name": "simulacrum",
        "timestamp": 1593776839
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (I'm curious what are the long-term plans for <code>ParamEnv</code>, wrt Chalk and whatnot)</p>",
        "id": 202822736,
        "sender_full_name": "eddyb",
        "timestamp": 1593795745
    },
    {
        "content": "<p>I think I had some plans to tweak the <code>Reveal</code> field to fit the \"intercrate\" (coherence-checking) mode into it</p>",
        "id": 202822768,
        "sender_full_name": "eddyb",
        "timestamp": 1593795789
    },
    {
        "content": "<p>to improve global caching in the trait system</p>",
        "id": 202822780,
        "sender_full_name": "eddyb",
        "timestamp": 1593795804
    },
    {
        "content": "<p>it should only be used with <code>Reveal::UserFacing</code> so it goes 2-&gt;3 values (as opposed to adding another full bit)</p>",
        "id": 202822794,
        "sender_full_name": "eddyb",
        "timestamp": 1593795830
    },
    {
        "content": "<p>although at that point the name starts to make even less sense</p>",
        "id": 202822849,
        "sender_full_name": "eddyb",
        "timestamp": 1593795866
    },
    {
        "content": "<p>it's more like a \"perspective\" :P</p>",
        "id": 202822869,
        "sender_full_name": "eddyb",
        "timestamp": 1593795896
    },
    {
        "content": "<p>we have 2 bits I think of space for usize (on 32-bit) I believe, so that should be fine</p>",
        "id": 202831262,
        "sender_full_name": "simulacrum",
        "timestamp": 1593804340
    },
    {
        "content": "<p>we should start using const generics to do \"pack some data in the lowest N bits of the pointer\"</p>",
        "id": 202884063,
        "sender_full_name": "eddyb",
        "timestamp": 1593884584
    },
    {
        "content": "<p>we do that for <code>ty::GenericArg</code> already :P</p>",
        "id": 202884073,
        "sender_full_name": "eddyb",
        "timestamp": 1593884597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> The <code>DefId</code> is only used for Chalk integration, i.e. not by default. What is Chalk, anyway?</p>",
        "id": 202942082,
        "sender_full_name": "njn",
        "timestamp": 1593990213
    },
    {
        "content": "<p>/me finds <a href=\"https://github.com/rust-lang/chalk\">https://github.com/rust-lang/chalk</a></p>",
        "id": 202942090,
        "sender_full_name": "njn",
        "timestamp": 1593990236
    },
    {
        "content": "<blockquote>\n<p>What is Chalk, anyway</p>\n</blockquote>\n<p>Oh, my heart <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 202943496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593993047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> in chalk <code>Reveal</code> is basically something in the environment</p>",
        "id": 203043264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071142
    },
    {
        "content": "<p>this is probably what I would want for rustc too</p>",
        "id": 203043292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071168
    },
    {
        "content": "<p>so we would basically eliminate the field and instead if you wanted to test for reveal you could check whether the environment predicates include <code>Predicate::Reveal</code></p>",
        "id": 203043322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071191
    },
    {
        "content": "<p>we can discuss how to make that efficient, I suppose</p>",
        "id": 203043335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071202
    },
    {
        "content": "<p>heh</p>",
        "id": 203043344,
        "sender_full_name": "eddyb",
        "timestamp": 1594071205
    },
    {
        "content": "<p>but it's (I think) the right way to think about it</p>",
        "id": 203043367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071219
    },
    {
        "content": "<p>nice axiom</p>",
        "id": 203043369,
        "sender_full_name": "eddyb",
        "timestamp": 1594071220
    },
    {
        "content": "<p>(it's not obvious to me that it's important performance wise anyway, we'd have to measure)</p>",
        "id": 203043456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071264
    },
    {
        "content": "<p>this is the kind of thing I hear nullary typeclasses are used for (I guess it'd be something like <code>(): Reveal</code> in Rust)</p>",
        "id": 203043474,
        "sender_full_name": "eddyb",
        "timestamp": 1594071290
    },
    {
        "content": "<p>and so you end up with something like a hypothesis</p>",
        "id": 203043491,
        "sender_full_name": "eddyb",
        "timestamp": 1594071311
    },
    {
        "content": "<p>Sure. In Chalk it's just a kind of <a href=\"http://rust-lang.github.io/chalk/chalk_ir/enum.DomainGoal.html\"><code>DomainGoal</code></a></p>",
        "id": 203043507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071322
    },
    {
        "content": "<p>(which would be an axiom if it held at the top-level)</p>",
        "id": 203043514,
        "sender_full_name": "eddyb",
        "timestamp": 1594071325
    },
    {
        "content": "<p><a href=\"http://rust-lang.github.io/chalk/chalk_ir/enum.DomainGoal.html#variant.Reveal\"><code>DomainGoal::Reveal</code></a></p>",
        "id": 203043583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071363
    },
    {
        "content": "<p>we don't need that <code>()</code> in there anymore actually, that was an artifact of older macro-rules-style things...</p>",
        "id": 203043619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ever considered having a \"constructive\" approach where you explicitly referred to \"witnesses\"?</p>",
        "id": 203043625,
        "sender_full_name": "eddyb",
        "timestamp": 1594071384
    },
    {
        "content": "<p>I'm not sure what that means in this context :)</p>",
        "id": 203043636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071395
    },
    {
        "content": "<p>don't talk fancy at me</p>",
        "id": 203043659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071409
    },
    {
        "content": "<p>:P</p>",
        "id": 203043660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071411
    },
    {
        "content": "<p>like <code>a: (T: Trait)</code> where <code>a</code> is the witness that <code>T</code> implements <code>Trait</code> and you plumb it through anything that requires it</p>",
        "id": 203043695,
        "sender_full_name": "eddyb",
        "timestamp": 1594071432
    },
    {
        "content": "<p>basically like dictionary passing I guess</p>",
        "id": 203043708,
        "sender_full_name": "eddyb",
        "timestamp": 1594071439
    },
    {
        "content": "<p>Ah, I see. That's certainly not the approach that chalk takes -- I've kind of tried to steer <em>away</em> from that, i.e., making it unnecessary to know \"how\" you proved something, only that you proved it</p>",
        "id": 203043760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071476
    },
    {
        "content": "<p>it'd all be kind of abstract except for referring to concrete <code>impl</code>s etc.</p>",
        "id": 203043804,
        "sender_full_name": "eddyb",
        "timestamp": 1594071488
    },
    {
        "content": "<p>but I could be persuaded to change if we felt it'd be useful for something, I suppose.</p>",
        "id": 203043842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594071511
    },
    {
        "content": "<p>makes sense, it's mostly just me realizing how close it is to a proof system and had a constructivist kneejerk</p>",
        "id": 203043881,
        "sender_full_name": "eddyb",
        "timestamp": 1594071538
    },
    {
        "content": "<p>anyway, circling back around, moving the <code>Reveal</code> from a flag in the <code>ParamEnv</code>, into the list of predicates, is pretty much what was discussed here</p>",
        "id": 203043965,
        "sender_full_name": "eddyb",
        "timestamp": 1594071590
    },
    {
        "content": "<p>except without a <code>Predicate::Reveal</code> or w/e inside rustc, pointer tagging came up instead</p>",
        "id": 203044030,
        "sender_full_name": "eddyb",
        "timestamp": 1594071608
    },
    {
        "content": "<p>not sure what effect putting it into the list as a <code>Predicate</code> would have on performance</p>",
        "id": 203044069,
        "sender_full_name": "eddyb",
        "timestamp": 1594071641
    },
    {
        "content": "<p>well even if we did have it in the predicate list then I'd still probably suggest caching it in a pointer tag (basically like typeflags does), though we'd probably want to benchmark</p>",
        "id": 203044084,
        "sender_full_name": "simulacrum",
        "timestamp": 1594071652
    },
    {
        "content": "<p>it'd be a mildly annoying change to make with the current ty::List due to a lack of subslicing, I imagine</p>",
        "id": 203044121,
        "sender_full_name": "simulacrum",
        "timestamp": 1594071681
    },
    {
        "content": "<p>yeah we'd want to not toggle it wildly and make sure we construct the <code>ParamEnv</code> we want from the start</p>",
        "id": 203044154,
        "sender_full_name": "eddyb",
        "timestamp": 1594071717
    },
    {
        "content": "<p>no <code>tcx.param_env(def_id).with_reveal_all()</code>, it'd be <code>tcx.param_env_reveal_all(def_id)</code> etc.</p>",
        "id": 203044236,
        "sender_full_name": "eddyb",
        "timestamp": 1594071757
    }
]