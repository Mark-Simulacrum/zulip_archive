[
    {
        "content": "<p>I would really like to invest some time moving the rest of <code>compile-fail</code> over to <code>ui</code></p>",
        "id": 130710224,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126387
    },
    {
        "content": "<p>I guess we would need to (or at least <em>should</em>) resolve <a href=\"https://github.com/rust-lang/rust/issues/46841\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46841\">#46841</a> in parallel with that effort.</p>",
        "id": 130774586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533211820
    },
    {
        "content": "<p>and that in turn is blocked on coming up with guidelines for directory names. Hmm.</p>",
        "id": 130774612,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533211904
    },
    {
        "content": "<p>I imagine coming up with some guidelines is just a matter of someone writing down some sensible rules.</p>",
        "id": 130774680,
        "sender_full_name": "varkor",
        "timestamp": 1533211993
    },
    {
        "content": "<p>Which, like actually converting the tests, is just a slog through the tests, and seeing what patterns there are in kinds of tests.</p>",
        "id": 130774728,
        "sender_full_name": "varkor",
        "timestamp": 1533212045
    },
    {
        "content": "<p>Though it would be nice if the guidelines could address all test suites and tackle them all at once.</p>",
        "id": 130774747,
        "sender_full_name": "varkor",
        "timestamp": 1533212086
    },
    {
        "content": "<p>Converting <code>compile-test</code> might not actually be <em>too</em> bad, with <code>--bless</code> in hand...</p>",
        "id": 130774767,
        "sender_full_name": "varkor",
        "timestamp": 1533212119
    },
    {
        "content": "<p>what is going to happen with tests whose UI output is platform-dependent?</p>",
        "id": 130783497,
        "sender_full_name": "RalfJ",
        "timestamp": 1533222474
    },
    {
        "content": "<p>e.g., they might contain the size of <code>usize</code> or so</p>",
        "id": 130783537,
        "sender_full_name": "RalfJ",
        "timestamp": 1533222483
    },
    {
        "content": "<p>(some miri tests do. others might exist as well.)</p>",
        "id": 130783554,
        "sender_full_name": "RalfJ",
        "timestamp": 1533222492
    },
    {
        "content": "<p>I kept making them compile-fail tests</p>",
        "id": 130783560,
        "sender_full_name": "oli",
        "timestamp": 1533222513
    },
    {
        "content": "<p>yeah, tests with platform dependent UI output should not, in my opinion, be migrated to <code>ui/</code></p>",
        "id": 130783672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533222546
    },
    {
        "content": "<p>but that's the exception, not the rule.</p>",
        "id": 130783687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533222551
    },
    {
        "content": "<p>maybe we could mark tests as platform dependent and generate multiple .stderr files?</p>",
        "id": 130783784,
        "sender_full_name": "oli",
        "timestamp": 1533222581
    },
    {
        "content": "<p>but that would be hard to maintain</p>",
        "id": 130783791,
        "sender_full_name": "oli",
        "timestamp": 1533222593
    },
    {
        "content": "<p>(I probably made statements that were too strong about my goals here. I'd be happy if 90% of the compile-tests/ moved to ui/)</p>",
        "id": 130783793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533222594
    },
    {
        "content": "<p>UI tests support output postprocessing with regexes (search for \"normalize-stderr\" in src/test/ui), so platform-dependent output is not a problem.</p>",
        "id": 130802376,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533244556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I had no idea! Thats pretty cool.</p>",
        "id": 130852490,
        "sender_full_name": "RalfJ",
        "timestamp": 1533318140
    },
    {
        "content": "<p>I agree I would like to complete this transition</p>",
        "id": 130975605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533558694
    },
    {
        "content": "<p>I was saying over in <a class=\"stream\" data-stream-id=\"122657\" href=\"/#narrow/stream/122657-wg-nll\">#wg-nll</a> that it is extra important to do this, I think, because otherwise we are just not comparing the compile-fail tests for consistency with NLL.</p>",
        "id": 131072071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679595
    },
    {
        "content": "<p>I just adopted <a href=\"https://github.com/rust-lang/rust/issues/44844\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44844\">https://github.com/rust-lang/rust/issues/44844</a> as an NLL bug, towards that end</p>",
        "id": 131072267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679858
    },
    {
        "content": "<p>that reminds me, do we test that run-pass works with NLL?</p>",
        "id": 131072273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679866
    },
    {
        "content": "<p>should open an issue on that too...</p>",
        "id": 131072275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679870
    },
    {
        "content": "<p>sadly, gotta go now</p>",
        "id": 131072277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533679872
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/issues/53196\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53196\">#53196</a> for this after discussion with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in a WG-NLL topic.</p>",
        "id": 131113157,
        "sender_full_name": "davidtwco",
        "timestamp": 1533740011
    },
    {
        "content": "<p>woah that PR is crazy big^^</p>",
        "id": 131115099,
        "sender_full_name": "RalfJ",
        "timestamp": 1533742174
    },
    {
        "content": "<p>And it already has merge conflicts. :)</p>",
        "id": 131115290,
        "sender_full_name": "simulacrum",
        "timestamp": 1533742325
    },
    {
        "content": "<p>Woah!</p>",
        "id": 131115292,
        "sender_full_name": "varkor",
        "timestamp": 1533742328
    },
    {
        "content": "<p>+60k…</p>",
        "id": 131115317,
        "sender_full_name": "nagisa",
        "timestamp": 1533742368
    },
    {
        "content": "<p>You can't even view the entire diff in GH.</p>",
        "id": 131115322,
        "sender_full_name": "varkor",
        "timestamp": 1533742373
    },
    {
        "content": "<p>Who knows what <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> is trying to sneak in there in the last few thousand files ;)</p>",
        "id": 131115342,
        "sender_full_name": "varkor",
        "timestamp": 1533742387
    },
    {
        "content": "<p>oh, you can’t view almost any diff in GH nowadays. They must be saving their compute or what</p>",
        "id": 131115346,
        "sender_full_name": "nagisa",
        "timestamp": 1533742391
    },
    {
        "content": "<p>Annoyingly I messed up when doing one of the commits and included some files I intended to leave to the next commit which is making resolving the merge conflict a tad annoying. Needing to mess with the history a little to make it easier to rebase.</p>",
        "id": 131115349,
        "sender_full_name": "davidtwco",
        "timestamp": 1533742395
    },
    {
        "content": "<p>there’s about one sort of PR that GH will still show a diff for properly. Its a +1-1 change that only affects exactly 1 file.</p>",
        "id": 131115392,
        "sender_full_name": "nagisa",
        "timestamp": 1533742438
    },
    {
        "content": "<p>\"a tad annoying\" ⇒ 30k conflicts</p>",
        "id": 131115432,
        "sender_full_name": "varkor",
        "timestamp": 1533742444
    },
    {
        "content": "<p>and that’s why github is terrible as a reviewing tool</p>",
        "id": 131115441,
        "sender_full_name": "nagisa",
        "timestamp": 1533742458
    },
    {
        "content": "<p>I've squashed the last two commits and then I'm going to insert a new third commit that does what the original third commit was supposed to do and resolve the minor conflicts that will have with the squashed fourth commit. That should make rebasing a bit easier.</p>",
        "id": 131115502,
        "sender_full_name": "davidtwco",
        "timestamp": 1533742535
    },
    {
        "content": "<p>I'm surprised it's only -2k</p>",
        "id": 131115509,
        "sender_full_name": "varkor",
        "timestamp": 1533742546
    },
    {
        "content": "<p>I'm mostly saying this for my own benefit to convince myself it'll work.</p>",
        "id": 131115518,
        "sender_full_name": "davidtwco",
        "timestamp": 1533742560
    },
    {
        "content": "<p>Surely the ui test output can't be 58k lines...?</p>",
        "id": 131115562,
        "sender_full_name": "varkor",
        "timestamp": 1533742566
    },
    {
        "content": "<p>There's some duplication in auxiliary modules for tests too. Not much, but some.</p>",
        "id": 131115577,
        "sender_full_name": "davidtwco",
        "timestamp": 1533742589
    },
    {
        "content": "<p>Since I tried to group things together into folders so that the number of files in the root ui folder was &lt; 1000 and could be viewed in GitHub's file browser as a result.</p>",
        "id": 131115598,
        "sender_full_name": "davidtwco",
        "timestamp": 1533742635
    },
    {
        "content": "<p>It might make sense to separate the function changles for checking error-pattern into a separate PR</p>",
        "id": 131115936,
        "sender_full_name": "RalfJ",
        "timestamp": 1533742970
    },
    {
        "content": "<p>so that the big one really just moves files around</p>",
        "id": 131115938,
        "sender_full_name": "RalfJ",
        "timestamp": 1533742975
    },
    {
        "content": "<p>I would have had I known I'd needed to have made that change when trying to do this initially.</p>",
        "id": 131115962,
        "sender_full_name": "davidtwco",
        "timestamp": 1533742998
    },
    {
        "content": "<p>^^</p>",
        "id": 131115972,
        "sender_full_name": "RalfJ",
        "timestamp": 1533743025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> the changes for error-pattern <em>seem</em> right</p>",
        "id": 131116115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533743150
    },
    {
        "content": "<p>/me grumbles about <code>compieltest</code> having no unit tests</p>",
        "id": 131116164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533743165
    },
    {
        "content": "<p>what could go wrong?</p>",
        "id": 131116169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533743167
    },
    {
        "content": "<p>Tests that were failing with it the way it was no longer fail, and tests that passed with it the way it was, still pass.</p>",
        "id": 131116190,
        "sender_full_name": "davidtwco",
        "timestamp": 1533743195
    },
    {
        "content": "<p>Did you manually test what happens if you give a bogus error pattern?</p>",
        "id": 131116335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533743314
    },
    {
        "content": "<p>I think I did.</p>",
        "id": 131116393,
        "sender_full_name": "davidtwco",
        "timestamp": 1533743399
    },
    {
        "content": "<p>I'll double check because I can't quite remember.</p>",
        "id": 131116440,
        "sender_full_name": "davidtwco",
        "timestamp": 1533743405
    },
    {
        "content": "<p>It should be rebased. There may be one or two failures that I've not noticed.</p>",
        "id": 131118366,
        "sender_full_name": "davidtwco",
        "timestamp": 1533745539
    },
    {
        "content": "<p>Testing locally and will fix any I find.</p>",
        "id": 131118371,
        "sender_full_name": "davidtwco",
        "timestamp": 1533745551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ok</p>",
        "id": 131119264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533746585
    },
    {
        "content": "<p>Looks like there is a failure in <code>tidy</code>.</p>",
        "id": 131119286,
        "sender_full_name": "davidtwco",
        "timestamp": 1533746632
    },
    {
        "content": "<p>ah the mercilous tidy</p>",
        "id": 131119366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533746725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span>'s comment on the issue makes me realize that I'll need to run on another platform to identify the tests with platform specific output. </p>\n<p>Need to fix the issue with <code>tidy</code> first.</p>",
        "id": 131120141,
        "sender_full_name": "davidtwco",
        "timestamp": 1533747674
    },
    {
        "content": "<p>d'oh</p>",
        "id": 131120151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533747693
    },
    {
        "content": "<p>you might try biting off fewer tests</p>",
        "id": 131120153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533747699
    },
    {
        "content": "<p>(also)</p>",
        "id": 131120154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533747701
    },
    {
        "content": "<p>i.e., it doens't have to be an \"all at once\" PR</p>",
        "id": 131120157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533747707
    },
    {
        "content": "<p>Yeah, but at this point I've made the big PR and spent time trying to do some reorganization to cut down the number of files in the root directory, so I'm inclined to just try get this PR good to land as soon as I can.</p>",
        "id": 131120249,
        "sender_full_name": "davidtwco",
        "timestamp": 1533747830
    },
    {
        "content": "<p>it occurs to me that we ought to move <code>run-pass</code> too, probably?</p>",
        "id": 131120314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533747876
    },
    {
        "content": "<p>/me tries not to scare <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> away</p>",
        "id": 131120323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533747894
    },
    {
        "content": "<p>Hm, with this we can probably also get rid of <code>// error-pattern</code> perhaps?</p>",
        "id": 131121659,
        "sender_full_name": "simulacrum",
        "timestamp": 1533749492
    },
    {
        "content": "<p>I think there are some cases where we still need it, not sure</p>",
        "id": 131122046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533749923
    },
    {
        "content": "<p>though .. maybe not?</p>",
        "id": 131122051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533749933
    },
    {
        "content": "<p>well, it is kind of an asserion over \"stuff that should exist in the reference output\"</p>",
        "id": 131122059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533749942
    },
    {
        "content": "<p>or it could be thought of that way</p>",
        "id": 131122067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533749949
    },
    {
        "content": "<p>this is certainly what the <code>//~ ERROR</code> annotations effectively server as</p>",
        "id": 131122073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533749960
    },
    {
        "content": "<p>and I quite like the setup, I have to say</p>",
        "id": 131122074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533749963
    },
    {
        "content": "<p>especially now that we have <code>--bless</code></p>",
        "id": 131122081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533749977
    },
    {
        "content": "<p>Yeah, it is essentially just an error annotation I guess</p>",
        "id": 131122156,
        "sender_full_name": "simulacrum",
        "timestamp": 1533750012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are you still working on <a href=\"https://github.com/rust-lang/rust/pull/53196\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53196\">https://github.com/rust-lang/rust/pull/53196</a> ? did you see the tidy failure?</p>",
        "id": 131125409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533753455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've seen it. Not had a chance to get to it yet. Will take another look in an hour or so.</p>",
        "id": 131125718,
        "sender_full_name": "davidtwco",
        "timestamp": 1533753749
    },
    {
        "content": "<p>Is there an easy way for me to test the platform specific output myself?</p>",
        "id": 131125748,
        "sender_full_name": "davidtwco",
        "timestamp": 1533753787
    },
    {
        "content": "<p>Not really -- it's Windows vs. Linux, I'd imagine (or mostly so)</p>",
        "id": 131125837,
        "sender_full_name": "simulacrum",
        "timestamp": 1533753875
    },
    {
        "content": "<p>You can grep for cfg.*windows in the directory, which might give some hints...</p>",
        "id": 131125846,
        "sender_full_name": "simulacrum",
        "timestamp": 1533753897
    },
    {
        "content": "<p>I'd just throw it at bors though</p>",
        "id": 131125860,
        "sender_full_name": "simulacrum",
        "timestamp": 1533753908
    },
    {
        "content": "<p>Fixed tidy issue.</p>",
        "id": 131128375,
        "sender_full_name": "davidtwco",
        "timestamp": 1533757118
    },
    {
        "content": "<p>So, Travis has a handful of interesting failures that I don't see locally.</p>",
        "id": 131131345,
        "sender_full_name": "davidtwco",
        "timestamp": 1533760599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yeah</p>",
        "id": 131134624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765077
    },
    {
        "content": "<p>I just went to check and saw that</p>",
        "id": 131134626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765082
    },
    {
        "content": "<p>any thoughts on those?</p>",
        "id": 131134632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765094
    },
    {
        "content": "<p>why..is the output so weird?</p>",
        "id": 131134638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765106
    },
    {
        "content": "<p>I guess it's the .. line numbers where the errors occur?</p>",
        "id": 131134645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765117
    },
    {
        "content": "<p>I'm not sure. Some of them seemed to be fixable by using <code>$DIR</code> in places where <code>--bless</code> didn't add it.</p>",
        "id": 131134714,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765217
    },
    {
        "content": "<p>Some of them, such as the order of suggested trait implementations are stranger.</p>",
        "id": 131134746,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765242
    },
    {
        "content": "<p>that may not be deterministic</p>",
        "id": 131134761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765249
    },
    {
        "content": "<p>which is actually something that is useful to know</p>",
        "id": 131134764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765257
    },
    {
        "content": "<p>there is probably a non-fx-hashset or something involved</p>",
        "id": 131134770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765270
    },
    {
        "content": "<p>Yeah - is there something I can do in the test or is that something we need to fix to use ui tests for it?</p>",
        "id": 131134775,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765280
    },
    {
        "content": "<p>which test is it?</p>",
        "id": 131134782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765297
    },
    {
        "content": "<p>the output seems all jumbled together :/</p>",
        "id": 131134783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765301
    },
    {
        "content": "<p>I think we can fix the compiler to be deterministic, hopefully</p>",
        "id": 131134790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765310
    },
    {
        "content": "<p>Can't remember, on mobile, left my machine building fresh to see if that helps reproduce some of them.</p>",
        "id": 131134795,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765322
    },
    {
        "content": "<p>I don't quite understand why that bors output looks so weird</p>",
        "id": 131134805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765346
    },
    {
        "content": "<p>I feel like when I run locally.. it's much easier to undersatnd...?</p>",
        "id": 131134809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765356
    },
    {
        "content": "<p>or am I forgetting how bad it can be :)</p>",
        "id": 131134811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765360
    },
    {
        "content": "<p>There's another test where it isn't complaining about creating a module where there's an auxiliary of the same name. That test hasn't really changed as far as I can tell.</p>",
        "id": 131134812,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765362
    },
    {
        "content": "<p>There's some that don't show diffs.</p>",
        "id": 131134852,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765372
    },
    {
        "content": "<p>And there's some that have diffs that seem to only show ordering changes.</p>",
        "id": 131134857,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765392
    },
    {
        "content": "<p>thought:</p>",
        "id": 131134858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765393
    },
    {
        "content": "<p>maybe move <em>just these troublesome tests</em> back to <code>compile-fail</code> for now?</p>",
        "id": 131134860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765401
    },
    {
        "content": "<p>and we can do them in a follow-up PR?</p>",
        "id": 131134861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765405
    },
    {
        "content": "<p>if it's just a handful of tests...</p>",
        "id": 131134862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765409
    },
    {
        "content": "<p>Yeah. That might be an option. Depends how easy they are to resolve. Will need to see if I can reproduce these and fix them locally without much trouble. There's also the platform specific ones that we've not seen yet.</p>",
        "id": 131134878,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765466
    },
    {
        "content": "<p>Is there a flag to <code>x.py</code> that disables tests being ignored so I run them all each time? That might be helpful for the less deterministic stuff.</p>",
        "id": 131134998,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765604
    },
    {
        "content": "<p>I should check <code>config.toml</code> actually.</p>",
        "id": 131135022,
        "sender_full_name": "davidtwco",
        "timestamp": 1533765622
    },
    {
        "content": "<blockquote>\n<p>Is there a flag to <code>x.py</code> that disables tests being ignored so I run them all each time? That might be helpful for the less deterministic stuff.</p>\n</blockquote>\n<p>I don't know...</p>",
        "id": 131135119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533765748
    },
    {
        "content": "<p>\"yes\" -- rm -r build/&lt;build triple&gt;/test</p>",
        "id": 131140399,
        "sender_full_name": "simulacrum",
        "timestamp": 1533773533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ^</p>\n<p>But nothing better than that today I think</p>",
        "id": 131140406,
        "sender_full_name": "simulacrum",
        "timestamp": 1533773558
    },
    {
        "content": "<p>So, interesting issue, I've got a test case where the compiler truncates some type that it is printing. In the case where that's a closure, it contains a path. But because it truncates it, that path isn't being normalized - it can't match the whole thing it is expecting.</p>",
        "id": 131159759,
        "sender_full_name": "davidtwco",
        "timestamp": 1533805695
    },
    {
        "content": "<p>But, on Travis, it can, because the path is shorter - on my machine, it cannot, the path to the rust working directory is too long.</p>",
        "id": 131159775,
        "sender_full_name": "davidtwco",
        "timestamp": 1533805727
    },
    {
        "content": "<p>In particular, the error from <a href=\"https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src/librustc_mir/monomorphize/collector.rs#L500-L501\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src/librustc_mir/monomorphize/collector.rs#L500-L501\">this line</a>.</p>",
        "id": 131159842,
        "sender_full_name": "davidtwco",
        "timestamp": 1533805840
    },
    {
        "content": "<p>Only in compiletest though, because the path output by rustc is only absolute if the path to the source it was given was absolute - which it is for compiletest.</p>",
        "id": 131160297,
        "sender_full_name": "davidtwco",
        "timestamp": 1533806529
    },
    {
        "content": "<p>argh</p>",
        "id": 131162347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809411
    },
    {
        "content": "<p>can you use the \"custom replacement\" feature?</p>",
        "id": 131162355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809431
    },
    {
        "content": "<p>I forget how that works, in particular I don't remember if it supports a regular expression</p>",
        "id": 131162361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809443
    },
    {
        "content": "<p>one could imagine trying to normalize all closure types out in this case</p>",
        "id": 131162370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809458
    },
    {
        "content": "<p>Yeah, that worked for fixing that case.</p>",
        "id": 131164334,
        "sender_full_name": "davidtwco",
        "timestamp": 1533811810
    },
    {
        "content": "<p>Only got a few left to resolve.</p>",
        "id": 131164341,
        "sender_full_name": "davidtwco",
        "timestamp": 1533811821
    },
    {
        "content": "<p>Rebased again and fixed a majority of the test failures locally. There should be one or two that I've not yet figured out still to solve (and then all the platform-dependent ones).</p>",
        "id": 131175259,
        "sender_full_name": "davidtwco",
        "timestamp": 1533824506
    },
    {
        "content": "<p><span class=\"emoji emoji-1f3c5\" title=\"medal\">:medal:</span></p>",
        "id": 131175323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533824545
    },
    {
        "content": "<p>you deserve one of those :)</p>",
        "id": 131175326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533824552
    },
    {
        "content": "<p>There are some commits where I've made changes either to the compiler or to compiletest in order to get things working. Nothing major or anything like that. The commits that have those changes should be relatively easy to tell apart from the commits that change thousands of files.</p>",
        "id": 131177845,
        "sender_full_name": "davidtwco",
        "timestamp": 1533826934
    },
    {
        "content": "<p>So, of the test failures from this Travis run - there are five. The last one is another path that needs normalized - I've fixed that locally. This leaves the following:</p>\n<div class=\"codehilite\"><pre><span></span>[00:46:35]     [ui] ui/coercion/coerce-unsafe-to-closure.rs\n[00:46:35]     [ui] ui/invalid-module-declaration/invalid-module-declaration.rs\n[00:46:35]     [ui] ui/issues/issue-46209-private-enum-variant-reexport.rs\n[00:46:35]     [ui] ui/meta-expected-error-wrong-rev.rs#a\n</pre></div>\n\n\n<p>I can reproduce the second and fourth. I cannot reproduce the first and third. I have no idea why any of them are happening. The fourth one doesn't show a diff or anything, it just finds itself on that list.</p>",
        "id": 131178731,
        "sender_full_name": "davidtwco",
        "timestamp": 1533827800
    },
    {
        "content": "<p>The first one is:</p>\n<div class=\"codehilite\"><pre><span></span>[00:46:35] -       |                                        ^^^ the trait `std::ops::FnOnce&lt;(&amp;str,)&gt;` is not implemented for `unsafe extern &quot;rust-intrinsic&quot; fn(_) -&gt; _ {std::mem::transmute::&lt;_, _&gt;}`\n[00:46:35] +       |                                        ^^^ the trait `std::ops::FnOnce&lt;(&amp;str,)&gt;` is not implemented for `unsafe extern &quot;rust-intrinsic&quot; fn(_) -&gt; _ {std::intrinsics::transmute::&lt;_, _&gt;}`\n</pre></div>\n\n\n<p>I don't know why I get the result I get locally or why it is different on Travis.</p>",
        "id": 131178843,
        "sender_full_name": "davidtwco",
        "timestamp": 1533827885
    },
    {
        "content": "<p>The second one is:</p>\n<div class=\"codehilite\"><pre><span></span>[00:46:35] ---- [ui] ui/invalid-module-declaration/invalid-module-declaration.rs stdout ----\n[00:46:35]\n[00:46:35] error: error pattern &#39; cannot declare a new module at this location&#39; not found!\n[00:46:35]\n[00:46:35] error: error pattern &#39; maybe move this module&#39; not found!\n[00:46:35]\n[00:46:35] error: multiple error patterns not found\n[00:46:35] status: exit code: 1\n[00:46:35] command: &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&quot; &quot;/checkout/src/test/ui/invalid-module-declaration/invalid-module-declaration.rs&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Zui-testing&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/invalid-module-declaration/invalid-module-declaration/a&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Zunstable-options&quot; &quot;-Lnative=/checkout/obj/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/invalid-module-declaration/invalid-module-declaration/auxiliary&quot; &quot;-A&quot; &quot;unused&quot;\n</pre></div>\n\n\n<p>This one is because the auxiliary module should stop the module declared in the test from being declared. <a href=\"https://github.com/davidtwco/rust/tree/compile-fail-to-ui/src/test/ui/invalid-module-declaration\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/compile-fail-to-ui/src/test/ui/invalid-module-declaration\">Nothing has changed about this test whatsoever</a> (not even moved it) or about auxiliary handling in compiletest.</p>",
        "id": 131178880,
        "sender_full_name": "davidtwco",
        "timestamp": 1533827945
    },
    {
        "content": "<p>The third one is:</p>\n<div class=\"codehilite\"><pre><span></span>[00:46:35] 16   LL |     crate enum Crewman {\n[00:46:35] 17      |     ------------------ help: consider making the enum public: `pub enum Crewman`\n[00:46:35] 18\n[00:46:35] -    error: enum is private and its variants cannot be re-exported\n[00:46:35] -      --&gt; $DIR/issue-46209-private-enum-variant-reexport.rs:14:13\n[00:46:35] -       |\n[00:46:35] -    LL |     pub use self::Professor::*;\n[00:46:35] -       |             ^^^^^^^^^^^^^^^^^^\n[00:46:35] -    ...\n[00:46:35] -    LL |     enum Professor {\n[00:46:35] -       |     -------------- help: consider making the enum public: `pub enum Professor`\n[00:46:35] -\n[00:46:35] 28   error: variant `JuniorGrade` is private and cannot be re-exported\n[00:46:35] 29     --&gt; $DIR/issue-46209-private-enum-variant-reexport.rs:16:32\n[00:46:35] 30      |\n[00:46:35]\n[00:46:35] 33   ...\n[00:46:35] 34   LL |     enum Lieutenant {\n[00:46:35] 35      |     --------------- help: consider making the enum public: `pub enum Lieutenant`\n[00:46:35] +\n[00:46:35] +    error: enum is private and its variants cannot be re-exported\n[00:46:35] +      --&gt; $DIR/issue-46209-private-enum-variant-reexport.rs:14:13\n[00:46:35] +       |\n[00:46:35] +    LL |     pub use self::Professor::*;\n[00:46:35] +       |             ^^^^^^^^^^^^^^^^^^\n[00:46:35] +    ...\n[00:46:35] +    LL |     enum Professor {\n[00:46:35] +       |     -------------- help: consider making the enum public: `pub enum Professor`\n[00:46:35] 36\n[00:46:35] 37   error: variant `Full` is private and cannot be re-exported\n[00:46:35] 38     --&gt; $DIR/issue-46209-private-enum-variant-reexport.rs:16:45\n</pre></div>\n\n\n<p>For some reason, these errors are reported in different order on Travis, I've built the compiler with three different versions now with all the rebases, I can't get it to make that order locally.</p>",
        "id": 131178913,
        "sender_full_name": "davidtwco",
        "timestamp": 1533827987
    },
    {
        "content": "<p>The fourth one doesn't say anything at all.</p>",
        "id": 131178969,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828006
    },
    {
        "content": "<p>Not a thing.</p>",
        "id": 131178975,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828008
    },
    {
        "content": "<p>interesting</p>",
        "id": 131179090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828130
    },
    {
        "content": "<p>I have some ideas about some of those</p>",
        "id": 131179092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828133
    },
    {
        "content": "<p>but I definitely think we should leave those in compile-fail and file follow-up issues</p>",
        "id": 131179101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828141
    },
    {
        "content": "<p>I am eager to let you stop rebasing this thing</p>",
        "id": 131179110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828152
    },
    {
        "content": "<p>I've only had to rebase twice and both times (after fixing my initial messy commits) I've not had to really make any changes.</p>",
        "id": 131179130,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828176
    },
    {
        "content": "<blockquote>\n<p>The first one is:</p>\n</blockquote>\n<p>That looks like maybe the code that generates a path from a <code>DefId</code> is kind of non-deterministic-ish?</p>",
        "id": 131179135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828182
    },
    {
        "content": "<p>that is, there are probably multiple valid paths due to re-exports or whatever</p>",
        "id": 131179146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828191
    },
    {
        "content": "<blockquote>\n<p>For some reason, these errors are reported in different order on Travis,</p>\n</blockquote>\n<p>would have to look at the privacy related code, I guess...</p>",
        "id": 131179227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828247
    },
    {
        "content": "<p>I could normalize that [the first one] and fix it that way - it's a ugly solution but we could add an issue so it gets resolved at some point.</p>",
        "id": 131179237,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828263
    },
    {
        "content": "<p>as an aside, I am reminded that in previous compilers I worked on, we had support for multiple valid outputs, perhaps for this reason :)</p>",
        "id": 131179240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828271
    },
    {
        "content": "<p>but yeah these don't feel like 'normalizations'</p>",
        "id": 131179248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828283
    },
    {
        "content": "<p>though I guess adding with a FIXME might be ok</p>",
        "id": 131179251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828290
    },
    {
        "content": "<p>I think it makes sense to pull these out for now</p>",
        "id": 131179252,
        "sender_full_name": "simulacrum",
        "timestamp": 1533828293
    },
    {
        "content": "<p>They aren't, but they'd get it working.</p>",
        "id": 131179254,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828294
    },
    {
        "content": "<blockquote>\n<p>I think it makes sense to pull these out for now</p>\n</blockquote>\n<p>by this you mean leave as compile-fail tests?</p>",
        "id": 131179274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828313
    },
    {
        "content": "<p>Strangest thing is, the <code>invalid-module-declaration</code> error - I had that working in the very first push, after the first rebase it didn't.</p>",
        "id": 131179310,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828358
    },
    {
        "content": "<p>The first rebase being immediately after the first push.</p>",
        "id": 131179358,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828373
    },
    {
        "content": "<p>The last one is a \"meta-test\" of compiletest.</p>",
        "id": 131179396,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828419
    },
    {
        "content": "<p>I wonder if the issue for that is that <code>// should-fail</code> isn't respected on UI tests?</p>",
        "id": 131179417,
        "sender_full_name": "davidtwco",
        "timestamp": 1533828448
    },
    {
        "content": "<p>Yeah, leaving them as compile-fail</p>",
        "id": 131179442,
        "sender_full_name": "simulacrum",
        "timestamp": 1533828472
    },
    {
        "content": "<blockquote>\n<p>I wonder if the issue for that is that <code>// should-fail</code> isn't respected on UI tests?</p>\n</blockquote>\n<p>could be</p>",
        "id": 131179866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533828842
    },
    {
        "content": "<p>I'm struggling to see how <code>should-fail</code> is implemented in any of the testing modes.</p>",
        "id": 131180464,
        "sender_full_name": "davidtwco",
        "timestamp": 1533829393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I believe it is used earlier on</p>",
        "id": 131180783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533829665
    },
    {
        "content": "<p>I'd actually be a bit surprised if it is not respected by <code>ui</code></p>",
        "id": 131180788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533829677
    },
    {
        "content": "<p>let me see...</p>",
        "id": 131180838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533829693
    },
    {
        "content": "<p>I've grepped around and can only find it used where it is parsed. That sets another field but I can't find it used at all.</p>",
        "id": 131180842,
        "sender_full_name": "davidtwco",
        "timestamp": 1533829697
    },
    {
        "content": "<p>yeah, here: <a href=\"https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src/tools/compiletest/src/main.rs#L623-L633\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src/tools/compiletest/src/main.rs#L623-L633\">link</a></p>",
        "id": 131180855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533829719
    },
    {
        "content": "<p>basically we use the same runtime as is used for <code>#[test]</code></p>",
        "id": 131180858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533829724
    },
    {
        "content": "<p>and <code>// should_fail</code> translates into setting the <code>should_panic</code> field to true</p>",
        "id": 131180864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533829736
    },
    {
        "content": "<p>I can't find <code>should_panic</code> being used though.</p>",
        "id": 131180874,
        "sender_full_name": "davidtwco",
        "timestamp": 1533829747
    },
    {
        "content": "<p>Other than there.</p>",
        "id": 131180875,
        "sender_full_name": "davidtwco",
        "timestamp": 1533829749
    },
    {
        "content": "<p>well that's because it's in the libtest runtime</p>",
        "id": 131180882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533829758
    },
    {
        "content": "<p>Ah.</p>",
        "id": 131180890,
        "sender_full_name": "davidtwco",
        "timestamp": 1533829768
    },
    {
        "content": "<p>That makes more sense.</p>",
        "id": 131180894,
        "sender_full_name": "davidtwco",
        "timestamp": 1533829770
    },
    {
        "content": "<p>Does that mean that the bug is that it is returning a status of 256 despite the fact I can see the test does error?</p>",
        "id": 131181009,
        "sender_full_name": "davidtwco",
        "timestamp": 1533829876
    },
    {
        "content": "<p>Either way, I'm moving those tests to <code>compile-fail</code> now.</p>",
        "id": 131181205,
        "sender_full_name": "davidtwco",
        "timestamp": 1533830072
    },
    {
        "content": "<p>Moving back to <code>compile-fail</code>, all but <code>invalid-module-declaration</code> work.</p>",
        "id": 131181603,
        "sender_full_name": "davidtwco",
        "timestamp": 1533830433
    },
    {
        "content": "<p>I don't know what I've done to this test.</p>",
        "id": 131181604,
        "sender_full_name": "davidtwco",
        "timestamp": 1533830439
    },
    {
        "content": "<blockquote>\n<p>Does that mean that the bug is that it is returning a status of 256 despite the fact I can see the test does error?</p>\n</blockquote>\n<p>maybe...</p>",
        "id": 131181851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533830709
    },
    {
        "content": "<p>Alright, so, I know what happened, I think. This test never worked. <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/invalid-module-declaration/invalid-module-declaration.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/invalid-module-declaration/invalid-module-declaration.rs\">It was always a ui test</a>. But previously, <code>error-pattern</code> didn't work on ui test - I fixed that when working on this because we noticed it on some tests.</p>",
        "id": 131181854,
        "sender_full_name": "davidtwco",
        "timestamp": 1533830711
    },
    {
        "content": "<p>ah, interesting :)</p>",
        "id": 131181858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533830719
    },
    {
        "content": "<p>It was always making an error - and that error matched the UI output.</p>",
        "id": 131181877,
        "sender_full_name": "davidtwco",
        "timestamp": 1533830741
    },
    {
        "content": "<p>It always passed. But it didn't assert that the two error patterns existed, and now it does, and well, those patterns don't match.</p>",
        "id": 131181884,
        "sender_full_name": "davidtwco",
        "timestamp": 1533830755
    },
    {
        "content": "<p>What should I do about this test?</p>",
        "id": 131181887,
        "sender_full_name": "davidtwco",
        "timestamp": 1533830760
    },
    {
        "content": "<p>what patterns is it assering?</p>",
        "id": 131182301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533831124
    },
    {
        "content": "<p>and what is the actual output?</p>",
        "id": 131182306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533831126
    },
    {
        "content": "<p>I've pushed with the patterns removed to see if anything else fails on Travis.</p>",
        "id": 131182314,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831140
    },
    {
        "content": "<p>The error output is that it expects a file to be there for a module declared in the auxiliary code.</p>",
        "id": 131182322,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831166
    },
    {
        "content": "<p>That should be there.</p>",
        "id": 131182324,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831169
    },
    {
        "content": "<p>But there is also a duplicate module declared in a test. The patterns expect errors about that duplicate module name.</p>",
        "id": 131182336,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831184
    },
    {
        "content": "<p>There aren't any.</p>",
        "id": 131182342,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831188
    },
    {
        "content": "<p>You can see <a href=\"https://github.com/rust-lang/rust/tree/master/src/test/ui/invalid-module-declaration\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/tree/master/src/test/ui/invalid-module-declaration\">the test here</a> - there's not much in it.</p>",
        "id": 131182351,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831219
    },
    {
        "content": "<p>seems like the test is failing but never worked perhaps...</p>",
        "id": 131182423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533831282
    },
    {
        "content": "<p>Yeah, I don't think it ever worked.</p>",
        "id": 131182432,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831296
    },
    {
        "content": "<p>Given that error patterns weren't enforced before on UI tests - it literally was never testing that.</p>",
        "id": 131182452,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831323
    },
    {
        "content": "<p>It's possible that nobody ran the test itself with the flags to make it use the auxiliary module to see if the expected error was there either.</p>",
        "id": 131182464,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831360
    },
    {
        "content": "<p>(though I guess the ui output should have shown that)</p>",
        "id": 131182518,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831382
    },
    {
        "content": "<p>(which I guess confirms it never did output the correct thing as we can view that)</p>",
        "id": 131182523,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831392
    },
    {
        "content": "<p>Well, looking at the history, at some point in the past it did.</p>",
        "id": 131182541,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831434
    },
    {
        "content": "<p>But as of the last commit to that stderr, it did not.</p>",
        "id": 131182543,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831439
    },
    {
        "content": "<p>I'd land this with the test passing again (that is, without the error patterns) and perhaps make an issue for someone to look into the regression in that test's output.</p>",
        "id": 131182717,
        "sender_full_name": "davidtwco",
        "timestamp": 1533831629
    },
    {
        "content": "<blockquote>\n<p>I'd land this with the test passing again (that is, without the error patterns) and perhaps make an issue for someone to look into the regression in that test's output.</p>\n</blockquote>\n<p>yes sounds good</p>",
        "id": 131183001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533831991
    },
    {
        "content": "<p>cc @cramertj on that</p>",
        "id": 131183007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533832001
    },
    {
        "content": "<p>If this Travis run passes (and I think <span class=\"emoji emoji-1f91e\" title=\"fingers crossed\">:fingers_crossed:</span> it will) then we just need to check platform specific output and that should be it.</p>",
        "id": 131183043,
        "sender_full_name": "davidtwco",
        "timestamp": 1533832064
    },
    {
        "content": "<p>Noticed the failure, one last test, easy fix - building locally now.</p>",
        "id": 131185273,
        "sender_full_name": "davidtwco",
        "timestamp": 1533834504
    },
    {
        "content": "<p>Alright, pushed that. Fifth time lucky.</p>",
        "id": 131185644,
        "sender_full_name": "davidtwco",
        "timestamp": 1533834947
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> UI tests passed on Travis. Is someone able to kick off a big test on other platforms.</p>",
        "id": 131188406,
        "sender_full_name": "davidtwco",
        "timestamp": 1533838186
    },
    {
        "content": "<p>you could edit <code>.travis.yml</code> to temporarily enable any platforms on CI (don't enable everything though, this will block the bors's queue)</p>",
        "id": 131188498,
        "sender_full_name": "kennytm",
        "timestamp": 1533838275
    },
    {
        "content": "<p>sounds reasonable -- I can also r+ :)</p>",
        "id": 131188510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533838302
    },
    {
        "content": "<p>but it'd be better not to block the queue</p>",
        "id": 131188511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533838308
    },
    {
        "content": "<p>r+ would be easiest as this would be part of the queue <span class=\"emoji emoji-1f604\" title=\"big smile\">:big_smile:</span></p>",
        "id": 131188570,
        "sender_full_name": "kennytm",
        "timestamp": 1533838366
    },
    {
        "content": "<p>I'm not sure I understand but I'm happy to r+</p>",
        "id": 131188611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533838411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think bors ignored you again.</p>",
        "id": 131192751,
        "sender_full_name": "davidtwco",
        "timestamp": 1533842901
    },
    {
        "content": "<p>It didn't reply with a commit being approved message and its not where I'd expect on the queue page.</p>",
        "id": 131192770,
        "sender_full_name": "davidtwco",
        "timestamp": 1533842933
    },
    {
        "content": "<p>it seemed to be blocked by a \"WIP\" in the title (was there one before)?</p>",
        "id": 131194932,
        "sender_full_name": "varkor",
        "timestamp": 1533845698
    },
    {
        "content": "<p>and in <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s second message, he didn't <code>r+</code> again</p>",
        "id": 131194940,
        "sender_full_name": "varkor",
        "timestamp": 1533845710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yeah I forgot to r+ again after removing <code>wip</code></p>",
        "id": 131194941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533845711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>: it's already outdated</p>",
        "id": 131198915,
        "sender_full_name": "varkor",
        "timestamp": 1533851201
    },
    {
        "content": "<p>I'm surprise bors is running it if there's a merge conflict, though</p>",
        "id": 131198928,
        "sender_full_name": "varkor",
        "timestamp": 1533851233
    },
    {
        "content": "<p>Bors might not realize or GH might not understand. The first is more likely, though.</p>",
        "id": 131199118,
        "sender_full_name": "simulacrum",
        "timestamp": 1533851421
    },
    {
        "content": "<p>Shouldn't get merged I think...</p>",
        "id": 131199120,
        "sender_full_name": "simulacrum",
        "timestamp": 1533851428
    },
    {
        "content": "<p>I expect it to fail anyway. There's got to be some platform dependant tests in there that we'll catch.</p>",
        "id": 131199477,
        "sender_full_name": "davidtwco",
        "timestamp": 1533851885
    },
    {
        "content": "<p><a href=\"https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8517/job/h632yv766sg7w9hn\" target=\"_blank\" title=\"https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8517/job/h632yv766sg7w9hn\">https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8517/job/h632yv766sg7w9hn</a></p>",
        "id": 131199815,
        "sender_full_name": "varkor",
        "timestamp": 1533852380
    },
    {
        "content": "<p>Yeah, just noticed that. Some strange differences in there.</p>",
        "id": 131199860,
        "sender_full_name": "davidtwco",
        "timestamp": 1533852471
    },
    {
        "content": "<p>I'll need to set up a build on a Windows machine, I think.</p>",
        "id": 131199942,
        "sender_full_name": "davidtwco",
        "timestamp": 1533852569
    },
    {
        "content": "<p>I assume the url diffs that it shows are related to some sort of merge it tried to do with <code>HEAD</code>.</p>",
        "id": 131200054,
        "sender_full_name": "davidtwco",
        "timestamp": 1533852680
    },
    {
        "content": "<p>\"second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized\"<br>\nvs<br>\n\"second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\"<br>\nis pretty strange</p>",
        "id": 131200179,
        "sender_full_name": "varkor",
        "timestamp": 1533852861
    },
    {
        "content": "<p>(the first link is invalid)</p>",
        "id": 131200182,
        "sender_full_name": "varkor",
        "timestamp": 1533852868
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53082\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53082\">#53082</a> seems to have changed that.</p>",
        "id": 131200216,
        "sender_full_name": "davidtwco",
        "timestamp": 1533852939
    },
    {
        "content": "<p>It did a merge with the rollup that happened before, that'll account for a bunch of the diffs.</p>",
        "id": 131200260,
        "sender_full_name": "davidtwco",
        "timestamp": 1533852964
    },
    {
        "content": "<p>So, the failures are:</p>\n<div class=\"codehilite\"><pre><span></span>URL ERROR:\n    [ui] ui\\associated-types\\associated-types-unsized.rs\n    [ui] ui\\bad\\bad-sized.rs\n    [ui] ui\\dst\\dst-bad-assign-2.rs\n    [ui] ui\\dst\\dst-bad-assign-3.rs\n    [ui] ui\\dst\\dst-bad-assign.rs\n    [ui] ui\\dst\\dst-bad-deep-2.rs\n    [ui] ui\\dst\\dst-bad-deep.rs\n    [ui] ui\\dst\\dst-object-from-unsized-type.rs\n    [ui] ui\\dst\\dst-sized-trait-param.rs\n    [ui] ui\\extern\\extern-types-unsized.rs\n    [ui] ui\\range\\range-1.rs\n    [ui] ui\\str\\str-mut-idx.rs\n    [ui] ui\\substs-ppaux.rs#normal\n    [ui] ui\\substs-ppaux.rs#verbose\n    [ui] ui\\traits\\trait-bounds-not-on-bare-trait.rs\n    [ui] ui\\union\\union-unsized.rs\n    [ui] ui\\unsized3.rs\n    [ui] ui\\unsized5.rs\n    [ui] ui\\unsized6.rs\n    [ui] ui\\unsized7.rs\n    [ui] ui\\unsized\\unsized-bare-typaram.rs\n    [ui] ui\\unsized\\unsized-enum.rs\n    [ui] ui\\unsized\\unsized-inherent-impl-self-type.rs\n    [ui] ui\\unsized\\unsized-struct.rs\n    [ui] ui\\unsized\\unsized-trait-impl-self-type.rs\n    [ui] ui\\unsized\\unsized-trait-impl-trait-arg.rs\n    [ui] ui\\wf\\wf-array-elem-sized.rs\n\nPATHS:\n    [ui] ui\\crateresolve1.rs\n    [ui] ui\\nolink-with-link-args.rs\n    [ui] ui\\not-utf8.rs\n\nFILE NOT FOUND DIFFERENCE:\n    [ui] ui\\issues\\issue-10755.rs\n    [ui] ui\\extern\\external-doc-error.rs\n    [ui] ui\\macros\\macros-nonfatal-errors.rs\n\nLINK.EXE:\n    [ui] ui\\issues\\issue-10755.rs\n</pre></div>",
        "id": 131200675,
        "sender_full_name": "davidtwco",
        "timestamp": 1533853543
    },
    {
        "content": "<p>That's not half bad. URL errors are fixed by just running bless. File not found differences can be sorted with a normalize comment. Some of the path ones might be a tad more tricky but doable.</p>",
        "id": 131200724,
        "sender_full_name": "davidtwco",
        "timestamp": 1533853586
    },
    {
        "content": "<p>I wonder if any of the other platforms have different output for tests that we're not seeing because this build failed first. Would be annoying to need to go through the bors process once per platform that will have varying output.</p>",
        "id": 131200745,
        "sender_full_name": "davidtwco",
        "timestamp": 1533853639
    },
    {
        "content": "<p>Just noticed that one of the tests also has this:</p>\n<div class=\"codehilite\"><pre><span></span>+\n+   note: the msvc targets depend on the msvc linker but `link.exe` was not found\n+\n+   note: please ensure that VS 2013, VS 2015 or VS 2017 was installed with the Visual C++ option\n</pre></div>\n\n\n<p>That'll be a pain to deal with.</p>",
        "id": 131201162,
        "sender_full_name": "davidtwco",
        "timestamp": 1533854167
    },
    {
        "content": "<p><code>no-link-with-link-args</code> also has a bunch of extra wording at the bottom of its output that will make it harder to deal with.</p>",
        "id": 131201255,
        "sender_full_name": "davidtwco",
        "timestamp": 1533854291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> uh....</p>",
        "id": 131201262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533854332
    },
    {
        "content": "<p>that's annoying!</p>",
        "id": 131201268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533854341
    },
    {
        "content": "<p>I might need to move one or two (more) tests back to <code>compile-fail</code> for the time being.</p>",
        "id": 131201346,
        "sender_full_name": "davidtwco",
        "timestamp": 1533854435
    },
    {
        "content": "<p>I guess in the limit we could have some kind of \"skip stderr\" flag</p>",
        "id": 131201839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855320
    },
    {
        "content": "<p>basically same thing as compile-fail, I guess</p>",
        "id": 131201840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855325
    },
    {
        "content": "<p>or \"skip stderr on windows\"</p>",
        "id": 131201841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855330
    },
    {
        "content": "<p>that...would be pretty ok</p>",
        "id": 131201844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855341
    },
    {
        "content": "<p>Yeah, it might be worth doing for these handful of tests.</p>",
        "id": 131201893,
        "sender_full_name": "davidtwco",
        "timestamp": 1533855423
    },
    {
        "content": "<p>I'm +1 on that</p>",
        "id": 131201904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855449
    },
    {
        "content": "<p>Or even a way to remove lines that match a regex.</p>",
        "id": 131201907,
        "sender_full_name": "davidtwco",
        "timestamp": 1533855454
    },
    {
        "content": "<p>it seems like checking the <code>//~ ERROR</code> etc is enough</p>",
        "id": 131201908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855456
    },
    {
        "content": "<blockquote>\n<p>Or even a way to remove lines that match a regex.</p>\n</blockquote>\n<p>can't we normalize them to <code>\"\"</code> or something?</p>",
        "id": 131201911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855466
    },
    {
        "content": "<p>I guess the line remains</p>",
        "id": 131201913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855473
    },
    {
        "content": "<p>Yeah, if the lines aren't there on linux then it still fails.</p>",
        "id": 131201955,
        "sender_full_name": "davidtwco",
        "timestamp": 1533855489
    },
    {
        "content": "<p>well either seems ok</p>",
        "id": 131201957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855495
    },
    {
        "content": "<p>I'd probably just add a \"skip stderr on &lt;platform&gt;\" flag</p>",
        "id": 131201960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855513
    },
    {
        "content": "<p>but normalizing is obviously a touch better</p>",
        "id": 131201963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855530
    },
    {
        "content": "<p>and I guess it has another advantage:</p>",
        "id": 131201965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855535
    },
    {
        "content": "<p>devs on windows can run <code>--bless</code> and it will work</p>",
        "id": 131201969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533855540
    },
    {
        "content": "<p>Yeah, that seems like a good idea for a follow-up PR. I'd probably just move them to <code>compile-fail</code> for this PR though. There are also ones I've already moved to <code>compile-fail</code> (~3 at the moment) that just don't work on <code>ui</code> at the moment.</p>",
        "id": 131201983,
        "sender_full_name": "davidtwco",
        "timestamp": 1533855585
    },
    {
        "content": "<p>EIther due to being just broken (the \"metatest\" one or <code>invalid-module-declaration</code>) or the output not being deterministic.</p>",
        "id": 131202049,
        "sender_full_name": "davidtwco",
        "timestamp": 1533855621
    },
    {
        "content": "<p>I'd really like to get this into a state where it can be landed tomorrow (I guess it's today now for me).</p>",
        "id": 131202057,
        "sender_full_name": "davidtwco",
        "timestamp": 1533855657
    },
    {
        "content": "<blockquote>\n<p>compile-fail to ui: Day 3<br>\nEverything is starting to look like a ui test...</p>\n</blockquote>",
        "id": 131225023,
        "sender_full_name": "davidtwco",
        "timestamp": 1533890676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are you waiting on an r+ or anything?</p>",
        "id": 131225795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533891651
    },
    {
        "content": "<p>oh dear I see a lot of conflicts</p>",
        "id": 131225805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533891669
    },
    {
        "content": "<p>Not at the moment. Doing a build after rebasing just now on my linux box, also have a Windows box building to work on the failures we see on Windows.</p>",
        "id": 131225810,
        "sender_full_name": "davidtwco",
        "timestamp": 1533891696
    },
    {
        "content": "<p>There's something worse about having to rebase because of my own pull requests.</p>",
        "id": 131226708,
        "sender_full_name": "davidtwco",
        "timestamp": 1533892931
    },
    {
        "content": "<p>What also might be a nice idea is a sort of <code>// per-platform-stderr</code> comment that has a <code>.win.stderr</code> and <code>.linux.stderr</code> instead of just <code>.stderr</code> for every compare mode and revision.</p>",
        "id": 131228243,
        "sender_full_name": "davidtwco",
        "timestamp": 1533895134
    },
    {
        "content": "<p>yeah, maybe, though I'd like to make it so that <code>--bless</code> works</p>",
        "id": 131228401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895364
    },
    {
        "content": "<p>I think maybe the idea of adding more kinds of normalization is better</p>",
        "id": 131228402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895374
    },
    {
        "content": "<p>Yeah, those stderr files would just need to be ignored on the other platform. Normalization is a better approach.</p>",
        "id": 131228414,
        "sender_full_name": "davidtwco",
        "timestamp": 1533895401
    },
    {
        "content": "<p>adding something that deletes lines entirely seems...not that hard?</p>",
        "id": 131228420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895420
    },
    {
        "content": "<p>note: we could also have platform specific normalization rules</p>",
        "id": 131228425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895437
    },
    {
        "content": "<p>Could have it so that there's a \"only consider lines that match this regex on this platform\" type of comment?</p>",
        "id": 131228469,
        "sender_full_name": "davidtwco",
        "timestamp": 1533895478
    },
    {
        "content": "<p>I'm not sure I understand</p>",
        "id": 131228537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895602
    },
    {
        "content": "<p>I guess it's just another way of saying \"don't consider this line of the stderr on this platform\".</p>",
        "id": 131228551,
        "sender_full_name": "davidtwco",
        "timestamp": 1533895637
    },
    {
        "content": "<p>Useful for the extra lines that sometimes are added to error output on Windows.</p>",
        "id": 131228555,
        "sender_full_name": "davidtwco",
        "timestamp": 1533895655
    },
    {
        "content": "<p>well i'd rather we have a windows-specific normalization that deletes them</p>",
        "id": 131228628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895760
    },
    {
        "content": "<p>because that way, when you run <code>--bless</code>, you get the result that other platforms want</p>",
        "id": 131228630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895769
    },
    {
        "content": "<p>Ah yeah, that makes sense.</p>",
        "id": 131228631,
        "sender_full_name": "davidtwco",
        "timestamp": 1533895784
    },
    {
        "content": "<p>Am I right in thinking that the only way this can be merged without conflicts is if it comes after a PR that made no changes to ui or compile-fail tests?</p>",
        "id": 131229225,
        "sender_full_name": "davidtwco",
        "timestamp": 1533896738
    },
    {
        "content": "<p>Alright, the PR doesn't conflict at the moment and _should_ fix all the Windows errors we saw (I can't test yet, still building LLVM on my Windows machine).</p>",
        "id": 131229356,
        "sender_full_name": "davidtwco",
        "timestamp": 1533896907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 131229357,
        "sender_full_name": "davidtwco",
        "timestamp": 1533896910
    },
    {
        "content": "<blockquote>\n<p>Am I right in thinking that the only way this can be merged without conflicts is if it comes after a PR that made no changes to ui or compile-fail tests?</p>\n</blockquote>\n<p>compile-fail tests yes... ui tests?</p>",
        "id": 131229375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533896952
    },
    {
        "content": "<p>anyway r+ p=1</p>",
        "id": 131229377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533896956
    },
    {
        "content": "<p>It moves around some tests to try keep the number of files/directories in the root of src/test/ui under 1000 so that GitHub can render them all at once. <a href=\"https://github.com/rust-lang/rust/issues/46841\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46841\">#46841</a></p>",
        "id": 131229394,
        "sender_full_name": "davidtwco",
        "timestamp": 1533896994
    },
    {
        "content": "<p>I'll need to rebase again after the current PR being tested finishes, so it'll need another <code>r+</code> before it actually gets a chance to run.</p>",
        "id": 131229466,
        "sender_full_name": "davidtwco",
        "timestamp": 1533897042
    },
    {
        "content": "<p>d'oh</p>",
        "id": 131229722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533897417
    },
    {
        "content": "<p>Going to have to rely on bors to test Windows I think, can't get rustc building with msvc because link.exe hits the library limit of 65535.</p>",
        "id": 131233725,
        "sender_full_name": "davidtwco",
        "timestamp": 1533903383
    },
    {
        "content": "<p>Seems to be <a href=\"https://github.com/rust-lang/rust/issues/53014\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53014\">#53014</a></p>",
        "id": 131233815,
        "sender_full_name": "davidtwco",
        "timestamp": 1533903545
    },
    {
        "content": "<p>hmm</p>",
        "id": 131235017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533905262
    },
    {
        "content": "<p>I wonder if we should bump the priority on that (cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> )</p>",
        "id": 131235021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533905279
    },
    {
        "content": "<p>I'm fairly sure that the only issue that could come up on Windows is the difference between the \"No such file or directory found\" and \"The system can not find the file specified\" messages - I've put in a normalization for that, so it should be fixed, but I can't verify it.</p>",
        "id": 131235095,
        "sender_full_name": "davidtwco",
        "timestamp": 1533905376
    },
    {
        "content": "<p>Is there a reason a <code>@bors try</code> can't be used to test on other platforms? I'm not 100% sure what <code>try</code> does.</p>",
        "id": 131235104,
        "sender_full_name": "davidtwco",
        "timestamp": 1533905397
    },
    {
        "content": "<p>I don't know :)</p>",
        "id": 131235266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533905573
    },
    {
        "content": "<p>Would just save me waiting on the bors queue to find out what needs fixed next.</p>",
        "id": 131235280,
        "sender_full_name": "davidtwco",
        "timestamp": 1533905609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> Capacity, mostly -- you can manually fiddle with .travis.yml if you want to enable more, just don't enable all at once (go 1-2 at a time)</p>",
        "id": 131235830,
        "sender_full_name": "simulacrum",
        "timestamp": 1533906078
    },
    {
        "content": "<p>AppVeyor is much more limited on capacity so there we generally don't want to do try</p>",
        "id": 131235853,
        "sender_full_name": "simulacrum",
        "timestamp": 1533906102
    },
    {
        "content": "<p>That makes sense, I'll just wait on bors.</p>",
        "id": 131235912,
        "sender_full_name": "davidtwco",
        "timestamp": 1533906153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> This needs a retry, failed because of internet weather.</p>",
        "id": 131241656,
        "sender_full_name": "davidtwco",
        "timestamp": 1533912175
    },
    {
        "content": "<p>At some point today I'll learn if it passes or not.</p>",
        "id": 131241682,
        "sender_full_name": "davidtwco",
        "timestamp": 1533912197
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 131241834,
        "sender_full_name": "davidtwco",
        "timestamp": 1533912347
    },
    {
        "content": "<p>Managed to get my Windows build going by not passing <code>-i</code> - I can confirm that the non-NLL compare mode UI tests all pass on Windows.</p>",
        "id": 131834991,
        "sender_full_name": "davidtwco",
        "timestamp": 1533920466
    },
    {
        "content": "<p>I can't imagine any NLL ones will fail on Windows so should be good.</p>",
        "id": 131834997,
        "sender_full_name": "davidtwco",
        "timestamp": 1533920476
    },
    {
        "content": "<p>Outside of any rebases or any other platform dependant failures we've yet to see on other platforms, this PR should be good.</p>",
        "id": 131835014,
        "sender_full_name": "davidtwco",
        "timestamp": 1533920508
    },
    {
        "content": "<p>Turns out an NLL compare mode test did fail on Windows.</p>",
        "id": 131835108,
        "sender_full_name": "davidtwco",
        "timestamp": 1533920620
    },
    {
        "content": "<p>I spoke too soon.</p>",
        "id": 131835110,
        "sender_full_name": "davidtwco",
        "timestamp": 1533920626
    },
    {
        "content": "<p>In fact, not convinced that these two failures aren't just my machine (both link errors on tests that passed without compare-mode NLL, I can't imagine NLL affects <code>link.exe</code> on Windows so I'm assuming that the test is fine).</p>",
        "id": 131835279,
        "sender_full_name": "davidtwco",
        "timestamp": 1533920854
    },
    {
        "content": "<p>We'll see what the in-progress merge says I guess.</p>",
        "id": 131835450,
        "sender_full_name": "davidtwco",
        "timestamp": 1533921008
    },
    {
        "content": "<p>pretty sure it will fail spuriously due to <a href=\"https://www.traviscistatus.com/incidents/pxj3py3xzn14\" target=\"_blank\" title=\"https://www.traviscistatus.com/incidents/pxj3py3xzn14\">https://www.traviscistatus.com/incidents/pxj3py3xzn14</a> <span class=\"emoji emoji-1f937\" title=\"shrug\">:shrug:</span></p>",
        "id": 131835464,
        "sender_full_name": "kennytm",
        "timestamp": 1533921039
    },
    {
        "content": "<p>Yeah, I've noticed everything has been failing due to that today.</p>",
        "id": 131835471,
        "sender_full_name": "davidtwco",
        "timestamp": 1533921056
    },
    {
        "content": "<p>Well, Appveyor confirmed Windows now passes UI tests. That's nice.</p>",
        "id": 131837136,
        "sender_full_name": "davidtwco",
        "timestamp": 1533923031
    },
    {
        "content": "<p>But, Travis failed and killed the build.</p>",
        "id": 131837179,
        "sender_full_name": "davidtwco",
        "timestamp": 1533923058
    },
    {
        "content": "<p>Needs a retry.</p>",
        "id": 131837181,
        "sender_full_name": "davidtwco",
        "timestamp": 1533923070
    },
    {
        "content": "<p>:(</p>",
        "id": 131837223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533923131
    },
    {
        "content": "<p><a href=\"https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8538/job/qxoewi7y632c3tf4\" target=\"_blank\" title=\"https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8538/job/qxoewi7y632c3tf4\">https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8538/job/qxoewi7y632c3tf4</a></p>",
        "id": 131840723,
        "sender_full_name": "kennytm",
        "timestamp": 1533927544
    },
    {
        "content": "<p><a href=\"https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8538/job/qxoewi7y632c3tf4#L10790\" target=\"_blank\" title=\"https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8538/job/qxoewi7y632c3tf4#L10790\">https://ci.appveyor.com/project/rust-lang/rust/build/1.0.8538/job/qxoewi7y632c3tf4#L10790</a> &lt;-- interesting part</p>",
        "id": 131840800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533927621
    },
    {
        "content": "<p>Awesome, more tests to fix.</p>",
        "id": 131841215,
        "sender_full_name": "davidtwco",
        "timestamp": 1533928123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> those should be fixed.</p>",
        "id": 131848715,
        "sender_full_name": "davidtwco",
        "timestamp": 1533937903
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 131850240,
        "sender_full_name": "davidtwco",
        "timestamp": 1533940306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Fixed it again.</p>",
        "id": 131926129,
        "sender_full_name": "davidtwco",
        "timestamp": 1533945107
    },
    {
        "content": "<p>Did a rebase again - the Travis failures from last night (or early today I guess) were because the jobs merged with master which changed some tests instead of doing a merge conflict and saving us all the time. Should be good to test again until something else lands.</p>",
        "id": 131944600,
        "sender_full_name": "davidtwco",
        "timestamp": 1533975163
    },
    {
        "content": "<p>Doing another rebase locally now.</p>",
        "id": 132032024,
        "sender_full_name": "davidtwco",
        "timestamp": 1534149008
    },
    {
        "content": "<p>Alright, all rebased and ready for another bors run. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 132035973,
        "sender_full_name": "davidtwco",
        "timestamp": 1534154245
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> - any chance you could take a look and put another <code>r+</code> on this so that I can see if there's more platforms that have issues?</p>",
        "id": 132046505,
        "sender_full_name": "davidtwco",
        "timestamp": 1534166736
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 132047971,
        "sender_full_name": "davidtwco",
        "timestamp": 1534168252
    },
    {
        "content": "<p>Alright, fixed the failures from <code>wasm32-unknown</code>, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, I guess another <code>r+</code>?</p>",
        "id": 132053180,
        "sender_full_name": "davidtwco",
        "timestamp": 1534173174
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span></p>",
        "id": 132055457,
        "sender_full_name": "davidtwco",
        "timestamp": 1534175337
    },
    {
        "content": "<p>It'll fail because it's before a PR that makes UI test changes though. <span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span></p>",
        "id": 132055477,
        "sender_full_name": "davidtwco",
        "timestamp": 1534175379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> i think you mean to thank <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 132055679,
        "sender_full_name": "kennytm",
        "timestamp": 1534175610
    },
    {
        "content": "<p>Oops, I do. Thanks <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 132055779,
        "sender_full_name": "davidtwco",
        "timestamp": 1534175736
    },
    {
        "content": "<p>Alright, fixed the <code>armhf-gnu</code> platform tests now. Pretty sure we've almost got all the platforms at this point. Need another <code>r+</code> to get bors testing the remaining few.</p>",
        "id": 132060547,
        "sender_full_name": "davidtwco",
        "timestamp": 1534181346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>: there are some conflicts now</p>",
        "id": 132070223,
        "sender_full_name": "varkor",
        "timestamp": 1534192525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>: already got a build locally, just updating the PR now.</p>",
        "id": 132070425,
        "sender_full_name": "davidtwco",
        "timestamp": 1534192718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>: PR updated</p>",
        "id": 132070515,
        "sender_full_name": "davidtwco",
        "timestamp": 1534192827
    },
    {
        "content": "<p>It's about to be invalidated again by the current PR (one of mine from last week) being merge tested by bors now.</p>",
        "id": 132070541,
        "sender_full_name": "davidtwco",
        "timestamp": 1534192883
    },
    {
        "content": "<p>ah, probably best to wait for that one to go through then?</p>",
        "id": 132070572,
        "sender_full_name": "varkor",
        "timestamp": 1534192916
    },
    {
        "content": "<p>I guess, though as soon as I do any rebase, there's always another PR being merged that will update the tests again.</p>",
        "id": 132070631,
        "sender_full_name": "davidtwco",
        "timestamp": 1534192964
    },
    {
        "content": "<p>Looks like my PR that was being merged and would have required this get rebased randomly failed, so this PR has a chance.</p>",
        "id": 132072710,
        "sender_full_name": "davidtwco",
        "timestamp": 1534195268
    },
    {
        "content": "<p>Ended up not being that lucky that time, updated the PR again.</p>",
        "id": 132076076,
        "sender_full_name": "davidtwco",
        "timestamp": 1534199911
    },
    {
        "content": "<p>Updated this PR again, fixed the failure from the last build and did a rebase. Looks like the currently in-progress PR doesn't add new tests so it would be ideal if this could come after it. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> @anyone-else-with-bors-rights</p>",
        "id": 132099552,
        "sender_full_name": "davidtwco",
        "timestamp": 1534238007
    },
    {
        "content": "<p>request: dont r+ my test PR until after david’s is landed if it might cause an issue haha</p>",
        "id": 132100714,
        "sender_full_name": "memoryruins",
        "timestamp": 1534239518
    },
    {
        "content": "<p>I wouldn't worry about it, every other PR will break this one and I'm still not sure whether it is passing on all platforms yet.</p>",
        "id": 132100809,
        "sender_full_name": "davidtwco",
        "timestamp": 1534239633
    },
    {
        "content": "<p>bless your patience</p>",
        "id": 132101513,
        "sender_full_name": "memoryruins",
        "timestamp": 1534240673
    },
    {
        "content": "<p>the amount of tests in there is impressive</p>",
        "id": 132101677,
        "sender_full_name": "memoryruins",
        "timestamp": 1534240870
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 132103674,
        "sender_full_name": "davidtwco",
        "timestamp": 1534243752
    },
    {
        "content": "<p>man I was hoping to see a \"it landed <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span>\" message here when I woke</p>",
        "id": 132106572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534248284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: just go back to sleep ;)</p>",
        "id": 132107646,
        "sender_full_name": "varkor",
        "timestamp": 1534249754
    },
    {
        "content": "<p>Believe me, so was I.</p>",
        "id": 132109554,
        "sender_full_name": "davidtwco",
        "timestamp": 1534252081
    },
    {
        "content": "<p>It's finally over.</p>",
        "id": 132117093,
        "sender_full_name": "davidtwco",
        "timestamp": 1534259826
    },
    {
        "content": "<p>I've submitted <a href=\"https://github.com/rust-lang/rust/issues/53353\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53353\">#53353</a>, <a href=\"https://github.com/rust-lang/rust/issues/53352\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53352\">#53352</a> and <a href=\"https://github.com/rust-lang/rust/issues/53351\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53351\">#53351</a> as follow-ups.</p>",
        "id": 132118054,
        "sender_full_name": "davidtwco",
        "timestamp": 1534260882
    },
    {
        "content": "<p>Great work <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>!</p>",
        "id": 132118864,
        "sender_full_name": "varkor",
        "timestamp": 1534261939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> :first_place_medal:</p>",
        "id": 132119679,
        "sender_full_name": "lqd",
        "timestamp": 1534262866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span class=\"emoji emoji-1f3c2\" title=\"snowboarder\">:snowboarder:</span></p>",
        "id": 132174597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534339704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do cases like the following have a place on rustc-perf? fortunately it can be isolated in a single <code>.rs</code> file <a href=\"https://github.com/rust-lang/rust/issues/50614\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50614\">https://github.com/rust-lang/rust/issues/50614</a></p>",
        "id": 132762680,
        "sender_full_name": "memoryruins",
        "timestamp": 1535231695
    },
    {
        "content": "<p>Maybe, but I prefer that we don't add them unless it's something we want to track performance over time for</p>",
        "id": 132790529,
        "sender_full_name": "simulacrum",
        "timestamp": 1535294100
    },
    {
        "content": "<p>That seems like the kind of thing that is probably fix once</p>",
        "id": 132790535,
        "sender_full_name": "simulacrum",
        "timestamp": 1535294108
    },
    {
        "content": "<p>mm I'm not sure. I like adding regression tests.</p>",
        "id": 132791781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535296609
    },
    {
        "content": "<p>In particular covering various extreme cases can be useful</p>",
        "id": 132791783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535296622
    },
    {
        "content": "<p>although I guess this is not what I originally thought it was :)</p>",
        "id": 132791793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535296641
    },
    {
        "content": "<p>anyway, we don't have a strict rule about this sort of case...sometimes we add a regr test, sometimes we don't...</p>",
        "id": 132791796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535296665
    },
    {
        "content": "<p>regression tests are good but we <em>currently</em> can't add these without consideration for the time they're adding</p>",
        "id": 132791894,
        "sender_full_name": "simulacrum",
        "timestamp": 1535296813
    },
    {
        "content": "<p>seems fair :)</p>",
        "id": 132792046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535297202
    }
]