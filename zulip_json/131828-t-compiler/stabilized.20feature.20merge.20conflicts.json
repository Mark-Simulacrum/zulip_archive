[
    {
        "content": "<p>Right now the way features are stabilized is by adding it to the end of a list. This necessarily creates a merge conflict every time a language feature is stabilized (for <em>every</em> pending PR doing the same). Can/should we adopt something else, such as alphabetical order of feature names to mostly avoid merge conflicts?</p>",
        "id": 261473804,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636968107
    },
    {
        "content": "<p>This is something I've run across a number of times and I just saw <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> make a comment on <a href=\"https://github.com/rust-lang/rust/issues/90473\">#90473</a>...which reminded me that it's an \"issue\", so to speak.</p>",
        "id": 261473890,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636968139
    },
    {
        "content": "<p>We could also adopt a merge driver.</p>",
        "id": 261474601,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636968592
    },
    {
        "content": "<p>...how have I never heard of that before. That's absolutely what we want. In this specific situation the solution is always (in my experience) to just accept both.</p>",
        "id": 261475107,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636968914
    },
    {
        "content": "<p>do custom merge drivers work with github/bors?</p>",
        "id": 261475664,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1636969276
    },
    {
        "content": "<p>I don't think they do; that'd just rebase trivial, not actually make it unnecessary.</p>",
        "id": 261476193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636969615
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span>'s suggestion is a great one.</p>",
        "id": 261476209,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636969625
    },
    {
        "content": "<p>Alphabetical, or <em>something</em> that prevents us from getting automatic conflicts on every stabilization.</p>",
        "id": 261476225,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636969638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> Want to submit a patch making it alphabetical, and r? me?</p>",
        "id": 261476254,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636969664
    },
    {
        "content": "<p>It doesn't look like it would be too difficult to create a merge driver. From what I can see it takes the common ancestor and the two copies. In our case we'd just want to splice the incoming feature to the existing file.<br>\nNo idea if GitHub or bors support this though.</p>",
        "id": 261476263,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636969668
    },
    {
        "content": "<p>Yeah, sure. Alphabetical is better than status quo. There might be a lint regarding version order, though I'm not positive.</p>",
        "id": 261476325,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636969690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> A merge driver for alphabetical is even easier: you just merge and sort all the lines.</p>",
        "id": 261476395,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636969736
    },
    {
        "content": "<p>True</p>",
        "id": 261476412,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636969745
    },
    {
        "content": "<p>Ah, doc comments. Gotta love em. Otherwise it would be a simple \"sort line\" in my editor.</p>",
        "id": 261476708,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636969943
    },
    {
        "content": "<p>You could use sort line to find the order of the features at least, then replicate it manually</p>",
        "id": 261477524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636970482
    },
    {
        "content": "<p>That's exactly what I'm doing, actually.</p>",
        "id": 261477645,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636970558
    },
    {
        "content": "<p>Just manually re-adding doc comments</p>",
        "id": 261477665,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636970574
    },
    {
        "content": "<p>sure enough this needs a change in tidy</p>",
        "id": 261478893,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636971400
    },
    {
        "content": "<p>Wow. I'd never have guessed tidy operated on plain text.</p>",
        "id": 261479449,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636971810
    },
    {
        "content": "<p>Alright. Got tidy set to work based on alphabetization and have <code>accepted.rs</code> sorted. Headed to bed now; will handle the other files and get a PR up tomorrow. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 261480150,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636972288
    },
    {
        "content": "<p>Sounds great, thank you!</p>",
        "id": 261506715,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636987968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://github.com/rust-lang/rust/issues/90935\">#90935</a> is up.</p>",
        "id": 261582590,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637023141
    },
    {
        "content": "<p>Made sure to rebase to include <code>format_args_capture</code></p>",
        "id": 261582602,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637023155
    },
    {
        "content": "<p>As mentioned on GitHub: LGTM; r=me when it passes CI. And thanks!</p>",
        "id": 261582798,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637023311
    },
    {
        "content": "<p>Unable, actually.</p>",
        "id": 261582861,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637023338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> feelings on having tidy tell you where something should be? As in \"feature X should be between A and B\"</p>",
        "id": 261583565,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637023816
    },
    {
        "content": "<p>I think that mostly resolves my concern, but still seems likely to add the same \"effective rebase\" after you see tidy fail (i.e., when you get it wrong the first time)</p>",
        "id": 261583616,
        "sender_full_name": "simulacrum",
        "timestamp": 1637023856
    },
    {
        "content": "<p>so while it prevents needing to do so many times in the common case, it's not really a true fix IMO</p>",
        "id": 261583646,
        "sender_full_name": "simulacrum",
        "timestamp": 1637023880
    },
    {
        "content": "<p>s/when/if/ , and perhaps we could add a note to the comment at the top of each list saying \"alphabetical\".</p>",
        "id": 261583657,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637023894
    },
    {
        "content": "<p>that's pretty useless, imo, I at least can't get anything alphabetical just by looking at it</p>",
        "id": 261583690,
        "sender_full_name": "simulacrum",
        "timestamp": 1637023918
    },
    {
        "content": "<p>and I presume for most of these things even vim's <code>: ! sort</code> won't be of too much help since the sorting is presumably a little off</p>",
        "id": 261583773,
        "sender_full_name": "simulacrum",
        "timestamp": 1637023952
    },
    {
        "content": "<p>That wouldn't handle the comments, yeah.</p>",
        "id": 261583802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637023974
    },
    {
        "content": "<p>I wouldn't expect that the majority of new additions to the file would fail the tidy check the first time.</p>",
        "id": 261583839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637023996
    },
    {
        "content": "<p>There's certainly the possibility for conflicts still. A \"union\" merge/rebase doesn't actually have a certain order, so we'd need to have it done manually</p>",
        "id": 261583849,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024003
    },
    {
        "content": "<p>/me wonders if tidy could have a <code>--fix</code> mode to run locally...</p>",
        "id": 261583895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024038
    },
    {
        "content": "<p>Either way I think the PR is <em>far</em> better than the status quo where there's a conflict every single time</p>",
        "id": 261583905,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024041
    },
    {
        "content": "<p>I tried that in the hopes it existed. Given that tidy operates on plain text, I'm not sure how easy that would be to implement</p>",
        "id": 261583969,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024073
    },
    {
        "content": "<p>Probably painful in the majority of cases.</p>",
        "id": 261584027,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/stabilized.20feature.20merge.20conflicts/near/261583839\">said</a>:</p>\n<blockquote>\n<p>I wouldn't expect that the majority of new additions to the file would fail the tidy check the first time.</p>\n</blockquote>\n<p>I'm confused by this -- do you expect people to notice it's alphabetical <em>and</em> manage to get the alphabetical ordering right?</p>",
        "id": 261584032,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> More than 50% of the time? Yes.</p>",
        "id": 261584087,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/131828-t-compiler/topic/stabilized.20feature.20merge.20conflicts/near/261583849\">said</a>:</p>\n<blockquote>\n<p>There's certainly the possibility for conflicts still. A \"union\" merge/rebase doesn't actually have a certain order, so we'd need to have it done manually</p>\n</blockquote>\n<p>With the current by-version sort, as long as you're adding to the very end and have the right version (which you should, since you're trying to commit), I would expect union to just work</p>",
        "id": 261584145,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/stabilized.20feature.20merge.20conflicts/near/261584087\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> More than 50% of the time? Yes.</p>\n</blockquote>\n<p>Huh. I would estimate this at ~0% personally, so I'm surprised by the discrepancy.</p>",
        "id": 261584162,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024190
    },
    {
        "content": "<p>We have many other things in the compiler that have to be kept alphabetical or CI will fail.</p>",
        "id": 261584184,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024211
    },
    {
        "content": "<p>Such as the import lists at the top of every file.</p>",
        "id": 261584193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024221
    },
    {
        "content": "<p>... but those are formatted for you?</p>",
        "id": 261584207,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024229
    },
    {
        "content": "<p>like, no one <em>can</em> get those wrong if they have rustfmt in their editor</p>",
        "id": 261584216,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024241
    },
    {
        "content": "<p>Only when I don't type them in the right order in the first place...</p>",
        "id": 261584226,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024254
    },
    {
        "content": "<blockquote>\n<p>With the current by-version sort, as long as you're adding to the very end and have the right version (which you should, since you're trying to commit), I would expect union to just work</p>\n</blockquote>\n<p>unless there's a release between the common ancestor and now. which will probably occur more often than alphabetization conflicts</p>",
        "id": 261584228,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024255
    },
    {
        "content": "<p>and writing any Rust code perfectly matching rustfmt is unlikely, so that's more of a \"QOL\"</p>",
        "id": 261584238,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024263
    },
    {
        "content": "<p>But if there's a release, you need to update your PR <em>anyway</em> since you're stabilizing in a new version?</p>",
        "id": 261584308,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Perfectly matching no. But I've worked with a reasonably large number of cases of codebases that have alphabetical lists, and they're usually still in <em>mostly</em> alphabetical order even when not enforced.</p>",
        "id": 261584315,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024306
    },
    {
        "content": "<p>(I'd certainly find it surprising if 0% of people don't place a new entry in alphabetical order.)</p>",
        "id": 261584360,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024347
    },
    {
        "content": "<p>I don't think I'd notice the list is alphabetical</p>",
        "id": 261584376,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024361
    },
    {
        "content": "<p>That's where I think having the error be \"put it between these two\" would be helpful</p>",
        "id": 261584396,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024379
    },
    {
        "content": "<p>Even if a comment at the end, next to where you would expect to add something, says \"alphabetical\"?</p>",
        "id": 261584408,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024385
    },
    {
        "content": "<p>In any case, it'd certainly be nice to have tidy explaining exactly how to format it and point to the right insertion point.</p>",
        "id": 261584422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024395
    },
    {
        "content": "<p>I think that helps, sure</p>",
        "id": 261584425,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024396
    },
    {
        "content": "<p>but yeah, if we have tidy tell me where I <em>should</em> have put it, that seems OK</p>",
        "id": 261584496,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024408
    },
    {
        "content": "<p>it does seem nice(r) to have the version sort, rather than the alphabetical sort</p>",
        "id": 261584532,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024422
    },
    {
        "content": "<p>(and appending is so much easier)</p>",
        "id": 261584562,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024431
    },
    {
        "content": "<p>Depends on what you're trying to do. If you're looking up when a feature was stabilized, alphabetized is easier.</p>",
        "id": 261584575,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024446
    },
    {
        "content": "<p>if you're looking up a feature... you're searching for that feature's name, surely?</p>",
        "id": 261584591,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024462
    },
    {
        "content": "<p>(with... like... ctrl+f)</p>",
        "id": 261584603,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/131828-t-compiler/topic/stabilized.20feature.20merge.20conflicts/near/261584575\">said</a>:</p>\n<blockquote>\n<p>Depends on what you're trying to do. If you're looking up when a feature was stabilized, alphabetized is easier.</p>\n</blockquote>\n<p>For that, I'd tend to always use a search rather than trying to manually read a list.</p>",
        "id": 261584604,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024472
    },
    {
        "content": "<p>fair</p>",
        "id": 261584624,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024481
    },
    {
        "content": "<p>Do we have confirmation that merge=union doesn't work?</p>",
        "id": 261584634,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024489
    },
    {
        "content": "<p>I haven't tried it</p>",
        "id": 261584644,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024496
    },
    {
        "content": "<p>Still requires an explicit rebase to my understanding</p>",
        "id": 261584678,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024520
    },
    {
        "content": "<p>I would expect it to, based on my understanding of our stack, even though GitHub may give false-positive errors</p>",
        "id": 261584720,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024523
    },
    {
        "content": "<p>GitHub false positives are pretty notable, though</p>",
        "id": 261584740,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024545
    },
    {
        "content": "<p>And seem likely to cause at least some people to rebase even though they don't need to, because they don't know about the merge driver.</p>",
        "id": 261584797,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637024600
    },
    {
        "content": "<p>Sure, yeah, though solving <em>that</em> by way of a comment where they just added (and maybe even a highfive comment on the PR, given edits to this file) that says \"github lies and don't bother rebasing\"</p>",
        "id": 261584878,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024644
    },
    {
        "content": "<p>like, <em>not</em> doing something is much easier than doing something right :)</p>",
        "id": 261584900,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024659
    },
    {
        "content": "<p>but then if an actual conflict arises, the user wouldn't think anything of it?</p>",
        "id": 261584921,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024680
    },
    {
        "content": "<p>I think merge=union basically means \"we don't have conflicts ever\"</p>",
        "id": 261584954,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024719
    },
    {
        "content": "<p>I meant a conflict in another file</p>",
        "id": 261584964,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024731
    },
    {
        "content": "<p>they can get compilation errors from CI, but not more than that</p>",
        "id": 261584968,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024733
    },
    {
        "content": "<p>well, sure, but our messaging can be specific to this file?</p>",
        "id": 261584986,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024749
    },
    {
        "content": "<p>still seems to have quite a bit of room for error. If a bot says \"CI is failing because GitHub think's there's a conflict in this file even though there's not\", I wouldn't expect a user to actually check the list of files that conflict after every push</p>",
        "id": 261585067,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024797
    },
    {
        "content": "<p>I know I wouldn't</p>",
        "id": 261585083,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024808
    },
    {
        "content": "<p>well, anyway</p>",
        "id": 261585116,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024843
    },
    {
        "content": "<p>I think if we get tidy to tell where to put it I'm OK with this</p>",
        "id": 261585123,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024852
    },
    {
        "content": "<p>alright. gonna grab some food and then get that done. shouldn't be too hard — just keep track of all previous entries</p>",
        "id": 261585204,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024900
    },
    {
        "content": "<p>I'm not convinced it's an actual usability win personally, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 261585222,
        "sender_full_name": "simulacrum",
        "timestamp": 1637024918
    },
    {
        "content": "<p>If we can be sure that it works with tools cleanly, I wouldn't be opposed to switching it back with merge=union in the future. But for the time being I think this is the best option</p>",
        "id": 261585278,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637024965
    },
    {
        "content": "<p>well, I mean, I'm unconvinced that rebasing is actually a sufficiently common problem to need this kind of change</p>",
        "id": 261585366,
        "sender_full_name": "simulacrum",
        "timestamp": 1637025022
    },
    {
        "content": "<p>but that's more of a \"I don't do it all that often\", than anything else, I suspect.</p>",
        "id": 261585408,
        "sender_full_name": "simulacrum",
        "timestamp": 1637025076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I've just pushed up a commit adding a suggestion for sorting. It assumes that the user adds the feature at the end of the list (which of course is all we do now). If it's placed earlier, the suggestion will <em>technically</em> be correct but will not be ideal.</p>",
        "id": 261589444,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637028786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/stabilized.20feature.20merge.20conflicts/near/261584162\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/stabilized.20feature.20merge.20conflicts/near/261584087\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> More than 50% of the time? Yes.</p>\n</blockquote>\n<p>Huh. I would estimate this at ~0% personally, so I'm surprised by the discrepancy.</p>\n</blockquote>\n<p>I would find this not super hard on the first try for most words and very easy if the error were pointed out; but idk if I'm representative</p>",
        "id": 261594577,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637034519
    },
    {
        "content": "<p>Why not relax the line length limit for that file and put the comments at the end of each line? Actually aren't comments already exempted from the length limit?</p>",
        "id": 261623401,
        "sender_full_name": "The 8472",
        "timestamp": 1637059904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> that doesn't actually work, doc-comments have to come before the thing they're documenting</p>",
        "id": 261647448,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637072613
    },
    {
        "content": "<p>In theory, we could use the <code>#[doc</code> form and then put each feature on a line by itself. Or, for that matter, generate the doc comment using a macro.</p>",
        "id": 261649177,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637073374
    },
    {
        "content": "<p>This seems way overkill when we're already suggesting what line the new feature should go on, it makes the code harder to read too</p>",
        "id": 261651941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637074487
    },
    {
        "content": "<p>No argument there.</p>",
        "id": 261654183,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637075248
    },
    {
        "content": "<p>Sorting by feature name just hit master. <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 261747329,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637129476
    }
]