[
    {
        "content": "<p>hello there!<br>\na difference between Rust and and some other languages like C++, it's that compiling implies executing arbitrary code with proc-macros and if you add cargo, build scripts</p>\n<p>I think that when Cranelift is integrated with rustc, then it would be interesting to start using WASI/WebAssembly to execute proc-macros (if not build scripts) so that these do not have access to anything they do not need to access, and if possible, are isolated (e.g. only copy on write access to files with a dedicated copy used for compilation and not raw writes)</p>\n<p>The problem is that this is a breaking change for the whole eco-system, but I think it would be good to include in the next Rust edition</p>\n<p>Currently, through <a href=\"http://crates.io\">crates.io</a>, everyone in the eco-system, including members of the rust code team, is executing arbitrary code from random people on the Internet daily, from an information security standpoint, it is very dangerous</p>\n<p>What do you think?</p>",
        "id": 204268863,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595026592
    },
    {
        "content": "<p>Not sure what Cranelift has to do with this</p>",
        "id": 204268908,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595026647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> wasmtime - but indeed it's not required</p>",
        "id": 204268922,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595026671
    },
    {
        "content": "<p>Check out <a href=\"https://github.com/dtolnay/watt\">https://github.com/dtolnay/watt</a> if you haven't yet</p>",
        "id": 204268970,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595026695
    },
    {
        "content": "<p>cool ! it would be good if it was default in rustc - to not put users of the compiler at risk</p>",
        "id": 204269005,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595026740
    },
    {
        "content": "<p>another issue is that wasmtime has much poorer architecture support - but I think an interpreter could be sufficient since proc-macros shouldnt be so compute intensive</p>",
        "id": 204269307,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595027036
    },
    {
        "content": "<p>wasmtime or the AOT wasm compiler lucet</p>",
        "id": 204269434,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595027129
    },
    {
        "content": "<p>seems watt/rust-wasm supports interpreting so that's good</p>",
        "id": 204269680,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595027317
    },
    {
        "content": "<p>watt uses an interpreter to keep compile times down</p>",
        "id": 204269695,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595027341
    },
    {
        "content": "<p>there's also a jit it seems</p>",
        "id": 204269709,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595027358
    },
    {
        "content": "<p>Well, I suppose it won't matter if this is integrated into rustc since it (or Cargo) would ship the WASM runtime</p>",
        "id": 204269728,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595027374
    },
    {
        "content": "<p>Only platform support matters</p>",
        "id": 204269737,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595027383
    },
    {
        "content": "<p>yes I think interpreters can be OK for proc-macros, I don't think anything is compute intensive in proc-macros in the eco-system today (besides exotic experiments)</p>",
        "id": 204269818,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595027432
    },
    {
        "content": "<p>what I don't like about stuff like <code>watt</code> is that it serializes through strings and uses none of the RPC infrastructure built into <code>libproc_macro</code></p>",
        "id": 204290957,
        "sender_full_name": "eddyb",
        "timestamp": 1595060484
    },
    {
        "content": "<p>which is there to eventually allow executing proc macros in separate processes (or, in this case, inside a WASM runtime, which might be overall cheaper)</p>",
        "id": 204290999,
        "sender_full_name": "eddyb",
        "timestamp": 1595060531
    },
    {
        "content": "<p>(although for now that RPC is only used to allow proc macros and the compiler running them, to be built by different rustc versions)</p>",
        "id": 204291026,
        "sender_full_name": "eddyb",
        "timestamp": 1595060632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/cranelift.20webassembly.2Fwasi.20trustworthy.20compilation/near/204290999\">said</a>:</p>\n<blockquote>\n<p>which is there to eventually allow executing proc macros in separate processes (or, in this case, inside a WASM runtime, which might be overall cheaper)</p>\n</blockquote>\n<p>cool that this exists!</p>",
        "id": 204291076,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595060678
    },
    {
        "content": "<p>like, it's cool as a demo of something running on stable, I guess, but it's more effort than plumbing just the <code>proc_macro::bridge</code> stuff through (which is mostly just passing byte buffers back and forth between the \"client\" and the \"server\"), and it's not integrated with the compiler so anyone who actually wants to use it in production will have to do some really nasty hacks to make it work</p>",
        "id": 204291101,
        "sender_full_name": "eddyb",
        "timestamp": 1595060749
    },
    {
        "content": "<p>and if people actually adopt it, that just delays the implementation of a proper solution even more</p>",
        "id": 204291145,
        "sender_full_name": "eddyb",
        "timestamp": 1595060792
    },
    {
        "content": "<p>I think there should be a solution enabled by default in the compiler, otherwise the security benefits are nil</p>",
        "id": 204291207,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595060916
    },
    {
        "content": "<p>So obviously it wouldnt be a plain copy of watt - I think Jonas just shared that as an existing solution to it</p>",
        "id": 204291219,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595060944
    },
    {
        "content": "<p>but it's not a <em>solution</em>, it's a demo</p>",
        "id": 204291221,
        "sender_full_name": "eddyb",
        "timestamp": 1595060991
    },
    {
        "content": "<p>for example, you can't use hygiene with it</p>",
        "id": 204291223,
        "sender_full_name": "eddyb",
        "timestamp": 1595061000
    },
    {
        "content": "<p>yes we agree here</p>",
        "id": 204291224,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595061001
    },
    {
        "content": "<p>so e.g. I don't think Rocket's macros will work with this</p>",
        "id": 204291265,
        "sender_full_name": "eddyb",
        "timestamp": 1595061020
    },
    {
        "content": "<p>I meant to say a demo as well.</p>",
        "id": 204291267,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595061040
    },
    {
        "content": "<p>sorry I'm just... I don't like demos which feel posited like they're production ready</p>",
        "id": 204291278,
        "sender_full_name": "eddyb",
        "timestamp": 1595061063
    },
    {
        "content": "<p>or that look to an unsuspecting eye like they might be the \"official solution\"</p>",
        "id": 204291288,
        "sender_full_name": "eddyb",
        "timestamp": 1595061091
    },
    {
        "content": "<p>I don't think that it was the intent behind all of this!</p>",
        "id": 204291291,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595061102
    },
    {
        "content": "<p>sorry but I can't read the way it's presented as anything else. there are <em>zero</em> warnings telling you not to use this and that it's just a demo (and it's also documented very professionally)</p>",
        "id": 204291335,
        "sender_full_name": "eddyb",
        "timestamp": 1595061149
    },
    {
        "content": "<p>the other thing that bothers me is the <code>wa-</code> crates that are wasm blobs uploaded to <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 204291338,
        "sender_full_name": "eddyb",
        "timestamp": 1595061160
    },
    {
        "content": "<p>we don't have a policy against any of this, and I don't think we should, it just <em>personally</em> doesn't feel like the right way to move forward</p>",
        "id": 204291392,
        "sender_full_name": "eddyb",
        "timestamp": 1595061277
    },
    {
        "content": "<p>Presented where? On the github README?</p>",
        "id": 204291393,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1595061302
    },
    {
        "content": "<p>This looks very cool! I'll be using it for some of my proc macro stuff in the near future. Benefits could be huge for security and isolation over normal proc macros.</p>",
        "id": 205060645,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1595785330
    },
    {
        "content": "<p>It doesn't look like watt serializes through strings</p>",
        "id": 205759579,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1596429826
    },
    {
        "content": "<p><a href=\"https://github.com/dtolnay/watt/blob/master/src/encode.rs#L61-L65\">https://github.com/dtolnay/watt/blob/master/src/encode.rs#L61-L65</a></p>",
        "id": 205759621,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1596429865
    },
    {
        "content": "<p>it creates a new id each time a <code>Span</code> occurs, does all of the wasm-side maniuplations with those ids, and then converts them back</p>",
        "id": 205759641,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1596429909
    }
]