[
    {
        "content": "<p>I'm working on a <a href=\"https://github.com/willcrichton/rust-slicer\">static analysis tool</a> that uses rustc_private. My goal is to invoke this tool from VSCode when inside of a Cargo-structured Rust project. The main challenge is knowing what arguments to pass to rustc_driver, e.g. values of <code>--extern</code> for dependencies. Right now, I'm doing something <a href=\"https://github.com/willcrichton/rust-slicer/blob/master/src/bin/rust-slicer-cli.rs#L13\">incredibly hacky</a> by scraping the output of <code>cargo check -v</code>.</p>\n<p>Is there a better way to collect build information from Cargo for use with rustc_private?</p>",
        "id": 231911903,
        "sender_full_name": "Will Crichton",
        "timestamp": 1616731312
    },
    {
        "content": "<p>I'm unclear what you're trying to do - do you want your tool instead of <code>rustc</code>? You can do that with <code>RUSTC=rustc-slicer cargo check</code></p>",
        "id": 231913060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616732320
    },
    {
        "content": "<p>My use case is analogous to rust-analyzer. The goal is that while you have a Rust file open, you can invoke the analyzer to extract information about the file that's visualized by the IDE. But I don't want to rebuild the entire compiler like rust-analyzer does <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Because I'm running my analyzer through rustc_private, I need to invoke rustc_driver with the appropriate <code>--extern</code> and other flags for the current project to type-check correctly.</p>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> this is the same issue I had with example-analyzer, and I actually copied <a href=\"https://github.com/willcrichton/example-analyzer/blob/master/src/main.rs#L132-L191\">roughly the same code</a>. </p>\n<p>I hadn't thought about using the RUSTC environment variable, that could work I suppose. Although I don't know exactly the requirements for that, e.g. it seems like it assumes the binary has certain capabilities like responding to <code>-vV</code>.</p>",
        "id": 231967498,
        "sender_full_name": "Will Crichton",
        "timestamp": 1616766681
    },
    {
        "content": "<p>The RUSTC binary basically has to pass all arguments to rustc_driver.</p>",
        "id": 231967868,
        "sender_full_name": "bjorn3",
        "timestamp": 1616766838
    },
    {
        "content": "<p>Honestly you might be able to hack it by running your binary instead of rustdoc <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> cargo doesn't use too many of the fancy flags for rustdoc I don't think</p>",
        "id": 231969855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616767530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Using.20rustc_private.20code.20with.20Cargo/near/231969855\">said</a>:</p>\n<blockquote>\n<p>Honestly you might be able to hack it by running your binary instead of rustdoc <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> cargo doesn't use too many of the fancy flags for rustdoc I don't think</p>\n</blockquote>\n<p>oh gawd what a hack <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 231982160,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771862
    },
    {
        "content": "<p>I think I'll try to use the new <code>--unit-graph</code> feature instead. Only challenge there: is there a reliable way to get the path to an <code>rmeta</code> file? Eg I know that <code>a</code> depends on <code>b</code>, so after I run <code>cargo check</code>, should I just grep for <code>target/debug/deps/libb-*.rmeta</code>?</p>",
        "id": 231983394,
        "sender_full_name": "Will Crichton",
        "timestamp": 1616772268
    },
    {
        "content": "<p>Update: the <code>unit-graph</code> approach works pretty well! I'm able to run my analysis tool on an arbitrary file in a Cargo workspace once <code>cargo check</code> has completed. For anyone interested: </p>\n<p><a href=\"https://github.com/willcrichton/rust-slicer/blob/405e9261d3996680514bd4f95dfe7a4f1212406a/src/bin/rust-slicer-cli/unit_graph.rs\">https://github.com/willcrichton/rust-slicer/blob/405e9261d3996680514bd4f95dfe7a4f1212406a/src/bin/rust-slicer-cli/unit_graph.rs</a></p>",
        "id": 232011477,
        "sender_full_name": "Will Crichton",
        "timestamp": 1616783128
    }
]