[
    {
        "content": "<p>What is the best workflow for working with several branches in the compiler, that avoids rebuilds?</p>\n<p>My understanding is that, if you have two branches with different bases, switching between the two and building stuff will constantly re-build a lot of stuff  because  of changes at the base.</p>\n<p>I work-around it by having two instances of rust-lang/rust checked out locally, but that is suboptimal.</p>\n<p>Is there some way to tell x.py/Cargo to mix branch name into artifact hash?</p>",
        "id": 165502232,
        "sender_full_name": "matklad",
        "timestamp": 1557729260
    },
    {
        "content": "<p>I don’t know of a way to make changing branches not require a full build. </p>\n<p>I have some local tooling built around keeping a bunch of working directories locally. </p>\n<p>I only reuse a directory once the PR that I was working on in it has been merged or closed. The tooling automates the creating of new directories (cloning, symlink my <code>config.toml</code>, clean, build), keeping track of what directories are assigned to what and tidying up after me. I’ve got a cron job that uses the tool to update all the unassigned directories so they have a build of the latest master each night. I can just ask it for a directory to work on X, it keeps track of that, gives me a directory that’s already built and I know I’m at most 24 hours behind master.</p>",
        "id": 165504584,
        "sender_full_name": "davidtwco",
        "timestamp": 1557732391
    },
    {
        "content": "<p>Someone <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/Docs/near/164243461\" title=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/Docs/near/164243461\">mentioned before</a> that you could use git workspaces for that, but I'm not sure how that works exactly</p>",
        "id": 165505023,
        "sender_full_name": "detrumi",
        "timestamp": 1557732882
    },
    {
        "content": "<p>I haven't heard of <code>git-workspace</code>, only <code>git-worktree</code>. I can't find anything other than an npm package for <code>git-workspace</code>. </p>\n<p>My understanding of <code>git-worktree</code> is that it supports multiple working trees attached to a single repository, saving space as it deduplicates all of the data in the history and stuff like that. I want to add support for that to my tool, I just didn't know it existed when I wrote it. </p>\n<p>They both do slightly different things. Using just <code>git-worktree</code> will avoid having multiple clones, but it won't make sure that you have full builds of any of your working trees available and up-to-date. For example, if you made a new worktree with <code>git worktree add</code> then you would still need to run <code>x.py build</code> in that new folder to use it. I'd like to eventually use them together, so that my tool creates the working directories using <code>git-worktree</code> and then keeps them up-to-date and assigns them tasks.</p>",
        "id": 165507843,
        "sender_full_name": "davidtwco",
        "timestamp": 1557735735
    },
    {
        "content": "<p>Personally I just keep 9 checkouts</p>",
        "id": 165550468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769114
    },
    {
        "content": "<p>:)</p>",
        "id": 165550474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> 's <code>workman</code> tool manages my (ever increasing number of) checkouts: <a href=\"#narrow/stream/122651-general/topic/working.20directory.20management/near/160277023\" title=\"#narrow/stream/122651-general/topic/working.20directory.20management/near/160277023\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/working.20directory.20management/near/160277023</a></p>",
        "id": 165551302,
        "sender_full_name": "oli",
        "timestamp": 1557769707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was kind enough to contribute some features earlier in the week too.</p>",
        "id": 165551346,
        "sender_full_name": "davidtwco",
        "timestamp": 1557769746
    },
    {
        "content": "<p>I also use it to have a working directory that it’ll never assign for me to use but will keep up to date which is built without any optimisations. It’s slow but it works well with a debugger so I sometimes jump to that directory to understand what master is doing better when working on a PR, which has been helpful.</p>",
        "id": 165551451,
        "sender_full_name": "davidtwco",
        "timestamp": 1557769821
    }
]