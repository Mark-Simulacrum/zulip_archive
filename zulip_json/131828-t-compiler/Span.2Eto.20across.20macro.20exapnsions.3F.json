[
    {
        "content": "<p>If I have <code>a + $b</code> and I do <code>a_span.to(b_span)</code> I will get the span of just <code>a</code> because <code>$b</code> comes from a different context. Is there any general solution to this? It seems like I want the expansion <em>child</em> of <code>$b</code>, not the parent, but this is impossible to get?</p>",
        "id": 240969634,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1622565673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344914\">@Cameron</span> If you're just using the span for diagnostic purposes, you can adjust the <code>SyntaxContext</code> yourself</p>",
        "id": 240985952,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622572831
    },
    {
        "content": "<p>But then won't the hi and lo be wrong?</p>",
        "id": 241064919,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1622576560
    },
    {
        "content": "<p>No - the <code>SyntaxContext</code> is completely independent of the location</p>",
        "id": 241069531,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622578715
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">mac</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$b</span>:<span class=\"nc\">literal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cp\">$b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">mac</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"sc\">'b'</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Given the Span of <code>a</code> and <code>'b'</code>from this example, I don't see a way to derive <code>a + $b</code>. <code>Span.to</code> (<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_span/lib.rs.html#654-674\">source</a>) will just early return the Span of <code>a</code>.</p>",
        "id": 241074031,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1622580809
    },
    {
        "content": "<p>Or maybe more to the point - how would I get the span of <code>$b</code> within <code>macro_rules!</code>?</p>",
        "id": 241075086,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1622581300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> You can use <code>Span.with_ctxt</code> to produce a new span with the desired <code>SyntaxContext</code></p>",
        "id": 241077166,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622582276
    },
    {
        "content": "<p>Which you can then join with the desired span</p>",
        "id": 241077224,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622582287
    },
    {
        "content": "<p>You should only do that if this is intended for a diagnostic message, though. What's your use case?</p>",
        "id": 241077288,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622582318
    },
    {
        "content": "<p>Just have wondered about this case a number of times when implementing diagnostics for Clippy</p>",
        "id": 241077365,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1622582357
    },
    {
        "content": "<p>Also was wondering what it would take to fix <a href=\"https://github.com/rust-lang/rust/issues/84122\">#84122</a></p>",
        "id": 241077545,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1622582452
    }
]