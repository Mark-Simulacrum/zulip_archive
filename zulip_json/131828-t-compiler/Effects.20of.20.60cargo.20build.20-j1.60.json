[
    {
        "content": "<p>@lqd and I were just looking at some <code>-Ztimings</code> results, comparing some builds with <code>cargo build -j1</code> vs <code>cargo build -j8</code>. We saw one example where building the <code>syn</code> crate took 4 seconds with <code>-j8</code> but 40+ seconds with <code>-j1</code>. Does <code>-j1</code> also disable LLVM parallelism in the backend?</p>",
        "id": 271201290,
        "sender_full_name": "nnethercote",
        "timestamp": 1644359513
    },
    {
        "content": "<p>This was on a 24-core machine, if that's relevant</p>",
        "id": 271201298,
        "sender_full_name": "nnethercote",
        "timestamp": 1644359521
    },
    {
        "content": "<p>If you're using lld you'll want to add <code>-Clink-arg=-Wl,--threads=1</code>. To eyeball what is still running in parallel you could run a <code>perf record</code> session and load it into hotspot and look at the thread view.</p>",
        "id": 271202077,
        "sender_full_name": "The 8472",
        "timestamp": 1644359952
    },
    {
        "content": "<p>my belief is that it does indeed disable parallelism in the backend, based on <a href=\"https://github.com/rust-lang/rust/blob/0c292c9667f1b202a9150d58bdd2e89e3e803996/compiler/rustc_codegen_ssa/src/back/write.rs#L1069-L1203\">this comment</a></p>",
        "id": 271202239,
        "sender_full_name": "lqd",
        "timestamp": 1644360024
    },
    {
        "content": "<p>The only parallel part of rustc is llvm, so that must be it</p>",
        "id": 271202289,
        "sender_full_name": "oli",
        "timestamp": 1644360059
    },
    {
        "content": "<p>well, there's also cargo running multiple rustcs in parallel if the crate-graph allows</p>",
        "id": 271202372,
        "sender_full_name": "The 8472",
        "timestamp": 1644360111
    },
    {
        "content": "<p>we were also trying out <code>-Zthreads</code> but it appears that is only about parallel-compiler</p>",
        "id": 271202373,
        "sender_full_name": "lqd",
        "timestamp": 1644360112
    },
    {
        "content": "<p>Yes, -j1 will also affect the LLVM parallelism.  It uses the job server to coordinate across all the parallel jobs.</p>",
        "id": 271202506,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644360182
    },
    {
        "content": "<p>(while you're here eric, we were also gushing on how great -Ztimings is <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> )</p>",
        "id": 271202562,
        "sender_full_name": "lqd",
        "timestamp": 1644360213
    },
    {
        "content": "<p>Thanks. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>   It will be stabilized very soon (will push the pr tonight).</p>",
        "id": 271202662,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644360254
    },
    {
        "content": "<p>there's no priority for the jobserver tokens, right ? like if a codegen thread and another cargo job compete for one, either could get it ?</p>",
        "id": 271202740,
        "sender_full_name": "lqd",
        "timestamp": 1644360305
    },
    {
        "content": "<p>Right, first come first serve.</p>",
        "id": 271203403,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644360682
    },
    {
        "content": "<p>alright, thanks a bunch</p>",
        "id": 271203456,
        "sender_full_name": "lqd",
        "timestamp": 1644360714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Effects.20of.20.60cargo.20build.20-j1.60/near/271202562\">said</a>:</p>\n<blockquote>\n<p>(while you're here eric, we were also gushing on how great -Ztimings is <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> )</p>\n</blockquote>\n<p>One thing I particularly like is how nice the generated HTML is. We have a bunch of <code>Ztimings</code> runs and I was able to grep for all sorts of interesting stuff because of this.</p>",
        "id": 271203940,
        "sender_full_name": "nnethercote",
        "timestamp": 1644360976
    },
    {
        "content": "<p>It doesn't have any automatic critical path analysis. You can certainly eyeball it, but it would be cool if it could tell you for each crate not only how long it took to compile, but info about how much time its compilation caused sub-optimal parallelism. Not sure how hard that would be.</p>",
        "id": 271204076,
        "sender_full_name": "nnethercote",
        "timestamp": 1644361074
    },
    {
        "content": "<p>I'm not exactly sure what this information would look like, I'm waving my hands a bit <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 271204149,
        "sender_full_name": "nnethercote",
        "timestamp": 1644361096
    },
    {
        "content": "<p>(and maybe differentiating the proc-macro subgraphs)</p>",
        "id": 271204161,
        "sender_full_name": "lqd",
        "timestamp": 1644361107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Effects.20of.20.60cargo.20build.20-j1.60/near/271202740\">said</a>:</p>\n<blockquote>\n<p>there's no priority for the jobserver tokens, right ? like if a codegen thread and another cargo job compete for one, either could get it ?</p>\n</blockquote>\n<p>For cargo there's weights: <a href=\"https://github.com/rust-lang/cargo/pull/8908\">https://github.com/rust-lang/cargo/pull/8908</a></p>\n<p>But</p>\n<blockquote>\n<p>The behavior of this implementation should match the previous implementation if all units are assigned the same cost</p>\n</blockquote>",
        "id": 271210482,
        "sender_full_name": "The 8472",
        "timestamp": 1644364625
    },
    {
        "content": "<p>the jobserver itself can't support weights (it's just a pipe), at least with the current impl</p>",
        "id": 271210635,
        "sender_full_name": "simulacrum",
        "timestamp": 1644364703
    },
    {
        "content": "<p>Cargo can weight different jobs when it acquires a token to start something new, but not beyond that</p>",
        "id": 271210657,
        "sender_full_name": "simulacrum",
        "timestamp": 1644364722
    },
    {
        "content": "<p>yeah, that's what I meant. what can consume tokens follows from what gets started</p>",
        "id": 271210705,
        "sender_full_name": "The 8472",
        "timestamp": 1644364759
    }
]