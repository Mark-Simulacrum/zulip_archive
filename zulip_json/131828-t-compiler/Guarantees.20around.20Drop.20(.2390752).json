[
    {
        "content": "<p>Continuing conversation from compiler team meeting</p>",
        "id": 261950334,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252353
    },
    {
        "content": "<p><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-11-18.20.2354818/near/261946969\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-11-18.20.2354818/near/261946969</a></p>",
        "id": 261950366,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252369
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> <span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 261950403,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252383
    },
    {
        "content": "<p>oh <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> as well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261950500,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252409
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, who wrote this, which I think is overly conservative.</p>\n<blockquote>\n<p>Not running destructors in Rust is safe even if it has a type that isn't 'static. std::mem::ManuallyDrop provides a wrapper to prevent a variable or field from being dropped automatically.</p>\n</blockquote>",
        "id": 261950545,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637252429
    },
    {
        "content": "<p>The problem with thread-join and the root of the leakopalypse was values that <em>were exposed to API consumers</em>, like <code>JoinHandle</code>.</p>",
        "id": 261950667,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637252494
    },
    {
        "content": "<p>Is there discussion about this in the unsafe code guidelines WG or something?</p>",
        "id": 261950826,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252548
    },
    {
        "content": "<p>I've just literally never seen that take before <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261950868,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252564
    },
    {
        "content": "<p>In contrast to things like</p>\n<blockquote>\n<p>unsafe code cannot rely on destructors to be run in order to be safe</p>\n</blockquote>\n<p>from the nomicon <a href=\"https://doc.rust-lang.org/nomicon/leaking.html\">https://doc.rust-lang.org/nomicon/leaking.html</a></p>",
        "id": 261951012,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252626
    },
    {
        "content": "<p>But if I construct something on the stack and I never expose it to users or call <code>forget</code> or otherwise leak it, we need to guarantee that it is dropped. Otherwise it becomes impossible (or maybe just very, very hard) to write panic-safe code.</p>",
        "id": 261951014,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637252627
    },
    {
        "content": "<p>Yeah, whether something is exposed or not makes a huge difference here.</p>",
        "id": 261951186,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637252682
    },
    {
        "content": "<p>The distinction is between what users are allowed to do, and what is <em>actually</em> done.</p>",
        "id": 261951211,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637252691
    },
    {
        "content": "<p>And our documentation is actively misleading here, presumably because the leakopalypse left a rather large cultural imprint on Rust developers</p>",
        "id": 261951351,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637252753
    },
    {
        "content": "<p>Ok. That doesn't seem unreasonable to me other than it's just literally undocumented as far as I can tell. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261951492,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252803
    },
    {
        "content": "<p>As a guarantee we probably want to say that any local variables are guaranteed to be dropped if they are not moved.</p>",
        "id": 261951537,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637252827
    },
    {
        "content": "<p>It is documented in <a href=\"https://doc.rust-lang.org/reference/destructors.html#destructors\">https://doc.rust-lang.org/reference/destructors.html#destructors</a> section.</p>",
        "id": 261951595,
        "sender_full_name": "tm",
        "timestamp": 1637252862
    },
    {
        "content": "<p>That also says \"Not running destructors in Rust is safe even if it has a type that isn't 'static.\"</p>",
        "id": 261951715,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637252902
    },
    {
        "content": "<p>The fact that destructor might not be ran means that <em>API design</em> must not depend on destructor is being ran, not that compiler can forget to drop anything.</p>",
        "id": 261951805,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637252942
    },
    {
        "content": "<p>(Probably could also reference <code>Pin</code> which does have additional guarantee)</p>",
        "id": 261951946,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637253002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Guarantees.20around.20Drop.20.28.2390752.29/near/261951805\">said</a>:</p>\n<blockquote>\n<p>The fact that destructor might not be ran means that <em>API design</em> must not depend on destructor is being ran, not that compiler can forget to drop anything.</p>\n</blockquote>\n<p>I think there is consensus on this now. The issue is with the docs. I think <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is right that the statement at the end is actively misleading, and should be amended.</p>",
        "id": 261951993,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253007
    },
    {
        "content": "<p>Yeah, to be clear, I'm not arguing this isn't a bug, that rustc should forget to drop your values, we shouldn't fix this, etc.</p>",
        "id": 261952079,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> what changed with <code>Pin</code>? Maybe we can add that too.</p>",
        "id": 261952081,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253047
    },
    {
        "content": "<p>I'm just saying I've literally never seen this guaranteed before anywhere. And I've actually seen the opposite.</p>",
        "id": 261952145,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253074
    },
    {
        "content": "<p>No, I understand <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span>. I was quite surprised to see that section. I had read it long ago, but didn't internalize how aggressive it was.</p>",
        "id": 261952192,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253096
    },
    {
        "content": "<p>So, what's the process to guarantee it?</p>",
        "id": 261952244,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253118
    },
    {
        "content": "<p>Since this touches the Reference, it feels like a T-lang question to me.</p>",
        "id": 261952340,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253144
    },
    {
        "content": "<p>Okay, should I ask over in their Zulip channel?</p>",
        "id": 261952488,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253223
    },
    {
        "content": "<p><code>Pin</code> cannot have memory deallocated without calling destructor.</p>",
        "id": 261952491,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637253225
    },
    {
        "content": "<p>Or maybe just move this topic there? I don't think we have discussed anything compiler-specific</p>",
        "id": 261952581,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637253262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Guarantees.20around.20Drop.20.28.2390752.29/near/261952081\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> what changed with <code>Pin</code>? Maybe we can add that too.</p>\n</blockquote>\n<p><code>Pin</code> has drop related guarantees related to movability/validity of data, but I don't see how \"forgetting” to call a destructor changes the equation here in a meaningful way – the data doesn't get deallocated either way.</p>",
        "id": 261952599,
        "sender_full_name": "nagisa",
        "timestamp": 1637253268
    },
    {
        "content": "<p>I'm also a bit interested how this interacts with unwinding but I need to think on that more.</p>",
        "id": 261952656,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Guarantees.20around.20Drop.20.28.2390752.29/near/261952488\">said</a>:</p>\n<blockquote>\n<p>Okay, should I ask over in their Zulip channel?</p>\n</blockquote>\n<p>Yeah, I think that would be a good way to start this topic.</p>",
        "id": 261952689,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253309
    },
    {
        "content": "<p>I think a crucial action item here is to elaborate the <a href=\"https://doc.rust-lang.org/reference/destructors.html#not-running-destructors\">https://doc.rust-lang.org/reference/destructors.html#not-running-destructors</a> section</p>",
        "id": 261952722,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253321
    },
    {
        "content": "<p>If they're in agreement already then we may just need to make a PR to update the Reference and Nomicon.</p>",
        "id": 261952741,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253332
    },
    {
        "content": "<p>Do <em>something</em> to spell out the boundaries of what the compiler guarantees vs what library authors <em>cannot</em> assume</p>",
        "id": 261952767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253345
    },
    {
        "content": "<p>(I am privately musing if this could benefit from a separate model, focused solely on this part of Rust’s operational semantics…)</p>",
        "id": 261952865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253373
    },
    {
        "content": "<p>Such models can be really helpful when they are designed to work with SAT solvers to generate counter-examples to claims that look reasonable at first glance.</p>",
        "id": 261952945,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253422
    },
    {
        "content": "<p>In that case we can just remove the confusing sentence.</p>",
        "id": 261953163,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637253516
    },
    {
        "content": "<p>Then library author cannot assume as a corollary to the fact that forgetting is safe.</p>",
        "id": 261953219,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637253539
    },
    {
        "content": "<p>I don’t want to remove the sentence until we have something to put in its place.</p>",
        "id": 261953285,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253577
    },
    {
        "content": "<p>the leakpocalyspe didn’t come out of nowhere. Smart people who are Rust experts were designing very cool API’s that were, well, unsound.</p>",
        "id": 261953515,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253682
    },
    {
        "content": "<p>but I also don’t think it will be too hard to figure out better language</p>",
        "id": 261953585,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253717
    },
    {
        "content": "<p>I think the general idea is that arbitrary (unknown) code can forget safely, but you want to be able to rely on <em>known</em> code running destructors</p>",
        "id": 261953654,
        "sender_full_name": "simulacrum",
        "timestamp": 1637253737
    },
    {
        "content": "<p>and then guide people to when they need to do the various tricks like what Rayon and Crossbeam do, versus when they can rely on normal RAII patterns.</p>",
        "id": 261953677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637253751
    },
    {
        "content": "<p>I mean we don't need anything normative in its place. We just need a informative note.</p>",
        "id": 261953696,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637253762
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span>'s point is that the reference is an accurate description of Rust's semantics with that line removed. Educating library authors is better accomplished through other means.</p>",
        "id": 261953907,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253852
    },
    {
        "content": "<p>Don't we abort() if we panic while dropping in the middle of another panic?</p>",
        "id": 261953941,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253875
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81895\">https://github.com/rust-lang/rust/issues/81895</a></p>",
        "id": 261953955,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253882
    },
    {
        "content": "<p>Obviously, we're not going to leak memory in this case</p>",
        "id": 261953965,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253889
    },
    {
        "content": "<p>But if you're relying on Drop to do something external to the program, you're in for a bad time regardless of how your code looks.</p>",
        "id": 261954010,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637253914
    },
    {
        "content": "<p>Personally I look to the UCG and the book before I look at the reference, and <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> indicates that this idea that the compiler can just not call <code>Drop</code> on a whim is pretty widespread.</p>",
        "id": 261954049,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Guarantees.20around.20Drop.20.28.2390752.29/near/261953941\">said</a>:</p>\n<blockquote>\n<p>Don't we abort() if we panic while dropping in the middle of another panic?</p>\n</blockquote>\n<p>That part should be in the reference, IMO.</p>",
        "id": 261954110,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253958
    },
    {
        "content": "<p>(if it's not already)</p>",
        "id": 261954167,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637253967
    },
    {
        "content": "<p>Although I guess you have to document no_unwind as well.</p>",
        "id": 261954380,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637254072
    },
    {
        "content": "<p>Make it part of the language specification I mean</p>",
        "id": 261954438,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637254085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Guarantees.20around.20Drop.20.28.2390752.29/near/261954049\">said</a>:</p>\n<blockquote>\n<p>Personally I look to the UCG and the book before I look at the reference, and <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> indicates that this idea that the compiler can just not call <code>Drop</code> on a whim is pretty widespread.</p>\n</blockquote>\n<p>I'm not sure I would describe it that way. Frankly the more concerning thing to me is that we seem to be relying on this in the standard library (rightly or wrongly) and I can't find anywhere we actually make this guarantee.</p>",
        "id": 261954455,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637254093
    },
    {
        "content": "<p>Especially given the fallout of the leakpocalypse, that just seemed <strong>wrong</strong> to me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261954587,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637254143
    },
    {
        "content": "<p>The specification describes when local variables and temporaries are dropped, so I don't see why you can't rely on it? This seems altogether separate from the fact that leaking is safe.</p>",
        "id": 261954804,
        "sender_full_name": "tm",
        "timestamp": 1637254211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Guarantees.20around.20Drop.20.28.2390752.29/near/261954804\">said</a>:</p>\n<blockquote>\n<p>The specification describes when local variables and temporaries are dropped, so I don't see why you can't rely on it? This seems altogether separate from the fact that leaking is safe.</p>\n</blockquote>\n<p>That's my understanding (modulo that last section that we've been discussing)</p>",
        "id": 261954931,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637254254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Guarantees.20around.20Drop.20.28.2390752.29/near/261954049\">said</a>:</p>\n<blockquote>\n<p>Personally I look to the UCG and the book before I look at the reference, and <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> indicates that this idea that the compiler can just not call <code>Drop</code> on a whim is pretty widespread.</p>\n</blockquote>\n<p>Its understandable why its widespread. Its very <em>simple</em> to just say “drop is best-effort”, even if that’s wildly <del>inaccurate</del> imprecise.</p>",
        "id": 261954995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637254274
    },
    {
        "content": "<p>So, once again, how do we</p>",
        "id": 261955171,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637254328
    },
    {
        "content": "<ul>\n<li>Achieve consensus within the Rust team</li>\n<li>Publicize any conclusions we reach</li>\n</ul>",
        "id": 261955290,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637254371
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is right and the problematic section in my mind is the \"Not running destructors\" section. I think it needs to be updated to be more specific. To me it reads like all of the previous behavior is \"best effort\" when that is clearly not the case. Panics are not even really mentioned at all which is also surprising.</p>",
        "id": 261955823,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637254556
    },
    {
        "content": "<p>panic-in-panic = abort is in some ways a language thing, since its a limitation imposed by what codegen we can possibly muster. But ideally I don't think we really want to make it a language spec thing and instead leave it up to implementation of the panic strategy.</p>",
        "id": 261955887,
        "sender_full_name": "nagisa",
        "timestamp": 1637254567
    },
    {
        "content": "<p>The thing with manual ways to make rust not run drop glue is that all of them except for bugs and <code>mem::forget</code> are a library/OS/real world realities.</p>",
        "id": 261956016,
        "sender_full_name": "nagisa",
        "timestamp": 1637254622
    },
    {
        "content": "<p>If that section is only referring to <code>std::mem::forget</code> and other such things (whether they live in the stdlib, 3rd party crates or user code) it should say that. Or if we're only guaranteeing destructors run for specific cases, it should say that.</p>",
        "id": 261956156,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637254676
    },
    {
        "content": "<p>I wonder if changing \"Not running destructors in Rust is safe\" to \"Calling <code>forget</code> is safe\" (and downgrade it to a note) would suffice.</p>",
        "id": 261956965,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637254927
    },
    {
        "content": "<p>I <em>feel</em> that the ambiguity arise from the overlap between the common sense of \"safe\" vs the Rust sense of \"safe\".</p>",
        "id": 261957168,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637255005
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, we've gotten a bit side-tracked here, but <a href=\"https://github.com/rust-lang/rust/issues/90718\">#90718</a> (the fix for <a href=\"https://github.com/rust-lang/rust/issues/90752\">#90752</a>) should really get on nightly ASAP.</p>",
        "id": 261957687,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637255192
    },
    {
        "content": "<p>Agreed! I'll start reviewing today</p>",
        "id": 261957726,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637255212
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> wants to take a look as well? Maybe they have an idea for how to do better</p>",
        "id": 261957847,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637255261
    },
    {
        "content": "<p>Er, I assume you mean <a href=\"https://github.com/rust-lang/rust/issues/90788\">#90788</a></p>",
        "id": 261957864,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637255266
    },
    {
        "content": "<p>(let <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> keep it for now, things just got worse at my home )</p>",
        "id": 261957982,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637255297
    },
    {
        "content": "<p>I submitted <a href=\"https://github.com/rust-lang/reference/pull/1107\">https://github.com/rust-lang/reference/pull/1107</a></p>",
        "id": 261958363,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637255451
    },
    {
        "content": "<p>Ah hah <a href=\"https://github.com/rust-lang/nomicon/issues/135\">https://github.com/rust-lang/nomicon/issues/135</a></p>",
        "id": 261965849,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637258516
    },
    {
        "content": "<p>As usual Ralf has done a better job explaining the issue than I could have <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261966025,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1637258586
    }
]