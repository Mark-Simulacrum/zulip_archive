[
    {
        "content": "<p>lets continue talking here (continuation of <a href=\"#narrow/stream/131828-t-compiler/subject/weekly.20meeting.202018-09-20/near/134315542\" title=\"#narrow/stream/131828-t-compiler/subject/weekly.20meeting.202018-09-20/near/134315542\">this conversation</a>)</p>",
        "id": 134316202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537456923
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span> and <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 134316221,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537456944
    },
    {
        "content": "<p>So my questions are:</p>\n<p>1. What code, besides macros breaks here;<br>\n2. I suppose we don’t want to change the strategy employed by this PR much (i.e. our ultimate goal is to error everywhere anyway)?</p>",
        "id": 134316252,
        "sender_full_name": "nagisa",
        "timestamp": 1537456990
    },
    {
        "content": "<p>3. How does this interact with constevaluated code that is really a runtime code?</p>",
        "id": 134316331,
        "sender_full_name": "nagisa",
        "timestamp": 1537457046
    },
    {
        "content": "<p>that is, there was an issue before about <code>println!(\"{}\", 1/0)</code> not failing if put in a <code>main</code> (for good reasons IIRC). Would this PR landing change this behaviour in any way?</p>",
        "id": 134316362,
        "sender_full_name": "nagisa",
        "timestamp": 1537457090
    },
    {
        "content": "<p>in the current state the PR shouldnt introduce any new errors</p>",
        "id": 134316395,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457137
    },
    {
        "content": "<p>but it also does not lint any more when an unused type contains a constant that errors when executed</p>",
        "id": 134316465,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457165
    },
    {
        "content": "<p>unused type, as in <code>type A = [42; BAD_CONST]</code>?</p>",
        "id": 134316489,
        "sender_full_name": "nagisa",
        "timestamp": 1537457200
    },
    {
        "content": "<p>where <code>A</code> is not used?</p>",
        "id": 134316494,
        "sender_full_name": "nagisa",
        "timestamp": 1537457207
    },
    {
        "content": "<p>previously, both the lint and WF (or whatever evaluates constants when a type gets actually used) used the same query, but the query just returned \"well there was an error\" and it was up to the caller to figure out what to do with that error</p>",
        "id": 134316507,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457220
    },
    {
        "content": "<p>so the lint made it a warning, WF made it a hard error</p>",
        "id": 134316523,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457236
    },
    {
        "content": "<p>now the query already reports the error, so we cannot make that distinction any more</p>",
        "id": 134316533,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457248
    },
    {
        "content": "<p>we also stop reporting the same error 3 times because nobody was sure if some other part didnt already report the error...</p>",
        "id": 134316537,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457264
    },
    {
        "content": "<p>okay but I have an upcoming PR that could make it an unconditional error</p>",
        "id": 134316540,
        "sender_full_name": "eddyb",
        "timestamp": 1537457267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> yes</p>",
        "id": 134316544,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457271
    },
    {
        "content": "<p>because it's more uniform IMO to do so (if we can get away with it)</p>",
        "id": 134316595,
        "sender_full_name": "eddyb",
        "timestamp": 1537457287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> sure fine for me, but that doesnt block this PR, right?</p>",
        "id": 134316597,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ah, now I understand what’s the point of discussion finally :P</p>",
        "id": 134316605,
        "sender_full_name": "nagisa",
        "timestamp": 1537457292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> well, if we <em>don't</em> make an error, we can't land the PR</p>",
        "id": 134316637,
        "sender_full_name": "eddyb",
        "timestamp": 1537457339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> as for your point 3, it shouldnt. that would be <code>const_prop</code>, which opportunistically evaluates runtime code with the miri engine. it's a horrible mess, but it also doesnt use the const_eval query and hence shouldnt be affected by this change</p>",
        "id": 134316644,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457343
    },
    {
        "content": "<p>because we can't tell the query to warn instead anymore</p>",
        "id": 134316653,
        "sender_full_name": "eddyb",
        "timestamp": 1537457348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> why not?</p>",
        "id": 134316654,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457349
    },
    {
        "content": "<p>so?</p>",
        "id": 134316658,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457353
    },
    {
        "content": "<p>what warning is fairly recent</p>",
        "id": 134316659,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457356
    },
    {
        "content": "<p>seems better to me to lose it again than the mess we had previously</p>",
        "id": 134316668,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457368
    },
    {
        "content": "<p>I mean, we're moving towards a self-consistent model of <code>type</code> aliases</p>",
        "id": 134316671,
        "sender_full_name": "eddyb",
        "timestamp": 1537457374
    },
    {
        "content": "<p>and then figure out something better</p>",
        "id": 134316673,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> the query never warned for unused types</p>",
        "id": 134316685,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457391
    },
    {
        "content": "<p>instead we have a really strange lint, which all it does is walk the crate and fire all <code>const_eval</code> queries</p>",
        "id": 134316734,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457404
    },
    {
        "content": "<p>so if we warn about <code>type Foo = Vec&lt;str&gt;;</code>, we should warn about <code>type Foo = [u8; 0 - 1];</code> too</p>",
        "id": 134316765,
        "sender_full_name": "eddyb",
        "timestamp": 1537457427
    },
    {
        "content": "<blockquote>\n<p>so if we warn about <code>type Foo = Vec&lt;str&gt;;</code>, we should warn about <code>type Foo = [u8; 0 - 1];</code> too</p>\n</blockquote>\n<p>sure but that would likely fall out of whatever it is you are doing, and not out of the UnusedErrConstant lint or whatever oli called it</p>",
        "id": 134316794,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457462
    },
    {
        "content": "<p>yes but what I'd be doing would necessarily query <code>const_eval</code></p>",
        "id": 134316806,
        "sender_full_name": "eddyb",
        "timestamp": 1537457478
    },
    {
        "content": "<p>yes</p>",
        "id": 134316812,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457486
    },
    {
        "content": "<p>and I can't force it now to warn, it would error</p>",
        "id": 134316815,
        "sender_full_name": "eddyb",
        "timestamp": 1537457491
    },
    {
        "content": "<p>yes</p>",
        "id": 134316819,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457497
    },
    {
        "content": "<p>#MakeConstEvalReturnResult&lt;T, E&gt;</p>",
        "id": 134316831,
        "sender_full_name": "nagisa",
        "timestamp": 1537457509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it does, before the PR</p>",
        "id": 134316877,
        "sender_full_name": "eddyb",
        "timestamp": 1537457524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> thats what we have currently, it is horrible</p>",
        "id": 134316878,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457525
    },
    {
        "content": "<p>so the only regression in the const query error PR is that it stops warning for bad consts in unused types</p>",
        "id": 134316889,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457536
    },
    {
        "content": "<p>it requires reifying <em>a ridiculous amount</em> of state in the error</p>",
        "id": 134316900,
        "sender_full_name": "eddyb",
        "timestamp": 1537457552
    },
    {
        "content": "<p>which IIRC isnt even on stable yet</p>",
        "id": 134316903,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457555
    },
    {
        "content": "<p>yeah, I realised after I sent it. Failing in const_eval directly, however, precludes using const_eval for other uses.</p>",
        "id": 134316907,
        "sender_full_name": "nagisa",
        "timestamp": 1537457573
    },
    {
        "content": "<p>for now, that seems like an acceptable regression to me for the overall cleanup</p>",
        "id": 134316913,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457582
    },
    {
        "content": "<p>can we just add two distinct variants of const eval query, one that reports the errors from within itself, and the other that returns Option/Result?</p>",
        "id": 134316942,
        "sender_full_name": "nagisa",
        "timestamp": 1537457617
    },
    {
        "content": "<p>that would be 4, we already have <code>const_eval</code> and <code>const_eval_raw</code></p>",
        "id": 134316994,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457654
    },
    {
        "content": "<p>Similar to the const_eval_raw/const_eval split, yeah.</p>",
        "id": 134316999,
        "sender_full_name": "nagisa",
        "timestamp": 1537457665
    },
    {
        "content": "<p>where <code>const_eval</code> does the actual work of computing a const</p>",
        "id": 134317001,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457666
    },
    {
        "content": "<p>and <code>const_eval_raw</code> tests the value at the given type</p>",
        "id": 134317004,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457676
    },
    {
        "content": "<p>I dont know why that cant happen in one query</p>",
        "id": 134317008,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> said sth with cycles</p>",
        "id": 134317011,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457686
    },
    {
        "content": "<p>making a \"test\" query would work for eddyb’s use-cases I think?</p>",
        "id": 134317033,
        "sender_full_name": "nagisa",
        "timestamp": 1537457719
    },
    {
        "content": "<p>it could also be an argument to the query</p>",
        "id": 134317040,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457741
    },
    {
        "content": "<p>like, the type stuff should not depend on an actual const value at all, just whether it has errors or not.</p>",
        "id": 134317041,
        "sender_full_name": "nagisa",
        "timestamp": 1537457743
    },
    {
        "content": "<p>but then we have to be careful about caching</p>",
        "id": 134317043,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457747
    },
    {
        "content": "<p>well I guess its isomorphic to two queries</p>",
        "id": 134317074,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457763
    },
    {
        "content": "<p>so we have to be careful either way^^</p>",
        "id": 134317092,
        "sender_full_name": "RalfJ",
        "timestamp": 1537457769
    },
    {
        "content": "<p>All that being said, I think I’d be fine with a temporary regression here.</p>",
        "id": 134317113,
        "sender_full_name": "nagisa",
        "timestamp": 1537457809
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 134317128,
        "sender_full_name": "nagisa",
        "timestamp": 1537457825
    },
    {
        "content": "<p>/me has a feeling that one way or the other a query split between \"compute\" and \"test\" will one way or the other get exposed to other parts of the compiler.</p>",
        "id": 134317149,
        "sender_full_name": "nagisa",
        "timestamp": 1537457861
    },
    {
        "content": "<p>ok so I read this stuff :)</p>",
        "id": 134326436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is one of you evaluating whether we think we can get away with making this a hard error all the time?</p>\n<p>It feels like \"borderline bug territory\" indeed. </p>\n<p>That said, I don't know why we couldn't have an \"inner query\" that returns a Result and another query that makes it an error (which invokes the \"inner query\"). Most users would use the outer query.</p>",
        "id": 134326509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467271
    },
    {
        "content": "<p>I guess this is what <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> was proposing?</p>",
        "id": 134326514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> my latest PR will be used to crater for type aliases, not just constants in them, but other monomorphic non-WF things</p>",
        "id": 134326562,
        "sender_full_name": "eddyb",
        "timestamp": 1537467335
    },
    {
        "content": "<p>that PR currently makes things a warning, right?</p>",
        "id": 134326576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467354
    },
    {
        "content": "<p>(PS I'm having a hard time keeping \"all the things\" sorted it out here when it comes to your many PRs, but I'm sort of assuming you'll kick me when you feel like you've worked it out to a point where you need a review, and/or have a burning question?)</p>",
        "id": 134326638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467390
    },
    {
        "content": "<p>which reminds me that we should talk about errors in 2018 and how aggressive we think we can be</p>",
        "id": 134326646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467399
    },
    {
        "content": "<p>it makes <code>type Foo&lt;T&gt; = NeedsBounds&lt;T&gt;;</code> a warning but <code>type Bar = Vec&lt;str&gt;;</code> (or <code>type Baz = [u8; 0 - 1];</code>) a hard error</p>",
        "id": 134326651,
        "sender_full_name": "eddyb",
        "timestamp": 1537467405
    },
    {
        "content": "<p>but not probably in this topic :)</p>",
        "id": 134326652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467405
    },
    {
        "content": "<p>having the miri engine error type in a query is a bit messy, but that's mostly me not wanting to update 15 manually derived traits each time that changes :P</p>",
        "id": 134326661,
        "sender_full_name": "RalfJ",
        "timestamp": 1537467417
    },
    {
        "content": "<blockquote>\n<p>it makes <code>type Foo&lt;T&gt; = NeedsBounds&lt;T&gt;;</code> a warning but <code>type Bar = Vec&lt;str&gt;</code> a hard error</p>\n</blockquote>\n<p>what is the distinction between those? is it based on the use of a type parameter?</p>",
        "id": 134326671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467427
    },
    {
        "content": "<p>we do something similar for defaults</p>",
        "id": 134326679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467433
    },
    {
        "content": "<p>e.g., <code>struct Foo&lt;T = Vec&lt;str&gt;&gt;</code> is a hard error</p>",
        "id": 134326685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467440
    },
    {
        "content": "<p>yes, that's the entire point</p>",
        "id": 134326686,
        "sender_full_name": "eddyb",
        "timestamp": 1537467440
    },
    {
        "content": "<p>ok, I see</p>",
        "id": 134326689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467446
    },
    {
        "content": "<p>I .. <em>think</em> we do that for defaults, anyway?</p>",
        "id": 134326701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467454
    },
    {
        "content": "<p>we went back and forth and wound up settling on something pretty conservative iirc</p>",
        "id": 134326706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467461
    },
    {
        "content": "<blockquote>\n<p>having the miri engine error type in a query is a bit messy, but that's mostly me not wanting to update 15 manually derived traits each time that changes :P</p>\n</blockquote>\n<p>I see, I see</p>",
        "id": 134326715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467477
    },
    {
        "content": "<p>so, there are two things:</p>\n<ul>\n<li>it's annoying for callers not to know whether an error has been reported (can be solved by moving it into the query)</li>\n<li>it's annoying to communicate enough state for the other query to report the error</li>\n</ul>",
        "id": 134326771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537467500
    },
    {
        "content": "<p>We don't want to pass state to the query, as that would duplicate errors and work (the latter can be worked around by having more queries as noted above). The entire point of the PR was to deduplicate errors and centralize error reporting in one location.</p>",
        "id": 134670046,
        "sender_full_name": "oli",
        "timestamp": 1537965111
    },
    {
        "content": "<p>We could add a query which returns a Diagnostic object in the err case, which is then reported by the main query. Type alias array lengths could then use the inner query to report the error as a future incompat lint</p>",
        "id": 134670257,
        "sender_full_name": "oli",
        "timestamp": 1537965289
    }
]