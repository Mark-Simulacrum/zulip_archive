[
    {
        "content": "<p>I was wondering what else needs to be done to add unification of constant expressions for const-generics</p>",
        "id": 136264966,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540212669
    },
    {
        "content": "<p>Everyone told me that <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> is the right person to discuss this :)</p>",
        "id": 136264993,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540212721
    },
    {
        "content": "<p>can you link the tracking issue? I don't have anything about this in the cache right now ;)</p>",
        "id": 136265064,
        "sender_full_name": "oli",
        "timestamp": 1540212835
    },
    {
        "content": "<p>I think there is no issue for this. It is mentioned on the const-generics RFC but nothing else</p>",
        "id": 136265236,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540213001
    },
    {
        "content": "<p>iirc we need at least lazy normalization so that we can start mixing type parameters into the value of constants</p>",
        "id": 136265626,
        "sender_full_name": "oli",
        "timestamp": 1540213471
    },
    {
        "content": "<p>When you say normalization, whose evaluation are we talking about?</p>",
        "id": 136265856,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540213771
    },
    {
        "content": "<p>the evaluation of types</p>",
        "id": 136265954,
        "sender_full_name": "oli",
        "timestamp": 1540213848
    },
    {
        "content": "<p>const generics are essentially types</p>",
        "id": 136265971,
        "sender_full_name": "oli",
        "timestamp": 1540213866
    },
    {
        "content": "<p>I mean someone implemented const generics in <code>typenum</code></p>",
        "id": 136265983,
        "sender_full_name": "oli",
        "timestamp": 1540213886
    },
    {
        "content": "<p>we just want to make that efficient and give it first class support afaik</p>",
        "id": 136265986,
        "sender_full_name": "oli",
        "timestamp": 1540213896
    },
    {
        "content": "<p>Even then, eventually you'll need some kind of unification for constants to decide when two types are equal, right?</p>",
        "id": 136266078,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540214027
    },
    {
        "content": "<p>right... which is easy if everything can be evaluated</p>",
        "id": 136266256,
        "sender_full_name": "oli",
        "timestamp": 1540214170
    },
    {
        "content": "<p>but not if there are type variables left</p>",
        "id": 136266265,
        "sender_full_name": "oli",
        "timestamp": 1540214178
    },
    {
        "content": "<p>Like we know <code>X - X == 0</code> for <code>X: usize</code>, but the compiler won' t eval it if we don't know the value</p>",
        "id": 136266286,
        "sender_full_name": "oli",
        "timestamp": 1540214213
    },
    {
        "content": "<p>Shoudn't constant expression evaluation take care of that?</p>",
        "id": 136266302,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540214239
    },
    {
        "content": "<p>not if we don't know <code>X</code> yet</p>",
        "id": 136266316,
        "sender_full_name": "oli",
        "timestamp": 1540214263
    },
    {
        "content": "<p>it might be <code>T::X</code></p>",
        "id": 136266321,
        "sender_full_name": "oli",
        "timestamp": 1540214267
    },
    {
        "content": "<p>and <code>T</code> might be a generic parameter of the current function</p>",
        "id": 136266327,
        "sender_full_name": "oli",
        "timestamp": 1540214276
    },
    {
        "content": "<p>jmmm</p>",
        "id": 136266393,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540214298
    },
    {
        "content": "<blockquote>\n<p>but not if there are type variables left</p>\n</blockquote>\n<p>Is there any chance that after normalization there are some type variables hanging around?</p>",
        "id": 136266904,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540214772
    },
    {
        "content": "<p>Or all the constant parameters will be a bunch of constant values?</p>",
        "id": 136266932,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540214808
    },
    {
        "content": "<p>there will always be some left</p>",
        "id": 136267060,
        "sender_full_name": "oli",
        "timestamp": 1540214925
    },
    {
        "content": "<p>if your function is generic and public, you need to keep it generic</p>",
        "id": 136267072,
        "sender_full_name": "oli",
        "timestamp": 1540214939
    },
    {
        "content": "<p>Well, let's say normalization happened somehow. Now what's the next step?</p>",
        "id": 136267143,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540215001
    },
    {
        "content": "<p>not sure, that's about the extend that I have explored</p>",
        "id": 136267323,
        "sender_full_name": "oli",
        "timestamp": 1540215152
    },
    {
        "content": "<p>any speculations?</p>",
        "id": 136267449,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540215251
    },
    {
        "content": "<p>@eddyb told me the other day that the best point to do unification will be after miri's constant evaluation</p>",
        "id": 136267587,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540215396
    },
    {
        "content": "<p>after?</p>",
        "id": 136267701,
        "sender_full_name": "oli",
        "timestamp": 1540215509
    },
    {
        "content": "<p>yeah, after</p>",
        "id": 136267716,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540215523
    },
    {
        "content": "<p>hmm... I've brought this up multiple times, but we could implement a symbolic execution mode for miri</p>",
        "id": 136267732,
        "sender_full_name": "oli",
        "timestamp": 1540215539
    },
    {
        "content": "<p>then we can just evaluate these \"unknown\" (generic) values</p>",
        "id": 136267747,
        "sender_full_name": "oli",
        "timestamp": 1540215547
    },
    {
        "content": "<p>the idea has had mixed reception :D</p>",
        "id": 136267793,
        "sender_full_name": "oli",
        "timestamp": 1540215589
    },
    {
        "content": "<p>hahahahaha</p>",
        "id": 136267868,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540215627
    },
    {
        "content": "<p>I had some questions about that part. After constant evaluation, we'll end up with a bunch of MIR code for each constant expression. My question was, how simple would that code be?</p>",
        "id": 136268052,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540215805
    },
    {
        "content": "<p>const eval doesn't produce MIR code, it produces a graph of <code>Allocation</code> objects</p>",
        "id": 136268214,
        "sender_full_name": "oli",
        "timestamp": 1540215959
    },
    {
        "content": "<blockquote>\n<p>then we can just evaluate these \"unknown\" (generic) values</p>\n</blockquote>\n<p>And what will happen if after symbolic evaluation you don't have enough constraints over a generic value?</p>",
        "id": 136268280,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540215984
    },
    {
        "content": "<p>you error out if you can't prove something</p>",
        "id": 136268414,
        "sender_full_name": "oli",
        "timestamp": 1540216129
    },
    {
        "content": "<p>mostly array length equality I guess</p>",
        "id": 136268417,
        "sender_full_name": "oli",
        "timestamp": 1540216137
    },
    {
        "content": "<p>why are there \"mixed receptions\", what are the drawbacks?</p>",
        "id": 136268581,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540216300
    },
    {
        "content": "<p>Well... symbolic miri is definitely nontrivial</p>",
        "id": 136269592,
        "sender_full_name": "oli",
        "timestamp": 1540217156
    },
    {
        "content": "<p>so is just a \"there are other things that need attention right now\" situation?</p>",
        "id": 136269938,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540217514
    },
    {
        "content": "<p>oh definitely</p>",
        "id": 136270033,
        "sender_full_name": "oli",
        "timestamp": 1540217638
    },
    {
        "content": "<p>like const eval needing another <code>N</code> rounds of cleanups :D</p>",
        "id": 136270084,
        "sender_full_name": "oli",
        "timestamp": 1540217652
    },
    {
        "content": "<p>hahaha</p>",
        "id": 136270088,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540217659
    },
    {
        "content": "<p>what if you had an ingnorant with enough initiative?</p>",
        "id": 136270110,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540217689
    },
    {
        "content": "<p>idk... seems really big. It took me 3 months of dedicated work to get <code>existential type</code> mostly working. Lazy normalization seems like a whole other level</p>",
        "id": 136270156,
        "sender_full_name": "oli",
        "timestamp": 1540217749
    },
    {
        "content": "<p>The problem is I don't know where to start</p>",
        "id": 136270209,
        "sender_full_name": "oli",
        "timestamp": 1540217769
    },
    {
        "content": "<p>or what small preps we could start doing to make it easier in the future to do the big ones</p>",
        "id": 136270219,
        "sender_full_name": "oli",
        "timestamp": 1540217784
    },
    {
        "content": "<p>:(</p>",
        "id": 136270260,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540217842
    },
    {
        "content": "<p>I think doing full chalkification is definitely a prerquisite</p>",
        "id": 136270269,
        "sender_full_name": "oli",
        "timestamp": 1540217852
    },
    {
        "content": "<p>so you can probably look at chalk's bugtracker and <a href=\"https://github.com/rust-lang/rust/issues/48049\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48049\">https://github.com/rust-lang/rust/issues/48049</a> to see what needs to be done to get that into the compiler</p>",
        "id": 136270304,
        "sender_full_name": "oli",
        "timestamp": 1540217873
    },
    {
        "content": "<p>without chalk I'm fairly certain there's two groups of people: those who don't dare touch lazy normalization and those who could do it but don't see the point without chalk first :D</p>",
        "id": 136270373,
        "sender_full_name": "oli",
        "timestamp": 1540217928
    },
    {
        "content": "<p>How much time do you think it will take to do all of this working full-time on it?</p>",
        "id": 136270598,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540218127
    },
    {
        "content": "<p>well.. having someone working full-time on this</p>",
        "id": 136270609,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540218137
    },
    {
        "content": "<p>I don't think this is a one-person job. in FTEs it's probably a year or two, and that is counting in superscalar speedup of multiple people working on it</p>",
        "id": 136270800,
        "sender_full_name": "oli",
        "timestamp": 1540218356
    },
    {
        "content": "<p>and of course there is no way to invest several people's time <br>\nto work on such a long term project i guess</p>",
        "id": 136271378,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540218846
    },
    {
        "content": "<p>there is, but it'll need some companies motivated to pay ppl for compiler work</p>",
        "id": 136271419,
        "sender_full_name": "oli",
        "timestamp": 1540218910
    },
    {
        "content": "<p>I mean <a href=\"https://www.fastly.com/about/jobs/apply?gh_jid=1320541\" target=\"_blank\" title=\"https://www.fastly.com/about/jobs/apply?gh_jid=1320541\">https://www.fastly.com/about/jobs/apply?gh_jid=1320541</a> is a good start</p>",
        "id": 136271429,
        "sender_full_name": "oli",
        "timestamp": 1540218928
    },
    {
        "content": "<p>I don't think i'd qualify for that job haha :(</p>",
        "id": 136271987,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540219559
    },
    {
        "content": "<p>I wonder how many job offers don't get good applicants because they are written in a way that they scare away many applicants</p>",
        "id": 136272417,
        "sender_full_name": "oli",
        "timestamp": 1540219988
    },
    {
        "content": "<p>Well anyway, thank you for the discussion</p>",
        "id": 136272532,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540220131
    },
    {
        "content": "<p>I hope I didn't scare you away... I'm not sure why fingers were pointed at me for being of help on const generics.</p>",
        "id": 136272753,
        "sender_full_name": "oli",
        "timestamp": 1540220343
    },
    {
        "content": "<p>But if you want to help out, as said before, chalk is probably the best way to do that right now</p>",
        "id": 136272771,
        "sender_full_name": "oli",
        "timestamp": 1540220364
    },
    {
        "content": "<p>I'm not scared at all, I was just wondering if i could do of this my Master's Thesis, but I'll need a shorter project for that. Even though I'd love to help on it</p>",
        "id": 136272973,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540220534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I found the issue I was thinking about: <a href=\"https://github.com/rust-lang/rust/issues/44580\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44580\">https://github.com/rust-lang/rust/issues/44580</a></p>",
        "id": 136274107,
        "sender_full_name": "oli",
        "timestamp": 1540221632
    },
    {
        "content": "<p>The issue for the RFC?</p>",
        "id": 136274149,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540221677
    },
    {
        "content": "<p>yes</p>",
        "id": 136274699,
        "sender_full_name": "oli",
        "timestamp": 1540222115
    },
    {
        "content": "<p>I thought that it was blocked until varkor's PR gets merged</p>",
        "id": 136274951,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540222347
    },
    {
        "content": "<p>This one <a href=\"https://github.com/rust-lang/rust/pull/53645\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53645\">https://github.com/rust-lang/rust/pull/53645</a></p>",
        "id": 136275209,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540222596
    },
    {
        "content": "<p>If you see that any small advance could be done somehow you can count on me :P</p>",
        "id": 136276559,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1540223920
    }
]