[
    {
        "content": "<p>Is save-analysis likely to be removed once we stop shipping RLS?</p>",
        "id": 213225533,
        "sender_full_name": "tmandry",
        "timestamp": 1602628487
    },
    {
        "content": "<p>I ask because someone built a <a href=\"https://kythe.io/\">Kythe</a> indexer for Rust, which uses save-analysis</p>",
        "id": 213225584,
        "sender_full_name": "tmandry",
        "timestamp": 1602628531
    },
    {
        "content": "<p>not what I would have done personally, but unless they were willing to put significant work into libraryification, it's not like there are many other options available</p>",
        "id": 213225676,
        "sender_full_name": "tmandry",
        "timestamp": 1602628593
    },
    {
        "content": "<p>so I'm wondering what kind of future save-analysis has, if it's a maintenance burden we'd like to get rid of, etc.</p>",
        "id": 213225746,
        "sender_full_name": "tmandry",
        "timestamp": 1602628643
    },
    {
        "content": "<p>I don't think it's a major burden, but it's also likely to be incomplete</p>",
        "id": 213236164,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637139
    },
    {
        "content": "<p>I think it needs to get updated to include new-ish things</p>",
        "id": 213236180,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637151
    },
    {
        "content": "<p>hmm. so if the kythe team were willing to update it as needed, would we be willing to keep it around?</p>",
        "id": 213236392,
        "sender_full_name": "tmandry",
        "timestamp": 1602637324
    },
    {
        "content": "<p>I'm trying to decide if I need to push them toward developing another solution</p>",
        "id": 213236437,
        "sender_full_name": "tmandry",
        "timestamp": 1602637408
    },
    {
        "content": "<p>save-analysis is unstable anyway, right? Is there any reason not to use HIR?</p>",
        "id": 213236518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602637501
    },
    {
        "content": "<p>if it hasn't been written yet</p>",
        "id": 213236526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602637511
    },
    {
        "content": "<p>they're very different in terms of access</p>",
        "id": 213236528,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637512
    },
    {
        "content": "<blockquote>\n<p>I'm trying to decide if I need to push them toward developing another solution</p>\n</blockquote>\n<p>before, say, fuchsia were to start using kythe for code navigation on <a href=\"https://cs.opensource.google/fuchsia/fuchsia\">codesearch</a></p>",
        "id": 213236551,
        "sender_full_name": "tmandry",
        "timestamp": 1602637538
    },
    {
        "content": "<p>like, HIR is very unstable, save-analysis is maybe stale but mostly stable</p>",
        "id": 213236604,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637566
    },
    {
        "content": "<p>(and save-analysis is just JSON exports)</p>",
        "id": 213236607,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637575
    },
    {
        "content": "<blockquote>\n<p>if it hasn't been written yet</p>\n</blockquote>\n<p>well, part of the problem is it <em>has</em> been written =)</p>",
        "id": 213236610,
        "sender_full_name": "tmandry",
        "timestamp": 1602637579
    },
    {
        "content": "<p>I see</p>",
        "id": 213236615,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602637586
    },
    {
        "content": "<p>but so far I'm considering that a \"demo\"</p>",
        "id": 213236618,
        "sender_full_name": "tmandry",
        "timestamp": 1602637590
    },
    {
        "content": "<p>I think we've wanted to remove it before, but I do not think that was because of some high maintenance burden</p>",
        "id": 213236621,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637602
    },
    {
        "content": "<p>that said, I would not personally rely on it for things you <em>need</em> correctness in (e.g., code correctness lints)</p>",
        "id": 213236632,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637623
    },
    {
        "content": "<p>but things like search it feels more or less fine</p>",
        "id": 213236641,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637631
    },
    {
        "content": "<p>depending on what you need, looking at rustdoc's potential JSON output (not yet implemented) might be better</p>",
        "id": 213236651,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637651
    },
    {
        "content": "<p>heh, I know a thing or two about that :P</p>",
        "id": 213236659,
        "sender_full_name": "tmandry",
        "timestamp": 1602637672
    },
    {
        "content": "<p>I might also suggest integrating with rust-analyzer's LSP server instead, which should provided better usability and likely much higher correctness (at least over time)  than save-analysis</p>",
        "id": 213236709,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637693
    },
    {
        "content": "<p>the rustdoc output doesn't describe code inside of function bodies, which is really what we need for this application</p>",
        "id": 213236711,
        "sender_full_name": "tmandry",
        "timestamp": 1602637696
    },
    {
        "content": "<p>ugh, i need to bug @pineapple about that</p>",
        "id": 213236713,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602637699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> decided to block on a whole new test suite :/</p>",
        "id": 213236722,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602637721
    },
    {
        "content": "<p>tbh I would say \"don't rely on save-analysis for new development\", I think</p>",
        "id": 213236730,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637738
    },
    {
        "content": "<p>that said, I do not think it likely that it will go away if we have people stepping up who are willing to maintain it for some time</p>",
        "id": 213236745,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637759
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> decided to block on a whole new test suite :/</p>\n</blockquote>\n<p>oh? I thought it was very close to landing.. but we can talk in another thread</p>",
        "id": 213236747,
        "sender_full_name": "tmandry",
        "timestamp": 1602637767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Future.20of.20save-analysis/near/213236711\">said</a>:</p>\n<blockquote>\n<p>the rustdoc output doesn't describe code inside of function bodies, which is really what we need for this application</p>\n</blockquote>\n<p>right <a href=\"https://github.com/rust-lang/rfcs/pull/2963#issuecomment-669362885\">https://github.com/rust-lang/rfcs/pull/2963#issuecomment-669362885</a></p>",
        "id": 213236754,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602637778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I would also emphasize that save-analysis is super likely to just ... miss things, etc. from my recollection</p>",
        "id": 213236827,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637852
    },
    {
        "content": "<p>like, new features can easily just not get implemented for it (I think impl trait for a long time was basically ignored)</p>",
        "id": 213236845,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637867
    },
    {
        "content": "<p>it's model is also not very precise iirc, though I last looked a while ago</p>",
        "id": 213236850,
        "sender_full_name": "simulacrum",
        "timestamp": 1602637881
    },
    {
        "content": "<p>hm, okay. it sounds like we could limp along for quite awhile, but will want to invest in a better solution in the meantime. e.g. libraryification with enough of a stable API to write a kythe indexer.</p>",
        "id": 213236909,
        "sender_full_name": "tmandry",
        "timestamp": 1602637932
    },
    {
        "content": "<p>From my perspective:</p>\n<ul>\n<li>There's strong architectural desire to remove save-analysis, it is perceived as a dead-end, which will be eventually removed.  </li>\n<li>At the same time, maintenance burden is not that high (with the caveat that the quality is not really production ready).</li>\n<li>There's a vague desire to some day have something a-la save-analysis 2.0 -- exposing data-shaped API from the compiler to allow looking at the fully type-checked and analyzed code</li>\n<li>rust-analyzer is in theory the path towards that goal. The high-investment / high-risk / high-return option is to build Kythe indexer on top of rust-analyzer. But, ra and the whole library-ification thing is still very expeimental, so \"build on top\" kind of includes \"build foudnation\" as well</li>\n</ul>",
        "id": 213288842,
        "sender_full_name": "matklad",
        "timestamp": 1602682635
    },
    {
        "content": "<p>I use save-analysis for warnalyzer atm. I'm considering adopting <code>rust-analyzer</code> but from what I read it's not meant to support bulk data mode but queries instead.</p>",
        "id": 213329371,
        "sender_full_name": "est31",
        "timestamp": 1602698436
    },
    {
        "content": "<p>warnalyzer needs bulk data mode, as in, a graph of usage relationships of all items in a crate and crate graph.</p>",
        "id": 213329631,
        "sender_full_name": "est31",
        "timestamp": 1602698526
    },
    {
        "content": "<p>Ultimately, <code>rust-analyzer</code> should handle both batch and lazy scenarios, or we would need to maintain rustc and rust-analyzer in parallel in perpetuity.  And it is indeed not-trivial to support both efficiently. \"what are the usages of symbol <code>x</code>\" is the operation that is implemented very differently in two modes. </p>\n<p>At the moment, rust-analyzer is indeed geared towards lazy scenario, proving out feasibility of batch analysis is what \"build foundation\" is about :)</p>",
        "id": 213330709,
        "sender_full_name": "matklad",
        "timestamp": 1602699053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Yeah, fwiw I had originally encouraged them to look into building atop rust-analyzer. Their response was that LSPs generally don't have enough information for <a href=\"https://kythe.io/docs/schema/\">everything they want to expose</a>, and that a cursory glance confirmed this.</p>",
        "id": 213481289,
        "sender_full_name": "tmandry",
        "timestamp": 1602792802
    },
    {
        "content": "<p>The kythe indexer is also offline/batch mode</p>",
        "id": 213481308,
        "sender_full_name": "tmandry",
        "timestamp": 1602792813
    },
    {
        "content": "<p>I'm sure that in time things will converge, but it was hard to make a pitch for \"here's the thing we <em>eventually</em> want to use, but it doesn't do what you want yet and none of the APIs are stable either\"</p>",
        "id": 213481405,
        "sender_full_name": "tmandry",
        "timestamp": 1602792867
    },
    {
        "content": "<p>For that use case \"perfect but (potentially) slow\" is the tradeoff you want to make, and the main issue I see in rust-analyzer is that the name resolution is not always accurate</p>",
        "id": 213481686,
        "sender_full_name": "tmandry",
        "timestamp": 1602793061
    },
    {
        "content": "<p>So for those reasons I can see why they went with save-analysis</p>",
        "id": 213481731,
        "sender_full_name": "tmandry",
        "timestamp": 1602793083
    },
    {
        "content": "<p>Yeah, I agree with that reasoning, with a small correction that you don't <em>need</em> to use rust-analyzer via LSP protocol, and it's internal model has more or less everything</p>",
        "id": 213481896,
        "sender_full_name": "matklad",
        "timestamp": 1602793174
    },
    {
        "content": "<p>Hmm yeah, I understand that but not sure if the kythe team did. I'm not sure what exactly they looked at to say it didn't have enough information.</p>",
        "id": 213482121,
        "sender_full_name": "tmandry",
        "timestamp": 1602793305
    }
]