[
    {
        "content": "<p>A <code>P-high</code> <code>regression-from-stable-to-beta</code> <a href=\"https://github.com/rust-lang/rust/issues/89190\">#89190</a> made its way into 1.56 stable release, due to the bugfix not being backported (the PR is not <code>beta-nominated</code>). Maybe we need a more systematic way of preventing things like this from happening again? E.g. let rustbot reopen all <code>regression-from-stable-to-beta</code> and <code>regression-from-stable-to-stable</code> PRs if it's closed by a PR against master branch?</p>",
        "id": 261705570,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637096225
    },
    {
        "content": "<p>Yeah this is a definitely risk that weâ€™ve been just trying to catch manually.</p>",
        "id": 261714921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637100904
    },
    {
        "content": "<p>and that it would be better to have a systematic way to avoid such mistakes</p>",
        "id": 261714944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637100915
    },
    {
        "content": "<p>I wonder if there is a way to tell github to not auto-close issues that have a certain label? E.g. it would make sense to me to required any issue labelled as a regression to have to be manually closed...</p>",
        "id": 261715537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637101209
    },
    {
        "content": "<blockquote>\n<p>E.g. let rustbot reopen all regression-from-stable-to-beta and regression-from-stable-to-stable PRs if it's closed by a PR against master branch?</p>\n</blockquote>\n<p>That sounds like a good idea, though I think stable-to-stable regressions are not as big a deal and stable-to-nightly matter more. Someone would have to put in the work to implement it though.</p>",
        "id": 261805841,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637165165
    },
    {
        "content": "<p>Stable to nightly regression is fixed after merging PR into master.</p>",
        "id": 261821365,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637171395
    },
    {
        "content": "<p>And stable to stable regression at least warrants a backport discussion to limit window of breakage.</p>",
        "id": 261821512,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637171451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Missed.20betaport/near/261821365\">said</a>:</p>\n<blockquote>\n<p>Stable to nightly regression is fixed after merging PR into master.</p>\n</blockquote>\n<p>Hmm, but sometimes regressions are marked as stable-to-nightly but after they were marked they made it to beta.</p>",
        "id": 261837862,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637178452
    },
    {
        "content": "<p>Well, they should progress from stable-to-nightly to stable-to-beta when cut-off happens.</p>",
        "id": 261838281,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637178597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Missed.20betaport/near/261838281\">said</a>:</p>\n<blockquote>\n<p>Well, they should progress from stable-to-nightly to stable-to-beta when cut-off happens.</p>\n</blockquote>\n<p>Yes, but currently it's manual and often forgotten. So protecting regression-from-stable-to-nightly issues as well might be good.</p>",
        "id": 261989340,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637268960
    },
    {
        "content": "<p>I think it's probably worthwhile to replace regression-to-{beta,nightly} with milestones + regression-next or something (bikeshed on the last one). Milestones automate the \"make sure it's up to date\" and are more broadly useful to tag not-strictly-regressions.</p>",
        "id": 261989639,
        "sender_full_name": "simulacrum",
        "timestamp": 1637269111
    },
    {
        "content": "<p>There's been several proposals in this area, just not been driven to conclusion yet.</p>",
        "id": 261989660,
        "sender_full_name": "simulacrum",
        "timestamp": 1637269130
    },
    {
        "content": "<p>Yep, I think everyone's generally in agreement that it'd be better to use version numbers. Just need to figure out the details.</p>",
        "id": 261993811,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637271062
    },
    {
        "content": "<p>So, I'll try to create a mental model of how this can be handled in the meanwhile, please fix my thinking.<br>\nThe idea (iiuc) is to ensure that all fixed/closed <code>regression-from-stable-to-{stable,beta}</code> are <code>{stable,beta}-nominated</code> and evaluated for a backport, correct?</p>",
        "id": 262044260,
        "sender_full_name": "apiraino",
        "timestamp": 1637313999
    },
    {
        "content": "<p>If yes, could perhaps a weekly check <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aclosed+label%3Aregression-from-stable-to-stable+label%3Aregression-from-stable-to-beta+-label%3Abeta-approved+-label%3Abeta-nominated+-label%3Astable-nominated+-label%3Astable-approved+\">with this filter</a> satisfy the requirement? I can save this link and run it before the weekly T-compiler triage meeting</p>",
        "id": 262044268,
        "sender_full_name": "apiraino",
        "timestamp": 1637314008
    },
    {
        "content": "<blockquote>\n<p>Yes, but currently it's manual and often forgotten. So protecting regression-from-stable-to-nightly issues as well might be good.</p>\n</blockquote>\n<p>(... and in case also add the regressions on nightly to such filter)</p>",
        "id": 262044465,
        "sender_full_name": "apiraino",
        "timestamp": 1637314168
    },
    {
        "content": "<p>Most <code>regressions-from-stable-to-stable</code> typically don't get considered for a backport at all, unless they are high-impact. One of the metrics that make such a regression higher impact if the regression is present in the latest stable release only.</p>",
        "id": 262047511,
        "sender_full_name": "nagisa",
        "timestamp": 1637316266
    },
    {
        "content": "<p>beta regressions, yeah, most of fixes for them should be considered one way or another.</p>",
        "id": 262047585,
        "sender_full_name": "nagisa",
        "timestamp": 1637316310
    },
    {
        "content": "<p>One solution, which only requires changes to tooling, is to get triagebot to advance the regression label automatically on release day.</p>",
        "id": 263051253,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1638211602
    },
    {
        "content": "<p>I think that's been discussed previously. Changing the tooling in some ways might require more work than switching to versioned labels. Also, the advantage of versioned labels is I think they might be a bit clearer for humans (or, at least, me).</p>",
        "id": 263077644,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638225588
    }
]