[
    {
        "content": "<p>just a reminder to <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> : we will be having our first design meeting for this four week cycle in 1 hour and 10 minutes.</p>",
        "id": 179622687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572612659
    },
    {
        "content": "<p>this week's topic is \"incremental dep-graph storage\"; see <a href=\"https://github.com/rust-lang/compiler-team/issues/199\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/199\">rust-lang/compiler-team#199</a></p>",
        "id": 179622721,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572612706
    },
    {
        "content": "<p>and also, there has been pre-meeting discussion over the last week over in a parallel <a href=\"#narrow/stream/131828-t-compiler/topic/dep-graph.20design.20meeting.20prep/near/179313679\" title=\"#narrow/stream/131828-t-compiler/topic/dep-graph.20design.20meeting.20prep/near/179313679\">zulip topic</a>. (My hope is that we will <em>start</em> today's meeting by summarizing any points that arose there or elsehwere, rather than presuming that everyone's already read through that thread or others.)</p>",
        "id": 179622861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572612792
    },
    {
        "content": "<p>notes from that parallel zulip topic were accumulated in this <a href=\"https://hackmd.io/9GgAXPtrRSiwBPsI6saa_A\" target=\"_blank\" title=\"https://hackmd.io/9GgAXPtrRSiwBPsI6saa_A\">hackmd document</a></p>",
        "id": 179623639,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572613360
    },
    {
        "content": "<blockquote>\n<p>and also, there has been pre-meeting discussion over the last week over in a parallel <a href=\"#narrow/stream/131828-t-compiler/topic/dep-graph.20design.20meeting.20prep/near/179313679\" title=\"#narrow/stream/131828-t-compiler/topic/dep-graph.20design.20meeting.20prep/near/179313679\">zulip topic</a>. (My hope is that we will <em>start</em> today's meeting by summarizing any points that arose there or elsehwere, rather than presuming that everyone's already read through that thread or others.)</p>\n</blockquote>\n<p>(the hope is indeed that the hackmd suffices :)</p>",
        "id": 179626548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572615628
    },
    {
        "content": "<p>One thing I would add is that you may want to refresh your memory on <a href=\"https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-11-DepGraph-persistence-PR62038/\" target=\"_blank\" title=\"https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-11-DepGraph-persistence-PR62038/\">the design meeting from 2019-10-11</a>, which discussed <a href=\"https://github.com/rust-lang/rust/issues/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62038\">#62038</a> -- I know I do.</p>",
        "id": 179626587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572615678
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-10-11\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-10-11\">zulip stream for aforementioned design meeting</a></p>",
        "id": 179626621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572615717
    },
    {
        "content": "<p>Shall we start the meeting?</p>",
        "id": 179628143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572616890
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- design meeting starting now! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here :)</p>",
        "id": 179628167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572616908
    },
    {
        "content": "<h1>Announcements</h1>",
        "id": 179628172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572616910
    },
    {
        "content": "<ul>\n<li>We just posted a <a href=\"https://blog.rust-lang.org/2019/11/01/nll-hard-errors.html\" target=\"_blank\" title=\"https://blog.rust-lang.org/2019/11/01/nll-hard-errors.html\">blog post about completing the transition to the new borrow checker</a></li>\n</ul>",
        "id": 179628253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572616951
    },
    {
        "content": "<p>thanks to <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, and <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> for pushing that forward (did I forget anyone?)</p>",
        "id": 179628319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572616995
    },
    {
        "content": "<p>also cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> since apparently they don't get notifications?? (they're in the user group, for sure...)</p>",
        "id": 179628343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617025
    },
    {
        "content": "<p>oh wait, they waved :)</p>",
        "id": 179628358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617034
    },
    {
        "content": "<p>OK, let's get started I guess :)</p>",
        "id": 179628522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617126
    },
    {
        "content": "<p>I guess we should start by setting the context a bit?</p>",
        "id": 179628539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617142
    },
    {
        "content": "<p>Last time on <a href=\"https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-11-DepGraph-persistence-PR62038/\" target=\"_blank\" title=\"https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-10-11-DepGraph-persistence-PR62038/\">2019-10-11</a> we discussed <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>'s PR that modified how we handle the dep-graph. Whereas today we read in the old dep-graph and then copy bits of it to create a new one, that PR had us modify the graph in place and then write out the final result.</p>",
        "id": 179628653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617196
    },
    {
        "content": "<p>That was a mid-way step towards an end-goal in which we load the previous dep-graph into memory but then never modify it all -- instead we write those changes out to disk in a streaming fashion, so that we only have to keep one copy in memory at a time</p>",
        "id": 179628685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617226
    },
    {
        "content": "<p>Is that accurate, <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> ?</p>",
        "id": 179628690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617228
    },
    {
        "content": "<p>(Good way for me to check myself...)</p>",
        "id": 179628699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617238
    },
    {
        "content": "<p>Seem accurate enough</p>",
        "id": 179628719,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617256
    },
    {
        "content": "<p>(One quick question -- did we discuss \"GC\" when talking about the previous PR?)</p>",
        "id": 179628800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617290
    },
    {
        "content": "<p>No.</p>",
        "id": 179628832,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617317
    },
    {
        "content": "<p>So, we created this <a href=\"https://hackmd.io/9GgAXPtrRSiwBPsI6saa_A#What-does-the-on-disk-format-look-like\" target=\"_blank\" title=\"https://hackmd.io/9GgAXPtrRSiwBPsI6saa_A#What-does-the-on-disk-format-look-like\">hackmd document</a> with various notes and questiosn -- I think probably the best way to start is to walk through the proposed design and try to answer some of the questions within</p>",
        "id": 179628844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617332
    },
    {
        "content": "<p>And the GC in this PR is for the key-value store used to store the graph. There's no GC on the graph itself.</p>",
        "id": 179628863,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617350
    },
    {
        "content": "<p>ok, let's start with a basic question</p>",
        "id": 179628872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617367
    },
    {
        "content": "<h1>What does the on-disk format look like?</h1>",
        "id": 179628890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617379
    },
    {
        "content": "<p>In particular, how do we store the graph <em>today</em>, and how does it change in this PR?</p>",
        "id": 179628904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617390
    },
    {
        "content": "<p>(Also, i'm going to be updating the design doc live with links to key comments and things, feel free to add things if you like, or use <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> to draw attention)</p>",
        "id": 179628969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617419
    },
    {
        "content": "<p>this is how the graph is stored today: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/dep_graph/serialized.rs#L13-L26\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/dep_graph/serialized.rs#L13-L26\">https://github.com/rust-lang/rust/blob/master/src/librustc/dep_graph/serialized.rs#L13-L26</a></p>",
        "id": 179629010,
        "sender_full_name": "mw",
        "timestamp": 1572617470
    },
    {
        "content": "<p>Yeah, so there's one big file that we encode automatically</p>",
        "id": 179629021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617484
    },
    {
        "content": "<p>The on disk format is basically just a list of <code>Action</code> here: <a href=\"https://github.com/rust-lang/rust/blob/9f268ad2f5009213d5f33fea02d359536cc89cec/src/librustc/dep_graph/serialized.rs#L340\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9f268ad2f5009213d5f33fea02d359536cc89cec/src/librustc/dep_graph/serialized.rs#L340\">https://github.com/rust-lang/rust/blob/9f268ad2f5009213d5f33fea02d359536cc89cec/src/librustc/dep_graph/serialized.rs#L340</a></p>\n<p>It's basically just a list of the changes, and when rustc runs, it appends more to the dep graph file.</p>",
        "id": 179629046,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617504
    },
    {
        "content": "<p>so when rustc starts, we read in all the actions to start</p>",
        "id": 179629108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617529
    },
    {
        "content": "<p>that's \"loading\" the dep-graph?</p>",
        "id": 179629115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617537
    },
    {
        "content": "<p>and presumably if a node is overwritten, we'll create it twice</p>",
        "id": 179629132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617557
    },
    {
        "content": "<p>Yeah, we apply all the actions to an empty dep graph basically.</p>",
        "id": 179629140,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617566
    },
    {
        "content": "<p>i.e., if we have a node in the dep-graph like <code>A -&gt; [B, C]</code> and it gets overwritten with <code>A -&gt; [D, E]</code>, we'll first create <code>A -&gt; [B, C]</code> and then trash that and create <code>A -&gt; [D, E]</code> to replace it?</p>",
        "id": 179629175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617597
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 179629187,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617609
    },
    {
        "content": "<p>The GC also does a similar thing where it notes down what was overwritten.</p>",
        "id": 179629218,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617641
    },
    {
        "content": "<p>(OK, and this in turn explains why you changed the in-memory format to be a <code>Box&lt;[Index]&gt;</code>, but we'll get to that)</p>",
        "id": 179629264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617646
    },
    {
        "content": "<p>One question I have, maybe dumb -- are we able to do this loading in parallel?</p>",
        "id": 179629277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617668
    },
    {
        "content": "<p>It happens in the background thread, so yes/no?</p>",
        "id": 179629311,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617698
    },
    {
        "content": "<p>do we start the background thread and then ensure that it has completed by the time we enter the \"incremental\" phase?</p>",
        "id": 179629346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617726
    },
    {
        "content": "<p>that does sound a bit wasteful. do we allocate those slices individually?</p>",
        "id": 179629354,
        "sender_full_name": "mw",
        "timestamp": 1572617735
    },
    {
        "content": "<p>They're allocated individually.</p>",
        "id": 179629474,
        "sender_full_name": "Zoxc",
        "timestamp": 1572617797
    },
    {
        "content": "<p>I guess maybe we should discuss the in-memory format just a bit :) topics kind of bleed in together. Just for context (and to check my understanding), currently we store all edges in one big vector, and how each node we store a pair of indices into that vector</p>",
        "id": 179629493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617819
    },
    {
        "content": "<p>so </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">edge_list_indices</span>: <span class=\"nc\">IndexVec</span><span class=\"o\">&lt;</span><span class=\"n\">SerializedDepNodeIndex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">edge_list_data</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">SerializedDepNodeIndex</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179629515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617836
    },
    {
        "content": "<p>but this is hard to \"update\"</p>",
        "id": 179629522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617844
    },
    {
        "content": "<p>because to remove a node from the middle you'd have to shift over the elements etc etc</p>",
        "id": 179629537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617862
    },
    {
        "content": "<p>so instead in the PR we are using</p>",
        "id": 179629547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617869
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">edges</span>: <span class=\"nc\">IndexVec</span><span class=\"o\">&lt;</span><span class=\"n\">DepNodeIndex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">DepNodeIndex</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179629561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617877
    },
    {
        "content": "<p>Are these <code>SerializedDepNodeIndex</code>es large enough to warrant removing them individually rather than all at once at some well specified point in process?</p>",
        "id": 179629631,
        "sender_full_name": "nagisa",
        "timestamp": 1572617912
    },
    {
        "content": "<p>in other words</p>",
        "id": 179629688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617972
    },
    {
        "content": "<p>i.e. an actual mark and sweep GC kind of thing at the end.</p>",
        "id": 179629694,
        "sender_full_name": "nagisa",
        "timestamp": 1572617977
    },
    {
        "content": "<p>how bad is it if we waste some slots in the edge vector?</p>",
        "id": 179629698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572617978
    },
    {
        "content": "<p>I think this is an interesting question, but it in the grand scheme of things it seems like a relatively minor point -- one best answered by measuring?</p>",
        "id": 179629776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618012
    },
    {
        "content": "<p>currently the <code>SerializedDepGraph</code> (which is the in-memory version we are using for the previous dep-graph) is just 4 flat arrays, which is pretty efficient</p>",
        "id": 179629788,
        "sender_full_name": "mw",
        "timestamp": 1572618022
    },
    {
        "content": "<p>it seems clear that we could optimize this in various ways, or maybe it's good enough as is?</p>",
        "id": 179629792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618028
    },
    {
        "content": "<p>Depends on how often we GC.</p>",
        "id": 179629802,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618035
    },
    {
        "content": "<p>I was hoping to move it to arena allocation</p>",
        "id": 179629814,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618049
    },
    {
        "content": "<p>I'm not clear on how we can say \"good enough as is\" (without data), given that one primary goal here is to reduce peak mem usage?</p>",
        "id": 179629867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618099
    },
    {
        "content": "<p>((but maybe \"need data\" was implicit in niko's comment, esp since they had just said \"best answered by measuring\" a few lines above...))</p>",
        "id": 179629943,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618131
    },
    {
        "content": "<p>That's more of a secondary goal, and it is already massively reduced.</p>",
        "id": 179629967,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618157
    },
    {
        "content": "<blockquote>\n<p>I was hoping to move it to arena allocation</p>\n</blockquote>\n<p>can you say a bit more what you mean by that?</p>",
        "id": 179629971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618159
    },
    {
        "content": "<p>do you mean allocating <code>&amp;'tcx [Index]</code> instead of <code>box&lt;[Index&gt;]</code>?</p>",
        "id": 179629983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618169
    },
    {
        "content": "<p>Yes</p>",
        "id": 179629993,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618177
    },
    {
        "content": "<p>The arenas would have to be moved earlier first</p>",
        "id": 179630019,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618200
    },
    {
        "content": "<p>in that case</p>",
        "id": 179630024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618203
    },
    {
        "content": "<p>well, why is that better than the vector?</p>",
        "id": 179630034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618207
    },
    {
        "content": "<p>i.e., it is still wasting the memory for the old slics</p>",
        "id": 179630042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618216
    },
    {
        "content": "<p>No allocation slowing down loading, and no memory fragmentation.</p>",
        "id": 179630058,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618234
    },
    {
        "content": "<p>can the data be read backwards so that overwritten entries can be ignored altogether?</p>",
        "id": 179630107,
        "sender_full_name": "mw",
        "timestamp": 1572618249
    },
    {
        "content": "<p>We don't waste any memory now. The old boxes are freed during loading</p>",
        "id": 179630111,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618251
    },
    {
        "content": "<p>There is allocation (of the arena) and there is fragmentation (within the arena) -- but ok, I definitely think this is a \"measure\" question. I'm willing to believe arena allocation is more efficienct since you're combining in a larger pool.</p>",
        "id": 179630137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618283
    },
    {
        "content": "<p>@mw Probably?</p>",
        "id": 179630141,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618287
    },
    {
        "content": "<p>Can you decode LEB128 backwards? =P</p>",
        "id": 179630174,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618324
    },
    {
        "content": "<p>ok, time check, it's 10:25</p>",
        "id": 179630184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618344
    },
    {
        "content": "<blockquote>\n<p>That's more of a secondary goal, and it is already massively reduced.</p>\n</blockquote>\n<p>This is actually important</p>",
        "id": 179630188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618350
    },
    {
        "content": "<p>The mem usage data quoted in the hackmd is based on perf runs from May</p>",
        "id": 179630194,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618361
    },
    {
        "content": "<blockquote>\n<p>Can you decode LEB128 backwards? =P</p>\n</blockquote>\n<p>We don't have to encode everything in LEB128.</p>",
        "id": 179630300,
        "sender_full_name": "mw",
        "timestamp": 1572618438
    },
    {
        "content": "<p>yep, it'd be good to get more up-to-date data</p>",
        "id": 179630303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618442
    },
    {
        "content": "<blockquote>\n<p>ok, time check, it's 10:25</p>\n</blockquote>\n<p>I was going to suggest that maybe we want to turn to Garbage Collection --</p>",
        "id": 179630315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618453
    },
    {
        "content": "<p>if memory reduction is a secondary goal, what is the primary goal then?</p>",
        "id": 179630328,
        "sender_full_name": "mw",
        "timestamp": 1572618467
    },
    {
        "content": "<p>(it seems like we've identified some interesting thoughts regarding loading, but there were some big questions around GC and I'd like to make sure we talk about it)</p>",
        "id": 179630333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618473
    },
    {
        "content": "<blockquote>\n<p>if memory reduction is a secondary goal, what is the primary goal then?</p>\n</blockquote>\n<p>but this is also imp't, maybe I misunderstood what <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> was saying</p>",
        "id": 179630383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618484
    },
    {
        "content": "<p>as a data point, I think we got a speedup in <code>proc_macro</code> by not using LEB128 for the RPC stuff</p>",
        "id": 179630389,
        "sender_full_name": "eddyb",
        "timestamp": 1572618486
    },
    {
        "content": "<p>LEB128 is just for saving disk space</p>",
        "id": 179630414,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618505
    },
    {
        "content": "<p>The goal of the PR is performance, not having to store 2 dep graph in memory is a happy side effect =P</p>",
        "id": 179630438,
        "sender_full_name": "Zoxc",
        "timestamp": 1572618539
    },
    {
        "content": "<blockquote>\n<p>That's more of a secondary goal, and it is already massively reduced.</p>\n</blockquote>\n<p>I thought <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> was saying here that the question of memory usage around edges was of secondary imporance</p>",
        "id": 179630463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618560
    },
    {
        "content": "<p>ok, I guess I misunderstood :)</p>",
        "id": 179630471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618571
    },
    {
        "content": "<p>it seems though that we don't actually get many perf wins</p>",
        "id": 179630478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618578
    },
    {
        "content": "<p>but perhaps I am misreading the perf results?</p>",
        "id": 179630486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618585
    },
    {
        "content": "<p>I was debating if I should have kicked off the meeting with a \"goals\" discussion --</p>",
        "id": 179630511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618601
    },
    {
        "content": "<p>but let's do it now :)</p>",
        "id": 179630556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618605
    },
    {
        "content": "<p>persisting the dep-graph already happens \"in the background\" for cases where LLVM is doing something</p>",
        "id": 179630569,
        "sender_full_name": "mw",
        "timestamp": 1572618617
    },
    {
        "content": "<p>at least if I remember correctly and the situation hasn't changed</p>",
        "id": 179630690,
        "sender_full_name": "mw",
        "timestamp": 1572618637
    },
    {
        "content": "<p>three advantages listed in hackmd doc <a href=\"https://hackmd.io/9GgAXPtrRSiwBPsI6saa_A?view#Advantages\" target=\"_blank\" title=\"https://hackmd.io/9GgAXPtrRSiwBPsI6saa_A?view#Advantages\">here</a></p>",
        "id": 179630733,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618641
    },
    {
        "content": "<p>yeah</p>",
        "id": 179630742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618657
    },
    {
        "content": "<ol>\n<li>Lower Peak Memory Usage</li>\n<li>Avoids blocking on writing out dep graph at end of compilation</li>\n<li>Avoids work of re-writing unchanged portions of dep-graph</li>\n</ol>",
        "id": 179630764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618688
    },
    {
        "content": "<p>it seems like the biggest wins come from memory usage (e.g., reduction of peak usage by 30% in some cases), but we do see some performance wins too (I saw measurements that suggested max wins of about 5%?)</p>",
        "id": 179630781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618709
    },
    {
        "content": "<p>but obviously conceptually it is better to avoid having to rewrite the whole graph</p>",
        "id": 179630827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> do you agree all of these remain boons acheived in this PR (we can side-step question of primary vs secondary for moment...)</p>",
        "id": 179630833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618735
    },
    {
        "content": "<p>I'd love to have data on 3</p>",
        "id": 179630891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618802
    },
    {
        "content": "<p>don't we?</p>",
        "id": 179630913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618834
    },
    {
        "content": "<p>we have runs where literally nothing changes</p>",
        "id": 179630920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618838
    },
    {
        "content": "<p>(perf.rlo doesn't seem to work for me, right :/)</p>",
        "id": 179630922,
        "sender_full_name": "mw",
        "timestamp": 1572618841
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/detailed-query.html?commit=c553e8e8812c19809e70523064989e66c5cfd3f1&amp;benchmark=inflate-debug&amp;run_name=clean%20incremental\" target=\"_blank\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=c553e8e8812c19809e70523064989e66c5cfd3f1&amp;benchmark=inflate-debug&amp;run_name=clean%20incremental\">https://perf.rust-lang.org/detailed-query.html?commit=c553e8e8812c19809e70523064989e66c5cfd3f1&amp;benchmark=inflate-debug&amp;run_name=clean%20incremental</a></p>",
        "id": 179630967,
        "sender_full_name": "mw",
        "timestamp": 1572618848
    },
    {
        "content": "<p>if you search for <code>dep_graph</code> you can see how much time we spend on it</p>",
        "id": 179630996,
        "sender_full_name": "mw",
        "timestamp": 1572618881
    },
    {
        "content": "<p>i.e. on loading and persisting it</p>",
        "id": 179631004,
        "sender_full_name": "mw",
        "timestamp": 1572618892
    },
    {
        "content": "<blockquote>\n<p>we have runs where literally nothing changes</p>\n</blockquote>\n<p>yeah but I meant in the not-quite-so trivial cases</p>",
        "id": 179631005,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618893
    },
    {
        "content": "<p>e.g. when you change just comments</p>",
        "id": 179631011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618900
    },
    {
        "content": "<p>(vs touching a file)</p>",
        "id": 179631029,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618908
    },
    {
        "content": "<p>ok, i'm not sure why that number is interesting, but it seems gatherable :)</p>",
        "id": 179631046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572618929
    },
    {
        "content": "<p>the link above should be the worst case for the current impl</p>",
        "id": 179631067,
        "sender_full_name": "mw",
        "timestamp": 1572618953
    },
    {
        "content": "<p>no changes, nothing for LLVM to do</p>",
        "id": 179631121,
        "sender_full_name": "mw",
        "timestamp": 1572618965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> you mean \"run clean incremental\" in general, right? Not just for inflate-debug in particular ?</p>",
        "id": 179631188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619021
    },
    {
        "content": "<p>\"clean incremental\" in general</p>",
        "id": 179631216,
        "sender_full_name": "mw",
        "timestamp": 1572619044
    },
    {
        "content": "<blockquote>\n<p>it seems like the biggest wins come from memory usage (e.g., reduction of peak usage by 30% in some cases), but we do see some performance wins too (I saw measurements that suggested max wins of about 5%?)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> do you agree with this? did I miss some measurements?</p>",
        "id": 179631300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619104
    },
    {
        "content": "<p>(also, other thoughts around goals?)</p>",
        "id": 179631323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619134
    },
    {
        "content": "<p>(5% seems like a realistic upper bound at the moment)</p>",
        "id": 179631386,
        "sender_full_name": "mw",
        "timestamp": 1572619185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Yeah</p>",
        "id": 179631387,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Seems to be about 4-9%, but there's probably some stuff that can be made faster</p>",
        "id": 179631529,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619281
    },
    {
        "content": "<p>(what is an example that gets 9%?)</p>",
        "id": 179631613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619341
    },
    {
        "content": "<p>doesn't matter, I can look later</p>",
        "id": 179631620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619351
    },
    {
        "content": "<p>shall we discuss GC?</p>",
        "id": 179631629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619357
    },
    {
        "content": "<p>I figure I'll just point out unused-warnings-check is a benchmark</p>",
        "id": 179631631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619363
    },
    {
        "content": "<p>regex</p>",
        "id": 179631632,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619363
    },
    {
        "content": "<p>(we're at 42 minutes)</p>",
        "id": 179631633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619363
    },
    {
        "content": "<p>unused-warnings-check is benchmark where clean incremental currently costs more than clean</p>",
        "id": 179631644,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619376
    },
    {
        "content": "<p>(and I believe, based on analysis I did some weeks ago, that is solely to due cost of unnecessarily re-writing the dep graph. This work would fix that.)</p>",
        "id": 179631682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619420
    },
    {
        "content": "<p>cool</p>",
        "id": 179631691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619431
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/compare.html?start=eeedd3a6e15d43d0cd3e860f36be737cb2c941ca&amp;end=cfe977fc791e1a9305d2b79e47b448dfa50abb4a\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=eeedd3a6e15d43d0cd3e860f36be737cb2c941ca&amp;end=cfe977fc791e1a9305d2b79e47b448dfa50abb4a\">may 7 perf results</a></p>",
        "id": 179631747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619453
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/vWAgmYoC5U2ZHC7nhr325Soj/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vWAgmYoC5U2ZHC7nhr325Soj/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/vWAgmYoC5U2ZHC7nhr325Soj/pasted_image.png\"></a></div>",
        "id": 179631789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619487
    },
    {
        "content": "<p>that is CPU clock</p>",
        "id": 179631798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619493
    },
    {
        "content": "<p>hmm that does not support my claim</p>",
        "id": 179631801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619495
    },
    {
        "content": "<p>keep in mind the default is instructions, which doesn't show parallelism wins -- but still interesting!</p>",
        "id": 179631826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619510
    },
    {
        "content": "<p>I'd expect in this case to see wins from instructions?</p>",
        "id": 179631839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619516
    },
    {
        "content": "<p>GC reads the dep graph file again, notes down the byte positions of stuff getting overwritten and deleted, and then writes the rest back as raw bytes. So it skips LEB128 encoding, but still needs LEB128 decoding when loading the file.</p>",
        "id": 179631841,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619517
    },
    {
        "content": "<p>still, I'd really like to spend some time on GC :hint hint:</p>",
        "id": 179631874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619546
    },
    {
        "content": "<p>so can we talk about that and come back to the measurements?</p>",
        "id": 179631882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> you mentioned early on that that the current PR doesn't do any GC on the dep graph?</p>",
        "id": 179631946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619573
    },
    {
        "content": "<p>so the GC as implemented in the PR just removes \"actions\" from the stream that are later overwritten?</p>",
        "id": 179631981,
        "sender_full_name": "mw",
        "timestamp": 1572619616
    },
    {
        "content": "<p>For context, the need for GC  can arise for two reasons (copying from hackmd):</p>\n<ul>\n<li>Graph nodes that were overwritten with a new set of dependencies in the latest compilation</li>\n<li>Graph nodes that were never used in the latest compilation (e.g., type-checking nodes for functions that were deleted)</li>\n</ul>",
        "id": 179631982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619616
    },
    {
        "content": "<p>Yes. It just removes stuff that isn't in the graph anymore. It removes the redundant actions from the file. It isn't an operation on the graph itself.</p>",
        "id": 179632018,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619643
    },
    {
        "content": "<p>it also does not seem to compact the used <code>DepNodeIndex</code> range, right?</p>",
        "id": 179632055,
        "sender_full_name": "mw",
        "timestamp": 1572619676
    },
    {
        "content": "<p>It's just an internal detail of the key-value store we encode the dep graph onto</p>",
        "id": 179632057,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619678
    },
    {
        "content": "<p>It does nothing to dep node indices.</p>",
        "id": 179632123,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619700
    },
    {
        "content": "<p>I'm wondering where it fits in the \"pipeline\" --</p>",
        "id": 179632136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619711
    },
    {
        "content": "<p>so the in-memory representation of the graph would keep growing</p>",
        "id": 179632155,
        "sender_full_name": "mw",
        "timestamp": 1572619712
    },
    {
        "content": "<p>when we start, we read the actions in</p>",
        "id": 179632178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619725
    },
    {
        "content": "<p>and build a graph</p>",
        "id": 179632182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619727
    },
    {
        "content": "<p>then we append new actions to the file</p>",
        "id": 179632186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619737
    },
    {
        "content": "<p>but sometimes we run the GC and .. overwrite the file so as to prune old actions?</p>",
        "id": 179632200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619747
    },
    {
        "content": "<p>when do we run this GC relative to other things?</p>",
        "id": 179632204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619754
    },
    {
        "content": "<blockquote>\n<p>so the in-memory representation of the graph would keep growing</p>\n</blockquote>\n<p>presumably the next compilation will load a \"pruned\" action list, right?</p>",
        "id": 179632212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619763
    },
    {
        "content": "<p>@mw Only if the indices get fragmented, they are reused as in the previous PR</p>",
        "id": 179632213,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619765
    },
    {
        "content": "<p>ah, yeah, it can keep growing from fragmentation</p>",
        "id": 179632235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619789
    },
    {
        "content": "<p>We load the dep graph first. If we notice a lot of garbage we run the GC on dep graph file. All this happens in the background thread and anything incremental in the compiler is blocked on it</p>",
        "id": 179632329,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619830
    },
    {
        "content": "<p>OK, so the full pipeline is something like:</p>\n<ul>\n<li>read actions from the file</li>\n<li>apply actions to empty graph, building up a new graph</li>\n<li>if we see \"a lot\" of garbage, run the GC and write the data back</li>\n<li>else, incremental queries can begin</li>\n<li>any new node created during incremental queries is \"appended\" to the file</li>\n</ul>",
        "id": 179632407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619898
    },
    {
        "content": "<p>Yeah. This means that right after a GC, rustc will crate more garbage =P</p>",
        "id": 179632488,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619957
    },
    {
        "content": "<p>how do we measure the \"amount\" of garbage?</p>",
        "id": 179632504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619969
    },
    {
        "content": "<p>is that \"overwritten\" actions?</p>",
        "id": 179632515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572619975
    },
    {
        "content": "<p>Yeah. We record the bytes of overwritten and non-overwritten actions and use a ratio to trigger GC</p>",
        "id": 179632541,
        "sender_full_name": "Zoxc",
        "timestamp": 1572619998
    },
    {
        "content": "<p>ok. so I don't quite see where \"unreachable\"  nodes get collected</p>",
        "id": 179632559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620013
    },
    {
        "content": "<p>(I'd be interested in how an alternative approach (that also does DepNodeIndex compaction and graph node GC) does: Still rewrite the whole dep-graph, but \"stream\" it to disk in the background. That should be doable with minimal changes and might have most of the benefits.)</p>",
        "id": 179632632,
        "sender_full_name": "mw",
        "timestamp": 1572620062
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 179632635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620064
    },
    {
        "content": "<p>so when nodes are first loaded from the disk, they are \"grey\" or something, right? and we give them a color if they are used</p>",
        "id": 179632665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Those don't relate to the key value store and I'm not sure what you mean by that either</p>",
        "id": 179632677,
        "sender_full_name": "Zoxc",
        "timestamp": 1572620097
    },
    {
        "content": "<p>so presumably at the end of compilation, we can look at those colors to see nodes that were not relevant</p>",
        "id": 179632679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620098
    },
    {
        "content": "<blockquote>\n<p>It just removes stuff that isn't in the graph anymore. It removes the redundant actions from the file. It isn't an operation on the graph itself.</p>\n</blockquote>\n<p>maybe part of the point <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> 's been saying above</p>",
        "id": 179632718,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Those nodes are deleted from the dep graph (in the previous PR).</p>",
        "id": 179632721,
        "sender_full_name": "Zoxc",
        "timestamp": 1572620141
    },
    {
        "content": "<p>in other words, that's an action?</p>",
        "id": 179632735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620155
    },
    {
        "content": "<p>that gets added at the end?</p>",
        "id": 179632783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620164
    },
    {
        "content": "<p>i.e., there is some final step that says \"if this node never got a color, delete it\"?</p>",
        "id": 179632806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620179
    },
    {
        "content": "<p>(iterating over all previous nodes)</p>",
        "id": 179632815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620188
    },
    {
        "content": "<p>There is yes.</p>",
        "id": 179632820,
        "sender_full_name": "Zoxc",
        "timestamp": 1572620193
    },
    {
        "content": "<p>OK, that makes sense. Neat.</p>",
        "id": 179632833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620203
    },
    {
        "content": "<blockquote>\n<p>(I'd be interested in how an alternative approach (that also does DepNodeIndex compaction and graph node GC) does: Still rewrite the whole dep-graph, but \"stream\" it to disk in the background. That should be doable with minimal changes and might have most of the benefits.)</p>\n</blockquote>\n<p>maybe we want .. hmm, ok, 3 minuts :)</p>",
        "id": 179632896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620259
    },
    {
        "content": "<p>I was going to say <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> that maybe you could say a bit more what you have in mind :)</p>",
        "id": 179632910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I think we can do something like that if we spot dep node indices fragmentation, but I don't know if that is a problem is practice though.</p>",
        "id": 179632963,
        "sender_full_name": "Zoxc",
        "timestamp": 1572620285
    },
    {
        "content": "<p>but maybe we should try to wrap-up and leave that for follow-up?</p>",
        "id": 179632964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620285
    },
    {
        "content": "<p>But that is a lot of complexity for something we that don't know is a problem</p>",
        "id": 179632994,
        "sender_full_name": "Zoxc",
        "timestamp": 1572620318
    },
    {
        "content": "<p>yeah, I only would consider it if it <em>really</em> is a small diff to the current implementation</p>",
        "id": 179633040,
        "sender_full_name": "mw",
        "timestamp": 1572620362
    },
    {
        "content": "<p>if it would turn out to be complex, I'd rather do something that is append-only</p>",
        "id": 179633060,
        "sender_full_name": "mw",
        "timestamp": 1572620386
    },
    {
        "content": "<p>so, the is an invalidation action in the stream that takes care of dep-graph GC?</p>",
        "id": 179633141,
        "sender_full_name": "mw",
        "timestamp": 1572620424
    },
    {
        "content": "<p>OK, well, it's the end of the meeting -- I found this pretty helpful for understanding the PR, at least.</p>",
        "id": 179633153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620432
    },
    {
        "content": "<p>I've been trying to take minutes as we went and update the document</p>",
        "id": 179633166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620443
    },
    {
        "content": "<p>I'm not 100% sure how we go from here to a <em>final</em> decision</p>",
        "id": 179633202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620471
    },
    {
        "content": "<p>There was something totally orthogonal to the topic that I wanted to mention</p>",
        "id": 179633211,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620483
    },
    {
        "content": "<p>(But I think first step would be to take a moment to digest comments and review code and compare against them)</p>",
        "id": 179633232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620499
    },
    {
        "content": "<blockquote>\n<p>There was something totally orthogonal to the topic that I wanted to mention</p>\n</blockquote>\n<p>go for it..</p>",
        "id": 179633236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620503
    },
    {
        "content": "<p>I have beta-nom'ed this PR: <a href=\"https://github.com/rust-lang/rust/issues/66018\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66018\">#66018</a></p>",
        "id": 179633242,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620514
    },
    {
        "content": "<p>I think we discussed this in the compiler team meeting yesterday</p>",
        "id": 179633299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620526
    },
    {
        "content": "<p>its a revert of the <em>semantic effect</em> of PR <a href=\"https://github.com/rust-lang/rust/issues/64324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64324\">#64324</a></p>",
        "id": 179633314,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620540
    },
    {
        "content": "<p>(I believe)</p>",
        "id": 179633327,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620550
    },
    {
        "content": "<blockquote>\n<p>I'm not 100% sure how we go from here to a <em>final</em> decision</p>\n</blockquote>\n<p>I'd like to know more about the fragmentation problem before making a decision. I.e. a risk assessment and possible solutions</p>",
        "id": 179633355,
        "sender_full_name": "mw",
        "timestamp": 1572620572
    },
    {
        "content": "<p>or really,I should have phrased the beta-nom this way:</p>",
        "id": 179633383,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620594
    },
    {
        "content": "<p>beta-nom: \"Revert PR 64324: dylibs export generics again (for now)\" <a href=\"https://github.com/rust-lang/rust/issues/66018\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66018\">#66018</a></p>",
        "id": 179633389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620603
    },
    {
        "content": "<p>(I would personally wait for it to get r+'ed and land in Nightly before doing backport)</p>",
        "id": 179633417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620638
    },
    {
        "content": "<blockquote>\n<p>I'd like to know more about the fragmentation problem before making a decision. I.e. a risk assessment and possible solutions</p>\n</blockquote>\n<p>it seems like a good thing would be to accumulate the things we'd like to investigate further</p>",
        "id": 179633519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620694
    },
    {
        "content": "<p>there is a \"open question\" at the end of the hackmd</p>",
        "id": 179633614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620757
    },
    {
        "content": "<p>I'll add it there</p>",
        "id": 179633620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620759
    },
    {
        "content": "<p>I'll add my Q about whether this resolves the unused-warnings perf oddity</p>",
        "id": 179633696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620796
    },
    {
        "content": "<p>heh oh I realize now you meant that you actually edit the doc</p>",
        "id": 179633742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620837
    },
    {
        "content": "<p>go for it:)</p>",
        "id": 179633744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620840
    },
    {
        "content": "<p>though I sort of did so</p>",
        "id": 179633748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620844
    },
    {
        "content": "<p>(though I wouldn't block landing this on finding the answer to that)</p>",
        "id": 179633757,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620850
    },
    {
        "content": "<p>I'd also like <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> to understand a bit better what the alternative design you mention looks like, and if it's really possible in a small diff</p>",
        "id": 179633780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620866
    },
    {
        "content": "<blockquote>\n<p>though I sort of did so</p>\n</blockquote>\n<p>does anyone mind if I change the links to point to zulip-archive.rlo ?</p>",
        "id": 179633836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620886
    },
    {
        "content": "<p>I sort of do</p>",
        "id": 179633865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620907
    },
    {
        "content": "<p>those are significantly more annoying to read</p>",
        "id": 179633870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620913
    },
    {
        "content": "<p>I guess I don't <em>really</em> though</p>",
        "id": 179633877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620919
    },
    {
        "content": "<p>yeah but you have to login otherwise</p>",
        "id": 179633878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620920
    },
    {
        "content": "<p>/me doesn't care</p>",
        "id": 179633883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620925
    },
    {
        "content": "<p>so its less open</p>",
        "id": 179633884,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620926
    },
    {
        "content": "<p>heh</p>",
        "id": 179633891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620931
    },
    {
        "content": "<p>I won't stop you :)</p>",
        "id": 179633898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620937
    },
    {
        "content": "<p>don't the zulip-archive posts link over here anyway?</p>",
        "id": 179633902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620941
    },
    {
        "content": "<p>so its a \"lossless\" transformation?</p>",
        "id": 179633908,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620949
    },
    {
        "content": "<p>I guess that would satisfy my use case :)</p>",
        "id": 179633910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572620952
    },
    {
        "content": "<p>I'll verify that claim</p>",
        "id": 179633924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620964
    },
    {
        "content": "<p>(clearly we should just \"fix\" zulip archive to be more readable...)</p>",
        "id": 179633957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620994
    },
    {
        "content": "<p>((the presentation there does lose some stuff, e.g. the emojis))</p>",
        "id": 179634021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572621016
    },
    {
        "content": "<p>I think they do link back to Zulip, so it's strictly better to use the archive for anything public</p>",
        "id": 179634023,
        "sender_full_name": "eddyb",
        "timestamp": 1572621019
    },
    {
        "content": "<p>side note, I wonder if we can extend zulip somehow with a feature to make it easy to copy links to the archive</p>",
        "id": 179634081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572621065
    },
    {
        "content": "<p>although I guess applying a regex to the files in the github repo is probably easy enough</p>",
        "id": 179634092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572621082
    },
    {
        "content": "<p>OK, thanks everyone, and especially <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 179634297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572621218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> when you've finished updating URLs, do you want to upload the doc to compiler-team repo?</p>",
        "id": 179634443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572621331
    },
    {
        "content": "<p>okay sure</p>",
        "id": 179634525,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572621374
    },
    {
        "content": "<blockquote>\n<p>I'd also like <span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> to understand a bit better what the alternative design you mention looks like, and if it's really possible in a small diff</p>\n</blockquote>\n<p>I've added an outline to the hackmd doc</p>",
        "id": 179634968,
        "sender_full_name": "mw",
        "timestamp": 1572621705
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> when you've finished updating URLs, do you want to upload the doc to compiler-team repo?</p>\n</blockquote>\n<p>okay posted as <a href=\"https://github.com/rust-lang/compiler-team/issues/214\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/214\">rust-lang/compiler-team#214</a></p>",
        "id": 179635391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572621976
    },
    {
        "content": "<p>(oh, and, I'm taking the <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-11-01/near/179633242\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-11-01/near/179633242\">above discussion</a> of PR <a href=\"https://github.com/rust-lang/rust/issues/66018\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66018\">#66018</a> as a approval for beta-backport</p>",
        "id": 179635530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572622082
    }
]