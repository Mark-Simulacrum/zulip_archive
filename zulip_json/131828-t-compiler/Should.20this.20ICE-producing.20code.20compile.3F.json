[
    {
        "content": "<p>I'm running into an GAT-related ICE, and I'm not sure if:</p>\n<ol>\n<li>Once the ICE is fixed and GATs are landed, the code will compile and work.</li>\n<li>The code is nonsensical, and eventually it will be rejected by the compiler with a proper error message.</li>\n</ol>\n<p>A minimal reproduction is here:</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=70754f24026748d70ef46f2e85af76bd\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=70754f24026748d70ef46f2e85af76bd</a></p>\n<p>The error is <code>error: internal compiler error: impl item and trait item have different parameter counts</code>, which is the same as in <a href=\"https://github.com/rust-lang/rust/issues/68648\">this issue</a>.</p>\n<p>I put a comment before the bit that confuses me. Basically, I'm trying to bound an associated type like so: <code>type Bar: Bar&lt;Foo = Self&gt;;</code> but, inside of <code>Bar</code>, <code>Foo</code> is <code>    type Foo&lt;T&gt;;</code>, i.e. a GAT.</p>\n<p>Does this bound make sense/is it something that might eventually compile? Trying to bound a GAT with a concrete type seems sketchy to me, but I'm not particularly sure of myself.</p>",
        "id": 211213576,
        "sender_full_name": "Casey Rodarmor",
        "timestamp": 1601002899
    },
    {
        "content": "<p>Maybe it does make sense: When Foo&lt;T&gt; is instantiated, Foo::Bar will be a concrete type, and thus <code>Foo::Bar::Foo</code> will be a concrete type, and thus can be bounded by a concrete type. Is that the right logic?</p>",
        "id": 211213947,
        "sender_full_name": "Casey Rodarmor",
        "timestamp": 1601003385
    },
    {
        "content": "<p>So, I don't think your repro is valid, in part because I don't think Rust has the syntax to deal with this (yet).</p>",
        "id": 211216799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007303
    },
    {
        "content": "<p>Consider an alternative program:</p>",
        "id": 211216808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007314
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=513f409ce0e6cb208d9cfac5679538a5\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=513f409ce0e6cb208d9cfac5679538a5</a></p>",
        "id": 211216869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007385
    },
    {
        "content": "<p>This is pretty similar to your program, except there aren't any GATs</p>",
        "id": 211216873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007411
    },
    {
        "content": "<p>That <code>type X: Bar&lt;Y = Self&gt;;</code> on <code>Foo</code> is basically your <code>type Bar: Bar&lt;Foo = Self&gt;;</code></p>",
        "id": 211216887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007441
    },
    {
        "content": "<p>Basically, you're missing a generic</p>",
        "id": 211216956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007547
    },
    {
        "content": "<p>Now, I haven't fully wrapped my head around this example and whether it <em>should</em> work (and what would need to be changed/added)</p>",
        "id": 211216970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007586
    },
    {
        "content": "<p>But hopefully that helps a bit</p>",
        "id": 211216975,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007592
    },
    {
        "content": "<p>Unfortunately this is coming up in a project I'm working on where the generic cannot be removed, unlike in the example.</p>\n<blockquote>\n<p>Jack Huey: So, I don't think your repro is valid, in part because I don't think Rust has the syntax to deal with this (yet).</p>\n</blockquote>\n<p>Can you elaborate? Do you mean that what I wrote won't work without additional syntax?</p>",
        "id": 211217126,
        "sender_full_name": "Casey Rodarmor",
        "timestamp": 1601007757
    },
    {
        "content": "<p>Give me a second. I'll think a bit more</p>",
        "id": 211217195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601007846
    },
    {
        "content": "<p>Hmm, so maybe this should work, since you aren't using the <code>T</code> on <code>Bar::Foo</code></p>",
        "id": 211217403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601008182
    },
    {
        "content": "<p>I would be interested to see if this compiles with <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a></p>",
        "id": 211217461,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601008214
    },
    {
        "content": "<p>If you wanted to use the <code>T</code> from <code>Bar::Foo</code> in the bound on <code>Foo::Bar</code>, then I think that's where syntax is a problem. (And indeed, the assumption that we can't name GAT generics in projection bounds is probably what is breaking here)</p>",
        "id": 211217568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601008388
    },
    {
        "content": "<p>Do you think this is the same as <a href=\"https://github.com/rust-lang/rust/issues/68648\">#68648</a>?</p>\n<p>I'll see if I can manage to get that commit building locally and try it out!</p>",
        "id": 211217923,
        "sender_full_name": "Casey Rodarmor",
        "timestamp": 1601008942
    },
    {
        "content": "<p>Yep! That looks like the same problem. Specifically, this bit: <code>T: Fun&lt;F = T&gt;</code> from that issue</p>",
        "id": 211218003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601009078
    },
    {
        "content": "<p>Also found in <a href=\"https://github.com/rust-lang/rust/issues/71176\">#71176</a></p>",
        "id": 211218034,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601009139
    },
    {
        "content": "<p>Interestingly, <a href=\"https://github.com/rust-lang/rust/issues/68648\">#68648</a> still fails with the same ICE when using rustc build from that PR, but the example I gave fails with a different ICE: <code>type parameter T/#1 (T/1) out of range when substituting, substs=[&lt;Self as Foo&lt;T&gt;&gt;::Bar]</code></p>",
        "id": 211221903,
        "sender_full_name": "Casey Rodarmor",
        "timestamp": 1601014547
    },
    {
        "content": "<p>I made a repo with all the snippets and compilation errors and commented here: <a href=\"https://github.com/rust-lang/rust/pull/73905#issuecomment-698751243\">https://github.com/rust-lang/rust/pull/73905#issuecomment-698751243</a></p>",
        "id": 211223093,
        "sender_full_name": "Casey Rodarmor",
        "timestamp": 1601015899
    },
    {
        "content": "<p>The ICEs are still all there, but the error messages are more informative. Feels like a win ;)</p>",
        "id": 211223101,
        "sender_full_name": "Casey Rodarmor",
        "timestamp": 1601015923
    }
]