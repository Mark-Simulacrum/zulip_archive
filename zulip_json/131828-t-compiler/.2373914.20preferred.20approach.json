[
    {
        "content": "<p>looking into <a href=\"https://github.com/rust-lang/rust/issues/73914\">#73914</a> - quick question:</p>\n<p>this occurs because of the <code>(u64, bool)</code> return type of <code>CheckedAdd</code> in the MIR (which isn't in the HIR, it is created during MIR building) - is the correct approach here to mark the local decl for that return type as internal so that <code>sanitize_witness</code> skips the local; or to add to typeck's generator interior computation with the return type of <code>CheckedAdd</code> (and similar) so that the local is found?</p>",
        "id": 202698724,
        "sender_full_name": "davidtwco",
        "timestamp": 1593701434
    },
    {
        "content": "<p>that local is a synthetic/temp, the local from the HIR should be assigned to right after the overflow assertion and take its value from the <code>u64</code> field of that tuple</p>",
        "id": 202699088,
        "sender_full_name": "oli",
        "timestamp": 1593701600
    },
    {
        "content": "<p>I'm not sure what \"marking as internal\" means though, as I don't know anything about generators</p>",
        "id": 202699134,
        "sender_full_name": "oli",
        "timestamp": 1593701624
    },
    {
        "content": "<p>\"Internal\" locals just avoid this specific assertion, they're currently used for drop flags I believe</p>",
        "id": 202699253,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593701672
    },
    {
        "content": "<p>I don't think you want to add the tuple to the typeck view of the generator, typeck is only interested in user-written types</p>",
        "id": 202699304,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593701707
    },
    {
        "content": "<p>that was my thinking - so marking the local as internal would be the appropriate way of dealing with this?</p>",
        "id": 202699332,
        "sender_full_name": "davidtwco",
        "timestamp": 1593701726
    },
    {
        "content": "<p>Hmm, what's the expected order of evaluation for <code>*new().await = 1 + 1;</code>? I'm assuming the await happens first, and then <code>1 + 1</code> is evaluated? If so, I don't understand why the result of that is live across the await.</p>",
        "id": 202699814,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593701958
    },
    {
        "content": "<p>oh, I'm not sure.</p>",
        "id": 202700152,
        "sender_full_name": "davidtwco",
        "timestamp": 1593702111
    },
    {
        "content": "<p>If it is expected to be live across the await, then yeah, marking it as internal is the way to go. If not then something else is wrong.</p>",
        "id": 202700261,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593702164
    },
    {
        "content": "<p>So the code to generate checked operations is here: <a href=\"https://github.com/rust-lang/rust/blob/819cde5dabd90dab1fb462cd713457421d0ebd36/src/librustc_mir_build/build/expr/as_rvalue.rs#L283-L283\">https://github.com/rust-lang/rust/blob/819cde5dabd90dab1fb462cd713457421d0ebd36/src/librustc_mir_build/build/expr/as_rvalue.rs#L283-L283</a><br>\nThe issue is that we don't read the field of the tuple returned from <code>CheckedAdd</code> until after evaluating the RHS.</p>",
        "id": 202700624,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1593702332
    },
    {
        "content": "<p>Ah, okay</p>",
        "id": 202700916,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593702460
    },
    {
        "content": "<p>Ah, I see, the assert happens immediately, but the use of the result will project through the tuple, keeping it live across the await</p>",
        "id": 202701067,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593702525
    },
    {
        "content": "<p>That makes sense - that makes me think the correct solution is to mark that local as internal - is that right, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>?  I could imagine that another fix would involve changing how the MIR is built so that only the one field needs to be kept over the yield - but I don't think that's what we'd want?</p>",
        "id": 202701677,
        "sender_full_name": "davidtwco",
        "timestamp": 1593702806
    },
    {
        "content": "<p>Internal sounds fine for this</p>",
        "id": 202702282,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593703059
    },
    {
        "content": "<p>I think that mir construction artifacts are fine to mark internal.</p>",
        "id": 202702492,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1593703155
    },
    {
        "content": "<p>thanks!</p>",
        "id": 202702517,
        "sender_full_name": "davidtwco",
        "timestamp": 1593703170
    }
]