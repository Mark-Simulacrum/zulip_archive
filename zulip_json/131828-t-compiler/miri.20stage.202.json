[
    {
        "content": "<p>Sorry if this is in the docs somewhere, but why does Miri require a stage 2 compiler?</p>",
        "id": 215044556,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604017050
    },
    {
        "content": "<p>it does? I thought it linked to stage 1</p>",
        "id": 215045281,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604017888
    },
    {
        "content": "<p>If you try to link to stage 1 you get errors like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0463]: can&#39;t find crate for `rustc_attr`\n  --&gt; src/lib.rs:14:1\n   |\n14 | extern crate rustc_attr;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^ can&#39;t find crate\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 215045942,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604018656
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/78435#issuecomment-719054685\">this</a> and <a href=\"https://github.com/rust-lang/miri/blob/master/CONTRIBUTING.md#building-miri-with-a-locally-built-rustc\">this</a>.</p>",
        "id": 215045960,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604018694
    },
    {
        "content": "<p>those instructions look strange, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> why do they suggest to build <code>src/rustc</code>?</p>",
        "id": 215046181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604018900
    },
    {
        "content": "<p>They're out of date. I have a PR to update them</p>",
        "id": 215046200,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604018918
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/miri/issues/1610\">miri#1610</a></p>",
        "id": 215046204,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604018934
    },
    {
        "content": "<p>Feel free to comment if the new instructions look incorrect (re <code>--keep-stage</code>) <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 215046235,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604018968
    },
    {
        "content": "<p>left a comment</p>",
        "id": 215046320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604019007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215046181\">said</a>:</p>\n<blockquote>\n<p>those instructions look strange, <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> why do they suggest to build <code>src/rustc</code>?</p>\n</blockquote>\n<p>Because that was the right thing to do when the docs were written^^</p>",
        "id": 215065945,
        "sender_full_name": "RalfJ",
        "timestamp": 1604046259
    },
    {
        "content": "<p>now it's <code>--stage 2 compiler/rustc</code> I think</p>",
        "id": 215065985,
        "sender_full_name": "RalfJ",
        "timestamp": 1604046271
    },
    {
        "content": "<p>Right, but that's not my question - why does miri need to build compiler/rustc?</p>",
        "id": 215092907,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604063968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  everything linked together needs to be built by the same rustc</p>",
        "id": 215188614,
        "sender_full_name": "RalfJ",
        "timestamp": 1604145960
    },
    {
        "content": "<p>so when building miri, that's the stdlib, the rustc libs, and miri itself</p>",
        "id": 215188658,
        "sender_full_name": "RalfJ",
        "timestamp": 1604145976
    },
    {
        "content": "<p>the \"stage 0 rustc artifacts\" were built by the bootstrap compiler, so to link miri with those, we'd have to build miri with the bootstrap compiler -- that is possible (it is what <code>x.py build --stage 0 src/tools/miri</code> does), but I have not figured out a way to do that with an out-of-tree miri build</p>",
        "id": 215188675,
        "sender_full_name": "RalfJ",
        "timestamp": 1604146028
    },
    {
        "content": "<p>to use the <code>build/$TARGET/stage1</code> compiler to build and link miri, we need a version of librustc <em>built by that compiler</em>, and that's what <code>--stage 1 compiler/rustc</code> provides</p>",
        "id": 215188693,
        "sender_full_name": "RalfJ",
        "timestamp": 1604146081
    },
    {
        "content": "<blockquote>\n<p>the \"stage 0 rustc artifacts\" were built by the bootstrap compiler, so to link miri with those, we'd have to build miri with the bootstrap compiler -- that is possible (it is what <code>x.py build --stage 0 src/tools/miri</code> does), but I have not figured out a way to do that with an out-of-tree miri build</p>\n</blockquote>\n<p>Ok, this is the context I was missing</p>",
        "id": 215194004,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604154263
    },
    {
        "content": "<p>I'll see if I can fix that this weekend, IIRC that would halve your compile times, right?</p>",
        "id": 215194018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604154296
    },
    {
        "content": "<p>Do you happen to remember what trouble you ran into? Using beta to build miri seems conceptually simple but if you use features from master libstd it's harder.</p>",
        "id": 215194155,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604154489
    },
    {
        "content": "<p>Ah wait I'm confused again - rustc and miri have to use the <em>same</em> libstd, so you need master libstd whether you mean to use it or not</p>",
        "id": 215194182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604154579
    },
    {
        "content": "<p>One last point I'm confused on - why doesn't miri need the libstd <em>built</em> by the compiler it's linked to? Is it because miri is an interpreter and only needs the source code, not the artifacts?</p>",
        "id": 215194646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604155290
    },
    {
        "content": "<p>If so I think in an ideal world you'd only need <code>build --stage 0 compiler/rustc</code> and nothing else</p>",
        "id": 215194693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604155336
    },
    {
        "content": "<p>Miri builds the libstd itself. It needs a few flags like <code>-Zalways-encode-mir</code> and <code>--cfg miri</code> to work.</p>",
        "id": 215195128,
        "sender_full_name": "bjorn3",
        "timestamp": 1604156140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215194018\">said</a>:</p>\n<blockquote>\n<p>I'll see if I can fix that this weekend, IIRC that would halve your compile times, right?</p>\n</blockquote>\n<p>I rarely have to build miri against a locally built rustc -- but for those rare cases it would halve the build times, yes :)</p>",
        "id": 215203588,
        "sender_full_name": "RalfJ",
        "timestamp": 1604167311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215194646\">said</a>:</p>\n<blockquote>\n<p>One last point I'm confused on - why doesn't miri need the libstd <em>built</em> by the compiler it's linked to? Is it because miri is an interpreter and only needs the source code, not the artifacts?</p>\n</blockquote>\n<p>yeah, as  <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> said don't worry about the libstd miri needs for interpretation. that should mostly just work. the main hurdle is getting miri itself to build.</p>",
        "id": 215203653,
        "sender_full_name": "RalfJ",
        "timestamp": 1604167369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215194155\">said</a>:</p>\n<blockquote>\n<p>Do you happen to remember what trouble you ran into? Using beta to build miri seems conceptually simple but if you use features from master libstd it's harder.</p>\n</blockquote>\n<p>basically this would have to replicate whatever happens for a stage 0 build in <code>x.py</code>, including <code>RUSTC_BOOTSTRAP</code>. honestly I am not sure if that's worth doing.</p>",
        "id": 215203680,
        "sender_full_name": "RalfJ",
        "timestamp": 1604167403
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/76666\">https://github.com/rust-lang/rust/issues/76666</a> is the much better fix.</p>",
        "id": 215203684,
        "sender_full_name": "RalfJ",
        "timestamp": 1604167413
    },
    {
        "content": "<p>Then we can just do development in-tree, done. (With subtrees we are moving more towards that anyway.)<br>\nSo IMO something is wrong if we ever need to do an out-of-tree miri build against a locally built rustc -- so it is a waste of effort to try to make that usecase better.</p>",
        "id": 215203741,
        "sender_full_name": "RalfJ",
        "timestamp": 1604167463
    },
    {
        "content": "<p>so if you want to help our compile times for integrated rustc-miri development, first of all <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> and secondly I think the best way to do that is to fix <a href=\"https://github.com/rust-lang/rust/issues/76666\">https://github.com/rust-lang/rust/issues/76666</a> :)</p>",
        "id": 215203770,
        "sender_full_name": "RalfJ",
        "timestamp": 1604167514
    },
    {
        "content": "<p>gotcha, I'll take a look</p>",
        "id": 215206407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604170705
    },
    {
        "content": "<p>got my toes wet with <a href=\"https://github.com/rust-lang/miri/pull/1615\">https://github.com/rust-lang/miri/pull/1615</a> :P</p>",
        "id": 215207035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604171456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215203684\">said</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/rust-lang/rust/issues/76666\">https://github.com/rust-lang/rust/issues/76666</a> is the much better fix.</p>\n</blockquote>\n<p>btw, I'm happy to have the end product be <code>x.py run miri</code>, but the steps along the way are the ones I'm talking about where x.py figures out how to build miri appropriately</p>",
        "id": 215215373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604184326
    },
    {
        "content": "<p>ok I think I found the issue: <code>RustcLink</code> does not copy all files from stage0-sysroot to stage1</p>\n<div class=\"codehilite\"><pre><span></span><code>(-bash@build-server) ~/.../src/bootstrap ▶️ ls ~/rustc2/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/ | grep attr\nlibrustc_attr-c9569c665fea0d47.rlib\nlibtracing_attributes-863486f562382797.so\n(-bash@build-server) ~/.../src/bootstrap ▶️ ls ~/rustc2/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/ | grep attr\n</code></pre></div>",
        "id": 215216790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604186853
    },
    {
        "content": "<p>oh hmm I might just be confused - it's copying from <code>stage0-rustc</code> to <code>stage0-sysroot</code> on RustcLink</p>",
        "id": 215217016,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604187339
    },
    {
        "content": "<p>ok this is a more helpful error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ CARGO_EXTRA_FLAGS=-v RUSTFLAGS=&#39;--sysroot /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage0-sysroot&#39; ./miri check\nerror[E0514]: found crate `std` compiled by an incompatible version of rustc\n  |\n  = help: please recompile that crate using this compiler (rustc 1.49.0-dev)\n  = note: the following crate versions were found:\n          crate `std` compiled by rustc 1.48.0-beta.3 (4708ac76e 2020-10-15): /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-0684db6e7e1ba3c0.rlib\n          crate `std` compiled by rustc 1.48.0-beta.3 (4708ac76e 2020-10-15): /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-0684db6e7e1ba3c0.so\n</code></pre></div>",
        "id": 215217061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604187409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> got it :)</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTC_BOOTSTRAP=1 RUSTFLAGS=&#39;--sysroot /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage0-sysroot&#39; ./miri check\n</code></pre></div>",
        "id": 215217191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604187673
    },
    {
        "content": "<p>you need the override toolchain to be the same as the stage0 compiler, so in my case <code>beta-2020-10-16</code></p>",
        "id": 215217195,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604187704
    },
    {
        "content": "<p>this is without a second rustc compiler, only stage 0 artifacts</p>",
        "id": 215217238,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604187733
    },
    {
        "content": "<p>now i just need to make this part of bootstrap somehow</p>",
        "id": 215217247,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604187763
    },
    {
        "content": "<blockquote>\n<p>= note: /usr/bin/ld: cannot find -lLLVM-11-rust-1.49.0-nightly</p>\n</blockquote>\n<p>well that's exciting</p>",
        "id": 215218342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604189837
    },
    {
        "content": "<p>hmm that is in <code>/home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage1/lib/libLLVM-11-rust-1.49.0-nightly.so</code> though, and also a similar one in <code>/home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage0/lib/libLLVM-11-rust-1.48.0-beta.so</code>. Nothing in <code>stage0-sysroot</code>, though.</p>",
        "id": 215218487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604190070
    },
    {
        "content": "<p>actually bootstrap does all this right already if you just run <code>x.py build src/tools/miri --stage 0</code></p>",
        "id": 215218600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604190259
    },
    {
        "content": "<p>but it then gives an error if you try to run miri directly:</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage0-tools-bin/miri: error while loading shared libraries: librustc_driver-030baa9670a3b322.so: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 215218616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604190324
    },
    {
        "content": "<p>hmm clippy also gives that error, let me see how they do it</p>",
        "id": 215218774,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604190639
    },
    {
        "content": "<p>ok good news: <code>cp build/x86_64-unknown-linux-gnu/stage0-tools-bin/{cargo-,}miri stage1/bin</code> works fine and lets me run <code>cargo +stage1 miri</code></p>",
        "id": 215219405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604191909
    },
    {
        "content": "<p>I spoke too soon :(</p>\n<div class=\"codehilite\"><pre><span></span><code>error: duplicate lang item in crate `core` (which `rustc_std_workspace_core` depends on): `bool`.\n  |\n  = note: the lang item is first defined in crate `core` (which `getrandom` depends on)\n  = note: first definition in `core` loaded from /home/joshua/.cache/miri/HOST/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-8b06c027fb65a14d.rmeta\n  = note: second definition in `core` loaded from /home/joshua/.local/lib/cargo/target/x86_64-unknown-linux-gnu/debug/deps/libcore-7c80658520e68438.rmeta\n</code></pre></div>",
        "id": 215219515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604192080
    },
    {
        "content": "<p>hmm this seems like it could be a bug in miri? I would expect it to filter out all sysroots except the one currently being used</p>",
        "id": 215219632,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604192347
    },
    {
        "content": "<blockquote>\n<p>where x.py figures out how to build miri appropriately</p>\n</blockquote>\n<p>But x.py can already build <em>and run</em> miri appropriately? <code>./x.py test --stage 0 src/tools/miri</code> works! I thought I said that every time we talked about this.^^ Sorry of I was not clear enough.</p>",
        "id": 215233142,
        "sender_full_name": "RalfJ",
        "timestamp": 1604218205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215217191\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> got it :)</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTC_BOOTSTRAP=1 RUSTFLAGS=&#39;--sysroot /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/stage0-sysroot&#39; ./miri check\n</code></pre></div>\n</blockquote>\n<p>what folder were you using for the rustup toolchain here?<br>\nEDIT: ah, the bootstrap beta</p>",
        "id": 215233152,
        "sender_full_name": "RalfJ",
        "timestamp": 1604218225
    },
    {
        "content": "<blockquote>\n<p>hmm this seems like it could be a bug in miri? I would expect it to filter out all sysroots except the one currently being used</p>\n</blockquote>\n<p>Miri is just a rebranded rustc, so that would make it a rustc bug. Also I think rustc only has one sysroot at a time.</p>",
        "id": 215233212,
        "sender_full_name": "RalfJ",
        "timestamp": 1604218355
    },
    {
        "content": "<p>One thing this reminds me of is that the stage0 folder is different from the stage1/2 folders... I dont recall the details but I recall @eddyb saying that.^^ bootstrap is treating it a bit differently.</p>",
        "id": 215233224,
        "sender_full_name": "RalfJ",
        "timestamp": 1604218399
    },
    {
        "content": "<p>so it might be easier to figure this out in bootstrap itself</p>",
        "id": 215233226,
        "sender_full_name": "RalfJ",
        "timestamp": 1604218406
    },
    {
        "content": "<p>otherwise you'll have to reinvent everything that bootstrap already does</p>",
        "id": 215233227,
        "sender_full_name": "RalfJ",
        "timestamp": 1604218416
    },
    {
        "content": "<blockquote>\n<p>x.py test --stage 0 src/tools/miri</p>\n</blockquote>\n<p>This does not work for me locally:</p>\n<div class=\"codehilite\"><pre><span></span><code>Running `build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/cargo-miri miri setup`\nthread &#39;main&#39; panicked at &#39;failed to determine underlying rustc version of Miri: UnexpectedVersionFormat&#39;, src/tools/miri/cargo-miri/bin.rs:132:38\n</code></pre></div>",
        "id": 215237594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604226289
    },
    {
        "content": "<p>this used to work, but maybe some change in the last few weeks broke it</p>",
        "id": 215951878,
        "sender_full_name": "RalfJ",
        "timestamp": 1604750375
    },
    {
        "content": "<p>Indeed I am getting the same error. This is a regression.</p>",
        "id": 215953689,
        "sender_full_name": "RalfJ",
        "timestamp": 1604753707
    },
    {
        "content": "<p>when cargo-miri runs miri, it gets a shared lib error:</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/r/src/rust/rustc.3/build/x86_64-unknown-linux-gnu/stage0-tools-bin/miri: error while loading shared libraries: libLLVM-11-rust-1.49.0-nightly.so: cannot open shared object file: No such file or directory\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> any idea what this could be caused by?</p>",
        "id": 215958919,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761484
    },
    {
        "content": "<p>hm, yes, I have some ideas</p>",
        "id": 215958937,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761506
    },
    {
        "content": "<p>that file exists in <code>build/x86_64-unknown-linux-gnu/ci-llvm/lib/libLLVM-11-rust-1.49.0-nightly.so</code></p>",
        "id": 215958945,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761515
    },
    {
        "content": "<p>so maybe that needs to be added to the lib search path, or the rpath needs to be fixed, or so?</p>",
        "id": 215958953,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761538
    },
    {
        "content": "<p>That path should not be in any search path, no</p>",
        "id": 215959001,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761568
    },
    {
        "content": "<p>Some other tools are also hitting this: <a href=\"https://github.com/rust-lang/rust/issues/78778\">https://github.com/rust-lang/rust/issues/78778</a></p>",
        "id": 215959004,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604761575
    },
    {
        "content": "<p>or at least I wouldn't expect it to be</p>",
        "id": 215959006,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761578
    },
    {
        "content": "<p>well, whatever makes it so that rustc finds that .so, needs to also happen for miri</p>",
        "id": 215959010,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761590
    },
    {
        "content": "<p>yes, I think that <em>probably</em> means we need a stage0-tools-bin/lib/libLLVM perhaps?</p>",
        "id": 215959023,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761619
    },
    {
        "content": "<p>I think it works for rustc because it's only ever run after uplifting to stage 1</p>",
        "id": 215959029,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604761627
    },
    {
        "content": "<p>At which point the .so is copied where it needs to go</p>",
        "id": 215959033,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604761637
    },
    {
        "content": "<p>and/or we should not have a stage0-tools-bin where we run binaries from, and instead copy the miri binary into stageN/bin/</p>",
        "id": 215959037,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761654
    },
    {
        "content": "<p>(though in stage0 that's annoying because the sysroot miri wants is not the stage0/ directory)</p>",
        "id": 215959042,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761668
    },
    {
        "content": "<p>My guess is that the bug/problem was introduced by the cranelift PR</p>",
        "id": 215959084,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215959037\">said</a>:</p>\n<blockquote>\n<p>and/or we should not have a stage0-tools-bin where we run binaries from, and instead copy the miri binary into stageN/bin/</p>\n</blockquote>\n<p>that would also fix <a href=\"https://github.com/rust-lang/rustup/issues/2548\">https://github.com/rust-lang/rustup/issues/2548</a> I think</p>",
        "id": 215959085,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604761703
    },
    {
        "content": "<p>Possibly.</p>",
        "id": 215959093,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215959037\">said</a>:</p>\n<blockquote>\n<p>and/or we should not have a stage0-tools-bin where we run binaries from, and instead copy the miri binary into stageN/bin/</p>\n</blockquote>\n<p>that sounds like miri should get the same stage handling as rustc, so it should be <code>--stage 1</code> and mean \"use the stage 1 compiler/miri (as produced during stage0 builds)\"</p>",
        "id": 215959097,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215959084\">said</a>:</p>\n<blockquote>\n<p>My guess is that the bug/problem was introduced by the cranelift PR</p>\n</blockquote>\n<p>ah, I would have guessed the download-LLVM-from-CI changes</p>",
        "id": 215959102,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761772
    },
    {
        "content": "<p>if that is worth testing I could do that</p>",
        "id": 215959104,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761777
    },
    {
        "content": "<p>download-LLVM-from-CI could be indirectly responsible by making your local build a shared link to LLVM (not the default on most platforms)</p>",
        "id": 215959154,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761813
    },
    {
        "content": "<p>that said, on master at least right now I can't seem to reproduce</p>",
        "id": 215959159,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761840
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;failed to determine underlying rustc version of Miri: UnexpectedVersionFormat&#39;, src/tools/miri/cargo-miri/bin.rs:132:38\nstack backtrace:\n   0: rust_begin_unwind\n             at ./library/std/src/panicking.rs:495:5\n   1: core::panicking::panic_fmt\n             at ./library/core/src/panicking.rs:92:14\n   2: core::result::unwrap_failed\n             at ./library/core/src/result.rs:1220:5\n   3: core::result::Result&lt;T,E&gt;::expect\n             at ./library/core/src/result.rs:933:23\n   4: cargo_miri::version_info\n             at ./src/tools/miri/cargo-miri/bin.rs:132:5\n   5: cargo_miri::setup\n             at ./src/tools/miri/cargo-miri/bin.rs:325:16\n   6: cargo_miri::phase_cargo_miri\n             at ./src/tools/miri/cargo-miri/bin.rs:417:5\n   7: cargo_miri::main\n             at ./src/tools/miri/cargo-miri/bin.rs:756:25\n   8: core::ops::function::FnOnce::call_once\n             at ./library/core/src/ops/function.rs:227:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 215959162,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761857
    },
    {
        "content": "<p>that's the same error, yeah</p>",
        "id": 215959166,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604761865
    },
    {
        "content": "<p>miri just reports it badly</p>",
        "id": 215959170,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604761872
    },
    {
        "content": "<p>oh, is miri doing like .output() or something on a rustc invocation?</p>",
        "id": 215959177,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761886
    },
    {
        "content": "<p>I can't see anything in <a href=\"https://github.com/rust-lang/rust/issues/77975\">#77975</a> that could have caused this.</p>",
        "id": 215959184,
        "sender_full_name": "bjorn3",
        "timestamp": 1604761918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah I think the diagnosis may have been flawed, I think it is indeed that this just never worked with a shared llvm</p>",
        "id": 215959222,
        "sender_full_name": "simulacrum",
        "timestamp": 1604761937
    },
    {
        "content": "<p>I think the fix is indeed that these tools should not be run without being in the sysroot (or I guess we can try to compile them with a really weird rpath of like ../../stageN/lib but that seems bad</p>",
        "id": 215959292,
        "sender_full_name": "simulacrum",
        "timestamp": 1604762063
    },
    {
        "content": "<p>+1 to putting more things in sysroot, that seems more consistent overall to me</p>",
        "id": 215959522,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604762460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215959177\">said</a>:</p>\n<blockquote>\n<p>oh, is miri doing like .output() or something on a rustc invocation?</p>\n</blockquote>\n<p>yes -- it uses <code>rustc_version</code> to figure out the host architecture</p>",
        "id": 215960464,
        "sender_full_name": "RalfJ",
        "timestamp": 1604763863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20stage.202/near/215959170\">said</a>:</p>\n<blockquote>\n<p>miri just reports it badly</p>\n</blockquote>\n<p>s/miri/rustc_version/<br>\nmiri just forwards the error it gets from that library</p>",
        "id": 215960496,
        "sender_full_name": "RalfJ",
        "timestamp": 1604763918
    },
    {
        "content": "<p>/me gleefully starts opening issues</p>",
        "id": 215960531,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604763944
    },
    {
        "content": "<p><a href=\"https://github.com/Kimundi/rustc-version-rs/issues/33\">https://github.com/Kimundi/rustc-version-rs/issues/33</a></p>",
        "id": 215960661,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604764089
    }
]