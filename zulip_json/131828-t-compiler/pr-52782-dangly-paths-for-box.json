[
    {
        "content": "<p>@eddyb so here's a super simple example of something that breaks if you leave out the <code>(shallow) Write(StorageDeadOrDrop) of the deref-box</code>:</p>",
        "id": 130707249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533122732
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">return_local_box_borrow</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;*</span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130707250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533122737
    },
    {
        "content": "<p>if you leave out that step, the above code gets accepted by NLL.</p>",
        "id": 130707296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533122769
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 130707300,
        "sender_full_name": "DPC",
        "timestamp": 1533122782
    },
    {
        "content": "<p>okay but why? isn't the lifetime of the borrow tied to <code>b</code> <em>somehow</em>?</p>",
        "id": 130707455,
        "sender_full_name": "eddyb",
        "timestamp": 1533123019
    },
    {
        "content": "<p>I'd expect it to <em>at least</em> not be able to escape the function</p>",
        "id": 130707465,
        "sender_full_name": "eddyb",
        "timestamp": 1533123042
    },
    {
        "content": "<p><code>'a</code> shouldn't outlive <code>b</code></p>",
        "id": 130707467,
        "sender_full_name": "eddyb",
        "timestamp": 1533123048
    },
    {
        "content": "<p>(I think this was <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s point - lol I can force subscribe them)</p>",
        "id": 130707479,
        "sender_full_name": "eddyb",
        "timestamp": 1533123069
    },
    {
        "content": "<p>what happens if you <em>move</em> <code>b</code> to another local variable? does the borrow survive?</p>",
        "id": 130707501,
        "sender_full_name": "eddyb",
        "timestamp": 1533123120
    },
    {
        "content": "<p>since a move of a <code>b</code> shouldn't touch <code>*b</code> either</p>",
        "id": 130707541,
        "sender_full_name": "eddyb",
        "timestamp": 1533123133
    },
    {
        "content": "<p>or, say, call <code>mem::drop(b)</code>, <del>which would have no local <code>Drop(b)</code> to speak of</del> - nvm it would, it's drop elaboration that removes it later</p>",
        "id": 130707570,
        "sender_full_name": "eddyb",
        "timestamp": 1533123183
    },
    {
        "content": "<p>it really feels like <code>StorageDead(b)</code> should kill the <code>&amp;*b</code> but maybe I'm missing something</p>",
        "id": 130707588,
        "sender_full_name": "eddyb",
        "timestamp": 1533123213
    },
    {
        "content": "<p>maybe \"variables have no scope anymore\" and the only thing that can end a borrow is explicit invalidation of the thing being borrowed, and <code>*b</code> is distinct enough from <code>b</code></p>",
        "id": 130707646,
        "sender_full_name": "eddyb",
        "timestamp": 1533123265
    },
    {
        "content": "<p>NLL is a brave new world I suppose</p>",
        "id": 130707649,
        "sender_full_name": "eddyb",
        "timestamp": 1533123276
    },
    {
        "content": "<p>is... regionck... just dead/swallowed whole by NLL?</p>",
        "id": 130707681,
        "sender_full_name": "eddyb",
        "timestamp": 1533123310
    },
    {
        "content": "<p>(sorry i was distracted for a bit)</p>",
        "id": 130708604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533124516
    },
    {
        "content": "<p>so lets see if I can address these in turn</p>",
        "id": 130708667,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533124584
    },
    {
        "content": "<p>I don't see why <code>'a</code> itself shouldn't outlive <code>b</code>.</p>",
        "id": 130708671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533124601
    },
    {
        "content": "<p>after all, if the user passed in <code>input: &amp;'a i32</code>, then I should certainly be able to return <code>&amp;*input</code>, right?</p>",
        "id": 130708690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533124632
    },
    {
        "content": "<p>if you do a move of <code>b</code>, then that <em>does</em> error. It says \"cannot move out of <code>b</code> because it is borrowed.\"</p>",
        "id": 130708756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533124696
    },
    {
        "content": "<p>but that makes sense, since a move of <code>b</code> will cause a <code>(Deep, Write(WriteKind::Move)</code> on <code>b</code></p>",
        "id": 130708807,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533124787
    },
    {
        "content": "<p>and likewise, before PR <a href=\"https://github.com/rust-lang/rust/issues/52782\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52782\">#52782</a>, the drop of <code>b</code> would do a similar Deep Write (because <code>Box&lt;T&gt;</code> implements <code>Drop</code>)</p>",
        "id": 130708968,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533124934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> wrote:</p>\n<blockquote>\n<p>it really feels like <code>StorageDead(b)</code> should kill the <code>&amp;*b</code> but maybe I'm missing something</p>\n</blockquote>\n<p>Right now a <code>StorageDead</code> statement causes a Shallow Write. But maybe the right answer here is for these other steps to be attached <em>there</em>?</p>",
        "id": 130709039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125028
    },
    {
        "content": "<p>aaah, so the deep version handles the general case, and your PR has to manually emulate the necessary steps!</p>",
        "id": 130709132,
        "sender_full_name": "eddyb",
        "timestamp": 1533125160
    },
    {
        "content": "<p>I guess that is a question: where should <code>&amp;*b</code> get invalidated, by the <code>drop(b)</code> or by the <code>StorageDead(b)</code></p>",
        "id": 130709175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125172
    },
    {
        "content": "<blockquote>\n<p>aaah, so the deep version handles the general case, and your PR has to manually emulate the necessary steps!</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 130709178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125178
    },
    {
        "content": "<p>okay I didn't realize a move was deep by default</p>",
        "id": 130709185,
        "sender_full_name": "eddyb",
        "timestamp": 1533125194
    },
    {
        "content": "<p>Yeah, I think it has to be, right?</p>",
        "id": 130709191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125219
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 130709195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125223
    },
    {
        "content": "<p>have you seen <a href=\"https://github.com/rust-lang/rust/pull/52782#discussion_r206831556\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52782#discussion_r206831556\">https://github.com/rust-lang/rust/pull/52782#discussion_r206831556</a>?</p>",
        "id": 130709199,
        "sender_full_name": "eddyb",
        "timestamp": 1533125231
    },
    {
        "content": "<blockquote>\n<p>have you seen <a href=\"https://github.com/rust-lang/rust/pull/52782#discussion_r206831556\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52782#discussion_r206831556\">https://github.com/rust-lang/rust/pull/52782#discussion_r206831556</a>?</p>\n</blockquote>\n<p>no I had not seen that yet. Let me read it.</p>",
        "id": 130709209,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125264
    },
    {
        "content": "<p>specifically the  part where <code>Drop(place)</code> should <em>always</em> invalidate the value at <code>place</code> <em>despite</em> being a noop for some types (<code>place</code> is <code>*b</code> here)</p>",
        "id": 130709258,
        "sender_full_name": "eddyb",
        "timestamp": 1533125294
    },
    {
        "content": "<p>that ... might be a more elegant way to deal with this. Let me see.</p>",
        "id": 130709273,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125327
    },
    {
        "content": "<p>you know, I almost seriously proposed adding <code>&amp;own T</code> to <code>rustc</code> internally to model locals which may be unsized :P</p>",
        "id": 130709460,
        "sender_full_name": "eddyb",
        "timestamp": 1533125498
    },
    {
        "content": "<p>well a tree-like presentation can be a pain for understand the flow of a conversation over time. I guess internals.rust-lang.org's engine gets this right</p>",
        "id": 130709554,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125558
    },
    {
        "content": "<p>(except that I hate that I have to scroll in order to get it to load content. But that's an orthogonal issue.)</p>",
        "id": 130709562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125568
    },
    {
        "content": "<blockquote>\n<p>specifically the  part where <code>Drop(place)</code> should <em>always</em> invalidate the value at <code>place</code> <em>despite</em> being a noop for some types (<code>place</code> is <code>*b</code> here)</p>\n</blockquote>\n<p>My immediate thought is that this might cause problems for other similar cases where we have a <code>&amp;mut T</code> that isn't actually getting written. But maybe if the type is !needs_drop, then we should just use a Shallow write rather than a Deep one? I wonder if that would do the trick.</p>",
        "id": 130709706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125725
    },
    {
        "content": "<p>I wrote:</p>\n<blockquote>\n<p>Right now a <code>StorageDead</code> statement causes a Shallow Write. \\[...\\]</p>\n</blockquote>\n<p>and in fact that implies that the Shallow write to <code>b</code> (as opposed to <code>*b</code>) is <em>not necessary</em> in my PR. Because that is already done by the <code>StorageDead</code> statement.</p>",
        "id": 130709879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533125945
    },
    {
        "content": "<p>so, yay, I can <em>definitely</em> remove that.</p>",
        "id": 130709967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126012
    },
    {
        "content": "<p>you mean you can remove step 3? that'd be nice :D</p>",
        "id": 130710006,
        "sender_full_name": "eddyb",
        "timestamp": 1533126096
    },
    {
        "content": "<p>I can definitely remove step 3</p>",
        "id": 130710061,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126156
    },
    {
        "content": "<p>and I am seeing if I can replace step 2 with a revision of the handling of the general case</p>",
        "id": 130710073,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126173
    },
    {
        "content": "<p>so that instead of only doing a write for needs_drop stuff</p>",
        "id": 130710078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126183
    },
    {
        "content": "<p>it will do <em>some</em> kind of write even if its non needs_drop. It might need to be a shallow write though</p>",
        "id": 130710085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126199
    },
    {
        "content": "<p>/me crosses fingers his obsession with semantic optimization of logic doesn't bite us back later</p>",
        "id": 130710134,
        "sender_full_name": "eddyb",
        "timestamp": 1533126250
    },
    {
        "content": "<p>right, so if the general case does a deep write in all cases, then we \"fail\" to fix <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a></p>",
        "id": 130710160,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126307
    },
    {
        "content": "<p>that's totally unsurprising</p>",
        "id": 130710163,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126314
    },
    {
        "content": "<p>but the (good?) news is that doing a deep write doesn't break anything <em>except</em> <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a></p>",
        "id": 130710249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126425
    },
    {
        "content": "<p>which is entirely expected, right? I mean, it was doing that before</p>",
        "id": 130710312,
        "sender_full_name": "eddyb",
        "timestamp": 1533126492
    },
    {
        "content": "<p>No this is more general</p>",
        "id": 130710325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126533
    },
    {
        "content": "<p>because this is changing code for the non-box cases too</p>",
        "id": 130710331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126541
    },
    {
        "content": "<p>(right?)</p>",
        "id": 130710334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126543
    },
    {
        "content": "<p>oh I thought you changed your PR, oops, you meant <code>StorageDead</code>?</p>",
        "id": 130710345,
        "sender_full_name": "eddyb",
        "timestamp": 1533126562
    },
    {
        "content": "<p>as in, I'm playing games with the <code>_ =&gt; ...</code> arm at the end of the match</p>",
        "id": 130710348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126564
    },
    {
        "content": "<p>I haven't pushed any changes to my visible branch yet</p>",
        "id": 130710359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126577
    },
    {
        "content": "<p><code>Drop</code> then?</p>",
        "id": 130710360,
        "sender_full_name": "eddyb",
        "timestamp": 1533126580
    },
    {
        "content": "<p>yeah I'm changing <code>visit_terminator_drop</code></p>",
        "id": 130710366,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126589
    },
    {
        "content": "<p>We could talk about whether this belongs in <code>StorageDead</code> instead</p>",
        "id": 130710431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126619
    },
    {
        "content": "<p>but that sounds like a more invasive change</p>",
        "id": 130710433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126624
    },
    {
        "content": "<p>oh yeah we were talking about <code>Drop(x)</code> invalidating <code>x</code> even if <code>!needs_drop</code></p>",
        "id": 130710445,
        "sender_full_name": "eddyb",
        "timestamp": 1533126653
    },
    {
        "content": "<p>I'm sort of surprised this change didn't break anything besides <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a> though. I'm going to play around with it a little more, try to double check that this doesn't represent some weakness in our test suite.</p>",
        "id": 130710546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126834
    },
    {
        "content": "<p>well, <code>Box&lt;T&gt;</code> is the only thing that owns without  getting <code>StorageDead</code> called on the owned (<code>T</code>) later</p>",
        "id": 130710612,
        "sender_full_name": "eddyb",
        "timestamp": 1533126927
    },
    {
        "content": "<p>Yes, but a deep write on drop(x) seems bad when <code>x: &amp;mut T</code>, right?</p>",
        "id": 130710665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126969
    },
    {
        "content": "<p>do these deep things go through references?</p>",
        "id": 130710674,
        "sender_full_name": "eddyb",
        "timestamp": 1533126985
    },
    {
        "content": "<p>that I think is one of the main distinctions</p>",
        "id": 130710679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533126996
    },
    {
        "content": "<p>and <code>StorageDead</code> is not deep either?</p>",
        "id": 130710680,
        "sender_full_name": "eddyb",
        "timestamp": 1533127009
    },
    {
        "content": "<p>StorageDead is just shallow</p>",
        "id": 130710683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127015
    },
    {
        "content": "<p>okay that is suspicious, I agree</p>",
        "id": 130710692,
        "sender_full_name": "eddyb",
        "timestamp": 1533127025
    },
    {
        "content": "<blockquote>\n<p>that I think is one of the main distinctions</p>\n</blockquote>\n<p>let me double-check this claim</p>",
        "id": 130710700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127044
    },
    {
        "content": "<p>so wait, why would a move be deep but a drop &amp; StorageDead be shallow?!</p>",
        "id": 130710783,
        "sender_full_name": "eddyb",
        "timestamp": 1533127163
    },
    {
        "content": "<p>because a move can subsequently do something to the <code>&amp;mut</code> borrowed thing?</p>",
        "id": 130710793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127194
    },
    {
        "content": "<p>but a drop just dies?</p>",
        "id": 130710797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127202
    },
    {
        "content": "<p>not the move itself</p>",
        "id": 130710847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127214
    },
    {
        "content": "<p>but the thing you moved it into, that is</p>",
        "id": 130710849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127219
    },
    {
        "content": "<p>oh so it's the repossession of the value being moved?</p>",
        "id": 130710861,
        "sender_full_name": "eddyb",
        "timestamp": 1533127225
    },
    {
        "content": "<p>am I making sense?</p>",
        "id": 130710863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127230
    },
    {
        "content": "<p>yeah that's how I look at it at least</p>",
        "id": 130710866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127237
    },
    {
        "content": "<p>I'm sure ariel and niko have a more disciplined mental model here</p>",
        "id": 130710889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127258
    },
    {
        "content": "<p>so it's a combination of stealing the value (which has the deep implications) and invalidating the place where the value was (like writing <code>undef</code> to it. which has the shallow implications)</p>",
        "id": 130710912,
        "sender_full_name": "eddyb",
        "timestamp": 1533127301
    },
    {
        "content": "<p>Yeah so <a href=\"https://github.com/rust-lang/rust/blob/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796/src/librustc_mir/borrow_check/places_conflict.rs#L166\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796/src/librustc_mir/borrow_check/places_conflict.rs#L166\">places_conflict.rs</a> has the relevant code here</p>",
        "id": 130710920,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533127320
    },
    {
        "content": "<blockquote>\n<p>okay that is suspicious, I agree</p>\n</blockquote>\n<p>Ah, the reason that the tests pass is that we don't even <em>generate</em> the <code>Drop(x)</code> MIR instruction when <code>x: &amp;mut T</code>...</p>",
        "id": 130711943,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533128436
    },
    {
        "content": "<p>we just have a <code>StorageDead</code></p>",
        "id": 130711948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533128448
    },
    {
        "content": "<p>so let me keep looking/poking...</p>",
        "id": 130711965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533128469
    },
    {
        "content": "<p>so I think the only cases that break when I add this Deep Write to the base case for <code>visit_terminator_drop</code> end up being related to <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a> in the end, because in order to observe the new Deep write that I've emitted here, you need to have some <code>Drop</code> statement emitted in the first place, which means you need to have some kind of droppable thing that owns the <code>&amp;mut T</code> in question</p>",
        "id": 130712249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533128763
    },
    {
        "content": "<p>what if... you remove the optimization from <code>librustc_mir/build/scope.rs</code>?</p>",
        "id": 130712382,
        "sender_full_name": "eddyb",
        "timestamp": 1533128922
    },
    {
        "content": "<p>does shallow vs deep make a huge difference then? I hope that nothing breaks because of all the extra drops</p>",
        "id": 130712404,
        "sender_full_name": "eddyb",
        "timestamp": 1533128946
    },
    {
        "content": "<p>you mean the early return if <code>!needs_drop</code> at the beginning of <code>fn schedule_drop</code> ?</p>",
        "id": 130712433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533128986
    },
    {
        "content": "<p>I imagine that if I were to do that, then the shallow vs deep distinction in this case would be hugely important.</p>",
        "id": 130712490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129015
    },
    {
        "content": "<p>but hey, since I'm already experimenting, I can find out.</p>",
        "id": 130712503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129025
    },
    {
        "content": "<blockquote>\n<p>does shallow vs deep make a huge difference then? I hope that nothing breaks because of all the extra drops</p>\n</blockquote>\n<p>To be clear: I'm not planning on putting in a Deep write. If I did that, then <a href=\"https://github.com/rust-lang/rust/issues/45696\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/45696\">#45696</a> would not get fixed, and this PR would be pointless.</p>",
        "id": 130712810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129323
    },
    {
        "content": "<p>I was just trying it out as an experiment to try to understand the implications of such a change.</p>",
        "id": 130712824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129346
    },
    {
        "content": "<p>yeah, I'm just curious what happens</p>",
        "id": 130713015,
        "sender_full_name": "eddyb",
        "timestamp": 1533129557
    },
    {
        "content": "<p>as am I. I first want to double check that this change actually <em>works</em> when the write is Shallow. If so, then I'll start playing with removing the optimization in schedule_drop</p>",
        "id": 130713259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533129805
    },
    {
        "content": "<p>okay, if you make the Deep Write happen both when needs_drop and !needs_drop, <em>and</em> you remove the optimization in schedule_drop, then a bunch of tests break. The simplest instance being </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">return_local_reborrow</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 130717967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533133909
    },
    {
        "content": "<p>things are starting to make sense :D</p>",
        "id": 130718035,
        "sender_full_name": "eddyb",
        "timestamp": 1533133960
    },
    {
        "content": "<p>now to find out what happens with my planned change to use Shallow Write if we get rid of the optimization in schedule_drop</p>",
        "id": 130718040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533133966
    },
    {
        "content": "<p>interesting: even with just a Shallow Write, if you get rid of the optimization in <code>schedule_drop</code>, we get 13 test failures ... (compared to 19 failures with Deep Write when killing the <code>schedule_drop</code> optimization).</p>",
        "id": 130718359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134281
    },
    {
        "content": "<p>O</p>",
        "id": 130718400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134288
    },
    {
        "content": "<p>Oh wait</p>",
        "id": 130718401,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134290
    },
    {
        "content": "<p>I need a control group</p>",
        "id": 130718405,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134295
    },
    {
        "content": "<p>#science</p>",
        "id": 130718414,
        "sender_full_name": "eddyb",
        "timestamp": 1533134306
    },
    {
        "content": "<p>As in, I need to try the <code>schedule_drop</code> change without adding an Write to this case at all. :)</p>",
        "id": 130718426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134315
    },
    {
        "content": "<p>right, there might be latent \"bugs\"</p>",
        "id": 130718453,
        "sender_full_name": "eddyb",
        "timestamp": 1533134333
    },
    {
        "content": "<p>trying that now</p>",
        "id": 130718460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134340
    },
    {
        "content": "<p>heh. 12 test failures from the <code>schedule_drop</code> change if I leave the Write change out of MIR-borrowck</p>",
        "id": 130718982,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134817
    },
    {
        "content": "<p>so there was <em>one</em> case where the Shallow Write on !needs_drop caused a failure if we don't include that optimization in <code>schedule_drop</code>. I'll work on identifying that and documenting it somewhere in the code.</p>",
        "id": 130719034,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134874
    },
    {
        "content": "<p>(This is based on the <code>compile-fail</code> tests; i arguably also need to test against the <code>ui</code> tests)</p>",
        "id": 130719088,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533134899
    },
    {
        "content": "<p>or.. I just get 12 test failures this time. Shoot I wish I had saved that previous run's transcript</p>",
        "id": 130719674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533135503
    },
    {
        "content": "<p>I bet its one of the intermittent compile-fail tests that keeps biting me on this box</p>",
        "id": 130719690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533135525
    },
    {
        "content": "<p>the LLVM/link/something race one? I see the same thing, heh. what are the other 12?</p>",
        "id": 130719837,
        "sender_full_name": "eddyb",
        "timestamp": 1533135643
    },
    {
        "content": "<p>there might be a simple bug to fix, I'll look into it if you can share some logs</p>",
        "id": 130719846,
        "sender_full_name": "eddyb",
        "timestamp": 1533135656
    },
    {
        "content": "<p>a log like this: <a href=\"https://gist.github.com/1d49a599cdaac9030bb15518463b8fd8\" target=\"_blank\" title=\"https://gist.github.com/1d49a599cdaac9030bb15518463b8fd8\">https://gist.github.com/1d49a599cdaac9030bb15518463b8fd8</a> ?</p>",
        "id": 130721338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533136978
    },
    {
        "content": "<p>or do you want RUST_LOG output?</p>",
        "id": 130721345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533136987
    },
    {
        "content": "<p>hmm, skimming over this myself, its \"obvious\" what the two-phase borrow breakage is... its treating the newly introduced drop as a use and complaining about it being a second use when we expect only one.</p>",
        "id": 130721562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533137208
    },
    {
        "content": "<p>and then the const-eval errors all seem like something where the new Drops are probably causing us to emit three (redundant) errors instead of \"just\" two?</p>",
        "id": 130721773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533137441
    },
    {
        "content": "<p>so I don't think there 's evidence of any serious bug lying in wait.</p>",
        "id": 130722065,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533137739
    },
    {
        "content": "<p>only <code>compile-fail</code> fails? <code>run-pass</code> is fine?</p>",
        "id": 130722286,
        "sender_full_name": "eddyb",
        "timestamp": 1533137982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think I like these results, they seem to be confirming that trivial Drops are harmless/unnecessary</p>",
        "id": 130722412,
        "sender_full_name": "eddyb",
        "timestamp": 1533138113
    },
    {
        "content": "<p>oh no I would need to check run-pass too</p>",
        "id": 130722648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533138360
    },
    {
        "content": "<p>my setup here is sort of optimized for only focusing on one test suite at a time</p>",
        "id": 130722707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533138381
    },
    {
        "content": "<p>try this :P <code>./x.py test --no-fail-fast --stage 1 src/test/{mir-opt,codegen,codegen-units,incremental,debuginfo,parse-fail,ui,compile-fail,run-fail,run-pass}</code></p>",
        "id": 130722717,
        "sender_full_name": "eddyb",
        "timestamp": 1533138395
    },
    {
        "content": "<p>I'll look into that after I finish rebasing the PR</p>",
        "id": 130722722,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533138402
    },
    {
        "content": "<p>(and double checking that it works...)</p>",
        "id": 130722742,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533138427
    },
    {
        "content": "<p>uh oh github is error 500'ing on my PR. :(</p>",
        "id": 130722831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533138488
    },
    {
        "content": "<p>GH had a hiccup there, seems back</p>",
        "id": 130725243,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1533140963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> do you two like the new version of PR <a href=\"https://github.com/rust-lang/rust/issues/52782\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52782\">#52782</a> ?</p>",
        "id": 130774294,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533211483
    },
    {
        "content": "<p>I cannot really read NLL code and get anything out of that^^</p>",
        "id": 130783453,
        "sender_full_name": "RalfJ",
        "timestamp": 1533222396
    },
    {
        "content": "<p>my previous comments were entirely based on <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s comments</p>",
        "id": 130783460,
        "sender_full_name": "RalfJ",
        "timestamp": 1533222419
    },
    {
        "content": "<p>fair enough</p>",
        "id": 130783471,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533222430
    }
]