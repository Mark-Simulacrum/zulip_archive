[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 270597348,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913721
    },
    {
        "content": "<p>we've already seen a couple of benchmarks about this change</p>",
        "id": 270597416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913736
    },
    {
        "content": "<p>there are 2 here <a href=\"https://github.com/rust-lang/rust/issues/93438\">#93438</a></p>",
        "id": 270597435,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913747
    },
    {
        "content": "<p>one using <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> original changes, which uses <code>FxHashSet</code> result <a href=\"https://github.com/rust-lang/rust/pull/93438#issuecomment-1024811844\">here</a>, another one using <code>VecMap</code> results <a href=\"https://github.com/rust-lang/rust/pull/93438#issuecomment-1027361293\">here</a></p>",
        "id": 270597674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913854
    },
    {
        "content": "<p>we've also tried <a href=\"https://github.com/rust-lang/rust/issues/93547\">#93547</a> with a <code>BTreeMap</code> results <a href=\"https://github.com/rust-lang/rust/pull/93547#issuecomment-1027575913\">here</a></p>",
        "id": 270597777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913904
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/issues/93552\">#93552</a> with a <code>SortedMap</code> results <a href=\"https://github.com/rust-lang/rust/pull/93552#issuecomment-1028168431\">here</a></p>",
        "id": 270597848,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913945
    },
    {
        "content": "<p>we've discussed with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> to try with an <code>IndexVec</code>, unsure why we didn't that before :P</p>",
        "id": 270597945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913972
    },
    {
        "content": "<p>and also Niko wanted to try something like ...</p>",
        "id": 270597976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643913987
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MASK</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">SparseVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">chunks</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Chunk</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Chunk</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">chunk_index</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"p\">[</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SparseVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">chunk_index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">insert_chunk</span><span class=\"p\">(</span><span class=\"n\">chunk_index</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">MASK</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">chunk</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">chunk_index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">find_chunk</span><span class=\"p\">(</span><span class=\"n\">chunk_index</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">chunk</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">].</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">insert_chunk</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">chunk_index</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Chunk</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// FIXME: use a binary search and keep it sorted</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">chunks</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">chunk_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">chunk_index</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">chunks</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Chunk</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">chunk_index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">chunks</span><span class=\"p\">.</span><span class=\"n\">last_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">find_chunk</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">chunk_index</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Chunk</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// FIXME: binary search</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">chunks</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">chunk_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">chunk_index</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270598038,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643914027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> believes that it's not going to work out really well</p>",
        "id": 270598064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643914048
    },
    {
        "content": "<p>anyway, wanted to open this topic so we can all discuss in one place</p>",
        "id": 270598077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643914059
    },
    {
        "content": "<p>Can you maybe put summary table in the description of <a href=\"https://github.com/rust-lang/rust/issues/93438\">#93438</a>, with each row holding a description of the experiment, a link to its commit, a link to its perf run, and the regression reported by perf?</p>",
        "id": 270622221,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643924485
    },
    {
        "content": "<p>(i’m having a hard time from skimming the comment thread seeing what the individual experiments were.) Alterantively, I’d be happy with inline edits near where the perf runs were done that state what is the intended test.</p>",
        "id": 270622364,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643924538
    },
    {
        "content": "<p>good idea <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 270713760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643981101
    },
    {
        "content": "<p>can place a table there</p>",
        "id": 270713782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643981110
    },
    {
        "content": "<p>also tried using an <code>IndexVec</code> results <a href=\"https://github.com/rust-lang/rust/pull/93438#issuecomment-1029575637\">here</a></p>",
        "id": 270713850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643981149
    },
    {
        "content": "<p>insertions are too sparse for <code>IndexVec</code> to work correctly I guess</p>",
        "id": 270713930,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643981176
    },
    {
        "content": "<p>so there is a ton of <code>None</code> padding</p>",
        "id": 270713952,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643981190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Make.20node_id_to_hir_id.20onwer-local.20.2393438/near/270598064\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> believes that it's not going to work out really well</p>\n</blockquote>\n<p>in what sense not well? not perform well?</p>",
        "id": 270721300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984579
    },
    {
        "content": "<p>I'd leave the answer up to Oli but if remember correctly he believes lookups are the problem</p>",
        "id": 270721405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643984632
    },
    {
        "content": "<p>lookups here are still quite cheap</p>",
        "id": 270721455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984643
    },
    {
        "content": "<p>but yeah, it may not</p>",
        "id": 270721464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984647
    },
    {
        "content": "<p>that said</p>",
        "id": 270721474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984654
    },
    {
        "content": "<p>if lookups are the problem</p>",
        "id": 270721480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984656
    },
    {
        "content": "<p>but <code>IndexVec</code> perf seems to show that inserts are problematic</p>",
        "id": 270721485,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643984658
    },
    {
        "content": "<p>we could do the less sparse version</p>",
        "id": 270721491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984661
    },
    {
        "content": "<p>where you have a \"prefilled vector\"</p>",
        "id": 270721510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984674
    },
    {
        "content": "<p>I am thinking a bit</p>",
        "id": 270721514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984676
    },
    {
        "content": "<p>sorry, the less sparse version, to be explicit, is that you have a <code>Vec&lt;Option&lt;Chunk&gt;&gt;</code> for all the possible chunks</p>",
        "id": 270721582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984703
    },
    {
        "content": "<p>so that lookups are just 2 indices</p>",
        "id": 270721624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984722
    },
    {
        "content": "<p>and no searching</p>",
        "id": 270721629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984726
    },
    {
        "content": "<p>that said, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> , maybe we can capture the access pattern?</p>",
        "id": 270721647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984736
    },
    {
        "content": "<p>e.g., print out \"PUSH_HIR_OWNER\" and \"INSERT N\" and \"LOOKUP N\" and \"POP_HIR_OWNER\" to a file</p>",
        "id": 270721680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984751
    },
    {
        "content": "<p>so we can analyze it?</p>",
        "id": 270721682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984756
    },
    {
        "content": "<p>I think there's a lot of fine details here that are worth looking at</p>",
        "id": 270721734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984771
    },
    {
        "content": "<p>(e.g., how compact are the ranges? etc)</p>",
        "id": 270721748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984782
    },
    {
        "content": "<p>right, makes sense</p>",
        "id": 270721796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643984810
    },
    {
        "content": "<p>Oli was mentioning something interesting, maybe there's a crate that has some extremely performant data structure for this</p>",
        "id": 270721876,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643984859
    },
    {
        "content": "<p>Could be</p>",
        "id": 270722094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984974
    },
    {
        "content": "<p>I mean there's only so many possibilities</p>",
        "id": 270722106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984979
    },
    {
        "content": "<p>but I think first we should have a good answer to the characteristics of our access patterns</p>",
        "id": 270722137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643984999
    },
    {
        "content": "<p>the other option I'm pondering is if we can use some kind of cow setup</p>",
        "id": 270722235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985038
    },
    {
        "content": "<p>depends on how many things we access and how much they overlap</p>",
        "id": 270722258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985051
    },
    {
        "content": "<p>e.g. if we had a single huge array</p>",
        "id": 270722263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985055
    },
    {
        "content": "<p>but we keep a version number</p>",
        "id": 270722272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985061
    },
    {
        "content": "<p>so that you supply your current version when you insert/lookup</p>",
        "id": 270722290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985073
    },
    {
        "content": "<p>and it checks if that version matches</p>",
        "id": 270722296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985077
    },
    {
        "content": "<p>and makes it \"appear\" to be empty if not</p>",
        "id": 270722306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985084
    },
    {
        "content": "<p>(and presumably we save anything that gets overwritten and restore it when you \"pop\")</p>",
        "id": 270722319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985092
    },
    {
        "content": "<p>this could work very well especially if the accessed ranges are basically disjoint</p>",
        "id": 270722331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985102
    },
    {
        "content": "<p>though I guess we have the goal of being able to walk parts of the HIR independently</p>",
        "id": 270722344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985113
    },
    {
        "content": "<p>(side note, did we try ... just a huge vector? that ... might be fairly cheap)</p>",
        "id": 270722403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985128
    },
    {
        "content": "<p>you do have to initialize it, but ...</p>",
        "id": 270722412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643985135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Make.20node_id_to_hir_id.20onwer-local.20.2393438/near/270722137\">said</a>:</p>\n<blockquote>\n<p>but I think first we should have a good answer to the characteristics of our access patterns</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, I can try to get that information first and then see</p>",
        "id": 270723705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643985822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Make.20node_id_to_hir_id.20onwer-local.20.2393438/near/270722403\">said</a>:</p>\n<blockquote>\n<p>(side note, did we try ... just a huge vector? that ... might be fairly cheap)</p>\n</blockquote>\n<p>unsure what you meant but this structure is discarded at the end of <code>with_hir_id_owner</code></p>",
        "id": 270724041,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643985978
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/93438/files#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4R453\">https://github.com/rust-lang/rust/pull/93438/files#diff-ad0c15bbde97a607d4758ec7eaf88248be5d6b8ae084dfc84127f81e3f7a9bb4R453</a></p>",
        "id": 270724067,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643985991
    },
    {
        "content": "<p>but in some sense we did with <code>IndexVec</code> and <code>VecMap</code></p>",
        "id": 270724114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643986008
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Make.20node_id_to_hir_id.20onwer-local.20.2393438/near/270598064\">said</a>:</p>\n</blockquote>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> believes that it's not going to work out really well</p>\n</blockquote>\n<p>in what sense not well? not perform well?</p>\n<p>As far as I can tell from the ast node allocation, with enough macros involved ids can be horribly all over the place. Which is why I wanted to suggest to dump the maps at drop time and analyze them, but your idea of just dumping reads and writes is much better, as we can also see whether it helps to lazily doing some operations like shifting entire sections or allocating a bit of space before, not just after.</p>",
        "id": 270730600,
        "sender_full_name": "oli",
        "timestamp": 1643988858
    },
    {
        "content": "<blockquote>\n<p>e.g. if we had a single huge array</p>\n</blockquote>\n<p>That's what we have right now, and versioning the entries unfortunately doesn't help, as our goal is to split lowering and thus repeat such datastructures in each query call. It may be entirely possible that splitting alone will get us more benefits than using a hashmap costs us. Or we introduce some global mutable map that we carefully check for validity via those versioning IDs or sth similar</p>",
        "id": 270733377,
        "sender_full_name": "oli",
        "timestamp": 1643990060
    },
    {
        "content": "<p>Or in the end we should just give up and go for salsa already <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 270733672,
        "sender_full_name": "oli",
        "timestamp": 1643990199
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to migrate everything to Salsa <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 270735652,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643990905
    },
    {
        "content": "<p>Salsa doesn't yet support serialization and deserialization I believe.</p>",
        "id": 270735892,
        "sender_full_name": "bjorn3",
        "timestamp": 1643991021
    },
    {
        "content": "<p>it was a joke <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> but I guess from what Niko have said and from what I could imagine ...</p>",
        "id": 270736139,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643991134
    },
    {
        "content": "<p>if we were doing this for real, just because of a performance issue, we would hit way worser performance problems :)</p>",
        "id": 270736178,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643991159
    },
    {
        "content": "<p>until they get fixed of course :)</p>",
        "id": 270736295,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643991223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Make.20node_id_to_hir_id.20onwer-local.20.2393438/near/270735892\">said</a>:</p>\n<blockquote>\n<p>Salsa doesn't yet support serialization and deserialization I believe.</p>\n</blockquote>\n<p>some push to implement that would be nice though ;)</p>",
        "id": 270737748,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1643991816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> made some dumps of access patterns of hir IDs during lowering. Mostly its lots of inserts, in order, few reads out of order (I didn't see any in the example dump), so we probably don't even need random access that much</p>",
        "id": 271051472,
        "sender_full_name": "oli",
        "timestamp": 1644272448
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/Make.20node_id_to_hir_id.20onwer-local.20.2393438\">#t-compiler &gt; Make node_id_to_hir_id onwer-local #93438</a> by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 271444944,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644506046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> they are not strictly in order -- I think we want some \"chunking\" to allow for that, but yes, agreed that they are quite dominated by inserts that are mostly ascending</p>",
        "id": 271445514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644506243
    },
    {
        "content": "<p>one amusing thing we should dig into: are the values from the table ever read (except in the big iterations at the end)?</p>",
        "id": 271445733,
        "sender_full_name": "oli",
        "timestamp": 1644506321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is investigating, if we never read previous values, then we could move to multiple append-only lists that we don't even put all values in</p>",
        "id": 271445843,
        "sender_full_name": "oli",
        "timestamp": 1644506372
    },
    {
        "content": "<p>the docs on <code>lower_node_id</code> say that it can be called twice, but is it ever called twice on the same value?</p>",
        "id": 271445977,
        "sender_full_name": "oli",
        "timestamp": 1644506408
    },
    {
        "content": "<p>we have resolutions and resolution lookups, but those are way fewer values than all the values, as we just need to store definitions, not all ids</p>",
        "id": 271446050,
        "sender_full_name": "oli",
        "timestamp": 1644506441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/315146-t-compiler.2Fproject-incremental-hir/topic/Make.20node_id_to_hir_id.20onwer-local.20.2393438/near/271445733\">said</a>:</p>\n<blockquote>\n<p>one amusing thing we should dig into: are the values from the table ever read (except in the big iterations at the end)?</p>\n</blockquote>\n<p>lol, this is a good point</p>",
        "id": 271446301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644506543
    },
    {
        "content": "<p>yeah, there are a lot of weird things like that</p>",
        "id": 271447229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644506900
    },
    {
        "content": "<p>I was telling <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'm going to remove the ability to call <code>lower_node_id</code> twice but add an assert if you do and try to see if the compiler compiles, if it doesn't compile try to not call it twice and if it does, just remove the thing</p>",
        "id": 271447370,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644506957
    },
    {
        "content": "<p>later today I should have time to gather better data but I've also figured that it would be good to properly set up my perf environment</p>",
        "id": 271447419,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1644506981
    },
    {
        "content": "<p>sounds good</p>",
        "id": 271493212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644526699
    }
]