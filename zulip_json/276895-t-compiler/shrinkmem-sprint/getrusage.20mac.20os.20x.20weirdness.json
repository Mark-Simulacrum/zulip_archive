[
    {
        "content": "<p>I’m now wondering if RUSAGE_CHILDREN is just broken, at least for maxrss, on Mac OS X.</p>",
        "id": 227510168,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614117322
    },
    {
        "content": "<p>Like, my code seems to do the right thing on Linux, but even after correcting for the bytes/kb confusion on mac os x, I still see output like this: </p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-TIMING] crossbeam_utils test:false 1.490 user: 1.415677 sys: 0.70062 max rss (kb): 111239168 page reclaims: 29329 page faults: 0 voluntary ctxt switches: 12 involuntary ctxt switches: 810\n</code></pre></div>",
        "id": 227510335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614117396
    },
    {
        "content": "<p>Or this one</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-TIMING] core test:false 36.903 user: 35.842394 sys: 1.361294 max rss (kb): 1230303232 page reclaims: 434827 page faults: 0 voluntary ctxt switches: 265 involuntary ctxt switches: 42471\n</code></pre></div>",
        "id": 227510553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614117493
    },
    {
        "content": "<p>at some point i’m going to have to give up and resort to sampling rss via <code>ps -o rss</code></p>",
        "id": 227511588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614117767
    },
    {
        "content": "<p>macOS <code>time</code> seems to use <code>proc_pid_rusage</code> instead of <code>getrusage</code> <a href=\"https://opensource.apple.com/source/shell_cmds/shell_cmds-216.60.1/time/time.c.auto.html\">https://opensource.apple.com/source/shell_cmds/shell_cmds-216.60.1/time/time.c.auto.html</a></p>",
        "id": 227516753,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1614119694
    },
    {
        "content": "<p>I really should, at the very least, add a <code>getrusage(RUSAGE_SELF, …)</code> call to the <code>rustc</code> binary itself, and compare the numbers it yields to what the <code>rustc</code> shim is producing for <code>getrusage(RUSAGE_CHILDREN, …)</code></p>",
        "id": 227528842,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614126324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/276895-t-compiler.2Fshrinkmem-sprint/topic/getrusage.20mac.20os.20x.20weirdness/near/227528842\">said</a>:</p>\n<blockquote>\n<p>I really should, at the very least, add a <code>getrusage(RUSAGE_SELF, …)</code> call to the <code>rustc</code> binary itself, and compare the numbers it yields to what the <code>rustc</code> shim is producing for <code>getrusage(RUSAGE_CHILDREN, …)</code></p>\n</blockquote>\n<p>I did this experiment, and I believe I disconfirmed the above hypothesis that the broken-ness is contained to <code>RUSAGE_CHILDREN</code>. That is: I saw similar weirdness when using <code>RUSAGE_SELF</code> just on the <code>rustc</code> binary.</p>",
        "id": 228225536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614603634
    }
]