[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Are you hoping to find a way to profile the rustc compilation process explicitly or to collect system wide profiling analytics which allow you to dive into the specifics of the rustc process? On Windows, I'm hoping to be able to gather analytics directly related to rustc, but I'll mostly be going through system wide analytics (through Windows Performance Recorder [WPR] and Windows Performance Analyzer [WPA]).</p>",
        "id": 226379434,
        "sender_full_name": "rylev",
        "timestamp": 1613393159
    },
    {
        "content": "<p>there might be interesting correlations system wide too. like for instance, paging file behaviour is closely but sometimes not obviously related to the memory use.</p>",
        "id": 226380269,
        "sender_full_name": "nagisa",
        "timestamp": 1613393701
    },
    {
        "content": "<p>I'm planning to focus on DHAT for now, which IIUC will only focus on a single process (or process tree rooted at that process? Not sure.) System-wide stuff might be interesting, and I want to spend time better understanding my options there, but I don't think I can guarantee have something up and running on that front this week.</p>",
        "id": 226392482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613400512
    },
    {
        "content": "<p>(I am skimming over parts of Brendan Gregg's book on \"Systems Performance\", which has been on my bookshelf for probably 4 or 5 years now, to get a better feel of what tools are available here.)</p>",
        "id": 226392686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613400630
    },
    {
        "content": "<p>so one obvious issue with us using <em>only</em> DHAT is that its not really appropriate for gather data on arbitrary runs</p>",
        "id": 226833315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613664193
    },
    {
        "content": "<p>due to the overhead it imposes</p>",
        "id": 226833348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613664200
    },
    {
        "content": "<p>it will probably be more appropriate to settle on distinct tools: a minimal overhead tool that we can apply aggressively (i.e. to every <code>rustc</code> run during <code>x.py build</code>), and a more invasive one like DHAT for when we identify a specific rustc invocation that we want more information out of</p>",
        "id": 226833951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613664351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/276895-t-compiler.2Fshrinkmem-sprint/topic/Memory.20profiling.20tooling/near/226833315\">said</a>:</p>\n<blockquote>\n<p>so one obvious issue with us using <em>only</em> DHAT is that its not really appropriate for gather data on arbitrary runs</p>\n</blockquote>\n<p>oh, actually, this might have been … false?</p>",
        "id": 226877127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613680994
    },
    {
        "content": "<p>(I misinterpreted data from a run that I was doing overnight that got interrupted by my putting the computer to sleep without checking if it was still running the build!)</p>",
        "id": 226877212,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613681039
    },
    {
        "content": "<p>At least, I just did a bootstrap where it took 6m30s to bootstrap without dhat, and a subsequent clean+build with <code>RUSTC_WRAPPER=dhat</code> took 7m01s.</p>",
        "id": 226877462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613681142
    },
    {
        "content": "<p>The rustc-perf collector readme says DHAT and Massif both incur a 5-20x slowdown, and that seems right from what I've seen. I've tried running DHAT on rustc_middle compilation before, and gave up when it it was taking too long. I can't remember how long that was though. I've run Massif successfully on rustc_middle, FWIW.</p>",
        "id": 226878893,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613681733
    },
    {
        "content": "<p>I must be doing something wrong with DHAT</p>",
        "id": 226880518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682312
    },
    {
        "content": "<p>In hindsight, the data it is spitting out seems incomplete. I wasn't using <code>--trace-children=true</code>, but I don't think I should have to do that just to see the memory profile of the single <code>rustc</code> process..</p>",
        "id": 226880746,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682409
    },
    {
        "content": "<p>are you running rustc via the rustup shim?</p>",
        "id": 226880946,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682485
    },
    {
        "content": "<p>oh ... oh dear</p>",
        "id": 226881049,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682537
    },
    {
        "content": "<p>that must be what's happening</p>",
        "id": 226881077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682549
    },
    {
        "content": "<p>but ... I thought the whole point is that x.py won't do that?</p>",
        "id": 226881253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682621
    },
    {
        "content": "<p>wait, how are you running it?</p>",
        "id": 226881290,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682638
    },
    {
        "content": "<p>/me turns on <code>--verbose</code> mode</p>",
        "id": 226881293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682640
    },
    {
        "content": "<p>x.py won't go through the rustup shim</p>",
        "id": 226881315,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682648
    },
    {
        "content": "<p>but it has its own shim</p>",
        "id": 226881327,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682653
    },
    {
        "content": "<p>ah</p>",
        "id": 226881373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682666
    },
    {
        "content": "<p>if you want dhat or similar, I'd strongly recommend directly running build/x86_.../stage1/bin/rustc</p>",
        "id": 226881387,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682674
    },
    {
        "content": "<p>yeah okay</p>",
        "id": 226881429,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682682
    },
    {
        "content": "<p>I want to start with developing some recipe for gathering data per-crate</p>",
        "id": 226881478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682700
    },
    {
        "content": "<p>with low-overhead</p>",
        "id": 226881489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682704
    },
    {
        "content": "<p>within x.py?</p>",
        "id": 226881628,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682768
    },
    {
        "content": "<p>yes</p>",
        "id": 226881673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682784
    },
    {
        "content": "<p>or</p>",
        "id": 226881687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682786
    },
    {
        "content": "<p>at least by setting RUSTC_WRAPPER</p>",
        "id": 226881698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682793
    },
    {
        "content": "<p>i.e. try to keep the current build workflow as unchanged as I can</p>",
        "id": 226881769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682816
    },
    {
        "content": "<p>hm</p>",
        "id": 226881922,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682872
    },
    {
        "content": "<p><code>/usr/bin/time</code> might be fine</p>",
        "id": 226881945,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682880
    },
    {
        "content": "<p>we already have a mode to print time (via <code>std::time::instant</code>) in rustbuild</p>",
        "id": 226881999,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682908
    },
    {
        "content": "<p>er</p>",
        "id": 226882005,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682911
    },
    {
        "content": "<p>does it print RSS too?</p>",
        "id": 226882039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682927
    },
    {
        "content": "<p><code>/usr/bin/time -v</code> will show memory info</p>",
        "id": 226882049,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682933
    },
    {
        "content": "<p>not currently, but we could add it</p>",
        "id": 226882050,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682933
    },
    {
        "content": "<p>/usr/bin/time is platform specific, I guess anything in rustbuild would be too</p>",
        "id": 226882086,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682950
    },
    {
        "content": "<p>not sure what's better</p>",
        "id": 226882103,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682961
    },
    {
        "content": "<p>tell people to install the GNU time?</p>",
        "id": 226882204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613682991
    },
    {
        "content": "<p>probably easier to give instructions if it's integrated and we support whatever is needed for windows, macos, and linux to get rss data</p>",
        "id": 226882206,
        "sender_full_name": "simulacrum",
        "timestamp": 1613682992
    },
    {
        "content": "<p>but yeah, I think you're right: Add it to rustbuild</p>",
        "id": 226882223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613683003
    },
    {
        "content": "<p>I would add as a separate flag from the current time one (but potentially also something we enable on perf.rlo etc); the time output is parsed in theory by some scripts, and certainly by perf.rlo, so I wouldn't want to change it ad-hoc too much</p>",
        "id": 226882340,
        "sender_full_name": "simulacrum",
        "timestamp": 1613683058
    },
    {
        "content": "<p>right, I won't perturb current output format.</p>",
        "id": 226882431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613683085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is RUSTC_PRINT_STEP_TIMINGS the thing you're referencing above?</p>",
        "id": 226885507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613684477
    },
    {
        "content": "<p>yes</p>",
        "id": 226885517,
        "sender_full_name": "simulacrum",
        "timestamp": 1613684483
    },
    {
        "content": "<p>I think there's a config.toml option for it</p>",
        "id": 226885532,
        "sender_full_name": "simulacrum",
        "timestamp": 1613684493
    },
    {
        "content": "<p>we just pass state to the shim scripts via environment</p>",
        "id": 226885555,
        "sender_full_name": "simulacrum",
        "timestamp": 1613684504
    },
    {
        "content": "<p>oh, you're right, there's a <code>print_step_timings</code> key mentioned in bootstrap/config.rs</p>",
        "id": 226885668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613684535
    },
    {
        "content": "<p>hmm, I had forgotten that <code>-Ztime-passes</code> already spits out rss info</p>",
        "id": 226888465,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613685683
    },
    {
        "content": "<p>(at a finer-grain, but still)</p>",
        "id": 226888566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613685703
    },
    {
        "content": "<p>I think only on linux?</p>",
        "id": 226889211,
        "sender_full_name": "simulacrum",
        "timestamp": 1613685851
    },
    {
        "content": "<p>that might explain why I've never seen it (since I've tended to use <code>-Ztime-passes</code> on my mac alone), I think</p>",
        "id": 226889307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613685875
    },
    {
        "content": "<p>rustc_data_structures::profiling::get_resident_set_size looks like its trying to do <em>something</em> on Windows</p>",
        "id": 226890338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686150
    },
    {
        "content": "<p>ah, I see: that function <em>won't</em> work for \"Mac OS X\", because its leveraging the <code>/proc</code> file system</p>",
        "id": 226890678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686235
    },
    {
        "content": "<p>but I could replace it with a <code>getrusage</code> call</p>",
        "id": 226890853,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686280
    },
    {
        "content": "<p>there must already be a crate for this</p>",
        "id": 226890882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686289
    },
    {
        "content": "<p>rustc-perf handrolls it</p>",
        "id": 226890915,
        "sender_full_name": "simulacrum",
        "timestamp": 1613686302
    },
    {
        "content": "<p>with getrusage</p>",
        "id": 226890959,
        "sender_full_name": "simulacrum",
        "timestamp": 1613686315
    },
    {
        "content": "<p>oh, I'm having flashbacks to my PhD days</p>",
        "id": 226891094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686351
    },
    {
        "content": "<p>\"probably misreports RSS on macOS\"</p>",
        "id": 226891120,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686359
    },
    {
        "content": "<p>(from description for <a href=\"https://crates.io/crates/getr\">https://crates.io/crates/getr</a> )</p>",
        "id": 226891148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686367
    },
    {
        "content": "<p>oh dear</p>",
        "id": 226891320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686413
    },
    {
        "content": "<p>they didn't even try to make the struct OS speciifc</p>",
        "id": 226891351,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686423
    },
    {
        "content": "<p><a href=\"https://docs.rs/sysinfo/0.16.3/sysinfo/trait.ProcessExt.html#tymethod.memory\">https://docs.rs/sysinfo/0.16.3/sysinfo/trait.ProcessExt.html#tymethod.memory</a> is <em>very</em> heavy as a dependency I imagine, but I guess is cross platform :)</p>",
        "id": 226891489,
        "sender_full_name": "simulacrum",
        "timestamp": 1613686453
    },
    {
        "content": "<p>I have to go, but I'll look more at this later.</p>",
        "id": 226891688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613686508
    },
    {
        "content": "<p>To record large allocations one could also lower the size at which the malloc implementation does a direct mmap allocation and then perf record mmap syscalls.</p>",
        "id": 226951413,
        "sender_full_name": "The 8472",
        "timestamp": 1613734490
    },
    {
        "content": "<p>rustc compiles jemalloc with stats enabled, so that would be another potential source of information (there is also memory profiling support, but disabled by default).</p>",
        "id": 226954750,
        "sender_full_name": "tm",
        "timestamp": 1613736681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/276895-t-compiler.2Fshrinkmem-sprint/topic/Memory.20profiling.20tooling/near/226891351\">said</a>:</p>\n<blockquote>\n<p>they didn't even try to make the struct OS speciifc</p>\n</blockquote>\n<p>Is this struct actually defined with a common type (or at least prefix) on Linux and Mac? That does not match my recollection from over a decade ago, but maybe I'm thinking of a different struct</p>",
        "id": 226982667,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613749983
    },
    {
        "content": "<p>seems like its at least worth taking a shot here</p>",
        "id": 226983033,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613750111
    },
    {
        "content": "<p>how it started: “worth taking a shot”. how its going: \"[RUSTC-TIMING] core test:false 32.757  max rss (kb): 121542246\"</p>",
        "id": 227027334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613768351
    },
    {
        "content": "<p>To be clear, maxrss report seems okay on Linux. (Above is from my Mac, <em>after</em> dividing by 1024 to correct for the bytes/kb discrepancy between Linux+Mac. So, something is still wrong.)</p>",
        "id": 227027541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613768454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> imo we should report in bytes and do that multiplication in the code</p>",
        "id": 227038242,
        "sender_full_name": "simulacrum",
        "timestamp": 1613772949
    },
    {
        "content": "<p>it's been a long-standing annoyance that perf.rlo doesn't</p>",
        "id": 227038257,
        "sender_full_name": "simulacrum",
        "timestamp": 1613772957
    },
    {
        "content": "<p>I don’t have a preference about whether the metric is reported in kb or in bytes. Just needs to be consistent (or, if its inconsistent, then the unit needs to be attached to the value as a suffix)</p>",
        "id": 227049876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613780180
    },
    {
        "content": "<p>(for people following along: my PR <a href=\"https://github.com/rust-lang/rust/issues/82532\">#82532</a> \"Add <code>build.print_step_rusage</code> to config.toml\" landed an hour ago. I suspect it only works reliably on Linux, as noted above.)</p>",
        "id": 228227324,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614604436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/276895-t-compiler.2Fshrinkmem-sprint/topic/Memory.20profiling.20tooling/near/226833315\">said</a>:</p>\n<blockquote>\n<p>so one obvious issue with us using <em>only</em> DHAT is that its not really appropriate for gather data on arbitrary runs</p>\n</blockquote>\n<p>some concrete data here: Running dhat on the compile of <code>rustc_query_impl</code> took a little less than ... 6 hours on my machine.</p>",
        "id": 228712550,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614830301
    },
    {
        "content": "<p>(it normally takes about 80 seconds.)</p>",
        "id": 228712593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614830353
    },
    {
        "content": "<p>so if my math is right, that's a 270x overhead. I wonder if something's wrong, or if the overhead is not O(1).</p>",
        "id": 228712712,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614830430
    },
    {
        "content": "<p>Decided to try a similar experiment of running <code>massif</code> on the compile of <code>rustc_query_impl</code>. The good news is that this \"finished\" in a little over 2 hours. The bad news is I put \"finished\" in quotes because it didn't complete successfully: Valgrind signaled an Internal Error:</p>",
        "id": 228781415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614868251
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>--776900-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting\n--776900-- si_code=2;  Faulting address: 0x104E5DCFB8;  sp: 0x104bcced30\n\nvalgrind: the &#39;impossible&#39; happened:\n   Killed by fatal signal\n</code></pre></div>",
        "id": 228781510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614868279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/276895-t-compiler.2Fshrinkmem-sprint/topic/Memory.20profiling.20tooling/near/228712712\">said</a>:</p>\n<blockquote>\n<p>so if my math is right, that's a 270x overhead. I wonder if something's wrong, or if the overhead is not O(1).</p>\n</blockquote>\n<p>DHAT has definitely taken outrageous amounts of time to run on rustdoc before</p>",
        "id": 228781879,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614868400
    },
    {
        "content": "<p><a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219669766\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219669766</a></p>",
        "id": 228782076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614868460
    }
]