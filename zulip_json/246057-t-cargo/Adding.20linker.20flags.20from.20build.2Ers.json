[
    {
        "content": "<p>As discussed in <a href=\"https://github.com/rust-lang/cargo/issues/7984\">https://github.com/rust-lang/cargo/issues/7984</a>, it would be very useful for the embedded ecosystem if <a href=\"http://build.rs\">build.rs</a> had the capability to pass a linker script to the linker. Is this something that would be reasonable to allow? If so, is there any preference for how the support should look?</p>\n<p>It seems that <code>rustc-flags</code> is deliberately limited to <code>-l</code> and <code>-L</code>, which I think only affect linked artifacts, so would it make sense to allow <code>-Clink-arg</code>/<code>-Clink-args</code> there too?</p>",
        "id": 216754513,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605393968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> linker scripts are once per link, right? That is we would not expect more than one library to provide this?</p>",
        "id": 216754764,
        "sender_full_name": "simulacrum",
        "timestamp": 1605394238
    },
    {
        "content": "<p>It also seems like you'd want to detect the linker being used for this to work well...</p>",
        "id": 216754772,
        "sender_full_name": "simulacrum",
        "timestamp": 1605394258
    },
    {
        "content": "<p>There can be arbitrarily many linker scripts</p>",
        "id": 216754776,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605394263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Adding.20linker.20flags.20from.20build.2Ers/near/216754772\">said</a>:</p>\n<blockquote>\n<p>It also seems like you'd want to detect the linker being used for this to work well...</p>\n</blockquote>\n<p>Yeah, while we do only use GNU LD compatible linkers, they can be used directly, or via a GCC wrapper, which takes different arguments.</p>",
        "id": 216754808,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605394315
    },
    {
        "content": "<p>Ok. I think general link argument  is very flexible so maybe limiting to just linker script would make sense? But it seems reasonable to me to allow this - it sounds like linker scripts are not all that different from linked libraries from a build system perspective</p>",
        "id": 216754934,
        "sender_full_name": "simulacrum",
        "timestamp": 1605394438
    },
    {
        "content": "<p>Yeah that would work</p>",
        "id": 216754991,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605394464
    },
    {
        "content": "<p>Does Cargo know the linker in use?</p>",
        "id": 216754996,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605394475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> Would arbitrary rustc flags be good enough?  It doesn't help if you want a library to define a linker script, but you could have a build-dependency that generates the script?</p>",
        "id": 216755251,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605394868
    },
    {
        "content": "<p>Hmm, so you mean a dependency's build script could not pass the flag?</p>",
        "id": 216755256,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605394911
    },
    {
        "content": "<p>Right, the flags only apply to the package.</p>",
        "id": 216755296,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605394940
    },
    {
        "content": "<p>What I'd like to get rid of is the currently mandatory <code>.cargo/config</code> that specifies linker flags</p>",
        "id": 216755326,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605394996
    },
    {
        "content": "<p>Actually I forgot that we don't just have build scripts</p>",
        "id": 216755333,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605395007
    },
    {
        "content": "<p>We also have to <em>always</em> pass <code>--nmagic</code> to the linker, for cursed reasons</p>",
        "id": 216755343,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605395025
    },
    {
        "content": "<p>So we would need more than just linker script support</p>",
        "id": 216755344,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605395034
    },
    {
        "content": "<p>I'm just thinking if <a href=\"https://github.com/rust-lang/cargo/pull/8441\">https://github.com/rust-lang/cargo/pull/8441</a> might help you.  That would allow you to have a build script pass the args instead of <code>.cargo/config</code>.  I'm not sure if that's much better, but maybe if it uses a build-dependency that could hide most of the complexity?</p>",
        "id": 216755390,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605395098
    },
    {
        "content": "<p>Cargo doesn't know anything about the linker in use or the linking phase, only <code>rustc</code> knows about it.</p>",
        "id": 216755399,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605395139
    },
    {
        "content": "<p>Hmm, I see, that might help a bit I suppose</p>",
        "id": 216755518,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605395399
    },
    {
        "content": "<p>So <code>rustc-cdylib-link-arg</code> is also ignored if it comes from dependencies instead of being accumulated?</p>",
        "id": 216755562,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605395424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Adding.20linker.20flags.20from.20build.2Ers/near/216755343\">said</a>:</p>\n<blockquote>\n<p>We also have to <em>always</em> pass <code>--nmagic</code> to the linker, for cursed reasons</p>\n</blockquote>\n<p>I'm aware of that one too, and I'd like that as well.</p>",
        "id": 216755653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605395630
    },
    {
        "content": "<p>Right, it is not accumulated.</p>",
        "id": 216755654,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605395634
    },
    {
        "content": "<p>If not for the fact that there are <em>sometimes</em> reasons to want sections aligned, we could just always pass <code>--nmagic</code> when linking statically.</p>",
        "id": 216755697,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605395659
    },
    {
        "content": "<p>Unfortunately, I don't think we can do that. :(</p>",
        "id": 216755701,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605395668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> rustc-cdylib-link-arg has many restrictions (and some could be relaxed) but it applies only to the main crate, if you want to apply it to the dependencies you might be better off using <code>RUSTFLAGS</code>.</p>",
        "id": 217494629,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1605952937
    },
    {
        "content": "<p>That's not an option, we can't require every user to set that</p>",
        "id": 217497587,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605957801
    },
    {
        "content": "<p>I do not see how adding something to <a href=\"http://build.rs\">build.rs</a> would impact something outside its crate =/</p>",
        "id": 217498391,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1605959241
    },
    {
        "content": "<p>Would be nicer to extend the amount of overrides you can put in <code>.cargo/config</code> IMHO</p>",
        "id": 217498572,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1605959574
    },
    {
        "content": "<p>We have just realized that our linker script scheme falls apart when not cross-compiling, since Cargo apparently has no way to configure rustc flags for only the main binary, and not build scripts</p>",
        "id": 218356804,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606775985
    },
    {
        "content": "<p>That means that when we aren't cross-compiling, the linker script ends up getting passed to every single rustc invocation, including those that build build scripts, and that breaks since we don't expect it</p>",
        "id": 218356892,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606776035
    },
    {
        "content": "<p>When cross-compiling, the rustflags only apply to crates that are actually needed on the target, which is exactly what we want</p>",
        "id": 218356932,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606776062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I have an awful hack for you: pass <code>--target &lt;host&gt;</code>, where &lt;host&gt; is the platform you're currently on</p>",
        "id": 218358534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606777111
    },
    {
        "content": "<p>Apparently that still passes rustflags to build scripts</p>",
        "id": 218358710,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606777226
    },
    {
        "content": "<p>that's weird, it doesn't pass rustdocflags <a href=\"https://github.com/rust-lang/cargo/issues/7677#issuecomment-572303070\">https://github.com/rust-lang/cargo/issues/7677#issuecomment-572303070</a></p>",
        "id": 218359190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606777544
    },
    {
        "content": "<p>maybe that's specific to proc-macros</p>",
        "id": 218359252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606777577
    }
]