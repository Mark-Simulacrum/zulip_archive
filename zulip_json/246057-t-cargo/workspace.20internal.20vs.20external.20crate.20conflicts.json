[
    {
        "content": "<p>Hi, </p>\n<p>I was playing around with Cargo and was wondering why the following cargo.toml compiles fine:</p>\n<div class=\"codehilite\"><pre><span></span><code>[dependencies]\nserde = &quot;1.0&quot;\nserde2 = { package = &quot;serde&quot;, path = &quot;../serde&quot;}\n</code></pre></div>\n<p>But I seem to be having trouble with this compiling:</p>\n<div class=\"codehilite\"><pre><span></span><code>[dependencies]\nserde = &quot;1.0&quot;\nserde2 = { path = &quot;../serde&quot;}\n</code></pre></div>\n<p>?</p>",
        "id": 219372033,
        "sender_full_name": "kev",
        "timestamp": 1607536150
    },
    {
        "content": "<p>In the second case a package names <code>serde2</code> is expected, but it is called <code>serde</code>.</p>",
        "id": 219372114,
        "sender_full_name": "bjorn3",
        "timestamp": 1607536193
    },
    {
        "content": "<p>That makes sense. Do you know why the first case compiles? I thought it would not since I made the package name to serde</p>",
        "id": 219372275,
        "sender_full_name": "kev",
        "timestamp": 1607536255
    },
    {
        "content": "<p>The first case you are using the dependency renaming feature. It will expect a package called <code>serde</code>, but then tell rustc to treat it as if it was called <code>serde2</code> when compiling the current crate.</p>",
        "id": 219372368,
        "sender_full_name": "bjorn3",
        "timestamp": 1607536313
    },
    {
        "content": "<p>Oh I see, I was completely misunderstanding the feature. Thank you for correcting me</p>",
        "id": 219372833,
        "sender_full_name": "kev",
        "timestamp": 1607536525
    }
]