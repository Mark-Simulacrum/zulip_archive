[
    {
        "content": "<p>With <a href=\"https://github.com/rust-lang/cargo/issues/9063\">https://github.com/rust-lang/cargo/issues/9063</a> now I'm gonna go ahead and call it, Cargo always has a bug in <code>Unit</code> generation that we either know or don't know about</p>",
        "id": 222329160,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1610386103
    },
    {
        "content": "<p>while somewhat sarcastic I would say that the current <code>Unit</code> really has not lived up to its promises, and it's weirdly always fraught with bugs. I don't really know how to fix this, but if others have ideas for a large-ish overhaul I think it'd be interesting to explore</p>",
        "id": 222329250,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1610386153
    },
    {
        "content": "<p>I've been amazed how for over 5 years consistently there's <em>always</em> been bugs with <code>Unit</code>, dropped edges, stack overflows, etc.</p>",
        "id": 222329303,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1610386184
    },
    {
        "content": "<p>There's a lot of complexity that piles up in the form of build scripts, proc-macros, dev-dependencies, rustdoc, etc.  Constructing the unit graph is the one place where all that complexity gets focused. I'm skeptical that the complexity could be isolated or layered in a way that would be noticeably better than it is now.  </p>\n<p>I think it is somewhat fundamental to the high-level nature of Cargo. There needs to be some sort of graph of nodes to track the dependencies, and <code>Unit</code> is probably as good as any other choice. The issue is that Cargo has some really high-level concepts (build scripts, <code>links</code>, proc-macros, etc.) that require wiring a bunch of dependency edges correctly. Something like ninja is much simpler because it requires the user to explicitly state all those dependencies. To me it seems like that is just the nature of having a lot of high-level concepts with a bunch of implicit rules. The apparent complexity is deceptively hidden. If Cargo just spit out a ninja file, I think it would still suffer the same issues.</p>",
        "id": 222345776,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610393505
    },
    {
        "content": "<p>Nah I definitely agree with this assessment, and it's what I've often thought as well. We've been able to get away with various tweaks over time because the high-level concepts aren't always super-precisely defined. Additionally I've often thought that we're alleviating all other users from writing buggy ninja-files (if they were to write something more low-level). </p>\n<p>Despite all that though I'm genuinely impressed how buggy <code>Unit</code>-related construction has been over time. We always seem to be in a weird valley of at least one bug or two. The saving grace is that it at least doesn't seem to come up all that often for projects!</p>\n<p>I agree there's probably not a great alternative though, but I'd still love to find one anyway heh</p>",
        "id": 222346961,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1610394024
    },
    {
        "content": "<p>I was always skeptical that proc macros wasn't their own dependency type. Especially with cross and things, it's not just a different type of node, but also a different type of edge.</p>",
        "id": 222472309,
        "sender_full_name": "John Ericson",
        "timestamp": 1610475335
    }
]