[
    {
        "content": "<p>When cargo generates files like <code>libfoo-bfaf942440547afb.rmeta</code> how is the hash determined? If I read the repository correctly, is it a hex encoding of the sha256 hash of some information about the package's dependencies and/or version?</p>\n<p>I ask because I'm trying to use the unit-graph feature to determine the rmeta path for a package's dependency. I was naively grepping for <code>libfoo-*.rmeta</code>but that won't work if the package depends on two different versions of foo.</p>",
        "id": 232316695,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617043717
    },
    {
        "content": "<blockquote>\n<p>When cargo generates files like <code>libfoo-bfaf942440547afb.rmeta</code> how is the hash determined? If I read the repository correctly, is it a hex encoding of the sha256 hash of some information about the package's dependencies and/or version?</p>\n</blockquote>\n<p>Correct</p>",
        "id": 232317054,
        "sender_full_name": "bjorn3",
        "timestamp": 1617043910
    },
    {
        "content": "<p>I have never used the unit graph feature.</p>",
        "id": 232317172,
        "sender_full_name": "bjorn3",
        "timestamp": 1617043950
    },
    {
        "content": "<p>(paging <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> since you opened the unit-graph tracking issue)</p>\n<p>Would anyone be opposed if I added a feature to unit-graph that puts the dep hash into a new <code>units[].dependencies[].dep_hash</code> field?</p>",
        "id": 232317877,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617044266
    },
    {
        "content": "<p>The unit-graph feature isn't really intended to be used in that way, so I would be a little wary of extending it in that way.</p>\n<p>I'm not sure what you are trying to accomplish, but would it be possible using the JSON output (which provides artifact messages) or something like RUSTC_WRAPPER (or RUSTC_WORKSPACE_WRAPPER)?</p>",
        "id": 232319815,
        "sender_full_name": "Eric Huss",
        "timestamp": 1617045095
    },
    {
        "content": "<p>I'm trying to make an analysis tool that uses rustc_private. To invoke rustc on an arbitrary Cargo project, I need to know the set of rustc flags needed, eg <code>--extern</code> flags. See my WIP: <a href=\"https://github.com/willcrichton/generate-rustc-flags/blob/master/src/lib.rs#L84\">https://github.com/willcrichton/generate-rustc-flags/blob/master/src/lib.rs#L84</a></p>\n<p>An issue with using JSON logs or RUSTC_WRAPPER is that Cargo won't actually try to run rustc unless the corresponding cache is invalidated. I'm not sure how to find that cache or know which file to delete.</p>",
        "id": 232330940,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617049902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span> With <code>RUSTC_WORKSPACE_WRAPPER</code>, cargo uses separate hashing for filenames so they aren't shared with a normal <code>cargo check</code>.  If your wrapper doesn't output any files, then cargo will always re-run the command (since the output is missing).  That's one option to \"force\" your analysis tool to always run.</p>\n<p>This sounds similar to what <code>cargo miri</code> does.  It hijacks rustc (using <code>RUSTC_WRAPPER</code>), and runs a rustc_private executable to analyze the code.</p>",
        "id": 232333185,
        "sender_full_name": "Eric Huss",
        "timestamp": 1617050837
    },
    {
        "content": "<p>Ah looking at miri is a great point, I will check that out. Thanks for the help!</p>",
        "id": 232334691,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617051472
    }
]