[
    {
        "content": "<p>Hey all! I see that in Nightly cargo has <code>--out-dir</code> but no way to set the output filename, and you can pass <code>cargo:rustc-cdylib-link-arg=-o</code> to tell rustc what filename to create but it doesn't work correctly with caching. Is there any way to customize the output filename so that cargo's caching logic still works?</p>",
        "id": 220161237,
        "sender_full_name": "David Herman",
        "timestamp": 1608146919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372208\">@David Herman</span> you can customize somewhat with <code>lib.name</code> in the manifest, but otherwise there's no way to customize it</p>",
        "id": 220168543,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608150517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372208\">@David Herman</span> Can you give an example of what you're trying to do?</p>",
        "id": 220172656,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608152557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> the Neon project builds native Node.js modules in rust, which are DLL’s conventionally named <code>index.node</code></p>",
        "id": 220183182,
        "sender_full_name": "David Herman",
        "timestamp": 1608158123
    },
    {
        "content": "<p>We’d like to be able to build with bare cargo, without a wrapper script that does stuff like rename the final file. A wrapper script imposes a nonstandard UX on end users, who’d rather be able to just call <code>cargo build</code></p>",
        "id": 220183305,
        "sender_full_name": "David Herman",
        "timestamp": 1608158192
    },
    {
        "content": "<p>Interesting. So, these are ELF shared libraries, but they're conventionally named <code>.node</code> rather than <code>.so</code>?</p>",
        "id": 220184271,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608158686
    },
    {
        "content": "<p>That doesn't seem unreasonable to me.</p>",
        "id": 220184274,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608158690
    },
    {
        "content": "<p>I personally wouldn't object to an <code>output-filename</code> option, to appear alongside <code>name</code>, as long as it only applied to <code>cdylib</code>.</p>",
        "id": 220184342,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608158730
    },
    {
        "content": "<p>What’s the best way to make this happen? An RFC, or just a cargo issue?</p>",
        "id": 220186229,
        "sender_full_name": "David Herman",
        "timestamp": 1608159848
    },
    {
        "content": "<p>I mean to propose it</p>",
        "id": 220186530,
        "sender_full_name": "David Herman",
        "timestamp": 1608160046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372208\">@David Herman</span> I'd suggest a very short RFC, that cites this specific example and probably at least one more where people might need to build a shared library with a specific naming convention.</p>",
        "id": 220191293,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608163539
    },
    {
        "content": "<p>Ah this makes me remember, I think <a href=\"https://github.com/rust-lang/cargo/issues/1706\">https://github.com/rust-lang/cargo/issues/1706</a> is basically this as well</p>",
        "id": 220193092,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608164922
    },
    {
        "content": "<p>Ooh yes! And that issue is linked to <a href=\"https://github.com/rust-lang/cargo/issues/8628\">https://github.com/rust-lang/cargo/issues/8628</a> which exactly describes the category of use case I'm working in.</p>",
        "id": 220196800,
        "sender_full_name": "David Herman",
        "timestamp": 1608168143
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/1706#issuecomment-442891843\">https://github.com/rust-lang/cargo/issues/1706#issuecomment-442891843</a> in particular mentions this use case.</p>",
        "id": 220223659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608198819
    },
    {
        "content": "<p>I would like output file name to also be allowed on executable</p>",
        "id": 220255964,
        "sender_full_name": "Lokathor",
        "timestamp": 1608218411
    },
    {
        "content": "<p>If I tried to write my own PR to implement this would I regret my life decisions? I see there's a comment in 1706 with tips on implementation. Any links to \"how to make your first contribution to cargo\"?</p>",
        "id": 220278284,
        "sender_full_name": "David Herman",
        "timestamp": 1608227667
    },
    {
        "content": "<p>Ooh neat! <a href=\"https://doc.crates.io/contrib/\">https://doc.crates.io/contrib/</a> Let's see how this goes :D</p>",
        "id": 220284174,
        "sender_full_name": "David Herman",
        "timestamp": 1608230452
    },
    {
        "content": "<p>Thank <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> for that :-P</p>",
        "id": 220284262,
        "sender_full_name": "Eh2406",
        "timestamp": 1608230505
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> &lt;3</p>",
        "id": 220284366,
        "sender_full_name": "David Herman",
        "timestamp": 1608230543
    },
    {
        "content": "<p>What on earth is this <code>im-a-teapot</code> thing? I'm trying to follow the instructions in the comment in <a href=\"http://features.rs\">features.rs</a> and it sent me to <code>Manifest::feature_gate</code> which just checks if it's … a … teapot?</p>",
        "id": 220310495,
        "sender_full_name": "David Herman",
        "timestamp": 1608243146
    },
    {
        "content": "<p>It is a unstable feature flag used to test if cargo is correctly handling unstable feature flags.</p>",
        "id": 220311292,
        "sender_full_name": "Eh2406",
        "timestamp": 1608243585
    },
    {
        "content": "<p>It is used for tests like \"can you use unstable feature flag on nightly but not on stable\"</p>",
        "id": 220311384,
        "sender_full_name": "Eh2406",
        "timestamp": 1608243626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> can you help me understand what the instructions in the <code>features.rs</code> comment are telling me when they say I should update <code>Manifest::feature_gate</code>? That method isn't documented so I can't quite figure out what it's for.</p>",
        "id": 220311844,
        "sender_full_name": "David Herman",
        "timestamp": 1608243920
    },
    {
        "content": "<p>I would love to help, but unfortunately I need to get offline for tonight. Sorry.</p>",
        "id": 220312652,
        "sender_full_name": "Eh2406",
        "timestamp": 1608244371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372208\">@David Herman</span> still have the same question? I can try to help out</p>",
        "id": 220390029,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608307434
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>! But I'm having second thoughts about this feature. See: <a href=\"https://github.com/rust-lang/cargo/issues/1706#issuecomment-748407208\">https://github.com/rust-lang/cargo/issues/1706#issuecomment-748407208</a> -- I'd be curious what you think.</p>",
        "id": 220488928,
        "sender_full_name": "David Herman",
        "timestamp": 1608414568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372208\">@David Herman</span> responded on thread, but I think both filename and filestem still make sense</p>",
        "id": 220498249,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608430577
    },
    {
        "content": "<p>What does the filename option mean, in your mind, given that there may be multiple files?</p>",
        "id": 220500384,
        "sender_full_name": "David Herman",
        "timestamp": 1608434919
    },
    {
        "content": "<p>I imagine that it either errors or tries it's damndest to figure out what you probably meant for the other files</p>",
        "id": 220511104,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608456198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Is there any multi-file case other than PDB on Windows?</p>",
        "id": 220540038,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608502755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <code>.dSYM</code> on macOS is similar, and emscripten I think emits js/wasm</p>",
        "id": 220615066,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608575883
    },
    {
        "content": "<p>Is there any naming convention for what to name a .dSYM on macOS for a binary?</p>",
        "id": 220615388,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608576087
    },
    {
        "content": "<p>If you had a program <code>abc-42.xyz</code>, can you just append .dSYM?</p>",
        "id": 220615480,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608576130
    },
    {
        "content": "<p>AFAIK it's \"always append <code>.dSYM</code>\" but I haven't tested</p>",
        "id": 220615545,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608576168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> FYI, <a href=\"https://github.com/rust-lang/cargo/blob/e10b79189d123d197766b26dff76ec910558ee12/src/cargo/core/compiler/build_context/target_info.rs#L353-L376\">here</a> is how Cargo handles dSYM naming conventions.  The link <a href=\"https://lldb.llvm.org/use/symbols.html\">https://lldb.llvm.org/use/symbols.html</a> contains some more information about how macOS finds dSYM filenames.</p>",
        "id": 220626409,
        "sender_full_name": "Eric Huss",
        "timestamp": 1608582234
    },
    {
        "content": "<p>Oh, so even in the dynamic library case, the extension is .dylib.dSYM?</p>",
        "id": 220626726,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608582430
    },
    {
        "content": "<p>In that case, I think we could just append .dSYM to whatever file name the user supplies in the manifest.</p>",
        "id": 220626760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608582450
    },
    {
        "content": "<p>Yea, I think so.</p>",
        "id": 220626942,
        "sender_full_name": "Eric Huss",
        "timestamp": 1608582555
    },
    {
        "content": "<p>Then I wonder what the algorithm is that windows uses to find a PDB file from an executable or library.</p>",
        "id": 220627154,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608582705
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span></p>",
        "id": 220627299,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608582785
    },
    {
        "content": "<p>I believe this is correct: <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/symbol-paths\">https://docs.microsoft.com/en-us/windows/win32/debug/symbol-paths</a></p>",
        "id": 220627547,
        "sender_full_name": "rylev",
        "timestamp": 1608582938
    },
    {
        "content": "<p>Look at that function <code>file_types</code>, it explains PDB as well.  The absolute path to the PDB is embedded in the executable, and is the filename is <code>crate_name.pdb</code>.  Ideally I think Cargo should be running <code>rustc</code> with <code>-o</code> to avoid the underscore/hyphen swap.</p>",
        "id": 220627668,
        "sender_full_name": "Eric Huss",
        "timestamp": 1608583022
    },
    {
        "content": "<p>(Sorry, haven't been following this discussion, so I'm not too sure if you already knew that.)</p>",
        "id": 220627714,
        "sender_full_name": "Eric Huss",
        "timestamp": 1608583053
    },
    {
        "content": "<p>(And look towards the top of that function for how it handles Windows import libraries with different linkers.)</p>",
        "id": 220627910,
        "sender_full_name": "Eric Huss",
        "timestamp": 1608583178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> I was trying to find the standard mechanism for when the path isn't embedded. (Also, I didn't realize that the <em>absolute path</em> was embedded; ick. So much for reproducible builds...)</p>",
        "id": 220644543,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608594679
    },
    {
        "content": "<p>But in any case, it looks like executables and libraries with nonstandard extensions may be supported.</p>",
        "id": 220644581,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608594721
    }
]