[
    {
        "content": "<p>If I need to use cargo to fetch dependencies of a package which only target the native architecture, I have to manually determine the architecture of the machine for example writing a bash script. If this build script is a general purpose one which aims to fetch dependencies only targeting the native architecture and build off-line then, this scripts will become quite complicated and not portable. So, I wonder whether it is possible for a new argument for cargo fetch because the native architecture is known by cargo.</p>\n<p>A real-world example is package script used by Arch Linux, if we have to determine the architecture in every script, it will definitely be a nightmare.</p>",
        "id": 278175208,
        "sender_full_name": "Letu Ren",
        "timestamp": 1649343016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492715\">@Letu Ren</span> don't know if it helps, but <code>rustc -vV | grep host</code> is pretty reliable at determining the target</p>",
        "id": 278180725,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649345085
    },
    {
        "content": "<p>for build scripts specifically you also have <code>TARGET</code> available in the environment variables <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts</a></p>",
        "id": 278181170,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649345273
    },
    {
        "content": "<p>You can use <code>rustc -vV | grep host</code> to determine the host architecture. This is also what cargo does.</p>",
        "id": 278181994,
        "sender_full_name": "bjorn3",
        "timestamp": 1649345587
    },
    {
        "content": "<p>Thanks for reply</p>",
        "id": 278187833,
        "sender_full_name": "Letu Ren",
        "timestamp": 1649347639
    },
    {
        "content": "<p>I'll add that this has also been requested for <code>cargo metadata --filter-platform</code> (it'd be useful in &lt;<a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6908\">https://github.com/rust-analyzer/rust-analyzer/issues/6908</a>&gt; for example).</p>",
        "id": 278240479,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1649374973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span>  Looks like we demand the same thing. Cargo fetch is just like cargo metadata which counter-intuitively defaults to including all targets. That's a bad thing. Add an option will make life of downstream a lot easier.</p>",
        "id": 278257483,
        "sender_full_name": "Letu Ren",
        "timestamp": 1649394116
    }
]