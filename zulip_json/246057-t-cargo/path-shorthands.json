[
    {
        "content": "<p>Hi folks! Just wanted to follow up on <a href=\"https://github.com/rust-lang/cargo/pull/9144\">https://github.com/rust-lang/cargo/pull/9144</a> — is the best next step to discuss that PR with the goal of landing it under an experimental flag, or for me to write an RFC? I'm happy to do the latter, but don't want to get ahead of myself if the approach is deemed fundamentally undesirable :)</p>",
        "id": 225582420,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612806918
    },
    {
        "content": "<p>I like the concept.</p>",
        "id": 225594643,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812331
    },
    {
        "content": "<p>I have one issue with specific syntax, namely that I would rather not see the shorthand in-band in the path field for several reasons. Primarily, depending on platform, almost any character can appear in a valid path. I would prefer to see the \"base\" mentioned in a separate key, and then just a relative path in the path field.</p>",
        "id": 225594828,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812412
    },
    {
        "content": "<p>So instead of <code>path=\"devdir::xyz/abc\"</code>, I would prefer something like <code>path=\"xyz/abc\" base=\"devdir\"</code>.</p>",
        "id": 225595088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812530
    },
    {
        "content": "<p>Other than that, the idea and rationale seem completely reasonable to me.</p>",
        "id": 225595342,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812638
    },
    {
        "content": "<p>I went with <code>::</code> to resemble module syntax, but had the same thought of you. I only didn't do it because it feels a bit odd to have a field like \"base\" that is dedicated just to <code>path</code>. But I suppose we have precedent in <code>git</code> with <code>branch</code>, so I'll get started on that change!</p>",
        "id": 225595440,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612812686
    },
    {
        "content": "<p>Two things. First, you may not want to get started changing that until you hear agreement or disagreement from someone other than just me. ;)</p>",
        "id": 225595589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812731
    },
    {
        "content": "<p>And second, base might not necessarily be limited to just path. In theory you could have a base for git repo paths for instance.</p>",
        "id": 225595670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812776
    },
    {
        "content": "<p>Another option is <code>relative_to</code></p>",
        "id": 225595735,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612812801
    },
    {
        "content": "<p>Given that you're trying to provide a shorthand, I think it'll be reasonable for the key name to be relatively short. :)</p>",
        "id": 225595772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812828
    },
    {
        "content": "<p><code>rt</code> :p</p>",
        "id": 225595832,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612812844
    },
    {
        "content": "<p>The thought of making it a separate field had crossed my mind as well. Definitely feels easier to document.</p>",
        "id": 225595955,
        "sender_full_name": "Eh2406",
        "timestamp": 1612812905
    },
    {
        "content": "<p><code>git=\"xyz\" base=\"g\"</code> where <code>g=\"https://github.com/username/\"</code> for instance.</p>",
        "id": 225595962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812909
    },
    {
        "content": "<p>This gets complicated, though, for dependencies where you provide both a git url and a local path, though.</p>",
        "id": 225596108,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612812972
    },
    {
        "content": "<p>Yeah, I think we want to leave git bases for later</p>",
        "id": 225596322,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612813089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Made the change to <code>base = </code> :)</p>",
        "id": 225597080,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612813513
    },
    {
        "content": "<p>I just went ahead and wrote the RFC <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  <a href=\"https://github.com/rust-lang/rfcs/pull/3074\">https://github.com/rust-lang/rfcs/pull/3074</a></p>",
        "id": 225627079,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612828526
    },
    {
        "content": "<p>Someone made the good suggestion (I think) that if <code>base</code> is specified but _not_ <code>path</code>, maybe we could infer the <code>path</code> from the dependency name? Or the package name maybe more accurately. What do you think?</p>",
        "id": 225629603,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612830321
    },
    {
        "content": "<p>That is, if you wrote</p>\n<div class=\"codehilite\"><pre><span></span><code>foo = { base = &quot;vendor&quot; }\n</code></pre></div>\n<p>It would pull <code>${vendor}/foo</code></p>",
        "id": 225629625,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1612830349
    },
    {
        "content": "<p>what about something like</p>\n<div class=\"codehilite\"><pre><span></span><code>[base]\nvendor1 = { path = &quot;/foo&quot; }\nvendor2 = { git = &quot;http://github.com/bar&quot; }\n\n[dependencies]\nfoo = { base = &quot;vendor1&quot; }\nbar = { base = &quot;vendor2&quot;, name = &quot;bar.git&quot; }\n</code></pre></div>",
        "id": 225630273,
        "sender_full_name": "Brendan Cully",
        "timestamp": 1612830905
    },
    {
        "content": "<p>Presumably it might be more natural in that case to have <code>/</code> in the base rather than in the path, though</p>",
        "id": 225665953,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1612864730
    },
    {
        "content": "<p>(hey <span class=\"user-mention\" data-user-id=\"318862\">@Brendan Cully</span> :))</p>",
        "id": 225665982,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1612864749
    },
    {
        "content": "<p>hey! two of the greatest hg hackers around!</p>",
        "id": 225764533,
        "sender_full_name": "pachi",
        "timestamp": 1612908092
    },
    {
        "content": "<p>I'd like to add to this discussion that if <a href=\"https://github.com/rust-lang/cargo/issues/5539#issuecomment-779997599\">https://github.com/rust-lang/cargo/issues/5539#issuecomment-779997599</a> worked out, then I wouldn't actually need path shorthands, since the build system could just inject appropriate patches instead. I'm personally leaning more towards the \"split <code>Cargo.toml</code>\" approach in that issue than path shorthands at the moment, though I think they are both valuable in their own right.</p>",
        "id": 226588679,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1613514641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> Really not a fan of the <code>Cargo.toml.d</code> approach, not least of which because everything that processes <code>Cargo.toml</code> would have to understand it.</p>",
        "id": 226611415,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613535003
    },
    {
        "content": "<p>But I do like the idea of being able to add <code>[patch]</code> sections in Cargo config.</p>",
        "id": 226611460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613535013
    },
    {
        "content": "<p>That would help, for instance, when rebuilding several crates with a modified/updated crate version, for testing purposes.</p>",
        "id": 226611524,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613535102
    },
    {
        "content": "<p>It would also help in cases where people try to use a directory registry to hold modified sources.</p>",
        "id": 226611572,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613535126
    },
    {
        "content": "<p>I'm <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for <code>[patch]</code> in <code>.cargo/config</code>.</p>",
        "id": 226611586,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613535146
    },
    {
        "content": "<p>Wouldn't any tool that processes a <code>Cargo.toml</code> need to know about any modification we make to <code>Cargo.toml</code>? And if we allow <code>[patch]</code> in <code>.cargo/config</code>, they'd likely need to know about that now too?</p>",
        "id": 226696674,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1613584154
    },
    {
        "content": "<p>I don't know if you saw <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>'s comment further up in that issue, but he seems to be fairly against having system-wide patches in the form of <code>.cargo/config</code>, which is why I proposed placing it alongside <code>Cargo.toml</code> instead (so that the patches remain project-local).</p>",
        "id": 226696682,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1613584157
    },
    {
        "content": "<p>I am very in favor of finding _some_ way to enable this kind of \"external patching\", and in my case it doesn't actually matter whether it's system-wide or project local — the external build system can make use of either.</p>",
        "id": 226696690,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1613584160
    },
    {
        "content": "<p>I didn't see the objection to system-wide patching, no.</p>",
        "id": 226698168,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613584796
    }
]