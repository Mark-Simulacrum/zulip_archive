[
    {
        "content": "<blockquote>\n<p>error: crate <code>linkme</code> required to be available in rlib format, but was not found in this form</p>\n</blockquote>\n<p>I'm playing with taking a lib crate and <em>also</em> compiling it as a binary, similar to what <code>cargo test</code> does. I'm doing this via <code>cargo rustc -- --crate-type=bin</code>, but I get the above error.</p>\n<p>There's <a href=\"https://github.com/rust-lang/cargo/pull/7008\">an older issue</a> about this, but it doesn't seem immediately applicable. Any hints on some options I could do to make this work?</p>",
        "id": 231023797,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616161263
    },
    {
        "content": "<p>What does <code>cargo rustc -v -- --crate-type=bin</code> show after a <code>cargo clean</code>?</p>",
        "id": 231024143,
        "sender_full_name": "bjorn3",
        "timestamp": 1616161432
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> % cargo rustc -v -- --crate-type=bin --cfg=spec\n   Compiling proc-macro2 v1.0.24\n   Compiling unicode-xid v0.2.1\n   Compiling syn v1.0.64\n     Running `rustc --crate-name build_script_build --edition=2018 /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.24/build.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;proc-macro&quot;&#39; -C metadata=ea7ca98ab7742a44 -C extra-filename=-ea7ca98ab7742a44 --out-dir /private/tmp/demo/target/debug/build/proc-macro2-ea7ca98ab7742a44 -L dependency=/private/tmp/demo/target/debug/deps --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld`\n     Running `rustc --crate-name unicode_xid /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.2.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg &#39;feature=&quot;default&quot;&#39; -C metadata=cd7f9054a6f1f9e9 -C extra-filename=-cd7f9054a6f1f9e9 --out-dir /private/tmp/demo/target/debug/deps -L dependency=/private/tmp/demo/target/debug/deps --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld`\n     Running `rustc --crate-name build_script_build --edition=2018 /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.64/build.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --cfg &#39;feature=&quot;clone-impls&quot;&#39; --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;derive&quot;&#39; --cfg &#39;feature=&quot;parsing&quot;&#39; --cfg &#39;feature=&quot;printing&quot;&#39; --cfg &#39;feature=&quot;proc-macro&quot;&#39; --cfg &#39;feature=&quot;quote&quot;&#39; -C metadata=b0a2d80d1f1a6786 -C extra-filename=-b0a2d80d1f1a6786 --out-dir /private/tmp/demo/target/debug/build/syn-b0a2d80d1f1a6786 -L dependency=/private/tmp/demo/target/debug/deps --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld`\n     Running `/private/tmp/demo/target/debug/build/syn-b0a2d80d1f1a6786/build-script-build`\n     Running `/private/tmp/demo/target/debug/build/proc-macro2-ea7ca98ab7742a44/build-script-build`\n     Running `rustc --crate-name proc_macro2 --edition=2018 /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.24/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;proc-macro&quot;&#39; -C metadata=77d7c0427502f4b0 -C extra-filename=-77d7c0427502f4b0 --out-dir /private/tmp/demo/target/debug/deps -L dependency=/private/tmp/demo/target/debug/deps --extern unicode_xid=/private/tmp/demo/target/debug/deps/libunicode_xid-cd7f9054a6f1f9e9.rmeta --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld --cfg lexerror_display --cfg hygiene --cfg use_proc_macro --cfg wrap_proc_macro`\n   Compiling quote v1.0.9\n     Running `rustc --crate-name quote --edition=2018 /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.9/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;proc-macro&quot;&#39; -C metadata=e9f324783849396d -C extra-filename=-e9f324783849396d --out-dir /private/tmp/demo/target/debug/deps -L dependency=/private/tmp/demo/target/debug/deps --extern proc_macro2=/private/tmp/demo/target/debug/deps/libproc_macro2-77d7c0427502f4b0.rmeta --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld`\n     Running `rustc --crate-name syn --edition=2018 /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.64/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg &#39;feature=&quot;clone-impls&quot;&#39; --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;derive&quot;&#39; --cfg &#39;feature=&quot;parsing&quot;&#39; --cfg &#39;feature=&quot;printing&quot;&#39; --cfg &#39;feature=&quot;proc-macro&quot;&#39; --cfg &#39;feature=&quot;quote&quot;&#39; -C metadata=14a3acfd4550d423 -C extra-filename=-14a3acfd4550d423 --out-dir /private/tmp/demo/target/debug/deps -L dependency=/private/tmp/demo/target/debug/deps --extern proc_macro2=/private/tmp/demo/target/debug/deps/libproc_macro2-77d7c0427502f4b0.rmeta --extern quote=/private/tmp/demo/target/debug/deps/libquote-e9f324783849396d.rmeta --extern unicode_xid=/private/tmp/demo/target/debug/deps/libunicode_xid-cd7f9054a6f1f9e9.rmeta --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld --cfg syn_disable_nightly_tests`\n   Compiling linkme-impl v0.2.4\n     Running `rustc --crate-name linkme_impl --edition=2018 /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/linkme-impl-0.2.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C metadata=38fa65aaf917537e -C extra-filename=-38fa65aaf917537e --out-dir /private/tmp/demo/target/debug/deps -L dependency=/private/tmp/demo/target/debug/deps --extern proc_macro2=/private/tmp/demo/target/debug/deps/libproc_macro2-77d7c0427502f4b0.rlib --extern quote=/private/tmp/demo/target/debug/deps/libquote-e9f324783849396d.rlib --extern syn=/private/tmp/demo/target/debug/deps/libsyn-14a3acfd4550d423.rlib --extern proc_macro --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld`\n   Compiling linkme v0.2.4\n     Running `rustc --crate-name linkme --edition=2018 /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/linkme-0.2.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=0c3a40defd6b4791 -C extra-filename=-0c3a40defd6b4791 --out-dir /private/tmp/demo/target/debug/deps -L dependency=/private/tmp/demo/target/debug/deps --extern linkme_impl=/private/tmp/demo/target/debug/deps/liblinkme_impl-38fa65aaf917537e.dylib --cap-lints allow -C link-arg=-fuse-ld=/usr/local/bin/zld`\n   Compiling demo v0.1.0 (/private/tmp/demo)\n     Running `rustc --crate-name demo --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --crate-type=bin --cfg=spec -C metadata=c8a56b20f7b3cd31 -C extra-filename=-c8a56b20f7b3cd31 --out-dir /private/tmp/demo/target/debug/deps -C incremental=/private/tmp/demo/target/debug/incremental -L dependency=/private/tmp/demo/target/debug/deps --extern linkme=/private/tmp/demo/target/debug/deps/liblinkme-0c3a40defd6b4791.rmeta -C link-arg=-fuse-ld=/usr/local/bin/zld`\nwarning: function is never used: `adder`\n --&gt; src/lib.rs:1:4\n  |\n1 | fn adder(a: i32, b: i32) -&gt; i32 {\n  |    ^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nerror: crate `linkme` required to be available in rlib format, but was not found in this form\n\nerror: aborting due to previous error; 1 warning emitted\n\nerror: could not compile `demo`\n\nCaused by:\n  process didn&#39;t exit successfully: `rustc --crate-name demo --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --crate-type=bin --cfg=spec -C metadata=c8a56b20f7b3cd31 -C extra-filename=-c8a56b20f7b3cd31 --out-dir /private/tmp/demo/target/debug/deps -C incremental=/private/tmp/demo/target/debug/incremental -L dependency=/private/tmp/demo/target/debug/deps --extern linkme=/private/tmp/demo/target/debug/deps/liblinkme-0c3a40defd6b4791.rmeta -C link-arg=-fuse-ld=/usr/local/bin/zld` (exit code: 1)\n</code></pre></div>",
        "id": 231024388,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616161524
    },
    {
        "content": "<p>&lt;deleted&gt;</p>",
        "id": 231024429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616161543
    },
    {
        "content": "<p>Maybe this is related: <a href=\"https://github.com/rust-lang/miri/issues/1705#issuecomment-778651455\">https://github.com/rust-lang/miri/issues/1705#issuecomment-778651455</a></p>",
        "id": 231024538,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616161572
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% find target/debug -name &#39;*linkme*.r*&#39;\ntarget/debug/deps/liblinkme-0c3a40defd6b4791.rlib\ntarget/debug/deps/liblinkme-0c3a40defd6b4791.rmeta\n</code></pre></div>",
        "id": 231024988,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616161746
    },
    {
        "content": "<p>And what does <code>RUSTC_LOG=rustc_metadata=info</code> give?</p>",
        "id": 231025197,
        "sender_full_name": "bjorn3",
        "timestamp": 1616161825
    },
    {
        "content": "<p>Adding <code>--extern linkme=/private/tmp/demo/target/debug/deps/liblinkme-0c3a40defd6b4791.rlib</code> <em>does</em> allow compilation to finish, but that's not the most sustainable solution <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>.</p>",
        "id": 231025263,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616161853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/246057-t-cargo/topic/crate.20required.20to.20be.20available.20in.20rlib.20format/near/231025197\">said</a>:</p>\n<blockquote>\n<p>And what does <code>RUSTC_LOG=rustc_metadata=info</code> give?</p>\n</blockquote>\n<p>It's reasonably long: <a href=\"https://gist.github.com/shepmaster/e4998a33c606738a8981cb0e6f5f3b95\">https://gist.github.com/shepmaster/e4998a33c606738a8981cb0e6f5f3b95</a></p>",
        "id": 231025520,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616161975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  name: linkme\n  cnum: 16\n  hash: 5adccf8e4169bff2\n  reqd: Explicit\n   rmeta: /private/tmp/demo/target/debug/deps/liblinkme-0c3a40defd6b4791.rmeta\n</code></pre></div>\n<p>I think this is the build pipelining of cargo. Cargo only tells rustc about the rmeta files while compiling rlibs. Only when compiling things that need to be linked, will it tell the rlib path to rustc. This allows for starting compilation of dependent crates before the dependency is completely codegened. Only the crate metadata is necessary. You can disable this using <code>CARGO_PIPELINING=0</code> I think.</p>",
        "id": 231025942,
        "sender_full_name": "bjorn3",
        "timestamp": 1616162161
    },
    {
        "content": "<p>That would fit with the Cargo bug report I linked earlier, but doesn't seem to resolve it:</p>\n<div class=\"codehilite\"><pre><span></span><code>CARGO_PIPELINING=0 cargo rustc -v -- --crate-type=bin --cfg=spec\n...\nerror: crate `linkme` required to be available in rlib format, but was not found in this form\n</code></pre></div>",
        "id": 231026428,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616162358
    },
    {
        "content": "<p>Oh, maybe it's a different name</p>",
        "id": 231026498,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616162390
    },
    {
        "content": "<p><code>CARGO_BUILD_PIPELINING=false</code></p>",
        "id": 231026575,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616162406
    },
    {
        "content": "<p>Alright!</p>",
        "id": 231026640,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616162424
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 231026802,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616162488
    },
    {
        "content": "<p>Too bad it appears that pipelining is an all-or-nothing setting in <code>config.toml</code> and I can't set environment variables in a cargo alias.</p>\n<p>Guess I'll need to create my own <code>cargo-foo</code> command.</p>",
        "id": 231029392,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616163561
    },
    {
        "content": "<p>Can you use <code>crate-type = [\"lib\", \"bin\"]</code>?</p>",
        "id": 231029480,
        "sender_full_name": "bjorn3",
        "timestamp": 1616163598
    },
    {
        "content": "<p>Perhaps, but I'd prefer not to. That would be relatively intrusive on the end user. I'm trying to reimplement a test framework, so reducing touchpoints should help with adoption.</p>",
        "id": 231030257,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616163866
    },
    {
        "content": "<p>Conversely, doing a one-time <code>cargo install ...</code> shouldn't be terrible.</p>",
        "id": 231030304,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616163895
    },
    {
        "content": "<p>Now to figure out which <code>deps/programname-HASH</code> is the one I should run...</p>",
        "id": 231030632,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616164028
    },
    {
        "content": "<p><code>--message-format json</code> gives the names of all emitted artifact I think.</p>",
        "id": 231031011,
        "sender_full_name": "bjorn3",
        "timestamp": 1616164168
    },
    {
        "content": "<p>I guess I can run the compiler once to get human output, then again when capturing it and parse the JSON.</p>",
        "id": 231031346,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616164300
    },
    {
        "content": "<p>And the cargo output does not know that I'm passing <code>--crate-type=bin</code>, which makes sense :-)</p>",
        "id": 231032073,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616164545
    },
    {
        "content": "<p>Shame that <code> -C metadata=spec -C extra-filename=-spec</code> doesn't override <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 231032584,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616164718
    },
    {
        "content": "<p>I suggested to make cargo aware of --crate-type being passed to <code>cargo rustc</code> but it was deemed too brittle</p>",
        "id": 231435475,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1616487745
    }
]