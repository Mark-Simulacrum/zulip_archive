[
    {
        "content": "<p>rust in general is just super painful to compile on raspberry pis</p>",
        "id": 222193971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610233245
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>joshua@honey:~/YDBRust$ CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_OPT_LEVEL=0 cargo build --release --no-default-features\nCompiling pkg-config v0.3.18\nCompiling yottadb v1.1.0 (/home/joshua/YDBRust)\nFinished release [optimized] target(s) in 5m 47s\n</code></pre></div>",
        "id": 222193985,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610233288
    },
    {
        "content": "<p>(for comparison, this is like 3 seconds on x86_64)</p>",
        "id": 222193989,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610233312
    },
    {
        "content": "<p>I think it's serializing a lot of metadata or something</p>",
        "id": 222194037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610233368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Use.20in-memory.20index.20instead.20of.20writing.20to.20disk.3F/near/222193989\">said</a>:</p>\n<blockquote>\n<p>(for comparison, this is like 3 seconds on x86_64)</p>\n</blockquote>\n<p>Any chance you can get a very rough profile of some kind, to figure out where the bulk of the time goes?</p>",
        "id": 222195339,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610235628
    },
    {
        "content": "<p>(Even something as simple as an strace histogram might suffice.)</p>",
        "id": 222195352,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610235683
    },
    {
        "content": "<p>What is an strace histogram?</p>",
        "id": 222196218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610236814
    },
    {
        "content": "<p>Happy to record anything that doesn't need me to install new tools; or if there's a way to parse it from strace output after the fact that works too</p>",
        "id": 222196234,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610236853
    },
    {
        "content": "<p>I can definitely say without detailed measurements that the biggest time sinks are updating the index, running rustc, and overhead from cargo, in that order</p>",
        "id": 222196286,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610236923
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/h0hhXataoKRobyJXJ0FrqvME/cargo-timing-20210110T005425Z.html\">cargo-timing-20210110T005425Z.html</a></p>",
        "id": 222198208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240518
    },
    {
        "content": "<p>^ that's time spent on rustc, there's a good 15 seconds of cargo overhead to go with it</p>",
        "id": 222198329,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240649
    },
    {
        "content": "<p>lol <code>-Z self-profile</code> can't even start up</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: failed to create profiler: Cannot allocate memory (os error 12)\n</code></pre></div>",
        "id": 222198363,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240734
    },
    {
        "content": "<p>also something is <em>very</em> wrong with -Z time-passes because these are taking multiple seconds each and say they're not</p>\n<div class=\"codehilite\"><pre><span></span><code>time: 0.007; rss: 135MB LLVM_module_optimize_function_passes(pkg_config.2il65vya-cgu.3)\ntime: 0.023; rss: 135MB LLVM_module_optimize_module_passes(pkg_config.2il65vya-cgu.3)\ntime: 0.004; rss: 135MB LLVM_module_optimize_function_passes(pkg_config.2il65vya-cgu.4)\ntime: 0.170; rss: 135MB LLVM_module_optimize_module_passes(pkg_config.2il65vya-cgu.4)\n</code></pre></div>",
        "id": 222198691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241292
    },
    {
        "content": "<p>yeah, there were 14 of those and the overall time was</p>\n<div class=\"codehilite\"><pre><span></span><code>time: 126.362; rss: 107MB   LLVM_passes(crate)\n</code></pre></div>",
        "id": 222198765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241387
    },
    {
        "content": "<p>probably it's not timing how long it takes to write this to disk</p>",
        "id": 222198849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241518
    },
    {
        "content": "<p>I wonder if it could buffer these and write all the object files at once</p>",
        "id": 222198859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241530
    },
    {
        "content": "<p>that would speed it up significantly I think</p>",
        "id": 222198862,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>time: 69.528; rss: 76MB expand_crate\n</code></pre></div>\n<p>oh wow I did not expect that</p>",
        "id": 222198963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241705
    },
    {
        "content": "<p>Didn't see pkg-config data anywhere, presumably because the profiler ran out of memory<br>\n<a href=\"/user_uploads/4715/Cfh1G6R8bV_zHYd3yRtHJD2k/yottadb-9604.string_data\">yottadb-9604.string_data</a> <a href=\"/user_uploads/4715/bnLNhMdWNKwCUmGboSIbwqES/yottadb-9604.events\">yottadb-9604.events</a></p>",
        "id": 222199233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610242107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Rust.20is.20slow.20on.20raspberry.20pis/near/222195339\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Use.20in-memory.20index.20instead.20of.20writing.20to.20disk.3F/near/222193989\">said</a>:</p>\n<blockquote>\n<p>(for comparison, this is like 3 seconds on x86_64)</p>\n</blockquote>\n<p>Any chance you can get a very rough profile of some kind, to figure out where the bulk of the time goes?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> do you want to include child processes? or just cargo itself?</p>",
        "id": 222199302,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610242222
    },
    {
        "content": "<p>this is cargo itself (no <code>-f</code> flag):</p>\n<div class=\"codehilite\"><pre><span></span><code>% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n 86.86    8.238082        4228      1948       956 futex\n  5.40    0.512025      170675         3           wait4\n  4.84    0.458704          33     13519           clock_gettime64\n  0.81    0.076733          39      1944           ioctl\n  0.50    0.047556         119       398        17 read\n  0.46    0.043966         176       249        17 openat\n  0.24    0.023097         101       227           write\n  0.16    0.015232          52       291        65 statx\n  0.13    0.012208         106       115           lstat64\n  0.11    0.010415          67       154        66 stat64\n  0.10    0.009869          82       119           mmap2\n  0.09    0.008368          33       249           close\n  0.06    0.005961          63        94           mprotect\n  0.05    0.005192         129        40        24 access\n  0.05    0.004677         275        17         3 mkdir\n  0.03    0.002926          36        81           fstat64\n  0.02    0.002093          38        54           getdents64\n  0.02    0.002017         144        14           munmap\n  0.01    0.000944         118         8           clone\n  0.01    0.000843          21        39           brk\n  0.01    0.000792          37        21           poll\n  0.00    0.000377         377         1           rename\n  0.00    0.000351         175         2           readlink\n  0.00    0.000314          62         5           _llseek\n  0.00    0.000279          19        14           flock\n  0.00    0.000278          39         7           statfs\n  0.00    0.000191          63         3         3 unlink\n  0.00    0.000152          30         5           getrandom\n  0.00    0.000112          14         8           rt_sigaction\n  0.00    0.000080          80         1         1 restart_syscall\n  0.00    0.000068          22         3           sigaltstack\n  0.00    0.000042          42         1           set_tls\n  0.00    0.000038          19         2           getuid32\n  0.00    0.000032          32         1           sysinfo\n  0.00    0.000032          16         2           geteuid32\n  0.00    0.000029           4         7           rt_sigprocmask\n  0.00    0.000024          24         1           getcwd\n  0.00    0.000021          10         2           sched_getaffinity\n  0.00    0.000000           0         1           execve\n  0.00    0.000000           0         1           uname\n  0.00    0.000000           0        20           ugetrlimit\n  0.00    0.000000           0         4           fcntl64\n  0.00    0.000000           0         1           set_tid_address\n  0.00    0.000000           0         1           socket\n  0.00    0.000000           0         1           socketpair\n  0.00    0.000000           0         1           set_robust_list\n  0.00    0.000000           0         7           pipe2\n------ ----------- ----------- --------- --------- ----------------\n100.00    9.484120                 19686      1152 total\n</code></pre></div>",
        "id": 222199776,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610243046
    },
    {
        "content": "<p>so not a ton of overhead once the index is up to date</p>",
        "id": 222199778,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610243058
    },
    {
        "content": "<p>I don't have my pi on hand, but I've noticed this on both the pi3 and pi4.</p>\n<p>Even a hello world is like 2 seconds to build.</p>\n<p>My suspicion has always been that the \"disk\" access on rpi (which is generally either an SD card or a USB drive) is simply far slower to read and write than Rust seems to expect, and everything is dragged down because of it.</p>",
        "id": 222201514,
        "sender_full_name": "Lokathor",
        "timestamp": 1610246203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I had meant the whole thing, including cargo and rustc, to find out where most of the time went. Which it looks like you ended up doing.</p>",
        "id": 222211778,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610266212
    },
    {
        "content": "<p>Could be also memory issue, if things are getting swapped  those poor SD cards cannot keep up with IO.</p>",
        "id": 222218343,
        "sender_full_name": "mati865",
        "timestamp": 1610278501
    },
    {
        "content": "<p>My newest Pi is 8GB of RAM and still takes a minimum of ~2 seconds to build Hello World.</p>\n<p>It probably is a memory issue, but i don't think it's hitting swap on such small projects (though it could on larger projects).</p>",
        "id": 222227559,
        "sender_full_name": "Lokathor",
        "timestamp": 1610293153
    }
]