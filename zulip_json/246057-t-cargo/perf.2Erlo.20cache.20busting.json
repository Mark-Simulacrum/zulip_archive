[
    {
        "content": "<p>perf.rlo runs a bunch of benchmarks, and wants to minimize the time it takes for a benchmark to run. Currently per benchmark we invoke cargo a bunch of times, with various modifications to the underlying state.</p>\n<p>To reduce the amount of time things take, we try to cache dependencies and incremental state. However, to ensure that Cargo runs rustc for the leaf crate that we're interested in, we want to bust it's cache somehow.</p>\n<p>Currently what we do on perf is this, preserving mtimes on copy (<code>cp -p</code>):</p>\n<ul>\n<li>first, build the crate in directory A with profile check</li>\n<li>copy A into prepare-$profile (e.g., check/opt/debug/doc)</li>\n<li>run a build again in directory prepare-$profile</li>\n<li>for each iteration (usually 3-4):<br>\n    * copy prepare-$profile into prepare-$profile-$iteration<br>\n    * build in prepare-$profile-$iteration several times, with various rustc settings (e.g., incremental on/off)</li>\n</ul>\n<p>Currently to ensure that rustc is invoked for the leaf crate we do <code>find leaf-crate-root -type f | xargs touch</code>. This is pretty suboptimal of course.</p>\n<p>It's also the case that I suspect we're busting caches on dependencies more than we need to be -- in particular, with some of our crates that have path dependencies, I believe Cargo is currently busting caches when we turn incremental on/off via CARGO_INCREMENTAL.</p>\n<p>I'm interested in seeing if perhaps there's room for a (unstable) Cargo subcommand or some hack atop cargo that we could employ to avoid some of the suboptimal bits with the cache busting -- really, all we need is a way to ensure that the leaf crate's rustc runs. Also, if there's any more general feedback I would love to hear that too (e.g., maybe our copying is the wrong approach and we should be doing some other form of caching).</p>",
        "id": 202748550,
        "sender_full_name": "simulacrum",
        "timestamp": 1593726719
    },
    {
        "content": "<p>Let me know if I can clarify anything!</p>",
        "id": 202748602,
        "sender_full_name": "simulacrum",
        "timestamp": 1593726741
    },
    {
        "content": "<p>the code in question is here <a href=\"https://github.com/rust-lang/rustc-perf/blob/7d819df893670a0e55f0d49f31e55c89b0de4d68/collector/src/bin/rustc-perf-collector/execute.rs#L969\">https://github.com/rust-lang/rustc-perf/blob/7d819df893670a0e55f0d49f31e55c89b0de4d68/collector/src/bin/rustc-perf-collector/execute.rs#L969</a></p>",
        "id": 202748618,
        "sender_full_name": "simulacrum",
        "timestamp": 1593726759
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> from <a href=\"https://github.com/rust-lang/cargo/pull/8210\">https://github.com/rust-lang/cargo/pull/8210</a></p>",
        "id": 202755191,
        "sender_full_name": "simulacrum",
        "timestamp": 1593732463
    },
    {
        "content": "<p>How come cargo doesn't run the build today? Is it because you're doing the same thing multiple times to measure or is there state cargo isn't seeing that should trigger.the rebuild?</p>",
        "id": 202766676,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593748725
    },
    {
        "content": "<p>yeah, so for some of our runs we're interested in basically \"perfect cache\" builds, e.g., we'd run <code>cargo build</code> twice without changing anything to check how good \"perfect incremental\" is</p>",
        "id": 202796379,
        "sender_full_name": "simulacrum",
        "timestamp": 1593777841
    },
    {
        "content": "<p>and more broadly since there's no --no-deps and we want to have a \"base\" directory with a full set of build-dependencies to avoid e.g. bindgen re-generation as much as possible, when switching from building that up to the normal build we need to convince cargo that things have changed</p>",
        "id": 202796516,
        "sender_full_name": "simulacrum",
        "timestamp": 1593777927
    },
    {
        "content": "<p>Of course, today, I think there's some bugs in the cargo movement support -- we're getting cache busting in path dependencies that are part of what we're copying, though I don't know exactly why yet.</p>",
        "id": 202796623,
        "sender_full_name": "simulacrum",
        "timestamp": 1593777982
    },
    {
        "content": "<p>I guess one option might be for us to manually edit the <a href=\"http://build.rs\">build.rs</a> of the final build to have a rerun-if-env-changed key on something we control</p>",
        "id": 202796844,
        "sender_full_name": "simulacrum",
        "timestamp": 1593778156
    },
    {
        "content": "<p>That may actually be the best solution if you can manage it, even implementing something unstable in cargo is likely gonna be nontrivial</p>",
        "id": 202808402,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593786048
    },
    {
        "content": "<p>Yea, incremental is included in the fingerprint. I guess it probably doesn't need to be. <a href=\"https://github.com/rust-lang/cargo/blob/fede83ccf973457de319ba6fa0e36ead454d2e20/src/cargo/core/compiler/fingerprint.rs#L1296\">Here</a> is where the profile is hashed, it would need to unpack it and selectively choose what to hash. Alternatively it might be possible just to remove <a href=\"https://github.com/rust-lang/cargo/blob/fede83ccf973457de319ba6fa0e36ead454d2e20/src/cargo/core/profiles.rs#L743\">incremental from the hash</a>, but I'm uncertain if that would cause problems with deduplication (I think not).</p>\n<p>As for the cache busting, is there a particular problem with just updating the mtime of the source to trigger a rebuild? That seems like a legitimate way to force a rebuild. It could be more targeted, such as just touching the top-level source files (like <code>lib.rs</code>), which can be done by querying <code>cargo metadata</code>. I'm not sure if that would be too much trouble.</p>",
        "id": 202808593,
        "sender_full_name": "Eric Huss",
        "timestamp": 1593786171
    },
    {
        "content": "<p>hm querying cargo metadata seems plausible</p>",
        "id": 202808769,
        "sender_full_name": "simulacrum",
        "timestamp": 1593786288
    },
    {
        "content": "<p>is there a way to hide path dependencies from cargo's \"local crates\" info? in particular, for e.g. servo it'd be great to not treat most things as path dependencies even though they are.</p>",
        "id": 202808822,
        "sender_full_name": "simulacrum",
        "timestamp": 1593786335
    },
    {
        "content": "<p>No, unfortunately the <a href=\"https://github.com/rust-lang/cargo/blob/fede83ccf973457de319ba6fa0e36ead454d2e20/src/cargo/core/compiler/unit.rs#L73-L79\">is_local</a> check is pretty crude.</p>",
        "id": 202808990,
        "sender_full_name": "Eric Huss",
        "timestamp": 1593786423
    },
    {
        "content": "<p>hm I guess in theory perf.rlo could manage incremental itself -- I think that's the primary thing using is_local today?</p>",
        "id": 202809064,
        "sender_full_name": "simulacrum",
        "timestamp": 1593786477
    },
    {
        "content": "<p>(we already wrap rustc)</p>",
        "id": 202809116,
        "sender_full_name": "simulacrum",
        "timestamp": 1593786488
    },
    {
        "content": "<p>Warnings is one of the big ones, too (lint capping).</p>",
        "id": 202809357,
        "sender_full_name": "Eric Huss",
        "timestamp": 1593786627
    },
    {
        "content": "<p>but moving it to the wrapper should work</p>",
        "id": 202809369,
        "sender_full_name": "Eric Huss",
        "timestamp": 1593786639
    },
    {
        "content": "<p>I think rustc doesn't do anything intelligent on lint capping anyway (like not running lints) so I'm not too worried about that</p>",
        "id": 202809431,
        "sender_full_name": "simulacrum",
        "timestamp": 1593786681
    },
    {
        "content": "<p>hm so following up on this, I've been trying to debug why I'm seeing a bunch of \"unit dependency information changed\", like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[2020-07-17T15:23:12Z INFO  cargo::core::compiler::fingerprint] fingerprint error for net_traits v0.0.1 (/tmp/.tmpMxRFN9/components/net_traits)/Check { test: false }/TargetInner { tested: false, doctest: false, ..: lib_target(&quot;net_traits&quot;, [&quot;lib&quot;], &quot;/tmp/.tmpMxRFN9/components/net_traits/lib.rs&quot;, Edition2018) }\n[2020-07-17T15:23:12Z INFO  cargo::core::compiler::fingerprint]     err: unit dependency information changed\n\n    Caused by:\n        new (msg/16392295685726340264) != old (msg/6956341995905659233)\n</code></pre></div>\n\n\n<p>I wrote out the new/old fingerprints, and the new one is pretty full of information, but the old one just has the memoized hash. Can I hack the code somehow to store real fingerprints so I can diff them, or so? Is there some other way to debug this?</p>\n<div class=\"codehilite\"><pre><span></span><code>Fingerprint {\n    rustc: 0,\n    features: &quot;&quot;,\n    target: 0,\n    profile: 0,\n    path: 0,\n    deps: [],\n    local: Mutex {\n        data: [],\n    },\n    memoized_hash: Mutex {\n        data: Some(\n            6956341995905659233,\n        ),\n    },\n    rustflags: [],\n    metadata: 0,\n    config: 0,\n    fs_status: Stale,\n    outputs: [],\n}\n</code></pre></div>",
        "id": 204222781,
        "sender_full_name": "simulacrum",
        "timestamp": 1595000982
    },
    {
        "content": "<p>In theory you should be getting more error messages</p>",
        "id": 204223049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001079
    },
    {
        "content": "<p>so you can follow an audit trail of fingerprint errors to the root</p>",
        "id": 204223066,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001087
    },
    {
        "content": "<p>on-disk we don't serialize the full tree for each unit, it's just the memoized_hash used to say \"something about the deps changed\"</p>",
        "id": 204223100,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001107
    },
    {
        "content": "<p>hm, do I need more than just =info for that?</p>",
        "id": 204223109,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001110
    },
    {
        "content": "<p>what are the full logs you've got?</p>",
        "id": 204223125,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001119
    },
    {
        "content": "<p>there should be more log messages where one of them doesn't say dep info changed</p>",
        "id": 204223207,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001131
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Mark-Simulacrum/591a68b93e1b7cffc307dbaa32ad3abf\">https://gist.github.com/Mark-Simulacrum/591a68b93e1b7cffc307dbaa32ad3abf</a></p>",
        "id": 204223269,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001156
    },
    {
        "content": "<p>this is with CARGO_LOG=cargo::core::compiler::fingerprint=info</p>",
        "id": 204223302,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001170
    },
    {
        "content": "<p>I can do a =trace log if that'd be helpful</p>",
        "id": 204223318,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001176
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[2020-07-17T15:23:13Z INFO  cargo::core::compiler::fingerprint] fingerprint error for script v0.0.1 (/tmp/.tmpMxRFN9/components/script)/RunCustomBuild/TargetInner { ..: custom_build_target(&quot;build-script-build&quot;, &quot;/tmp/.tmpMxRFN9/components/script/build.rs&quot;, Edition2018) }\n[2020-07-17T15:23:13Z INFO  cargo::core::compiler::fingerprint]     err: precalculated components have changed: 1594999354.125298304s (/tmp/.tmpMxRFN9/components/script/lib.rs) != 1594999025.185692572s (/tmp/.tmpj35OHT/components/script/lib.rs)\n</code></pre></div>",
        "id": 204223344,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001182
    },
    {
        "content": "<p>hm</p>",
        "id": 204223360,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001192
    },
    {
        "content": "<p>yeah so that's intentional</p>",
        "id": 204223362,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001193
    },
    {
        "content": "<p>but I don't see why <em>dependencies</em> of script would get rebuilt because of that</p>",
        "id": 204223420,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001217
    },
    {
        "content": "<p>yeah you're right</p>",
        "id": 204223451,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001232
    },
    {
        "content": "<p>this is indeed funky</p>",
        "id": 204223459,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001235
    },
    {
        "content": "<p>if you follow the dependency chain  it bottoms out as:</p>",
        "id": 204223525,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001248
    },
    {
        "content": "<p>I am also copying everything into a new directory, but AFAIK cargo is supposed to be fine with that</p>",
        "id": 204223528,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[2020-07-17T15:22:41Z INFO  cargo::core::compiler::fingerprint] fingerprint error for selectors v0.22.0 (/tmp/.tmpMxRFN9/components/selectors)/Check { test: false }/TargetInner { ..: lib_target(&quot;selectors&quot;, [&quot;lib&quot;], &quot;/tmp/.tmpMxRFN9/components/selectors/lib.rs&quot;, Edition2015) }\n[2020-07-17T15:22:41Z INFO  cargo::core::compiler::fingerprint]     err: unit dependency information changed\n\n    Caused by:\n        new (build_script_build/2955994899008821520) != old (build_script_build/9123845407037937931)\n</code></pre></div>",
        "id": 204223536,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001251
    },
    {
        "content": "<p>oh</p>",
        "id": 204223548,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001255
    },
    {
        "content": "<p>hm</p>",
        "id": 204223570,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001263
    },
    {
        "content": "<p>no I think that may cause issues</p>",
        "id": 204223587,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001271
    },
    {
        "content": "<p>hm, I recall seeing (and patching support in) for paths to be workspace-relative in fingerprints during some of the binary depdep work</p>",
        "id": 204223711,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001328
    },
    {
        "content": "<p>regardless, I would expect to bottom out in \"file changed\" vs. \"dependency changed\"</p>",
        "id": 204223756,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001347
    },
    {
        "content": "<p>yeah I mean you're not wrong</p>",
        "id": 204223896,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001388
    },
    {
        "content": "<p>I'm happy to edit cargo btw to give more logging, just not really sure how to approach the problem</p>",
        "id": 204223991,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001425
    },
    {
        "content": "<p>do you have the build directories lying around?</p>",
        "id": 204224057,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001455
    },
    {
        "content": "<p>sure yeah</p>",
        "id": 204224071,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001462
    },
    {
        "content": "<p>also do you have the source for the <code>selectors</code> crate?</p>",
        "id": 204224085,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001470
    },
    {
        "content": "<p>can you gist the output of the build script of <code>selectors</code>?</p>",
        "id": 204224096,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001476
    },
    {
        "content": "<p>hm that'd be in the target dir, right?</p>",
        "id": 204224155,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001484
    },
    {
        "content": "<p>yeah</p>",
        "id": 204224217,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001510
    },
    {
        "content": "<p><code>target/debug/build/selectors-**/build-script-build</code></p>",
        "id": 204224230,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001517
    },
    {
        "content": "<p>or something like that</p>",
        "id": 204224233,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001519
    },
    {
        "content": "<p>hm okay so ./target/debug/build/selectors-c5d03b756b7db185/build-script-build is the compiled binary</p>",
        "id": 204224310,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001555
    },
    {
        "content": "<p>oh do I need it from before I guess?</p>",
        "id": 204224337,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001565
    },
    {
        "content": "<p>nah it's maybe in a different dir</p>",
        "id": 204224393,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001601
    },
    {
        "content": "<p>with the <code>selectors-*</code> prefix</p>",
        "id": 204224449,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001608
    },
    {
        "content": "<p>aha</p>",
        "id": 204224467,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>mark@raptor:/tmp/.tmpVx2Jdp$ tail -n10 ./target/debug/build/selectors-c9618c6146797435/*\n==&gt; ./target/debug/build/selectors-c9618c6146797435/invoked.timestamp &lt;==\nThis file has an mtime of when this was started.\n==&gt; ./target/debug/build/selectors-c9618c6146797435/out &lt;==\ntail: error reading &#39;./target/debug/build/selectors-c9618c6146797435/out&#39;: Is a directory\n\n==&gt; ./target/debug/build/selectors-c9618c6146797435/output &lt;==\n\n==&gt; ./target/debug/build/selectors-c9618c6146797435/root-output &lt;==\n/tmp/.tmpVx2Jdp/target/debug/build/selectors-c9618c6146797435/out\n==&gt; ./target/debug/build/selectors-c9618c6146797435/stderr &lt;==\n</code></pre></div>",
        "id": 204224521,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001655
    },
    {
        "content": "<p>oooooooooooooooh</p>",
        "id": 204224538,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001661
    },
    {
        "content": "<p>ok I think I see what's goign on</p>",
        "id": 204224565,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001675
    },
    {
        "content": "<p>so that build script doesn't say when to rerun it</p>",
        "id": 204224584,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001681
    },
    {
        "content": "<p>so we fall back to cargo's conservative logic</p>",
        "id": 204224596,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001687
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/blob/0a9f2efd7f0cdbc70c948792a87a4740672f0a43/src/cargo/sources/path.rs#L523-L526\">https://github.com/rust-lang/cargo/blob/0a9f2efd7f0cdbc70c948792a87a4740672f0a43/src/cargo/sources/path.rs#L523-L526</a></p>",
        "id": 204224644,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001707
    },
    {
        "content": "<p>and there's your absolute path</p>",
        "id": 204224653,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001710
    },
    {
        "content": "<p>okay, so I should be \"safe\" to add e.g. rerun-if-changed=build.rs or so?</p>",
        "id": 204224655,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001711
    },
    {
        "content": "<p>I think that would probably fix it</p>",
        "id": 204224677,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001720
    },
    {
        "content": "<p>this is also a legitimate bug in cargo</p>",
        "id": 204224729,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001729
    },
    {
        "content": "<p>or I suppose we could patch cargo to not do this -- a workspace-relative path feels sufficient</p>",
        "id": 204224740,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001733
    },
    {
        "content": "<p>this should actually be an easy-ish patch to cargo</p>",
        "id": 204224885,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001795
    },
    {
        "content": "<p>can you test out a cargo build easily?</p>",
        "id": 204224891,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001799
    },
    {
        "content": "<p>yeah</p>",
        "id": 204224894,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001803
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/cargo/sources/path.rs b/src/cargo/sources/path.rs\nindex cf406e8dd..77c164671 100644\n--- a/src/cargo/sources/path.rs\n+++ b/src/cargo/sources/path.rs\n@@ -522,6 +522,7 @@ impl&lt;&#39;cfg&gt; Source for PathSource&lt;&#39;cfg&gt; {\n\n     fn fingerprint(&amp;self, pkg: &amp;Package) -&gt; CargoResult&lt;String&gt; {\n         let (max, max_path) = self.last_modified_file(pkg)?;\n+        let max_path = max_path.strip_prefix(&amp;self.path).unwrap_or(&amp;max_path);\n         Ok(format!(&quot;{} ({})&quot;, max, max_path.display()))\n     }\n ```\n</code></pre></div>",
        "id": 204225143,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001900
    },
    {
        "content": "<p>see if that fixes your issue?</p>",
        "id": 204225167,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001908
    },
    {
        "content": "<p>if so I can pretty easily whip up a test and add send a pr</p>",
        "id": 204225189,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001917
    },
    {
        "content": "<p>recompiling -- it'll be around ~6 minutes to test since I'm check-compiling script-servo :)</p>",
        "id": 204225250,
        "sender_full_name": "simulacrum",
        "timestamp": 1595001939
    },
    {
        "content": "<p>oh lawd what ever will I do for 6 minutes</p>",
        "id": 204225342,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001963
    },
    {
        "content": "<p>hm it doesn't seem to have helped</p>",
        "id": 204226186,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002385
    },
    {
        "content": "<p>I think same log? <a href=\"https://gist.github.com/Mark-Simulacrum/0ac4da8f665f6b09f7d3ab674d0f4ec6\">https://gist.github.com/Mark-Simulacrum/0ac4da8f665f6b09f7d3ab674d0f4ec6</a></p>",
        "id": 204226231,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002409
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[2020-07-17T16:12:31Z INFO  cargo::core::compiler::fingerprint] fingerprint error for selectors v0.22.0 (/tmp/.tmpwsVPOV/components/selectors)/RunCustomBuild/TargetInner { ..: custom_build_target(&quot;build-script-build&quot;, &quot;/tmp/.tmpwsVPOV/components/selectors/build.rs&quot;, Edition2015) }\n[2020-07-17T16:12:31Z INFO  cargo::core::compiler::fingerprint]     err: precalculated components have changed: 1595001961.290553030s (/tmp/.tmpwsVPOV/components/selectors/build.rs) != 1595001961.290553030s (/tmp/.tmphLdsLE/components/selectors/build.rs)\n</code></pre></div>",
        "id": 204226351,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002457
    },
    {
        "content": "<p>okay so now it's at least complaining about the right thing, so to speak</p>",
        "id": 204226370,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> ^</p>",
        "id": 204226467,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002518
    },
    {
        "content": "<p>but the two times there look .. identical?</p>",
        "id": 204226473,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002526
    },
    {
        "content": "<p>so I guess it's still not a strip'd path</p>",
        "id": 204226510,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002549
    },
    {
        "content": "<p>hm... sounds like progress though</p>",
        "id": 204226526,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002560
    },
    {
        "content": "<p>er...</p>",
        "id": 204226621,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002591
    },
    {
        "content": "<p>how did you get a different error?</p>",
        "id": 204226648,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002599
    },
    {
        "content": "<p>did the before/after cargo only differ by that patch?</p>",
        "id": 204226670,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002609
    },
    {
        "content": "<p>hm I mean essentially, yeah -- there was some patches around writing out the unit dependency info into files, but nothing that affected logic</p>",
        "id": 204226744,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002636
    },
    {
        "content": "<p>oh wait</p>",
        "id": 204226869,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002684
    },
    {
        "content": "<p>I think I may have misspoken eralier</p>",
        "id": 204226920,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002709
    },
    {
        "content": "<p>I misdiagnosed those original logs</p>",
        "id": 204226936,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002713
    },
    {
        "content": "<p>or not...</p>",
        "id": 204226955,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002727
    },
    {
        "content": "<p>can you add debug printlns to that <code>strip_prefix</code> location?</p>",
        "id": 204226969,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002738
    },
    {
        "content": "<p>about <code>self.path</code> and <code>max_path</code>?</p>",
        "id": 204226975,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002743
    },
    {
        "content": "<p>doing so</p>",
        "id": 204227075,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002802
    },
    {
        "content": "<p>is it possible that's not the right function? it doesn't seem to have run at all on a std build</p>",
        "id": 204227247,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002872
    },
    {
        "content": "<p>\"std build\"?</p>",
        "id": 204227355,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002929
    },
    {
        "content": "<p>oh, that was with an old cargo, never mind</p>",
        "id": 204227385,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002946
    },
    {
        "content": "<p>(perf builds std locally before building crates, but it does it with a different cargo I think)</p>",
        "id": 204227428,
        "sender_full_name": "simulacrum",
        "timestamp": 1595002967
    },
    {
        "content": "<p>on the initial build:</p>\n<div class=\"codehilite\"><pre><span></span><code>[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpbTIGlP/components/selectors/build.rs&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path_stripped=&quot;/tmp/.tmpbTIGlP/components/selectors/build.rs&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpbTIGlP/components/selectors/Cargo.toml&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpbTIGlP/components/atoms/Cargo.toml&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path_stripped=&quot;&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpbTIGlP/components/atoms/Cargo.toml&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpbTIGlP/components/style/values/specified/length.rs&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path_stripped=&quot;/tmp/.tmpbTIGlP/components/style/values/specified/length.rs&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpbTIGlP/components/style/Cargo.toml&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpbTIGlP/components/script/lib.rs&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] max_path_stripped=&quot;/tmp/.tmpbTIGlP/components/script/lib.rs&quot;\n[2020-07-17T16:27:18Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpbTIGlP/components/script/Cargo.toml&quot;\n</code></pre></div>",
        "id": 204228395,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003493
    },
    {
        "content": "<p>from:</p>\n<div class=\"codehilite\"><pre><span></span><code>        log::info!(&quot;max_path={:?}&quot;, max_path);\n        let max_path = max_path.strip_prefix(&amp;self.path).unwrap_or(&amp;max_path);\n        log::info!(&quot;max_path_stripped={:?}&quot;, max_path);\n        log::info!(&quot;self.path={:?}&quot;, self.path);\n</code></pre></div>",
        "id": 204228419,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003506
    },
    {
        "content": "<p>so I guess we need self.path.parent()?</p>",
        "id": 204228492,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> ^</p>",
        "id": 204228507,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003537
    },
    {
        "content": "<p>whoops yep</p>",
        "id": 204228587,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595003596
    },
    {
        "content": "<p>that'd do it</p>",
        "id": 204228590,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595003597
    },
    {
        "content": "<p>i was wondering if it was manifest path or root path</p>",
        "id": 204228606,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595003604
    },
    {
        "content": "<p>self.manifest_path also exists...</p>",
        "id": 204228620,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003614
    },
    {
        "content": "<p>oh, no, that's on pkg</p>",
        "id": 204228633,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003624
    },
    {
        "content": "<p>hm the docs on PathSource::new seem wrong then <a href=\"https://github.com/rust-lang/cargo/blob/8aa332deaadf1a54646d8d7f9a4ac6dc422b2218/src/cargo/sources/path.rs#L25\">https://github.com/rust-lang/cargo/blob/8aa332deaadf1a54646d8d7f9a4ac6dc422b2218/src/cargo/sources/path.rs#L25</a></p>",
        "id": 204228790,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003700
    },
    {
        "content": "<p>oh hm so it seems it is inconsistently called, e.g., <a href=\"https://github.com/rust-lang/cargo/blob/8aa332deaadf1a54646d8d7f9a4ac6dc422b2218/src/cargo/core/workspace.rs#L877\">https://github.com/rust-lang/cargo/blob/8aa332deaadf1a54646d8d7f9a4ac6dc422b2218/src/cargo/core/workspace.rs#L877</a> calls it with the manifest but <a href=\"https://github.com/rust-lang/cargo/blob/8aa332deaadf1a54646d8d7f9a4ac6dc422b2218/src/cargo/ops/cargo_package.rs#L76\">https://github.com/rust-lang/cargo/blob/8aa332deaadf1a54646d8d7f9a4ac6dc422b2218/src/cargo/ops/cargo_package.rs#L76</a> calls it with the root</p>",
        "id": 204229238,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003934
    },
    {
        "content": "<p>which makes this parent() call a bit questionable</p>",
        "id": 204229296,
        "sender_full_name": "simulacrum",
        "timestamp": 1595003970
    },
    {
        "content": "<p>oh dear :(</p>",
        "id": 204229300,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595003973
    },
    {
        "content": "<p>eh I can clean that up</p>",
        "id": 204229316,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595003981
    },
    {
        "content": "<p>let's see if it fixes your issue</p>",
        "id": 204229319,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595003985
    },
    {
        "content": "<p>on the initial build:</p>\n<div class=\"codehilite\"><pre><span></span><code>[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpwir7jE/components/selectors/build.rs&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path_stripped=&quot;build.rs&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpwir7jE/components/selectors/Cargo.toml&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpwir7jE/components/atoms/Cargo.toml&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path_stripped=&quot;Cargo.toml&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpwir7jE/components/atoms/Cargo.toml&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpwir7jE/components/style/values/specified/length.rs&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path_stripped=&quot;values/specified/length.rs&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpwir7jE/components/style/Cargo.toml&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpwir7jE/components/script/lib.rs&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] max_path_stripped=&quot;lib.rs&quot;\n[2020-07-17T16:36:10Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpwir7jE/components/script/Cargo.toml&quot;\n</code></pre></div>",
        "id": 204229399,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004017
    },
    {
        "content": "<p>okay, seems to have solved it:</p>\n<div class=\"codehilite\"><pre><span></span><code>[2020-07-17T16:42:03Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpe7bQxK/components/selectors/build.rs&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] max_path_stripped=&quot;build.rs&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpe7bQxK/components/selectors/Cargo.toml&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpe7bQxK/components/atoms/Cargo.toml&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] max_path_stripped=&quot;Cargo.toml&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpe7bQxK/components/atoms/Cargo.toml&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] max_path=&quot;/tmp/.tmpe7bQxK/components/script/lib.rs&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] max_path_stripped=&quot;lib.rs&quot;\n[2020-07-17T16:42:03Z INFO  cargo::sources::path] self.path=&quot;/tmp/.tmpe7bQxK/components/script/Cargo.toml&quot;\n[2020-07-17T16:42:03Z INFO  cargo::core::compiler::fingerprint] stale: changed &quot;/tmp/.tmpe7bQxK/components/script/lib.rs&quot;\n[2020-07-17T16:42:03Z INFO  cargo::core::compiler::fingerprint]           (vs) &quot;/tmp/.tmpe7bQxK/target/debug/.fingerprint/script-99c189ea56c537ff/dep-lib-script&quot;\n[2020-07-17T16:42:03Z INFO  cargo::core::compiler::fingerprint]                FileTime { seconds: 1595004028, nanos: 31996101 } != FileTime { seconds: 1595004122, nanos: 231493844 }\n[2020-07-17T16:42:03Z INFO  cargo::core::compiler::fingerprint] fingerprint error for script v0.0.1 (/tmp/.tmpe7bQxK/components/script)/Check { test: false }/TargetInner { ..: lib_target(&quot;script&quot;, [&quot;lib&quot;], &quot;/tmp/.tmpe7bQxK/components/script/lib.rs&quot;, Edition2018) }\n[2020-07-17T16:42:03Z INFO  cargo::core::compiler::fingerprint]     err: unit dependency information changed\n\n    Caused by:\n        new (build_script_build/24a87e263ce38d83) != old (build_script_build/dd415e1debf62154)\n[2020-07-17T16:42:03Z INFO  cargo::core::compiler::fingerprint] fingerprint error for script v0.0.1 (/tmp/.tmpe7bQxK/components/script)/RunCustomBuild/TargetInner { ..: custom_build_target(&quot;build-script-build&quot;, &quot;/tmp/.tmpe7bQxK/components/script/build.rs&quot;, Edition2018) }\n[2020-07-17T16:42:03Z INFO  cargo::core::compiler::fingerprint]     err: precalculated components have changed: 1595004122.231493844s (lib.rs) != 1595003770.509345033s (lib.rs)\n   Compiling script v0.0.1 (/tmp/.tmpe7bQxK/components/script)\n</code></pre></div>",
        "id": 204229610,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004152
    },
    {
        "content": "<p>yay!</p>",
        "id": 204229665,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004188
    },
    {
        "content": "<p>you're still rebuilding though?</p>",
        "id": 204229669,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004192
    },
    {
        "content": "<p>oh I guess it's just <code>script</code> which is fine</p>",
        "id": 204229680,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004198
    },
    {
        "content": "<p>well script is the last thing</p>",
        "id": 204229688,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004203
    },
    {
        "content": "<p>(and it just finished)</p>",
        "id": 204229695,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004210
    },
    {
        "content": "<p>and it seems like that continues to work on the next build as well (we build several times)</p>",
        "id": 204229712,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004232
    },
    {
        "content": "<p>which is, you know, expected but good to check</p>",
        "id": 204229765,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004248
    },
    {
        "content": "<p>nice</p>",
        "id": 204229770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004251
    },
    {
        "content": "<p>ok I'll make a PR out of this</p>",
        "id": 204229778,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004257
    },
    {
        "content": "<p>thanks!</p>",
        "id": 204229880,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so you had to do <code>.parent()</code> right?</p>",
        "id": 204230568,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004746
    },
    {
        "content": "<p>otherwise it didn't work?</p>",
        "id": 204230577,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004750
    },
    {
        "content": "<p>I can't get a test to fail if I don't call <code>parent()</code></p>",
        "id": 204230589,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004758
    },
    {
        "content": "<p>yeah</p>",
        "id": 204230592,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/cargo/sources/path.rs b/src/cargo/sources/path.rs\nindex cf406e8dd..f6ddcf16d 100644\n--- a/src/cargo/sources/path.rs\n+++ b/src/cargo/sources/path.rs\n@@ -522,6 +522,12 @@ impl&lt;&#39;cfg&gt; Source for PathSource&lt;&#39;cfg&gt; {\n\n     fn fingerprint(&amp;self, pkg: &amp;Package) -&gt; CargoResult&lt;String&gt; {\n         let (max, max_path) = self.last_modified_file(pkg)?;\n+        log::info!(&quot;max_path={:?}&quot;, max_path);\n+        let max_path = max_path.strip_prefix(\n+            self.path.parent().expect(&quot;manifests have parents&quot;)\n+        ).unwrap_or(&amp;max_path);\n+        log::info!(&quot;max_path_stripped={:?}&quot;, max_path);\n+        log::info!(&quot;self.path={:?}&quot;, self.path);\n         Ok(format!(&quot;{} ({})&quot;, max, max_path.display()))\n     }\n</code></pre></div>",
        "id": 204230594,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004763
    },
    {
        "content": "<p>maybe needs to be a workspace dep?</p>",
        "id": 204230604,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004772
    },
    {
        "content": "<p>yeah added workspace stuff</p>",
        "id": 204230611,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595004780
    },
    {
        "content": "<p>I'm also using cargo build -p $(cargo pkgid)</p>",
        "id": 204230626,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004790
    },
    {
        "content": "<p>and there's the cp -pri as well</p>",
        "id": 204230852,
        "sender_full_name": "simulacrum",
        "timestamp": 1595004924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> and the rerun-if-changed won't work without this patch, right?</p>",
        "id": 204231358,
        "sender_full_name": "simulacrum",
        "timestamp": 1595005166
    },
    {
        "content": "<p>or can I do that in the meantime?</p>",
        "id": 204231372,
        "sender_full_name": "simulacrum",
        "timestamp": 1595005180
    },
    {
        "content": "<p>I think rerun-if-changed should work today</p>",
        "id": 204231373,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595005181
    },
    {
        "content": "<p>bahaha</p>",
        "id": 204231544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595005258
    },
    {
        "content": "<p><code>last_modified_file</code> is <code>Cargo.toml</code></p>",
        "id": 204231563,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595005264
    },
    {
        "content": "<p>that's why my tests aren't failing...</p>",
        "id": 204231574,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595005269
    },
    {
        "content": "<p>okay yeah rerun-if-changed works fine today</p>",
        "id": 204231699,
        "sender_full_name": "simulacrum",
        "timestamp": 1595005329
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/8497\">https://github.com/rust-lang/cargo/pull/8497</a></p>",
        "id": 204232415,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595005732
    }
]