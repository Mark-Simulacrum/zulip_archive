[
    {
        "content": "<p>I'm looking over the issues we ran into from my first implementation (<a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/23#issuecomment-748253097\">https://github.com/rust-lang/wg-cargo-std-aware/issues/23#issuecomment-748253097</a>) and geez this is a nasty hairball</p>",
        "id": 222769170,
        "sender_full_name": "Gankra",
        "timestamp": 1610652309
    },
    {
        "content": "<p>it really feels like we need to give cargo a native understanding of \"subtree vendors\" or somesuch, otherwise you'll get weird whackamole</p>",
        "id": 222769313,
        "sender_full_name": "Gankra",
        "timestamp": 1610652367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> does that feel like a plausible avenue, or do you think more hacks are merited?</p>",
        "id": 222769415,
        "sender_full_name": "Gankra",
        "timestamp": 1610652410
    },
    {
        "content": "<p>maybe? Sorry I don't really know of a great way to solve these problems</p>",
        "id": 222770014,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1610652633
    },
    {
        "content": "<p>given what we had already it does seem like something will need to be added to Cargo that isn't there today</p>",
        "id": 222770037,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1610652646
    },
    {
        "content": "<p>hmmm</p>",
        "id": 222770834,
        "sender_full_name": "Gankra",
        "timestamp": 1610652916
    },
    {
        "content": "<p>I think I agree. And also sub solution lock files and missing-subsolution lock files if that wasn't done.</p>",
        "id": 223054899,
        "sender_full_name": "John Ericson",
        "timestamp": 1610906167
    },
    {
        "content": "<p>Hacks -&gt; bugs, every time</p>",
        "id": 223054902,
        "sender_full_name": "John Ericson",
        "timestamp": 1610906177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> so as far as I can tell, the Cargo code for <code>Z build-std</code> seems to be trying to have two independent workspaces and then glom together their unit graphs post resolution? I think that's the original sin here: if <code>Zbuild-std</code> is not going to act all weird we instead need to combine the lockfiles and have one workspace resolved and built normally.</p>",
        "id": 223162115,
        "sender_full_name": "John Ericson",
        "timestamp": 1611002513
    },
    {
        "content": "<p>Somewhat relatedly, I left a comment at <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/23#issuecomment-762466564\">https://github.com/rust-lang/wg-cargo-std-aware/issues/23#issuecomment-762466564</a></p>",
        "id": 223163059,
        "sender_full_name": "John Ericson",
        "timestamp": 1611003313
    },
    {
        "content": "<p>Combining the lockfiles would mean that every time libstd adds a dependency, the user Cargo.lock would need to change, right? Currently the lockfile is independent of the used rustc version.</p>",
        "id": 223163143,
        "sender_full_name": "bjorn3",
        "timestamp": 1611003372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I mean the lockfiles would be combined on the fly by Cargo. The combined workspace corresponds to the combined lockfile.</p>",
        "id": 223163250,
        "sender_full_name": "John Ericson",
        "timestamp": 1611003478
    },
    {
        "content": "<p>Back to <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/23#issuecomment-762466564\">https://github.com/rust-lang/wg-cargo-std-aware/issues/23#issuecomment-762466564</a>, If we do separate the stdlib crates from their deps, and make a patching vs mirror distinction, the \"big global change\" <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> was worried about might be no worse than what I just proposed?</p>",
        "id": 223163376,
        "sender_full_name": "John Ericson",
        "timestamp": 1611003590
    },
    {
        "content": "<p>Ah, still don't get how that would be better than glueing the unit graph though. In either case you would need to add dependencies on all sysroot crates to all user crates. I think this would be easier on the unit graph than before resolution as doing it before resolution would require injecting the dependencies every time the dependency resolution algorithm requests a new crate.</p>",
        "id": 223163443,
        "sender_full_name": "bjorn3",
        "timestamp": 1611003628
    },
    {
        "content": "<p>The unit graph thing seems super hacky to me, this is a type of code path that nothing else exercises, so bugs bus bugs.</p>",
        "id": 223163510,
        "sender_full_name": "John Ericson",
        "timestamp": 1611003706
    },
    {
        "content": "<p>the workspace and lockfile merging, being earlier in the pipeline, is more \"macro-y\": it is simulating something which could be written by hand. That feels much safer to me.</p>",
        "id": 223163572,
        "sender_full_name": "John Ericson",
        "timestamp": 1611003754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Also, remember we should get explicit standard library deps. Say someone wants to write a feature that turns on a standard library crate feature? Negotiating all that is a nightmare on the unit level, but easier if we make those dependencies real depedencies.</p>",
        "id": 223163636,
        "sender_full_name": "John Ericson",
        "timestamp": 1611003825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> anyways, if you are confirming that the \"independent resolutions, combine units\" is what's going on today and not my misreading, I think I'll open a WG issue about this.</p>",
        "id": 223163830,
        "sender_full_name": "John Ericson",
        "timestamp": 1611003980
    },
    {
        "content": "<p>I don't know much about the cargo internals.</p>",
        "id": 223163905,
        "sender_full_name": "bjorn3",
        "timestamp": 1611004062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> well, that' makes two of us :)</p>",
        "id": 223164194,
        "sender_full_name": "John Ericson",
        "timestamp": 1611004325
    },
    {
        "content": "<p>OK I opened <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/64\">https://github.com/rust-lang/wg-cargo-std-aware/issues/64</a> for this</p>",
        "id": 223174832,
        "sender_full_name": "John Ericson",
        "timestamp": 1611014714
    }
]