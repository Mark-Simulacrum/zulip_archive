[
    {
        "content": "<p>Hi all! I've been digging through various Cargo resolver logic recently because I have to do some finagling in the context of another build system. And this particular resolver call-chain for <code>cargo install</code> has me confused:</p>\n<ol>\n<li><code>cargo install</code> calls <code>resolve_ws</code>: <a href=\"https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/cargo_install.rs#L662\">https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/cargo_install.rs#L662</a></li>\n<li><code>resolve_ws</code> calls <code>resolve_with_registry</code>: <a href=\"https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/resolve.rs#L67\">https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/resolve.rs#L67</a></li>\n<li>\n<p><code>resolve_with_registry</code> calls <code>resolve_with_previous</code> with <code>CliFeatures::new_all(true)</code> and <code>HasDevUnits::Yes</code>: <a href=\"https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/resolve.rs#L180-L181\">https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/resolve.rs#L180-L181</a><br>\n   This means (if I understand correctly) that it resolves as if all features are enabled _and_ <code>dev-dependencies</code> should be considered.</p>\n</li>\n<li>\n<p><code>resolve_ws</code> calls <code>get_resolved_packages</code>: <a href=\"https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/resolve.rs#L68\">https://github.com/rust-lang/cargo/blob/0.56.0/src/cargo/ops/resolve.rs#L68</a></p>\n</li>\n</ol>\n<p>Taken together, this call-chain makes it seem like <code>cargo install</code> downloads potentially a _lot_ more dependencies than are actually needed by the following build. Am I missing something in the chain here that makes that not be the case?</p>\n<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> suggested I specifically ping you about this <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span></p>",
        "id": 256809361,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1633728936
    },
    {
        "content": "<p>Now, ^ is _only_ the case when <code>check_yanked_install</code> is called, so it may not be _as_ much of a problem â€” I'm not sure how common that is?</p>",
        "id": 256809667,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1633729113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> That shouldn't download any packages, that query should only be hitting the index.</p>",
        "id": 256811396,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633730144
    },
    {
        "content": "<p><code>get_resolved_packages</code> only creates a <code>PackageSet</code>, but the packages there are lazily loaded (<code>PackageSet::new</code> gets things ready to download, but doesn't actually download anything)</p>",
        "id": 256811608,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633730259
    },
    {
        "content": "<p>Ahhh, yes, I see it now. Phew, okay, good. Thanks! Glad it was nothing :)</p>",
        "id": 256811683,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1633730285
    },
    {
        "content": "<p>Even so, it feels weird that it resolves differently from the actual build, no?</p>",
        "id": 256811729,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1633730311
    },
    {
        "content": "<p>Hm, I suppose it is possible that it would issue a warning for an optional dependency that is not enabled.</p>",
        "id": 256812386,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633730646
    },
    {
        "content": "<p>It would also make a difference once we get something like HTTP registries where fetching more things from the index actually affects resolution time in a meaningful way.</p>",
        "id": 256812657,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1633730825
    }
]