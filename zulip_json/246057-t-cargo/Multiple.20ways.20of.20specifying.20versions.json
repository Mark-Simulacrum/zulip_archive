[
    {
        "content": "<p>In <a href=\"https://internals.rust-lang.org/t/feedback-on-cargo-add-before-its-merged/16024\">polishing up cargo-add for inclusion</a>, a couple things came up in the conversation</p>\n<ul>\n<li>If we have an explicit version flag, what to name it.  <code>cargo yank</code> uses <code>--vers</code> while <code>cargo install</code> uses <code>--version</code> (with a hidden alias for <code>--vers</code>)<ul>\n<li>Note: <code>cargo install --vers &lt;version&gt;</code> does accept a version-req, the help just doesn't say so</li>\n</ul>\n</li>\n<li>While <code>cargo check</code> and friends support an inline version syntax (<code>name:version</code>), <code>cargo install</code> and others do not</li>\n<li>Whether the precedence for <code>:</code> in PKGIDs outweighs the precedence for <code>@</code> outside of Rust</li>\n</ul>\n<p>So my questions are:</p>\n<ul>\n<li>Should we accept <code>name:version</code> in more places?</li>\n<li>Should we re-evaluate using <code>@</code> instead of <code>:</code>?<ul>\n<li>Only thought to bring this change up because of <a href=\"https://internals.rust-lang.org/t/feedback-on-cargo-add-before-its-merged/16024/29\">a comment</a> from <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> </li>\n<li>Of course, backwards compatibility applies.  We'd still accept <code>:</code>, just focus documentation on <code>@</code>.</li>\n</ul>\n</li>\n<li>Should we make <code>cargo install</code> and <code>cargo yank</code> consistent?</li>\n</ul>\n<p><em>Note: I do not consider making cargo consistent a blocker for <code>cargo add</code> but deciding on a direction would be.</em></p>",
        "id": 269784034,
        "sender_full_name": "Ed Page",
        "timestamp": 1643395891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span> So, FWIW, I don't necessarily consider the use of <code>:</code> in PKGID precedent for using <code>:</code> for version <em>constraints</em>. You can write <code>name@=1.2.3</code> or <code>name@1.2</code> or <code>name@1</code>, even though none of those are version numbers.</p>",
        "id": 269784418,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643396051
    },
    {
        "content": "<p>So your thought is <code>:</code> for <code>name:version</code> and <code>@</code> for <code>name:version-req</code>?</p>",
        "id": 269784682,
        "sender_full_name": "Ed Page",
        "timestamp": 1643396162
    },
    {
        "content": "<p>I like that</p>",
        "id": 269785498,
        "sender_full_name": "Eh2406",
        "timestamp": 1643396464
    },
    {
        "content": "<p>I feel like the roles are similar enough (e.g. <code>cargo install</code> conflating them) that having a consistent separator would help in jumping between commands rather than having to think \"this is only a version, so I have to use <code>:</code>\".</p>",
        "id": 269785758,
        "sender_full_name": "Ed Page",
        "timestamp": 1643396555
    },
    {
        "content": "<p>And <code>@</code> meaning \"This package, at this version\" applies even more for versions than version reqs.</p>",
        "id": 269785856,
        "sender_full_name": "Ed Page",
        "timestamp": 1643396601
    },
    {
        "content": "<p>We will have switching costs somewhere:</p>\n<ul>\n<li>between cargo and npm</li>\n<li>between add and update</li>\n<li>between old cargo and newer cargo</li>\n</ul>\n<p>We have to pick one. I don't see how to avoid it.</p>",
        "id": 269786187,
        "sender_full_name": "Eh2406",
        "timestamp": 1643396718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I think we can pick the last one, and then eliminate the switching cost by accepting both for compatibility.</p>",
        "id": 269786407,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643396792
    },
    {
        "content": "<p>I'm suggesting that we use <code>@</code> everywhere, and also accept <code>:</code> everywhere that currently accepts <code>:</code>.</p>",
        "id": 269786511,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643396833
    },
    {
        "content": "<p>Yes, no matter what, there is a cost.</p>\n<p>Maybe I'm biased from my own workflow but I'm barely aware of <code>:</code> because of having to do <code>cargo test -p clap:3.0.13</code> because we also depend on criterion which is on clap2.   So I feel like if we transitioned from <code>:</code> now is a good time before adding it or <code>@</code>s use to other commands.</p>",
        "id": 269786721,
        "sender_full_name": "Ed Page",
        "timestamp": 1643396884
    },
    {
        "content": "<p>(on the thread, it sounds like some others weren't aware <code>:</code> also)</p>",
        "id": 269786960,
        "sender_full_name": "Ed Page",
        "timestamp": 1643396976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I guess I misunderstood your earlier comment's intent.  Thanks for clarifying.</p>",
        "id": 269787151,
        "sender_full_name": "Ed Page",
        "timestamp": 1643397058
    },
    {
        "content": "<p>Yeah, I don't want anyone having to think about \"what kind of version is this\".</p>",
        "id": 269788607,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643397734
    },
    {
        "content": "<p>The historical context of <code>cargo yank --vers xxx</code> is that we couldn't use <code>--version</code> since that's the same as <code>cargo --version</code>. I think though that this may be fixed with clap? It looks like clap prints an unknown argument error with <code>cargo install --version</code> where I think with docopt historically it printed the version. That means we could probably rename <code>--vers</code> to <code>--version</code> everywhere (since that's what everyone expects)</p>",
        "id": 269792282,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643399460
    },
    {
        "content": "<p>(keeping <code>--vers</code> of course for backcompat)</p>",
        "id": 269792297,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643399467
    },
    {
        "content": "<p>where is <code>@</code> supported in Cargo though? (I must have forgotten?)</p>",
        "id": 269792342,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643399488
    },
    {
        "content": "<p>It's worth pointing out that <code>cargo test -p foo:1.2.3</code> is only really relevant if you have multiple versions of <code>foo</code> in your crate graph, and given that <code>-p</code> for things like <code>test</code> and <code>build</code> is only for local crates that doesn't matter anyway since your local crates can only have one version. This is mostly useful for <code>cargo update -p foo:1.2.3</code> when you only want to update one version and not the other</p>",
        "id": 269792517,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643399558
    },
    {
        "content": "<blockquote>\n<p>where is @ supported in Cargo though? (I must have forgotten?)</p>\n</blockquote>\n<p>It isn't yet. <code>cargo add</code> was using it and I changed it to <code>:</code> but am getting feedback that we should instead look into changing cargo.</p>",
        "id": 269794590,
        "sender_full_name": "Ed Page",
        "timestamp": 1643400428
    },
    {
        "content": "<blockquote>\n<p>It's worth pointing out that cargo test -p foo:1.2.3 is only really relevant if you have multiple versions of foo in your crate graph, and given that -p for things like test and build is only for local crates that doesn't matter anyway since your local crates can only have one version. This is mostly useful for cargo update -p foo:1.2.3 when you only want to update one version and not the other</p>\n</blockquote>\n<p>They still complain about non-local crates</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">clap $ cargo test -p clap</span>\n<span class=\"go\">error: There are multiple `clap` packages in your project, and the specification `clap` is ambiguous.</span>\n<span class=\"go\">Please re-run this command with `-p &lt;spec&gt;` where `&lt;spec&gt;` is one of the following:</span>\n<span class=\"go\">  clap:2.33.3</span>\n<span class=\"go\">  clap:3.0.13</span>\n</code></pre></div>",
        "id": 269794763,
        "sender_full_name": "Ed Page",
        "timestamp": 1643400498
    },
    {
        "content": "<p>(only know about this because clap's CI used to test <code>clap</code> with a custom set of feature flags to avoid feature unification)</p>",
        "id": 269794912,
        "sender_full_name": "Ed Page",
        "timestamp": 1643400567
    },
    {
        "content": "<p>it's true yeah that you still get complaints if the local crate shows up multiple times in the crate graph by name, it's sort of a mistake we made I think where <code>-p</code> is pkgid-specs but you really only want that on <code>cargo update</code> and nothing else I think</p>",
        "id": 269795435,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643400796
    },
    {
        "content": "<p>otherwise <code>cargo build -p</code>, while it once supported and probably still does, supports building random crates in your graph it probably doesn't make sense to do that</p>",
        "id": 269795472,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643400815
    },
    {
        "content": "<p>in any case changing the pkgid syntax is pretty easy to do</p>",
        "id": 269795497,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643400829
    },
    {
        "content": "<p>I actually really like the idea of <code>cargo install foo@1.2.3</code> instead of <code>cargo install --version 1.2.3 foo</code></p>",
        "id": 269795601,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643400873
    },
    {
        "content": "<p>So it sounds like there is some leaning towards</p>\n<ul>\n<li>Add <code>--version</code> to <code>cargo yank</code>, with an alias for <code>--vers</code> for compatibility</li>\n<li>Add <code>@</code> support for the PKDID parser</li>\n<li>Support <code>name@version</code> in various commands with <code>--version</code> flags</li>\n</ul>\n<p>What kind of decision process is needed for me to plan <code>cargo add</code> around this?</p>\n<p>When we decide to move forward, I'll create issues and work on them in the background with the assumption that they'll probably be implemented after <code>cargo add</code> is done.</p>",
        "id": 269797759,
        "sender_full_name": "Ed Page",
        "timestamp": 1643401678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span> I think adding <code>--version</code> to <code>cargo yank</code> is orthogonal and not a blocker.</p>",
        "id": 269797819,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643401696
    },
    {
        "content": "<p>I think for the purposes of adding <code>cargo add</code>, it'd suffice to support <code>@</code>.</p>",
        "id": 269797849,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643401717
    },
    {
        "content": "<p>Yes, that one specifically isn't a blocker since I've removed <code>--vers</code> for now.</p>",
        "id": 269797855,
        "sender_full_name": "Ed Page",
        "timestamp": 1643401720
    },
    {
        "content": "<p>So the question then becomes, is it a blocker to make other parts of cargo support <code>@</code> in addition to <code>:</code> and have the documentation use <code>@</code> as the preferred alternative, or can we go ahead and add <code>cargo add</code> with <code>@</code> and handle consistency in a followup PR?</p>",
        "id": 269797927,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643401763
    },
    {
        "content": "<p>I'd separate it out</p>\n<ul>\n<li>Is a decision on <code>@</code> in other parts of cargo a blocker?</li>\n<li>Is an implementation a blocker?</li>\n</ul>",
        "id": 269799091,
        "sender_full_name": "Ed Page",
        "timestamp": 1643402331
    },
    {
        "content": "<p>Ah, good call.</p>",
        "id": 269799144,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402362
    },
    {
        "content": "<p>I would propose that the first is, and the second isn't.</p>",
        "id": 269799167,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402372
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 269799181,
        "sender_full_name": "Ed Page",
        "timestamp": 1643402380
    },
    {
        "content": "<p>So, proposal: I'd suggest reverting the switch from <code>@</code> to <code>:</code> in cargo-add, and then when we do the FCP for cargo-add, one of the things we're deciding is \"we're comfortable with <code>@</code> here\".</p>",
        "id": 269799295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643402421
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 269799352,
        "sender_full_name": "Ed Page",
        "timestamp": 1643402455
    },
    {
        "content": "<p>I'm excited for this! This came up for me a while back in the form of wanting <code>cargo update -p</code> to accept partial versions/reqs: <a href=\"#narrow/stream/246057-t-cargo/topic/-p.20specs\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/-p.20specs</a></p>",
        "id": 269881430,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1643482211
    }
]