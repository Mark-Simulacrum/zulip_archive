[
    {
        "content": "<p>If I'm making a change to rustc that will necessitate a change to cargo, is it fine to submit a PR that changes both in one go, so that the tests keep passing?</p>",
        "id": 258192029,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634649323
    },
    {
        "content": "<p>Does that get back-merged into the cargo repository?</p>",
        "id": 258192047,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634649332
    },
    {
        "content": "<p>Isn't cargo still a submodule? You can only do that for the ones that switched to subtrees.</p>",
        "id": 258193304,
        "sender_full_name": "cuviper",
        "timestamp": 1634649792
    },
    {
        "content": "<p>Hrm.</p>",
        "id": 258193346,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634649813
    },
    {
        "content": "<p>I'm trying to change <code>-Z strip</code> to <code>-C strip</code> as part of stabilizing it, which requires changing cargo's handling of that. I guess since it's an unstable option in Cargo, it's allowed to need a bit of transition before it stabilizes...</p>",
        "id": 258193454,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634649846
    },
    {
        "content": "<p>Remember too that cargo stage0 is used for all of bootstrap</p>",
        "id": 258193495,
        "sender_full_name": "cuviper",
        "timestamp": 1634649862
    },
    {
        "content": "<p>Right, but we won't be setting <code>strip</code> within Rust itself.</p>",
        "id": 258193538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634649878
    },
    {
        "content": "<p>It's more that the nightly only <code>strip</code> option within Cargo profiles will be broken until Cargo is updated to pass the right option to Rust.</p>",
        "id": 258193595,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634649901
    },
    {
        "content": "<p>(As an aside, when we add a new command-line option that's going to become stable one day, we shouldn't add it as a <code>-Z</code>option; we should add a <code>-C</code> option or whatever it's going to end up being, and just gate it on <code>-Z unstable-options</code>.)</p>",
        "id": 258193638,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634649918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/PRs.20changing.20both.20rust.20and.20cargo/near/258193638\">said</a>:</p>\n<blockquote>\n<p>(As an aside, when we add a new command-line option that's going to become stable one day, we shouldn't add it as a <code>-Z</code>option; we should add a <code>-C</code> option or whatever it's going to end up being, and just gate it on <code>-Z unstable-options</code>.)</p>\n</blockquote>\n<p>FWIW this is generally <em>more</em> painful: you can't easily tell whether the option you're using is unstable, particularly when you <em>already</em> have -Zunstable-options. OTOH, there's no reason we can't (temporarily, even for multiple cycles) support -Zstrip and -Cstrip as aliases.</p>",
        "id": 258193885,
        "sender_full_name": "simulacrum",
        "timestamp": 1634650012
    },
    {
        "content": "<p>It's also a pain to pass -Zunstable-options and some other option in rustflags and the like, especially since some tools will error on the option being set twice</p>",
        "id": 258193956,
        "sender_full_name": "simulacrum",
        "timestamp": 1634650041
    },
    {
        "content": "<blockquote>\n<p>you can't easily tell whether the option you're using is unstable, particularly when you already have -Zunstable-options</p>\n</blockquote>\n<p>Perhaps we should have something like <code>-Zunstable-options=x,y,z</code>, then, similar to feature flags?</p>",
        "id": 258194675,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634650325
    },
    {
        "content": "<p>Still seems preferable to changing the nature of the feature when stabilizing it.</p>",
        "id": 258194731,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634650353
    },
    {
        "content": "<p>(Analogously, we don't typically change a language feature's syntax, or a library function's semantics, <em>right before</em> stabilizing it; that'd be error-prone.)</p>",
        "id": 258194774,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634650376
    },
    {
        "content": "<p>~None of the code needs to change between -Z and -C though, so not sure that the situation is \"alike\". It seems similar to moving the feature gate from unstable to stable or <a href=\"http://active.rs\">active.rs</a> to <a href=\"http://accepted.rs\">accepted.rs</a> for lang features.</p>",
        "id": 258195465,
        "sender_full_name": "simulacrum",
        "timestamp": 1634650624
    },
    {
        "content": "<p>Cargo currently passes -Z strip, and has to be changed to pass -C strip.</p>",
        "id": 258196039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634650847
    },
    {
        "content": "<p>Cargo supports both the current stable and nightly AFAIK, so it already has to featute detect if certain things are allowed. You could land a PR to cargo first teaching it to use -Cstrip if it doesn't error and -Zstrip otherwise (or even skip -Zstrip, temporarily breaking it on current nightly). After that you could land a rustc PR to change -Zstrip to -Cstrip I think.</p>",
        "id": 258196675,
        "sender_full_name": "bjorn3",
        "timestamp": 1634651112
    },
    {
        "content": "<p>I think I'll just leave <code>-Z strip</code> working temporarily, land a patch <em>adding</em> <code>-C strip</code>, and then Cargo can switch over so that it works on stable.</p>",
        "id": 258196903,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634651202
    },
    {
        "content": "<p>Hmmm. Apparently it isn't straightforward to have a -Z and -C option with the same name.</p>",
        "id": 258200562,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634652542
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/pull/90058\">https://github.com/rust-lang/rust/pull/90058</a> , got errors because the macros define functions with the same name.</p>",
        "id": 258200596,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634652554
    },
    {
        "content": "<p>It is typical to just break cargo in this scenario and follow up with a PR on the cargo side after the change lands.</p>",
        "id": 258208414,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634655081
    },
    {
        "content": "<p>Cargo's testsuite is set up so that unstable things aren't tested on rust-lang/rust, so it shouldn't impact landing the change.  It'll disrupt Cargo's CI, but it's not a big deal.</p>",
        "id": 258208585,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634655128
    }
]