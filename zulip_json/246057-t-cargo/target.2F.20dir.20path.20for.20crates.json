[
    {
        "content": "<p>I'm exploring removing the hard requirement on x.py in favor of directly invoking rustbuild, and it seems like there's no good way for rustbuild to learn where its binaries will be placed. My current idea is to manually synthesize the path from the OUT_DIR of the build script.</p>\n<p>Maybe we could set CARGO_BIN_EXE_&lt;name&gt; for libraries, with the caveat that the binary may not exist or be outdated or whatever? FWIW rustbuild would love a \"always build the binaries too\" feature or something along those lines.</p>",
        "id": 209303455,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490125
    },
    {
        "content": "<p>I guess the alternative is to remove the multiple-binary situation rustbuild currently has, stuff everything into one binary, and then use the argv[0] to dispatch to the appropriate main</p>",
        "id": 209303541,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490190
    },
    {
        "content": "<p>that'd be really annoying though :/</p>",
        "id": 209303547,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490195
    },
    {
        "content": "<p>(and to some extent, given that current_exe doesn't work everywhere, not a solution anyway)</p>",
        "id": 209303620,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490220
    },
    {
        "content": "<p>Can you elaborate a little on what you need to be able to find?</p>",
        "id": 209303637,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490230
    },
    {
        "content": "<p>I would generally like cargo to provide more information like this.</p>",
        "id": 209303676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490247
    },
    {
        "content": "<p>I want to find the binaries of bin/rustc.rs bin/rustdoc.rs etc</p>",
        "id": 209304026,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490461
    },
    {
        "content": "<p>To some extent I think the challenge we'll face is that (AFAIK) there's not currently a good way to tell cargo \"my library uses these binaries\"</p>",
        "id": 209304112,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490514
    },
    {
        "content": "<p>(or \"this binary uses these other binaries\")</p>",
        "id": 209304135,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490528
    },
    {
        "content": "<p>so a cargo run wouldn't build enough for rustbuild to work well</p>",
        "id": 209304152,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490540
    },
    {
        "content": "<p>rustc-perf also has this problem, you have to use <code>cargo build &amp;&amp; target/debug/collector</code>, not <code>cargo run collector</code></p>",
        "id": 209304227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599490570
    },
    {
        "content": "<p>Ah, got it. We have an open feature request for exactly this, and it's something I would really like.</p>",
        "id": 209304229,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490571
    },
    {
        "content": "<p>because otherwise the <code>fake-rustc</code> won't be built</p>",
        "id": 209304245,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599490577
    },
    {
        "content": "<p>One moment...</p>",
        "id": 209304253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490582
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/4316\">https://github.com/rust-lang/cargo/issues/4316</a></p>",
        "id": 209304428,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490669
    },
    {
        "content": "<p>There's some partial implementation linked from there as well.</p>",
        "id": 209304516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490703
    },
    {
        "content": "<p>Hm that looks interesting</p>",
        "id": 209304595,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490766
    },
    {
        "content": "<p>It also looks \"hard\"</p>",
        "id": 209304599,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490772
    },
    {
        "content": "<p>Not as much as you would think.</p>",
        "id": 209304610,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490784
    },
    {
        "content": "<p>well I mean it seems like there's an open RFC?</p>",
        "id": 209304702,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490813
    },
    {
        "content": "<p>It's not so much hard as bikesheddy. ;)</p>",
        "id": 209304735,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490842
    },
    {
        "content": "<p>not necessarily from an impl perspective, I'm just saying that it doesn't seem like something we would be able to roll out even in unstable relatively quickly</p>",
        "id": 209304756,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490857
    },
    {
        "content": "<p>For instance, what syntax do we use for declaring a dependency on a binary.</p>",
        "id": 209304778,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490866
    },
    {
        "content": "<p>and given that the multiple-entry binary solves most of the problems anyway...</p>",
        "id": 209304781,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490867
    },
    {
        "content": "<p>I guess I'm saying that I don't really want to personally try and drive that bikeshed</p>",
        "id": 209304814,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490894
    },
    {
        "content": "<p>Fair.</p>",
        "id": 209304820,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490899
    },
    {
        "content": "<p>Had to try. ;)</p>",
        "id": 209304943,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599490972
    },
    {
        "content": "<p>heh</p>",
        "id": 209304974,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490993
    }
]