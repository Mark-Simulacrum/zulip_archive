[
    {
        "content": "<p>There was a legitimate question on my RFC about the <a href=\"https://github.com/rust-lang/rfcs/pull/3231#discussion_r812435273\">command line interface</a> of cargo login (if RFC 3231 is merged).</p>\n<p>The existing behavior:</p>\n<ul>\n<li><code>cargo login</code> prompts for a secret token.</li>\n<li><code>cargo login -- value</code> does not have a prompt but leaks the value into the shell history.</li>\n</ul>\n<p>Proposed additions:</p>\n<ul>\n<li><code>cargo login --private-key</code> prompts for a private-key.</li>\n<li><code>cargo login --private-key -- value</code> does not have a prompt but leaks the value into the shell history.</li>\n</ul>\n<p>possibley with a check, if you <code>cargo login</code> then give something that looks like a private key we will ask you to confirm witch one it is.</p>",
        "id": 274051510,
        "sender_full_name": "Eh2406",
        "timestamp": 1646347404
    },
    {
        "content": "<p>My expertise is not in CLI design.</p>\n<ul>\n<li>Is this good design?</li>\n<li>Is this something we can do with clap?</li>\n<li>How stable does the <code>prompt</code> interface need to stay?</li>\n</ul>",
        "id": 274051920,
        "sender_full_name": "Eh2406",
        "timestamp": 1646347661
    },
    {
        "content": "<p>I would argue it should be _impossible_ to provide the token as a command argument. It should either be provided on stdin, or via a file. Arguments tend to leak all over the place.</p>",
        "id": 274056004,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1646349962
    },
    {
        "content": "<p>Absolutely. In particular, arguments are accessible to other applications on the same system that do not otherwise share privileges.</p>",
        "id": 274056305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646350150
    },
    {
        "content": "<p>So that points out a question:</p>\n<ul>\n<li>how important is it for login to have consistent API between secret tokens and asymmetric tokens?</li>\n</ul>\n<p>How big a deal is it to say <code>-- value</code> will not work with <code>--private-key</code>?</p>",
        "id": 274056839,
        "sender_full_name": "Eh2406",
        "timestamp": 1646350400
    },
    {
        "content": "<p>Also should we remove support for that for old style tokens?</p>",
        "id": 274056866,
        "sender_full_name": "Eh2406",
        "timestamp": 1646350424
    },
    {
        "content": "<p>I think we should remove that. But more importantly, let's not <em>extend</em> it to any new cases.</p>",
        "id": 274057003,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646350492
    },
    {
        "content": "<p>If we're serious about that, the first step would be to stop recommending it <a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html#before-your-first-publish\">https://doc.rust-lang.org/cargo/reference/publishing.html#before-your-first-publish</a></p>",
        "id": 274057284,
        "sender_full_name": "Eh2406",
        "timestamp": 1646350685
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/10458\">https://github.com/rust-lang/cargo/pull/10458</a></p>",
        "id": 274162439,
        "sender_full_name": "Eh2406",
        "timestamp": 1646415159
    },
    {
        "content": "<p>Given that <a href=\"https://github.com/rust-lang/cargo/blob/9d754ed085a97d486cda45308a3c749c818305a5/src/cargo/ops/registry.rs#L700-L713\">this code</a> is not covered by tests, what is the best way for me to test that the <code>cargo login --private-key</code> prompts for a key?</p>",
        "id": 274193692,
        "sender_full_name": "Eh2406",
        "timestamp": 1646430895
    },
    {
        "content": "<p>I don't think the test support code has any support for sending data via stdin.  It would need to be done manually, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cargo_test_support</span>::<span class=\"n\">cargo_process</span><span class=\"p\">(</span><span class=\"s\">\"login\"</span><span class=\"p\">).</span><span class=\"n\">build_command</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">cargo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">(</span><span class=\"n\">Stdio</span>::<span class=\"n\">piped</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">(</span><span class=\"n\">Stdio</span>::<span class=\"n\">piped</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">(</span><span class=\"n\">Stdio</span>::<span class=\"n\">piped</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"s\">b\"some token\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274195007,
        "sender_full_name": "Eric Huss",
        "timestamp": 1646431587
    },
    {
        "content": "<p>FYI I'm getting close to releasing a new version of a crate that should help with this.   In cargo-edit, I had been using a <code>[[bin]]</code> snapshotting crate I wrote called <code>trycmd</code> but it isn't flexible to handle the registry stuff.  I'm experimenting with a lower level <code>[[bin]]</code> snapshotting crate that is more like a generalized <code>cargo_test_support</code> but with snapshotting.   it has good support for <code>stdin</code>.</p>",
        "id": 274195568,
        "sender_full_name": "Ed Page",
        "timestamp": 1646431957
    }
]