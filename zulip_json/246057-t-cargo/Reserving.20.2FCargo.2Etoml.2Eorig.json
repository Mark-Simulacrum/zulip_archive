[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hello! I noticed that <code>/Cargo.toml.orig</code> is not a \"reserved\" file name in <code>src/cargo/ops/cargo_package.rs</code>, so if such a file exists in the project folder, the generated crate tarball will include two entries for the <code>Cargo.toml.orig</code>.  This probably isn't a big deal, but since there's already logic to prevent duplicate <code>.cargo_vcs_info.json</code> files, I'd like to \"fix\" that logic to also complain if there's an existing <code>Cargo.toml.orig</code> file in the project directory, since it's probably a mistake. (If you're curious, you can verify this this a test crate I uploaded, via <code>curl https://crates.io/api/v1/crates/a-/0.0.0--a-/download -L | gunzip | tar -t</code>.)</p>\n<p>I think the change would only be <a href=\"https://github.com/jeremyBanks/cargo/commit/e4c725110b84a6175dd2488eea34ee47eb3c8df1\">~2 modified lines</a>: after testing it, would it be okay for me to go ahead and just submit a PR for that, or should I open an issue first? Or should I just not bother with something this low-priority given the team's bandwidth constraints? Thanks.</p>",
        "id": 278384245,
        "sender_full_name": "Jeremy Banks",
        "timestamp": 1649473780
    },
    {
        "content": "<p>Go ahead and submit a PR for it.</p>",
        "id": 278393566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649488926
    },
    {
        "content": "<p>It's worth fixing.</p>",
        "id": 278393571,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649488940
    },
    {
        "content": "<p>Good catch!</p>",
        "id": 278393577,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649488943
    },
    {
        "content": "<p>Why is it possible to create a tarball with a duplicate file in the first place? Shouldn't that just error (both on creating and unpacking)?</p>",
        "id": 278396019,
        "sender_full_name": "bjorn3",
        "timestamp": 1649492138
    },
    {
        "content": "<p>I wouldn't be surprised if different programs and platforms handle duplicate files in different ways, which would allow auditing and automatically scanning uploaded crates to be misleading.</p>",
        "id": 278396084,
        "sender_full_name": "bjorn3",
        "timestamp": 1649492218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah, as it happens I came across this while working on a script to cross check git repositories with cargo packages. This was a case I hadn't anticipated.  I'd like to have my code flag it as probably malicious, but wanted to get rid of this way of accidentally doing it first. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 278411274,
        "sender_full_name": "Jeremy Banks",
        "timestamp": 1649512352
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <a href=\"https://github.com/rust-lang/cargo/pull/10551\">https://github.com/rust-lang/cargo/pull/10551</a></p>",
        "id": 278423921,
        "sender_full_name": "Jeremy Banks",
        "timestamp": 1649529052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Reserving.20.2FCargo.2Etoml.2Eorig/near/278396019\">said</a>:</p>\n<blockquote>\n<p>Why is it possible to create a tarball with a duplicate file in the first place? Shouldn't that just error (both on creating and unpacking)?</p>\n</blockquote>\n<p><code>tar</code> (the CLI) <a href=\"https://www.gnu.org/software/tar/manual/html_node/append.html\">documents</a> support for this as a way to append a file to an existing archive. Kind of makes sense when considering tar's <em>tape</em> archive origins.</p>",
        "id": 278424102,
        "sender_full_name": "Kevin Mehall",
        "timestamp": 1649529323
    },
    {
        "content": "<p>So a proper tar parser will always use the last version? In that case I'm less worried.</p>",
        "id": 278426187,
        "sender_full_name": "bjorn3",
        "timestamp": 1649532135
    },
    {
        "content": "<p>I skimmed the source of a few major tar implementations, and although my C is rough, they all seem to do the obvious thing of iterating through the entries in order, writing them to the filesystem so that the later entries will implicitly overwrite the earlier ones. The main exception is if the user sets flags to prevent existing files from being overwritten, but in that case tar will typically exit with an error code. The one case where I could see this not happening is if the user picks an option to only overwrite older files, in which case the timestamps in the tar archive could determine precedence. However, I don't think this is the default behaviour anywhere. So I don't think this is likely to be a problem for anyone that's actually extracting the files. I can contrive a situation where this causes a script scanning the file programmatically to do the wrong thing instead of causing an error, but they're pretty unrealistic. It's probably not a big deal.</p>",
        "id": 278437355,
        "sender_full_name": "Jeremy Banks",
        "timestamp": 1649548195
    }
]