[
    {
        "content": "<p>I'm experimenting with yet another cargo subcommand and figured we should probably provide examples in clap for this.</p>\n<ul>\n<li><a href=\"https://github.com/epage/clap/blob/cargo/examples/cargo-example.rs\">cargo-example</a></li>\n<li><a href=\"https://github.com/epage/clap/blob/cargo/examples/cargo-example.md\">example output</a></li>\n<li><a href=\"https://github.com/clap-rs/clap/pull/3180\">relevant PR</a> (focus on the second commit, the first is cleanup that adds a lot of noise)</li>\n</ul>\n<p>Feel free to comment on that PR, even if I've already merged it, for any other recommendations or best practices I might have missed.</p>\n<p>I know that <span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> has <a href=\"https://github.com/TeXitoi/structopt/issues/58\">expressed interest in custom cargo commands being directly callable without the extra subcommand cargo requires</a>.  For myself, I guess I'm not dealt with that workflow so I have a hard time commenting on it.</p>",
        "id": 265049835,
        "sender_full_name": "Ed Page",
        "timestamp": 1639591375
    },
    {
        "content": "<blockquote>\n<p>I know that @Jon Gjengset has expressed interest in custom cargo commands being directly callable without the extra subcommand cargo requires.</p>\n</blockquote>\n<p>I would also find that super convenient - I had to make a separate binary altogether for this since otherwise the command name was ambiguous with a positional argument</p>",
        "id": 265079656,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639604672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  Could you help me understand the role of the tools and the user workflow where a bin gets called both standalone and as a custom cargo subcommand?</p>",
        "id": 265082606,
        "sender_full_name": "Ed Page",
        "timestamp": 1639605911
    },
    {
        "content": "<p>here's the standalone binary:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ deadlinks --help\nCheck your package&#39;s documentation for dead links.\n\nUsage:\n    deadlinks [options] &lt;directory&gt;...\n\nOptions:\n    -h --help               Print this message\n    --check-http            Check &#39;http&#39; and &#39;https&#39; scheme links\n    --forbid-http           Give an error if HTTP links are found. This is incompatible with --check-http.\n    --ignore-fragments      Don&#39;t check URL fragments.\n    --debug                 Use debug output\n    -v --verbose            Use verbose output\n    -V --version            Print version info and exit.\n</code></pre></div>\n<p>and the cargo integration:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo-deadlinks deadlinks --help\nCheck your package&#39;s documentation for dead links.\n\nUsage:\n    cargo deadlinks [--dir &lt;directory&gt;] [--cargo-dir &lt;directory&gt;] [options] [-- &lt;CARGO_ARGS&gt;]\n\nOptions:\n    -h --help               Print this message.\n    --dir                   Specify a directory to check (default is all paths that have documentation generated by cargo).\n    --cargo-dir             Specify which directory to look in for the Cargo manifest (default is the current directory).\n    --check-http            Check &#39;http&#39; and &#39;https&#39; scheme links.\n    --forbid-http           Give an error if HTTP links are found. This is incompatible with --check-http.\n    --check-intra-doc-links Check for broken intra-doc links.\n    --ignore-fragments      Don&#39;t check URL fragments.\n    --no-build              Do not call `cargo doc` before running link checking. By default, deadlinks will call `cargo doc` if `--dir` is not passed.\n    --debug                 Use debug output. This option is deprecated; use `RUST_LOG=debug` instead.\n    -v --verbose            Use verbose output. This option is deprecated; use `RUST_LOG=info` instead.\n    -V --version            Print version info and exit.\n\nCARGO_ARGS will be passed verbatim to `cargo doc` (as long as `--no-build` is not passed).\n</code></pre></div>\n<p>Basically this makes sense to use both with and without cargo, but when running with cargo it's a lot smarter.</p>",
        "id": 265083025,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639606145
    },
    {
        "content": "<p>the standalone one requires you to have pre-existing HTML files in a directory, the cargo one can build the docs for you</p>",
        "id": 265083101,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639606200
    },
    {
        "content": "<p>if cargo didn't pass the command name unconditionally, I could just make <code>cargo-deadlinks</code> a symlink to <code>deadlinks</code>, which would save 10 MB of disk space and more importantly let me simplify the code - right now the directory structure looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>src/bin/\n├── cargo-deadlinks.rs\n├── deadlinks.rs\n└── shared.rs\n</code></pre></div>",
        "id": 265083714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639606406
    },
    {
        "content": "<p>The in-work <a href=\"https://github.com/clap-rs/clap/issues/2861\">multicall</a> feature could help with this.  It let's you treat the binary <code>file_stem</code> as a subcommand.   You would then define the following subcommands</p>\n<ul>\n<li><code>deadlinks</code></li>\n<li><code>cargo-deadlinks</code><ul>\n<li><code>deadlinks</code></li>\n</ul>\n</li>\n</ul>\n<p>You can break the deadlinks definition and business logic out into functions for reuse between the two subcommands.</p>",
        "id": 265084025,
        "sender_full_name": "Ed Page",
        "timestamp": 1639606598
    },
    {
        "content": "<p>yes, but then I'd have to use clap :P</p>",
        "id": 265084092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639606633
    },
    {
        "content": "<p>Well, world domination is one step at a time :)</p>",
        "id": 265084199,
        "sender_full_name": "Ed Page",
        "timestamp": 1639606709
    },
    {
        "content": "<p>Jon's request was for how to do it in structopt/clap, so that was the spirit of my answer.  The only option I've thought of besides multicall support, is if cargo changed its protocol for subcommands but I'm unsure if there is a path forward for that without breaking compatibility.</p>",
        "id": 265084320,
        "sender_full_name": "Ed Page",
        "timestamp": 1639606799
    }
]