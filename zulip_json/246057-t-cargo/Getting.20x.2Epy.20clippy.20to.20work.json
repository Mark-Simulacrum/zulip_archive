[
    {
        "content": "<p>I'm trying to work on <a href=\"https://github.com/rust-lang/rust/issues/77309\">https://github.com/rust-lang/rust/issues/77309</a> and I changed x.py to pass <code>--sysroot</code> unconditionally when running <code>cargo clippy</code>. That gives the following clippy error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/joshua/.local/lib/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/clippy-driver /home/joshua/rustc/build/bootstrap/debug/rustc - --crate-name ___ --print=file-names --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit code: 1)\n  --- stderr\n  error: Option &#39;sysroot&#39; given more than once\n</code></pre></div>\n\n\n<p>But sysroot doesn't show up here at all! Is cargo passing it? Is there a way to see what RUSTFLAGS are set and that cargo passes to clippy-driver?</p>",
        "id": 211697334,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601421736
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 211697342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601421744
    },
    {
        "content": "<p>this is the cargo invocation:</p>\n<div class=\"codehilite\"><pre><span></span><code>running: &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;clippy&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;8&quot; &quot;-v&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace compiler-builtins-c&quot; &quot;--manifest-path&quot; &quot;/home/joshua/rustc/library/test/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot; &quot;--&quot; &quot;--cap-lints&quot; &quot;warn&quot; &quot;--sysroot&quot; &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-sysroot&quot;\n</code></pre></div>",
        "id": 211697463,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601421876
    },
    {
        "content": "<p>clippy is setting --sysroot: <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/src/driver.rs#L354\">https://github.com/rust-lang/rust-clippy/blob/master/src/driver.rs#L354</a></p>",
        "id": 211698115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601422476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  I think you should be able to set the SYSROOT environment variable. Would that work?</p>",
        "id": 211699812,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601423753
    },
    {
        "content": "<p>yeah, I tried that and it got me a little further</p>",
        "id": 211699846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601423765
    },
    {
        "content": "<p>now clippy is trying to load libstd from the sysroot before it's built</p>",
        "id": 211699881,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601423784
    },
    {
        "content": "<p>which seems really odd - why would it need libstd?</p>",
        "id": 211699903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601423801
    },
    {
        "content": "<p>let me try -Z treat-err-as-bug</p>",
        "id": 211700043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601423907
    },
    {
        "content": "<p>oh actually this might not be clippy's fault</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `cc`\n</code></pre></div>",
        "id": 211700259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601424089
    },
    {
        "content": "<p>do you know how to pass arguments to just clippy and not rustc through x.py? I tried <code>RUSTFLAGS_BOOTSTRAP</code> which passes to rustc and <code>x.py clippy -- &lt;my_args&gt;</code> which said the arguments weren't recognized</p>",
        "id": 211700763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601424441
    },
    {
        "content": "<p>I'm not sure I understand the question.  Clippy is rustc.</p>",
        "id": 211700891,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601424506
    },
    {
        "content": "<p>no, clippy is a wrapper around rustc that understands more arguments than rustc does</p>",
        "id": 211700956,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601424571
    },
    {
        "content": "<p>rustc doesn't recognize <code>--fix</code></p>",
        "id": 211700961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601424576
    },
    {
        "content": "<p>I guess the question is how to pass more arguments to cargo really</p>",
        "id": 211701020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601424607
    },
    {
        "content": "<p>If you are referring to passing flags to <code>cargo clippy</code>, I think that would be done with CARGOFLAGS_NOT_BOOTSTRAP or CARGOFLAGS_BOOTSTRAP</p>",
        "id": 211701080,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601424684
    },
    {
        "content": "<p>FWIW, I think this will be quite difficult to fix. One approach I might suggest is to not run <code>cargo clippy</code>, and instead run <code>cargo check</code> with <code>RUSTC</code> set to the bootstrap wrapper, and \"RUSTC_REAL\" set to <code>clippy-driver</code>. I dunno if that would help, but might cut down on some of the complexity.</p>\n<p>Otherwise, it looks like the fundamental problem is that you'll need to recreate all the logic in <code>bootstrap/bin/rustc.rs</code>, which might not be possible running <code>cargo clippy</code>.</p>",
        "id": 211701481,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601425044
    },
    {
        "content": "<p>ooh that's nicer than having a new <code>CLIPPY</code> env var, yeah</p>",
        "id": 211701622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601425167
    },
    {
        "content": "<p>does bootstrap strip environment variables? Is there a way to set arbitrary env variables for cargo?</p>",
        "id": 211702305,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601425816
    },
    {
        "content": "<p>The only environment variables that it seems to remove are MAKEFLAGS and MFLAGS.   If you want to set env vars from the command-line, you can set them like normal. If you are trying to set them inside bootstrap, that would just be a normal call to <code>.env()</code> on the Command builder.</p>",
        "id": 211702568,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601426055
    },
    {
        "content": "<p>hmm, that's weird that clippy isn't fixing anything even with <code>__CARGO_FIX_YOLO</code> then</p>",
        "id": 211702588,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601426081
    },
    {
        "content": "<p>maybe it sees that one of the earlier crates failed to build and refuses to apply any changes?</p>",
        "id": 211702596,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601426091
    },
    {
        "content": "<p><code>cargo fix</code> won't apply fixes on error unless <code>--broken-code</code> is used.</p>",
        "id": 211702662,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601426149
    },
    {
        "content": "<p>this is an error in another crate, but let me try --broken-code too</p>",
        "id": 211702764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601426220
    },
    {
        "content": "<p>nope, no luck</p>",
        "id": 211702807,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601426273
    },
    {
        "content": "<blockquote>\n<p>One approach I might suggest is to not run cargo clippy, and instead run cargo check with RUSTC set to the bootstrap wrapper, and \"RUSTC_REAL\" set to clippy-driver. I dunno if that would help, but might cut down on some of the complexity.</p>\n</blockquote>\n<p>Wouldn't that disallow passing any arguments (like <code>--fix</code>) to the cargo wrapper? Or is <code>clippy-driver</code> the cargo wrapper?</p>",
        "id": 211703225,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601426679
    },
    {
        "content": "<p>Yea, that would prevent <code>--fix</code> from working directly.  You would have to recreate that in bootstrap. It's fairly simple (run <code>cargo fix</code> with <code>RUSTC_WORKSPACE_WRAPPER</code> set instead of <code>RUSTC</code>).</p>",
        "id": 211703352,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601426790
    },
    {
        "content": "<p>(Just note that <code>--fix</code> in clippy is experimental, and I think might have some issues.)</p>",
        "id": 211703391,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601426841
    },
    {
        "content": "<p>you're right, this does sound painful <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 211703490,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601426961
    },
    {
        "content": "<p>does cargo preserve environment variables when it spawns rustc/rustdoc/clippy-driver?</p>",
        "id": 211861720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601517776
    },
    {
        "content": "<p>wait I think I asked this already lol</p>",
        "id": 211861732,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601517785
    },
    {
        "content": "<p>actually it must because it preserves SYSROOT</p>",
        "id": 211861746,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601517809
    },
    {
        "content": "<p>so I'm confused why this isn't working then :/</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs</span>\n<span class=\"gh\">index 58c96b2bcb3..786b3072c6a 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/builder.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/builder.rs</span>\n<span class=\"gu\">@@ -781,6 +781,11 @@ impl&lt;'a&gt; Builder&lt;'a&gt; {</span>\n         } else if cmd == \"clippy\" {\n             // clippy overwrites any sysroot we pass. Tell it to use the appropriate sysroot instead.\n             cargo.env(\"SYSROOT\", self.sysroot(compiler));\n<span class=\"gi\">+            // There is no clippy.rs binary. Overwrite the dylib from here instead.</span>\n<span class=\"gi\">+            let libdir = self.rustc_libdir(compiler);</span>\n<span class=\"gi\">+            let mut dylib_path = util::dylib_path();</span>\n<span class=\"gi\">+            dylib_path.insert(0, PathBuf::from(libdir));</span>\n<span class=\"gi\">+            cargo.env(util::dylib_path_var(), env::join_paths(&amp;dylib_path).unwrap());</span>\n         }\n\n         cargo.env(\"CARGO_TARGET_DIR\", &amp;out_dir).arg(cmd);\n</code></pre></div>\n\n<p>I don't think <a href=\"http://rustdoc.rs\">rustdoc.rs</a> does anything else special.</p>",
        "id": 211861759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601517838
    },
    {
        "content": "<p>maybe it needs the logic from <a href=\"http://rustc.rs\">rustc.rs</a> too?</p>",
        "id": 211861927,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601517998
    },
    {
        "content": "<p>the only difference I saw was <code>-Z unstable-if-unmarked</code>; I tried passing that without success</p>",
        "id": 211862038,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601518140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Here is a solution to get <code>x.py clippy library/std</code> to work: </p>\n<ul>\n<li>Pass <code>-Zunstable-options</code> after the <code>clippy</code> argument in <code>cargo clippy</code>.  This enables a special mode that limits clippy's scope.</li>\n<li>Pass <code>--sysroot</code> <code>self.sysroot(compiler)</code> on the command-line (also after the <code>clippy</code> arg).</li>\n<li>Do <strong>not</strong> set <code>--cfg=bootstrap</code> (since it is running nightly clippy).</li>\n<li>Do <strong>not</strong> set the <code>RUSTC</code> environment variable. <code>cargo clippy</code> is running on nightly, we don't want to break building of build scripts.</li>\n</ul>\n<p>With that I was able to get it to pass.</p>",
        "id": 211864158,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601520869
    },
    {
        "content": "<blockquote>\n<p>Pass --sysroot self.sysroot(compiler) on the command-line (also after the clippy arg).</p>\n</blockquote>\n<p>This will conflict with clippy's sysroot, no? I set <code>SYSROOT</code> in my draft PR and that seemed to work</p>",
        "id": 211864182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601520918
    },
    {
        "content": "<p>You want to mess with clippy's sysroot.  I think the key factor is setting <code>-Zunstable-options</code>, so that clippy will only run for the std crates (and not build scripts).</p>",
        "id": 211864260,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601520994
    },
    {
        "content": "<p>I'll give it a shot!</p>",
        "id": 211864266,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521018
    },
    {
        "content": "<p>Here's the hack off latest master:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs</span>\n<span class=\"gh\">index 4aaaeb8a93b..70965fe8ec4 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/builder.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/builder.rs</span>\n<span class=\"gu\">@@ -781,6 +781,7 @@ impl&lt;'a&gt; Builder&lt;'a&gt; {</span>\n         }\n\n         cargo.env(\"CARGO_TARGET_DIR\", &amp;out_dir).arg(cmd);\n<span class=\"gi\">+        cargo.arg(\"-Zunstable-options\");</span>\n\n         let profile_var = |name: &amp;str| {\n             let profile = if self.config.rust_optimize { \"RELEASE\" } else { \"DEV\" };\n<span class=\"gu\">@@ -832,8 +833,9 @@ impl&lt;'a&gt; Builder&lt;'a&gt; {</span>\n                 cargo.args(s.split_whitespace());\n             }\n             rustflags.env(\"RUSTFLAGS_BOOTSTRAP\");\n<span class=\"gd\">-            rustflags.arg(\"--cfg=bootstrap\");</span>\n<span class=\"gi\">+            // rustflags.arg(\"--cfg=bootstrap\");</span>\n         }\n<span class=\"gi\">+        rustflags.arg(&amp;format!(\"--sysroot={}\", self.sysroot(compiler).display()));</span>\n\n         if self.config.rust_new_symbol_mangling {\n             rustflags.arg(\"-Zsymbol-mangling-version=v0\");\n<span class=\"gu\">@@ -955,7 +957,7 @@ impl&lt;'a&gt; Builder&lt;'a&gt; {</span>\n         // src/bootstrap/bin/{rustc.rs,rustdoc.rs}\n         cargo\n             .env(\"RUSTBUILD_NATIVE_DIR\", self.native_dir(target))\n<span class=\"gd\">-            .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))</span>\n<span class=\"gi\">+            // .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))</span>\n             .env(\"RUSTC_REAL\", self.rustc(compiler))\n             .env(\"RUSTC_STAGE\", stage.to_string())\n             .env(\"RUSTC_SYSROOT\", &amp;sysroot)\n</code></pre></div>",
        "id": 211864349,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601521105
    },
    {
        "content": "<p>Making that integrate cleanly is the challenge. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 211864363,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601521134
    },
    {
        "content": "<p>most of it should be pretty easy to do by modifying <code>fn args</code> I think</p>",
        "id": 211864381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521158
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/check.rs#L17\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/check.rs#L17</a></p>",
        "id": 211864392,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521178
    },
    {
        "content": "<p>and then only set <code>RUSTC</code> if this isn't clippy</p>",
        "id": 211864413,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521203
    },
    {
        "content": "<p>that seems doable</p>",
        "id": 211864442,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521206
    },
    {
        "content": "<p>ok I'm very confused how you got sysroot to work</p>",
        "id": 211867100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525001
    },
    {
        "content": "<p>here it is passed to <code>cargo clippy</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: Found argument &#39;--sysroot&#39; which wasn&#39;t expected, or isn&#39;t valid in this context\n</code></pre></div>\n\n\n<p>and passed to <code>clippy-driver</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: Option &#39;sysroot&#39; given more than once\n</code></pre></div>",
        "id": 211867109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525021
    },
    {
        "content": "<p>It should be passed in RUSTFLAGS.</p>",
        "id": 211867159,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601525057
    },
    {
        "content": "<p>oh I see</p>",
        "id": 211867165,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525070
    },
    {
        "content": "<p>ok, we're getting close I think:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0723]: function pointers in const fn are unstable\n   --&gt; library/core/src/task/wake.rs:136:9\n    |\n136 |         clone: unsafe fn(*const ()) -&gt; RawWaker,\n    |         ^^^^^\n    |\n    = note: see issue #57563 &lt;https://github.com/rust-lang/rust/issues/57563&gt; for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n</code></pre></div>\n\n\n<p>this is from:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs</span>\n<span class=\"gh\">index 58c96b2bcb3..3b9675f2ca5 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/builder.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/builder.rs</span>\n<span class=\"gu\">@@ -830,6 +830,11 @@ impl&lt;'a&gt; Builder&lt;'a&gt; {</span>\n                 cargo.args(s.split_whitespace());\n             }\n             rustflags.env(\"RUSTFLAGS_NOT_BOOTSTRAP\");\n<span class=\"gi\">+        } else if cmd == \"clippy\" {</span>\n<span class=\"gi\">+            rustflags.env(\"RUSTFLAGS\");</span>\n<span class=\"gi\">+            rustflags.arg(\"--sysroot\");</span>\n<span class=\"gi\">+            rustflags.arg(self.sysroot(compiler).as_os_str().to_str().expect(\"sysroo</span>\nt must be valid UTF-8\"));\n<span class=\"gi\">+            cargo.arg(\"-Zunstable-options\");</span>\n         } else {\n             if let Ok(s) = env::var(\"CARGOFLAGS_BOOTSTRAP\") {\n                 cargo.args(s.split_whitespace());\n<span class=\"gu\">@@ -958,7 +963,6 @@ impl&lt;'a&gt; Builder&lt;'a&gt; {</span>\n         // src/bootstrap/bin/{rustc.rs,rustdoc.rs}\n         cargo\n             .env(\"RUSTBUILD_NATIVE_DIR\", self.native_dir(target))\n<span class=\"gd\">-            .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))</span>\n             .env(\"RUSTC_REAL\", self.rustc(compiler))\n             .env(\"RUSTC_STAGE\", stage.to_string())\n             .env(\"RUSTC_SYSROOT\", &amp;sysroot)\n<span class=\"gu\">@@ -974,6 +978,9 @@ impl&lt;'a&gt; Builder&lt;'a&gt; {</span>\n             )\n             .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir())\n             .env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n<span class=\"gi\">+        if cmd != \"clippy\" {</span>\n<span class=\"gi\">+            cargo.env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"));</span>\n<span class=\"gi\">+        }</span>\n\n         // Dealing with rpath here is a little special, so let's go into some\n         // detail. First off, `-rpath` is a linker option on Unix platforms\n</code></pre></div>",
        "id": 211867423,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525510
    },
    {
        "content": "<p>let me try also removing the SYSROOT env var?</p>",
        "id": 211867492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525564
    },
    {
        "content": "<p>nope, didn't help</p>",
        "id": 211867525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525627
    },
    {
        "content": "<p>let me just add <code>feature(const_fn)</code> maybe</p>",
        "id": 211867565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525646
    },
    {
        "content": "<p>... it already has feature(const_fn)</p>",
        "id": 211867582,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525686
    },
    {
        "content": "<p>well that's strange</p>",
        "id": 211867585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525689
    },
    {
        "content": "<p>it does use <code>#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]</code> though</p>",
        "id": 211867608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525737
    },
    {
        "content": "<p>maybe it needs to be unconditional?</p>",
        "id": 211867612,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I think you missed the removal of <code>--cfg bootstrap</code></p>",
        "id": 211867668,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601525788
    },
    {
        "content": "<p><code>--cfg bootstrap</code> is in the <code>else</code></p>",
        "id": 211867683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525814
    },
    {
        "content": "<p>it does look like it's still getting set though</p>",
        "id": 211867689,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525819
    },
    {
        "content": "<p><code>x.py check</code> defaults to stage0, so the else clause is what gets used.  You don't want <code>--cfg bootstrap</code>, since you are using nightly</p>",
        "id": 211867717,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601525875
    },
    {
        "content": "<p>wait, I thought only clippy needed to remove <code>cfg=bootstrap</code>? and check still needs it?</p>",
        "id": 211867772,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525917
    },
    {
        "content": "<p>yea, clippy should not use <code>--cfg bootstrap</code> (because it is running the nightly clippy), but <code>x.py check</code> should use it because it is using stage0 (beta)</p>",
        "id": 211867797,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601525981
    },
    {
        "content": "<p>oh hold on, I'm setting RUSTFLAGS and not RUSTFLAGS_BOOTSTRAP</p>",
        "id": 211867798,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601525985
    },
    {
        "content": "<p>I think this feature gate might not be on beta?</p>",
        "id": 211867881,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526115
    },
    {
        "content": "<p><code>    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_fn_ptr_basics))]</code></p>",
        "id": 211867929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526126
    },
    {
        "content": "<p>I'm confused how you got this working :/</p>",
        "id": 211867950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526188
    },
    {
        "content": "<p>Hm, lemme see. That was added a couple days ago, which nightly are you running?</p>",
        "id": 211867961,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526221
    },
    {
        "content": "<p>oh I've been using beta</p>",
        "id": 211867967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526238
    },
    {
        "content": "<p>does this need to use nightly?</p>",
        "id": 211867969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526241
    },
    {
        "content": "<p>how would that work with bootstrap?</p>",
        "id": 211868008,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526255
    },
    {
        "content": "<p>Yea, it needs nightly.  AFAIK, bootstrap doesn't download clippy.</p>",
        "id": 211868029,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526314
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I just tried <code>x.py clippy</code> with unconditionally passing <code>--cfg bootstrap</code> and it worked</p>",
        "id": 211868039,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526357
    },
    {
        "content": "<p>even went on to run on rustc itself :)</p>",
        "id": 211868082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526367
    },
    {
        "content": "<p>Yea, that'll be an issue if you use nightly, though.  <code>--cfg bootstrap</code> should only be used with beta.</p>",
        "id": 211868110,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526429
    },
    {
        "content": "<p>(my default toolchain is nightly btw, so maybe that is important here)</p>",
        "id": 211868112,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526445
    },
    {
        "content": "<p>I would be surprised if the default toolchain had anything to do with it. Do you mean you changed <code>src/stage0.txt</code>?</p>",
        "id": 211868167,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526492
    },
    {
        "content": "<p>No, I use a rustup directory override.</p>",
        "id": 211868177,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526513
    },
    {
        "content": "<p>or is ignoring stage0.txt because I didn't set RUSTC?</p>",
        "id": 211868181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526516
    },
    {
        "content": "<p>This works because <code>x.py</code> is running <code>cargo clippy</code> which runs <code>~/.cargo/bin/cargo-clippy</code> which runs whatever rustup thinks it should run.</p>",
        "id": 211868188,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526536
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 211868196,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526543
    },
    {
        "content": "<p>something is off here then, because my default is also nightly on this machien</p>",
        "id": 211868223,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526585
    },
    {
        "content": "<p>let me try updating</p>",
        "id": 211868226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526593
    },
    {
        "content": "<p>ok yes that fixes the error</p>",
        "id": 211868296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526645
    },
    {
        "content": "<p>but I think it's safer to always pass <code>--cfg bootstrap</code> since that seems to make it work with both</p>",
        "id": 211868298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526658
    },
    {
        "content": "<p>can you try this locally and see if it make <code>x.py clippy</code> work? <a href=\"https://hastebin.com/oyozecapiy.php\">https://hastebin.com/oyozecapiy.php</a></p>",
        "id": 211868403,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526802
    },
    {
        "content": "<p>btw not setting RUSTC means there's no way for clippy to figure out the sysroot on its own</p>",
        "id": 211868478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526908
    },
    {
        "content": "<p>maybe not a big deal, this seems to be a hack in general</p>",
        "id": 211868486,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526917
    },
    {
        "content": "<p>I get this error with your patch:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --&gt; library/core/src/task/wake.rs:134:27\n    |\n134 |     #[cfg_attr(bootstrap, rustc_allow_const_fn_ptr)]\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 211868507,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526956
    },
    {
        "content": "<p><code>rustc 1.48.0-nightly (ef663a8a4 2020-09-30)</code></p>",
        "id": 211868550,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526968
    },
    {
        "content": "<p>hmm I get that too now, not sure what changed - it was working a second ago</p>",
        "id": 211868559,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601526978
    },
    {
        "content": "<p>on <a href=\"https://github.com/rust-lang/rust/commit/b218b952f800c1160b8b5e764ca651b02d678565\">b218b952f800c1160b8b5e764ca651b02d678565</a></p>",
        "id": 211868561,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601526985
    },
    {
        "content": "<p>I'm pretty sure <code>--cfg bootstrap</code> shouldn't be set if using nightly clippy.</p>",
        "id": 211868588,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601527024
    },
    {
        "content": "<p>ok, I'll remove it</p>",
        "id": 211868593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601527031
    },
    {
        "content": "<p>actually, could we set <code>--cfg bootstrap</code> depending on whether the <code>cargo-clippy</code> in PATH is beta or nightly?</p>",
        "id": 211868682,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601527160
    },
    {
        "content": "<p>unfortunately clippy's version scheme is ... odd ... but maybe we could rely on <code>rustc --version</code> or something</p>",
        "id": 211868690,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601527185
    },
    {
        "content": "<p>thank you so much for you help btw <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> I would never have gotten this far on my own</p>",
        "id": 211868788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601527286
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>   I'm not sure if the extra complexity in the bootstrap code is really warranted. I wouldn't really expect anyone to run these commands anyways, and if they do, it could be documented to use the latest nightly.</p>",
        "id": 211868791,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601527288
    },
    {
        "content": "<p>well, even with <code>--cfg=bootstrap</code> it breaks on beta so I'm giving up on that in the first draft</p>",
        "id": 211869520,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601528252
    },
    {
        "content": "<p>in general I think it would be nice to have though</p>",
        "id": 211869522,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601528261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> requested that I make this work with beta :/ I'm not sure why it breaks currently so I don't know how to fix it</p>",
        "id": 212898892,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602304886
    },
    {
        "content": "<p>the errors look like <code>error[E0658]: `#[doc(alias)]` is experimental</code></p>",
        "id": 212898896,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602304904
    },
    {
        "content": "<p>which is weird because <code>x.py check</code> doesn't give that error and x.py check is also using the beta toolchain</p>",
        "id": 212898940,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602304927
    },
    {
        "content": "<p>here is clippy on core: <a href=\"https://hastebin.com/uradefuxis.sql\">https://hastebin.com/uradefuxis.sql</a><br>\nand here is check: <a href=\"https://hastebin.com/aqutekafiy.sql\">https://hastebin.com/aqutekafiy.sql</a></p>",
        "id": 212898987,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602305057
    },
    {
        "content": "<p>... I mean, maybe the issue is that it's not going through <code>bin/rustc.rs</code>? I don't know why that would make a difference</p>",
        "id": 212898988,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602305087
    },
    {
        "content": "<p>ok, here is the <em>full</em> rustc path, <em>after</em> <a href=\"http://rustc.rs\">rustc.rs</a> spawns the real rustc <a href=\"https://hastebin.com/kirevalajo.bash\">https://hastebin.com/kirevalajo.bash</a></p>",
        "id": 212899094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602305387
    },
    {
        "content": "<p>hmm I think clippy is missing <code>-Z force-unstable-if-unmarked</code></p>",
        "id": 212899191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602305561
    },
    {
        "content": "<p>oh wait no it's there</p>",
        "id": 212899193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602305571
    },
    {
        "content": "<p>I'm very confused</p>",
        "id": 212899194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602305573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> any ideas?</p>",
        "id": 212899200,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602305593
    },
    {
        "content": "<p>... I was using 1.47 beta, not 1.48 beta <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 212899441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602306103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I think you figured it out?</p>",
        "id": 212914628,
        "sender_full_name": "simulacrum",
        "timestamp": 1602334455
    },
    {
        "content": "<p>I'm at \"it works but I don't know why\"</p>",
        "id": 212915665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602335951
    },
    {
        "content": "<p>So no help needed until it breaks <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212915668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602335967
    }
]