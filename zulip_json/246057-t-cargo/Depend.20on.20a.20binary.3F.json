[
    {
        "content": "<p>I think I've seen this question a few times, but I don't remember the answer. I want depend on an in-tree project which is built as a binary (not a library). Is there a way to tell cargo 'run cargo build in this directory before building my project and give me the path to the output binary'? Or do I need to call <code>cargo build --output-format json</code> each time?</p>",
        "id": 218229508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606682568
    },
    {
        "content": "<p>Cargo has no concept of a project depending on a binary. If you want to make that a thing, we would be up for having someone start work on an RFC. There are previous discussions we can dig up for you.</p>",
        "id": 218229776,
        "sender_full_name": "Eh2406",
        "timestamp": 1606682957
    },
    {
        "content": "<p>I would be happy to work on that :)</p>",
        "id": 218229840,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606683009
    },
    {
        "content": "<p>I have some time over winter break</p>",
        "id": 218229843,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606683017
    },
    {
        "content": "<p>naively, I'd expect something like this:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[dependencies]</span>\n<span class=\"n\">some_binary</span> <span class=\"o\">=</span> <span class=\"s\">\"1.0\"</span>\n</code></pre></div>\n<p>which tells cargo to</p>\n<ol>\n<li>run <code>cargo build</code> for that package</li>\n<li>set <code>CARGO_BIN_SOME_BINARY</code> to the path to the generated executable</li>\n</ol>",
        "id": 218229886,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606683120
    },
    {
        "content": "<p>I'm sure there's lots of edge cases that go along with that, but that's the main idea</p>",
        "id": 218229927,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606683136
    },
    {
        "content": "<p>That is what I remember us discussing! I remember that there where corner cases, like what if that package has more than one binary. And inflammation details, it would be nice if you could run that binary from the command line in that project, but there is not cross platform / cross terminal way to add things to the path based on the working directory. But that is was a really promising approach. I think it was <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> that was most excited about it.</p>",
        "id": 218230132,
        "sender_full_name": "Eh2406",
        "timestamp": 1606683455
    },
    {
        "content": "<blockquote>\n<p>what if that package has more than one binary</p>\n</blockquote>\n<p>error out and require the .toml file to specify which binary it means?</p>",
        "id": 218230189,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606683516
    },
    {
        "content": "<p>bikeshed: <code>some_binary = { version = \"1.0\", bin = \"x\" }</code></p>",
        "id": 218230202,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606683539
    },
    {
        "content": "<p>or if you want to avoid ambiguity between libraries and binaries, make <code>bin</code> unconditionally required</p>",
        "id": 218230215,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606683561
    },
    {
        "content": "<p>Right, all good options. Just complexity to think about.</p>",
        "id": 218230288,
        "sender_full_name": "Eh2406",
        "timestamp": 1606683629
    },
    {
        "content": "<p>Ideally, I'd have cargo supply the path to the directory containing all the built binaries.</p>",
        "id": 218230520,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606683962
    },
    {
        "content": "<p>Then you don't <em>have</em> to disambiguate.</p>",
        "id": 218230559,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606683975
    },
    {
        "content": "<p>And you can also put that directory into <code>$PATH</code> if you need to.</p>",
        "id": 218230561,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606683983
    },
    {
        "content": "<p>So, for instance, if you build a tool and then want to run a build system that will invoke that tool, you can.</p>",
        "id": 218230566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684001
    },
    {
        "content": "<p>We could, optionally, have a way to specify what subset of binaries you want (<code>bins = [\"a\", \"b\", ...]</code>), and then Cargo could just build those binaries and not the whole package.</p>",
        "id": 218230582,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684027
    },
    {
        "content": "<p>But that's not required.</p>",
        "id": 218230589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218230520\">said</a>:</p>\n<blockquote>\n<p>Ideally, I'd have cargo supply the path to the directory containing all the built binaries.</p>\n</blockquote>\n<p>that seems like it could lead to confusing errors if the project doesn't have the binary you expect</p>",
        "id": 218230590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684037
    },
    {
        "content": "<p>I think going for the most restrictive form and then loosening the requirements later would be a good approach</p>",
        "id": 218230603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I think they'd be rather straightforward errors, like \"file does not exist\". Or, worst case, \"couldn't find this binary in the path\" or similar.</p>",
        "id": 218230610,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684081
    },
    {
        "content": "<p>And I expect \"build all of this crate's binaries\" will be a not-uncommon case.</p>",
        "id": 218230658,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684100
    },
    {
        "content": "<p>I <em>do</em>, however, think we will need from the start a way to disambiguate between a library and binary crate with the same name.</p>",
        "id": 218230687,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684159
    },
    {
        "content": "<p>And if we have such a mechanism, we should probably always use it, because that way an older cargo will know \"hey, I don't know this, <em>splat</em>\".</p>",
        "id": 218230699,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684186
    },
    {
        "content": "<p>We should also have a mechanism for specifying the target, though that may be a challenge and we might not do it in the very first version of this feature.</p>",
        "id": 218230758,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684230
    },
    {
        "content": "<p>There's also the question of what type of dependency.</p>",
        "id": 218230786,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684298
    },
    {
        "content": "<p>You should be able to do this in <code>[build-dependencies]</code>, and you get an environment variable set for <code>build.rs</code> so you can find and use it.</p>",
        "id": 218230792,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684315
    },
    {
        "content": "<p>I thought build-dependencies are only available to the <code>build.rs</code> file?</p>",
        "id": 218230846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684374
    },
    {
        "content": "<p>for context, I want this so that rustdoc can run the <code>compiletest</code> binary in tests</p>",
        "id": 218230852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684389
    },
    {
        "content": "<p>I'm saying you should be able to have this in multiple kinds of dependencies.</p>",
        "id": 218230856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684412
    },
    {
        "content": "<p>If you depend on a binary in your <code>[build-dependencies]</code>, you would indeed only get to use it in <code>build.rs</code>, and also, it'd be built for the host.</p>",
        "id": 218230860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684429
    },
    {
        "content": "<p>ahhh because cargo needs to worry about cross-compiling, right</p>",
        "id": 218230906,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684465
    },
    {
        "content": "<p>Among other reasons, yeah.</p>",
        "id": 218230910,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684473
    },
    {
        "content": "<p>so for dev-dependencies it would be built for the target?</p>",
        "id": 218230911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684475
    },
    {
        "content": "<p>And for regular dependencies, yes.</p>",
        "id": 218230918,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684482
    },
    {
        "content": "<p>All of this could be overridden with a <code>target = \"...\"</code> directive in the dependency, but these would be the defaults.</p>",
        "id": 218230926,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684502
    },
    {
        "content": "<p>(so, you could also do things like \"I need xyz, built for <code>wasm32-wasi</code>\".)</p>",
        "id": 218230933,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684517
    },
    {
        "content": "<p><code>[build-dependencies]</code> seems like the easy case: build it for the host, hand <code>build.rs</code> a path to it via the environment, done.</p>",
        "id": 218230947,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684551
    },
    {
        "content": "<p>If you have a binary in your <code>[dependencies]</code> or <code>[dev-dependencies]</code>, we build it for the target. We could supply the path via an environment variable to rustc, and let you just do things like <code>include_bytes!(env!(...))</code>.</p>",
        "id": 218231024,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684628
    },
    {
        "content": "<p>wait, like include another binary in your binary? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218231036,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684663
    },
    {
        "content": "<p>that's <em>exciting</em></p>",
        "id": 218231037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684668
    },
    {
        "content": "<p>Yes, absolutely. Perhaps you're an installer, or perhaps you need a copy of a wasm binary at runtime...</p>",
        "id": 218231050,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684683
    },
    {
        "content": "<p>I guess it follows though, you don't need any more tools than the path to the binary</p>",
        "id": 218231084,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684698
    },
    {
        "content": "<p>This should, by the way, also work for things like <code>cdylib</code>.</p>",
        "id": 218231091,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684708
    },
    {
        "content": "<p>hmm? what do dynamic libraries have to do with this?</p>",
        "id": 218231097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684725
    },
    {
        "content": "<p>Perhaps you're a program that wants to run something using LD_PRELOAD. Or perhaps you're a kernel building the equivalent of the VDSO.</p>",
        "id": 218231101,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684741
    },
    {
        "content": "<p>You should be able to get the path to the .so or .dll you asked for.</p>",
        "id": 218231113,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684764
    },
    {
        "content": "<p>so your idea is that a package should be able to depend on <em>arbitrary</em> build artifacts from another package?</p>",
        "id": 218231124,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684801
    },
    {
        "content": "<p>(For that one, I think you <em>would</em> want to have an environment variable for the specific binary, not just the path.)</p>",
        "id": 218231125,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Not \"arbitrary\", but bin or cdylib or staticlib, yes.</p>",
        "id": 218231184,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684863
    },
    {
        "content": "<p>what makes those different from <code>dylib</code>?</p>",
        "id": 218231260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684953
    },
    {
        "content": "<p>They produce artifacts whose interface we define.</p>",
        "id": 218231273,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606684980
    },
    {
        "content": "<p>I guess my question is why you'd need the <em>path</em> to cydlib/staticlib dependencies instead of cargo providing them to the crate at build time</p>",
        "id": 218231280,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606684990
    },
    {
        "content": "<p>oh I guess you answered that already: <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218231101\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218231101</a></p>",
        "id": 218231285,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685011
    },
    {
        "content": "<p>dylib and rlib and proc-macro build things we don't define the interface to; we only say that you can use them with Rust, with no defined ABI.</p>",
        "id": 218231288,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685020
    },
    {
        "content": "<p>ok, I see - you should be able to get the path to anything with a stable ABI</p>",
        "id": 218231338,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685058
    },
    {
        "content": "<p>Exactly. We <em>might</em> want to expand that in the future, such as if you might be invoking rustc yourself somehow, but let's not do it from the start.</p>",
        "id": 218231349,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685079
    },
    {
        "content": "<p>cdylib builds a C-compatible shared library, staticlib builds a C-compatible static library, and bin builds a binary that can run on the target. All of those are reasonable to want the artifacts from.</p>",
        "id": 218231357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685095
    },
    {
        "content": "<p>Ideally at some point we also support having such crates supply arbitrary additional files, not just the compiled artifact; for instance, a bin might have an accompanying data file or shell script or similar. But that can come later, and it's broader than just dependencies.</p>",
        "id": 218231377,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685157
    },
    {
        "content": "<p>So let's keep it focused.</p>",
        "id": 218231378,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685161
    },
    {
        "content": "<p>originally I just wanted binaries :P</p>",
        "id": 218231424,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685191
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[build-dependencies]</span>\n<span class=\"n\">some-binary-crate</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"1.2.3\"</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"s\">\"bin\"</span> <span class=\"p\">}</span>\n<span class=\"n\">some-cdylib-crate</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"4.5.6\"</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"s\">\"cdylib\"</span> <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 218231429,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685208
    },
    {
        "content": "<p><em>Optionally</em> also <code>bins = [\"x\", \"y\", \"z\"]</code> on the binary crate.</p>",
        "id": 218231437,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685252
    },
    {
        "content": "<p>and have <code>type=\"lib\"</code> be a synonym for the current behavior, maybe</p>",
        "id": 218231440,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685264
    },
    {
        "content": "<p>Sure, no objection there.</p>",
        "id": 218231442,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685270
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 218231445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218231437\">said</a>:</p>\n<blockquote>\n<p><em>Optionally</em> also <code>bins = [\"x\", \"y\", \"z\"]</code> on the binary crate.</p>\n</blockquote>\n<p>I definitely think we should have this, there should least be <em>a</em> way to tell cargo not to build more than necessary</p>",
        "id": 218231484,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685290
    },
    {
        "content": "<p>I meant that it's optional in the toml.</p>",
        "id": 218231500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685301
    },
    {
        "content": "<p>(And also, that it's optional in the initial implementation.)</p>",
        "id": 218231503,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685310
    },
    {
        "content": "<p>You should be able to ask for \"everything\", or some subset. You shouldn't <em>have</em> to list a specific set of binaries.</p>",
        "id": 218231510,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685325
    },
    {
        "content": "<p>and this would behave ~the same as normal dependencies do, right? <code>dev-dependencies</code> would get the env variable set for tests/examples, <code>dependencies</code> would have it set for the main binary, <code>build-dependencies</code> would get it set for <a href=\"http://build.rs\">build.rs</a></p>",
        "id": 218231583,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685406
    },
    {
        "content": "<p>also, since we've expanded this to multiple types of artifacts, I think cargo should definitely set one env variable at a time, otherwise you'll get people trying to second-guess cargo's naming and possibly locking it into the current hash or something like that</p>",
        "id": 218231616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685469
    },
    {
        "content": "<p>With that in <code>build-dependencies</code>, you'd get <code>CARGO_BIN_DIR_SOME_BINARY_CRATE</code> in the environment in your <code>build.rs</code>, and <code>CARGO_CDYLIB_DIR_SOME_CDYLIB_CRATE</code>, and perhaps also <code>CARGO_BIN_FILE_SOME_BINARY_CRATE_x</code> for binary <code>x</code>, and <code>CARGO_CDYLIB_FILE_SOME_CDYLIB_CRATE_lib</code> (handwave on suffix, want to be forward-compatible with being able to build multiple cdylibs) pointing to <code>libsomething.so</code>.</p>",
        "id": 218231617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218231616\">said</a>:</p>\n<blockquote>\n<p>also, since we've expanded this to multiple types of artifacts, I think cargo should definitely set one env variable at a time, otherwise you'll get people trying to second-guess cargo's naming and possibly locking it into the current hash or something like that</p>\n</blockquote>\n<p>Good point, I forgot that cdylib doesn't build something with a stable name. :(</p>",
        "id": 218231643,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685502
    },
    {
        "content": "<blockquote>\n<p>want to be forward-compatible with being able to build multiple cdylibs</p>\n</blockquote>\n<p>I thought cdylibs were like libs in that you can only have one? is there another parallel RFC?</p>",
        "id": 218231648,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685508
    },
    {
        "content": "<p>\"forward-compatible\", as in \"this is another thing I hope we fix someday and until then I don't want to lock us into making it harder to fix it\".</p>",
        "id": 218231695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685534
    },
    {
        "content": "<p>It's fine if the environment variable is for the one cdylib built by a crate, as long as it's obvious where we could compatibly insert an additional token without a name clash.</p>",
        "id": 218231733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685605
    },
    {
        "content": "<p>Hang on, I just checked...</p>",
        "id": 218231787,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685692
    },
    {
        "content": "<p>If you build a <code>cdylib</code>, there's no hash in the name.</p>",
        "id": 218231790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685701
    },
    {
        "content": "<p>You just get <code>libcratename.so</code>.</p>",
        "id": 218231797,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685725
    },
    {
        "content": "<p>(or something else if you give it a different name, which I think you can do)</p>",
        "id": 218231800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685742
    },
    {
        "content": "<p>oh nice :) same for staticlibs?</p>",
        "id": 218231804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685753
    },
    {
        "content": "<p>Just confirmed that if you set <code>name = \"bar\"</code>, you get <code>libbar.so</code>.</p>",
        "id": 218231848,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685780
    },
    {
        "content": "<p>Checking...</p>",
        "id": 218231850,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685792
    },
    {
        "content": "<p>Yup, <code>libbar.a</code>.</p>",
        "id": 218231854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685807
    },
    {
        "content": "<p>ok, maybe it does make sense to only set the directory then</p>",
        "id": 218231861,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685820
    },
    {
        "content": "<p>that naturally allows adding multiple cdylibs, too</p>",
        "id": 218231868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685834
    },
    {
        "content": "<p>There <em>is</em> value in having both the dir and the file supplied for you.</p>",
        "id": 218231870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685839
    },
    {
        "content": "<p>Having only the dir means you have to know whether <code>bar</code> becomes <code>libbar.so</code> or <code>bar.dll</code> or <code>libbar.dylib</code>.</p>",
        "id": 218231884,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685880
    },
    {
        "content": "<p>Or in the case of a binary, whether it's <code>bar</code> or <code>bar.exe</code>.</p>",
        "id": 218231922,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685892
    },
    {
        "content": "<p>I feel pretty strongly we should only set one or the other</p>",
        "id": 218231935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685928
    },
    {
        "content": "<p>we can always add the other later if we really need to</p>",
        "id": 218231940,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685938
    },
    {
        "content": "<p>Why? I think there's useful value provided by both.</p>",
        "id": 218231945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685948
    },
    {
        "content": "<p>it's redundant information</p>",
        "id": 218231948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685957
    },
    {
        "content": "<p>you can get the directory from the binary and vice versa</p>",
        "id": 218231955,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606685970
    },
    {
        "content": "<p>I wouldn't object to setting only the directory, and then people will need a function (probably supplied by a crate) to map names.</p>",
        "id": 218231961,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606685990
    },
    {
        "content": "<blockquote>\n<p>probably supplied by a crate</p>\n</blockquote>\n<p>well, you can't use crates for <code>env!</code> macros, unless it were a proc-macro maybe</p>",
        "id": 218232027,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686033
    },
    {
        "content": "<p>but it would definitely make sense for build scripts and tests</p>",
        "id": 218232032,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686043
    },
    {
        "content": "<p>So, that brings us back to a different issue...</p>",
        "id": 218232034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686047
    },
    {
        "content": "<p>We might need a way to specify targets, as well as some aliases to let you say <code>target = \"host\"</code> or <code>target = \"target\"</code>.</p>",
        "id": 218232047,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686083
    },
    {
        "content": "<p>Suppose you want a binary built for the target, and you want to do things to it that you don't want to have to pull in via proc macro or handle via const eval.</p>",
        "id": 218232061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686113
    },
    {
        "content": "<p>these are pretty far-off in the future <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218232109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686134
    },
    {
        "content": "<p>/me shakes his head...</p>",
        "id": 218232112,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686142
    },
    {
        "content": "<p>maybe it makes sense to have the basic format and then we can add these later?</p>",
        "id": 218232116,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686144
    },
    {
        "content": "<p>There's a specific issue.</p>",
        "id": 218232118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686146
    },
    {
        "content": "<p>If you're pulling in a binary, if you want to do <em>anything</em> more complex with it than just embed it, you probably want to run Rust code to do that.</p>",
        "id": 218232127,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686178
    },
    {
        "content": "<p>The easiest place to do that is in <code>build.rs</code>.</p>",
        "id": 218232132,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686190
    },
    {
        "content": "<p>I can see two ways we could handle that.</p>",
        "id": 218232140,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686205
    },
    {
        "content": "<p>One would be to let you write it in <code>[dependencies]</code>, but then supply information about it to <code>build.rs</code>, like we do for <code>-sys</code> crates.</p>",
        "id": 218232145,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686224
    },
    {
        "content": "<p>That would mean we're building the <code>[dependencies]</code> even for <code>build.rs</code>, but we already support that in some cases I believe.</p>",
        "id": 218232190,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686246
    },
    {
        "content": "<p>you <em>do</em>?</p>",
        "id": 218232193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686249
    },
    {
        "content": "<p>that's really strange to me, I'd only expect <a href=\"http://build.rs\">build.rs</a> to see things in build-dependencies</p>",
        "id": 218232197,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686267
    },
    {
        "content": "<p>You can't actually use library crates from <code>[dependencies]</code> directly in your build script; you can't, for instance, <code>use foo::bar</code> if <code>foo</code> is in <code>[dependencies]</code>.</p>",
        "id": 218232210,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686303
    },
    {
        "content": "<p>But you <em>can</em> get information about them.</p>",
        "id": 218232211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686306
    },
    {
        "content": "<p>One moment...</p>",
        "id": 218232217,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686310
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/reference/build-script-examples.html?highlight=build.rs#using-another-sys-crate\">https://doc.rust-lang.org/cargo/reference/build-script-examples.html?highlight=build.rs#using-another-sys-crate</a></p>",
        "id": 218232223,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686336
    },
    {
        "content": "<p>Notice that <code>libz-sys</code> is in <code>[dependencies]</code>, but <code>build.rs</code> gets <code>DEP_Z_INCLUDE</code> set.</p>",
        "id": 218232231,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686355
    },
    {
        "content": "<p>oh boy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218232274,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686375
    },
    {
        "content": "<p>and the other alternative?</p>",
        "id": 218232277,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686378
    },
    {
        "content": "<p>The other alternative is that if you want a binary in your <a href=\"http://build.rs\">build.rs</a> script, but you want it built for the target rather than the host, you write:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[build-dependencies]</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"1.2.3\"</span><span class=\"p\">,</span> <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s\">\"bin\"</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s\">\"target\"</span> <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 218232304,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686438
    },
    {
        "content": "<p>I like that a lot better</p>",
        "id": 218232309,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686450
    },
    {
        "content": "<p>it seems less 'magic'</p>",
        "id": 218232314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686457
    },
    {
        "content": "<p><code>\"target\"</code> here isn't a placeholder, it's the way of specifying \"build for the target\" (as opposed to <code>target = \"host\"</code>, which would be the default for <code>[build-dependencies]</code> but not for <code>[dependencies]</code>).</p>",
        "id": 218232321,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686474
    },
    {
        "content": "<p>It's less magic, but also less consistent with how we handle <code>-sys</code> crates.</p>",
        "id": 218232368,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686507
    },
    {
        "content": "<p>I'm not sure why you see this as analogous to -sys crates</p>",
        "id": 218232386,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686536
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> , who is probably the most knowledgeable about the -sys crate handling.</p>",
        "id": 218232395,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Because that's the other case where we currently let you get access to artifacts built by one of your dependencies.</p>",
        "id": 218232399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686565
    },
    {
        "content": "<p>Including not just libraries, but header files or anything else you want.</p>",
        "id": 218232404,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686576
    },
    {
        "content": "<p>ahhh, ok</p>",
        "id": 218232407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686583
    },
    {
        "content": "<p>That's part of the motivation for wanting \"additional files\" eventually. You <em>should</em> be able, in a <code>cdylib</code>, to supply not just a <code>.so</code> but also a directory of header files.</p>",
        "id": 218232460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686617
    },
    {
        "content": "<p>this is a lot more ambitious than I was originally <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218232468,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686652
    },
    {
        "content": "<p>maybe you should write the RFC :P</p>",
        "id": 218232475,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686657
    },
    {
        "content": "<p>I don't mind deferring the vast majority of this; I'm primarily bringing it up for forward-compatibility.</p>",
        "id": 218232483,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686671
    },
    {
        "content": "<p>Maybe <em>we</em> could write the RFC? ;)</p>",
        "id": 218232486,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686679
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/WCKxm344QQ-FdS9srIxekvbe/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/WCKxm344QQ-FdS9srIxekvbe/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/WCKxm344QQ-FdS9srIxekvbe/image.png\"></a></div>",
        "id": 218232546,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686728
    },
    {
        "content": "<p>I think the <em>minimal</em> solution here just includes:</p>\n<ul>\n<li>The <code>type</code> field for dependencies, with support for <code>\"bin\"</code>, <code>\"cdylib\"</code>, <code>\"staticlib\"</code></li>\n<li>Allow this in <code>[build-dependencies]</code>, <code>[dev-dependencies]</code>, and <code>[dependencies]</code>. The first defaults to host, the second and third default to target.</li>\n<li>Define exactly which environment variables we export to which processes in each case, including the name transformations that happen to crate names (but not to binary names, I think; there's a recent RFC we can reference for that).</li>\n<li>Either define a mechanism like <code>DEP_...</code> to handle <code>[dependencies]</code> in <code>build.rs</code>, <em>or</em> define <code>target</code> (which we know we'll want eventually anyway).</li>\n</ul>",
        "id": 218232589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686837
    },
    {
        "content": "<p>Oh, also:</p>\n<ul>\n<li>Define whether cargo unifies the dependency tree with your dependencies (always, never, or give you the option?)</li>\n</ul>",
        "id": 218232643,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686881
    },
    {
        "content": "<p>I think the most minimal solution could even punt on <code>DEP_</code>/<code>target</code></p>",
        "id": 218232645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686889
    },
    {
        "content": "<p>and hard-code the defaults for now</p>",
        "id": 218232650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686900
    },
    {
        "content": "<p>I'd like to spec it, even if the initial implementation defers that.</p>",
        "id": 218232656,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686907
    },
    {
        "content": "<p>All of this would live behind a <code>-Z bindeps</code> or similar, for now, until stabilized.</p>",
        "id": 218232662,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606686933
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 218232666,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606686946
    },
    {
        "content": "<p>I think I did good by pinging Josh instead of trying to remember any of this :-P</p>",
        "id": 218232725,
        "sender_full_name": "Eh2406",
        "timestamp": 1606686994
    },
    {
        "content": "<p>For reference, previous places this was discussed:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/cargo/issues/4316\">https://github.com/rust-lang/cargo/issues/4316</a></li>\n<li><a href=\"https://github.com/rust-lang/cargo/pull/7804\">https://github.com/rust-lang/cargo/pull/7804</a></li>\n</ul>",
        "id": 218232731,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606687020
    },
    {
        "content": "<p>I personally do have a need for this, and would be very happy to see someone willing to work on it. I'm happy to help write the RFC.</p>",
        "id": 218232749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606687060
    },
    {
        "content": "<p>sure, I can help with that :)</p>",
        "id": 218232757,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687079
    },
    {
        "content": "<p>I'm more comfortable with implementation than with specs so it's a good fit :)</p>",
        "id": 218232799,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687092
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"319062\">@Nathaniel McCallum</span> as well, in case he'd started working on an RFC in this area.</p>",
        "id": 218232809,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606687113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Among other potential uses for this, imagine if the <code>cmake</code> crate had the option to <em>build</em> cmake from source for you, in case it wasn't installed.</p>",
        "id": 218232846,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606687198
    },
    {
        "content": "<p>Insert rejoicing of Windows users here.</p>",
        "id": 218232892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606687211
    },
    {
        "content": "<p>this is all much more impressive than my original use case of \"I don't want to have to define a stable API for compiletest\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218232900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687237
    },
    {
        "content": "<p>Could you start a hackmd containing the normal RFC template?</p>",
        "id": 218233706,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606688515
    },
    {
        "content": "<p>give me 5 minutes, yes</p>",
        "id": 218233745,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688543
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@jynelson/H1waJo-oD/edit\">https://hackmd.io/@jynelson/H1waJo-oD/edit</a></p>",
        "id": 218233827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688726
    },
    {
        "content": "<p>Oh, interesting! For that use case, would you want to depend on <em>yourself</em>?</p>",
        "id": 218233935,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606688898
    },
    {
        "content": "<p>right</p>",
        "id": 218233939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688908
    },
    {
        "content": "<p>or more accurately, dev-dependencies would depend on <code>bin</code></p>",
        "id": 218233942,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688918
    },
    {
        "content": "<p>Right.</p>",
        "id": 218233944,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606688923
    },
    {
        "content": "<p><code>dependencies</code> or <code>build-dependencies</code> probably couldn't do that.</p>",
        "id": 218233947,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606688942
    },
    {
        "content": "<p>(At least not without introducing a second copy into the dependency tree.)</p>",
        "id": 218233953,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606688959
    },
    {
        "content": "<p>wait until you see the next bullet ;)</p>",
        "id": 218233965,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688981
    },
    {
        "content": "<p>Moving the list to the reference section sounds good, but we should also give an example of depending on a cdylib.</p>",
        "id": 218234303,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689538
    },
    {
        "content": "<p>I'm trying to think of use cases for that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218234314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689575
    },
    {
        "content": "<p>maybe your LD_PRELOAD example</p>",
        "id": 218234318,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689591
    },
    {
        "content": "<p>We don't have to give the precise use case in the guide section; we can just show <code>include_bytes!</code>.</p>",
        "id": 218234362,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689611
    },
    {
        "content": "<p>Trying to figure out exactly what the environment variable names should be...</p>",
        "id": 218234381,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689686
    },
    {
        "content": "<p>oooh you could use this to bundle KLEE or LLVM</p>",
        "id": 218234407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689723
    },
    {
        "content": "<p>actually <code>clang-sys</code> would <em>love</em> this use case I bet</p>",
        "id": 218234435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689743
    },
    {
        "content": "<p>they get <em>so</em> many bug reports about system dependencies lol</p>",
        "id": 218234436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689757
    },
    {
        "content": "<p>I'm very much wondering if it'd be possible for rustc to supply, via the sysroot, <em>the</em> clang and LLVM it built with.</p>",
        "id": 218234440,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689772
    },
    {
        "content": "<p>build-depend on that and you get to do cross-language LTO reliably.</p>",
        "id": 218234444,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689788
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> was discussing that recently</p>",
        "id": 218234448,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689804
    },
    {
        "content": "<p>Several people have been for a while, yeah.</p>",
        "id": 218234451,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689817
    },
    {
        "content": "<p>This will make it much more usable though.</p>",
        "id": 218234452,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689823
    },
    {
        "content": "<p>hmm, I'm not sure what the RFC has to do with clang though - those are already not known to cargo because they're loaded from sysroot</p>",
        "id": 218234500,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689858
    },
    {
        "content": "<p>(does cargo set <code>SYSROOT</code> currently?)</p>",
        "id": 218234503,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689869
    },
    {
        "content": "<p>looks like no, all I found was <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html?highlight=sysroot#dynamic-library-paths\">https://doc.rust-lang.org/cargo/reference/environment-variables.html?highlight=sysroot#dynamic-library-paths</a></p>",
        "id": 218234515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606689903
    },
    {
        "content": "<p>I'm talking about the crates semi-magically supplied by rustc from the sysroot.</p>",
        "id": 218234526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689936
    },
    {
        "content": "<p>But you're right, cargo would have to be more aware of them.</p>",
        "id": 218234528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689942
    },
    {
        "content": "<p>(which would be good for many other reasons, too)</p>",
        "id": 218234529,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689948
    },
    {
        "content": "<p>One problem at a time. :)</p>",
        "id": 218234531,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606689951
    },
    {
        "content": "<p>What do you think of how the cmake example looks now?</p>",
        "id": 218234586,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690065
    },
    {
        "content": "<p>looks great :)</p>",
        "id": 218234637,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606690120
    },
    {
        "content": "<p>I will admit to being tempted to just add an environment variable <code>CARGO_BIN_PATH_CMAKE_cmake</code>.</p>",
        "id": 218234649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690176
    },
    {
        "content": "<p>And then that would include the <code>/cmake</code> or <code>\\cmake.exe</code>.</p>",
        "id": 218234653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690187
    },
    {
        "content": "<p>I think that would be great to have :)</p>",
        "id": 218234700,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606690214
    },
    {
        "content": "<p>Would you object strongly to having both that and <code>CARGO_BIN_DIR_CMAKE</code>?</p>",
        "id": 218234702,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690223
    },
    {
        "content": "<p>One potential downside of environment variables as they exist today is there is no way at build time to get OsStr env right now, btw, but that can be tackled separately if we start actively using this sort of thing.</p>",
        "id": 218234707,
        "sender_full_name": "simulacrum",
        "timestamp": 1606690244
    },
    {
        "content": "<p>is there a time that <code>DIR_PATH</code> <em>wouldn't</em> be <code>BIN_PATH</code> with the last component removed?</p>",
        "id": 218234708,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606690245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Probably not, but then you <em>have</em> to name a specific binary and extract the dirname from it.</p>",
        "id": 218234720,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690294
    },
    {
        "content": "<p>sure? I'm still a little unsure what the use case for the directory is</p>",
        "id": 218234723,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606690311
    },
    {
        "content": "<p>Add it to path and call <code>make</code>. :)</p>",
        "id": 218234725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690321
    },
    {
        "content": "<p>ahhhh</p>",
        "id": 218234764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606690330
    },
    {
        "content": "<p>And then that might go call <code>clang</code>, for which it needs to be on the <code>$PATH</code>.</p>",
        "id": 218234765,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690335
    },
    {
        "content": "<p>so there's an implicit assumption here that cargo puts all bins in the same directory</p>",
        "id": 218234773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606690364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218234707\">said</a>:</p>\n<blockquote>\n<p>One potential downside of environment variables as they exist today is there is no way at build time to get OsStr env right now, btw, but that can be tackled separately if we start actively using this sort of thing.</p>\n</blockquote>\n<p>Fair point. If you do builds in a directory that's not valid UTF-8 you're probably <em>already</em> encountering pain, but we shouldn't add to that.</p>",
        "id": 218234774,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690367
    },
    {
        "content": "<blockquote>\n<p>so there's an implicit assumption here that cargo puts all bins in the same directory</p>\n</blockquote>\n<p>do you plan for that to always be true?</p>",
        "id": 218234778,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606690378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> FWIW I would not worry about it for this RFC, it's already a problem as I said for RUSTC and CARGO set by Cargo today. I think the solution is probably var_os!() or something like that, similar to how we have std::env::var and std::env::var_os.</p>",
        "id": 218234788,
        "sender_full_name": "simulacrum",
        "timestamp": 1606690425
    },
    {
        "content": "<p>Good question. I <em>think</em> that if that were ever not the case, we'd then need to expand this mechanism, to allow for (say) a \"root directory\" in which you might find <code>bin/</code> and <code>include</code> and <code>lib</code> and similar. :)</p>",
        "id": 218234789,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <code>env_os!</code> presumably, but yeah, I agree.</p>",
        "id": 218234832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690446
    },
    {
        "content": "<p>ah, yeah</p>",
        "id": 218234833,
        "sender_full_name": "simulacrum",
        "timestamp": 1606690454
    },
    {
        "content": "<p>I added a note towards the bottom of the RFC to that effect.</p>",
        "id": 218234898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606690602
    },
    {
        "content": "<p>Here's an interesting twist...</p>",
        "id": 218235195,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691114
    },
    {
        "content": "<p>Can you depend on both the binary and library of a crate?</p>",
        "id": 218235197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691120
    },
    {
        "content": "<p><code>type = [\"bin\", \"lib\"]</code>?</p>",
        "id": 218235200,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691127
    },
    {
        "content": "<p>I would expect you to be able to</p>",
        "id": 218235205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606691138
    },
    {
        "content": "<p>the <code>rustc-perf</code> use case in particular would need both</p>",
        "id": 218235207,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606691151
    },
    {
        "content": "<p>since it runs the <code>rustc</code> shim but also uses the main <code>measureme</code> library</p>",
        "id": 218235253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606691174
    },
    {
        "content": "<p>so I guess we should change <code>type</code> to an array then?</p>",
        "id": 218235254,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606691184
    },
    {
        "content": "<p>Or do you need to write <code>foo-bin = { version = \"...\", type = \"bin\",  package = \"foo\" }</code> and <code>foo = { version = \"...\", type = \"lib\" }</code> ?</p>",
        "id": 218235258,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691198
    },
    {
        "content": "<p>Would that be easier or harder for Cargo?</p>",
        "id": 218235260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691208
    },
    {
        "content": "<p>I think <code>type</code> could still allow a string, even if it also allows an array of strings.</p>",
        "id": 218235265,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691233
    },
    {
        "content": "<p>I think either would be pretty clear personally, with a slight preference for <code>type = []</code> so you don't need to keep the versions in sync</p>",
        "id": 218235267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606691240
    },
    {
        "content": "<p>rustbuild and rustc-perf want binary dependencies, but since in both cases they're really self-deps the lib doesn't make sense</p>",
        "id": 218235272,
        "sender_full_name": "simulacrum",
        "timestamp": 1606691261
    },
    {
        "content": "<p>you can't self-depend on yourself literally :)</p>",
        "id": 218235273,
        "sender_full_name": "simulacrum",
        "timestamp": 1606691267
    },
    {
        "content": "<p>rustc-perf also has the measureme use case, but that's less clear cut: measureme does not bundle the binaries with the library as src/bin/foo.rs but rather they're just separate crates.</p>",
        "id": 218235319,
        "sender_full_name": "simulacrum",
        "timestamp": 1606691302
    },
    {
        "content": "<p>I added a note to the guide section.</p>",
        "id": 218235325,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691313
    },
    {
        "content": "<p>/me ponders the cdylib and staticlib cases.</p>",
        "id": 218235403,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691495
    },
    {
        "content": "<p>I'm trying to figure out if we can cover both cases (with and without <code>_&lt;ARTIFACT&gt;</code>) without having to duplicate the whole bullet.</p>",
        "id": 218235412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691517
    },
    {
        "content": "<p>Checking something...</p>",
        "id": 218235468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691570
    },
    {
        "content": "<p>Oh. Since you <em>can</em> change the name of the library you build, perhaps we don't need to special-case that.</p>",
        "id": 218235481,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691612
    },
    {
        "content": "<p>If you have a cdylib crate <code>foo</code> that builds a library with <code>name = \"bar\"</code> and thus an artifact <code>libbar.so</code>, I think we'd set <code>CARGO_CDYLIB_FILE_FOO_bar</code>.</p>",
        "id": 218235491,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691640
    },
    {
        "content": "<p>lowercase <code>bar</code>, right?</p>",
        "id": 218235560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606691726
    },
    {
        "content": "<p>Yes. Fixed.</p>",
        "id": 218235562,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606691737
    },
    {
        "content": "<blockquote>\n<p><code>type</code> may be a string, or a list of strings; in the latter case, this specifies a dependency on the crate with each of those types. For instance, you may specify a build dependency on both the binary and library of the same crate. You may also specify separate dependencies of different <code>type</code>s; for instance, you may have a build dependency on the binary of a crate and a dependency on the library of the same crate.</p>\n</blockquote>\n<p>Does that sound reasonable to you?</p>",
        "id": 218235925,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606692289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Regarding self-deps, does <code>CARGO_BIN_EXE_...</code> help there?</p>",
        "id": 218236360,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606692998
    },
    {
        "content": "<p>It would be enough, but it's not set for the library crate</p>",
        "id": 218236369,
        "sender_full_name": "simulacrum",
        "timestamp": 1606693043
    },
    {
        "content": "<p>Ah, got it.</p>",
        "id": 218236373,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693052
    },
    {
        "content": "<p>(or anything except tests I think?)</p>",
        "id": 218236374,
        "sender_full_name": "simulacrum",
        "timestamp": 1606693056
    },
    {
        "content": "<p>Can you clarify the use case there, then?</p>",
        "id": 218236377,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693073
    },
    {
        "content": "<p>What is depending on what artifact of what?</p>",
        "id": 218236378,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693080
    },
    {
        "content": "<p>There are two cases. The library crate wants to run the binary crate in one, and the other is that one binary crate wants to run another \"sibling\" binary crate</p>",
        "id": 218236458,
        "sender_full_name": "simulacrum",
        "timestamp": 1606693194
    },
    {
        "content": "<p>In the former case, how is that circular dependency resolved?</p>",
        "id": 218236540,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693297
    },
    {
        "content": "<p>It just needs the future path</p>",
        "id": 218236549,
        "sender_full_name": "simulacrum",
        "timestamp": 1606693319
    },
    {
        "content": "<p>I don't think this RFC could solve that without a substantially different model.</p>",
        "id": 218236593,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693338
    },
    {
        "content": "<p>But in any case it's possible for sibling crate to be the only requirement</p>",
        "id": 218236597,
        "sender_full_name": "simulacrum",
        "timestamp": 1606693344
    },
    {
        "content": "<p>Right now, the expectation is that when you're given the path, you can immediately run things with that path.</p>",
        "id": 218236598,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693353
    },
    {
        "content": "<p>Just more annoying since you need to thread the value down</p>",
        "id": 218236601,
        "sender_full_name": "simulacrum",
        "timestamp": 1606693358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Does this seem reasonable?</p>\n<blockquote>\n<p>Cargo will unify features across dependencies of all types.</p>\n</blockquote>",
        "id": 218236618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693417
    },
    {
        "content": "<p>It also is a little unfortunate that setting an env var like this wouldnt really work for distribution, no?</p>",
        "id": 218236621,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606693421
    },
    {
        "content": "<p>distribution is out of scope IMO</p>",
        "id": 218236630,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> You're talking about use cases like having a library available at runtime?</p>",
        "id": 218236668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693446
    },
    {
        "content": "<p>Or a binary, or similar?</p>",
        "id": 218236670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693451
    },
    {
        "content": "<p>if you want, you can <code>include_bytes!</code></p>",
        "id": 218236672,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693456
    },
    {
        "content": "<p>I'm talking about use cases outside of <code>cargo run</code></p>",
        "id": 218236678,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606693467
    },
    {
        "content": "<p>otherwise, cargo has no idea how the binary is getting to the end user</p>",
        "id": 218236681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693471
    },
    {
        "content": "<p>Right, but that means code using this feature would be fragile and won't support being used outside <code>cargo run</code> (unless something emulates what cargo does) which seems unfortunate.</p>",
        "id": 218236709,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606693505
    },
    {
        "content": "<p>right, you mean something like <a href=\"https://github.com/jyn514/saltwater/issues/388\">https://github.com/jyn514/saltwater/issues/388</a> I think</p>",
        "id": 218236714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693518
    },
    {
        "content": "<p>That's a different use case that this RFC just doesn't cover.</p>",
        "id": 218236717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693521
    },
    {
        "content": "<p>I don't see a solution to this, but it does seem like a problem.</p>",
        "id": 218236721,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606693526
    },
    {
        "content": "<p>It <em>absolutely</em> is a problem.</p>",
        "id": 218236728,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693545
    },
    {
        "content": "<p>It's just a very different problem, and if it's even possible for cargo to solve, the solution would look quite different.</p>",
        "id": 218236742,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693563
    },
    {
        "content": "<p>To be clear, the binary dep rustbuild and rustc-perf want are runtime deps - I think the solution here doesn't solve distribution, but it does solve cargo run working</p>",
        "id": 218236771,
        "sender_full_name": "simulacrum",
        "timestamp": 1606693565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218236618\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> Does this seem reasonable?</p>\n<blockquote>\n<p>Cargo will unify features across dependencies of all types.</p>\n</blockquote>\n</blockquote>\n<p>yeah, that seems fine</p>",
        "id": 218236775,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693575
    },
    {
        "content": "<p>or at least, no worse than the current situation for libraries</p>",
        "id": 218236782,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I can imagine, in the future, a <code>unify = false</code> attribute or similar, that would let you say \"it's just a binary, I <em>don't care</em> what it wants, isolate it\".</p>",
        "id": 218236800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693631
    },
    {
        "content": "<p>But that could happen later.</p>",
        "id": 218236805,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693639
    },
    {
        "content": "<p>that would cause rebuilds, right? since the library is built once with and once without the feature?</p>",
        "id": 218236813,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693658
    },
    {
        "content": "<p>in general I think features in cargo could use some work :/</p>",
        "id": 218236823,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693675
    },
    {
        "content": "<p>Only if you had some other dependency on it.</p>",
        "id": 218236827,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218236823\">said</a>:</p>\n<blockquote>\n<p>in general I think features in cargo could use some work :/</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 218236866,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693687
    },
    {
        "content": "<p>last comment (or I'll split the thread if it goes further :P) - unifying features leads to hidden dependencies: <a href=\"https://github.com/rust-lang/rustwide/pull/49#issuecomment-725853534\">https://github.com/rust-lang/rustwide/pull/49#issuecomment-725853534</a></p>",
        "id": 218236894,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606693739
    },
    {
        "content": "<p>Yeah, that's a very real possibility.</p>",
        "id": 218236906,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693772
    },
    {
        "content": "<p>On the other hand, unifying by default means you could do things like build a library and its helper binary, use the helper binary to build a data structure, <code>include_bytes!</code> that data structure, and use the library to parse that data structure at runtime.</p>",
        "id": 218236932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693803
    },
    {
        "content": "<p>And know that the library and binary will match.</p>",
        "id": 218236972,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606693831
    },
    {
        "content": "<blockquote>\n<p>unifying features leads to hidden dependencies:</p>\n</blockquote>\n<p>cc <a href=\"https://github.com/rust-lang/rfcs/pull/2957\">https://github.com/rust-lang/rfcs/pull/2957</a></p>",
        "id": 218237059,
        "sender_full_name": "Eh2406",
        "timestamp": 1606694038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> that seems nice, but doesn't help the use case I linked</p>",
        "id": 218237121,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606694097
    },
    {
        "content": "<p>it's <em>only</em> for target-specific features</p>",
        "id": 218237124,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606694102
    },
    {
        "content": "<p>when you know you definitely don't need it</p>",
        "id": 218237128,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606694110
    },
    {
        "content": "<p>this is 'rustwide needed the dependency, but didn't know it needed it'</p>",
        "id": 218237132,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606694119
    },
    {
        "content": "<p>also Josh, your checkmark/opinion on that RFC would be appreciated.</p>",
        "id": 218237138,
        "sender_full_name": "Eh2406",
        "timestamp": 1606694154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> Ah, thanks for the reminder. Will review after finishing this draft.</p>",
        "id": 218237178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606694177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Yes it is not everything but it is a big step forward.</p>",
        "id": 218237201,
        "sender_full_name": "Eh2406",
        "timestamp": 1606694241
    },
    {
        "content": "<p>Right, I didn't mean to belittle your efforts, sorry. It does look like a really nice improvement :) maybe it will finally get crates to stop building winapi on Linux lol</p>",
        "id": 218237250,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606694300
    },
    {
        "content": "<p>Or requiring Fuchsia libraries on non-Fuchsia platforms.</p>",
        "id": 218237262,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606694359
    },
    {
        "content": "<p>cc <a href=\"https://github.com/retep998/winapi-rs/pull/949\">https://github.com/retep998/winapi-rs/pull/949</a></p>",
        "id": 218237421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606694531
    },
    {
        "content": "<p>Other use cases, BTW, would include building a binary for an enclave, such as SGX. Or boot firmware for a virtual machine.</p>",
        "id": 218237445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606694585
    },
    {
        "content": "<p>Honestly it is Eric's handiwork. So all credit goes to him. It also paves a trail for how un-unifly things if there are more categories that need that treatment.</p>",
        "id": 218237530,
        "sender_full_name": "Eh2406",
        "timestamp": 1606694700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> Makes sense. So, if we wanted to have an opt-out for unification with artifact dependencies, that same mechanism would help with that?</p>",
        "id": 218237599,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606694771
    },
    {
        "content": "<p>I think so, but <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> would know better. I more ment that if it is a small impact braking change we have a <code>resolver = \"3\"</code> as a tool.</p>",
        "id": 218237722,
        "sender_full_name": "Eh2406",
        "timestamp": 1606695003
    },
    {
        "content": "<blockquote>\n<p>You can obtain the directory containing all binaries built by the cmake crate with CARGO_BIN_PATH_CMAKE, such as to add it to $PATH before invoking another build system or a script.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> did you mean <code>CARGO_DIR_PATH_CMAKE</code>?</p>",
        "id": 218237829,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695158
    },
    {
        "content": "<p>No, though we could certainly change the name.</p>",
        "id": 218237842,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695185
    },
    {
        "content": "<p><code>CARGO_&lt;TARGET&gt;_PATH_&lt;CRATE&gt;</code>.</p>",
        "id": 218237843,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695191
    },
    {
        "content": "<p>hmm, so how do you tell the directory apart from the binary itself?</p>",
        "id": 218237847,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695209
    },
    {
        "content": "<p>I guess binaries have a <code>_&lt;bin&gt;</code> suffix</p>",
        "id": 218237852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695220
    },
    {
        "content": "<p>I thought that's not true of the other artifacts though?</p>",
        "id": 218237856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695233
    },
    {
        "content": "<p>The individual files are <code>CARGO_&lt;TARGET&gt;_FILE_&lt;CRATE&gt;</code>.</p>",
        "id": 218237857,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695234
    },
    {
        "content": "<p>(Also, typo, I meant <code>DIR</code> rather than <code>PATH</code>.)</p>",
        "id": 218237900,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695249
    },
    {
        "content": "<p>ah ok, I missed that it's <code>DIR</code> as the 3rd component</p>",
        "id": 218237902,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695250
    },
    {
        "content": "<p>It can definitely help if we need to have some way for <code>features</code> to not unificatify, If we want to go further and allow <code>foo=1.0.1</code> to be in the tree of the project and <code>foo=1.0.3</code> to in the tree of the binary, then we will need to do something more radical.</p>",
        "id": 218237914,
        "sender_full_name": "Eh2406",
        "timestamp": 1606695290
    },
    {
        "content": "<p>Changed it to consistently use <code>CARGO_&lt;TARGET&gt;_DIR_&lt;CRATE&gt;</code> everywhere for the directory, and <code>CARGO_&lt;TARGET&gt;_FILE_&lt;CRATE&gt;_&lt;ARTIFACT&gt;</code> for the files.</p>",
        "id": 218237919,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695304
    },
    {
        "content": "<blockquote>\n<p>Note that cargo cannot help you ensure these artifacts are available at runtime for your binary; cargo can only supply these artifacts at build time.</p>\n</blockquote>\n<p>Should this instead say 'artifacts at runtime aren't in scope for the RFC'? Right now it sounds like it's saying it will <em>never</em> be in scope</p>",
        "id": 218237933,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695333
    },
    {
        "content": "<p>I remember avoiding <code>_PATH_</code> because it's ambiguous; I meant it like <code>$PATH</code>, but both files and directories have paths.</p>",
        "id": 218237935,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218237933\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Note that cargo cannot help you ensure these artifacts are available at runtime for your binary; cargo can only supply these artifacts at build time.</p>\n</blockquote>\n<p>Should this instead say 'artifacts at runtime aren't in scope for the RFC'? Right now it sounds like it's saying it will <em>never</em> be in scope</p>\n</blockquote>\n<p>I didn't intend it to sound like \"never\", but I strongly suspect \"never\" is the answer so I can imagine some of that showed through. ;)</p>",
        "id": 218237984,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695372
    },
    {
        "content": "<p>I'll modify that.</p>",
        "id": 218237990,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695376
    },
    {
        "content": "<p>(Note that it's guide-level documentation for a feature, though, so \"what's possible in the future\" is not technically in scope for the documentation.)</p>",
        "id": 218238004,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695410
    },
    {
        "content": "<p>oh that's funny, I thought you were in favor of <a href=\"https://github.com/rust-lang/cargo/issues/2729\">https://github.com/rust-lang/cargo/issues/2729</a></p>",
        "id": 218238008,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695423
    },
    {
        "content": "<p>I'm completely in favor of that and similar proposals, but those are only for the case where Cargo is responsible for doing the installation.</p>",
        "id": 218238022,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218238004\">said</a>:</p>\n<blockquote>\n<p>(Note that it's guide-level documentation for a feature, though, so \"what's possible in the future\" is not technically in scope for the documentation.)</p>\n</blockquote>\n<p>right, it's not definitive for sure, but best to avoid giving the impression that it is</p>",
        "id": 218238026,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695461
    },
    {
        "content": "<p>ahhh I see, <em>only</em> for the <code>cargo install</code> use case and nothing else</p>",
        "id": 218238035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695476
    },
    {
        "content": "<p>Cargo can't <em>ensure</em> the artifacts are available. It could install them, but then they might still not be available if (say) someone removes them, or a packager doesn't install them.</p>",
        "id": 218238044,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695482
    },
    {
        "content": "<p>yeah that seems reasonable</p>",
        "id": 218238082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695487
    },
    {
        "content": "<p>Or if they're split into a different distro package that isn't installed...</p>",
        "id": 218238086,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695490
    },
    {
        "content": "<blockquote>\n<ol start=\"2\">\n<li><code>\"bin\"</code>, a binary crate (and all the binaries it builds, by default)</li>\n</ol>\n</blockquote>\n<p>hmm, this seems confusing but I'm not sure how to reword it</p>",
        "id": 218238129,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695576
    },
    {
        "content": "<p>maybe 'a package with at least one binary'?</p>",
        "id": 218238131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695586
    },
    {
        "content": "<p>How's that?</p>",
        "id": 218238197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695652
    },
    {
        "content": "<p>much less confusing, although I do think 'package' is less ambiguous than 'crate'. but maybe people are more familiar with 'crate'?</p>",
        "id": 218238210,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695677
    },
    {
        "content": "<p>People are <em>much</em> more familiar with \"crate\" I think.</p>",
        "id": 218238221,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695693
    },
    {
        "content": "<p>And I don't think in this case the distinction causes an issue.</p>",
        "id": 218238228,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218238221\">said</a>:</p>\n<blockquote>\n<p>People are <em>much</em> more familiar with \"crate\" I think.</p>\n</blockquote>\n<p>I have proof of this actually - someone was planning to split a package into workspaces because they didn't realize they could have multiple binaries <a href=\"https://github.com/deadlinks/cargo-deadlinks/issues/47#issuecomment-475566521\">https://github.com/deadlinks/cargo-deadlinks/issues/47#issuecomment-475566521</a></p>",
        "id": 218238285,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695787
    },
    {
        "content": "<p>There's one other thing that I think needs to be specified, and I'm really not looking forward to it...</p>",
        "id": 218238288,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695803
    },
    {
        "content": "<p>We need to specify how this interacts with the index.</p>",
        "id": 218238293,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695812
    },
    {
        "content": "<p>If we just include the <code>type</code> field in the index, would old versions of cargo choke and die on that?</p>",
        "id": 218238340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695848
    },
    {
        "content": "<p>is there no way to add new metadata to the index without breaking old cargo versions?</p>",
        "id": 218238346,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695867
    },
    {
        "content": "<p>Very, <em>very</em> carefully.</p>",
        "id": 218238348,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695874
    },
    {
        "content": "<p>Obviously, old <code>cargo</code> would break if the dependency pulls in a newer crate that uses this feature (which is what it should do), but the question then becomes, would old <code>cargo</code> choke if it pulls in an existing crate for which later versions use this feature?</p>",
        "id": 218238360,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695931
    },
    {
        "content": "<p>because all the versions are stored in the same file in the index?</p>",
        "id": 218238406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695967
    },
    {
        "content": "<p>Right.</p>",
        "id": 218238408,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695971
    },
    {
        "content": "<p>(Which is probably the first thing we should fix if we ever rev the index format.)</p>",
        "id": 218238410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606695983
    },
    {
        "content": "<p>Question:<br>\nlet's say I have a dependency like <code>foo= { version = \"&lt;3.0.0\", type = \"bin\" }</code>but the binary was only in <code>&lt;1.0.0</code>. Does the resolver have to bactrack until it finds a version that has a \"bin\" or can it give you the most recent version and let the build fail latter? This may be the question that Josh just came up with...</p>",
        "id": 218238425,
        "sender_full_name": "Eh2406",
        "timestamp": 1606696075
    },
    {
        "content": "<p>I would expect that to let the build fail</p>",
        "id": 218238472,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696104
    },
    {
        "content": "<p>That isn't quite the same question, and I'd be happy with the simpler answer: resolve versions without regard to type, then if the type isn't available, die.</p>",
        "id": 218238474,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696110
    },
    {
        "content": "<p>that also avoids confusion where you suddenly bump a major version because the new version now supports <code>\"bin\"</code></p>",
        "id": 218238483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696138
    },
    {
        "content": "<p>Removing a type is a semver-incompatible change. Adding one is backwards-compatible.</p>",
        "id": 218238485,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696143
    },
    {
        "content": "<p>(although I guess the answer to that is \"don't say you support versions you don't\")</p>",
        "id": 218238495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696170
    },
    {
        "content": "<blockquote>\n<p>Note that &lt;ARTIFACT&gt; is not modified in any way from the name specified in the crate supplying the artifact, or the crate name if not specified; for instance, it may be in lowercase, or contain dashes.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> doesn't that mean it might not be a valid shell variable?</p>",
        "id": 218238539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696207
    },
    {
        "content": "<p>If your binary has a weird name, it might not be, yes.</p>",
        "id": 218238550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$  export X-Y=1\nbash: export: `X-Y=1&#39;: not a valid identifier\n</code></pre></div>",
        "id": 218238552,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696258
    },
    {
        "content": "<p>We already had this same issue arise with <code>CARGO_BIN_EXE_&lt;name&gt;</code>.</p>",
        "id": 218238570,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696297
    },
    {
        "content": "<p>well, then how can cargo set it as an env variable?</p>",
        "id": 218238571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696297
    },
    {
        "content": "<p>oh I see, there's precedent</p>",
        "id": 218238573,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696303
    },
    {
        "content": "<p>that's unfortunate</p>",
        "id": 218238575,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696306
    },
    {
        "content": "<blockquote>\n<p><code>CARGO_BIN_EXE_&lt;name&gt;</code> — The absolute path to a binary target's executable. This is only set when building an integration test or benchmark. This may be used with the env macro to find the executable to run for testing purposes. The &lt;name&gt; is the name of the binary target, exactly as-is. For example, CARGO_BIN_EXE_my-program for a binary named my-program.</p>\n</blockquote>",
        "id": 218238576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696314
    },
    {
        "content": "<p>The shell's limitations are not UNIX limitations.</p>",
        "id": 218238614,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696326
    },
    {
        "content": "<p>The only requirement for an environment variable name is \"does not contain NUL or <code>=</code>\".</p>",
        "id": 218238616,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696341
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 218238619,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696348
    },
    {
        "content": "<p>TIL</p>",
        "id": 218238621,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696355
    },
    {
        "content": "<p>So if the resolver does not need to know, then the index only needs to record the new kind of dependency. Witch should make old Cargos ignore the version, as we want.</p>",
        "id": 218238625,
        "sender_full_name": "Eh2406",
        "timestamp": 1606696373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span></p>\n<div class=\"codehilite\"><pre><span></span><code>$ env -i &#39;foo bar-baz=value&#39; env\nfoo bar-baz=value\n</code></pre></div>",
        "id": 218238651,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ env -i &#39;/a/b/c=value&#39; env\n/a/b/c=value\n</code></pre></div>",
        "id": 218238692,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696448
    },
    {
        "content": "<p>TIL you can call env recursively <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218238696,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696465
    },
    {
        "content": "<p>And just to show it works with other things:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ env -i &#39;a-b c=value&#39; python3 -c &#39;import os;print(os.getenv(&quot;a-b c&quot;))&#39;\nvalue\n</code></pre></div>",
        "id": 218238718,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696543
    },
    {
        "content": "<p>It seems reasonable to canonicalize crate names, because we place more requirements on those.</p>",
        "id": 218238788,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696652
    },
    {
        "content": "<p>Though if we start allowing <code>a/b</code> as a crate name (cc <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>) then we'll need a mapping scheme for the corresponding cargo environment variables.</p>",
        "id": 218238840,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Depend.20on.20a.20binary.3F/near/218238625\">said</a>:</p>\n<blockquote>\n<p>So if the resolver does not need to know, then the index only needs to record the new kind of dependency. Witch should make old Cargos ignore the version, as we want.</p>\n</blockquote>\n<p>Can you elaborate on that a bit?</p>",
        "id": 218239036,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606696993
    },
    {
        "content": "<p>If we add the <code>type</code> field to a dependency, what makes older Cargo ignore that rather than dying?</p>",
        "id": 218239043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606697025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> To answer the question you posed in a comment, I think <code>setup.py</code> isn't a great example (would be better if this came up in its notion of dependencies), but I think <code>make</code> is.</p>",
        "id": 218239187,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606697243
    },
    {
        "content": "<p>right, because setup.py doesn't deal with binaries at all</p>",
        "id": 218239231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606697290
    },
    {
        "content": "<p>makes sense</p>",
        "id": 218239232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606697291
    },
    {
        "content": "<p>I need to get going for a little while, but I'd be up for continuing this later, and hopefully posting this this week.</p>",
        "id": 218239246,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606697338
    },
    {
        "content": "<p>Cargo ignores things in the index that it doesn't understand. Depending on how we encode it:<br>\nIf we add a field to a dependency, it will read the row and treat the dependay like a normal one, so it won't fail in the resolver.<br>\nIf we add a new kind of dependency, it will realize that it has no idea what new cargo is talking about and skipp the entire version.</p>",
        "id": 218239259,
        "sender_full_name": "Eh2406",
        "timestamp": 1606697390
    },
    {
        "content": "<p>did we ever decide if this would be available to build scripts when listed in <code>[dependencies]</code>?</p>",
        "id": 218239274,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606697403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> Interesting. That's helpful.</p>",
        "id": 218239316,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606697441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I think we went the <code>target</code> route and decided on \"no\". If we want it to be, we'd need to spec how that works, more in the style of the <code>DEP_...</code> environment variables.</p>",
        "id": 218239351,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606697484
    },
    {
        "content": "<p>The spec text I wrote for what bits of the build system have it available doesn't currently allow the build script to access these environment variables for anything other than <code>[build-dependencies]</code>.</p>",
        "id": 218239365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606697513
    },
    {
        "content": "<p>I'm not sure if I misunderstood, but the rustc-perf and rustbuild use cases require runtime availability of the binary dependencies, though neither needs anything more than the filepath being provided (and it is fine for things to break when the crate is cargo installed)</p>",
        "id": 218239637,
        "sender_full_name": "simulacrum",
        "timestamp": 1606697942
    },
    {
        "content": "<p>I think by 'runtime' <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> meant 'after being installed'</p>",
        "id": 218239710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606698044
    },
    {
        "content": "<p>so if the paths are the same at build time and runtime it should be fine</p>",
        "id": 218239714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606698056
    },
    {
        "content": "<p>Ok, I think I would designate installation as a third category and I agree it is a separate and out of scope use case.</p>",
        "id": 218239793,
        "sender_full_name": "simulacrum",
        "timestamp": 1606698187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> That sounds reasonable to me. I've updated that line of the RFC to clarify.</p>",
        "id": 218244801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606706467
    },
    {
        "content": "<p>I added the following note, on the basis that I can't think of <em>any</em> use cases for a <code>[dependencies]</code> entry with <code>target = \"host\"</code>:</p>\n<blockquote>\n<p>We could specify a <code>target = \"host\"</code> value to build for the host even for <code>[dependencies]</code> or <code>[dev-dependencies]</code> which would normally default to the target. If any use case arises for such a dependency, we can easily add that.</p>\n</blockquote>",
        "id": 218245668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606707628
    },
    {
        "content": "<p>In theory you could be using a proc-macro to process the binary, and that proc macro could run the binary. But at that point, why not just use a build dependency?</p>",
        "id": 218245705,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606707679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I think this may be done and ready to submit. Thoughts?</p>",
        "id": 218248944,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606712121
    },
    {
        "content": "<p>I just finished one last editing pass.</p>",
        "id": 218248947,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606712127
    },
    {
        "content": "<p>I'll take a glance tomorrow but my last impression was that it looked good :)</p>",
        "id": 218249526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606713092
    },
    {
        "content": "<p>If you review and decide you don't think it needs further changes, go ahead and push. If you do so by Tuesday, the Cargo team can discuss it in the next meeting.</p>",
        "id": 218250051,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606713913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> looks great, opening a PR now</p>",
        "id": 218359512,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606777774
    },
    {
        "content": "<p>can you add a <code>cargo</code> label? <a href=\"https://github.com/rust-lang/rfcs/pull/3028\">https://github.com/rust-lang/rfcs/pull/3028</a></p>",
        "id": 218359895,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606778051
    },
    {
        "content": "<p>Done, and nominated for tomorrow's meeting.</p>",
        "id": 218386108,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606805912
    }
]