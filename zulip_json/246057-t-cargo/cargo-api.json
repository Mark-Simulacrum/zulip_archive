[
    {
        "content": "<p>Writing &lt;<a href=\"https://github.com/rust-lang/cargo/pull/10414\">https://github.com/rust-lang/cargo/pull/10414</a>&gt; got me thinking â€” is there an at-all-reasonable path towards finding a _stable_ library API for Cargo? It'd obviously be a _lot_ of work, and we may need an escape hatch (something like an <code>unstable</code> sub-module with all the things that haven't been polished yet), but I'm wondering whether the Cargo team thinks it may even be feasible at all?</p>",
        "id": 273278409,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1645819628
    },
    {
        "content": "<p>Brought this up before.  imo part of this would be breaking things out into smaller libraries but because the cargo repo doesn't have a workspace, relying on the rust workspace, it makes scaling to multiple crates more costly.</p>",
        "id": 273278655,
        "sender_full_name": "Ed Page",
        "timestamp": 1645819785
    },
    {
        "content": "<p>Theres also downsides to using cargo directly (locked into a specific manifest parser version vs calling cargo-metadata).  Seems like the better short term route is to expose programmatic cargo commands.</p>",
        "id": 273278738,
        "sender_full_name": "Ed Page",
        "timestamp": 1645819826
    },
    {
        "content": "<p>My past thread on this<br>\n<a href=\"#narrow/stream/246057-t-cargo/topic/Towards.20a.20modular.20.60cargo.60.20crate\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/Towards.20a.20modular.20.60cargo.60.20crate</a></p>",
        "id": 273278775,
        "sender_full_name": "Ed Page",
        "timestamp": 1645819856
    },
    {
        "content": "<p>Ah, yet more proof why nested workspaces would be great :p</p>",
        "id": 273280429,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1645820828
    },
    {
        "content": "<p>Why, are you offering to work on it?</p>",
        "id": 273282046,
        "sender_full_name": "Eh2406",
        "timestamp": 1645821528
    },
    {
        "content": "<p>For my own edification, why is cargo a submodule of and a workspace member of rust rather than being a git dependency or being standalone? Not yet seen those parts of the process.</p>",
        "id": 273283539,
        "sender_full_name": "Ed Page",
        "timestamp": 1645822333
    },
    {
        "content": "<ol>\n<li>git dependencies don't work for binaries</li>\n<li>git dependencies don't allow running tests</li>\n<li>rust can't have git dependencies as all dependencies need to be vendored for the source tarball to be able to compile offline. this doesn't work for git dependencies. (there is a single git dependency at the moment due to cg_clif, but cg_clif is currently only built when using x.py check, not x.py build. still it is something that should be fixed. i'm currently working on this.)</li>\n</ol>",
        "id": 273284313,
        "sender_full_name": "bjorn3",
        "timestamp": 1645822790
    },
    {
        "content": "<p>in terms of not being standalone (i.e., submodule but with its own lockfile) -- we want to unify versions with RLS (and clippy?) which depend on cargo to avoid extra CI time. (At least this is my recollection).</p>",
        "id": 273284699,
        "sender_full_name": "simulacrum",
        "timestamp": 1645823016
    },
    {
        "content": "<p>It also not just the nested workspaces, although that is a big part.  If there are more packages, that also means more management in terms of reviewing for breaking API changes and more complicated version bumps.</p>\n<p>My opinion is that it is preferable to use the CLI if at all possible. Using cargo as a library is often going to be a bad experience for users and developers.  If the CLI is not providing the information needed, then it would be good to discuss exposing what is needed.</p>",
        "id": 273287726,
        "sender_full_name": "Eric Huss",
        "timestamp": 1645824952
    },
    {
        "content": "<p>Yeah, my use-case is probably particularly weird, in that I need to do things like _just_ run the resolver without doing any network downloads to construct a local registry on-the-fly. I'm hoping to make it less weird to the point where I can just lightly wrap the CLI, but it's a bit of a journey to get there.</p>",
        "id": 273290401,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1645826485
    },
    {
        "content": "<p>Note that the pubgrub project is, in part, to make a reusable library for cargos resolver. Not that that is on a timeline that helps you.</p>",
        "id": 273290818,
        "sender_full_name": "Eh2406",
        "timestamp": 1645826706
    }
]