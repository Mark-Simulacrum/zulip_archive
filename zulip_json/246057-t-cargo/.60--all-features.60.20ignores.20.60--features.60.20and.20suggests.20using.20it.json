[
    {
        "content": "<p>When an example has <code>required-features</code> that require features of the dependencies, it's impossible to run said example with <code>--all-features</code> and the error is confusing:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>; cargo run --example self_info --features=\"tokio/macros tokio/rt-multi-thread auto_send\" --all-features\nerror: target `self_info` in package `teloxide-core` requires the features: `tokio/macros`, `tokio/rt-multi-thread`, `auto_send`\nConsider enabling them by passing, e.g., `--features=\"tokio/macros tokio/rt-multi-thread auto_send\"`\n</code></pre></div>\n<p>Why <code>--all-features</code> makes cargo ignore <code>--features</code>?</p>",
        "id": 269409108,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643203376
    },
    {
        "content": "<p>It seems like a bug (?) here: <a href=\"https://github.com/rust-lang/cargo/blob/e77c0719fd496eb98b1bbdcaf35f415b0ffcc555/src/cargo/core/resolver/features.rs#L683\">https://github.com/rust-lang/cargo/blob/e77c0719fd496eb98b1bbdcaf35f415b0ffcc555/src/cargo/core/resolver/features.rs#L683</a></p>",
        "id": 269414476,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643205458
    },
    {
        "content": "<p>I believe it's by design of --all-features that was designed to override explicit --features where the package itself is assumed to construct full featureset of the given package Cargo.toml manifest from --all-features - </p>\n<p>However it will fail since --all-features in this case would not necessarily construct the full required featureset with additional features triggered by the examples as the --all-features requires it is defined under [features] of the package Cargo.toml</p>\n<p>Feature unification is the cause -</p>\n<p><a href=\"https://doc.rust-lang.org/cargo/reference/features.html#feature-unification\">https://doc.rust-lang.org/cargo/reference/features.html#feature-unification</a></p>\n<p>So downstream features are not recognised as part of --all-features </p>\n<p><a href=\"https://doc.rust-lang.org/cargo/reference/features.html#dependency-features\">https://doc.rust-lang.org/cargo/reference/features.html#dependency-features</a></p>\n<p>As Cargo.toml for teloxide-core defines the example:</p>\n<div class=\"codehilite\"><pre><span></span><code>[[example]]\nname = &quot;self_info&quot;\nrequired-features = [&quot;tokio/macros&quot;, &quot;tokio/rt-multi-thread&quot;, &quot;auto_send&quot;]\n</code></pre></div>\n<p>But when running --example self_info the required-features fails because the package manifest does not specify these featuresets at root crate / package that would in turn relay to enable the tokio features.</p>\n<p>Problem is that required-features is restrictive and not something that enables dependency features -</p>\n<p><a href=\"https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-required-features-field\">https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-required-features-field</a></p>\n<p>In order to solve this one needs to design root package appropriate features that get relayed down appropriately -</p>\n<p>You can see how reqwest features have been enabled via root crate features in the same crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>[features]\ndefault = [&quot;native-tls&quot;]\nrustls = [&quot;reqwest/rustls-tls&quot;]\nnative-tls = [&quot;reqwest/native-tls&quot;]\n</code></pre></div>\n<p>So in order to insist and get the example working with --all features (notice example-self_info) one needs to relay them from [features] for <code>$ cargo run --all-features --example self_info</code></p>\n<div class=\"codehilite\"><pre><span></span><code>[features]\nexample-self_info = [&quot;tokio/macros&quot;, &quot;tokio/rt-multi-thread&quot;, &quot;auto_send&quot;]\n\n[[example]]\nname = &quot;self_info&quot;\nrequired-features = [&quot;example-self_info&quot;]\n</code></pre></div>\n<p>The question ends up that why isn't there [features] for [[target]]</p>\n<p>Well there kind of is for root package features that is!</p>\n<p><a href=\"https://github.com/rust-lang/cargo/issues/1570\">https://github.com/rust-lang/cargo/issues/1570</a></p>\n<p>This under [[target]] however does not work for enabling dependency features e.g. tokio/* like it would under [[features]]</p>\n<p>I also tried features = [\"example-self_info\"] that would relay dependency features via [features] but it doesn't seem to work.</p>\n<p>So Ideally I would like to see features = [] that could enable dependency features under [[target]] perhaps</p>",
        "id": 269427765,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643210394
    },
    {
        "content": "<p>Enabling target-required-features with --all-features could be something to implement. I raised an issue for comments<br>\n<a href=\"https://github.com/rust-lang/cargo/issues/10332\">https://github.com/rust-lang/cargo/issues/10332</a></p>",
        "id": 269437162,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643213613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span> how does clap3 PR affect this - will <code>--features</code> raise conflict error with <code>--all-features</code> if used together or is it just passed as-is without constraint to <a href=\"https://docs.rs/cargo/latest/cargo/core/resolver/features/struct.CliFeatures.html\">cargo::CliFeatures</a>::<a href=\"https://docs.rs/cargo/latest/cargo/core/resolver/features/struct.CliFeatures.html#method.from_command_line\">from_command_line</a> that will continue the status quo where <code>--all-features</code> silently ends up ignoring <code>--features</code>above like the current cargo via feature resolver.</p>",
        "id": 269447046,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643217259
    },
    {
        "content": "<p>For context: I've stumped on this problem when trying to make RA \"run\" action work with examples with required features.</p>\n<p>From my POV it would be good to at least make <code>--features</code> with <code>--all-features</code> \"just work\". It doesn't seems too hard to implement (at first glance anyway) and will cover this use-case <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 269448773,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643217918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span>  wanna raise a bug for the --features and --all-features implicit incompatibility and lack of error? If it is supposed to error then at least <span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span> clap3 PR should address it to rule each other out. Pls link to <a href=\"https://github.com/rust-lang/cargo/issues/10332\">#10332</a></p>",
        "id": 269449206,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643218086
    },
    {
        "content": "<p>And perhaps <a href=\"https://docs.rs/cargo/latest/cargo/core/resolver/features/struct.CliFeatures.html\">cargo::CliFeatures</a>::<a href=\"https://docs.rs/cargo/latest/cargo/core/resolver/features/struct.CliFeatures.html#method.from_command_line\">from_command_line</a> contract should throw an error as well if this interface contract is used in a way design does not allow it to be used that in turn should signal error to CLI.</p>",
        "id": 269449615,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643218221
    },
    {
        "content": "<p>I don't think that <code>--features</code> and <code>--all-features</code> should be incompatible or even can error (backwards compatability <span aria-label=\"tired\" class=\"emoji emoji-1f614\" role=\"img\" title=\"tired\">:tired:</span> ).</p>\n<p>I can open an issue about implicit incompatibility though. It seems that we can either decide to produce a warning (not a great option, considering that there isn't really a way around this) or decide to make <code>--features</code> and <code>--all-features</code> compatible.</p>",
        "id": 269450085,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643218390
    },
    {
        "content": "<p>I don't think that either - but - it's design decision where there are two options. To me a bug is unexpected behaviour - or a lack of error on something that does not work silently and where someone reasonably thinks so and where the docs are additionally silent about it. Just in remote case it is intended design for whatever reason the design and errors should be added to pressure point for others to clear the confusion or this bug should be just fixed in case they are supposed to be compatible - which I too recommend.</p>",
        "id": 269451174,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643218805
    },
    {
        "content": "<p>My clap3 PR was merged.  The goal was to maintain behavior.  Any additional changes or taking advantage of new clap functionality was expected to be separate PRs (the port was already noisy enough).</p>",
        "id": 269458190,
        "sender_full_name": "Ed Page",
        "timestamp": 1643221505
    },
    {
        "content": "<p>I would imagine cargo makes it perfect place to drop some clap3 derive goodness for everyone to reference and amaze just how clean it can be - thanks for all the effort</p>",
        "id": 269458496,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643221622
    },
    {
        "content": "<p>So far, we just went builder -&gt; builder.</p>\n<p>The two main hindrances in getting cargo to use clap-cargo are</p>\n<ul>\n<li>We haven't fully worked out the story for customizing the derives which cargo would need</li>\n<li>There is a barrier in modularizing cargo because it can't use a workspace to help automate the various interactions because it gets pulled into the rust repo as a submodule and is part of that workspace.</li>\n</ul>",
        "id": 269459223,
        "sender_full_name": "Ed Page",
        "timestamp": 1643221904
    },
    {
        "content": "<p>yeah. cargo-geiger is going to be all derive and you'll probably see me annoying you pushing cargo related opts to upstream to clap-cargo that might be beneficial to taking em to cargo.</p>",
        "id": 269459541,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1643222036
    },
    {
        "content": "<p>I've created an issue for this: <a href=\"https://github.com/rust-lang/cargo/issues/10333\">https://github.com/rust-lang/cargo/issues/10333</a></p>",
        "id": 269472054,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643227045
    },
    {
        "content": "<p>PR with a fix: <a href=\"https://github.com/rust-lang/cargo/pull/10337\">https://github.com/rust-lang/cargo/pull/10337</a></p>",
        "id": 269592240,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1643298633
    }
]