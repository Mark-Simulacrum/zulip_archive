[
    {
        "content": "<p>Hey, I was skmming over <a class=\"stream-topic\" data-stream-id=\"246057\" href=\"/#narrow/stream/246057-t-cargo/topic/target-cpu.3Dnative.20for.20host\">#t-cargo &gt; target-cpu=native for host</a> and I wanted to double-check my understanding</p>",
        "id": 240661963,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622236878
    },
    {
        "content": "<p>My inference is that one cannot set <code>target-cpu</code> settings via entries under <code>[profile]</code></p>",
        "id": 240662126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622237011
    },
    {
        "content": "<p>and instead, as of today, one needs to find ways to channel that info via RUSTFLAGS (or various cargo features that end up turning into RUSTFLAGS, like <a href=\"https://doc.rust-lang.org/cargo/reference/config.html#targettriplerustflags\">target triple rustflags</a></p>",
        "id": 240662253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622237113
    },
    {
        "content": "<p>so, is that true?</p>",
        "id": 240663059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622237696
    },
    {
        "content": "<p>And, is that good enough?</p>",
        "id": 240663069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622237703
    },
    {
        "content": "<p>That is correct.</p>",
        "id": 240663096,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622237721
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/reference/config.html#buildrustflags\"><code>build.rustflags</code></a> contains documentation for the 3 different ways to pass rustflags.</p>",
        "id": 240663111,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622237736
    },
    {
        "content": "<p>I admit that I haven’t followed the work in this area too closely. Some people in the past have advised <a href=\"https://internals.rust-lang.org/t/policies-around-default-cpu-architecture/9142\">changing the defaults</a> so we don’t leave performance on the ground for 99% of the developers</p>",
        "id": 240663127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622237748
    },
    {
        "content": "<p>Yea, the defaults are pretty conservative.</p>",
        "id": 240663251,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622237824
    },
    {
        "content": "<p>and I’m guess I’m wondering whether that is the right answer (i.e. require zero effort from developers, at cost of surprising a few), or if we can find ways to make it smoother.</p>",
        "id": 240663271,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622237847
    },
    {
        "content": "<p>I am a little out of my depth. So salt as needed. I don't think we can change the meaning of an existing target, or people that are picking it intentionally will be broken. But I wonder if we can change the detection, like if I use stock <code>cargo build</code> can it use <code>\"x86_64-v3\"</code> where it uses <code>\"x86_64\"</code> now.</p>",
        "id": 240664295,
        "sender_full_name": "Eh2406",
        "timestamp": 1622238463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Did you have ideas on how to make it smoother?</p>",
        "id": 240664891,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622238842
    },
    {
        "content": "<p>I was originally thinking along the lines of having a target_cpu setting</p>",
        "id": 240665010,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622238915
    },
    {
        "content": "<p>But now I’m wondering more about <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> ‘s suggestion</p>",
        "id": 240665041,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622238938
    },
    {
        "content": "<p>Or, even just issuing a diagnostic when it’s not set at all, and listing what targets one might use for the given host</p>",
        "id": 240665130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622238990
    },
    {
        "content": "<p>A <code>target-cpu</code> for profiles or targets?  Like</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># instead of this:</span>\n<span class=\"k\">[build]</span>\n<span class=\"n\">rustflags</span> <span class=\"o\">=</span> <span class=\"k\">['-C', 'target-cpu=native']</span>\n\n<span class=\"c1\"># have this:</span>\n<span class=\"k\">[build]</span>\n<span class=\"n\">target-cpu</span> <span class=\"o\">=</span> <span class=\"s\">'native'</span>\n\n<span class=\"c1\"># or if you want something more specific</span>\n<span class=\"k\">[target.'cfg(target_arch=\"x86_64\")']</span>\n<span class=\"n\">target-cpu</span> <span class=\"o\">=</span> <span class=\"s\">'skylake'</span>\n</code></pre></div>\n<p>Doing that could make it marginally easier to set.</p>\n<p>Having target-aware profiles has also been a requested feature a few times (<a href=\"https://github.com/rust-lang/cargo/issues/4897\">https://github.com/rust-lang/cargo/issues/4897</a>).  It might be nice to have it that way, too.  Having as part of the profile might give it more visibility, too.</p>\n<p>I'm not sure how a warning could work, otherwise it would be very noisy (a warning on everyone's project).</p>\n<p>I'm not really sure the default can be safely changed.  And even if the default is bumped, it would still need to be more conservative than what most users would benefit from.</p>\n<p>Unfortunately I can't think of too many ideas on how to make this more visible.  We could maybe give more emphasis on things like nnethercote's <a href=\"https://nnethercote.github.io/perf-book/build-configuration.html#using-cpu-specific-instructions\">performance book</a>.  We could add more documentation about creating production builds.</p>\n<p>Also, I'm not 100% clear on the <a href=\"https://github.com/rust-lang/rust/issues/64609\">soundness issue</a>.  I think it should be relatively safe to set target-cpu/target-features as long as everything uses the same settings.  Isn't the extern \"C\" interface always the same regardless of those settings?</p>",
        "id": 240666405,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622240003
    },
    {
        "content": "<p>Another thing I would be concerned of is setting to anything other than \"native\" is hard to do correctly.  For example, if you are deploying to some cloud environment, if you are lucky you can figure out what all CPUs are used, but then how do you map that to the <code>target-cpu</code> or <code>target-feature</code> flags?  It takes a fair bit of research to figure that out.</p>",
        "id": 240666723,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622240283
    },
    {
        "content": "<p>And it can also be really hard to know if any particular project will benefit from various target-features or cpu settings.</p>",
        "id": 240666893,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622240453
    },
    {
        "content": "<p>The cloud case is a good one to discuss. Eg an individual developer may indeed not know the right setting. But profiles can be composed in some manner, right? (Or maybe that’s just config files that can be composed?) either way, AWS could provide a file that describes the minimum capabilities of its x86_64 EC2 instances. Likewise Microsoft Azure could do the same.</p>",
        "id": 240667582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622241041
    },
    {
        "content": "<p>(I do like the mock up you give. Giving it a first class entry will<br>\nInherently give it more visibility, IMO. If it’s only RUSTFLAGS, then some users will never touch it, regarding it to be dark magic</p>",
        "id": 240667759,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622241206
    },
    {
        "content": "<p>Another reason why RUSTFLAGS isn't an idea venue for controlling this is <a href=\"https://github.com/rust-lang/cargo/issues/5376\">https://github.com/rust-lang/cargo/issues/5376</a> — it doesn't compose very nicely.</p>",
        "id": 240667849,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1622241254
    },
    {
        "content": "<p>setting specific target-cpu values isn't all that useful in practice because it only affects instruction scheduling (AFAIK) for values that aren't <code>native</code>.</p>",
        "id": 240670143,
        "sender_full_name": "nagisa",
        "timestamp": 1622243350
    },
    {
        "content": "<p>giving people way to set target-features they want to target would be much more important IMHO.</p>",
        "id": 240670161,
        "sender_full_name": "nagisa",
        "timestamp": 1622243386
    },
    {
        "content": "<p>Really? Target-cpu doesn't set features based on that CPU?</p>",
        "id": 240670221,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622243410
    },
    {
        "content": "<p>I had assumed it was the equivalent of -march, not -mtune.</p>",
        "id": 240670241,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622243439
    },
    {
        "content": "<p>hm, <em>verifies</em></p>",
        "id": 240670326,
        "sender_full_name": "nagisa",
        "timestamp": 1622243546
    },
    {
        "content": "<p>Not doubting, just really surprised.</p>",
        "id": 240670363,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622243612
    },
    {
        "content": "<p>I recall somehow arriving at that conclusion when working on a certain major perf regression that we had with -Ctarget-cpu=native.</p>",
        "id": 240670515,
        "sender_full_name": "nagisa",
        "timestamp": 1622243760
    },
    {
        "content": "<p>we do set the target features explicitly for the <code>target-cpu=native</code> but we can't really do the same for other target-cpu values.</p>",
        "id": 240670596,
        "sender_full_name": "nagisa",
        "timestamp": 1622243815
    },
    {
        "content": "<p>The fact that the similar regression was not visible with other target-cpu values suggested to me at that time that they don't end up enabling target-features that are applicable to those. And it isn't always clear what instructions are available for the given family – e.g. skylake can mean many different feature sets.</p>",
        "id": 240670690,
        "sender_full_name": "nagisa",
        "timestamp": 1622243899
    },
    {
        "content": "<p>I'm pretty certain that all target-cpu settings includes default sets for target-features.</p>",
        "id": 240670751,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622243974
    },
    {
        "content": "<p>Yeah, turns out I was wrong, setting target-cpu does enable the features applicable to that family.</p>",
        "id": 240670965,
        "sender_full_name": "nagisa",
        "timestamp": 1622244236
    },
    {
        "content": "<p>I believe the defaults for each x86 cpu are defined <a href=\"https://github.com/rust-lang/llvm-project/blob/39c5555872cc5d379cc3535a31dc0cdac969466f/llvm/lib/Support/X86TargetParser.cpp#L118-L286\">here</a>.  It would be nice if those were documented, but I'm uncertain if they are guaranteed to be stable.</p>",
        "id": 240671222,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622244554
    },
    {
        "content": "<p>I would assume any changes would be a bug, or maybe adding features that haven't been implemented.</p>",
        "id": 240671322,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622244657
    },
    {
        "content": "<p>It's also not been really clear how flags like <code>-C target-cpu</code> will interact with different backends.  Like if we document that you can pass <code>znver3</code>, does that documentation need to say those CPUs are only for the LLVM backend?</p>",
        "id": 240671434,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622244790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Places.20to.20set.20target-cpu/near/240670161\">said</a>:</p>\n<blockquote>\n<p>giving people way to set target-features they want to target would be much more important IMHO.</p>\n</blockquote>\n<p>I’m curious, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> , if you still stand by this statement given the correction about how <code>target-cpu</code> behaves? (I’m sitting here wondering if the ideal interface is for people to list out the minimal set features they expect to be present, or if the right interface is a way to say “here are all the cpu variants I expect to run on. Compiler, figure out the intersection of all their feature sets.\")</p>",
        "id": 240949657,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622557541
    },
    {
        "content": "<p>that is, which of the two modes of operation is better for the end-developer to use? Or should we offer both options?</p>",
        "id": 240949767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622557571
    },
    {
        "content": "<p>I still believe target_features are way more important but i do understand people don't want to go through the hassle. The reason I believe so is because certain CPU families don't do very well in precisely describing the targeted hardware.</p>",
        "id": 240960472,
        "sender_full_name": "nagisa",
        "timestamp": 1622561757
    },
    {
        "content": "<p>See e.g. <a href=\"https://github.com/rust-lang/rust/issues/44036\">https://github.com/rust-lang/rust/issues/44036</a> re hassle, even though you can already do that with target_features.</p>",
        "id": 240960909,
        "sender_full_name": "nagisa",
        "timestamp": 1622561926
    },
    {
        "content": "<p>also if we end up giving users convenient ways to specify target-cpus I think we should give it the same treatment as we do for target-features – e.g. I can imagine us not wanting to expose and support all of the target-cpus that LLVM may think of adding to their codebase.</p>",
        "id": 240960997,
        "sender_full_name": "nagisa",
        "timestamp": 1622561972
    },
    {
        "content": "<p>Curiously I can't find anymore any open issues for <code>-Ctarget-cpu=skylake</code> not being a baseline of all skylakes.</p>",
        "id": 240961291,
        "sender_full_name": "nagisa",
        "timestamp": 1622562103
    },
    {
        "content": "<p>FWIW I somewhat painstakingly went through the process of manually finding the intersection of features supported on the CPU’s I cared about for my work projects, so a way to make that easier would be great</p>",
        "id": 240983672,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1622571826
    },
    {
        "content": "<p>as a general programmer providing library code to other people, i generally think in terms of target_feature.</p>\n<p>as a binary developer i usually think about specific target cpus i might want to run my program on.</p>\n<p>so both approaches are useful based on who you are.</p>",
        "id": 240989976,
        "sender_full_name": "Lokathor",
        "timestamp": 1622574884
    },
    {
        "content": "<p>I <em>do</em> think we should have convenient ways to specify target-feature, but I also think most of the time target-cpu seems easier. (And it'll be even easier on x86 with the new architecture \"levels\" like <code>x86_64-v3</code>).</p>",
        "id": 241061775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622575118
    },
    {
        "content": "<p>maybe for some people.</p>\n<p>Like i honestly have no idea what cpu i have other than \"it's 6 cores and does avx2\". And most people know less than that about their machine.</p>\n<p>I'm not against the idea but i think you're maybe \"too informed\" to be understanding how the common masses approach the situation.</p>",
        "id": 241070155,
        "sender_full_name": "Lokathor",
        "timestamp": 1622579022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I'm not trying to suggest that <em>either</em> is easy. Just that on a relative scale, it seems easier to say \"this CPU\" than to say \"my CPU has these two-dozen target features\".</p>",
        "id": 241070328,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622579101
    },
    {
        "content": "<p>Also, we should really provide more tool assistance for that problem; I'd love to have an option that tells the compiler to do the detection it'd do for <code>target-cpu=native</code> and then print the equivalent options.</p>",
        "id": 241070389,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622579140
    },
    {
        "content": "<p>That would allow logging that output on container start up. Then it is a simple query to decide if we can tern on some flage given the fleate we are running on.</p>",
        "id": 241070820,
        "sender_full_name": "Eh2406",
        "timestamp": 1622579337
    },
    {
        "content": "<p>If you get a printout saying \"you have x86_64-v3 plus target features x and y\", that makes it easier to say \"I want x86_64-v3 but I can't count on x and y\".</p>",
        "id": 241070846,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622579348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Places.20to.20set.20target-cpu/near/241070389\">said</a>:</p>\n<blockquote>\n<p>Also, we should really provide more tool assistance for that problem; I'd love to have an option that tells the compiler to do the detection it'd do for <code>target-cpu=native</code> and then print the equivalent options.</p>\n</blockquote>\n<p>Does <code>rustc --print=cfg -Ctarget-cpu=native | grep target_feature</code> roughly do that?</p>",
        "id": 241071259,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622579538
    },
    {
        "content": "<p>i have a helper (written in fish-shell) for this purpose, which prints out the cfgs and the target-json (using nightly, a manually specified toolchain, or RUSTC_BOOTSTRAP unless you tell it not to). <a href=\"https://github.com/thomcc/fish-config/blob/main/functions/target.fish#L42-L46\">https://github.com/thomcc/fish-config/blob/main/functions/target.fish#L42-L46</a> (link is to the help text). probably not useful to anybody who uses fish-shell, but i've found it very helpful in figuring out these sorts of things</p>",
        "id": 241071808,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622579786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> No, not exactly. That just lists all the features, not the CPU. I'd love to have groups of options implied by a target CPU transformed into a target CPU option, and then just list the target_feature options that aren't implied by that CPU.</p>",
        "id": 241071821,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622579795
    },
    {
        "content": "<p>hm, oh, i see</p>",
        "id": 241071840,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622579810
    },
    {
        "content": "<p>(It <em>is</em> helpful, though.)</p>",
        "id": 241071841,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622579810
    },
    {
        "content": "<p>(nevermind, what i described is different)</p>",
        "id": 241071855,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622579821
    },
    {
        "content": "<p>cargo print-target-feature</p>",
        "id": 241072079,
        "sender_full_name": "Lokathor",
        "timestamp": 1622579920
    },
    {
        "content": "<p>Ideally it also has a way to pick the common denominator from results from multiple machines so that you don't have to do that manually.</p>",
        "id": 241081634,
        "sender_full_name": "nagisa",
        "timestamp": 1622585061
    },
    {
        "content": "<p>I will note, though, that having a little utility for listing target features is fairly easy in rust: you just print out is_x86_feature_detected for each of the target feature you care about. the woes of having a standard library that's eventually becoming useful all on its own!</p>",
        "id": 241092602,
        "sender_full_name": "Lokathor",
        "timestamp": 1622593809
    }
]