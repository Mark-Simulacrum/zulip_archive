[
    {
        "content": "<p>I'm working on a rustc_private plugin. To integrate with Cargo, I'm using RUSTC_WRAPPER just like Clippy and Miri. My workflow is:</p>\n<ol>\n<li>User runs <code>cargo mytool</code></li>\n<li><code>cargo-mytool</code> binary invokes <code>RUSTC_WRAPPER=mytool-rustc cargo check</code></li>\n<li><code>mytool-rustc</code> then sanitizes arguments passed from Cargo and hands them off to <code>mytool-driver</code></li>\n</ol>\n<p>The issue I'm running into is that if the user has already run <code>cargo check</code>, then because the corresponding <code>.rmeta</code> file is already generated, subsequent calls to <code>cargo mytool</code> don't actually run my tool. What's the right way to work around this? I couldn't figure out what Clippy does. One possibility is trying to delete the <code>.rmeta</code> file, but reliably finding that file name would probably rely on private Cargo internals.</p>",
        "id": 251278517,
        "sender_full_name": "Will Crichton",
        "timestamp": 1630350484
    },
    {
        "content": "<p>Clippy uses the <code>RUSTC_WORKSPACE_WRAPPER</code> environment variable which keeps the cache files separate from <code>cargo check</code>.  However, that wrapper is only run for the \"local\" packages, and not registry dependencies, unlike <code>RUSTC_WRAPPER</code> which runs for all compilation steps.</p>",
        "id": 251279883,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630351040
    },
    {
        "content": "<p>Ok so I was following that lead, since I saw in the Cargo docs the bit about the different cache. However if I simply replace <code>RUSTC_WRAPPER</code> with <code>RUSTC_WORKSPACE_WRAPPER</code>, then I get compilation errors like:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: extern location for rg3d_core_derive does not exist: /Users/will/Code/tmp/rg3d/target/debug/deps/librg3d_core_derive-f60c2b904661c45b.dylib\n  --&gt; rg3d-core/src/visitor.rs:11:9\n   |\n11 | pub use rg3d_core_derive::Visit;\n   |         ^^^^^^^^^^^^^^^^\n\nerror: could not compile `rg3d-core` due to previous error\nerror: build failed\n</code></pre></div>",
        "id": 251280211,
        "sender_full_name": "Will Crichton",
        "timestamp": 1630351180
    },
    {
        "content": "<p>Seems like there's a weird interaction with proc-macro dependencies potentially?</p>",
        "id": 251280347,
        "sender_full_name": "Will Crichton",
        "timestamp": 1630351228
    },
    {
        "content": "<p>Hm, I'm not sure.  Is that dylib missing?</p>",
        "id": 251280451,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630351276
    },
    {
        "content": "<p>Ah no the issue is that I needed to test for <code>CARGO_PRIMARY_PACKAGE</code> like Clippy does. <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/src/driver.rs#L336\">https://github.com/rust-lang/rust-clippy/blob/master/src/driver.rs#L336</a> </p>\n<p>All good, thanks for the pointers!</p>",
        "id": 251280858,
        "sender_full_name": "Will Crichton",
        "timestamp": 1630351458
    },
    {
        "content": "<p>Oh wow good catch with <code>CARGO_PRIMARY_PACKAGE</code>... I was having a similar issue where I only want to print output for the primary package</p>",
        "id": 251283894,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630352870
    },
    {
        "content": "<p>but definitely want to run my tool on all dependencies (to gather metadata)</p>",
        "id": 251283961,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630352884
    },
    {
        "content": "<p>One other question in this vein... I'm observing that the time to actually run <code>cargo check</code> is dramatically slower when using RUSTC_WORKSPACE_WRAPPER than when running without the wrapper, even when the wrapper just invokes rustc. Like 3s vs. 30s. This is for a workspace with several very large crates. Any ideas on why this would happen?</p>",
        "id": 251292453,
        "sender_full_name": "Will Crichton",
        "timestamp": 1630356371
    },
    {
        "content": "<p>Nevermind, it's just polonius being extremely slow...</p>",
        "id": 251296245,
        "sender_full_name": "Will Crichton",
        "timestamp": 1630358117
    }
]