[
    {
        "content": "<p>For <a href=\"https://github.com/rust-lang/rfcs/pull/2906\">RFC2906</a> Part 3, we are wanting to be able to inherit from a relative path. There are a few options to do it.</p>\n<ol>\n<li>\n<p>Use <a href=\"https://github.com/udoprog/relative-path\">relative-path</a>, <a href=\"https://github.com/Manishearth/pathdiff\">pathdiff</a>, or something similar.</p>\n</li>\n<li>\n<p>Use something similar to how we search for a workspace root to find the relative path. Below would be modified to take in a file extension so the relative path could be checked to exist. Each iteration it goes through you could add <code>../</code> to the relative path that was inherited. </p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">find_root_iter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">manifest_path</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Config</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PathBuf</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">LookBehind</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">paths</span>::<span class=\"n\">ancestors</span><span class=\"p\">(</span><span class=\"n\">manifest_path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">).</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">path</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"s\">\"target/package\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">path</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">home</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">path</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"Cargo.toml\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">ances_manifest_path</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ances_manifest_path</span><span class=\"p\">.</span><span class=\"n\">exists</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm open to suggestions as to what to use to resolve relative paths. I may have overlooked something, if that's the case let me know.</p>",
        "id": 277941523,
        "sender_full_name": "Muscraft",
        "timestamp": 1649191863
    },
    {
        "content": "<p>To summarize, you are needing to take a relative path with a known base and make it relative to a different base.</p>\n<p>A straight <code>old_base.join(rel_path).strip_prefix(new_base)</code> doesn't work because <code>strip_prefix</code> does literally that and can't handle inserting <code>..</code> into the result.  </p>\n<p>I'm not seeing anything in <code>relative-path</code> that helps with the <code>strip_prefix</code> problem.</p>\n<p>We are already adding <code>pathdiff</code> as a dependency for <code>cargo-add</code> which has to do similar, so long as that doesn't change in the review process, that is a plus for that route.</p>",
        "id": 277942898,
        "sender_full_name": "Ed Page",
        "timestamp": 1649192595
    },
    {
        "content": "<p>If everyone is okay with that, I'll add <code>pathdiff</code> in my next PR then.</p>",
        "id": 277944228,
        "sender_full_name": "Muscraft",
        "timestamp": 1649193188
    }
]