[
    {
        "content": "<p>In cargo-add, I recently added support for displaying all features of the crate being added with a green <code>+</code> for those activated and a red <code>-</code> for those that aren't.  In looking to preserve this, I've been digging into cargo's output handling.</p>\n<p>It seems like nearly all cargo output goes through <code>Shell</code> which helps centralize decisions, like log levels and whether to use color.  This allows coloring a status but it doesn't seem like there is much in the way of supporting color in the message.</p>\n<p><a href=\"https://github.com/rust-lang/cargo/pull/10116/files\">#10116</a> also looked at adding coloring to messages by baking in search-specific formatting into <code>Shell</code>.</p>\n<p>There been any thoughts on exposing more details so people can have richer output?  Or should I just give up for now and not have any coloring besides the built-in status field?</p>",
        "id": 273269539,
        "sender_full_name": "Ed Page",
        "timestamp": 1645815234
    },
    {
        "content": "<p>I don't think we've had any discussions on that topic. I like the idea of generalizing the mechanism a little. But I also don't think we should block on it.</p>",
        "id": 273272572,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645816506
    },
    {
        "content": "<p>Yeah, I've gone ahead and removed the extra coloring for now so I can continue to make progress.</p>",
        "id": 273275055,
        "sender_full_name": "Ed Page",
        "timestamp": 1645817792
    },
    {
        "content": "<p>Depending on where we are with supporting older windows, if we just supported ANSI or had an ANSI to old windows API compat filter, we could just have the <code>status</code>, <code>warn</code>, etc functions accepted formatted text and strip the codes.  Kind of a applying  <code>print_ansi_stdout</code> to the rest of the API.</p>",
        "id": 273275280,
        "sender_full_name": "Ed Page",
        "timestamp": 1645817916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span> I <em>personally</em> would be in favor of just supporting the ANSI case, which would allow us to make the assumption that formatting is a thing that can be baked into a string rather than applied at output time.</p>",
        "id": 273279211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645820117
    },
    {
        "content": "<p>Assuming that makes things simpler.</p>",
        "id": 273279223,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645820124
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/10116#issuecomment-1010227769\">https://github.com/rust-lang/cargo/pull/10116#issuecomment-1010227769</a> contains some thoughts on generalizing the API to better support color.  I think it would be great to have some kind of API to make it easier to display arbitrarily colored output.  I'm reluctant to bring in a separate package to handle it, so if you can come up with a simple API that handles it, that would be preferable. But if it ends up being too awkward, we can definitely consider some external package.  There are a few packages that have much more natural APIs, like <code>colored</code> and a few others.</p>\n<p>I'm not sure I follow what you mean about using ANSI formatted text.  If it's possible to just feed the color specs into Shell, then I don't think there would be a need to worry about that.  We can definitely have degraded support for older Windows, but I'm not sure if that is really necessary. </p>\n<p>We do have <code>fwdansi</code> (which can do some basic ANSI translations) and <code>strip-ansi-escapes</code> (to remove them entirely). So we can use those if necessary, but that seems a little roundabout to me.</p>",
        "id": 273287414,
        "sender_full_name": "Eric Huss",
        "timestamp": 1645824764
    },
    {
        "content": "<p>A <code>write_stdout</code> isn't all that ergonomic, losing out on our ability to use <code>write!</code> (<code>termcolor</code>is already a bit annoying to work with and it does work with <code>write!</code>).</p>\n<p>If we could only support ANSI and drop the old Windows color API (or if it can take the hit of us always using <code>fwdansi</code>), that'd make all of this a lot easier with crates like <a href=\"https://docs.rs/owo-colors/latest/owo_colors/\">owo-colors</a> or yansi.  if not, I can understand and work on <code>write_stdout</code> instead.</p>",
        "id": 273288863,
        "sender_full_name": "Ed Page",
        "timestamp": 1645825641
    }
]