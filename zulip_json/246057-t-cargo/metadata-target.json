[
    {
        "content": "<p>Some context for <a href=\"https://github.com/rust-lang/cargo/pull/8987\">https://github.com/rust-lang/cargo/pull/8987</a> -- internally we have a bunch of crates deny-listed since they use incompatible licenses and such. This causes issues when <code>metadata</code> pulls in dependencies for _all_, which includes things like <code>fuchia</code>, and thus increases the space of crates that _might_ have been deny-listed.</p>",
        "id": 220184047,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608158591
    },
    {
        "content": "<p>Relatedly, it's quite unfortunate that <code>cargo metadata</code> uses a different convention for selecting targets than like every other cargo tool. Is there a particular reason for this? We can't really change the default now, but it has implications downstream such as <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6908\">https://github.com/rust-analyzer/rust-analyzer/issues/6908</a></p>",
        "id": 220184129,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608158641
    },
    {
        "content": "<p>Ouch, it looks like this hits <code>rustfmt</code> as well, which does not ever pass <code>--filter-platform</code> :/<br>\n<a href=\"https://github.com/rust-lang/rustfmt/blob/39fe0e12ea7fefc50e4be346b9ea90c308587979/src/cargo-fmt/main.rs#L662\">https://github.com/rust-lang/rustfmt/blob/39fe0e12ea7fefc50e4be346b9ea90c308587979/src/cargo-fmt/main.rs#L662</a></p>",
        "id": 220184765,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608158981
    },
    {
        "content": "<p>The intention is that <code>cargo metadata</code> gives you a target-agnostic view of the dependency graph, similar to how <code>Cargo.lock</code> works</p>",
        "id": 220192840,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608164738
    },
    {
        "content": "<p>this is a known thorn in Cargo though where projects often have only a small handful of targets they care about, so the <code>Cargo.lock</code> file is bigger than necessary (and transitively <code>cargo metadata</code>)</p>",
        "id": 220192908,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608164768
    },
    {
        "content": "<p>But shouldn't that be opt-in, rather than by default?<br>\nI think it makes perfect sense for <code>Cargo.lock</code> to consider all targets fwiw, it's only specifically metadata I'm less sure about.</p>",
        "id": 220193553,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608165342
    },
    {
        "content": "<p>I wonder if one way to get around this would be to allow <code>--filter-platform host</code></p>",
        "id": 220193617,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608165376
    },
    {
        "content": "<p>At least that would make it easier for projects that want metadata just for the actual build graph</p>",
        "id": 220193650,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608165398
    },
    {
        "content": "<p>I feel like I can maybe guess your answer, but how would you feel if setting <code>CARGO_BUILD_TARGET</code> automatically set <code>--filter-platform</code> for <code>cargo metadata</code>? Too magical?</p>",
        "id": 220193844,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608165554
    },
    {
        "content": "<p>Or alternatively some other env var. I'm asking specifically because it would give users a nice way to work around lacking support in intermediate tools (e.g., <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6908\">https://github.com/rust-analyzer/rust-analyzer/issues/6908</a>)</p>",
        "id": 220193958,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608165647
    },
    {
        "content": "<p>Unfortunately I think this touches on a number of issues so I don't think there's a clear solution. One issue is the lack of build plans forcing the use of <code>cargo metadata</code>, and another is that <code>cargo metadata</code> explicitly does not have <code>--target</code> since it doesn't mirror the <code>--target</code> of build as that's a layer deeper in cargo, below the abstraction level of <code>cargo metadata</code>. It's been awhile since I brushed up on these issues though.</p>",
        "id": 220261280,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608220596
    },
    {
        "content": "<p>Hmm, interesting. I think then supporting <code>--filter-platform host</code> is probably the way to go. I can add a PR for that pretty easily. I think the PR above makes sense regardless though, as it just fixes a known issue with the current implementation, and does not actually change behavior.</p>",
        "id": 220272306,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608225266
    }
]