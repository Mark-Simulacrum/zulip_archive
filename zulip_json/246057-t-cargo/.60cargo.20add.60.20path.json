[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424212\">@Ed Page</span> One thing I was thinking about is how the auto-path detection works. It seems like it is a little risky for a few reasons:</p>\n<ul>\n<li>Slash could interfere with something like <a href=\"https://github.com/rust-lang/rfcs/issues/3243\">rfc#3243</a> (namespaced registry), if that decides to switch back.</li>\n<li>It can cause conflicts with paths that aren't packages. For example, <code>cargo add foo</code> and there is a <code>foo</code> directory, but you really wanted <code>foo</code> from <a href=\"http://crates.io\">crates.io</a>.</li>\n<li>The error message isn't really great in the previous example.</li>\n</ul>\n<p>I'm wondering if it could maybe be made a little more robust by only assuming it is a path dependency if the given path includes a <code>Cargo.toml</code>?</p>",
        "id": 276750770,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648335659
    },
    {
        "content": "<p>maybe require <code>./foo</code> for path dependencies, to remove the ambiguity?</p>",
        "id": 276761535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648351812
    },
    {
        "content": "<p>or require <code>--path</code>, the same way <code>cargo install </code>does</p>",
        "id": 276761548,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648351830
    },
    {
        "content": "<p>So many small decisions; hard to remember what all to explicitly call out :)</p>\n<p>cargo-edit originally overloaded the positional argument with</p>\n<ul>\n<li>name</li>\n<li>name:version (see also <code>--vers</code>)</li>\n<li>path (see also <code>--path</code>)</li>\n<li>git url (see also <code>--git</code>)</li>\n</ul>\n<p>I was concerned about ambiguity.  This is part of the reason I made git support unstable; I like the idea of the positional argument but didn't like the ambiguity.  Personally, if positional git support came back, I'd have it require <code>git+&lt;url&gt;</code>.</p>\n<p>I considered paths and felt that the current approach struck a fairly good balance  At the time, I was not aware of any talk of adding <code>/</code> to package names and the likelihood of a package name conflicting with a file name seemed very low based on the projects I have browsed the code of in the past.  My hope is <a href=\"https://github.com/rust-lang/rfcs/issues/3243\">rfc#3243</a> never goes back to <code>/</code> because the <code>::</code> design fits so well.  I get the impression <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> is in a similar boat as he advised me on internals to ignore the RFC.</p>\n<p>In reflecting more on it,  the options I see</p>\n<ul>\n<li>Check if <code>foo</code> exists (today) and improve the error message (always assume params with <code>/</code> are paths)</li>\n<li>Check if <code>foo</code> is a directory</li>\n<li>Check if <code>foo/Cargo.toml</code> exists</li>\n<li>Only if <code>foo</code> is an invalid package name, check do one of the above (at least tab completion on my system adds a trailing <code>/</code> on directories which will probably be a common case)</li>\n<li>Check if <code>foo</code> package exists and then fallback to a directory check</li>\n<li>Require <code>--path</code></li>\n</ul>\n<p>In my ideal solution, the CLI wouldn't be modal.  This is one of the factors for me to avoid arguments like <code>--path</code> (another is low-effort so it gets used).  However, the CLI as-is requires modality (<code>--features</code>,  etc).  The multi-add case is also most targeted at documentation which is less likely to happen for path and git dependencies. </p>\n<p>Other reasons against <code>--path</code></p>\n<ul>\n<li>Lower friction for use</li>\n<li>Last implementation required still specifying the crate name with it <code>cargo add foo --path ./crates/foo</code>).  This most fits within how cargo-add works but makes things even worse for usability (might as well only do <code>cargo add foo</code> and have cargo-add find the path).</li>\n</ul>\n<p>My concerns with being smart about path detection by checking if it exists and then assuming its a crate is that could hurt error reporting if the person chose the wrong path (for typos, I'm assuming most people rely on tab completion).</p>\n<p>I kind of like the \"if its a valid package name, treat it as such\" and \"check if its a package first\" but that requires some decent re-work to defer some decision making.</p>\n<p><strong>So my preferences</strong></p>\n<ul>\n<li>Existing behavior but double check and improve some error reporting</li>\n<li>Only treat as path if <code>goo</code> is an invaid package name</li>\n<li>Check if <code>foo</code> package exists though this will require some re-work.</li>\n</ul>\n<p>Thoughts?</p>",
        "id": 276909760,
        "sender_full_name": "Ed Page",
        "timestamp": 1648490165
    },
    {
        "content": "<p>I agree that we shouldn't require --path. I do think we need disambiguation for git urls (since a git repo can also be a path or some other kind of url).</p>",
        "id": 276911163,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648490919
    },
    {
        "content": "<p>requiring a trailing slash could also work to disambiguate, like <code>foo/</code>, although that is definitely strange. It's clear to me that <code>foo/</code> represents a path, and normal tab completion on my system adds the trailing slash, but I'm not sure it would be easy to remember to do that</p>",
        "id": 276916033,
        "sender_full_name": "Dan Johnson",
        "timestamp": 1648493517
    },
    {
        "content": "<p>I think if we require disambiguation it should be a leading <code>./</code> . But I'm not sure if we need disambiguation for that case.</p>",
        "id": 276916191,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648493601
    },
    {
        "content": "<p>I don't think it is really important to have a distinguishing mark.  Just check that the given value <code>foo</code> is a directory with <code>foo/Cargo.toml</code>. Currently it just checks if <code>foo</code> exists.</p>",
        "id": 276920279,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648495735
    },
    {
        "content": "<p>What about if the user chose the wrong directory?  The error message (or behavior) in that case will be a bit unexpected.</p>\n<p>Granted, assuming tab completion, there will be a <code>/</code> so maybe this isn't that big of an issue?</p>",
        "id": 276921753,
        "sender_full_name": "Ed Page",
        "timestamp": 1648496548
    },
    {
        "content": "<p>I would expect <code>cargo add -- foo</code> to add the local package foo and <code>cargo add foo --</code> to add the package <code>foo</code> from <a href=\"http://crates.io\">crates.io</a> like many other commands (like <code>git</code>). Using <code>--</code> would be required only when there is ambiguity, and an error would be printed in case of ambiguity (like what <code>git</code> does with tags/branches/sha1 and paths).</p>",
        "id": 276944165,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1648511686
    },
    {
        "content": "<p><code>--</code> is usually only for separating non-option args that may look like options. I'd be surprised to have it affect a local/remote choice.</p>",
        "id": 276946131,
        "sender_full_name": "cuviper",
        "timestamp": 1648513856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/246057-t-cargo/topic/.60cargo.20add.60.20path/near/276946131\">said</a>:</p>\n<blockquote>\n<p><code>--</code> is usually only for separating non-option args that may look like options. I'd be surprised to have it affect a local/remote choice.</p>\n</blockquote>\n<p>Likewise.</p>",
        "id": 276976564,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648544743
    },
    {
        "content": "<blockquote>\n<p>What about if the user chose the wrong directory?  The error message (or behavior) in that case will be a bit unexpected.</p>\n</blockquote>\n<blockquote>\n<p>Granted, assuming tab completion, there will be a <code>/</code> so maybe this isn't that big of an issue?</p>\n</blockquote>\n<p>You're relying pretty heavily on tab completion there :/ note that if <code>./foo</code> is a symbolic link, bash will <em>not</em> add a trailing slash in completion.</p>",
        "id": 277137185,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648643880
    },
    {
        "content": "<p>In zsh a normal directory wouldn't get a trailing / either, it only adds the / if you type some non-whitespace</p>",
        "id": 277159937,
        "sender_full_name": "Alex Macleod",
        "timestamp": 1648653100
    }
]