[
    {
        "content": "<p>Hi, is <code>[target.'cfg(feature = \"feature\")'.dependencies]</code> something that would work in <code>Cargo.toml</code>?</p>\n<p>I'm trying to work around issues with <code>[target.'cfg(target_arch = \"wasm32\")'.dependencies]</code> by using <code>[target.'cfg(feature = \"wasm_bindgen\")'.dependencies]</code> instead, if possible.</p>",
        "id": 210577204,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1600464309
    },
    {
        "content": "<p>I believe that i have tried that before and it has not properly worked with feature based conditional dependency selection.</p>",
        "id": 210577454,
        "sender_full_name": "Lokathor",
        "timestamp": 1600464480
    },
    {
        "content": "<p>Cargo features cannot be specified in the <code>[target]</code> table. The dependency should be marked as <code>optional</code>, and then listed in the <code>[features]</code> table.   What issues are you having with <code>target_arch = \"wasm32\"</code>?</p>",
        "id": 210577893,
        "sender_full_name": "Eric Huss",
        "timestamp": 1600464760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> I'm curious if there's any <em>fundamental</em> reason we couldn't support arbitrary cfg there.</p>",
        "id": 210601441,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600499185
    },
    {
        "content": "<p>Weird thought, maybe we just do away with <code>optional</code> dependencies and their entanglement with feature names. And just use <code>'cfg(feature = \"feature\")'</code> syntax for when a feature adds a dependency.</p>",
        "id": 210620319,
        "sender_full_name": "Eh2406",
        "timestamp": 1600528956
    },
    {
        "content": "<blockquote>\n<p>any <em>fundamental</em> reason</p>\n</blockquote>\n<p>We would need to deal with<code> 'cfg(not(feature = \"feature\"))'</code>, witch brakes \"features are additive.\"</p>",
        "id": 210620456,
        "sender_full_name": "Eh2406",
        "timestamp": 1600529166
    },
    {
        "content": "<p>you could just ... not parse that, though it'd be ungreat</p>",
        "id": 210620462,
        "sender_full_name": "simulacrum",
        "timestamp": 1600529194
    },
    {
        "content": "<p>I think supporting features in <code>[target]</code> is possible in the new feature resolver (though not easy).  I'm slightly concerned about having two ways to do the same thing, but I can see how the inconsistency from Rust code can be unintuitive.</p>",
        "id": 210624248,
        "sender_full_name": "Eric Huss",
        "timestamp": 1600534379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> If the resolver can deal with it, I hope we do one day change \"features are additive\". There are useful reasons to have mutually exclusive features, or features that replace one package with another.</p>",
        "id": 210625329,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600535960
    }
]