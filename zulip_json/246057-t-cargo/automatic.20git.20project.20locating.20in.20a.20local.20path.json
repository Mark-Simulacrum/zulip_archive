[
    {
        "content": "<p>When we point to a git repository on GitHub as a dependency, Cargo searches through the repository to find the right Cargo.toml. When I check out a git repository locally and point to it with <code>path</code>, it doesn't do that same search. When I point to the local checkout with <code>git</code>, it appears to still clone it from my local path into my <code>~/.cargo</code>. </p>\n<p>Is there a way to do the search locally and not duplicate the repository?</p>",
        "id": 236334117,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619529426
    },
    {
        "content": "<p>This is the first time I've heard someone wanting the search behavior, usually I hear people want to avoid the search.</p>\n<p>In theory you can use a <a href=\"https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#paths-overrides\">paths override</a> which also has the recursive search behavior. However, <code>paths</code> can be finicky and don't work very well.</p>\n<p>Otherwise, I don't think anything else will search like that.</p>",
        "id": 236340713,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619531721
    },
    {
        "content": "<p>You can point to the local git directory with a git:// path perhaps?</p>",
        "id": 236341743,
        "sender_full_name": "simulacrum",
        "timestamp": 1619532098
    },
    {
        "content": "<p>in theory at least git itself doesn't really differentiate between remote and local sources, not sure if cargo does</p>",
        "id": 236341850,
        "sender_full_name": "simulacrum",
        "timestamp": 1619532125
    },
    {
        "content": "<p>Yea, you can use <code>git={\"file:///...\"}</code>, but when you do that Cargo still copies the entire git repo (very slowly), and I think shepmaster wanted to avoid that copy.</p>",
        "id": 236341919,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619532147
    },
    {
        "content": "<p>Ah. Yeah, that might be a problem</p>",
        "id": 236342019,
        "sender_full_name": "simulacrum",
        "timestamp": 1619532188
    },
    {
        "content": "<p>(I wonder if we could setup \"shared\" git repos via some flag, so this works well)</p>",
        "id": 236342075,
        "sender_full_name": "simulacrum",
        "timestamp": 1619532205
    },
    {
        "content": "<p>FWIW, I’ve also often wanted cargo to perform the search for local deps (though I guess I didn’t think it was a file search, I thought it just read the root Cargo.toml and picked the picked the package from the workspace members).</p>\n<p>I run into this most often when I’m testing a new version of a git dependency in a project with a local version.</p>",
        "id": 236392378,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1619550682
    },
    {
        "content": "<blockquote>\n<p>This is the first time I've heard someone wanting the search behavior</p>\n</blockquote>\n<p>Specifically, I'm writing a mini/inverse crater tool. I want to update SNAFU and see what downstream consumers break and to test if my automated migration tool works. My current flow is:</p>\n<ol>\n<li>get reverse dependencies from <a href=\"http://crates.io\">crates.io</a></li>\n<li>check out their repository</li>\n<li>add it as a dependency to a little project</li>\n<li>build</li>\n<li>patch in my local changes</li>\n<li>build</li>\n</ol>\n<p>Adding it as a dependency is annoying because it might not be at the root of their repo.</p>\n<p>However, having my local changes sounds like it rules out the path-based overrides:</p>\n<blockquote>\n<p>You cannot use this feature to tell Cargo how to find local unpublished crates.</p>\n</blockquote>",
        "id": 236394616,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619551662
    },
    {
        "content": "<p>A quick bit of <code>walkdir</code> + <code>serde</code> + Iterator magic was able to get me going, at least.</p>",
        "id": 236495178,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619611809
    }
]