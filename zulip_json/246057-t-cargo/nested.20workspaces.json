[
    {
        "content": "<p>Hi all, I'm interested in nested workspaces for cargo and I see there's an issue for it <a href=\"https://github.com/rust-lang/cargo/issues/5042\">https://github.com/rust-lang/cargo/issues/5042</a> but it looks like it's been stalled for a while. I wondered if anyone could help me understand whether it hasn't been implemented because there's some semantic subtlety to it, or more just because no one has gotten around to attempting it. I'm thinking about taking a stab at it but I'd like to not walk into some semantic dead end if I can avoid it :)</p>",
        "id": 203612784,
        "sender_full_name": "Brendan Cully",
        "timestamp": 1594500403
    },
    {
        "content": "<p>We would <em>love</em> to have help implementing it.</p>",
        "id": 203613015,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594500877
    },
    {
        "content": "<p>It's not that it's wildly subtle, it's more that it touches <em>so many things</em>.</p>",
        "id": 203613018,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594500894
    },
    {
        "content": "<p>It does need some precise definition.</p>",
        "id": 203613021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594500902
    },
    {
        "content": "<p>I saw on the ticket things like parent workspaces reaching into grandchildren. I don't see a use case for that, seems like it would be easier to manage if each workspace could only include direct children, which themselves could be regular packages or workspaces.</p>",
        "id": 203613085,
        "sender_full_name": "Brendan Cully",
        "timestamp": 1594500991
    },
    {
        "content": "<p>definition seems like a good starting point. The only point of reference I think I have for that is <a href=\"https://doc.rust-lang.org/cargo/reference/workspaces.html\">https://doc.rust-lang.org/cargo/reference/workspaces.html</a> - is that right?</p>",
        "id": 203613381,
        "sender_full_name": "Brendan Cully",
        "timestamp": 1594501487
    },
    {
        "content": "<p>I think the \"reaching into grandchildren\" is the simple solution (just ignore intermediate workspace definitions).  For example, I would like for the rust repo to just add <code>src/tools/rust-analyzer/crates/rust-analyzer</code> and ignore the workspace definition at <code>src/tools/rust-analyzer</code>.   The basic need of nested workspaces is a shared Cargo.lock,  which is straightforward. Its all the other things that are tricky, like profiles, patches, metadata, etc.  I've been thinking about this a bit recently, but it is not clear how those should behave.  Ignore them?  Merge them?  Particularly for profiles, how should shared dependencies be handled when other members of the workspace are being built?  How would conflicts be resolved?</p>",
        "id": 203613382,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594501492
    },
    {
        "content": "<p>For reference there is also the original RFC that introduced the concept, though I am uncertain how out-of-date it is. <a href=\"https://rust-lang.github.io/rfcs/1525-cargo-workspace.html\">https://rust-lang.github.io/rfcs/1525-cargo-workspace.html</a></p>",
        "id": 203613414,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594501562
    },
    {
        "content": "<p>patches are in particular what I want them for :)</p>",
        "id": 203613440,
        "sender_full_name": "Brendan Cully",
        "timestamp": 1594501568
    },
    {
        "content": "<p>ah thanks, I'll read that</p>",
        "id": 203613444,
        "sender_full_name": "Brendan Cully",
        "timestamp": 1594501577
    },
    {
        "content": "<p>I think for patches, it shouldn't be too hard to just merge them, just need to figure out what to do if there are conflicts.</p>",
        "id": 203613464,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594501675
    },
    {
        "content": "<p>so there are I guess two problems, one is, for any given file in a project, to identify the root workspace, and two is how to merge the manifest information together for the target being built. The second problem sounds like it isn't specific to nested workspaces though? Don't we need a merge strategy even for one-level workspaces?</p>",
        "id": 203613926,
        "sender_full_name": "Brendan Cully",
        "timestamp": 1594502449
    },
    {
        "content": "<p>Profiles and patches in workspace members are ignored (they generate a warning IIRC).  </p>\n<p>This issue has some other people talking about their use cases for nested profiles: <a href=\"https://github.com/rust-lang/cargo/issues/8264\">https://github.com/rust-lang/cargo/issues/8264</a></p>",
        "id": 203614207,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594502997
    }
]