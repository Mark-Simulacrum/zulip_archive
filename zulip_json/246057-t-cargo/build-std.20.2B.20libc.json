[
    {
        "content": "<p>When you invoke build-std for a custom target, what does that target's libc consist of? I thought libc would depend on an existing operating system.</p>\n<p>Another cross compilation question: </p>\n<p>How can you tell, when compiling to a target other than the host the compiler is running on, that the native C library is being statically linked?</p>\n<p>It's not clear how host independent cross compiling is with cargo - does the C library linked in a staticlib depend on the toolchain used to compile the crate?</p>\n<p>Also:</p>\n<p>From <a href=\"https://github.com/rust-lang/rust/blob/3c9442fc503fe397b8d3495d5a7f9e599ad63cf6/src/librustc_back/target/mod.rs#L70-L207\">source code</a> and <a href=\"https://doc.rust-lang.org/reference/conditional-compilation.html\">documentation</a> I can't tell what the <strong>target_vendor</strong> field for a custom target means in the context of conditional compilation, because vendor and OS are separate.</p>",
        "id": 234260077,
        "sender_full_name": "ender",
        "timestamp": 1618281855
    },
    {
        "content": "<p>I'm not sure I'm understanding the question correctly, but which libc is linked depends on how the custom target is defined. The exact particulars of which libraries are linked are defined in the <a href=\"https://github.com/rust-lang/libc\">libc crate</a>. You have to follow the <code>cfg</code> expressions that match your target to the <code>#[link]</code> attributes. For targets without an OS, it doesn't link anything. For a Windows target, it'll link <code>msvcrt</code> or <code>libcmt</code>. What's linked on unix-like things is <a href=\"https://github.com/rust-lang/libc/blob/2c40088cced1fdbd3230d521ae5babb73fbe33a6/src/unix/mod.rs#L299-L387\">this monstrosity</a>.</p>\n<p>If you're asking how the linker finds the C libraries, it (mostly) works like any other library. Typically on linux distributions there will be packages available that include pre-built libc for various targets along with special linkers for handling those targets. You specify the target-specific linker in cargo's config and that linker will use the appropriate libc.</p>",
        "id": 234262935,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618284582
    },
    {
        "content": "<blockquote>\n<p>How can you tell, when compiling to a target other than the host the compiler is running on, that the native C library is being statically linked?</p>\n</blockquote>\n<p>The only way I know of is to run a command like <code>rustc +nightly --print=target-spec-json -Zunstable-options --target x86_64-unknown-linux-musl</code> and look for the <code>\"crt-static-default\"</code> field (which defaults to false if not shown).</p>",
        "id": 234262939,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618284592
    },
    {
        "content": "<blockquote>\n<p>It's not clear how host independent cross compiling is with cargo - does the C library linked in a staticlib depend on the toolchain used to compile the crate?</p>\n</blockquote>\n<p>It depends on the target and which linker you are using (and various other flags that you can pass in to change it).</p>",
        "id": 234263007,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618284612
    },
    {
        "content": "<blockquote>\n<p>From source code and documentation I can't tell what the target_vendor field for a custom target means in the context of conditional compilation, because vendor and OS are separate.</p>\n</blockquote>\n<p>The <code>target_vendor</code> field is usually \"unknown\" unless there is a reason for it to be something else. It is a somewhat historical inheritance from gcc. For example, there's a target that only differs between the vendor \"sun\" and \"pc\", but that difference is very rare.</p>",
        "id": 234263104,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618284623
    },
    {
        "content": "<p>@ender ^</p>",
        "id": 234263126,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618284634
    },
    {
        "content": "<p>This is super helpful!</p>",
        "id": 234265432,
        "sender_full_name": "ender",
        "timestamp": 1618286917
    }
]