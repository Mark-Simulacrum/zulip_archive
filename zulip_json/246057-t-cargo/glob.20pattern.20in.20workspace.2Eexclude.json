[
    {
        "content": "<p>Is there a technical reason why when specifying a <code>workspace</code> in the <code>Cargo.toml</code> glob patterns are allowed and recognized in the <code>members</code> list, but not in the <code>exclude</code> list? <a href=\"https://doc.rust-lang.org/cargo/reference/workspaces.html#the-workspace-section\">Documentation</a></p>\n<p>We currently <a href=\"#narrow/stream/257328-clippy/topic/workspaces.20changes.20broke.20lintcheck/near/226874373\">try to use this in Clippy</a></p>",
        "id": 226876929,
        "sender_full_name": "flip1995",
        "timestamp": 1613680920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> I think it's just not implemented.  See <a href=\"https://github.com/rust-lang/cargo/issues/6009\">https://github.com/rust-lang/cargo/issues/6009</a>.  Its not clear if it should use glob or gitignore, and what the migration strategy should be, but it definitely would be nice to improve that.</p>",
        "id": 226879900,
        "sender_full_name": "Eric Huss",
        "timestamp": 1613682080
    },
    {
        "content": "<p>Thanks! Is the glob syntax for workspace members stable?</p>\n<p>Just from a gut feeling I would go for glob patterns. <code>gitignore</code> is really good for fine grained management of files. But you don't need such a find grained management for workspace members, because you just deal with directories. So glob patterns would be fine. Also  since members already use glob patterns I think it stays consistent with features people already use. All that is just an uninformed feeling though.</p>",
        "id": 226881655,
        "sender_full_name": "flip1995",
        "timestamp": 1613682780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> I can <em>imagine</em> wanting to do \"everything in X except for X/Y\", but at the same time, members use globs so consistency seems preferable to capability here.</p>",
        "id": 226882886,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613683268
    },
    {
        "content": "<p>But couldn't you also do this with glob patterns?</p>\n<div class=\"codehilite\"><pre><span></span><code>members = [&quot;X/**&quot;]\nexclude = [&quot;X/Y&quot;]\n</code></pre></div>\n<p>At least the current documentations suggests that you can do this.</p>",
        "id": 226883115,
        "sender_full_name": "flip1995",
        "timestamp": 1613683373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> You could, but then you couldn't do \"include everything in X, except don't include X/Y, but do include X/Y/Z\". Which is increasingly improbable. ;)</p>",
        "id": 226883926,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613683743
    },
    {
        "content": "<p>I think it <em>might</em> make sense to add support for gitignore-style patterns in members (and anywhere else we support lists of files), which would make it unnecessary to use \"exclude\" at all, but I also think that it's not especially important and might not be worth the churn for the rare case it would help.</p>",
        "id": 226884122,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613683825
    },
    {
        "content": "<p>As a terrible abuse, I've done somdthing like <code>members = [\"**/src/..\"]</code> before to avoid limitations of workspace.exclude.</p>",
        "id": 226884196,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613683860
    },
    {
        "content": "<p>Oh yeah, that is indeed not possible with glob patterns. </p>\n<p>So would a implementation plan make sense, where for now glob patterns are implemented for <code>exclude</code> and leave open the possibility to later move to gitignore style?</p>",
        "id": 226884919,
        "sender_full_name": "flip1995",
        "timestamp": 1613684195
    },
    {
        "content": "<blockquote>\n<p>Thanks! Is the glob syntax for workspace members stable?</p>\n</blockquote>\n<p>Yea, it is documented, and has been like that for a long while.</p>\n<blockquote>\n<p>So would a implementation plan make sense, where for now glob patterns are implemented for exclude and leave open the possibility to later move to gitignore style?</p>\n</blockquote>\n<p>I don't have a strong preference.   Whatever approach, it needs to somehow deal with backwards compatibility with the current starts_with behavior.  It took 2 years to transition package include/exclude (<a href=\"https://github.com/rust-lang/cargo/issues/4268\">#4268</a>) to gitignore.  I don't know how that would work here.</p>\n<p>It does seem a little strange to me to have package include/exclude use gitignore and workspace to use globs, but it probably doesn't matter too much.  We could add globs to <code>exclude</code> and then at a later date consider transitioning both include/exclude to gitignore, since that is a little trickier.  <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 226887195,
        "sender_full_name": "Eric Huss",
        "timestamp": 1613685252
    },
    {
        "content": "<p>So the best case would be to have gitignore support for workspaces.</p>\n<p>About the backwards compat: Would it make sense to just include this in the 2021 edition and deprecate the <code>starts_with</code> way?</p>",
        "id": 226889751,
        "sender_full_name": "flip1995",
        "timestamp": 1613685989
    },
    {
        "content": "<p>I don't know if the <code>starts_with</code> behavior is fundamentally incompatible with globbing.  I think it should be safe to just add globbing to it, but I haven't thought about it too much.</p>",
        "id": 226898993,
        "sender_full_name": "Eric Huss",
        "timestamp": 1613690508
    },
    {
        "content": "<p>I think the main limitation would be handling of filenames that start with <code>!</code>.</p>",
        "id": 226909321,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613698166
    },
    {
        "content": "<p>Otherwise they should be similar.</p>",
        "id": 226909334,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613698173
    }
]