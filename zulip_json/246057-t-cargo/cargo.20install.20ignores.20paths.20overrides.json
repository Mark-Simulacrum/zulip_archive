[
    {
        "content": "<p>Hi all, I hope this is the right place to ask.</p>\n<p>Does anyone know if <code>cargo install</code> respects the <code>paths</code> overrides in <code>.cargo/config.toml</code>? As far as I can tell, it does not, even though <code>cargo build</code> does the right thing. Is this intended behaviour / how can we work around it (other than doing the install ourselves manually)?</p>\n<p>For the curious: our use case is that we're porting rust to a new OS so we have to patch <code>libc</code> and such (upstreaming isn't viable for us atm as we like to break things). As far as I can tell <code>paths</code> overrides is the best way to do this transparently (or maybe not?)</p>",
        "id": 237644113,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620301442
    },
    {
        "content": "<p>It depends on how you are running <code>cargo install</code>.  If it is <code>cargo install --path FOO</code>, then it loads the config from CARGO_HOME and FOO are any ancestor.</p>\n<p>In general, <code>paths</code> overrides are kinda old and can be finicky.  <code>[patch]</code> tables are the recommended way to override a dependency.</p>\n<p>But if you are doing this in <code>rust-lang/rust</code>, it does not use <code>cargo install</code>, so I'm a bit confused on that part.  Regardless, if you are porting rustc, I would recommend using <code>[patch]</code>.</p>",
        "id": 237680050,
        "sender_full_name": "Eric Huss",
        "timestamp": 1620315467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span>  we use <code>paths</code> as a sort of global patch, so that any crate which tries to depend on libc will grab it from our local copy rather than <a href=\"http://crates.io\">crates.io</a> — if i understand it correctly, [patch] is per-crate (is this right?)</p>\n<p>for rustc itself we just modify the Cargo.toml to depend on our libc directly (rather than relying on any cargo config.toml)</p>\n<p>yes, we are using <code>cargo install --path foo</code> my original point was that it seems to have picked up the cargo config.toml (since it is using the right target and such) but it isn’t applying the <code>paths</code> correctly — i will triple check that though</p>",
        "id": 237718999,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620330879
    },
    {
        "content": "<p>You may be interested in the unstable <a href=\"https://doc.rust-lang.org/cargo/reference/unstable.html#patch-in-config\">https://doc.rust-lang.org/cargo/reference/unstable.html#patch-in-config</a></p>",
        "id": 237719340,
        "sender_full_name": "Eh2406",
        "timestamp": 1620331080
    },
    {
        "content": "<p>oh nice, that looks perfect</p>",
        "id": 237719633,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620331206
    },
    {
        "content": "<p>Now that we've switched over to <code>patch-in-config</code>, I think the reason why <code>paths</code> wasn't working with install there becomes apparent: we get a 'patched crate is not used in dependency graph' warning</p>\n<p>Here is the scenario: we build <code>ripgrep</code> which has <code>libc</code> version 0.2.71 in its lockfile. When we go to build, it sees that our patched  libc (which has version <code>0.2.93</code>) can't be used, so it falls back to <a href=\"http://crates.io\">crates.io</a> and complains  (same behaviour with <code>install --locked</code>).</p>\n<p>If we instead <code>cargo install</code> (without <code>--locked</code>), then it tries to grab the latest version of <code>libc</code> which is now <code>0.2.94</code>, and since this is incompatible with our patch (0.2.93) it gives the same warning and then errors</p>\n<p>As far as I can tell the only real workaround is to do <code>cargo update -p libc --precise 0.2.93</code> first, then <code>install --locked</code>, which is a bit annoying as now we have to hardcode 0.2.93 in some places that is a bit inconvenient</p>\n<p>we really just need some way for our patch to shadow all previous compatible versions of the crate (then when it goes to grab <code>0.2.71</code> it will use our version), but afaict this isn't possible with <code>[patch]</code> -- any thoughts?</p>",
        "id": 237974562,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620497546
    },
    {
        "content": "<blockquote>\n<p>we really just need some way for our patch to shadow all previous compatible versions of the crate</p>\n</blockquote>\n<p>We where just starting to talk about something like that, but it is still at the talking stage. </p>\n<blockquote>\n<p>When we go to build, it sees that our patched libc (which has version 0.2.93) can't be used</p>\n</blockquote>\n<p>In what way cant it be used? If is likely that if it did not fall back it would just fail at that point.</p>",
        "id": 237986035,
        "sender_full_name": "Eh2406",
        "timestamp": 1620509499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> well 0.2.71 is in the lockfile and our patch has version 0.2.93 so it won’t use it right? at least that’s what seems to be happening</p>",
        "id": 238026428,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620556570
    },
    {
        "content": "<p>is there a place where this discussion is happening? some github issue perhaps?</p>",
        "id": 238026571,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620556748
    },
    {
        "content": "<p>(it’s also a bit strange because <code>paths</code> doesn’t seem to have a problem with that lockfile version mismatch, but <code>[patch]</code> does)</p>",
        "id": 238027443,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620557603
    },
    {
        "content": "<p>(somewhat related issue that i've run into now: <a href=\"https://github.com/rust-lang/cargo/issues/9470\">https://github.com/rust-lang/cargo/issues/9470</a>)</p>",
        "id": 238152566,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620657456
    },
    {
        "content": "<p>It looks like maybe you are using <code>cargo install</code> of a crate from <a href=\"http://crates.io\">crates.io</a>?  In that case, you won't be able to patch it.  You'll need to download the package and modify the lock file to patch the specific version of libc that you are using.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"228354\">Matt Taylor</span> <a href=\"#narrow/stream/246057-t-cargo/topic/cargo.20install.20ignores.20paths.20overrides/near/238026571\">said</a>:</p>\n<blockquote>\n<p>is there a place where this discussion is happening? some github issue perhaps?</p>\n</blockquote>\n<p>It was just an question posed during a team meeting, there aren't any github issues for it that I am aware of.</p>",
        "id": 238156854,
        "sender_full_name": "Eric Huss",
        "timestamp": 1620658907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/cargo.20install.20ignores.20paths.20overrides/near/238156854\">said</a>:</p>\n<blockquote>\n<p>It looks like maybe you are using <code>cargo install</code> of a crate from <a href=\"http://crates.io\">crates.io</a>?  In that case, you won't be able to patch it.  You'll need to download the package and modify the lock file to patch the specific version of libc that you are using.</p>\n</blockquote>\n<p>Yeah, that is what we are currently doing, but it is quite clunky:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"228354\">Matt Taylor</span> <a href=\"#narrow/stream/246057-t-cargo/topic/cargo.20install.20ignores.20paths.20overrides/near/237974562\">said</a>:</p>\n<blockquote>\n<p>As far as I can tell the only real workaround is to do <code>cargo update -p libc --precise 0.2.93</code> first, then <code>install --locked</code>, which is a bit annoying as now we have to hardcode 0.2.93 in some places that is a bit inconvenient</p>\n<p>we really just need some way for our patch to shadow all previous compatible versions of the crate (then when it goes to grab <code>0.2.71</code> it will use our version), but afaict this isn't possible with <code>[patch]</code> -- any thoughts?</p>\n</blockquote>",
        "id": 238159767,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620659932
    },
    {
        "content": "<p>TL;DR It would be nice if we could patch out all versions of the crate which are compatible with our patched version</p>",
        "id": 238160102,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620659998
    },
    {
        "content": "<p>(not to mention the related issue which is causing trouble)</p>",
        "id": 238160419,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1620660086
    }
]