[
    {
        "content": "<p>Hello! I'm working on a change to libc to fix some broken platforms, and there is a request to look into adding CI to the libc project for the platforms I'm fixing, so they don't bitrot.  As it happens, there's no official builds for these platforms (e.g. mipsel-unknown-linux-uclibc) so the suggestion was made that I try to use -Z build-std to build the necessary dependencies, rather than building a full rust toolchain in CI, which was not considered a good use of resources.  However, I'm running into the problem that -Z build-std does not seem to be able to consider patches, so it always tries to build the current toolchain's idea of libc, which of course fails.  It's a bit of a chicken-and-egg problem.</p>\n<p>In working on this, the suggestion was made that maybe libc doesn't need all of build-std, but rather maybe just needs core.  However, I am well out of my element here and would appreciate some help understanding how to get what I need.  Is it possible to use build-std in this way?  Or am I barking up the wrong tree?</p>\n<p>For reference, the PR in question is here: <a href=\"https://github.com/rust-lang/libc/pull/1975\">https://github.com/rust-lang/libc/pull/1975</a></p>\n<p>Many thanks for any assistance!</p>",
        "id": 218886939,
        "sender_full_name": "Jonah Petri",
        "timestamp": 1607113545
    },
    {
        "content": "<p>(I suggested both -Z build-std and only building core, so if this is the wrong approach you can blame me)</p>",
        "id": 218887404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607113788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369589\">@Jonah Petri</span> Have you tried <code>-Zbuild-std=core</code>?  That should restrict it to core only.  I think you also need <code>--no-default-features</code>.</p>",
        "id": 218888013,
        "sender_full_name": "Eric Huss",
        "timestamp": 1607114095
    },
    {
        "content": "<p>That got me farther!  libc builds, but libc-test doesn't.  Cargo panics like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>skrap@pop-os:/tmp/libc/libc-test$ RUST_BACKTRACE=1 cargo +nightly build --target mipsel-unknown-linux-uclibc -Z build-std=core --no-default-features\n    Updating crates.io index\nthread &#39;main&#39; panicked at &#39;no entry found for key&#39;, src/tools/cargo/src/cargo/core/compiler/context/compilation_files.rs:324:9\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/std/src/panicking.rs:493:5\n   1: core::panicking::panic_fmt\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/core/src/panicking.rs:92:14\n   2: core::option::expect_failed\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/core/src/option.rs:1260:5\n   3: cargo::core::compiler::context::compilation_files::CompilationFiles::outputs\n   4: cargo::core::compiler::context::Context::compile\n   5: cargo::ops::cargo_compile::compile_ws\n   6: cargo::ops::cargo_compile::compile\n   7: cargo::commands::build::exec\n   8: cargo::cli::main\n   9: cargo::main\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 218888588,
        "sender_full_name": "Jonah Petri",
        "timestamp": 1607114505
    },
    {
        "content": "<p>I think that's the first cargo panic I've ever seen</p>",
        "id": 218888742,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607114604
    },
    {
        "content": "<p>You won't be able to build tests with just core.  Also, running <code>cargo build</code> in that directory doesn't do anything since that package is a test-only package.   I can probably fix the panic, though.</p>",
        "id": 218892287,
        "sender_full_name": "Eric Huss",
        "timestamp": 1607116577
    },
    {
        "content": "<p>Yeah, good point, so libc-test is a test-only package, and has requirements beyond core.  Presumably any CI for libc would need libc-test, so I am back to my original chicken-and-egg problem: I can't build -Z build-std against custom libc.  Do I have that right?</p>",
        "id": 218892525,
        "sender_full_name": "Jonah Petri",
        "timestamp": 1607116753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369589\">@Jonah Petri</span> I think @johntitor would be ok with just making sure it compiles in a first pass</p>",
        "id": 218892849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607116979
    },
    {
        "content": "<p>actually I don't think running tests will work anyway because it's cross compiled</p>",
        "id": 218892866,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607116991
    },
    {
        "content": "<p>Yeah I was going to spin up something in qemu to run the tests, but I suppose that can wait until later.</p>",
        "id": 218893021,
        "sender_full_name": "Jonah Petri",
        "timestamp": 1607117078
    },
    {
        "content": "<p>that seems a little overkill tbh <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218893069,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607117122
    },
    {
        "content": "<p>Perhaps, but it was about 3x the work to get the tests to pass compared  to getting it compiling.  Pretty much anything in libc compiles :)  Anyhow, I have a path forward, so thanks <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> and <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> !</p>",
        "id": 218893355,
        "sender_full_name": "Jonah Petri",
        "timestamp": 1607117294
    }
]