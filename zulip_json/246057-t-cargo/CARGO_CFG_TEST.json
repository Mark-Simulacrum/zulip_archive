[
    {
        "content": "<p>Hi, is there an alternative to detect that a build script is run to build a version of the lib used as a test? According to the documentation, the environment variable <code>CARGO_CFG_TEST</code> should be set, but it's not the case. I found this old issue about it: <a href=\"https://github.com/rust-lang/cargo/issues/4789\">https://github.com/rust-lang/cargo/issues/4789</a></p>",
        "id": 211381644,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1601152661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325787\">@Émile Grégoire</span> The build script runs for the package as a whole, it is not possible to determine which command is being used (build, test, check, etc.).  Where in the documentation does it say that <code>CARGO_CFG_TEST</code> should be set?</p>",
        "id": 211389870,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601167193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> It's written <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">here</a> that a <code>CARGO_CFG_&lt;cfg&gt;</code> is generated for each configuration option of the package being built, and it's written <a href=\"https://doc.rust-lang.org/reference/conditional-compilation.html#test\">here</a> that <code>test</code> is such an option. So I thought it would be set.</p>",
        "id": 211390358,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1601168121
    },
    {
        "content": "<p>I see.  That should definitely be clearer about what gets set.</p>",
        "id": 211390403,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601168170
    },
    {
        "content": "<p>So I don't have any option to modify stuff in my build script if it's being built for tests?</p>",
        "id": 211390409,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1601168210
    },
    {
        "content": "<p>not really.  you could (manually) set a feature when running tests.</p>",
        "id": 211390420,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601168250
    },
    {
        "content": "<p>I'm creating a crate that provides a FFI to a C++ library. I write a C FFI in C++ that I compile with <code>cc</code>. The C++ library in question is not open-source, I only have the headers and a compiled .lib (it's Windows only). And that .lib relies on symbols defined in an executable (the executable loads the DLL that is written in Rust). My goal was to have a C++ macro to stub everything when testing and not link with the .lib, so users could write tests without having undefined symbols.</p>",
        "id": 211390486,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1601168380
    },
    {
        "content": "<p>It's a weird use-case tbh</p>",
        "id": 211390530,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1601168406
    },
    {
        "content": "<p>I haven't thought about having a feature though. I could filter by <code>CARGO_FEATURE_&lt;name&gt;</code> then... I might try that one.</p>",
        "id": 211390554,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1601168490
    },
    {
        "content": "<p>I could set it in <code>required-features</code> of <code>[[test]]</code> in the manifest, right? Instead of providing it in the command line manually.</p>",
        "id": 211390747,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1601168766
    },
    {
        "content": "<p><code>required-features</code> will just cause the test to be skipped if the feature isn't set. You still have to pass the feature on the command-line to enable it.</p>",
        "id": 211394144,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601174477
    }
]