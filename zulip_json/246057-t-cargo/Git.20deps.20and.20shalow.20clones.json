[
    {
        "content": "<p>When Cargo downloads a git dep, does it do a shallow clone? What if it is a git dep on a Tag?<br>\nLooking <a href=\"https://github.com/rust-lang/cargo/blob/58a961314437258065e23cb6316dfc121d96fb71/src/cargo/sources/git/source.rs#L154\">here</a> and <a href=\"https://github.com/rust-lang/cargo/blob/7d7c37089d6028bd3a96161ed7cf8e53bda80664/src/cargo/sources/git/utils.rs#L83\">here</a> it looks like the answer is no. Did I miss something? If not is there a reason it can't be a shallow clone?</p>",
        "id": 256092645,
        "sender_full_name": "Eh2406",
        "timestamp": 1633366487
    },
    {
        "content": "<p>When updating a shallow clone, a lot more processing power is necessary on the server than for a deep clone to determine which objects need to be sent. Homebrew used to do them, but github requested it to be changed: <a href=\"https://github.com/Homebrew/brew/pull/9383\">https://github.com/Homebrew/brew/pull/9383</a></p>",
        "id": 256093248,
        "sender_full_name": "bjorn3",
        "timestamp": 1633366733
    },
    {
        "content": "<p>Right, but I don't think Cargo does updates on deps. I think it starts over and re downlowads the hole thing.</p>",
        "id": 256093940,
        "sender_full_name": "Eh2406",
        "timestamp": 1633366942
    },
    {
        "content": "<p>If the tag changes.</p>",
        "id": 256093980,
        "sender_full_name": "Eh2406",
        "timestamp": 1633366960
    },
    {
        "content": "<p>I believe it does update. At least when using <code>cargo update</code> without pinning a specific commit or tag.</p>",
        "id": 256094355,
        "sender_full_name": "bjorn3",
        "timestamp": 1633367093
    },
    {
        "content": "<p>Ok, so probably this should only be when there is a specific commit or tag.</p>",
        "id": 256095248,
        "sender_full_name": "Eh2406",
        "timestamp": 1633367404
    },
    {
        "content": "<p>I am not sure github allows you to do a shallow clone of a specific commit instead of specific branch.</p>",
        "id": 256095919,
        "sender_full_name": "bjorn3",
        "timestamp": 1633367645
    },
    {
        "content": "<p>Github does have a way to download a zip file of a specific commit though.</p>",
        "id": 256095972,
        "sender_full_name": "bjorn3",
        "timestamp": 1633367668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> libgit2 does not support shallow clones.</p>\n<p>Also, when you update the dependency, it shouldn't redownload the whole thing, it should do an incremental fetch.  Cargo does make a complete copy of the repo, but that is a local copy (similar to a git workspace).</p>",
        "id": 256100558,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633369376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> Thank you! That makes sense!</p>",
        "id": 256101358,
        "sender_full_name": "Eh2406",
        "timestamp": 1633369686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Git.20deps.20and.20shalow.20clones/near/256095919\">said</a>:</p>\n<blockquote>\n<p>I am not sure github allows you to do a shallow clone of a specific commit instead of specific branch.</p>\n</blockquote>\n<p>I am able to get a shallow clone of a specific commit like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>shallow-test$ git init .\nshallow-test$ git remote add origin https://github.com/rust-lang/cargo.git\nshallow-test$ git fetch --depth=1 origin 4532d20a6bcca226201ae9b8fc17520ee1bf3ec3\n</code></pre></div>\n<p>The stdout chatter tells me it downloaded 763 objects (versus 88353 for a full clone)</p>\n<p>That may not be very ergonomic, but it seems to be possible at the git + github level.</p>",
        "id": 256315675,
        "sender_full_name": "Eric Seppanen",
        "timestamp": 1633466510
    }
]