[
    {
        "content": "<p>I'm working on implementing the <code>{ workspaces = true }</code> RFC. I had a question and I thought maybe I can just ask here. For context:</p>\n<p>RFC: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md\">https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md</a><br>\nPull Request (WIP): <a href=\"https://github.com/rust-lang/cargo/pull/8664\">https://github.com/rust-lang/cargo/pull/8664</a></p>\n<p>How should <code>{ workspace = true }</code> interact with the <code>[patches]</code> and <code>[replace]</code> sections?</p>\n<ol>\n<li>What should happen if you try to patch a <code>{ workspace = true }</code> dependency? </li>\n<li>Can items in the <code>[patch]</code> table specify <code>{ workspace = true }</code>? (I would guess not..)</li>\n<li>Same questions, but for <code>[replace]</code></li>\n</ol>\n<p>Also, hi &amp; nice to meet you all. <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 208943869,
        "sender_full_name": "Mukund Lakshman",
        "timestamp": 1599126767
    },
    {
        "content": "<p>Hi &amp; thanks for working on this!</p>",
        "id": 208966289,
        "sender_full_name": "Eh2406",
        "timestamp": 1599139688
    },
    {
        "content": "<p>I think it should be fine (if albeit a little weird) to <code>[patch]</code> a <code>{workspace=true}</code> dependency. I believe, based on how Cargo works internally, it shouldn't require any special consideration code-wise. Policy-wise, I don't see a reason to specifically forbid it.</p>\n<p>As for specifying <code>{workspace=true}</code> in <code>[patch]</code>, it seems reasonable to forbid that, just because it seems a little confusing. If some use case appears in the future, we could add it, but I can't think of a reason to do that.</p>\n<p>I think <code>[replace]</code> could follow the same rules as <code>[patch]</code>.</p>",
        "id": 208969478,
        "sender_full_name": "Eric Huss",
        "timestamp": 1599141025
    },
    {
        "content": "<p>I would agree patch and replace tables should follow the same rules, but I would say you should be able to <code>[patch]</code> a dependency listed as <code>workspace = true</code> for sure</p>",
        "id": 208972708,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599142243
    },
    {
        "content": "<p>basically <code>[patch]</code> should apply to <code>[workspace.dependencies]</code> as it would to <code>[dependencies]</code></p>",
        "id": 208972746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599142261
    },
    {
        "content": "<p>That makes sense, thanks for clarifying ^^</p>",
        "id": 208973573,
        "sender_full_name": "Mukund Lakshman",
        "timestamp": 1599142584
    },
    {
        "content": "<p>I would also agree that you shouldn't be able to use <code>{ workspace = true }</code> in a patch or replace section, until there's some concrete use case or semantic where that would make sense.</p>",
        "id": 208985878,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599147354
    },
    {
        "content": "<p>Also, thank you so much for working on this!</p>",
        "id": 208986068,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599147429
    },
    {
        "content": "<p>Thanks for the encouragement! This is coming along. I had some additional questions that came up. Neither of these things are blocking my implementation, but just thought I'd bubble them up sooner rather than later:</p>\n<ol>\n<li>The RFC says:</li>\n</ol>\n<blockquote>\n<p>For dev-dependencies where the referenced package is <code>publish = false</code>, then the dependency will be dropped. Otherwise Cargo will assume that <code>version = \"$dependency_version\"</code> was specified, meaning that it requires at least the current version and otherwise any semver-compatible version.\"  [a]</p>\n</blockquote>\n<p>But the reference-level explanation [b] does not distinguish between <code>dev-dependencies</code> and other kinds of dependencies. Is the intended behavior that <code>dev-dependencies</code> behaves differently from other kinds of dependencies? </p>\n<p>In addition, how should it behave if <code>publish</code> is a list of registries rather than a bool?</p>\n<ol start=\"2\">\n<li>Next:<blockquote>\n<p>Note that directives like license-file are resolved relative to their definition, so license-file is relative to the [workspace] section that defined it. [c]</p>\n</blockquote>\n</li>\n</ol>\n<p>The license-file and readme may be outside the package root. If the license-file is in <code>../../../mukund/private/secret-project/foo</code>, we probably don't want to publish that in the manifest. One possible solution: we could copy the root workspace's file into the package root. This is what we currently do if the <code>license-file</code> lives outside the package root. </p>\n<p>[a] <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md#no-longer-need-both-version-and-path-to-publish-to-cratesio\">https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md#no-longer-need-both-version-and-path-to-publish-to-cratesio</a><br>\n[b] <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md#path-dependencies-infer-version-directive\">https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md#path-dependencies-infer-version-directive</a><br>\n[c] <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md#placeholder-values\">https://github.com/rust-lang/rfcs/blob/master/text/2906-cargo-workspace-deduplicate.md#placeholder-values</a></p>",
        "id": 209342682,
        "sender_full_name": "Mukund Lakshman",
        "timestamp": 1599535604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332369\">@Mukund Lakshman</span> ah I think for your first question I wouldn't distinguish between dev and non-dev dependencies</p>",
        "id": 209409317,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599581659
    },
    {
        "content": "<p>I think I realized later on that there wasn't a need to do that, but I never went back and upated the first part</p>",
        "id": 209409345,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599581673
    },
    {
        "content": "<p>For licenses, I think we <a href=\"https://github.com/rust-lang/cargo/blob/99134aee3911e7aafeeb645a9d47a7d2e984e2eb/src/cargo/ops/cargo_package.rs#L203-L260\">already have some logic</a> for copying the file into the package if it lives outside, so I don't think this RFC affects much of that</p>",
        "id": 209409625,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599581788
    },
    {
        "content": "<p>but was there something else you were concerned about?</p>",
        "id": 209409645,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599581797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>  For 1, I am still unsure what to do in this situation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Cargo.toml</span>\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">&quot;./foo&quot;</span> <span class=\"p\">}</span>\n\n<span class=\"c1\"># foo/Cargo.toml</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"mf\">1.2.3</span>\n<span class=\"n\">publish</span> <span class=\"o\">=</span> <span class=\"k\">[&quot;registry1&quot;]</span>\n</code></pre></div>\n\n\n<p>For now, I'm going to treat an array of registries (<code>publish = [..]</code>) the same as <code>publish = false</code>.</p>\n<p>For 2, I think we just need similar logic for readmes that we have for license files. I think I have enough to code it up. </p>\n<p>Should have a first draft of the PR ready tonight, if having some code would help disambiguate.</p>",
        "id": 209415283,
        "sender_full_name": "Mukund Lakshman",
        "timestamp": 1599584529
    },
    {
        "content": "<p>oh I think I'd treat <code>publish = false</code> as unique, and anything else as \"fill in the version\"</p>",
        "id": 209415363,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599584575
    },
    {
        "content": "<p>the intention is that <code>[dev-dependencies]</code> with <code>publish=false</code> don't hinder publication</p>",
        "id": 209415384,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599584588
    },
    {
        "content": "<p>everything else is just convenience</p>",
        "id": 209415396,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599584592
    },
    {
        "content": "<p><code>[dependencies]</code> with <code>publish = false</code> is an error though (and it'll get reported later)</p>",
        "id": 209415430,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599584607
    },
    {
        "content": "<p>Okay, that makes sense to me now.</p>",
        "id": 209415983,
        "sender_full_name": "Mukund Lakshman",
        "timestamp": 1599584907
    }
]