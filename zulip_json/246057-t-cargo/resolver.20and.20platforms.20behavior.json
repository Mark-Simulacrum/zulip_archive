[
    {
        "content": "<p>Is there some documentation on what exactly to expect in the <code>resolve</code> section is expected to include? I'm specifically wondering if that map contains cross platform dependencies or if they've been \"resolved\" out.</p>\n<p>For more context, I'm working on <a href=\"https://github.com/google/cargo-raze\">https://github.com/google/cargo-raze</a> which uses cargo metadata to generate Bazel dependencies and we need to resolve dependencies for a specified set of platform triples. Is the <code>resolve</code> section something I could use or would that only contain information about a single platform?</p>",
        "id": 235770918,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619138863
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/commands/cargo-metadata.html\">https://doc.rust-lang.org/cargo/commands/cargo-metadata.html</a> should have some answers. In particular, \"resolve\" includes all platforms unless the <code>--filter-platform</code> flag is used.</p>",
        "id": 235771382,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619139275
    },
    {
        "content": "<blockquote>\n<p>By default, this includes all dependencies for all target platforms.</p>\n</blockquote>\n<p>How are target platforms determined?</p>",
        "id": 235783966,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619151006
    },
    {
        "content": "<p>Not sure if I understand the question correctly. When you say <code>--filter-platform=x86_64-apple-darwin</code>, cargo runs <code>rustc --print=cfg --target x86_64-apple-darwin</code>, parses the output, and then has its own <code>cfg</code> comparison code. Target names are matched as exact strings. If you don't include <code>--filter-platform</code>, it includes all <code>[target]</code> dependency tables (includes all named targets and assumes all <code>cfg</code> expressions are true).</p>",
        "id": 235860973,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619191652
    },
    {
        "content": "<p>And what if <code>[target]</code> is unspecified?<br>\n<a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#platform-specific-dependencies\">https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#platform-specific-dependencies</a></p>",
        "id": 235864628,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619193096
    },
    {
        "content": "<p>Sorry, I'm not sure what that means.  If there are no <code>[target]</code> tables, then the package does not have any target-specific dependencies.</p>",
        "id": 235864918,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619193215
    },
    {
        "content": "<p>right, so what is the default behavior in that case when generating the <code>resolve</code> metadata? Does any target filtering happen by default or are all targets included? In other words, is setting nothing the same as setting everything?</p>",
        "id": 235865391,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619193415
    },
    {
        "content": "<p>Oh, yeah.  If you don't include <code>--filter-platform</code>, there is no filtering (everything is included).</p>",
        "id": 235865818,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619193591
    },
    {
        "content": "<p>Everything from <code>[target]</code>?</p>",
        "id": 235865989,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619193636
    },
    {
        "content": "<p>Yea, every <code>[target]</code> (and all the non-target tables of course).</p>",
        "id": 235866072,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619193661
    },
    {
        "content": "<p>To clarify a bit, I understand the behavior of <code>--filter-platform</code> now. But now I'm wondering about the <code>[target]</code> field when empty</p>",
        "id": 235866119,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619193682
    },
    {
        "content": "<p>The specific situation is if there's no targets specified, and I go and run <code>cargo metadata</code> on a linux machine, would it generate the same <code>resolve</code> section as a windows machine using the same manifest at the same time?</p>",
        "id": 235866324,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619193751
    },
    {
        "content": "<p>yep.  It is essentially giving you what appears in <code>Cargo.lock</code> which is platform-agnostic.</p>",
        "id": 235866473,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619193800
    },
    {
        "content": "<p>Awesome! Thanks for walking me through that! Much appreciated :D</p>",
        "id": 235866548,
        "sender_full_name": "UebelAndre",
        "timestamp": 1619193835
    }
]