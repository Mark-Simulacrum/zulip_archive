[
    {
        "content": "<p>I'm working on an extension to <a href=\"https://github.com/rust-lang/rust/pull/85833\">rustdoc</a>. Given a function <code>foo</code> in crate <code>a</code>, this extension finds the reverse-dependencies <code>b</code> of <code>a</code>, and looks for call-sites of <code>foo</code> in <code>b</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// a/src/lib.rs</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// b/src/main.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">a</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The goal is to implement a feature such that when calling <code>rustdoc b/src/main.rs --scrape-examples a</code>, then this outputs a file that looks like <code>{\"a::foo\": [line 2 in b/src/main.rs]}</code>. I'm trying to define this file format, and the core issue is how to encode a reference to a function (like <code>foo</code>).</p>\n<p>Nominally, the right tool for this (I believe) is <code>DefPathHash</code>, consisting of <code>StableCrateId</code> and <code>DefPath</code>. However, I'm running into the following issue. The workflow of this extension is as follows:</p>\n<ol>\n<li>Run <code>rustc a/src/lib.rs --profile check -C metadata &lt;hash&gt;</code>. This generates the <code>rmeta</code> needed to type-check the reverse-dependencies.</li>\n<li>Run <code>rustdoc b/src/main.rs --scrape-examples a</code>. This generates a <code>target/tmp/b.examples</code> file. </li>\n<li>Run <code>rustdoc a/src/lib.rs --with-examples target/tmp/b.examples</code>. This uses the <code>b.examples</code> file to include the call-site in <code>b::main</code> in the documentation for <code>a::foo</code>.</li>\n</ol>\n<p>The issue is that the <code>DefPathHash</code> for <code>a::foo</code> is not the same in steps (2) and (3). Both the <code>StableCrateId</code> and the <code>local_hash</code> of the <code>DefPath</code> are different. From the documentation of <code>StableCrateId</code>, my guess is that the root cause is the <code>-C metadata</code> flag generated by Cargo. The compile units <code>U1</code> (for checking <code>a</code>) and <code>U3</code> (for documenting <code>a</code>) have different metadata hashes, e.g. because they have different a <code>CompileKind</code>. </p>\n<p>Do y'all have any recommendations for how to deal with this issue given Cargo's architecture?</p>",
        "id": 254115674,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632170991
    },
    {
        "content": "<p>this is probably something we can fix in Cargo to have steps 1/3 in your example pass the same <code>-C metadata</code> hash</p>",
        "id": 254123003,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1632174096
    },
    {
        "content": "<p>I don't think there's any intrinsic need to have the hashes be different</p>",
        "id": 254123025,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1632174106
    },
    {
        "content": "<p>Would this be done just by hashing fewer things? eg in the metadata column of <a href=\"https://github.com/rust-lang/cargo/blob/master/src/cargo/core/compiler/fingerprint.rs#L56-L78\">this table</a>. I think at least CompileKind  and immediate dependency's hashes would have to be removed.</p>",
        "id": 254133071,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632179831
    },
    {
        "content": "<p>I don't think it can completely remove the <code>CompileMode</code>, as it is necessary to distinguish multiple variants of a crate. Cargo uses a single metadata hash value for both <code>-C metadata</code> and for the <code>-C extra-filename</code>, and the extra-filename helps prevent filename collisions on disk.  For example, building a binary as an executable, and building it as a unittest, we want to make sure those two have different filenames.  However, I think we can treat the hash of <code>CompileMode::Doc</code> and <code>CompileMode::Check</code> the same.  That hash is done <a href=\"https://github.com/rust-lang/cargo/blob/9a28ac83c9eb73e42ffafac552c0a55f00dbf40c/src/cargo/core/compiler/context/compilation_files.rs#L543\">on this line</a>.</p>",
        "id": 254133869,
        "sender_full_name": "Eric Huss",
        "timestamp": 1632180232
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> for the pointer. I ran an experiment and confirmed my hypothesis. With this patch, the <code>DefPathHash</code> successfully matches between the two crates: <a href=\"https://gist.github.com/willcrichton/0e29eba751ab80eec3d59ac972a25223\">https://gist.github.com/willcrichton/0e29eba751ab80eec3d59ac972a25223</a></p>\n<p>I commented out the <code>deps_metadata</code> hash, and modified the <code>CompileMode</code> hash to not distinguish <code>Doc</code> and <code>Check</code>. I also double-checked that both changes are necessary -- it's not sufficient to do either one in isolation.</p>\n<p>However, I'm assuming that removing <code>deps_metadata</code> entirely is not good? So I'm not sure how to resolve that issue.</p>",
        "id": 254138432,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632183404
    },
    {
        "content": "<p>I would expect the <code>deps_metadata</code> to be the same between <code>cargo check</code> and <code>cargo doc</code>.  If it's not, maybe investigate why?</p>",
        "id": 254141622,
        "sender_full_name": "Eric Huss",
        "timestamp": 1632186276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span> this is the hash for the library when scraping the examples, right? The examples have dev-dependencies available and the main library doesn't, that might be the difference</p>",
        "id": 254224440,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632237389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> no, the dev-dependencies would only change the hash of the compilation unit for the example, not for the library crate.</p>\n<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> upon investigation, the difference is that for a given crate, the <code>Doc</code> unit's dependencies are a superset of the <code>Check</code> unit's dependencies. If a crate <code>a</code> has a public item that references a type <code>b::Foo</code>, then <code>b</code> is included as both a <code>Check</code> and <code>Doc</code> dependency.</p>",
        "id": 254243272,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632244149
    },
    {
        "content": "<p>That seems unnecessary? b should be exactly the same as if you'd run rustc on it, rustdoc doesn't emit metadata</p>",
        "id": 254243476,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632244216
    },
    {
        "content": "<p>Oh, yea, I forgot about that.  </p>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> There needs to be a dependency on both.  rustdoc needs the rmeta of the dependency for querying the metadata, and the dependency also needs to be documented so that things like indexing and linking work.</p>",
        "id": 254243738,
        "sender_full_name": "Eric Huss",
        "timestamp": 1632244330
    },
    {
        "content": "<p>\"linking\" in the HTML sense</p>",
        "id": 254243790,
        "sender_full_name": "Eric Huss",
        "timestamp": 1632244351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> right - but it doesn't need to change the metadata, right?</p>",
        "id": 254243797,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632244353
    },
    {
        "content": "<p>Couldn't the <code>Doc</code> unit for <code>b</code> just be part of the root set, rather than the dependency set of <code>a</code>?</p>",
        "id": 254243880,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632244385
    },
    {
        "content": "<p>Hm.  That I'm not sure about.  I can't offhand think of a problem with excluding it.</p>",
        "id": 254243943,
        "sender_full_name": "Eric Huss",
        "timestamp": 1632244419
    },
    {
        "content": "<p>Like <code>b</code>'s docs do need to be generated, but the documentation step for <code>a</code> doesn't actually depend on that when invoking <code>rustdoc</code> (I think this is rephrasing what you're saying Joshua?)</p>",
        "id": 254244038,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632244446
    },
    {
        "content": "<p>Also, this whole discussion has made me concerned about how fragile it would be to rely on <code>metadata</code> being the same between <code>Doc</code> and <code>Check</code>... I can see how future changes could easily break this invariant. We could add tests for it, but still not ideal.</p>",
        "id": 254244570,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632244674
    },
    {
        "content": "<p>It seems like these are our options:</p>\n<ol>\n<li>Remove dependencies from being included in a unit's hash. (Unclear if this breaks anything?)</li>\n<li>Change <code>Doc</code>'s dependencies to be the same as <code>Check</code>, if possible.</li>\n<li>Give up on <code>StableCrateId</code> entirely, and pursue a different method for serializing identifiers.</li>\n</ol>",
        "id": 254245659,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632245127
    },
    {
        "content": "<p>Actually, sorry, I think I was misreading the logs and was completely wrong. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> your intuition was right -- it seems like dev-dependencies are actually the culprit.</p>",
        "id": 254252392,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632247844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265377\">Will Crichton</span> <a href=\"#narrow/stream/246057-t-cargo/topic/StableCrateId.20and.20metadata/near/254244570\">said</a>:</p>\n<blockquote>\n<p>Also, this whole discussion has made me concerned about how fragile it would be to rely on <code>metadata</code> being the same between <code>Doc</code> and <code>Check</code>... I can see how future changes could easily break this invariant. We could add tests for it, but still not ideal.</p>\n</blockquote>\n<p>I think as long as it's tested it will be ok</p>",
        "id": 254252667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632247951
    },
    {
        "content": "<p>I agree just making the change and hoping it doesn't break is bad</p>",
        "id": 254252689,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632247959
    },
    {
        "content": "<p>OH. I think this is an issue b/c it interacts with this change I had to make so dev-dependencies were available while scraping reverse-dependencies: <a href=\"https://github.com/rust-lang/cargo/pull/9525/files#diff-a78dec059e787d4e9a1a70144c9d2f1824d374e9ab6ccc65ef7aba6bf5b21a32R422-R425\">https://github.com/rust-lang/cargo/pull/9525/files#diff-a78dec059e787d4e9a1a70144c9d2f1824d374e9ab6ccc65ef7aba6bf5b21a32R422-R425</a></p>",
        "id": 254253680,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632248367
    },
    {
        "content": "<p>Ok I managed to fully fix the issue! <a href=\"https://github.com/rust-lang/cargo/pull/9525/commits/534258a7cd399ff36511c6e8d48b53283d9c3482\">https://github.com/rust-lang/cargo/pull/9525/commits/534258a7cd399ff36511c6e8d48b53283d9c3482</a></p>",
        "id": 254256859,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632249660
    },
    {
        "content": "<p>Ok tests failing, not fully fixed yet...</p>",
        "id": 254257195,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632249796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> is there a reason that <code>compute_metadata</code> manually computes <code>deps_metadata</code> rather than just using <code>unit.deps_hash</code>?</p>",
        "id": 254283601,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632260909
    },
    {
        "content": "<p>Those are different hashes.  <code>unit.deps_hash</code> is a straight hash of the all the <code>Unit</code> structs, whereas <code>deps_metadata</code> is a collective hash of the <code>Metadata</code>, which is hashing slightly different information.  <code>deps_metadata</code> should be relatively stable with respect to things like moving a target directory, whereas <code>Unit.deps_hash</code> is just an internal thing.  I think it would be tricky to try to unify them somehow.</p>",
        "id": 254284744,
        "sender_full_name": "Eric Huss",
        "timestamp": 1632261539
    },
    {
        "content": "<p>Got it. Ok, well unifying the hashes seems to be not very feasible. I broke a dozen tests just unifying the hashes of <code>CompileMode::Doc</code> and <code>CompileMode::Test</code>.</p>",
        "id": 254285207,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632261765
    }
]