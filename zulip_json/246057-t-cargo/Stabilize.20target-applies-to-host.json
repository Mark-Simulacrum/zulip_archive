[
    {
        "content": "<p>Is there something I need to do to push this(<a href=\"https://github.com/rust-lang/cargo/pull/9753\">https://github.com/rust-lang/cargo/pull/9753</a>) forward? It's unclear what exactly needs to be done here to get this fix stabilized so that downstreams don't have to keep setting env variable hacks(<a href=\"https://github.com/buildroot/buildroot/blob/ac573c55aac3cbb4257f5388c91321c81095c654/package/pkg-cargo.mk#L26-L50\">https://github.com/buildroot/buildroot/blob/ac573c55aac3cbb4257f5388c91321c81095c654/package/pkg-cargo.mk#L26-L50</a>) to make their cross builds work.</p>",
        "id": 269202222,
        "sender_full_name": "James Hilliard",
        "timestamp": 1643078667
    },
    {
        "content": "<p>So, the comment from Alex back in August still seems to apply: for compatibility, such a build needs to be compatible with the target paths used for a non-cross-compile build.</p>",
        "id": 269283681,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643128617
    },
    {
        "content": "<p>That hasn't been fixed, and would need to be.</p>",
        "id": 269283704,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643128627
    },
    {
        "content": "<p>More generally, we need to feel confident in backwards compatibility, and based on discussion in today's Cargo meeting, we don't feel like the design has taken backwards compatibility into account, and we don't have the bandwidth to do that design work ourselves.</p>",
        "id": 269285485,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643129314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Stabilize.20target-applies-to-host/near/269283681\">said</a>:</p>\n<blockquote>\n<p>So, the comment from Alex back in August still seems to apply: for compatibility, such a build needs to be compatible with the target paths used for a non-cross-compile build.</p>\n</blockquote>\n<p>I still don't understand how this is an issue for stabilizing <code>target-applies-to-host</code> at all since stabilizing <code>target-applies-to-host</code> would not break compatibility anywhere due to it not actually changing any default behavior whatsoever AFAIU, it only makes available the <code>target-applies-to-host</code> setting. The default change which has the potential to cause breakage was part of the <code>host-config</code> feature which was planned to be stabilized well after <code>target-applies-to-host</code>.</p>",
        "id": 269369044,
        "sender_full_name": "James Hilliard",
        "timestamp": 1643178787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Stabilize.20target-applies-to-host/near/269285485\">said</a>:</p>\n<blockquote>\n<p>More generally, we need to feel confident in backwards compatibility, and based on discussion in today's Cargo meeting, we don't feel like the design has taken backwards compatibility into account, and we don't have the bandwidth to do that design work ourselves.</p>\n</blockquote>\n<p>Backwards compatibility was from my understanding already addressed in the design of this feature by first providing the <code>target-applies-to-host</code> flag so that projects can set their desired behavior well before any defaults get changed(since we eventually wanted to deprecate the default broken for cross compilation behavior). Any project that actually needs to preserve the existing behavior would simply apply <code>CARGO_TARGET_APPLIES_TO_HOST=\"true\"</code> before the default change to retain the existing behavior, but in any case the default change is separate from the <code>target-applies-to-host</code> stabilization and I don't see what's blocking simply making <code>CARGO_TARGET_APPLIES_TO_HOST</code> available in stable.</p>",
        "id": 269369475,
        "sender_full_name": "James Hilliard",
        "timestamp": 1643179250
    },
    {
        "content": "<p>This isn't some unimportant feature either as <code>CARGO_TARGET_APPLIES_TO_HOST=\"false\"</code> behavior is effectively mandatory for making cross compilation work with build-scripts since the existing logic is broken for target==host triple builds.</p>",
        "id": 269369677,
        "sender_full_name": "James Hilliard",
        "timestamp": 1643179494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399686\">@James Hilliard</span> Thank you for clarifying. From the PR description I got the (apparently incorrect) impression that you wanted to change the default, rather than just stabilize the <em>option</em> without changing the default.</p>",
        "id": 269370911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643180933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Stabilize.20target-applies-to-host/near/269370911\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"399686\">James Hilliard</span> Thank you for clarifying. From the PR description I got the (apparently incorrect) impression that you wanted to change the default, rather than just stabilize the <em>option</em> without changing the default.</p>\n</blockquote>\n<p>Right, the PR doesn't change any defaults, just makes available the option, the default was not going to be changed until well after the option(since the option can allows one to preserve the existing behavior as well).</p>",
        "id": 269371019,
        "sender_full_name": "James Hilliard",
        "timestamp": 1643181049
    },
    {
        "content": "<p>So does stabilizing the option look like in the PR look fine or do I need to do something still?</p>",
        "id": 270599632,
        "sender_full_name": "James Hilliard",
        "timestamp": 1643914716
    }
]