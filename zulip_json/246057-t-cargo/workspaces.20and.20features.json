[
    {
        "content": "<p>If I have a workspace with multiple crates in it, two of those crates depend on a third-party crate, and one of them enables a feature, will cargo build the third-party crate with that feature and use that for both of my crates? If so, is there any way to tell it to build the third-party crate twice and not enable the feature for my crate that doesn't need it? (Other than breaking up the workspace.)</p>",
        "id": 207908189,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598310805
    },
    {
        "content": "<p>If you build the workspace members separately (with separate <code>cargo</code> commands), it will compile the shared dep with different features. If you build the members at the same time, it will be shared.</p>",
        "id": 207908320,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598310949
    },
    {
        "content": "<p>Argh. That feels even less predictable. :(</p>",
        "id": 207908405,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311009
    },
    {
        "content": "<p>Is there any way to avoid that?</p>",
        "id": 207908412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311019
    },
    {
        "content": "<p>not that I know of, the behaviour is inherent to how cargo works.</p>",
        "id": 207908454,
        "sender_full_name": "nagisa",
        "timestamp": 1598311062
    },
    {
        "content": "<p>not that I know of, either <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 207908463,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598311080
    },
    {
        "content": "<p>I'm aware of cargo wanting to unify and build one copy of a dependency. I just know it <em>wouldn't</em> happen if I used separate workspaces, and I don't want to have to partition my workspaces on the basis of \"this feature of this dependency\". :(</p>",
        "id": 207908516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311104
    },
    {
        "content": "<p>I believe that the other build tools which use <code>cargo metadata</code> as basis of their operation (nix stuff, bazel stuff) do not unify.</p>",
        "id": 207908520,
        "sender_full_name": "nagisa",
        "timestamp": 1598311107
    },
    {
        "content": "<p>you could always enable the feature in the second crate that doesn't currently use it</p>",
        "id": 207908524,
        "sender_full_name": "Lokathor",
        "timestamp": 1598311110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Cargo's doing that for me, and that's what I'm trying to <em>avoid</em>.</p>",
        "id": 207908542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311130
    },
    {
        "content": "<p>with some dependencies having non-additive features it can be hard to wrap head around where exactly the issue is when cargo unifies.</p>",
        "id": 207908583,
        "sender_full_name": "nagisa",
        "timestamp": 1598311176
    },
    {
        "content": "<p>then i join eric huss and nagisa in having only bad news for you</p>",
        "id": 207908584,
        "sender_full_name": "Lokathor",
        "timestamp": 1598311177
    },
    {
        "content": "<p>In this case, the feature is additive, but the addition is a problem.</p>",
        "id": 207908668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311222
    },
    {
        "content": "<p>Alright. Sounds like I'm splitting a workspace. :(</p>",
        "id": 207908673,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311231
    },
    {
        "content": "<p>MCP time</p>",
        "id": 207908701,
        "sender_full_name": "Lokathor",
        "timestamp": 1598311258
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/rust-lang/cargo/issues/5210\">https://github.com/rust-lang/cargo/issues/5210</a> would address the non-determinism, by making it <em>always</em> unify no matter what you're building.</p>",
        "id": 207909000,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311536
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/4463\">https://github.com/rust-lang/cargo/issues/4463</a> is the issue re having more control in this situation.</p>",
        "id": 207909071,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598311580
    },
    {
        "content": "<p>uuh, is <a href=\"https://github.com/rust-lang/cargo/issues/5210\">#5210</a> suggesting that all features used by any crate in the workspace will be activated together, all the time? if so it would break the embedded ecosystem</p>",
        "id": 207909211,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598311717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> Thanks, that was exactly what I was looking for.</p>",
        "id": 207909238,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> 4463 looks to be addressing the \"all the time\" problem.</p>",
        "id": 207909274,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311768
    },
    {
        "content": "<p>yea, those two are kinda duplicates of each other. Some times you want the features to be unified and sometimes you don't.  Eventually there should be some mechanism to control that.</p>",
        "id": 207909387,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598311826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> It sounds like the proposed fix for 4463 is for <code>cargo build --all</code> to have the \"don't unify, build each dependency with minimal versions\" approach within a workspace. Does it seem reasonable to have a top-level field in a workspace's <code>Cargo.toml</code> to opt into that as the default?</p>",
        "id": 207909417,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311850
    },
    {
        "content": "<p>Such that <code>cargo build</code> would then have the not-unifying behavior?</p>",
        "id": 207909431,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311859
    },
    {
        "content": "<p>if it unified <em>per build profile</em> that's probably fine?</p>",
        "id": 207909432,
        "sender_full_name": "Lokathor",
        "timestamp": 1598311860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> This is completely unrelated to profiles.</p>",
        "id": 207909456,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311875
    },
    {
        "content": "<p>well the reason that all the unification hurts embedded is because of the unifying across profiles bug.</p>",
        "id": 207909487,
        "sender_full_name": "Lokathor",
        "timestamp": 1598311908
    },
    {
        "content": "<p>That's not the only reason.</p>",
        "id": 207909492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311915
    },
    {
        "content": "<p>fair</p>",
        "id": 207909495,
        "sender_full_name": "Lokathor",
        "timestamp": 1598311921
    },
    {
        "content": "<p>Suppose you have embedded and non-embedded crates in the same workspace.</p>",
        "id": 207909544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311926
    },
    {
        "content": "<p>Say, firmware for a device and a host-side control program for the device.</p>",
        "id": 207909556,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311938
    },
    {
        "content": "<p>device-firmware depends on foo and opts out of the <code>libc</code> feature. control-program depends on foo and opts into the <code>libc</code> feature. device-firmware breaks.</p>",
        "id": 207909584,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598311970
    },
    {
        "content": "<p>i dunno.  I don't think I've seen a well-fleshed out solution.</p>",
        "id": 207909623,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598312001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/246057-t-cargo/topic/workspaces.20and.20features/near/207909211\">said</a>:</p>\n<blockquote>\n<p>uuh, is <a href=\"https://github.com/rust-lang/cargo/issues/5210\">#5210</a> suggesting that all features used by any crate in the workspace will be activated together, all the time? if so it would break the embedded ecosystem</p>\n</blockquote>\n<p>why is that the case? building from workspace root already does that.</p>",
        "id": 207909635,
        "sender_full_name": "nagisa",
        "timestamp": 1598312014
    },
    {
        "content": "<p>It seems like there are two separate problems here.</p>",
        "id": 207909642,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598312021
    },
    {
        "content": "<p>1) We should have a way for cargo to build all crates in a workspace without unifying features, only unifying within each workspace crate.<br>\n2) We should have a way to ask for the behavior you want when building your workspace.</p>",
        "id": 207909721,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598312075
    },
    {
        "content": "<p>(2) is a really easy problem, if we have both mechanisms around.</p>",
        "id": 207909733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598312091
    },
    {
        "content": "<p>(1) is the hard problem.</p>",
        "id": 207909740,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598312095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/246057-t-cargo/topic/workspaces.20and.20features/near/207909635\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/246057-t-cargo/topic/workspaces.20and.20features/near/207909211\">said</a>:</p>\n<blockquote>\n<p>uuh, is <a href=\"https://github.com/rust-lang/cargo/issues/5210\">#5210</a> suggesting that all features used by any crate in the workspace will be activated together, all the time? if so it would break the embedded ecosystem</p>\n</blockquote>\n<p>why is that the case? building from workspace root already does that.</p>\n</blockquote>\n<p>But not when building in a specific crate's directory, if I understand correctly. And that behavior is required to avoid enabling incompatible features of dependencies.</p>",
        "id": 207909749,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598312114
    },
    {
        "content": "<p>eh re (1), it would be just a <code>for crate in workspace.crates { cargo build -p crate $@ }</code></p>",
        "id": 207909773,
        "sender_full_name": "nagisa",
        "timestamp": 1598312140
    },
    {
        "content": "<p>One of the problems with having to split a workspace is that you lose rust-analyzer support</p>",
        "id": 207909779,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598312149
    },
    {
        "content": "<p>the functionality already exists.</p>",
        "id": 207909780,
        "sender_full_name": "nagisa",
        "timestamp": 1598312150
    },
    {
        "content": "<p>Do embedded users typically build with <code>cargo build -p crate</code> or something similar if they use a workspace?</p>",
        "id": 207909865,
        "sender_full_name": "nagisa",
        "timestamp": 1598312207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Good point. That might do a little more than is necessary, but it's <em>feasible</em>.</p>",
        "id": 207909873,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598312215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> Either of you fancy a spelunking adventure into cargo code? ;)</p>",
        "id": 207909897,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598312235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/246057-t-cargo/topic/workspaces.20and.20features/near/207909865\">said</a>:</p>\n<blockquote>\n<p>Do embedded users typically build with <code>cargo build -p crate</code> or something similar if they use a workspace?</p>\n</blockquote>\n<p>Mostly I tend to <code>cd</code> into the crate's directory and build there, in order to pick up the <code>.cargo/config</code> located there</p>",
        "id": 207909917,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598312275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> you'd be hard pressed to find someone less qualified for this task than me XD</p>",
        "id": 207909975,
        "sender_full_name": "Lokathor",
        "timestamp": 1598312329
    },
    {
        "content": "<p>Also, i'm with Jonas, having a correct <code>.cargo/config.toml</code> is essential</p>",
        "id": 207910026,
        "sender_full_name": "Lokathor",
        "timestamp": 1598312396
    },
    {
        "content": "<p>Fair point; it'd be nice to also respect <code>path/to/crate/.cargo/config.toml</code> when doing a top-level build in a workspace.</p>",
        "id": 207910128,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598312466
    }
]