[
    {
        "content": "<p>It's me again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nSo, I'm invoking <code>ops::package_one</code>, which returns a <code>util::FileLock</code>. Now, I'd like to copy that file to a different location. I _could_ read from <code>FileLock::file</code> (which returns a <code>&amp;File</code>) and write the bytes myself into the destination, but it feels better to use <code>fs::copy</code> to just copy the file directly. But, to my surprise, <code>FileLock::path</code> returns the path to the _lockfile_, not to the locked file, which means I don't (I think) have a way to actually get the file's path. Is this intentional? If I added a method to <code>FileLock</code> for getting the path to the locked file, would that be reasonable? Or am I missing something obvious here?</p>",
        "id": 260707916,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1636400434
    },
    {
        "content": "<p>Looks like <code>dst.path()</code> is the original path before renaming it: <a href=\"https://docs.rs/cargo/0.57.0/src/cargo/ops/cargo_package.rs.html#134-137\">https://docs.rs/cargo/0.57.0/src/cargo/ops/cargo_package.rs.html#134-137</a></p>",
        "id": 260712479,
        "sender_full_name": "bjorn3",
        "timestamp": 1636402459
    },
    {
        "content": "<p>We could maybe add a method to <code>FileLock</code> to rename a file (and then it could update self.path to the new path).  I'm actually not sure what the locking semantics are for renaming locked files.</p>",
        "id": 260719608,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636405906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Huh, I wonder if that means we should simply update the <code>path</code> in <code>FileLock</code> before returning it from <code>package_one</code>?</p>",
        "id": 260738745,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1636417445
    }
]