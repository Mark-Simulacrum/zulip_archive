[
    {
        "content": "<p>Hi, I just came across PR <a href=\"https://github.com/rust-lang/cargo/pull/10308\">#10308</a>  (move <code>build-std</code> to Cargo.toml) and <a href=\"#narrow/stream/246057-t-cargo/topic/build-std.20in.20Cargo.2Etoml/near/268603472\">your discussion about it</a>.</p>\n<p>The main issue with <code>build-std</code> being a global setting is that there are workspaces that contain both bare-metal crates and tooling crates that should run on the host (e.g. using the common <a href=\"https://github.com/matklad/cargo-xtask/\">cargo-xtask</a> pattern). Enabling build-std globally in a <code>.cargo/config</code> file is not really possible for such workspaces because it then also applies to the host-level crates, which then don't build anymore because build-std requires a <code>--target</code> argument.<br>\nAlso, with the upcoming artifact dependencies feature, it would not be possible to include an artifact that requires <code>-Zbuild-std</code> to build (there are no ways to pass additional cli arguments AFAIK).</p>\n<p>Given that some targets <em>require</em> <code>build-std</code> for a successful build, I wonder how you feel about making the <code>build-std</code> setting configurable per-target? There are already <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/config.html#target\">target specific configs</a> for rustflags and runner executables, so maybe we could allow the unstable <code>build-std</code> and <code>build-std-features</code> keys there too? I think this would solve the mentioned problems without polluting the Cargo.toml, and it should be relatively simple to implement too (the stdlib needs to be built per-target anyway).</p>",
        "id": 268661538,
        "sender_full_name": "Philipp Oppermann",
        "timestamp": 1642669475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121929\">Philipp Oppermann</span> <a href=\"#narrow/stream/246057-t-cargo/topic/build-std.20per.20target.3F/near/268661538\">said</a>:</p>\n<blockquote>\n<p>which then don't build anymore because build-std requires a <code>--target</code> argument.</p>\n</blockquote>\n<p>That requirement is just an implementation limitation that we plan to remove.</p>\n<blockquote>\n<p>I wonder how you feel about making the <code>build-std</code> setting configurable per-target? </p>\n</blockquote>\n<p>I would prefer to not expose that level of detail.  The long term goal is to make it a global on/off flag, and then perhaps eventually make it always on (once there is sufficient caching available).</p>",
        "id": 268701138,
        "sender_full_name": "Eric Huss",
        "timestamp": 1642689506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/build-std.20per.20target.3F/near/268701138\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>which then don't build anymore because build-std requires a <code>--target</code> argument.</p>\n</blockquote>\n<p>That requirement is just an implementation limitation that we plan to remove.</p>\n</blockquote>\n<p>Good to know! Do you think that this is something that can be solved in the short term or does it require more work?</p>",
        "id": 268703406,
        "sender_full_name": "Philipp Oppermann",
        "timestamp": 1642690486
    },
    {
        "content": "<p>I still think that there would be some value in a \"compile core/std only if needed\" mode to keep compile times low</p>",
        "id": 268703632,
        "sender_full_name": "Philipp Oppermann",
        "timestamp": 1642690565
    },
    {
        "content": "<p>Short term is probably \"no\", as I don't plan to address it any time soon.</p>",
        "id": 268703680,
        "sender_full_name": "Eric Huss",
        "timestamp": 1642690593
    },
    {
        "content": "<p>Hmm ok. It would be great to have some workaround available until then. We could put the target-specific build-std settings in an explicit <code>target.&lt;cfg&gt;.unstable</code> table and document clearly that this is only a workaround. As soon as the <code>--target</code> limitation is lifted, we could remove it again.</p>",
        "id": 268705032,
        "sender_full_name": "Philipp Oppermann",
        "timestamp": 1642691071
    },
    {
        "content": "<p>I think I'm a little more dubious than <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> about turning build-std on-by-default globally, personally I would be ok with a target-level config to force it on for some targets but not others. Similarly I'd be ok making it an option in manifests as well but I would not want to remove it from <code>.cargo/config.toml</code> (which I think the PR does?)</p>",
        "id": 268709337,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1642692564
    },
    {
        "content": "<p>I do think that artifact dependencies, if we push on them, does sort of mean that CLI flags are really not all that useful because many artifacts are built as part of a build invocation rather than specifically on the command line</p>",
        "id": 268709588,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1642692635
    },
    {
        "content": "<blockquote>\n<p>I would not want to remove it from .cargo/config.toml (which I think the PR does?)</p>\n</blockquote>\n<p>Agreed! There are use cases where a global switch is very useful. Also, removing it would lead to unnecessary churn.</p>",
        "id": 269019817,
        "sender_full_name": "Philipp Oppermann",
        "timestamp": 1642947229
    }
]