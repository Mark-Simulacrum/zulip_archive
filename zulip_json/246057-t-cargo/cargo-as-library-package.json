[
    {
        "content": "<p>I'm building a Cargo subcommand that uses Cargo as a library and invokes <code>cargo::ops::package_one</code>, and am finding the compression of the tarball to be _extremely_ slow compared to <code>cargo package</code>. And yes, I'm passing <code>--release</code>. I'm _guessing_ this has to do with how Cargo is built for release, but can't quite figure out what the magical combination of flags needed are?</p>\n<p>Digging through the Rust boostrap tooling, I discovered <code>LIBZ_SYS_STATIC</code> and <code>LZMA_API_STATIC</code>, but setting those did not make a meaningful difference. I was wondering if maybe Cargo is built with LTO for release, and that that might account for the performance difference, but when I try to set <code>-Clto</code> I get compilation failures due to <code>embed-bitcode</code></p>\n<div class=\"codehilite\"><pre><span></span><code>error: options `-C embed-bitcode=no` and `-C lto` are incompatible\n\nerror: could not compile `cfg-if` due to previous error\n</code></pre></div>\n<p>If I set <code>-Cembed-bitcode=y</code>, compilation fails again with</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cannot prefer dynamic linking when performing LTO\n\nnote: only &#39;staticlib&#39;, &#39;bin&#39;, and &#39;cdylib&#39; outputs are supported with LTO\n\nerror: could not compile `proc-macro-hack` due to previous error\n</code></pre></div>\n<p>I also tried setting <code>-Clinker-plugin-lto</code>, but it appears my linker is too old for that:</p>\n<div class=\"codehilite\"><pre><span></span><code>....rcgu.o: file not recognized: File format not recognized\n</code></pre></div>\n<p>And so I'm here, hat in hand, asking if any of you know the magic that makes <code>cargo package</code> so fast?</p>",
        "id": 260209169,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635980444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> Have you tried building it with <code>flate2</code> with the <code>rust_backend</code> feature enabled?</p>",
        "id": 260210196,
        "sender_full_name": "Eric Huss",
        "timestamp": 1635981091
    },
    {
        "content": "<p>I don't _think_ that'll work since Cargo explicitly enables the <code>zlib</code> features, which takes priority (at least that's my read of &lt;<a href=\"https://github.com/rust-lang/flate2-rs#backends\">https://github.com/rust-lang/flate2-rs#backends</a>&gt;)</p>",
        "id": 260210338,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635981195
    },
    {
        "content": "<p>Wow, I think this _might_ just me being stupid and doing weird stuff so that <code>target</code> effectively _also_ ended up getting picked up by <code>cargo package</code>. Sorry for the noise if so (will report back).</p>",
        "id": 260210855,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635981560
    },
    {
        "content": "<p>Hmm, very suspicious. So, I have a _symlink_ in my project directory called <code>build</code>. <code>.gitignore</code> has <code>/build</code>, and <code>git ls-files</code> does not list anything that's under <code>build/</code>. _But_ <code>cargo package -l</code> still includes everything under <code>build/</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  I thought <code>cargo package</code> respected <code>.gitignore</code> (there's no <code>include</code> or <code>exclude</code>)?</p>",
        "id": 260211051,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635981697
    },
    {
        "content": "<p>Ah, I bet what's going on is that <code>cargo package</code> doesn't skip a symlink to a directory if specified in <code>.gitignore</code> as <code>/dir</code>, even though Git does.</p>",
        "id": 260211366,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635981906
    },
    {
        "content": "<p>Yep, that's it — issue + PR incoming</p>",
        "id": 260212295,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635982686
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/10032\">https://github.com/rust-lang/cargo/issues/10032</a></p>",
        "id": 260214375,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635984479
    },
    {
        "content": "<p>A PR fixing it I think will be trickier, as it requires some surgery to the walking logic, and may also require changes to the <code>ignore</code> library to pass along information about whether something is a symlink.</p>",
        "id": 260214434,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1635984508
    }
]