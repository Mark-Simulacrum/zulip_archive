[
    {
        "content": "<p>I seem to remember an issue for this in the Cargo issue tracker, but couldn't find it yesterday</p>",
        "id": 254523347,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632398821
    },
    {
        "content": "<p>now that the RustSec project seems reasonably mature, with a stable data format, I think it would be pretty great if vulnerabilities from there in your dependency graph would result in warnings on cargo build/run/install etc</p>",
        "id": 254523438,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632398881
    },
    {
        "content": "<p>do people think that broadly makes sense? probably needs an RFC?</p>",
        "id": 254523502,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632398898
    },
    {
        "content": "<p>I run cargo-deny in CI so I already get this</p>",
        "id": 254523635,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632398975
    },
    {
        "content": "<p>As a counterpoint, we could argue that these crates should be yanked and we already deal with that correctly?</p>",
        "id": 254523680,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632398998
    },
    {
        "content": "<p>I think it is worth the discussion.</p>",
        "id": 254556156,
        "sender_full_name": "Eh2406",
        "timestamp": 1632411479
    },
    {
        "content": "<p>If not during builds, we could do it during <code>cargo add</code>, especially if we could list alternative versions or crates.</p>",
        "id": 254561225,
        "sender_full_name": "Ed Page",
        "timestamp": 1632413340
    },
    {
        "content": "<p>I've filed</p>\n<ul>\n<li><a href=\"https://github.com/killercup/cargo-edit/issues/512\">https://github.com/killercup/cargo-edit/issues/512</a></li>\n<li><a href=\"https://github.com/killercup/cargo-edit/issues/513\">https://github.com/killercup/cargo-edit/issues/513</a></li>\n</ul>",
        "id": 254562807,
        "sender_full_name": "Ed Page",
        "timestamp": 1632413973
    },
    {
        "content": "<p>BTW, <a href=\"https://github.blog/2021-09-23-github-advisory-database-now-supports-rust/\">https://github.blog/2021-09-23-github-advisory-database-now-supports-rust/</a></p>",
        "id": 254578885,
        "sender_full_name": "Eh2406",
        "timestamp": 1632420445
    },
    {
        "content": "<p>Here are some experiences from <code>npm audit</code> you might interested in. Not sure whether it is applicable for cargo.<br>\n<a href=\"https://overreacted.io/npm-audit-broken-by-design/\">https://overreacted.io/npm-audit-broken-by-design/</a></p>",
        "id": 254651267,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1632459546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424212\">Ed Page</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Check.20RustSec.20vulnerability.20database.20by.20default/near/254561225\">said</a>:</p>\n<blockquote>\n<p>If not during builds, we could do it during <code>cargo add</code>, especially if we could list alternative versions or crates.</p>\n</blockquote>\n<p>when doing it during <code>cargo add</code>, how would we handle when <code>Cargo.toml</code> is changed directly?</p>",
        "id": 254665643,
        "sender_full_name": "dswijj",
        "timestamp": 1632470204
    },
    {
        "content": "<p>Maybe do it every time <code>Cargo.lock</code> gets updated by Cargo?</p>",
        "id": 254666821,
        "sender_full_name": "bjorn3",
        "timestamp": 1632470840
    },
    {
        "content": "<p>That would cause it to happen every time the dependency list in <code>Cargo.toml</code> changes and on every <code>cargo update</code>.</p>",
        "id": 254666903,
        "sender_full_name": "bjorn3",
        "timestamp": 1632470880
    },
    {
        "content": "<p>When <code>Cargo.lock</code> gets updated the registry gets updated anyway, so it doesn't hurt privacy much to also update the rustsec database at the same time.</p>",
        "id": 254667036,
        "sender_full_name": "bjorn3",
        "timestamp": 1632470955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Check.20RustSec.20vulnerability.20database.20by.20default/near/254666821\">said</a>:</p>\n<blockquote>\n<p>Maybe do it every time <code>Cargo.lock</code> gets updated by Cargo?</p>\n</blockquote>\n<p>I only see one problem with this approach, if <code>Cargo.lock</code> is rarely updated, that means new vulnerabilities found in dependencies would not be immediately uncovered, though?</p>",
        "id": 254668485,
        "sender_full_name": "dswijj",
        "timestamp": 1632471724
    },
    {
        "content": "<p>It should still be allowed as separate <code>cargo audit</code> command IMO.</p>",
        "id": 254669472,
        "sender_full_name": "bjorn3",
        "timestamp": 1632472237
    },
    {
        "content": "<p>Doing it at every build is a terrible idea. Way too slow and bad for privacy.</p>",
        "id": 254669522,
        "sender_full_name": "bjorn3",
        "timestamp": 1632472264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> IIRC cargo audit just git fetches the advisory database to local disk. We could update the advisory database any time the local registry cache is updated</p>",
        "id": 254812267,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632549549
    },
    {
        "content": "<p>Then there would be little slowdown/privacy risk</p>",
        "id": 254812285,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632549581
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 254819768,
        "sender_full_name": "bjorn3",
        "timestamp": 1632557225
    },
    {
        "content": "<p>Was thinking some about this over the weekend and one use case that is probably more sensitive to the performance impact of checking for advisories on build is CI.  Especially when you chain jobs together or are hitting your max parallel runners, it can add up.</p>",
        "id": 255047906,
        "sender_full_name": "Ed Page",
        "timestamp": 1632749444
    }
]