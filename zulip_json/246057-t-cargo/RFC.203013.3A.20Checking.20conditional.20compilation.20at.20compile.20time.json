[
    {
        "content": "<p>Hi, I have been working for the last few weeks on <a href=\"https://github.com/rust-lang/rfcs/pull/3013\">RFC 3013: Checking conditional compilation at compile time</a>. I have made good progress on the <code>rustc</code> and <code>rustdoc</code> side but I'm starting to have some trouble going forward.<br>\nThese struggle are all related to the <code>cargo</code> integration. Unfortunately or fortunately depending on your side didn't the RFC was primarily focus on the <code>rustc</code> side and only talked a bit about the <code>cargo</code> integration. The only thing where the RFC was clear about <code>cargo</code> is : \"[..] it seems uncontroversial for Cargo to enable checking for feature = \"...\" values immediately [..]\" which I implemented as an unstable option <a href=\"https://github.com/rust-lang/cargo/pull/10408\"><code>-Z check-cfg-features</code></a>.<br>\nBut the RFC and I would like for conditional compilation checking to be enable by <strong>default</strong> for all <strong>well known names</strong> (values shouldn't be a problem), this requires some mechanism to deal with custom/external cfg, those are as fart as I know never known by <code>cargo</code>.  I have been thinking about it some the last week and I have to proposition for which I would like your input:</p>\n<ul>\n<li>\n<ol>\n<li>Enable it by default for all package, provide a way to disable well known names checking and have a way to set them with <code>build.rs</code> but we don't do anything to cover other names</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Or enable it by default for all package, provide a way to set them with <code>build.rs</code> and have a configuration inside <code>Cargo.toml</code> to set extra cfg. This is a draft of syntax that could be used:</li>\n</ol>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span><span class=\"w\"></span>\n<span class=\"c1\"># ...</span><span class=\"w\"></span>\n\n<span class=\"p\">[</span><span class=\"n\">check-cfg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\"># or [package.check-cfg] ?</span><span class=\"w\"></span>\n<span class=\"n\">well-known</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\">   </span><span class=\"c1\"># this only and exclusively control the names() part</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\"># aka as the well-known names (or values, maybe) in rustc</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\"># this default to true</span><span class=\"w\"></span>\n<span class=\"n\">names</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"no_global_oom_handling\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\"># this is the names(...) part, this</span><span class=\"w\"></span>\n<span class=\"w\">                                   </span><span class=\"c1\"># only check the name part of the cfg</span><span class=\"w\"></span>\n<span class=\"w\">                                   </span><span class=\"c1\"># and never the value of it (except if</span><span class=\"w\"></span>\n<span class=\"w\">                                   </span><span class=\"c1\"># defined below in values, or by cmd)</span><span class=\"w\"></span>\n\n<span class=\"p\">[[</span><span class=\"n\">check-cfg</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"c1\"># this is the values(...) part</span><span class=\"w\"></span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"use_libc\"</span><span class=\"w\"> </span><span class=\"c1\"># this is not equivalent to just putting the name in</span><span class=\"w\"></span>\n<span class=\"w\">                  </span><span class=\"c1\"># package.cfg.check.names as this defines an implicit</span><span class=\"w\"></span>\n<span class=\"w\">                  </span><span class=\"c1\"># values = [], meaning that no values are allowed</span><span class=\"w\"></span>\n\n<span class=\"k\">[[check-cfg.values]]</span><span class=\"w\"></span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"feature\"</span><span class=\"w\">         </span><span class=\"c1\"># feature will be automatically set by cargo, but</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"c1\"># could still be extented</span><span class=\"w\"></span>\n<span class=\"n\">values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I personally thinks that option 2 is too involved and I'm leaning for option 1 which is simpler and straight forward.<br>\nWhat are your input on this ?</p>",
        "id": 274199017,
        "sender_full_name": "Urgau",
        "timestamp": 1646434066
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 274454090,
        "sender_full_name": "Urgau",
        "timestamp": 1646685683
    },
    {
        "content": "<p>My first inclination would be to check things like features by default, but require an opt in to check things that can be set programmatically from <a href=\"http://build.rs\">build.rs</a>.</p>",
        "id": 274454625,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646685953
    },
    {
        "content": "<p>And all else being equal, I would prefer to enumerate possible programmatically set cfg values in Cargo.toml, but before even doing that, I think we could just check features and anything else that isn't programmatically settable from <a href=\"http://build.rs\">build.rs</a> and that will get us the vast majority of the benefit.</p>",
        "id": 274454785,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686032
    },
    {
        "content": "<p>The one other case that seems likely to be worth catching is when people write <code>cfg(xyz)</code> where they meant to write <code>cfg(feature = \"xyz\")</code>. Long-term, I wonder if we could handle that by changing the syntax of the former for the <a href=\"http://build.rs\">build.rs</a> case to be something more specific to user-set cfg values, over an edition boundary.</p>",
        "id": 274455094,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686162
    },
    {
        "content": "<p>Okay, and how would you want to deal with projects that don't use <code>build.rs</code> but still have custom cfg ?<br>\nHaving an option in the <code>Cargo.toml</code>to disable it ?</p>",
        "id": 274455155,
        "sender_full_name": "Urgau",
        "timestamp": 1646686201
    },
    {
        "content": "<p>(e.g. if the former needed <code>cfg(something = \"xyz\")</code> then the two would be harder to mix up.)</p>",
        "id": 274455207,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686208
    },
    {
        "content": "<p>What do you mean by \"custom cfg\" exactly?</p>",
        "id": 274455240,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686226
    },
    {
        "content": "<p>cfg set on the rustc command line but not as a feature?</p>",
        "id": 274455284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686259
    },
    {
        "content": "<p>Crossbeam have <code>crossbeam_loom</code>, that they only set with <code>--cfg</code></p>",
        "id": 274455325,
        "sender_full_name": "Urgau",
        "timestamp": 1646686289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/RFC.203013.3A.20Checking.20conditional.20compilation.20at.20compile.20time/near/274455284\">said</a>:</p>\n<blockquote>\n<p>cfg set on the rustc command line but not as a feature?</p>\n</blockquote>\n<p>Yes. I'm talking about this.</p>",
        "id": 274455418,
        "sender_full_name": "Urgau",
        "timestamp": 1646686331
    },
    {
        "content": "<p>The feature case is already handle by <code>-Z check-cfg-features</code> on cargo.</p>",
        "id": 274455564,
        "sender_full_name": "Urgau",
        "timestamp": 1646686409
    },
    {
        "content": "<p>I think that one should be opt-in.</p>",
        "id": 274455704,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686472
    },
    {
        "content": "<p>Features can be opt out, because we know the complete list of features from the cargo manifest.</p>",
        "id": 274455795,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686523
    },
    {
        "content": "<p>cfg we don't, and we can only check if the crate gives us a list. So I think we add an opt-in mechanism, enabled by supplying that list in the cargo manifest.</p>",
        "id": 274455854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686561
    },
    {
        "content": "<p>(Or on the rustc command line directly, using the same underlying mechanism that cargo uses to pass the list from the manifest. Since people can always invoke rustc directly without using cargo.)</p>",
        "id": 274455943,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646686602
    },
    {
        "content": "<p>That seems unfortunate, as the vast majority of them don't use any custom cfg.</p>",
        "id": 274456437,
        "sender_full_name": "Urgau",
        "timestamp": 1646686815
    },
    {
        "content": "<p>In that case what do you think about my draft of syntax ?</p>",
        "id": 274456575,
        "sender_full_name": "Urgau",
        "timestamp": 1646686856
    },
    {
        "content": "<p>Seems potentially reasonable, for a mechanism to opt in. I would be interested to hear what you think such a mechanism should look like if we consider the possibility of modifying custom cfg syntax in a future edition to make it feasible to check non-custom cfg by default.</p>",
        "id": 274464978,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646690662
    },
    {
        "content": "<p>You mean like requiring that every <code>--cfg</code> name and value are always passed as part of at least one <code>--check-cfg</code> argument ?<br>\nEx: if I use <code>--cfg my_cfg</code> then I obliged by the compiler to also give the corresponding <code>--check-cfg=names(my_cfg)</code> ?</p>",
        "id": 274466115,
        "sender_full_name": "Urgau",
        "timestamp": 1646691241
    },
    {
        "content": "<p>If that's what you're referring to then I think that we should also consider disallowing the state: We know all the cfg names but not if they values or not. Ie always requiring <code>--check-cfg=values()</code> and forbidding <code>--check-cfg=names()</code>.</p>",
        "id": 274467140,
        "sender_full_name": "Urgau",
        "timestamp": 1646691639
    },
    {
        "content": "<p>That way the syntax could be made simpler by not having to make the distinction between <em>name without values</em> and <em>name with values</em>.</p>",
        "id": 274467330,
        "sender_full_name": "Urgau",
        "timestamp": 1646691744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> No, what I meant was that we could move user-defined cfg from <code>cfg(xyz)</code> to <code>cfg(user::xyz)</code> or similar, which would then mean that we can check every top-level <code>cfg(xyz)</code> by default.</p>",
        "id": 274472136,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646694388
    },
    {
        "content": "<p>We could, perhaps, at the same time, require declaring every <code>cfg(user::xyz)</code> in advance, but we wouldn't <em>have</em> to do that.</p>",
        "id": 274472167,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646694409
    },
    {
        "content": "<p>Oh, I see. You want to have a concept of \"namespace\" but for cfg.</p>",
        "id": 274472653,
        "sender_full_name": "Urgau",
        "timestamp": 1646694701
    },
    {
        "content": "<p>But how would be handle thing like <code>debug_assertions</code> ? or <code>miri</code> ?<br>\nWould they still be passed by <code>--cfg</code> ? But with an explicit <code>--check-cfg=names()</code> ?</p>",
        "id": 274472832,
        "sender_full_name": "Urgau",
        "timestamp": 1646694805
    },
    {
        "content": "<p>Anyway, having this sort of name spacing would certainly help the checking of them. As we could enable them you for some namespace and not the other. In term of syntax I don't know how It would look like, probably not that different from my draft.</p>",
        "id": 274473360,
        "sender_full_name": "Urgau",
        "timestamp": 1646695164
    },
    {
        "content": "<p>Debug assertions are controlled by -Cdebug-assertions, not --cfg.</p>",
        "id": 274473364,
        "sender_full_name": "bjorn3",
        "timestamp": 1646695170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/246057-t-cargo/topic/RFC.203013.3A.20Checking.20conditional.20compilation.20at.20compile.20time/near/274473364\">said</a>:</p>\n<blockquote>\n<p>Debug assertions are controlled by -Cdebug-assertions, not --cfg.</p>\n</blockquote>\n<p>Yeah, but nothing prevents you from manually doing this: <code>rustc -Copt-level=3 --cfg=debug_assertions a.rs</code>.</p>",
        "id": 274473601,
        "sender_full_name": "Urgau",
        "timestamp": 1646695346
    },
    {
        "content": "<p>I expect it won't have the full effect that way</p>",
        "id": 274473640,
        "sender_full_name": "cuviper",
        "timestamp": 1646695371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> Anything that's well-known and defined by the compiler would remain in the top-level namespace and be something checked.</p>",
        "id": 274479725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646699508
    },
    {
        "content": "<p><code>cfg(doc)</code> for instance.</p>",
        "id": 274479731,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646699514
    },
    {
        "content": "<p>Or <code>cfg(miri)</code>.</p>",
        "id": 274479789,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646699529
    },
    {
        "content": "<p>That's could work pretty well.</p>",
        "id": 274513708,
        "sender_full_name": "Urgau",
        "timestamp": 1646730956
    },
    {
        "content": "<p>Btw <code>miri</code> is not currently a well known name, because it's not set by <code>rustc</code>. Should it be added ?</p>",
        "id": 274513827,
        "sender_full_name": "Urgau",
        "timestamp": 1646731019
    },
    {
        "content": "<p>I think it should, yes.</p>",
        "id": 274579527,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646762426
    },
    {
        "content": "<p>Anything set (or settable) by an official Rust tool shipped by rustup.</p>",
        "id": 274579570,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646762444
    },
    {
        "content": "<p>Miri is a nightly-only tool though.</p>",
        "id": 274589445,
        "sender_full_name": "bjorn3",
        "timestamp": 1646766221
    },
    {
        "content": "<p>The current list well known names and values includes every cfg that <code>rustc</code> or <code>rustdoc</code> sets not matter if they are nightly or not.<br>\nI will open a PR to add it to list.</p>",
        "id": 274589829,
        "sender_full_name": "Urgau",
        "timestamp": 1646766344
    },
    {
        "content": "<p>I've created a <a href=\"https://github.com/rust-lang/cargo/pull/10486\">PR</a> adding <code>-Z check-cfg-well-known-{names,values}</code> to be able to check the well known names and values. <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Do you have an opinion on it ? Does it seems to be a good (intermediate ?) way forward ?</p>",
        "id": 275978138,
        "sender_full_name": "Urgau",
        "timestamp": 1647797227
    },
    {
        "content": "<p>Can you link to more information on the <code>names()</code> and <code>values()</code> arguments to rustc's option?</p>",
        "id": 275984211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647805383
    },
    {
        "content": "<p>I added a section on the unstable book: <a href=\"https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/check-cfg.html#the-names-form\">https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/check-cfg.html#the-names-form</a> but <code>values()</code> is not yet in there but it's basically the same as <code>names()</code> which is the way to enable well known names checking of conditional compilation name and <code>values</code> is the way to enable well known values checking of conditional compilation value.</p>",
        "id": 275987057,
        "sender_full_name": "Urgau",
        "timestamp": 1647809460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I don't if you saw it but I left a pretty long reply on the cargo PR that may interest you: <a href=\"https://github.com/rust-lang/cargo/pull/10486#issuecomment-1074496055\">https://github.com/rust-lang/cargo/pull/10486#issuecomment-1074496055</a></p>",
        "id": 276549875,
        "sender_full_name": "Urgau",
        "timestamp": 1648162587
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-lang/cargo/pull/10539\">https://github.com/rust-lang/cargo/pull/10539</a> to add <code>cargo:rustc-check-cfg</code> as a build script output.<br>\nIt was noticed that we where missing it when bumping to beta 1.61 on rust.</p>",
        "id": 278427302,
        "sender_full_name": "Urgau",
        "timestamp": 1649533766
    }
]