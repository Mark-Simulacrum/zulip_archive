[
    {
        "content": "<p>I want <code>cargo mycommand</code> and <code>cargo-mycommand</code> to both work. But since cargo passes <code>mycommand</code> as the first argument for <code>cargo mycommand</code>, I can't take positional arguments - there's no way to tell the different between <code>cargo-mycommand mycommand</code> and <code>cargo mycommand</code>. Is there a recommended way to do this?</p>",
        "id": 212504246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602032192
    },
    {
        "content": "<p>Can you skip the first argument if it is <code>mycommand</code>?  Most third-party subcommands that I've seen don't bother, but I think it should doable.</p>",
        "id": 212505634,
        "sender_full_name": "Eric Huss",
        "timestamp": 1602033710
    },
    {
        "content": "<p>well but then I can't fix files named <code>mycommand</code></p>",
        "id": 212505692,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602033744
    },
    {
        "content": "<p>that is <em>a</em> solution, but I would prefer it not to be <em>the</em> solution</p>",
        "id": 212505720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602033772
    },
    {
        "content": "<p>unless I'm missing something, these cases are trivial to differentiate based on (to use C terminology) <code>ARGV[0]</code></p>",
        "id": 212580937,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602086624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> this is argv[1], not argv[0]</p>",
        "id": 212581020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602086647
    },
    {
        "content": "<p>argv[0] is always the name of the program regardless of whether it's run with cargo or not</p>",
        "id": 212581042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602086661
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 212581054,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602086666
    },
    {
        "content": "<p>right, I'm saying argv[0] is not different between the two</p>",
        "id": 212581089,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602086679
    },
    {
        "content": "<p>you can differentiate them by whether or not the first argument ends with <code>cargo</code></p>",
        "id": 212581095,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602086680
    },
    {
        "content": "<p>it's not?</p>",
        "id": 212581108,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602086683
    },
    {
        "content": "<p>the name of this program is <code>cargo-intraconv</code></p>",
        "id": 212581133,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602086690
    },
    {
        "content": "<p>When <code>cargo foo</code> runs <code>cargo-foo</code>, the <code>argv[0]</code> will be <code>cargo-foo</code>.</p>",
        "id": 212581151,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602086696
    },
    {
        "content": "<p>oh</p>",
        "id": 212581179,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602086704
    },
    {
        "content": "<p>well then!</p>",
        "id": 212581199,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602086709
    },
    {
        "content": "<p>Ideally I would like cargo not to pass <code>intraconv</code> as the first argument but that will probably break all the existing subcommands</p>",
        "id": 212581326,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602086750
    },
    {
        "content": "<p>So if you run <code>cargo foo a b c</code>, cargo runs <code>cargo-foo foo a b c</code>.</p>",
        "id": 212581327,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602086750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Custom.20subcommand.20that.20can.20be.20used.20with.20or.20without.20cargo.3F/near/212581326\">said</a>:</p>\n<blockquote>\n<p>Ideally I would like cargo not to pass <code>intraconv</code> as the first argument but that will probably break all the existing subcommands</p>\n</blockquote>\n<p>Yeah, unfortunately I don't think that's an option.</p>",
        "id": 212582699,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602087374
    },
    {
        "content": "<p>On the other hand, I think Cargo <em>could</em> set a private environment variable to let you know that you're being run as a subcommand, to disambiguate.</p>",
        "id": 212582775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602087404
    },
    {
        "content": "<p>(Or, ideally, we could provide a <code>cargo_subcommand</code> crate that you could import to manage that for you.)</p>",
        "id": 212582833,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602087426
    },
    {
        "content": "<p>sounds good to me :)</p>",
        "id": 212582844,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602087431
    },
    {
        "content": "<p>does cargo have an arg-parsing library it re-exports already?</p>",
        "id": 212582897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602087457
    },
    {
        "content": "<p>Cargo could, in the child process, set a <code>_CARGO_SUBCOMMAND=intraconv</code> variable. You (or a library) could look for that and remove <code>argv[1]</code> iff it matches your program name.</p>",
        "id": 212583037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602087499
    },
    {
        "content": "<p>Cargo exports less than it should in that area, I think.</p>",
        "id": 212583080,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602087516
    },
    {
        "content": "<p>cargo does also appear to always call it with an absolute path to the binary?</p>",
        "id": 212583511,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602087711
    },
    {
        "content": "<p>so the ambiguous case is one where the path is both absolute and the first argument is the same as the name of the subcommand</p>",
        "id": 212583601,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602087739
    },
    {
        "content": "<p>if I understand correctly I solved this when using <code>clap</code>, by defining a \"mycommand\" subcommand and implementing all the flags for the root command as well for that subcommand (so <code>cargo-mycommand</code> as well as <code>cargo mycommand</code> needed to implement the default command line interface)<br>\n<a href=\"https://github.com/matthiaskrgr/cargo-cache/blob/master/src/cli.rs#L209\">https://github.com/matthiaskrgr/cargo-cache/blob/master/src/cli.rs#L209</a></p>",
        "id": 212613540,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1602101698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> yeah I did something similar in <code>cargo-lock</code>, the problem is there's an ambiguous case where you accept \"free\" arguments where one can be the same name as the cargo subcommand</p>",
        "id": 212616518,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1602103334
    },
    {
        "content": "<p>FWIW this is <em>mostly</em> beside the point because I'd expect all my arguments to end in <code>.rs</code>, since their filenames</p>",
        "id": 212632511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602113637
    },
    {
        "content": "<p>but there's nothing <em>enforcing</em> rust files have to end with .rs</p>",
        "id": 212632558,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602113646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> If you are looking for arg parsing library, you can use clap. And you can do what <span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> did but make sure not to have free args</p>",
        "id": 212850162,
        "sender_full_name": "pksunkara",
        "timestamp": 1602262265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> an arg-parsing library won't help; there is fundamentally ambiguity here. I <em>want</em> to have free args for my command.</p>",
        "id": 212858962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602267359
    },
    {
        "content": "<p>Yeah, unfortunately it's not possible. I have tried quite a bit few months ago. The only way to do it is to change how cargo calls them, but that would break everything</p>",
        "id": 212859165,
        "sender_full_name": "pksunkara",
        "timestamp": 1602267439
    }
]