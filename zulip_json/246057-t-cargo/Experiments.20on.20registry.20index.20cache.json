[
    {
        "content": "<p>I am doing some experiments on improvement of registry index caching . However, the initial result seems not as great as I expect. I would love to see some inputs from you and let's see how far we can go. Perhaps it can prove that the idea is just a strawman so we can postpone it then.</p>\n<p><a href=\"https://github.com/rust-lang/cargo/issues/6908#issuecomment-850940152\">https://github.com/rust-lang/cargo/issues/6908#issuecomment-850940152</a></p>",
        "id": 240743828,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622360595
    },
    {
        "content": "<p>This is great, thanks for working on it!  We've been discussing using sqlite or something ilke it for a while now, but I haven't had a chance to actually test it, so this is awesome!  I've also been thinking about using it for fingerprints, and particularly for \"last-used\" data where it captures a timestamp for the last time each dependency was used (which can be later used for garbage collection).</p>\n<p>Testing on <code>cargo</code> may not be a very good stress test, since its dependency tree isn't large.  Have you had a chance to test it on a larger project?  Some that I can think of:</p>\n<ul>\n<li>cargo: 130</li>\n<li>rust: 518</li>\n<li>tikv: 552</li>\n<li>firefox: 577</li>\n<li>diem: 653</li>\n<li>servo: 658</li>\n<li>paritytech/substrate: 896</li>\n</ul>",
        "id": 240762537,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622391184
    },
    {
        "content": "<p>Also, <code>generate-lockfile</code> may not be a good test since it accesses the network.  I think <code>generate-lockfile -Zno-index-update</code> should work better.</p>",
        "id": 240762662,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622391355
    },
    {
        "content": "<p>Here is the result. Seems no significant difference between SQLite and filesystem way.</p>\n<p><a href=\"https://github.com/rust-lang/cargo/issues/6908#issuecomment-851105061\">https://github.com/rust-lang/cargo/issues/6908#issuecomment-851105061</a></p>",
        "id": 240782765,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622423807
    },
    {
        "content": "<p>mostly just here as a lurker, but i'm one of the maintainers of rusqlite and i notice a few small performance things you're doing wrong.</p>\n<p>i suspect they wouldn't make a dent here, but how hard would it be for you to check if using WITHOUT ROWID on the table (<a href=\"https://sqlite.org/withoutrowid.html\">https://sqlite.org/withoutrowid.html</a> — given your schema it seems likely to be a win) and preparing the statements with prepare_cached (<a href=\"https://docs.rs/rusqlite/0.25.3/rusqlite/struct.Connection.html#method.prepare_cached\">https://docs.rs/rusqlite/0.25.3/rusqlite/struct.Connection.html#method.prepare_cached</a>) helps</p>",
        "id": 240783359,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622424946
    },
    {
        "content": "<p>also enabling WAL mode <a href=\"https://sqlite.org/wal.html\">https://sqlite.org/wal.html</a></p>",
        "id": 240783409,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622425018
    },
    {
        "content": "<p>I remembered I've tried <code>WITHOUT ROWID</code> but no significant difference. I've also done experiments for external blob but in reality most packages won't be <a href=\"https://sqlite.org/intern-v-extern-blob.html\">larger than 100KB</a>, so it won't get much improvement as well.</p>\n<p>Anyway, all are valuable advices. Thank you <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span>!  I'll try these and update the result once done. <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 240784637,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622427014
    },
    {
        "content": "<p>The new benchmark result for SQLite is out. Please tell me if I did something wrong.</p>\n<p><a href=\"https://github.com/rust-lang/cargo/issues/6908#issuecomment-851136439\">https://github.com/rust-lang/cargo/issues/6908#issuecomment-851136439</a></p>",
        "id": 240786950,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622430845
    },
    {
        "content": "<p>Huh, interesting. yeah that looks basically like what I had imagined</p>",
        "id": 240789877,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622434825
    },
    {
        "content": "<p>I might poke this a bit tomorrow (or maybe the next day — holiday and all) to see if different combinations of those make a difference, but yeah i expect you won't get many more wins here.</p>",
        "id": 240790773,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622435739
    },
    {
        "content": "<p>Isn't the entire proposition that the performance wins would be mostly on Windows which has a pretty slow disk I/O when presented with many files at once? UNIX systems are pretty good at handling many small files.</p>",
        "id": 240814057,
        "sender_full_name": "nagisa",
        "timestamp": 1622455106
    },
    {
        "content": "<p>oh, i thought thats where the tests were run</p>",
        "id": 240850369,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622477536
    },
    {
        "content": "<p>its probably worth ensuring windows defender is on too, since IME it hurts that kind of disk IO a lot too, and i think there's a good fraction of users that would have it on (if not most)</p>",
        "id": 240850527,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622477649
    },
    {
        "content": "<p>Sorry I cannot access my Windows machine at this moment, but at least we know that SQLite won't make it worse on macOS <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 240884656,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622509765
    },
    {
        "content": "<p>I have access to Win computers. Although I have moved on from the laptop with the failing hard drive and aggressive antivirus that I was using when I suggested the format change. But I can run tests on some Win/SSD computers in the next few days, if that would be helpful. How are we running tests?</p>",
        "id": 240953462,
        "sender_full_name": "Eh2406",
        "timestamp": 1622559086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Experiments.20on.20registry.20index.20cache/near/240762537\">said</a>:</p>\n<blockquote>\n<ul>\n<li>cargo: 130</li>\n<li>rust: 518</li>\n<li>tikv: 552</li>\n<li>firefox: 577</li>\n<li>diem: 653</li>\n<li>servo: 658</li>\n<li>paritytech/substrate: 896</li>\n</ul>\n</blockquote>\n<ol>\n<li>Clone the aforementioned repositories</li>\n<li><code>cargo fetch</code> for each project</li>\n<li>Run the script mentioned in this <a href=\"https://github.com/rust-lang/cargo/issues/6908#issuecomment-851105061\">comment</a>. </li>\n</ol>\n<p>The folder structure looks like below:</p>\n<div class=\"codehilite\"><pre><span></span><code>benchmark/\n├── diem/\n├── gecko-dev/\n├── rust/\n├── servo/\n├── substrate/\n├── tikv/\n└── bench.bash*\n</code></pre></div>\n<p>Note that SQLite branch won't auto-create <code>index/.cache</code> folder so we need manually create it (by passing <code>-p</code> flag to <code>hyperfine</code>).</p>\n<p>Also, I <em>may</em> have access to PC in the weekend. If you don't mind we can wait.</p>",
        "id": 240975646,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622568324
    },
    {
        "content": "<p>Am I right in my interpretation that so far the numbers collected aren't showing any clear winner on any platform? (e.g. everything is within a few percent of each other)</p>",
        "id": 240976317,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622568624
    },
    {
        "content": "<p>(oh also to preface this is some awesome work, thanks for driving this <span class=\"user-mention\" data-user-id=\"245964\">@Weihang Lo</span> !)</p>",
        "id": 240976416,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622568668
    },
    {
        "content": "<p>if my interpretation is right, though, some good next steps might be to break out the profilers and see where time is being spent. There may still be stray file accesses here and there or something like that. I know that <code>.fingerprint</code> stuff for the build directory is also likely huge in terms of number of files accessed and it may benefit from being accelerated too.</p>",
        "id": 240976561,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1622568725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245964\">@Weihang Lo</span> If you are willing to continue pushing this forward, I am happy to wait until it's it convenient for you!<br>\n<span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> My understanding is that we have run all tests on OS where the current approach is expected to be fast, so braking even is a good sign.</p>",
        "id": 240977548,
        "sender_full_name": "Eh2406",
        "timestamp": 1622569151
    },
    {
        "content": "<p>Finished the experiment on Windows. There are some performance gains for SQLite on Windows. Detail are listed in the issue comment.<br>\n<a href=\"https://github.com/rust-lang/cargo/issues/6908#issuecomment-853034677\">https://github.com/rust-lang/cargo/issues/6908#issuecomment-853034677</a></p>",
        "id": 241150087,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622641274
    },
    {
        "content": "<p>that's great! i hesitate to ask since i'd love for y'all to be able to use it, but would it cause a licensing problem?</p>\n<p>that is to say, rusqlite is MIT, not dual Apache2/MIT like cargo (and unfortunately rusqlite is an old project with many contributors over time — i'm unsure about the plausibility of being able to get the sign-off to switch to dual mit/apache2)</p>",
        "id": 241163304,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622646698
    },
    {
        "content": "<p>I don't think that is a problem but don't know enough to justify why it is ok. <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> probably can give an authoritative answer.</p>",
        "id": 241163688,
        "sender_full_name": "Eh2406",
        "timestamp": 1622646855
    },
    {
        "content": "<p>i just realized i could check if you already have non-Apache2 crates, and according to cargo-license, these existing crates in cargo's dep tree are MIT (and not MIT/Apache).</p>\n<blockquote>\n<p>ansi_term, atty, build_const, clap, commoncrypto, commoncrypto-sys, crypto-hash, curl, curl-sys, fwdansi, matches, miniz_oxide, miniz_oxide_c_api, openssl-sys, redox_syscall, redox_syscall, redox_termios, schannel, strsim, termion, textwrap</p>\n</blockquote>\n<p>obviously not a guarantee (it could be a problem that it's using these now) but seems like a good indicator that i was being overly paranoid</p>",
        "id": 241164285,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622647105
    },
    {
        "content": "<p>I think the improvement is enough for the next step, but not sure what to do. Should we continue the work on SQLite integration and hide the feature behind a flag? Can someone helps benchmark on Linux and more other platforms/machines? Do we need a RFC? Is there any possible solution worth a try?</p>",
        "id": 241169155,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622649144
    },
    {
        "content": "<p>This is an internal detail and so will not need an RFC.<br>\nI would like to move most/all of our \"on disc\" databases to one self describing system. So I am in fave of pushing on a SQLite solution, but it is up to the full team.</p>",
        "id": 241170129,
        "sender_full_name": "Eh2406",
        "timestamp": 1622649561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Experiments.20on.20registry.20index.20cache/near/241163688\">said</a>:</p>\n<blockquote>\n<p>I don't think that is a problem but don't know enough to justify why it is ok. <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> probably can give an authoritative answer.</p>\n</blockquote>\n<p>An MIT-licensed dependency is absolutely not an issue. It's a permissive license that's compatible with everything.</p>\n<p>Rust uses the <code>MIT OR Apache-2.0</code> dual-license because of the Apache license's patent grant, to protect the Rust project from the possibility of someone submitting code to Rust and subsequently making a patent claim about that code. We want that to be the case for code contributed to the Rust project itself. We don't need every third-party library we use to have the same patent grant, particularly those that many other projects also use.</p>",
        "id": 241175381,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622651930
    },
    {
        "content": "<p>It is great to have a discussion about possible extensions SQLite will bring for Cargo, so we can tell whether it is worthwhile. Here listed what I think of at this moment:</p>\n<ul>\n<li>Timestamp for fingerprint <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> mentioned.</li>\n<li>The performance improvement on Windows so for in registry index cache.</li>\n<li>Large blobs such as <code>.cargo/registry/cache</code> <a href=\"https://www.sqlite.org/fasterthanfs.html\">may benefit from SQLite</a> but also need experiments.</li>\n<li>SQLite has different <a href=\"https://sqlite.org/lockingv3.html\">lock-mode</a> and <a href=\"https://sqlite.org/wal.html\">WAL</a> so there is a chance to reduce some flock usage. This seems neutral to me just FYI.</li>\n</ul>",
        "id": 241339945,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622684086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245964\">@Weihang Lo</span> File locking is one of the issues I investigated in the past with SQLite, but I was still uncertain about how it works.  From what I understand from <a href=\"https://sqlite.org/howtocorrupt.html\">https://sqlite.org/howtocorrupt.html</a>, if the filesystem doesn't support locking, there is a high likelyhood it can corrupt the database.  That seems like it could be a very bad failure mode.  Cargo's current behavior isn't great either, but I think it can still chug along.  We made need to reconsider cargo's behavior, I'm not sure.</p>",
        "id": 241340429,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622684747
    },
    {
        "content": "<p>Comparing to Cargo's current behavior, is it similar to a choice between \"corrupt some files\" v.s. \"corrupt the whole database\"?</p>",
        "id": 241341214,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622685678
    },
    {
        "content": "<p>To be honest, I'm not really sure what happens when there is no locking.  I think the git index should be relatively safe.  I'm not sure what might happen with the index cache, but cache errors are ignored and it falls back to the git source of truth.  I'm not sure about other parts like fingerprints and rustc artifacts and linking.</p>\n<p>In general I'm not sure if it is a big problem.  rustc's incremental mode enforces that locking is enabled, so in practice most people doing daily development will figure out that they need to use a different filesystem.  Other scenarios, like CI, are unlikely to have concurrent processes running.</p>\n<p>One idea is to enforce locking, and if it is not supported, require the user to take some action to acknowledge they will not run concurrent processes (like an env var or config setting), but I feel like that is not a good idea.  So, I'm not sure what are good options.</p>",
        "id": 241341736,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622686331
    },
    {
        "content": "<p>see also <a href=\"https://www.sqlite.org/atomiccommit.html#_broken_locking_implementations\">https://www.sqlite.org/atomiccommit.html#_broken_locking_implementations</a> which goes into a bit more detail about the problem cases</p>",
        "id": 241346613,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622693362
    },
    {
        "content": "<p>it's worth noting that it indicates extent of the bugs known for NFS is</p>\n<blockquote>\n<p>We have received reports of implementations of both Windows network filesystems and NFS in which locking was subtly broken. We can not verify these reports, but as locking is difficult to get right on a network filesystem we have no reason to doubt them</p>\n</blockquote>\n<p>which feels likely to not cause many problems in practice</p>",
        "id": 241346754,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622693598
    },
    {
        "content": "<p>that said, from working on firefox places (bookmarks, history) in the past, one thing i can say concretely is that db corruption is a real thing that happens to some small portion of users.</p>",
        "id": 241346807,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622693653
    },
    {
        "content": "<p>i've always attributed it to on-disc storage errors</p>",
        "id": 241346812,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622693667
    },
    {
        "content": "<p>For index cache, is there any chance, say, do a <a href=\"https://www.sqlite.org/pragma.html#pragma_quick_check\">check</a> when opening the database, and if corruption happened just remove the file and start caching from scratch?</p>\n<p>Though there is a overhead on integrity check.</p>",
        "id": 241346828,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622693705
    },
    {
        "content": "<p>there's also <a href=\"https://sqlite.org/cksumvfs.html\">https://sqlite.org/cksumvfs.html</a> (rusqlite doesn't support this but could without lots of work)</p>",
        "id": 241346840,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622693744
    },
    {
        "content": "<p>i don't know the performance overhead of this. in practice it seems likely that this sort of corruption is likely to be present on flat files just as much as a db, though</p>",
        "id": 241346892,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622693793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> NFS has been an known issue for a long time <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span><br>\n<a href=\"https://github.com/rust-lang/cargo/blob/163097cd/src/cargo/util/flock.rs#L284-L296\">https://github.com/rust-lang/cargo/blob/163097cd/src/cargo/util/flock.rs#L284-L296</a></p>",
        "id": 241346897,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622693821
    },
    {
        "content": "<p>hm, i see</p>",
        "id": 241346972,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622693936
    },
    {
        "content": "<blockquote>\n<p>this sort of corruption is likely to be present on flat files just as much as a db</p>\n</blockquote>\n<p>Yeah. That's why I see it as a \"corrupt some v.s. corrupt all\" problem. For cache we can just ditch all corrupted files but for artifacts and fingerprints it may be more painful.</p>",
        "id": 241347041,
        "sender_full_name": "Weihang Lo",
        "timestamp": 1622694077
    }
]