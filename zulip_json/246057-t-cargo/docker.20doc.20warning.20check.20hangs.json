[
    {
        "content": "<p>Hi, I am trying to add a CI check to ensure my docs are fine (e.g. contain no warnings). I have the following docker file:</p>\n<div class=\"codehilite\"><pre><span></span><code>FROM rust:latest\n\nCOPY Cargo.lock ./Cargo.lock\nCOPY Cargo.toml ./Cargo.toml\nCOPY src ./src\n\nRUN rustup component add rustfmt\nRUN rustup component add clippy\n\nENTRYPOINT [&quot;cargo&quot;]\n</code></pre></div>\n<p>This docker file works for all other CI checks, e.g. test, fmt, check, clippy, ...</p>\n<p>However when I run my docker command in a manner such as:</p>\n<div class=\"codehilite\"><pre><span></span><code>docker run --rm -v $PWD:/code/ -e RUSTDOCFLAGS=&#39;-Dwarnings&#39; cargo-rust doc --no-deps --all-features --verbose --all\n</code></pre></div>\n<p>Then it just hangs stuck on <code>Downloaded</code> and times out after about 10m. With no other feedback on what went wrong. Running that command on my host system, so outside of docker, it does work just fine. Any idea? The status code is <code>137</code>.</p>",
        "id": 240868982,
        "sender_full_name": "Glen De Cauwsemaecker",
        "timestamp": 1622493132
    },
    {
        "content": "<p>Maybe try setting the CARGO_LOG environment variable to <code>trace</code> to see some more information.</p>",
        "id": 240869319,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622493480
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/q1rDXCHxiD_96Gog5eGu6Ys5/cargo_doc.log\">cargo_doc.log</a> </p>\n<p>I am not entirely sure what I would be looking for here? It's a very big log, a lot goes wrong, but I guess a lot is allowed to go wrong, hence why it's debug. So not sure what are the things that go wrong here that shouldn't go wrong and that explain the issue at hand here? Any help if possible? I am still quite new to rust.</p>",
        "id": 240871448,
        "sender_full_name": "Glen De Cauwsemaecker",
        "timestamp": 1622495557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416992\">@Glen De Cauwsemaecker</span> The problem is that since the project is defined in the root filesystem, Cargo is walking the entire filesystem and internally collecting a list of files.  What it is doing is pretty inefficient, and since there are tens of thousands of files, it never finishes.  I suggest copying your project into a subdirectory.</p>",
        "id": 240877618,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622501669
    },
    {
        "content": "<p>The reason it only impacts <code>cargo doc</code> is because cargo has to do change-detection a little differently than when it does with <code>rustc</code> (<code>rustc</code> tells cargo exactly which files it used, whereas <code>rustdoc</code> doesn't).</p>",
        "id": 240877660,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622501741
    },
    {
        "content": "<p>Looks like it dives into the <code>/sys/devices</code> directory which is an endless pit.</p>",
        "id": 240878355,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622502444
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/cargo/issues/9528\">https://github.com/rust-lang/cargo/issues/9528</a></p>",
        "id": 240879919,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622504647
    },
    {
        "content": "<p>Ok thank you! that works :) Thank you very much for the help, and glad that it at least led to a newly discovered bug. I can confirm that working within a subdir make it work smoothly and fast! Thank you!</p>",
        "id": 240907292,
        "sender_full_name": "Glen De Cauwsemaecker",
        "timestamp": 1622534648
    }
]