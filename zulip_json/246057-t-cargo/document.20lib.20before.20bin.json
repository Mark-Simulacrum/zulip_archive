[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> -- following up on the comment left on <a href=\"https://github.com/rust-lang/cargo/pull/10172\">https://github.com/rust-lang/cargo/pull/10172</a>, I actually think this might've made caches invalidate a little more eagerly than I'd expect.</p>\n<div class=\"codehilite\"><pre><span></span><code>[DEBUG collector::execute] &quot;/home/runner/work/rustc-perf/rustc-perf/cache/3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46/bin/cargo&quot; &quot;rustdoc&quot; &quot;--manifest-path&quot; &quot;Cargo.toml&quot; &quot;-p&quot; &quot;file:///tmp/.tmpfmWtED#token-stream-stress:0.0.0&quot; &quot;--bin&quot; &quot;token-stream-stress-bin&quot; &quot;--&quot; &quot;--wrap-rustc-with&quot; &quot;perf-stat&quot;\n[INFO  cargo::core::compiler::fingerprint] fingerprint error for token-stream-stress v0.0.0 (/tmp/.tmpfmWtED)/Doc { deps: false }/TargetInner { name: &quot;token-stream-stress-bin&quot;, doc: true, ..: with_path(&quot;/tmp/.tmpfmWtED/src/main.rs&quot;, Edition2018) }\n[INFO  cargo::core::compiler::fingerprint]     err: profile configuration has changed\n[INFO  cargo::core::compiler::fingerprint] fingerprint error for token-stream-stress v0.0.0 (/tmp/.tmpfmWtED)/Doc { deps: false }/TargetInner { for_host: true, proc_macro: true, ..: lib_target(&quot;token-stream-stress&quot;, [&quot;proc-macro&quot;], &quot;/tmp/.tmpfmWtED/src/lib.rs&quot;, Edition2018) }\n[INFO  cargo::core::compiler::fingerprint]     err: precalculated components have changed: previously 1639580352.195100706s (Cargo.lock), now 1639581289.155776959s (src/main.rs)\n Documenting token-stream-stress v0.0.0 (/tmp/.tmpfmWtED)\n&quot;/home/runner/work/rustc-perf/rustc-perf/cache/3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46/bin/rustdoc&quot; [&quot;--edition=2018&quot;, &quot;--crate-type&quot;, &quot;proc-macro&quot;, &quot;--crate-name&quot;, &quot;token_stream_stress&quot;, &quot;src/lib.rs&quot;, &quot;-o&quot;, &quot;/tmp/.tmpfmWtED/target/doc&quot;, &quot;--error-format=json&quot;, &quot;--json=diagnostic-rendered-ansi,future-incompat&quot;, &quot;-C&quot;, &quot;metadata=49e968af46dd2295&quot;, &quot;-L&quot;, &quot;dependency=/tmp/.tmpfmWtED/target/debug/deps&quot;, &quot;--extern&quot;, &quot;proc_macro&quot;, &quot;--crate-version&quot;, &quot;0.0.0&quot;, &quot;-Adeprecated&quot;, &quot;-Aunknown-lints&quot;]\nexiting -- non-wrapped rustc\nerror: could not document `token-stream-stress`\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/runner/work/rustc-perf/rustc-perf/target/debug/rustdoc-fake --edition=2018 --crate-type proc-macro --crate-name token_stream_stress src/lib.rs -o /tmp/.tmpfmWtED/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat -C metadata=49e968af46dd2295 -L dependency=/tmp/.tmpfmWtED/target/debug/deps --extern proc_macro --crate-version 0.0.0` (exit status: 1)\n</code></pre></div>\n<p>We should only be touching src/main.rs, which previously only rebuilt docs for the binary, but now it looks like that's invalidating the fingerprint for the library as well (note src/main.rs in the <a href=\"http://lib.rs\">lib.rs</a> fingerprint), if I'm reading this log right</p>",
        "id": 265037815,
        "sender_full_name": "simulacrum",
        "timestamp": 1639586663
    },
    {
        "content": "<p>Do you think it makes sense to revert that PR for now, perhaps? Not sure if this is an easy thing to patch -- obviously, rustc-perf's insistence on cleanliness is a bit more than most users will care about</p>",
        "id": 265037899,
        "sender_full_name": "simulacrum",
        "timestamp": 1639586700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Hm, sorry that's causing problems for you. We can definitely revert it, but I'd like to better understand what you're running into.</p>\n<p>Which commands are you running that are not working as before?</p>",
        "id": 265039118,
        "sender_full_name": "Eric Huss",
        "timestamp": 1639587215
    },
    {
        "content": "<p>I can try to get a reproduction in a bit</p>",
        "id": 265040507,
        "sender_full_name": "simulacrum",
        "timestamp": 1639587686
    },
    {
        "content": "<p>Runs twice:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo +3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46 rustdoc --bin test-doc-repro-bin -vv\n Documenting test-doc-repro v0.1.0 (/home/mark/Edit/test-doc-repro)\n   Compiling test-doc-repro v0.1.0 (/home/mark/Edit/test-doc-repro)\n     Running `rustdoc --edition=2021 --crate-type proc-macro --crate-name test_doc_repro src/lib.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat -C metadata=405b54599b8d27d7 -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern proc_macro --crate-version 0.1.0`\n     Running `CARGO=/home/mark/.rustup/toolchains/3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46/bin/cargo CARGO_CRATE_NAME=test_doc_repro CARGO_MANIFEST_DIR=/home/mark/Edit/test-doc-repro CARGO_PKG_AUTHORS=&#39;&#39; CARGO_PKG_DESCRIPTION=&#39;&#39; CARGO_PKG_HOMEPAGE=&#39;&#39; CARGO_PKG_LICENSE=&#39;&#39; CARGO_PKG_LICENSE_FILE=&#39;&#39; CARGO_PKG_NAME=test-doc-repro CARGO_PKG_REPOSITORY=&#39;&#39; CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE=&#39;&#39; CARGO_PRIMARY_PACKAGE=1 LD_LIBRARY_PATH=&#39;/home/mark/Edit/test-doc-repro/target/debug/deps:/home/mark/.rustup/toolchains/3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46/lib:/home/mark/.rustup/toolchains/3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46/lib&#39; rustc --crate-name test_doc_repro --edition=2021 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C metadata=5820eae4bf36e49f -C extra-filename=-5820eae4bf36e49f --out-dir /home/mark/Edit/test-doc-repro/target/debug/deps -C incremental=/home/mark/Edit/test-doc-repro/target/debug/incremental -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern proc_macro`\n     Running `rustdoc --edition=2021 --crate-type bin --crate-name test_doc_repro_bin src/main.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat --document-private-items -C metadata=2d3f8ceaa03c64c0 -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern test_doc_repro=/home/mark/Edit/test-doc-repro/target/debug/deps/libtest_doc_repro-5820eae4bf36e49f.so --crate-version 0.1.0`\n    Finished dev [unoptimized + debuginfo] target(s) in 0.71s\n$ touch src/main.rs\n$ cargo +3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46 rustdoc --bin test-doc-repro-bin -vv\n Documenting test-doc-repro v0.1.0 (/home/mark/Edit/test-doc-repro)\n     Running `rustdoc --edition=2021 --crate-type proc-macro --crate-name test_doc_repro src/lib.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat -C metadata=405b54599b8d27d7 -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern proc_macro --crate-version 0.1.0`\n     Running `rustdoc --edition=2021 --crate-type bin --crate-name test_doc_repro_bin src/main.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat --document-private-items -C metadata=2d3f8ceaa03c64c0 -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern test_doc_repro=/home/mark/Edit/test-doc-repro/target/debug/deps/libtest_doc_repro-5820eae4bf36e49f.so --crate-version 0.1.0`\n    Finished dev [unoptimized + debuginfo] target(s) in 0.65s\n</code></pre></div>",
        "id": 265043671,
        "sender_full_name": "simulacrum",
        "timestamp": 1639588960
    },
    {
        "content": "<p>Runs once:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo +nightly rustdoc --bin test-doc-repro-bin -vv\n   Compiling test-doc-repro v0.1.0 (/home/mark/Edit/test-doc-repro)\n     Running `CARGO=/home/mark/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=test_doc_repro CARGO_MANIFEST_DIR=/home/mark/Edit/test-doc-repro CARGO_PKG_AUTHORS=&#39;&#39; CARGO_PKG_DESCRIPTION=&#39;&#39; CARGO_PKG_HOMEPAGE=&#39;&#39; CARGO_PKG_LICENSE=&#39;&#39; CARGO_PKG_LICENSE_FILE=&#39;&#39; CARGO_PKG_NAME=test-doc-repro CARGO_PKG_REPOSITORY=&#39;&#39; CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE=&#39;&#39; CARGO_PRIMARY_PACKAGE=1 LD_LIBRARY_PATH=&#39;/home/mark/Edit/test-doc-repro/target/debug/deps:/home/mark/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib:/home/mark/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib&#39; rustc --crate-name test_doc_repro --edition=2021 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C metadata=5820eae4bf36e49f -C extra-filename=-5820eae4bf36e49f --out-dir /home/mark/Edit/test-doc-repro/target/debug/deps -C incremental=/home/mark/Edit/test-doc-repro/target/debug/incremental -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern proc_macro`\n Documenting test-doc-repro v0.1.0 (/home/mark/Edit/test-doc-repro)\n     Running `rustdoc --edition=2021 --crate-type bin --crate-name test_doc_repro_bin src/main.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat --document-private-items -C metadata=abcc0e83e5bf2ef3 -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern test_doc_repro=/home/mark/Edit/test-doc-repro/target/debug/deps/libtest_doc_repro-5820eae4bf36e49f.so --crate-version 0.1.0`\n    Finished dev [unoptimized + debuginfo] target(s) in 0.82s\n$ touch src/main.rs\n$ cargo +nightly rustdoc --bin test-doc-repro-bin -vv\n Documenting test-doc-repro v0.1.0 (/home/mark/Edit/test-doc-repro)\n     Running `rustdoc --edition=2021 --crate-type bin --crate-name test_doc_repro_bin src/main.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat --document-private-items -C metadata=abcc0e83e5bf2ef3 -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern test_doc_repro=/home/mark/Edit/test-doc-repro/target/debug/deps/libtest_doc_repro-5820eae4bf36e49f.so --crate-version 0.1.0`\n    Finished dev [unoptimized + debuginfo] target(s) in 0.37s\n</code></pre></div>",
        "id": 265043757,
        "sender_full_name": "simulacrum",
        "timestamp": 1639588998
    },
    {
        "content": "<p>with test-doc-repro being the following, with empty src/lib.rs and hello world <a href=\"http://main.rs\">main.rs</a></p>\n<div class=\"codehilite\"><pre><span></span><code>[package]\nname = &quot;test-doc-repro&quot;\nversion = &quot;0.1.0&quot;\nedition = &quot;2021&quot;\n\n[lib]\nproc-macro = true\n\n[[bin]]\nname = &quot;test-doc-repro-bin&quot;\npath = &quot;src/main.rs&quot;\n\n[dependencies]\n</code></pre></div>",
        "id": 265043921,
        "sender_full_name": "simulacrum",
        "timestamp": 1639589052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> is that helpful?</p>",
        "id": 265043940,
        "sender_full_name": "simulacrum",
        "timestamp": 1639589062
    },
    {
        "content": "<p>looks like proc-macro = true isn't actually necessary</p>",
        "id": 265043988,
        "sender_full_name": "simulacrum",
        "timestamp": 1639589091
    },
    {
        "content": "<p>So that behavior is somewhat expected. rustdoc does not have a dep-info file, so any change to any file will cause both the bin and lib to rebuild the documentation.</p>\n<p>I'm not sure what that benchmark is testing.  Would it be an option to disable documentation for the lib?</p>\n<p>Otherwise, I'm not sure if there are any good workarounds. We could consider supporting <code>--emit=dep-info</code> for rustdoc, though I don't know how feasible that is.</p>",
        "id": 265046214,
        "sender_full_name": "Eric Huss",
        "timestamp": 1639590011
    },
    {
        "content": "<p>Yeah, disabling docs for the lib would work probably, let me check</p>",
        "id": 265046727,
        "sender_full_name": "simulacrum",
        "timestamp": 1639590254
    },
    {
        "content": "<p>hm, that seems to still document the library?</p>",
        "id": 265047010,
        "sender_full_name": "simulacrum",
        "timestamp": 1639590363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> so I think disabling docs doesn't work, presuming I've done it right:</p>\n<div class=\"codehilite\"><pre><span></span><code>[lib]\ndoc = false\n</code></pre></div>\n<p>I still see:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo +3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46 rustdoc --bin test-doc-repro-bin -vv\n Documenting test-doc-repro v0.1.0 (/home/mark/Edit/test-doc-repro)\n     Running `rustdoc --edition=2021 --crate-type lib --crate-name test_doc_repro src/lib.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat -C metadata=315a38cb6ee325d0 -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --crate-version 0.1.0`\n     Running `rustdoc --edition=2021 --crate-type bin --crate-name test_doc_repro_bin src/main.rs -o /home/mark/Edit/test-doc-repro/target/doc --error-format=json --json=diagnostic-rendered-ansi,future-incompat --document-private-items -C metadata=8fcb5a06523e836d -L dependency=/home/mark/Edit/test-doc-repro/target/debug/deps --extern test_doc_repro=/home/mark/Edit/test-doc-repro/target/debug/deps/libtest_doc_repro-315a38cb6ee325d0.rmeta --crate-version 0.1.0`\n    Finished dev [unoptimized + debuginfo] target(s) in 0.64s\n</code></pre></div>",
        "id": 265047253,
        "sender_full_name": "simulacrum",
        "timestamp": 1639590462
    },
    {
        "content": "<p>this benchmark, token-stream-stress, is likely largely unimportant from a rustdoc perf perspective, but I'm a little on the reluctant side to stop building it... it's not the end of the world</p>",
        "id": 265047473,
        "sender_full_name": "simulacrum",
        "timestamp": 1639590536
    },
    {
        "content": "<p>Oh, that's a bug. I can fix that soon. Would that be ok with you?</p>",
        "id": 265049259,
        "sender_full_name": "Eric Huss",
        "timestamp": 1639591200
    },
    {
        "content": "<p>Yeah, no huge rush</p>",
        "id": 265052284,
        "sender_full_name": "simulacrum",
        "timestamp": 1639592381
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 265052334,
        "sender_full_name": "simulacrum",
        "timestamp": 1639592400
    },
    {
        "content": "<blockquote>\n<p>We could consider supporting --emit=dep-info for rustdoc, though I don't know how feasible that is.</p>\n</blockquote>\n<p>that seems fine to me - rustdoc can just reuse whatever mechanism rustc uses for it</p>",
        "id": 265079182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639604552
    },
    {
        "content": "<p>I'm not sure I understand this bit though:</p>\n<blockquote>\n<p>So that behavior is somewhat expected. rustdoc does not have a dep-info file, so any change to any file will cause both the bin and lib to rebuild the documentation.</p>\n</blockquote>\n<p>how would changing <a href=\"http://main.rs\">main.rs</a> cause <a href=\"http://lib.rs\">lib.rs</a> to need to be rebuilt? are you imagining <code>include_str!(\"main.rs\")</code> or something cursed like that?</p>",
        "id": 265079259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639604592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Cargo doesn't know which files belong to the lib or the executable, so it takes a conservative approach of assuming any file can affect the documentation.  It's pretty crude, but without the dep-info tracking, there's not a lot it can do.</p>",
        "id": 265080142,
        "sender_full_name": "Eric Huss",
        "timestamp": 1639604803
    },
    {
        "content": "<p>Gotcha. Yeah, I do think dep-info is the right way to fix this. Can you open an issue on rust-lang/rust with the info cargo needs? \"the same as rustc\" is fine if you just give an example or two.</p>",
        "id": 265081922,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639605611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Opened <a href=\"https://github.com/rust-lang/rust/issues/91982\">https://github.com/rust-lang/rust/issues/91982</a>.</p>",
        "id": 265091942,
        "sender_full_name": "Eric Huss",
        "timestamp": 1639611132
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 265098696,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639615773
    }
]