[
    {
        "content": "<p>Hey all - I've been looking at pipelined builds a bit more deeply, and I'm wondering if there's some potential performance left on the table.</p>\n<p>As I understand it, if you do a pipelined <code>cargo build</code> it will invoke <code>rustc --emit link,metadata</code>, and use the artifact notification mechanism to kick off dependent builds as soon as the metadata is available. </p>\n<p>In principle this is fine in terms of CPU cost, since the front-end work will always have to be done, so the only cost of <code>--emit ...,metadata</code> is that of serializing and writing it. But there's still a latency cost as the dependent builds are still blocked until the rmeta is written.</p>\n<p>But if we already have rmeta files from previous builds cached - or even from previous <code>cargo check</code> runs - then would that allow the dependent builds to be kicked off earlier, getting more potential parallelism?</p>\n<p>A to be transparent, I'm interested in making <code>rustc --emit metadata</code> generate the same \"full fat\" rmeta files that it does when used in combination with <code>--emit metadata,link</code>. I've measured this as having ~8% perf cost when running <code>cargo check</code> on Cargo itself (<a href=\"https://internals.rust-lang.org/t/rfc-emit-check/14711/5?u=jsgf\">https://internals.rust-lang.org/t/rfc-emit-check/14711/5?u=jsgf</a>), and I'm wondering if there's ways in which this cost can be amortized.</p>\n<p>The best case for this proposal is if you've already done a <code>cargo check</code> build and a subsequent <code>cargo build</code> is a full rebuild. For partial rebuilds there's going to be less effect, but on the other hand the perceived cost of an incremental cargo check would also be smaller. I'm not sure how it interacts with the perf effects of incremental builds.</p>",
        "id": 243323275,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1624225597
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 243323615,
        "sender_full_name": "bjorn3",
        "timestamp": 1624226085
    }
]