[
    {
        "content": "<p>hey cargo team :)</p>",
        "id": 217751141,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606223611
    },
    {
        "content": "<p>I think it might be useful to have some discussion between <a href=\"http://crates.io\">crates.io</a> and cargo on <a href=\"https://github.com/rust-lang/rfcs/pull/2789\">https://github.com/rust-lang/rfcs/pull/2789</a></p>",
        "id": 217751170,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606223629
    },
    {
        "content": "<p>at least I personally have some opinions on it, but unfortunately I don't really have a ton of time to followup on the RFC</p>",
        "id": 217751253,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606223657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> ^</p>",
        "id": 217751922,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606224050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> I have felt like I don't need to have opinions as there was no progress, now that people are working it is time to figure out what I think. How do you want to have that conversation?</p>",
        "id": 217757455,
        "sender_full_name": "Eh2406",
        "timestamp": 1606226711
    },
    {
        "content": "<p>hmm, dunno, I'm open to ideas</p>",
        "id": 217757687,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606226815
    },
    {
        "content": "<p>Chat here is convenient for me. But the <a href=\"http://crates.io\">crates.io</a> discord could work. The Cargo has a synchronous meeting every week, if <a href=\"http://crates.io\">crates.io</a> wants to join us. Or we can have a sehduale chat. Or what did you have in mind.</p>",
        "id": 217759580,
        "sender_full_name": "Eh2406",
        "timestamp": 1606227639
    },
    {
        "content": "<p>Personally I feel that we should get a good idea of performance within Cargo first. I think there's a lot of other concerns about caching/CDN/best file structure/etc, but if we can't get the performance right ignoring those things they're all sort of moot anyway</p>",
        "id": 217773429,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606233606
    },
    {
        "content": "<p>That is very fair. I also think that a year ago I said <a href=\"https://github.com/rust-lang/rfcs/pull/2789#issuecomment-556526112\">\"my sense is that the tipping point is far off.\"</a>, I think I felt it was 3-5 years off. Which would make \"in the next year\" a good timeline for figuring out what could be viable, so that the year after we could start figuring out what to stabilize.</p>",
        "id": 217775867,
        "sender_full_name": "Eh2406",
        "timestamp": 1606234446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> hmm, where do the cargo meeting happens?</p>",
        "id": 217927414,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606331905
    },
    {
        "content": "<p>(and when)</p>",
        "id": 217927422,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606331913
    },
    {
        "content": "<p>Usually it happens on <a href=\"https://meet.jit.si/\">https://meet.jit.si/</a> wednesdays at 4pm est. But it got cancelled this week.</p>",
        "id": 217927547,
        "sender_full_name": "Eh2406",
        "timestamp": 1606331996
    },
    {
        "content": "<p>yeah I figured with thanksgiving :)</p>",
        "id": 217927686,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606332046
    },
    {
        "content": "<p>I'd love to join when you discuss this RFC</p>",
        "id": 217927704,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606332056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> We're talking about moving the meeting to Tuesday, and in the process, moving it an hour earlier. That might be more convenient for you, given time zones.</p>",
        "id": 217949542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606345671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> Would <time datetime=\"2020-12-01T20:00:00Z\">2020-12-01T12:00:00-08:00</time> work for you?</p>",
        "id": 217949591,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606345686
    },
    {
        "content": "<p>yep!</p>",
        "id": 217949608,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606345710
    },
    {
        "content": "<p>Hey folks! <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> just pointed me at this thread. I'm the person who's been pushing forward on the RFC. I'd be happy to join an eventual call if that'd be helpful :)</p>",
        "id": 218126298,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606508173
    },
    {
        "content": "<p>what is the link for tonight's call?</p>",
        "id": 218423755,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606830644
    },
    {
        "content": "<p>Sent PM</p>",
        "id": 218435193,
        "sender_full_name": "Eric Huss",
        "timestamp": 1606835929
    },
    {
        "content": "<p>One thought I ran out of time to add, but to me the purpose of the RFC is to identify and list constraints of the design, and then given those constraints propose the easiest thing to do</p>",
        "id": 218481042,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606856506
    },
    {
        "content": "<p>to me it should be obvious that either the current file-per-crate or pietro's content-addressable design satisfy all our constraints or clearly doesn't</p>",
        "id": 218481145,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606856540
    },
    {
        "content": "<p>in that the only case we should be debating about the implementation is if they both clearly and obviously satisfy all our constraints</p>",
        "id": 218481184,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606856563
    },
    {
        "content": "<p>sorry I feel like I keep going all meta about these two designs rather than the specifics...</p>",
        "id": 218481255,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606856599
    },
    {
        "content": "<p>thanks everyone for the chat btw!</p>",
        "id": 218481270,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606856609
    },
    {
        "content": "<p>I agree that that should be a part of it. I think some constraints worth considering are:</p>\n<ul>\n<li>Should it be possible to serve the index with a static file server.</li>\n<li>Is it acceptable to have any work proportional to the index size?</li>\n<li>Should the HTTP API work if it is just an HTTP proxy to the git repository?</li>\n</ul>",
        "id": 218481280,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606856621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> No, I think that's a good instinct. We want to make sure we make decisions here based on what is \"important\", not just \"we may want these things\". And constraints are a good way to illustrate that.</p>",
        "id": 218481437,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606856681
    },
    {
        "content": "<p>Ah yes those are excellent questions :)</p>",
        "id": 218481539,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606856730
    },
    {
        "content": "<p>And at least from my perspective, the whole motivation for this rfc is that the current index isn't scalable to infinity, so the that's the guiding light to fix that. In that sense I would only want to take on a static file server as a secondary constraint so long as it doesn't conflict, nothing should be proportional (or should only be proportional by the year 2200 when it's not my problem), and like the static file server proxying to the git repo should only be done if it doesn't conflict with the primary constraint of scalability</p>",
        "id": 218481864,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606856897
    },
    {
        "content": "<p>although if those constraints don't conflict with scalability that's when my thoughts run out, and I'd defer to others and the RFC thread</p>",
        "id": 218481902,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606856923
    },
    {
        "content": "<p>The thought I ran out of time on is that the <code>snapshot</code> file can be a dynamic BTree:<br>\nA row can be a leaf consisting of  <code>crate name: file hash</code><br>\nOr a sub snapshot <code>crate name prefix*: file location - file hash</code><br>\nThen we can start with a flat file and when scaling starts to break down, transition to a tree.</p>",
        "id": 218482378,
        "sender_full_name": "Eh2406",
        "timestamp": 1606857156
    },
    {
        "content": "<p>yeah this is where having a flat list of all crates/hashes is not clear to me violates the \"this can't scale infinitely\" constraint</p>",
        "id": 218482458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606857219
    },
    {
        "content": "<p>we could perhaps get \"super clever\" about our fetching and such to shard the tree and do btree-like things. Without gaming it out though it could also risk incremental updates being slower (more round trips), or something like that though</p>",
        "id": 218482562,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606857258
    },
    {
        "content": "<p>That is what I like about letting the registry decide how much to split, different registries can use it to different degrees as there needs change.</p>",
        "id": 218482702,
        "sender_full_name": "Eh2406",
        "timestamp": 1606857352
    },
    {
        "content": "<p>Is someone up for trying to summarize this discussion onto the RFC thread?</p>",
        "id": 218485798,
        "sender_full_name": "Eh2406",
        "timestamp": 1606858830
    },
    {
        "content": "<p><a href=\"http://www.modulecounts.com/\">http://www.modulecounts.com/</a> may help with getting a sense of how fast things are growing.</p>",
        "id": 218486675,
        "sender_full_name": "Eh2406",
        "timestamp": 1606859277
    },
    {
        "content": "<p>npm is off the chart, wow <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218486862,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606859371
    },
    {
        "content": "<p>nice link, thanks :)</p>",
        "id": 218486898,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606859389
    },
    {
        "content": "<p>I'll add that one option here is to remove the changelog part of the RFC, and _just_ talk about HTTP access to the registry. And then we could add the snapshot mechanism (or something like it) later on. From what I'm seeing so far, even without the changelog, the HTTP-backed API is generally a win. The except I suspect will be when you just run a <code>cargo update</code> (and that's where changelog/snapshot would help the most).</p>",
        "id": 218487435,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606859677
    },
    {
        "content": "<p>I think being able to support HTTP as a _straight_ replacement for git is already hugely valuable. And then the snapshotting mechanism can be its own effort, which will involve changes in both the git and http based registries.</p>",
        "id": 218488146,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606860005
    },
    {
        "content": "<p>I like that idea. The changelog is the most complicated part of the implementation. The question is, is there some way to make it forward compatible with the caching fix, and signing the contents?</p>",
        "id": 218488517,
        "sender_full_name": "Eh2406",
        "timestamp": 1606860169
    },
    {
        "content": "<p>If we're <em>just</em> having the git repo available over http, one question I'd have is how caching would work. Would headers say that all files are cached for an hour or so? Or would we issue an invalidation for each individual crate? (and if individual validations is that feasible billing-wise with cloudfront?)</p>",
        "id": 218488951,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606860422
    },
    {
        "content": "<p>I would also consider it toally fine at the very least for a first pass if <code>cargo update</code> has a runtime porportional to downloading all crates referenced because presumably not too too many crates are referenced anyway (and as mentioned <code>cargo update</code> is a relatively rare operation)</p>",
        "id": 218489041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606860483
    },
    {
        "content": "<p><a href=\"https://aws.amazon.com/about-aws/whats-new/2010/08/31/cloudfront-adds-invalidation-feature/\">$0.005 charge for invalidating each file</a> * <a href=\"https://github.com/rust-lang/crates.io-index/graphs/commit-activity\">2644 commits to the index per week</a> = 13.22 US$ per week.</p>",
        "id": 218489772,
        "sender_full_name": "Eh2406",
        "timestamp": 1606860822
    },
    {
        "content": "<p>(Cloudfront does not care whether you invalidate one file or all pricing wise FWIW)</p>",
        "id": 218491212,
        "sender_full_name": "simulacrum",
        "timestamp": 1606861587
    },
    {
        "content": "<p>you charge for \"path\" which can be \"/*\"</p>",
        "id": 218491232,
        "sender_full_name": "simulacrum",
        "timestamp": 1606861598
    },
    {
        "content": "<p>BTW assuming exponential growth the number of crates (not vertions) appears to be doubling every 1.5 years.</p>",
        "id": 218492422,
        "sender_full_name": "Eh2406",
        "timestamp": 1606862356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> fwiw, my benchmarks (coming soon to a GitHub issue near you) will include both the non-changelog and changelog numbers for a number of different operations :)</p>",
        "id": 218496342,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606864890
    },
    {
        "content": "<p>Nice!</p>",
        "id": 218496508,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606865031
    },
    {
        "content": "<p>I promised benchmarks: <a href=\"https://github.com/rust-lang/cargo/pull/8890#issuecomment-737472043\">https://github.com/rust-lang/cargo/pull/8890#issuecomment-737472043</a></p>",
        "id": 218613305,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606940387
    },
    {
        "content": "<p>man this is beautiful, only halfway through reading but <span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> just wanna say I'm very impressed</p>",
        "id": 218614226,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606940712
    },
    {
        "content": "<p>some quick questions</p>",
        "id": 218614476,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606940826
    },
    {
        "content": "<p>is git throttled at all?</p>",
        "id": 218614487,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606940831
    },
    {
        "content": "<p>http == \"let's pretend the git repo is a http static file server, no changelog\" right?</p>",
        "id": 218614511,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606940846
    },
    {
        "content": "<p>Yes, git is throttled through the same mechanism as the http registry. Essentially, git == git over http, just like for GitHub. http = static file server in front of git checkout, http-changelog = http + treat the 404 for /changelog as a response that indicates that the changelog has no changes.</p>",
        "id": 218614830,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606940997
    },
    {
        "content": "<p>I guess my background in research comes in handy when trying to present benchmark results :p</p>",
        "id": 218614925,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606941023
    },
    {
        "content": "<p>there are so many dimensions to theses graphs lol</p>",
        "id": 218615228,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606941159
    },
    {
        "content": "<p>Oh, yeah, I love ggplot for multi-faceted plotting like this. Makes it easy to showcase a number of interrelated variables. It's a little daunting at times, but it does tend to expose trends that are otherwise hard to see in separated plots.</p>",
        "id": 218615371,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606941227
    },
    {
        "content": "<p>\"this suggests that the dependency graphs are not very, and we\" -- missing word after \"very\" ?</p>",
        "id": 218615641,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606941334
    },
    {
        "content": "<p>I'm trying to understand why \"cargo update\" is so much faster with a changelog than with http, is that because with the changelog you get one http request 404 and do nothing else b/c you assume your local copy is up-to-date? And with http we have to issue N http requests that all get 204'd (or w/e the \"not changed\" status code is)</p>",
        "id": 218616594,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606941746
    },
    {
        "content": "<p>I'm also surprised (like you mentioned at the end) of the dark green \"rerun-locked\" bar on any strategy taking any amount of time at all. Running a build after you previously ran one should always be instantaneous (no network touching at all)</p>",
        "id": 218617276,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606942061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> <a href=\"#narrow/stream/246057-t-cargo/topic/http.20registry.20RFC/near/218615641\">said</a>:</p>\n<blockquote>\n<p>\"this suggests that the dependency graphs are not very, and we\" -- missing word after \"very\" ?</p>\n</blockquote>\n<p>Ah, \"deep\". Edited.</p>",
        "id": 218621838,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606944279
    },
    {
        "content": "<p>Re <code>cargo update</code>, yes, exactly. Without a changelog, we have to issue a request for each index file, which will generally return <code>304 Not Modified</code>, whereas with the changelog we _just_ fetch the changelog, and it tells us that we don't need to re-download any other files.</p>",
        "id": 218621961,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606944342
    },
    {
        "content": "<p>Re the dark green, I think what's happening is that _either_ there is a bug in my implementation, or the prefetching does a bunch of work to _realize_ that it doesn't need to fetch anything (which is arguably also a bug). In either case, I think that should be fixable, and am looking at that next.</p>",
        "id": 218622076,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606944395
    },
    {
        "content": "<p>\"fun\" data point: <a href=\"https://github.com/rust-lang/cargo/pull/8890#issuecomment-737603098\">https://github.com/rust-lang/cargo/pull/8890#issuecomment-737603098</a></p>",
        "id": 218644715,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606959832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> I have been using <code>serde = 1</code> for experiments with <code>pubgrub</code> so I am not surprised to hear that story. We can probably make <code>serde</code> numbers look better by not including optional dependencies (in this case <code>clippy</code>), but other cases will end up worse. Correctly handling <code>features</code> will take some work, and is probably out of scope for this PR. But is a good thing to add to the list of follow up PRs.</p>",
        "id": 218647911,
        "sender_full_name": "Eh2406",
        "timestamp": 1606963422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Following up on <a href=\"https://github.com/rust-lang/cargo/pull/8890#issuecomment-738092076\">https://github.com/rust-lang/cargo/pull/8890#issuecomment-738092076</a>, that would be super handy! I could run benchmarks against it pretty much immediately and it'd give some valuable real world data.</p>",
        "id": 218727594,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607016726
    },
    {
        "content": "<p>OK, great -- just a copy of the files in the crates.io-index I guess?</p>",
        "id": 218727864,
        "sender_full_name": "simulacrum",
        "timestamp": 1607016858
    },
    {
        "content": "<p>Yup, that should do it.</p>",
        "id": 218728453,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607017167
    },
    {
        "content": "<p>Re http without changelog and forward compatibility with content addressing.</p>\n<p>If a <code>sparse+</code> does not have a hashfile then we use the locations in the current implementation, If the <code>hash</code>s file(s) are present then we use a content addressing scheme. If we remove the changelog  then this POC-PR is just implementing the first half. And it supports \"HTTP proxy to the git repository\" as long as you do not need the cache busting or signing. (witch I think a lot of small registries will not need.)</p>",
        "id": 218730438,
        "sender_full_name": "Eh2406",
        "timestamp": 1607018046
    },
    {
        "content": "<p>Yes, that's what I'm thinking. And I think that's an attractive path since we do not know what such a hash file might look like yet.</p>",
        "id": 218730733,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607018165
    },
    {
        "content": "<p>I'll also add that I don't think we _want_ the client to do cache busting, because allowing cache busting on the server opens up more opportunities for abuse. But that's a question for another time.</p>",
        "id": 218730800,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607018205
    },
    {
        "content": "<p>OK I will set that up later today</p>",
        "id": 218731658,
        "sender_full_name": "simulacrum",
        "timestamp": 1607018533
    },
    {
        "content": "<p>That is the pro! It works now to experiment with. It will be useful for small registries. And the code we are expecting has a path to stabilization.</p>\n<p>The con is that there are in effect 3 kinds of indexes.</p>\n<ol>\n<li>git, as it is stable.</li>\n<li><code>sparse+</code> with signing, as it is the path forward for <a href=\"http://crates.io\">crates.io</a>.</li>\n<li><code>sparse+</code> without signing, that we are supporting and testing forever, with no one that needs it.</li>\n</ol>\n<p>Just thinking out loud.</p>",
        "id": 218731802,
        "sender_full_name": "Eh2406",
        "timestamp": 1607018597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Great, thank you!</p>",
        "id": 218731876,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607018632
    },
    {
        "content": "<blockquote>\n<p>I'll also add that I don't think we _want_ the client to do cache busting</p>\n</blockquote>\n<p>By cache busting I mean that the hash is in the name, so files can be cashed forever. Not that the client can force a hit on the server. I should probably be more precise in my language.</p>",
        "id": 218732085,
        "sender_full_name": "Eh2406",
        "timestamp": 1607018722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I think the signing RFC will also end up modifying the way git registries work, so I would think of it maybe more as adding another dimension to the table of index types. But yes, we'll end up with two variants of each registry index type -- one that uses the hash file and one that does not. That said, _most_ of the implementation will stay the same. I also think there are plenty of users who will use the non-signing registry variants (especially for internal use), so they're probably worth supporting regardless.</p>",
        "id": 218732331,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607018835
    },
    {
        "content": "<p>Ah, that to me is not cache busting. That is content-addressable storage that allows long-term caching. Cache busting is specifically a mechanism whereby a client can bypass the cache for a given file to fetch a newer version. I think it's important to keep those separate.</p>",
        "id": 218732455,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607018891
    },
    {
        "content": "<p>good point, I will be more precise in the future.</p>",
        "id": 218732508,
        "sender_full_name": "Eh2406",
        "timestamp": 1607018931
    },
    {
        "content": "<p>My thinking here is that we should cut the changelog from the RFC and my PoC PR, since it adds fairly little, and overlaps too much with a potential signing implementation. I think the RFC without the changelog is still hugely valuable, and is completely compatible with adding a signature file later on.</p>",
        "id": 218732559,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607018964
    },
    {
        "content": "<p>I guess I can write a comment in the RFC thread to that effect.</p>",
        "id": 218732578,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607018977
    },
    {
        "content": "<p>(the reason I'm pushing on dropping the changelog is that I'm hesitant to make more changes to the PR like 426 Too Many Requests support if a bunch of code is going to go away shortly when we remove the changelog)</p>",
        "id": 218732732,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607019051
    },
    {
        "content": "<p>I wrote up my argument for cutting the changelog from the RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/2789#issuecomment-738194824\">https://github.com/rust-lang/rfcs/pull/2789#issuecomment-738194824</a></p>",
        "id": 218734614,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607019964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I'd specifically love your thoughts on <a href=\"https://github.com/rust-lang/cargo/pull/8890#issuecomment-738181228\">https://github.com/rust-lang/cargo/pull/8890#issuecomment-738181228</a>, as I think there are some deeper implications there that I'm missing.</p>",
        "id": 218737415,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021343
    },
    {
        "content": "<p>I need to reread this part of cargo heh</p>",
        "id": 218737494,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021383
    },
    {
        "content": "<p>Hehe, all good, no rush. I just feel like there's something there that I'm missing, and am worried that using \"time of last call to <code>RegistryData::update_index</code>\" is going to cause issues in some unpredictable way, otherwise that would just be the default.</p>",
        "id": 218737667,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021475
    },
    {
        "content": "<p>wow this is fancier than I remember</p>",
        "id": 218737687,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021483
    },
    {
        "content": "<p>but I remember implementing this now</p>",
        "id": 218737701,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021491
    },
    {
        "content": "<p>but yes you're right in that this forces cargo to reparse all the json all the time</p>",
        "id": 218737749,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021517
    },
    {
        "content": "<p>which we'll want to fix before landing and/or turning on, but I think is probably irrelevant for your timing tests</p>",
        "id": 218737807,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021534
    },
    {
        "content": "<p>it might add a few hundred ms here or there to builds but that's nothing compared to what we're measuring with http fetch times</p>",
        "id": 218737841,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021548
    },
    {
        "content": "<p>I think what we'll probably want to do is just refactor all this</p>",
        "id": 218737909,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021579
    },
    {
        "content": "<p>the git implementation of this caching would be very different from the http implementation</p>",
        "id": 218737947,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021601
    },
    {
        "content": "<p>with http I don't think we'd ever store the raw json bytes we got from the server on disk</p>",
        "id": 218737964,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021611
    },
    {
        "content": "<p>we'd just immediately store the optimized lookup version</p>",
        "id": 218737978,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021621
    },
    {
        "content": "<p>Yeah, that's what I figured. I'm more trying to figure out what I could even set <code>current_version</code> for the sparse HTTP, since there isn't really _one_ version.</p>",
        "id": 218737988,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021628
    },
    {
        "content": "<p>Oh yeah, that's a good idea.</p>",
        "id": 218738009,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021639
    },
    {
        "content": "<p>yeah I don't think <code>current_version</code> fits well, I think things will need to be refactored for this to fi</p>",
        "id": 218738085,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021658
    },
    {
        "content": "<p>fit*</p>",
        "id": 218738087,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021660
    },
    {
        "content": "<p>Okay, sounds good. In that case I'll leave it as <code>None</code> in the PR for now</p>",
        "id": 218738110,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021671
    },
    {
        "content": "<p>and yeah I think it's fine to land without this degree of caching</p>",
        "id": 218738132,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021684
    },
    {
        "content": "<p>just not ok to turn on by default without this fixed</p>",
        "id": 218738139,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021688
    },
    {
        "content": "<p>I'd like to try to do as many \"separate\" changes in different PRs as possible</p>",
        "id": 218738140,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021690
    },
    {
        "content": "<p>Yup, sounds about right</p>",
        "id": 218738146,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021694
    },
    {
        "content": "<p>agreed</p>",
        "id": 218738147,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021694
    },
    {
        "content": "<p>FWIW still reading things but I'm pretty sure I agree with removing the changelog</p>",
        "id": 218738194,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021716
    },
    {
        "content": "<p>the times seem quite reasonable, the changelog is an obvious \"this can be added on\"</p>",
        "id": 218738218,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021730
    },
    {
        "content": "<p>to be clear though I have not read any code in your PR yet</p>",
        "id": 218738333,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021768
    },
    {
        "content": "<p>only been opearting at a high level</p>",
        "id": 218738356,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021778
    },
    {
        "content": "<p>but while I have you here, can you describe at a high level where this fits in with the resolver?</p>",
        "id": 218738388,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021792
    },
    {
        "content": "<p>like do we run the resolver, and on error, try to prefetch things?</p>",
        "id": 218738406,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021800
    },
    {
        "content": "<p>or how does the back-and-forth between the resolver and \"go fetch more\" work basically?</p>",
        "id": 218738443,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021818
    },
    {
        "content": "<p>(in a meeting, but will respond soon)</p>",
        "id": 218738462,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607021826
    },
    {
        "content": "<p>ah ok no worries</p>",
        "id": 218738527,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607021865
    },
    {
        "content": "<p>To meet the gole. \"does not require changes to the resolver for the initial implementation.\" I think, the greedy prefetch runs before the resolver, and if the resolver asks for something that is not in the prefetch then it is fetched with blocking commands.</p>",
        "id": 218739632,
        "sender_full_name": "Eh2406",
        "timestamp": 1607022300
    },
    {
        "content": "<p>Obviously titer integration can make things faster and simpler, but that is not for an initial PR.</p>",
        "id": 218739854,
        "sender_full_name": "Eh2406",
        "timestamp": 1607022405
    },
    {
        "content": "<p>hm ok</p>",
        "id": 218739926,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607022452
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> if you're not tired of meetings I'd be up for a sync chat about more of the implementation</p>",
        "id": 218739969,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607022475
    },
    {
        "content": "<p>I have a thing to get done for $dayjob but if the sync chat is happening I would love to listen in.</p>",
        "id": 218744573,
        "sender_full_name": "Eh2406",
        "timestamp": 1607024667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>  <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> is right -- the greedy fetcher runs first, way before the resolver runs. It tries to sort of sweep in all dependencies the resolver _might_ want in a batch fetch. Then, when the resolver runs, all the index files should just immediately be available. If something isn't, it just does a synchronous fetch at that time. Arguably we could even have an assertion in <code>load</code> that every requested index file is already fetched, but I left that off since the greedy resolver _is_ very simple and I don't want to consider it an error if it misses something.</p>",
        "id": 218745550,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607025156
    },
    {
        "content": "<p>Happy to do a meeting! Both my today and tomorrow are pretty open.</p>",
        "id": 218745586,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607025180
    },
    {
        "content": "<p>how about... now?</p>",
        "id": 218745628,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607025197
    },
    {
        "content": "<p>Works for me :p</p>",
        "id": 218746215,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607025467
    },
    {
        "content": "<p>the teams chat on <a href=\"http://meet.jit.si\">meet.jit.si</a>?</p>",
        "id": 218746340,
        "sender_full_name": "Eh2406",
        "timestamp": 1607025512
    },
    {
        "content": "<p>I'll send y'all a zoom link</p>",
        "id": 218746358,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607025519
    },
    {
        "content": "<p>Against <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>'s CloudFront bucket:<br>\n<a href=\"/user_uploads/4715/yu_zslawSzGOoUZJSN4Y6DLa/comp.png\">comp.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/yu_zslawSzGOoUZJSN4Y6DLa/comp.png\" title=\"comp.png\"><img src=\"/user_uploads/4715/yu_zslawSzGOoUZJSN4Y6DLa/comp.png\"></a></div>",
        "id": 218753509,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607029090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> ^</p>",
        "id": 218753528,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607029104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> tested with <code>curl</code> at the CLI and looks like github raw supports etag</p>",
        "id": 218755678,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607030170
    },
    {
        "content": "<p>even 304'ing if-none-match</p>",
        "id": 218755686,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607030175
    },
    {
        "content": "<p>Nice! I did try running against <code>raw.githubusercontent</code> a while back, but that's where their rate limiting hurt a lot. Since they consider it an \"API\", they throttle pretty aggressively to the tune of ~20rps, maybe less over time.</p>",
        "id": 218763812,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607034462
    },
    {
        "content": "<p>Also, the diff from removing the changelog stuff is <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 218763943,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607034528
    },
    {
        "content": "<p>ohh yes <a href=\"https://github.com/rust-lang/cargo/pull/8890/commits/bda120ad837e6e71edb334a44e64533119402dee\">https://github.com/rust-lang/cargo/pull/8890/commits/bda120ad837e6e71edb334a44e64533119402dee</a></p>",
        "id": 218765007,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607035128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I started looking a bit at the <code>Option&lt;Summary&gt;</code> changed we talked about. I think one place it'll get hairy is that a number of methods already use <code>Option</code> to signify if they were _able_ to resolve something. For example, <code>PackageRegistry::query_overrides</code> returning <code>None</code> has a different semantic meaning than \"try again later\", and may indeed cause errors \"upstream\". Not insurmountable, but does make the change a bit trickier.</p>",
        "id": 218769111,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607037840
    },
    {
        "content": "<p>ah true yeah, we may need a tri-state enum addition to those location</p>",
        "id": 218769410,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607038002
    },
    {
        "content": "<p><code>enum YesNoMaybe</code></p>",
        "id": 218769914,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607038261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> You mentioned on our call that you'd like to see the RFC land as an eRFC. With the changelog stuff removed, what is the rationale for not landing it as an RFC? I don't necessarily disagree, I'm just trying to figure out what other concerns there are.</p>",
        "id": 218774495,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607042020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> Don't know if you saw the comment I made to the RFC, but following the benchmark results, I'm now proposing we get rid of the changelog from the RFC. Assuming that happens, I _think_ there's nothing in the RFC that precludes adding a signature scheme later. But maybe it'd be good to schedule a call to chat through it? I think <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> wanted that too.</p>",
        "id": 218774703,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607042219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> I'd love to have a call</p>",
        "id": 218774733,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1607042265
    },
    {
        "content": "<p>but can we talk tomorrow? it's a bit late here :)</p>",
        "id": 218774811,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1607042303
    },
    {
        "content": "<p>I'm free all day tomorrow as well if you wanna send an invite</p>",
        "id": 218774820,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607042320
    },
    {
        "content": "<p>I would also be comfortabale just landing as an RFC at this point given that it's fleshed out on the impl side enough</p>",
        "id": 218774865,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607042369
    },
    {
        "content": "<p>Oh, sorry, didn't mean _now_ necessarily :p Tomorrow is wide open for me, so whatever time works for the two of you who I think have busier schedules these days is good. We can use the cargo jitsi maybe?</p>",
        "id": 218774894,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607042397
    },
    {
        "content": "<p>Just wanted to clarify that we definitely don't want to land anything depending on the cloudfront bucket I created even unstable, it's super temporary</p>",
        "id": 218774985,
        "sender_full_name": "simulacrum",
        "timestamp": 1607042451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Yup, there's nothing referencing that bucket in the PR. I've just been using that for benchmarking on my side.</p>",
        "id": 218775013,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607042489
    },
    {
        "content": "<p>The PR just adds the ability to use an HTTP endpoint using <code>sparse+https://</code> URLs, but does not include any such URLs by default.</p>",
        "id": 218775073,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607042523
    },
    {
        "content": "<p>I do think it would be valuable to have a real endpoint that people can try out after my PR lands so that people can test, but that's relatively low priority. To make it low effort, that should probably just be a CloudFront in front of <code>raw.githubusercontent.com</code> with a relatively short cache expiry time, so that we don't have to implement any purging or S3 bucket updating.</p>",
        "id": 218775171,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607042619
    },
    {
        "content": "<p>Speaking of, who would be the best person to talk to on the <a href=\"http://crates.io\">crates.io</a> / infrastructure side to get something like ^ set up? And to talk about possibly adding explicit cache eviction to <a href=\"http://crates.io\">crates.io</a> down the line? I guess maybe that's also you <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>? :p</p>",
        "id": 218775620,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607043030
    },
    {
        "content": "<p>Pietro has a \"<a href=\"http://crates.io\">crates.io</a>\" hat more so than I do, but something like that sounds not entirely unreasonable</p>",
        "id": 218775671,
        "sender_full_name": "simulacrum",
        "timestamp": 1607043092
    },
    {
        "content": "<p>I'd probably go about it a bit differently -- let me kick off a topic in <a class=\"stream\" data-stream-id=\"242791\" href=\"/#narrow/stream/242791-t-infra\">#t-infra</a> though</p>",
        "id": 218775695,
        "sender_full_name": "simulacrum",
        "timestamp": 1607043120
    },
    {
        "content": "<p>Re: ERFC, I thought that <a href=\"https://github.com/rust-lang/rfcs/pull/2789#issuecomment-562341184\">https://github.com/rust-lang/rfcs/pull/2789#issuecomment-562341184</a> suggested that we want to merge as an ERFC. But a lot of work has been done since then. And the impl looks good. So yes, let's go straight to RFC.</p>",
        "id": 218778725,
        "sender_full_name": "Eh2406",
        "timestamp": 1607046363
    },
    {
        "content": "<p>I will message when I start working tomorrow and we can sync up. For pietro it's probably best if we meet early us times bc he's in europe</p>",
        "id": 218780104,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607047613
    },
    {
        "content": "<p>Sounds good. I'll be available starting 9am Pacific time.</p>",
        "id": 218783941,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607049075
    },
    {
        "content": "<p>Ok I will send an invite when I awaken</p>",
        "id": 218792219,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607054688
    },
    {
        "content": "<blockquote>\n<p><code>enum YesNoMaybe</code></p>\n</blockquote>\n<p>I have been thinking about this plan  and have some tweaks to make it smarter. I'm looking forward to digging in after this PR is merged. What properties we can say about a solution where we skipped some things will definitely depend on <em>what</em> we choose to skip. I think the properties are more helpful if we skip dependencies rather than versions. But we will have to see what is implementable.</p>",
        "id": 218794367,
        "sender_full_name": "Eh2406",
        "timestamp": 1607057725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> can we do it next week? not feeling well enough to do a call right now :(</p>",
        "id": 218847903,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1607096047
    },
    {
        "content": "<p>(sorry about the last minute ping)</p>",
        "id": 218847914,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1607096056
    },
    {
        "content": "<p>sure!</p>",
        "id": 218847917,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607096058
    },
    {
        "content": "<p>and no worries!</p>",
        "id": 218847965,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607096088
    },
    {
        "content": "<p>Feal better!</p>",
        "id": 218848292,
        "sender_full_name": "Eh2406",
        "timestamp": 1607096227
    },
    {
        "content": "<p>Hope you feel better soon!</p>",
        "id": 218857565,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607100013
    },
    {
        "content": "<p>I went ahead and marked the PR ready for review, since I think the implementation is now where I want it to be.</p>",
        "id": 218904071,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607124341
    },
    {
        "content": "<p>I also submitted some more comments + a suggested edit for the changelog to the RFC PR.</p>",
        "id": 218904082,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607124352
    },
    {
        "content": "<p>Ok! I will try to review Monday</p>",
        "id": 218920623,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607147904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> could we move the call 1 hour after what's currently in the invite?</p>",
        "id": 219060854,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1607335759
    },
    {
        "content": "<p>got an urgent core team thing scheduled on top of the slot for today's call :(</p>",
        "id": 219060878,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1607335778
    },
    {
        "content": "<p>I have moved it, no worries</p>",
        "id": 219085578,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607351171
    },
    {
        "content": "<p>If it would be helpful to have me in the call pass along the invite and I'll try to fit it in.</p>",
        "id": 219087008,
        "sender_full_name": "Eh2406",
        "timestamp": 1607351815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I added you but I think we're mainly gonna talk about the security side of things so don't feel obligated to come</p>",
        "id": 219096163,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607356037
    },
    {
        "content": "<p>That works for me!</p>",
        "id": 219099608,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607357544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120054\">Jon Gjengset</span> <a href=\"#narrow/stream/246057-t-cargo/topic/http.20registry.20RFC/near/218769111\">said</a>:</p>\n<blockquote>\n<p>I started looking a bit at the <code>Option&lt;Summary&gt;</code> changed we talked about. I think one place it'll get hairy is that a number of methods already use <code>Option</code> to signify if they were _able_ to resolve something. For example, <code>PackageRegistry::query_overrides</code> returning <code>None</code> has a different semantic meaning than \"try again later\", and may indeed cause errors \"upstream\". Not insurmountable, but does make the change a bit trickier.</p>\n</blockquote>\n<p>I started to play with this <a href=\"https://github.com/jonhoo/cargo/compare/http-registry...Eh2406:resolve_repeatedly_until_all_is_loaded\">diff</a>, it threads a  <code>is_ready</code> all the way thure, and handles the resolver part. If <code>is_ready</code> returns false, then the dependency is ignored, when the resolver returns  if any dependency was skipped then it is rerun. Thoughts?</p>",
        "id": 219148012,
        "sender_full_name": "Eh2406",
        "timestamp": 1607380297
    },
    {
        "content": "<p>ok I am running out of time for today, <span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> I didn't get to review the rest of the PR today, and I'm taking tomorrow off (any ffxiv fans here?), but I will try to review on Wednesday</p>",
        "id": 219149141,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1607380958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Thanks for the thorough review! I think I've addressed all your comments now.</p>",
        "id": 219419352,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1607560327
    },
    {
        "content": "<p>Working on a version where we have <code>Source::{fuzzy_}query{_vec}</code> return a <code>Poll&lt;_&gt;</code>. Mostly going well, but it does mean that <em>all</em> the code needs to know about the \"try again\" behavure. The hard pars are <a href=\"https://github.com/rust-lang/cargo/blob/b49ccadb4a936a4b6764040ea9c87681b7c1a4b3/src/cargo/core/registry.rs#L295\"><code>patch</code></a> and <a href=\"https://github.com/rust-lang/cargo/blob/b49ccadb4a936a4b6764040ea9c87681b7c1a4b3/src/cargo/core/registry.rs#L399\"><code>overrides</code></a>, I am not sure what to do in that code. We can make the retry loop in <code>resolve_with_previous</code> instead of in <code>resolver::resolve</code>, but that feels like more set up then I want to run in a loop. I guess we could have 2 retry loops, one for the setup in <code>resolve_with_previous</code> and a second in <code>resolver::resolve</code>. <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> did you have something in mind for this?</p>",
        "id": 220052236,
        "sender_full_name": "Eh2406",
        "timestamp": 1608071367
    },
    {
        "content": "<p>Yeah, that's where I started hitting a wall too with not knowing enough about the internals</p>",
        "id": 220057524,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1608074314
    },
    {
        "content": "<p>Hey sorry getting to this now. <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> these are good points, let me investigate</p>",
        "id": 220135430,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135162
    },
    {
        "content": "<p>I know <code>overrides</code> at least can be ignored, those are only used with path sources which are always ready</p>",
        "id": 220135492,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135176
    },
    {
        "content": "<p>Let me investigate patches</p>",
        "id": 220135615,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135201
    },
    {
        "content": "<p>Hm ok yeah so <code>patch</code> is something that needs to be handled</p>",
        "id": 220136193,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135364
    },
    {
        "content": "<p>but I think it should be relatively easy</p>",
        "id": 220136211,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135369
    },
    {
        "content": "<p>it should in theory be a small integration where you ask the sources \"here's a bunch of dependencies, wait for them all\", and then assert the <code>query_vec</code> succeeds</p>",
        "id": 220136312,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135409
    },
    {
        "content": "<p>Definitely more complicated than what's there today, but shouldn't be too bad I think</p>",
        "id": 220136368,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135435
    },
    {
        "content": "<p>I wouldn't try to unify with one loop since it'll probably be more pain than it's worth, but if it easily lends itself to such a refactoring seems reasonable to me</p>",
        "id": 220136409,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608135458
    },
    {
        "content": "<p>Ok I will look into it when I am done re-reading the RFC.</p>",
        "id": 220136490,
        "sender_full_name": "Eh2406",
        "timestamp": 1608135488
    },
    {
        "content": "<p>I also don't mind if having patches leads to more consecutive round trips. We can optimize in follow ups if we care. Or it can be another cawst to not having your patches upstreamed.</p>",
        "id": 220136815,
        "sender_full_name": "Eh2406",
        "timestamp": 1608135624
    },
    {
        "content": "<p>patches definitely don't need to do anything recursive</p>",
        "id": 220137873,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608136079
    },
    {
        "content": "<p>and they in general don't even interact with the registry, afaik you can only patch to a git or a path source</p>",
        "id": 220137944,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608136095
    },
    {
        "content": "<p>and it's just a top-level patch summary we're acquiring, nothing resolved</p>",
        "id": 220137991,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608136114
    },
    {
        "content": "<p>so you may not even need a loop or anything like \"work with this set of requests\"</p>",
        "id": 220138028,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608136132
    },
    {
        "content": "<p>So if neither <code>overrides</code> nor <code>patch</code> can depend on a http-registry, then for now should we just <code>panic</code> if they hit a <code>Pending</code> and deal with it when we have an example?</p>",
        "id": 220139657,
        "sender_full_name": "Eh2406",
        "timestamp": 1608136821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> it depends, you can definitely panic for overrides since path sources are always ready. For patch though it could at least use git which I think we'll want to refactor to not have an <code>update</code> step</p>",
        "id": 220144360,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608139060
    },
    {
        "content": "<p>I think the answer is \"no\" for panicking with patch though</p>",
        "id": 220144383,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608139070
    },
    {
        "content": "<p>imo</p>",
        "id": 220144384,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1608139071
    },
    {
        "content": "<p>Ok, that is faire.</p>",
        "id": 220144552,
        "sender_full_name": "Eh2406",
        "timestamp": 1608139138
    },
    {
        "content": "<p>The work so far on my part of the refactor is up: <a href=\"https://github.com/rust-lang/cargo/pull/8985\">https://github.com/rust-lang/cargo/pull/8985</a> feedback especially about the listed questions is appreciated.</p>",
        "id": 220179913,
        "sender_full_name": "Eh2406",
        "timestamp": 1608156432
    }
]