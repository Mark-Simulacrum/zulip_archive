[
    {
        "content": "<p>Hi folks! I'm using <code>cargo</code> as a library (specifically in the context of something sort of like <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>'s <a href=\"https://crates.io/crates/cargo-local-registry\"><code>cargo-local-registry</code></a>), and am trying to upgrade from <code>cargo 0.44</code> to <code>cargo 0.50</code>. However, following that upgrade, it seems like source replacement through <code>Config::set_values</code> no longer works? Specifically, I have the following values set in the <code>Config</code> (as reported by <code>Config::values</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>{&quot;source&quot;: {&quot;local-registry&quot;: {&quot;local-registry&quot;: /a/local/path (from --config cli option)}, &quot;crates-io&quot;: {&quot;replace-with&quot;: local-registry (from --config cli option)}}}\n</code></pre></div>\n<p>And I have an index file + <code>.crate</code> file for a crate <code>foobar</code> at <code>/a/local/path/index/fo/ob/foobar</code> and <code>/a/local/path/foobar-0.1.3.crate</code> respectively. Yet when I run <code>core::resolver::resolve</code> with said config, I now get an error saying</p>\n<div class=\"codehilite\"><pre><span></span><code>no matching package named `foobar` found\nlocation searched: registry `https://github.com/rust-lang/crates.io-index`\n</code></pre></div>\n<p>With <code>0.44</code> this worked just fine. It seems strange that the error message does not name the replacement registry. Did the handling of replaced registries change somehow between 0.44 and 0.50?</p>",
        "id": 221988391,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1610047507
    },
    {
        "content": "<p>this is probably an unrelated change which introduced or an outright bug in Cargo, but I don't think any of us remember versions well enough to pin it down. Bisection may be able to help though?</p>",
        "id": 221989193,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1610047867
    },
    {
        "content": "<p>Okay, I'll start doing some digging and see if I can track it down!</p>",
        "id": 221989440,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1610047983
    },
    {
        "content": "<p>Can confirm that this worked correctly in 0.49, so it's a regression since then. Will start bisecting.</p>",
        "id": 221990360,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1610048386
    },
    {
        "content": "<p>oof, the bad commit is <code>bcfdf9fbad78cf0e9ec52e84ce68f7b2a5aa19da</code>, which is the new namespaced features implementation <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span></p>",
        "id": 221994807,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1610050596
    },
    {
        "content": "<p>I'll try to see if I can construct a small example error case when I get back from lunch. It _should_ just be a matter of calling <code>resolve</code> with a <code>Config</code> where you've used <code>replace-with</code> on <code>crates.io</code>, and where the replacement <code>local-registry</code> has a package that isn't on <a href=\"http://crates.io\">crates.io</a> but is depended on.</p>",
        "id": 221996993,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1610051620
    },
    {
        "content": "<p>Ah, I see what's going on. The issue isn't actually on the consumer side of the index. The index entry I generate in the first place is now incorrect, because <code>summary().features()</code> now includes \"dep\" features as well, which are invalid in index entries. Specifically, if you have</p>\n<div class=\"codehilite\"><pre><span></span><code>[dependencies]\nchrono = { version = &quot;*&quot;, optional = true }\n</code></pre></div>\n<p>Previously <code>.summary().features()</code> would be empty, whereas after the commit above it will include <code>chrono =&gt; dep:chrono</code>. Doing some digging, it appears that this was also an issue internally (e.g., for publishing), but was fixed by <a href=\"https://github.com/rust-lang/cargo/pull/8853\">https://github.com/rust-lang/cargo/pull/8853</a>. So I suppose I'll need to find a way to fix that in my own registry index generation code.</p>",
        "id": 222011621,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1610058949
    },
    {
        "content": "<p>Solution appears to be to use <code>member.manifest().original().features()</code> for each member in <code>workspace.members()</code>.</p>",
        "id": 222012122,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1610059232
    }
]