[
    {
        "content": "<p>It looks like <span class=\"user-mention\" data-user-id=\"116011\">@Steve Klabnik</span> is working towards a 1.0 of semver. It would be sad if it stabilized and we cant use it. Why are we stuck on 0.10.0?</p>",
        "id": 240238668,
        "sender_full_name": "Eh2406",
        "timestamp": 1621971342
    },
    {
        "content": "<p>it may be <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> not Steve.</p>",
        "id": 240239749,
        "sender_full_name": "Eh2406",
        "timestamp": 1621971834
    },
    {
        "content": "<p>0.11 introduced a lot of bugs that make it unable to handle previously published legitimate crate versions</p>",
        "id": 240241410,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621972524
    },
    {
        "content": "<p>see <a href=\"https://github.com/dtolnay/semver/issues/217\">https://github.com/dtolnay/semver/issues/217</a> for example</p>",
        "id": 240241422,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621972529
    },
    {
        "content": "<p>as far as I know it was all bugs and not intentional divergence from Cargo</p>",
        "id": 240241437,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621972541
    },
    {
        "content": "<p>So all thows bugs are fixed in 1.0?</p>",
        "id": 240242710,
        "sender_full_name": "Eh2406",
        "timestamp": 1621973090
    },
    {
        "content": "<p>as far as I know</p>",
        "id": 240243194,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621973316
    },
    {
        "content": "<p>I closed out most of the issue tracker this morning but not done yet</p>",
        "id": 240243211,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621973327
    },
    {
        "content": "<p>There is a file <a href=\"https://github.com/dtolnay/semver/pull/223#issuecomment-743448216\">here</a> with all the versions and requirements from <a href=\"http://crates.io\">crates.io</a>. It would be so comforting to compare that the same ones parse and match between 0.10 and 1.0. If there is time before the 1.0 release, I may try to do that, if someone does not beat me to it. When where you planning the release?</p>",
        "id": 240243894,
        "sender_full_name": "Eh2406",
        "timestamp": 1621973622
    },
    {
        "content": "<p>updated data should also be available on <a href=\"https://static.crates.io/db-dump.tar.gz\">https://static.crates.io/db-dump.tar.gz</a></p>",
        "id": 240244767,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1621974059
    },
    {
        "content": "<p>let me forward this thread to the <a href=\"http://crates.io\">crates.io</a> team too</p>",
        "id": 240244872,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1621974121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> hmm, a thing I see missing there is the <code>diesel</code> feature, which is used by <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 240253417,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1621978669
    },
    {
        "content": "<p>(I asked a member of the <a href=\"http://crates.io\">crates.io</a> team to open an issue on the repo)</p>",
        "id": 240253426,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1621978679
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/dtolnay/semver/issues/237\">https://github.com/dtolnay/semver/issues/237</a> with the comparison result between 0.10 and 1.0</p>",
        "id": 240257473,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621981134
    },
    {
        "content": "<p>regarding diesel, I would prefer  not to have that in the crate</p>",
        "id": 240257867,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621981389
    },
    {
        "content": "<p>doesn't diesel have something that works like <code>#[serde(deserialize_with = \"...\")]</code> where you can override what impl it uses for a particular field using an attribute?</p>",
        "id": 240257895,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621981420
    },
    {
        "content": "<p>Thank you so much. I am comfortable with that level of brakeage!</p>",
        "id": 240258009,
        "sender_full_name": "Eh2406",
        "timestamp": 1621981488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119235\">David Tolnay</span> <a href=\"#narrow/stream/246057-t-cargo/topic/semver.201.2E0/near/240257895\">said</a>:</p>\n<blockquote>\n<p>doesn't diesel have something that works like <code>#[serde(deserialize_with = \"...\")]</code> where you can override what impl it uses for a particular field using an attribute?</p>\n</blockquote>\n<p>I'm not aware of that -- we'll probably have to do a newtype whenever we interact with the models then</p>",
        "id": 240258221,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1621981643
    },
    {
        "content": "<p><a href=\"https://docs.diesel.rs/master/diesel/deserialize/derive.Queryable.html\">https://docs.diesel.rs/master/diesel/deserialize/derive.Queryable.html</a></p>\n<blockquote>\n<p>To provide custom deserialization behavior for a field, you can use <code>#[diesel(deserialize_as = \"SomeType\")]</code>. If this attribute is present, Diesel will deserialize the corresponding field into <code>SomeType</code>, rather than the actual field type on your struct and then call <code>.try_into</code> to convert it to the actual field type. This can be used to add custom behavior for a single field, or use types that are otherwise unsupported by Diesel.</p>\n</blockquote>",
        "id": 240262495,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621984833
    },
    {
        "content": "<p>that seems like the thing</p>",
        "id": 240262499,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621984840
    },
    {
        "content": "<p>I would expect to be able to write: <code>#[diesel(deserialize_as = \"DbVersion\")] num: semver::Version</code></p>\n<div class=\"codehilite\"><pre><span></span><code>struct DbVersion(semver::Version);\n\nimpl From&lt;DbVersion&gt; for semver::Version {...}\n\n/* some diesel trait impls for DbVersion (???) */\n</code></pre></div>\n<p>but then use semver::Version throughout everything</p>",
        "id": 240262693,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621985028
    },
    {
        "content": "<p>if <a href=\"http://crates.io\">crates.io</a> is pretty much the only user of a diesel impl, it should be same amount of code as putting an impl into the semver crate</p>",
        "id": 240262844,
        "sender_full_name": "David Tolnay",
        "timestamp": 1621985136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> Thank you so much for all the work you're putting into semver!</p>",
        "id": 240262978,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621985282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> This is awesome! I've opened <a href=\"https://github.com/dtolnay/semver/pull/239\">https://github.com/dtolnay/semver/pull/239</a> with tests for a few edge cases that I ran into when looking into the regressions a few months ago. It's all fixed now! And I just saw <a href=\"https://github.com/rust-lang/rust/issues/237\">#237</a> above with the testing of versions from <a href=\"http://crates.io\">crates.io</a>. Awesome!</p>",
        "id": 240278993,
        "sender_full_name": "Justin Geibel",
        "timestamp": 1622003857
    }
]