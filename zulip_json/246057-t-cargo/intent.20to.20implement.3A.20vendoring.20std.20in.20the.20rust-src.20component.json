[
    {
        "content": "<p>Going to be looking at implementing the design ehuss describes in this issue: <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/23\">https://github.com/rust-lang/wg-cargo-std-aware/issues/23</a></p>",
        "id": 215724259,
        "sender_full_name": "Gankra",
        "timestamp": 1604588941
    },
    {
        "content": "<p>this will require: </p>\n<ol>\n<li>changing the code for creating the rust-src component so it vendors (somehow) the libtest/libstd dependencies</li>\n<li>changing -Zbuild-std to grab that vendor and incorporate it into the build (<code>[patch]</code>?)</li>\n<li>possibly adding a mode to <code>cargo vendor</code> to provide the infra for step 1</li>\n</ol>",
        "id": 215724532,
        "sender_full_name": "Gankra",
        "timestamp": 1604589054
    },
    {
        "content": "<p>Not sure who needs to be roped in to make this an officially supported plan</p>",
        "id": 215724842,
        "sender_full_name": "Gankra",
        "timestamp": 1604589188
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> and <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span></p>",
        "id": 215724881,
        "sender_full_name": "Gankra",
        "timestamp": 1604589207
    },
    {
        "content": "<p>I'd be less certain about step 3 but otherwise sounds good to me!</p>",
        "id": 215724937,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604589230
    },
    {
        "content": "<p>now where the heck is the rust-src generator xp</p>",
        "id": 215725020,
        "sender_full_name": "Gankra",
        "timestamp": 1604589252
    },
    {
        "content": "<p>There's a link in the issue: <a href=\"https://github.com/rust-lang/rust/blob/4f7612ac1499258025077f1fd05d2f429f9accfb/src/bootstrap/dist.rs#L1026-L1042\">https://github.com/rust-lang/rust/blob/4f7612ac1499258025077f1fd05d2f429f9accfb/src/bootstrap/dist.rs#L1026-L1042</a></p>",
        "id": 215725123,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604589303
    },
    {
        "content": "<p>oh great, thanks!</p>",
        "id": 215725157,
        "sender_full_name": "Gankra",
        "timestamp": 1604589325
    },
    {
        "content": "<p>On the Cargo side, the patches would go here: <a href=\"https://github.com/rust-lang/cargo/blob/d5556aeb8405b1fe696adb6e297ad7a1f2989b62/src/cargo/core/compiler/standard_lib.rs#L41-L56\">https://github.com/rust-lang/cargo/blob/d5556aeb8405b1fe696adb6e297ad7a1f2989b62/src/cargo/core/compiler/standard_lib.rs#L41-L56</a>  It would need to go through the vendor directory and add a patch for each.  It can <em>probably</em> assume the directory name is the same as the package name?  I'm not sure if that's safe.  And hopefully there is never more than one version of the same package, but that could also be a problem.</p>",
        "id": 215726000,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604589682
    },
    {
        "content": "<p>how manicured is the rust vendor? does anyone freak out if e.g. there's two versions of libc or something?</p>",
        "id": 215726802,
        "sender_full_name": "Gankra",
        "timestamp": 1604589986
    },
    {
        "content": "<p>I'm not sure I understand the question.  The vendor in <code>PlainSourceTarball</code> is just \"everything\".  For the <code>rust-src</code> vendor, it should just be the standard-lib dependencies, so in that sense it should be pretty minimal.  My concern about having multiple versions of dependencies is that creating the <code>patch</code> entries in Cargo might be awkward. But maybe it'll be fine, I dunno.  I don't think there are any dupes presently, but there might be in the future (but hopefully not).</p>",
        "id": 215727880,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604590422
    },
    {
        "content": "<p>right, just wondering if that was anyone vigilant about that, or if it was just vaguely desirable</p>",
        "id": 215728310,
        "sender_full_name": "Gankra",
        "timestamp": 1604590571
    },
    {
        "content": "<p>IIRC there's no CI preventing duplicate versions</p>",
        "id": 215728355,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604590591
    },
    {
        "content": "<p>so with some testing it looks like running <code>cargo vendor</code> in the libtest directory just... does the right thing?</p>",
        "id": 215728365,
        "sender_full_name": "Gankra",
        "timestamp": 1604590596
    },
    {
        "content": "<p>As far as building a clean vendor for just building it, lockfile auto-included</p>",
        "id": 215728466,
        "sender_full_name": "Gankra",
        "timestamp": 1604590637
    },
    {
        "content": "<p>evidently only <code>-s</code> has issues seeing the lockfile</p>",
        "id": 215728529,
        "sender_full_name": "Gankra",
        "timestamp": 1604590663
    },
    {
        "content": "<p>we could also pass <code>--versioned-dirs</code> to always have the version</p>",
        "id": 215728649,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604590700
    },
    {
        "content": "<p>instead of sometimes having it and sometimes not</p>",
        "id": 215728677,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604590711
    },
    {
        "content": "<p>true</p>",
        "id": 215728693,
        "sender_full_name": "Gankra",
        "timestamp": 1604590716
    },
    {
        "content": "<p>What's the magic/problem that rustc-std-workspace-core fake package is handling? The actual Cargo.tomls in the rustc source just use relative paths.</p>",
        "id": 215740900,
        "sender_full_name": "Gankra",
        "timestamp": 1604595257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> It is described here: <a href=\"https://github.com/rust-lang/rust/blob/master/library/rustc-std-workspace-core/README.md\">https://github.com/rust-lang/rust/blob/master/library/rustc-std-workspace-core/README.md</a></p>",
        "id": 215741173,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604595384
    },
    {
        "content": "<p>ah, just found that, thanks :)</p>",
        "id": 215741211,
        "sender_full_name": "Gankra",
        "timestamp": 1604595401
    },
    {
        "content": "<p>\"Crates on <a href=\"http://crates.io\">crates.io</a> that the standard library depend on the rustc-std-workspace-core crate from <a href=\"http://crates.io\">crates.io</a>\" reads like some words are missing</p>",
        "id": 215741363,
        "sender_full_name": "Gankra",
        "timestamp": 1604595472
    },
    {
        "content": "<p>huh neat: <a href=\"https://github.com/rust-lang/getopts/blob/master/Cargo.toml#L18-L19\">https://github.com/rust-lang/getopts/blob/master/Cargo.toml#L18-L19</a></p>",
        "id": 215741644,
        "sender_full_name": "Gankra",
        "timestamp": 1604595579
    },
    {
        "content": "<p>Yea, probably add the word <code>use</code>:  <code>depend on use the ...</code></p>",
        "id": 215741653,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604595583
    },
    {
        "content": "<p>Is there a special utility in cargo I should be using to slurp up e.g. vendor/addr2line-0.13.0 into a Dependency, or should I just parse the version out of the file name and feed it into Dependency::parse_no_deprecated?</p>",
        "id": 215748493,
        "sender_full_name": "Gankra",
        "timestamp": 1604598278
    },
    {
        "content": "<p>There isn't anything I know of that will separate the name from the version. That's what I was concerned about in terms of having versions in the directory name (which would be required if there are multiple versions of a dependency).  Maybe <code>rsplit</code> on <code>-</code> and hope versions don't have dashes?  That seems too brittle, though.  It seems overkill to open each <code>Cargo.toml</code> and read it, though.  I don't have any particular good ideas for that.</p>",
        "id": 215750364,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604599092
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 215750423,
        "sender_full_name": "Gankra",
        "timestamp": 1604599116
    },
    {
        "content": "<p>well I already have to deal with wasi-0.9.0+wasi-snapshot-preview1</p>",
        "id": 215750434,
        "sender_full_name": "Gankra",
        "timestamp": 1604599123
    },
    {
        "content": "<p>I will ponder this</p>",
        "id": 215750554,
        "sender_full_name": "Gankra",
        "timestamp": 1604599181
    },
    {
        "content": "<p>not 100% clear on how the <code>patch</code> API works internally though. I'm <em>assuming</em> it uses the version argument to check if it should patch a given crate lookup.</p>",
        "id": 215750818,
        "sender_full_name": "Gankra",
        "timestamp": 1604599267
    },
    {
        "content": "<p>Which presumably it would be good to only patch exactly the versions std uses</p>",
        "id": 215750856,
        "sender_full_name": "Gankra",
        "timestamp": 1604599283
    },
    {
        "content": "<p>(or do we remove the patch once done building std?)</p>",
        "id": 215750888,
        "sender_full_name": "Gankra",
        "timestamp": 1604599297
    },
    {
        "content": "<p>std is built as a temporary, independent workspace, so the patches added only apply to that temporary workspace.  The version should not be included in the patch. Conceptually it is:</p>\n<div class=\"codehilite\"><pre><span></span><code>[patch.crates-io]\nlibc = { path = &quot;vendor/libc&quot; }\n# etc.\n</code></pre></div>\n<p>So in the API to create those patches, it creates a <code>SourceId</code> for each directory (<code>SoruceId::for_path</code>), a <code>Dependency</code> (name=\"libc\", version=None, source_id). And those entries are inserted into the <code>patch</code> table. Patches just \"overlay\" the normal <a href=\"http://crates.io\">crates.io</a> registry, so there's no need to specify a version or features or anything.</p>",
        "id": 215751935,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604599764
    },
    {
        "content": "<p>how does one resolve patches for two different versions, then?</p>",
        "id": 215760264,
        "sender_full_name": "Gankra",
        "timestamp": 1604603598
    },
    {
        "content": "<p>You have to use rename syntax like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>log = {path=&quot;log&quot;}\nlog2 = {path=&quot;log2&quot;, package=&quot;log&quot;}\n</code></pre></div>\n<p>The name on the left (<code>log2</code> in this case) is ignored.</p>",
        "id": 215760707,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604603836
    },
    {
        "content": "<p>So thinking about this, I think it would be a reasonable limitation that the rust-src component will either fail to build or be unvendorable if there are multiple versions of a crate</p>",
        "id": 215772150,
        "sender_full_name": "Gankra",
        "timestamp": 1604609441
    },
    {
        "content": "<p>the vendor usecase is probably pining compilers anyway</p>",
        "id": 215772220,
        "sender_full_name": "Gankra",
        "timestamp": 1604609481
    },
    {
        "content": "<p>(firefox is, certainly)</p>",
        "id": 215772231,
        "sender_full_name": "Gankra",
        "timestamp": 1604609489
    },
    {
        "content": "<p>Nice, I have a minimal working version</p>",
        "id": 215781307,
        "sender_full_name": "Gankra",
        "timestamp": 1604614469
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/8834\">https://github.com/rust-lang/cargo/pull/8834</a></p>",
        "id": 215782233,
        "sender_full_name": "Gankra",
        "timestamp": 1604615160
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78790\">https://github.com/rust-lang/rust/pull/78790</a></p>",
        "id": 215782284,
        "sender_full_name": "Gankra",
        "timestamp": 1604615185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I assume --frozen/--locked/--no-delete won't actually do the specific thing I want here, in that if modifications would happen to the lock, it would just error?</p>",
        "id": 216097567,
        "sender_full_name": "Gankra",
        "timestamp": 1604934971
    },
    {
        "content": "<p>correct</p>",
        "id": 216097684,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604935031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> what exactly does it mean to \"update the lock\"? That only makes sense to me if a Cargo.toml has been edited and now a dependency conflict exists, but certainly I'm not editing the versions listed in any Cargo.toml..?</p>",
        "id": 216099093,
        "sender_full_name": "Gankra",
        "timestamp": 1604935639
    },
    {
        "content": "<p>(Also I made a mini version of what I'm doing with workspaces and it... does what I want?)</p>",
        "id": 216099231,
        "sender_full_name": "Gankra",
        "timestamp": 1604935694
    },
    {
        "content": "<p>I guess missing tomls could prompt deletions from the lock..?</p>",
        "id": 216099295,
        "sender_full_name": "Gankra",
        "timestamp": 1604935727
    },
    {
        "content": "<p>Ah yeah, the temp lock I copy in definitely gets edited</p>",
        "id": 216099400,
        "sender_full_name": "Gankra",
        "timestamp": 1604935770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> so the top-level <code>Cargo.lock</code> encompasses the entire rustc workspace, but the workspace of the rust-src component is much smaller and doesn't have as many dependencies. As a result vendoring will update the lock file it's given because the lock file has a superset of dependencies</p>",
        "id": 216100024,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604936006
    },
    {
        "content": "<p>Yeah agreed. I just don't get why that would change the root lock</p>",
        "id": 216100074,
        "sender_full_name": "Gankra",
        "timestamp": 1604936030
    },
    {
        "content": "<p>does Builder's API secretly do symlinky stuff...?</p>",
        "id": 216100146,
        "sender_full_name": "Gankra",
        "timestamp": 1604936048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> it does sort of -- <a href=\"https://github.com/rust-lang/rust/blob/25f6938da459a57b43bdf16ed6bdad3225b2a3ce/src/bootstrap/lib.rs#L1188-L1191\">https://github.com/rust-lang/rust/blob/25f6938da459a57b43bdf16ed6bdad3225b2a3ce/src/bootstrap/lib.rs#L1188-L1191</a></p>",
        "id": 216101859,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604936725
    },
    {
        "content": "<p>it hard links which would probably cause issues here</p>",
        "id": 216101866,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604936731
    },
    {
        "content": "<p>yep, just found that too</p>",
        "id": 216101984,
        "sender_full_name": "Gankra",
        "timestamp": 1604936769
    },
    {
        "content": "<p>hmm</p>",
        "id": 216101987,
        "sender_full_name": "Gankra",
        "timestamp": 1604936771
    },
    {
        "content": "<p>Oh huh, so the dirs themselves aren't hardlinked</p>",
        "id": 216102443,
        "sender_full_name": "Gankra",
        "timestamp": 1604936968
    },
    {
        "content": "<p>so I can probably just use fs::copy directly with a comment</p>",
        "id": 216102476,
        "sender_full_name": "Gankra",
        "timestamp": 1604936983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> r? <a href=\"https://github.com/rust-lang/cargo/pull/8834\">https://github.com/rust-lang/cargo/pull/8834</a> (the rust half is about to land)</p>",
        "id": 216130724,
        "sender_full_name": "Gankra",
        "timestamp": 1604949342
    },
    {
        "content": "<p>(alternatively do you just wanna ship it, <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> ?)</p>",
        "id": 216130845,
        "sender_full_name": "Gankra",
        "timestamp": 1604949382
    },
    {
        "content": "<p>let's give ehuss a bit more time to take a look if he'd like</p>",
        "id": 216135955,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604951921
    }
]