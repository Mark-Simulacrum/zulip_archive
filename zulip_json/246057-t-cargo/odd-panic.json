[
    {
        "content": "<p>I'm running into a weird situation when using cargo as a library and invoking <code>core::resolver::resolve</code>. Specifically, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;package cache lock is not currently held, Cargo forgot to call `acquire_package_cache_lock` before we got to this stack frame&#39;\nstack backtrace:\n   0: std::panicking::begin_panic\n   1: cargo::util::config::Config::assert_package_cache_locked\n   2: &lt;cargo::sources::git::source::GitSource as cargo::core::source::Source&gt;::update\n   3: cargo::core::registry::PackageRegistry::ensure_loaded\n   4: &lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query\n   5: cargo::core::resolver::dep_cache::RegistryQueryer::query\n   6: &lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next\n   7: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n   8: cargo::core::resolver::dep_cache::RegistryQueryer::build_deps\n   9: cargo::core::resolver::activate\n  10: cargo::core::resolver::activate_deps_loop\n  11: cargo::core::resolver::resolve\n</code></pre></div>\n<p>It only seems to happen _some_ of the time. Am I expected to call <code>acquire_package_cache_lock</code> myself before invoking <code>resolve</code> in some situations but not others?</p>",
        "id": 230609926,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1615937287
    },
    {
        "content": "<p>Yes, callers need to acquire the lock.</p>",
        "id": 230611170,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615938191
    },
    {
        "content": "<p>Huh, I wonder how I've gotten away with the code _not_ doing that for so long. Should this be documented on <code>resolve</code>?</p>",
        "id": 230611277,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1615938269
    }
]