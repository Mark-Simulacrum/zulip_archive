[
    {
        "content": "<p>I want to</p>\n<ol>\n<li>Give a compile error when not on windows, and</li>\n<li>Give no other errors, and</li>\n<li>Have the package work normally on Windows</li>\n</ol>\n<p>The first thing I tried was <code>#[cfg(not(windows))]</code> compile error in the source code. But that will also give all other errors that show up (things like 'could not find <code>windows</code> in <code>os</code>').</p>\n<p>Then I tried <code>#![cfg(windows)]</code> on the whole crate, and additionally have the <code>compile_error!</code>. But that completely ignored the compile error, since it's part of the crate.</p>\n<p>My last idea was to use a different path for the <code>lib.rs</code> when not on windows, and have the only thing in the file be a compile error. But I don't see a way to do that in cargo. Is there a syntax like this?</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package.'cfg(not(windows))']</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">\"src/compile_error.rs\"</span>\n</code></pre></div>\n\n<p>If not, is there a simpler way to do this?</p>",
        "id": 214991283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603988455
    },
    {
        "content": "<p>You can use a build script which will error out on other platforms.</p>",
        "id": 214991616,
        "sender_full_name": "Eric Huss",
        "timestamp": 1603988602
    },
    {
        "content": "<p>ah right - I can find the target with <code>std::env::var(\"TARGET\")</code>?</p>",
        "id": 214991687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603988641
    },
    {
        "content": "<p>hmm that doesn't tell me whether it's windows though - there are many windows targets</p>",
        "id": 214991761,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603988661
    },
    {
        "content": "<p>I want <code>cfg(windows)</code>, which includes all of them</p>",
        "id": 214991782,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603988670
    },
    {
        "content": "<p><code>CARGO_CFG_WINDOWS</code> looks right</p>",
        "id": 214991845,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603988704
    },
    {
        "content": "<p>There are separate <code>CFG</code> env vars for all the normal target stuff, like <code>CARGO_CFG_WINDOWS</code> <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">docs</a></p>",
        "id": 214991854,
        "sender_full_name": "Eric Huss",
        "timestamp": 1603988707
    },
    {
        "content": "<p>that worked great, thank you!</p>",
        "id": 214992488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603988972
    },
    {
        "content": "<p>What would it take for Cargo to have a <em>declarative</em> way to specify this inside <code>Cargo.toml</code>, so that Cargo can detect that a crate doesn't support the current platform and reject it with a cleaner error message without having to compile it (or ideally download it)?</p>",
        "id": 215002961,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603993454
    },
    {
        "content": "<p>I have some crates in a similar position.</p>",
        "id": 215002997,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603993475
    },
    {
        "content": "<p>personally I'm ok with it taking a little longer, since I wouldn't expect people to run into this error more than once</p>",
        "id": 215003320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603993623
    },
    {
        "content": "<p>My thouts <a href=\"https://github.com/rust-lang/cargo/issues/8723#issuecomment-696314612\">https://github.com/rust-lang/cargo/issues/8723#issuecomment-696314612</a></p>",
        "id": 215003359,
        "sender_full_name": "Eh2406",
        "timestamp": 1603993634
    },
    {
        "content": "<p>I've been thinking of making a wiki with \"rust tips and tricks\" that I think would work well here</p>",
        "id": 215003384,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603993647
    },
    {
        "content": "<p>Winapi simply uses <code>#![cfg(windows)]</code> thereby compiling to nothing on non-windows systems.</p>",
        "id": 215005331,
        "sender_full_name": "bjorn3",
        "timestamp": 1603994455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Give.20a.20compile.20error.20when.20not.20on.20windows.3F/near/215005331\">said</a>:</p>\n<blockquote>\n<p>Winapi simply uses <code>#![cfg(windows)]</code> thereby compiling to nothing on non-windows systems.</p>\n</blockquote>\n<p>then giving bad error messages if you try to use it, yes. Winapi is actually the use case for this. <a href=\"https://github.com/retep998/winapi-rs/pull/949\">https://github.com/retep998/winapi-rs/pull/949</a></p>",
        "id": 215014203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603998681
    }
]