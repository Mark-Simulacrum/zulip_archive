[
    {
        "content": "<p>Has there been any discussion of a possibility of requiring certain dependencies only when there is a feature flag overlap?</p>\n<p>For example, Surf (the http client) would ideally like to have feature flags for the http backend separate of the tls backend.<br>\nCurrently this would not work well because e.g. a <code>rustls</code> feature would have switch flags for both the <code>async-h1</code> and <code>hyper</code> clients, because it has no way of knowing which http client backend was selected for use.<br>\nSee <a href=\"https://github.com/http-rs/surf/pull/271\">https://github.com/http-rs/surf/pull/271</a> for an ongoing discussion on Surf's end about how to deal with this.</p>",
        "id": 223177458,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1611018004
    },
    {
        "content": "<p>I don't think I follow your suggestion? Do you mean an optional dependency that is activated only if both features are activated?</p>",
        "id": 223178077,
        "sender_full_name": "Eh2406",
        "timestamp": 1611018785
    },
    {
        "content": "<p>Correct, an optional dependency or feature of an optional dependency which is only active if two specified features are active.</p>\n<p>i.e. <code>h1-client</code>+<code>rustls</code> rather than <code>h1-client-rustls</code> (which I think, is the only way to do this today?).</p>",
        "id": 223178253,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1611019052
    },
    {
        "content": "<p>This (unstable) feature may help <a href=\"https://doc.rust-lang.org/cargo/reference/unstable.html#weak-dependency-features\">https://doc.rust-lang.org/cargo/reference/unstable.html#weak-dependency-features</a></p>",
        "id": 223178646,
        "sender_full_name": "Eh2406",
        "timestamp": 1611019471
    },
    {
        "content": "<p>Does that mean that this would only pull in <code>rustls</code> when passed <code>h1-client, rustls</code>?</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[features]</span>\n<span class=\"n\">h1-client</span> <span class=\"o\">=</span> <span class=\"k\">[\"http-client/h1_client\", \"async-native-tls?\", \"rustls-tls?\"]</span>\n<span class=\"n\">rustls-tls</span> <span class=\"o\">=</span> <span class=\"k\">[\"rustls\"]</span>\n</code></pre></div>",
        "id": 223180322,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1611021738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> Weak dependency features would let you do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[features]</span>\n<span class=\"n\">rustls</span> <span class=\"o\">=</span> <span class=\"k\">[\"h1_client?/rustls\", \"hyper?/rustls\"]</span>\n</code></pre></div>",
        "id": 223187766,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611032539
    },
    {
        "content": "<p>Which means \"activate the rustls feature of h1_client if and only if h1_client is enabled\" and \"activate the rustls feature of hyper if and only if hyper is enabled\".</p>",
        "id": 223187781,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611032573
    },
    {
        "content": "<p>Then you could just enable the HTTP client you want and the TLS stack you want, and you'd get the appropriate feature of the appropriate crate.</p>",
        "id": 223187809,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611032612
    },
    {
        "content": "<p>(You may also want a <code>build.rs</code> script that checks if you pick an impossible combination.)</p>",
        "id": 223187816,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611032630
    },
    {
        "content": "<p>Well that sounds nice - what's the best way of doing this today though?</p>",
        "id": 223190037,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1611036004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> Today, in stable, I don't think you have a better alternative than the client-tls feature-flag pairs.</p>",
        "id": 223193132,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611040066
    },
    {
        "content": "<p>Well, it's good to have confirmation, since that makes my choices simpler. Unfortunate that this isn't already stable though.</p>",
        "id": 223193201,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1611040143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> That said, if this solution will work for you, could you give it a try with nightly Cargo, and post an experience report to <a href=\"https://github.com/rust-lang/cargo/issues/8832\">https://github.com/rust-lang/cargo/issues/8832</a> ?</p>",
        "id": 223193269,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611040207
    },
    {
        "content": "<p>That'll help that feature become stable sooner.</p>",
        "id": 223193276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611040219
    },
    {
        "content": "<p>Sure thing, will do.</p>",
        "id": 223193280,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1611040229
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 223193284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611040232
    }
]