[
    {
        "content": "<p>Now that the rustc implementation of <code>cargo report-future-incompat</code> is in the bors queue (<a href=\"https://github.com/rust-lang/rust/pull/75534\">https://github.com/rust-lang/rust/pull/75534</a>), I'm starting to work on the Cargo implementation.</p>\n<p>Looking over the Cargo code, it looks like this will require us to collect <code>FutureIncompatReport</code> JSON messages from each job <code>on_stderr_line_inner</code>, and then aggregate them somehow.</p>\n<p>These messages can be produced from both <code>cargo build</code> and <code>cargo check</code>, so I don't think we'll want the aggregation to rely on getting the captured output from the build graph. This would mean performing some kind of top-level output caching - as far as I can tell, cargo currently only caches output on a per-job basis</p>",
        "id": 215006313,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603994957
    },
    {
        "content": "<p>Does that sound correct? If so, where would we want to store this top-level (per workspace?) cache on disk?</p>",
        "id": 215006389,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603994999
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 215006456,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603995012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I haven't looked at the current implementation (of <code>report-future-incompat</code>)<br>\n too closely, but I don't think it will require a separate caching mechanism.  All JSON messages for each Unit are already saved to disk.  The <code>JobQueue</code> can aggregate all the warnings, and report them at the end.  In <code>on_stderr_line_inner</code>, it will just need to detect those JSON messages, and send a <code>Message</code> to the <code>JobQueue</code> (you'll probably need to add a new <code>Message</code> variant).  The messages are automatically replayed from the cache, so I don't think there will need to be any additional work to support that.</p>",
        "id": 215007078,
        "sender_full_name": "Eric Huss",
        "timestamp": 1603995283
    },
    {
        "content": "<p>How will that interact with a <code>cargo report-future-incompatible</code> command?</p>",
        "id": 215012046,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603997694
    },
    {
        "content": "<p>Wouldn't we need to construct a <code>JobQueue</code> by either doing the equivalent of <code>cargo build</code> or <code>cargo check</code>?</p>",
        "id": 215013866,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603998538
    },
    {
        "content": "<p>Oh, i forgot there is that separate report. I would still probably follow the above, and then have <code>JobQueue</code> save the report somewhere in a JSON format. Probably needs to go in the root of the target directory (similar to <code>target/.rustc_info.json</code>). Let me know if you have any questions on how to do that.</p>",
        "id": 215018223,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604000716
    },
    {
        "content": "<p>When you Ctrl-C cargo after a job has failed, but before cargo has finished executing the others, does it attempt to do a graceful shutdown?</p>",
        "id": 215027147,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005226
    },
    {
        "content": "<p>My thought is that it might be useful to write out a partial future-incompat-report for the crates that did finish</p>",
        "id": 215027189,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005249
    },
    {
        "content": "<p>No, Ctrl-C kills all rustc processes.</p>",
        "id": 215027198,
        "sender_full_name": "bjorn3",
        "timestamp": 1604005255
    },
    {
        "content": "<p>does cargo itself handle the control-c in any way?</p>",
        "id": 215027235,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005274
    },
    {
        "content": "<p>Or rather it kills all processes in the foreground job.</p>",
        "id": 215027254,
        "sender_full_name": "bjorn3",
        "timestamp": 1604005281
    },
    {
        "content": "<p>I don't think cargo handles Ctrl-C at all.</p>",
        "id": 215027286,
        "sender_full_name": "bjorn3",
        "timestamp": 1604005300
    },
    {
        "content": "<p>For Windows it has some code to ensure that Ctrl-C kills all rustc processes in addition to the cargo process by creating a job object: <a href=\"https://github.com/rust-lang/cargo/blob/442de291ca040cf894a1845e6be62f4c081f7b29/src/cargo/util/job.rs\">https://github.com/rust-lang/cargo/blob/442de291ca040cf894a1845e6be62f4c081f7b29/src/cargo/util/job.rs</a></p>",
        "id": 215027762,
        "sender_full_name": "bjorn3",
        "timestamp": 1604005510
    },
    {
        "content": "<p>I would just stream the events into the cache file (save them as they appear), instead of waiting till the end.</p>",
        "id": 215027812,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604005531
    },
    {
        "content": "<p>sounds good</p>",
        "id": 215027937,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> I think the file will need to go alongside <code>.fingerprint</code>, since we might have different warnings in debug vs release mode</p>",
        "id": 215027983,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005603
    },
    {
        "content": "<p>e.g. a <code>#[cfg(debug_assertions)]</code> function</p>",
        "id": 215027995,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005610
    },
    {
        "content": "<p>Also, streaming them directly to the file will result in a nondeterministic order</p>",
        "id": 215028235,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005726
    },
    {
        "content": "<p>I guess we could just sort it before displaying, since we only display it in response to a command</p>",
        "id": 215028279,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005748
    },
    {
        "content": "<p>Hm, but then <code>cargo report-future-incompat</code> would need to know which profile was used during the last command (or the user would need to pass in the correct profile).</p>",
        "id": 215028324,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604005770
    },
    {
        "content": "<p>I assume that command would just \"print whatever happened during the last command\".</p>",
        "id": 215028420,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604005793
    },
    {
        "content": "<p>Sorting sounds reasonable.</p>",
        "id": 215028542,
        "sender_full_name": "Eric Huss",
        "timestamp": 1604005831
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 215028837,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604005989
    },
    {
        "content": "<p>using the top-level directory should be fine, then</p>",
        "id": 215028868,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604006010
    }
]