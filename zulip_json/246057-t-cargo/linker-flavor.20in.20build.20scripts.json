[
    {
        "content": "<p>In build scripts, is there a reason that <code>cargo:rustc-flags</code> limits itself to <code>-l</code> and <code>-L</code> flags? In particular I'm actually looking to change the linker flavor, which is unfortunately a <code>-C</code> flag.</p>",
        "id": 275810081,
        "sender_full_name": "bstrie",
        "timestamp": 1647613861
    },
    {
        "content": "<p>Why not use <code>.cargo/config.toml</code>? Having a build script suddenly change your linker would be confusing I think. And what if two crates try to change the linker to different things?</p>",
        "id": 275810610,
        "sender_full_name": "bjorn3",
        "timestamp": 1647614131
    },
    {
        "content": "<p>Because these are binary crates being built via artifact dependencies, which AFAIK makes that approach a non-starter</p>",
        "id": 275810760,
        "sender_full_name": "bstrie",
        "timestamp": 1647614186
    },
    {
        "content": "<p>I see.</p>",
        "id": 275810804,
        "sender_full_name": "bjorn3",
        "timestamp": 1647614217
    },
    {
        "content": "<p>and while profile overrides can be used with artifact dependencies, there's no profile option for setting the linker flavor</p>",
        "id": 275810846,
        "sender_full_name": "bstrie",
        "timestamp": 1647614247
    },
    {
        "content": "<p>I do see that there's a new unstable profile section called rustflags that lets us pass in arbitrary compiler options</p>",
        "id": 275811595,
        "sender_full_name": "bstrie",
        "timestamp": 1647614575
    },
    {
        "content": "<p>The use case is at the intersection of several unstable options and there interactions have not been fully thought threw.</p>",
        "id": 275812370,
        "sender_full_name": "Eh2406",
        "timestamp": 1647614914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> In the past, we have had one overall program link (not counting cdylibs and similar), and we don't want a dependency to be able to affect the link of the overall program.</p>\n<p>Now that we have artifact dependencies, several things that didn't make sense before now do make sense at the boundary of an artifact dependency.</p>",
        "id": 275834858,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647623778
    },
    {
        "content": "<p>yeah, I'm interested to push the boundaries of artifact dependencies since my company sponsored the work on it, so of all people we should be testing it out :P</p>",
        "id": 275849386,
        "sender_full_name": "bstrie",
        "timestamp": 1647630623
    },
    {
        "content": "<p>however, in this case the <em>actual</em> solution is to rewrite this linker script so that LLD doesn't choke on it, I was just trying to be lazy :P</p>",
        "id": 275849439,
        "sender_full_name": "bstrie",
        "timestamp": 1647630648
    }
]