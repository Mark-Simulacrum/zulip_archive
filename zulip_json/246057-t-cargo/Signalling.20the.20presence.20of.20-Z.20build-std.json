[
    {
        "content": "<p>I filed an issue against the autocfg crate today (<a href=\"https://github.com/cuviper/autocfg/issues/34\">https://github.com/cuviper/autocfg/issues/34</a>) where it breaks in the presence of -Z build-std, because it doesn't know to add the sysroot when running its rustc probes. Is there some way for crates to discover this reliably?</p>",
        "id": 227718174,
        "sender_full_name": "jdm",
        "timestamp": 1614229197
    },
    {
        "content": "<p>I don't even really care about <code>-Z build-std</code> per se -- just need to know what flags to give <code>rustc</code> for the target</p>",
        "id": 227722291,
        "sender_full_name": "cuviper",
        "timestamp": 1614232962
    },
    {
        "content": "<p>see also <a href=\"https://github.com/cuviper/autocfg/issues/15\">https://github.com/cuviper/autocfg/issues/15</a></p>",
        "id": 227722350,
        "sender_full_name": "cuviper",
        "timestamp": 1614233013
    },
    {
        "content": "<p>Crates can come either from sysroot or --extern at any time, inside or outside of cargo. I would be surprised if there was a way to detect which way a crate would be loaded without replicating the crate search mechanism in rustc or having access to the flags that are passed to rustc. For rustflags you could look at cargo's build plan, but the issue is that you'd have no idea how the cargo was invoked in the first place (and so you cannot invoke cargo the right way to generate said build plan)</p>",
        "id": 227767541,
        "sender_full_name": "nagisa",
        "timestamp": 1614260243
    },
    {
        "content": "<p>It is entirely plausible that people specify a <code>RUSTFLAGS='--sysroot=/my_custom_path/'</code> or <code>RUSTFLAGS='--extern specific_lib=/my_custom_path/lib.rlib'</code> and expect <code>extern specific_lib</code> to work correctly in either instance.</p>",
        "id": 227767838,
        "sender_full_name": "nagisa",
        "timestamp": 1614260400
    },
    {
        "content": "<p>Now as far as this specific issue is concerned I would call it not-a-bug? Its definitely specified in the function name that it only probes the sysroot, and std is not required to come from a sysroot.</p>",
        "id": 227767956,
        "sender_full_name": "nagisa",
        "timestamp": 1614260443
    },
    {
        "content": "<p>huh, I would have guessed that <code>-Z build-std</code> would just prepare a path for <code>--sysroot</code>, but instead it presents those as <code>--extern 'noprelude:core=... --extern 'noprelude:std=...</code> etc.</p>",
        "id": 227814225,
        "sender_full_name": "cuviper",
        "timestamp": 1614277922
    },
    {
        "content": "<p>so <code>probe_sysroot_crate(\"std\") -&gt; false</code> is correct, but pedantically so</p>",
        "id": 227814435,
        "sender_full_name": "cuviper",
        "timestamp": 1614277997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <code>autocfg</code> does try to deal with <code>RUSTFLAGS</code> to some extent, but that's also messy between what is applied to host vs. target, and it doesn't try to find all the config files that may also set flags</p>",
        "id": 227815022,
        "sender_full_name": "cuviper",
        "timestamp": 1614278252
    },
    {
        "content": "<p>I think it would be nice if cargo just set something like <code>TARGET_RUSTFLAGS</code> for the build script invocation, just as it sets <code>RUSTC</code>, <code>TARGET</code>, etc</p>",
        "id": 227815140,
        "sender_full_name": "cuviper",
        "timestamp": 1614278291
    },
    {
        "content": "<p>Conversely it is plausible that some build systems would put a bunch dependency libraries into a sysroot (specified through a flag) in order to avoid dealing with <code>--extern</code>.</p>",
        "id": 227815157,
        "sender_full_name": "nagisa",
        "timestamp": 1614278299
    },
    {
        "content": "<p>To the best of my knowledge the sysroot layout is an implementation detail and as such unstable.</p>",
        "id": 227817686,
        "sender_full_name": "bjorn3",
        "timestamp": 1614279325
    },
    {
        "content": "<p>for the most part, <code>autocfg</code> just wants to invoke rustc the same way that the target will be built</p>",
        "id": 227820159,
        "sender_full_name": "cuviper",
        "timestamp": 1614280244
    },
    {
        "content": "<p>I don't really care about which flags are used, if there's a way to at least discover those flags</p>",
        "id": 227820518,
        "sender_full_name": "cuviper",
        "timestamp": 1614280373
    }
]