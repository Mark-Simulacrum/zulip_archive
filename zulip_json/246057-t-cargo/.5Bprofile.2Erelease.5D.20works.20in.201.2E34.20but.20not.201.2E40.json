[
    {
        "content": "<p>:(</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; cargo +1.40 build\nerror: failed to parse manifest at `/home/joshua/src/yottadb/YDBRust/Cargo.toml`\n\nCaused by:\n  feature `profile-overrides` is required\n\nthis Cargo does not support nightly features, but if you\nswitch to nightly channel you can add\n`cargo-features = [&quot;profile-overrides&quot;]` to enable this feature\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>&gt; cargo +1.34 build\nwarning: unused manifest key: profile.release.package\n</code></pre></div>\n<p>It's fine for it not to do anything, but I wish it would at least compile. Is there any way to say \"apply this feature if it's supported\"? It's since been stabilized.</p>",
        "id": 222187849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610223968
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[target.'cfg(not(debug_assertions))']</span>\n<span class=\"n\">opt-level</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>which gives</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: Found `debug_assertions` in `target.&#39;cfg(...)&#39;.dependencies`. This value is not supported for selecting dependencies and will not work as expected. To learn more visit https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#platform-specific-dependencies\n</code></pre></div>",
        "id": 222187983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610224127
    },
    {
        "content": "<p>hmm, <code>CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_OPT_LEVEL=0</code> might work</p>",
        "id": 222188117,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610224315
    },
    {
        "content": "<p>how can I tell if that variable is actually being used?</p>",
        "id": 222188160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610224337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> If you mean how to determine if the environment variable is being used, the usual way to run <code>cargo build -v</code> and inspect the flags being passed are what you expect.</p>",
        "id": 222190297,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610227063
    },
    {
        "content": "<p>FWIW, opt-level=0 is the default for build dependencies.</p>",
        "id": 222190365,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610227153
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html#build-dependencies\">https://doc.rust-lang.org/cargo/reference/profiles.html#build-dependencies</a></p>",
        "id": 222190374,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610227200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/.5Bprofile.2Erelease.5D.20works.20in.201.2E34.20but.20not.201.2E40/near/222190365\">said</a>:</p>\n<blockquote>\n<p>FWIW, opt-level=0 is the default for build dependencies.</p>\n</blockquote>\n<p>since 1.49, right, but we use older toolchains at work</p>",
        "id": 222190951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228247
    },
    {
        "content": "<p>and neither 'just update' nor 'let it go for older toolchains' is very attractive, because these are raspberry pis and it can mean almost an hour of difference with <code>opt-level=3</code></p>",
        "id": 222191000,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Then the environment variable is your best bet.</p>",
        "id": 222191291,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610228825
    },
    {
        "content": "<p>But also, this is an instance of a problem we've had various times, where \"doesn't exist\" is a more forgiving state than \"exists and is known to be nightly only\".</p>",
        "id": 222191310,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610228856
    },
    {
        "content": "<p>I would much prefer for nightly-only features to give a warning and be ignored, yeah</p>",
        "id": 222191369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228923
    },
    {
        "content": "<p>unlike language features, it's usually feasible to just ignore the option and have the build work</p>",
        "id": 222191371,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228936
    },
    {
        "content": "<p>I don't think that's <em>always</em> the right behavior. Some things cannot safely be silently ignored.</p>",
        "id": 222191373,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610228942
    },
    {
        "content": "<p>But in this particular case, they can.</p>",
        "id": 222191376,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610228950
    },
    {
        "content": "<p>(New dependency syntax, for instance, needs to fail noisily if not available.)</p>",
        "id": 222191380,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610228962
    },
    {
        "content": "<p>Also, if you want something you can write directly in the manifest for now, though it's more verbose, you could individually address dependencies by crate name.</p>",
        "id": 222191384,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610228974
    },
    {
        "content": "<p>well, there's 42 dependencies so I would prefer not to <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222191390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228998
    },
    {
        "content": "<p>42 build-dependencies, or 42 dependencies total?</p>",
        "id": 222191441,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229019
    },
    {
        "content": "<p>In any case, just offering an alternative, if you needed something you could list in the profile.</p>",
        "id": 222191448,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229038
    },
    {
        "content": "<p>this crate has no runtime dependencies</p>",
        "id": 222191449,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229046
    },
    {
        "content": "<p>which is why this feels so frustrating, conceptually it's very simple</p>",
        "id": 222191454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229060
    },
    {
        "content": "<p>\"just make everything -O0 except my crate\"</p>",
        "id": 222191460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229070
    },
    {
        "content": "<p>Hrm. I just realized, I think per-package overrides might also not have been stable until around the same time as <code>build-override</code>...</p>",
        "id": 222191465,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229101
    },
    {
        "content": "<p>Not sure whether there was a point where the former was stable and not the latter.</p>",
        "id": 222191472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229113
    },
    {
        "content": "<p>yeah that's the one that's giving an error right now, <code>profile.release.package.\"*\"</code></p>",
        "id": 222191513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229126
    },
    {
        "content": "<p>Did <code>-v</code> show that the environment variable was working?</p>",
        "id": 222191533,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229179
    },
    {
        "content": "<p>I haven't tried it yet</p>",
        "id": 222191537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229184
    },
    {
        "content": "<p>What toolchain version do you use at work?</p>",
        "id": 222191538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229185
    },
    {
        "content": "<p>many <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222191543,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229192
    },
    {
        "content": "<p>\"the latest thing available from package repositories\", but across many different operating systems</p>",
        "id": 222191547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229210
    },
    {
        "content": "<p>I'm curious, and I think I may have asked this before, but why is \"available from package repositories\" a selection criteria in this context? Is a vendored toolchain not an option at all?</p>",
        "id": 222191601,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229285
    },
    {
        "content": "<p>I'm not sure what you mean by a vendored toolchain. Rustup isn't an option because it's per-user</p>",
        "id": 222191608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229307
    },
    {
        "content": "<p>I wasn't asking about rustup, because I know there are often reasons why that isn't an option.</p>",
        "id": 222191616,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229327
    },
    {
        "content": "<p>By a vendored toolchain, I mean storing a compiled toolchain in a repository people obtain when they obtain the source code to be compiled, and arranging to use that toolchain rather than whatever they might have installed.</p>",
        "id": 222191659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229385
    },
    {
        "content": "<p>You can then update the vendored toolchain when you wish.</p>",
        "id": 222191662,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229398
    },
    {
        "content": "<p>that's basically a package manager, but with your own registry, right?</p>",
        "id": 222191667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229424
    },
    {
        "content": "<p>that sounds like a lot of work to set up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222191671,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229432
    },
    {
        "content": "<p>plus we'd have to pre-compile the toolchain for a bunch of different platforms which will be a god awful pain because rustc takes so long to compile</p>",
        "id": 222191675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229453
    },
    {
        "content": "<p>Not especially, and no, you wouldn't necessarily have to compile it yourself.</p>",
        "id": 222191678,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229463
    },
    {
        "content": "<p>well, anyway I think I've used up my new technology budget at work <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222191726,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229502
    },
    {
        "content": "<p>What I'm suggesting is that you could download the same compiled stable toolchain that rustup would have downloaded, take the resulting tarball, check it in somewhere, and have your build scripts unpack it and use it.</p>",
        "id": 222191736,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229525
    },
    {
        "content": "<p>It's a little annoying, but less annoying than having to run on older Rust/Cargo. ;)</p>",
        "id": 222191740,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/.5Bprofile.2Erelease.5D.20works.20in.201.2E34.20but.20not.201.2E40/near/222191736\">said</a>:</p>\n<blockquote>\n<p>What I'm suggesting is that you could download the same compiled stable toolchain that rustup would have downloaded, take the resulting tarball, check it in somewhere, and have your build scripts unpack it and use it.</p>\n</blockquote>\n<p>the difference is that this requires maintaining the scripts in perpetuity</p>",
        "id": 222191808,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229632
    },
    {
        "content": "<p>making things work with 1.40 only has to be done once</p>",
        "id": 222191810,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229640
    },
    {
        "content": "<p>Fair.</p>",
        "id": 222191821,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229664
    },
    {
        "content": "<p>(Though \"making things continue to work with 1.40\" is a continuous maintenance burden.)</p>",
        "id": 222191832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229680
    },
    {
        "content": "<p>(Assuming, at least, that you actively develop the code in question.)</p>",
        "id": 222191835,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229692
    },
    {
        "content": "<p>it's more passively maintained, yeah</p>",
        "id": 222191885,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229738
    },
    {
        "content": "<p>In any case, I hope that the environment solution works for you, so that you can get the performance benefit you're hoping for.</p>",
        "id": 222191886,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610229742
    },
    {
        "content": "<p>and also, there isn't <em>so</em> much being stabilized that 1.40 is a burden</p>",
        "id": 222191891,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610229756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/.5Bprofile.2Erelease.5D.20works.20in.201.2E34.20but.20not.201.2E40/near/222190297\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> If you mean how to determine if the environment variable is being used, the usual way to run <code>cargo build -v</code> and inspect the flags being passed are what you expect.</p>\n</blockquote>\n<p>this worked, thanks :)</p>",
        "id": 222193604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610232585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Why are on 1.40 by the way? Not asking as a solution to your issue, but I’m generally interested in knowing why people are on one version over another?</p>",
        "id": 222195880,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1610236600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> that's the lowest version bindgen will build on. We were on 1.34 until recently when bindgen bumped their MSRV.</p>",
        "id": 222195897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610236654
    },
    {
        "content": "<p>(and would have been on 1.34 a lot longer if I hadn't decided it was better to get this over with)</p>",
        "id": 222196157,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610236726
    },
    {
        "content": "<p>Interesting, I also saw you mentioned not using rustup, is there a specific reason or limitation for that and being pinned to a specific version?</p>",
        "id": 222196233,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1610236853
    },
    {
        "content": "<p>We don't use rustup because it installs per user, there's no way to set up a toolchain for everyone on the same machine. We're not pinned to a <em>specific</em> version, but the lower the version the better. If our crate needs a version that's above the latest packaged, we just don't run tests on that host, which isn't ideal. I had to do that for the Debian 9 Pi's, nothing remotely modern compiles with 1.22</p>",
        "id": 222196601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610237593
    },
    {
        "content": "<p>And the speed is a major issue too, I've spent at least as much time debugging rustc segfaults as actually working on the crate. I think the segfaults are related to OOM but they're non deterministic and I haven't gotten a stack trace yet.</p>",
        "id": 222196655,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610237677
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/72894\">https://github.com/rust-lang/rust/issues/72894</a></p>",
        "id": 222196666,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610237734
    },
    {
        "content": "<p>Some changes I've had to make because of compile times:</p>\n<ul>\n<li><a href=\"https://gitlab.com/YottaDB/Lang/YDBRust/-/merge_requests/81\">https://gitlab.com/YottaDB/Lang/YDBRust/-/merge_requests/81</a></li>\n<li><a href=\"https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/1098\">https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/1098</a></li>\n<li><a href=\"https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/1039\">https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/1039</a></li>\n<li><a href=\"https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/969\">https://gitlab.com/YottaDB/DB/YDBTest/-/merge_requests/969</a><br>\n-</li>\n</ul>",
        "id": 222196834,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610238006
    },
    {
        "content": "<p>For a sense of scale, it uses to take several hours to compile on the PIs, I think it's down to ~45 minutes now</p>",
        "id": 222196843,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610238048
    },
    {
        "content": "<p>(the same project is about 3 seconds on x86_64)</p>",
        "id": 222196846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610238070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> When you say it installs per user, can you not have <code>$RUSTUP_HOME</code> point to a shared system directory and have it work?</p>",
        "id": 222197427,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1610239007
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustup/issues/313#issuecomment-627179644\">https://github.com/rust-lang/rustup/issues/313#issuecomment-627179644</a></p>",
        "id": 222197493,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610239117
    },
    {
        "content": "<p>That <em>may</em> work but it's a lot more fragile than just using a package manager</p>",
        "id": 222197510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610239151
    },
    {
        "content": "<p>And while I'm willing to pioneer bleeding edge things for side projects, I am not willing to do that at my job</p>",
        "id": 222197601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610239318
    }
]