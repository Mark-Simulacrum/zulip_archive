[
    {
        "content": "<p>Can I disable cargo's cache in <code>$CARGO_HOME/registry</code>? I'd rather not have that folder using up gigabytes of space and growing indefinitely. Is there any config.toml option or environment variable that I can set to make all the caching done locally in crates' <code>target</code> directory?</p>",
        "id": 207803229,
        "sender_full_name": "chabing",
        "timestamp": 1598237449
    },
    {
        "content": "<p>(<a href=\"http://docs.rs\">docs.rs</a> would also be interested in this)</p>",
        "id": 207803252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598237500
    },
    {
        "content": "<p>You can change <code>$CARGO_HOME</code> to wherever you want to put it.  You can also use <a href=\"https://crates.io/crates/cargo-sweep\">cargo-sweep</a> to clean up caches.</p>",
        "id": 207803316,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598237573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207803316\">said</a>:</p>\n<blockquote>\n<p>You can change <code>$CARGO_HOME</code> to wherever you want to put it.  You can also use <a href=\"https://crates.io/crates/cargo-sweep\">cargo-sweep</a> to clean up caches.</p>\n</blockquote>\n<p>Right, but changing CARGO_HOME only moves the problem elsewhere. The only solution I can think of is making a symlink from <code>$CARGO_HOME/registry</code> to <code>/tmp/cargo-registry</code>, but that leaves much to be desired (namely that /tmp/cargo-registry has to be manually created because cargo wont create the directory automatically).</p>",
        "id": 207803397,
        "sender_full_name": "chabing",
        "timestamp": 1598237720
    },
    {
        "content": "<p>I don't fully understand, if you delete the registry directory, you would have to re-download everything whenever you build.</p>",
        "id": 207803477,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598237873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207803477\">said</a>:</p>\n<blockquote>\n<p>I don't fully understand, if you delete the registry directory, you would have to re-download everything whenever you build.</p>\n</blockquote>\n<p>that's better than having registry take up several gigabytes because it grows without bound</p>",
        "id": 207803534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598237962
    },
    {
        "content": "<p>(gigabytes is not an exaggeration, <a href=\"http://docs.rs\">docs.rs</a> found this because we ran out of disk space and this was one of the culprits)</p>",
        "id": 207803539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598237990
    },
    {
        "content": "<p>cargo sweep is interesting but I'm not super comfortable running stuff like that in prod</p>",
        "id": 207803597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598238058
    },
    {
        "content": "<p>the alternative to this is running <code>rm -rf ~/.cargo/registry &amp;&amp; mkdir !$</code> once in a while, which I'm ok with doing, but it would be nice to have it built in</p>",
        "id": 207803608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598238086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207803477\">said</a>:</p>\n<blockquote>\n<p>I don't fully understand, if you delete the registry directory, you would have to re-download everything whenever you build.</p>\n</blockquote>\n<p>I guess the real problem is that <code>$CARGO_HOME/registry/cache</code> and <code>$CARGO_HOME/registry/src</code> are permanently cached (as opposed to being in crates' target/ directory)</p>",
        "id": 207803655,
        "sender_full_name": "chabing",
        "timestamp": 1598238127
    },
    {
        "content": "<p>ah, well at the moment, cargo-sweep or deleting the directory are the main options</p>",
        "id": 207803723,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598238265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207803723\">said</a>:</p>\n<blockquote>\n<p>ah, well at the moment, cargo-sweep or deleting the directory are the main options</p>\n</blockquote>\n<p>Is it worth opening an issue to see if <code>registry/src</code> and <code>registry/cache</code> can be moved into <code>target/</code>?</p>",
        "id": 207803976,
        "sender_full_name": "chabing",
        "timestamp": 1598238775
    },
    {
        "content": "<p>(which is not a breaking change since the cargo docs explicitly state that the cache API is not stable)</p>",
        "id": 207803985,
        "sender_full_name": "chabing",
        "timestamp": 1598238818
    },
    {
        "content": "<p>Wouldn't that use <em>more</em> space overall?</p>",
        "id": 207811920,
        "sender_full_name": "Laurențiu",
        "timestamp": 1598251742
    },
    {
        "content": "<p>It would. People mostly ask for the reverse, sharing things between target directories.</p>",
        "id": 207812392,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598252317
    },
    {
        "content": "<p>I think you do want the central directory for <a href=\"http://docs.rs\">docs.rs</a>, it just needs cleaning.</p>",
        "id": 207812472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598252406
    },
    {
        "content": "<p>If you don't want to use cargo sweep, I would suggest periodically pruning it in some other way (when not in the middle of a build).</p>",
        "id": 207812501,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598252454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207811920\">said</a>:</p>\n<blockquote>\n<p>Wouldn't that use <em>more</em> space overall?</p>\n</blockquote>\n<p><a href=\"http://docs.rs\">docs.rs</a> cleans target directories after every build, so for us personally it wouldn't.<br>\n<span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207812501\">said</a>:</p>\n<blockquote>\n<p>If you don't want to use cargo sweep, I would suggest periodically pruning it in some other way (when not in the middle of a build).</p>\n</blockquote>\n<p>that's probably more effective so we get most of the caching benefits. We need to work out synchronization for builds though <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <a href=\"https://github.com/rust-lang/docs.rs/issues/984\">https://github.com/rust-lang/docs.rs/issues/984</a></p>",
        "id": 207834677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598270625
    },
    {
        "content": "<p>you can use cargo-cache to clean up the $CARGO_HOME <br>\n<a href=\"https://crates.io/crates/cargo-cache\">https://crates.io/crates/cargo-cache</a></p>",
        "id": 207840204,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1598274403
    },
    {
        "content": "<p>Ah, apologies, I got sweep and cache mixed up.</p>",
        "id": 207847355,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598278186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207811920\">said</a>:</p>\n<blockquote>\n<p>Wouldn't that use <em>more</em> space overall?</p>\n</blockquote>\n<p>It <em>could</em>. but I think it would still be a better trade-off. The problem with putting it in $CARGO_HOME is that it grows without bound. Having it in <code>target/</code> would at least make a correlation between disk usage an the # of projects being developed. When I'm done working on a project, I delete that directory until I come back to the project. I wouldn't expect build artifacts to stick around anywhere after that. <code>cargo install</code> also suffers from this: installing a binary (which doesn't ever need the source/cache of its dependencies after installation) permanently leaves stuff in $CARGO_HOME</p>",
        "id": 207877504,
        "sender_full_name": "chabing",
        "timestamp": 1598293131
    },
    {
        "content": "<p>updating a <code>cargo install</code> is sometimes well served by keeping the sources and cache files, though i do take your point</p>",
        "id": 207878114,
        "sender_full_name": "Lokathor",
        "timestamp": 1598293435
    },
    {
        "content": "<p>It seems like the standard tradeoff: do you want to cache things, vs do you want to recompute/redownload things.</p>",
        "id": 207878178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598293461
    },
    {
        "content": "<p>I'd propose that the solution here is for cargo to remind the user of the size of their cached stuff (perhaps after <code>cargo install</code> when it's already printing other \"global\" updates about new bins), and then to also move a plugin for clearing the cache into the main cargo distribution (like how <code>cargo tree</code> became an official plugin), so that users can act on the size of the cache if they choose to.</p>",
        "id": 207878556,
        "sender_full_name": "Lokathor",
        "timestamp": 1598293634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207878556\">said</a>:</p>\n<blockquote>\n<p>I'd propose that the solution here is for cargo to remind the user of the size of their cached stuff (perhaps after <code>cargo install</code> when it's already printing other \"global\" updates about new bins), and then to also move a plugin for clearing the cache into the main cargo distribution (like how <code>cargo tree</code> became an official plugin), so that users can act on the size of the cache if they choose to.</p>\n</blockquote>\n<p>Another possible solution is to add a setting to config.toml that would put the cache in <code>target/</code></p>",
        "id": 207881465,
        "sender_full_name": "chabing",
        "timestamp": 1598294995
    },
    {
        "content": "<p>It'd be nice for that to be fine-grained. For instance, put downloaded crate files into a shared location, and git dependencies into a private one (less likely to be reused), and unpacked sources into a private one (can always be re-unpacked).</p>",
        "id": 207881588,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598295046
    },
    {
        "content": "<p><code>ccache</code> and <code>SCons</code> (at least) support configuring limits for cache sizes, then they evict items from the cache using something like LRU when the limit is exceeded.<br>\nPerhaps <code>cargo</code> could use something like this as well.</p>",
        "id": 207892877,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1598300737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> That seems reasonable, assuming there's a reliable concept of \"used\" that Cargo can use. Cargo could track that, easily enough.</p>",
        "id": 207906797,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598309671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/207906797\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> That seems reasonable, assuming there's a reliable concept of \"used\" that Cargo can use. Cargo could track that, easily enough.</p>\n</blockquote>\n<p>What needs to be done to get this to happen? An RFC? GitHub issue?</p>",
        "id": 208162750,
        "sender_full_name": "chabing",
        "timestamp": 1598484866
    },
    {
        "content": "<p>There's already several issues about this (such as <a href=\"https://github.com/rust-lang/cargo/issues/7150\">https://github.com/rust-lang/cargo/issues/7150</a> and <a href=\"https://github.com/rust-lang/cargo/pull/6477\">https://github.com/rust-lang/cargo/pull/6477</a> and <a href=\"https://github.com/rust-lang/cargo/issues/3289\">https://github.com/rust-lang/cargo/issues/3289</a>).  The main problem is reliably tracking last-use information.  Different parts of cargo's cache may need different solutions.  I'm thinking there may need to be some kind of files to track last-use information to help with cache eviction. Something like the index cache may need a different solution (it currently creates lots of little files, which isn't exactly ideal) than the <code>.crate</code> cache.  I've toyed with sqlite, but I'm not really confident that is the best route.  There are several constraints to consider, like performance, different filesystems, clock and timestamp issues, locking and concurrency issues, Docker caching, etc. Unfortunately I don't have much time to help.  I'm not sure how to suggest moving forward. Perhaps putting something RFC-like that would sketch out the solution? Would help to have done some prototyping to explore issues like performance (and comparing and contrasting to cargo-cache and cargo-sweep).  I unfortunately can't promise much in terms  of helping with it.</p>",
        "id": 208164111,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598486090
    },
    {
        "content": "<p>btw, I also don't want to imply that embedding something like cargo-cache as-is isn't out of the picture, I just haven't looked at it too closely.</p>",
        "id": 208166873,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598488599
    },
    {
        "content": "<p>Hmm, adding a subcommand to <code>cargo-cache</code> that removes older files until the cache is within a certain size limit again does not sound too difficult with what I've got already...</p>",
        "id": 208288581,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1598570797
    },
    {
        "content": "<p>It's just that cargo won't be able to trigger an automatic cleanup by cargo-cache somehow; the user still has to trigger it (or automatically call cargo-cache after each <code>cargo</code>invocation  via some shell alias or whatever... :/</p>",
        "id": 208288716,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1598570984
    },
    {
        "content": "<p>i think if there's some way to make <code>rustup update</code> optionally also clear cache that would be best</p>",
        "id": 208300552,
        "sender_full_name": "Lokathor",
        "timestamp": 1598583751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Disabling.20cache/near/208300552\">said</a>:</p>\n<blockquote>\n<p>i think if there's some way to make <code>rustup update</code> optionally also clear cache that would be best</p>\n</blockquote>\n<p>That's an interesting idea.  I wonder if it would be sufficient to add support to <code>rustup</code> to have a post-update shell command configurable via our settings file.  That way if you wanted that you could configure it to run <code>cargo cache-cleanup</code> or whatever command is appropriate.</p>",
        "id": 208312287,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1598599020
    }
]