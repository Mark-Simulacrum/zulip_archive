[
    {
        "content": "<p>hello! I am a GNU Guix contributor and we are packaging Rust inside GNU Guix and we would like to cache intermediate artifacts after compilation. We currently package individual libraries but we only serve source code. We would like to serve built artifact for each of these binaries instead of building everything again at each use of these libraries. I know .rlib files are affected by compiler version and many rustc parameters. Given these are identical how can we reuse .rlib in a supported/stable/easy way? Thank you!</p>",
        "id": 225653640,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1612856287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> If the rustc version and the arguments to rustc are identical you can just copy the rlib file. If you are using cargo, you will need to also copy the <code>.d</code> file and ensure that the mtime is identical to ensure that cargo doesn't think it is outdated. Do now that many crates enable different cargo features for dependencies. Cargo takes the union of all required features for a dependency, so adding a crate may cause something seemingly unrelated to be rebuilt as it gets a new feature enabled. You of course also need to ensure that the same crate version is used for reuse to be possible.</p>",
        "id": 225657062,
        "sender_full_name": "bjorn3",
        "timestamp": 1612859368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Thank you, is it possible to disable mtime checking? Or if you have experience with the source code, maybe you can tell me what it's called inside there, struct/function/file name that handles these things.</p>",
        "id": 225657867,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1612859951
    },
    {
        "content": "<p>No, I don't think so. Someone was working on hash based checking as fallback for mtime: <a href=\"https://github.com/rust-lang/cargo/issues/8623\">rust-lang/cargo#8623</a> It has been over a month since the last update on it though.</p>",
        "id": 225657998,
        "sender_full_name": "bjorn3",
        "timestamp": 1612860053
    },
    {
        "content": "<p>Thanks</p>",
        "id": 225658068,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1612860119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I notice there are paths that reference the source directory in <code>.d</code> files, how exactly does cargo check those? Is it important if that path exists?</p>",
        "id": 225658296,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1612860257
    },
    {
        "content": "<p>If I copy <code>.d</code> and <code>.rlib</code> files from one target directory to another, will it reuse compilation artifacts if same compiler/parameters/features/mtime?</p>",
        "id": 225658352,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1612860312
    },
    {
        "content": "<p>Cargo checks that the mtime of all dependencies is before the mtime of the compiled artifacts as far as I know. The paths do have to exist, but the source and target dir are allowed to be moved.</p>",
        "id": 225658449,
        "sender_full_name": "bjorn3",
        "timestamp": 1612860377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> What should guix be aware of as far as features go? In general, guix’ packaging model is like another distro’s in that we want to provide system packages</p>",
        "id": 225829468,
        "sender_full_name": "John Soo",
        "timestamp": 1612960798
    },
    {
        "content": "<p>Guix does use cargo and will always reset mtime to the Unix epoch for reproducibility</p>",
        "id": 225829604,
        "sender_full_name": "John Soo",
        "timestamp": 1612960844
    },
    {
        "content": "<p>Some crates use mutually exclusive features. While officially features are strictly additive, these crates need to for example switch between two backends and use mutually exclusive features for that.</p>",
        "id": 225829705,
        "sender_full_name": "bjorn3",
        "timestamp": 1612960898
    },
    {
        "content": "<p>Is there any way to provide the union of all features from a system package and have consumers of the crate choose those features when they compile? Also, does this overlap with incr-comp?</p>",
        "id": 225829909,
        "sender_full_name": "John Soo",
        "timestamp": 1612961005
    },
    {
        "content": "<p>No, crates are always compiled with a specific feature set. It is not possible to compile with all and then let downstream users magically pick just the parts for a specific feature.</p>",
        "id": 225830162,
        "sender_full_name": "bjorn3",
        "timestamp": 1612961130
    },
    {
        "content": "<p>I see. I’ve been thinking about what would be required to support functional package managers better in cargo and rustc. I feel like there are fruitful ways to collaborate between guix/nix and rust. I’m happy to put in some work to make it happen. What would you say would be the best way to begin a more formal relationship?</p>",
        "id": 225830544,
        "sender_full_name": "John Soo",
        "timestamp": 1612961320
    },
    {
        "content": "<p>I am not quite sure. You may want to talk to someone on the cargo team: <a href=\"https://github.com/rust-lang/team/blob/77c98b7de2b26a1592713d1b4ac7df2e8030304f/teams/cargo.toml#L4-L11\">https://github.com/rust-lang/team/blob/77c98b7de2b26a1592713d1b4ac7df2e8030304f/teams/cargo.toml#L4-L11</a></p>",
        "id": 225830752,
        "sender_full_name": "bjorn3",
        "timestamp": 1612961437
    },
    {
        "content": "<p>I see. Is Zulip the preferred discussion tool to speak with them?</p>",
        "id": 225830950,
        "sender_full_name": "John Soo",
        "timestamp": 1612961536
    },
    {
        "content": "<p>I think so, but it may also be the official rust discord.</p>",
        "id": 225831080,
        "sender_full_name": "bjorn3",
        "timestamp": 1612961607
    },
    {
        "content": "<p>I’m very nervous about pinging someone directly!</p>",
        "id": 225831430,
        "sender_full_name": "John Soo",
        "timestamp": 1612961784
    },
    {
        "content": "<p>Hi! You are in the correct place. This is where the Cargo team chats.</p>",
        "id": 225835462,
        "sender_full_name": "Eh2406",
        "timestamp": 1612963900
    },
    {
        "content": "<p>We would love to work with you to make Cargo better for your use case.</p>",
        "id": 225835793,
        "sender_full_name": "Eh2406",
        "timestamp": 1612964043
    },
    {
        "content": "<p>As far as features are concnerned, you're probably best off by considering dependencies of a given crate as a potentially unique package. As in, even if crate <code>apple</code> depends on <code>peach</code> and you have some build of <code>peach</code> in store already, you would still need to consider <code>peach</code> as entirely independent package for the purposes of building <code>banana</code>.</p>",
        "id": 225836667,
        "sender_full_name": "nagisa",
        "timestamp": 1612964491
    },
    {
        "content": "<p>this also is relevant for crate duplication when satisfying version constraints. A crate <code>chaenomeles</code> may link to both <code>peach 0.1</code> and <code>peach 1.0</code> at various points in the dependency graph, for example.</p>",
        "id": 225836774,
        "sender_full_name": "nagisa",
        "timestamp": 1612964523
    },
    {
        "content": "<p>In practice you should get pretty good results by generating package definitions from <code>cargo metadata</code> output.</p>",
        "id": 225837187,
        "sender_full_name": "nagisa",
        "timestamp": 1612964748
    },
    {
        "content": "<p>That's what many nix-related projects do. Rust-Bazel integration too, I believe.</p>",
        "id": 225837284,
        "sender_full_name": "nagisa",
        "timestamp": 1612964779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316408\">@John Soo</span> You might take a look at what Debian and other distributions do with Rust features.</p>",
        "id": 225896216,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612986249
    },
    {
        "content": "<p>I built the initial design for Rust packaging in Debian (though others now maintain it). Each feature (and the dependencies of that feature) gets a different \"package\", to make dependency resolution work well.</p>",
        "id": 225896307,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612986293
    },
    {
        "content": "<p>That's not addressing the \"pre-compiled\" issue, though.</p>",
        "id": 225896328,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612986303
    },
    {
        "content": "<p>Does guix need <em>every</em> package to be \"pre-compiled\", or can it determine on the fly \"I have a pre-compiled package for this\" versus \"I don't have a pre-compiled package so I'll have to build this\"?</p>",
        "id": 225896413,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612986340
    },
    {
        "content": "<p>If the latter, then you could arrange for source-based packages that get built by things that depend on them, and then provide pre-compiled versions for crate/feature combinations that many other packages depend on.</p>",
        "id": 225896573,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612986391
    },
    {
        "content": "<p>It would be preferrable to be able to define packages for auditing and de-vendoring. For guix this is particularly important since it must meet FSDG requirements. I'm afraid generating package definitions just isn't going to work for guix. Nix may be different on that point. It is arguably not an ideal situation. Functional package management should help with rust's reproducibility and incremental compilation.</p>",
        "id": 225903918,
        "sender_full_name": "John Soo",
        "timestamp": 1612989532
    },
    {
        "content": "<p>Guix always builds everything from source, currently. I would love to look at the way debian does it. Is there a quick link I should check out?</p>",
        "id": 225904111,
        "sender_full_name": "John Soo",
        "timestamp": 1612989615
    },
    {
        "content": "<p>Ah, if guix builds everything from source, that'll be much easier then.</p>",
        "id": 225905990,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990413
    },
    {
        "content": "<p><a href=\"https://wiki.debian.org/Teams/RustPackaging/Policy\">https://wiki.debian.org/Teams/RustPackaging/Policy</a></p>",
        "id": 225906045,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990438
    },
    {
        "content": "<p>A Rust crate <code>xyz</code> becomes a Debian package <code>librust-xyz-dev</code>, which installs its source code into a directory registry.</p>",
        "id": 225906170,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990470
    },
    {
        "content": "<p>The Rust feature <code>abc</code> of crate <code>xyz</code> becomes a package <code>librust-xyz+abc-dev</code>, which adds any additional dependencies for that feature, including on other crate feature packages.</p>",
        "id": 225906273,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990519
    },
    {
        "content": "<p>Then you just need a tool that takes a crate <code>xyz</code> and turns it into a package of that crate's source, together with the packaging metadata.</p>",
        "id": 225906519,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990612
    },
    {
        "content": "<p>When you want to package something, you package/update its dependencies recursively.</p>",
        "id": 225906579,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990639
    },
    {
        "content": "<p>And the translation tool takes the dependencies from the Cargo manifest and turns them into dependencies in your native metadata.</p>",
        "id": 225906690,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990682
    },
    {
        "content": "<p>Does that sound potentially reasonable?</p>",
        "id": 225906721,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612990688
    },
    {
        "content": "<p>what  I meant by generating is generating the package definitions ahead of time in the first place and then checking them in, rather than generating packages at evaluation time (in nix's parlance). even debian does it afaik, because its untenable to package crates otherwise.</p>",
        "id": 225911670,
        "sender_full_name": "nagisa",
        "timestamp": 1612992813
    },
    {
        "content": "<p>the features cause a combinatorial explosion, pretty much.</p>",
        "id": 225911867,
        "sender_full_name": "nagisa",
        "timestamp": 1612992898
    },
    {
        "content": "<p>The first features we would need for GNU Guix are, a way to disable checksum generation and checking on sources (because GNU Guix already checks everything on its own and has authority for what's good and what's not), then a way to build dynamic/static libraries of Rust crates (also delaying feature selection and others, for dependent crates to be able pick features they need when they are compiled against the static library or load the dynamic library.).</p>",
        "id": 226045617,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613071981
    },
    {
        "content": "<p>We already monkey-patch checksums automatically as a way to workaround checksum checking</p>",
        "id": 226045695,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072016
    },
    {
        "content": "<p>The best would be that all crates can be compiled to .so files with feature selection delayed at load time and a stable ABI for each compiler version. (We recompile everything if the compiler changes anyway).</p>",
        "id": 226046043,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072141
    },
    {
        "content": "<p>This way everything is the most size-efficient possible, instead of copying machine code in every resulting library.</p>",
        "id": 226046307,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072245
    },
    {
        "content": "<p>We understand the performance hit that could cause due to missed optimizations, but I don't think it matters for us right now.</p>",
        "id": 226046441,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072286
    },
    {
        "content": "<p>But build scripts can generate different code depending on features.</p>",
        "id": 226046499,
        "sender_full_name": "Eh2406",
        "timestamp": 1613072315
    },
    {
        "content": "<p>Maybe it's possible to find a way to embed all the different compilation results with different features.</p>",
        "id": 226046606,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072371
    },
    {
        "content": "<p>Those libraries would be exponentially large in the number of features</p>",
        "id": 226046700,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613072405
    },
    {
        "content": "<p>Build scripts can do arbitrarily complex things.</p>",
        "id": 226046727,
        "sender_full_name": "Eh2406",
        "timestamp": 1613072417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> Maybe some kind of optimization to only embed parts of machine code that changed, and not duplicate everything?</p>",
        "id": 226047082,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072581
    },
    {
        "content": "<p>Does Guix compile all C libraries with every combination of autoconf flags? I'm not sure why you'd need to do a powerset thing in this case but not that one</p>",
        "id": 226047147,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613072621
    },
    {
        "content": "<p>Not every combination because it's not necessary, but all of them as dependents require</p>",
        "id": 226047244,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072659
    },
    {
        "content": "<p>Packaging Rust things without something to ease it up is really not viable, so I'm no expert but something has to happen I think, unless getting things packaged isnt important after all</p>",
        "id": 226047363,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072737
    },
    {
        "content": "<p>Why is it viable for C but not for Rust?</p>",
        "id": 226047464,
        "sender_full_name": "Eh2406",
        "timestamp": 1613072772
    },
    {
        "content": "<p>I think you understand why, I don't feel well in this discussion, see you</p>",
        "id": 226047530,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072812
    },
    {
        "content": "<p>I am sorry.</p>",
        "id": 226047573,
        "sender_full_name": "Eh2406",
        "timestamp": 1613072835
    },
    {
        "content": "<p>I didn't mean to offend.</p>",
        "id": 226047604,
        "sender_full_name": "Eh2406",
        "timestamp": 1613072855
    },
    {
        "content": "<p>If we can't agree there is some kind of issue in that area then we do not :-(</p>",
        "id": 226047705,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613072886
    },
    {
        "content": "<p>I truly know nothing about packaging C. And so don't understand why it does not have the same problems. I am sorry if I am being obtuse.</p>",
        "id": 226047817,
        "sender_full_name": "Eh2406",
        "timestamp": 1613072948
    },
    {
        "content": "<p>I will bow out of this conversation to allow those with more background to help you. I am sorry.</p>",
        "id": 226047984,
        "sender_full_name": "Eh2406",
        "timestamp": 1613073026
    },
    {
        "content": "<p>I felt dismissed by the heart reaction you made on Steven's message, as if you were happy they found something in C/C++ that would basically mean Rust wouldnt have anything to do to ease up packaging in that area because C/C++ would suffer from the same problems and everything was just fine. It's not exactly like that and culturally C/C++ project features are more so additive in practice which makes it easier.</p>",
        "id": 226048469,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613073257
    },
    {
        "content": "<p>But if that's a misunderstanding we can go on</p>",
        "id": 226048493,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613073268
    },
    {
        "content": "<p>Majority of features in crates are additive, but that is only a convention, so for the features that satisfy this property just enabling them would go a long way.</p>",
        "id": 226050081,
        "sender_full_name": "nagisa",
        "timestamp": 1613073948
    },
    {
        "content": "<p>This convention is strongly recommended by e.g. cargo operation (it e.g. exposes <code>--all-features</code> flag), but not everybody heeds the advice.</p>",
        "id": 226050186,
        "sender_full_name": "nagisa",
        "timestamp": 1613073980
    },
    {
        "content": "<p>Then they can do an equivalent of </p>\n<div class=\"codehilite\"><pre><span></span><code>#ifdef FEATURE_1 &amp;&amp; FEATURE_2\n#error &quot;can&#39;t have both&quot;\n#endif\n</code></pre></div>\n<p>And the build would fail. How does Guix deal with C libraries that also have mutually exclusive configurations/defines (I would imagine it just makes an authoritative choice?)?</p>",
        "id": 226050304,
        "sender_full_name": "nagisa",
        "timestamp": 1613074058
    },
    {
        "content": "<p>Rust/Cargo transparently handling this kind of situation seems pretty hard to implement, AFAICT.</p>",
        "id": 226050413,
        "sender_full_name": "nagisa",
        "timestamp": 1613074103
    },
    {
        "content": "<p>to the point where just requiring people to have only additive features would be an easier implementation. See <a href=\"https://github.com/rust-lang/cargo/issues/4328\">https://github.com/rust-lang/cargo/issues/4328</a> for the outcome of that.</p>",
        "id": 226050666,
        "sender_full_name": "nagisa",
        "timestamp": 1613074230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I've never seen any C/C++ package do this myself, but it would be dealt with by multiple packages as needed by dependents. I've more so seen Rust crates do it, but the main problem now for me would be that crates do not necessarily expect their dependencies to have all features enabled, while in C/C++ the more are enabled the better it is (in my experience). By that I mean that it being explicit in Rust, some crates may depend on it. While in C/C++ there never was an easy universal ubiquitous tool to express such a requirement, it always was loosely defined.</p>",
        "id": 226051035,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074434
    },
    {
        "content": "<p>Thanks for the link will look</p>",
        "id": 226051088,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074445
    },
    {
        "content": "<p>I dont believe personally that the linked issue is resolved, alas.</p>",
        "id": 226051200,
        "sender_full_name": "nagisa",
        "timestamp": 1613074516
    },
    {
        "content": "<p>well, it was resolved in the sense that cargo recommends making features additive</p>",
        "id": 226051238,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074536
    },
    {
        "content": "<p>If that's okay to require features to be additive in all crates it would really help us</p>",
        "id": 226051245,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074539
    },
    {
        "content": "<p>but it's just documentation</p>",
        "id": 226051246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214522\">Leo Le Bouter</span> <a href=\"#narrow/stream/246057-t-cargo/topic/rlib-intermediate-object-reuse/near/226051245\">said</a>:</p>\n<blockquote>\n<p>If that's okay to require features to be additive in all crates it would really help us</p>\n</blockquote>\n<p>for this to work there needs to be some replacement for mutually incompatible features</p>",
        "id": 226051278,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074560
    },
    {
        "content": "<p>this is used a lot for e.g. \"which async executor should the crate use\"</p>",
        "id": 226051350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074570
    },
    {
        "content": "<p>\"use both\" usually leads to compile errors</p>",
        "id": 226051380,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074579
    },
    {
        "content": "<p>but \"use neither\" also doesn't work</p>",
        "id": 226051400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074587
    },
    {
        "content": "<p>This can be handled in the crate's API, runtime feature checking</p>",
        "id": 226051478,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074627
    },
    {
        "content": "<p>I think that problem would solve itself naturally even without a technical replacement if everybody was encouraged to CI with <code>--all-features</code>.</p>",
        "id": 226051509,
        "sender_full_name": "nagisa",
        "timestamp": 1613074642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214522\">Leo Le Bouter</span> <a href=\"#narrow/stream/246057-t-cargo/topic/rlib-intermediate-object-reuse/near/226051478\">said</a>:</p>\n<blockquote>\n<p>This can be handled in the crate's API, runtime feature checking</p>\n</blockquote>\n<p>well but then you have  to compile both in, which means longer compile times</p>",
        "id": 226051539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074670
    },
    {
        "content": "<p>We could run a crater compiling all crates with <code>--all-features</code>.</p>",
        "id": 226051610,
        "sender_full_name": "nagisa",
        "timestamp": 1613074691
    },
    {
        "content": "<p>which probably matters less to GUIX, but matters a lot to developers</p>",
        "id": 226051614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/246057-t-cargo/topic/rlib-intermediate-object-reuse/near/226051610\">said</a>:</p>\n<blockquote>\n<p>We could run a crater compiling all crates with <code>--all-features</code>.</p>\n</blockquote>\n<p>what would be the point? We discover \"these 5000 crates failed to compile\"; now what?</p>",
        "id": 226051640,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074710
    },
    {
        "content": "<p>Or not, because you can fail at runtime if you don't have the feature enabled for the thing it's asking you to do</p>",
        "id": 226051678,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074727
    },
    {
        "content": "<p>the problem with all of this is it requires a big time investment from the <em>original</em> crate authors</p>",
        "id": 226051752,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/rlib-intermediate-object-reuse/near/226051539\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>well but then you have  to compile both in, which means longer compile times\n</code></pre></div>\n<p>Only when the developers do end up enabling the features for the two separate runtimes would the build times be worse.</p>",
        "id": 226051760,
        "sender_full_name": "nagisa",
        "timestamp": 1613074769
    },
    {
        "content": "<p>Developers could define the features they need tightly while distros could enable everything</p>",
        "id": 226051765,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074773
    },
    {
        "content": "<p>which you're not going to be able to do for every single rust project</p>",
        "id": 226051773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074776
    },
    {
        "content": "<p>(since I assume you want to spend your time actually packaging thousands of project and not restructing them all to work with <code>--all-features</code>)</p>",
        "id": 226051930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613074838
    },
    {
        "content": "<p>the embedded ecosystem relies heavily on non-additive features; not sure if you want to package those crates though</p>",
        "id": 226051974,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613074867
    },
    {
        "content": "<p>Debian or GNU Guix people have knowledge and time to patch crates whose author does not want to do anything</p>",
        "id": 226051981,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/246057-t-cargo/topic/rlib-intermediate-object-reuse/near/226051640\">said</a>:</p>\n<blockquote>\n<p>what would be the point? We discover \"these 5000 crates failed to compile\"; now what?</p>\n</blockquote>\n<p>I've been reporting the instances where features are not additive and hindered my use of them as they came up. I wouldn't bug the little used crates, but I think there are a couple of avenues to explore once we have the results:</p>\n<ol>\n<li>File issues with very popular crates;</li>\n<li>Write blog posts, guidance;</li>\n<li>etc.</li>\n</ol>",
        "id": 226052017,
        "sender_full_name": "nagisa",
        "timestamp": 1613074893
    },
    {
        "content": "<p>Of course having a bot to file 5000 issues is counterproductive, but there are many milder means to guide developers towards fixing the crates they maintain, and I think there's value in knowing how exactly widespread this problem is in the first place.</p>",
        "id": 226052149,
        "sender_full_name": "nagisa",
        "timestamp": 1613074958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> In what way?</p>",
        "id": 226052168,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613074967
    },
    {
        "content": "<p>for example to support different microcontrollers, like <a href=\"https://github.com/nrf-rs/nrf-hal/blob/master/nrf-hal-common/Cargo.toml#L71-L77\">here</a></p>",
        "id": 226052238,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613075016
    },
    {
        "content": "<p>I don't think this is terribly relevant to packaging in guix, but I wouldn't be surprised if there are crates that you <em>do</em> want to package that can't easily avoid this</p>",
        "id": 226052322,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613075047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> In the description it says do not use this directly, does it mean you have crates for each microcontroller as well?</p>",
        "id": 226052391,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075089
    },
    {
        "content": "<p>yeah</p>",
        "id": 226052409,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613075099
    },
    {
        "content": "<p>but that's a relatively uncommon pattern</p>",
        "id": 226052435,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613075109
    },
    {
        "content": "<p>I think the pattern also helps us here because it means we can consider each microcontroller feature a single library</p>",
        "id": 226052500,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075144
    },
    {
        "content": "<p>I think this kind of usage is fine w.r.t. to packaging</p>",
        "id": 226052743,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075248
    },
    {
        "content": "<p>What is the main pain point is inability for crates to use compiled dependents that enable more features than they request for</p>",
        "id": 226052856,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075286
    },
    {
        "content": "<p>AIUI</p>",
        "id": 226052878,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075298
    },
    {
        "content": "<p>if the crate compiles with more features added,  I would expect it to work fine that way</p>",
        "id": 226052920,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613075322
    },
    {
        "content": "<p>just that some crates may not compile</p>",
        "id": 226052926,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613075326
    },
    {
        "content": "<p>How can we do that however? Since there's nothing documented to share built artifacts across multiple projects</p>",
        "id": 226052986,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075366
    },
    {
        "content": "<p><a href=\"#narrow/stream/246057-t-cargo/topic/rlib-intermediate-object-reuse/near/225657062\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/rlib-intermediate-object-reuse/near/225657062</a></p>",
        "id": 226053148,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613075432
    },
    {
        "content": "<p>Still could not succeed with re-using .rlib yet, I think it's because of mtime so will have to patch that out from cargo, already did for checksums</p>",
        "id": 226053156,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075435
    },
    {
        "content": "<p>Does cargo/rustc check if different set of feature is enabled and if so requires recompilation?</p>",
        "id": 226053784,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075741
    },
    {
        "content": "<p>yes, if the feature set is different cargo will recompile the crate</p>",
        "id": 226053812,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613075759
    },
    {
        "content": "<p>Is it cargo or rustc?</p>",
        "id": 226053867,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075771
    },
    {
        "content": "<p>I don't understand the question. What do you mean by recompile?</p>",
        "id": 226053891,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613075785
    },
    {
        "content": "<p>Can I patch that out from cargo easily?</p>",
        "id": 226053896,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075787
    },
    {
        "content": "<p>I want to enable all features of a crate in packages and then reuse the .rlib from target directory to compile all crates that depend on it</p>",
        "id": 226054006,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075857
    },
    {
        "content": "<p>Whether they only depend on a subset of the features that are enabled or not</p>",
        "id": 226054093,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075896
    },
    {
        "content": "<p>For crates that do not work with --all-features then we will create multiple packages</p>",
        "id": 226054147,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613075931
    },
    {
        "content": "<p>By recompile I meant that it would discard the .rlib file and recompile from source because it thinks the .rlib file is invalid, how does that work and happen?</p>",
        "id": 226054287,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613076010
    },
    {
        "content": "<p>that's probably cargo doing that but I'm not sure without seeing your build output</p>",
        "id": 226054334,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613076033
    },
    {
        "content": "<p>OK, well I don't have any in particular, I will collaborate with my rusty peers over at GNU Guix on this and report back. Thanks everyone for fruitful discussion with so many people.</p>",
        "id": 226054574,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613076149
    },
    {
        "content": "<p>To me it sounds like you want to forgo cargo entirely, to be honest.</p>",
        "id": 226054600,
        "sender_full_name": "nagisa",
        "timestamp": 1613076163
    },
    {
        "content": "<p>especially given the fact that you'll be building majority of crates with all their features enabled.</p>",
        "id": 226054645,
        "sender_full_name": "nagisa",
        "timestamp": 1613076191
    },
    {
        "content": "<p>in that context all cargo provides you is interpreting <code>build.rs</code> output and adding the <code>--extern dep=loc.rlib</code> flags to a rustc invocation.</p>",
        "id": 226054687,
        "sender_full_name": "nagisa",
        "timestamp": 1613076215
    },
    {
        "content": "<p>in theory it would even trivially allow you to use the <code>--crate-type=dylib</code> and link things dynamically for space &amp; memory savings.</p>",
        "id": 226054834,
        "sender_full_name": "nagisa",
        "timestamp": 1613076294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I would really love to be able to do that, I am a bit hesitant because Cargo is huge</p>",
        "id": 226055241,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1613076496
    }
]