[
    {
        "content": "<p>Can someone help me figure out why the outputs of <code>cargo metadata</code> differs from <code>cargo tree</code> in what dependencies are specified in the output? I made a repo to better demonstrate this: <a href=\"https://github.com/UebelAndre/cargo-metadata-test\">https://github.com/UebelAndre/cargo-metadata-test</a></p>",
        "id": 210206895,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600214215
    },
    {
        "content": "<p>Thank you for the reproduction. Can you be more specific about exactly what<br>\nparts of the output seem to differ?</p>",
        "id": 210207930,
        "sender_full_name": "Eh2406",
        "timestamp": 1600214935
    },
    {
        "content": "<p>Hey, yeah, there doesn't seem to be any mention of the <code>wasm-bindgen-cli</code> package in the metadata</p>",
        "id": 210208830,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600215675
    },
    {
        "content": "<p>And that's the thing I care about most</p>",
        "id": 210208846,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600215692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> for extra context I'm trying to find a solution for <a href=\"https://github.com/google/cargo-raze/issues/218\">https://github.com/google/cargo-raze/issues/218</a></p>",
        "id": 210208922,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600215739
    },
    {
        "content": "<p>I spent some time trying to figure out what was different between <code>tree</code> and <code>metadata</code> since <code>tree</code>, being similar to <code>metadata</code> shows <code>wasm-bindgen-cli</code></p>",
        "id": 210209006,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600215811
    },
    {
        "content": "<p>But yeah, why doesn't <code>wasm-bindgen-cli</code> show up in the <code>packages</code> list in <a href=\"https://github.com/UebelAndre/cargo-metadata-test/blob/master/metadata.json#L2\">https://github.com/UebelAndre/cargo-metadata-test/blob/master/metadata.json#L2</a> ?</p>",
        "id": 210209104,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600215872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> any ideas?</p>",
        "id": 210210920,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600217645
    },
    {
        "content": "<p>Sorry for the delay, just got back from my walk.</p>",
        "id": 210211178,
        "sender_full_name": "Eh2406",
        "timestamp": 1600217902
    },
    {
        "content": "<p>Others will know more, as Alex is listed as the primary contributor to <code>wasm-bindgen-cli</code> :-) .  But my guess is that it has to do with the fact that <code>wasm-bindgen-cli</code> is a binary not a library. It is not clear in the current semantics of Cargo.toml what it means to depend on a binary. I think Josh was beginning to work on specifying that. Eric impled the cargos version of tree, so may have an opinion on which output is more correct.</p>",
        "id": 210212093,
        "sender_full_name": "Eh2406",
        "timestamp": 1600218845
    },
    {
        "content": "<p>I think <code>metadata</code> may be more correct. When I run <code>cargo check</code> <code>docopt</code> is not built matching the <code>metadata</code> output.</p>",
        "id": 210212534,
        "sender_full_name": "Eh2406",
        "timestamp": 1600219391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/246057-t-cargo/topic/Differences.20between.20tree.20and.20metadata.20commands/near/210212093\">said</a>:</p>\n<blockquote>\n<p>It is not clear in the current semantics of Cargo.toml what it means to depend on a binary. I think Josh was beginning to work on specifying that.</p>\n</blockquote>\n<p>I wrote it up in the comments of one of the relevant issues, but someone needs to turn that into an RFC.</p>",
        "id": 210213597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600220654
    },
    {
        "content": "<p>Is there a way to get the metadata for binaries I'm depending on?</p>",
        "id": 210216161,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600223862
    },
    {
        "content": "<p>I didn't think it would matter if my dependency was a library or a binary. My expectation is that by listing it as a dependency, <code>cargo metadata</code> would include it in the list of packages in the resulting json. After all, binaries are still packages, right?</p>",
        "id": 210216227,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600223934
    },
    {
        "content": "<p>That is an excellent question, hopefully Eric well be able to help.</p>\n<p>On a different note, why are you depending on a binary crate? You can't be<br>\nplanning to 'use ' it from your code, as it's not a library so you can't<br>\nimportant it. You can't be planning to use the resulting executable, as it<br>\ndoes not get built so won't be available.</p>",
        "id": 210217424,
        "sender_full_name": "Eh2406",
        "timestamp": 1600225282
    },
    {
        "content": "<p>Cargo doesn't really support binary dependencies. It probably should print a warning if it finds one. <code>cargo metadata</code> specifically filters them out, I don't think there is a way to access them.</p>",
        "id": 210265871,
        "sender_full_name": "Eric Huss",
        "timestamp": 1600265021
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> Is there a way to get the metadata of binary dependencies without having to clone the repo or something? Example: <code>cargo metadata --target wasm-bindgen-cli</code>?</p>",
        "id": 210280860,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600271040
    },
    {
        "content": "<p>I don't think there is a way to access them.</p>",
        "id": 210281366,
        "sender_full_name": "Eric Huss",
        "timestamp": 1600271264
    },
    {
        "content": "<p>Is there a way to get metadata for an arbitrary package?</p>",
        "id": 210284919,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600272811
    },
    {
        "content": "<p>Why do you need metadata data for a dependency you can't use?</p>",
        "id": 210285021,
        "sender_full_name": "Eh2406",
        "timestamp": 1600272858
    },
    {
        "content": "<p>That's a question with a kinda long answer, but in short: The <code>cargo-raze</code> tool uses metadata to build a dependency tree and generate build targets for the Bazel build system. The way it's implemented right now is to look at the dependencies in a <code>Cargo.toml</code> file and generate a target for each dependency such that you can build your final target. But, what if the target you want to generate is a binary? There's currently no way to generate a binary target because they omitted from your packages metadata.</p>",
        "id": 210286336,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600273464
    },
    {
        "content": "<p><a href=\"https://github.com/bazelbuild/rules_rust/blob/master/wasm_bindgen/raze/Cargo.toml\">https://github.com/bazelbuild/rules_rust/blob/master/wasm_bindgen/raze/Cargo.toml</a> this is the specific use case</p>",
        "id": 210286930,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600273757
    },
    {
        "content": "<p>we want to be able to compile the <code>wasm-bindgen-cli</code> target using Bazel in a way that the binary can be used in other targets/rules</p>",
        "id": 210287077,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600273805
    },
    {
        "content": "<p>now that <code>cargo-raze</code> is using <code>cargo_metadata</code>, it no longer gets metadata for the <code>wasm-bindgen-cli</code> target</p>",
        "id": 210287203,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600273876
    },
    {
        "content": "<p>which means we can no longer update this tool</p>",
        "id": 210287225,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600273891
    },
    {
        "content": "<p>Did I explain that well enough?  I know I'm bad at explanations <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210287484,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274032
    },
    {
        "content": "<p>if you check out <code>wasm-bindgen-cli</code> and run cargo metadata, you will get what you want. If you depend on <code>wasm-bindgen-cli</code> then cargo will not do anything helpful when it builds that depender so cargo metadata does not tell you about it.</p>",
        "id": 210287653,
        "sender_full_name": "Eh2406",
        "timestamp": 1600274107
    },
    {
        "content": "<p>Cargo does not have a way to say \"build this binary and make it available at build time\", if that is what bazel dose with <code>wasm-bindgen-cli = \"=0.2.48\"</code> then it is not reading Cargo.toml correctly.</p>",
        "id": 210288103,
        "sender_full_name": "Eh2406",
        "timestamp": 1600274287
    },
    {
        "content": "<p>No</p>",
        "id": 210288171,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274321
    },
    {
        "content": "<p>that's not what Bazel does</p>",
        "id": 210288176,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274325
    },
    {
        "content": "<p>and that's not what <code>cargo-raze</code> is intending to do either</p>",
        "id": 210288187,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274337
    },
    {
        "content": "<p>it's attempting to take a dependency graph and generate bazel rules to build each dependency in the same way cargo would</p>",
        "id": 210288249,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274376
    },
    {
        "content": "<p>Ok, so far I am with you.</p>",
        "id": 210288316,
        "sender_full_name": "Eh2406",
        "timestamp": 1600274404
    },
    {
        "content": "<p>so in the common case, this isn't an issue, because yeah, no one really depends on a binary</p>",
        "id": 210288373,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274429
    },
    {
        "content": "<p>I think it is stronger than that. depending on a binary, does nothing useful.</p>",
        "id": 210288435,
        "sender_full_name": "Eh2406",
        "timestamp": 1600274474
    },
    {
        "content": "<p>but now there's a unique situation where we actually want to generate a binary target so we can use it in other bash/pwsh/batch commands</p>",
        "id": 210288443,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274476
    },
    {
        "content": "<p>the thing that seems most like what I want is <code>cargo tree</code>. And all <code>cargo raze</code> is trying to do is to recreate that same tree but in Bazel</p>",
        "id": 210288634,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274586
    },
    {
        "content": "<p>and <code>cargo tree</code> includes binary targets</p>",
        "id": 210288653,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600274599
    },
    {
        "content": "<p>If you want to depend on that binary I think you will need to check out its repo/.crate and run <code>cargo metadata</code> there.<br>\nI have to go to a meeting, but hopefully Eric with jump in to determine what parts are currently buggy.</p>",
        "id": 210289665,
        "sender_full_name": "Eh2406",
        "timestamp": 1600275098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> Thanks for your time and attention! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 210289831,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600275188
    },
    {
        "content": "<p>And all your help! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210290652,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600275622
    },
    {
        "content": "<p>The approach I use for <a href=\"https://github.com/rust-osdev/bootloader\">https://github.com/rust-osdev/bootloader</a> is to add a library alongside the binary. In our case, the library is actually needed, but I guess you could also create an empty-dummy library for your use-case (it might be difficult to persuade the wasm-bindgen-cli maintainers of this though).</p>\n<p>Since the crate now includes a library, it is present in the <code>cargo metadata</code> output. Through its <code>manifest_path</code> key, you get the path to the crate downloaded by cargo. This includes all binaries, so you can compile and run them by invoking <code>cargo build/run --manifest-path […] --target-dir […]</code>. The <code>--target-dir</code> argument is important because you don't want to put your compiled files into the cargo download location.</p>",
        "id": 210293176,
        "sender_full_name": "Philipp Oppermann",
        "timestamp": 1600276830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343063\">@UebelAndre</span> It sounds like you might be trying to express dependencies in <code>Cargo.toml</code> that aren't actually usable by Cargo, in the hopes that another tool (bazel) can use them.</p>",
        "id": 210309492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600284856
    },
    {
        "content": "<p>I'd love to see Cargo enhanced to support dependencies on binary crates.</p>",
        "id": 210309530,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600284877
    },
    {
        "content": "<p>But it currently doesn't.</p>",
        "id": 210309540,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600284883
    },
    {
        "content": "<p>Yeah, at this point I'm just trying to understand all the tools available to me at this point. I still need to go read what <code>cargo tree</code> is doing and why that's able to see all the targets. In this case \"dependencies\" aren't really \"dependencies\" but instead a list of crates to transitively pull. I think at this point I have all the information I need though so thank you everyone! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 210310311,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600285270
    },
    {
        "content": "<p>But my guess is that <code>cargo tree</code>'s behavure is a bug. Whether it is worth fixing, or waiting for a defined semantics <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 210310826,
        "sender_full_name": "Eh2406",
        "timestamp": 1600285519
    },
    {
        "content": "<p>Is it a bug, or a side effect of our current handling of dependencies on crates that have both a binary and a library?</p>",
        "id": 210310952,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600285568
    },
    {
        "content": "<p>Yes?</p>",
        "id": 210310979,
        "sender_full_name": "Eh2406",
        "timestamp": 1600285587
    },
    {
        "content": "<p>(Either way, I do think it'd be appropriate to fix it.)</p>",
        "id": 210310985,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600285589
    },
    {
        "content": "<p>Like <code>tree</code> and <code>metadata</code> should match.</p>",
        "id": 210311207,
        "sender_full_name": "Eh2406",
        "timestamp": 1600285684
    },
    {
        "content": "<p>Can someone make an issue ticket and link it here? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 210311259,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600285712
    },
    {
        "content": "<p>Oh, it's also worth noting that <code>cargo vendor</code> will pull binary dependencies</p>",
        "id": 210315871,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600287936
    },
    {
        "content": "<p>That should likely be added to the ticket as well</p>",
        "id": 210315996,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600287984
    },
    {
        "content": "<p>or would <code>cargo vendor</code>'s behavior be a bug?</p>",
        "id": 210316120,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600288067
    },
    {
        "content": "<p>I added <code>vendor.output</code> to my example in: <a href=\"https://github.com/UebelAndre/cargo-metadata-test\">https://github.com/UebelAndre/cargo-metadata-test</a></p>",
        "id": 210316554,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600288261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> Curious on your thoughts for <code>vendor</code></p>",
        "id": 210316754,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600288347
    },
    {
        "content": "<p>I think they should be consistent. I don't know how best to get there.</p>",
        "id": 210318197,
        "sender_full_name": "Eh2406",
        "timestamp": 1600289104
    },
    {
        "content": "<p>I agree but so far <code>metadata</code> seems to be the inconsistent behavior here. Though that said, I think you guys have a better understanding of how things are and could better reason about how things should be. I would love to see an issue ticket so I can track this and see all the thoughts there. I think it's a better place for this conversation since it's gotten larger than I was hoping for</p>",
        "id": 210318603,
        "sender_full_name": "UebelAndre",
        "timestamp": 1600289308
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/8708\">https://github.com/rust-lang/cargo/issues/8708</a></p>",
        "id": 210321037,
        "sender_full_name": "Eh2406",
        "timestamp": 1600290665
    }
]