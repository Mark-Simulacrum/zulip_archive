[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> , you and I ages ago were looking at <a href=\"https://github.com/rust-lang/compiler-builtins/issues/319\">compiler-builtins#319</a></p>",
        "id": 245331494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625758713
    },
    {
        "content": "<p>after some recent activity, I looked at it again yesterday, and made a <a href=\"https://github.com/rust-lang/compiler-builtins/issues/319#issuecomment-875933941\">new comment</a>. Basically, I had failed to notice in the past that the original code says that it grants additional<br>\npermissions described in the GCC Runtime Library Exception, version 3.1</p>",
        "id": 245331609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625758766
    },
    {
        "content": "<p>and you yourself noted that exception, in a different context, when you <a href=\"https://github.com/rust-lang/rust/issues/63232#issuecomment-520238349\">commented</a> on <a href=\"https://github.com/rust-lang/rust/issues/63232\">rust#63232</a></p>",
        "id": 245331799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625758835
    },
    {
        "content": "<p>So I’m curious what the best next step here is. The easiest path for short term would be to copy the appropriate text (i.e. GPL + Runtime Library exception) in to the <a href=\"http://riscv32.rs\">riscv32.rs</a> code. I think that would allow us to close <a href=\"https://github.com/rust-lang/compiler-builtins/issues/319\">compiler-builtins#319</a></p>",
        "id": 245331951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625758911
    },
    {
        "content": "<p>(I know some other participants on the thread for <a href=\"https://github.com/rust-lang/compiler-builtins/issues/319\">compiler-builtins#319</a> have pushed a different argument, namely justifying keeping the code based on the code being trivial. I would prefer to avoid using that as our justification if we can avoid it, because I don’t want to get into the business of deciding what code is trivially uncopyrightable or not. Better to have a simple blanket policy that we can enforce, based solely on provenance.)</p>",
        "id": 245332198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625759016
    },
    {
        "content": "<p>The other potentially interesting wrinkle is: If we take the approach of adoping the GCC Runtime Library exception here, I would be like to spell out explicitly that <code>rustc</code> qualifies as an \"Eligible Compilation Process”, because <code>rustc</code> is not work based on GCC. (I suppose the story there gets a little more complicated if one starts discussing the GCC Rust backend (<code>rustc_codegen_gcc</code>, discussed in <a href=\"https://github.com/rust-lang/compiler-team/issues/442\">compiler-team#442</a>), but even then, that <code>rustc</code> should <em>also</em> be considered an \"Eligible Compilation Process”, because it is GPL-compatible work combined with GCC.</p>",
        "id": 245332985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625759380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm not sure that we want compiler-builtins to become GPL-with-runtime-exception.</p>",
        "id": 245340699,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763382
    },
    {
        "content": "<p>GPL-with-runtime-exception still limits usage of compiler-builtins. It'd be preferable to keep it permissively licensed, since it's compiled into people's code.</p>",
        "id": 245340733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763405
    },
    {
        "content": "<p>Right now, people are <em>allowed</em> to make their own private build of rustc, and use it to build their own binaries. That's something MIT and Apache 2.0 permit.</p>",
        "id": 245340791,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763434
    },
    {
        "content": "<p>Is there something preventing us from removing that code from compiler-builtins and replacing it?</p>",
        "id": 245340818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763450
    },
    {
        "content": "<p>There seem to be a few people on that compiler-builtins issue that have a dangerous amount of non-understanding of how copyright and licensing work. :(</p>",
        "id": 245340978,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763515
    },
    {
        "content": "<p>It <em>seems</em> like the obvious answer here is to replace the current code with the code from LLVM.</p>",
        "id": 245341050,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763554
    },
    {
        "content": "<p>(And perhaps consider yanking old versions of compiler-builtins.)</p>",
        "id": 245341076,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763567
    },
    {
        "content": "<p>(Re-reading the thread, it looks like the same person who originally submitted the code to compiler-builtins is the same person arguing a dangerous misinterpretation of copyright. I would suggest, in general, that we consider refusing further contributions from them due to legal risk.)</p>",
        "id": 245341356,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763666
    },
    {
        "content": "<p>I know, I was definitely troubled by the attitudes presented on that thread.</p>",
        "id": 245342195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625764093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/231349-t-core.2Flicensing/topic/Runtime.20Library.20Exception/near/245341050\">said</a>:</p>\n<blockquote>\n<p>It <em>seems</em> like the obvious answer here is to replace the current code with the code from LLVM.</p>\n</blockquote>\n<p>By “the code from LLVM”, you mean the assembly? (Use assembly directly? Or port the assembly to Rust?)</p>",
        "id": 245342356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625764183
    },
    {
        "content": "<p>The main issue with a port of the assembly to Rust is the fact that the code <em>is</em> trivial, so doing it in a clean-room fashion seems all the more important.</p>",
        "id": 245342511,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625764223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/231349-t-core.2Flicensing/topic/Runtime.20Library.20Exception/near/245342195\">said</a>:</p>\n<blockquote>\n<p>I know, I was definitely troubled by the attitudes presented on that thread.</p>\n</blockquote>\n<p>(and also potentially outright trolling from sock puppet accounts? Hard to tell.)</p>",
        "id": 245342748,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625764328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/231349-t-core.2Flicensing/topic/Runtime.20Library.20Exception/near/245342356\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/231349-t-core.2Flicensing/topic/Runtime.20Library.20Exception/near/245341050\">said</a>:</p>\n<blockquote>\n<p>It <em>seems</em> like the obvious answer here is to replace the current code with the code from LLVM.</p>\n</blockquote>\n<p>By “the code from LLVM”, you mean the assembly? (Use assembly directly? Or port the assembly to Rust?)</p>\n</blockquote>\n<p>Either port it to Rust directly, or add the assembly implementation, or both.</p>",
        "id": 245343105,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625764507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/231349-t-core.2Flicensing/topic/Runtime.20Library.20Exception/near/245342511\">said</a>:</p>\n<blockquote>\n<p>The main issue with a port of the assembly to Rust is the fact that the code <em>is</em> trivial, so doing it in a clean-room fashion seems all the more important.</p>\n</blockquote>\n<p>I really don't think it needs to be done clean-room, if we have the permissively licensed implementation from LLVM to go on. As far as I can tell, we have other code ported from LLVM.</p>",
        "id": 245343130,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625764530
    },
    {
        "content": "<p>Sorry: By “clean room”, I did mean porting the code from LLVM. Just doing so without looking at the existing implementation (i.e. without looking at the GPL-with-exception-licensed code).</p>",
        "id": 245346284,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625766142
    },
    {
        "content": "<p>I agree that we shouldn’t have any trouble using code provided by LLVM.</p>",
        "id": 245346315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625766161
    },
    {
        "content": "<p>I have a clean room implementation of that code around that i can contribute.</p>",
        "id": 245347631,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1625766732
    },
    {
        "content": "<p>(sorry for slacking on this, it has been sitting in my inbox for ~a month)</p>",
        "id": 245347677,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1625766756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/231349-t-core.2Flicensing/topic/Runtime.20Library.20Exception/near/245332198\">said</a>:</p>\n<blockquote>\n<p>(I know some other participants on the thread for <a href=\"https://github.com/rust-lang/compiler-builtins/issues/319\">compiler-builtins#319</a> have pushed a different argument, namely justifying keeping the code based on the code being trivial. I would prefer to avoid using that as our justification if we can avoid it, because I don’t want to get into the business of deciding what code is trivially uncopyrightable or not. Better to have a simple blanket policy that we can enforce, based solely on provenance.)</p>\n</blockquote>\n<p>The problem with the \"trivial\" is that I would follow if the code wasn't _expressively_ contributed hinting at the GPL'ed code.</p>",
        "id": 245347778,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1625766815
    },
    {
        "content": "<p>Sure, that of course is <em>also</em> a problem here.</p>",
        "id": 245347887,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625766868
    },
    {
        "content": "<p>or is <em>the</em> problem. But I don’t want the end message to be “don’t attribute your sources.” The message needs to be: “Don’t use GPL’ed code as the basis for your contributions.\"</p>",
        "id": 245348008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625766913
    },
    {
        "content": "<p>Anyway… I mostly wanted to point out that I don’t think the situation as inherently as bad as I had thought it was when I had discussed this with <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span></p>",
        "id": 245348123,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625766962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/231349-t-core.2Flicensing/topic/Runtime.20Library.20Exception/near/245348008\">said</a>:</p>\n<blockquote>\n<p>or is <em>the</em> problem. But I don’t want the end message to be “don’t attribute your sources.” The message needs to be: “Don’t use GPL’ed code as the basis for your contributions.\"</p>\n</blockquote>\n<p>Oh, yeah, that makes sense. I still put the problem squarely on the reviewer side - that argument should have been had in the PR.</p>",
        "id": 245348252,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1625767023
    },
    {
        "content": "<p>And also some discussion earlier this year here: <a href=\"https://internals.rust-lang.org/t/consider-shipping-libclang-with-rust-toolchain/12241/23\">https://internals.rust-lang.org/t/consider-shipping-libclang-with-rust-toolchain/12241/23</a></p>",
        "id": 263793192,
        "sender_full_name": "Eric Huss",
        "timestamp": 1638743999
    }
]