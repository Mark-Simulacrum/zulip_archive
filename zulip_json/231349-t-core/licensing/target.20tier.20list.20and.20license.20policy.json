[
    {
        "content": "<p>I'm currently working on the <a href=\"https://github.com/rust-lang/rfcs/pull/2803\">target tier policy</a> RFC.</p>",
        "id": 203668383,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600234
    },
    {
        "content": "<p>One of the things I'm looking to add is a requirement specifically discussing licensing of dependencies introduced by a new target.</p>",
        "id": 203668399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600275
    },
    {
        "content": "<p>At first, I'd intended to add a requirement saying that a target must not require new license exceptions to be added.</p>",
        "id": 203668401,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600294
    },
    {
        "content": "<p>However, I realized that there <em>are</em> targets that I think we should accept, which would potentially entail such license exceptions.</p>",
        "id": 203668405,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600315
    },
    {
        "content": "<p>As an example, consider the <code>x86_64-linux-kernel</code> target.</p>",
        "id": 203668445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600325
    },
    {
        "content": "<p>The runtime library for that target will necessarily depend on Linux kernel internal APIs, and any binary or library built for that target will <em>necessarily</em> need to be GPLv2-compatible.</p>",
        "id": 203668458,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600366
    },
    {
        "content": "<p>And I don't think that's inherently a problem.</p>",
        "id": 203668460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600372
    },
    {
        "content": "<p>That doesn't affect people using any other target.</p>",
        "id": 203668462,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600380
    },
    {
        "content": "<p>Now, the target should not introduce any dependencies that affect <em>other</em> targets or the licensing of binaries or libraries built for any other targets.</p>",
        "id": 203668519,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600445
    },
    {
        "content": "<p>But I don't think it makes sense for us to prohibit targets that inherently require linking to copyleft code, for instance.</p>",
        "id": 203668535,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594600481
    },
    {
        "content": "<p>Hm, can we ensure somehow that code in-tree is only allowed to be under our normal licenses without some approval process? I wouldn't want us to be in a place where we can't, say, copy some function definition from sys/kernel/foo.rs to <a href=\"http://mutex.rs\">mutex.rs</a>.</p>\n<p>I'd suggest something like non-MIT/Apache code must at least be in separate files.</p>\n<p>But I agree that <em>linking</em> seems quite fine.</p>",
        "id": 203669524,
        "sender_full_name": "simulacrum",
        "timestamp": 1594602222
    },
    {
        "content": "<p>Code in-tree, yes; thanks for the clarification. I'll add that.</p>",
        "id": 203669637,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594602451
    },
    {
        "content": "<p>(I would commonly expect substantial \"runtime libraries\" for such a target to be out-of-tree anyway.)</p>",
        "id": 203669695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594602495
    },
    {
        "content": "<p>How controversial would it be to say something like \"New targets should not require proprietary (non-FOSS) components to link a functional binary.\"? I'm aware that we have targets today that wouldn't meet that requirement, and I'm not suggesting that this policy would retroactively apply to those targets, but would it be unreasonable to not allow that for <em>new</em> targets?</p>",
        "id": 203669844,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594602807
    },
    {
        "content": "<p>I expect this policy to live for a very long time, through substantial increases in Rust's popularity, and if there's any chance that a target might ever go \"well, we need Rust support, so we'll have to teach lld how to link for us or something\", I think that's worthwhile.</p>",
        "id": 203669897,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594602861
    },
    {
        "content": "<p>(Also, it's a \"should\" and not a \"must\", so exceptions could be made.)</p>",
        "id": 203669912,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594602897
    },
    {
        "content": "<p>I think that it would be best to require that a standard linker be able to do the task, but we should also accept the idea of perhaps needing a particular proprietary data blob to be passed to the linker to actually get a complete executable. That data blob would be part of a proprietary developer kit for that platform.</p>\n<p>Then again, with the development of std-aware cargo maybe we won't need to support <em>as many</em> weird targets within rust's/rustup's suite, and we can just tell people to do a \"cargo also builds std\" compilation.</p>",
        "id": 203670063,
        "sender_full_name": "Lokathor",
        "timestamp": 1594603085
    },
    {
        "content": "<p>Can you give an example of what kind of target you have in mind that would have such a requirement?</p>",
        "id": 203670090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594603197
    },
    {
        "content": "<p>Well with consoles, older ones i suppose, it's common for the copy protection to involve \"the game data will start with this exact sequence of bytes, and if it doesn't CRC out to the right value the game is 'corrupted' and the device refuses to continue\".</p>",
        "id": 203670370,
        "sender_full_name": "Lokathor",
        "timestamp": 1594603593
    },
    {
        "content": "<p>If you literally mean \"CRC\" then there's an obvious solution to that that doesn't require proprietary binaries. ;)</p>",
        "id": 203670390,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594603665
    },
    {
        "content": "<p>But in the more general case...</p>",
        "id": 203670391,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594603675
    },
    {
        "content": "<p>If you have to supply a specific binary blob at build time that the target system will check for, and that blob is copyrightable and proprietary, and there's no workaround for it, then that seems like it would limit the adoption of the target in Rust somewhat.</p>",
        "id": 203670451,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594603727
    },
    {
        "content": "<p>We certainly wouldn't put that blob in the Rust repository, for instance.</p>",
        "id": 203670461,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594603752
    },
    {
        "content": "<p>Also, if the blob can only be obtained by questionably legal means, I'd be very hesitant to have any official support for the target.</p>",
        "id": 203670469,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594603788
    },
    {
        "content": "<p>true. I think \"the standard linker we ship with rust has to be able to do this\" being a fine requirement was a majority of what i was aiming to say :3</p>",
        "id": 203670471,
        "sender_full_name": "Lokathor",
        "timestamp": 1594603796
    },
    {
        "content": "<p>But in any case, the requirement is a \"should\", not a \"must\", and we can evaluate it on a target-by-target basis.</p>",
        "id": 203670472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594603798
    },
    {
        "content": "<p>I've now pushed changes to the target tier policy RFC that address legal and licensing requirements.</p>",
        "id": 203671310,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594605064
    }
]