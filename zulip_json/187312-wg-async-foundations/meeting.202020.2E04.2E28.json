[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> meeting!</p>",
        "id": 195594567,
        "sender_full_name": "tmandry",
        "timestamp": 1588093258
    },
    {
        "content": "<p><a href=\"https://github.com/orgs/rust-lang/projects/2\" title=\"https://github.com/orgs/rust-lang/projects/2\">Project board</a></p>",
        "id": 195594797,
        "sender_full_name": "tmandry",
        "timestamp": 1588093329
    },
    {
        "content": "<p>A few issues were closed this week:</p>\n<ul>\n<li>Bad error message with async main <a href=\"https://github.com/rust-lang/rust/issues/68523\" title=\"https://github.com/rust-lang/rust/issues/68523\">#68523</a></li>\n<li>Improve await error messaging for trait obligations <a href=\"https://github.com/rust-lang/rust/issues/71137\" title=\"https://github.com/rust-lang/rust/issues/71137\">#71137</a></li>\n<li>Lint for using await while holding a MutexGuard <a href=\"https://github.com/rust-lang/clippy/issues/4226\" title=\"https://github.com/rust-lang/clippy/issues/4226\">rust-lang/clippy#4226</a></li>\n</ul>",
        "id": 195595029,
        "sender_full_name": "tmandry",
        "timestamp": 1588093438
    },
    {
        "content": "<p>Interestingly, nothing is marked in progress at the moment</p>",
        "id": 195595283,
        "sender_full_name": "tmandry",
        "timestamp": 1588093525
    },
    {
        "content": "<p>I don't think there are any updates to blockers</p>",
        "id": 195595308,
        "sender_full_name": "tmandry",
        "timestamp": 1588093537
    },
    {
        "content": "<p>Let's jump to triage</p>",
        "id": 195595492,
        "sender_full_name": "tmandry",
        "timestamp": 1588093613
    },
    {
        "content": "<p>we have one <a href=\"https://github.com/search?q=org%3Arust-lang+is%3Aissue+label%3AA-async-await+is%3Aopen+-label%3AAsyncAwait-Triaged&amp;type=Issues\" title=\"https://github.com/search?q=org%3Arust-lang+is%3Aissue+label%3AA-async-await+is%3Aopen+-label%3AAsyncAwait-Triaged&amp;type=Issues\">uncategorized issue</a></p>",
        "id": 195595509,
        "sender_full_name": "tmandry",
        "timestamp": 1588093619
    },
    {
        "content": "<p>..filed by me :)</p>",
        "id": 195595524,
        "sender_full_name": "tmandry",
        "timestamp": 1588093629
    },
    {
        "content": "<p>pretty quiet week I guess</p>",
        "id": 195595565,
        "sender_full_name": "tmandry",
        "timestamp": 1588093643
    },
    {
        "content": "<h2>Tracking issue for generator code quality <a href=\"https://github.com/rust-lang/rust/issues/71407\" title=\"https://github.com/rust-lang/rust/issues/71407\">#71407</a></h2>",
        "id": 195595575,
        "sender_full_name": "tmandry",
        "timestamp": 1588093645
    },
    {
        "content": "<p>not much to say here</p>",
        "id": 195595585,
        "sender_full_name": "tmandry",
        "timestamp": 1588093650
    },
    {
        "content": "<p>there was a question about when tracking issues like this would be closed</p>",
        "id": 195595615,
        "sender_full_name": "tmandry",
        "timestamp": 1588093663
    },
    {
        "content": "<p>..which is valid, I don't know if there's a clear criteria for when to close it</p>",
        "id": 195595726,
        "sender_full_name": "tmandry",
        "timestamp": 1588093703
    },
    {
        "content": "<p>heh, a good point</p>",
        "id": 195595735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093705
    },
    {
        "content": "<p>but I think it'd be ok to close when there are no outstanding ideas left that we know of</p>",
        "id": 195595764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093722
    },
    {
        "content": "<p>yeah, that's roughly what I said</p>",
        "id": 195595784,
        "sender_full_name": "tmandry",
        "timestamp": 1588093732
    },
    {
        "content": "<p>ok, marking \"triaged\"</p>",
        "id": 195595820,
        "sender_full_name": "tmandry",
        "timestamp": 1588093750
    },
    {
        "content": "<p>so, I think it might be just you and me, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 195595904,
        "sender_full_name": "tmandry",
        "timestamp": 1588093796
    },
    {
        "content": "<p>otherwise I'd ask if people wanted things to work on</p>",
        "id": 195595946,
        "sender_full_name": "tmandry",
        "timestamp": 1588093803
    },
    {
        "content": "<p>Maybe we can use this time to talk about bigger goals for the rest of the year?</p>",
        "id": 195596002,
        "sender_full_name": "tmandry",
        "timestamp": 1588093827
    },
    {
        "content": "<p>Let's do that</p>",
        "id": 195596026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093838
    },
    {
        "content": "<p>I've been wanting to ahve that conversation for a while</p>",
        "id": 195596040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093843
    },
    {
        "content": "<p>now is as good a time as any</p>",
        "id": 195596048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093846
    },
    {
        "content": "<p>Or, perhaps slightly differently but relatedly, about the overall org + scope of this group</p>",
        "id": 195596087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093862
    },
    {
        "content": "<p>I think those are <em>kind of</em> the same thing</p>",
        "id": 195596101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093869
    },
    {
        "content": "<p>I guess you saw me writing to <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> in <a class=\"stream-topic\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations/topic/.22census.22.20and.20organization\">#wg-async-foundations &gt; \"census\" and organization</a></p>",
        "id": 195596150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093891
    },
    {
        "content": "<p>yep</p>",
        "id": 195596157,
        "sender_full_name": "tmandry",
        "timestamp": 1588093896
    },
    {
        "content": "<p>I think our scope has been pretty narrowly focused so far this year</p>",
        "id": 195596229,
        "sender_full_name": "tmandry",
        "timestamp": 1588093922
    },
    {
        "content": "<p>I guess it seems pretty obvious to me that we're struggling a bit with people / motivation here</p>",
        "id": 195596261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093931
    },
    {
        "content": "<p>I attribute some of that to not having clear goals and advertising around them</p>",
        "id": 195596305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093950
    },
    {
        "content": "<p>agreed</p>",
        "id": 195596318,
        "sender_full_name": "tmandry",
        "timestamp": 1588093956
    },
    {
        "content": "<p>I also think there's clearly some real-estate that we're not \"monitoring\"</p>",
        "id": 195596340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093968
    },
    {
        "content": "<p>I'm thinking of things like the futures crate, pin-utils crate, but also proposals like the ones from <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span></p>",
        "id": 195596375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093981
    },
    {
        "content": "<p>I think a core question is</p>",
        "id": 195596426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094002
    },
    {
        "content": "<p>there are like these different \"groups\" of activities</p>",
        "id": 195596445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094010
    },
    {
        "content": "<ul>\n<li>\"polish/improvements\" to the implementation</li>\n</ul>",
        "id": 195596467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094016
    },
    {
        "content": "<ul>\n<li>designing and extending library surface area, traits</li>\n</ul>",
        "id": 195596507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094029
    },
    {
        "content": "<ul>\n<li>language features</li>\n</ul>",
        "id": 195596515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094032
    },
    {
        "content": "<p>I'm not sure if combining those things is fruitful or not</p>",
        "id": 195596530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094039
    },
    {
        "content": "<p>on the one hand, there's obvious overlap, but I've also found that it's often harder to combine those kinds of activites than you might think</p>",
        "id": 195596591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094054
    },
    {
        "content": "<p>e.g., I think it's pretty useful to have a triage meeting focused on the impl side</p>",
        "id": 195596614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094062
    },
    {
        "content": "<p>yeah, they're sort of in a different headspace if you will</p>",
        "id": 195596665,
        "sender_full_name": "tmandry",
        "timestamp": 1588094091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195596375\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195596375\">said</a>:</p>\n<blockquote>\n<p>I'm thinking of things like the futures crate, pin-utils crate, but also proposals like the ones from <span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span></p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/70834\" title=\"https://github.com/rust-lang/rust/pull/70834\">https://github.com/rust-lang/rust/pull/70834</a>, <a href=\"https://github.com/rust-lang/rust/pull/70817\" title=\"https://github.com/rust-lang/rust/pull/70817\">https://github.com/rust-lang/rust/pull/70817</a></p>",
        "id": 195596705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094106
    },
    {
        "content": "<p>right</p>",
        "id": 195596717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094113
    },
    {
        "content": "<p>and yet they sort of inform each other a bit, too</p>",
        "id": 195596722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094116
    },
    {
        "content": "<p>so it feels like there should be some amount of \"coordination\" or visibility or something</p>",
        "id": 195596742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094129
    },
    {
        "content": "<p>right</p>",
        "id": 195596752,
        "sender_full_name": "tmandry",
        "timestamp": 1588094135
    },
    {
        "content": "<p>I would add that </p>\n<ul>\n<li>maintaining the book</li>\n</ul>",
        "id": 195596769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094148
    },
    {
        "content": "<p>is probably a 4th thing</p>",
        "id": 195596779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094150
    },
    {
        "content": "<p>documenting is its own headspace</p>",
        "id": 195596789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094158
    },
    {
        "content": "<p>indeed</p>",
        "id": 195596852,
        "sender_full_name": "tmandry",
        "timestamp": 1588094173
    },
    {
        "content": "<p>I'm curious about your own take</p>",
        "id": 195596912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094202
    },
    {
        "content": "<p>like, what parts of the above interest you (if any) :)</p>",
        "id": 195596924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094212
    },
    {
        "content": "<p>I guess one question that naturally arises re: documentation is, now that async is officially a part of the language, should we be seeking to add to the rust lang book</p>",
        "id": 195596984,
        "sender_full_name": "tmandry",
        "timestamp": 1588094240
    },
    {
        "content": "<p>I guess I think that given what we've been saying, it makes sense to try and create a group focused on the <em>polish</em>, and then think about how we will manage the other things (even if that's just acknowledging that they're \"on hold\" for now)</p>",
        "id": 195597011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195596984\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195596984\">said</a>:</p>\n<blockquote>\n<p>I guess one question that naturally arises re: documentation is, now that async is officially a part of the language, should we be seeking to add to the rust lang book</p>\n</blockquote>\n<p>I suspect the answer is medium term, yes, short term, no</p>",
        "id": 195597130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094288
    },
    {
        "content": "<p>yeah, I can see having multiple sub-groups making sense</p>",
        "id": 195597135,
        "sender_full_name": "tmandry",
        "timestamp": 1588094291
    },
    {
        "content": "<p>the problem with multiple sub-groups is that we don't even really have the energy for one effective group right now</p>",
        "id": 195597160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094308
    },
    {
        "content": "<p>right</p>",
        "id": 195597168,
        "sender_full_name": "tmandry",
        "timestamp": 1588094312
    },
    {
        "content": "<p>that's roughly what I was going to say..</p>",
        "id": 195597187,
        "sender_full_name": "tmandry",
        "timestamp": 1588094325
    },
    {
        "content": "<p>but</p>",
        "id": 195597195,
        "sender_full_name": "tmandry",
        "timestamp": 1588094327
    },
    {
        "content": "<p>maybe having regular design meetings about new things that people want</p>",
        "id": 195597234,
        "sender_full_name": "tmandry",
        "timestamp": 1588094347
    },
    {
        "content": "<p>(less frequently than weekly, probably)</p>",
        "id": 195597252,
        "sender_full_name": "tmandry",
        "timestamp": 1588094355
    },
    {
        "content": "<p>would be a good way to pick up some steam?</p>",
        "id": 195597267,
        "sender_full_name": "tmandry",
        "timestamp": 1588094366
    },
    {
        "content": "<p>interesting</p>",
        "id": 195597323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094396
    },
    {
        "content": "<p>I do think that starting out with some kind of effort like this</p>",
        "id": 195597381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094406
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 195597404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094419
    },
    {
        "content": "<p>I mean, polish is important but I think focusing on it completely might have been a mistake</p>",
        "id": 195597408,
        "sender_full_name": "tmandry",
        "timestamp": 1588094422
    },
    {
        "content": "<p>so I think that doing something simple and relatively low effort is a good idea</p>",
        "id": 195597416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195597408\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195597408\">said</a>:</p>\n<blockquote>\n<p>I mean, polish is important but I think focusing on it completely might have been a mistake</p>\n</blockquote>\n<p>from a motivation standpoint</p>",
        "id": 195597478,
        "sender_full_name": "tmandry",
        "timestamp": 1588094465
    },
    {
        "content": "<p>well, and maybe others</p>",
        "id": 195597520,
        "sender_full_name": "tmandry",
        "timestamp": 1588094480
    },
    {
        "content": "<p>yeah, perhaps</p>",
        "id": 195597606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094516
    },
    {
        "content": "<p>I think we are clearly lacking some critical features / traits, focusing on those would be a good place to start</p>",
        "id": 195597705,
        "sender_full_name": "tmandry",
        "timestamp": 1588094546
    },
    {
        "content": "<p>I have to go dust off my list of what I think async should do next, but I think the most obvious next steps to me are probably</p>\n<ul>\n<li>adding async-read, async-write traits</li>\n<li>adding stream traits</li>\n<li>ensuring that it works well on embedded</li>\n<li>other small additions to stdlib, along the lines of what <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> approached but maybe also things like <code>task::block_on</code></li>\n</ul>",
        "id": 195597738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094562
    },
    {
        "content": "<p>those seem all like relatively achievable and solid goals</p>",
        "id": 195597770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094573
    },
    {
        "content": "<p>I think that in the medium term -- like, looking more at 2021, I'd be interested in dedicated generator syntax</p>",
        "id": 195597808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094587
    },
    {
        "content": "<p>but I think it's not a good idea to talk about language additions when we can get clear wins from the lib space</p>",
        "id": 195597838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094604
    },
    {
        "content": "<p>yes, agree with all of the above</p>",
        "id": 195597862,
        "sender_full_name": "tmandry",
        "timestamp": 1588094616
    },
    {
        "content": "<p>or at least, it's maybe a good idea to <em>talk about</em> lang additions, and brainstorm</p>",
        "id": 195597873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094619
    },
    {
        "content": "<p>but it's not where I'd be putting most of my energy</p>",
        "id": 195597888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094626
    },
    {
        "content": "<p>some other additions I would consider would be</p>",
        "id": 195597926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094639
    },
    {
        "content": "<p>adding in utilities like mutexes, channels</p>",
        "id": 195597972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094645
    },
    {
        "content": "<p>which are \"executor-agnostic\", basically</p>",
        "id": 195597998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094653
    },
    {
        "content": "<p>ah, good point</p>",
        "id": 195598009,
        "sender_full_name": "tmandry",
        "timestamp": 1588094658
    },
    {
        "content": "<p>these raise some questions</p>",
        "id": 195598014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094660
    },
    {
        "content": "<p>the most obvious being, where do they live in libstd hierarchy?</p>",
        "id": 195598029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094667
    },
    {
        "content": "<p>the interesting observation here is that this is all <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs</span> stuff I'm talking about, so it'd be good to get somebody (maybe <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span>?) involved in this conversation, who sort of wants to champion that stuff</p>",
        "id": 195598088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094692
    },
    {
        "content": "<p>Ah, there is one language change I would consider:</p>",
        "id": 195598111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094698
    },
    {
        "content": "<p>extending <code>Drop</code> trait with more \"async lifecycle\" callbacks (cc <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span>)</p>",
        "id": 195598181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094717
    },
    {
        "content": "<p>this is roughly the contents of my blog post, typing into zulip now :)</p>",
        "id": 195598204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094728
    },
    {
        "content": "<p>I think part of what has held me up was some uncertainty about \"how\" to see those things happening</p>",
        "id": 195598246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094743
    },
    {
        "content": "<p>yeah that's one I had in mind also</p>",
        "id": 195598250,
        "sender_full_name": "tmandry",
        "timestamp": 1588094744
    },
    {
        "content": "<p>yeah, I think we should be looking for like \"low glitz, max utility\"</p>",
        "id": 195598330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094764
    },
    {
        "content": "<p>probably less important than some of the early lib wins, but more important than generator syntax</p>",
        "id": 195598356,
        "sender_full_name": "tmandry",
        "timestamp": 1588094773
    },
    {
        "content": "<p>so</p>",
        "id": 195598379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094785
    },
    {
        "content": "<p>some questions in my mind</p>",
        "id": 195598406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094800
    },
    {
        "content": "<p>re: Mutex, a related but hard question is, could we ever have some kind of <code>AsyncSafe</code> trait</p>",
        "id": 195598412,
        "sender_full_name": "tmandry",
        "timestamp": 1588094801
    },
    {
        "content": "<p>one of them is where things like the book, pin-utils, futures fit in</p>",
        "id": 195598419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094807
    },
    {
        "content": "<p>to be honest, I view the futures crate as kind of \"done\"</p>",
        "id": 195598436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094817
    },
    {
        "content": "<p>I think we should import async-read, async-write, stream, and various utilities into libstd</p>",
        "id": 195598468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094831
    },
    {
        "content": "<p>and at that point, there's not much left there</p>",
        "id": 195598476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094835
    },
    {
        "content": "<p>I mean I'm sure there's tons I'm overlooking, but it seems like that's the \"big stuff\"</p>",
        "id": 195598499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094848
    },
    {
        "content": "<p>well, ok, there's the utility functions on future etc, but a lot of those are reproduced in executors etc</p>",
        "id": 195598534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094866
    },
    {
        "content": "<p>in any case, I think probably we should bring it under the \"polish\" umbrella -- update it to keep pace with the library changes we have inmind, but it doesn't have a \"story\" of its own --</p>",
        "id": 195598612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094889
    },
    {
        "content": "<p>bring utility functions under the polish umbrella you mean?</p>",
        "id": 195598664,
        "sender_full_name": "tmandry",
        "timestamp": 1588094917
    },
    {
        "content": "<p>Can we provide a similar thing to must_use but for things that should not be held as a local across yields? This from my pov would be very helpful for protecting users.</p>",
        "id": 195598667,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588094920
    },
    {
        "content": "<p>one thing that did come up a lot was talking about \"stability expectations\" for the futures crate, I think we could probably publish some, given this idea that we don't really expect to be evolving it much</p>",
        "id": 195598677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"207781\">Lucio Franco</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598667\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598667\">said</a>:</p>\n<blockquote>\n<p>Can we provide a similar thing to must_use but for things that should not be held as a local across yields? This from my pov would be very helpful for protecting users.</p>\n</blockquote>\n<p>interesting idea! That's something I've not heard floating before. I think it fits under polish, but only barely</p>",
        "id": 195598714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598664\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598664\">said</a>:</p>\n<blockquote>\n<p>bring utility functions under the polish umbrella you mean?</p>\n</blockquote>\n<p>more or less, yeah. like it's also about maintaining some of the libs</p>",
        "id": 195598735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"207781\">Lucio Franco</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598667\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598667\">said</a>:</p>\n<blockquote>\n<p>Can we provide a similar thing to must_use but for things that should not be held as a local across yields? This from my pov would be very helpful for protecting users.</p>\n</blockquote>\n<p>yeah, that's what I was getting at with the <code>AsyncSafe</code> trait. an attribute would be nice since we could introduce it as a lint</p>",
        "id": 195598741,
        "sender_full_name": "tmandry",
        "timestamp": 1588094966
    },
    {
        "content": "<p>do you think that fits into this \"async lifecycle\" concept?</p>",
        "id": 195598760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094977
    },
    {
        "content": "<p>seems like yes</p>",
        "id": 195598790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094987
    },
    {
        "content": "<p>The reason I cc'd <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span>  earlier is that they were saying they wanted to write an RFC</p>",
        "id": 195598806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588094993
    },
    {
        "content": "<p>related, but somewhat independent in my mind</p>",
        "id": 195598885,
        "sender_full_name": "tmandry",
        "timestamp": 1588095013
    },
    {
        "content": "<p>I think they are technically distinct for sure</p>",
        "id": 195598916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095027
    },
    {
        "content": "<p>but there is definitely some conceptual relationship</p>",
        "id": 195598932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095033
    },
    {
        "content": "<p>I'm a bit nervous about <code>AsyncSafe</code> (presuming that was intended as an auto trait) beacuse <code>dyn Foo</code></p>",
        "id": 195598963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095048
    },
    {
        "content": "<p>orthogonal imo, one is to protect users and one is to make things nicer. I consider the lifecycle thing as sugar basically. Similar to what async/awati brings vs futures 0.1.</p>",
        "id": 195598976,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095055
    },
    {
        "content": "<p>I think something more \"lint-y\" and \"best effort\" makes sense</p>",
        "id": 195598979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095057
    },
    {
        "content": "<p>(I’ve shared it with <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> before; they’ve suggested implementing it as a proc macro that transforms .awaits into explicit yields)</p>",
        "id": 195599011,
        "sender_full_name": "David Barsky",
        "timestamp": 1588095069
    },
    {
        "content": "<p>the <code>#[must_use]</code> analogy seems good</p>",
        "id": 195599015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598979\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195598979\">said</a>:</p>\n<blockquote>\n<p>I think something more \"lint-y\" and \"best effort\" makes sense</p>\n</blockquote>\n<p>#[yield_safe = \"THIS WILL DEADLOCK\"] :)</p>",
        "id": 195599062,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198819\">David Barsky</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599011\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599011\">said</a>:</p>\n<blockquote>\n<p>(I’ve shared it with <span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> before; they’ve suggested implementing it as a proc macro that transforms .awaits into explicit yields)</p>\n</blockquote>\n<p>oh I forgot about that :) that was a way of proving the concept more</p>",
        "id": 195599122,
        "sender_full_name": "tmandry",
        "timestamp": 1588095118
    },
    {
        "content": "<p>I had the idea—but haven’t explored it—that the yield_safe could be a compile-time error with the lifecycle trait</p>",
        "id": 195599212,
        "sender_full_name": "David Barsky",
        "timestamp": 1588095149
    },
    {
        "content": "<p>but yes best effort with a lint that can be ignored. The Sync stuff is helping us now with Send executors but for local ones it won't stop you so I think something along the lines that could warn users and make them aware. That will enable them to then ask the right questions.</p>",
        "id": 195599215,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095150
    },
    {
        "content": "<p>though if there are enough people talking about it, maybe that's not necessary</p>",
        "id": 195599219,
        "sender_full_name": "tmandry",
        "timestamp": 1588095152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> so I like your idea of having a \"general call\" to folks interested --</p>",
        "id": 195599233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095157
    },
    {
        "content": "<p>I am wondering if it makes sense to take the bullet points I listed above as a \"rough agenda\"</p>",
        "id": 195599251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095165
    },
    {
        "content": "<p>(such that an on_yield on an async mutex would be a compile error)</p>",
        "id": 195599266,
        "sender_full_name": "David Barsky",
        "timestamp": 1588095171
    },
    {
        "content": "<p>and basically try to have a meeting (and maybe some further conversion) about that agenda</p>",
        "id": 195599277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095176
    },
    {
        "content": "<p>I anticipate that <code>AsyncREad</code>/<code>AsyncWrite</code> may be somewhat controversial</p>",
        "id": 195599290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095184
    },
    {
        "content": "<p>but I think I would want to start this more from the POV of</p>",
        "id": 195599314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198819\">David Barsky</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599266\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599266\">said</a>:</p>\n<blockquote>\n<p>(such that an on_yield on an async mutex would be a compile error)</p>\n</blockquote>\n<p>don't think you want a compile error but we can discuss this later.</p>",
        "id": 195599331,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095197
    },
    {
        "content": "<p>(a) are there great ideas missing, like the one <span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> shared</p>",
        "id": 195599338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095200
    },
    {
        "content": "<p>i.e., a positive bent where we are gathering concepts</p>",
        "id": 195599362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095211
    },
    {
        "content": "<p>and to some extent</p>",
        "id": 195599369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095214
    },
    {
        "content": "<p>(b) collecting the major concerns and arguments -- but not in the way of \"let's shoot down the idea\"</p>",
        "id": 195599385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599290\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599290\">said</a>:</p>\n<blockquote>\n<p>I anticipate that <code>AsyncREad</code>/<code>AsyncWrite</code> may be somewhat controversial</p>\n</blockquote>\n<p>This will for sure be controversial, tokio is likely to go with different traits. Especially with uring changing a lot. So I think framing here will be very important.</p>",
        "id": 195599410,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095236
    },
    {
        "content": "<p>i.e., I think I already know the objections to async-read and async-write, and I would probably start them off</p>",
        "id": 195599412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095237
    },
    {
        "content": "<p>Yes, the major objection I see is the uring interactions</p>",
        "id": 195599470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599015\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599015\">said</a>:</p>\n<blockquote>\n<p>the <code>#[must_use]</code> analogy seems good</p>\n</blockquote>\n<p>I agree this makes sense from a practical perspective. In the long term I'm _slightly_ worried about async being second-class, compared to concurrency with Send and Sync, but I don't see any real practical concerns there at the moment.</p>",
        "id": 195599485,
        "sender_full_name": "tmandry",
        "timestamp": 1588095257
    },
    {
        "content": "<p>I'm of the mind that async-read and async-write <em>still</em> make sense</p>",
        "id": 195599488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095257
    },
    {
        "content": "<p>but I think I'd want to avoid getting too far down in that discussion</p>",
        "id": 195599528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095288
    },
    {
        "content": "<p>(and I would want to note the concerns up front, for sure)</p>",
        "id": 195599544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> hmm, I guess the question is how much we need to  <em>guarantee</em> \"async-safety\"</p>",
        "id": 195599594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095321
    },
    {
        "content": "<p>right, we're trying to prevent deadlocks, which are already possible in safe Rust</p>",
        "id": 195599660,
        "sender_full_name": "tmandry",
        "timestamp": 1588095352
    },
    {
        "content": "<p>yeah, I suspect we couldn't totally achieve that regardless, anbd we can get like 90% of the practical benefit</p>",
        "id": 195599778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588095394
    },
    {
        "content": "<p>anyway, I'm very happy to go with an attribute for now, just noting my thoughts</p>",
        "id": 195599789,
        "sender_full_name": "tmandry",
        "timestamp": 1588095403
    },
    {
        "content": "<p>(and I suspect you're right, and that this is the right way for the long term as well)</p>",
        "id": 195599865,
        "sender_full_name": "tmandry",
        "timestamp": 1588095452
    },
    {
        "content": "<p>I think for me its gotchas that are the issue, right now the fact that MutexGuard is !Sync is saving ALOT of people from weird prod issues. But if you were to use any local executors they'd be screwed. So more so trying to protect that and surface this possibility before it can happen. I don't think it should error but should warn with a link to correct docs explaining what could go wrong. This is just for anything that could be an issue if held as a local. Happy to chat more and ping me if there is something that comes up.</p>\n<p>I'd also be somewhat interested in helping draft rfc/implementation, I've been wanting to get involved in the compiler for a while anyways.</p>",
        "id": 195599985,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095488
    },
    {
        "content": "<p>data point: we definitely hit this very issue on fuchsia. we've added a clippy lint and are working on integrating clippy to help prevent it in the future.</p>",
        "id": 195600068,
        "sender_full_name": "tmandry",
        "timestamp": 1588095528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600068\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600068\">said</a>:</p>\n<blockquote>\n<p>data point: we definitely hit this very issue on fuchsia. we've added a clippy lint and are working on integrating clippy to help prevent it in the future.</p>\n</blockquote>\n<p>link to this lint? Would be good to start sharing that if it exists already</p>",
        "id": 195600159,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599251\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195599251\">said</a>:</p>\n<blockquote>\n<p>I am wondering if it makes sense to take the bullet points I listed above as a \"rough agenda\"</p>\n</blockquote>\n<p>it's a lot to talk about. I'd suggest starting with one issue at a time perhaps? or what were you hoping to get out of a more general meeting?</p>",
        "id": 195600309,
        "sender_full_name": "tmandry",
        "timestamp": 1588095624
    },
    {
        "content": "<blockquote>\n<p>don't think you want a compile error but we can discuss this later.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span>  Sure, yeah. the thinking is that you can make something unyieldable across yield points. If that's useful? ╮ (. ❛ ᴗ ❛.) ╭</p>",
        "id": 195600367,
        "sender_full_name": "David Barsky",
        "timestamp": 1588095650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> <a href=\"https://github.com/rust-lang/rust-clippy/pull/5439\" title=\"https://github.com/rust-lang/rust-clippy/pull/5439\">https://github.com/rust-lang/rust-clippy/pull/5439</a></p>",
        "id": 195600419,
        "sender_full_name": "tmandry",
        "timestamp": 1588095675
    },
    {
        "content": "<p>(I'm bad at using Zulip.)</p>",
        "id": 195600560,
        "sender_full_name": "David Barsky",
        "timestamp": 1588095725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600419\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600419\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"207781\">Lucio Franco</span> <a href=\"https://github.com/rust-lang/rust-clippy/pull/5439\" title=\"https://github.com/rust-lang/rust-clippy/pull/5439\">https://github.com/rust-lang/rust-clippy/pull/5439</a></p>\n</blockquote>\n<p>Ah looks like it doesn't let you add the lint like must_use but gets us about halfway there! </p>\n<p>Let me know how I can help move this forward though. Should be pingable here.</p>",
        "id": 195600573,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588095730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span> is <a href=\"https://github.com/tokio-rs/tokio/pull/1744\" title=\"https://github.com/tokio-rs/tokio/pull/1744\">https://github.com/tokio-rs/tokio/pull/1744</a> the best source on rationale behind tokio's AsyncRead/AsyncWrite design?</p>",
        "id": 195600907,
        "sender_full_name": "tmandry",
        "timestamp": 1588095872
    },
    {
        "content": "<blockquote>\n<p>Ah looks like it doesn't let you add the lint like must_use but gets us about halfway there! </p>\n</blockquote>\n<p>indeed, we just targeted existing common mutex types. do you have other types in mind you would want to annotate?</p>",
        "id": 195601129,
        "sender_full_name": "tmandry",
        "timestamp": 1588095962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600907\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600907\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"207781\">Lucio Franco</span> is <a href=\"https://github.com/tokio-rs/tokio/pull/1744\" title=\"https://github.com/tokio-rs/tokio/pull/1744\">https://github.com/tokio-rs/tokio/pull/1744</a> the best source on rationale behind tokio's AsyncRead/AsyncWrite design?</p>\n</blockquote>\n<p>I realize I linked a PR that was never merged, but I thought I'd seen it advertised as the right source before, maybe I'm misremembering.</p>",
        "id": 195601346,
        "sender_full_name": "tmandry",
        "timestamp": 1588096061
    },
    {
        "content": "<p>there's certainly a <em>lot</em> of discussion there, it would be good to condense it somehow</p>",
        "id": 195601461,
        "sender_full_name": "tmandry",
        "timestamp": 1588096102
    },
    {
        "content": "<p>maybe this is a good use for the ol' Collaborative Summary Document <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195601525,
        "sender_full_name": "tmandry",
        "timestamp": 1588096125
    },
    {
        "content": "<p>I mean to be clear, it seems likely (but not a foregone conclusion) to me that we'll end up with traits that are symmetric to Read/Write in std, but it would be best for us all to make that decision with clear eyes about what we aren't getting, and what future additions might be possible.</p>",
        "id": 195602130,
        "sender_full_name": "tmandry",
        "timestamp": 1588096430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195601129\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195601129\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah looks like it doesn't let you add the lint like must_use but gets us about halfway there! </p>\n</blockquote>\n<p>indeed, we just targeted existing common mutex types. do you have other types in mind you would want to annotate?</p>\n</blockquote>\n<p>I could probably get you a better use case but I am thinking things like parking lot and other custom mutexes. I did have a solid use case before but I can't remember it. I can totally get you more info later but I do see it being useful in the general. Guards are implicit and can be confusing so having some way to lint them within rustc would be useful.</p>",
        "id": 195602786,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588096711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600907\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600907\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"207781\">Lucio Franco</span> is <a href=\"https://github.com/tokio-rs/tokio/pull/1744\" title=\"https://github.com/tokio-rs/tokio/pull/1744\">https://github.com/tokio-rs/tokio/pull/1744</a> the best source on rationale behind tokio's AsyncRead/AsyncWrite design?</p>\n</blockquote>\n<p>A lot of this stuff has gone stale, basically we are starting from the ground up now but progress is somewhat slow. I think carl might have a better idea. Happy to start a chat for this. Let me know. We totally want to be involved and want to do what is best for everyone while still trying to push things. Uring has kinda put a wrench in a lot of this :D</p>",
        "id": 195602909,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588096788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195602130\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195602130\">said</a>:</p>\n<blockquote>\n<p>I mean to be clear, it seems likely (but not a foregone conclusion) to me that we'll end up with traits that are symmetric to Read/Write in std, but it would be best for us all to make that decision with clear eyes about what we aren't getting, and what future additions might be possible.</p>\n</blockquote>\n<p>We basically want to explore uring and see how things fit with tls libs etc. So I think in general holding off just seems best. I have yet to really see any issues with the io traits living in a crate vs in std. But this should probably extend to a longer convo.</p>",
        "id": 195603046,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588096845
    },
    {
        "content": "<p>Hmm. I guess my main desire to standardize a trait is to get rid of the ecosystem split, which seems less likely to actually happen now.</p>",
        "id": 195603808,
        "sender_full_name": "tmandry",
        "timestamp": 1588097168
    },
    {
        "content": "<p>There is some lower-hanging fruit than AsyncRead/AsyncWrite, I think.</p>",
        "id": 195603959,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588097239
    },
    {
        "content": "<p>(there's definitely also a polish aspect of it, where we have futures-rs as the de facto blessed library, but you have to add it and figure that out on your own)</p>",
        "id": 195603985,
        "sender_full_name": "tmandry",
        "timestamp": 1588097253
    },
    {
        "content": "<p>Stream should be straightforward to pull into core for example, right?</p>",
        "id": 195603987,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588097255
    },
    {
        "content": "<p>yes, I think so.</p>",
        "id": 195604089,
        "sender_full_name": "tmandry",
        "timestamp": 1588097298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195603808\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195603808\">said</a>:</p>\n<blockquote>\n<p>Hmm. I guess my main desire to standardize a trait is to get rid of the ecosystem split, which seems less likely to actually happen now.</p>\n</blockquote>\n<p>fixing io types isn't going to fix ecosystem split. This is not a technical issue imo. I do think a concerted effort from a group pushing futures-rs forward as the \"general all-purpose\" async team would be helpful. But things like uring are only going to make the split worse.</p>",
        "id": 195604190,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588097344
    },
    {
        "content": "<p>I should clarify what I meant by that, which is \"make more async code interoperate seamlessly\"</p>",
        "id": 195604438,
        "sender_full_name": "tmandry",
        "timestamp": 1588097450
    },
    {
        "content": "<p>and pulling io traits into std is less a technical solution and more a signaling one, imo</p>",
        "id": 195604683,
        "sender_full_name": "tmandry",
        "timestamp": 1588097545
    },
    {
        "content": "<p>Another thing I've been thinking of that might be good for polish, is a way to downcast a reactor type from <code>Context</code>?</p>",
        "id": 195604911,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588097663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195604683\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195604683\">said</a>:</p>\n<blockquote>\n<p>and pulling io traits into std is less a technical solution and more a signaling one, imo</p>\n</blockquote>\n<p>Yeah, fair, I am not totally sure if its the right one or not, would be good to think about goals here. What would we be trying to signal?</p>",
        "id": 195604964,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588097700
    },
    {
        "content": "<p>also happy to chat about this during non-meeting times :) I realize this is a meeting so trying not to get too deep into things.</p>",
        "id": 195605022,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588097737
    },
    {
        "content": "<p>hehe, we are well past meeting time, I should probably split this out into its own topic :)</p>",
        "id": 195605061,
        "sender_full_name": "tmandry",
        "timestamp": 1588097759
    },
    {
        "content": "<p>we would be signaling that all async libraries should be compatible with these traits (even if they use some kind of shim internally)</p>",
        "id": 195605239,
        "sender_full_name": "tmandry",
        "timestamp": 1588097837
    },
    {
        "content": "<p>I'm honestly pretty suspicious that an interface that is optimal for io_uring will actually be one that people are going to be happy to work with at higher levels</p>",
        "id": 195605245,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588097839
    },
    {
        "content": "<p>and it'll just be a thing that's reserved for TcpStream/File internals with a memcpy on either end to interface back to standard traits</p>",
        "id": 195605296,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588097871
    },
    {
        "content": "<p>(I'm in another meeting, but I hold the opinion that io_uring should not be intermingled with classic IO and should be kept out of the AsyncRead/Write traits as a concern)</p>",
        "id": 195605371,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1588097904
    },
    {
        "content": "<p>This is probably true, but I think its worth it to explore the space first before jumping into something that most likely won't help the current situation much.</p>",
        "id": 195605531,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588097993
    },
    {
        "content": "<p>I think the window for that exploration is closing quickly, or is maybe even closed already. All these things aren't new. But it leads to a number of very concrete issues in the ecosystem.</p>",
        "id": 195606726,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1588098502
    },
    {
        "content": "<p>Hey all, sorry, I got pulled AFK when the time slot for this meeting expired, but to give my thoughts:</p>",
        "id": 195613405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588101790
    },
    {
        "content": "<p>First off, I think that the top priority should be working to enable interoperable libraries. To that end, I think that  both stream and async-read/async-write each enable \"classes\" of libraries to operate interoperably. I agree with <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> that <code>Stream</code> is the lower hanging fruit of the two and it is probably where I would start.</p>",
        "id": 195613525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588101848
    },
    {
        "content": "<p>When it comes to async-read/async-write, I know of a few classes of problems, but the three biggest concerns I've heard are </p>\n<ol>\n<li>dealing with uninitialized data, which I think is well understood and roughly speaking a <a href=\"http://smallcultfollowing.com/babysteps/blog/2020/01/20/async-interview-5-steven-fackler/\" title=\"http://smallcultfollowing.com/babysteps/blog/2020/01/20/async-interview-5-steven-fackler/\">\"solved problem\"</a> at this juncture</li>\n<li>how to think about things like integrating with io-uring, which you can see just from this topic still has a ton of unknowns</li>\n<li>the fact that read/write can't go into core</li>\n</ol>\n<p>I don't want to get too far into point 2 right now, but I think it would be good to talk out more. I guess my current position is that, whatever happens, epoll is a pretty widespread thing that is not goin to go away instantly, and it makes sense for us to offer standard traits that work with it -- we already have sync ones, we should have async ones. Once I/O U-Ring has had time to bake, and we have more experience with it, I would expect that it makes sense to start pulling traits for it into std as well.</p>\n<p>Point 3 I hadn't heard before but <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> recently pointed it out to me. I feel like we should try to address this in a way that is uniform across read/write and async-read/async-write.</p>\n<p>In general, I think that the principle of having sync/async be \"analogous\" is very valuable and one that we should stick with. It will not only make things easier to learn, but it gives us a good guideline -- i.e., if we start to diverge, we will make things more confusing, but we also make it much harder to reach consensus, as suddenly there are a great many choices.</p>",
        "id": 195613969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102109
    },
    {
        "content": "<p>Anyway I'd be happy to talk a bit more about I/O u-ring, but I think we should move it to different topic.</p>",
        "id": 195613996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600309\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195600309\">said</a>:</p>\n<blockquote>\n<p>it's a lot to talk about. I'd suggest starting with one issue at a time perhaps? or what were you hoping to get out of a more general meeting?</p>\n</blockquote>\n<p>agreed! This is perhaps what I'd most like to focus on. I think a meeting is maybe not the best structure, but I think what I am interested in is:</p>\n<ul>\n<li>we can kind of <em>lead</em> on what we think the theme should be (extracting and making it possible for people to develop cross-executor libraries)</li>\n<li>but I would like to hear from folks what their <em>suggestions</em> are</li>\n<li>and to try and elaborate (in a \"collaborative summary\" sort of way, not a combative sort of way) some of the pros/cons around that</li>\n</ul>\n<p>The latter can be hard to achieve, perhaps. :)</p>",
        "id": 195614281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102258
    },
    {
        "content": "<p>Beyond looking for things to pull to std, another thing that <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> and I talked about, which I think seems interesting is looking for opportunities to create shared libraries that multiple executors might use, such as e.g. tokio/async-std/bastion/fuchsia sharing a TLS implementation or something</p>",
        "id": 195614403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102323
    },
    {
        "content": "<p>Agree, <code>Stream</code> into std should be easy, I think we are overall very happy with it. I do think the solution for uninit reads will help us with uring but very happy to chat more. These all seem like great ideas :) I am going to try and attend these more.</p>",
        "id": 195614439,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588102339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195614403\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195614403\">said</a>:</p>\n<blockquote>\n<p>Beyond looking for things to pull to std, another thing that <span class=\"user-mention silent\" data-user-id=\"215333\">Florian Gilcher</span> and I talked about, which I think seems interesting is looking for opportunities to create shared libraries that multiple executors might use, such as e.g. tokio/async-std/bastion/fuchsia sharing a TLS implementation or something</p>\n</blockquote>\n<p>I am happy to get involved on this as well! :) Let me know what makes sense and where to start.</p>",
        "id": 195614489,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588102376
    },
    {
        "content": "<p>Did you mean specifically TLS, or just the general idea?</p>",
        "id": 195614515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102395
    },
    {
        "content": "<p>I don't really know anything about TLS in particular, but I think for the \"general idea\" it'd be interesting to try to come up with a set of candidates -- what are concepts that basically every executor is re-inventing, and can they somehow be shared? Some things that come to mind are tracing and async-task (though the latter is more of an impl detail), but I'm sure there's much more.</p>",
        "id": 195614662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102472
    },
    {
        "content": "<p>Both, I think there is benefit in doing it. So mostly just offering that I am going to try and be pingable and should be around more to help communicate for tokio etc.</p>",
        "id": 195614970,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588102604
    },
    {
        "content": "<p>Can you clarify what you mean by TLS? as in, a unified way to gain access to the reactor?</p>",
        "id": 195615304,
        "sender_full_name": "tmandry",
        "timestamp": 1588102783
    },
    {
        "content": "<p>TLS, the protocol</p>",
        "id": 195615476,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1588102859
    },
    {
        "content": "<p>..oh, that TLS :)</p>",
        "id": 195615516,
        "sender_full_name": "tmandry",
        "timestamp": 1588102881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195615304\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195615304\">said</a>:</p>\n<blockquote>\n<p>Can you clarify what you mean by TLS? as in, a unified way to gain access to the reactor?</p>\n</blockquote>\n<p>on that topic, we should probably explore <code>Context</code> a bit more?</p>",
        "id": 195615587,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1588102920
    },
    {
        "content": "<p>yeah, that seems like a likely candidate to come up as we talk about ways that executors can unify what they're all doing</p>",
        "id": 195615813,
        "sender_full_name": "tmandry",
        "timestamp": 1588103026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"215333\">Florian Gilcher</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195615476\" title=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E04.2E28/near/195615476\">said</a>:</p>\n<blockquote>\n<p>TLS, the protocol</p>\n</blockquote>\n<p>lol ok ok I thought you meant thread-local storage :)</p>",
        "id": 195617549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103776
    },
    {
        "content": "<p>both probably make sense :)</p>",
        "id": 195617612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588103805
    },
    {
        "content": "<p>My biggest concern with the <code>AsyncRead/Write</code> and <code>Stream/Sink</code> traits is that they all enforce the users to write implementations via a state-machine <code>poll_x()</code> again. There is no way to naturally compose those types. E.g. if you want to implement a writer which forwards all data to 2 one is up to implementing things by hand - whereas in other async/await environments (like C#, Kotlin, etc) one can also use async/await syntax in the implementation of an async <code>Stream/...</code>, and then use normal delegation.</p>\n<p>And I actually would prefer application-level code in the future no longer having to deal with all the details of pinning, <code>Waker</code>s, <code>poll</code>ing anymore.</p>",
        "id": 196029817,
        "sender_full_name": "Matthias247",
        "timestamp": 1588389040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> Since there was some talk about TLS. I recently found out that some TLS libraries expect that all follow-up writes after an <code>EAGAIN</code> expect exactly the same data to be passed in the next write call. If you don't to it, you get a corrupted stream. That makes them actually also not really an ideal fit for <code>AsyncWrite</code> - which does not make any assumptions on what you pass in the next write call. Unless you add some additional buffering in front of the library (do <code>native-tls</code> or <code>tokio-tls</code> do that?)</p>",
        "id": 196030580,
        "sender_full_name": "Matthias247",
        "timestamp": 1588390291
    },
    {
        "content": "<p>To the best of my knowledge that has never been a problem other than enabling SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER by default 4 years ago: <a href=\"https://github.com/sfackler/rust-openssl/pull/423\" title=\"https://github.com/sfackler/rust-openssl/pull/423\">https://github.com/sfackler/rust-openssl/pull/423</a></p>",
        "id": 196047569,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588419181
    },
    {
        "content": "<p>I also had not heard of the issue until very recently. But then I learned about a service which run into a production issue (corrupted TLS stream) due to this behavior. I guess commonly services/protocols do not change the data they want to write. But some protocols will do a re-priorization of data on next writes - they now have more urgent data to send - with the assumption that the old data hasn't been written yet. This will then break if the APIs do not really do what they claim to have done (e.g. if <code>AsyncWrite::poll_write</code> returns 5 you might assume it only copied 5 bytes of your data, but in reality it might have copied more and ignore those bytes from your next <code>poll_write</code> call).</p>\n<p>The SSL flag does only allow to reference the same data from another memory address, but the data being passed in consecutive writes must still be the same.</p>",
        "id": 196068474,
        "sender_full_name": "Matthias247",
        "timestamp": 1588450815
    }
]