[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> or others -- I remember during some of our discussions about <code>for.await</code> loops (or whatever) that you raised the point that \"iterating over a stream sequentially isn't normally what you want to do\" (at least that's what I think you said). I was curious if I am remembering accurately. It seems like the \"stream interface\" kind of implies a certain amount of \"sequential-ness\". In any case, I was curious to get more info on what are the patterns by which streams are typically consumed, if not</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199521788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591117033
    },
    {
        "content": "<p>I don't know how many notes we kept from that conversation, I think <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> had started a <a href=\"https://boats.gitlab.io/blog/post/for-await-i/\">blog post series</a> but I don't think there was a Part 2.</p>",
        "id": 199521983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591117123
    },
    {
        "content": "<p>I wasn't able to find a part 2 of that post</p>",
        "id": 199522207,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591117223
    },
    {
        "content": "<blockquote>\n<p>In any case, I was curious to get more info on what are the patterns by which streams are typically consumed, if not</p>\n</blockquote>\n<p>Yes, that one. Although as described in the other topic that doesn't work too well with falliable Streams since you can't error out early.<br>\nI think in the application that I'm currently working on there are lots of \"Stream-like\" types that use that convention, but actually not a single plain <code>Stream&lt;T&gt;</code> itself.</p>\n<p><strong>Edit:</strong> Ooops, seems like I didn't read the first half of the question correctly. Thought it was just about looking for confirmation whether this is the usage pattern.</p>",
        "id": 199525933,
        "sender_full_name": "Matthias247",
        "timestamp": 1591119012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes, it's frequently the case that you want to pipeline work when handling streaming values</p>",
        "id": 199527587,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119753
    },
    {
        "content": "<p>by which I mean, you have elements coming of the stream 1, 2, 3, ...</p>",
        "id": 199527637,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119783
    },
    {
        "content": "<p>and you want to do something expensive with each of them that involves further asynchronous work</p>",
        "id": 199527657,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119796
    },
    {
        "content": "<p>once you get element 2 you want to start working on it, even if you're not done with all the processing you'll do on element 1</p>",
        "id": 199527705,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119820
    },
    {
        "content": "<p>an obvious example would be, like, download all the pages from a website corresponding to a stream of URLs</p>",
        "id": 199527786,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119844
    },
    {
        "content": "<p>if you waited to download the previous page before you started downloading the next one, you're losing out on concurrency</p>",
        "id": 199527825,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119859
    },
    {
        "content": "<p>and you're adding a network round trip time to the cost of each element, where before there was only a single round trip</p>",
        "id": 199527886,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119888
    },
    {
        "content": "<p>If you don't want to do this work, then you <em>really</em> want the definition of Stream to be \"attached\" rather than \"unattached\", as \"unattached\" favors this kind of concurrency</p>",
        "id": 199527966,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591119937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> You can still model the source with a Stream (or even a synchronous iterator), then spawn downloads, do rate limiting via either a channel or an async semaphore, and then combine things again. So you can build that approach out of primitives if you want.<br>\nOr as you already know - use a tool like <code>FuturesUnordered</code> which does all of it.</p>",
        "id": 199528187,
        "sender_full_name": "Matthias247",
        "timestamp": 1591120067
    },
    {
        "content": "<p>From some work I've done on <a href=\"https://docs.rs/parallel-stream/2.1.1/parallel_stream/\">parallel-stream</a> it seems one of the trickier things here is to configure limits. Assuming we would have syntax along the lines of <code>for x.await in y</code> this would imply a default concurrency setting: which means either we default to <code>1</code> (sequential), Infinity (unbounded), or some number in between.</p>\n<p>Choosing a random number seems like it would rarely be the right choice. And making async iteration unbounded means it effectively operates without backpressure (risking OOM/fd exhaustion errors). I think having an upper concurrency limit of 1 (sequential) would be the most sensible default even if people may often want to parallelize streams instead.</p>",
        "id": 199528271,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591120103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/for-await.20loops/near/199527966\">said</a>:</p>\n<blockquote>\n<p>If you don't want to do this work, then you <em>really</em> want the definition of Stream to be \"attached\" rather than \"unattached\", as \"unattached\" favors this kind of concurrency</p>\n</blockquote>\n<p>I was just going to say, this is depending on an \"attached\" stream. By the way, this terminology is not great. I've been thinking about whether we can use a term that is more about \"ownership\" - -i.e., the key point is that this <code>Stream</code> definition (like <code>Iterator</code>) is meant for a setup where the stream transfers ownership of each item as it is produced, versus retaining ownership. Maybe we can talk about it that way?</p>\n<p>I am reminded then of <span class=\"user-mention\" data-user-id=\"256759\">@boats</span>'s post making the post that <code>AsyncRead</code> (and write) are a natural interface for cases where the \"caller retains ownership of the buffer\" (versus one, like <code>BufRead</code>, where the reader/writer owns the buffer)</p>",
        "id": 199528989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591120467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> yes exactly, FuturesUnordered / .for_each_unordered is what you want</p>",
        "id": 199529010,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591120483
    },
    {
        "content": "<p>not <code>while let Some(x) = stream.next().await</code></p>",
        "id": 199529032,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591120496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, it's exactly that case, where the stream itself owns the buffer</p>",
        "id": 199529102,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591120533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> <code>.buffered</code> is also helpful depending on what your goal is</p>",
        "id": 199529350,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591120618
    },
    {
        "content": "<p>I'm not sure what's a good term that \"gets at\" this distinction. e.g., an \"attached\" or \"streaming\" stream is one that \"retains\" ownership -- maybe it's a \"Retaining stream\"? I don't know. The term \"attached\" was really meant to refer to the <em>output</em> of the stream -- that is, the items are \"attached to\" (owned by) the stream. (Or, conversely, the items are \"detached from\" the stream...)</p>",
        "id": 199529369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591120623
    },
    {
        "content": "<p>Right, that terminology made sense to me but I can see why it's imperfect.</p>",
        "id": 199529417,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591120649
    },
    {
        "content": "<p>Similarly, I promise that if we keep the term \"streaming iterator\" it will be very confusing how that is not a stream...:)</p>",
        "id": 199529475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591120681
    },
    {
        "content": "<p>Yeah, I'm still thinking about terms like \"free\", \"coupled\"/\"uncoupled\" but those are basically just the same as \"attached\"</p>",
        "id": 199529873,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591120848
    },
    {
        "content": "<p>\"joined\" is obviously problematic :)</p>",
        "id": 199529900,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591120862
    },
    {
        "content": "<p>borrowing / owning? -- borrowed / owned?</p>",
        "id": 199530158,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591120976
    },
    {
        "content": "<p>something like <code>RefStream</code> might solve the problem of \"talking about the stream instead of its output\"</p>",
        "id": 199530559,
        "sender_full_name": "tmandry",
        "timestamp": 1591121170
    },
    {
        "content": "<p>though it would still be nice to capture the fact that this is a generalization of <code>Stream</code>, and the output might not have a reference at all</p>",
        "id": 199530727,
        "sender_full_name": "tmandry",
        "timestamp": 1591121259
    },
    {
        "content": "<p><code>RefStream</code> sounds kind of like a stream of references</p>",
        "id": 199530843,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591121311
    },
    {
        "content": "<p>I might be in the minority here, but I'd also prefer symmetric terminology (though that's probably not doable)</p>",
        "id": 199530887,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591121338
    },
    {
        "content": "<p>so that when I'm speaking, it's clear when I say <code>Stream</code> that I <em>don't</em> mean a <code>RefStream</code> etc.</p>",
        "id": 199530930,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591121357
    },
    {
        "content": "<p>I mean, that's sort of true in that the output contains a reference back to the stream</p>",
        "id": 199530955,
        "sender_full_name": "tmandry",
        "timestamp": 1591121373
    },
    {
        "content": "<p>Yes, conceptually that's not a terrible way to think about it</p>",
        "id": 199530982,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1591121388
    },
    {
        "content": "<p>I fully agree that symmetric terminology would be nice, but I'm not sure what we would do about <code>Iterator</code></p>",
        "id": 199531087,
        "sender_full_name": "tmandry",
        "timestamp": 1591121436
    },
    {
        "content": "<p>I don't know what \"symmetric\" terminology means</p>",
        "id": 199531615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591121660
    },
    {
        "content": "<p>I don't know what problem you guys are trying to solve here <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>If this is a special use-case, give it a special name?</p>",
        "id": 199532465,
        "sender_full_name": "Matthias247",
        "timestamp": 1591122037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/for-await.20loops/near/199531615\">said</a>:</p>\n<blockquote>\n<p>I don't know what \"symmetric\" terminology means</p>\n</blockquote>\n<p>a (not very good) example would be to have both <code>AttachedStream</code> and <code>UnattachedStream</code>, instead of having a regular <code>Stream</code> name at all</p>",
        "id": 199562574,
        "sender_full_name": "tmandry",
        "timestamp": 1591137747
    }
]