[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> opened PR <a href=\"https://github.com/rust-lang/rust/issues/72035\">#72035</a>  to add <code>Stream</code> to the standard library.</p>",
        "id": 197314777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589306568
    },
    {
        "content": "<p>My first thought is: How sure are we that whatever special syntax we want to power <code>impl Stream</code> is compatible with that trait definition?</p>",
        "id": 197316570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589307406
    },
    {
        "content": "<p>do you mean \"generators\"?</p>",
        "id": 197340821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318256
    },
    {
        "content": "<p>e.g., <code>gen fn</code> or something?</p>",
        "id": 197340830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318262
    },
    {
        "content": "<p>Anyway, the more I think about it, the more it seems clear that we need an RFC</p>",
        "id": 197340855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318275
    },
    {
        "content": "<p>(which I think would be a great place to record the answer to that question and some details)</p>",
        "id": 197340886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318283
    },
    {
        "content": "<p>(that said, I don't see any problem, but it'd be worth writing out some details of how it might work)</p>",
        "id": 197340920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318294
    },
    {
        "content": "<p>I was thinking that maybe we can do a bit of collaborative work on such an RFC in the wg-async-functions repository?</p>",
        "id": 197340992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318325
    },
    {
        "content": "<p>Chiming in unpromptedâ€”what sort of design/syntax gets proposed for generators (e.g., <code>gen fn</code> for iterators; <code>async gen fn</code> for streams) <em>might</em> have interactions with <a href=\"https://internals.rust-lang.org/t/pre-rfc-lifecycle-trait/12311\">https://internals.rust-lang.org/t/pre-rfc-lifecycle-trait/12311</a></p>",
        "id": 197341210,
        "sender_full_name": "David Barsky",
        "timestamp": 1589318413
    },
    {
        "content": "<p>question is -- who wants to create first draft of that RFC :)</p>",
        "id": 197342825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589319255
    },
    {
        "content": "<p>Would adding a <code>gen</code> modifier to functions be an edition change?</p>",
        "id": 197343195,
        "sender_full_name": "David Barsky",
        "timestamp": 1589319453
    },
    {
        "content": "<p>(asking because I have no idea what the scope _is_)</p>",
        "id": 197343219,
        "sender_full_name": "David Barsky",
        "timestamp": 1589319470
    },
    {
        "content": "<p>(and i've enjoyed writing some of these RFCs)</p>",
        "id": 197343282,
        "sender_full_name": "David Barsky",
        "timestamp": 1589319485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198819\">David Barsky</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/adding.20Stream.20to.20stdlib/near/197343195\">said</a>:</p>\n<blockquote>\n<p>Would adding a <code>gen</code> modifier to functions be an edition change?</p>\n</blockquote>\n<p>it's a good point that we might want to reserve that keyword</p>",
        "id": 197345680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589320883
    },
    {
        "content": "<p>but by \"that RFC\" I meant \"the stream rfc\"</p>",
        "id": 197345684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589320890
    },
    {
        "content": "<p>Ah, I interpreted \"the stream RFC\" as <em>also</em> trying to figure out some of the syntax for some of the higher-level abstractions that make writing iterators or streams nicer</p>",
        "id": 197346106,
        "sender_full_name": "David Barsky",
        "timestamp": 1589321118
    },
    {
        "content": "<p>No, I'd leave that out, but I think it's a good idea to discuss (with some hypothetical syntax) what interactions there would be</p>",
        "id": 197348504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589322636
    },
    {
        "content": "<p>I started an RFC draft</p>",
        "id": 197460703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396629
    },
    {
        "content": "<p>but I forgot to open the PR, I think</p>",
        "id": 197460712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396633
    },
    {
        "content": "<p>let me do that...</p>",
        "id": 197460715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396634
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-async-foundations/pull/10\">https://github.com/rust-lang/wg-async-foundations/pull/10</a></p>",
        "id": 197460839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396677
    },
    {
        "content": "<p>ping  <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> and <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> especially, I'd like to have y'all take a look at that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 197461005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589396755
    },
    {
        "content": "<p>BTW, I think my plan here (cc <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span>, who left good comments recently) is to incorporate the suggested edits as </p>\n<p>FIXME</p>\n<p>and open a tracking issue</p>",
        "id": 198107147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589912557
    },
    {
        "content": "<p>since I'd prefer for this stream RFC to be more \"joint work\" than just me writing stuff</p>",
        "id": 198107162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589912568
    },
    {
        "content": "<p>/me also doesn't have time to do that much</p>",
        "id": 198107167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589912572
    },
    {
        "content": "<p>I'm going to see if I can get that done in 10 minut s:P</p>",
        "id": 198107176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589912579
    },
    {
        "content": "<p>OK -- <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span>  -- so looking at the <a href=\"https://hackmd.io/KGq2k9igT-aHTRb0SutiFQ\">stream RFC hackmd</a> ..</p>",
        "id": 198454346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161089
    },
    {
        "content": "<p>I put in the main points in the motivation, not sure if anything is missing from your POV</p>",
        "id": 198454354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161096
    },
    {
        "content": "<p>actually let me review the comments from the RFC thread again</p>",
        "id": 198454413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/adding.20Stream.20to.20stdlib/near/198107176\">said</a>:</p>\n<blockquote>\n<p>I'm going to see if I can get that done in 10 minut s:P</p>\n</blockquote>\n<p>obviously I was not able to do this =)</p>",
        "id": 198454425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161130
    },
    {
        "content": "<p>I believe most of my comments were future-facing -- both generators and async iteration</p>",
        "id": 198454534,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590161176
    },
    {
        "content": "<p>which we just incorporated (:</p>",
        "id": 198454544,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590161182
    },
    {
        "content": "<p>I think the outline hits <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>'s <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/10#discussion_r424705450\">points here</a> by and large</p>",
        "id": 198454547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161184
    },
    {
        "content": "<p>yeah, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> mentioned the same, and I agree that's a key point -- of course there's also the matter of discussing a bit some of the questions around those</p>",
        "id": 198454603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161212
    },
    {
        "content": "<p>I think that probably belongs a bit later, not in the Motivation</p>",
        "id": 198454613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161219
    },
    {
        "content": "<p>but more  in the Reference  and Alternatives or whatver</p>",
        "id": 198454634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161231
    },
    {
        "content": "<p>makes sense</p>",
        "id": 198454646,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590161236
    },
    {
        "content": "<p>OK, you raised <code>IntoStream</code> and <code>FromStream</code> for the future possibilities</p>",
        "id": 198454822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> I just added these two points:</p>\n<ul>\n<li>examples of crates that are consuming streams?</li>\n<li>examples of crates that are producing streams?</li>\n</ul>",
        "id": 198455105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161471
    },
    {
        "content": "<p>not sure if you have any off the top of your head but leaving some notes would be helpful</p>",
        "id": 198455125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161480
    },
    {
        "content": "<p>also, hackmd <em>really</em> doesn't work well when I tile my windows :(</p>",
        "id": 198455250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/adding.20Stream.20to.20stdlib/near/198454822\">said</a>:</p>\n<blockquote>\n<p>OK, you raised <code>IntoStream</code> and <code>FromStream</code> for the future possibilities</p>\n</blockquote>\n<p>yeah; those would be required for async iteration syntax. But also if we want to mirror <code>Iterator</code> and allow us to <code>collect</code> into various collections</p>",
        "id": 198455270,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590161545
    },
    {
        "content": "<p>omg hackmd is so slow what the heck</p>",
        "id": 198455793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161820
    },
    {
        "content": "<p>does future crate have something like <code>IntoStream</code> or <code>FromStream</code>?</p>",
        "id": 198455942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161887
    },
    {
        "content": "<p>hmm, the question of \"consuming streams\" is an interesting one -- I feel most crates I see take a single message, but are then called repeatedly</p>",
        "id": 198455943,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590161888
    },
    {
        "content": "<p>e.g., for each thing in the stream?</p>",
        "id": 198455968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590161904
    },
    {
        "content": "<p>yes exactly: \"for each stream in tcp listener\" is a common one</p>",
        "id": 198456020,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590161932
    },
    {
        "content": "<p>added it (:</p>",
        "id": 198456204,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/adding.20Stream.20to.20stdlib/near/198455793\">said</a>:</p>\n<blockquote>\n<p>does future crate have something like IntoStream or FromStream?</p>\n</blockquote>\n<p>it doesn't -- though it does have a <code>StreamExt::collect</code> method it takes different bounds than <code>Iterator::collect</code> does: <a href=\"https://docs.rs/futures/0.3.5/futures/stream/trait.StreamExt.html#method.collect\">https://docs.rs/futures/0.3.5/futures/stream/trait.StreamExt.html#method.collect</a></p>",
        "id": 198456484,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162137
    },
    {
        "content": "<p>ok  I moved a bunch of stuff to \"future possibilities\"</p>",
        "id": 198456488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162139
    },
    {
        "content": "<p>include some content (combinator methods) that was previously elsewhere</p>",
        "id": 198456507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162152
    },
    {
        "content": "<p><em>reading</em></p>",
        "id": 198456539,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162172
    },
    {
        "content": "<p>I like the \"convenience methods\" section a lot</p>",
        "id": 198456765,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162298
    },
    {
        "content": "<p>/me tries to remember async-iteration ..</p>",
        "id": 198456858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162350
    },
    {
        "content": "<p>I think the idea was to have some notation like <code>for.await x in ... </code> or maybe <code>for? x in ...</code> to handle the \"iterate over result\" thing ..</p>",
        "id": 198456956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162381
    },
    {
        "content": "<p>shouldn't go into too many details anyway</p>",
        "id": 198456973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162385
    },
    {
        "content": "<p>(Did <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> write a blog post about this?)</p>",
        "id": 198457046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162417
    },
    {
        "content": "<p>It'd be good to collect notes on it in the \"Design notes\" section of the wg-async-foundations repo</p>",
        "id": 198457070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162427
    },
    {
        "content": "<p>and then be able to link to that</p>",
        "id": 198457078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162431
    },
    {
        "content": "<p>I think they wrote something that touched on it, yes -- though not a full proposal</p>",
        "id": 198457087,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162438
    },
    {
        "content": "<p>yeah I have memories</p>",
        "id": 198457104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162450
    },
    {
        "content": "<p>but I think they maybe promised a part 2 and it never arrived :) though we did discussin a lang-team meeting</p>",
        "id": 198457133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162465
    },
    {
        "content": "<p>something like that</p>",
        "id": 198457137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162468
    },
    {
        "content": "<p>anyway, I think what's up there is a decent-ish outline</p>",
        "id": 198457143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162475
    },
    {
        "content": "<p>I will probably push a new commit</p>",
        "id": 198457161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162480
    },
    {
        "content": "<p>and then merge the PR</p>",
        "id": 198457204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162484
    },
    {
        "content": "<p>because I can't tolerate editing in hackmd anymore</p>",
        "id": 198457218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162489
    },
    {
        "content": "<p>for some reason it is SO slow for me</p>",
        "id": 198457228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162493
    },
    {
        "content": "<p>(is it just me?)</p>",
        "id": 198457231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162495
    },
    {
        "content": "<p>main point for \"why IntoStream as a trait\" would be that if we want to support: <code>for x.await in y</code> + <code>for &amp;x.await in y</code> + <code>for &amp;mut x.await in y</code> we'd need to provide a way to implement these -- where the most plausible option would be to mirror iterator's from/into traits</p>",
        "id": 198457270,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162520
    },
    {
        "content": "<p>I think I messed up that example haha -- lemme get it right in the hackmd</p>",
        "id": 198457350,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162559
    },
    {
        "content": "<p>I wonder if there would be a way to support that which</p>",
        "id": 198457355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162563
    },
    {
        "content": "<p>doesn't pull items from the stream one at a time necessarily</p>",
        "id": 198457366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162570
    },
    {
        "content": "<p>sometimes I do wish we still had the version of <code>for</code> where the body was a closure</p>",
        "id": 198457403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162590
    },
    {
        "content": "<p>/me tries to remember what syntax we use for that</p>",
        "id": 198457473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162607
    },
    {
        "content": "<p>/me cannot</p>",
        "id": 198457500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162622
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>something like that maybe...</p>",
        "id": 198457528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162643
    },
    {
        "content": "<p>wasn't that something about internal vs external iteration? -- believe boats mentioned it may still be possible on twitter?</p>",
        "id": 198457549,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162657
    },
    {
        "content": "<p>but I'm out of my depth there haha</p>",
        "id": 198457560,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162662
    },
    {
        "content": "<p>we could certainly still extend things in various ways</p>",
        "id": 198457591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162676
    },
    {
        "content": "<p>/me is still rooting for parallel iteration syntax someday</p>",
        "id": 198457629,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162692
    },
    {
        "content": "<p>did you make whatever final edits you had in mind?</p>",
        "id": 198457639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162696
    },
    {
        "content": "<p>not yet!</p>",
        "id": 198457653,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/adding.20Stream.20to.20stdlib/near/198457629\">said</a>:</p>\n<blockquote>\n<p>/me is still rooting for parallel iteration syntax someday</p>\n</blockquote>\n<p>yeah I was thinking that if we did support it async, it would ideally work in sync, and somehow .. do something rayon-like...</p>",
        "id": 198457677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162712
    },
    {
        "content": "<p>ok</p>",
        "id": 198457689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590162717
    },
    {
        "content": "<p>heck. yes.</p>",
        "id": 198457755,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162731
    },
    {
        "content": "<p>(to rayon-like_</p>",
        "id": 198457769,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay yes done!</p>",
        "id": 198458010,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162846
    },
    {
        "content": "<p>added the examples to IntoStream/FromStream</p>",
        "id": 198458039,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590162862
    },
    {
        "content": "<p>I guess we don't have a <code>BoxFuture</code> alias in the standard library?</p>",
        "id": 198459278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590163398
    },
    {
        "content": "<p>I was wondering whether we would want this <a href=\"https://docs.rs/futures/0.3.5/futures/stream/type.BoxStream.html\"><code>BoxStream</code></a> alias from the futures crate:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">BoxStream</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198459344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590163427
    },
    {
        "content": "<p>Good q; I feel that <code>BoxFuture</code> is mostly useful since we're still missing <code>async fn</code> in traits. Rarely use it otherwise. I've never used <code>BoxStream</code>.</p>",
        "id": 198461793,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590164475
    },
    {
        "content": "<p>Also suspect that once we integrate <code>IntoFuture</code> with <code>async/.await</code> it would remove many of the remaining uses of <code>BoxFuture</code>.</p>",
        "id": 198462009,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590164558
    },
    {
        "content": "<blockquote>\n<p>I feel that BoxFuture is mostly useful since we're still missing async fn in traits. Rarely use it otherwise. I've never used BoxStream.</p>\n</blockquote>\n<p>This might just be because you today <strong>have to</strong> write <code>Stream</code>s by hand instead of letting the compiler doing the job. So obviously type erasure is less necessary. In the same fashion pinning on <code>Stream</code>s is today barely necessary - although we we at least had some cases where a <code>Stream</code> was a hand-written wrapper around a <code>Future</code> generating source and stored that <code>Future</code> inside itself (e.g. in <a href=\"https://github.com/Matthias247/futures-intrusive/pull/12\">https://github.com/Matthias247/futures-intrusive/pull/12</a>)</p>",
        "id": 198547703,
        "sender_full_name": "Matthias247",
        "timestamp": 1590260777
    },
    {
        "content": "<p>I personally don't care too much about type aliases. Projects can add them theirself if they find it helpful</p>",
        "id": 198547719,
        "sender_full_name": "Matthias247",
        "timestamp": 1590260818
    },
    {
        "content": "<p>Avoiding adding the alias makes things also less opinionated around whether <code>Send</code> gets added. I understand some people would love all async/await stuff being <code>Send</code>. But for some environments that is not possible, for others not desirable due to performance concerns</p>",
        "id": 198547985,
        "sender_full_name": "Matthias247",
        "timestamp": 1590261315
    },
    {
        "content": "<p>One more general thought about <code>Stream</code>:<br>\nI noticed that <code>Stream</code>s  are a bit weird to work with for anything that can yield an error (which IO does). Since there is no error type in <code>Stream</code>, the output item is <code>Result&lt;T, E&gt;</code> then. But that doesn't allow you to write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// End of iteration</span>\n</code></pre></div>\n\n\n<p>anymore, since the <code>Option</code> takes precendence. This shows up in the usage of the method as well as in the implementation. E.g. it feels wrong to return <code>Some(Err(e))</code> from <code>poll</code>  after you returned <code>None</code> before - but <code>Stream</code> kind of prefers it.</p>",
        "id": 198548244,
        "sender_full_name": "Matthias247",
        "timestamp": 1590261726
    },
    {
        "content": "<p>Regarding the \"iterate over result\" problem, I think the proposal detailed at <a href=\"https://internals.rust-lang.org/t/pre-rfc-generator-integration-with-for-loops/6625\">https://internals.rust-lang.org/t/pre-rfc-generator-integration-with-for-loops/6625</a> is a very compelling approach as it allows resolution of the ambiguity of whether errors are permanent. I hope any approach taken here won't close the door on something like that in the future.</p>",
        "id": 198633430,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1590382049
    },
    {
        "content": "<p>There are lots of streams that cannot fail, so Iâ€™d argue that the stream itself should not carry an error type. The <code>while</code> loop problem could be fixed by using a different add-on than <code>.next()</code> for fallible streams that returns <code>Result&lt;Option&lt;T&gt;, E&gt;</code>â€Šâ€”â€Šand I agree that that syntax would be quite pleasant for consuming such streams.</p>",
        "id": 198637817,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590388544
    },
    {
        "content": "<p>One thing I was thinking about over the weekend:</p>\n<p>It might make sense to include a few convenience methods -- most notably, the trait as proposed doesn't even have a <code>next</code> method, you'd have to get that particular method from <code>FutureExt</code>. It seems like it's quite difficult to use without even a <code>next</code> method.</p>",
        "id": 198767094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590502257
    },
    {
        "content": "<p>I think I finally have enough contact to create a second draft of the draft rfc for adding stream to stdlib. Expect more questions here over the next week :)</p>",
        "id": 199223340,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1590794099
    },
    {
        "content": "<p>One question on <a href=\"https://github.com/rust-lang/wg-async-foundations/blob/master/rfc-drafts/stream.md\">https://github.com/rust-lang/wg-async-foundations/blob/master/rfc-drafts/stream.md</a></p>\n<p>\"We eventually want dedicated syntax for working with streams, which will require a shared trait\" - I'm having a bit of trouble parsing this. Is the trait shareable? Is it shared between the futures crate and std lib? Or is there another meaing?</p>",
        "id": 199223699,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1590794478
    },
    {
        "content": "<p>To have dedicated syntax for streams like we do for Future, the Stream trait needs to be \"flagged\" to the compiler as the special stream trait</p>",
        "id": 199224015,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1590794777
    },
    {
        "content": "<p>ah</p>",
        "id": 199224028,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1590794796
    },
    {
        "content": "<p>That's the <code>#[lang = \"future_trait\"]</code> annotation on Future: <a href=\"https://doc.rust-lang.org/src/core/future/future.rs.html#29\">https://doc.rust-lang.org/src/core/future/future.rs.html#29</a></p>",
        "id": 199224041,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1590794810
    },
    {
        "content": "<p>ty!</p>",
        "id": 199224048,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1590794817
    },
    {
        "content": "<p>Working on the RFC this week - currently researching how other languages (including Ruby, node, and some others) handle streams in the context of async/await</p>",
        "id": 199420647,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591044322
    },
    {
        "content": "<p>One question re: the summary on <a href=\"https://github.com/rust-lang/wg-async-foundations/blob/master/rfc-drafts/stream.md\">https://github.com/rust-lang/wg-async-foundations/blob/master/rfc-drafts/stream.md</a></p>\n<ul>\n<li>\n<p>I understand the first part \"Introduce the <code>Stream</code> trait into the standard library, using the<br>\ndesign from <code>futures</code>\"</p>\n</li>\n<li>\n<p>I'm not sure what this second part means \"Redirect the futures-stream definition to the<br>\nstandard library.\"</p>\n</li>\n</ul>",
        "id": 199436986,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591055470
    },
    {
        "content": "<p>The futures crate would delete its Stream definition and use <code>pub use core::stream::Stream</code> instead.</p>",
        "id": 199438277,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1591056932
    },
    {
        "content": "<blockquote>\n<p>currently researching how other languages (including Ruby, node, and some others) handle streams in the context of async/await</p>\n</blockquote>\n<p>The only other language I'm aware of that has an async iterable is C# with <code>IAsyncEnumerable </code>. node streams are very different - they just share the name.  Kotlin has flows, but  they seem more like C# generators and not async iterables. But then you can also just write <code>suspend () -&gt; Option&lt;T&gt;</code> as a type and have essentially the same.</p>",
        "id": 199447928,
        "sender_full_name": "Matthias247",
        "timestamp": 1591069777
    },
    {
        "content": "<p>Scala's FS2 (<a href=\"https://github.com/functional-streams-for-scala/fs2\">https://github.com/functional-streams-for-scala/fs2</a>) is stream-like, but given Scala has do-notation/for-comprehensions, it's less applicable for Rust IMO.</p>",
        "id": 199498697,
        "sender_full_name": "David Barsky",
        "timestamp": 1591107887
    },
    {
        "content": "<p>Node streams support <code>for await (const buf of stream) { ... }</code> through the <code>asyncIterator</code> Symbol: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator</a> -- adding this to Node streams was a recent-ish addition (proposed in 2016, believe stabilized in 2017ish)</p>",
        "id": 199522927,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591117543
    },
    {
        "content": "<p><code>asyncIterator</code> is a counterpart to the <code>iterator</code> symbol used for <code>for (const x in y) { ... }</code> syntax: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator</a></p>",
        "id": 199523062,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591117598
    },
    {
        "content": "<p>Oh ok. But these are not really the classical node Streams (<a href=\"https://nodejs.org/api/stream.html\">https://nodejs.org/api/stream.html</a>), which are more like buffered byte streams that originally were built for a callback based API. That's why  I assumed them to be very different</p>",
        "id": 199525661,
        "sender_full_name": "Matthias247",
        "timestamp": 1591118882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> node streams support both \"buffer mode\" and \"object mode\" -- the former is comparable to <code>Stream&lt;Item = Vec&lt;u8&gt;&gt;</code>, the latter to <code>Stream&lt;Item = T&gt;</code> -- both types can be iterated over using <code>for await</code> loops.</p>",
        "id": 199525900,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591119003
    },
    {
        "content": "<p>I mean, they're not <em>identical</em> to Rust streams -- but conceptually they're close enough that they seem worthy of mention.</p>",
        "id": 199526006,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591119048
    },
    {
        "content": "<p>Does \"object-mode\" still have built-in buffering?</p>",
        "id": 199526048,
        "sender_full_name": "Matthias247",
        "timestamp": 1591119074
    },
    {
        "content": "<p>buffering in Node is a complex topic, heh -- but object mode streams definitely also support backpressure</p>",
        "id": 199526208,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591119128
    },
    {
        "content": "<p>example of iteration using Node streams: <a href=\"https://nodejs.org/api/stream.html#stream_readable_symbol_asynciterator\">https://nodejs.org/api/stream.html#stream_readable_symbol_asynciterator</a></p>",
        "id": 199526276,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1591119174
    },
    {
        "content": "<p>if it's just an async iterable then you automatically have backpressure. And you also can never have \"an object being lost in the Streams buffer\". If the Stream is buffered by the implementation (like the byte-based node Streams are), then you explicitly need to care about backpressure</p>",
        "id": 199526713,
        "sender_full_name": "Matthias247",
        "timestamp": 1591119366
    },
    {
        "content": "<p>Still very much a work in progress - but I've started fleshing out the \"Future Possibilities\" section of the RFC based on conversations here and on external research <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/13\">https://github.com/rust-lang/wg-async-foundations/pull/13</a></p>",
        "id": 199572147,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591148135
    },
    {
        "content": "<p>Merged <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/13\">https://github.com/rust-lang/wg-async-foundations/pull/13</a> (after approval from Niko). Added a few \"to do\" items for the next iteration to <a href=\"https://github.com/rust-lang/wg-async-foundations/issues/12#issuecomment-639824377\">https://github.com/rust-lang/wg-async-foundations/issues/12#issuecomment-639824377</a></p>",
        "id": 199935353,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591391979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> so I was wondering</p>",
        "id": 200261119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722578
    },
    {
        "content": "<p>maybe we should take advantage of this time to discuss a bit the \"attached stream forward compatibility story\"?</p>",
        "id": 200261152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722596
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 200261206,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591722603
    },
    {
        "content": "<p>I'm not sure if anyone (cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>) has links to previous places this has been discussed</p>",
        "id": 200261243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722625
    },
    {
        "content": "<p>here is a <a href=\"https://hackmd.io/gHqlQBTiSrexwb-ppRPn-A\">hackmd document</a> we can use to take some notes</p>",
        "id": 200261269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722643
    },
    {
        "content": "<p>I can definitely see an issue if people feel they will need to re-write their streams to be attached streams when we add the functionality (if we don't add it right now)</p>",
        "id": 200261315,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591722666
    },
    {
        "content": "<p>well so</p>",
        "id": 200261410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722716
    },
    {
        "content": "<p>I think the one point is that it should be possible to write a bridge such that every stream becomes an attached stream</p>",
        "id": 200261506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722743
    },
    {
        "content": "<p>(side note, that reminds me though that we should discuss whether we can move the <code>fn next</code> combinator into the stream trait we stabilize)</p>",
        "id": 200261545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722767
    },
    {
        "content": "<p>gotcha</p>",
        "id": 200261554,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591722773
    },
    {
        "content": "<p>So I would say this</p>",
        "id": 200261852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722924
    },
    {
        "content": "<p>The <em>producer</em> side is not such a worry</p>",
        "id": 200261862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722931
    },
    {
        "content": "<p>The <em>consumer</em> side is a bit more interesting</p>",
        "id": 200261871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722937
    },
    {
        "content": "<p>You probably want to <em>consume</em> an attached stream if you can, to give your caller more flexibility</p>",
        "id": 200261898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722958
    },
    {
        "content": "<p>Notably if we had <code>for</code>-loop integration, that would be \"attached compatible\"</p>",
        "id": 200261962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722972
    },
    {
        "content": "<p>i.e., because it processes one item at a time before going to the next</p>",
        "id": 200261974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722982
    },
    {
        "content": "<p>but if you have instead a desire to spawn off parallel work for each item on the stream (as is, perhaps, common)</p>",
        "id": 200261996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591722995
    },
    {
        "content": "<p>then you would need a detached <code>Stream</code> anyhow</p>",
        "id": 200262009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723004
    },
    {
        "content": "<p>there may be coherence implications</p>",
        "id": 200262495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723281
    },
    {
        "content": "<p>what else should we discuss on this?</p>",
        "id": 200262503,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591723286
    },
    {
        "content": "<p>maybe we should prototype it a bit</p>",
        "id": 200262504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723286
    },
    {
        "content": "<p>can do</p>",
        "id": 200262515,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591723292
    },
    {
        "content": "<p>I think a key point is that the \"bridge impl\" must be added at the same time that <code>AttachedStream</code> is created</p>",
        "id": 200262605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723322
    },
    {
        "content": "<p>but that's ok</p>",
        "id": 200262613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723324
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 200262642,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591723335
    },
    {
        "content": "<p>(it's a breaking change to add blanket impls for a pre-existing trait)</p>",
        "id": 200262644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723335
    },
    {
        "content": "<p>in particular i'm wondering if there would be a problem because</p>",
        "id": 200262711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723359
    },
    {
        "content": "<p>maybe we have something like</p>",
        "id": 200262716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723362
    },
    {
        "content": "<p><code>impl&lt;S&gt; Stream for Box&lt;S&gt; where S: Stream</code></p>",
        "id": 200262738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723375
    },
    {
        "content": "<p>and</p>",
        "id": 200262741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723377
    },
    {
        "content": "<p><code>impl&lt;S&gt; AttachedStream for Box&lt;S&gt; where S: AttachedStream</code></p>",
        "id": 200262751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723385
    },
    {
        "content": "<p>which seems to offer two routes to implement <code>AttachedStream</code> for <code>Box&lt;impl Stream&gt;</code></p>",
        "id": 200262779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723399
    },
    {
        "content": "<p>of course they're equivalent, but the compiler doesn't know that</p>",
        "id": 200262852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723425
    },
    {
        "content": "<p>this perhaps suggests that one would want an explicit \"stream-to-attached stream\" conversion, or else a solution to this sort of problem</p>",
        "id": 200262960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723463
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 200262989,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591723477
    },
    {
        "content": "<p>the latter is appealing as this is a problem that arises in other cases</p>",
        "id": 200262994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723479
    },
    {
        "content": "<p>but of course .. it's tricky :)</p>",
        "id": 200263008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723484
    },
    {
        "content": "<p>(my goal here is just to try and catalog all the complications and considerations -- personally I still feel we should move forward, primarily because of the \"this all applies equally well to iterator\" situation)</p>",
        "id": 200263174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723561
    },
    {
        "content": "<p>(it would be interesting if there were any aspect that made it distinct from iterator in some way)</p>",
        "id": 200263237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723574
    },
    {
        "content": "<p>Sounds like some prototyping is indeed in order</p>",
        "id": 200263363,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591723648
    },
    {
        "content": "<p>I can work on that this week :)</p>",
        "id": 200263374,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591723652
    },
    {
        "content": "<p>OK, I put some notes at the end of <a href=\"https://hackmd.io/gHqlQBTiSrexwb-ppRPn-A\">the hackmd</a></p>",
        "id": 200263429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591723681
    },
    {
        "content": "<p>thank you!</p>",
        "id": 200263582,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1591723734
    },
    {
        "content": "<p>As a drive by comment; is an attached stream the moral equivalent of a streaming iterator? If so, donâ€™t you want to take advantage of calling it a streaming stream? ðŸ˜…</p>",
        "id": 200304674,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591745853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> niko's been using \"attached\" terminology for both iterator and stream lately, I think</p>",
        "id": 200305474,
        "sender_full_name": "tmandry",
        "timestamp": 1591746564
    },
    {
        "content": "<p>for that exact reason.. \"streaming stream\" is confusing :)</p>",
        "id": 200305494,
        "sender_full_name": "tmandry",
        "timestamp": 1591746582
    },
    {
        "content": "<p>But it is the same concept? Maybe Iâ€™ll have to ruminate on alternate terms that resonate more.</p>",
        "id": 200305962,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591747035
    },
    {
        "content": "<p>yeah the concepts are the same</p>",
        "id": 200306065,
        "sender_full_name": "tmandry",
        "timestamp": 1591747116
    },
    {
        "content": "<p>there was some discussion of the naming recently in <a href=\"#narrow/stream/187312-wg-async-foundations/topic/for-await.20loops\">https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations/topic/for-await.20loops</a></p>",
        "id": 200306071,
        "sender_full_name": "tmandry",
        "timestamp": 1591747122
    },
    {
        "content": "<p>I would also apply \"attached\" to async closures</p>",
        "id": 200423308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591799392
    },
    {
        "content": "<p>and I don't know that \"streaming\" makes sense there</p>",
        "id": 200423393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591799413
    },
    {
        "content": "<p>that said I still feel like there should be some terminology around whether the iterator/stream <em>transfers</em> its items or <em>lends</em> them</p>",
        "id": 200424013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591799661
    },
    {
        "content": "<p>hmm I wonder if that's alternative I was looking for? a <code>LendingIterator</code> and <code>LendingStream</code>?</p>",
        "id": 200424051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591799679
    },
    {
        "content": "<p>Anyway <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> saw your comment on GitHub -- It seems like the real question here is whether we are open to trying to bridge the (pre-existing and orthogonal) coherence challenges of having a \"bridged trait\". One other point is that I don't think we have a notation, given an attached/lending stream, for saying \"the item here does not use its <code>'a</code> parameter\".</p>",
        "id": 200425340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591800178
    },
    {
        "content": "<p>well, we do have a notation, but it's awkward</p>",
        "id": 200425355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591800183
    },
    {
        "content": "<p>i.e., you could write</p>",
        "id": 200425359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591800186
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">LendingStream</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200425402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591800207
    },
    {
        "content": "<p>here, the <code>'a</code> in <code>Item</code> is not in scope for <code>U</code>, so clearly this is not truly a lending stream</p>",
        "id": 200425465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591800235
    },
    {
        "content": "<p>(so if I'm confusing by changing terminology, I'm trying it on for size)</p>",
        "id": 200425521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591800245
    },
    {
        "content": "<p>anyway, I think that example alone is somewhat motivating to me -- i.e., it's a useful and important case to be able to talk about streams that are not lending without having to use extra type parameters and notations. Not to mention that it highlights that there are a number of smaller size ergonomic challenges around GAts we're going to have to overcome at some point.</p>",
        "id": 200425631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591800297
    },
    {
        "content": "<p>hmm. solving that does seem challenging</p>",
        "id": 200460302,
        "sender_full_name": "tmandry",
        "timestamp": 1591815266
    },
    {
        "content": "<p>I like <code>Lending</code></p>",
        "id": 200460328,
        "sender_full_name": "tmandry",
        "timestamp": 1591815282
    },
    {
        "content": "<p>I also like lending</p>",
        "id": 200473024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591821421
    },
    {
        "content": "<p>Work on the latest draft of the Async Streaming RFC is largely complete <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/15/files\">https://github.com/rust-lang/wg-async-foundations/pull/15/files</a></p>\n<p>The one remaining \"to do\" I have from the previous draft is \"more information on Generators\" - would anyone mind providing some context about this for me? What kind of information should be in the RFC?</p>",
        "id": 203142492,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594147364
    },
    {
        "content": "<p>Marked the PR as \"Ready to Review\"</p>",
        "id": 203151103,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594151280
    },
    {
        "content": "<p>hmm</p>",
        "id": 203202511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594155727
    },
    {
        "content": "<p>good question!</p>",
        "id": 203202516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594155729
    },
    {
        "content": "<p>I think we want to avoid going into too much detail here</p>",
        "id": 203202537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594155739
    },
    {
        "content": "<p>I think what I imagined though is something like saying:</p>",
        "id": 203202548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594155747
    },
    {
        "content": "<p>thinking out loud:</p>\n<p>we are likely going to want to support <em>something</em> like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// something of type Value</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>which after desugaring would result in a function like <code>fn foo() -&gt; impl Iterator&lt;Item = Value&gt;</code>, and similarly we are going to want</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Value</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>to get a <code>fn foo() -&gt; impl Stream&lt;Item = Value&gt;</code>, and we could then sketch briefly how that would work.</p>\n<p>We might then discuss what it would mean if had \"lending streams\" -- basically, from a syntax perspective, they'd be able to do <code>yield &amp;foo</code> -- but also the questions around backwards compatibility that it raises (which I at least haven't tried to write-up...).</p>\n<p>In particular:</p>\n<ul>\n<li>if we introduce <code>-&gt; Stream</code> first, we'd have to permit <code>LendingStream</code> later somehow (that's an interesting question how we could do that)</li>\n<li>if we wait and introduce <code>-&gt; LendingStream</code>, then we'd have to figure out how to convert a <code>LendingStream</code> into a <code>Stream</code> seamlessly</li>\n</ul>\n<p>But note that we <em>obviously</em> want one that works for <code>Iterator</code> (because that is a wide-spread abstraction), so the first approach is kind of a problem we'll have regardless... anyway ,don't have time to dig too deply just now</p>",
        "id": 203203041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594155996
    },
    {
        "content": "<p>but basically I would want to enumerate the various options we have here and how they interact with having a stable stream trait (versus waiting)</p>",
        "id": 203203066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594156016
    },
    {
        "content": "<p>(personally I have to say that I am <del>mildly</del> skeptical of blocking too much on lending-iterator and lending-stream, it seems like iterator has gotten us awfully far and I expect stream will too, and I'm worried that by blocking on things we'll wind up waiting an awfully long time...)</p>",
        "id": 203203745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594156377
    },
    {
        "content": "<p>thank you!</p>",
        "id": 203205016,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594157085
    },
    {
        "content": "<p>Added into the RFC draft!</p>",
        "id": 203206457,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594157814
    },
    {
        "content": "<p>Any objections to me </p>\n<p>1) Merging <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/15\">https://github.com/rust-lang/wg-async-foundations/pull/15</a><br>\n2) Once it is merged, opening the RFC on the rfcs repo? (though I might wait until Mon to do it so it doesn't get lost over the weekend, I'm expecting a lot of discussion on this one)</p>",
        "id": 203539249,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594404241
    },
    {
        "content": "<blockquote>\n<p>I'm expecting a lot of discussion</p>\n</blockquote>\n<p>I've already heard \"should we call it <code>Stream</code>\" <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 203541309,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594405333
    },
    {
        "content": "<p>Alright, I believe I've incorporated all the final feedback to <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/15\">https://github.com/rust-lang/wg-async-foundations/pull/15</a></p>",
        "id": 204141175,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594932724
    },
    {
        "content": "<p>(in some cases, I linked directly to the relevant discussion on the draft)</p>",
        "id": 204141222,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594932739
    },
    {
        "content": "<p>Any objections to me opening this up on rust/rfcs?</p>",
        "id": 204141261,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594932750
    },
    {
        "content": "<p>I'm fine with it! There's still some ongoing discussion around the <code>next</code> method, not sure if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wants to figure that out before opening or not.</p>",
        "id": 204152177,
        "sender_full_name": "tmandry",
        "timestamp": 1594939210
    },
    {
        "content": "<p>I'm not sure either :)</p>",
        "id": 204210767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995359
    },
    {
        "content": "<p>I think I dont' doubt the outcome but I'd still like to haev a crisper understanding of the tradeoffs/implications</p>",
        "id": 204210978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995472
    },
    {
        "content": "<p>What if we were to merge the PR as it is, then open a new issue and list anything that is blocking it from being opened as an RFC? (I'm unsure what is blocking it, but am open to suggestions)</p>",
        "id": 204244051,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595011772
    },
    {
        "content": "<p>and, if we can't think of any blockers, I will plan on opening the formal RFC on Tuesday :)</p>",
        "id": 204244206,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595011848
    },
    {
        "content": "<p>I'm fine with that. We might want to open an issue about <code>next</code> and pinning, and can discuss there if we think it should be further resolved before opening the RFC. (And maybe keep the technical discussion in the existing thread? I hate splitting discussions up like this)</p>",
        "id": 204244524,
        "sender_full_name": "tmandry",
        "timestamp": 1595012006
    },
    {
        "content": "<p>We can also keep the PR open and open an issue listing blockers for opening the RFC</p>",
        "id": 204244580,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595012034
    },
    {
        "content": "<p>I just want us to get concrete about what further work needs to be done before this can be opened to the community - it seems a bit nebulous atm</p>",
        "id": 204244668,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595012062
    },
    {
        "content": "<p>I will go ahead and create the issue and leave the PR open</p>",
        "id": 204244704,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595012083
    },
    {
        "content": "<p>fwiw, merging the PR is not an issue for me.. discussion can continue to happen in those places whether the PR is merged or not, and we can always open another PR</p>",
        "id": 204244795,
        "sender_full_name": "tmandry",
        "timestamp": 1595012127
    },
    {
        "content": "<p>ah - there is already a related issue</p>",
        "id": 204244861,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595012159
    },
    {
        "content": "<p>Alright - added a comment to <a href=\"https://github.com/rust-lang/wg-async-foundations/issues/12#issuecomment-660284455\">https://github.com/rust-lang/wg-async-foundations/issues/12#issuecomment-660284455</a></p>",
        "id": 204245090,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595012261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, etc, - could you please list any concerns you have that might block the RFC from being opened there?</p>",
        "id": 204245180,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595012290
    },
    {
        "content": "<p>(list them in the linked issue, that is)</p>",
        "id": 204245331,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595012372
    },
    {
        "content": "<p>done</p>",
        "id": 204264347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595022974
    },
    {
        "content": "<p>on this topic, should we make a (probably a wg-async-foundations/stream-trait stream ?</p>",
        "id": 204490298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595283212
    },
    {
        "content": "<p>seems like some of the conversation from the PR would be a better fit for Zulip</p>",
        "id": 204490315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595283234
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 204570070,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595348871
    },
    {
        "content": "<p>not sure I have the permissions to add a stream</p>",
        "id": 204570143,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595348892
    }
]