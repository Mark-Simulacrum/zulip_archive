[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So far I've attempted to change the lowering so that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">pattern</span><span class=\"o\">&gt;</span>: <span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>becomes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">__arg0</span>: <span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">pattern</span><span class=\"o\">&gt;</span>: <span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I did it this way so that I wouldn't need to handle more complex patterns like <code>async fn foo((x, y): (T, T)) {}</code> or even just <code>async fn foo(_: T) {}</code>. I've got that mostly working - I can look at the unpretty'd HIR and see it but I run into failures in <code>rustc/middle/liveness.rs</code> as the <code>Def</code>s associated with the new ids don't quite line up. For example, if I refer to the original name of the binding in the block after my inserted statements, then it has a <code>Def::Upvar</code> rather than <code>Def::Local</code> and <code>__arg0</code> doesn't have <code>Def::Uvpar</code>. </p>\n<p>I'm not sure if I'm just unaware of some helper functions that would make this easier or if I'm taking the wrong approach, I've not really looked at the HIR lowering before so it's all new.</p>",
        "id": 160295723,
        "sender_full_name": "davidtwco",
        "timestamp": 1552056659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> without looking at the code, I'd guess it's because you changed the parents of those ast nodes without changing how they get seen by the def collector</p>",
        "id": 160297470,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552057942
    },
    {
        "content": "<p>I'm not aware of any useful helper functions for this desugaring</p>",
        "id": 160297507,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552057983
    },
    {
        "content": "<p>Stuff like this generally requires some id-related hackery</p>",
        "id": 160297567,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552058040
    },
    {
        "content": "<p>I see, that's about what I expected.</p>",
        "id": 160298057,
        "sender_full_name": "davidtwco",
        "timestamp": 1552058403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> do you want to post your branch? It seems like you're headed in the right general direction</p>",
        "id": 160327241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552080514
    },
    {
        "content": "<p>I'll clean it up a bit and then push it to a branch.</p>",
        "id": 160362704,
        "sender_full_name": "davidtwco",
        "timestamp": 1552129538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Apologies for the delay here, I've pushed to <a href=\"https://github.com/davidtwco/rust/tree/issue-54716\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/issue-54716\">this branch</a>.</p>\n<p>I ended up realizing that I had to make the <code>rustc_resolve</code> logic and the def collector more aware of the arguments/new statements and that the way I was doing it made that pretty difficult. What I've done instead is introduce a new field to <code>ast::IsAsync</code> and then modify the arguments/block in a few places that it was needed. That got me further into the compiler than where I was before (after a long detour getting the new statements to have ids). It now errors in the MIR gen, but I suspect that is because of failures in type check. I've not had a chance to dig into that though.</p>\n<p>I'm not that pleased with the approach it takes. I can't think of a better way, it just feels like the amount of changes it has taken is way more than it should be and there should be somewhere I can make the change to the function's lowering and that would just propagate through the compiler unchanged - I guess that place is probably the parser, but I don't think we'd want that.</p>",
        "id": 160431780,
        "sender_full_name": "davidtwco",
        "timestamp": 1552250854
    },
    {
        "content": "<p>I'm happy to rip out all of it and take a completely different approach if what I've got there is in fact not great. I've learned a bunch from breaking the compiler with those changes.</p>",
        "id": 160431848,
        "sender_full_name": "davidtwco",
        "timestamp": 1552250948
    },
    {
        "content": "<p>When I originally made this topic Iâ€™d only modified the lowering code and was making everything there.</p>",
        "id": 160432085,
        "sender_full_name": "davidtwco",
        "timestamp": 1552251251
    },
    {
        "content": "<p>(also, unrelated to this issue, but I'd appreciate being added to the GitHub group for this WG so I can get pings about things)</p>",
        "id": 160467701,
        "sender_full_name": "davidtwco",
        "timestamp": 1552301095
    },
    {
        "content": "<blockquote>\n<p>(also, unrelated to this issue, but I'd appreciate being added to the GitHub group for this WG so I can get pings about things)</p>\n</blockquote>\n<p>done</p>",
        "id": 160509070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552332043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I agree that some kind of \"early change\" feels like all that should be needed</p>",
        "id": 160509088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552332056
    },
    {
        "content": "<p>I wonder if there is some way to alter the HIR lowering here</p>",
        "id": 160509105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552332065
    },
    {
        "content": "<p>or rather alter the HIR</p>",
        "id": 160509111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552332069
    },
    {
        "content": "<p>let me check out your branch</p>",
        "id": 160509122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552332077
    },
    {
        "content": "<p>Altering the HIR lowering is the first thing I tried, and that's still what I'm doing. I found that I also had to make changes to the def collector, collector (IIRC) and resolve to also get it to work, and that those changes weren't trivial as it was introducing whole new statements (which was affecting what got considered a <code>Def::Upvar(..)</code> for example), so I made the statements and arguments in the parser (storing them in the <code>IsAsync::Async</code> alongside the ids that were there previously) and then used those in the HIR lowering and other places.</p>",
        "id": 160509854,
        "sender_full_name": "davidtwco",
        "timestamp": 1552332543
    },
    {
        "content": "<p>Originally it was only the HIR lowering that I was modifying.</p>",
        "id": 160509908,
        "sender_full_name": "davidtwco",
        "timestamp": 1552332587
    },
    {
        "content": "<p>I see</p>",
        "id": 160510310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552332829
    },
    {
        "content": "<p>I think I've got this working.</p>",
        "id": 160570149,
        "sender_full_name": "davidtwco",
        "timestamp": 1552397818
    },
    {
        "content": "<p>Right now the drop order is reversed but they're being dropped at the right time.</p>",
        "id": 160570182,
        "sender_full_name": "davidtwco",
        "timestamp": 1552397841
    },
    {
        "content": "<p>So, the drops are now happening at the right time - that is, when polled, not when created - but the actual order isn't the same. It works for simple cases but when I throw a <code>_</code> binding into the mix it doesn't work. You can see <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1e6ba06ecb3b1f57be1c3613cbabc4c3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1e6ba06ecb3b1f57be1c3613cbabc4c3\">an example here</a>.</p>",
        "id": 160575998,
        "sender_full_name": "davidtwco",
        "timestamp": 1552401779
    },
    {
        "content": "<p>The actual result for the test I have <a href=\"https://gist.github.com/davidtwco/1e9c7a56630ab616029916188f564ae6#gistcomment-2860122\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/1e9c7a56630ab616029916188f564ae6#gistcomment-2860122\">is here</a> (GitHub is being funny and sometimes that returns a 404, it does exist). You can see the drops now happen after the function call but not in the same order as a regular function.</p>",
        "id": 160576938,
        "sender_full_name": "davidtwco",
        "timestamp": 1552402418
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/issues/59135\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59135\">#59135</a>.</p>",
        "id": 160586197,
        "sender_full_name": "davidtwco",
        "timestamp": 1552408702
    },
    {
        "content": "<p><strong>Summary</strong> (<a href=\"https://github.com/rust-lang/rust/issues/59135\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59135\">#59135</a>)<br>\nSince I've written a bunch above, here's a short summary of the current state of this:</p>\n<p>In an attempt to fix the drop order of <code>async fn</code> when there are unused arguments, I'm attempting to introduce replace the function arguments and introduce bindings that move the arguments into the inner closure, while preserving the patterns. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">pattern</span><span class=\"o\">&gt;</span>: <span class=\"o\">&lt;</span><span class=\"k\">type</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- dropped as you &quot;exit&quot; the fn</span>\n\n<span class=\"c1\">// ...becomes...</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">__arg0</span>: <span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">pattern</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- dropped as you &quot;exit&quot; the async block</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This was working (except for some extra diagnostic output on one test, see the first bullet point below), but after a rebase it regressed and I've been unable to fix it. There are currently three issues with the PR:</p>\n<ul>\n<li>Currently <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/async-fn-multiple-lifetimes.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/async-fn-multiple-lifetimes.rs\">this test</a> (<a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/async-fn-multiple-lifetimes.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/async-fn-multiple-lifetimes.stderr\">expected stderr</a>) is the only one that is still failing (at least, before I rebased and introduced the type inference error below). I've managed to fix a handful of the issues that the test originally had, but I'm left with <a href=\"https://gist.github.com/davidtwco/02f0fa124e193a12d6ff21f6b0d4e61e\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/02f0fa124e193a12d6ff21f6b0d4e61e\">this stderr diff</a>. I am unsure if this is correct and expected.</li>\n<li>There's also a pre-existing issue that meant I couldn't exactly match the drop-order of the equivalent <code>fn</code>. I mention that at the end of the PR description.</li>\n<li>When running the test, I get this error below. I've dug around for days and not really come up with much. This worked before the rebase, but might also be related to a recent change that removed the <code>&lt;ty&gt;</code> from <code>let &lt;pat&gt;: &lt;ty&gt; = __arg0;</code> because that broke when <code>&lt;ty&gt;</code> was <code>impl Trait</code>:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>error[E0282]: type annotations needed\n  --&gt; ./src/test/run-pass/issue-54716.rs:36:14\n   |\n36 | async fn foo(x: D, _y: D) {\n   | ^ cannot infer type\n</pre></div>\n\n\n<p>In brief, the change modifies the <code>ast::IsAsync::Async</code> variant to introduce a <code>Vec&lt;AsyncArgument&gt;</code> containing a ident (<code>__arg0</code>), a statement (<code>let &lt;pat&gt; = __arg0;</code>) and a argument (<code>__arg0: &lt;ty&gt;</code>) for each of the original arguments of the function. There are corresponding changes to the visitors so that these get given ids. There are also a few other smaller changes that let me keep track of whether an argument/statement was introduced by the <code>async fn</code> lowering or not - this can help with diagnostics as in one of the commits. </p>\n<p>This is then used in the HIR lowering to, well, lower to the HIR - replacing the arguments of the function with our generated arguments above, and prepending the statements to the body of the function before it is lowered into the generator. But it is also used in the def collector and in name resolution as those need to work out what should be <code>Def::Upvar(..)</code> and other things like that. I decided to modify the AST to keep the arg and stmt so I didn't need to repeat creating them all of those places. </p>\n<p>Originally I tried modifying only the HIR and keeping only ids in the AST (as was contained in <code>IsAsync</code> previously), but I was struggling to get this to work - I think it would be a preferable solution (I want to limit the amount of  AST changes), but getting the name resolution and def collection to work, given just the ids, was challenging - I found just adding the new statements before they would normally do their thing was much more straightforward.</p>",
        "id": 160792119,
        "sender_full_name": "davidtwco",
        "timestamp": 1552577647
    },
    {
        "content": "<p>I've deleted the messages before my summary as they're just confused ramblings of someone too deep into the type checker to make any sense.</p>",
        "id": 160792164,
        "sender_full_name": "davidtwco",
        "timestamp": 1552577684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  Does your changes assume that you will always have <code>async fn foo($pat: type) { ... }</code>? What if you only had <code>async fn foo($pat)</code> e.g. <code>async fn foo([x: u8, y])</code> ?</p>",
        "id": 160803867,
        "sender_full_name": "centril",
        "timestamp": 1552585184
    },
    {
        "content": "<p>could you work with the latter?</p>",
        "id": 160803879,
        "sender_full_name": "centril",
        "timestamp": 1552585192
    },
    {
        "content": "<p>I'm not sure about <code>async fn foo($pat)</code>.</p>",
        "id": 160803991,
        "sender_full_name": "davidtwco",
        "timestamp": 1552585259
    },
    {
        "content": "<p>I'll check when I'm next looking at this.</p>",
        "id": 160804053,
        "sender_full_name": "davidtwco",
        "timestamp": 1552585309
    },
    {
        "content": "<p>At the moment, I don't think it would work without the type being specified. But <code>async fn</code> is only available on the 2018 edition and anonymous parameters in trait methods aren't allowed 2018 as far as I know - so I don't think it could come up. There could be a case I'm not thinking of though.</p>",
        "id": 160804373,
        "sender_full_name": "davidtwco",
        "timestamp": 1552585544
    },
    {
        "content": "<p>IOW, I think you would need to infer the type of the pattern on the HIR given only the pattern and the type variables of the function (but also e.g. <code>async fn foo([x: impl Debug, y])</code>) and then lower to <code>_arg0: $inferred_type</code></p>",
        "id": 160804378,
        "sender_full_name": "centril",
        "timestamp": 1552585551
    },
    {
        "content": "<blockquote>\n<p>IOW, I think you would need to infer the type of the pattern on the HIR given only the pattern and the type variables of the function (but also e.g. <code>async fn foo([x: impl Debug, y])</code>) and then lower to <code>_arg0: $inferred_type</code></p>\n</blockquote>\n<p>I don't quite understand what you mean.</p>",
        "id": 160804463,
        "sender_full_name": "davidtwco",
        "timestamp": 1552585601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> It's not an issue of anonymous parameters, those were of form <code>fn foo($type)</code> not <code>fn foo($pat)</code> -- it's an issue of future language design</p>",
        "id": 160804466,
        "sender_full_name": "centril",
        "timestamp": 1552585603
    },
    {
        "content": "<p>I don't think there's anything in this change that would rule that out, but it wouldn't work with my implementation as it is currently, I think.</p>",
        "id": 160804514,
        "sender_full_name": "davidtwco",
        "timestamp": 1552585636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  sure; I'm only asking to be sure that it is not ruled out and that the impl can be changed to handle it</p>",
        "id": 160804556,
        "sender_full_name": "centril",
        "timestamp": 1552585666
    },
    {
        "content": "<blockquote>\n<p>I don't quite understand what you mean.</p>\n</blockquote>\n<p>Consider e.g. <code>async fn foo&lt;T&gt;((x: u8, Wrapping(y: T), z: impl Debug)) { ... }</code> -- you'd need to infer that the first argument is of type <code>(u8, Wrapping&lt;T&gt;, InferredDebugType)</code> such that you could then have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">__arg0</span>: <span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">InferredDebugType</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"p\">(</span><span class=\"n\">y</span>: <span class=\"nc\">T</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160804995,
        "sender_full_name": "centril",
        "timestamp": 1552585954
    },
    {
        "content": "<p>I think there would be many hurdles to getting that to work -- it feels like we have to rethink the HIR lowering around this point in any case. i.e., <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s existing PR is kind of stretching the current code to its limits in some sense.</p>",
        "id": 161162698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553010824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure; It's something I'd like to see supported eventually tho <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 161162788,
        "sender_full_name": "centril",
        "timestamp": 1553010887
    },
    {
        "content": "<p>Iâ€™m still looking for some feedback on the PR and with the issue that currently plagues it.</p>",
        "id": 161162942,
        "sender_full_name": "davidtwco",
        "timestamp": 1553011013
    },
    {
        "content": "<p>Yeah, I was just skimming it.</p>",
        "id": 161163057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553011083
    },
    {
        "content": "<p>I started with the tests, I'll take a look at the details</p>",
        "id": 161163075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553011097
    },
    {
        "content": "<p>I originally had the test make a direct comparison with the equivalent non-<code>async fn</code> which surfaced that the order wouldnâ€™t be the same.</p>",
        "id": 161163675,
        "sender_full_name": "davidtwco",
        "timestamp": 1553011463
    },
    {
        "content": "<blockquote>\n<p>I originally had the test make a direct comparison with the equivalent non-<code>async fn</code> which surfaced that the order wouldnâ€™t be the same.</p>\n</blockquote>\n<p>wait, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, say more?</p>",
        "id": 161168300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553014443
    },
    {
        "content": "<p>maybe I missed something</p>",
        "id": 161168314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553014449
    },
    {
        "content": "<p>where does the order differ?</p>",
        "id": 161168318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553014452
    },
    {
        "content": "<p>This <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=be39af1a58e5d430be1eb3c722cb1ec3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=be39af1a58e5d430be1eb3c722cb1ec3\">playground link</a> illustrates what I noticed.</p>",
        "id": 161168616,
        "sender_full_name": "davidtwco",
        "timestamp": 1553014642
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 161168620,
        "sender_full_name": "davidtwco",
        "timestamp": 1553014646
    },
    {
        "content": "<p>The PR still <del>fixes</del> fixed the fact that the parameters got dropped before polling, but the order wasn't what I expected.</p>",
        "id": 161168788,
        "sender_full_name": "davidtwco",
        "timestamp": 1553014744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> hmm that's...quite interesting</p>",
        "id": 161168952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553014816
    },
    {
        "content": "<p>I figured it was out-of-scope for this PR, and that just getting the drops to happen when polling was enough.</p>",
        "id": 161169037,
        "sender_full_name": "davidtwco",
        "timestamp": 1553014868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've re-opened the PR as <a href=\"https://github.com/rust-lang/rust/issues/59823\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59823\">#59823</a>.</p>",
        "id": 162942769,
        "sender_full_name": "davidtwco",
        "timestamp": 1554838364
    },
    {
        "content": "<p>(apparently you can't re-open PRs that you force-push too)</p>",
        "id": 162942778,
        "sender_full_name": "davidtwco",
        "timestamp": 1554838378
    },
    {
        "content": "<p>There was a single outstanding comment from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> on the previous version regarding naming in the test.</p>",
        "id": 162942822,
        "sender_full_name": "davidtwco",
        "timestamp": 1554838426
    },
    {
        "content": "<p>so, if I understand correctly, you are interested in the cause of the difference between <code>complex</code> and <code>complex2</code> ?</p>",
        "id": 162991728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892010
    },
    {
        "content": "<p>keep in mind that you never actually <em>run</em> the body of the closure that is capturing <code>__arg0</code>,<code>__arg1</code>, and <code>_arg2</code> in <code>complex2</code></p>",
        "id": 162991748,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892042
    },
    {
        "content": "<p>so the destructuring that occurs within its body is irrelevant. all that <em>is</em> relevant is that it captures all three arguments</p>",
        "id": 162991806,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892091
    },
    {
        "content": "<p>and then it subsequently drops them, when the closure is dropped, in reverse order: <code>__arg2</code> (\"_y\"), <code>__arg1</code> (which drops its components in-order, due to <a href=\"https://github.com/rust-lang/rust/issues/16493\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/16493\">#16493</a>), and <code>__arg0</code> (\"x\")</p>",
        "id": 162991950,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892213
    },
    {
        "content": "<p>In short, the reason you see a difference between <code>complex</code> and <code>complex2</code> is due to the combination of <a href=\"https://github.com/rust-lang/rust/issues/16493\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/16493\">#16493</a> (see also <a href=\"https://github.com/rust-lang/rust/issues/16661\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/16661\">#16661</a>) and the fact that <code>complex</code> is destructuring its second argument into <code>(a, _, _c)</code>.</p>",
        "id": 162992028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892305
    },
    {
        "content": "<p>The output for <code>complex</code> itself does remain interesting, in that we are trying to drop the arguments in reverse declaration order</p>",
        "id": 162992164,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892431
    },
    {
        "content": "<p>but we have this weird scenario where, because we have <strong>partially</strong> destructured the second argument, we end up having that middle \"_\" component left over</p>",
        "id": 162992223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892467
    },
    {
        "content": "<p>And thus you can observe where the whole (unnamed) second argument is being dropped, compared to the bindings it has been destructured into (<code>_c</code> and <code>a</code>).</p>",
        "id": 162992250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892509
    },
    {
        "content": "<p>I freely admit that if you had shown me this code ahead of time and warned me about the interactions here, I still would not have been able to predict the order we would get. I would like to believe I might have said \"it will be either [_y, _c, a, _, x] or it will be [_y, _, _c, a, x], but I do not know which one it will be.\"</p>",
        "id": 162992337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554892602
    },
    {
        "content": "<p>(Hmm and I do now note that RFC 1857 explicitly says it does not attempt to specify drop order for closure captures)</p>",
        "id": 162994374,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554894717
    },
    {
        "content": "<p>The playground link with the <code>complex</code> example is just something I stumbled upon dealing with the actual issue. It just shows that after this PR, the order for an <code>async fn</code> won't match the order for an <code>fn</code>, though (with this PR) now all parameters will be dropped when polled and not before.</p>",
        "id": 162996808,
        "sender_full_name": "davidtwco",
        "timestamp": 1554897065
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/63075213fa727fc639fd3b7303f1bc2821151bf5/src/test/run-pass/issue-54716.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/63075213fa727fc639fd3b7303f1bc2821151bf5/src/test/run-pass/issue-54716.rs\">This test</a> is the behaviour the PR changes.</p>",
        "id": 162996923,
        "sender_full_name": "davidtwco",
        "timestamp": 1554897154
    },
    {
        "content": "<p>Previously, on a line like this (line 107)...</p>\n<div class=\"codehilite\"><pre><span></span>assert_eq!(*af.borrow(), &amp;[Function, Val(&quot;_y&quot;), Val(&quot;x&quot;)]);\n</pre></div>\n\n\n<p>...the order that the function would return would be <code>&amp;[Val(\"_y\"), Function, Val(\"x\")];</code>.</p>",
        "id": 162996973,
        "sender_full_name": "davidtwco",
        "timestamp": 1554897200
    },
    {
        "content": "<p>This PR ensures that all the drops happen after the <code>Function</code> in the output of that test. Not that the order they are in after that <code>Function</code> will be the same as the equivalent <code>fn</code> (which is what the playground showed w/ the desugaring taking place manually).</p>",
        "id": 162997224,
        "sender_full_name": "davidtwco",
        "timestamp": 1554897284
    },
    {
        "content": "<p>Currently the PR fails the test due to a type inference error, but I had that working before when I desugared to <code>let &lt;pat&gt;: &lt;ty&gt; = __arg0;</code> but if <code>&lt;ty&gt;</code> was <code>impl Trait</code> then that didn't work, so I had to omit the <code>&lt;ty&gt;</code>, leading to the type inference error I've been unsuccessful in resolving.</p>",
        "id": 162997266,
        "sender_full_name": "davidtwco",
        "timestamp": 1554897334
    },
    {
        "content": "<blockquote>\n<p>The playground link with the <code>complex</code> example is just something I stumbled upon dealing with the actual issue. It just shows that after this PR, the order for an <code>async fn</code> won't match the order for an <code>fn</code>, though (with this PR) now all parameters will be dropped when polled and not before.</p>\n</blockquote>\n<p>I suppose the question is then, is there a way to further revise the desugaring so that the order for an <code>async fn</code> <em>will</em> match <code>fn</code>, even in the complex case?</p>",
        "id": 163003324,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554902446
    },
    {
        "content": "<p>hmm. let me think.</p>",
        "id": 163003363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554902492
    },
    {
        "content": "<p>There actually is another wrinkle here</p>",
        "id": 163003597,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554902654
    },
    {
        "content": "<p>I don't know about generators in particular, but for closures, RFC 1857 explicitly said that drop-order of captured variables remained unspecified</p>",
        "id": 163003631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554902687
    },
    {
        "content": "<p>of course we control the compiler etc, so we can ensure whatever order we need to support continues to work.</p>",
        "id": 163003806,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554902799
    },
    {
        "content": "<p>I will say this: I am starting to wonder, based on the broader discussion overall, if there might be value in a <em>lint</em> that detects functions that have any (sub)patterns in their parameters of the form: <code>_</code> or <code>ref x</code> where the type of the non-moved thing has drop glue.</p>",
        "id": 163004173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554903024
    },
    {
        "content": "<p>and just says: \"this is a weird thing to do! It may not behave in the manner you expect!\"</p>",
        "id": 163004196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554903042
    },
    {
        "content": "<p>if we had such a warning lint in place, I'd probably have fewer objections to proposals such as <a href=\"https://github.com/rust-lang/rust/issues/54716#issuecomment-480068731\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54716#issuecomment-480068731\">dropping unused params early</a></p>",
        "id": 163004412,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554903195
    },
    {
        "content": "<blockquote>\n<p>I suppose the question is then, is there a way to further revise the desugaring so that the order for an <code>async fn</code> <em>will</em> match <code>fn</code>, even in the complex case?</p>\n</blockquote>\n<p>I was happy to leave this for a follow-up once I got the <code>async fn</code> lowering to capture all the arguments. All that is blocking that is the type inference error that the PR runs into.</p>",
        "id": 163005387,
        "sender_full_name": "davidtwco",
        "timestamp": 1554903835
    },
    {
        "content": "<p>That's entirely sensible.</p>",
        "id": 163005813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554904148
    },
    {
        "content": "<p>(The follow-up also might not even be feasible anyway, so I definitely wouldn't want to block this PR based on it.)</p>",
        "id": 163005843,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554904180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm not sure if you saw, but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was suggesting previously that we could feature-gate unused arguments to <code>async fn</code></p>",
        "id": 163020494,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554913786
    },
    {
        "content": "<p>A warning/lint is an interesting alternative</p>",
        "id": 163020510,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554913802
    },
    {
        "content": "<p>that I think would go some ways towards avoiding the \"not ready yet\" perception</p>",
        "id": 163020577,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554913828
    },
    {
        "content": "<p>something like e.g. \"warning: drop order of unused arguments to <code>async fn</code> is unstable. consider removing unused argument or explicitly <code>drop</code>ping it\"</p>",
        "id": 163020681,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554913879
    },
    {
        "content": "<p>I'm a big fan of <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s suggestion to feature gate here</p>",
        "id": 163026700,
        "sender_full_name": "centril",
        "timestamp": 1554917890
    },
    {
        "content": "<p>I do like taking a more empiricist approach to this</p>",
        "id": 163026792,
        "sender_full_name": "centril",
        "timestamp": 1554917962
    },
    {
        "content": "<p>I hadnâ€™t seen the feature gate suggestion. Any of these options sound better than trying to rush to a decision here, IMO</p>",
        "id": 163029421,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554919521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> how do you feel about warn vs. error?</p>",
        "id": 163038643,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554925392
    },
    {
        "content": "<p>I think I'd prefer a warning in an effort to make <code>unimplemented!()</code> easier on folks and make the experience feel less \"unfinished\" by avoiding the suggestion of feature gates</p>",
        "id": 163038731,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554925448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> hmm; I think as long as we decide amongst ourselves that the drop order is not stable then that's fine by me</p>",
        "id": 163041366,
        "sender_full_name": "centril",
        "timestamp": 1554927267
    },
    {
        "content": "<p>but we need to have that agreement <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163041375,
        "sender_full_name": "centril",
        "timestamp": 1554927276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> sounds good-- want to raise the option on the github issue?</p>",
        "id": 163046277,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554930633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> Since it was your idea, can you do it? :P</p>",
        "id": 163046303,
        "sender_full_name": "centril",
        "timestamp": 1554930661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> lol sure</p>",
        "id": 163047029,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554931199
    },
    {
        "content": "<p>Spent a little bit of time looking into this type inference failure again today. I think my previous ideas about it were wrong and I was digging in the wrong place. I'm still not too sure what the issue <em>is</em> though. I've got <a href=\"https://gist.github.com/davidtwco/93718aa7149b452692e5b181db9b1ff7\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/93718aa7149b452692e5b181db9b1ff7\">this log output</a> from the <code>rustc::traits</code> module (which I'm not too familiar with), I think line 102 is where it starts trying to evaluate a predicate that it can't. But, I don't think that's related to the <code>let &lt;pat&gt; = __arg0;</code> statement that we insert which is what I thought was the problem before.</p>",
        "id": 163230060,
        "sender_full_name": "davidtwco",
        "timestamp": 1555105995
    },
    {
        "content": "<p>/me starts tearing hair out</p>",
        "id": 163660110,
        "sender_full_name": "eddyb",
        "timestamp": 1555600044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> do you like... want to elaborate? :P</p>",
        "id": 163660135,
        "sender_full_name": "centril",
        "timestamp": 1555600079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think <code>async fn</code> desugaring to <code>-&gt; impl Future { async { ... } }</code> <em>may</em> have been a mistake</p>",
        "id": 163660187,
        "sender_full_name": "eddyb",
        "timestamp": 1555600088
    },
    {
        "content": "<p>doesn't an <code>async</code> closure have the same issue as an <code>async fn</code>?</p>",
        "id": 163660255,
        "sender_full_name": "eddyb",
        "timestamp": 1555600147
    },
    {
        "content": "<p>wrt arguments?</p>",
        "id": 163660263,
        "sender_full_name": "eddyb",
        "timestamp": 1555600153
    },
    {
        "content": "<blockquote>\n<p>doesn't an <code>async</code> closure have the same issue as an <code>async fn</code>?</p>\n</blockquote>\n<p>I'm not sure, I haven't tried.</p>",
        "id": 163660286,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600182
    },
    {
        "content": "<p>so then I would just state-machine-transform the body of the function</p>",
        "id": 163660296,
        "sender_full_name": "eddyb",
        "timestamp": 1555600186
    },
    {
        "content": "<p>the problem is we need the function (or closure?) to return the generator wrapper</p>",
        "id": 163660359,
        "sender_full_name": "eddyb",
        "timestamp": 1555600207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think the easiest hack in the meanwhile is to just <em>know</em> that a function was an <code>async fn</code>, and so a direct generator children of it should capture its MIR arguments</p>",
        "id": 163660589,
        "sender_full_name": "eddyb",
        "timestamp": 1555600377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  maybe easier, but it also feels like a deeper hack since it is closer to MIR (\"the kernel\")</p>",
        "id": 163660655,
        "sender_full_name": "centril",
        "timestamp": 1555600428
    },
    {
        "content": "<blockquote>\n<p>so a direct generator children of it</p>\n</blockquote>\n<p>I don't think I understand what you mean by this.</p>",
        "id": 163660657,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600430
    },
    {
        "content": "<p>a generator that is a direct child</p>",
        "id": 163660721,
        "sender_full_name": "eddyb",
        "timestamp": 1555600448
    },
    {
        "content": "<p>Change how the closure capturing for generators work if the generator was from the lowering of an async function?</p>",
        "id": 163660728,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600453
    },
    {
        "content": "<p>basically, yes</p>",
        "id": 163660748,
        "sender_full_name": "eddyb",
        "timestamp": 1555600464
    },
    {
        "content": "<p>Alright, thanks.</p>",
        "id": 163660762,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> in the long term, I agree</p>",
        "id": 163660784,
        "sender_full_name": "eddyb",
        "timestamp": 1555600494
    },
    {
        "content": "<p>right</p>",
        "id": 163660863,
        "sender_full_name": "eddyb",
        "timestamp": 1555600551
    },
    {
        "content": "<p>I think the type inference issue that the current approach takes is resolvable though, it was working before. I'm just not that familiar with the type inference in the compiler.</p>",
        "id": 163660877,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600557
    },
    {
        "content": "<p>I'm a bit torn tbh, on one hand desugaring is good</p>",
        "id": 163660890,
        "sender_full_name": "eddyb",
        "timestamp": 1555600562
    },
    {
        "content": "<p>on the other hand, it's hard to make everything work</p>",
        "id": 163660944,
        "sender_full_name": "eddyb",
        "timestamp": 1555600573
    },
    {
        "content": "<p>inconsistency between def parenting in AST vs HIR bothers me to no end</p>",
        "id": 163661026,
        "sender_full_name": "eddyb",
        "timestamp": 1555600629
    },
    {
        "content": "<p>wait, locals don't have <code>DefId</code>s anymore,  do they?</p>",
        "id": 163661054,
        "sender_full_name": "eddyb",
        "timestamp": 1555600656
    },
    {
        "content": "<p>so what's actually hard about moving the patterns to the closure?</p>",
        "id": 163661068,
        "sender_full_name": "eddyb",
        "timestamp": 1555600666
    },
    {
        "content": "<p>and we can add an expression type to HIR to refer to arguments directly :P</p>",
        "id": 163661139,
        "sender_full_name": "eddyb",
        "timestamp": 1555600690
    },
    {
        "content": "<p><span aria-label=\"pick\" class=\"emoji emoji-26cf\" role=\"img\" title=\"pick\">:pick:</span> <span aria-label=\"pick\" class=\"emoji emoji-26cf\" role=\"img\" title=\"pick\">:pick:</span> <span aria-label=\"pick\" class=\"emoji emoji-26cf\" role=\"img\" title=\"pick\">:pick:</span></p>",
        "id": 163661191,
        "sender_full_name": "centril",
        "timestamp": 1555600736
    },
    {
        "content": "<p>It was complex because I couldn't just change the lowering, I also had to make some changes to name resolution so that things correctly got marked as <code>Def::Upvar(..)</code> - it was easiest to do that by just modifying the AST that we gave to lowering and name resolution with the replaced arguments and new statements. That and after I got it working, I started running into this type inference problem.</p>",
        "id": 163661193,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600736
    },
    {
        "content": "<p>oh heh, I see</p>",
        "id": 163661221,
        "sender_full_name": "eddyb",
        "timestamp": 1555600750
    },
    {
        "content": "<p>I also don't have a great deal of experience with making these sorts of changes to the compiler, so there may be something I'm missing.</p>",
        "id": 163661232,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600762
    },
    {
        "content": "<p>upvars are indeed problematic, but you should be able to change the resolution <em>after</em> <code>rustc_resolve</code> ran</p>",
        "id": 163661253,
        "sender_full_name": "eddyb",
        "timestamp": 1555600782
    },
    {
        "content": "<p>like, you can just create HIR that pretends it resolved to <code>Def::Upvar</code>. and modify the \"freevars\" map</p>",
        "id": 163661351,
        "sender_full_name": "eddyb",
        "timestamp": 1555600823
    },
    {
        "content": "<p>(frankly, we should just compute \"freevars\" aka \"upvars\" from a HIR pass, and be done with it)</p>",
        "id": 163661378,
        "sender_full_name": "eddyb",
        "timestamp": 1555600844
    },
    {
        "content": "<p>I don't know how I spent most of today messing around with <code>Static(Mutability)</code> -&gt; <code>Static</code> + <code>StaticMut</code> when I could've done the \"resolution\" thing that makes reasoning about all of this better</p>",
        "id": 163661412,
        "sender_full_name": "eddyb",
        "timestamp": 1555600883
    },
    {
        "content": "<blockquote>\n<p>upvars are indeed problematic, but you should be able to change the resolution <em>after</em> <code>rustc_resolve</code> ran</p>\n</blockquote>\n<p>I tried that at first, but I thought I'd need to have walked forward and updated the <code>Def</code> of anywhere that used a given variable so that it pointed to the local that I insert rather than the upvar.</p>",
        "id": 163661570,
        "sender_full_name": "davidtwco",
        "timestamp": 1555600990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> oh, I see, I was confused at first, heh</p>",
        "id": 163661630,
        "sender_full_name": "eddyb",
        "timestamp": 1555601028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> okay we need to fix upvars</p>",
        "id": 163661641,
        "sender_full_name": "eddyb",
        "timestamp": 1555601041
    },
    {
        "content": "<p>give me... a few weeks :P</p>",
        "id": 163661685,
        "sender_full_name": "eddyb",
        "timestamp": 1555601045
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> okay we need to fix upvars</p>\n</blockquote>\n<p>I'm more than happy to help and sink some time into this, I'd just need some pointers.</p>",
        "id": 163661724,
        "sender_full_name": "davidtwco",
        "timestamp": 1555601074
    },
    {
        "content": "<p>we can make it so <code>rustc_resolve</code> just doesn't compute this anymore, and anything looking at a mention of a local needs to figure out whether it's an upvar or not</p>",
        "id": 163661730,
        "sender_full_name": "eddyb",
        "timestamp": 1555601079
    },
    {
        "content": "<p>well, give me a few hours to do the thing I wanted to do today :P</p>",
        "id": 163661762,
        "sender_full_name": "eddyb",
        "timestamp": 1555601102
    },
    {
        "content": "<blockquote>\n<p>well, give me a few hours to do the thing I wanted to do today :P</p>\n</blockquote>\n<p>Sure thing, thanks.</p>",
        "id": 163661778,
        "sender_full_name": "davidtwco",
        "timestamp": 1555601112
    },
    {
        "content": "<p>then we can start thinking about simplifying name resolution results and tracking upvars post-HIR-lowering</p>",
        "id": 163661791,
        "sender_full_name": "eddyb",
        "timestamp": 1555601130
    },
    {
        "content": "<p>I guess we can compute them <em>during</em> HIR lowering, actually</p>",
        "id": 163661799,
        "sender_full_name": "eddyb",
        "timestamp": 1555601141
    },
    {
        "content": "<p>which would avoid us having to change every single place <code>Def::Upvar</code> is handled today</p>",
        "id": 163661877,
        "sender_full_name": "eddyb",
        "timestamp": 1555601183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so the refactor I was doing yesterday was <a href=\"https://github.com/rust-lang/rust/issues/60110\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60110\">#60110</a>, now let's get to the <em>actual</em> one I wanted :P</p>",
        "id": 163724738,
        "sender_full_name": "eddyb",
        "timestamp": 1555666791
    },
    {
        "content": "<p>Awesome.</p>",
        "id": 163725194,
        "sender_full_name": "davidtwco",
        "timestamp": 1555667454
    },
    {
        "content": "<p>What do you have in mind?</p>",
        "id": 163725282,
        "sender_full_name": "davidtwco",
        "timestamp": 1555667581
    },
    {
        "content": "<p>actually, I don't even need to do it this way, heh</p>",
        "id": 163728047,
        "sender_full_name": "eddyb",
        "timestamp": 1555671464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> Fixed all the failures I was having with this PR, <a href=\"https://github.com/rust-lang/rust/issues/59823\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59823\">#59823</a>, should be good to review (assuming Travis agrees, I'll find out in the morning).</p>",
        "id": 163827478,
        "sender_full_name": "davidtwco",
        "timestamp": 1555808951
    },
    {
        "content": "<p>Turns out Travis didn't agree, but it was only a mir-opt test, so should be fixed now.</p>",
        "id": 163843818,
        "sender_full_name": "davidtwco",
        "timestamp": 1555838784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> nice! Did you keep the overall desugaring approach, or try something different</p>",
        "id": 163926746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555958712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> itâ€™s the same as before, I just fixed a stupid mistake I had made.</p>",
        "id": 163927864,
        "sender_full_name": "davidtwco",
        "timestamp": 1555959429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> with the PR for this having landed, do you think itâ€™s worth trying to address that the drop order doesnâ€™t match the equivalent <code>fn</code> exactly?</p>",
        "id": 164058549,
        "sender_full_name": "davidtwco",
        "timestamp": 1556088757
    },
    {
        "content": "<p>what's the diff?</p>",
        "id": 164058563,
        "sender_full_name": "centril",
        "timestamp": 1556088785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bd42db518b05e7bbe797d503011acde5\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bd42db518b05e7bbe797d503011acde5\">playground</a></p>",
        "id": 164062104,
        "sender_full_name": "davidtwco",
        "timestamp": 1556093320
    },
    {
        "content": "<p>We fixed the \"might drop before polling\" issue, but it isn't exactly the same as the equivalent fn.</p>",
        "id": 164062183,
        "sender_full_name": "davidtwco",
        "timestamp": 1556093404
    },
    {
        "content": "<p>It's a result of desugaring into a closure body, the same <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=be39af1a58e5d430be1eb3c722cb1ec3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=be39af1a58e5d430be1eb3c722cb1ec3\">is visible when <code>fn</code> is compared with closures</a>, it just doesn't look as odd because more is different than just adding <code>async</code>.</p>",
        "id": 164062223,
        "sender_full_name": "davidtwco",
        "timestamp": 1556093500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so <code>_</code> is dropped after <code>x</code> for the <code>async</code> version in <code>bar</code> but the sync one is the reverse?</p>",
        "id": 164062929,
        "sender_full_name": "centril",
        "timestamp": 1556094435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> your second link seems to point to the wrong place</p>",
        "id": 164063053,
        "sender_full_name": "centril",
        "timestamp": 1556094585
    },
    {
        "content": "<p>Pretty much, I think it's a bit stranger with the last example:</p>\n<div class=\"codehilite\"><pre><span></span>async: `[Function, Val(&quot;_y&quot;), Val(&quot;_c&quot;), Val(&quot;a&quot;), Val(&quot;x&quot;), Val(&quot;_&quot;), Val(&quot;_&quot;)]`\n sync: `[Function, Val(&quot;_y&quot;), Val(&quot;_&quot;), Val(&quot;_c&quot;), Val(&quot;a&quot;), Val(&quot;_&quot;), Val(&quot;x&quot;)]`&#39;\n</pre></div>\n\n\n<p>I think it's only underscore bindings that differ.</p>",
        "id": 164063054,
        "sender_full_name": "davidtwco",
        "timestamp": 1556094589
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> your second link seems to point to the wrong place</p>\n</blockquote>\n<p>Fixed, thanks.</p>",
        "id": 164063125,
        "sender_full_name": "davidtwco",
        "timestamp": 1556094640
    },
    {
        "content": "<p>Thanks; neat explanations.</p>\n<p>I do think this should be fixed (or otherwise feature gated);<br>\nSeems like a half-measure otherwise and <code>_</code> seem just as likely as <code>_x</code></p>",
        "id": 164063438,
        "sender_full_name": "centril",
        "timestamp": 1556095019
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> who iirc thought <code>async { .. }</code> might not have been so good after all?</p>",
        "id": 164063464,
        "sender_full_name": "centril",
        "timestamp": 1556095053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I think he was coming around to the idea that desugaring was having some complex impacts</p>",
        "id": 164083150,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1556114729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yeah, we should make a new issue to discuss the remaining diff</p>",
        "id": 164083261,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1556114779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <a href=\"https://github.com/rust-lang/rust/issues/60236\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60236\">#60236</a></p>",
        "id": 164084233,
        "sender_full_name": "davidtwco",
        "timestamp": 1556115472
    },
    {
        "content": "<p>I wasn't sure whether that would be considered blocking or deferred.</p>",
        "id": 164084288,
        "sender_full_name": "davidtwco",
        "timestamp": 1556115486
    },
    {
        "content": "<p>I'm not sure either</p>",
        "id": 164084337,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1556115532
    },
    {
        "content": "<p>Seems worth discussing on-thread</p>",
        "id": 164084366,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1556115549
    },
    {
        "content": "<p>Very new here - but just out of interest, what is the PR that introduced the drop order issue? Just want to read on it</p>",
        "id": 164084895,
        "sender_full_name": "Nick Lawrence",
        "timestamp": 1556115928
    },
    {
        "content": "<p>Well, the drop order issue was a result of the way that <code>async fn</code> was desugared, not any particular PR (I guess outside of the implementation of <code>async fn</code> originally). <a href=\"https://github.com/rust-lang/rust/issues/54716\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54716\">#54716</a> is the original issue that reported the problem, <a href=\"https://github.com/rust-lang/rust/issues/59823\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59823\">#59823</a> resolved it.</p>",
        "id": 164085162,
        "sender_full_name": "davidtwco",
        "timestamp": 1556116083
    },
    {
        "content": "<p>awesome - ty</p>",
        "id": 164085297,
        "sender_full_name": "Nick Lawrence",
        "timestamp": 1556116197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ugh, I still haven't gotten around to trying out upvar simplification but I basically think we shouldn't do \"upvar analysis\" during name resolution, but move it to HIR lowering, which should allow correct handling</p>",
        "id": 164104977,
        "sender_full_name": "eddyb",
        "timestamp": 1556129338
    },
    {
        "content": "<p>and if we don't do any other crazy refactors like adding <code>hir::ExprKind::Local</code> or anything like that, it should be relatively self-contained? complexity would move from <code>rustc_resolve</code> to <code>rustc::hir::lowering</code></p>",
        "id": 164105056,
        "sender_full_name": "eddyb",
        "timestamp": 1556129398
    },
    {
        "content": "<p>and we can even store the \"upvar (capture) list\" in the <code>hir::ExprKind::Closure</code> instead of in a separate map, but that's a refactor we don't need to do now</p>",
        "id": 164105179,
        "sender_full_name": "eddyb",
        "timestamp": 1556129448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can you elaborate a bit more on what you mean?</p>",
        "id": 164285975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303084
    },
    {
        "content": "<p>I don't really understand your plan</p>",
        "id": 164285986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303091
    },
    {
        "content": "<p>But I was thinking that if we <em>do</em> want to match the drop order exactly -- and I think ultimately that's <em>probably</em> what we want -- that we could maybe do it by basically baking in more information onto the closure, making things a bit more special. This may intersect the <a class=\"stream\" data-stream-id=\"189812\" href=\"/#narrow/stream/189812-t-compiler.2Fwg-rfc-2229\">#t-compiler/wg-rfc-2229</a> work as well, I suppose.</p>",
        "id": 164286068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303141
    },
    {
        "content": "<p>so the difficulty here is that <code>rustc_resolve</code> is what decides the upvar sets</p>",
        "id": 164286070,
        "sender_full_name": "eddyb",
        "timestamp": 1556303144
    },
    {
        "content": "<p>(Though I think that the drop order from the desugaring we are doing now is the drop order that regular functions <strong>should have had</strong> =) but I guess that's water under the bridge)</p>",
        "id": 164286086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303161
    },
    {
        "content": "<p>but there's not really any good reason for that other than \"doing it when name resolution happens\" (which isn't <em>exactly</em> a good reason)</p>",
        "id": 164286150,
        "sender_full_name": "eddyb",
        "timestamp": 1556303184
    },
    {
        "content": "<p>if we move \"<code>Def::Local</code> -&gt; <code>Def::Upvar</code> conversion\" to <code>rustc::hir::lowering</code>, it'd be easier to perform the change that moves patterns into the closure</p>",
        "id": 164286209,
        "sender_full_name": "eddyb",
        "timestamp": 1556303243
    },
    {
        "content": "<p>well</p>",
        "id": 164286230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303259
    },
    {
        "content": "<p>or, ehm</p>",
        "id": 164286233,
        "sender_full_name": "eddyb",
        "timestamp": 1556303260
    },
    {
        "content": "<p>that's not what causes trouble, just the added <code>arg_i</code> variables?</p>",
        "id": 164286242,
        "sender_full_name": "eddyb",
        "timestamp": 1556303273
    },
    {
        "content": "<p>so one of the things we've been doing</p>",
        "id": 164286243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303274
    },
    {
        "content": "<p>/me starts being confused</p>",
        "id": 164286247,
        "sender_full_name": "eddyb",
        "timestamp": 1556303278
    },
    {
        "content": "<p>either way, I think <code>rustc_resolve</code> shouldn't have that upvar logic baked in</p>",
        "id": 164286310,
        "sender_full_name": "eddyb",
        "timestamp": 1556303299
    },
    {
        "content": "<p>and having explicit capture lists in <code>hir::ExprKind::Closure</code> seems cool to me</p>",
        "id": 164286333,
        "sender_full_name": "eddyb",
        "timestamp": 1556303319
    },
    {
        "content": "<p>perhaps so</p>",
        "id": 164286335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303320
    },
    {
        "content": "<p>(instead of a side table)</p>",
        "id": 164286343,
        "sender_full_name": "eddyb",
        "timestamp": 1556303327
    },
    {
        "content": "<blockquote>\n<p>and having explicit capture lists in <code>hir::ExprKind::Closure</code> seems cool to me</p>\n</blockquote>\n<p>yeah that seems fine</p>",
        "id": 164286353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303333
    },
    {
        "content": "<p>well</p>",
        "id": 164286362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303339
    },
    {
        "content": "<p>I think a key question is</p>",
        "id": 164286364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303341
    },
    {
        "content": "<p>just <em>why</em> does the fn drop order work out the way it does</p>",
        "id": 164286377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303347
    },
    {
        "content": "<p>and we could even use it to generate captures on unused variables</p>",
        "id": 164286380,
        "sender_full_name": "eddyb",
        "timestamp": 1556303350
    },
    {
        "content": "<p>but I guess the tl;dr of the fix I imagine is that we have to have <em>some</em> kind of explicit logic around this</p>",
        "id": 164286388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303361
    },
    {
        "content": "<p>which way? I'm not aware of anything very weird</p>",
        "id": 164286391,
        "sender_full_name": "eddyb",
        "timestamp": 1556303362
    },
    {
        "content": "<p>well, these do not behave the same, I think:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">DropOrder</span>::<span class=\"n\">Function</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar_sync</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">DropOrder</span>::<span class=\"n\">Function</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164286530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303449
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/60236\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60236\">https://github.com/rust-lang/rust/issues/60236</a> has more links</p>",
        "id": 164286540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303462
    },
    {
        "content": "<p>but that's <code>async fn</code>, which right now doesn't emulate the regular <code>fn</code> drop order at all?</p>",
        "id": 164286564,
        "sender_full_name": "eddyb",
        "timestamp": 1556303483
    },
    {
        "content": "<p>is that example incomplete?</p>",
        "id": 164286573,
        "sender_full_name": "eddyb",
        "timestamp": 1556303497
    },
    {
        "content": "<blockquote>\n<p>so <code>_</code> is dropped after <code>x</code> for the <code>async</code> version in <code>bar</code> but the sync one is the reverse?</p>\n</blockquote>",
        "id": 164286574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303497
    },
    {
        "content": "<p>so, async fn desugars to</p>",
        "id": 164286593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303515
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164286650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303529
    },
    {
        "content": "<p>wait did we already do  this?</p>",
        "id": 164286657,
        "sender_full_name": "eddyb",
        "timestamp": 1556303538
    },
    {
        "content": "<p>I sort of thought that's what functions did too</p>",
        "id": 164286660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303539
    },
    {
        "content": "<p>yes</p>",
        "id": 164286662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303541
    },
    {
        "content": "<p>OOOOH</p>",
        "id": 164286666,
        "sender_full_name": "eddyb",
        "timestamp": 1556303545
    },
    {
        "content": "<p>the problem is that it still doesn't <em>quite</em> match</p>",
        "id": 164286669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303547
    },
    {
        "content": "<p>yeah okay so the reason is probably that hack we added?</p>",
        "id": 164286686,
        "sender_full_name": "eddyb",
        "timestamp": 1556303561
    },
    {
        "content": "<p>actually oh I .. hmm</p>",
        "id": 164286693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303568
    },
    {
        "content": "<p>(oops)</p>",
        "id": 164286695,
        "sender_full_name": "eddyb",
        "timestamp": 1556303568
    },
    {
        "content": "<p>I wonder if it's the hack for \"single arugment patterns\"</p>",
        "id": 164286704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303574
    },
    {
        "content": "<p>in fns</p>",
        "id": 164286706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303575
    },
    {
        "content": "<p>to special-case <code>let x = ...;</code> including</p>",
        "id": 164286709,
        "sender_full_name": "eddyb",
        "timestamp": 1556303579
    },
    {
        "content": "<p>is that the hack you meant?</p>",
        "id": 164286710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303580
    },
    {
        "content": "<p>yeah</p>",
        "id": 164286714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303582
    },
    {
        "content": "<p>yeah that's what I mean</p>",
        "id": 164286716,
        "sender_full_name": "eddyb",
        "timestamp": 1556303583
    },
    {
        "content": "<p>I .. think that was an unintentional side-effect</p>",
        "id": 164286730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303589
    },
    {
        "content": "<p>that we stupidly didn't think about</p>",
        "id": 164286734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303593
    },
    {
        "content": "<p>wow</p>",
        "id": 164286741,
        "sender_full_name": "eddyb",
        "timestamp": 1556303597
    },
    {
        "content": "<p>\"doh\"</p>",
        "id": 164286746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303601
    },
    {
        "content": "<p>but it sounds like we're just not putting it into the right scope?</p>",
        "id": 164286752,
        "sender_full_name": "eddyb",
        "timestamp": 1556303605
    },
    {
        "content": "<p>one thing I regret from the MIR work, btw</p>",
        "id": 164286754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303607
    },
    {
        "content": "<p>was not taking the time to carefully write all this stuff out</p>",
        "id": 164286759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303614
    },
    {
        "content": "<p>and make sure we were happy with it :)</p>",
        "id": 164286765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303618
    },
    {
        "content": "<blockquote>\n<p>but it sounds like we're just not putting it into the right scope?</p>\n</blockquote>\n<p>you mean the <code>x</code> in the regular function case?</p>",
        "id": 164286775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303632
    },
    {
        "content": "<p>something something sufficiently advanced environment for writing a neat executable spec in :P</p>",
        "id": 164286784,
        "sender_full_name": "eddyb",
        "timestamp": 1556303643
    },
    {
        "content": "<p>yeah</p>",
        "id": 164286826,
        "sender_full_name": "eddyb",
        "timestamp": 1556303646
    },
    {
        "content": "<blockquote>\n<p>was not taking the time to carefully write all this stuff out</p>\n</blockquote>\n<p>to be fair, some people tried to, but we never really followed it all the way through</p>",
        "id": 164286829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303650
    },
    {
        "content": "<p>it sounds like it's getting dropped in the same scope <code>_</code> is?</p>",
        "id": 164286835,
        "sender_full_name": "eddyb",
        "timestamp": 1556303659
    },
    {
        "content": "<p>correct</p>",
        "id": 164286842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303663
    },
    {
        "content": "<p>I agree that it seems like a bug</p>",
        "id": 164286847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303668
    },
    {
        "content": "<p>but I'm not sure it's a bug we can fix =)</p>",
        "id": 164286849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303672
    },
    {
        "content": "<p>yeah that... should just not happen</p>",
        "id": 164286850,
        "sender_full_name": "eddyb",
        "timestamp": 1556303672
    },
    {
        "content": "<p>I'm surprised it can at all</p>",
        "id": 164286857,
        "sender_full_name": "eddyb",
        "timestamp": 1556303677
    },
    {
        "content": "<p>isn't some of this more recent? can you use <code>godbolt</code> to try versions? I guess that doesn't execute the code (so you'd have to rely on generating very simple assembly that e.g. stores to an atomic static)</p>",
        "id": 164286908,
        "sender_full_name": "eddyb",
        "timestamp": 1556303719
    },
    {
        "content": "<p>I guess I could try, I'm not doing anything else atm (other than playing with those silly diagrams)</p>",
        "id": 164286944,
        "sender_full_name": "eddyb",
        "timestamp": 1556303759
    },
    {
        "content": "<p>I don't know</p>",
        "id": 164287002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303782
    },
    {
        "content": "<p>worth finding out</p>",
        "id": 164287008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303787
    },
    {
        "content": "<p>I mean it <em>is</em> a pretty edge case</p>",
        "id": 164287011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556303793
    },
    {
        "content": "<p>wait, I'm confused</p>",
        "id": 164287494,
        "sender_full_name": "eddyb",
        "timestamp": 1556304197
    },
    {
        "content": "<p>you were saying <code>_</code> is dropped <em>before</em> the named variable?</p>",
        "id": 164287517,
        "sender_full_name": "eddyb",
        "timestamp": 1556304223
    },
    {
        "content": "<p>okay so there are several things interacting here</p>",
        "id": 164287618,
        "sender_full_name": "eddyb",
        "timestamp": 1556304297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay I've confirmed that named patterns don't matter <a href=\"https://godbolt.org/z/HIuWzU\" target=\"_blank\" title=\"https://godbolt.org/z/HIuWzU\">https://godbolt.org/z/HIuWzU</a></p>",
        "id": 164288010,
        "sender_full_name": "eddyb",
        "timestamp": 1556304593
    },
    {
        "content": "<p>frankly I can't get any order other than <code>2,1</code> to show up</p>",
        "id": 164288191,
        "sender_full_name": "eddyb",
        "timestamp": 1556304717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so I think the problem is with closure captures!</p>",
        "id": 164288248,
        "sender_full_name": "eddyb",
        "timestamp": 1556304727
    },
    {
        "content": "<p>try doing this instead:</p>",
        "id": 164288252,
        "sender_full_name": "eddyb",
        "timestamp": 1556304735
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg_N</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg_0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pat_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg_0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pat_N</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg_N</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164288303,
        "sender_full_name": "eddyb",
        "timestamp": 1556304788
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 164291187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556307167
    },
    {
        "content": "<blockquote>\n<p>you were saying <code>_</code> is dropped <em>before</em> the named variable?</p>\n</blockquote>\n<p>honestly i'm not sure <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, I didn't dig <em>that</em> deeply</p>",
        "id": 164291202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556307179
    },
    {
        "content": "<blockquote>\n<p>so I think the problem is with closure captures!</p>\n</blockquote>\n<p>OH</p>",
        "id": 164291222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556307207
    },
    {
        "content": "<p>you mean because of the order that struct fields are dropped</p>",
        "id": 164291228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556307214
    },
    {
        "content": "<p>and how that is different from <code>let</code></p>",
        "id": 164291234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556307220
    },
    {
        "content": "<p>wow, that'd be nifty</p>",
        "id": 164291236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556307224
    },
    {
        "content": "<p>When I spoke to you last <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, the desugaring for <code>async fn</code> to statements hadnâ€™t landed.</p>",
        "id": 164291306,
        "sender_full_name": "davidtwco",
        "timestamp": 1556307252
    },
    {
        "content": "<p>Iâ€™ll give that a shot.</p>",
        "id": 164291389,
        "sender_full_name": "davidtwco",
        "timestamp": 1556307328
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>                                /// Check that unused bindings are dropped after the function is polled.\n                                async fn foo_async(__arg0: D, __arg1: D)\n                                 -&gt;\n                                      ::std::future::from_generator(move ||\n                                                                        {\n                                                                            let _ =\n                                                                                __arg1;\n                                                                            let _ =\n                                                                                __arg0;\n                                                                            let x =\n                                                                                __arg0;\n                                                                            let _y =\n                                                                                __arg1;\n                                                                            x.1.borrow_mut().push(DropOrder::Function);\n                                                                        })\n</pre></div>\n\n\n<p>If this is what you meant, it doesn't seem to achieve the desired effect.</p>",
        "id": 164295881,
        "sender_full_name": "davidtwco",
        "timestamp": 1556311034
    },
    {
        "content": "<p>what effect is achieved? :)</p>",
        "id": 164297988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556312863
    },
    {
        "content": "<p>It failed on the same assert as before in the test from the issue, where there are only two parameters - <code>x</code> and <code>_</code>.</p>",
        "id": 164298108,
        "sender_full_name": "davidtwco",
        "timestamp": 1556312951
    },
    {
        "content": "<p>They were still the wrong order, so no effect?</p>",
        "id": 164298110,
        "sender_full_name": "davidtwco",
        "timestamp": 1556312957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> async: `[Function, Val(&quot;x&quot;), Val(&quot;_&quot;)]`\n  sync: `[Function, Val(&quot;_&quot;), Val(&quot;x&quot;)]`\n</pre></div>",
        "id": 164298291,
        "sender_full_name": "davidtwco",
        "timestamp": 1556313116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that order is the order in which things get dropped?</p>",
        "id": 164298994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556313728
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 164299000,
        "sender_full_name": "davidtwco",
        "timestamp": 1556313737
    },
    {
        "content": "<p>It's just the assert output but I renamed left and right to async and sync respectively.</p>",
        "id": 164299011,
        "sender_full_name": "davidtwco",
        "timestamp": 1556313755
    },
    {
        "content": "<p>and the example is <code>fn bar(x: Blah, _: ...)</code>?</p>",
        "id": 164299015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556313759
    },
    {
        "content": "<p>or is it <code>_, x</code></p>",
        "id": 164299022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556313767
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">DropOrder</span>::<span class=\"n\">Function</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar_sync</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">DropOrder</span>::<span class=\"n\">Function</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Comparison of the drop order of these functions.</p>",
        "id": 164299061,
        "sender_full_name": "davidtwco",
        "timestamp": 1556313805
    },
    {
        "content": "<p>yep, ok</p>",
        "id": 164299143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556313892
    },
    {
        "content": "<p>And here's the HIR for those functions (since before I posted the <code>foo</code> desugaring, though they're pretty similar):</p>\n<div class=\"codehilite\"><pre><span></span>                                /// Check that underscore patterns are dropped after the function is polled.\n                                async fn bar_async(__arg0: D, __arg1: D)\n                                 -&gt;\n                                      ::std::future::from_generator(move ||\n                                                                        {\n                                                                            let _ =\n                                                                                __arg1;\n                                                                            let _ =\n                                                                                __arg0;\n                                                                            let x =\n                                                                                __arg0;\n                                                                            let _ =\n                                                                                __arg1;\n                                                                            x.1.borrow_mut().push(DropOrder::Function);\n                                                                        })\n\n                                fn bar_sync(x: D,\n                                            _:\n                                                D) {\n                                                       x.1.borrow_mut().push(DropOrder::Function);\n                                                   }\n</pre></div>",
        "id": 164299258,
        "sender_full_name": "davidtwco",
        "timestamp": 1556314040
    },
    {
        "content": "<p>Interestingly, this appears to work <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=a59c6c8984cd38a94ddeb41a0d3252b6\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=a59c6c8984cd38a94ddeb41a0d3252b6\">for the simple case</a> when just experimenting w/ closures.</p>",
        "id": 164299574,
        "sender_full_name": "davidtwco",
        "timestamp": 1556314328
    },
    {
        "content": "<p>It could be that in one or two places I'm not visiting in the right order and that's why I don't see it locally.</p>",
        "id": 164299896,
        "sender_full_name": "davidtwco",
        "timestamp": 1556314667
    },
    {
        "content": "<blockquote>\n<p>Interestingly, this appears to work <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=a59c6c8984cd38a94ddeb41a0d3252b6\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=a59c6c8984cd38a94ddeb41a0d3252b6\">for the simple case</a> when just experimenting w/ closures.</p>\n</blockquote>\n<p>Scratch that, that test had the right order before too (because it is the reverse of what we have implemented, but the implementation can't be reversed w/out breaking the order for non-<code>_</code> bindings IIRC).</p>",
        "id": 164300081,
        "sender_full_name": "davidtwco",
        "timestamp": 1556314808
    },
    {
        "content": "<p>I don't think any \"simple\" change to our order will work because the more complex patterns aren't affected and still come up wrong.</p>",
        "id": 164300343,
        "sender_full_name": "davidtwco",
        "timestamp": 1556315075
    },
    {
        "content": "<p>Yeah -- I think that the <em>bug</em> (in some sense) is in the order that fn drop executes</p>",
        "id": 164300732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556315411
    },
    {
        "content": "<p>But I have to dig a bit to verify that hypothesis I guess</p>",
        "id": 164300741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556315419
    },
    {
        "content": "<p>But by \"bug\" I mean that it is not equivalent to a simple desugaring</p>",
        "id": 164300757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556315443
    },
    {
        "content": "<p>Though I sort of feel like it was \"meant\" to be</p>",
        "id": 164300775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556315460
    },
    {
        "content": "<p>It's a grey area =)</p>",
        "id": 164300791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556315479
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I have a theory as to what the problem is</p>",
        "id": 164558306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645680
    },
    {
        "content": "<p>I'm not sure if I communicated it to you</p>",
        "id": 164558311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645685
    },
    {
        "content": "<p>basically, when we do MIR construction, we actually desugar complex fn patterns in the same way you are doing manually</p>",
        "id": 164558338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645705
    },
    {
        "content": "<p>at least I think this is true, i'm looking for the code</p>",
        "id": 164558473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645790
    },
    {
        "content": "<p>anyway, I think we have an optimization around <code>fn fo(a: u32)</code> to avoid doing this, because it was adding an extra MIR parameter</p>",
        "id": 164558487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645806
    },
    {
        "content": "<p>but I think this affects the drop order</p>",
        "id": 164558495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645810
    },
    {
        "content": "<p>ah, yes, <a href=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L929-L954\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L929-L954\">right here is the code I am talking about</a></p>",
        "id": 164558561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645858
    },
    {
        "content": "<p>i.e., the problem here is that in the \"simple pattern case\" we wind up directly reusing the <a href=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L914\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L914\">MIR local for the argument</a></p>",
        "id": 164558690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645960
    },
    {
        "content": "<p>but in the \"complex pattern\" case we will <a href=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L948-L951\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L948-L951\">\"declare bindings\"</a> separately, and they will drop later</p>",
        "id": 164558710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556645985
    },
    {
        "content": "<p>this <em>perhaps</em> suggests that treating \"simple paths\" in the desugaring would work I think?</p>",
        "id": 164558795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646036
    },
    {
        "content": "<p>Treating simple paths in what way? I'm not sure I follow.</p>",
        "id": 164558827,
        "sender_full_name": "davidtwco",
        "timestamp": 1556646064
    },
    {
        "content": "<p>i.e., right now (iiuc) we desugar</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">DropOrder</span>::<span class=\"n\">Function</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span>fn bar(__arg0: D, __arg1: D) {\n  async move {\n    let x = __arg0; // moves __arg0 into x\n    let _ = __arg1; // no-op\n  }\n}\n</pre></div>",
        "id": 164558856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646093
    },
    {
        "content": "<p>as a result, we will first drop the inner binding <code>x</code>, then we will drop <code>__arg1</code></p>",
        "id": 164558866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646103
    },
    {
        "content": "<p>but in the normal fn case, we don't have the equivalent <code>let x = __arg0</code> because we \"optimized\" that case</p>",
        "id": 164558924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646125
    },
    {
        "content": "<p>and instead we map <code>x</code> directly to arg0</p>",
        "id": 164558933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646131
    },
    {
        "content": "<p>so maybe a desugaring like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// do not rename `x`, because it is a simple pattern, but rename `_` to `__arg1`</span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__arg1</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// first add a `let _ = X` for each argument `X`:</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// ensure this is captured</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"p\">;</span><span class=\"w\">      </span><span class=\"c1\">// and this</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// then, for each non-simple pattern, add `let PAT = ARG`:</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// no-op</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164559015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646215
    },
    {
        "content": "<p>I think that would have the intended drop order?</p>",
        "id": 164559023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646223
    },
    {
        "content": "<p>you might have to reverse the order of the first group of <code>let _ = ...</code> statements</p>",
        "id": 164559079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646247
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 164559113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556646293
    },
    {
        "content": "<p>What I was noticing was that for this:</p>\n<div class=\"codehilite\"><pre><span></span>fn bar(__arg0: D, __arg1: (D, D, D), __arg2: D) -&gt; impl Future {\n  future::from_generator(|| {\n    let x = __arg0;\n    let (a, _, _c) = __arg1;\n    let _y = __arg2;\n  })\n}\n</pre></div>\n\n\n<p>We would end up with MIR that looked something like this (apologies for the rough hand-written MIR-esque representation):</p>\n<div class=\"codehilite\"><pre><span></span>fn bar::{{closure}}(_1: [generator __arg0:D __arg1:(D,D,D) __arg2:D]) -&gt; () {\n_2: D &quot;x&quot;\n_3: D &quot;a&quot;\n_4: D &quot;_c&quot;\n_5: D &quot;_y&quot;\n\nbb0:\n    _2 = _1.1\n    _3 = _1.2.1\n    // missing local for the `_` binding\n    _4 = _1.2.3\n   _5 = _1.3\n\n...\n\nbb7:\n   drop(_2) -&gt; bb8\n\nbb8:\n   drop(_3) -&gt; bb9\n\n// no drop for the underscore binding\n\nbb9:\n   drop(_4) -&gt; bb10\n\nbb10:\n   drop(_5) -&gt; bb11\n\n// underscore binding dropped with the rest of the generator\n\nbb11:\n   drop(_1)\n}\n</pre></div>",
        "id": 164559413,
        "sender_full_name": "davidtwco",
        "timestamp": 1556646544
    },
    {
        "content": "<p>(I just got back home so I'm currently making dinner and putting some washing on, so slightly preoccupied)</p>",
        "id": 164559449,
        "sender_full_name": "davidtwco",
        "timestamp": 1556646571
    },
    {
        "content": "<p>So, I've fixed one of the order differences. I'm not yet sure why it is only one of them.</p>\n<p>With this signature:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_c</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_y</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>On nightly currently:</p>\n<div class=\"codehilite\"><pre><span></span> async: `[Function, Val(&quot;_y&quot;), Val(&quot;_c&quot;), Val(&quot;a&quot;), Val(&quot;x&quot;), Val(&quot;_&quot;), Val(&quot;_&quot;)]`\n  sync: `[Function, Val(&quot;_y&quot;), Val(&quot;_&quot;), Val(&quot;_c&quot;), Val(&quot;a&quot;), Val(&quot;_&quot;), Val(&quot;x&quot;)]`\n</pre></div>\n\n\n<p>Locally, after making some changes:</p>\n<div class=\"codehilite\"><pre><span></span> async: `[Function, Val(&quot;_y&quot;), Val(&quot;_&quot;), Val(&quot;_c&quot;), Val(&quot;_&quot;), Val(&quot;a&quot;), Val(&quot;x&quot;)]`,\n  sync: `[Function, Val(&quot;_y&quot;), Val(&quot;_&quot;), Val(&quot;_c&quot;), Val(&quot;a&quot;), Val(&quot;_&quot;), Val(&quot;x&quot;)]`\n</pre></div>",
        "id": 164575946,
        "sender_full_name": "davidtwco",
        "timestamp": 1556657766
    },
    {
        "content": "<p>(I've not ran any of the other tests, just using a reduced test case with just the <code>foobar</code> function for now).</p>",
        "id": 164576400,
        "sender_full_name": "davidtwco",
        "timestamp": 1556658058
    },
    {
        "content": "<p>When I look at the drop order in the MIR, then the drop terminators happen in the expected order (now, after adding drops for the <code>_</code> bindings), and that works for the <code>_</code> binding that isn't in a more complex pattern, but not the <code>_</code> in the tuple, even though drop terminator for <code>_</code> (in the same scope) is before <code>a</code>.</p>\n<p>Though, the downsides with this approach are that it just changes the desugaring slightly to get closer to the <code>fn</code> order, it doesn't do anything to try unify the ordering and that it also wouldn't work if you desugared the function manually (which I think is fine?).</p>",
        "id": 164578243,
        "sender_full_name": "davidtwco",
        "timestamp": 1556659473
    },
    {
        "content": "<p>Interestingly, the same thing appears to happen for the <code>x</code>, <code>_</code> case even though there's no complex pattern in that. I don't have time to investigate any further tonight, but I think this is still reasonable progress.</p>",
        "id": 164579900,
        "sender_full_name": "davidtwco",
        "timestamp": 1556660984
    },
    {
        "content": "<p>OK -- did what I wrote make any sense to you, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>? If I'm right (and I might not be), we ought to be able to match all cases by special-casing \"simple patterns\"</p>",
        "id": 164581752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556662826
    },
    {
        "content": "<p>I should run some experiments</p>",
        "id": 164581754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556662829
    },
    {
        "content": "<p>I havenâ€™t tried it, but I should be able to pretty quickly tomorrow.</p>",
        "id": 164581897,
        "sender_full_name": "davidtwco",
        "timestamp": 1556662949
    },
    {
        "content": "<p>I wasnâ€™t expecting <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b5df858d93ea8551e0f77125bb26def6\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b5df858d93ea8551e0f77125bb26def6\">this case</a> to work, but given that it does, youâ€™re probably right and your solution would do it.</p>",
        "id": 164582412,
        "sender_full_name": "davidtwco",
        "timestamp": 1556663396
    },
    {
        "content": "<blockquote>\n<p>adding drops for the <code>_</code> bindings</p>\n</blockquote>\n<p>Doesn't this break something like <code>&amp;(_,): &amp;(String,)</code>?</p>",
        "id": 164582660,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556663633
    },
    {
        "content": "<blockquote>\n<p>Doesn't this break something like <code>&amp;(_,): &amp;(String,)</code>?</p>\n</blockquote>\n<p>I've ditched that approach in favor of <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s suggestion.</p>\n<blockquote>\n<p>OK -- did what I wrote make any sense to you, <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span>? If I'm right (and I might not be), we ought to be able to match all cases by special-casing \"simple patterns\"</p>\n</blockquote>\n<p>So, I've implemented this. It fixes the simple case where you've got <code>async fn bar(x: D, _: D)</code>, but not the more complex <code>foobar</code> case which desugars to:</p>\n<div class=\"codehilite\"><pre><span></span>                                async fn foobar_async(x: D, __arg1: (D, D, D),\n                                                      __arg2: D, _y: D)\n                                 -&gt;\n                                      ::std::future::from_generator(move ||\n                                                                        {\n                                                                            let _ =\n                                                                                _y;\n                                                                            let _ =\n                                                                                __arg2;\n                                                                            let _ =\n                                                                                __arg1;\n                                                                            let _ =\n                                                                                x;\n                                                                            let (a,\n                                                                                 _,\n                                                                                 _c) =\n                                                                                __arg1;\n                                                                            let _ =\n                                                                                __arg2;\n                                                                            x.1.borrow_mut().push(DropOrder::Function);\n                                                                        })\n</pre></div>\n\n\n<p>and gives the result:</p>\n<div class=\"codehilite\"><pre><span></span> async: `[Function, Val(&quot;_c&quot;), Val(&quot;a&quot;), Val(&quot;_y&quot;), Val(&quot;_&quot;), Val(&quot;_&quot;), Val(&quot;x&quot;)]`\n  sync: `[Function, Val(&quot;_y&quot;), Val(&quot;_&quot;), Val(&quot;_c&quot;), Val(&quot;a&quot;), Val(&quot;_&quot;), Val(&quot;x&quot;)]`\n</pre></div>",
        "id": 164585047,
        "sender_full_name": "davidtwco",
        "timestamp": 1556665767
    },
    {
        "content": "<p>what's the original again?</p>",
        "id": 164585119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556665830
    },
    {
        "content": "<p>hmm</p>",
        "id": 164585137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556665861
    },
    {
        "content": "<p>I guess my thesis is wrong when it comes to sync drop order</p>",
        "id": 164585170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556665919
    },
    {
        "content": "<p>I'm trying now with the order of the <code>let &lt;pat&gt; = &lt;init&gt;</code> statements reversed just to see what that does.</p>",
        "id": 164585222,
        "sender_full_name": "davidtwco",
        "timestamp": 1556665942
    },
    {
        "content": "<p>No difference.</p>",
        "id": 164585330,
        "sender_full_name": "davidtwco",
        "timestamp": 1556666054
    },
    {
        "content": "<p>I assume the order is determined only by the <code>let _ = &lt;init&gt;;</code> statements.</p>",
        "id": 164585342,
        "sender_full_name": "davidtwco",
        "timestamp": 1556666078
    },
    {
        "content": "<p>Anyway, it's late here, I'll implement any ideas you have sometime tomorrow.</p>",
        "id": 164585376,
        "sender_full_name": "davidtwco",
        "timestamp": 1556666112
    },
    {
        "content": "<p>First, let me check. This function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>drops in the order:</p>\n<ul>\n<li><code>y</code></li>\n<li>arg2</li>\n<li><code>c</code>, <code>a</code>, arg1</li>\n<li><code>x</code></li>\n</ul>",
        "id": 164610638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556701935
    },
    {
        "content": "<p>this suggests that the order is the following:</p>\n<ul>\n<li>in reverse of the arguments:<ul>\n<li>drop bindings from within the pattern (in reverse order)</li>\n<li>then drop the argument (if not fully bound)</li>\n</ul>\n</li>\n</ul>",
        "id": 164610654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556701980
    },
    {
        "content": "<p>if so, then I guess we can desugar to match this order like so:</p>",
        "id": 164610731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702049
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// in order over arguments:</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__arg_i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg_i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pattern_i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg_i</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>i.e.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__arg0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__arg2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg2</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__arg3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg3</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>we could then go further and special case \"simple\" patterns, which is really an optimization I think, so that we wind up with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">__arg2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__arg2</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164610870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702237
    },
    {
        "content": "<p>we ought to be able to test this theory on play ;)</p>",
        "id": 164610872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702245
    },
    {
        "content": "<p>re-reading the code I cited earlier, this makes sense. The MIR lowering for arguments:</p>\n<ul>\n<li>first registers the internal \"arugment local\" (equivalent of <code>__arg_i</code>) for drop <a href=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L918-L923\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L918-L923\">here</a></li>\n</ul>",
        "id": 164610961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702353
    },
    {
        "content": "<ul>\n<li>it then <a href=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L948-L951\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/862a8784ab6fdc799911487a30f3211b3a5c1945/src/librustc_mir/build/mod.rs#L948-L951\">optionally invokes <code>declare_bindings</code></a>, which will register the internal bindings for drop</li>\n</ul>",
        "id": 164610979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702393
    },
    {
        "content": "<p>when you register things for drop, they wind up being dropped in the reverse order of which they were registered</p>",
        "id": 164611040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> -- if you get a chance, see if that desugaring works better in play</p>",
        "id": 164611051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556702441
    },
    {
        "content": "<p>I'll give that a go in a bit, thanks.</p>",
        "id": 164611137,
        "sender_full_name": "davidtwco",
        "timestamp": 1556702562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think that worked, I modified my PR (it was quicker than using the playground after how I'd modified it last night) and it passed the tests. Will put a PR up shortly.</p>",
        "id": 164619026,
        "sender_full_name": "davidtwco",
        "timestamp": 1556712915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> even better, that drop order (i.e., for fns) is...kind of logical.</p>",
        "id": 164619207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556713156
    },
    {
        "content": "<p>We should document it ;)</p>",
        "id": 164619211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556713160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/60437\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60437\">#60437</a></p>",
        "id": 164621053,
        "sender_full_name": "davidtwco",
        "timestamp": 1556715320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> btw, I've not looked closely at the desugaring bits, but these <code>__arg3</code> etc variables -- are they \"visible\" to users? Or are we using hygiene to hide them?</p>",
        "id": 164621130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556715424
    },
    {
        "content": "<p>I'm not sure. I haven't done anything specific to hide them.</p>",
        "id": 164621165,
        "sender_full_name": "davidtwco",
        "timestamp": 1556715457
    },
    {
        "content": "<p>I figured as they were being moved into the pattern that it wouldn't be usable, but they might be visible in that the error you get when attempting to use them isn't \"this doesn't exist\".</p>",
        "id": 164621222,
        "sender_full_name": "davidtwco",
        "timestamp": 1556715493
    },
    {
        "content": "<p>I guess with <code>_</code> patterns they are still usable</p>",
        "id": 164621347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556715628
    },
    {
        "content": "<p>Can you write a test and maybe file a bug? Seems like something we should try to fix ;)</p>",
        "id": 164621365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556715662
    },
    {
        "content": "<p>(I can do it)</p>",
        "id": 164621735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716056
    },
    {
        "content": "<blockquote>\n<p>__arg variables from async fn desugaring are accessible to the user <a href=\"https://github.com/rust-lang/rust/issues/60438\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60438\">#60438</a></p>\n</blockquote>",
        "id": 164621825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716145
    },
    {
        "content": "<p>I <em>think</em> we should be able to use hygiene here to hide these <code>__arg</code> variables, but I'm not entirely sure how to do that.</p>",
        "id": 164621827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> -- any tips for how we can create a <code>__arg</code> variable (during parsing, I believe) that will not be nameable by the user? Is the \"gensym\" method the thing we want?</p>",
        "id": 164621844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> may also have thoughts</p>",
        "id": 164621850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716201
    },
    {
        "content": "<p>yeah, <code>gensym</code>, but ideally you wouldn't go as far back as parsing, ugh</p>",
        "id": 164621924,
        "sender_full_name": "eddyb",
        "timestamp": 1556716242
    },
    {
        "content": "<p>We don't introduce it during parsing, we just construct it there otherwise we'd need to construct the same arg/stmt in a few places. It's still not ideal.</p>",
        "id": 164621958,
        "sender_full_name": "davidtwco",
        "timestamp": 1556716284
    },
    {
        "content": "<p>I'm accumulating too many refactors to do, but we should seriously consider creating <code>Def::Upvar</code> out of <code>Def::Local</code> during HIR lowering, so much less of this needs to be handled by <code>rustc_resolve</code></p>",
        "id": 164621961,
        "sender_full_name": "eddyb",
        "timestamp": 1556716287
    },
    {
        "content": "<p>I definitely agree that we clearly need some refactoring here :)</p>",
        "id": 164622047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716367
    },
    {
        "content": "<p>That is, this feels like it was much harder than it should have been</p>",
        "id": 164622061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716383
    },
    {
        "content": "<p>I also need some prioritization, I started something a week ago and it blew out of control</p>",
        "id": 164622069,
        "sender_full_name": "eddyb",
        "timestamp": 1556716387
    },
    {
        "content": "<blockquote>\n<p>We don't introduce it during parsing, we just construct it there otherwise we'd need to construct the same arg/stmt in a few places. It's still not ideal.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> -- have you seen gensym?</p>",
        "id": 164622076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556716404
    },
    {
        "content": "<p>I'm compiling a version with it now.</p>",
        "id": 164622090,
        "sender_full_name": "davidtwco",
        "timestamp": 1556716421
    },
    {
        "content": "<p>and it overlaps enough with this <code>Def::Upvar</code> thing that I wanted to finish that first, but maybe I should've switched gears</p>",
        "id": 164622096,
        "sender_full_name": "eddyb",
        "timestamp": 1556716426
    },
    {
        "content": "<p>So, this stops users using it, but there's still a suggestion.</p>\n<div class=\"codehilite\"><pre><span></span>error[E0425]: cannot find value `__arg1` in this scope\n  --&gt; /home/david/projects/rust/rust2/src/test/ui/issue-60236.rs:21:16\n   |\nLL |     assert_eq!(__arg1, (1, 2, 3));\n   |                ^^^^^^ help: a local variable with a similar name exists: `__arg1`\n\nerror[E0425]: cannot find value `__arg2` in this scope\n  --&gt; /home/david/projects/rust/rust2/src/test/ui/issue-60236.rs:22:16\n   |\nLL |     assert_eq!(__arg2, 4);\n   |                ^^^^^^ help: a local variable with a similar name exists: `__arg2`\n</pre></div>",
        "id": 164622162,
        "sender_full_name": "davidtwco",
        "timestamp": 1556716480
    },
    {
        "content": "<p>lol</p>",
        "id": 164622172,
        "sender_full_name": "eddyb",
        "timestamp": 1556716497
    },
    {
        "content": "<p>IMO that suggestion shouldn't fire on gensyms</p>",
        "id": 164622188,
        "sender_full_name": "eddyb",
        "timestamp": 1556716508
    },
    {
        "content": "<p>I'll keep it and the suggestion fix can be a follow-up.</p>",
        "id": 164622192,
        "sender_full_name": "davidtwco",
        "timestamp": 1556716513
    },
    {
        "content": "<p>Unless it's really quick to fix I suppose, I should look.</p>",
        "id": 164622203,
        "sender_full_name": "davidtwco",
        "timestamp": 1556716529
    },
    {
        "content": "<p>yeah it should just be <code>if !name.is_gensym()</code> around the \"edit distance\" comparison</p>",
        "id": 164622218,
        "sender_full_name": "eddyb",
        "timestamp": 1556716559
    },
    {
        "content": "<p>also, this probably means it fires right now on <code>_1</code> and <code>use Foo as _;</code></p>",
        "id": 164622283,
        "sender_full_name": "eddyb",
        "timestamp": 1556716585
    },
    {
        "content": "<p>if that's the closest name</p>",
        "id": 164622290,
        "sender_full_name": "eddyb",
        "timestamp": 1556716593
    },
    {
        "content": "<p>Alright, that's fixed. Will include in the PR.</p>",
        "id": 164622826,
        "sender_full_name": "davidtwco",
        "timestamp": 1556717201
    },
    {
        "content": "<p>Nice job</p>",
        "id": 164624137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556718418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Just updated it.</p>",
        "id": 164624246,
        "sender_full_name": "davidtwco",
        "timestamp": 1556718539
    },
    {
        "content": "<p>And fixed previous comments.</p>",
        "id": 164624254,
        "sender_full_name": "davidtwco",
        "timestamp": 1556718544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> looks good, though the test looks a bit more complex than necessary. But I guess the \"arc-wake\" infra might be useful for other tests.</p>",
        "id": 164624946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556719080
    },
    {
        "content": "<p>I suppose it is. I wasn't really thinking about it, I just took the existing test and deleted parts.</p>",
        "id": 164625028,
        "sender_full_name": "davidtwco",
        "timestamp": 1556719122
    },
    {
        "content": "<p>I can simplify it if you want.</p>",
        "id": 164625033,
        "sender_full_name": "davidtwco",
        "timestamp": 1556719126
    },
    {
        "content": "<p>I assume <code>ArcWake</code> will only be useful in <code>run-pass</code> anyway.</p>",
        "id": 164625056,
        "sender_full_name": "davidtwco",
        "timestamp": 1556719156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> Yeah, let's simplify. Also, I'd probably prefer for all the tests to live in <code>src/test/ui/async-await</code> (including the run-pass test!) but I don't know if we've reached a conclusion on that yet.</p>",
        "id": 164625151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556719221
    },
    {
        "content": "<p>i.e., I think we're still separating run-pass tests sometimes? I remember we went back and forth</p>",
        "id": 164625168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556719257
    },
    {
        "content": "<p>There are some from the first batch that got moved into ui that remain there, otherwise they are all in run-pass.</p>",
        "id": 164625201,
        "sender_full_name": "davidtwco",
        "timestamp": 1556719292
    },
    {
        "content": "<p>I think I moved all the RFC 2008 tests together into UI after that though.</p>",
        "id": 164625214,
        "sender_full_name": "davidtwco",
        "timestamp": 1556719303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> fixed that.</p>",
        "id": 164625511,
        "sender_full_name": "davidtwco",
        "timestamp": 1556719509
    },
    {
        "content": "<p>PR updated.</p>",
        "id": 164625515,
        "sender_full_name": "davidtwco",
        "timestamp": 1556719516
    },
    {
        "content": "<p>Nice work, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>!</p>",
        "id": 164630475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723440
    },
    {
        "content": "<p>Really great to close this one out :)</p>",
        "id": 164630486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723450
    },
    {
        "content": "<p>Yea we only use <code>.../ui</code> tests these days for new tests</p>",
        "id": 164640116,
        "sender_full_name": "centril",
        "timestamp": 1556731673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so this is the PR I was hoping to finish much earlier: <a href=\"https://github.com/rust-lang/rust/pull/60462\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60462\">https://github.com/rust-lang/rust/pull/60462</a></p>",
        "id": 164667317,
        "sender_full_name": "eddyb",
        "timestamp": 1556753725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> awesome! looks good.</p>",
        "id": 164736402,
        "sender_full_name": "davidtwco",
        "timestamp": 1556824348
    },
    {
        "content": "<p>yeah, I just need to get to the part where I actually help the async situation :P</p>",
        "id": 164761585,
        "sender_full_name": "eddyb",
        "timestamp": 1556849030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> oooh I have some good news! we should be able to kill <code>Res::Upvar</code> completely!</p>",
        "id": 164843060,
        "sender_full_name": "eddyb",
        "timestamp": 1556932799
    },
    {
        "content": "<p>okay, it's a bit tricky, but it's effectively unnecessary</p>",
        "id": 164845096,
        "sender_full_name": "eddyb",
        "timestamp": 1556936605
    },
    {
        "content": "<p>Apologies for all the fallout of the drop order PRs, I'll do better in future.</p>",
        "id": 164860960,
        "sender_full_name": "davidtwco",
        "timestamp": 1556965060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> heh, no worries-- it's a tricky mess. They didn't occur to me either!</p>",
        "id": 165033434,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557191405
    },
    {
        "content": "<p>I guess that's good incentive to keep adding lots of good tests</p>",
        "id": 165033439,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557191420
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/60674\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60674\">#60674</a></p>",
        "id": 165270670,
        "sender_full_name": "davidtwco",
        "timestamp": 1557421346
    },
    {
        "content": "<p>Ugh.</p>",
        "id": 165270673,
        "sender_full_name": "davidtwco",
        "timestamp": 1557421348
    },
    {
        "content": "<p>ugh indeed</p>",
        "id": 165271940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557422440
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/60676\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60676\">#60676</a></p>",
        "id": 165276353,
        "sender_full_name": "davidtwco",
        "timestamp": 1557426092
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61276\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61276\">https://github.com/rust-lang/rust/pull/61276</a></p>",
        "id": 166772436,
        "sender_full_name": "eddyb",
        "timestamp": 1559088821
    },
    {
        "content": "<p>I managed to get back to this refactor and finish it, well, minus the part where async closures are lowered at HIR time</p>",
        "id": 166772501,
        "sender_full_name": "eddyb",
        "timestamp": 1559088866
    },
    {
        "content": "<p>the painful thing is that it looks like there  could've been a version that works in HIR lowering</p>",
        "id": 166773161,
        "sender_full_name": "eddyb",
        "timestamp": 1559089609
    },
    {
        "content": "<p>I am currently working my way towards a revert of the <code>libsyntax</code> side</p>",
        "id": 166775707,
        "sender_full_name": "eddyb",
        "timestamp": 1559093241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> okay I have a relatively clean revert of the AST changes, time to figure out (if I even can) what goes into the HIR side</p>",
        "id": 166776541,
        "sender_full_name": "eddyb",
        "timestamp": 1559094599
    },
    {
        "content": "<p>hmmm how does all of this work for async closures? AFAICT they don't  get any extra capture-forcing shenanigans</p>",
        "id": 166777680,
        "sender_full_name": "eddyb",
        "timestamp": 1559096350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is it accidental that async closures don't have the same drop order for their arguments as <code>async fn</code>s?</p>",
        "id": 166777689,
        "sender_full_name": "eddyb",
        "timestamp": 1559096390
    },
    {
        "content": "<p>I donâ€™t think we looked into async closures at all. </p>\n<p>I think that an async closure would match the equivalent closure because the equivalent closure wouldnâ€™t have captured the unused locals either so the drop order would be the same.</p>\n<p>It was only because <code>async fn</code> looked like a function that we wanted to capture all the arguments and have the drop order match an <code>fn</code>, I donâ€™t think the same would apply to async closures. </p>\n<p>Itâ€™s early here and Iâ€™ve just started thinking, so I could be wrong.</p>",
        "id": 166784852,
        "sender_full_name": "davidtwco",
        "timestamp": 1559107302
    },
    {
        "content": "<p>not captures, but arguments - i.e. the <code>a</code>, <code>b</code>, <code>c</code> in <code>async |a, b, c|</code></p>",
        "id": 166832312,
        "sender_full_name": "eddyb",
        "timestamp": 1559147469
    },
    {
        "content": "<p>if there are no captures, closures and functions should behave the same (cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>)</p>",
        "id": 166832361,
        "sender_full_name": "eddyb",
        "timestamp": 1559147496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I have to finish some other stuff, but if you want to have a stab at this: <a href=\"https://github.com/rust-lang/rust/pull/61276/commits/029ba3b27efdf67b9968be1f27be7a2e881d491c#diff-64b696b0ef6ad44140e973801ed82b25R3016\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61276/commits/029ba3b27efdf67b9968be1f27be7a2e881d491c#diff-64b696b0ef6ad44140e973801ed82b25R3016\">https://github.com/rust-lang/rust/pull/61276/commits/029ba3b27efdf67b9968be1f27be7a2e881d491c#diff-64b696b0ef6ad44140e973801ed82b25R3016</a></p>",
        "id": 166832449,
        "sender_full_name": "eddyb",
        "timestamp": 1559147546
    },
    {
        "content": "<p>I moved things around so you get to make both the arguments and expression, yourself, with <code>lower_body</code></p>",
        "id": 166832501,
        "sender_full_name": "eddyb",
        "timestamp": 1559147585
    },
    {
        "content": "<p>right now I basically reverted most of the relevant changes, so the tests you added don't pass anymore</p>",
        "id": 166832533,
        "sender_full_name": "eddyb",
        "timestamp": 1559147616
    },
    {
        "content": "<p>I just got the email from GitHub, Iâ€™ll take a look.</p>",
        "id": 166832538,
        "sender_full_name": "davidtwco",
        "timestamp": 1559147622
    },
    {
        "content": "<p><code>arguments</code> would need to become the <code>__arg0</code> etc. and then the original arguments would go into the <code>let</code>s that would be prepended to the body</p>",
        "id": 166832701,
        "sender_full_name": "eddyb",
        "timestamp": 1559147722
    },
    {
        "content": "<p>Great, thanks.</p>",
        "id": 166832745,
        "sender_full_name": "davidtwco",
        "timestamp": 1559147760
    },
    {
        "content": "<p>everything should fit nicely into that one function</p>",
        "id": 166832813,
        "sender_full_name": "eddyb",
        "timestamp": 1559147781
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 166832824,
        "sender_full_name": "davidtwco",
        "timestamp": 1559147791
    },
    {
        "content": "<p>also I expect that <code>ArgSource</code> would need to be drastically changed, or at least the <code>P&lt;Pat&gt;</code> be replaced with a <code>HirId</code></p>",
        "id": 166832851,
        "sender_full_name": "eddyb",
        "timestamp": 1559147822
    },
    {
        "content": "<p>as it stands, you're cloning the AST, which is a big nono</p>",
        "id": 166832879,
        "sender_full_name": "eddyb",
        "timestamp": 1559147836
    },
    {
        "content": "<p>patterns can contain types which can contain expressions which can contain blocks, which can contain items</p>",
        "id": 166832903,
        "sender_full_name": "eddyb",
        "timestamp": 1559147862
    },
    {
        "content": "<p>cloning items is pretty bad, even if nobody casually stashes an entire module in a pattern</p>",
        "id": 166832972,
        "sender_full_name": "eddyb",
        "timestamp": 1559147889
    },
    {
        "content": "<p>Alright, Iâ€™ll make sure to do that.</p>",
        "id": 166833003,
        "sender_full_name": "davidtwco",
        "timestamp": 1559147919
    },
    {
        "content": "<p>(yes, macros can do it, but the compiler shouldn't)</p>",
        "id": 166833031,
        "sender_full_name": "eddyb",
        "timestamp": 1559147941
    },
    {
        "content": "<p>anyway, I'm sorry it took me this long, and that I didn't finish the important part, but all of this stuff is doing my head in</p>",
        "id": 166833117,
        "sender_full_name": "eddyb",
        "timestamp": 1559147997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> do you want a rebase, btw?</p>",
        "id": 166833209,
        "sender_full_name": "eddyb",
        "timestamp": 1559148020
    },
    {
        "content": "<p>before you start messing with this</p>",
        "id": 166833228,
        "sender_full_name": "eddyb",
        "timestamp": 1559148036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> async closures aren't being considered for stabilization right now</p>",
        "id": 166833272,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559148066
    },
    {
        "content": "<p>they're really broken</p>",
        "id": 166833285,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559148073
    },
    {
        "content": "<p>ah I see</p>",
        "id": 166833288,
        "sender_full_name": "eddyb",
        "timestamp": 1559148079
    },
    {
        "content": "<blockquote>\n<p>anyway, I'm sorry it took me this long, and that I didn't finish the important part, but all of this stuff is doing my head in </p>\n</blockquote>\n<p>No, no, I appreciate you putting the time in to help tidy this up. </p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> do you want a rebase, btw?</p>\n</blockquote>\n<p>I can handle that if you want to get onto something else.</p>",
        "id": 166833297,
        "sender_full_name": "davidtwco",
        "timestamp": 1559148084
    },
    {
        "content": "<p>because you need to be able to borrow from captures in the return future</p>",
        "id": 166833310,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559148089
    },
    {
        "content": "<p>but you cannot today</p>",
        "id": 166833314,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559148091
    },
    {
        "content": "<p>I have this in a different worktree so I can just rebase it while I do other stuff</p>",
        "id": 166833339,
        "sender_full_name": "eddyb",
        "timestamp": 1559148108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> you mean like <code>fn call(&amp;'a self) -&gt; Something&lt;'a&gt;</code>? similar to the streaming iterator problem?</p>",
        "id": 166833461,
        "sender_full_name": "eddyb",
        "timestamp": 1559148168
    },
    {
        "content": "<p>because by-ref captures don't run into that, I'm pretty sure <code>|| &amp;foo</code> works and it basically just copies the captured reference (but <code>move || &amp;foo</code> doesn't work)</p>",
        "id": 166833650,
        "sender_full_name": "eddyb",
        "timestamp": 1559148266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> oh wow the conflict was with my own small s/TraitOrImpl/Assoc PR which I made <em>because</em> I saw that while I was working on this PR</p>",
        "id": 166833838,
        "sender_full_name": "eddyb",
        "timestamp": 1559148376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> pushed, I'll let you know if the build fails and I have to fix anything</p>",
        "id": 166833901,
        "sender_full_name": "eddyb",
        "timestamp": 1559148435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that doesn't work if e.g. the argument to the closure is a reference, and you want the return type to depend on the lifetime of the reference (which is always the case with async closures that take a reference arg)</p>",
        "id": 166834306,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559148702
    },
    {
        "content": "<p>you mean, like, <code>|a| &amp;*a</code>?</p>",
        "id": 166834843,
        "sender_full_name": "eddyb",
        "timestamp": 1559149052
    },
    {
        "content": "<p>this... should work just as well with references as it does with functions - only captures have it worse</p>",
        "id": 166834868,
        "sender_full_name": "eddyb",
        "timestamp": 1559149076
    },
    {
        "content": "<p>or are you referring to the inference of the return type, because you don't have the explicit signature?</p>",
        "id": 166834936,
        "sender_full_name": "eddyb",
        "timestamp": 1559149104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> there isn't a way to write the bound for that closure return type so that it allows it to return a type implementing Future that is dependent upon the HRTB input lifetime</p>",
        "id": 166835368,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559149374
    },
    {
        "content": "<p>you mean like <code>for&lt;'a&gt; |x: &amp;'a T| -&gt; impl Future&lt;Output = Foo&lt;'a&gt;&gt;</code>?</p>",
        "id": 166835518,
        "sender_full_name": "eddyb",
        "timestamp": 1559149459
    },
    {
        "content": "<p>both <code>for&lt;...&gt;</code> and <code>-&gt; impl Trait</code> are missing for closures, right?</p>",
        "id": 166835541,
        "sender_full_name": "eddyb",
        "timestamp": 1559149485
    },
    {
        "content": "<p>ooooh by bound you mean a function can't take such a closure</p>",
        "id": 166835683,
        "sender_full_name": "eddyb",
        "timestamp": 1559149574
    },
    {
        "content": "<p>because <code>F: for&lt;'a&gt; FnOnce(&amp;'a T) -&gt; X&lt;'a&gt;</code> requires HKT</p>",
        "id": 166835762,
        "sender_full_name": "eddyb",
        "timestamp": 1559149641
    },
    {
        "content": "<p>and while <code>F: for&lt;'a&gt; FnOnce&lt;(&amp;'a T,)&gt;, for&lt;'a&gt; &lt;F as FnOnce&lt;(&amp;'a T,)&gt;&gt;::Output: Future&lt;Output = Foo&lt;'a&gt;&gt;</code> <em>might</em> work, it's unstable</p>",
        "id": 166835883,
        "sender_full_name": "eddyb",
        "timestamp": 1559149716
    },
    {
        "content": "<p>this problem is not limited to closures, if you wanted a function generic over an <code>async fn</code>, you'd run into  the same issue</p>",
        "id": 166836008,
        "sender_full_name": "eddyb",
        "timestamp": 1559149806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> the common case is <code>for&lt;'a&gt; |x: &amp;'a T| -&gt; impl Future&lt;Output = Foo&gt; + 'a</code>, where the future borrows from the arguments but the resulting value doesnâ€™t</p>",
        "id": 166872226,
        "sender_full_name": "Nemo157",
        "timestamp": 1559179570
    },
    {
        "content": "<p>But presumably your case could exist as well</p>",
        "id": 166872233,
        "sender_full_name": "Nemo157",
        "timestamp": 1559179591
    },
    {
        "content": "<p>I see, that still requires <code>-&gt; X&lt;'a&gt;</code> it's just that <code>&lt;X&lt;'a&gt; as Future&gt;::Output</code> doesn't contain <code>'a</code></p>",
        "id": 166872317,
        "sender_full_name": "eddyb",
        "timestamp": 1559179729
    },
    {
        "content": "<p>so with the <code>Fn(...) -&gt; ...</code> sugar, it would seem to require HKT</p>",
        "id": 166872330,
        "sender_full_name": "eddyb",
        "timestamp": 1559179745
    },
    {
        "content": "<p>(this feels more and more offtopic, whoooops)</p>",
        "id": 166872337,
        "sender_full_name": "eddyb",
        "timestamp": 1559179760
    },
    {
        "content": "<p>FYI <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, I started working on this today and I'm making decent progress. </p>\n<p>I think it might make more sense if you backed out the async changes from your current PR and then I'll open one soon (hopefully today/tomorrow) that is based on your PR and still has your commit w/ the async reverts.</p>",
        "id": 167021273,
        "sender_full_name": "davidtwco",
        "timestamp": 1559327222
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/issues/61413\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61413\">#61413</a> with what I have <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>.</p>",
        "id": 167034353,
        "sender_full_name": "davidtwco",
        "timestamp": 1559336660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> okay I'll do just that! :D</p>",
        "id": 167060971,
        "sender_full_name": "eddyb",
        "timestamp": 1559375456
    },
    {
        "content": "<p>oops, I got side-tracked by mangling stuff and forgot</p>",
        "id": 167076270,
        "sender_full_name": "eddyb",
        "timestamp": 1559401970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I rebased my PR and r=@<strong>Vadim Petrochenkov</strong>'d it, and I'm now reviewing your PR</p>",
        "id": 167082807,
        "sender_full_name": "eddyb",
        "timestamp": 1559411605
    },
    {
        "content": "<p>the good news is that <code>ArgSource</code> might be almost unnecessary!</p>",
        "id": 167082808,
        "sender_full_name": "eddyb",
        "timestamp": 1559411614
    },
    {
        "content": "<p>scratch that, rustdoc does the same thing everyone else does</p>",
        "id": 167082865,
        "sender_full_name": "eddyb",
        "timestamp": 1559411681
    },
    {
        "content": "<p>so all you need to do is use the same name as the original pattern, if it's a simple name</p>",
        "id": 167082872,
        "sender_full_name": "eddyb",
        "timestamp": 1559411701
    },
    {
        "content": "<p>I think we already do that.</p>",
        "id": 167082885,
        "sender_full_name": "davidtwco",
        "timestamp": 1559411716
    },
    {
        "content": "<p>Unless I misunderstand what you mean.</p>",
        "id": 167082889,
        "sender_full_name": "davidtwco",
        "timestamp": 1559411730
    },
    {
        "content": "<p>I mean the __arg0 thing</p>",
        "id": 167082891,
        "sender_full_name": "eddyb",
        "timestamp": 1559411740
    },
    {
        "content": "<p>Yeah. We donâ€™t change it to <code>__arg0</code> if it is a simple binding (not incl ref bindings).</p>",
        "id": 167082937,
        "sender_full_name": "davidtwco",
        "timestamp": 1559411775
    },
    {
        "content": "<p>so then you don't need all of that stuff to get the original pattern</p>",
        "id": 167082946,
        "sender_full_name": "eddyb",
        "timestamp": 1559411805
    },
    {
        "content": "<p>actually, this is HIR lowering, you don't even need <code>__arg0</code>, you could probably just leave it <code>sym::invalid</code> or w/e</p>",
        "id": 167082964,
        "sender_full_name": "eddyb",
        "timestamp": 1559411855
    },
    {
        "content": "<p>actually I don't know nowadays what it is</p>",
        "id": 167082967,
        "sender_full_name": "eddyb",
        "timestamp": 1559411864
    },
    {
        "content": "<p>I had introduced <code>ArgSource</code> before we started keeping the names the same so Iâ€™ll give that a shot.</p>",
        "id": 167083014,
        "sender_full_name": "davidtwco",
        "timestamp": 1559411891
    },
    {
        "content": "<p>do you need <a href=\"https://github.com/rust-lang/rust/pull/61413/commits/b91cfd9ceda9b580ccfa8a712817c3b7b3f60721#diff-64b696b0ef6ad44140e973801ed82b25R3090\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61413/commits/b91cfd9ceda9b580ccfa8a712817c3b7b3f60721#diff-64b696b0ef6ad44140e973801ed82b25R3090\">https://github.com/rust-lang/rust/pull/61413/commits/b91cfd9ceda9b580ccfa8a712817c3b7b3f60721#diff-64b696b0ef6ad44140e973801ed82b25R3090</a>?</p>",
        "id": 167083050,
        "sender_full_name": "eddyb",
        "timestamp": 1559411992
    },
    {
        "content": "<p>seems like at least parts of that might be methods on <code>this</code></p>",
        "id": 167083105,
        "sender_full_name": "eddyb",
        "timestamp": 1559412018
    },
    {
        "content": "<p>(maybe I should also look at how <code>LocalSource</code> is used, it could be similar)</p>",
        "id": 167083134,
        "sender_full_name": "eddyb",
        "timestamp": 1559412065
    },
    {
        "content": "<p>If I didnâ€™t pass it in then Iâ€™d get borrow checking errors for uses of <code>this</code> within the closure when it was captured.</p>",
        "id": 167083143,
        "sender_full_name": "davidtwco",
        "timestamp": 1559412077
    },
    {
        "content": "<p>no, I mean, creating HIR by hand like that</p>",
        "id": 167083206,
        "sender_full_name": "eddyb",
        "timestamp": 1559412165
    },
    {
        "content": "<p>instead of <code>this.foo_bar(...)</code> of which there are dozens of helper methods :P</p>",
        "id": 167083220,
        "sender_full_name": "eddyb",
        "timestamp": 1559412188
    },
    {
        "content": "<p>I wasnâ€™t aware there were any. Iâ€™ll take a look in that case.</p>",
        "id": 167083228,
        "sender_full_name": "davidtwco",
        "timestamp": 1559412217
    },
    {
        "content": "<p>look at the other desugarings, like <code>for</code> loops or <code>?</code></p>",
        "id": 167083233,
        "sender_full_name": "eddyb",
        "timestamp": 1559412238
    },
    {
        "content": "<p>you might want to also copy how they document each part</p>",
        "id": 167083281,
        "sender_full_name": "eddyb",
        "timestamp": 1559412268
    },
    {
        "content": "<p>and generally the style (sorry I didn't mention them earlier)</p>",
        "id": 167083286,
        "sender_full_name": "eddyb",
        "timestamp": 1559412290
    },
    {
        "content": "<p>anyway this looks great and pretty self-contained!</p>",
        "id": 167083288,
        "sender_full_name": "eddyb",
        "timestamp": 1559412300
    },
    {
        "content": "<p>Thatâ€™s fine, I should have noticed them, Iâ€™ll have almost certainly looked at those functions during this.</p>",
        "id": 167083303,
        "sender_full_name": "davidtwco",
        "timestamp": 1559412316
    },
    {
        "content": "<p>oh and you can rebase --onto the current state of my PR, if you want to</p>",
        "id": 167083310,
        "sender_full_name": "eddyb",
        "timestamp": 1559412346
    },
    {
        "content": "<p>Will do, thanks.</p>",
        "id": 167083314,
        "sender_full_name": "davidtwco",
        "timestamp": 1559412361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> my PR got merged btw</p>",
        "id": 167127271,
        "sender_full_name": "eddyb",
        "timestamp": 1559490660
    },
    {
        "content": "<p>I saw, just rebased, then will address the feedback and update my PR.</p>",
        "id": 167127282,
        "sender_full_name": "davidtwco",
        "timestamp": 1559490678
    },
    {
        "content": "<p>I should not forget to clean up visit_fn in rustc_resolve</p>",
        "id": 167127292,
        "sender_full_name": "eddyb",
        "timestamp": 1559490715
    },
    {
        "content": "<p>basically the caller should be pushing (Assoc)ItemRibKind</p>",
        "id": 167127338,
        "sender_full_name": "eddyb",
        "timestamp": 1559490745
    },
    {
        "content": "<p>although the closure case is annoying, I think we should actually always push a NormalRibKind (i.e. a block-like scope) for the argument bindings since even for item fn's there are things between the item scope and the argument scope (generics and the signaure)</p>",
        "id": 167127414,
        "sender_full_name": "eddyb",
        "timestamp": 1559490919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  might like this: if Foo&lt;T, N&gt; starts working (without an anon const expr in the AST), we don't want x: Foo&lt;T, x&gt; to see the name x at all</p>",
        "id": 167127507,
        "sender_full_name": "eddyb",
        "timestamp": 1559491082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are there diagnostic uses of <code>{Arg,Local}Source</code> left?</p>",
        "id": 167137402,
        "sender_full_name": "eddyb",
        "timestamp": 1559507401
    },
    {
        "content": "<p>Not that Iâ€™m aware of, no.</p>",
        "id": 167139821,
        "sender_full_name": "davidtwco",
        "timestamp": 1559511731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so can they be fully removed?</p>",
        "id": 167173052,
        "sender_full_name": "eddyb",
        "timestamp": 1559555822
    },
    {
        "content": "<p>I thought it might make sense to keep some breadcrumbs that it was introduced by a desugaring.</p>",
        "id": 167173073,
        "sender_full_name": "davidtwco",
        "timestamp": 1559555851
    },
    {
        "content": "<p>Though I suppose the spans might do that.</p>",
        "id": 167173078,
        "sender_full_name": "davidtwco",
        "timestamp": 1559555864
    },
    {
        "content": "<p>the expansion span already records that</p>",
        "id": 167173080,
        "sender_full_name": "eddyb",
        "timestamp": 1559555868
    },
    {
        "content": "<p>heh</p>",
        "id": 167173081,
        "sender_full_name": "eddyb",
        "timestamp": 1559555869
    },
    {
        "content": "<p>I'll remove them in a moment.</p>",
        "id": 167173230,
        "sender_full_name": "davidtwco",
        "timestamp": 1559556003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Should the <code>LocalSource</code> variant remain since <code>LocalSource</code> already existed?</p>",
        "id": 167173275,
        "sender_full_name": "davidtwco",
        "timestamp": 1559556053
    },
    {
        "content": "<p>I guess that's fine</p>",
        "id": 167174280,
        "sender_full_name": "eddyb",
        "timestamp": 1559556961
    },
    {
        "content": "<p>assuming things do check for <code>Normal</code> and suppress some diagnostics etc.</p>",
        "id": 167174337,
        "sender_full_name": "eddyb",
        "timestamp": 1559556983
    }
]