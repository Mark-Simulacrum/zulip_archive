[
    {
        "content": "<p>A related question: supposing that we get support from Polonius in the future, will we be able to support safe self-references without actually needing Pin?</p>",
        "id": 245494025,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625862714
    },
    {
        "content": "<p>I think the main times that people interact with poll today are less often writing futures as they are writing <em>other things</em> (async-read, async-write, streams)</p>",
        "id": 245494076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Dropping.20.60.2Eawait.60-.20what.20else.20could.20or.20would.20change/near/245494025\">said</a>:</p>\n<blockquote>\n<p>A related question: supposing that we get support from Polonius in the future, will we be able to support safe self-references without actually needing Pin?</p>\n</blockquote>\n<p>I believe so, but not necessarily every pattern</p>",
        "id": 245494096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862742
    },
    {
        "content": "<p>World's simplest self-referential data structure:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">SelfRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">counter_1</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">counter_2</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">current_counter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245494133,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625862765
    },
    {
        "content": "<p>depends on your POV</p>",
        "id": 245494154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862778
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">SelfRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pointer_into_data</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is simpler in some ways :)</p>",
        "id": 245494179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862799
    },
    {
        "content": "<p>iow, I think there might be a world where you can have references, but the data you are referring to has to be \"in the heap\"</p>",
        "id": 245494227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862837
    },
    {
        "content": "<p>Perhaps, but I wanted mutation and I wanted to dodge the question of how to prevent mutating the Vec while that reference exists.</p>",
        "id": 245494232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625862842
    },
    {
        "content": "<p>such that the struct can stll be moved</p>",
        "id": 245494250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862843
    },
    {
        "content": "<p>well, the point is, if the borrow checker knows you have references into <code>self.data</code></p>",
        "id": 245494291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862857
    },
    {
        "content": "<p>it could potentially treat that field as borrowed</p>",
        "id": 245494307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862868
    },
    {
        "content": "<p>really I should've just put <code>Vec&lt;u32&gt;</code>, the <code>Rc</code> is a distraction</p>",
        "id": 245494328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862877
    },
    {
        "content": "<p>anyway, my point is only that we can separate out: references <em>to</em> other fields</p>",
        "id": 245494337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862884
    },
    {
        "content": "<p>from references to <em>data owned by other fields</em></p>",
        "id": 245494341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862888
    },
    {
        "content": "<p>I could imagine one being easier than the other</p>",
        "id": 245494353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862899
    },
    {
        "content": "<p>and it's probably worth distinguishing, because a key use case for my example is to be able to move that between threads etc</p>",
        "id": 245494387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862918
    },
    {
        "content": "<p>That's fair, and references to heap memory only would still be helpful in some ways, but there are valid use cases for self-references within the same struct.</p>",
        "id": 245494396,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625862921
    },
    {
        "content": "<p>yes, for sure</p>",
        "id": 245494409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862933
    },
    {
        "content": "<p>And, for that matter, references that <em>might</em> be self-references.</p>",
        "id": 245494410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625862933
    },
    {
        "content": "<p>I'd like to be able to do things like allocating a struct with extra memory hanging off the end and making an internal reference within the struct point into that extra memory, so that I have one allocation.</p>",
        "id": 245494491,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625862963
    },
    {
        "content": "<p>I'm just trying to say why I'm not sure whether we would get both or not, I've thought more about the \"data owned by other fields\" case than I have about \"pointers to felds\"</p>",
        "id": 245494534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862972
    },
    {
        "content": "<p>they are actually very different, I realize now</p>",
        "id": 245494564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625862997
    },
    {
        "content": "<p>in that the former is something \"internal\" to the struct, and the latter is \"external\"</p>",
        "id": 245494579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625863006
    },
    {
        "content": "<p><code>struct Thing { ref_that_might_be_a_selfref: &amp;mut [u8], attached_data: [u8] }</code></p>",
        "id": 245494581,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625863007
    },
    {
        "content": "<p>Move that into another thread <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 245494624,
        "sender_full_name": "Matthias247",
        "timestamp": 1625863030
    },
    {
        "content": "<p>yes :)</p>",
        "id": 245494675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625863071
    }
]