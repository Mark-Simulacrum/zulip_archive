[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> continuing our conversation from yesterday on Discord, after <a href=\"https://github.com/rust-lang/rust/issues/60592\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60592\">#60592</a>, you mentioned needing to fix this case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">FooFromFn</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FooFromFn</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">FooFromFn</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Would you be able to elaborate a little on where you think the problem is so that I can start working on a fix later today?</p>",
        "id": 165052299,
        "sender_full_name": "davidtwco",
        "timestamp": 1557217694
    },
    {
        "content": "<p>so the problem is you have these facts:</p>\n<ul>\n<li><code>$0: Foo&lt;Out = i32&gt;</code>, because of the <code>impl Foo</code></li>\n<li>the <code>FooFromFn(...)</code> expr has the expected type <code>$0</code>, which won't be unified with <code>FooFromFn&lt;$1&gt;</code> until <em>after</em> the closure is checked</li>\n<li>the closure has the expected type <code>$1</code> </li>\n</ul>\n<p>there is no <code>$1: Fn() -&gt; i32</code> bound, only <code>$0: Foo&lt;Out = i32&gt;</code> and <em>effectively</em> <code>FooFromFn&lt;$1&gt; coerces to $0</code> which isn't stored down anywhere today (but we probably could?)</p>",
        "id": 165073905,
        "sender_full_name": "eddyb",
        "timestamp": 1557238253
    },
    {
        "content": "<p>also, the <code>$1: Fn() -&gt; i32</code> bound would potentially be wrong to have as a known fact, unless we short-circuit the coercion and unify <code>$0</code> with <code>FooFromFn&lt;$1&gt;</code>, so that we can elaborate the predicates and get <code>$1: Fn() -&gt; i32</code> \"for free\"</p>",
        "id": 165074049,
        "sender_full_name": "eddyb",
        "timestamp": 1557238345
    },
    {
        "content": "<p>let me rephrase, ugh</p>",
        "id": 165074056,
        "sender_full_name": "eddyb",
        "timestamp": 1557238349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <em>however</em>, that short-circuit is dangerous, because...</p>",
        "id": 165074664,
        "sender_full_name": "eddyb",
        "timestamp": 1557238674
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">FooFromFn</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span>: <span class=\"nc\">SomeOtherType</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165074747,
        "sender_full_name": "eddyb",
        "timestamp": 1557238702
    },
    {
        "content": "<p>that will cause <code>$0</code> to be unified with <code>SomeOtherType</code> <em>before</em> <code>FooFromFn&lt;$1&gt;</code> is attempted to be coerced to <code>SomeOtherType</code></p>",
        "id": 165075017,
        "sender_full_name": "eddyb",
        "timestamp": 1557238852
    },
    {
        "content": "<p>so we could only do this in the very special case of \"there is only one truth source for this inference variable, and it's the type of this expression\"</p>",
        "id": 165075071,
        "sender_full_name": "eddyb",
        "timestamp": 1557238877
    },
    {
        "content": "<p>in which case, it can be unified early with the \"expected type skeleton\" or w/e</p>",
        "id": 165075120,
        "sender_full_name": "eddyb",
        "timestamp": 1557238891
    },
    {
        "content": "<p>this is all very disturbing tbh, I'd get a hold of <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  first</p>",
        "id": 165075226,
        "sender_full_name": "eddyb",
        "timestamp": 1557238936
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any thoughts on the above?</p>",
        "id": 165599080,
        "sender_full_name": "davidtwco",
        "timestamp": 1557818153
    },
    {
        "content": "<p>(apologies for yet another ping, but in case this got missed in what I assume is a sea of notifications, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>)</p>",
        "id": 166742657,
        "sender_full_name": "davidtwco",
        "timestamp": 1559066396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> =) you're not wrong</p>",
        "id": 166742906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559066490
    },
    {
        "content": "<p>ok so to jump back to this for a <em>few minutes</em></p>",
        "id": 168068595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448412
    },
    {
        "content": "<p>I'm trying to catch up with eddyb here</p>",
        "id": 168068728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448478
    },
    {
        "content": "<p>it's definitely true that we'd <em>prefer</em> not to solve this in the desugaring</p>",
        "id": 168068827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448547
    },
    {
        "content": "<p>how much do you get the context here, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ?</p>",
        "id": 168068897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448567
    },
    {
        "content": "<p>Very little, unfortunately.</p>",
        "id": 168068914,
        "sender_full_name": "davidtwco",
        "timestamp": 1560448580
    },
    {
        "content": "<p>you know about the idea of an expected type?</p>",
        "id": 168069123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448714
    },
    {
        "content": "<p>A little bit.</p>",
        "id": 168069139,
        "sender_full_name": "davidtwco",
        "timestamp": 1560448731
    },
    {
        "content": "<p>ok so if you have <code>let x: u32 = ...</code></p>",
        "id": 168069172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448746
    },
    {
        "content": "<p>then when we are typing the <code>...</code> we know it's supposed to produce a <code>u32</code></p>",
        "id": 168069185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448752
    },
    {
        "content": "<p>we sometimes go to some lengths here</p>",
        "id": 168069238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448786
    },
    {
        "content": "<p>And the same is true with function return types from signatures, for example?</p>",
        "id": 168069247,
        "sender_full_name": "davidtwco",
        "timestamp": 1560448798
    },
    {
        "content": "<p>(that it would be used as a expected type)</p>",
        "id": 168069323,
        "sender_full_name": "davidtwco",
        "timestamp": 1560448809
    },
    {
        "content": "<p>so...</p>",
        "id": 168069326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448811
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(async_await, futures_api)]</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168069330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448814
    },
    {
        "content": "<p>can we desugar this a bit?</p>",
        "id": 168069339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448821
    },
    {
        "content": "<p>how bad is the desugared version? :)</p>",
        "id": 168069348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448829
    },
    {
        "content": "<p>but yeah the problem here is that, somehow,</p>",
        "id": 168069353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448834
    },
    {
        "content": "<p>the return type of the future</p>",
        "id": 168069360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448839
    },
    {
        "content": "<p>is being left to be inferred</p>",
        "id": 168069367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448843
    },
    {
        "content": "<p>and only later (too late) unified with <code>i32</code></p>",
        "id": 168069376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448851
    },
    {
        "content": "<p>this is why the diagnostics are confusing</p>",
        "id": 168069388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448858
    },
    {
        "content": "<p>we have some similar logic, e.g., for clsoures if you do:</p>",
        "id": 168069420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448873
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">))</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168069429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448882
    },
    {
        "content": "<p>you could imagine us saying \"the closure returns a type <code>?T</code>\"</p>",
        "id": 168069439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448889
    },
    {
        "content": "<p>and checking the body</p>",
        "id": 168069442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448891
    },
    {
        "content": "<p>and then comparing the <code>?T</code> against the type in the signature of <code>foo</code></p>",
        "id": 168069453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448896
    },
    {
        "content": "<p>and you would get a similar error</p>",
        "id": 168069456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448901
    },
    {
        "content": "<p>but what we actually do is to look at the signature of <code>foo</code> and try to see if we can figure out what the closure is <em>supposed</em> to return</p>",
        "id": 168069478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448914
    },
    {
        "content": "<p>so we can \"bias\" the error that way</p>",
        "id": 168069490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448921
    },
    {
        "content": "<p>(this also helps with coercions)</p>",
        "id": 168069535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448926
    },
    {
        "content": "<p>this is a bit subtle for closures because, if you look at <code>foo</code>, it often looks like</p>",
        "id": 168069557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168069569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448948
    },
    {
        "content": "<p>so when we type-check <code>foo(|| Ok(22))</code></p>",
        "id": 168069589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448961
    },
    {
        "content": "<p>what happens is that we replace <code>T</code> (here, the closure type) with a fresh variable, let's call it <code>?C</code></p>",
        "id": 168069611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448973
    },
    {
        "content": "<p>and then we have this \"trait obligation\" <code>?C: Fn() -&gt; i32</code></p>",
        "id": 168069627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448984
    },
    {
        "content": "<p>which can't be proven yet because we don't know what <code>?C</code> <em>is</em></p>",
        "id": 168069649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448994
    },
    {
        "content": "<p>to infer the closure return type, therefore, the code that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> pointed us out goes and looks through the list of pending things we have to prove in the future</p>",
        "id": 168069668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449012
    },
    {
        "content": "<p>and looks for something like that</p>",
        "id": 168069676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449016
    },
    {
        "content": "<p>to extract the return type</p>",
        "id": 168069682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449020
    },
    {
        "content": "<p>the scenario here is going to be similar-ish</p>",
        "id": 168069695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449028
    },
    {
        "content": "<p>the <code>async { .. .}</code> at the heart of the desugaring, afer all, is generating a future type <code>?F</code></p>",
        "id": 168069715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449041
    },
    {
        "content": "<p>which must implement <code>?F: Future&lt;Output = i32&gt;</code></p>",
        "id": 168069760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449047
    },
    {
        "content": "<p>so to figure out the expected type we have to match that expectation</p>",
        "id": 168069778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449061
    },
    {
        "content": "<p>from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s comments above, it sounds like that might be a bit tricky though</p>",
        "id": 168069796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449072
    },
    {
        "content": "<p>but I think we gotta run to meta mtg :)</p>",
        "id": 168069808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449079
    },
    {
        "content": "<p>Ah yeah, it's just us today, I think.</p>",
        "id": 168069824,
        "sender_full_name": "davidtwco",
        "timestamp": 1560449099
    },
    {
        "content": "<p>(out of Santiago, you and I at least)</p>",
        "id": 168069847,
        "sender_full_name": "davidtwco",
        "timestamp": 1560449110
    },
    {
        "content": "<p>oh right</p>",
        "id": 168069849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449111
    },
    {
        "content": "<p>well let's just do a quick scan at least ;)</p>",
        "id": 168069858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449118
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so... I wanted to get a more accurate desugaring here</p>",
        "id": 168070796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449750
    },
    {
        "content": "<p>because the details matter</p>",
        "id": 168070802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449752
    },
    {
        "content": "<p>is there an easy way to do that?</p>",
        "id": 168070930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449822
    },
    {
        "content": "<p>I guess that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(async_await, futures_api)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168070989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449862
    },
    {
        "content": "<p>produces the same error, so that's something</p>",
        "id": 168070995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449867
    },
    {
        "content": "<p>I can dump the HIR locally if that would help.</p>",
        "id": 168071006,
        "sender_full_name": "davidtwco",
        "timestamp": 1560449874
    },
    {
        "content": "<p>I'm trying to remember all the flags for this sort of thing</p>",
        "id": 168071090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449905
    },
    {
        "content": "<p>I guess <code>-Zunpretty=hir-tree</code></p>",
        "id": 168071127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449925
    },
    {
        "content": "<p>or just <code>-Zunpretty=hir</code></p>",
        "id": 168071168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449955
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\"> </span>-&gt;\n      <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span>::<span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span><span class=\"p\">(</span><span class=\"w\"></span>\n\n<span class=\"w\">                                        </span><span class=\"o\">||</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168071177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560449961
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/64093538b6892bf6afe1143ac07e1d2c\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/64093538b6892bf6afe1143ac07e1d2c\">This is the <code>hir-tree</code></a>.</p>",
        "id": 168071198,
        "sender_full_name": "davidtwco",
        "timestamp": 1560449980
    },
    {
        "content": "<p>what's up with <code>_t = false</code> business?</p>",
        "id": 168071280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450011
    },
    {
        "content": "<p>oh</p>",
        "id": 168071281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450015
    },
    {
        "content": "<p>that's the desugaring for <code>if</code> I guess</p>",
        "id": 168071288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450019
    },
    {
        "content": "<p>dear god</p>",
        "id": 168071290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450020
    },
    {
        "content": "<p>:)</p>",
        "id": 168071294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450022
    },
    {
        "content": "<p>beautiful</p>",
        "id": 168071300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450026
    },
    {
        "content": "<p>and terrible</p>",
        "id": 168071304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450028
    },
    {
        "content": "<p>all at once</p>",
        "id": 168071307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450029
    },
    {
        "content": "<p>ok so <code>from_generator</code> is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_generator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generator</span><span class=\"o\">&lt;</span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Return</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">GenFuture</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168071368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450071
    },
    {
        "content": "<p>so this is pretty complex</p>",
        "id": 168071393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450091
    },
    {
        "content": "<p>the link between the <em>actual</em> return value and the expectation is rather...removed</p>",
        "id": 168071431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450120
    },
    {
        "content": "<p>i.e., the function is returning an opaque type</p>",
        "id": 168071490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450133
    },
    {
        "content": "<p>let's call it <code>?0</code></p>",
        "id": 168071502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450141
    },
    {
        "content": "<p>which has to meet the requirement <code>?0: Future&lt;Output = i32&gt;</code></p>",
        "id": 168071512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450151
    },
    {
        "content": "<p>and then there is a call to <code>from_generator</code> which returns an opaque type <code>impl Future&lt;Output = T::Return&gt;</code></p>",
        "id": 168071561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450186
    },
    {
        "content": "<p>so the expected type for the generator is <code>?1</code> (instantiated value of <code>T</code>)</p>",
        "id": 168071591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450201
    },
    {
        "content": "<p>and we have the obligations that</p>",
        "id": 168071596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450204
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>?1: Generator&lt;Yield = ()&gt;\n&lt;?0 as Future&gt;::Output = &lt;?1 as Generator&gt;::Return\n</pre></div>\n\n\n<p>or..something like that...</p>",
        "id": 168071735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450282
    },
    {
        "content": "<p>I should probably just dump state of compiler to see I guess</p>",
        "id": 168071751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450292
    },
    {
        "content": "<blockquote>\n<p>that's the desugaring for if I guess</p>\n</blockquote>\n<p>(It is lying a little bit; there's no actual let binding there but <code>ExprKind::DropTemps(false)</code>; but the block is the semantic equivalent)</p>",
        "id": 168071758,
        "sender_full_name": "centril",
        "timestamp": 1560450301
    },
    {
        "content": "<p>so I'm going to run with</p>\n<div class=\"codehilite\"><pre><span></span>&gt; <span class=\"nv\">RUSTC_LOG</span><span class=\"o\">=</span>rustc_typeck::check::closure  rustc +rust-2-stage2 ~/tmp/issue-54326.rs --edition <span class=\"m\">2018</span>\n</pre></div>",
        "id": 168071918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450373
    },
    {
        "content": "<p>and we get</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-06-13T18:26:19Z: rustc_typeck::check::closure: check_expr_closure(expr=expr(HirId { owner: DefIndex(13), local_id: 23 }: ||),expected=ExpectHasType(_#1t))\nDEBUG 2019-06-13T18:26:19Z: rustc_typeck::check::closure: deduce_expectations_from_expected_type(expected_ty=_#1t)\nDEBUG 2019-06-13T18:26:19Z: rustc_typeck::check::closure: deduce_expectations_from_obligations: obligation.predicate=Binder(TraitPredicate(&lt;_#1t as std::marker::Sized&gt;))\nDEBUG 2019-06-13T18:26:19Z: rustc_typeck::check::closure: deduce_expectations_from_obligations: obligation.predicate=Binder(TraitPredicate(&lt;_#1t as std::ops::Generator&gt;))\nDEBUG 2019-06-13T18:26:19Z: rustc_typeck::check::closure: deduce_expectations_from_obligations: obligation.predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_#1t], item_def_id: DefId(2:1651 ~ cor\\\ne[53a4]::ops[0]::generator[0]::Generator[0]::Yield[0]) }, ()))\nDEBUG 2019-06-13T18:26:19Z: rustc_typeck::check::closure: deduce_sig_from_projection(Binder(ProjectionPredicate(ProjectionTy { substs: [_#1t], item_def_id: DefId(2:1651 ~ core[53a4]::ops[0]::generator[0]::G\\\nenerator[0]::Yield[0]) }, ())))\nDEBUG 2019-06-13T18:26:19Z: rustc_typeck::check::closure: deduce_sig_from_projection: not return assoc item of generator\n</pre></div>",
        "id": 168071965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450401
    },
    {
        "content": "<p>interestingly</p>",
        "id": 168072063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450450
    },
    {
        "content": "<p>we don't know the return type information yet</p>",
        "id": 168072073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450454
    },
    {
        "content": "<p>which I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> was alluding to above :)</p>",
        "id": 168072085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450461
    },
    {
        "content": "<p>we have three pending things:</p>\n<div class=\"codehilite\"><pre><span></span>?1: Sized\n?1: Generator\n&lt;?1 as Generator&gt;::Yield = ()\n</pre></div>",
        "id": 168072166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450489
    },
    {
        "content": "<p>the last one is a bit uglier in Rust's debug output :)</p>\n<div class=\"codehilite\"><pre><span></span>(ProjectionPredicate(ProjectionTy { substs: [_#1t], item_def_id: DefId(2:1651 ~ core[53a4]::ops[0]::generator[0]::Generator[0]::Yield[0]) }, ())\n</pre></div>",
        "id": 168072194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450508
    },
    {
        "content": "<p>a \"projection predicate\" is refers to proving the value of an associated type is equal to something else</p>",
        "id": 168072212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450524
    },
    {
        "content": "<p>the core::ops::generator::Generator::Yield identifies the associated type (and its trait)</p>",
        "id": 168072228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450542
    },
    {
        "content": "<p>and the substitutions are the type parameters from the trait (and, once we have GATs, the associated type)</p>",
        "id": 168072249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450557
    },
    {
        "content": "<p>in this case, <code>[1]</code></p>",
        "id": 168072259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450562
    },
    {
        "content": "<p>so the point is that, with the setup we have now, we just don't know anything about this <code>i32</code></p>",
        "id": 168072283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450580
    },
    {
        "content": "<p>that presumably comes later</p>",
        "id": 168072288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450583
    },
    {
        "content": "<p>but I gotta run now and do some other triage</p>",
        "id": 168072397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450630
    },
    {
        "content": "<p>lang team pre mtg:)</p>",
        "id": 168072411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450639
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 168072458,
        "sender_full_name": "davidtwco",
        "timestamp": 1560450674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  waiting for you there <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 168072466,
        "sender_full_name": "centril",
        "timestamp": 1560450679
    },
    {
        "content": "<blockquote>\n<p>so the point is that, with the setup we have now, we just don't know anything about this <code>i32</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> just realized this is prob wrong -- I think the debug output is just filtering out some of the obligations</p>",
        "id": 168072792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560450915
    },
    {
        "content": "<p>The extra logging in this snippet has all of the obligations (those with <code>deduce_expectations_from_obligations</code> lines too are the ones that are not filtered):</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-06-13T19:10:33Z: rustc_typeck::check::closure: deduce_expectations_from_expected_type(expected_ty=_#1t)\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: obligations_for_self_ty: self_ty=_#1t ty_var_root=_#1t pending_obligations=[/* omitted by davidtwco as they&#39;re listed below */]\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid(trait_ref=Binder(&lt;_#0t as std::marker::Sized&gt;), self_ty=_#0t, expected_vid=_#1t)\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid - found_vid=_#0t\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid(trait_ref=Binder(&lt;_#0t as std::future::Future&gt;), self_ty=_#0t, expected_vid=_#1t)\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid - found_vid=_#0t\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid(trait_ref=Binder(&lt;_#0t as std::future::Future&gt;), self_ty=_#0t, expected_vid=_#1t)\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid - found_vid=_#0t\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid(trait_ref=Binder(&lt;_#1t as std::marker::Sized&gt;), self_ty=_#1t, expected_vid=_#1t)\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid - found_vid=_#1t\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check::closure: deduce_expectations_from_obligations: obligation.predicate=Binder(TraitPredicate(&lt;_#1t as std::marker::Sized&gt;))\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid(trait_ref=Binder(&lt;_#1t as std::ops::Generator&gt;), self_ty=_#1t, expected_vid=_#1t)\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid - found_vid=_#1t\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check::closure: deduce_expectations_from_obligations: obligation.predicate=Binder(TraitPredicate(&lt;_#1t as std::ops::Generator&gt;))\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid(trait_ref=Binder(&lt;_#1t as std::ops::Generator&gt;), self_ty=_#1t, expected_vid=_#1t)\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check: self_type_matches_expected_vid - found_vid=_#1t\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check::closure: deduce_expectations_from_obligations: obligation.predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_#1t], item_def_id: DefId(2:1651 ~ core[54d4]::ops\n[0]::generator[0]::Generator[0]::Yield[0]) }, ()))\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check::closure: deduce_sig_from_projection(Binder(ProjectionPredicate(ProjectionTy { substs: [_#1t], item_def_id: DefId(2:1651 ~ core[54d4]::ops[0]::generator[0]::Generator[0]:\n:Yield[0]) }, ())))\nDEBUG 2019-06-13T19:10:33Z: rustc_typeck::check::closure: deduce_sig_from_projection: not return assoc item of generator\n</pre></div>",
        "id": 168076272,
        "sender_full_name": "davidtwco",
        "timestamp": 1560453173
    },
    {
        "content": "<p>So there was talk of setting up a meeting here -- I could perhaps meet tomorrow at 8am or 9am UTC-07:00 (Pacific time)</p>",
        "id": 168513399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560955722
    },
    {
        "content": "<p>I'm here now, too, but I don't know if <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> or <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are..</p>",
        "id": 168513415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560955739
    },
    {
        "content": "<p>Oh, I'm here now</p>",
        "id": 168514547,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560956546
    },
    {
        "content": "<p>I am</p>",
        "id": 168514556,
        "sender_full_name": "davidtwco",
        "timestamp": 1560956554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still around?</p>",
        "id": 168514587,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560956577
    },
    {
        "content": "<p>8 or 9 PST tomorrow would also work for me</p>",
        "id": 168514701,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560956636
    },
    {
        "content": "<p>Likewise if it's just in Zulip and not Zoom.</p>",
        "id": 168514821,
        "sender_full_name": "davidtwco",
        "timestamp": 1560956679
    },
    {
        "content": "<p>I'm here</p>",
        "id": 168515308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560956898
    },
    {
        "content": "<p>but it would have to be zulip, yeah</p>",
        "id": 168515317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560956901
    },
    {
        "content": "<p>I guess the first question is how hard we want to work on this :</p>",
        "id": 168515413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560956973
    },
    {
        "content": "<p>that said</p>",
        "id": 168515523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957027
    },
    {
        "content": "<p>hmm</p>",
        "id": 168515526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957028
    },
    {
        "content": "<p>there is a connection to some other diagnostic failures iirc</p>",
        "id": 168515533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957036
    },
    {
        "content": "<p>or just general inference failures I mean</p>",
        "id": 168515546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957047
    },
    {
        "content": "<p>notably there is some issue about <code>fn foo&lt;T: Foo&gt;(t: T)</code> where you have <code>impl Foo for Fn(u32)</code>. The problem is that, today, we can't infer the expected type when you do <code>foo(|x| ...)</code>, so we don't know the type of <code>x</code>.</p>",
        "id": 168515604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957100
    },
    {
        "content": "<p>this feels similar -- the problem there being that we have a pending obligation for <code>T: Foo</code>, but we don't (yet) know that this can only be solved by <code>T: Fn(u32)</code></p>",
        "id": 168515670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957124
    },
    {
        "content": "<p>it seems like in both cases we're kind of talking about \"simplifying\" the expectations</p>",
        "id": 168515684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957134
    },
    {
        "content": "<p>(sigh, this will make the chalk style solving strategy more complex too)</p>",
        "id": 168515698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957143
    },
    {
        "content": "<p>but I think the first thing would be to establish whether, indeed, we know enough to even theoretically figure things out</p>",
        "id": 168515722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957162
    },
    {
        "content": "<p>I'd personally be happy with something more narrow that could specifically propagate the required output type for async blocks, since iirc we have similar existing logic for closures</p>",
        "id": 168515761,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560957193
    },
    {
        "content": "<p>But if you think we can solve this in a more principled way, I'm happy to spend time on it</p>",
        "id": 168515800,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560957221
    },
    {
        "content": "<p>I would be ok with something narrow, but we hvae to figure out what it should be</p>",
        "id": 168515816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957236
    },
    {
        "content": "<p>the link for the return type etc is pretty separated</p>",
        "id": 168515882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957257
    },
    {
        "content": "<p>I'm re-reading the backscroll to try and page this back in a bit</p>",
        "id": 168515890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957264
    },
    {
        "content": "<p>I'm also happy to work on this, all I managed to accomplish when first looking at the issue was generalizing the closure special-casing to generators.</p>",
        "id": 168515894,
        "sender_full_name": "davidtwco",
        "timestamp": 1560957267
    },
    {
        "content": "<p>I mean the <em>easiest</em> thing would be to add some sort of special node in the HIR I guess</p>",
        "id": 168515929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957300
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\"> </span>-&gt;\n      <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span>::<span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">from_generator</span><span class=\"p\">(</span><span class=\"w\"></span>\n\n<span class=\"w\">                                        </span><span class=\"o\">||</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168515966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957330
    },
    {
        "content": "<p>that's the desugaring we posted before</p>",
        "id": 168515970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957335
    },
    {
        "content": "<p>the expected return type of the <code>from_generator</code> call is pretty separated from the requirements on the arguments</p>",
        "id": 168516047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957376
    },
    {
        "content": "<p>(this is the \"link\" I'm referring to)</p>",
        "id": 168516055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957385
    },
    {
        "content": "<p>Unfortunately, the bug that makes HIR lowering output for async fns means we can't see the return type from it.</p>",
        "id": 168516060,
        "sender_full_name": "davidtwco",
        "timestamp": 1560957388
    },
    {
        "content": "<p>yeah but that's ok</p>",
        "id": 168516067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957396
    },
    {
        "content": "<p>you know it's there ;)</p>",
        "id": 168516069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957400
    },
    {
        "content": "<p>some sort of <code>-&gt; impl Future</code>, I presume</p>",
        "id": 168516074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957408
    },
    {
        "content": "<p>anyway I could imagine that we desugar to something like</p>",
        "id": 168516105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957428
    },
    {
        "content": "<p><code>from_generator(|| -&gt; XX { .. })</code>, except we couldn't write the <code>XX</code> -- i.e., we don't really have the syntax for what you'd want there</p>",
        "id": 168516137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957462
    },
    {
        "content": "<p>or maybe we could do <code>from_generator::&lt;...XXX...&gt;</code> if we setup it up right, to let us specify the return type</p>",
        "id": 168516210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957491
    },
    {
        "content": "<p>Yeah, that was my initial attempt which failed because we don't have a way to copy types in hir</p>",
        "id": 168516214,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560957493
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> mentioned somewhere, it'd be require duplicating info in the HIR if we did it naively</p>",
        "id": 168516228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957504
    },
    {
        "content": "<p>yeah, you could imagine having some special hir node that means \"return type of the enclosing function\" or something but...</p>",
        "id": 168516250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957526
    },
    {
        "content": "<p>Mhm, because you need the output type to appear in two places</p>",
        "id": 168516255,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560957528
    },
    {
        "content": "<p>... at that point it's not <em>necessarily</em> easier than the more principled way</p>",
        "id": 168516266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957540
    },
    {
        "content": "<p>Indeed</p>",
        "id": 168516276,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560957545
    },
    {
        "content": "<p>Especially given that it's not actually the return type, but the output type of the return type</p>",
        "id": 168516307,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560957573
    },
    {
        "content": "<p>right</p>",
        "id": 168516314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957577
    },
    {
        "content": "<p>I have to say that I'm not entirely convinced that HIR-level desugaring is correct for async fn</p>",
        "id": 168516364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957602
    },
    {
        "content": "<p>not that I thikn we should rewrite that</p>",
        "id": 168516410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957608
    },
    {
        "content": "<p>(In general, I feel like some of the things we do at HIR level might be better done at HIR -&gt; MIR, though it'd require more duplication in the type-checker)</p>",
        "id": 168516448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957642
    },
    {
        "content": "<p><em>anyway</em> that's off topic</p>",
        "id": 168516451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> do you have a \"concise\" listing of the pending obligations?</p>",
        "id": 168516483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957677
    },
    {
        "content": "<p>I couldn't quite extract it from the log you posted</p>",
        "id": 168516488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957682
    },
    {
        "content": "<p>I guess I can try to get one</p>",
        "id": 168516493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957688
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>pending_obligations=[\nObligation(predicate=Binder(TraitPredicate(&lt;_#0t as std::marker::Sized&gt;)), cause=ObligationCause { span: src/test/ui/async-await/issue-54326.rs:4:19: 4:22, body_id: HirId { owner: DefIndex(12), local_id: 25 }, code: SizedReturnType }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, depth=0),\nObligation(predicate=Binder(TraitPredicate(&lt;_#0t as std::future::Future&gt;)), cause=ObligationCause { span: src/test/ui/async-await/issue-54326.rs:4:19: 4:22, body_id: HirId { owner: DefIndex(12), local_id: 25 }, code: SizedReturnType }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, depth=0),\nObligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_#0t], item_def_id: DefId(2:7110 ~ core[54d4]::future[0]::future[0]::Future[0]::Output[0]) }, i32)), cause=ObligationCause { span: src/test/ui/async-await/issue-54326.rs:4:19: 4:22, body_id: HirId { owner: DefIndex(12), local_id: 25 }, code: SizedReturnType }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, depth=0),\nObligation(predicate=Binder(TraitPredicate(&lt;_#1t as std::marker::Sized&gt;)), cause=ObligationCause { span: src/test/ui/async-await/issue-54326.rs:4:23: 10:2, body_id: HirId { owner: DefIndex(12), local_id: 25 }, code: ItemObligation(DefId(1:5180 ~ std[d43b]::future[0]::from_generator[0])) }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, depth=0),\nObligation(predicate=Binder(TraitPredicate(&lt;_#1t as std::ops::Generator&gt;)), cause=ObligationCause { span: src/test/ui/async-await/issue-54326.rs:4:23: 10:2, body_id: HirId { owner: DefIndex(12), local_id: 25 }, code: ItemObligation(DefId(1:5180 ~ std[d43b]::future[0]::from_generator[0])) }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, depth=0),\nObligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_#1t], item_def_id: DefId(2:1651 ~ core[54d4]::ops[0]::generator[0]::Generator[0]::Yield[0]) }, ())), cause=ObligationCause { span: src/test/ui/async-await/issue-54326.rs:4:23: 10:2, body_id: HirId { owner: DefIndex(12), local_id: 25 }, code: ItemObligation(DefId(1:5180 ~ std[d43b]::future[0]::from_generator[0])) }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, depth=0),\nObligation(predicate=WellFormed(_#1t), cause=ObligationCause { span: src/test/ui/async-await/issue-54326.rs:4:23: 10:2, body_id: HirId { owner: DefIndex(12), local_id: 25 }, code: MiscObligation }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, depth=0)\n]\n</pre></div>",
        "id": 168516631,
        "sender_full_name": "davidtwco",
        "timestamp": 1560957799
    },
    {
        "content": "<p>ok let me see if I can make sense of that :)</p>",
        "id": 168516709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957853
    },
    {
        "content": "<p>Only those with a <code>_#1t</code> are considered because <code>self_type_matches_expected_vid</code> filters out the others.</p>",
        "id": 168516763,
        "sender_full_name": "davidtwco",
        "timestamp": 1560957903
    },
    {
        "content": "<p>looks like</p>",
        "id": 168516794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>?0: Sized\n?0: Future\n&lt;?0 as Future&gt;::Output = i32\n?1: Sized\n?1: Generator\n&lt;?1 as Generator&gt;::Yield = ()\n?1: WF\n</pre></div>",
        "id": 168516799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957944
    },
    {
        "content": "<p>here <code>?0</code> is the (hidden) return type</p>",
        "id": 168516812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957956
    },
    {
        "content": "<p>and <code>?1</code> is the type of the argument</p>",
        "id": 168516815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957960
    },
    {
        "content": "<p>crucially, the link between <code>?0</code> and <code>?1</code> is absent -- which isn't too surprising to me</p>",
        "id": 168516861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957971
    },
    {
        "content": "<p>well, maybe a little</p>",
        "id": 168516869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957975
    },
    {
        "content": "<p>(here's the raw log that is a snippet from: <a href=\"https://gist.githubusercontent.com/davidtwco/2fa0aa796dc313bc7c90579b729b83ed/raw/4ca70a22274c61475e486354f583ec70bb5db257/gistfile1.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/davidtwco/2fa0aa796dc313bc7c90579b729b83ed/raw/4ca70a22274c61475e486354f583ec70bb5db257/gistfile1.txt\">https://gist.githubusercontent.com/davidtwco/2fa0aa796dc313bc7c90579b729b83ed/raw/4ca70a22274c61475e486354f583ec70bb5db257/gistfile1.txt</a>)</p>",
        "id": 168516880,
        "sender_full_name": "davidtwco",
        "timestamp": 1560957993
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_generator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generator</span><span class=\"o\">&lt;</span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Return</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168516892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958005
    },
    {
        "content": "<p>so clearly the input type is <code>T</code></p>",
        "id": 168516922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958037
    },
    {
        "content": "<p>I guess that the return type (from our perspective) is an \"opaque type\", so an <code>impl Future&lt;Output = T::Return&gt;</code></p>",
        "id": 168516938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958062
    },
    {
        "content": "<p>and that return type has to be unified with <code>?0</code></p>",
        "id": 168516951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958082
    },
    {
        "content": "<p>and then we have to try to solve <code>&lt;?0 as Future&gt;::Output = i32</code></p>",
        "id": 168517007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958105
    },
    {
        "content": "<p>which will create a <em>new</em> obligation that <code>&lt;?1 as Generator&gt;::Return = i32</code> eventually</p>",
        "id": 168517025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958131
    },
    {
        "content": "<p>so yeah it's pretty indirect to figure this out :) several steps down the line</p>",
        "id": 168517036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958143
    },
    {
        "content": "<p>and I'm understanding <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s comments better, because in particular the processing of the return type probably happens at the wrong time right now.</p>",
        "id": 168517049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958166
    },
    {
        "content": "<p>(does this all make sense so far?)</p>",
        "id": 168517063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958188
    },
    {
        "content": "<p>we <em>do</em> have some logic that does some creative stuff where we unify the return type (here, <code>impl Future</code>) with the expected type (here, <code>?0</code>) to try and figure out what it might mean for the arguments</p>",
        "id": 168517146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958226
    },
    {
        "content": "<p>I'm not super familiar with unification (or how the solving of an obligation happens, but I can leave that as a black box for now).</p>",
        "id": 168517171,
        "sender_full_name": "davidtwco",
        "timestamp": 1560958252
    },
    {
        "content": "<p>this is the </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"sd\">/// Unifies the output type with the expected type early, for more coercions</span>\n<span class=\"w\">    </span><span class=\"sd\">/// and forward type information on the input expressions.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">expected_inputs_for_expected_output</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                           </span><span class=\"n\">call_span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                           </span><span class=\"n\">expected_ret</span>: <span class=\"nc\">Expectation</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                           </span><span class=\"n\">formal_ret</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                           </span><span class=\"n\">formal_args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">                                           </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>function</p>",
        "id": 168517202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958280
    },
    {
        "content": "<p>the important thing is that this is speculative and preserves the shape but disconnects the resulting type variables from the original</p>",
        "id": 168517245,
        "sender_full_name": "eddyb",
        "timestamp": 1560958317
    },
    {
        "content": "<blockquote>\n<p>I'm not super familiar with unification</p>\n</blockquote>\n<p>ok. For our purposes, you can imagine that a <code>?T</code> variable is like a little mutable cell in one of two states:</p>\n<ul>\n<li>unbound (initially)</li>\n<li>bound to a type <code>U</code></li>\n</ul>",
        "id": 168517247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958319
    },
    {
        "content": "<p>once it gets bound, any reference to <code>?T</code> is kind of \"redirected\" to <code>U</code></p>",
        "id": 168517292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958327
    },
    {
        "content": "<p>because we can't <em>enforce</em> the expected type, we can only be guided by it</p>",
        "id": 168517294,
        "sender_full_name": "eddyb",
        "timestamp": 1560958329
    },
    {
        "content": "<p>(until we know the actual type and can try coercing it)</p>",
        "id": 168517304,
        "sender_full_name": "eddyb",
        "timestamp": 1560958340
    },
    {
        "content": "<p>hmm, we are already processing obligations in that code</p>",
        "id": 168517325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958360
    },
    {
        "content": "<p>oh, but only a subset</p>",
        "id": 168517341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958380
    },
    {
        "content": "<p>we should add some debug logging in there, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, that might help point a bit</p>",
        "id": 168517362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958400
    },
    {
        "content": "<p>Sorry, where?</p>",
        "id": 168517371,
        "sender_full_name": "davidtwco",
        "timestamp": 1560958418
    },
    {
        "content": "<p>the <code>expected_inputs_for_expected_output</code> function</p>",
        "id": 168517390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958435
    },
    {
        "content": "<p>I'm adding some in my local branch</p>",
        "id": 168517393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958439
    },
    {
        "content": "<p>in the meantime, that'd be a good function for us to talk through to help understand better what's going on</p>",
        "id": 168517450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958463
    },
    {
        "content": "<p>though maybe it'll have to be tomorrow -- should we shoot for 8am UTC-07:00 tomorrow again? I should probably get up and go wherever it is I am supposed to be</p>",
        "id": 168517466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560958488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> around?</p>",
        "id": 168603416,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1561042888
    },
    {
        "content": "<p>I’m around now sorry.</p>",
        "id": 168605241,
        "sender_full_name": "davidtwco",
        "timestamp": 1561044057
    },
    {
        "content": "<p>Had a small fire at work.</p>",
        "id": 168605253,
        "sender_full_name": "davidtwco",
        "timestamp": 1561044065
    },
    {
        "content": "<p>(digital fire, not real)</p>",
        "id": 168605272,
        "sender_full_name": "davidtwco",
        "timestamp": 1561044078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so I did some more digging into this, sorry for not writing back later -- my <em>impression</em> was that we <em>may</em> just need a somewhat smal PR here.</p>",
        "id": 168956092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561482117
    },
    {
        "content": "<p>That's good.</p>",
        "id": 168956141,
        "sender_full_name": "davidtwco",
        "timestamp": 1561482131
    },
    {
        "content": "<p>I was actually just looking for an issue to work on.</p>",
        "id": 168956146,
        "sender_full_name": "davidtwco",
        "timestamp": 1561482137
    },
    {
        "content": "<p>though one that makes me ever so mildly nervous (it has implications around the chalk strategy, I think)</p>",
        "id": 168956152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561482145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> to briefly update you on whatI had planned to do</p>",
        "id": 168958351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561483667
    },
    {
        "content": "<p>in the <a href=\"https://github.com/rust-lang/rust/blob/40ab9d2bd57a2203131abd723f7120e960299fae/src/librustc_typeck/check/mod.rs#L3248-L3255\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/40ab9d2bd57a2203131abd723f7120e960299fae/src/librustc_typeck/check/mod.rs#L3248-L3255\"><code>expected_inputs_for_expected_output</code></a> function...</p>",
        "id": 168959247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484226
    },
    {
        "content": "<p>...we <a href=\"https://github.com/rust-lang/rust/blob/40ab9d2bd57a2203131abd723f7120e960299fae/src/librustc_typeck/check/mod.rs#L3278-L3282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/40ab9d2bd57a2203131abd723f7120e960299fae/src/librustc_typeck/check/mod.rs#L3278-L3282\">create a temporary fulfillment context and try to fulfill various trait obligations</a>...</p>",
        "id": 168959292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484250
    },
    {
        "content": "<p>...but we are only fulfilling obligations that resulted from the subtyping rules</p>",
        "id": 168959312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484264
    },
    {
        "content": "<p>and not obliations that we already know to be required</p>",
        "id": 168959326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484275
    },
    {
        "content": "<p>I was going to -- at least experimentally, to start -- add a line like</p>",
        "id": 168959380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484286
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fulfill_cx</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">pending_obligations</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fulfill</span><span class=\"p\">.</span><span class=\"n\">register_predicate_obligation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168959447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484336
    },
    {
        "content": "<p>and see what happens :)</p>",
        "id": 168959453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484341
    },
    {
        "content": "<p>care to give it a try?</p>",
        "id": 168959457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561484344
    },
    {
        "content": "<p>Can do.</p>",
        "id": 168959950,
        "sender_full_name": "davidtwco",
        "timestamp": 1561484652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Fails to compile <code>proc_macro</code> with that change:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0631]: type mismatch in closure arguments\n   --&gt; src/libproc_macro/bridge/client.rs:298:29\n    |\n298 |               panic::set_hook(Box::new(move |info| {\n    |                               ^        ----------- found signature of `fn(&amp;std::panic::PanicInfo&lt;&#39;_&gt;) -&gt; _`\n    |  _____________________________|\n    | |\n299 | |                 let hide = BridgeState::with(|state| match state {\n300 | |                     BridgeState::NotConnected =&gt; false,\n301 | |                     BridgeState::Connected(_) | BridgeState::InUse =&gt; true,\n...   |\n305 | |                 }\n306 | |             }));\n    | |______________^ expected signature of `for&lt;&#39;r, &#39;s&gt; fn(&amp;&#39;r std::panic::PanicInfo&lt;&#39;s&gt;) -&gt; _`\n    |\n    = note: required for the cast to the object type `dyn for&lt;&#39;r, &#39;s&gt; std::ops::Fn(&amp;&#39;r std::panic::PanicInfo&lt;&#39;s&gt;) + std::marker::Send + std::marker::Sync`\n\nerror[E0271]: type mismatch resolving `for&lt;&#39;r, &#39;s&gt; &lt;[closure@src/libproc_macro/bridge/client.rs:298:38: 306:14 prev:_] as std::ops::FnOnce&lt;(&amp;&#39;r std::panic::PanicInfo&lt;&#39;s&gt;,)&gt;&gt;::Output == ()`\n   --&gt; src/libproc_macro/bridge/client.rs:298:29\n    |\n298 |               panic::set_hook(Box::new(move |info| {\n    |  _____________________________^\n299 | |                 let hide = BridgeState::with(|state| match state {\n300 | |                     BridgeState::NotConnected =&gt; false,\n301 | |                     BridgeState::Connected(_) | BridgeState::InUse =&gt; true,\n...   |\n305 | |                 }\n306 | |             }));\n    | |______________^ expected bound lifetime parameter, found concrete lifetime\n    |\n    = note: required for the cast to the object type `dyn for&lt;&#39;r, &#39;s&gt; std::ops::Fn(&amp;&#39;r std::panic::PanicInfo&lt;&#39;s&gt;) + std::marker::Send + std::marker::Sync`\n\nerror: aborting due to 2 previous errors\n</pre></div>",
        "id": 168968171,
        "sender_full_name": "davidtwco",
        "timestamp": 1561490200
    },
    {
        "content": "<p>d'oh :)</p>",
        "id": 168970931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> what is branch name?</p>",
        "id": 168970965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492277
    },
    {
        "content": "<p>I’ve not pushed it.</p>",
        "id": 168970997,
        "sender_full_name": "davidtwco",
        "timestamp": 1561492304
    },
    {
        "content": "<p>Unless you don’t mean Git branch?</p>",
        "id": 168971012,
        "sender_full_name": "davidtwco",
        "timestamp": 1561492318
    },
    {
        "content": "<p>It was just pasting those three lines below the three you linked previously.</p>",
        "id": 168971124,
        "sender_full_name": "davidtwco",
        "timestamp": 1561492379
    },
    {
        "content": "<p>I did mean git branch but yeah I could make the change independently</p>",
        "id": 168971146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561492393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> circling back to this, I guess i'll create a branch locally</p>",
        "id": 169901943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562617614
    },
    {
        "content": "<p>Cool, I’ve not looked at this since we last spoke.</p>",
        "id": 169902648,
        "sender_full_name": "davidtwco",
        "timestamp": 1562618166
    }
]