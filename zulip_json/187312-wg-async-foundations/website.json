[
    {
        "content": "<p>Hi, I'd like to update the async examples on the website around the release. I would like to rely only on code supplied by the rust project. will we ship some kind of demo executor or will futures-executor continue to exist?</p>",
        "id": 179919886,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1572950686
    },
    {
        "content": "<p>to my knowledge we are not currently planning on shipping a demo executor -- there is an open PR on rust-lang/rust to add an unstable one, but it doesn't look like it's going to land at least from my perspective</p>",
        "id": 179928870,
        "sender_full_name": "simulacrum",
        "timestamp": 1572958710
    },
    {
        "content": "<p>Hm. Okay. I'll see how to deal with that.</p>",
        "id": 179930091,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1572959704
    },
    {
        "content": "<p>Ah, and to be clear, it doesn't need to be in rust libstd.</p>",
        "id": 179943294,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1572968157
    },
    {
        "content": "<p>(everything not in libstd is sort of unofficial, right?)</p>",
        "id": 179945155,
        "sender_full_name": "simulacrum",
        "timestamp": 1572969251
    },
    {
        "content": "<p>I guess a dummy executor could be built but it'd just loop through all the futures and poll them... pretty simple, but super inefficient and I wouldn't point to it</p>",
        "id": 179945218,
        "sender_full_name": "simulacrum",
        "timestamp": 1572969288
    },
    {
        "content": "<p>maybe something like what <code>runtime</code> was meant to be could work here? or use tokio and async-std side by side? (There are other executors too though :/)</p>",
        "id": 179945274,
        "sender_full_name": "simulacrum",
        "timestamp": 1572969317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> there has been some discussion of including a simple <code>block_on</code> in libstd -- <a href=\"#narrow/stream/187312-wg-async-foundations/topic/block_on.20in.20std\" title=\"#narrow/stream/187312-wg-async-foundations/topic/block_on.20in.20std\">it was discussed here</a></p>",
        "id": 179962794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572979488
    },
    {
        "content": "<p>The need to create standalone examples might be sufficient motivation indeed</p>",
        "id": 179962827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572979504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes, that thread was for the PR <a href=\"https://github.com/rust-lang/rust/pull/65875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65875\">https://github.com/rust-lang/rust/pull/65875</a> that <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> mentioned</p>",
        "id": 180007649,
        "sender_full_name": "Matthias247",
        "timestamp": 1573024242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </p>\n<blockquote>\n<p>I guess a dummy executor could be built but it'd just loop through all the futures and poll them... pretty simple, but super inefficient and I wouldn't point to it</p>\n</blockquote>\n<p>I would not recommend that. I think it might lead to a few non ideal reactions:<br>\n- It gives the impression that async/await is unfinished<br>\n- It focusses too much on how Futures work under the hood, and not on what people can do with async/await<br>\n- It encourages people to write their own executors. And while that's an interesting thing for learning purposes - it's actually not something we should recommend people to spend their time on. There are already enough simple executors out there.</p>\n<p>In doubt I would just use <code>block_on</code> from futures-rs for demo purposes</p>",
        "id": 180007829,
        "sender_full_name": "Matthias247",
        "timestamp": 1573024561
    },
    {
        "content": "<p>Does futures-rs have an executor then? I was under the impression that wasn't the case.</p>",
        "id": 180023436,
        "sender_full_name": "simulacrum",
        "timestamp": 1573040393
    },
    {
        "content": "<p>Yes, it contains 3 different executors</p>",
        "id": 180031348,
        "sender_full_name": "Nemo157",
        "timestamp": 1573046774
    },
    {
        "content": "<p>A multi-threaded pool, a single-threaded “pool” and a trivial single-future executor for <code>block_on</code></p>",
        "id": 180031414,
        "sender_full_name": "Nemo157",
        "timestamp": 1573046825
    },
    {
        "content": "<p>interesting</p>",
        "id": 180034852,
        "sender_full_name": "simulacrum",
        "timestamp": 1573048998
    },
    {
        "content": "<p>that is... surprising to me</p>",
        "id": 180034857,
        "sender_full_name": "simulacrum",
        "timestamp": 1573049000
    },
    {
        "content": "<p>right now examples should use <code>futures::block_on</code>. someday hopefully we'll have a way to block a thread on a future in std, but (in my opinion) we need to gather a bit more feedback around the design of that first.</p>",
        "id": 180049991,
        "sender_full_name": "boats",
        "timestamp": 1573057859
    },
    {
        "content": "<p>K, okay, given the current discussions, I will no accept a code example that uses _any_ ecosystem library on the website.</p>",
        "id": 180056012,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1573061172
    },
    {
        "content": "<p>we should update <a href=\"https://rust-lang.github.io/compiler-team/working-groups/async-await/\" target=\"_blank\" title=\"https://rust-lang.github.io/compiler-team/working-groups/async-await/\">the page on the compiler-team website</a>, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, to redirect to wg-async-foundations, right?</p>",
        "id": 189059119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582663380
    },
    {
        "content": "<p>yeah</p>",
        "id": 189059154,
        "sender_full_name": "tmandry",
        "timestamp": 1582663406
    },
    {
        "content": "<p>I'll send you a change</p>",
        "id": 189060583,
        "sender_full_name": "tmandry",
        "timestamp": 1582664356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/compiler-team/pull/252\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/pull/252\">https://github.com/rust-lang/compiler-team/pull/252</a></p>",
        "id": 189061538,
        "sender_full_name": "tmandry",
        "timestamp": 1582665035
    },
    {
        "content": "<p>merged</p>",
        "id": 189061574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665069
    },
    {
        "content": "<p>I just copied over the \"current goal\" and \"roadmap\" stuff for now</p>",
        "id": 189061626,
        "sender_full_name": "tmandry",
        "timestamp": 1582665107
    },
    {
        "content": "<p>needs updating though</p>",
        "id": 189061632,
        "sender_full_name": "tmandry",
        "timestamp": 1582665111
    },
    {
        "content": "<p>but it's still roughly a good description</p>",
        "id": 189061651,
        "sender_full_name": "tmandry",
        "timestamp": 1582665122
    }
]