[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> meeting in 9 minutes</p>",
        "id": 216247566,
        "sender_full_name": "tmandry",
        "timestamp": 1605030671
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  okay let's get started</p>",
        "id": 216249271,
        "sender_full_name": "tmandry",
        "timestamp": 1605031321
    },
    {
        "content": "<p><a href=\"https://github.com/orgs/rust-lang/projects/2\">Project board</a></p>",
        "id": 216249381,
        "sender_full_name": "tmandry",
        "timestamp": 1605031357
    },
    {
        "content": "<p>Two things were fixed this week:</p>\n<ul>\n<li>Increasingly slow compilation as more levels of <code>async</code> are added in Rust 1.46 <a href=\"https://github.com/rust-lang/rust/issues/75992\">#75992</a></li>\n<li>ICE: compiler/rustc_typeck/src/check/closure.rs:608:18: async fn generator return type not an inference variable <a href=\"https://github.com/rust-lang/rust/issues/78654\">#78654</a></li>\n</ul>",
        "id": 216249521,
        "sender_full_name": "tmandry",
        "timestamp": 1605031417
    },
    {
        "content": "<p>hmm. I think there was another that wasn't on the board</p>",
        "id": 216249729,
        "sender_full_name": "tmandry",
        "timestamp": 1605031499
    },
    {
        "content": "<ul>\n<li>Improve lifetime name annotations for closures &amp; async functions <a href=\"https://github.com/rust-lang/rust/issues/76468\">#76468</a></li>\n<li>(not merged yet) Make it more clear what an about async fn's returns when referring to what it returns <a href=\"https://github.com/rust-lang/rust/issues/76765\">#76765</a></li>\n</ul>",
        "id": 216249825,
        "sender_full_name": "tmandry",
        "timestamp": 1605031539
    },
    {
        "content": "<p>Any other updates for ongoing work?</p>",
        "id": 216250053,
        "sender_full_name": "tmandry",
        "timestamp": 1605031614
    },
    {
        "content": "<p>I opened the <code>must_not_await_lint</code> RFC proper: <a href=\"https://github.com/rust-lang/rfcs/pull/3014\">https://github.com/rust-lang/rfcs/pull/3014</a></p>",
        "id": 216250123,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1605031649
    },
    {
        "content": "<p>the libs team has provided some feedback on the Streams RFC -- mostly an ask to clarify the rationale behind a few decisions more sharply</p>",
        "id": 216250174,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605031677
    },
    {
        "content": "<p>well, members from the libs team -- not yet down to <del>a vote yet</del> the thing with the checkboxes?</p>",
        "id": 216250236,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605031688
    },
    {
        "content": "<p>Yeah, Niko and I both responded to some of the feedback, waiting to hear back</p>",
        "id": 216250474,
        "sender_full_name": "tmandry",
        "timestamp": 1605031786
    },
    {
        "content": "<p>Okay, let's move on to triage</p>",
        "id": 216250580,
        "sender_full_name": "tmandry",
        "timestamp": 1605031817
    },
    {
        "content": "<p><a href=\"https://github.com/search?q=org%3Arust-lang+is%3Aissue+label%3AA-async-await+is%3Aopen+-label%3AAsyncAwait-Triaged&amp;type=Issues\">Uncategorized issues</a></p>",
        "id": 216250606,
        "sender_full_name": "tmandry",
        "timestamp": 1605031824
    },
    {
        "content": "<p>Pretty big backlog and we didn't get through it last week either</p>",
        "id": 216250676,
        "sender_full_name": "tmandry",
        "timestamp": 1605031855
    },
    {
        "content": "<p>I'm going to start from the bottom (oldest issues) this time</p>",
        "id": 216250695,
        "sender_full_name": "tmandry",
        "timestamp": 1605031863
    },
    {
        "content": "<h2>Backtraces shouldn't show stack frames generated by the implementation of async-await <a href=\"https://github.com/rust-lang/rust/issues/74779\">#74779</a></h2>",
        "id": 216250727,
        "sender_full_name": "tmandry",
        "timestamp": 1605031879
    },
    {
        "content": "<p>I think this duplicates another issue</p>",
        "id": 216250789,
        "sender_full_name": "tmandry",
        "timestamp": 1605031914
    },
    {
        "content": "<p><code>#[rustc_backtrace_skip]</code> seems like a pretty cool proposal -- would def be nice if the generated stack traces could be collapsed</p>",
        "id": 216251023,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032026
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/65978\">#65978</a> is the one I'm thinking of</p>",
        "id": 216251042,
        "sender_full_name": "tmandry",
        "timestamp": 1605032036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E11.2E10/near/216251023\">said</a>:</p>\n<blockquote>\n<p><code>#[rustc_backtrace_skip]</code> seems like a pretty cool proposal -- would def be nice if the generated stack traces could be collapsed</p>\n</blockquote>\n<p>Yeah, though I'm not sure how you'd implement it. We use external libraries to produce backtraces, not sure if they support something like this</p>",
        "id": 216251311,
        "sender_full_name": "tmandry",
        "timestamp": 1605032166
    },
    {
        "content": "<p>This is something we're also looking at in Fuchsia, but our thinking so far has been that we'd make it nicer after the backtrace was produced by pattern matching on function names</p>",
        "id": 216251403,
        "sender_full_name": "tmandry",
        "timestamp": 1605032213
    },
    {
        "content": "<p>Would that change once we move from libbacktrace -&gt; gimli?</p>",
        "id": 216251481,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032254
    },
    {
        "content": "<p>(not that we need to figure that out right now, haha -- mostly curious)</p>",
        "id": 216251586,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032290
    },
    {
        "content": "<p>I might be mistaken but I think gimli is only for parsing debuginfo, which is useful for symbolizing, not actually getting the stack of function calls</p>",
        "id": 216251661,
        "sender_full_name": "tmandry",
        "timestamp": 1605032336
    },
    {
        "content": "<p>hmmm interesting; I remembered something about replacing libbacktrace for backtrace generation, but I might be mistaken too -- ah well</p>",
        "id": 216251734,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032373
    },
    {
        "content": "<p>Yeah.. <code>libunwind</code> is the piece I'm thinking of</p>",
        "id": 216251876,
        "sender_full_name": "tmandry",
        "timestamp": 1605032420
    },
    {
        "content": "<p>but.. you could do it at the symbolization point</p>",
        "id": 216251887,
        "sender_full_name": "tmandry",
        "timestamp": 1605032426
    },
    {
        "content": "<p>that's essentially what we're thinking of for Fuchsia</p>",
        "id": 216251910,
        "sender_full_name": "tmandry",
        "timestamp": 1605032436
    },
    {
        "content": "<p>ahh, yes that's it! -- gotcha</p>",
        "id": 216251953,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032453
    },
    {
        "content": "<p>and if there were a way to mark a symbol for skipping in debuginfo that'd work</p>",
        "id": 216251961,
        "sender_full_name": "tmandry",
        "timestamp": 1605032457
    },
    {
        "content": "<p>anyway, I think this issue is probably a duplicate but it has some useful ideas that I'll comment on</p>",
        "id": 216252004,
        "sender_full_name": "tmandry",
        "timestamp": 1605032480
    },
    {
        "content": "<p>next issue is</p>\n<h2><del>Support hiding specific stackframes from backtrace by marking on the original functions. <a href=\"https://github.com/rust-lang/rust/issues/68336\">#68336</a></del></h2>",
        "id": 216252045,
        "sender_full_name": "tmandry",
        "timestamp": 1605032495
    },
    {
        "content": "<p>hmm, it doesn't seem tagged for us though? -- not quite seeing how it's related to async/await?</p>",
        "id": 216252407,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032650
    },
    {
        "content": "<p>oops</p>",
        "id": 216252411,
        "sender_full_name": "tmandry",
        "timestamp": 1605032651
    },
    {
        "content": "<p>no, I mixed up my tabs :)</p>",
        "id": 216252421,
        "sender_full_name": "tmandry",
        "timestamp": 1605032657
    },
    {
        "content": "<h2>Incomprehensible type error when defining getter and setter <a href=\"https://github.com/rust-lang/rust/issues/78337\">#78337</a></h2>",
        "id": 216252449,
        "sender_full_name": "tmandry",
        "timestamp": 1605032668
    },
    {
        "content": "<p>that's the one</p>",
        "id": 216252453,
        "sender_full_name": "tmandry",
        "timestamp": 1605032669
    },
    {
        "content": "<p>haha</p>",
        "id": 216252512,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032695
    },
    {
        "content": "<p>I uhh, wonder if this has something to do with it: <a href=\"https://docs.rs/async-raft/0.5.5/async_raft/raft/struct.Raft.html\">https://docs.rs/async-raft/0.5.5/async_raft/raft/struct.Raft.html</a></p>",
        "id": 216252734,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032792
    },
    {
        "content": "<p>that's 4 generic type parameters</p>",
        "id": 216252751,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032803
    },
    {
        "content": "<p>hmm</p>",
        "id": 216252774,
        "sender_full_name": "tmandry",
        "timestamp": 1605032813
    },
    {
        "content": "<p>yeah without an MVCE it's hard to see what's going on</p>",
        "id": 216252782,
        "sender_full_name": "tmandry",
        "timestamp": 1605032819
    },
    {
        "content": "<p>looking at the error it's about what I'd expect to see imo; mostly the layers and layers of generics make it hard to decipher</p>",
        "id": 216252862,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032846
    },
    {
        "content": "<p>well</p>",
        "id": 216252920,
        "sender_full_name": "tmandry",
        "timestamp": 1605032882
    },
    {
        "content": "<p>or well, perhaps worth clarifying: is the bug that the error message is hard to read, or that it doesn't compile?</p>",
        "id": 216252988,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605032904
    },
    {
        "content": "<p>we have code that's supposed to produce better looking errors, but it only works in certain cases</p>",
        "id": 216252996,
        "sender_full_name": "tmandry",
        "timestamp": 1605032910
    },
    {
        "content": "<p>I think it was filed for the latter reason</p>",
        "id": 216253041,
        "sender_full_name": "tmandry",
        "timestamp": 1605032935
    },
    {
        "content": "<p>but the issue may actually be that the error message is hard to read :)</p>",
        "id": 216253071,
        "sender_full_name": "tmandry",
        "timestamp": 1605032948
    },
    {
        "content": "<p>I'm actually wondering if first-class async traits will solve this</p>",
        "id": 216253258,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605033025
    },
    {
        "content": "<p>one of the issues of the error is that there are up to 25 lifetimes per trace</p>",
        "id": 216253282,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605033042
    },
    {
        "content": "<p>which are added by the <code>async_trait</code> crate</p>",
        "id": 216253305,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605033055
    },
    {
        "content": "<p>if it was part of the lang, then that would no longer be an issue</p>",
        "id": 216253342,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605033075
    },
    {
        "content": "<p>I see a lot of lifetimes on types that look like generator objects</p>",
        "id": 216253480,
        "sender_full_name": "tmandry",
        "timestamp": 1605033126
    },
    {
        "content": "<p>so I think many of them would be there in any case</p>",
        "id": 216253525,
        "sender_full_name": "tmandry",
        "timestamp": 1605033154
    },
    {
        "content": "<p>but yeah we should generate a better error message</p>",
        "id": 216253543,
        "sender_full_name": "tmandry",
        "timestamp": 1605033163
    },
    {
        "content": "<p>I can't prioritize this until we have a more minimal example to work with, though :/</p>",
        "id": 216253594,
        "sender_full_name": "tmandry",
        "timestamp": 1605033189
    },
    {
        "content": "<p>unless someone wants to minimize it</p>",
        "id": 216253623,
        "sender_full_name": "tmandry",
        "timestamp": 1605033198
    },
    {
        "content": "<p>..okay, we're at time</p>",
        "id": 216253700,
        "sender_full_name": "tmandry",
        "timestamp": 1605033230
    },
    {
        "content": "<p>I'll try to do some further triage in this stream later today</p>",
        "id": 216253775,
        "sender_full_name": "tmandry",
        "timestamp": 1605033248
    },
    {
        "content": "<p>though I said that last week and didn't get to it =)</p>",
        "id": 216253815,
        "sender_full_name": "tmandry",
        "timestamp": 1605033266
    },
    {
        "content": "<p>Thanks for coming, everyone! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 216253829,
        "sender_full_name": "tmandry",
        "timestamp": 1605033271
    },
    {
        "content": "<p>thanks for the meeting! ^^</p>",
        "id": 216253860,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1605033285
    }
]