[
    {
        "content": "<p>( Subject matter: <a href=\"http://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\">http://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/</a> )</p>\n<blockquote>\n<p>Second, writing <code>for&lt;'s&gt; D::GetUser&lt;'s&gt;</code> is kind of grody, weâ€™re obviously going to want more compact syntax (this is really an issue around generic associated types in general).</p>\n</blockquote>\n<p><code>d: &amp;impl Database&lt;GetUser&lt;'_&gt;: Send&gt;&gt;</code> :P</p>",
        "id": 179130483,
        "sender_full_name": "centril",
        "timestamp": 1572104223
    },
    {
        "content": "<blockquote>\n<p>Complication #2c. Listing specific associated types reveals implementation details</p>\n</blockquote>\n<p>It's a semver hazard in either direction (maybe you want to remove the <code>Send</code> bound in the future but then implementors can assume less)</p>",
        "id": 179130678,
        "sender_full_name": "centril",
        "timestamp": 1572104556
    },
    {
        "content": "<blockquote>\n<p>For example, you could imagine supporting async bounds, so that we might write async Send instead of just Send:</p>\n</blockquote>\n<p>When I hear \"async bound\", I assume something related to effect-polymorphism, but this doesn't seem to be that?</p>",
        "id": 179130870,
        "sender_full_name": "centril",
        "timestamp": 1572104902
    },
    {
        "content": "<blockquote>\n<p>When I hear \"async bound\", I assume something related to effect-polymorphism, but this doesn't seem to be that?</p>\n</blockquote>\n<p>Nope, it would be something else. I probably shouldn't have even added concrete syntax, especially syntax I don't know if I would even like. Maybe something like <code>S::async: Send</code> or <code>S::*: Send</code> .. who knows. The point would be a bound that is applied to the GATs within the trait without naming them individually.</p>",
        "id": 179350262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572368562
    },
    {
        "content": "<blockquote>\n<p>It's a semver hazard in either direction (maybe you want to remove the <code>Send</code> bound in the future but then implementors can assume less)</p>\n</blockquote>\n<p>This is true on traits, but my example was not a trait, but just a function that was listing its where-clauses -- in that context, I don't think it's a semver hazard to get more narrow? but maybe I'm overlooking something</p>",
        "id": 179350317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572368588
    },
    {
        "content": "<p>That said, any kind of \"all the things!\" feature has a hazard if the trait should grow more items</p>",
        "id": 179350357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572368606
    },
    {
        "content": "<blockquote>\n<p>I assume something related to effect-polymorphism</p>\n</blockquote>\n<p>all this reminds me of coeffects as well, since it's kind of a requirement on the context <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 179360278,
        "sender_full_name": "lqd",
        "timestamp": 1572374181
    }
]