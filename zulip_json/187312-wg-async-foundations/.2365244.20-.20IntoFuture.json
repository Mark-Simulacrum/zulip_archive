[
    {
        "content": "<p>So re. <a href=\"https://github.com/rust-lang/rust/issues/65244\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65244\">#65244</a> -- maybe we should request a mini-RFC for the community consensus aspect of this and ideally the RFC includes some motivational examples... cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span></p>",
        "id": 177740792,
        "sender_full_name": "centril",
        "timestamp": 1570644706
    },
    {
        "content": "<p>We can land it as unstable in parallel as well or something</p>",
        "id": 177741005,
        "sender_full_name": "centril",
        "timestamp": 1570644841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also feel free to reassign to me for the remaining code review if you are busy -- mostly wanted to cc you ^^</p>",
        "id": 177741107,
        "sender_full_name": "centril",
        "timestamp": 1570644890
    },
    {
        "content": "<p>Yes, I agree we need some kind of report. Not sure if a full RFC is needed, but we need more than a PR.</p>",
        "id": 177741293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570645002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  A more experimental approach perhaps: We land it as unstable for now and allow use cases to be collected in the wild -- then eventually we have a stabilization report which includes use cases + the usual stuff</p>",
        "id": 177741484,
        "sender_full_name": "centril",
        "timestamp": 1570645128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I'd be in favor of that, although the biggest unstable usecase I'd be interested in we can't test on nightly since it'd be insta-stable (tuples)</p>",
        "id": 177744561,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1570647187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> what would be the semantics of <code>(a, b).await</code>?</p>\n<p>Also, I'm good with landing it as an unstable experiment and having a stabilization report, yes.</p>",
        "id": 177769236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570667903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in the old <code>IntoFuture</code>, <code>(a, b).await</code> was equivalent to today's <code>join!(a, b)</code></p>",
        "id": 177769253,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1570667942
    },
    {
        "content": "<p>OK, that's what I hoped you would say</p>",
        "id": 177769285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570667978
    },
    {
        "content": "<p>Personally i'd also be fine to move fairly quickly to stabilize -- give it a bit of time to see if there is some unexpected interaction</p>",
        "id": 177769347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570668035
    },
    {
        "content": "<p>but we've got two strong use cases <em>and</em> plenty of precedent around the whole <em>into</em> design</p>",
        "id": 177769359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570668063
    },
    {
        "content": "<p>(IntoIterator, of course)</p>",
        "id": 177769362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570668074
    },
    {
        "content": "<p>That doesn't seem like an entirely obvious choice to me that should be made for the user; could also be equivalent to <code>(a.await, b.await)</code>.<br>\nIt's also noteworthy that <code>IntoIterator</code> is not implemented for tuples (zip vs. cartesian products) and neither do we implement a similar construct for <code>Fn</code></p>",
        "id": 177769452,
        "sender_full_name": "centril",
        "timestamp": 1570668184
    },
    {
        "content": "<p>yup, I agree it's not super intuitive</p>",
        "id": 177769605,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1570668427
    },
    {
        "content": "<blockquote>\n<p>ui/async-await/async-fn-size-moved-locals.rs has noticed a mem::size_of_val change of 4 bytes on joined. I suppose this change adds a new local that impact layout?</p>\n</blockquote>\n<p>This seems ungreat tho? -- Seems like an optimization should be able to deal with it but maybe we want that first?</p>",
        "id": 177769607,
        "sender_full_name": "centril",
        "timestamp": 1570668429
    },
    {
        "content": "<p>I think <code>join!</code> is much more discoverable</p>",
        "id": 177769611,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1570668439
    },
    {
        "content": "<p>I'm not sure I understood the desired usecases correctly-- it seems like a big hammer to omit a single <code>.build()</code> at the end of a builder or similar</p>",
        "id": 177769630,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1570668474
    },
    {
        "content": "<p>But I really don't hold a strong opinion on this</p>",
        "id": 177769673,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1570668492
    },
    {
        "content": "<p>(Aside: not a massive fan of <code>join!</code> as a name; it suggests <code>μ : T (T a) → T a</code>... ^^)</p>",
        "id": 177769908,
        "sender_full_name": "centril",
        "timestamp": 1570668773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> should we block on not regressing size of futures tho?</p>",
        "id": 177769933,
        "sender_full_name": "centril",
        "timestamp": 1570668822
    },
    {
        "content": "<p>Feels like something that a bit of inlining would fix in the common case of <code>already_a_future.await</code></p>",
        "id": 177770030,
        "sender_full_name": "centril",
        "timestamp": 1570668917
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 177770050,
        "sender_full_name": "centril",
        "timestamp": 1570668944
    },
    {
        "content": "<p>if that's the only regression I wouldn't worry about it</p>",
        "id": 177774530,
        "sender_full_name": "tmandry",
        "timestamp": 1570675556
    },
    {
        "content": "<p>the size of that type is already 3084</p>",
        "id": 177774576,
        "sender_full_name": "tmandry",
        "timestamp": 1570675573
    },
    {
        "content": "<p>I mean presumably other types of lesser size will also get bigger, but if that's the only test that changes.. <em>shrug</em> the layout optimization is already something I want to change again</p>",
        "id": 177774599,
        "sender_full_name": "tmandry",
        "timestamp": 1570675634
    },
    {
        "content": "<p>and since it's probably an NP-complete problem, let's accept that any change that improves a majority of cases might regress some others</p>",
        "id": 177774649,
        "sender_full_name": "tmandry",
        "timestamp": 1570675729
    },
    {
        "content": "<p>IOW, I want to make changes in the future that might make some generator sizes worse, and I don't want to be blocked by that :)</p>",
        "id": 177774664,
        "sender_full_name": "tmandry",
        "timestamp": 1570675782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> doesn't this increase the size of  async fn by <code>4 * N_await_points</code>?</p>",
        "id": 177774732,
        "sender_full_name": "centril",
        "timestamp": 1570675899
    },
    {
        "content": "<p>not the way I read it</p>",
        "id": 177774779,
        "sender_full_name": "tmandry",
        "timestamp": 1570675946
    },
    {
        "content": "<p>it sounded like a single future in one test changed</p>",
        "id": 177774783,
        "sender_full_name": "tmandry",
        "timestamp": 1570675960
    },
    {
        "content": "<p>I haven't looked at the implementation at all though</p>",
        "id": 177774793,
        "sender_full_name": "tmandry",
        "timestamp": 1570675999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> the implementation is just <code>match expr { ... }</code> =&gt; <code>match IntoFuture::into_future(expr) { ... }</code></p>",
        "id": 177774797,
        "sender_full_name": "centril",
        "timestamp": 1570676033
    },
    {
        "content": "<p>well, I or someone should probably look into what's going on</p>",
        "id": 177774873,
        "sender_full_name": "tmandry",
        "timestamp": 1570676101
    },
    {
        "content": "<p>maybe tomorrow</p>",
        "id": 177774887,
        "sender_full_name": "tmandry",
        "timestamp": 1570676122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203289\">@boats</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>Hmm; personally it seems to me that an FCP for nightly is a bit counter productive towards experimentation</p>",
        "id": 177794264,
        "sender_full_name": "centril",
        "timestamp": 1570700801
    },
    {
        "content": "<p>One question would be how this interacts with futures 0.3, it seems like quite a few of the utilities could be updated to use <code>IntoFuture</code> where they currently use <code>Future</code>, e.g. <code>flatten</code></p>",
        "id": 177794839,
        "sender_full_name": "Nemo157",
        "timestamp": 1570701325
    },
    {
        "content": "<p>Maybe having <code>futures-util</code> 0.4 after only a couple of months would be a good test of the semver stability crate divisions</p>",
        "id": 177794909,
        "sender_full_name": "Nemo157",
        "timestamp": 1570701379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> I would personally like to see <code>.flatten()</code> and other functor/monadic/... combinators be moved to the standard library</p>",
        "id": 177795019,
        "sender_full_name": "centril",
        "timestamp": 1570701499
    },
    {
        "content": "<p>just a note: <code>IntoFuture</code> introduces a new type projection which could be <code>!Send</code></p>",
        "id": 177797673,
        "sender_full_name": "boats",
        "timestamp": 1570704184
    },
    {
        "content": "<p>its possible this could interact with error messages pretty badly</p>",
        "id": 177797683,
        "sender_full_name": "boats",
        "timestamp": 1570704197
    },
    {
        "content": "<p>whereas today there's no projection from the type of the expression you await</p>",
        "id": 177797695,
        "sender_full_name": "boats",
        "timestamp": 1570704215
    },
    {
        "content": "<p>Yeah that's pretty clear from <a href=\"https://github.com/rust-lang/rust/pull/65244/files#diff-81f33f28041996539ee55e2f9c099f90\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65244/files#diff-81f33f28041996539ee55e2f9c099f90\">https://github.com/rust-lang/rust/pull/65244/files#diff-81f33f28041996539ee55e2f9c099f90</a></p>",
        "id": 177798859,
        "sender_full_name": "centril",
        "timestamp": 1570705381
    },
    {
        "content": "<p>yea exactly, I'd like to see some diagnostic improvements there (at least before stabilizing this extension)</p>",
        "id": 177803222,
        "sender_full_name": "boats",
        "timestamp": 1570709840
    },
    {
        "content": "<p>the reason i filed a PR instead of an RFC is because the RFC already mentioned it, and i couldn't find any concrete reason why it wasn't included.</p>",
        "id": 177837234,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1570731046
    },
    {
        "content": "<p>yea figured as much</p>",
        "id": 177837285,
        "sender_full_name": "centril",
        "timestamp": 1570731074
    },
    {
        "content": "<p>as for the implementation, i don't really know why i'm seeing an explosion of <code>Into</code>, is there flags i can pass to get better diagnostics? or just turn on the log firehose?</p>",
        "id": 177837419,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1570731137
    },
    {
        "content": "<blockquote>\n<p>Hmm; personally it seems to me that an FCP for nightly is a bit counter productive towards experimentation</p>\n</blockquote>\n<p>You think? I think it makes sense for us to \"decide\" to experiment, and FCP seems ok for that. This seems like a case where I'd be ok with not \"waiting\", though. I think what I mostly mean is that I do think we should have <em>some</em> \"check-in\" process and we should log the decision to experiment as a kind of decision.</p>",
        "id": 177922282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810136
    },
    {
        "content": "<p>Truth is I think this is a more general question that we should discuss as part of figuring out how we revamp the feature dev process to be more \"incremental\" (which is part of what I'm calling project groups).</p>",
        "id": 177922346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess I think deciding via FCP to experiment for something rather small is ungreat</p>",
        "id": 177922478,
        "sender_full_name": "centril",
        "timestamp": 1570810281
    },
    {
        "content": "<p>and that a meeting was enough</p>",
        "id": 177922485,
        "sender_full_name": "centril",
        "timestamp": 1570810289
    },
    {
        "content": "<blockquote>\n<p>I think <code>join!</code> is much more discoverable</p>\n</blockquote>\n<p>Yeah it's true. Though I continue to strongly prefer <code>foo.join(bar)</code>. I guess I just don't love macros or something.  Anyway this seems like a separable topic -- to me, the builders alone justify the hook, which doesn't strike me as <em>overly</em> complex? Basically <code>await</code> uses a trait to create something you can await. Feels natural, just as <code>for</code> you uses a trait to create something you can iterate.</p>",
        "id": 177922491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810292
    },
    {
        "content": "<blockquote>\n<p>and that a meeting was enough</p>\n</blockquote>\n<p>yes, I agree a meeting is probably enough</p>",
        "id": 177922501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810303
    },
    {
        "content": "<p>but OTOH the diagnostics regressions are also ungreat</p>",
        "id": 177922504,
        "sender_full_name": "centril",
        "timestamp": 1570810304
    },
    {
        "content": "<p>that seems like it  a separate concern</p>",
        "id": 177922514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810313
    },
    {
        "content": "<p>true</p>",
        "id": 177922527,
        "sender_full_name": "centril",
        "timestamp": 1570810321
    },
    {
        "content": "<p>that just seems like a quality question</p>",
        "id": 177922554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810322
    },
    {
        "content": "<p>we shouldn't let PRs land that regress quality of stable compiler full stop (or at least not without discussion)</p>",
        "id": 177922595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> guess the question is \"are we OK regressing diagnostics on nightly for a while\"?</p>",
        "id": 177922612,
        "sender_full_name": "centril",
        "timestamp": 1570810354
    },
    {
        "content": "<p>it's not only nightly is the main concern :)</p>",
        "id": 177922623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810364
    },
    {
        "content": "<p>(to me)</p>",
        "id": 177922636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810371
    },
    {
        "content": "<p>at least if I understand</p>",
        "id": 177922642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810375
    },
    {
        "content": "<p>sorry, what I mean by that is</p>",
        "id": 177922651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810382
    },
    {
        "content": "<p>the diagnostics are regressed for anybody using await -- of course it will only affect nightly until it rides the trains</p>",
        "id": 177922663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810393
    },
    {
        "content": "<p>but that would put us \"on the hook\" to fix</p>",
        "id": 177922673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  something something <code>if sess.is_nightly_compiler() { change_lowering(); }</code> ^^</p>",
        "id": 177922674,
        "sender_full_name": "centril",
        "timestamp": 1570810401
    },
    {
        "content": "<p>Yeah, I'm not into that :) at least not without some thought about why the diagnostics are regressing</p>",
        "id": 177922710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810432
    },
    {
        "content": "<p>I'd be happy to put that on my queue and investigate next wed when I have async-await time</p>",
        "id": 177922725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810442
    },
    {
        "content": "<p>(currently, my async-await time is Wed mornings)</p>",
        "id": 177922772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810453
    },
    {
        "content": "<p>that sounds better <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 177922782,
        "sender_full_name": "centril",
        "timestamp": 1570810459
    },
    {
        "content": "<p>assign to me?</p>",
        "id": 177922805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810479
    },
    {
        "content": "<p>I'll add a note</p>",
        "id": 177922814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810483
    },
    {
        "content": "<p>(if somebody else wants to investigate in the meantime, sgtm)</p>",
        "id": 177922821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810491
    },
    {
        "content": "<p>it's already r? you?</p>",
        "id": 177922831,
        "sender_full_name": "centril",
        "timestamp": 1570810498
    },
    {
        "content": "<p>ok good</p>",
        "id": 177922891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810550
    },
    {
        "content": "<p>I couldn't remember :)</p>",
        "id": 177922894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570810553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>  we reassigned <a href=\"https://github.com/rust-lang/rust/pull/65244\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65244\">https://github.com/rust-lang/rust/pull/65244</a> to you to consider the generator size stuff and stuff <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 178416675,
        "sender_full_name": "centril",
        "timestamp": 1571342753
    }
]