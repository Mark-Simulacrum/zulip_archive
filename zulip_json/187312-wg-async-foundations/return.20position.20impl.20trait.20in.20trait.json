[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I were talking about possibly using RPIT-in-trait to implement async fn in trait. It doesn't look like that's implemented right now. Do you have a sense of how difficult it would be to implement / what the hurdles are?</p>",
        "id": 260160328,
        "sender_full_name": "tmandry",
        "timestamp": 1635957145
    },
    {
        "content": "<p>I'm thinking about how we can give users of an impl using RPITIT more information about the underlying type (following <a href=\"https://github.com/rust-lang/rfcs/pull/3193#issuecomment-965505149\">Gankra's comment</a>). It seems like we can allow publishing this information directly from the impl. For example, one could write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">NewIntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">DoubleEndedIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when the trait definition <em>only guarantees <code>impl Iterator&lt;Item = Self::Item&gt;</code></em>. This seems very doable given that we already know how to leak auto traits; we're just opting in to more \"leakage\" from individual impls.</p>",
        "id": 261544200,
        "sender_full_name": "tmandry",
        "timestamp": 1637003362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> yes, that could work, in general we've been considering a move towards \"impl is allowed to refine the trait\". I quite like this idea if you pare it with specialization, in particular.</p>",
        "id": 261545381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1637003900
    },
    {
        "content": "<p>Because that allows us to construct 'intermediate impls' that give stronger requirements</p>",
        "id": 261545430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1637003919
    },
    {
        "content": "<p>That idea probably extends well to impls returning a concrete type, too, as a form of \"complete leakage\", should they choose to do so</p>\n<p>Doesn't necessarily work for async fn in traits, though one could imagine so; you wouldn't be able to do Trait::Type to get the output type there in a generic context but that's not always crucial anyway, and you can always define a separate supertrait with <code>type Foo = ...</code> for this case to wrap concrete impls with concrete return types.</p>",
        "id": 261547372,
        "sender_full_name": "simulacrum",
        "timestamp": 1637004802
    },
    {
        "content": "<p>We should be able to support an \"on/off-ramp\" from <code>async fn foo()</code> to <code>fn foo() -&gt; impl Future&lt;Output = ()&gt;</code> for both the trait and impl independently, which would allow the impl to refine the return type (if, say, your future happens to impl <code>Debug</code>)</p>",
        "id": 261564855,
        "sender_full_name": "tmandry",
        "timestamp": 1637013199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> yes. I think that now that we have the RPITIT RFC we could probably amend the existing static async fn to be a bit more \"permissive\" here</p>",
        "id": 261699706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1637093346
    }
]