[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, I have a UB question in regard to the optimization for <a href=\"https://github.com/rust-lang/rust/issues/52924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52924\">#52924</a></p>",
        "id": 165576700,
        "sender_full_name": "tmandry",
        "timestamp": 1557788191
    },
    {
        "content": "<p>Not sure if you're the one to ask, but you seem most likely to know :)</p>",
        "id": 165576707,
        "sender_full_name": "tmandry",
        "timestamp": 1557788210
    },
    {
        "content": "<p>If a <code>drop</code> panics, is it safe to assume that the value is <code>StorageDead</code>?</p>",
        "id": 165576725,
        "sender_full_name": "tmandry",
        "timestamp": 1557788231
    },
    {
        "content": "<p>or could an unwind handler actually inspect the value?</p>",
        "id": 165576743,
        "sender_full_name": "tmandry",
        "timestamp": 1557788256
    },
    {
        "content": "<p>I know we certainly cannot drop the value _again_ (see <a href=\"https://github.com/rust-lang/rust/issues/14875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/14875\">#14875</a>)</p>",
        "id": 165576802,
        "sender_full_name": "tmandry",
        "timestamp": 1557788296
    },
    {
        "content": "<p>but that issue doesn't seem to say anything about anything else we could do with the value</p>",
        "id": 165576834,
        "sender_full_name": "tmandry",
        "timestamp": 1557788347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> well fwiw this works today, but MIRI complains because of the panic so I'm not sure that's enough to say anything: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=92f97259d8b64bc5cc0c3ec97076cab9\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=92f97259d8b64bc5cc0c3ec97076cab9\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=92f97259d8b64bc5cc0c3ec97076cab9</a></p>",
        "id": 165582143,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557793880
    },
    {
        "content": "<p>hmm ok</p>",
        "id": 165582602,
        "sender_full_name": "tmandry",
        "timestamp": 1557794466
    },
    {
        "content": "<p>well I found a different way to avoid regressing the size of that one test case, so maybe it's not that important ;)</p>",
        "id": 165582614,
        "sender_full_name": "tmandry",
        "timestamp": 1557794492
    },
    {
        "content": "<p>but if we can assume it, it still makes some of the other futures even smaller</p>",
        "id": 165582672,
        "sender_full_name": "tmandry",
        "timestamp": 1557794528
    },
    {
        "content": "<blockquote>\n<p>If a <code>drop</code> panics, is it safe to assume that the value is <code>StorageDead</code>?</p>\n</blockquote>\n<p><code>StorageDead</code> is for locals only, if the value was in a <code>Box</code> there's no such thing</p>",
        "id": 165599134,
        "sender_full_name": "RalfJ",
        "timestamp": 1557818188
    },
    {
        "content": "<blockquote>\n<p>I know we certainly cannot drop the value _again_ (see <a href=\"https://github.com/rust-lang/rust/issues/14875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/14875\">#14875</a>)</p>\n</blockquote>\n<p>you cannot drop it again in general, but specific code knowing the specific drop impl might do that</p>",
        "id": 165599141,
        "sender_full_name": "RalfJ",
        "timestamp": 1557818211
    },
    {
        "content": "<p>like, I can drop an <code>i32</code> as often as I want, knowing that that is a NOP</p>",
        "id": 165599160,
        "sender_full_name": "RalfJ",
        "timestamp": 1557818254
    },
    {
        "content": "<p>but in general I think there are many open questions around drop and panics, also see <a href=\"https://github.com/rust-lang/rust/issues/60611\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60611\">https://github.com/rust-lang/rust/issues/60611</a></p>",
        "id": 165599206,
        "sender_full_name": "RalfJ",
        "timestamp": 1557818291
    },
    {
        "content": "<p>what is the optimization you have in mind?</p>",
        "id": 165599235,
        "sender_full_name": "RalfJ",
        "timestamp": 1557818390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yes, I mean is it safe to assume the local itself is <code>StorageDead</code></p>",
        "id": 165640778,
        "sender_full_name": "tmandry",
        "timestamp": 1557853648
    },
    {
        "content": "<p>To ask another way: Is it UB to inspect the contents of a local, after <code>drop</code> on that local panics?</p>",
        "id": 165640872,
        "sender_full_name": "tmandry",
        "timestamp": 1557853701
    },
    {
        "content": "<p>I guess TL;DR is also \"is my code example above UB\"</p>",
        "id": 165642214,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557854598
    },
    {
        "content": "<blockquote>\n<p>To ask another way: Is it UB to inspect the contents of a local, after <code>drop</code> on that local panics?</p>\n</blockquote>\n<p>I don't think we can say that in general -- I am not sure through which mechanism this UB would arise.<br>\nI guess you also want <em>writes</em> to that memory to be UB, so just making it uninitialized is not sufficient for your purpose?</p>",
        "id": 165642496,
        "sender_full_name": "RalfJ",
        "timestamp": 1557854777
    },
    {
        "content": "<p>\"killing the storage and invalidating all pointers\" is what <code>StorageDead</code> is for.</p>",
        "id": 165642576,
        "sender_full_name": "RalfJ",
        "timestamp": 1557854843
    },
    {
        "content": "<p>why do you want to tie this analysis to drop instead of <code>StorageDead</code>?</p>",
        "id": 165642597,
        "sender_full_name": "RalfJ",
        "timestamp": 1557854862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah, writes would also need to be UB</p>",
        "id": 165642834,
        "sender_full_name": "tmandry",
        "timestamp": 1557855004
    },
    {
        "content": "<p>mainly, I want it to simplify the MIR generation</p>",
        "id": 165642862,
        "sender_full_name": "tmandry",
        "timestamp": 1557855018
    },
    {
        "content": "<p>you are exactly asking for <code>StorageDead</code> semantics then</p>",
        "id": 165642878,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855029
    },
    {
        "content": "<p>I wouldn't know how to make <code>drop</code> have that -- <em>in particular</em> if the drop didnt even complete</p>",
        "id": 165642894,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855046
    },
    {
        "content": "<p>FWIW I also need a way to mark things storagedead in code manually without moving them-- TLDR i want to make <code>drop</code> more magic ;)</p>",
        "id": 165642957,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557855089
    },
    {
        "content": "<p>I don't like magic ;)</p>",
        "id": 165642977,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855107
    },
    {
        "content": "<p>but I have actually brought up a non-moving version of <code>mem::forget</code> in a discussion once^^</p>",
        "id": 165643038,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855131
    },
    {
        "content": "<p>actually, I need to change the MIR generation regardless, and I'm not 100% sure what changes I'm allowed to make...</p>",
        "id": 165643044,
        "sender_full_name": "tmandry",
        "timestamp": 1557855133
    },
    {
        "content": "<p>some kind of intrinsic</p>",
        "id": 165643051,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855139
    },
    {
        "content": "<p>in particular it isn't clear in which parts we decide not to generate <code>StorageDead</code> purely as an optimization, and which parts are due to semantics</p>",
        "id": 165643114,
        "sender_full_name": "tmandry",
        "timestamp": 1557855196
    },
    {
        "content": "<p>I'm afraid I don't know either :/ as far as I am concerned, where we insert <code>StorageDead</code> is part of our spec -- we get to make that choice, and that <em>defines</em> which code has UB. but we better document our choice well.</p>",
        "id": 165643176,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855240
    },
    {
        "content": "<p>fair enough</p>",
        "id": 165643280,
        "sender_full_name": "tmandry",
        "timestamp": 1557855287
    },
    {
        "content": "<p>having it be part of our spec that the semantics are different for generators would probably be bad XD</p>",
        "id": 165643298,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557855301
    },
    {
        "content": "<p>agreed :)</p>",
        "id": 165643326,
        "sender_full_name": "tmandry",
        "timestamp": 1557855315
    },
    {
        "content": "<p>yeah sounds like it would be nice if functions and generators would be consistent about this :D</p>",
        "id": 165643337,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855324
    },
    {
        "content": "<blockquote>\n<p>I wouldn't know how to make <code>drop</code> have that</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> can you elaborate on your concern here?</p>",
        "id": 165643347,
        "sender_full_name": "tmandry",
        "timestamp": 1557855333
    },
    {
        "content": "<p>it's less a concern and more literally \"I dont know how to define a semantics that does this\". <code>drop</code> is almost a normal function call for Miri, just invoked by a dedicated MIR terminator instead of <code>Call</code>.</p>",
        "id": 165643441,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855375
    },
    {
        "content": "<p>there's no magic for <code>drop</code> and I quite like that :D keeps the spec simpler and easier to reason about (for compiler and unsafe code authors alike)</p>",
        "id": 165643479,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855409
    },
    {
        "content": "<p>hmm, yes, but eliding <code>StorageDead</code> in some cases certainly makes this harder to reason about</p>",
        "id": 165643561,
        "sender_full_name": "tmandry",
        "timestamp": 1557855462
    },
    {
        "content": "<p>..let me try and remember why this matters :)</p>",
        "id": 165643653,
        "sender_full_name": "tmandry",
        "timestamp": 1557855492
    },
    {
        "content": "<blockquote>\n<p>I guess TL;DR is also \"is my code example above UB\"</p>\n</blockquote>\n<p>I <em>think</em> if Miri supported panics it would reject this code based on Stacked Borrows considerations -- the call to <code>drop</code> involves a mutable borrow of the local, which kills all previously created pointers.</p>",
        "id": 165643695,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855531
    },
    {
        "content": "<p>Whether that is a happy accident or something one can derive a guarantee from, I am not sure.^^</p>",
        "id": 165643712,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855543
    },
    {
        "content": "<p>also the mutable borrow for<code>drop</code> is a bit special, so it might or might not do what you want here</p>",
        "id": 165643825,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855604
    },
    {
        "content": "<p>but we could reasonably define it to act like an <code>&amp;mut</code> would</p>",
        "id": 165643836,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855613
    },
    {
        "content": "<p>That sounds like the guarantee I would want here</p>",
        "id": 165643837,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557855615
    },
    {
        "content": "<p>you can simulate this effect as follows: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bb17a99761dc14aecb6aed29ff62c5bc\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bb17a99761dc14aecb6aed29ff62c5bc\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bb17a99761dc14aecb6aed29ff62c5bc</a></p>",
        "id": 165643883,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855665
    },
    {
        "content": "<p>(where the <code>let _val = &amp;mut st;</code> emulates the borrow that would happen for the drop)</p>",
        "id": 165643907,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855686
    },
    {
        "content": "<p>Right, so today if we <code>drop</code> a local and the drop panics, then along the cleanup path (where we continue dropping all other locals in scope) we never generate <code>StorageDead</code> for any local on that path</p>",
        "id": 165643941,
        "sender_full_name": "tmandry",
        "timestamp": 1557855721
    },
    {
        "content": "<p>and then we <code>resume</code> (the unwinding)</p>",
        "id": 165644006,
        "sender_full_name": "tmandry",
        "timestamp": 1557855753
    },
    {
        "content": "<blockquote>\n<p>Right, so today if we <code>drop</code> a local and the drop panics, then along the cleanup path (where we continue dropping all other locals in scope) we never generate <code>StorageDead</code> for any local on that path</p>\n</blockquote>\n<p>also doesn't the panic hook get called before we even get to the cleanup path?</p>",
        "id": 165644050,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855784
    },
    {
        "content": "<p>not sure what the evaluation order is here</p>",
        "id": 165644073,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855810
    },
    {
        "content": "<p>hm, I would think so, yes</p>",
        "id": 165644173,
        "sender_full_name": "tmandry",
        "timestamp": 1557855851
    },
    {
        "content": "<p>in that case a <code>StorageDead</code> on the cleanup path would be too late anyway</p>",
        "id": 165644200,
        "sender_full_name": "RalfJ",
        "timestamp": 1557855872
    },
    {
        "content": "<p>Right. On second thought, for my use case, I only care about StorageDead for locations reachable <em>within the function</em></p>",
        "id": 165644377,
        "sender_full_name": "tmandry",
        "timestamp": 1557855985
    },
    {
        "content": "<p>Right now, my analysis pass thinks that all these locals are still <code>StorageLive</code> along the cleanup path</p>",
        "id": 165644599,
        "sender_full_name": "tmandry",
        "timestamp": 1557856137
    },
    {
        "content": "<p>even for locals in disjoint scopes in the source code</p>",
        "id": 165644740,
        "sender_full_name": "tmandry",
        "timestamp": 1557856210
    },
    {
        "content": "<p>(this affects whether we can safely overlap them in the generator layout)</p>",
        "id": 165644809,
        "sender_full_name": "tmandry",
        "timestamp": 1557856258
    },
    {
        "content": "<p>So, for the purposes of my analysis, I <em>think</em> it should be valid to assume that once <code>drop</code> returns (along the return edge or the unwind edge), the local that was dropped is now <code>StorageDead</code></p>",
        "id": 165644893,
        "sender_full_name": "tmandry",
        "timestamp": 1557856311
    },
    {
        "content": "<p>This actually doesn't preclude inspecting the local from within the panic hook</p>",
        "id": 165644959,
        "sender_full_name": "tmandry",
        "timestamp": 1557856329
    },
    {
        "content": "<p>(so, sorry for posing the wrong question :) )</p>",
        "id": 165645003,
        "sender_full_name": "tmandry",
        "timestamp": 1557856353
    },
    {
        "content": "<p>Equivalently (from my perspective), we can generate the <code>StorageDead</code> statements to reflect this</p>",
        "id": 165645122,
        "sender_full_name": "tmandry",
        "timestamp": 1557856442
    },
    {
        "content": "<p>It sounds like doing this would be better from miri's perspective</p>",
        "id": 165645186,
        "sender_full_name": "tmandry",
        "timestamp": 1557856461
    },
    {
        "content": "<p>But might impact performance :(</p>",
        "id": 165645196,
        "sender_full_name": "tmandry",
        "timestamp": 1557856469
    },
    {
        "content": "<p>Is this making sense <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ?</p>",
        "id": 165645227,
        "sender_full_name": "tmandry",
        "timestamp": 1557856491
    },
    {
        "content": "<p>Yes, that sounds right to me.</p>",
        "id": 165645292,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557856561
    },
    {
        "content": "<blockquote>\n<p>So, for the purposes of my analysis, I <em>think</em> it should be valid to assume that once <code>drop</code> returns (along the return edge or the unwind edge), the local that was dropped is now <code>StorageDead</code></p>\n</blockquote>\n<p>do you mean \"sufficient to assume\"?</p>",
        "id": 165650409,
        "sender_full_name": "RalfJ",
        "timestamp": 1557859932
    },
    {
        "content": "<p>so, let me try to paraphrase: you think that it makes sense for our surface language spec to basically say that right after the <code>drop</code> comes back (on both the return and the unwind edge), there is a <code>StorageDead</code>. And that in turn you say is sufficient for your analysis to be as precise as you want it to be. You are fine with the storage hook inspecting stuff, which is actually allowed as that happens before the unwind edge is taken, i.e. before the <code>StorageDead</code> happens (ignoring Stacked Borrows concerns here). However, you are worried that actually materializing these <code>StorageDead</code> has a negative performance impact.<br>\nIs that accurate?</p>",
        "id": 165650631,
        "sender_full_name": "RalfJ",
        "timestamp": 1557860117
    },
    {
        "content": "<p>I agree that it seems reasonable to say that we have a <code>StorageDead</code> for locals that just got dropped. I don't know your analysis so I cannot say what this entails for you, but I view <code>StorageDead</code> as basically acting like <code>free</code> would for the heap -- after that, there's no way to ever access the memory that used to back this local again (and if <code>StorageLive</code> happens later, that's a new location, the old pointers remain dangling).<br>\nWhat is the performance impact you are worried about?</p>",
        "id": 165650821,
        "sender_full_name": "RalfJ",
        "timestamp": 1557860238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yes, that sounds accurate</p>",
        "id": 165660232,
        "sender_full_name": "tmandry",
        "timestamp": 1557866544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> materializing <code>StorageDead</code> after both edges of a <code>drop</code> sometimes means we need to keep around more basic blocks, in addition to more statements</p>",
        "id": 165660336,
        "sender_full_name": "tmandry",
        "timestamp": 1557866635
    },
    {
        "content": "<p>I haven't run the profiler with that change specifically, but when I made a change to add <code>StorageDead</code> for <em>non-<code>Drop</code></em> locals along paths where they used to be elided, the <a href=\"https://perf.rust-lang.org/compare.html?start=004c549a73122a9867de4f64ac727deb95d426a5&amp;end=faed5e266ce824ddee6fff7bd061d96f7795efbc\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=004c549a73122a9867de4f64ac727deb95d426a5&amp;end=faed5e266ce824ddee6fff7bd061d96f7795efbc\">performance hit</a> was pretty bad</p>",
        "id": 165660563,
        "sender_full_name": "tmandry",
        "timestamp": 1557866770
    },
    {
        "content": "<p>(so we had to do it for generators only, to enable the optimization without sacrificing performance)</p>",
        "id": 165660591,
        "sender_full_name": "tmandry",
        "timestamp": 1557866799
    },
    {
        "content": "<p>anyway, I'm inferring that we'll see a similar hit if I materialize these extra <code>StorageDead</code>s, but I'm not 100% sure :)</p>",
        "id": 165660623,
        "sender_full_name": "tmandry",
        "timestamp": 1557866829
    },
    {
        "content": "<p>also, for those locals we had to emit <code>StorageDrop</code> because otherwise the information was just not in the MIR</p>",
        "id": 165661452,
        "sender_full_name": "tmandry",
        "timestamp": 1557867362
    },
    {
        "content": "<p>for locals which are <code>drop</code> we can infer it</p>",
        "id": 165661527,
        "sender_full_name": "tmandry",
        "timestamp": 1557867386
    },
    {
        "content": "<p>although it's quite messy conceptually to be handling these two differently</p>",
        "id": 165661554,
        "sender_full_name": "tmandry",
        "timestamp": 1557867410
    },
    {
        "content": "<p>there isn't anything too surprising about it, but it pushes the complexity down to the consumers of MIR</p>",
        "id": 165661901,
        "sender_full_name": "tmandry",
        "timestamp": 1557867615
    },
    {
        "content": "<p>If new guarantees are added, this should be summarized and raised with the lang team</p>",
        "id": 165667305,
        "sender_full_name": "centril",
        "timestamp": 1557871835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> it's a guarantee to the compiler, not people who are writing rust</p>",
        "id": 165668253,
        "sender_full_name": "tmandry",
        "timestamp": 1557872609
    },
    {
        "content": "<p>though I'm not sure if this distinction matters</p>",
        "id": 165668254,
        "sender_full_name": "tmandry",
        "timestamp": 1557872611
    },
    {
        "content": "<p>Probably not</p>",
        "id": 165668261,
        "sender_full_name": "centril",
        "timestamp": 1557872625
    },
    {
        "content": "<p>It would be good to phrase the guarantee succinctly in some issue and say why it is needed</p>",
        "id": 165668327,
        "sender_full_name": "centril",
        "timestamp": 1557872660
    },
    {
        "content": "<p>and what problems it may cause</p>",
        "id": 165668338,
        "sender_full_name": "centril",
        "timestamp": 1557872674
    },
    {
        "content": "<p>Sure, I'll open an issue</p>",
        "id": 165668341,
        "sender_full_name": "tmandry",
        "timestamp": 1557872681
    },
    {
        "content": "<p>I don't anticipate it being controversial, but it would be good to have it written down succinctly as you say</p>",
        "id": 165668353,
        "sender_full_name": "tmandry",
        "timestamp": 1557872702
    },
    {
        "content": "<p>This is basically documenting certain assumptions that the compiler already seems to make</p>",
        "id": 165668605,
        "sender_full_name": "tmandry",
        "timestamp": 1557872921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> The assumption is that once <code>drop</code> returns, whether it succeeds or panics, you can't access the local you tried to <code>drop</code></p>",
        "id": 165668771,
        "sender_full_name": "tmandry",
        "timestamp": 1557873098
    },
    {
        "content": "<p>..and doing so would cause UB</p>",
        "id": 165668843,
        "sender_full_name": "tmandry",
        "timestamp": 1557873135
    },
    {
        "content": "<p>Is this something the lang team actually needs to discuss?</p>",
        "id": 165668860,
        "sender_full_name": "tmandry",
        "timestamp": 1557873155
    },
    {
        "content": "<p>This only applies to the MIR drop terminator, not drops in general</p>",
        "id": 165668956,
        "sender_full_name": "Zoxc",
        "timestamp": 1557873251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> true, but don't most drops involve a MIR drop terminator?</p>",
        "id": 165669133,
        "sender_full_name": "tmandry",
        "timestamp": 1557873455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I cc'd lang on <a href=\"https://github.com/rust-lang/rust/issues/60840\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60840\">#60840</a></p>",
        "id": 165670302,
        "sender_full_name": "tmandry",
        "timestamp": 1557874846
    }
]