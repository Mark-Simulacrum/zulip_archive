[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Still trying to understand what you meant by \"other side disappearing\" in today's meeting. Is the issue that your future stick around until it's polled again (which is when you get the error and future is complete) and that could potentially be a very long time?</p>",
        "id": 235843707,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1619185983
    },
    {
        "content": "<p>I think the chat is a good example</p>",
        "id": 235845628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619186703
    },
    {
        "content": "<p>If I am chatting with someone and they close their connection</p>",
        "id": 235845649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619186711
    },
    {
        "content": "<p>the \"other side\" has disappeared</p>",
        "id": 235845681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619186720
    },
    {
        "content": "<p>another would be:</p>",
        "id": 235845704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619186728
    },
    {
        "content": "<p>if I am preparing the result for some HTTP request and the connection is closed</p>",
        "id": 235845761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619186749
    },
    {
        "content": "<p>right so the issue is that you'd like to be notified as soon as other side disappears and not end up doing a lot of processing for no reason?</p>",
        "id": 235847220,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1619187277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400241\">@Zeeshan Ali</span> in general, yes, but i imagine you might not want your code to die <em>right away</em></p>",
        "id": 235855137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190094
    },
    {
        "content": "<p>this is kind of the caching example</p>",
        "id": 235855153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190098
    },
    {
        "content": "<p>I think lock poisoning is another good example</p>",
        "id": 235855203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190108
    },
    {
        "content": "<p>the reason we <em>have</em> lock poisoning is because if there is a panic while I hold the mutex</p>",
        "id": 235855316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190124
    },
    {
        "content": "<p>chances are that I left things in an incomplete state</p>",
        "id": 235855345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190130
    },
    {
        "content": "<p>and the next person to acquire the mutex wants to propagate that panic</p>",
        "id": 235855371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190136
    },
    {
        "content": "<p>(this was the design, at least)</p>",
        "id": 235855410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190142
    },
    {
        "content": "<p>try to tear down all the things related to that broken state</p>",
        "id": 235855439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190147
    },
    {
        "content": "<p>in an async context, though, you need a way to <em>guard against that</em></p>",
        "id": 235855491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190156
    },
    {
        "content": "<p>e.g., if I hold an async mutex and I am doing stuff in it</p>",
        "id": 235855529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190164
    },
    {
        "content": "<p>and then I get canceled part way through at some await point</p>",
        "id": 235855565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190171
    },
    {
        "content": "<p>what happens to the next person who acquires that mutex?</p>",
        "id": 235855612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190180
    },
    {
        "content": "<p>either they panic, or else they see broken data</p>",
        "id": 235855678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190189
    },
    {
        "content": "<p>might be better if. could say \"while i'm holding this async mutex, plese don't cancel me\"</p>",
        "id": 235855746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190199
    },
    {
        "content": "<p>(or, more to the point, if the <em>async mutex</em> could say that)</p>",
        "id": 235855856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190224
    },
    {
        "content": "<p>(synchronous drop makes that hard, of course)</p>",
        "id": 235855894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for explaining. I think I misunderstood \"the other side\" as something completely external to the system. Now it makes more sense. :)</p>",
        "id": 235860889,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1619191622
    }
]