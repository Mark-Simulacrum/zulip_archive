[
    {
        "content": "<p>So I've made it a decent ways into getting <code>async fn</code>return types to lower using <code>existential type</code> directly rather than going through the existing machinery for <code>-&gt; impl Trait</code></p>",
        "id": 160737488,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552520384
    },
    {
        "content": "<p>however, I've hit some bits that I'm not quite sure the best way to resolve and I wanted to post about them here while I thought to check if anyone had any brilliant ideas</p>",
        "id": 160737546,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552520421
    },
    {
        "content": "<p>One of them is that the return type for an <code>async fn</code> can itself be an <code>impl Trait</code></p>",
        "id": 160737559,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552520442
    },
    {
        "content": "<p>today we lower the return type using the function's DefId in order to resolve its generic parameters</p>",
        "id": 160737575,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552520475
    },
    {
        "content": "<p>Ideally it would shift to (at least conceptually) have its parent generics provided by the <code>existential type</code> used for async fn</p>",
        "id": 160737598,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552520517
    },
    {
        "content": "<p>however, we assume in a bunch of places that <code>impl Trait</code> types have a parent that is a function (<em>specifically a function</em>) in order to pull out its generics</p>",
        "id": 160737658,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552520567
    },
    {
        "content": "<p>and changing all of that feels rather more intrusive than what I'd originally hoped.</p>",
        "id": 160737667,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552520583
    },
    {
        "content": "<p>One option would be to leave <code>impl_trait_fn</code> for the <code>ExistTy</code> set to the parenting function, which would cause it to pick up generic parameters from it directly</p>",
        "id": 160738071,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552521037
    },
    {
        "content": "<p>But I haven't tried that yet, so I'm not sure what it'll destroy ;)</p>",
        "id": 160738088,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552521065
    },
    {
        "content": "<p>Sounds like having the extension to allow nested <code>impl Trait</code> in existential types would be useful</p>",
        "id": 160754752,
        "sender_full_name": "Nemo157",
        "timestamp": 1552543965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> presumably that would desugar away at lowering time, which is where I am anyways</p>",
        "id": 160797886,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552580970
    },
    {
        "content": "<p>But I think the fix I was suggesting worked</p>",
        "id": 160797894,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552580979
    },
    {
        "content": "<p>the generics still seem to be getting picked up properly</p>",
        "id": 160797912,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552580988
    },
    {
        "content": "<p>This function is an interesting case:<br>\n<code>fn foo&lt;'a&gt;(x: &amp;u8, _: &amp;'a u8) -&gt; (&amp;u8, &amp;'a u8) { (x, &amp;5) }</code></p>",
        "id": 160835364,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552609179
    },
    {
        "content": "<p>because it compiles if you remove the second argument</p>",
        "id": 160835370,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552609186
    },
    {
        "content": "<p>so we actually need to track whether or not named lifetimes are used in the arguments when deciding whether or not it's valid to replace elided lifetimes in the output with the name of the fresh lifetime we introduced for the argument-position elided lifetime</p>",
        "id": 160835438,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552609226
    },
    {
        "content": "<p>If there's exactly one fresh elided lifetime introduced in the arguments, we replace the non-dyn elided lifetimes in the output</p>",
        "id": 160835466,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552609275
    },
    {
        "content": "<p>but if there are zero or more than one fresh lifetimes introduced, or if any named lifetimes are introduced, we want to error if we see an elided lifetime in the output</p>",
        "id": 160835524,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552609330
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-lang/rust/pull/59286\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59286\">https://github.com/rust-lang/rust/pull/59286</a> with the refactoring we discussed</p>\n<div class=\"codehilite\"><pre><span></span>existential type Foo&lt;&#39;a, &#39;b&gt;:;\nfn foo&lt;&#39;a, &#39;b&gt;(_: &amp;&#39;a u8, _: &amp;&#39;b u8) -&gt; Foo&lt;&#39;a, &#39;b&gt; { () }\n</pre></div>",
        "id": 161110889,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552957100
    },
    {
        "content": "<p>however this code doesn't compile ^</p>",
        "id": 161110891,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552957107
    },
    {
        "content": "<p>so naturally the <code>async fn</code> that I just made desugar to that also does not compile XD</p>",
        "id": 161110898,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552957121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do either of you have thoughts on the best approach to fixing that error? I'm not aware of a \"minimal intersection of the following lifetimes\" function or a way to write it today, but I can continue to hunt around.</p>",
        "id": 161110981,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552957213
    },
    {
        "content": "<p>Do you have a <code>-Ztreat-err-as-bug</code> backtrace on that error?</p>",
        "id": 161130093,
        "sender_full_name": "oli",
        "timestamp": 1552983838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> </p>\n<blockquote>\n<p>WIP because this doesn't currently successfully allow multiple<br>\nargument-position elided lifetimes since existential type<br>\ndoesn't yet support multiple lifetimes where neither outlive<br>\nthe other:</p>\n</blockquote>\n<p>Oh yeah, that's true =) argh</p>",
        "id": 161159098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008216
    },
    {
        "content": "<p>for some reason we overlooked this earlier, I guess</p>",
        "id": 161159167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> to confirm, though, if you have a relationship between them (e.g., <code>'a: 'b</code>) then it <em>does</em> work?</p>",
        "id": 161159227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008297
    },
    {
        "content": "<p>To put this another way, there were a variety of lifetime-related limitations, I <em>think</em> this refactoring should improve at least <em>some</em> of them, right? (and hopefully fixes the interactions with dyn trait objects)</p>",
        "id": 161159405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008439
    },
    {
        "content": "<p>Yes, this refactoring fixes a number of things</p>",
        "id": 161159528,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553008519
    },
    {
        "content": "<p>Anyway, there is no \"minimal intersection\" of the lifetimes fn to find, indeed. That particular example is not a very good one in terms of showing the challenge.</p>",
        "id": 161159534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008526
    },
    {
        "content": "<p>i.e., the \"hidden\" type there is <code>()</code>, iiuc</p>",
        "id": 161159545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008541
    },
    {
        "content": "<p>which of course has no lifetimes at all</p>",
        "id": 161159546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008544
    },
    {
        "content": "<p>iirc this error .. hmm. I had better look back and not rely on my memory.</p>",
        "id": 161159556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008557
    },
    {
        "content": "<p>I'm not at my computer just now but would be happy to supply more info when I finish breakfast :)</p>",
        "id": 161159649,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553008613
    },
    {
        "content": "<p>the relevant code (which I am re-reading now) is <a href=\"https://github.com/rust-lang/rust/blob/ef4d1c419525e1510aa650e2bec0d8f7449a2130/src/librustc/infer/opaque_types/mod.rs#L273-L400\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ef4d1c419525e1510aa650e2bec0d8f7449a2130/src/librustc/infer/opaque_types/mod.rs#L273-L400\">this fn, <code>constrain_opaque_types</code></a></p>",
        "id": 161159835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008781
    },
    {
        "content": "<p>I <em>think</em> we could change how this check works</p>",
        "id": 161159942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008835
    },
    {
        "content": "<p>In a way that <em>might</em> help</p>",
        "id": 161159951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553008844
    },
    {
        "content": "<p>Yeah. It seems to me that the thing you want is to express that the existential type may not outlive either lifetime, with no particular relationship between the two</p>",
        "id": 161160118,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553008981
    },
    {
        "content": "<p>Whereas today it seems like it's trying to identify a single lifetime that the existential type outlives</p>",
        "id": 161160171,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553009033
    },
    {
        "content": "<p>OK, so, here is what I am presently thinking</p>",
        "id": 161160225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009049
    },
    {
        "content": "<p>the <em>challenge</em> here is that sometimes we don't have enough constraints in inference</p>",
        "id": 161160286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009090
    },
    {
        "content": "<blockquote>\n<p>Whereas today it seems like it's trying to identify a single lifetime that the existential type outlives</p>\n</blockquote>\n<p>yes, it is-- this was a simplification we put in to delay having to deal with this problem :)</p>",
        "id": 161160321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009110
    },
    {
        "content": "<p>but I guess the bill comes due</p>",
        "id": 161160330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009125
    },
    {
        "content": "<p>or maybe we can skip it a bit longer :)</p>",
        "id": 161160339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009134
    },
    {
        "content": "<p>can we dig a bit into the <code>async fn</code> example..</p>",
        "id": 161160356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009161
    },
    {
        "content": "<p>so we have something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">async_fn_multiple_args</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_y</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161160409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009174
    },
    {
        "content": "<p>this gets desugared to something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">async_fn_multiple_args</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// say</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161160470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009228
    },
    {
        "content": "<p>so the hidden type will be some kind of generator with two upvars</p>",
        "id": 161160503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009261
    },
    {
        "content": "<p>hmm, yeah, this is the hard case :)</p>",
        "id": 161160597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009304
    },
    {
        "content": "<p>the generator type will be something like <code>Generator&lt;&amp;'0 u8, &amp;'1 u8&gt;</code> for some fresh variables <code>'0</code> and <code>'1</code></p>",
        "id": 161160632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009342
    },
    {
        "content": "<p>and we ought to have some constraints that (e.g.) </p>\n<div class=\"codehilite\"><pre><span></span>&amp;&#39;a u8 &lt;: &amp;&#39;0 u8\n&amp;&#39;b u8 &lt;: &amp;&#39;1 u8\n</pre></div>\n\n\n<p>based on the fact that the first captured variable (<code>x</code>) has type <code>&amp;'a u8</code> etc</p>",
        "id": 161160694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009388
    },
    {
        "content": "<p>which means we have region constraints</p>\n<div class=\"codehilite\"><pre><span></span>&#39;a: &#39;0\n&#39;b: &#39;1\n</pre></div>",
        "id": 161160768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009413
    },
    {
        "content": "<p>the challenge here is that <code>'0</code> could (for example) be inferred to <code>'empty</code></p>",
        "id": 161160779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009427
    },
    {
        "content": "<p>which will give us an error later on</p>",
        "id": 161160789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009438
    },
    {
        "content": "<p>specifically, in <a href=\"https://github.com/rust-lang/rust/blob/ef4d1c419525e1510aa650e2bec0d8f7449a2130/src/librustc/infer/opaque_types/mod.rs#L425\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ef4d1c419525e1510aa650e2bec0d8f7449a2130/src/librustc/infer/opaque_types/mod.rs#L425\">the <code>infer_opaque_definition_from_instantiation</code> function</a> -- it is looking to make sure that all the regions in the hidden type are <code>'a</code> or <code>'b</code> or otherwise something externally nameable</p>",
        "id": 161160842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009491
    },
    {
        "content": "<blockquote>\n<p>the challenge here is that <code>'0</code> could (for example) be inferred to <code>'empty</code></p>\n</blockquote>\n<p>this is probably not quite right, there is probably some bound that it must outlive the fn body</p>",
        "id": 161160852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009501
    },
    {
        "content": "<p>so <code>'0</code> and <code>'1</code> would get inferred to the fn body, but that's not an \"externally nameable region\", which is why we would get an error</p>",
        "id": 161160873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009521
    },
    {
        "content": "<p>so this is why we are looking to add a constraint like <code>'0: 'a</code> etc. But that's a bit .. tricky for us to do. The easy case is when there is some \"minimal\" region amongst the set of named regions -- then we can just make sure everything at least outlives <em>that</em></p>",
        "id": 161161015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009598
    },
    {
        "content": "<p>but what we really <em>want</em> is a constraint like</p>\n<div class=\"codehilite\"><pre><span></span>(&#39;0: &#39;a || &#39;0: &#39;b)\n</pre></div>\n\n\n<p>since choosing <code>'0: 'b</code> would lead to an error, we'd pick the first half.</p>",
        "id": 161161034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009619
    },
    {
        "content": "<p>the region solver doesn't really like <code>||</code>, but I think we could plausibly extend it to handle this specific case better</p>",
        "id": 161161049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009634
    },
    {
        "content": "<p>this was the work I was hoping to put off =)</p>",
        "id": 161161061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553009640
    },
    {
        "content": "<p>However, I could imagine some kind of simple check -- the idea would be that we have constraints of the form <code>'0 in ('a || 'b)</code>, which means \"<code>'0</code> must be one of the following regions\". We can then do an elaboration step where we look over the relations to try and rule things out. So, for example, <code>'a: '0</code> means that <code>'0 = 'b</code> is going to be an error. If we can reduce that set from <code>in</code> to a singleton set (as we can do here), then we can easily handle it.</p>\n<p>This is a bit tricky because it's not really how our inference normally operates, it doesn't fit in <em>super</em> naturally. (Also, we'd have to integrate it into NLL too, but I guess it would work quite similarly.)</p>",
        "id": 161161825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553010119
    },
    {
        "content": "<p>(Perhaps those constraints are more like <code>'0: ('a || 'b)</code>, which is a subset of equality.)</p>",
        "id": 161161887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553010152
    },
    {
        "content": "<p>e.g., <code>'0 = 'static</code> would also be ok</p>",
        "id": 161161891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553010156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you still want to chat here?</p>",
        "id": 161174390,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553017961
    },
    {
        "content": "<p>(following up from your comment in the mtg)</p>",
        "id": 161174414,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553017974
    },
    {
        "content": "<p><code>'0 in ('a || 'b)</code> should actually be <code>'0 in ('a || 'b || 'empty)</code>, right?</p>",
        "id": 161181763,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553023102
    },
    {
        "content": "<p>but I'd have suspected this logic would already exist for type parameters</p>",
        "id": 161181822,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553023164
    },
    {
        "content": "<p>related to the bits <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and I had discussed before about the rules around e.g. type parameters all being left generic in the scope of the definition site</p>",
        "id": 161181920,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553023228
    },
    {
        "content": "<p>all the same rules would apply here</p>",
        "id": 161181928,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553023246
    },
    {
        "content": "<blockquote>\n<p>but I'd have suspected this logic would already exist for type parameters</p>\n</blockquote>\n<p>there is some similar-ish logic for projections</p>",
        "id": 161192669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553031555
    },
    {
        "content": "<blockquote>\n<p><code>'0 in ('a || 'b)</code> should actually be <code>'0 in ('a || 'b || 'empty)</code>, right?</p>\n</blockquote>\n<p><code>'empty</code> no, but <code>'static</code> yes</p>",
        "id": 161192678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553031567
    },
    {
        "content": "<p>I mean maybe <code>'empty</code> \"maybe\" is a better version</p>",
        "id": 161192691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553031576
    },
    {
        "content": "<p>oh I guess maybe you mean logic to pick the type parameters .. I guess i'm not quite sure what you mean about type parametesr</p>",
        "id": 161192796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553031638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there are rules around e.g. <code>fn foo&lt;A, B&gt;(a: A, b: B) -&gt; Foo&lt;A, B&gt; { .. }</code> being allowed with all the following bodies: <code>(a, b)</code>, <code>a</code>, and <code>b</code></p>",
        "id": 161193619,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553032310
    },
    {
        "content": "<p>but <code>fn foo&lt;A&gt;(a: A) -&gt; Foo&lt;A, A&gt; { ... }</code> is not allowed, since it's unknown whether or not from a body like <code>(a, a)</code> the underlying type varies with respect to the first type parameter, the second, or both</p>",
        "id": 161193694,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553032356
    },
    {
        "content": "<p>(e.g. it could be <code>type Foo&lt;A, B&gt; = (A, B);</code>, <code>type Foo&lt;A, B&gt; = (B, A);</code>, <code>type Foo&lt;A, B&gt; = (A, A)</code>, or <code>type Foo&lt;A, B&gt; = (B, B);</code>)</p>",
        "id": 161193745,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553032410
    },
    {
        "content": "<p>all are equally valid</p>",
        "id": 161193751,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553032415
    },
    {
        "content": "<p>for the generalized version in <code>existential type Foo&lt;'a, 'b&gt; = (&amp;'a u8, &amp;'b u8)</code> we have the same problem</p>",
        "id": 161193825,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553032456
    },
    {
        "content": "<p>i've pushed up a new version of <a href=\"https://github.com/rust-lang/rust/pull/59286\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59286\">https://github.com/rust-lang/rust/pull/59286</a> which has some more tests as well as an improved error message for the multiple-lifetimes case.</p>",
        "id": 161201045,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553038425
    },
    {
        "content": "<p>Getting that in fixes all of the outstanding lifetime bugs around <code>async fn</code> except for the multiple lifetimes issue.</p>",
        "id": 161201106,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553038463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I'll try to respond to these comments tomorrow or so, btw, and maybe do some experimenting with the region solver</p>",
        "id": 161284491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553111379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, sg</p>",
        "id": 161290188,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553115204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> do you have time to look at <a href=\"https://github.com/rust-lang/rust/pull/59286\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59286\">https://github.com/rust-lang/rust/pull/59286</a> today? I'm headed out of town soon and wanted to make sure I'd done everything I could to try and get this all fixed up before then.</p>",
        "id": 161362742,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553185911
    },
    {
        "content": "<p>I should be able to review in about 5 hours, if that's soon enough</p>",
        "id": 161365556,
        "sender_full_name": "varkor",
        "timestamp": 1553187728
    },
    {
        "content": "<p>sorry, the past couple of days have been a little busy</p>",
        "id": 161365571,
        "sender_full_name": "varkor",
        "timestamp": 1553187742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> no worries, 5 hours is fine!</p>",
        "id": 161369586,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1553190447
    },
    {
        "content": "<p>For a practical usage scenario of multiple lifetime async functions: see<br>\n<a href=\"#narrow/stream/193127-wg-database/topic/async.20database.20interface\" title=\"#narrow/stream/193127-wg-database/topic/async.20database.20interface\">https://rust-lang.zulipchat.com/#narrow/stream/193127-wg-database/topic/async.20database.20interface</a></p>",
        "id": 162011989,
        "sender_full_name": "Charles Lew",
        "timestamp": 1553827042
    },
    {
        "content": "<p>OK so <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> -- we should schedule a time to talk about this -- I wonder if I should do some experimentation first</p>",
        "id": 162856141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554758391
    },
    {
        "content": "<p>Are there days that work better for you?</p>",
        "id": 162856142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554758396
    },
    {
        "content": "<p>I'm pretty busy on Thursdays but besides that my schedule is generally pretty light</p>",
        "id": 162856204,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554758422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> what about this Friday at (say) 13:00 Boston time?</p>",
        "id": 162950147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554844021
    },
    {
        "content": "<p>actually, maybe tomorrow at 2pm?</p>",
        "id": 162950203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554844057
    },
    {
        "content": "<p>given that you said your schedule is light, i'm going to hope that works :)</p>",
        "id": 162950222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554844070
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=M21oaDZjODd2ZDkwdGQ3OGlmMmNvam11NWIgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" target=\"_blank\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=M21oaDZjODd2ZDkwdGQ3OGlmMmNvam11NWIgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">Link to calendar event</a></p>",
        "id": 162950378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554844172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> so I think i may have trouble getting a room for a video call</p>",
        "id": 163028734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919110
    },
    {
        "content": "<p>let me go double check</p>",
        "id": 163028738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919112
    },
    {
        "content": "<p>well I'll just find a secluded corner</p>",
        "id": 163028986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919268
    },
    {
        "content": "<p>ok, don't see anyone there anyway</p>",
        "id": 163029363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919491
    },
    {
        "content": "<p>so I'll just try to do this on my own and leave some notes :)</p>",
        "id": 163029376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> heh</p>",
        "id": 163029637,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554919605
    },
    {
        "content": "<p>I must've joined the call just after you left</p>",
        "id": 163029655,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554919619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you want to chat here, in zulip, on a doc somewhere?</p>",
        "id": 163029707,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554919654
    },
    {
        "content": "<p>or in zoom?</p>",
        "id": 163029715,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554919661
    },
    {
        "content": "<p>oh, no worries</p>",
        "id": 163029716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919662
    },
    {
        "content": "<p>we could chat in zoom or here</p>",
        "id": 163029720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919665
    },
    {
        "content": "<p>I was just re-reading what I wrote before and trying to remember wtf was going on</p>",
        "id": 163029727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919672
    },
    {
        "content": "<p>let's just do zoom</p>",
        "id": 163029752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919682
    },
    {
        "content": "<p>should we make a paper?</p>",
        "id": 163029797,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554919704
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Multiple-Unrelated-Lifetimes-in-Existential-Types--Aa9M~6y6bRQ_y1eiaCzMpZgyAQ-AuCQq4Ewy39j8Hnj3n9Qg\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Multiple-Unrelated-Lifetimes-in-Existential-Types--Aa9M~6y6bRQ_y1eiaCzMpZgyAQ-AuCQq4Ewy39j8Hnj3n9Qg\">https://paper.dropbox.com/doc/Multiple-Unrelated-Lifetimes-in-Existential-Types--Aa9M~6y6bRQ_y1eiaCzMpZgyAQ-AuCQq4Ewy39j8Hnj3n9Qg</a></p>",
        "id": 163029869,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554919765
    },
    {
        "content": "<p>for some reason</p>",
        "id": 163030000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919820
    },
    {
        "content": "<p>zoom doesn't want to start for me</p>",
        "id": 163030010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919824
    },
    {
        "content": "<p>/me grumbles</p>",
        "id": 163030021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919827
    },
    {
        "content": "<p>heh, it just kicked me out</p>",
        "id": 163030087,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554919856
    },
    {
        "content": "<p>ok sorry</p>",
        "id": 163030180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919906
    },
    {
        "content": "<p>that was my fault</p>",
        "id": 163030184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919908
    },
    {
        "content": "<p>try to join again, should be good now</p>",
        "id": 163030188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 163030265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554919946
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/56238#issuecomment-483846160\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56238#issuecomment-483846160\">left some initial notes here</a>, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> -- I guess not a <em>ton</em> new there, but I did go refresh my memory as to how the NLL solver works</p>",
        "id": 163507757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555449309
    },
    {
        "content": "<p>thanks! :)</p>",
        "id": 163508766,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555450075
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> )</p>",
        "id": 163508807,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555450083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for the comment <a href=\"https://github.com/rust-lang/rust/issues/56238#issuecomment-486392893\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56238#issuecomment-486392893\">https://github.com/rust-lang/rust/issues/56238#issuecomment-486392893</a></p>",
        "id": 164112753,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1556134557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> ps, if I were to carve out time for this, I think it would be on Friday</p>",
        "id": 165093660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557251087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay</p>",
        "id": 165094426,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557251602
    },
    {
        "content": "<p>I'll continue to investigate later today, but my expectation would be that I wouldn't get very far :(</p>",
        "id": 165094449,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1557251613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you push on this any further?</p>",
        "id": 166104500,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558374180
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 166277734,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558538206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 166857199,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559164024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I started working on it, yeah.</p>",
        "id": 166860728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559166889
    },
    {
        "content": "<p>I didn't get too far but I plan to spend more time tomorrow/Friday</p>",
        "id": 166860737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559166901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> so I think I have the interation into the lexical solver basically working.</p>",
        "id": 167226874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559592916
    },
    {
        "content": "<p>Not the most efficient thing ever, but probably good enough.</p>",
        "id": 167226889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559592923
    },
    {
        "content": "<p>Though I've .. actually not tested it on the async example, I should do that</p>",
        "id": 167226908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559592933
    },
    {
        "content": "<p>I still have to do the integration into the NLL solver though</p>",
        "id": 167226912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559592938
    },
    {
        "content": "<p>OK, the NLL Solver integration is like 50% done</p>",
        "id": 167798519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560202363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> this test is passing now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Here we wind up selecting `&#39;a` and `&#39;b` in the hidden type because</span>\n<span class=\"c1\">// those are the types that appear inth e original values.</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">upper_bounds</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// In this simple case, you have a hidden type `(&amp;&#39;0 u8, &amp;&#39;1 u8)` and constraints like</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// ```</span>\n<span class=\"w\">    </span><span class=\"c1\">// &#39;a: &#39;0</span>\n<span class=\"w\">    </span><span class=\"c1\">// &#39;b: &#39;1</span>\n<span class=\"w\">    </span><span class=\"c1\">// &#39;0 in [&#39;a, &#39;b]</span>\n<span class=\"w\">    </span><span class=\"c1\">// &#39;1 in [&#39;a, &#39;b]</span>\n<span class=\"w\">    </span><span class=\"c1\">// ```</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// We use the fact that `&#39;a: 0&#39;` must hold (combined with the in</span>\n<span class=\"w\">    </span><span class=\"c1\">// constraint) to determine that `&#39;0 = &#39;a` must be the answer.</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167905364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560301532
    },
    {
        "content": "<p>\\o/</p>",
        "id": 167917979,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560319180
    },
    {
        "content": "<p>Update: this test is passing too (actually, it probably was before, but I wasn't running it)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// edition:2018</span>\n<span class=\"c1\">// run-pass</span>\n\n<span class=\"c1\">// Test that we can use async fns with multiple arbitrary lifetimes.</span>\n\n<span class=\"cp\">#![feature(arbitrary_self_types, async_await, await_macro)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Add</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">multiple_named_lifetimes</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">multiple_hrtb_and_single_named_lifetime_ok</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;c</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">multiple_elided_lifetimes</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167953913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560350859
    },
    {
        "content": "<p>I just need to dot some i's and cross some t's I guess</p>",
        "id": 167954014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560350918
    },
    {
        "content": "<p>I realized a complication around things like <code>let x: impl Trait</code> -- but for now I think i'll just force the old behavior in such cases</p>",
        "id": 167954035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560350935
    },
    {
        "content": "<p>Argh, that existing code is just ICEing though when I try to make tests (lotsa bugs lurking there)</p>",
        "id": 167954531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560351282
    },
    {
        "content": "<p>I guess maybe I'll just file an issue for now</p>",
        "id": 167954614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560351342
    },
    {
        "content": "<p>I guess I'm basically hitting <a href=\"https://github.com/rust-lang/rust/issues/60473\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60473\">https://github.com/rust-lang/rust/issues/60473</a></p>",
        "id": 167954712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560351396
    },
    {
        "content": "<p>Posted <a href=\"https://github.com/rust-lang/rust/pull/61775\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61775\">https://github.com/rust-lang/rust/pull/61775</a></p>",
        "id": 167960625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560354700
    },
    {
        "content": "<blockquote>\n<p>The problem here is that every region R in the hidden type must be equal to either 'a or 'b (or 'static) -- in the past, the only kinds of constraints we had were outlives constraints, and since 'a and 'b are unrelated, there was no outlives constraint we could issue that would enforce that (R: 'a and R: 'b are both too strict, for example). But now we can issue a pick constraint: pick R from ['a, 'b].</p>\n</blockquote>\n<p>Can you discuss this more in depth and in relation to <code>exists&lt;...&gt;</code> ?</p>",
        "id": 167961804,
        "sender_full_name": "centril",
        "timestamp": 1560355413
    },
    {
        "content": "<p>oh btw <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I tried to add the feature gate but was surprised to find that the return type spans for async fn didn't seem to have the \"desugaring\" option on them</p>",
        "id": 168516585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957744
    },
    {
        "content": "<p>I have to look at a bit more deeply at that</p>",
        "id": 168516594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957752
    },
    {
        "content": "<p>(I was going to make it feature-gated <em>unless</em> part of the desugaring)</p>",
        "id": 168516601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560957760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> indeed, there are a few other nodes that could be marked with <code>CompilerDesugaringKind::Async</code> here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2601\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2601\">https://github.com/rust-lang/rust/blob/master/src/librustc/hir/lowering.rs#L2601</a></p>",
        "id": 168519930,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560960058
    },
    {
        "content": "<p>today it only does that for the existential type</p>",
        "id": 168519943,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560960071
    },
    {
        "content": "<p>I can send a PR for that if you'd like, otherwise it seems like a fine small thing to include in your change</p>",
        "id": 168520042,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560960128
    },
    {
        "content": "<p>the PR is at that annoying stage where it's accumulating a long list of \"random commits\"</p>",
        "id": 168523967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560963293
    },
    {
        "content": "<p>this is just one more I guess :)</p>",
        "id": 168523968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560963293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> It's a good idea to do break-out PRs ^^</p>",
        "id": 168527419,
        "sender_full_name": "centril",
        "timestamp": 1560965381
    },
    {
        "content": "<p>I have pushed the feature gate as well as a first draft of a <a href=\"https://github.com/rust-lang/rustc-guide/pull/344\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-guide/pull/344\">rustc-guide chapter</a>, though I see the PR needs to be updated</p>",
        "id": 168605361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561044124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's with the <code>arbitrary_self_types</code> and <code>await_macro</code> in <a href=\"https://github.com/rust-lang/rust/pull/61775/commits/256abeffcdc1b1eb79a98baf07b870a045933147\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61775/commits/256abeffcdc1b1eb79a98baf07b870a045933147\">https://github.com/rust-lang/rust/pull/61775/commits/256abeffcdc1b1eb79a98baf07b870a045933147</a> -- are those needed?</p>",
        "id": 168947451,
        "sender_full_name": "centril",
        "timestamp": 1561475485
    },
    {
        "content": "<p>also btw, in case it was lost in the sea of nits I had... ( :P ) : <a href=\"https://github.com/rust-lang/rust/pull/61775#discussion_r295907400\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61775#discussion_r295907400\">https://github.com/rust-lang/rust/pull/61775#discussion_r295907400</a></p>",
        "id": 168947539,
        "sender_full_name": "centril",
        "timestamp": 1561475555
    },
    {
        "content": "<blockquote>\n<p>what's with the <code>arbitrary_self_types</code> and <code>await_macro</code> in <a href=\"https://github.com/rust-lang/rust/pull/61775/commits/256abeffcdc1b1eb79a98baf07b870a045933147\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61775/commits/256abeffcdc1b1eb79a98baf07b870a045933147\">https://github.com/rust-lang/rust/pull/61775/commits/256abeffcdc1b1eb79a98baf07b870a045933147</a> -- are those needed?</p>\n</blockquote>\n<p>no, they're just cargo culted. I fixed some of the tests but not all.</p>",
        "id": 168953916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561480588
    },
    {
        "content": "<blockquote>\n<p>also btw, in case it was lost in the sea of nits I had... ( :P ) : <a href=\"https://github.com/rust-lang/rust/pull/61775#discussion_r295907400\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61775#discussion_r295907400\">https://github.com/rust-lang/rust/pull/61775#discussion_r295907400</a></p>\n</blockquote>\n<p>it was not, I was just waiting to address the important question in a bit more depth</p>",
        "id": 168953933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561480611
    },
    {
        "content": "<p>though the TL;DR is that I don't see a problem</p>",
        "id": 168953947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561480623
    },
    {
        "content": "<p>Thanks for the tl;dr; I'll wait for the elaboration in the code-comment/the PR <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 168956358,
        "sender_full_name": "centril",
        "timestamp": 1561482281
    },
    {
        "content": "<p>OK so I think I am ready to land this PR. :)</p>",
        "id": 169256029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561750930
    },
    {
        "content": "<p>I keep having this feeling like I could write more thorough tests, though I'm not sure -- I guess I could dig into making sure that each of the scenarios is covered.</p>",
        "id": 169256389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561751226
    }
]