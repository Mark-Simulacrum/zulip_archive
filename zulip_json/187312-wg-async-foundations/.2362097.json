[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0178]: expected a path on the left-hand side of `+`, not `()`\n --&gt; t.rs:2:17\n  |\n2 | fn foo&lt;&#39;a&gt;() -&gt; () +&#39;a {}\n  |                 ^^^^^^ expected a path\n\nerror[E0404]: expected trait, found builtin type `i32`\n --&gt; t.rs:4:17\n  |\n4 | fn bar&lt;&#39;a&gt;() -&gt; i32 +&#39;a {}\n  |                 ^^^ not a trait\n\nwarning: trait objects without an explicit `dyn` are deprecated\n --&gt; t.rs:4:17\n  |\n4 | fn bar&lt;&#39;a&gt;() -&gt; i32 +&#39;a {}\n  |                 ^^^^^^^ help: use `dyn`: `dyn i32 +&#39;a`\n  |\n  = note: `#[warn(bare_trait_objects)]` on by default\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0178, E0404.\nFor more information about an error, try `rustc --explain E0178`.\n</pre></div>\n\n\n<p>error message differs with <em>unit</em> type at fn return. is this intended? cc <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 178842986,
        "sender_full_name": "csmoe",
        "timestamp": 1571829043
    },
    {
        "content": "<p>The error seems correct to me</p>",
        "id": 178844996,
        "sender_full_name": "centril",
        "timestamp": 1571831056
    },
    {
        "content": "<p>is there any workgroud to make this snippet work? I didn't find out anyway, so just stop suggesting on this case.<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a21601e91cb31a8d4d481f44d2c1c7a4\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a21601e91cb31a8d4d481f44d2c1c7a4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a21601e91cb31a8d4d481f44d2c1c7a4</a><br>\n<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cc <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 178950891,
        "sender_full_name": "csmoe",
        "timestamp": 1571923490
    },
    {
        "content": "<p>I'm not aware of any, but I've not written a lot code using async/await so might not know.</p>",
        "id": 178956165,
        "sender_full_name": "davidtwco",
        "timestamp": 1571926575
    },
    {
        "content": "<p>Not suggesting seems like a reasonable resolution.</p>",
        "id": 178956184,
        "sender_full_name": "davidtwco",
        "timestamp": 1571926588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> I dont' think there is anything you can do to that function as written to make it compile, except either remove the <code>where F: 'static</code> bound on <code>dummy_fn</code> or else make the closure not capture <code>self</code></p>",
        "id": 179077823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572029000
    },
    {
        "content": "<p>definitely suggesting <code>dummy_fn + '_</code> is... O_O</p>",
        "id": 179077834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572029009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run_dummy_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dummy_fn</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">some_fn</span><span class=\"p\">()).</span><span class=\"n\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>dose rustc desugar <code>async fn run_dummy_fn()</code>'s output? , <code>desugaring_kind()</code> is <code>None</code> in this case? (not sure whether this is expected or not)</p>",
        "id": 179429349,
        "sender_full_name": "csmoe",
        "timestamp": 1572441122
    },
    {
        "content": "<p>seems like a bug</p>",
        "id": 179429449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441170
    },
    {
        "content": "<p>it certainly does desugar</p>",
        "id": 179429473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441186
    },
    {
        "content": "<p>the desugaring <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> is done by <code>self.lower_async_fn_ret_ty</code> in hir/lowering.rs</p>",
        "id": 179429588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441260
    },
    {
        "content": "<p>I think maybe the flaw in that function</p>",
        "id": 179429623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441288
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 179429698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> so on the final line of that function, there is:</p>",
        "id": 179429706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opaque_ty_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">TyKind</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">ItemId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">id</span>: <span class=\"nc\">opaque_ty_id</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">generic_args</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">hir</span>::<span class=\"n\">FunctionRetTy</span>::<span class=\"n\">Return</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">kind</span>: <span class=\"nc\">opaque_ty_ref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">hir_id</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">next_id</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}))</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179429714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441351
    },
    {
        "content": "<p>I think it should be</p>",
        "id": 179429724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opaque_ty_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">TyKind</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">ItemId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">id</span>: <span class=\"nc\">opaque_ty_id</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">generic_args</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">hir</span>::<span class=\"n\">FunctionRetTy</span>::<span class=\"n\">Return</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">kind</span>: <span class=\"nc\">opaque_ty_ref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">span</span>: <span class=\"nc\">opaque_ty_span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- changed this line!</span>\n<span class=\"w\">            </span><span class=\"n\">hir_id</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">next_id</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}))</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179429785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441367
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> do you agree with that?</p>",
        "id": 179429800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441375
    },
    {
        "content": "<p>in particular, this is creating the synthesized return type of <code>-&gt; Foo</code> where <code>Foo</code> is a new opaque type</p>",
        "id": 179429825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441397
    },
    {
        "content": "<p>so we should be using a span marked with \"compiler desugaring\"</p>",
        "id": 179429839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441405
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opaque_ty_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">TyKind</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">ItemId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">id</span>: <span class=\"nc\">opaque_ty_id</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">generic_args</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">hir</span>::<span class=\"n\">FunctionRetTy</span>::<span class=\"n\">Return</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">kind</span>: <span class=\"nc\">opaque_ty_ref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">span</span>: <span class=\"nc\">opaque_ty_span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- changed this line!</span>\n<span class=\"w\">            </span><span class=\"n\">hir_id</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">next_id</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}))</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 179429850,
        "sender_full_name": "csmoe",
        "timestamp": 1572441416
    }
]