[
    {
        "content": "<p>following up on this thread: <a href=\"#narrow/stream/219381-t-libs/topic/split.20generic.20member.20access.20RFC.3F\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/split.20generic.20member.20access.20RFC.3F</a></p>",
        "id": 234364172,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618333430
    },
    {
        "content": "<p>I'm looking into splitting the downcasting implementation logic from the generic member access RFC into its own RFC because it was mentioned that it seemed similar to proposals related to executors</p>",
        "id": 234364334,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618333482
    },
    {
        "content": "<p>this is the comment I'm referring to: <a href=\"https://github.com/rust-lang/rfcs/pull/2895#issuecomment-736683549\">https://github.com/rust-lang/rfcs/pull/2895#issuecomment-736683549</a></p>",
        "id": 234364362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618333498
    },
    {
        "content": "<p>what I'm trying to figure out is what proposals was <span class=\"user-mention\" data-user-id=\"263805\">@Plecra</span> referring too?</p>",
        "id": 234364474,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618333532
    },
    {
        "content": "<p>and once I know what proposals I'm hoping to collaborate to write an RFC for the logic that is shared between the executors and generic member access for errors proposals</p>",
        "id": 234364615,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618333579
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span></p>",
        "id": 234365104,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618333746
    },
    {
        "content": "<p>so this could be one mechanism for interop across executors, as well as providing executor-specific extensions to Context</p>",
        "id": 234366670,
        "sender_full_name": "tmandry",
        "timestamp": 1618334321
    },
    {
        "content": "<p>I’m not directly aware of the proposals that comment is referring to, I imagine there might be some on irlo</p>",
        "id": 234366777,
        "sender_full_name": "tmandry",
        "timestamp": 1618334380
    },
    {
        "content": "<p>ill do some digging</p>",
        "id": 234367964,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618334832
    },
    {
        "content": "<p>not finding anything that looks related on irlo :/</p>",
        "id": 234368664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618335087
    },
    {
        "content": "<p>checking users now</p>",
        "id": 234368741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618335118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I don't think there have been <em>specific</em> proposals, but we were definitely talking about possibly adding more fields to <code>Context</code></p>",
        "id": 234385806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618341871
    },
    {
        "content": "<p>for example threading down a \"task spawner\" or other context like that</p>",
        "id": 234385847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618341886
    },
    {
        "content": "<p>I see</p>",
        "id": 234386784,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618342275
    },
    {
        "content": "<p>so presumably the generic member access impl could be used to extract a closure that acts as said task spawner</p>",
        "id": 234386822,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618342299
    },
    {
        "content": "<p>hmm</p>",
        "id": 234386986,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618342361
    },
    {
        "content": "<p>not at all sure what that would look like</p>",
        "id": 234387268,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618342485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/type.20tagged.20downcasting.20for.20executors.20and.20errors/near/234386822\">said</a>:</p>\n<blockquote>\n<p>so presumably the generic member access impl could be used to extract a closure that acts as said task spawner</p>\n</blockquote>\n<p>I'm not sure what this \"generic member access\" refers to, tbqh :)</p>",
        "id": 234394437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618345439
    },
    {
        "content": "<p>I was just imagining having a <code>dyn TaskSpawner</code> in the <code>Context</code> somehow</p>",
        "id": 234394499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618345450
    },
    {
        "content": "<p>(there are some other challenges having to do with allocation)</p>",
        "id": 234394602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618345494
    },
    {
        "content": "<p>generic member access is just the random term I've come up with to refer with an object safe generic abstraction over the types of functions like <code>fn backtrace</code> / <code>fn source</code></p>",
        "id": 234569662,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618432276
    },
    {
        "content": "<p>so its as if there was a <code>fn context&lt;T&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt;</code> method on the error trait</p>",
        "id": 234569712,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618432306
    },
    {
        "content": "<p>and we've set it up so you can work with trait objects, so it would be trivial to get a <code>&amp;dyn TaskSpawner</code> out for example</p>",
        "id": 234569828,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618432341
    },
    {
        "content": "<p>the motivating use case was so I could get <code>SpanTrace</code> out of errors instead of <code>Backtrace</code>, but there was no way in hell it would ever become part of std so I had to make it generic</p>",
        "id": 234569943,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618432389
    },
    {
        "content": "<p>my first pass implementation was basically <code>fn context(&amp;self, type: TypeId) -&gt; Option&lt;&amp;dyn Any&gt;</code>, with a helper method on <code>dyn Error</code> to allow monomorphization and to do the downcasting for you, then the implementor of an error type would need to switch on the <code>TypeId</code></p>",
        "id": 234570215,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618432477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270901\">@Nika Layzell</span> helped me make a nicer API for this via the <code>object-provider</code> and eventually <code>dyno</code> crates, and add support for DSTs and eventually non 'static types</p>",
        "id": 234570277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618432508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> interesting-- is there a write-up?</p>",
        "id": 234583557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618437644
    },
    {
        "content": "<p>not yet, that's what I was planning on making, was hoping to find other stakeholders working on executors that might be working on something similar before I started splitting it out in into it's own RFC</p>",
        "id": 234583736,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618437726
    },
    {
        "content": "<p>sounds like there's nothing concrete yet so I will go ahead and start working on said RFC I think</p>",
        "id": 234583806,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618437760
    },
    {
        "content": "<p>I was looking into this a while back and dug up a couple relevant links:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/issues/2900\">Custom Future Contexts</a></li>\n<li><a href=\"https://github.com/rustasync/team/issues/7\"> Add hooks sufficient to build task-local data</a></li>\n<li><a href=\"https://github.com/rust-lang/futures-rs/issues/1196\">Consider allowing futures to require specialized executors</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/2592#issuecomment-462555711\">Discussion in the stabilization PR</a></li>\n<li><a href=\"https://github.com/rustasync/team/issues/56\">Consider removing spawning from futures::task::Context </a></li>\n</ul>",
        "id": 234587148,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1618439609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/type.20tagged.20downcasting.20for.20executors.20and.20errors/near/234583806\">said</a>:</p>\n<blockquote>\n<p>sounds like there's nothing concrete yet so I will go ahead and start working on said RFC I think</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"263805\">@Plecra</span> mentioned writing  an RFC after <a href=\"https://github.com/rust-lang/rust/issues/2895\">#2895</a> was merged. I know they are active on the rust-lang discord server, so you might want to reach out there.</p>",
        "id": 234589530,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1618441109
    },
    {
        "content": "<p>will do, thanks</p>",
        "id": 234601584,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618449430
    },
    {
        "content": "<p>reached out to <span class=\"user-mention\" data-user-id=\"263805\">@Plecra</span> , they expressed interest in learning the RFC process so they're writing up the RFC for this now <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 234763047,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1618525054
    }
]