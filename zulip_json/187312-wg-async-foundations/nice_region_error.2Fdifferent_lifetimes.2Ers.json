[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span>, can I pick your brain sometime about <code>different_lifetimes.rs</code>? I was looking at it yesterday in connection with my polish bug for this sprint, and it looks like you <a href=\"https://github.com/rust-lang/rust/commit/20e032e65007ff1376e8480c1fbdb0a5068028fa#diff-20107dce5d641d88411894eb3d35764f7e37d2f99b7c9b6adb30834f47741985\">most recently changed</a> the code in question, so I wanted to make sure I'm reading it right.</p>",
        "id": 255431296,
        "sender_full_name": "eholk",
        "timestamp": 1632933587
    },
    {
        "content": "<p>(now's not good for me, but I should have time later)</p>",
        "id": 255431334,
        "sender_full_name": "eholk",
        "timestamp": 1632933601
    },
    {
        "content": "<p>I'm not an expert at regions or region errors, but I might be able to help! just message when you have time and ill try to get to it</p>",
        "id": 255434978,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1632934839
    },
    {
        "content": "<p>Okay, <span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span> - I'm coming back to this now. I'll go ahead and post my questions and whenever you have the chance to reply is fine.</p>",
        "id": 255472308,
        "sender_full_name": "eholk",
        "timestamp": 1632948751
    },
    {
        "content": "<p>So I'm working on <a href=\"https://github.com/rust-lang/rust/issues/74256\">#74256</a>, which is an issue where in the error message for</p>\n<div class=\"codehilite\"><pre><span></span><code>    async fn async_fn(self: &amp;Struct, f: &amp;u32) -&gt; &amp;u32 {\n        f\n    }\n</code></pre></div>\n<p>the compiler highlights the <code>&amp;Struct</code> when the <code>&amp;u32</code> is really what should be highlighted.</p>",
        "id": 255472438,
        "sender_full_name": "eholk",
        "timestamp": 1632948818
    },
    {
        "content": "<p>So it seems like it might be a single character fix: <a href=\"https://github.com/rust-lang/rust/pull/89375/files\">https://github.com/rust-lang/rust/pull/89375/files</a></p>",
        "id": 255473208,
        "sender_full_name": "eholk",
        "timestamp": 1632949119
    },
    {
        "content": "<p>But that also changes the output from a few other tests, including the ones you added in that change. I spot checked a couple of them (I'll go through them in more depth), and in general I think the new behavior is better for the existing tests too, but I just want a second opinion on whether what I'm doing makes sense here.</p>",
        "id": 255473552,
        "sender_full_name": "eholk",
        "timestamp": 1632949223
    },
    {
        "content": "<p>Oh I remember not quite understanding the difference between sup and sub, its more that possible that I chose the wrong one for the diagnostic. My understanding is that they are basically the mismatched regions (lifetimes), so maybe either makes sense?</p>\n<p>can you push what other changes it causes?</p>",
        "id": 255485339,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1632954214
    },
    {
        "content": "<p>also, definitely worth tagging esteban on the pr tho</p>",
        "id": 255485503,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1632954288
    },
    {
        "content": "<p>I added some more comments <a href=\"https://github.com/rust-lang/rust/issues/74256#issuecomment-930581911\">here</a>. I think fixing should actually involve more than just highlighting a different parameter. I think including some more information would help.</p>",
        "id": 255488736,
        "sender_full_name": "eholk",
        "timestamp": 1632956075
    },
    {
        "content": "<p>I just updated the draft PR with the other stderr file changes that I thought looked okay. The ui/regions/regions-free-region-ordering-callee.rs test is one that changes and I think the current behavior is better though.</p>",
        "id": 255488822,
        "sender_full_name": "eholk",
        "timestamp": 1632956131
    },
    {
        "content": "<p>oooh pointing out that its borrowed from self woudl be nice</p>",
        "id": 255494550,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1632959658
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>LL |     async fn a(self: Pin&lt;&amp;Foo&gt;, f: &amp;Foo) -&gt; &amp;Foo { f }\n   |                                    ----     ----   ^ ...but data from `f` is held across an await point here\n   |                                    |        |\n   |                                    |        this `async fn` implicitly returns an `impl Future&lt;Output = &amp;Foo&gt;`\n   |                                    this parameter and the returned future are declared with different lifetimes...\n</code></pre></div>\n<p>so in this one, which used to point to self, it was saying that the self parameter, which is what it's trying to borrow from, does not match the actual lifetime of the return type, which is the Foo parameter</p>\n<p>honestly I feel that that is more clear, IF we point out that the fact that we are eliding that the return type is supposed to borrow from <code>self</code><br>\nthis also, vaguely makes sense, as we are changing from pointing out the sub type to pointing out the super type, where sub (elided return type) ! &lt;= sup (the actual lifetime we are returning) I THINK</p>\n<p>on fn, non-method cases, I am not sure whats more clear, for example, not sure whats happening in <code>async-await/issue-76547.stderr</code></p>\n<p>do other, non-async borrowing ui tests change as well?</p>",
        "id": 255495035,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1632959975
    },
    {
        "content": "<p>it is VERY curious that this is so much better in the sync case, without any changes: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=03ba654fc9d6b5d1aa6c544a8d8451d8\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=03ba654fc9d6b5d1aa6c544a8d8451d8</a></p>",
        "id": 255593220,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633015478
    },
    {
        "content": "<p>Yeah, the suggestion for an explicit lifetime would be really nice to have in the async case.</p>",
        "id": 255600358,
        "sender_full_name": "eholk",
        "timestamp": 1633018036
    },
    {
        "content": "<p>its very, very curious to me that async and sync are working differently here, its probably because we are 1 more layer deep in the soup, as its not the return type that borrow from &amp;Foo, its the inside of the Future returned, but I am not sure</p>",
        "id": 255603564,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633019207
    },
    {
        "content": "<p>Oh yeah, maybe so. Today I'll dig into where the explicit lifetime suggestion comes from.</p>",
        "id": 255603752,
        "sender_full_name": "eholk",
        "timestamp": 1633019273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/nice_region_error.2Fdifferent_lifetimes.2Ers/near/255603752\">said</a>:</p>\n<blockquote>\n<p>Oh yeah, maybe so. Today I'll dig into where the explicit lifetime suggestion comes from.</p>\n</blockquote>\n<p><a href=\"https://twitter.com/guswynn/status/1435328358745710592?s=20\">https://twitter.com/guswynn/status/1435328358745710592?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/guswynn/status/1435328358745710592?s=20\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/4659dcbdb5fa72e151a4d1435512b187172e7cca/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3838353032383935343635383237313233322f32657237686359685f6e6f726d616c2e6a7067\"></a><p>my workflow for how to figure out how things work in rustc: 1. make a rust playground that errors/warns about the thing I'm interested in 2. copy the error output and use rg to find where in rustc the diagnostic happens</p><span>- g̶͇̻̀ū̵̯͙͎́s̷̙͉̥̓͒͠ (@guswynn)</span></div></div>",
        "id": 255603891,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633019306
    },
    {
        "content": "<p>I've been trying to steal that workflow!</p>",
        "id": 255603957,
        "sender_full_name": "eholk",
        "timestamp": 1633019334
    }
]