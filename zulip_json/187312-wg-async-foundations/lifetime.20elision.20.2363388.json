[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> -- let me know when you're around</p>",
        "id": 173036708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565626148
    },
    {
        "content": "<p>o/</p>",
        "id": 173052276,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1565637977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> ohai =)</p>",
        "id": 173052440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638098
    },
    {
        "content": "<p>so I've been trying to close the various issues, as you've probably noticed.</p>",
        "id": 173052449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638108
    },
    {
        "content": "<p>The lifetime elision one (<a href=\"https://github.com/rust-lang/rust/issues/63388\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63388\">https://github.com/rust-lang/rust/issues/63388</a>) has me the most worried, though</p>",
        "id": 173052477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638130
    },
    {
        "content": "<p>the current behavior is definitely incorrect</p>",
        "id": 173052487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638140
    },
    {
        "content": "<p>indeed</p>",
        "id": 173052755,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1565638328
    },
    {
        "content": "<p>what you described is what the code does (looking for exactly one unnamed lifetime parameter, and using that as the elided lifetime)</p>",
        "id": 173052809,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1565638392
    },
    {
        "content": "<p>yes</p>",
        "id": 173052906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638470
    },
    {
        "content": "<p>I'm not sure how to fix that</p>",
        "id": 173052912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638479
    },
    {
        "content": "<p>I mean obviously we need to change the approach</p>",
        "id": 173052919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638487
    },
    {
        "content": "<p>well I'd say <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>'s desire for lots of tests is clearly validated :)</p>",
        "id": 173052973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638531
    },
    {
        "content": "<p>where is the other lifetime elision code to be found...</p>",
        "id": 173053052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638573
    },
    {
        "content": "<p>answer: <code>middle/resolve_lifetime.rs</code>, around line 2100</p>",
        "id": 173053150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638659
    },
    {
        "content": "<p>it seems...not entirely implausible that code could be factored out</p>",
        "id": 173053235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638707
    },
    {
        "content": "<p>well, maybe kinda implausible, as it uses a visitor I think</p>",
        "id": 173053256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638736
    },
    {
        "content": "<p>I am not happy to be down to the wire like this :(</p>",
        "id": 173053275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638763
    },
    {
        "content": "<p>ah well I guess a HIR visitor doesn't require a tcx</p>",
        "id": 173053299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565638796
    },
    {
        "content": "<p>ok, wait, what am I saying, this code really wants to be part of resolve lifetimes</p>",
        "id": 173053569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565639006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> so -- why do we have to do this logic in HIR lowering? Seems like instead we could move the logic to resolve-lifetimes to avoid duplication. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(...)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>could get converted to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;E</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;E</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(...)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or even</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;E1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;E2</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;E1</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;E2</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(...)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 173053810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565639238
    },
    {
        "content": "<p>i.e., we create a fresh parameter for each elided lifetime, and then the \"value\" we supply for that parameter is <code>'_</code></p>",
        "id": 173053900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565639296
    },
    {
        "content": "<p>or we create at most one parameter, same thing</p>",
        "id": 173053913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565639304
    },
    {
        "content": "<p>as a benefit, I think all the complex elision cases would \"just work\"</p>",
        "id": 173053927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565639325
    },
    {
        "content": "<p>let me see if I can implement that</p>",
        "id": 173054388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565639703
    },
    {
        "content": "<p>I rolled up the 2 current approved async PRs with p=50 so they should test in 3 hours or so</p>",
        "id": 173056975,
        "sender_full_name": "centril",
        "timestamp": 1565641480
    },
    {
        "content": "<p>welp I think I implemented the scheme I described ab ove</p>",
        "id": 173057050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565641529
    },
    {
        "content": "<p>of course, it hasn't even finished building yet, much less having been tested</p>",
        "id": 173057063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565641537
    },
    {
        "content": "<p>seems to work</p>",
        "id": 173058650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565642573
    },
    {
        "content": "<p>also, code is way simpler</p>",
        "id": 173058667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565642584
    },
    {
        "content": "<p>ok ok it's not <em>quite</em> right, but getting close</p>",
        "id": 173059573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565643205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> nice; can you also include some more tests, e.g. the ones in <a href=\"https://github.com/rust-lang/rust/issues/63388#issuecomment-520557204\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63388#issuecomment-520557204\">https://github.com/rust-lang/rust/issues/63388#issuecomment-520557204</a> ?</p>",
        "id": 173060436,
        "sender_full_name": "centril",
        "timestamp": 1565643813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yep, already did that</p>",
        "id": 173060446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565643826
    },
    {
        "content": "<p>great <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 173060452,
        "sender_full_name": "centril",
        "timestamp": 1565643832
    },
    {
        "content": "<p>I'm just double checking that the behavior in all of your tests matches</p>",
        "id": 173060456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565643834
    },
    {
        "content": "<p>there's also the README.md that might need some updating ^^</p>",
        "id": 173060538,
        "sender_full_name": "centril",
        "timestamp": 1565643874
    },
    {
        "content": "<p>yes, I did that too</p>",
        "id": 173060543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565643884
    },
    {
        "content": "<p>which is why I'm double checking</p>",
        "id": 173060545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565643887
    },
    {
        "content": "<p>hehe, awesome</p>",
        "id": 173060550,
        "sender_full_name": "centril",
        "timestamp": 1565643892
    },
    {
        "content": "<p>to be sure I'm not lying :)</p>",
        "id": 173060551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565643894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> just to be clear, the original test from <a href=\"https://github.com/rust-lang/rust/issues/63388\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63388\">#63388</a> is included in your original test suite, right?</p>",
        "id": 173060857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565644110
    },
    {
        "content": "<p>i.e., I don't have to add that one</p>",
        "id": 173060866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565644114
    },
    {
        "content": "<p>lemme double check</p>",
        "id": 173060883,
        "sender_full_name": "centril",
        "timestamp": 1565644132
    },
    {
        "content": "<p>I just checked</p>",
        "id": 173060982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565644204
    },
    {
        "content": "<p>it's in <a href=\"http://ref-self.rs\" target=\"_blank\" title=\"http://ref-self.rs\">ref-self.rs</a></p>",
        "id": 173060998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565644206
    },
    {
        "content": "<p>ah but that one is slightly different in that it isn't a <code>// check-pass</code> test</p>",
        "id": 173061053,
        "sender_full_name": "centril",
        "timestamp": 1565644271
    },
    {
        "content": "<p>(notice that the test in the issue returns <code>self</code>, which makes it pass)</p>",
        "id": 173061149,
        "sender_full_name": "centril",
        "timestamp": 1565644323
    },
    {
        "content": "<p>(in <code>ref-self.rs</code> it returns <code>f</code>, which makes it fail)</p>",
        "id": 173061165,
        "sender_full_name": "centril",
        "timestamp": 1565644339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^-- would be good to include the <code>// check-pass</code> version to have more confidence</p>",
        "id": 173061324,
        "sender_full_name": "centril",
        "timestamp": 1565644462
    },
    {
        "content": "<p>OK</p>",
        "id": 173061339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565644484
    },
    {
        "content": "<p>thanks</p>",
        "id": 173061646,
        "sender_full_name": "centril",
        "timestamp": 1565644701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> you should find it in <a href=\"https://github.com/rust-lang/rust/pull/63499\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63499\">https://github.com/rust-lang/rust/pull/63499</a> -- <a href=\"http://issue-63388-4.rs\" target=\"_blank\" title=\"http://issue-63388-4.rs\">issue-63388-4.rs</a> I think</p>",
        "id": 173061716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565644757
    },
    {
        "content": "<p><code>-4</code> :P wow =)</p>",
        "id": 173061741,
        "sender_full_name": "centril",
        "timestamp": 1565644777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  the docs in README.md are slightly off; some <code>X</code>s for \"Pass?\" turned into <code>✓</code>s when the non-<code>async fn</code> test is also <code>X</code></p>",
        "id": 173062477,
        "sender_full_name": "centril",
        "timestamp": 1565645207
    },
    {
        "content": "<p>but that's mostly a nit</p>",
        "id": 173062538,
        "sender_full_name": "centril",
        "timestamp": 1565645244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> oh maybe I misunderstood the structure of the docs; I thought \"check\" would mean \"match non async\" :)</p>",
        "id": 173065467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565647281
    },
    {
        "content": "<p>That was the point of the second \"conforms\" column =P</p>",
        "id": 173065715,
        "sender_full_name": "centril",
        "timestamp": 1565647508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm looking forward to the day where no PR fails due to a lack of <code>--bless --compare-mode=nll</code></p>",
        "id": 173112026,
        "sender_full_name": "centril",
        "timestamp": 1565702229
    },
    {
        "content": "<p>of course, they'll fail due to a lack of <code>--compare-mode=polonius</code> instead ;)</p>",
        "id": 173112043,
        "sender_full_name": "centril",
        "timestamp": 1565702246
    },
    {
        "content": "<p>I had a feeling I was forgetting something related to nll and bless</p>",
        "id": 173112118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565702292
    },
    {
        "content": "<p>It is also annoying that x.py --test never terminates on my machine</p>",
        "id": 173112128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565702304
    },
    {
        "content": "<p>it errors out somewhere in run-pass fulldeps</p>",
        "id": 173112142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565702309
    },
    {
        "content": "<p>aw <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> known issue / file one?</p>",
        "id": 173112151,
        "sender_full_name": "centril",
        "timestamp": 1565702324
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[run-make] run-make-fulldeps/linker-output-non-utf8\n</pre></div>",
        "id": 173112157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565702327
    },
    {
        "content": "<p>I'm not sure, I was going to maybe search for it today</p>",
        "id": 173112169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565702337
    },
    {
        "content": "<p>(filed <a href=\"https://github.com/rust-lang/rust/issues/63520\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63520\">https://github.com/rust-lang/rust/issues/63520</a>)</p>",
        "id": 173113167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565703029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> if you can re-review last commit of <a href=\"https://github.com/rust-lang/rust/pull/63501\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63501\">https://github.com/rust-lang/rust/pull/63501</a>, would be great</p>",
        "id": 173116331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565705427
    }
]