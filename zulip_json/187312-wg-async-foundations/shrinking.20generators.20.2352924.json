[
    {
        "content": "<p>So the other issue is  Reuse generator slots after StorageDead <a href=\"https://github.com/rust-lang/rust/issues/52924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52924\">#52924</a></p>",
        "id": 160025573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809586
    },
    {
        "content": "<p>we had some discussion in the youtube video about the overall strategy</p>",
        "id": 160025582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809600
    },
    {
        "content": "<p>however, I've not really looked into the code in question to see what is blocking that strategy from being implemented</p>",
        "id": 160025597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> -- do you happen to be around?</p>",
        "id": 160025604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809622
    },
    {
        "content": "<p>(OK, I'm going to guess they're not right now)</p>",
        "id": 160025900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809833
    },
    {
        "content": "<p>this sounds to me like a fun/interesting issue to tackle, but I'm not sure when I would be able to dig in (next week possibly?)</p>",
        "id": 160025918,
        "sender_full_name": "tmandry",
        "timestamp": 1551809846
    },
    {
        "content": "<p>Actually, <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> would likely know too, in case they are around</p>",
        "id": 160025922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809847
    },
    {
        "content": "<p>Zulip won't notify me</p>",
        "id": 160025926,
        "sender_full_name": "eddyb",
        "timestamp": 1551809850
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> =)</p>",
        "id": 160025936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809856
    },
    {
        "content": "<p>We were discussing how to alter the layout of generators</p>",
        "id": 160025952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809872
    },
    {
        "content": "<p>(if someone else wants to tackle it, feel free)</p>",
        "id": 160025955,
        "sender_full_name": "tmandry",
        "timestamp": 1551809876
    },
    {
        "content": "<p>so that they reuse slots</p>",
        "id": 160025957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809877
    },
    {
        "content": "<p>I've discussed this with <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> before</p>",
        "id": 160026013,
        "sender_full_name": "eddyb",
        "timestamp": 1551809891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> had mentioned the idea that you two discussed of using a simple heuristic to achieve better re-use</p>",
        "id": 160026015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809892
    },
    {
        "content": "<p>Yes, but I was wondering -- what parts of the code would have to be modified?</p>",
        "id": 160026025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809901
    },
    {
        "content": "<p>the general case is painful to implement, but the simple case should be relatively easy</p>",
        "id": 160026038,
        "sender_full_name": "eddyb",
        "timestamp": 1551809910
    },
    {
        "content": "<p>if <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> is around, you should ask them</p>",
        "id": 160026043,
        "sender_full_name": "eddyb",
        "timestamp": 1551809917
    },
    {
        "content": "<p>Basically, is this relatively straightforward, or will it require some bigger refactorings?</p>",
        "id": 160026044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809921
    },
    {
        "content": "<p>(I was particularly concerned about whether it was ok for layout of a generator to depend on MIR.. I guess maybe it already does?)</p>",
        "id": 160026065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809939
    },
    {
        "content": "<p>the simple case is \"this is live only across one yield\" <em>I think</em>?</p>",
        "id": 160026069,
        "sender_full_name": "eddyb",
        "timestamp": 1551809941
    },
    {
        "content": "<p>it already does</p>",
        "id": 160026087,
        "sender_full_name": "eddyb",
        "timestamp": 1551809948
    },
    {
        "content": "<p>right, this is what <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> described</p>",
        "id": 160026089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809949
    },
    {
        "content": "<p>OK, then it seems like it shouldn't be too hard to do</p>",
        "id": 160026096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551809954
    },
    {
        "content": "<p>so, you end up with a map from state to a list of locals only needed for that state (i.e. those lists are all disjoint)</p>",
        "id": 160026186,
        "sender_full_name": "eddyb",
        "timestamp": 1551810007
    },
    {
        "content": "<p>So, to fill in those of you who <em>didn't</em> follow the video the other day, the idea would be to identify data that is only live across a <strong>single yield</strong>, and then sort those bits of data by which yield they are live across. Things from yield X and yield Y can re-use the same storage slots</p>",
        "id": 160026187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810008
    },
    {
        "content": "<p>But for things live across multiple yield, we can just put them each into their own storage slot</p>",
        "id": 160026206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810019
    },
    {
        "content": "<p>this isn't optimal but would help a lot</p>",
        "id": 160026211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810022
    },
    {
        "content": "<p>and would be efficient to compute</p>",
        "id": 160026215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810025
    },
    {
        "content": "<p>(Sound about right, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>?)</p>",
        "id": 160026234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810038
    },
    {
        "content": "<p>you would then use that to have an enum-like thing <em>after</em> the existing layout (which wouldn't contain any of those locals)</p>",
        "id": 160026235,
        "sender_full_name": "eddyb",
        "timestamp": 1551810039
    },
    {
        "content": "<p>Right ok</p>",
        "id": 160026249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810056
    },
    {
        "content": "<p>so I guess somebody needs to dig into the existing layout code a bit to suggest how to alter</p>",
        "id": 160026259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810064
    },
    {
        "content": "<p>my sense is that it seems of \"medium\" complexity</p>",
        "id": 160026270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810074
    },
    {
        "content": "<p>well, what I described is how I think this would be sanely implemented, i.e. <em>without</em> trying to pair up locals</p>",
        "id": 160026272,
        "sender_full_name": "eddyb",
        "timestamp": 1551810075
    },
    {
        "content": "<p>not a trivial patch but not an epic quest either</p>",
        "id": 160026278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810081
    },
    {
        "content": "<p>the layout code shouldn't be <em>too</em> hard, you kinda have to treat it like an <code>enum</code></p>",
        "id": 160026314,
        "sender_full_name": "eddyb",
        "timestamp": 1551810116
    },
    {
        "content": "<p>I guess we don't have enums with \"common fields\" today, heh</p>",
        "id": 160026369,
        "sender_full_name": "eddyb",
        "timestamp": 1551810133
    },
    {
        "content": "<p>I mean right now we handle generators <em>somehow</em></p>",
        "id": 160026388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810145
    },
    {
        "content": "<p>right now we just make a struct</p>",
        "id": 160026391,
        "sender_full_name": "eddyb",
        "timestamp": 1551810152
    },
    {
        "content": "<p>with the state and all the locals ever saved</p>",
        "id": 160026407,
        "sender_full_name": "eddyb",
        "timestamp": 1551810162
    },
    {
        "content": "<p>ok, I see</p>",
        "id": 160026422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810179
    },
    {
        "content": "<p>all right, we should break out these details into a separate topic</p>",
        "id": 160026457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810204
    },
    {
        "content": "<p>there's no concept in the layout for \"a struct with potentially-overlapping fields\", sadly, that would be ideal here</p>",
        "id": 160026463,
        "sender_full_name": "eddyb",
        "timestamp": 1551810213
    },
    {
        "content": "<p>I guess the question is: does anybody who is present here today feel interested in trying to tackle this challenge</p>",
        "id": 160026466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810217
    },
    {
        "content": "<p>yeah, split this entire conversation out, since you pinged me</p>",
        "id": 160026470,
        "sender_full_name": "eddyb",
        "timestamp": 1551810224
    },
    {
        "content": "<p>(PM me somewhere, ideally Discord, if you need help with the layout stuff. for the analysis on the MIR side, you'll likely need <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>)</p>",
        "id": 160026532,
        "sender_full_name": "eddyb",
        "timestamp": 1551810254
    },
    {
        "content": "<p>I'm interested as I mentioned</p>",
        "id": 160026557,
        "sender_full_name": "tmandry",
        "timestamp": 1551810274
    },
    {
        "content": "<p>I could also work on it as part of my upcoming contract but it might take a while to get to it</p>",
        "id": 160026569,
        "sender_full_name": "eddyb",
        "timestamp": 1551810290
    },
    {
        "content": "<p>(ok, separated)</p>",
        "id": 160026576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551810296
    },
    {
        "content": "<p>but not sure whether I will have bandwidth for it.. that should become clear later today :)</p>",
        "id": 160026579,
        "sender_full_name": "tmandry",
        "timestamp": 1551810297
    },
    {
        "content": "<p>Yeah <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> we should chat about this later today :)</p>",
        "id": 160027615,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551810937
    },
    {
        "content": "<p>As far as the \"enum with shared fields\" thing goes, I'd imagined there'd be some way to hide the actual types from MIR and keep the generator memory as roughly a \"stack\" of bytes</p>",
        "id": 160027739,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551811004
    },
    {
        "content": "<p>We lose out on some optimization opportunities but it seems like a reasonable place to start</p>",
        "id": 160027762,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551811021
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> had opinions here</p>",
        "id": 160027780,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551811030
    },
    {
        "content": "<p>trying again after adding them to the stream... <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 160048905,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551826412
    },
    {
        "content": "<p>I am mostly concerned about having a definition of a \"valid\" generator state (as in, the invariant that layout optimizations rely on) that can be reasonably checked by a UB sanitizer. Currently generators are treated as opaque by Miri because their fields dont actually all get properly initialized upon creation -- basically, the type information stored in the layout is lying when it claims that these fields always have these types. I think this is also why the layout code needs a special case to not find niches in generators.</p>",
        "id": 160079659,
        "sender_full_name": "RalfJ",
        "timestamp": 1551864123
    },
    {
        "content": "<p>I imagine that if we take the 'enum-like' approach that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> was describing -- probably \"union-like\" is a better description -- this problem will go away</p>",
        "id": 160109158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551888688
    },
    {
        "content": "<p>but it's a good thing for us to try to fix at the same time</p>",
        "id": 160109166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551888698
    },
    {
        "content": "<p>that said, it seems like we might want a kind of separation -- what the <strong>MIR</strong> calls \"field 0\", for example, might want to map to a richer internal structure, I would think... i.e., internally the generator would have a kind of \"union\" of possibilities...</p>",
        "id": 160109322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551888792
    },
    {
        "content": "<p>...I have to look a bit at the code to try and make what I'm saying more precise.</p>",
        "id": 160109352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551888811
    },
    {
        "content": "<p>it certainly would be helpful to have a bit of information left over for debuginfo as well</p>",
        "id": 160114438,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551892363
    },
    {
        "content": "<p>Yes, a good point</p>",
        "id": 160117272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551894256
    },
    {
        "content": "<p>Okay, I've begun digging into this and <a href=\"https://paper.dropbox.com/doc/Reuse-generator-slots-after-StorageDead-52924--AZIlWEta_TCSzCEq89IIz6PIAQ-BmtwrZorhqF5AjhFtPKLT\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Reuse-generator-slots-after-StorageDead-52924--AZIlWEta_TCSzCEq89IIz6PIAQ-BmtwrZorhqF5AjhFtPKLT\">taking notes on what the implementation would require</a>. I'm very new to all of this code, so anyone that has familiarity with it is welcome to add to my notes / leave comments :)</p>",
        "id": 160535605,
        "sender_full_name": "tmandry",
        "timestamp": 1552355650
    },
    {
        "content": "<p>so far it's all pretty basic stuff, just finding out what code is involved etc</p>",
        "id": 160535620,
        "sender_full_name": "tmandry",
        "timestamp": 1552355679
    },
    {
        "content": "<p>Okay, so my current thinking is I have two possible approaches to making this work:</p>\n<p>1) Actually create an enum type during the mir transform stage, with one variant for each yield point, and put it inside the <code>GeneratorLayout</code><br>\n  - not entirely clear on how to propagate local def information through to debug info, this would probably require significant refactoring of that code<br>\n2) Store all the information about fields only live across one yield point inside <code>GeneratorLayout</code>, and then eventually turn this into a custom layout with <code>FieldPlacement::Arbitrary</code>, essentially handling it the same as an enum.<br>\n3) Maybe something else?</p>\n<p>I haven't dug into how feasible each of these options is yet, thoughts/suggestions welcome!</p>",
        "id": 161208151,
        "sender_full_name": "tmandry",
        "timestamp": 1553046610
    },
    {
        "content": "<p>Debug - that's a good point. Which approach is likely to be kinder to debuggers trying to fathom what's going on with a generator?</p>",
        "id": 161225561,
        "sender_full_name": "Giles Cope",
        "timestamp": 1553070744
    },
    {
        "content": "<p>Debug is handled similar to function locals when the generator is running, currently all locals are declared as soon as the generator resumes, but I think this change will make it more needed to actually declare the correct locals based on current state</p>",
        "id": 161230874,
        "sender_full_name": "Nemo157",
        "timestamp": 1553076021
    },
    {
        "content": "<p>There’s also the question of what to display when printing the generator value itself, I’m not sure what’s done currently</p>",
        "id": 161230900,
        "sender_full_name": "Nemo157",
        "timestamp": 1553076051
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 161264822,
        "sender_full_name": "tmandry",
        "timestamp": 1553099662
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 161264848,
        "sender_full_name": "tmandry",
        "timestamp": 1553099680
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has troubles with Zulip, you may get more mileage by pinging them on discord with a link to the comment</p>",
        "id": 161284585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553111415
    },
    {
        "content": "<p>oh it's this hard stuff</p>",
        "id": 161284675,
        "sender_full_name": "eddyb",
        "timestamp": 1553111492
    },
    {
        "content": "<p>I'm in a wg-grammar meeting (the first one I attended in several months...), but I'll try to multitask</p>",
        "id": 161284704,
        "sender_full_name": "eddyb",
        "timestamp": 1553111519
    },
    {
        "content": "<blockquote>\n<p>1) Actually create an enum type during the mir transform stage</p>\n</blockquote>\n<p>there's no way to synthesize actual <code>enum</code> types during compilation, btw</p>",
        "id": 161286301,
        "sender_full_name": "eddyb",
        "timestamp": 1553112531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> only 2) is workable AFAICT. as for debuginfo, there shouldn't be any issues - I also need to get back to <a href=\"https://github.com/rust-lang/rust/pull/56278\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56278\">https://github.com/rust-lang/rust/pull/56278</a> soon, the follow-up to that should clean up the debuginfo generation logic and let us do more things with generators</p>",
        "id": 161286726,
        "sender_full_name": "eddyb",
        "timestamp": 1553112811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> btw for debuggers printing the generator itself, we can piggyback on the new support for debugging <code>enum</code>s, which tells DWARF about variant types quite directly</p>",
        "id": 161287035,
        "sender_full_name": "eddyb",
        "timestamp": 1553113011
    },
    {
        "content": "<p>and because DWARF has little to no limitations to how weird layouts can be, pretty much anything should work!</p>",
        "id": 161287067,
        "sender_full_name": "eddyb",
        "timestamp": 1553113036
    },
    {
        "content": "<p>okay, thanks!</p>",
        "id": 161290325,
        "sender_full_name": "tmandry",
        "timestamp": 1553115301
    },
    {
        "content": "<p>I think I'll try to implement proper debuginfo in this PR, but if I hit issues, I can open a new blocking issue and wait on <a href=\"https://github.com/rust-lang/rust/issues/56278\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56278\">#56278</a></p>",
        "id": 161290372,
        "sender_full_name": "tmandry",
        "timestamp": 1553115342
    },
    {
        "content": "<p>Status update: I'm nearly done with an initial implementation. The analysis is done and now I'm working on the layout code. Most of the time has been spent understanding what's going on currently, the implementation itself doesn't seem that hard.</p>",
        "id": 161732317,
        "sender_full_name": "tmandry",
        "timestamp": 1553576886
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> since I won't be able to make the wg meeting tomorrow</p>",
        "id": 161732325,
        "sender_full_name": "tmandry",
        "timestamp": 1553576906
    },
    {
        "content": "<p>(okay, so implementing the layout is definitely the harder part)</p>",
        "id": 161812115,
        "sender_full_name": "tmandry",
        "timestamp": 1553642198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Right now <code>FieldPlacement::Arbitrary</code> lowers directly to an LLVM struct which iiuc doesn't support overlapping fields. Is it possible to use <code>FieldPlacement::Variant</code> and generate MIR that accesses the fields under a variant?</p>",
        "id": 161917245,
        "sender_full_name": "tmandry",
        "timestamp": 1553739552
    },
    {
        "content": "<p>(cc other people who might know... <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>)</p>",
        "id": 161981424,
        "sender_full_name": "tmandry",
        "timestamp": 1553798876
    },
    {
        "content": "<p>I'm just looking for a quick thumbs up/down on whether this approach is worth pursuing.. tackling it now unless I hear otherwise :)</p>",
        "id": 161981991,
        "sender_full_name": "tmandry",
        "timestamp": 1553799291
    },
    {
        "content": "<p>one problem I see is that I'd have to move the variant tag to field 0, in front of the generator upvars, which might break things elsewhere</p>",
        "id": 161982172,
        "sender_full_name": "tmandry",
        "timestamp": 1553799438
    },
    {
        "content": "<p>more specifically, I'm sure there is both code that assumes variant tags are at field index 0, and code that assumes that upvars start at index 0</p>",
        "id": 161982865,
        "sender_full_name": "tmandry",
        "timestamp": 1553799914
    },
    {
        "content": "<p>actually, it may not matter for codegen purposes. the MIR generation will always generate a direct field access to get the variant, as well as to the fields that should be valid across a particular suspension point.</p>",
        "id": 161983315,
        "sender_full_name": "tmandry",
        "timestamp": 1553800221
    },
    {
        "content": "<p>okay, this might work</p>",
        "id": 161983362,
        "sender_full_name": "tmandry",
        "timestamp": 1553800267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I know that debuginfo definitely assumes upvars start at field index 0</p>",
        "id": 161989839,
        "sender_full_name": "Nemo157",
        "timestamp": 1553804994
    },
    {
        "content": "<p>But that shouldn’t be hard to fixup</p>",
        "id": 161989920,
        "sender_full_name": "Nemo157",
        "timestamp": 1553805023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> thanks</p>",
        "id": 161993420,
        "sender_full_name": "tmandry",
        "timestamp": 1553807706
    },
    {
        "content": "<p>I'm going to try keeping them there first</p>",
        "id": 161993431,
        "sender_full_name": "tmandry",
        "timestamp": 1553807714
    },
    {
        "content": "<p>the tag is not before everything else? huh</p>",
        "id": 161994141,
        "sender_full_name": "eddyb",
        "timestamp": 1553808258
    },
    {
        "content": "<p>the field stuff is tricky... I don't think <code>FIeldPlacement::Variant</code> is a thing?</p>",
        "id": 161994180,
        "sender_full_name": "eddyb",
        "timestamp": 1553808306
    },
    {
        "content": "<p>maybe rename <code>Arbitrary</code> to <code>Disjoint</code> and add another variant... or maybe just a <code>disjoint</code> field to <code>Arbitrary</code></p>",
        "id": 161994197,
        "sender_full_name": "eddyb",
        "timestamp": 1553808340
    },
    {
        "content": "<p>so the \"struct-like\" situation only holds for <code>disjoint: true</code></p>",
        "id": 161994212,
        "sender_full_name": "eddyb",
        "timestamp": 1553808357
    },
    {
        "content": "<p><code>rustc_codegen_llvm</code> already has logic for accessing arbitrary offsets in non-struct-likes... unless that became unnecessary and got removed, heh</p>",
        "id": 161994308,
        "sender_full_name": "eddyb",
        "timestamp": 1553808424
    },
    {
        "content": "<p>you could try doing variants but idk if you can encode that in MIR nicely,  MIR variant \"downcasting\" requires an <code>AdtDef</code> (that the variant index indexes into)</p>",
        "id": 161994397,
        "sender_full_name": "eddyb",
        "timestamp": 1553808499
    },
    {
        "content": "<p>so I think \"non-disjoint arbitrary offsets\" that the LLVM backend has to work harder for, but doesn't introduce complexity anywhere else, is good. OTOH, using the variants stuff means miri can actually validity-check generators because there is a mapping from discriminant values to which fields should be initialized</p>",
        "id": 161994495,
        "sender_full_name": "eddyb",
        "timestamp": 1553808593
    },
    {
        "content": "<p>erm yeah, I meant to use <code>Variants::Tagged</code> instead of <code>Variants::Single</code></p>",
        "id": 161994907,
        "sender_full_name": "tmandry",
        "timestamp": 1553808935
    },
    {
        "content": "<p>basically treat it as an enum with a long, multi-field prefix</p>",
        "id": 161994978,
        "sender_full_name": "tmandry",
        "timestamp": 1553808977
    },
    {
        "content": "<p>ah I see about the <code>AdtDef</code>, I was a bit worried about something like that</p>",
        "id": 161995034,
        "sender_full_name": "tmandry",
        "timestamp": 1553809026
    },
    {
        "content": "<p>I would like to get miri able to do validity checking, but if it's a big refactor then it can wait..</p>",
        "id": 161995145,
        "sender_full_name": "tmandry",
        "timestamp": 1553809113
    },
    {
        "content": "<p>So, the way generators work now</p>",
        "id": 162650137,
        "sender_full_name": "tmandry",
        "timestamp": 1554490249
    },
    {
        "content": "<p>is that locals who are live across yields are <em>remapped</em> to fields of our generator struct</p>",
        "id": 162650191,
        "sender_full_name": "tmandry",
        "timestamp": 1554490282
    },
    {
        "content": "<p>this is fairly easily done, and means the MIR doesn't need to change much</p>",
        "id": 162650326,
        "sender_full_name": "tmandry",
        "timestamp": 1554490353
    },
    {
        "content": "<p>However, one interesting consequence of putting these locals in a tagged union, with one variant for each yield</p>",
        "id": 162650362,
        "sender_full_name": "tmandry",
        "timestamp": 1554490383
    },
    {
        "content": "<p>is that accesses of some locals, who (let's say) are only live across one yield point,<br>\nmay interleave with the accesses of locals who are only live across the next yield point</p>",
        "id": 162650477,
        "sender_full_name": "tmandry",
        "timestamp": 1554490463
    },
    {
        "content": "<p>If we were to follow the way the MIR transform is done today, this would lead to invalid codegen, because those locals might actually overlap in memory</p>",
        "id": 162650579,
        "sender_full_name": "tmandry",
        "timestamp": 1554490538
    },
    {
        "content": "<p>for example, let's pretend our generator looks like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">my_generator</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then our generator type would look like this...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">MyGenerator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Unresumed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Complete</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Poisoned</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">YieldedOnce</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">YieldedTwice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>when the generator is resumed after the first yield, the generated code would write to y, then read from x, which is bad because they share the same bytes in memory</p>",
        "id": 162651175,
        "sender_full_name": "tmandry",
        "timestamp": 1554490891
    },
    {
        "content": "<p>So, the solution to this is to move all the \"locals\" like this _out_ of the generator type and into <em>real</em> locals at the beginning of each resume</p>",
        "id": 162651310,
        "sender_full_name": "tmandry",
        "timestamp": 1554490973
    },
    {
        "content": "<p>But of course, for any locals which are borrowed, this could break things</p>",
        "id": 162651354,
        "sender_full_name": "tmandry",
        "timestamp": 1554491000
    },
    {
        "content": "<p>So the initial plan is for this optimization not to include any locals which are ever borrowed</p>",
        "id": 162651391,
        "sender_full_name": "tmandry",
        "timestamp": 1554491021
    },
    {
        "content": "<p>We have the information we need to make the optimization smarter than this, of course</p>",
        "id": 162651540,
        "sender_full_name": "tmandry",
        "timestamp": 1554491100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and I were talking about this, and doing the \"full\" optimization is a lot like the NRVO optimization, which was quite expensive the last time they tried it</p>",
        "id": 162651596,
        "sender_full_name": "tmandry",
        "timestamp": 1554491127
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span></p>",
        "id": 162651606,
        "sender_full_name": "tmandry",
        "timestamp": 1554491134
    },
    {
        "content": "<p>I think this also relates to some of the other issues around optimizations involving borrowed locals</p>",
        "id": 162652155,
        "sender_full_name": "tmandry",
        "timestamp": 1554491491
    },
    {
        "content": "<p>so maybe we can solve many of them with the same analysis</p>",
        "id": 162652183,
        "sender_full_name": "tmandry",
        "timestamp": 1554491518
    },
    {
        "content": "<p><em>assuming</em> we can find one that performs well.. :)</p>",
        "id": 162652243,
        "sender_full_name": "tmandry",
        "timestamp": 1554491535
    },
    {
        "content": "<p>Okay, so latest update is, we need to support some borrowed locals in order to optimize <code>await</code></p>",
        "id": 162675377,
        "sender_full_name": "tmandry",
        "timestamp": 1554512060
    },
    {
        "content": "<p>In the <code>await</code> case it is easier, because the borrowed future goes out of scope by the time we are done await'ing it</p>",
        "id": 162675475,
        "sender_full_name": "tmandry",
        "timestamp": 1554512250
    },
    {
        "content": "<p>So we decided to use storage liveness for this</p>",
        "id": 162675493,
        "sender_full_name": "tmandry",
        "timestamp": 1554512282
    },
    {
        "content": "<p>if we have two vars <code>x</code> and <code>y</code>, and every occurrence of <code>StorageLive(y)</code> is dominated by an occurrence of <code>StorageDead(x)</code>, then <code>x</code> and <code>y</code> can overlap in the generator type</p>",
        "id": 162675543,
        "sender_full_name": "tmandry",
        "timestamp": 1554512329
    },
    {
        "content": "<p>I'll look more into how to run this on monday</p>",
        "id": 162675638,
        "sender_full_name": "tmandry",
        "timestamp": 1554512442
    },
    {
        "content": "<p>but this would mean that we won't be moving things in and out of the generator struct, and will continue using the fields directly</p>",
        "id": 162676226,
        "sender_full_name": "tmandry",
        "timestamp": 1554513389
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210267\">Nemo157</span> btw for debuggers printing the generator itself, we can piggyback on the new support for debugging <code>enum</code>s, which tells DWARF about variant types quite directly</p>\n</blockquote>",
        "id": 163236737,
        "sender_full_name": "tmandry",
        "timestamp": 1555113047
    },
    {
        "content": "<p>I'm having trouble observing this behavior even for <code>enum</code>s</p>",
        "id": 163236754,
        "sender_full_name": "tmandry",
        "timestamp": 1555113070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> should I be able to print an enum in gdb or lldb and see the fields inside it?</p>",
        "id": 163236830,
        "sender_full_name": "tmandry",
        "timestamp": 1555113128
    },
    {
        "content": "<p>(or anyone who knows)</p>",
        "id": 163236870,
        "sender_full_name": "tmandry",
        "timestamp": 1555113223
    },
    {
        "content": "<p>ah, gdb 8 seems to support this. newer lldb still doesn't seem to though</p>",
        "id": 163283775,
        "sender_full_name": "tmandry",
        "timestamp": 1555190085
    },
    {
        "content": "<p>Okay, so here's the current logic of the optimization:</p>\n<ul>\n<li>(1) Collect all locals with liveness across a yield point, meaning we need to store them (we do this today)</li>\n<li>(2) Consider each local which is <em>storage live across only one yield point</em> a candidate for overlapping, and tentatively assign it to the layout variant for that particular yield point</li>\n<li>(3) Run <code>MaybeStorageLive</code> dataflow analysis on MIR</li>\n<li>(4) Iterate through every location in the MIR, and check to see which locals may have live storage at the same time. Record these potential conflicts in a bitset for each local.</li>\n<li>(5) For every candidate local which has a potential conflict with another candidate local:<ul>\n<li>If the candidate locals are both assigned to the same layout variant, there is no way their storage can overlap in memory. Do nothing.</li>\n<li>If the candidate locals are assigned to different layout variants, pick one of them and remove its candidacy.</li>\n</ul>\n</li>\n<li>(6) Now, each remaining candidate can be assigned to a single layout variant. Other stored locals are assigned to <em>all</em> layout variants, so they never overlap with one another.</li>\n</ul>",
        "id": 163497783,
        "sender_full_name": "tmandry",
        "timestamp": 1555441831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 163497801,
        "sender_full_name": "tmandry",
        "timestamp": 1555441856
    },
    {
        "content": "<p>sorry for weird formatting, zulip doesn't seem to handle numbered lists well</p>",
        "id": 163497921,
        "sender_full_name": "tmandry",
        "timestamp": 1555441924
    },
    {
        "content": "<p>Can you say a bit more about step 3?</p>\n<blockquote>\n<p>(3) Run MaybeStorageLive dataflow analysis on MIR</p>\n</blockquote>\n<p>What is this analysis more precisely?</p>",
        "id": 163497974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555441988
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc_mir/dataflow/impls/storage_liveness.rs#L7\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc_mir/dataflow/impls/storage_liveness.rs#L7\">here's the code</a></p>",
        "id": 163498251,
        "sender_full_name": "tmandry",
        "timestamp": 1555442170
    },
    {
        "content": "<p>it's a very simple analysis, only looking at StorageLive and StorageDead statements</p>",
        "id": 163498295,
        "sender_full_name": "tmandry",
        "timestamp": 1555442202
    },
    {
        "content": "<p>so one possibility is to make this smarter, and look to see if there are actual reads and writes past a certain point</p>",
        "id": 163498331,
        "sender_full_name": "tmandry",
        "timestamp": 1555442242
    },
    {
        "content": "<p>I may be wrong since I'm new to this, but dataflow analysis seems to propagate in the \"forward\" direction (perhaps it's a fixed point algorithm?), while this would need to propagate information \"backwards\"</p>",
        "id": 163498453,
        "sender_full_name": "tmandry",
        "timestamp": 1555442351
    },
    {
        "content": "<p>of course <a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc_mir/util/liveness.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc_mir/util/liveness.rs\"><code>rustc_mir::util::liveness</code></a> must be doing this somehow</p>",
        "id": 163498594,
        "sender_full_name": "tmandry",
        "timestamp": 1555442478
    },
    {
        "content": "<p>(I haven't looked at the code)</p>",
        "id": 163498601,
        "sender_full_name": "tmandry",
        "timestamp": 1555442483
    },
    {
        "content": "<p>however, \"regular\" liveness analysis doesn't work here, because it only cares about whether particular assignments are actually used, while we care about storage liveness (i.e., whether physical bytes should be reserved for future assignments)</p>",
        "id": 163498740,
        "sender_full_name": "tmandry",
        "timestamp": 1555442583
    },
    {
        "content": "<p>so all that to say, we could maybe come up with a way of combining these two approaches into something smarter than <code>MaybeStorageLive</code>, as you alluded to earlier in the meeting</p>",
        "id": 163498779,
        "sender_full_name": "tmandry",
        "timestamp": 1555442625
    },
    {
        "content": "<p>not sure if I'm being clear</p>",
        "id": 163498850,
        "sender_full_name": "tmandry",
        "timestamp": 1555442658
    },
    {
        "content": "<p>I <em>think</em> this can be done, but I haven't though through all of the details yet</p>",
        "id": 163499127,
        "sender_full_name": "tmandry",
        "timestamp": 1555442840
    },
    {
        "content": "<p>The other possible approach I see is one you also mentioned:<br>\nEmitting <code>StorageDead</code> on the drop and unwind paths, at least for generators</p>\n<ul>\n<li>This means that some drop/unwind blocks that are currently \"shared\" between different points can no longer be shared; we'll have to produce an additional block that contains some <code>StorageDead</code> statements, followed by a jump to the original block</li>\n<li>This could be combined with a sort of \"storage liveness optimization\" pass where we shrink the storage liveness range of locals, which may enable better space optimizations by my optimization pass described above<ul>\n<li>We might want to do this eventually, regardless of the approach we take now.</li>\n</ul>\n</li>\n</ul>",
        "id": 163499736,
        "sender_full_name": "tmandry",
        "timestamp": 1555443271
    },
    {
        "content": "<p>(ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> again :) )</p>",
        "id": 163499787,
        "sender_full_name": "tmandry",
        "timestamp": 1555443319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> thanks -- hmm,</p>",
        "id": 163500084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443562
    },
    {
        "content": "<p>what I was proposing was indeed something more like a \"liveness\" analysis</p>",
        "id": 163500110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443594
    },
    {
        "content": "<p>whether it's different from a normal liveness analysis depends a bit on your perspetive</p>",
        "id": 163500212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443654
    },
    {
        "content": "<p>that is, <code>x = 5</code> -- while traditionally considered a \"def\" of <code>x</code> -- could in rust be considered a <em>use</em>, since it has to drop the previous value of <code>x</code> (though I guess this doesn't apply to integers)</p>",
        "id": 163500246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443684
    },
    {
        "content": "<p>anyway the point would be that basically <em>everything</em> would be considered a <code>use</code> of the variable <strong>except</strong> <code>StorageLive</code></p>",
        "id": 163500266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443704
    },
    {
        "content": "<p>which would be considered a def</p>",
        "id": 163500273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443709
    },
    {
        "content": "<p>(though the semantics of StorageLive are a bit..odd -- it's not clear to me, for example, what happens if you have two StorageLive statements, one after the other -- is the second one a no-op?)</p>",
        "id": 163500335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443739
    },
    {
        "content": "<blockquote>\n<p>anyway the point would be that basically <em>everything</em> would be considered a <code>use</code> of the variable <strong>except</strong> <code>StorageLive</code></p>\n</blockquote>\n<p>yes, that sounds right</p>",
        "id": 163500361,
        "sender_full_name": "tmandry",
        "timestamp": 1555443763
    },
    {
        "content": "<p>but let's assume (which I presume is true) that this doesn't happen for us, and that there is only a single <code>StorageLive</code> for any given slot (or possibly zero)</p>",
        "id": 163500364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443767
    },
    {
        "content": "<blockquote>\n<p>(though the semantics of StorageLive are a bit..odd -- it's not clear to me, for example, what happens if you have two StorageLive statements, one after the other -- is the second one a no-op?)</p>\n</blockquote>\n<p>(I have found them odd too, including the lack of StorageDead along some paths, and wish there were a more formal definition somewhere)</p>",
        "id": 163500394,
        "sender_full_name": "tmandry",
        "timestamp": 1555443804
    },
    {
        "content": "<blockquote>\n<p>yes, that sounds right</p>\n</blockquote>\n<p>well, hmm, so are we running this before or after drop elaboration?</p>",
        "id": 163500403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443813
    },
    {
        "content": "<p>before</p>",
        "id": 163500435,
        "sender_full_name": "tmandry",
        "timestamp": 1555443837
    },
    {
        "content": "<p>so <em>really</em> what you want is something like <code>x = 5</code> is a use <em>iff</em> <code>x</code> is \"maybe initialized\"</p>",
        "id": 163500491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443855
    },
    {
        "content": "<p>or wait, no</p>",
        "id": 163500495,
        "sender_full_name": "tmandry",
        "timestamp": 1555443861
    },
    {
        "content": "<p>sorry, I'm confused, as there's a drop elaboration step within the generator transform</p>",
        "id": 163500507,
        "sender_full_name": "tmandry",
        "timestamp": 1555443882
    },
    {
        "content": "<p>but the \"regular\" drop elaboration stage happens before us</p>",
        "id": 163500544,
        "sender_full_name": "tmandry",
        "timestamp": 1555443914
    },
    {
        "content": "<p>I think we can consider all locals like a \"normal\" function at this point</p>",
        "id": 163500672,
        "sender_full_name": "tmandry",
        "timestamp": 1555444011
    },
    {
        "content": "<p>are you sure?</p>",
        "id": 163500708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444042
    },
    {
        "content": "<p>seems a bit odd</p>",
        "id": 163500712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444044
    },
    {
        "content": "<p>but ok</p>",
        "id": 163500714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444045
    },
    {
        "content": "<p>well, the analysis is running before we remap any locals to generator fields</p>",
        "id": 163500730,
        "sender_full_name": "tmandry",
        "timestamp": 1555444065
    },
    {
        "content": "<p>in that event, though, when you do <code>x = 5</code> that will get compiled into a regular assignment <em>but also</em> a kind of drop of the previous value</p>",
        "id": 163500745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444075
    },
    {
        "content": "<p>but the real question is whether we create <code>StorageLive</code> for all things</p>",
        "id": 163500815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444097
    },
    {
        "content": "<p>(e.g., even for temporaries etc?)</p>",
        "id": 163500822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444102
    },
    {
        "content": "<p>there are some locals that never have <code>StorageLive</code> or <code>StorageDead</code> statements at all; these are not considered candidates for overlapping</p>",
        "id": 163500857,
        "sender_full_name": "tmandry",
        "timestamp": 1555444138
    },
    {
        "content": "<p>ok, I feel like they could be, but let's ignore them for now</p>",
        "id": 163500901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444166
    },
    {
        "content": "<p>(they also have to be handled specially in the existing layout computation)</p>",
        "id": 163500908,
        "sender_full_name": "tmandry",
        "timestamp": 1555444171
    },
    {
        "content": "<p>if we do, and there's exactly one, it's not really important. I suspect we could do the analysis I talked about (indeed, a backwards analysis, and indeed it cannot use the generic dataflow framework then). We could implement it with datafrog, also.</p>",
        "id": 163500923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444177
    },
    {
        "content": "<p>(liveness has custom code for this reason)</p>",
        "id": 163500941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444193
    },
    {
        "content": "<p>the idea would roughly be \"who cares if its storage is still live if we never look at it\"</p>",
        "id": 163500998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444204
    },
    {
        "content": "<p>but maybe I don't know what I'm talking about :)</p>",
        "id": 163501028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444222
    },
    {
        "content": "<p>I'm a <em>bit</em> reluctant to modify the MIR generation though</p>",
        "id": 163501056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444246
    },
    {
        "content": "<p>but I do also worry that we're being hand-wavy with our semantics</p>",
        "id": 163501068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444257
    },
    {
        "content": "<p>and it'd be nice to try and write-out and document somewhat clearly what's going on here</p>",
        "id": 163501102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444284
    },
    {
        "content": "<blockquote>\n<p>the idea would roughly be \"who cares if its storage is still live if we never look at it\"</p>\n</blockquote>\n<p>it makes sense to me and I've been iterating on this for awhile (but the earlier iterations also made sense to me at first... ;) )</p>",
        "id": 163501127,
        "sender_full_name": "tmandry",
        "timestamp": 1555444308
    },
    {
        "content": "<blockquote>\n<p>I'm a <em>bit</em> reluctant to modify the MIR generation though</p>\n</blockquote>\n<p>which part, the generation on drops and unwind paths?</p>",
        "id": 163501268,
        "sender_full_name": "tmandry",
        "timestamp": 1555444389
    },
    {
        "content": "<p>we wouldn't need that if we do the liveness approach, and if indeed that works, I'm inclined to do it that way</p>",
        "id": 163501290,
        "sender_full_name": "tmandry",
        "timestamp": 1555444407
    },
    {
        "content": "<blockquote>\n<p>which part, the generation on drops and unwind paths?</p>\n</blockquote>\n<p>right</p>",
        "id": 163501395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444451
    },
    {
        "content": "<p>because it could be a lot more IR, for one thing, and because I think it might be annoying</p>",
        "id": 163501409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444465
    },
    {
        "content": "<p>and because it doesn't quite <em>feel</em> necessary</p>",
        "id": 163501415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444475
    },
    {
        "content": "<p>okay, I'll try implementing the \"storage liveness analysis\"</p>",
        "id": 163501523,
        "sender_full_name": "tmandry",
        "timestamp": 1555444563
    },
    {
        "content": "<p>I feel like the terminology is getting confusing</p>",
        "id": 163501559,
        "sender_full_name": "tmandry",
        "timestamp": 1555444576
    },
    {
        "content": "<p>yeah that is probably a bad name :)</p>",
        "id": 163501568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444587
    },
    {
        "content": "<p>sounds good, thanks :)</p>",
        "id": 163501615,
        "sender_full_name": "tmandry",
        "timestamp": 1555444625
    },
    {
        "content": "<p><em>has to run</em></p>",
        "id": 163501626,
        "sender_full_name": "tmandry",
        "timestamp": 1555444641
    },
    {
        "content": "<p>great</p>",
        "id": 163502694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555445445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ah I remember now why we cared about <code>StorageDead</code>, it's because of borrows</p>",
        "id": 163511992,
        "sender_full_name": "tmandry",
        "timestamp": 1555452996
    },
    {
        "content": "<p>oh, yes, ok</p>",
        "id": 163511999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555453018
    },
    {
        "content": "<p>unsafe code</p>",
        "id": 163512000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555453019
    },
    {
        "content": "<p>that, and right now the liveness analysis doesn't consider the uses of borrows in general</p>",
        "id": 163512024,
        "sender_full_name": "tmandry",
        "timestamp": 1555453037
    },
    {
        "content": "<p>well I guess any borrow</p>",
        "id": 163512028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555453039
    },
    {
        "content": "<p>yeah</p>",
        "id": 163512034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555453043
    },
    {
        "content": "<p>and we borrow the future in <code>await!()</code> which is specifically the case that I care about optimizing right now :)</p>",
        "id": 163512045,
        "sender_full_name": "tmandry",
        "timestamp": 1555453067
    },
    {
        "content": "<p>so, we may need a different approach</p>",
        "id": 163512236,
        "sender_full_name": "tmandry",
        "timestamp": 1555453208
    },
    {
        "content": "<p>one thing I realized with changing the drop/unwind MIR is, maybe we <em>can</em> stick with the blocks we have, but sprinkle extra <code>StorageDead</code> statements around (i.e., you might encounter a <code>StorageDead</code> without ever seeing a <code>StorageLive</code>)</p>",
        "id": 163512468,
        "sender_full_name": "tmandry",
        "timestamp": 1555453372
    },
    {
        "content": "<p>..then, when considering whether a local may be storage live in a block, if there are <code>StorageDead</code> statements at the beginning of the block, process all of those as part of the start of the block</p>",
        "id": 163512519,
        "sender_full_name": "tmandry",
        "timestamp": 1555453420
    },
    {
        "content": "<p>..this feels hacky, so maybe it's wrong :)</p>",
        "id": 163512528,
        "sender_full_name": "tmandry",
        "timestamp": 1555453430
    },
    {
        "content": "<p>^ the intuition above being \"if two vars might both be StorageLive at the beginning of the block, but then one or both of them are immediately StorageDead before anything else happens, then it doesn't count\"</p>",
        "id": 163516246,
        "sender_full_name": "tmandry",
        "timestamp": 1555456913
    },
    {
        "content": "<p>this still depends on adding <code>StorageDead</code> statements in certain places, though</p>",
        "id": 163516315,
        "sender_full_name": "tmandry",
        "timestamp": 1555456974
    },
    {
        "content": "<p>Okay, I think I'm going to try to prove out the optimization while generating full <code>StorageDead</code> statements everywhere</p>",
        "id": 163521469,
        "sender_full_name": "tmandry",
        "timestamp": 1555463104
    },
    {
        "content": "<p>then we can talk about ways to simplify the generated MIR (I think there are some, since unlike <code>drop</code>, <code>StorageDead</code> can happen multiple times, or even without having a <code>StorageLive</code>)</p>",
        "id": 163521592,
        "sender_full_name": "tmandry",
        "timestamp": 1555463235
    },
    {
        "content": "<p>Ironically, what I'm really trying to preserve is information about scopes here</p>",
        "id": 163521610,
        "sender_full_name": "tmandry",
        "timestamp": 1555463272
    },
    {
        "content": "<p>maybe we can use scope information directly...?</p>",
        "id": 163521663,
        "sender_full_name": "tmandry",
        "timestamp": 1555463292
    },
    {
        "content": "<p>i.e. if we know two vars are in scopes that are disjoint, then they're okay to overlap in storage</p>",
        "id": 163529188,
        "sender_full_name": "tmandry",
        "timestamp": 1555473658
    },
    {
        "content": "<p>although this precludes optimizations we might want to do later</p>",
        "id": 163529215,
        "sender_full_name": "tmandry",
        "timestamp": 1555473697
    },
    {
        "content": "<p>(ah nevermind, there's a reason scopes aren't preserved in MIR. sounds like <code>StorageDead</code> is the way.)</p>",
        "id": 163530827,
        "sender_full_name": "tmandry",
        "timestamp": 1555476124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any objection to the above?</p>",
        "id": 163586746,
        "sender_full_name": "tmandry",
        "timestamp": 1555524834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ping :)</p>",
        "id": 163688414,
        "sender_full_name": "tmandry",
        "timestamp": 1555619732
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 163751589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696414
    },
    {
        "content": "<p>Sorry, yesterday I was basically tied up all day</p>",
        "id": 163751600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696423
    },
    {
        "content": "<blockquote>\n<p>any objection to the above?</p>\n</blockquote>\n<p>I'm not 100% sure what the proposal is, I guess</p>",
        "id": 163751697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> -- apologies for subscribing you to this stream, but I have a quick question -- you were at some point writing up some kind of semantics for <code>StorageLive</code> and <code>StorageDead</code>, right?</p>",
        "id": 163751732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 163751759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696545
    },
    {
        "content": "<blockquote>\n<p>I'm not 100% sure what the proposal is, I guess</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's to go ahead and emit <code>StorageDead</code> for everything along drop and unwind paths, so we're preserving the information that the optimization needs</p>",
        "id": 163753205,
        "sender_full_name": "tmandry",
        "timestamp": 1555697687
    },
    {
        "content": "<p>we could consider only doing it for generators</p>",
        "id": 163753256,
        "sender_full_name": "tmandry",
        "timestamp": 1555697729
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> -- apologies for subscribing you to this stream, but I have a quick question -- you were at some point writing up some kind of semantics for <code>StorageLive</code> and <code>StorageDead</code>, right?</p>\n</blockquote>\n<p>\"writing up\" is an overstatement^^</p>",
        "id": 163753337,
        "sender_full_name": "RalfJ",
        "timestamp": 1555697766
    },
    {
        "content": "<p>I have a blog post at <a href=\"https://www.ralfj.de/blog/2017/06/06/MIR-semantics.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2017/06/06/MIR-semantics.html\">https://www.ralfj.de/blog/2017/06/06/MIR-semantics.html</a></p>",
        "id": 163753347,
        "sender_full_name": "RalfJ",
        "timestamp": 1555697781
    },
    {
        "content": "<p>but mostly there is an implementation in Miri</p>",
        "id": 163753354,
        "sender_full_name": "RalfJ",
        "timestamp": 1555697789
    },
    {
        "content": "<p>(I was also saying that, as an optimization, there might be ways to avoid creating new blocks of just <code>StorageDead</code>s by propagating those statements to other blocks, roughly speaking)</p>",
        "id": 163753585,
        "sender_full_name": "tmandry",
        "timestamp": 1555697988
    },
    {
        "content": "<p>but I'm not sure about this</p>",
        "id": 163753593,
        "sender_full_name": "tmandry",
        "timestamp": 1555698001
    },
    {
        "content": "<p>the reason we need to see <code>StorageDead</code> is because our local could have been borrowed</p>",
        "id": 163754924,
        "sender_full_name": "tmandry",
        "timestamp": 1555699032
    },
    {
        "content": "<p>and we can't ignore borrowed locals if we want to optimize <code>await</code></p>",
        "id": 163754933,
        "sender_full_name": "tmandry",
        "timestamp": 1555699042
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> =)</p>",
        "id": 163758268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> have you seen that post? :) I'm skimming it now and then I'll re-read your comments...</p>",
        "id": 163758354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701646
    },
    {
        "content": "<p>Though I guess it doesn't discuss StorageDead :)</p>",
        "id": 163758413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701722
    },
    {
        "content": "<p>just the effects of redundant StorageLive</p>",
        "id": 163758458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701727
    },
    {
        "content": "<p>^ yes</p>",
        "id": 163758461,
        "sender_full_name": "tmandry",
        "timestamp": 1555701732
    },
    {
        "content": "<p>I found it informative, just not for this particular question :)</p>",
        "id": 163758483,
        "sender_full_name": "tmandry",
        "timestamp": 1555701757
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, I have no objection to trying to emit <code>StorageDead</code>, we should check the effects on perf though</p>",
        "id": 163758488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701762
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 163758495,
        "sender_full_name": "tmandry",
        "timestamp": 1555701776
    },
    {
        "content": "<p>I agree that we are somehow encoding scope information</p>",
        "id": 163758510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701786
    },
    {
        "content": "<p>But I also agree we probably want to go with using flow-control</p>",
        "id": 163758522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701806
    },
    {
        "content": "<p>I'm thinking maybe eventually we can have an optimization pass that bubbles <code>StorageDead</code> up, based on liveness and other factors</p>",
        "id": 163758720,
        "sender_full_name": "tmandry",
        "timestamp": 1555702008
    },
    {
        "content": "<p>but I don't really have an idea of what that looks like :)</p>",
        "id": 163758728,
        "sender_full_name": "tmandry",
        "timestamp": 1555702020
    },
    {
        "content": "<blockquote>\n<p>Though I guess it doesn't discuss StorageDead :)</p>\n</blockquote>\n<p>if you have questions about what Miri does for StorageDead, ask and you shall receive an answer. ;)</p>",
        "id": 163762303,
        "sender_full_name": "RalfJ",
        "timestamp": 1555705355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the question I had is, is it okay to encounter StorageDead twice in a row (or more) for the same var, or StorageDead without StorageLive?</p>",
        "id": 163766502,
        "sender_full_name": "tmandry",
        "timestamp": 1555708747
    },
    {
        "content": "<p>Double StorageDead already happens at the moment, and is handled properly.</p>",
        "id": 163767155,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555709369
    },
    {
        "content": "<p>Miri says yes that is okay</p>",
        "id": 163768204,
        "sender_full_name": "RalfJ",
        "timestamp": 1555710443
    },
    {
        "content": "<p>for whatever that is worth^^</p>",
        "id": 163768206,
        "sender_full_name": "RalfJ",
        "timestamp": 1555710447
    },
    {
        "content": "<p>okay, thanks :)</p>",
        "id": 163770567,
        "sender_full_name": "tmandry",
        "timestamp": 1555712625
    },
    {
        "content": "<p>strangely, emitting these <code>StorageDead</code> statements causes NLL borrow check to emit fewer errors than it did before in a few tests</p>",
        "id": 163776862,
        "sender_full_name": "tmandry",
        "timestamp": 1555720265
    },
    {
        "content": "<p>I'd believe it</p>",
        "id": 163776868,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555720280
    },
    {
        "content": "<p>like, it stops after the first error</p>",
        "id": 163776871,
        "sender_full_name": "tmandry",
        "timestamp": 1555720285
    },
    {
        "content": "<p>oh</p>",
        "id": 163776872,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555720290
    },
    {
        "content": "<p>that... is not what I'd expect</p>",
        "id": 163776874,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555720296
    },
    {
        "content": "<p>and when I comment that line out, then it emits the error for the next line :)</p>",
        "id": 163776881,
        "sender_full_name": "tmandry",
        "timestamp": 1555720317
    },
    {
        "content": "<p>this is only 3 tests, not everywhere</p>",
        "id": 163776927,
        "sender_full_name": "tmandry",
        "timestamp": 1555720331
    },
    {
        "content": "<p>all in <code>ui/nll/user-annotations/</code></p>",
        "id": 163776929,
        "sender_full_name": "tmandry",
        "timestamp": 1555720346
    },
    {
        "content": "<p>maybe there is some heuristic to remove redundant errors somewhere in NLL?</p>",
        "id": 163776956,
        "sender_full_name": "tmandry",
        "timestamp": 1555720418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any idea?</p>",
        "id": 163777029,
        "sender_full_name": "tmandry",
        "timestamp": 1555720512
    },
    {
        "content": "<p>here are the failures... <a href=\"https://gist.github.com/tmandry/8f2ed1438391b80a0b91a2452b36826f\" target=\"_blank\" title=\"https://gist.github.com/tmandry/8f2ed1438391b80a0b91a2452b36826f\">https://gist.github.com/tmandry/8f2ed1438391b80a0b91a2452b36826f</a></p>",
        "id": 163777159,
        "sender_full_name": "tmandry",
        "timestamp": 1555720698
    },
    {
        "content": "<blockquote>\n<p>maybe there is some heuristic to remove redundant errors somewhere in NLL?</p>\n</blockquote>\n<p>hmm I'm not sure</p>",
        "id": 163926591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555958617
    },
    {
        "content": "<p>ah, actually, yeah I think there <em>is</em> some kind of duplicate suppression logic</p>",
        "id": 163926674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555958651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> or <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> may remember more precisely</p>",
        "id": 163926685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555958661
    },
    {
        "content": "<p>but I remember <code>StorageDead</code> being relevant to errors somehow</p>",
        "id": 163926696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555958672
    },
    {
        "content": "<p>I don't have time to dig in just now</p>",
        "id": 163926715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555958687
    },
    {
        "content": "<p>There is definitely some deduplication for storage dead errors.</p>",
        "id": 163926742,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555958708
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src/librustc_mir/borrow_check/error_reporting.rs#L701-L709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src/librustc_mir/borrow_check/error_reporting.rs#L701-L709\">https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src/librustc_mir/borrow_check/error_reporting.rs#L701-L709</a></p>",
        "id": 163927192,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555959016
    },
    {
        "content": "<p>That doesn't appear to be what's happening here though, as the borrow spans should be different</p>",
        "id": 163927350,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555959131
    },
    {
        "content": "<p>Maybe here: <a href=\"https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src/librustc_mir/borrow_check/mod.rs#L930-L940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src/librustc_mir/borrow_check/mod.rs#L930-L940\">https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src/librustc_mir/borrow_check/mod.rs#L930-L940</a></p>",
        "id": 163927867,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555959432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> this definitely looks promising, thanks for pointing me to that!</p>",
        "id": 163951264,
        "sender_full_name": "tmandry",
        "timestamp": 1555979864
    },
    {
        "content": "<p>it seems like <code>check_for_invalidation_at_exit</code> does not do this suppression, and this function was handling checking those locals before I began emitting <code>StorageDead</code>s everywhere</p>",
        "id": 163951349,
        "sender_full_name": "tmandry",
        "timestamp": 1555979984
    },
    {
        "content": "<p>now <code>access_place</code> handles them which does suppression</p>",
        "id": 163951355,
        "sender_full_name": "tmandry",
        "timestamp": 1555980001
    },
    {
        "content": "<p>so the question is... what is the \"correct\" behavior?</p>",
        "id": 163951416,
        "sender_full_name": "tmandry",
        "timestamp": 1555980013
    },
    {
        "content": "<p>I'll push the updated tests to my upcoming PR and we can discuss there...</p>",
        "id": 163951437,
        "sender_full_name": "tmandry",
        "timestamp": 1555980063
    },
    {
        "content": "<p>can <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> or someone who can start a try run on my PR <a href=\"https://github.com/rust-lang/rust/issues/60187\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60187\">#60187</a>?</p>",
        "id": 163953693,
        "sender_full_name": "tmandry",
        "timestamp": 1555983601
    },
    {
        "content": "<p>we need to check the impact on perf of generating these <code>StorageDead</code> statements</p>",
        "id": 163953744,
        "sender_full_name": "tmandry",
        "timestamp": 1555983622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> thanks :)</p>",
        "id": 163953973,
        "sender_full_name": "tmandry",
        "timestamp": 1555983975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> also you'd be a great person to take a look at the PR :)</p>",
        "id": 163953974,
        "sender_full_name": "tmandry",
        "timestamp": 1555983987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> hey.. I am trying to implement \"only emit StorageDeads for generators\", but I'm not sure how to get the information of _whether_ the code being lowered is in a generator</p>",
        "id": 164130366,
        "sender_full_name": "tmandry",
        "timestamp": 1556149841
    },
    {
        "content": "<p>today the generator-specific code just gets triggered if we hit a yield statement</p>",
        "id": 164130383,
        "sender_full_name": "tmandry",
        "timestamp": 1556149874
    },
    {
        "content": "<p>but I need to know for all the code when building the MIR</p>",
        "id": 164130396,
        "sender_full_name": "tmandry",
        "timestamp": 1556149908
    },
    {
        "content": "<p>You can look up the body and see if it is a generator, <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/mod.rs#L134\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/mod.rs#L134\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/mod.rs#L134</a></p>",
        "id": 164130502,
        "sender_full_name": "Zoxc",
        "timestamp": 1556150042
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 164130580,
        "sender_full_name": "tmandry",
        "timestamp": 1556150154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> are either of you around and able to review <a href=\"https://github.com/rust-lang/rust/pull/59897\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59897\">https://github.com/rust-lang/rust/pull/59897</a> ? it has been blocked on review for a while now</p>",
        "id": 164472658,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1556559994
    },
    {
        "content": "<p>It's also blocking further work on an issue that is tagged as blocking the release of async/await</p>",
        "id": 164472718,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1556560033
    },
    {
        "content": "<p>ahh, my bad, it's been slipping through</p>",
        "id": 164511377,
        "sender_full_name": "eddyb",
        "timestamp": 1556600276
    },
    {
        "content": "<p>I'm opening it now</p>",
        "id": 164511422,
        "sender_full_name": "eddyb",
        "timestamp": 1556600294
    },
    {
        "content": "<p>done. I did request some feedback from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> but I don't think it's blocking</p>",
        "id": 164512214,
        "sender_full_name": "eddyb",
        "timestamp": 1556601516
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 164555507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556643681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> I replied to <a href=\"https://github.com/rust-lang/rust/pull/60187#discussion_r280229032\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60187#discussion_r280229032\">your comment</a> about the approach of using variants for generators</p>",
        "id": 164743526,
        "sender_full_name": "tmandry",
        "timestamp": 1556829688
    },
    {
        "content": "<p>can you let me know if this makes sense?</p>",
        "id": 164743546,
        "sender_full_name": "tmandry",
        "timestamp": 1556829709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> I think <a href=\"https://github.com/rust-lang/rust/issues/60840\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60840\">#60840</a> is ready to merge</p>",
        "id": 165837752,
        "sender_full_name": "tmandry",
        "timestamp": 1558032558
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can you take a look at <a href=\"https://github.com/rust-lang/rust/pull/60187\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60187\">https://github.com/rust-lang/rust/pull/60187</a> ? <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> wanted you to review the layout code changes</p>",
        "id": 166279085,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558538976
    },
    {
        "content": "<p>I guess. I likely can't get to the review today, but I'll try to look tomorrow</p>",
        "id": 166280971,
        "sender_full_name": "eddyb",
        "timestamp": 1558540013
    },
    {
        "content": "<p>I am vaguely worried about the optimization itself, and its correctness</p>",
        "id": 166281043,
        "sender_full_name": "eddyb",
        "timestamp": 1558540058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> if you have concerns, it would be especially helpful to let <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> know so we can resolve them as quickly as possible, since this is blocking async/await stabilization</p>",
        "id": 166281709,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558540455
    },
    {
        "content": "<p>wait what</p>",
        "id": 166281728,
        "sender_full_name": "eddyb",
        "timestamp": 1558540468
    },
    {
        "content": "<p>how is this <em>blocking</em>?</p>",
        "id": 166281738,
        "sender_full_name": "eddyb",
        "timestamp": 1558540476
    },
    {
        "content": "<p>this is the first I hear of this</p>",
        "id": 166281747,
        "sender_full_name": "eddyb",
        "timestamp": 1558540487
    },
    {
        "content": "<p>The lang time decided to label the issue as blocking since it's causing stack overflows in a significant number of real usecases</p>",
        "id": 166281774,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558540504
    },
    {
        "content": "<p>due to excessively large future types</p>",
        "id": 166281784,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558540509
    },
    {
        "content": "<p>oh jfc</p>",
        "id": 166281798,
        "sender_full_name": "eddyb",
        "timestamp": 1558540515
    },
    {
        "content": "<p>okay I've looked and while I left a lot of comments, I'm happier now</p>",
        "id": 166286749,
        "sender_full_name": "eddyb",
        "timestamp": 1558543919
    },
    {
        "content": "<p>looks like <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> picked a more straight-forward solution than what my last long discussion with them contained</p>",
        "id": 166286839,
        "sender_full_name": "eddyb",
        "timestamp": 1558543974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> thanks for taking a look! :)</p>",
        "id": 166288078,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1558544874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> did you want a timer run for <a href=\"https://github.com/rust-lang/rust/issues/61373\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61373\">#61373</a>?</p>",
        "id": 167018663,
        "sender_full_name": "tmandry",
        "timestamp": 1559325340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>  I assumed you/the reviewer did and wanted to be helpful <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167019304,
        "sender_full_name": "centril",
        "timestamp": 1559325731
    },
    {
        "content": "<p>ah ok. can't hurt :)</p>",
        "id": 167031428,
        "sender_full_name": "tmandry",
        "timestamp": 1559334408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> and also <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, would you mind taking a look at <a href=\"https://github.com/rust-lang/rust/issues/60187\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60187\">#60187</a>? All the changes since last review are in new commits, starting with \"Small review fixes\"</p>",
        "id": 167603444,
        "sender_full_name": "tmandry",
        "timestamp": 1559933730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> How would you feel about enabling the <code>HaveBeenBorrowedLocals</code> dataflow computation in <em>all</em> generators, not just immovable ones?</p>",
        "id": 168351212,
        "sender_full_name": "tmandry",
        "timestamp": 1560808674
    },
    {
        "content": "<p>I need the output of it in the new dataflow stage I'm doing (so that we don't allocate two storage slots in our generator for locals that get moved from)</p>",
        "id": 168351271,
        "sender_full_name": "tmandry",
        "timestamp": 1560808700
    },
    {
        "content": "<p>And while, technically, we <em>could</em> get away with not doing the <code>HaveBeenBorrowedLocals</code> stage, it leads to some highly coupled code with messy types</p>",
        "id": 168351309,
        "sender_full_name": "tmandry",
        "timestamp": 1560808754
    },
    {
        "content": "<p>It's just for immovable generators</p>",
        "id": 168351476,
        "sender_full_name": "Zoxc",
        "timestamp": 1560808911
    },
    {
        "content": "<p>er, immovable generators, sorry</p>",
        "id": 168351532,
        "sender_full_name": "tmandry",
        "timestamp": 1560808939
    },
    {
        "content": "<p>Considering that I'm adding a new dataflow pass that's going to be used in all generators, I wonder if it really makes sense anymore to skip this pass on movable generators</p>",
        "id": 168351568,
        "sender_full_name": "tmandry",
        "timestamp": 1560808966
    },
    {
        "content": "<p>(I guess you could make the argument that my pass is only for optimization, and maybe shouldn't run when optimizations are turned off..)</p>",
        "id": 168351695,
        "sender_full_name": "tmandry",
        "timestamp": 1560809068
    },
    {
        "content": "<p>You shouldn't rely on it's output for movable generators though. It might be a sign that what you're doing is questionable =P</p>",
        "id": 168351697,
        "sender_full_name": "Zoxc",
        "timestamp": 1560809069
    },
    {
        "content": "<p>Well, I'm not directly relying on it</p>",
        "id": 168351729,
        "sender_full_name": "tmandry",
        "timestamp": 1560809111
    },
    {
        "content": "<p>The problem is, my new dataflow pass depends on the output of that <code>HaveBeenBorrowedLocals</code> pass</p>",
        "id": 168351742,
        "sender_full_name": "tmandry",
        "timestamp": 1560809139
    },
    {
        "content": "<p>It's technically correct to ignore borrows, if the generator is movable and we only look at the results over yield points</p>",
        "id": 168351817,
        "sender_full_name": "tmandry",
        "timestamp": 1560809182
    },
    {
        "content": "<p>But.. that knowledge gets spread around the code right now :/</p>",
        "id": 168351827,
        "sender_full_name": "tmandry",
        "timestamp": 1560809199
    },
    {
        "content": "<p>Hmm, if we do gate my new pass on optimizations being enabled</p>",
        "id": 168351870,
        "sender_full_name": "tmandry",
        "timestamp": 1560809269
    },
    {
        "content": "<p>..we can run <code>HaveBeenBorrowedLocals</code> only for immovable generators OR if optimizations are enabled (so my pass can consume it)</p>",
        "id": 168351879,
        "sender_full_name": "tmandry",
        "timestamp": 1560809282
    },
    {
        "content": "<p>What does your pass do?</p>",
        "id": 168352232,
        "sender_full_name": "Zoxc",
        "timestamp": 1560809581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> It's described in <a href=\"https://github.com/rust-lang/rust/issues/59123#issuecomment-501089032\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59123#issuecomment-501089032\">this comment</a></p>",
        "id": 168352880,
        "sender_full_name": "tmandry",
        "timestamp": 1560810169
    },
    {
        "content": "<p>It can be considered a refinement of <code>MaybeStorageLive</code> for the purpose of deciding whether a local needs to be saved or not</p>",
        "id": 168352901,
        "sender_full_name": "tmandry",
        "timestamp": 1560810210
    },
    {
        "content": "<p>(we can decide not to save a local if it is <code>StorageLive</code> in some cases, so it becomes two independent passes)</p>",
        "id": 168352964,
        "sender_full_name": "tmandry",
        "timestamp": 1560810256
    },
    {
        "content": "<p>for non-optimized builds, it's possible I can fall back to using <code>MaybeStorageLive</code></p>",
        "id": 168352983,
        "sender_full_name": "tmandry",
        "timestamp": 1560810269
    },
    {
        "content": "<p>...but that can increase Future sizes 2x in most cases and 3x in some</p>",
        "id": 168353029,
        "sender_full_name": "tmandry",
        "timestamp": 1560810317
    },
    {
        "content": "<p>Okay, I think with <a href=\"https://github.com/rust-lang/rust/issues/61922\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61922\">#61922</a> the biggest wins for generator optimization are merged</p>",
        "id": 168650250,
        "sender_full_name": "tmandry",
        "timestamp": 1561083554
    },
    {
        "content": "<p>well, I mean written.. it's not merged yet :)</p>",
        "id": 168876800,
        "sender_full_name": "tmandry",
        "timestamp": 1561403390
    },
    {
        "content": "<p>=)</p>",
        "id": 168955961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561482023
    },
    {
        "content": "<p>Okay, now it's merged!</p>",
        "id": 169532195,
        "sender_full_name": "tmandry",
        "timestamp": 1562116353
    }
]