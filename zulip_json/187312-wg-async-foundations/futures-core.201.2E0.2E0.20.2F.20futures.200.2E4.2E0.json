[
    {
        "content": "<p>Hey all; <span class=\"user-mention\" data-user-id=\"213313\">@Taiki Endo</span> opened a PR proposing <code>futures-core</code> 1.0.0 and opening up the <code>0.4.0</code> merge window for all other <code>futures</code> crates: <a href=\"https://github.com/rust-lang/futures-rs/pull/2335\">https://github.com/rust-lang/futures-rs/pull/2335</a>. Figured I'd open up a stream on it here</p>",
        "id": 226533692,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1613491686
    },
    {
        "content": "<p>One thing which I'm somewhat worried about is a <code>0.4.0</code> version of <code>futures-io</code> -- as <code>async-std</code> we'd want to upgrade to that when it's released, which would require a semver major from our side. There currently don't appear to be any breaking changes planned for it, so if we could avoid breakage that'd be preferable. But at the least it seems something we should make a conscious decision on.</p>",
        "id": 226534177,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1613491855
    },
    {
        "content": "<p>I guess I feel that <code>futures-io</code>, like <code>futures-core</code> is in a unique position where they are the glue which hold the ecosystem together. And changes to them are different from all other crates. So we should coordinate this clearly.</p>",
        "id": 226534461,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1613491958
    },
    {
        "content": "<p>Even if we don't bump futures-io, many crates also depend on stream, so async-std and others need major version bump anyway.</p>",
        "id": 226602955,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1613525379
    },
    {
        "content": "<p>I feel like we haven't done due diligence yet on motivating breaking changes, and seeking alternatives. I wrote about it here: <a href=\"https://github.com/rust-lang/futures-rs/pull/2335#issuecomment-782075668\">https://github.com/rust-lang/futures-rs/pull/2335#issuecomment-782075668</a></p>\n<p>-- this does not mean we can't or shouldn't issue breaking changes to core async traits. But given the breadth of breakage those changes would carry I think they should be <em>extremely</em> well motivated.</p>",
        "id": 226962848,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1613741487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> </p>\n<blockquote>\n<p><strong>I'm still missing clear motivation for _why_ we're seeking to publish a breaking release of <code>futures-core</code> and <code>futures-io</code></strong>.</p>\n</blockquote>\n<p>With the release of <code>futures-core</code> as 1.0, many crates with major versions greater than 1 will be able to depend on futures-core in their public API. This is very important for Rust's async ecosystem.</p>\n<blockquote>\n<p>Failure to do so would adversely affect Rust's reputation of being reliable and hurt adoption.</p>\n</blockquote>\n<p><strong><code>futures</code> followed <a href=\"https://semver.org/spec/v2.0.0.html\">Semantic Versioning</a>, <a href=\"https://rust-lang.github.io/api-guidelines/necessities.html#public-dependencies-of-a-stable-crate-are-stable-c-stable\">API guidelines</a>, and <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1105-api-evolution.md\">RFC1105</a> correctly and released crates as 0.x.</strong><br>\nI know some crates with major versions greater than 1 depend on futures-core in public APIs. (<a href=\"https://github.com/async-rs/async-std/issues/959\">https://github.com/async-rs/async-std/issues/959</a>)<br>\nHowever, <strong>the problem is their API guideline violations and I am convinced that your claim that \"futures's responsible\" is wrong.</strong></p>\n<p>I always want to minimize ecosystem breakage as much as possible, but after reading your claim, I'm thinking of giving up my efforts on it. Taking responsibility for the stability guarantee of a crate that violates the Semantic Versioning and the API guidelines is not what I hoped.</p>\n<p><em>Also I'm very disappointed that you used the word \"Rust's reputation\" to shift responsibility for the problem of \"async-std violates API guidelines\".</em></p>",
        "id": 227163716,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1613909457
    }
]