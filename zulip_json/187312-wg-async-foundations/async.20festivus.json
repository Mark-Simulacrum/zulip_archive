[
    {
        "content": "<p>OK, I was working more on the harmonic synthesis, but I was feeling a bit frustrated by that, so I started a different try, the <a href=\"https://hackmd.io/LP_UgLXOQOqHX2MocNk15g?view\">Async Festivus for the Rest of Us</a></p>",
        "id": 243195996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624041911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> are you around, by any chance?</p>",
        "id": 243200676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624045117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243195996\">said</a>:</p>\n<blockquote>\n<p>OK, I was working more on the harmonic synthesis, but I was feeling a bit frustrated by that, so I started a different try, the <a href=\"https://hackmd.io/LP_UgLXOQOqHX2MocNk15g?view\">Async Festivus for the Rest of Us</a></p>\n</blockquote>\n<p>I love Async Festivus.  Marked my calendar for  next year's celebration.</p>",
        "id": 243201340,
        "sender_full_name": "Doc Jones",
        "timestamp": 1624045609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> somewhat</p>",
        "id": 243201733,
        "sender_full_name": "tmandry",
        "timestamp": 1624045887
    },
    {
        "content": "<p>OK, I've only got a few minutes till my next call anyway</p>",
        "id": 243201753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624045905
    },
    {
        "content": "<p>I'm just toying with Async Festivus and wanted to chat a bit on what this says / means for async vision doc</p>",
        "id": 243201775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624045921
    },
    {
        "content": "<p>I really want to \"wrap this up\" for some def'n of \"wrapped up\"</p>",
        "id": 243201817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624045927
    },
    {
        "content": "<p>I'm trying to figure out the right next step :)</p>",
        "id": 243201822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624045932
    },
    {
        "content": "<p>I like this summary of shiny futures from the user's point of view. At what point do these aspirations/goals become a product roadmap?</p>",
        "id": 243202596,
        "sender_full_name": "Doc Jones",
        "timestamp": 1624046475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"394977\">@Doc Jones</span> so the idea with that hackmd was that it kind of bridges from \"aspirational goal\" to \"the pieces we need\" to \"design sketches for those pieces\"</p>",
        "id": 243202807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624046590
    },
    {
        "content": "<p>it's <em>almost</em> a roadmap</p>",
        "id": 243202817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624046594
    },
    {
        "content": "<p>I guess that it's in a notation that probably only I can understand</p>",
        "id": 243202824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624046601
    },
    {
        "content": "<p>maybe the next step is a skill-tree-- there are also some questions to answer</p>",
        "id": 243202840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624046622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243202817\">said</a>:</p>\n<blockquote>\n<p>it's <em>almost</em> a roadmap</p>\n</blockquote>\n<p>True.  The only key parts missing for a roadmap are priorities or order of completion and a loose schedule.  Maybe those are next steps from Async Festivus.</p>",
        "id": 243203374,
        "sender_full_name": "Doc Jones",
        "timestamp": 1624046989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243201775\">said</a>:</p>\n<blockquote>\n<p>I'm just toying with Async Festivus and wanted to chat a bit on what this says / means for async vision doc</p>\n</blockquote>\n<p>Are you thinking that this document closes additions to status quo and shiny future stories?</p>",
        "id": 243203627,
        "sender_full_name": "Doc Jones",
        "timestamp": 1624047157
    },
    {
        "content": "<p>I think it's very good, sums up a lot of conversations at a high level while sketching out what actual solutions look like</p>",
        "id": 243204952,
        "sender_full_name": "tmandry",
        "timestamp": 1624047999
    },
    {
        "content": "<p>The \"key pieces\" doesn't include my pet issue, generality over threadedness :)</p>",
        "id": 243205037,
        "sender_full_name": "tmandry",
        "timestamp": 1624048046
    },
    {
        "content": "<p>I remember also talking about mod-level generics for that, runtime generality, and testing</p>",
        "id": 243205086,
        "sender_full_name": "tmandry",
        "timestamp": 1624048078
    },
    {
        "content": "<p>off the top of my head I can't think of anything else it's missing, though</p>",
        "id": 243205174,
        "sender_full_name": "tmandry",
        "timestamp": 1624048124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243195996\">said</a>:</p>\n<blockquote>\n<p>OK, I was working more on the harmonic synthesis, but I was feeling a bit frustrated by that, so I started a different try, the <a href=\"https://hackmd.io/LP_UgLXOQOqHX2MocNk15g?view\">Async Festivus for the Rest of Us</a></p>\n</blockquote>\n<p>I love this. Especially I liked the Promises part. While reading a thought came to my mind regarding better tooling and debugging. An async executor could behave somewhat like a bunch of native threads when compiled in debug mode. Rather than running multiple futures on a single thread, maybe one thread per future? This might improve general tooling and tracking of futures during debug builds. I know executors could also bring such debugging features themselves to track stuff around, but what if that functionality could be generalised across runtimes? So even if you switch runtimes you don't have to switch tooling?</p>",
        "id": 243206184,
        "sender_full_name": "Emmanuel Antony",
        "timestamp": 1624048788
    },
    {
        "content": "<p>The idea above is vague, but I hope you get the point that I want to convey.</p>",
        "id": 243206655,
        "sender_full_name": "Emmanuel Antony",
        "timestamp": 1624049107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> what do you mean by \"generality over threadedness\"?</p>",
        "id": 243210644,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243205037\">said</a>:</p>\n<blockquote>\n<p>The \"key pieces\" doesn't include my pet issue, generality over threadedness :)</p>\n</blockquote>\n<p>ah yes thank you</p>",
        "id": 243210771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052371
    },
    {
        "content": "<p>My vote is to replace Promise w/ something that isn't tied w/ a future concept (as that is a very overloaded term)</p>",
        "id": 243210786,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052392
    },
    {
        "content": "<p>yes the term is probably bad</p>",
        "id": 243210792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052401
    },
    {
        "content": "<p>trait AsyncStatement or something if a placeholder</p>",
        "id": 243210830,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052403
    },
    {
        "content": "<p>I just didn't hear a convincing one I like better</p>",
        "id": 243210835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052407
    },
    {
        "content": "<p>ok AsyncStatement isn't bad :)</p>",
        "id": 243210844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052414
    },
    {
        "content": "<p>or Runnable</p>",
        "id": 243210851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052423
    },
    {
        "content": "<p>could it just be <code>Async</code>?</p>",
        "id": 243210869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052445
    },
    {
        "content": "<p>I'm fine w/ just Async... or even SomeTraitRepresentingACompletionGuaranteedAsyncStatement :P</p>",
        "id": 243210886,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052468
    },
    {
        "content": "<p>I'm going to run with just <code>Async</code> for now</p>",
        "id": 243210900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052493
    },
    {
        "content": "<p>(mostly, I find Future / Promise terminology confusing when discussing these concepts, especially w/ non-rust people)</p>",
        "id": 243210930,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052519
    },
    {
        "content": "<p>I have definitely heard some confusion there</p>",
        "id": 243211115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394977\">Doc Jones</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243203374\">said</a>:</p>\n<blockquote>\n<p>True.  The only key parts missing for a roadmap are priorities or order of completion and a loose schedule.  Maybe those are next steps from Async Festivus.</p>\n</blockquote>\n<p>yes</p>",
        "id": 243211122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't see it in the doc, but \"never have to pin!()` should be part of it</p>",
        "id": 243211302,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224941\">@Carl Lerche</span> +1 you are absolutely right</p>",
        "id": 243211378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052892
    },
    {
        "content": "<p>that's an interesting one</p>",
        "id": 243211379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052895
    },
    {
        "content": "<p>what about <code>Box::pin</code></p>",
        "id": 243211402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052927
    },
    {
        "content": "<p>I wonder if we can really achieve that</p>",
        "id": 243211405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052930
    },
    {
        "content": "<p>when is Box::pin used?</p>",
        "id": 243211417,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052942
    },
    {
        "content": "<p>afaik, the reasons to use pin are Streams (poll_next) and select!</p>",
        "id": 243211426,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224941\">Carl Lerche</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243211417\">said</a>:</p>\n<blockquote>\n<p>when is Box::pin used?</p>\n</blockquote>\n<p>I don't know :) I would think it's partly used to construct <code>Box&lt;dyn Future&gt;</code></p>",
        "id": 243211443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052965
    },
    {
        "content": "<p>I believe using <code>async fn next()</code> in an AsyncIterator trait solves the stream problem</p>",
        "id": 243211446,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052968
    },
    {
        "content": "<p>yes, I was thinking that it probably does</p>",
        "id": 243211452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052981
    },
    {
        "content": "<p>when would one need to box a future?</p>",
        "id": 243211453,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624052981
    },
    {
        "content": "<p>recursion comes to mind</p>",
        "id": 243211460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052992
    },
    {
        "content": "<p>or when your stack traces etc get crazy large--</p>",
        "id": 243211498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053003
    },
    {
        "content": "<p>side note that this should be in the doc somewhere</p>",
        "id": 243211516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053007
    },
    {
        "content": "<p>well, hopefully there is a better strategy for recursion...</p>",
        "id": 243211521,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624053011
    },
    {
        "content": "<p>I feel like there are \"unsolved problems\"</p>",
        "id": 243211522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053011
    },
    {
        "content": "<p>or when future types aren't named</p>",
        "id": 243211524,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1624053012
    },
    {
        "content": "<p>that doesn't seem like \"inherent complexity\" to me</p>",
        "id": 243211533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053023
    },
    {
        "content": "<p>can recursion be detected at compile time and autoboxed?</p>",
        "id": 243211550,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624053050
    },
    {
        "content": "<p>(PErsonally, I would like to see the comiler inserting boxes on your behalf)</p>",
        "id": 243211551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053050
    },
    {
        "content": "<p>Yes</p>",
        "id": 243211553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053054
    },
    {
        "content": "<p>I would like to see that happen with an allow-by-default lint</p>",
        "id": 243211555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053062
    },
    {
        "content": "<p>that warns you when it happens, so people can opt out</p>",
        "id": 243211563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053069
    },
    {
        "content": "<p>I should add that to the \"key pieces\" list I guess</p>",
        "id": 243211570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218683\">Alice Ryhl</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243211524\">said</a>:</p>\n<blockquote>\n<p>or when future types aren't named</p>\n</blockquote>\n<p>say more, <span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span></p>",
        "id": 243211591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053113
    },
    {
        "content": "<p>you mean e.g. in <code>#[async_trait]</code>?</p>",
        "id": 243211595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053119
    },
    {
        "content": "<p>that's one example</p>",
        "id": 243211645,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1624053136
    },
    {
        "content": "<p>that said, I'm not sure how relevant <code>Pin</code> is if we <em>do</em> adopt <code>Async</code>, it doesn't guarantee everything it would need to</p>",
        "id": 243211650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053142
    },
    {
        "content": "<p>another is \"function pointer that returns a future\"</p>",
        "id": 243211654,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1624053151
    },
    {
        "content": "<p>the main idea is that you give ownership of the <code>Async</code> to some code that fully executes it</p>",
        "id": 243211661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053157
    },
    {
        "content": "<p>so the pin is encapsulated within those funcctions</p>",
        "id": 243211672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053166
    },
    {
        "content": "<p>Well, my original premise is the user of async rust would never have to type pin!(foo)</p>",
        "id": 243211701,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624053200
    },
    {
        "content": "<p>so in some sense maybe we just have <code>Box&lt;dyn Async&gt;</code>, which is really <em>almost</em> just <code>Box&lt;dyn AsyncFnOnce&gt;</code></p>",
        "id": 243211708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053203
    },
    {
        "content": "<p>or even Box::pin(...)</p>",
        "id": 243211712,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624053207
    },
    {
        "content": "<p>that's what I'm saying</p>",
        "id": 243211715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053212
    },
    {
        "content": "<p>I'm not convinced they do</p>",
        "id": 243211721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053217
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 243211722,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624053217
    },
    {
        "content": "<p>just by virtue of changing to a model where you can't safely poll</p>",
        "id": 243211733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224941\">Carl Lerche</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243210786\">said</a>:</p>\n<blockquote>\n<p>My vote is to replace Promise w/ something that isn't tied w/ a future concept (as that is a very overloaded term)</p>\n</blockquote>\n<p>Agreed. There had been some discussions about better names before (in one of the completion threads) - but I can't find it anymore. Obviously I'm totally for <code>SomeTraitRepresentingACompletionGuaranteedAsyncStatement</code> ;)</p>",
        "id": 243211930,
        "sender_full_name": "Matthias247",
        "timestamp": 1624053381
    },
    {
        "content": "<blockquote>\n<p>(PErsonally, I would like to see the comiler inserting boxes on your behalf)</p>\n</blockquote>\n<p>Haha - that's what C++ is doing and people don't like :)</p>",
        "id": 243211999,
        "sender_full_name": "Matthias247",
        "timestamp": 1624053478
    },
    {
        "content": "<p>I agree on the \"no visible Pin\" goal however</p>",
        "id": 243212124,
        "sender_full_name": "Matthias247",
        "timestamp": 1624053572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204219\">Matthias247</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243211999\">said</a>:</p>\n<blockquote>\n<p>Haha - that's what C++ is doing and people don't like :)</p>\n</blockquote>\n<p>People might be wrong. What exactly is C++ doing? I'm not talking about it inserting boxes everywhere, mind you.</p>",
        "id": 243212253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053657
    },
    {
        "content": "<p>I really want a model that allows for a smooth progression of control from \"I don't care if you call malloc once in a while\" to \"I totally care\"</p>",
        "id": 243212286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053692
    },
    {
        "content": "<p>I can imagine that even within one project both things could be true, depending on the code</p>",
        "id": 243212295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053703
    },
    {
        "content": "<p>That might be a good goal: \"Permits but does not require low-level control\"</p>",
        "id": 243212357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053729
    },
    {
        "content": "<p>The C++ model simply makes no guarantees about allocations vs no allocations for coroutines. It will analyze your code, and whenever possible elide allocations. If that is not possible it will insert a hidden allocation for the coroutine state</p>",
        "id": 243212473,
        "sender_full_name": "Matthias247",
        "timestamp": 1624053828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204219\">Matthias247</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243212473\">said</a>:</p>\n<blockquote>\n<p>The C++ model simply makes no guarantees about allocations vs no allocations for coroutines. It will analyze your code, and whenever possible elide allocations. If that is not possible it will insert a hidden allocation for the coroutine state</p>\n</blockquote>\n<p>are there good docs to read about this? when I wrote my status quo story I found it really hard to get good info about how cpp coroutines actually work (whereas with async rust there are a few relatively well-known writeups)</p>",
        "id": 243214374,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1624056070
    },
    {
        "content": "<p>There's probably a ton of standardization documents as well as talks (e.g. by Gor Nishanov) about it. But for details I would need to search myself</p>",
        "id": 243215917,
        "sender_full_name": "Matthias247",
        "timestamp": 1624058058
    },
    {
        "content": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0981r0.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0981r0.html</a> and <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1365r0.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1365r0.pdf</a></p>",
        "id": 243220853,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624065955
    },
    {
        "content": "<p>Separate compilation is the biggest reason why C++ works this way.</p>",
        "id": 243220910,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624066016
    },
    {
        "content": "<p>At least, that's my understanding.</p>",
        "id": 243220914,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624066021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243211551\">said</a>:</p>\n<blockquote>\n<p>(PErsonally, I would like to see the comiler inserting boxes on your behalf)</p>\n</blockquote>\n<p>My personal feeling is that we should proceed cautiously, given that this is one of the most disliked parts of C++ coroutines and I've seen many people say that this is one of the biggest advantages of Rust async over C++. I'm sympathetic to the goal of making async easier to use, though. It strikes me as something we could ship \"futures v2.0\" without initially, and then evaluate adding it to \"futures v2.1\" if it's felt to be needed</p>",
        "id": 243221184,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624066496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384014\">@Patrick Walton</span> in c++ is the addition of boxes ad-hoc? In the case Niko is talking about, a box would only be inserted to enable recursion. It would also be possible to \"opt-out\" and just disable async recursion.</p>",
        "id": 243224262,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624070883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384014\">@Patrick Walton</span> another question is: \"Why is it hated?\" in c++?</p>",
        "id": 243224267,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1624070910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224941\">Carl Lerche</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243224267\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"384014\">Patrick Walton</span> another question is: \"Why is it hated?\" in c++?</p>\n</blockquote>\n<p>Because C++ programmers, like Rust programmers, like allocation to be explicit</p>",
        "id": 243224397,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624071117
    },
    {
        "content": "<p>And in particular, to be able to reliably use coroutines in no-alloc environments</p>",
        "id": 243224435,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624071130
    },
    {
        "content": "<p>I'm not sure what you mean by \"ad-hoc\", but the rules aren't standardized anywhere. They can vary from compiler to compiler.</p>",
        "id": 243224437,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624071149
    },
    {
        "content": "<p>I think most committee members want all compilers to converge on the same behavior in practice eventually</p>",
        "id": 243224454,
        "sender_full_name": "Patrick Walton",
        "timestamp": 1624071188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204219\">Matthias247</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243211930\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224941\">Carl Lerche</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243210786\">said</a>:</p>\n<blockquote>\n<p>My vote is to replace Promise w/ something that isn't tied w/ a future concept (as that is a very overloaded term)</p>\n</blockquote>\n<p>Agreed. There had been some discussions about better names before (in one of the completion threads) - but I can't find it anymore. Obviously I'm totally for <code>SomeTraitRepresentingACompletionGuaranteedAsyncStatement</code> ;)</p>\n</blockquote>\n<p>Found things again: <span class=\"user-mention\" data-user-id=\"238574\">@Ryan Leckey</span> proposed <code>suspend fn</code> (as used in Kotlin) and <code>task::Deferred&lt;T&gt;</code> in <a href=\"#narrow/stream/187312-wg-async-foundations/topic/2021.20roadmap/near/225220451\">https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations/topic/2021.20roadmap/near/225220451</a></p>\n<p>I think <code>suspend</code> is good, but I don't think <code>Deferred</code> is the right term since it not only represents a not-yet running task but also the running version. <code>task::Runnable&lt;T&gt;</code>, <code>task::Storage&lt;T&gt;</code>, <code>task::InProgress&lt;T&gt;</code> or <code>task::Pending&lt;T&gt;</code> (conflicts somewhat with<code>Poll::Pending</code>) , or also the Kotlin/Java variant <code>Continuation&lt;T&gt;</code> seem closer to what the thingy is to me. But I'm also not really attached to any naming as long as it works.</p>",
        "id": 243228707,
        "sender_full_name": "Matthias247",
        "timestamp": 1624077045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384014\">Patrick Walton</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243224435\">said</a>:</p>\n<blockquote>\n<p>And in particular, to be able to reliably use coroutines in no-alloc environments</p>\n</blockquote>\n<p>That one would be my biggest concern. On desktop/server I don't worry a lot about allocations as long as I can understand when they happen, and have some influence to reduce their amount. But on embedded you often have no option except \"0 dynamic allocations\", except maybe a limit amount at startup. I guess it can be made working if you are allowed to pass a custom allocator, and have some assurance that all allocations are reused if all your stuff gets called in a loop. Probably doable in the zig version where you pass an allocator for couroutine frames.</p>",
        "id": 243229016,
        "sender_full_name": "Matthias247",
        "timestamp": 1624077379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224941\">Carl Lerche</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20festivus/near/243211446\">said</a>:</p>\n<blockquote>\n<p>I believe using <code>async fn next()</code> in an AsyncIterator trait solves the stream problem</p>\n</blockquote>\n<p>this sounds similar to the design for <code>const impl</code> to let <code>const</code> code use traits- and also suggests another reason for getting rid of <code>await</code>: if enough pre-existing traits could be made to work as some kind of <code>async Iterator</code>, <code>async Read</code>, etc. instead of hand-written parallel <code>AsyncIterator</code>, <code>AsyncRead</code>, etc. then code could be generic over <code>async</code> as well as over \"threadedness\"</p>",
        "id": 243311997,
        "sender_full_name": "rpjohnst",
        "timestamp": 1624209289
    },
    {
        "content": "<p>and this could also help with async for loops/etc: <a href=\"https://gist.github.com/rpjohnst/a68de4c52d9b0b0f6ddf54ca293cceee#streams\">https://gist.github.com/rpjohnst/a68de4c52d9b0b0f6ddf54ca293cceee#streams</a></p>",
        "id": 243312239,
        "sender_full_name": "rpjohnst",
        "timestamp": 1624209620
    },
    {
        "content": "<p>To implement that we would need some kind of async opt-out, because some associated functions, like <code>&lt;async BufRead&gt;::consume</code>, should not be async.</p>",
        "id": 243378469,
        "sender_full_name": "Kestrer",
        "timestamp": 1624280667
    }
]