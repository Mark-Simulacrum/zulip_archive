[
    {
        "content": "<p>I didn't see an open issue about this anywhere, so I thought I'd bring it up.</p>\n<p>If I want to store a tokio timer in my struct, it's very simple due to tokio's provided concrete future type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">time</span>::<span class=\"n\">Sleep</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">timer</span>: <span class=\"nc\">Sleep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If I want to store an async-std timer in my struct, it get's a little more complicated. Async-std does <em>not</em> provide a concrete timer type, it instead provides an <code>async fn</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"n\">dur</span>: <span class=\"nc\">Duration</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which means to store it in my struct, I can either:</p>\n<ul>\n<li>Make my struct generic over <code>Timer</code> and provide a <code>MyStruct&lt;impl Future&gt;</code>:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Timer</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">timer</span>: <span class=\"nc\">Timer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">create_foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">timer</span>: <span class=\"nc\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This doesn't really solve the problem because users of <code>Foo</code> no longer have a concrete type for <em>them</em> to store.</p>\n<ul>\n<li><code>Box::pin</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">timer</span>: <span class=\"nc\">BoxFuture</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">timer</span>: <span class=\"nb\">Box</span>::<span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is not an option in <code>no_std</code> environments, and <em>feels</em> pretty unecessary.</p>\n<p>On nightly, I can was expecting to be able to write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_tait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">TimerFut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">__defining_use</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TimerFut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async_std</span>::<span class=\"n\">time</span>::<span class=\"n\">sleep</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But it turns out that doesn't work due to semver concerns. What <em>does</em> work is a wrapper function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">TimerFut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">sleep</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TimerFut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">async_std</span>::<span class=\"n\">time</span>::<span class=\"n\">sleep</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So when tait stabilizes, will the story change from \"you have to box\" to \"most libraries provide type aliases, and if they don't, create a wrapper function\"? There's been discussion of a <code>typeof</code> operator in the past, but I think that would have the same semver implications....</p>",
        "id": 245771670,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626141844
    },
    {
        "content": "<p>Maybe this is worth a status quo story.</p>",
        "id": 245771700,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626141878
    },
    {
        "content": "<p>I also think this is somewhat in conflict with the idea of dropping .await.</p>",
        "id": 245771868,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626142070
    },
    {
        "content": "<p>Making async feel more like sync code also means it's harder to do something like \"store a vector of X future in a struct and poll them concurrently\"</p>",
        "id": 245771954,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626142126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Naming.20existential.20types/near/245771954\">said</a>:</p>\n<blockquote>\n<p>Making async feel more like sync code also means it's harder to do something like \"store a vector of X future in a struct and poll them concurrently\"</p>\n</blockquote>\n<p>As someone writing a service with a lot of interlocking futures, this has been a concern for me as well, as many of the benefits of Rust in this sort of service are lost if you make await implicit and remove cancel-by-drop.</p>",
        "id": 245773748,
        "sender_full_name": "Zoey",
        "timestamp": 1626144409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> Not sure I follow, what are the semver concerns here?</p>",
        "id": 246245523,
        "sender_full_name": "tmandry",
        "timestamp": 1626452570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"398288\">@Zoey</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Naming.20existential.20types/near/245773748\">said</a>:</p>\n<blockquote>\n<p>As someone writing a service with a lot of interlocking futures, this has been a concern for me as well, as many of the benefits of Rust in this sort of service are lost if you make await implicit and remove cancel-by-drop.</p>\n</blockquote>\n<p>I would love to see an example of cancel by drop making code significantly easier to write.</p>",
        "id": 246245846,
        "sender_full_name": "tmandry",
        "timestamp": 1626452724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Naming.20existential.20types/near/246245523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span> Not sure I follow, what are the semver concerns here?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/86793\">https://github.com/rust-lang/rust/issues/86793</a></p>",
        "id": 246249935,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626454713
    },
    {
        "content": "<p>Changes to the body of the function could break type aliases.</p>",
        "id": 246249986,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626454743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <br>\nWith streams, it makes it almost Haskell-level tolerable if the individual substreams hold resources alive. I want to avoid having to invoke cleanup myself, and dropping a TCP stream to close its connection conceptually matches with dropping a Futures stream to close its sources.</p>",
        "id": 246269044,
        "sender_full_name": "Zoey",
        "timestamp": 1626464321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"398288\">@Zoey</span> Yeah, that's interesting. I would agree that we still want some form of RAII, and tying it to the stream itself is convenient. If we do something like the <code>Async</code> trait though, it would be a supertrait of (cancellable) <code>Future</code>s, meaning you or a library could impl <code>Future</code> in your stream types and use that capability directly, while also using them in APIs which accept <code>Async</code></p>",
        "id": 246273286,
        "sender_full_name": "tmandry",
        "timestamp": 1626466705
    },
    {
        "content": "<p>(I'm skeptical about how this will work in more complex situations, though, e.g. stream combinators that want to accept <code>Async</code> instead of <code>Future</code>, making your stream no longer impl <code>Future</code>. I think <span class=\"user-mention\" data-user-id=\"348152\">@Dario Nieuwenhuis</span> was saying something about this)</p>",
        "id": 246273545,
        "sender_full_name": "tmandry",
        "timestamp": 1626466863
    },
    {
        "content": "<p>That looks equivalent to another problem I want solve, though, which is making it possible to write code that can be \"parameterized\" as thread safe or thread unsafe</p>",
        "id": 246273711,
        "sender_full_name": "tmandry",
        "timestamp": 1626466981
    },
    {
        "content": "<p>I'm also a fan of the A.poll_until(B) pattern, and I've made a few drop utilities - namely <a href=\"https://github.com/microsoft/snocat/blob/6cde0c721bb6c2980b66154972b539b29e25a16f/snocat/src/util/dropkick.rs\">Dropkick</a> to help improve or otherwise utilize drop semantics further.<br>\nCombining it with Tokio's CancellationToken has been invaluable in that codebase.</p>",
        "id": 246273729,
        "sender_full_name": "Zoey",
        "timestamp": 1626466999
    }
]