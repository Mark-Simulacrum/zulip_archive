[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> -- in the call yesterday, <span class=\"user-mention\" data-user-id=\"257961\">@Simon Farnsworth</span> mentioned that you had convinced him that scoped tasks a la rayon were impossible. I've been pondering it and I'd like to be convinced. =)</p>",
        "id": 235734367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619119681
    },
    {
        "content": "<p>I have some thoughts on why that might be.</p>",
        "id": 235734412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619119688
    },
    {
        "content": "<p>The short story is that, unless you block the thread for the full duration of the spawned scoped task, cancellation of the task could break references that the scoped tasks has to the original task.</p>",
        "id": 235734622,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619119775
    },
    {
        "content": "<p>Right. I figured it had to do with cancelltion.</p>",
        "id": 235734653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619119793
    },
    {
        "content": "<p>If you block the thread, then it is possible. (in essence this is what happens if you use rayon inside async code)</p>",
        "id": 235734825,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619119855
    },
    {
        "content": "<p>Yes, you certainly have to block the thread.</p>",
        "id": 235734854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619119867
    },
    {
        "content": "<p>Also, you can spawn scoped async tasks if you do it from synchronous code.</p>",
        "id": 235734879,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619119873
    },
    {
        "content": "<p>Generally one objection many people come up with is that \"just wait for it or kill it in the destructor\", to which I reply <code>mem::forget</code>, but to that they reply \"but <code>Pin</code> has a drop guarantee!\", to which the answer unfortunately is that the drop guarantee applies to the wrong thing.</p>",
        "id": 235735039,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619119948
    },
    {
        "content": "<p>you definitely cannot rely on destructors to execute</p>",
        "id": 235735104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619119981
    },
    {
        "content": "<p>Yes, it would be possible to add a scope fn to Tokio's Runtime type, but not an async fn scope</p>",
        "id": 235735118,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619119984
    },
    {
        "content": "<p>I mean, the thing with <code>Pin</code> is that it _does_ guarantee that, either destructors run or the memory is leaked.</p>",
        "id": 235735348,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619120060
    },
    {
        "content": "<p>This would be enough for references to remain valid, but the problem is that the guarantee refers to the wrong piece of memory. The memory that stays valid is not the piece of memory that the drop guarantee applies to.</p>",
        "id": 235735404,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619120092
    },
    {
        "content": "<p>Yes, but the data has to be owned by the pinned type then</p>",
        "id": 235735409,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619120095
    },
    {
        "content": "<p>the pinned type cannot have refs</p>",
        "id": 235735432,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619120103
    },
    {
        "content": "<p>So you could make a Scope struct that <em>owns</em> data and <em>that</em> type lets you spawn scoped tasks... the drop fn would have to block</p>",
        "id": 235735705,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619120195
    },
    {
        "content": "<p>if that type is pinned...</p>",
        "id": 235735720,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619120207
    },
    {
        "content": "<p>but, at that point, why not just move the data to an Arc</p>",
        "id": 235735747,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619120223
    },
    {
        "content": "<p>Arc's problem (<em>minor</em>) is that it results in you bumping and dropping the refcount a lot, which references don't (being the same thing done at compile time).</p>",
        "id": 235736586,
        "sender_full_name": "Simon Farnsworth",
        "timestamp": 1619120578
    },
    {
        "content": "<p>we are also talking about that in context of async, which comes w/ arcs built into the core runtime model</p>",
        "id": 235736811,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619120681
    },
    {
        "content": "<p>I mean, it would be nice to have async scoped, but I think the value of the feature is less than it is with sync</p>",
        "id": 235736917,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1619120733
    },
    {
        "content": "<p>There's also the fact that, in some sense, the <code>FuturesUnordered</code> utility <em>is</em> a way to do scoped spawns.</p>",
        "id": 235737169,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619120834
    },
    {
        "content": "<p>It has the sub-executor problem, though, which makes it not as convenient (since you need to avoid starving it and thus the futures inside it</p>",
        "id": 235747229,
        "sender_full_name": "Simon Farnsworth",
        "timestamp": 1619125326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218683\">Alice Ryhl</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/scoped.20tasks/near/235734622\">said</a>:</p>\n<blockquote>\n<p>The short story is that, unless you block the thread for the full duration of the spawned scoped task, cancellation of the task could break references that the scoped tasks has to the original task.</p>\n</blockquote>\n<p>Then what are crates like <code>async-scoped</code> and <code>tokio-scoped</code> doing? Are they unsound?</p>",
        "id": 235748048,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1619125534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> No, they just can only be used from non-async code.</p>",
        "id": 235748441,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619125638
    },
    {
        "content": "<p><a href=\"https://docs.rs/async-scoped/0.6.1/async_scoped/#safety-considerations\">https://docs.rs/async-scoped/0.6.1/async_scoped/#safety-considerations</a> is only Safe Rust when called from non-async code - it has <code>unsafe</code> functions for using it from async context</p>",
        "id": 235748667,
        "sender_full_name": "Simon Farnsworth",
        "timestamp": 1619125692
    },
    {
        "content": "<p>Thinking a bit about it, you could totally do this: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4d1bfb5d2ee420b6689bb0506b9c2b09\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4d1bfb5d2ee420b6689bb0506b9c2b09</a></p>",
        "id": 235750858,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619126661
    },
    {
        "content": "<p>It doesn't actually spawn any tasks, but it provides a similar API to rayon.</p>",
        "id": 235751102,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1619126804
    },
    {
        "content": "<p>There is one other technique possible to achieve scoped tasks that hasn't been touched on yet. It is one I discovered while working on a singlethreaded executor for async audio related purposes. And I believe that it's currently sound, all though if someone sees something I've missed feel free to point it out!</p>\n<p>The idea is that you perform synchronized polling with the worker thread. So a task on the worker thread is only allowed to make progress if the owner of the task where the scope is located is blocked for the duration of a poll.</p>\n<p>This is the technique I use in ste: &lt;<a href=\"https://docs.rs/ste/0.1.0-alpha.9/ste/struct.Thread.html#method.submit_async\">https://docs.rs/ste/0.1.0-alpha.9/ste/struct.Thread.html#method.submit_async</a>&gt; (Note: Safety documentation is outdated).</p>\n<p>The upside is that it doesn't block the caller particularly more than it would be blocked as if it were to perform the task itself. The downside is that since polling is strictly coordinated with the task on the worker thread it doesn't scale very well over multiple threads. But maybe there's a way this can be extended to achieve this.</p>\n<p>It tolerates <code>mem::forget</code>s because if the calling task is not being polled as would be the case if it's forgotten, then neither is the task on the worker thread.</p>\n<p>Cheers!</p>",
        "id": 235788159,
        "sender_full_name": "John-John Tedro",
        "timestamp": 1619154797
    },
    {
        "content": "<p>Alice's approach is basically the same as the one provided by the <code>safe-async-scoped</code> crate: <a href=\"https://docs.rs/safe-async-scoped\">https://docs.rs/safe-async-scoped</a></p>",
        "id": 235792085,
        "sender_full_name": "Kestrer",
        "timestamp": 1619158392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224523\">@John-John Tedro</span> Is there even any point to spawning the task at that point though? As far as I understand the purpose of spawning tasks is to allow them to run in the background without polling the handle, but if polling the handle blocks for as polling the future itself what advantage does that provide over simply awaiting the future directly?</p>",
        "id": 235792549,
        "sender_full_name": "Kestrer",
        "timestamp": 1619158834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360486\">Kestrer</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/scoped.20tasks/near/235792549\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224523\">John-John Tedro</span> Is there even any point to spawning the task at that point though? As far as I understand the purpose of spawning tasks is to allow them to run in the background without polling the handle, but if polling the handle blocks for as polling the future itself what advantage does that provide over simply awaiting the future directly?</p>\n</blockquote>\n<p>The point of STE is to cause the code of the task to run on a different thread. Audio APIs in particular tend to be very picky about which thread certain functions run on. The downside presented here is something I tried to be forthright about in my original message. I'm only mentioning it because it's prior art that hasn't been presented yet!</p>",
        "id": 235793003,
        "sender_full_name": "John-John Tedro",
        "timestamp": 1619159243
    },
    {
        "content": "<p>thanks for the cites y'all, I wasn't aware of those projects</p>",
        "id": 235859175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619190960
    },
    {
        "content": "<p>I posted some of these links to <a class=\"stream-topic\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations/topic/interesting.20crates\">#wg-async-foundations &gt; interesting crates</a></p>",
        "id": 235905003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619210284
    }
]