[
    {
        "content": "<p>There had been a variety of discussions around where it might be helpful to have Boxes. One is recursion. The other one async traits. And yet another one is spawning inside scopes. </p>\n<p>All of that obviously is problematic on embedded. <br>\nIâ€™m wondering if we can get it in an acceptable state by allowing users (or more likely: runtimes) to specify custom allocators using the proposed allocation Apis for that use-case. </p>\n<p>An allocator reference could be threaded through <code>Context</code>, and thereby enable task-local (or scope-local) allocation behavior. </p>\n<p>Probably needs then fallible spawn methods, and also a way to specify that recursion failed due to OOM, but it might be doable. </p>\n<p>The whole thing is however just a brainstorm so far and orthogonal to all the other ideas.</p>",
        "id": 245495909,
        "sender_full_name": "Matthias247",
        "timestamp": 1625863747
    },
    {
        "content": "<p>There are indeed better allocators for embedded (i.e. TLSF), but even then, it doesn't apply to most cases. A lot of people would be pushed away from async if that would mean alloc in embedded</p>",
        "id": 245499765,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1625865093
    },
    {
        "content": "<p>I think there's a false equivalence here</p>",
        "id": 245500516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865327
    },
    {
        "content": "<p>Saying that <em>sometimes async will use allocation</em> is not saying <em>async must use allocation</em></p>",
        "id": 245500682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865357
    },
    {
        "content": "<p>as an example, today, you just <em>can't</em> do recursive functions without a box or <em>some</em> sort of intervention</p>",
        "id": 245500857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865380
    },
    {
        "content": "<p>so no embedded code is using that</p>",
        "id": 245500886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865384
    },
    {
        "content": "<p>if we made it \"just work\", all embedded code would keep working</p>",
        "id": 245500932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865395
    },
    {
        "content": "<p>if code wants to be no-std compatible, that's a commitment</p>",
        "id": 245500985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865411
    },
    {
        "content": "<p>and it abides by a subset of the language</p>",
        "id": 245501012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865418
    },
    {
        "content": "<p>I do think we want to make that overlap as big as we can</p>",
        "id": 245501041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865425
    },
    {
        "content": "<p>The issue with allocators on embedded is not \"you <em>can't</em> use alloc\"</p>",
        "id": 245501373,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625865517
    },
    {
        "content": "<p>you can get alloc working just fine, see this for example <a href=\"https://github.com/rust-embedded/alloc-cortex-m\">https://github.com/rust-embedded/alloc-cortex-m</a><br>\nwith that Box, Vec, Rc, Arc etc Just Work exactly like on std</p>",
        "id": 245501471,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625865552
    },
    {
        "content": "<p>Sure</p>",
        "id": 245501868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865666
    },
    {
        "content": "<p>the issue is \"using allocators is a bad practice\"</p>",
        "id": 245501877,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625865669
    },
    {
        "content": "<p>predicting memory usage at compile time is super hard if you're using allocators, no matter whether it's the default alloc or a custom pool/arena one.</p>",
        "id": 245502174,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625865755
    },
    {
        "content": "<p>I think it should absolutely be a goal that async fn is usable wthout an allocator</p>",
        "id": 245502308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865795
    },
    {
        "content": "<p>(not sure if that was unclear?)</p>",
        "id": 245502332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865803
    },
    {
        "content": "<p>I do not, however, think it should be a goal that <em>all async users</em> should forego allocation</p>",
        "id": 245502402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865825
    },
    {
        "content": "<p>(I'm sure nobody is arguing that)</p>",
        "id": 245502499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865847
    },
    {
        "content": "<p>Sorry, I understand that it doesn't mean that async itself would need alloc, but I was just afraid of new things that get added to it only working with alloc, tbh I still need to look better a scopes to really having a saying here, and I understand that some stuff will need alloc and if there isn't a way around it, then it's completely fine</p>",
        "id": 245502537,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1625865861
    },
    {
        "content": "<p>But in particular I think that it's perfectly fine if the majority of async users turn to APIs that require allocation by default. In fact, they already do.</p>",
        "id": 245502553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865866
    },
    {
        "content": "<p>I think there is a thing to consider here, which is:</p>",
        "id": 245502648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865896
    },
    {
        "content": "<p>well, that's not actually true :0</p>",
        "id": 245502699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865913
    },
    {
        "content": "<p>of course not, but for example from the hackmd I get that things as basic as <code>join</code> and <code>select</code> will require the new \"scopes\" API which will require allocation, which somewhat worries me</p>",
        "id": 245502720,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625865921
    },
    {
        "content": "<p>I was going to say that with <code>FuturesUnordered</code>, people might be writing code that is more no-std friendly by default, but actually <code>FuturesUnordered</code> requires allocation in just the same way as the scopes we're talking about</p>",
        "id": 245502760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865936
    },
    {
        "content": "<p>Still, I can imagine that if people turn more to (e.g.) <code>join</code>, versus write <code>scope.spawn</code> twice by default, then they will tend to produce libraries and things that are more no-std friendly than not</p>",
        "id": 245502883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865966
    },
    {
        "content": "<p>and that has value</p>",
        "id": 245502890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348152\">Dario Nieuwenhuis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Custom.20allocators.20for.20auto-boxing/near/245502720\">said</a>:</p>\n<blockquote>\n<p>of course not, but for example from the hackmd I get that things as basic as <code>join</code> and <code>select</code> will require the new \"scopes\" API which will require allocation, which somewhat worries me</p>\n</blockquote>\n<p>I think I was actually wrong about that</p>",
        "id": 245502917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865980
    },
    {
        "content": "<p>in particular, I don't believe <code>join</code> requires it</p>",
        "id": 245502950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625865992
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/wg-async-foundations/issues/222\">wg-async-foundations#222</a>, I wrote a more narrowly tailored condition</p>",
        "id": 245502999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866008
    },
    {
        "content": "<p>I think the cases where we should use scopes are: <em>APIs that start parallel work and yield intermediate results without waiting for all of it to finish</em></p>",
        "id": 245503041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866022
    },
    {
        "content": "<p><code>FuturesUnordered</code> indeed doesn't work without alloc, but it's really hard to use so I haven't missed it much :) Either way, you rarely do \"awaiting an arbitrary number of things\" on embedded, you can mostly get away with join/select</p>",
        "id": 245503052,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625866024
    },
    {
        "content": "<p>so, join and select are ok</p>",
        "id": 245503095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866038
    },
    {
        "content": "<p>select in particular cancels the other work</p>",
        "id": 245503110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866044
    },
    {
        "content": "<p>which for my purposes is equivalent to \"waiting for it to finish\"</p>",
        "id": 245503139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866053
    },
    {
        "content": "<p>I don't believe that they can produce the kind of \"nested await\" problem I am trying to avoid</p>",
        "id": 245503188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866070
    },
    {
        "content": "<p>(the very thing that makes <code>FuturesUnordered</code> hard to use, if I understand you)</p>",
        "id": 245503220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866081
    },
    {
        "content": "<blockquote>\n<p>the buffered combinator would take a scope parameter to use for spawning:<br>\nThe join combinator would likely be replaced with a method on scope</p>\n</blockquote>",
        "id": 245503303,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625866100
    },
    {
        "content": "<p>is that from <a href=\"https://github.com/rust-lang/wg-async-foundations/issues/222\">wg-async-foundations#222</a> ?</p>",
        "id": 245503342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866116
    },
    {
        "content": "<p>or the hackmd</p>",
        "id": 245503349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866119
    },
    {
        "content": "<p>yep <a href=\"https://nikomatsakis.github.io/wg-async-foundations/vision/harmonic/compose_control_scheduling/scoped.html\">https://nikomatsakis.github.io/wg-async-foundations/vision/harmonic/compose_control_scheduling/scoped.html</a></p>",
        "id": 245503370,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625866127
    },
    {
        "content": "<p>ok, that's a mistake :)</p>",
        "id": 245503382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866131
    },
    {
        "content": "<p>let me fix</p>",
        "id": 245503405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866137
    },
    {
        "content": "<p>ah okay :)</p>",
        "id": 245503462,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625866156
    },
    {
        "content": "<p>I agree with your point that there should be some common primitives for concurrency that do not require allocation</p>",
        "id": 245503477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866160
    },
    {
        "content": "<p>fortunately I don't think that leads to the problems I am hoping to avoid</p>",
        "id": 245503540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866180
    },
    {
        "content": "<p>if the plan is to stabilize basic no-alloc combinators like join/select AND the fancier scopes api, I'm all in for it! :)</p>",
        "id": 245503554,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625866185
    },
    {
        "content": "<p>to be clear I'm not saying \"all new APIs should be no-alloc\" at all</p>",
        "id": 245503600,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625866197
    },
    {
        "content": "<p>and the new scopes api looks muuuuuch nicer than FuturesUnordered btw</p>",
        "id": 245503733,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1625866227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348152\">Dario Nieuwenhuis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Custom.20allocators.20for.20auto-boxing/near/245503370\">said</a>:</p>\n<blockquote>\n<p>yep <a href=\"https://nikomatsakis.github.io/wg-async-foundations/vision/harmonic/compose_control_scheduling/scoped.html\">https://nikomatsakis.github.io/wg-async-foundations/vision/harmonic/compose_control_scheduling/scoped.html</a></p>\n</blockquote>\n<p>ah yeah I forgot to edit that text</p>",
        "id": 245503743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866229
    },
    {
        "content": "<p>actually it looks like I left off mid-edit</p>",
        "id": 245503821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866257
    },
    {
        "content": "<p>good catch :)</p>",
        "id": 245503844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866265
    },
    {
        "content": "<p>I also wrote: \" (Combinators like <code>join</code> are distinct, because they don't give access to intermediate results; similarly <code>race</code> is distinct because of <a href=\"http://./cancellation.md\">cancellation</a>).\"</p>",
        "id": 245503875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866274
    },
    {
        "content": "<p>which was my realization while reading your comments on the hackmd...</p>",
        "id": 245503899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866281
    },
    {
        "content": "<p>Back to this thread: My main idea was not to say \"embedded should use allocating\" APIs - that's certainly wrong, and you should avoid them as much as possible. And providing APIs which don't allocate can be useful for <code>std</code> as well as <code>no-std</code> environments due to performance - therefore theey should definitely be kept around as long as they make sense and are actually implementable.</p>\n<p>The goal was to provide tools to make additional potentially-allocating APIs still available on embedded/no-std systems, and give users the flexibility to decide on whether to use them or not. That decision can still be taken by each user or team on their own.</p>\n<p>Using an allocating scope API is not necessarily wrong on embedded if you can guarantee static memory consumption. That can e.g. be achieved by only spawning tasks dynamically at startup, and make everything long-lived tasks. In that case sizing the memory available for the task allocator is not different from distributing stack memory for traditional threads on RTOS. You will also need to profile and adjust that from time to time - and tooling might help.</p>",
        "id": 246336552,
        "sender_full_name": "Matthias247",
        "timestamp": 1626545540
    },
    {
        "content": "<p>Agreed! IMO the ideal shiny future is:</p>\n<ul>\n<li>All \"basic\" stuff (such as Futures, join/select combinators, async fn in traits) should be no-alloc. You should be able to have a \"reasonably ergonomic\" experience without alloc.</li>\n<li>Higher-level stuff such as the Scope API, autoboxed traits / recursive async fns etc can use alloc to offer the \"most ergonomic\" experience, ideally with support for custom allocators too.</li>\n</ul>",
        "id": 246350536,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1626566261
    },
    {
        "content": "<p>Tuning RTOS stack sizes sucks hard, BTW. Rust async shouldn't settle for that.</p>\n<p>It's already possible to do no-alloc everything-statically-allocated async on embedded Rust today, without tuning any stack/pool size. See <a href=\"http://github.com/embassy-rs/embassy/\">embassy</a>. We should keep it that way :)</p>",
        "id": 246350785,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1626566598
    }
]