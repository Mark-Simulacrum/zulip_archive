[
    {
        "content": "<p>So...I'm pretty convinced by now that we should rename <code>Stream</code> to <code>AsyncIterator</code></p>",
        "id": 232767737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617288015
    },
    {
        "content": "<p>and I think in general we should be talking about how to manage our naming schemes</p>",
        "id": 232767760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617288023
    },
    {
        "content": "<p>to make analogies between sync and async more obvious</p>",
        "id": 232767789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617288031
    },
    {
        "content": "<p>I wanted to float this around to get people's reactions and thoughts, and/or pointers or tips on where these names have been previously discussed</p>",
        "id": 232767854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617288055
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span></p>",
        "id": 232767859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617288058
    },
    {
        "content": "<p>I'm in \"research mode\" -- not trying to make the full case here, just collecting info</p>",
        "id": 232767904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617288075
    },
    {
        "content": "<p>+1 from me. I think it helps clarify the differences between it and the push-driven \"observables\" / \"streams\" in other languages.</p>",
        "id": 232840793,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1617320701
    },
    {
        "content": "<p>I think, when users intuitively view streams as iteration-based, it's clearer why <code>for_each_concurrent</code>/<code>par_for_each</code>/<code>buffered</code> are needed to actually get concurrency</p>",
        "id": 232840985,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1617320849
    },
    {
        "content": "<p>Completely in favor of this renaming.</p>",
        "id": 232883951,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617359186
    },
    {
        "content": "<p>Also very much in favor of this.</p>",
        "id": 232891737,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1617365388
    },
    {
        "content": "<p>A confusing case this will help with: <code>std::net::TcpStream</code> doesn't implement <code>Stream</code> despite dealing with streaming data.</p>\n<p>And using <code>async_std</code> as an example: <code>async_std::net::TcpStream</code> also doesn't implement <code>Stream</code> (confusingly it's both async and deals with streaming data), but <code>async_std::net::TcpListener</code> <em>does</em> implement <code>Stream</code>.</p>",
        "id": 232892191,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1617365683
    },
    {
        "content": "<p>Also we've had at least one person come into <code>async-rs</code> confused about how to go from a <code>TcpListener</code> -&gt; <code>TcpStream</code> because they didn't see <code>async_std::net::TcpListener</code> implement <code>Iterator</code>. So we had to explain that <code>Stream</code> is an async version of <code>Iterator</code>. It seems likely that if it was called <code>AsyncIterator</code> they could've made that connection themselves.</p>",
        "id": 232892391,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1617365833
    },
    {
        "content": "<p>I agree that this would make sense as well. It may be less aesthetically pleasing than <code>Stream</code>, but it is probably the better choice.</p>",
        "id": 233525150,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1617814624
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/79024#issuecomment-816868752\">https://github.com/rust-lang/rust/issues/79024#issuecomment-816868752</a></p>",
        "id": 233867965,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617992234
    }
]