[
    {
        "content": "<p>Why is Unpin a safe trait? Wouldn't it follow <code>Sync</code>, etc in requiring an unsafe manual impl?</p>",
        "id": 196960417,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588979192
    },
    {
        "content": "<p>AIUI, it's because there's no inherent unsafety in saying \"something special happens when you pin me\" -- specifically, the unsafety is gained when someone then invokes <code>Pin::new_unchecked</code> (which they must do because you are Pin).</p>\n<p>I am not sure myself if we made the right call or not here -- but it does make sense at a fundamental perspective</p>",
        "id": 196961003,
        "sender_full_name": "simulacrum",
        "timestamp": 1588979876
    },
    {
        "content": "<p>Specifically, note that implementing Unpin only stops code from working, it doesn't itself allow any safe code to do more</p>",
        "id": 196961089,
        "sender_full_name": "simulacrum",
        "timestamp": 1588979900
    },
    {
        "content": "<p>er, rather, <em>not</em> implementing unpin</p>",
        "id": 196961099,
        "sender_full_name": "simulacrum",
        "timestamp": 1588979917
    },
    {
        "content": "<p>Isn't that backwards though? The someone can use <code>Pin::new</code> rather than <code>Pin::unchecked</code> since you <em>aren't</em> pin via the safe manual Unpin impl</p>",
        "id": 196963757,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1588983079
    },
    {
        "content": "<p>Pinning isn't implicitly transitive. Pinning a structure doesn't automatically pin its fields. If you ever pinned a !Unpin field, you'd need unsafe code, meaning you'd have to uphold the invariants of the Pin. That's why, I believe, Unpin is a safe trait. (You therefore, could never pin a !Unpin field of an Unpin struct, as its valid to move the original struct, which would move the field, even if the struct was originally Pinned)</p>",
        "id": 196966228,
        "sender_full_name": "Connor Horman",
        "timestamp": 1588986555
    },
    {
        "content": "<p>Ah ok yeah that makes sense. You can't write a future that needs to be pinned without using unsafe internally anyway</p>",
        "id": 196987936,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1589024968
    },
    {
        "content": "<p>another major reason for it being safe to implement is that <code>impl Drop for X</code> gives you the same power and was already safe</p>",
        "id": 197416314,
        "sender_full_name": "Nemo157",
        "timestamp": 1589378340
    }
]