[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-await</span> o/</p>",
        "id": 162928735,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829221
    },
    {
        "content": "<p>remaining blockers: <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AAsyncAwait-Blocking\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AAsyncAwait-Blocking\">https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AAsyncAwait-Blocking</a></p>",
        "id": 162928901,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think <a href=\"https://github.com/rust-lang/rust/issues/58930\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58930\">https://github.com/rust-lang/rust/issues/58930</a> is just waiting on you to review <a href=\"https://github.com/rust-lang/rust/pull/59111\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59111\">https://github.com/rust-lang/rust/pull/59111</a></p>",
        "id": 162928949,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829404
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> )</p>",
        "id": 162928957,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I were going to try and meet some time this week to discuss <a href=\"https://github.com/rust-lang/rust/issues/56238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56238\">https://github.com/rust-lang/rust/issues/56238</a> (multiple lifetimes)</p>",
        "id": 162929033,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829457
    },
    {
        "content": "<p>We haven't yet scheduled a time, but when we do I'll make sure it gets announced on the stream.</p>",
        "id": 162929061,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829497
    },
    {
        "content": "<p>I think the plan was to record it as well so we'll have a record</p>",
        "id": 162929082,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829508
    },
    {
        "content": "<p>That work would also unblock some features of existential types</p>",
        "id": 162929101,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829539
    },
    {
        "content": "<p>On <a href=\"https://github.com/rust-lang/rust/issues/54716\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54716\">https://github.com/rust-lang/rust/issues/54716</a> (arguments are dropped early)</p>",
        "id": 162929177,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829586
    },
    {
        "content": "<p>there's been some lang team discussion at the last meeting and on the thread around whether or not we want to consider this a bug, and whether or not we should leave the current behavior</p>",
        "id": 162929190,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829607
    },
    {
        "content": "<p>still, I think we should take an optimistic-concurrency route and continue working towards a compiler-team solution</p>",
        "id": 162929214,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829633
    },
    {
        "content": "<blockquote>\n<p>still, I think we should take an optimistic-concurrency route and continue working towards a compiler-team solution</p>\n</blockquote>\n<p>I'm not familiar with what you mean by an optimistic-concurrency route?</p>",
        "id": 162929241,
        "sender_full_name": "davidtwco",
        "timestamp": 1554829660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> you had opened <a href=\"https://github.com/rust-lang/rust/pull/59135\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59135\">https://github.com/rust-lang/rust/pull/59135</a> which included a fix, but I know you were concerned that the implementation was a bit wonky</p>",
        "id": 162929243,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ah, sorry, I was just referring to \"work towards a solution on our end while the lang team also works towards a solution on theirs\"</p>",
        "id": 162929304,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> did you have unresolved questions around how the implementation should work? is there something that needs to happen to unblock further work here?</p>",
        "id": 162929367,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554829759
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> you had opened <a href=\"https://github.com/rust-lang/rust/pull/59135\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59135\">https://github.com/rust-lang/rust/pull/59135</a> which included a fix, but I know you were concerned that the implementation was a bit wonky</p>\n</blockquote>\n<p>It was 95% of the way there, but it wasn't as clean as I'd have liked as the change leaked into the AST a little to simplify the changes to the HIR, name resolution and (def) collection.</p>",
        "id": 162929388,
        "sender_full_name": "davidtwco",
        "timestamp": 1554829775
    },
    {
        "content": "<p>There was an unresolved bug with type inference of the <code>let &lt;pat&gt; = __arg0</code> statement.</p>",
        "id": 162929403,
        "sender_full_name": "davidtwco",
        "timestamp": 1554829796
    },
    {
        "content": "<p>And when that was fixed temporarily there was a change in some test output that looked fine but I wasn't too sure.</p>",
        "id": 162929475,
        "sender_full_name": "davidtwco",
        "timestamp": 1554829811
    },
    {
        "content": "<p>(Hi all, sorry I'm late)</p>",
        "id": 162929507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554829839
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I think <a href=\"https://github.com/rust-lang/rust/issues/58930\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58930\">https://github.com/rust-lang/rust/issues/58930</a> is just waiting on you to review <a href=\"https://github.com/rust-lang/rust/pull/59111\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59111\">https://github.com/rust-lang/rust/pull/59111</a></p>\n</blockquote>\n<p>ok</p>",
        "id": 162929524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554829857
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> and I were going to try and meet some time this week to discuss <a href=\"https://github.com/rust-lang/rust/issues/56238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56238\">https://github.com/rust-lang/rust/issues/56238</a> (multiple lifetimes)</p>\n</blockquote>\n<p>I was meaning to get back to you on that. I think we should schedule a time a bit later in the week (maybe Friday?) and I'll try to also add some time for me to do a bit of exploratory work before that. But I'll ping you in the other thread.</p>",
        "id": 162929563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554829906
    },
    {
        "content": "<blockquote>\n<p>there's been some lang team discussion at the last meeting and on the thread around whether or not we want to consider this a bug, and whether or not we should leave the current behavior</p>\n</blockquote>\n<p>I still think this should be considered a bug -- however I was thinking</p>",
        "id": 162929623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554829925
    },
    {
        "content": "<p>in the short term, one very simple thing we could do is just limit async fns to only have simple patterns for their parameters, or something like that?</p>",
        "id": 162929658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554829958
    },
    {
        "content": "<p>maybe that's too horrible</p>",
        "id": 162929660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554829962
    },
    {
        "content": "<p>(also require, I guess, that all parameters are used)</p>",
        "id": 162929667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554829972
    },
    {
        "content": "<p>obviously not a good long term sol'n, and maybe not worth the effort</p>",
        "id": 162929706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830009
    },
    {
        "content": "<blockquote>\n<p>It was 95% of the way there, but it wasn't as clean as I'd have liked as the change leaked into the AST a little to simplify the changes to the HIR, name resolution and (def) collection.</p>\n</blockquote>\n<p>Elaborating slightly, inserting statements during lowering wasn't particularly easy and required similar changes to other parts of the compiler, which meant that constructing those statements in the AST so they were available in these other places proved easier.</p>",
        "id": 162929724,
        "sender_full_name": "davidtwco",
        "timestamp": 1554830030
    },
    {
        "content": "<blockquote>\n<p>obviously not a good long term sol'n, and maybe not worth the effort</p>\n</blockquote>\n<p>Unless we don't want an approach as yucky as my previous PR took, I don't think it would be too hard to polish that up and fix the issue. (I'd need some help w/ the type inference issue, but otherwise the bulk is done).</p>",
        "id": 162929821,
        "sender_full_name": "davidtwco",
        "timestamp": 1554830083
    },
    {
        "content": "<p>It wasn't really clear to me how yucky that was</p>",
        "id": 162929997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830196
    },
    {
        "content": "<p>I get that it felt more complex than you would like though</p>",
        "id": 162930003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830204
    },
    {
        "content": "<p>(I didn't really read it that closely)</p>",
        "id": 162930010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830210
    },
    {
        "content": "<p>I guess I would say that I am inclined to say I'd rather land the PR you were working on, presuming we can close up the remaining holes</p>",
        "id": 162930033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830225
    },
    {
        "content": "<p>and then refactor to make it nicer</p>",
        "id": 162930043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830233
    },
    {
        "content": "<p>but that depends on <em>how</em> yucky it was :)</p>",
        "id": 162930047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830237
    },
    {
        "content": "<p>also, I think I heard somewhere something about performance implications?</p>",
        "id": 162930059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830245
    },
    {
        "content": "<p>(though that mildly surprises me)</p>",
        "id": 162930075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830258
    },
    {
        "content": "<p>It definitely felt like a yucky solution, but that might just be me. I can’t think of a better way.</p>",
        "id": 162930077,
        "sender_full_name": "davidtwco",
        "timestamp": 1554830262
    },
    {
        "content": "<blockquote>\n<p>also, I think I heard somewhere something about performance implications?</p>\n</blockquote>\n<p><del>I don't remember anything like that, but I could just be being forgetful.</del> I read that from the perspective of the PR impacting compiler performance.</p>",
        "id": 162930103,
        "sender_full_name": "davidtwco",
        "timestamp": 1554830280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we were discussing <em>runtime</em> performance implications in the issue (due to the generator size change and the delay before <code>drop</code>ping)</p>",
        "id": 162930390,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> why did the generator get bigger? is that beacuse of the issue that <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> was working on?</p>",
        "id": 162930527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830536
    },
    {
        "content": "<p>i.e., just being inefficient in our layout?</p>",
        "id": 162930532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830541
    },
    {
        "content": "<p>The generator will capture the arguments that it previously didn't.</p>",
        "id": 162930546,
        "sender_full_name": "davidtwco",
        "timestamp": 1554830554
    },
    {
        "content": "<p>No, because we have to actually store the arguments in the future in order to drop them</p>",
        "id": 162930551,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830557
    },
    {
        "content": "<p>Yeah, but .. how many arguments do you have that are unused?</p>",
        "id": 162930560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830567
    },
    {
        "content": "<p>I guess you're saying this is a frequent occurrence?</p>",
        "id": 162930566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830573
    },
    {
        "content": "<p>It will certainly happen when we have <code>async fn</code> in traits</p>",
        "id": 162930582,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830587
    },
    {
        "content": "<p>Put another way, I would have expected that -- most of the time -- we would be capturing most of the arguments anyway.</p>",
        "id": 162930601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830601
    },
    {
        "content": "<p>Sure. I don't doubt it can happen.</p>",
        "id": 162930620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830611
    },
    {
        "content": "<p>Today we only have free and inherent <code>async fn</code> so it makes no difference because we have no unused args</p>",
        "id": 162930626,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830614
    },
    {
        "content": "<p>but in the case where you don't have unused args this doesn't matter anyways :)</p>",
        "id": 162930635,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830626
    },
    {
        "content": "<p>Put another way: I was operating under the assumption that this was a corner case. =) That doesn't make it unimportant per se.</p>",
        "id": 162930711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830647
    },
    {
        "content": "<p>Anyway, ok, I get it.</p>",
        "id": 162930720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830654
    },
    {
        "content": "<p>So, it's not that you measured this against existing code and found a large impact</p>",
        "id": 162930735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830666
    },
    {
        "content": "<p>But rather that you hypothesize the impact might be noticeable when we have traits and more frequently have unused parameters</p>",
        "id": 162930756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830681
    },
    {
        "content": "<p>Yes.</p>",
        "id": 162930764,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830687
    },
    {
        "content": "<p>(It's certainly true that -- most of the time -- drop has no side-effects, and we'd rather drop early)</p>",
        "id": 162930772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830693
    },
    {
        "content": "<p>And where it does have side-effects, you'd often want them to happen before returning the future if you don't need the arg</p>",
        "id": 162930822,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830724
    },
    {
        "content": "<p>As a random aside, I sometimes question whether it was wise to carry over the C++ design of \"side-effectful destructors\"</p>",
        "id": 162930826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830727
    },
    {
        "content": "<p>but oh well</p>",
        "id": 162930827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830728
    },
    {
        "content": "<p>a little late now!</p>",
        "id": 162930833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830731
    },
    {
        "content": "<p>yeah, we've discussed that before</p>",
        "id": 162930849,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830740
    },
    {
        "content": "<blockquote>\n<p>And where it does have side-effects, you'd often want them to happen before returning the future if you don't need the arg</p>\n</blockquote>\n<p>this...seems unclear to me</p>",
        "id": 162930868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830752
    },
    {
        "content": "<p>but maybe</p>",
        "id": 162930934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830768
    },
    {
        "content": "<p>There're a couple particular examples I could show, like closing the end of a channel etc.</p>",
        "id": 162930940,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830776
    },
    {
        "content": "<p>where it forces an extra round-trip through the kernel</p>",
        "id": 162930967,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830800
    },
    {
        "content": "<p>Yeah, so this uncertainty sort of argues for the \"don't stabilize a drop order yet\" I was proposing earlier</p>",
        "id": 162930973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830806
    },
    {
        "content": "<p>I don't know what that would mean in practice</p>",
        "id": 162930986,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830816
    },
    {
        "content": "<p>once we introduce something, it will be stabilized</p>",
        "id": 162930995,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830824
    },
    {
        "content": "<p>it would mean that we check that all the arguments are used and captured</p>",
        "id": 162931000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830824
    },
    {
        "content": "<p>and we give a feature gate</p>",
        "id": 162931006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830827
    },
    {
        "content": "<p>This may be a little out there, but I wonder if it's really the <em>type</em> implementing <code>Drop</code> that can tell us more about whether it can be dropped early</p>",
        "id": 162931007,
        "sender_full_name": "tmandry",
        "timestamp": 1554830828
    },
    {
        "content": "<p>if any of them are not</p>",
        "id": 162931009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830829
    },
    {
        "content": "<p>huh</p>",
        "id": 162931017,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830834
    },
    {
        "content": "<p>I actually don't hate that</p>",
        "id": 162931020,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830837
    },
    {
        "content": "<blockquote>\n<p>This may be a little out there, but I wonder if it's really the <em>type</em> implementing <code>Drop</code> that can tell us more about whether it can be dropped early</p>\n</blockquote>\n<p>(yes, we've considered this in the past)</p>",
        "id": 162931023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830840
    },
    {
        "content": "<p>(the feature gate thing)</p>",
        "id": 162931043,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830856
    },
    {
        "content": "<blockquote>\n<p>I actually don't hate that</p>\n</blockquote>\n<p>I think that if the motivation is \"we'd like more time to look at what happens in practice\", it may make sense</p>",
        "id": 162931045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830859
    },
    {
        "content": "<p>mhm</p>",
        "id": 162931054,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830864
    },
    {
        "content": "<p>And certainly there's no reason to do it today</p>",
        "id": 162931058,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830870
    },
    {
        "content": "<p>it's a bit of a shame for <code>unimplemented!()</code> functions</p>",
        "id": 162931136,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554830903
    },
    {
        "content": "<p>I would usually do something like</p>",
        "id": 162931155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830919
    },
    {
        "content": "<p>panic!(\"unimplemented {:?}\", (arg0, arg1, arg2));</p>",
        "id": 162931167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830932
    },
    {
        "content": "<p>but yes :)</p>",
        "id": 162931171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830933
    },
    {
        "content": "<p>we wouldn't want this state of affairs permanently</p>",
        "id": 162931205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830958
    },
    {
        "content": "<p>I guess it depends on how much we really wonder what the best order is</p>",
        "id": 162931212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554830965
    },
    {
        "content": "<p>It was certainly unresolved at the conclusion of the last lang mtg</p>",
        "id": 162931302,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831008
    },
    {
        "content": "<p>Yeah. I can see why.</p>",
        "id": 162931528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554831141
    },
    {
        "content": "<p>A bit more complex than I initially thought.</p>",
        "id": 162931543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554831154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I feel like it'd be easy to reach agreement on the feature-gate solution</p>",
        "id": 162931628,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831212
    },
    {
        "content": "<p>Maybe so. I'm not sure, but it's worth talking ove.</p>",
        "id": 162931709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554831247
    },
    {
        "content": "<p>although I could see an argument that it contributes to the \"unpolished\" impression</p>",
        "id": 162931720,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831256
    },
    {
        "content": "<p>mhm</p>",
        "id": 162931729,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831261
    },
    {
        "content": "<p>I think the question is whether this is something where empirical evidence / experience might be useful in resolving it.</p>",
        "id": 162931738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554831268
    },
    {
        "content": "<blockquote>\n<p>although I could see an argument that it contributes to the \"unpolished\" impression</p>\n</blockquote>\n<p>yes, this is the downside</p>",
        "id": 162931749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554831275
    },
    {
        "content": "<p>on the other hand, I think that if it is not because \"impl is hard\" but beacuse \"we want feedback\", that's a different thing</p>",
        "id": 162931762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554831291
    },
    {
        "content": "<p>(also, making an arbitrary decision in the name of polish would not be a good answer to that :) )</p>",
        "id": 162931790,
        "sender_full_name": "tmandry",
        "timestamp": 1554831324
    },
    {
        "content": "<p>it might be worth investigating how hard it would be to <em>do</em> the feature gate</p>",
        "id": 162931921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554831414
    },
    {
        "content": "<p>Quick update on <a href=\"https://github.com/rust-lang/rust/issues/52924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52924\">#52924</a> before I have to run: Before we revised the optimization strategy I had changed a bunch of things to get codegen working with variant-ful generators. I'm now pulling these changes out before redoing the optimization itself. More info available in the thread</p>",
        "id": 162932037,
        "sender_full_name": "tmandry",
        "timestamp": 1554831490
    },
    {
        "content": "<p>Cool-- apart from that the remaining issues are all tied to surface syntax</p>",
        "id": 162932160,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you know what you want the next steps to be regarding resolving that issue?</p>",
        "id": 162932237,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831611
    },
    {
        "content": "<p>I feel like there hasn't been progress on it in a while, but maybe I haven't been following the right discussions</p>",
        "id": 162932254,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831628
    },
    {
        "content": "<p>Do you think it's worthwhile for me to go ahead and write up a PR implementing the \"most likely\" syntax?</p>",
        "id": 162932298,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554831669
    },
    {
        "content": "<p>That would at least put the cat among the pigeons....</p>",
        "id": 162932329,
        "sender_full_name": "Giles Cope",
        "timestamp": 1554831697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> yeah, I don't think I would open a PR, but it seems possibly worthwhile to prepare</p>",
        "id": 162933384,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554832308
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thoughts on next steps here?</p>",
        "id": 162933459,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554832334
    },
    {
        "content": "<p>(Have been lurking here for a bit) Can you elaborate what the “most likely” syntax would be? the postfix await?</p>\n<p>(I liked that one the most, but that's not important to the question.)</p>",
        "id": 162933703,
        "sender_full_name": "David Barsky",
        "timestamp": 1554832498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> no, I can't.</p>",
        "id": 162934059,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554832692
    },
    {
        "content": "<p>I don't think that's appropriate to speculate on publicly, for the same reasons I said I wouldn't open a PR.</p>",
        "id": 162934078,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1554832709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> No worries, I completely understand! I drafted that message before I saw “I don't think I would open a PR”, so my bad on missing that.</p>",
        "id": 162934133,
        "sender_full_name": "David Barsky",
        "timestamp": 1554832755
    },
    {
        "content": "<p>Hopefully they will decide something soon. I had an async await question my mate posed me. He said async await in C# was terrible as you would by default re-join the same thread which very often leads them to deadlocks in the code. Is this something we need to worry about?</p>",
        "id": 162934611,
        "sender_full_name": "Giles Cope",
        "timestamp": 1554833050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> I hope it is ok if I chime in here, but in .NET the behaviour that a task tries to resume on the same thread the await was called is a conscious decision made by Microsoft. You explicitly have to call <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.configureawait?view=netframework-4.7.2\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.configureawait?view=netframework-4.7.2\"><code>ConfigureAwait(false)</code></a> to allow the task to resume on a different thread. As long as Rust does not take the same road, these kind of deadlocks will not happen.</p>",
        "id": 162935757,
        "sender_full_name": "Nikon the Third",
        "timestamp": 1554833817
    },
    {
        "content": "<p>Yeah, he said the clean async await codebases are now littered with .ConfigureAwait(false) everywhere. And the one or two places you forget are where the deadlock probably is. I was a little disheartened to hear of his experience.</p>",
        "id": 162939635,
        "sender_full_name": "Giles Cope",
        "timestamp": 1554836178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> whoops, sorry, got stuck on another call and missed your pings -- I'll privmsg you</p>",
        "id": 162948882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554843081
    }
]