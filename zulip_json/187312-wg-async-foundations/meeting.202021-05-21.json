[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> meeting</p>",
        "id": 239782385,
        "sender_full_name": "tmandry",
        "timestamp": 1621616521
    },
    {
        "content": "<p>Agenda is the same as always :)</p>\n<ul>\n<li>[nikomataskis] Update on vision doc</li>\n<li>[tmandry] New issue triage</li>\n</ul>",
        "id": 239782609,
        "sender_full_name": "tmandry",
        "timestamp": 1621616608
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 239782660,
        "sender_full_name": "Doc Jones",
        "timestamp": 1621616634
    },
    {
        "content": "<p>We could do triage first this time</p>",
        "id": 239782663,
        "sender_full_name": "tmandry",
        "timestamp": 1621616634
    },
    {
        "content": "<p>There's just one issue anyway</p>",
        "id": 239782720,
        "sender_full_name": "tmandry",
        "timestamp": 1621616645
    },
    {
        "content": "<p>/me has been on vacation (more or less)</p>",
        "id": 239782743,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1621616653
    },
    {
        "content": "<h2>Is this difference in lifetime elision for impl Trait arguments between async and non-async function intended? <a href=\"https://github.com/rust-lang/rust/issues/85417\">#85417</a></h2>",
        "id": 239782757,
        "sender_full_name": "tmandry",
        "timestamp": 1621616666
    },
    {
        "content": "<p>Hmm</p>",
        "id": 239782784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616688
    },
    {
        "content": "<p>I wonder why that happens, I thought I had set things up so that elsion would behave the same</p>",
        "id": 239782881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616732
    },
    {
        "content": "<p>I'm also trying to decide which behavior is correct :)</p>",
        "id": 239782919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616751
    },
    {
        "content": "<p>I'd probably say the sync function is correct, just by default</p>",
        "id": 239782996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616775
    },
    {
        "content": "<p>I don't know that we have a definitive spec of the current status of elision especially w/r/t <code>impl Trait</code></p>",
        "id": 239783089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616831
    },
    {
        "content": "<p>yeah I'm also confused about which one is correct, and why</p>",
        "id": 239783095,
        "sender_full_name": "tmandry",
        "timestamp": 1621616834
    },
    {
        "content": "<p>I'd have to do a bit of digging</p>",
        "id": 239783101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616837
    },
    {
        "content": "<p>I cna imagine some reasons to want to \"keep space\" for us to change things here</p>",
        "id": 239783132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616855
    },
    {
        "content": "<p>but I suspect that the correct desugaring is the one suggested by the compiler</p>",
        "id": 239783152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616867
    },
    {
        "content": "<p>I have for example sometimes thought it would be cool if <code>where T: Something&lt;'_&gt;</code> were equivalent to <code>where for&lt;'a&gt; T: Something&lt;'a&gt;</code></p>",
        "id": 239783221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616894
    },
    {
        "content": "<p>and by analogy one might expect <code>impl Something&lt;'_&gt;</code> to be have the same way</p>",
        "id": 239783287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616917
    },
    {
        "content": "<p>of course, that's an input type, not an output type</p>",
        "id": 239783299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0106]: missing lifetime specifier\n --&gt; src/main.rs:3:26\n  |\n3 | fn foo(x: impl Something&lt;&#39;_&gt;) { }\n  |                          ^^ expected named lifetime parameter\n  |\nhelp: consider introducing a named lifetime parameter\n  |\n3 | fn foo&lt;&#39;a&gt;(x: impl Something&lt;&#39;a&gt;) { }\n  |       ^^^^                   ^^\n</code></pre></div>",
        "id": 239783358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616953
    },
    {
        "content": "<p>I mean it makes sense for function types, but we could special case that (do we?)</p>",
        "id": 239783376,
        "sender_full_name": "tmandry",
        "timestamp": 1621616969
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0d6190ff9b4f9ea51af9a1b95fd098e9\">playground</a></p>",
        "id": 239783389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616978
    },
    {
        "content": "<p>for nested fn types?</p>",
        "id": 239783397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616981
    },
    {
        "content": "<p>e.g., fn foo(x: fn()) or <code>x: impl Fn()</code>?</p>",
        "id": 239783411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616989
    },
    {
        "content": "<p>those are different</p>",
        "id": 239783415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616991
    },
    {
        "content": "<p>they introduce their <em>own</em> elision scope</p>",
        "id": 239783438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621616995
    },
    {
        "content": "<p>yeah</p>",
        "id": 239783439,
        "sender_full_name": "tmandry",
        "timestamp": 1621616996
    },
    {
        "content": "<p>oh but</p>",
        "id": 239783511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617019
    },
    {
        "content": "<p>we <em>do</em> compile <code>dyn Something&lt;'_&gt;</code></p>",
        "id": 239783519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617023
    },
    {
        "content": "<p>and I think for sure <code>impl</code> and <code>dyn</code> ought to be consistent</p>",
        "id": 239783541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617030
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Something</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Something</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239783560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617036
    },
    {
        "content": "<p>more to the point:</p>",
        "id": 239783624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617074
    },
    {
        "content": "<p>yeah that's odd</p>",
        "id": 239783626,
        "sender_full_name": "tmandry",
        "timestamp": 1621617076
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Something</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239783628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617076
    },
    {
        "content": "<p>so I think that we probably <em>should</em> accept it</p>",
        "id": 239783629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617082
    },
    {
        "content": "<p>but also we should write-up and clearly document our rules</p>",
        "id": 239783650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617096
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/reference/lifetime-elision.html?highlight=elision#lifetime-elision\">https://doc.rust-lang.org/nightly/reference/lifetime-elision.html?highlight=elision#lifetime-elision</a></p>",
        "id": 239783719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617126
    },
    {
        "content": "<p>doesn't seem to cover these cases</p>",
        "id": 239783732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617130
    },
    {
        "content": "<p>I would also like to know why async behaes differently</p>",
        "id": 239783808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617182
    },
    {
        "content": "<p>me too</p>",
        "id": 239783910,
        "sender_full_name": "tmandry",
        "timestamp": 1621617235
    },
    {
        "content": "<p>that might be an easy investigation for someone to do</p>",
        "id": 239783927,
        "sender_full_name": "tmandry",
        "timestamp": 1621617242
    },
    {
        "content": "<p>it is a bit of a pain because</p>",
        "id": 239783965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617245
    },
    {
        "content": "<p>elision happens <em>after</em> HIR desugaring</p>",
        "id": 239783975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617250
    },
    {
        "content": "<p>and HIR desugaring is when we desugar <code>async fn</code></p>",
        "id": 239784000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617259
    },
    {
        "content": "<p>so I had to tweak the setup to make it behave the same</p>",
        "id": 239784011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617266
    },
    {
        "content": "<p>I'm looking for the comment</p>",
        "id": 239784061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617295
    },
    {
        "content": "<p>I guess it isn't as important if async actually has the behavior we want</p>",
        "id": 239784110,
        "sender_full_name": "tmandry",
        "timestamp": 1621617312
    },
    {
        "content": "<p>well...</p>",
        "id": 239784138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617320
    },
    {
        "content": "<p>it might lead to other bugs</p>",
        "id": 239784153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617325
    },
    {
        "content": "<p>so it seems like in the HIR desugaring the lifetime has already been un-elided</p>\n<div class=\"codehilite\"><pre><span></span><code>async fn foo&lt;&#39;a, impl Iterator&lt;Item = &amp;&#39;a u32&gt;: Iterator&lt;Item =\n             &amp;&#39;a u32&gt;&gt;(_: impl Iterator&lt;Item = &amp;&#39;a u32&gt;)\n</code></pre></div>",
        "id": 239784291,
        "sender_full_name": "tmandry",
        "timestamp": 1621617385
    },
    {
        "content": "<p>playground can show this now :)</p>",
        "id": 239784351,
        "sender_full_name": "tmandry",
        "timestamp": 1621617425
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/467967da09ca525b08fa79743bb8126f725a8927/compiler/rustc_ast_lowering/src/item.rs#L1122-L1138\">https://github.com/rust-lang/rust/blob/467967da09ca525b08fa79743bb8126f725a8927/compiler/rustc_ast_lowering/src/item.rs#L1122-L1138</a></p>",
        "id": 239784451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617479
    },
    {
        "content": "<p>hmm</p>",
        "id": 239784504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617491
    },
    {
        "content": "<p>neat</p>",
        "id": 239784507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617491
    },
    {
        "content": "<p>that link is a 404 for me</p>",
        "id": 239784528,
        "sender_full_name": "tmandry",
        "timestamp": 1621617501
    },
    {
        "content": "<p>bother</p>",
        "id": 239784538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617507
    },
    {
        "content": "<p>stupid vscode plugin</p>",
        "id": 239784542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617510
    },
    {
        "content": "<p>only sometimes works</p>",
        "id": 239784545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617513
    },
    {
        "content": "<p>desn't matter</p>",
        "id": 239784556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617518
    },
    {
        "content": "<p>well, I say we investigate a bit</p>",
        "id": 239784579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617533
    },
    {
        "content": "<p>I assume <a href=\"https://github.com/rust-lang/rust/blob/af2ed1b51887ede4d766ee123d3fa216970d1fdd/compiler/rustc_ast_lowering/src/item.rs#L1122-L1138\">this one</a> still goes where you were pointing</p>",
        "id": 239784596,
        "sender_full_name": "tmandry",
        "timestamp": 1621617544
    },
    {
        "content": "<p>okay, I'll put it on deck</p>",
        "id": 239784685,
        "sender_full_name": "tmandry",
        "timestamp": 1621617599
    },
    {
        "content": "<p>but we should add a comment with the behavior of sync in different cases</p>",
        "id": 239784809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617637
    },
    {
        "content": "<p>yeah</p>",
        "id": 239784913,
        "sender_full_name": "tmandry",
        "timestamp": 1621617671
    },
    {
        "content": "<p>I can</p>",
        "id": 239784919,
        "sender_full_name": "tmandry",
        "timestamp": 1621617675
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/af2ed1b51887ede4d766ee123d3fa216970d1fdd/compiler/rustc_ast_lowering/src/lib.rs#L1920-L1922\">https://github.com/rust-lang/rust/blob/af2ed1b51887ede4d766ee123d3fa216970d1fdd/compiler/rustc_ast_lowering/src/lib.rs#L1920-L1922</a></p>",
        "id": 239784920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617676
    },
    {
        "content": "<p>unless you want to</p>",
        "id": 239784924,
        "sender_full_name": "tmandry",
        "timestamp": 1621617678
    },
    {
        "content": "<p>so that's the code I was <em>talking</em> about</p>",
        "id": 239784945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617689
    },
    {
        "content": "<p>but I'm not sure it's relevant</p>",
        "id": 239784949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617692
    },
    {
        "content": "<p>it is (I think) specific to the return type</p>",
        "id": 239784956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617697
    },
    {
        "content": "<p>a ha!</p>",
        "id": 239785046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lt_mode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">make_ret_async</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// In `async fn`, argument-position elided lifetimes</span>\n<span class=\"w\">            </span><span class=\"c1\">// must be transformed into fresh generic parameters so that</span>\n<span class=\"w\">            </span><span class=\"c1\">// they can be applied to the opaque `impl Trait` return type.</span>\n<span class=\"w\">            </span><span class=\"n\">AnonymousLifetimeMode</span>::<span class=\"n\">CreateParameter</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">anonymous_lifetime_mode</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239785050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617735
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast_lowering/src/lib.rs#L1800-L1807\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast_lowering/src/lib.rs#L1800-L1807</a></p>",
        "id": 239785090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617752
    },
    {
        "content": "<p>so...that accounts for the difference in <em>behavior</em></p>",
        "id": 239785103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617759
    },
    {
        "content": "<p>yeah</p>",
        "id": 239785109,
        "sender_full_name": "tmandry",
        "timestamp": 1621617765
    },
    {
        "content": "<p>I wouldn't be surprised if there are some other discrepancies</p>",
        "id": 239785160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617790
    },
    {
        "content": "<p>though I'm not 100% sure what they would be</p>",
        "id": 239785164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617795
    },
    {
        "content": "<p>I hate how the HIR just prints <code>-&gt; /*impl Trait*/</code> for the return type</p>",
        "id": 239785168,
        "sender_full_name": "tmandry",
        "timestamp": 1621617799
    },
    {
        "content": "<p>I think a proper fix for this bug requires first trying to be exhastive about different sorts of things that might appear in arguments</p>",
        "id": 239785360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617891
    },
    {
        "content": "<p>to look for other discrepancies</p>",
        "id": 239785576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621617976
    },
    {
        "content": "<p>yeah.. it's unfortunate</p>",
        "id": 239785664,
        "sender_full_name": "tmandry",
        "timestamp": 1621618037
    },
    {
        "content": "<p>leaving a comment</p>",
        "id": 239785843,
        "sender_full_name": "tmandry",
        "timestamp": 1621618125
    },
    {
        "content": "<p>great</p>",
        "id": 239785894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618147
    },
    {
        "content": "<p>Still typing but can move on to vision doc now</p>",
        "id": 239785932,
        "sender_full_name": "tmandry",
        "timestamp": 1621618164
    },
    {
        "content": "<p>if you want to give an update :)</p>",
        "id": 239785947,
        "sender_full_name": "tmandry",
        "timestamp": 1621618174
    },
    {
        "content": "<p>ok</p>",
        "id": 239785964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618183
    },
    {
        "content": "<h1>Async Vision Doc</h1>",
        "id": 239785973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618185
    },
    {
        "content": "<p>The main update I have is the work that <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> and I did around the <a class=\"stream-topic\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations/topic/Harmonic.20synthesis\">#wg-async-foundations &gt; Harmonic synthesis</a></p>",
        "id": 239785991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618201
    },
    {
        "content": "<p>I have been working on converting that into <a href=\"https://github.com/nikomatsakis/skill-tree\">skill-tree format</a></p>",
        "id": 239786133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618250
    },
    {
        "content": "<p>and I still have bohemian rhapsody stuck in my head from looking at that doc :)</p>",
        "id": 239786148,
        "sender_full_name": "tmandry",
        "timestamp": 1621618256
    },
    {
        "content": "<p>I want to try and capture not only the relationships between things but also </p>\n<ul>\n<li>which Rust teams does the work involve</li>\n<li>what state is it on a scale from \"no clue how to do this\" to \"PR approved\"</li>\n</ul>",
        "id": 239786262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618310
    },
    {
        "content": "<p>one thing that's interesting is that sometimes the dependencies between things don't mean that we can't make progress on indiidual items</p>",
        "id": 239786324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618330
    },
    {
        "content": "<p>one thing that is not in that document, also, is <em>prioritization</em></p>",
        "id": 239786374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618352
    },
    {
        "content": "<p>e.g., which of those work items should people focus on first and why?</p>",
        "id": 239786385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618359
    },
    {
        "content": "<p>this is prtly why I wanted to look at it a bit by team, too</p>",
        "id": 239786398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618368
    },
    {
        "content": "<p>anyway, apart from that, there are some PRs, it looks like we're getting close to merging the various open PRs</p>",
        "id": 239786448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618389
    },
    {
        "content": "<p>I guess one other thing</p>",
        "id": 239786876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618551
    },
    {
        "content": "<p>still working on writing stories with fuchsia folks. one or two are outlined and ready to be made into PRs</p>",
        "id": 239786973,
        "sender_full_name": "tmandry",
        "timestamp": 1621618580
    },
    {
        "content": "<p>I've been thinking a fair bit about some of the open questions around async fn in traits (mostly: how to handle dyn + async drop) and how to handle \"scoped tasks\" / structured concurrency. I'm going to try to create \"survey docs\" that cover the various alternatives.</p>",
        "id": 239787033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618607
    },
    {
        "content": "<p>Folks might be intereted in <a class=\"stream-topic\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations/topic/.22inline.22.20async.20fn.20in.20traits\">#wg-async-foundations &gt; \"inline\" async fn in traits</a>, though, which I'm still fairly excited about, as I think it's hte only way to handle an AsyncDrop trait that works like people expect.</p>",
        "id": 239787076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618630
    },
    {
        "content": "<p>Though <span class=\"user-mention\" data-user-id=\"211731\">@Sean McArthur</span> pointed out that it would not permit simultaneous AsyncRead and AsyncWrite polling on the same value. Seems true.</p>",
        "id": 239787156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618675
    },
    {
        "content": "<p>(I'm still curious <span class=\"user-mention\" data-user-id=\"211731\">@Sean McArthur</span> to discuss whether a \"split-like\" approach could work and what the implications of that would be.)</p>",
        "id": 239787267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618720
    },
    {
        "content": "<p>Oh, hmm</p>",
        "id": 239787294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618735
    },
    {
        "content": "<p>That gives me an idea</p>",
        "id": 239787298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618737
    },
    {
        "content": "<p>If you don't have variables live across a yield, you could push the <em>state counter</em> (\"what state am I in\") out into the caller</p>",
        "id": 239787361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618778
    },
    {
        "content": "<p>then you could support <code>&amp;self</code> async fns too</p>",
        "id": 239787376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618788
    },
    {
        "content": "<p>anyway, that's all I've got :)</p>",
        "id": 239787465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618817
    },
    {
        "content": "<p>open floor?</p>",
        "id": 239787478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621618824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202021-05-21/near/239787361\">said</a>:</p>\n<blockquote>\n<p>If you don't have variables live across a yield, you could push the <em>state counter</em> (\"what state am I in\") out into the caller</p>\n</blockquote>\n<p>that seems like a special case of the alloca idea for dyn, except it's just a boolean flag instead of an arbitrary size you need to allocate</p>",
        "id": 239787669,
        "sender_full_name": "tmandry",
        "timestamp": 1621618911
    },
    {
        "content": "<p>but if that property were on the trait you'd know at compile time</p>",
        "id": 239787737,
        "sender_full_name": "tmandry",
        "timestamp": 1621618935
    },
    {
        "content": "<p>but it sounds like a pretty heavy constraint to put in the trait definition to me</p>",
        "id": 239787903,
        "sender_full_name": "tmandry",
        "timestamp": 1621619041
    },
    {
        "content": "<p>it covers a number of cases</p>",
        "id": 239787973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621619063
    },
    {
        "content": "<p>it also makes it possible to implement on types like <code>&amp;T</code> without any sort of special case</p>",
        "id": 239787998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621619076
    },
    {
        "content": "<p>I thnk I prefer moving the state counter outside either way</p>",
        "id": 239788020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621619094
    },
    {
        "content": "<p>just as an optimization</p>",
        "id": 239788027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621619096
    },
    {
        "content": "<p>it's only needed <em>while you are driving the await</em></p>",
        "id": 239788048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621619107
    },
    {
        "content": "<p>so it's silly to have it inside most of the time</p>",
        "id": 239788061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621619113
    },
    {
        "content": "<p>I mean I think having it inside makes sense for today's <code>async fn</code> futures</p>",
        "id": 239788186,
        "sender_full_name": "tmandry",
        "timestamp": 1621619170
    },
    {
        "content": "<p>maybe we should make another topic for this :)</p>",
        "id": 239788221,
        "sender_full_name": "tmandry",
        "timestamp": 1621619192
    },
    {
        "content": "<p>for the meeting, I don't have anything left to discuss</p>",
        "id": 239788311,
        "sender_full_name": "tmandry",
        "timestamp": 1621619241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261224\">@triagebot</span> end-meeting</p>",
        "id": 239788336,
        "sender_full_name": "tmandry",
        "timestamp": 1621619256
    },
    {
        "content": "<p>Does anyone have something to bring up?<br>\nReact with <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span> if you have something to say.<br>\nReact with <span aria-label=\"all good\" class=\"emoji emoji-2705\" role=\"img\" title=\"all good\">:all_good:</span> if you're ready to end the meeting.</p>",
        "id": 239788338,
        "sender_full_name": "triagebot",
        "timestamp": 1621619257
    }
]