[
    {
        "content": "<p>Heh, I've managed to write a pretty simple rhs-compatible (ergo-pin-ish) stack pinning macro, so that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">PhantomPinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Just Worksâ„¢ (it just requires def-site hygiene and/or <code>decl_macro</code>)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Context</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>It just occurred to me, from having recently been playing with both lifetime extension shenanigans (<a href=\"https://discord.com/channels/273534239310479360/592856094527848449/933773706575101983\">https://discord.com/channels/273534239310479360/592856094527848449/933773706575101983</a>), as well as <code>def_site</code> hygiene shenanigans (<a href=\"#narrow/stream/122651-general/topic/Simulating.20a.20custom.20'namespace'.20in.20rustc.20plugin\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Simulating.20a.20custom.20'namespace'.20in.20rustc.20plugin</a>), that with the latter we can polyfill what would otherwise have needed <code>unsafe fields</code> (by having only-macro-accessible fields), and yet, by virtue of being a macro, it doesn't change the fact that we end up using a literal struct expression, which thus enables lifetime extension to kick in.</p>\n<p>That is, the naive <code>macro pin($e) { unsafe { Pin::new_unchecked(&amp;mut { $e }) }}</code> obviously doesn't work, but if instead of <code>Pin</code>, we were to be using a custom struct, then lifetime extension can kick in.</p>\n<p>Hence the implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(decl_macro)]</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- we need hygiene for safety</span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">lib</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">StackPinned</span><span class=\"o\">&lt;'</span><span class=\"na\">frame</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- Private!</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;'</span><span class=\"na\">frame</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">frame</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">StackPinned</span><span class=\"o\">&lt;'</span><span class=\"na\">frame</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">as_mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">StackPinned</span><span class=\"o\">&lt;'</span><span class=\"na\">frame</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">          </span>-&gt; <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Safety: the only public constructor</span>\n<span class=\"w\">                </span><span class=\"c1\">// is the macro, which takes a</span>\n<span class=\"w\">                </span><span class=\"c1\">// `&amp;mut`-lifetime-extended expression.</span>\n<span class=\"w\">                </span><span class=\"n\">Pin</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"> </span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StackPinned</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=8c5bc627f00e79cede0ae20cb27f8838\">Playground</a></li>\n</ul>\n</div></div>",
        "id": 268731241,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642701156
    },
    {
        "content": "<p>Regarding the \"we need hygiene for safety\" comment, doesn't macro_rules have hygiene on stable?</p>",
        "id": 268739149,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1642704377
    },
    {
        "content": "<p>Not for field names, I believe: a <code>macro_rules!</code> would have needed that <code>&amp;mut T</code> field to have been declared public</p>",
        "id": 268741699,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642705480
    },
    {
        "content": "<p>Yep</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0451</span><span class=\"p\">]</span>: <span class=\"nc\">field</span><span class=\"w\"> </span><span class=\"sc\">'0'</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"o\">'</span><span class=\"na\">StackPinned</span><span class=\"o\">'</span> <span class=\"nc\">is</span><span class=\"w\"> </span><span class=\"n\">private</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">25</span>:<span class=\"mi\">36</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"cp\">$crate</span>::<span class=\"n\">lib</span>::<span class=\"n\">StackPinned</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                    </span><span class=\"o\">^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">private</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">43</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">lib</span>::<span class=\"n\">StackPinned</span><span class=\"o\">&lt;</span><span class=\"n\">PhantomPinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                                  </span><span class=\"o\">-------------------</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">invocation</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268741872,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642705561
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 268748528,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1642708663
    },
    {
        "content": "<p>This is the best I've been able to do in stable Rust: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=b536f548e13de6de48c8ac0f81831b84\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=b536f548e13de6de48c8ac0f81831b84</a>. It's way less ergonomic since the <code>StackPinned</code> is then just a type-state proof and it needs to be <em>moved</em> into a <code>Pin</code> to activate that property (since without hygiene, callers have non-<code>unsafe</code> access to the fields, and thus they are free to <code>take()</code> the referee and whatnot):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pinnable</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">pin</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">PhantomPinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">PhantomPinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>At that point the current macro is better; the whole point of a rhs-macro was being able to pin and rename in one go</p>",
        "id": 268755809,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642711973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> are you sure this is sound? I may very well be missing something, but I don't believe the following should be allowed?:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=8ae49b336e050b4e34a0e7ce94d9b466\">playground</a></p>",
        "id": 268828255,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642764039
    },
    {
        "content": "<p><code>pin!</code> doesn't actually appear to pin. And because <code>as_mut</code> takes <code>&amp;mut self</code> we could do:</p>\n<ul>\n<li>call <code>pin!</code></li>\n<li>call <code>as_mut</code></li>\n<li>call <code>mem::swap</code></li>\n<li>call <code>as_mut</code> again</li>\n<li>we now have undefined behavior</li>\n</ul>",
        "id": 268828333,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642764099
    },
    {
        "content": "<p>As I understand it \"pin to the stack\" and \"get a <code>Pin&lt;&amp;mut T&gt;</code>\" require being done in a single operation; otherwise we can mess with the intermediate type like I've shown ^ ?</p>",
        "id": 268828523,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642764222
    },
    {
        "content": "<p>Well, does your code really swap the pinned elements, or do they just swap a struct with a reference to those pinned elements?</p>",
        "id": 268828634,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1642764283
    },
    {
        "content": "<p>Oh yeah, good point!</p>",
        "id": 268828908,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642764450
    },
    {
        "content": "<p>Yeah, I think you're right that we're only swapping the references - and the actual pinning happens on the stack. Which I guess the name <code>StackPinned</code> might have given away <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 268829052,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642764539
    },
    {
        "content": "<p>I think I did manage to do something cool? I believe we might be able to collapse <code>pin!</code> and <code>as_mut</code> into a single operation?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">PhantomPinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=5203838d76a17dd93d7cfc8d5fc89b1b\">playground</a></p>",
        "id": 268829301,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642764689
    },
    {
        "content": "<p>ahh, dang -- maybe false hope? If we do this, we end up with a bunch of compiler errors again:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">PhantomPinned</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268837661,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642769527
    },
    {
        "content": "<p>Oh lmao, but this does?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PhantomPinned</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268838486,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642770002
    },
    {
        "content": "<p>Does anyone what the state of resolving <code>error[E0716]: temporary value dropped while borrowed</code> for cases like these is in the compiler? Am I right in assuming that this will require Polonius to be integrated first?</p>",
        "id": 268838942,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642770176
    },
    {
        "content": "<p>Polonius wont solve it. The problem is that the destructor runs too early, but polonius does not change when destructors run.</p>",
        "id": 268839288,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1642770366
    },
    {
        "content": "<p>The reason that <code>dbg!(pin!(PhantomPinned))</code> works is that the value is dropped at the end of the expression, so as long as you stay within the expression, you're good.</p>",
        "id": 268839349,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1642770406
    },
    {
        "content": "<p>Thanks; yeah that makes a lot of sense</p>",
        "id": 268839607,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642770522
    },
    {
        "content": "<p>I'm slowly coming to terms with the idea that <code>pin!/StackPinned/StackPinned::as_mut</code> might just be the best way we can make in-line pinning work for the foreseeable future.</p>",
        "id": 268839770,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642770619
    },
    {
        "content": "<p>The construction also feels analogous to <code>Pin::new/Pin/Pin::as_mut</code>; so even if we need to introduce a few new types, the way it works is actually quite similar.</p>",
        "id": 268839867,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642770682
    },
    {
        "content": "<p>Yeah, that was the objective. I've tried really hard to explore so many analogous variations â€”believe me, I've had some horrendously crazy stuff going on at some pointâ€” and at the end of the day, this implementation of <code>pin!</code>, involving <code>StackPinned!</code> and <code>as_mut!</code>, and the already existing <code>pin_mut!</code> macros are the best thing available out there.</p>\n<p>That being said, if we were the core / standard library, we could cut the <code>StackPinned</code> middlecrap and use <code>Pin { pointer: &amp;mut { $e } }</code>, hence yielding a genuine <code>Pin&lt;&amp;mut _&gt;</code> type!</p>\n<p>Hence my suggesting this macro <em>here</em>, rather than as a third-party crate: both the <code>def_site</code> and the required access to the private <code>pointer</code> field of <code>Pin</code> lead to this macro having to be featured by the stdlib</p>",
        "id": 268849502,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642775239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/A.20rhs-compatible.20pin-ning.20macro/near/268849502\">said</a>:</p>\n<blockquote>\n<p>That being said, if we were the core / standard library, we could cut the <code>StackPinned</code> middlecrap and use <code>Pin { pointer: &amp;mut { $e } }</code>, hence yielding a genuine <code>Pin&lt;&amp;mut _&gt;</code> type!</p>\n</blockquote>\n<p>ohhhhhh!</p>",
        "id": 268850434,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642775680
    },
    {
        "content": "<p>yesssssss</p>",
        "id": 268850470,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1642775700
    },
    {
        "content": "<p>this looks exciting :)</p>",
        "id": 268865766,
        "sender_full_name": "tmandry",
        "timestamp": 1642782096
    }
]