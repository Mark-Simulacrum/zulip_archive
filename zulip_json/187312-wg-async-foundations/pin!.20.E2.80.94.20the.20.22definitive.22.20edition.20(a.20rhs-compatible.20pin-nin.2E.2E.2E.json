[
    {
        "content": "<h3>Submitted <a href=\"https://github.com/rust-lang/rust/pull/93176\">https://github.com/rust-lang/rust/pull/93176</a></h3>",
        "id": 268908995,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642802474
    },
    {
        "content": "<p>(gotta add some compile_fail tests, but other than that it's already pretty documented)</p>",
        "id": 268909034,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642802500
    },
    {
        "content": "<blockquote>\n<p>it just requires def-site hygiene and/or decl_macro</p>\n</blockquote>\n<p>that, or just <code>allow_internal_unstable</code> which already works fine: <a href=\"https://github.com/m-ou-se/rust/commit/stack-pinning-macro\">https://github.com/m-ou-se/rust/commit/stack-pinning-macro</a></p>\n<p>so no need to wait for full macros 2.0</p>",
        "id": 268970207,
        "sender_full_name": "Mara",
        "timestamp": 1642875204
    },
    {
        "content": "<p>What's the benefit of that over using a macro 2.0?</p>",
        "id": 268971786,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877322
    },
    {
        "content": "<p>full macro 2.0 hygiene isn't finished yet</p>",
        "id": 268971897,
        "sender_full_name": "Mara",
        "timestamp": 1642877472
    },
    {
        "content": "<p>and it'll probably take a long time before it is stable</p>",
        "id": 268971912,
        "sender_full_name": "Mara",
        "timestamp": 1642877510
    },
    {
        "content": "<p>We don't need it to be stable though</p>",
        "id": 268971953,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877536
    },
    {
        "content": "<p>then <code>pin!()</code> can't be stable.</p>",
        "id": 268971957,
        "sender_full_name": "Mara",
        "timestamp": 1642877549
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 268971964,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877567
    },
    {
        "content": "<p>addr_of! is stable</p>",
        "id": 268971977,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877591
    },
    {
        "content": "<p>and uses decl_macro</p>",
        "id": 268971979,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877604
    },
    {
        "content": "<p>yes, none of those uses macro 2.0 hygiene. they're all using semitransparent hygiene.</p>",
        "id": 268972034,
        "sender_full_name": "Mara",
        "timestamp": 1642877647
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library/core/src/ptr/mod.rs#L1520\">https://github.com/rust-lang/rust/blob/ecf72996eda4f8af19b0ca7235c6f62e0245a313/library/core/src/ptr/mod.rs#L1520</a>)</p>",
        "id": 268972048,
        "sender_full_name": "Mara",
        "timestamp": 1642877692
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 268972057,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877716
    },
    {
        "content": "<p>the feature that allows you to use private fields/types/anything from the crate that the macro is defined in is nowhere near stabilization.</p>",
        "id": 268972107,
        "sender_full_name": "Mara",
        "timestamp": 1642877768
    },
    {
        "content": "<p>And it has to be stable before it can be exposed in a stable macro?</p>",
        "id": 268972116,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877817
    },
    {
        "content": "<p>Why is it different than other features</p>",
        "id": 268972126,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642877838
    },
    {
        "content": "<p>because it isn't finished yet. we can't expose any unfinished or partially broken features.</p>",
        "id": 268972177,
        "sender_full_name": "Mara",
        "timestamp": 1642877907
    },
    {
        "content": "<p>Having to use <code>allow_internal_unstable</code> would be a pity, though, because it'd technically mean the <code>pin_internals</code> feature would be unsound (as in: a user could cause UB without using <code>unsafe</code> thanks to enabling that feature) <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 268973546,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642879913
    },
    {
        "content": "<p>I'd thus like to gauge the \"unsatbility\" / unreliability of the <code>decl_macro</code>s: cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>, how \"reliable\" / \"unreliable\" would you deem <code>def_site</code> hygiene to be, relative to considering an <em>eventual</em> stabilization of the <code>pin!</code> macro?</p>\n<p>For reference, it's defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Pin</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pointer</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>from within the module where the <code>Pin</code> type is defined, thus relying on def_site hygiene:</p>\n<ul>\n<li>to resolve the <code>Pin</code> path (not paramount, a <code>$crate::pin::Pin</code> path could always be used),</li>\n<li>to have access to the <strong>private</strong> <code>pointer</code> field: <strong>paramount</strong></li>\n</ul>",
        "id": 268973696,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642880145
    },
    {
        "content": "<p>I didn't even realize that def-site hygiene affected field privacy</p>",
        "id": 268973740,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642880178
    },
    {
        "content": "<p>In fact, I think I saw a proposal a while back around adding privacy-relates behavior to macros</p>",
        "id": 268973749,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642880205
    },
    {
        "content": "<p>You can't get that behavior with macro_rules, right?</p>",
        "id": 268973766,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642880256
    },
    {
        "content": "<p>Indeed you cannot</p>",
        "id": 268973782,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642880277
    },
    {
        "content": "<p>I thought the mixed hygiene for macro rules was supposed to be 'def-site for identifiers / local vars, use-site for everything else'</p>",
        "id": 268973826,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642880298
    },
    {
        "content": "<p>Which is why <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>'s approach was to make it <code>pub</code>-but-unstable, since <code>macro_rules!</code> macros can dodge stability issues</p>",
        "id": 268973829,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642880314
    },
    {
        "content": "<p>But it seems like 'pure' def-site hygiene has additional privacy behvaior</p>",
        "id": 268973831,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642880315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/pin!.20.E2.80.94.20the.20.22definitive.22.20edition.20.28a.20rhs-compatible.20pin-nin.2E.2E.2E/near/268973546\">said</a>:</p>\n<blockquote>\n<p>Having to use <code>allow_internal_unstable</code> would be a pity, though, because it'd technically mean the <code>pin_internals</code> feature would be unsound (as in: a user could cause UB without using <code>unsafe</code> thanks to enabling that feature) <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>there are many unstable features that can be misused for unsoundness. enabling a feature called '_internals' is just asking for trouble.</p>",
        "id": 268973850,
        "sender_full_name": "Mara",
        "timestamp": 1642880383
    },
    {
        "content": "<p>unless the behavior is only triggered when the <em>struct path</em> has def-site hygiene? Let me see if I can find the code that deals with this</p>",
        "id": 268973897,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642880413
    },
    {
        "content": "<p>we could name it <code>unsafe_pin_internals</code> to be clearer</p>",
        "id": 268973941,
        "sender_full_name": "Mara",
        "timestamp": 1642880509
    },
    {
        "content": "<p>Macros 2.0 hygiene is super unstable. Like an actual research project levels of unstable. It’s not unimaginable that we’d tear it out macros 2.0 completely and do something different</p>",
        "id": 268974632,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1642881303
    },
    {
        "content": "<p>I see where the difference is coming from. During resolution, we choose the type of hygiene based on whether or not we're resolving a local variable: <a href=\"https://github.com/rust-lang/rust/blob/d63a8d965e76f29a2b65c1f22a32613df1fe5c2c/compiler/rustc_resolve/src/lib.rs#L1942\">https://github.com/rust-lang/rust/blob/d63a8d965e76f29a2b65c1f22a32613df1fe5c2c/compiler/rustc_resolve/src/lib.rs#L1942</a></p>",
        "id": 268974707,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881405
    },
    {
        "content": "<p>However, during field resolution, we unconditionally use macros 2.0 hygiene (ignoring the macro_rules hygiene): <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/expr.rs#L1830\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/expr.rs#L1830</a></p>",
        "id": 268974789,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881494
    },
    {
        "content": "<p>So, field resolution is treated differently than local variable resolution w.r.t hygiene</p>",
        "id": 268974793,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881510
    },
    {
        "content": "<p>Crazy idea: We implement unstable <em>fields</em> (if we don't already support that), and make the <code>Pin</code> structs field public and unstable</p>",
        "id": 268974825,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881600
    },
    {
        "content": "<p>And just use allow_internal_unstable to access that specific field, using normal (macro_rules hygiene)</p>",
        "id": 268974924,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881627
    },
    {
        "content": "<p>similar to what we do for the <code>format!</code> infrastructure</p>",
        "id": 268974935,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881648
    },
    {
        "content": "<p>Isn't that what Mara is proposing?</p>",
        "id": 268974936,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642881648
    },
    {
        "content": "<p>Oh, yeah <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 268974949,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881677
    },
    {
        "content": "<p>I missed her proposal</p>",
        "id": 268974963,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881693
    },
    {
        "content": "<p>That sounds good to me</p>",
        "id": 268974965,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881698
    },
    {
        "content": "<p>I also agree that we have plenty of unsound features, so it would be fine to add another one. We could even mark it as 'incomplete' to further discourage use (which it technically is, since ideally we'd use a hygiene-based solution)</p>",
        "id": 268975051,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642881809
    },
    {
        "content": "<p>Side note: I think it's somewhat unfortunate that the rules around lifetime extension are forcing us into defining this macro in <code>core</code></p>",
        "id": 268975316,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882172
    },
    {
        "content": "<p>Ideally, the only reason to put this in <code>core</code> would be for convenience, and users would be able to define an identical macro themselves (both would use <code>Pin::new_unchecked</code>)</p>",
        "id": 268975378,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882246
    },
    {
        "content": "<p>This seems like a problem that could potentially be faced by other 'constructor' macros</p>",
        "id": 268975389,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882266
    },
    {
        "content": "<p>There's a similar problem with format_args!</p>",
        "id": 268975392,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882278
    },
    {
        "content": "<p>Doesn't RFC 66 solve it?</p>",
        "id": 268975671,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882387
    },
    {
        "content": "<blockquote>\n<p>Crazy idea</p>\n</blockquote>\n<p>Hey! tsk.</p>",
        "id": 268975727,
        "sender_full_name": "Mara",
        "timestamp": 1642882449
    },
    {
        "content": "<p>Well, we both independently came up with it, so I guess it's pretty reasonable after all <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268975940,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882489
    },
    {
        "content": "<p>it's how all macros work that access something 'private' <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 268975970,
        "sender_full_name": "Mara",
        "timestamp": 1642882539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>  regarsing the lifetime extension issue: what prevents the macro from just using the manual desugaring that you wrote down?</p>",
        "id": 268976056,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882618
    },
    {
        "content": "<p>The StackPinned struct?</p>",
        "id": 268976252,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882660
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">anon</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pin</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">anon</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268976267,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882682
    },
    {
        "content": "<p>Is is that we're not guaranteed to actually move the expression?</p>",
        "id": 268976318,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882700
    },
    {
        "content": "<p>That is how the current macros work</p>",
        "id": 268976333,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882724
    },
    {
        "content": "<p>But it is not very ergonomic</p>",
        "id": 268976342,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882735
    },
    {
        "content": "<p>We want to <em>return</em> a Pin&lt;&amp;mut T&gt; from the macro</p>",
        "id": 268976349,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882759
    },
    {
        "content": "<p>Oh - without an enclosing block, we can't use it as the RHS of a let?</p>",
        "id": 268976353,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882763
    },
    {
        "content": "<p>and using an enclosing block would cause <code>anon</code> to be dropped</p>",
        "id": 268976440,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642882791
    },
    {
        "content": "<p>Right</p>",
        "id": 268976614,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882834
    },
    {
        "content": "<p>It ends up looking like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">pin</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268976624,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882842
    },
    {
        "content": "<p>The original binding has to be shadowed to ensure it's never used again.</p>",
        "id": 268976653,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642882907
    },
    {
        "content": "<p>Tbh, one way or another, I'd hope that macros get to be able to access privacy in a way that <code>def_site()</code> currently achieves, if the latter is deemed too unstable.</p>",
        "id": 268976810,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642883018
    },
    {
        "content": "<p>would be nice. but totally not worth blocking <code>pin!()</code> on.</p>",
        "id": 268976860,
        "sender_full_name": "Mara",
        "timestamp": 1642883046
    },
    {
        "content": "<p>Yeah yeah, agreed. That's why I'm currently working with the changes you've suggested</p>",
        "id": 268976877,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642883083
    },
    {
        "content": "<p>I've renamed it to <code>unsafe_…</code>, and making it be an <code>incomplete</code> feature as well.</p>",
        "id": 268976893,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642883107
    },
    {
        "content": "<p>an <code>incomplete</code> library feature? that's new.</p>",
        "id": 268976958,
        "sender_full_name": "Mara",
        "timestamp": 1642883174
    },
    {
        "content": "<p>Ah, then maybe it won't work; I'm writing it as we speak</p>",
        "id": 268976993,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642883217
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/jCRjPI1b5XZVbfiq-NhTbVUc/Screen-Shot-2022-01-22-at-21.26.28.png\">Screen-Shot-2022-01-22-at-21.26.28.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jCRjPI1b5XZVbfiq-NhTbVUc/Screen-Shot-2022-01-22-at-21.26.28.png\" title=\"Screen-Shot-2022-01-22-at-21.26.28.png\"><img src=\"/user_uploads/4715/jCRjPI1b5XZVbfiq-NhTbVUc/Screen-Shot-2022-01-22-at-21.26.28.png\"></a></div>",
        "id": 268976997,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642883218
    },
    {
        "content": "<p>I liked the phrasing in:</p>\n<blockquote>\n<p>Let's thus hope an <code>unsafe</code>-named <code>incomplete</code> <code>unstable</code> feature is enough deterrent…</p>\n</blockquote>\n<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 268977023,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642883245
    },
    {
        "content": "<p>we have plenty of features that you shouldn't enable if you want correct/sound code.</p>",
        "id": 268977080,
        "sender_full_name": "Mara",
        "timestamp": 1642883293
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/93210\">this issue</a> is a bit annoying, but shouldn't take long to be fixed.</p>",
        "id": 268977114,
        "sender_full_name": "Mara",
        "timestamp": 1642883385
    },
    {
        "content": "<p>How would one check if a field is marked as unstable?</p>",
        "id": 268977202,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642883471
    },
    {
        "content": "<p><code>tcx.is_doc_hidden(did)</code> should be enough</p>",
        "id": 268977290,
        "sender_full_name": "Mara",
        "timestamp": 1642883600
    },
    {
        "content": "<p>the error message is generated here I think: &lt;<a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/expr.rs#L1749\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/expr.rs#L1749</a>&gt;</p>",
        "id": 268977291,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642883605
    },
    {
        "content": "<p>Ah okay, I'll see if I can fix that</p>",
        "id": 268977296,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642883611
    },
    {
        "content": "<p>Fixed <a href=\"https://github.com/rust-lang/rust/pull/93214\">https://github.com/rust-lang/rust/pull/93214</a></p>",
        "id": 268977792,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642884358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/pin!.20.E2.80.94.20the.20.22definitive.22.20edition.20.28a.20rhs-compatible.20pin-nin.2E.2E.2E/near/268977080\">said</a>:</p>\n<blockquote>\n<p>we have plenty of features that you shouldn't enable if you want correct/sound code.</p>\n</blockquote>\n<p>Ok, I'll extract the more debatable <code>incomplete</code> feature part to its own commit, so that it can easily be reverted during PR review; I'm not gonna preemptively revert it since I think this is a discussion I'd like there to be, <em>somewhere</em>[^1]: we have <code>unsafe_code</code> which already covers stuff which was deemed \"out of scope for <code>unsafe</code>\", such as <code>#[no_mangle]</code>.</p>\n<p>Ideally, we'd similarly have \"conceptually <code>unsafe</code> to enable\" feature gates, which would include our current <code>incomplete_features</code> (since potentially unsound), and a new category of <code>unsafe_features</code>.</p>\n<p>[^1]: Maybe we could fork this thread into <code>t-lang</code> and bring it up there?</p>",
        "id": 268977993,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642884616
    },
    {
        "content": "<p>unstable features are unstable for a reason.. we make no guarantees about what happens when you enable nightly features. i'd be opposed to a way of specifying a feature is 'unsafe', because it sets the expectation that all other features are always safe</p>",
        "id": 268979730,
        "sender_full_name": "Mara",
        "timestamp": 1642887069
    },
    {
        "content": "<p>This seems like piling back on top of hack to get something landed now. I want to make sure we keep track of the problems and what a principled solution looks like so we keep working towards that too and don’t stabilise anything that prohibits changing implementation in the long run</p>",
        "id": 269089605,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643022484
    },
    {
        "content": "<p>I think that the macro + unstable feature has been used enough times to be a reliable approach; I've featured it in the PR. I'll nonetheless add a mention to this semi-transparent <em>vs.</em> opaque implementations in the tracking issue <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<ul>\n<li>So this at least guarantees the existence of an easy path to stabilization, <em>implementation-wise</em>; and now that we know of it, it's true that it shouldn't be that important which implementation the <em>currently unstable</em> macro ends up using in this very first PR</li>\n</ul>",
        "id": 269092159,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643023939
    },
    {
        "content": "<p>I think macro + unstable feature is a hack and every time it has been used we should feel bad (but note that feeling bad is sometimes a worthwhile price to pay to get a feature early). And while we might assess each feature to be worth some cost in hackiness, this is technical debt and worse, it is technical debt in APIs with strict back compat so it can effectively never be paid off, so I think we should be extremely careful about considering the overall effect on the whole library/language of repeatedly paying these small costs in hackiness.</p>",
        "id": 269106384,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643031762
    },
    {
        "content": "<p>Note sure how seriously I mean this, but as an alternative, why not just make the <code>pointer</code> field in <code>Pin</code> public? Then you wouldn't need a macro for stack pinning at all?</p>",
        "id": 269106670,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643031885
    },
    {
        "content": "<p>OK, no that's stupid <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 269106879,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643031919
    },
    {
        "content": "<p>You need it to be write-only public or something</p>",
        "id": 269106922,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643031939
    },
    {
        "content": "<p>I guess what we really want here is placement new?</p>",
        "id": 269107026,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643031975
    },
    {
        "content": "<p>Placement new?</p>",
        "id": 269107215,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643032072
    },
    {
        "content": "<p>I don't see how that fits in here</p>",
        "id": 269107287,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643032088
    },
    {
        "content": "<p>What we really want is RFC 66 or some spinoff of it</p>",
        "id": 269107393,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643032144
    },
    {
        "content": "<p>I was thinking you want <code>let pinned &lt;= Pin::new(&amp;mut foo.bar());</code> or whatever to work, where the semantics of that is that it creates the Pin around the result of the expression on the stack (i.e., in place), rather than passing the result to <code>new</code>?</p>",
        "id": 269109027,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643032773
    },
    {
        "content": "<p>That's a bit different to placement new but feels philosophically similar</p>",
        "id": 269109619,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643032981
    },
    {
        "content": "<p>Hm so you're thinking placement new would influence temporary lifetimes</p>",
        "id": 269109790,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643033049
    },
    {
        "content": "<p>I think maybe what we want is an easy way to extend a temp lifetime; the implicit extension proposed by RFC 66 feels like it would be very footgunny with RAII like mutex guards</p>",
        "id": 269109953,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643033132
    },
    {
        "content": "<p>Something like <code>let pinned = Pin::new(&amp;'fn mut foo.bar());</code></p>",
        "id": 269110533,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643033364
    },
    {
        "content": "<p><code>fn foo() { let x; { x = &amp;'fn String::new(); } println!(\"{}\", x) }</code></p>",
        "id": 269110700,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643033437
    },
    {
        "content": "<p>That wouldn't work very well with method chains though</p>",
        "id": 269110738,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643033459
    },
    {
        "content": "<p>I must admit to being handwavey here and be going with a feeling rather than having a plan. Having said that, I'm not thinking in terms of lifetimes, I would expect the lifetimes follow the place where we construct the object, and I'm thinking primarily in terms of placement. So Pin::new creates a Pin locally and copies it back to the caller, but a placement new feature of some kind would allow Pin::new to create the Pin directly in the callers stack frame, similarly to how <code>box</code> creates an object directly on the heap</p>",
        "id": 269113025,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643034547
    },
    {
        "content": "<p>I suppose something like that would work as well, but it feels much more niche than a general lifetime extension feature</p>",
        "id": 269113537,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643034810
    },
    {
        "content": "<p>I think it is not niche in that this is just one use of it that essentially 'comes for free'. There is a strong motivation for being able to create big objects on the heap without copying, using custom allocators in an ergonomic way, and possible working with arenas/GC</p>",
        "id": 269113950,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643035001
    },
    {
        "content": "<p>Oh, I thought you were saying this would be a different feature than placement new</p>",
        "id": 269114048,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643035055
    },
    {
        "content": "<p>Well, I am hand-waving :-) but I hope that a flexible placement new could be used here</p>",
        "id": 269114159,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643035091
    },
    {
        "content": "<blockquote>\n<p>I think macro + unstable feature is a hack and every time it has been used we should feel bad</p>\n</blockquote>\n<p>i don't agree. <code>allow_internal_unstable</code> is a very common tool in the standard library and it works well. and even if you want to remove that feature, there's not a lot of techincal debt involved, as all of them could be replaced by full macros 2.0 hygiene, whenever that happens.</p>",
        "id": 269382436,
        "sender_full_name": "Mara",
        "timestamp": 1643189331
    },
    {
        "content": "<p>I don't think there's anything wrong with allow_internal_unstable. I think that using it to simulate visibility is a bit of a hack because the principled way to do it would be to just use visibility :-) (of course just because it's hack doesn't mean it isn't sometimes necessary).</p>",
        "id": 269388261,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643192678
    },
    {
        "content": "<p>I wouldn't bet on macros 2.0 to save us because given current progress, macros 2.0 will never actually happen, and if it does, I think the whole hygiene model is basically an open question</p>",
        "id": 269388364,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643192727
    },
    {
        "content": "<blockquote>\n<p>I think that using it to simulate visibility is a bit of a hack</p>\n</blockquote>\n<p>most usages of allow_internal_unstable are exactly that. e.g. format_args being allowed to call fmt::Arguments::new, or println or panic or assert being allowed to call the underlying print/panic/assert function, etc.</p>",
        "id": 269398237,
        "sender_full_name": "Mara",
        "timestamp": 1643197535
    }
]