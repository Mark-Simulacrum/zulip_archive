[
    {
        "content": "<p>Hello everyone! I love the user story idea. I was thinking through some other issues I ran into with Fuchsia, and I'm not sure how to summarize one into a user story. Is there a place to collect interesting examples, that could eventually feed into a user story?</p>\n<p>we recently implement the happy eyeballs v2 rfc, in order to be resilient to flaky IPv6 support. It's pretty simple to describe, but it had a lot of interesting intersections between timers and multiple in flight connections. In short, you get a list of addresses to try from DNS, then connect to one, but after a timeout, start connecting to the next address. Repeat until either a connection succeeds, all fail, or there's no more addresses to try (where we just wait forever for it to succeed).</p>\n<p>We did a lot of experimentation, but the easiest was to just implement manual future. Testing was also complicated, since we had some complex edge cases around timer expiration:</p>\n<p><a href=\"https://cs.opensource.google/fuchsia/fuchsia/+/master:src/lib/fuchsia-hyper/src/happy_eyeballs.rs\">https://cs.opensource.google/fuchsia/fuchsia/+/master:src/lib/fuchsia-hyper/src/happy_eyeballs.rs</a></p>",
        "id": 231152696,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1616253978
    },
    {
        "content": "<p>Another one (that maybe we could fit into one or more user stories) we have a number of long running state machines with our update system. One of the more complicated ones is our omaha-client service, which interacts with an omaha server, which we use to efficiently signal to a device that an update is available.</p>\n<p>This includes the following interesting things:</p>\n<ol>\n<li>We separated this into a fuchsia-specific service, and a fuchsia-independent library, with a lot of abstract interfaces to make it all work.</li>\n<li>\n<p>The omaha state machine takes a while to execute, so we created some patterns to:</p>\n<ul>\n<li>communicate progress and metrics between the service and library</li>\n<li>serializing the state machine execution while keeping the service interactive.</li>\n</ul>\n</li>\n<li>\n<p>A whole bunch of tests stressing the system. And as always, testing timers makes things difficult</p>\n</li>\n<li>We created a coroutine-ish library to make it easier to communicate incremental progress during the execution of the state machine: <a href=\"https://cs.opensource.google/fuchsia/fuchsia/+/master:src/sys/pkg/lib/async-generator/\">https://cs.opensource.google/fuchsia/fuchsia/+/master:src/sys/pkg/lib/async-generator/</a></li>\n</ol>\n<p>service: <a href=\"https://cs.opensource.google/fuchsia/fuchsia/+/master:src/sys/pkg/bin/omaha-client\">https://cs.opensource.google/fuchsia/fuchsia/+/master:src/sys/pkg/bin/omaha-client</a><br>\nlibrary: <a href=\"https://cs.opensource.google/fuchsia/fuchsia/+/master:src/sys/pkg/lib/omaha-client\">https://cs.opensource.google/fuchsia/fuchsia/+/master:src/sys/pkg/lib/omaha-client</a></p>",
        "id": 231155684,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1616257425
    },
    {
        "content": "<p>Another difficult problem, but I’m not sure if it’s quite an async issue - rather than use libraries:</p>\n<p>Fuchsia services talk to other services through async channels. One challenge we’ve had is how to communicate errors over these channels. By default, if we drop a channel, it will get closed by the kernel, and the other side will get a generic “PEER_CLOSED” error. However we have also these things called epitaph, that lets you add a status flag to pass along more info, like “INVALID_ARGUMENTS” to give a better hint to the peer why the channel closed. </p>\n<p>Where this wg might come into play is that we don’t have linear types, so we can’t guarantee all code paths actually send an epitaph. Perhaps there are patterns we could develop, or compiler support that could improve this situation?</p>",
        "id": 231165354,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1616267343
    },
    {
        "content": "<p>These look like really interesting ideas for stories. Perhaps the best way forward is to try to break them up into individual chunks and create issues for them in the repo. </p>\n<p>We don't yet have one on the question of \"when is async/await not powerful enough and implementing a Future manually is the right way to go\" - which is what the first story seems to be about. As for the other two stories, I'm not quite sure what their morals are. Was there a certain aspect of them that would have been easier if you had known something at the beginning that you know now? Or was there a particular piece of it that was hard to implement? The point about testing timers here is certainly an interesting one.</p>",
        "id": 231603867,
        "sender_full_name": "rylev",
        "timestamp": 1616577985
    }
]