[
    {
        "content": "<p>Running into a really fun interaction in Tide because of both the lack of async closures and the lack of async traits: <a href=\"https://github.com/http-rs/tide/pull/556\">https://github.com/http-rs/tide/pull/556</a></p>",
        "id": 199139298,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590750176
    },
    {
        "content": "<p>We would want to write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// this example is not possible</span>\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">middleware</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">req</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">next</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">next</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199139477,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590750287
    },
    {
        "content": "<p>But because <code>async fn</code> in traits is only possible by returning a <code>Pin&lt;Box&lt;Future&gt;&gt;</code> <em>and</em> we don't have an <code>AsyncFn</code> definition we cannot express that yet. So instead we're working around it by defining custom structs.</p>",
        "id": 199139672,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590750475
    },
    {
        "content": "<p>Figured this could be a an interesting example to showcase the limitations of async/await in Rust currently.</p>",
        "id": 199139784,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1590750535
    },
    {
        "content": "<p>while traits are certainly an issue, you don't need <code>AsyncFn</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::future::Future;\n\nfn foo&lt;T: Future&lt;Output=i32&gt;, F: Fn() -&gt; T&gt;(x: F) {}\n\nfn main() {\n    foo(|| async { 42 })\n}\n</code></pre></div>",
        "id": 199707245,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1591249463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216097\">@Benjamin Saunders</span> in this case the <code>Next</code> argument is borrowed, which is where the need for <code>AsyncFn</code> came from -- probably should've clarified <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201047017,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1592327874
    },
    {
        "content": "<p>hmm, how would that help? don't async fns always borrow all their arguments?</p>",
        "id": 201047150,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1592327946
    },
    {
        "content": "<p>a regular closure at least has the option of constructing a non-borrowing future</p>",
        "id": 201088887,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1592352377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216097\">@Benjamin Saunders</span> async fns can take ownership of their arguments just fine. Borrowing is harder. I added some notes about this on <a href=\"https://github.com/rust-lang/rust/issues/45994#issuecomment-633144274\">https://github.com/rust-lang/rust/issues/45994#issuecomment-633144274</a> and I'd like to have a go at solving it. Is anyone available to mentor me on this?</p>",
        "id": 201491235,
        "sender_full_name": "David Laban",
        "timestamp": 1592678788
    },
    {
        "content": "<p>yes, of course they take ownership of values; what they can't do is <em>not</em> borrow a <em>reference</em></p>",
        "id": 201492566,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1592680376
    },
    {
        "content": "<p>whereas a regular closure can freely control the lifetime of its returned future</p>",
        "id": 201492593,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1592680412
    },
    {
        "content": "<p>(I'm trying to put together a proof-of-concept implementation of the feature, but have only got as far as this: <a href=\"https://github.com/alsuren/rust/pull/1\">https://github.com/alsuren/rust/pull/1</a> )</p>",
        "id": 201495421,
        "sender_full_name": "David Laban",
        "timestamp": 1592684102
    }
]