[
    {
        "content": "<p>ok, I'm going to put some of my thoughts here</p>",
        "id": 185043578,
        "sender_full_name": "tmandry",
        "timestamp": 1578424334
    },
    {
        "content": "<p>there's.. a lot we can work on :)</p>",
        "id": 185043999,
        "sender_full_name": "tmandry",
        "timestamp": 1578424617
    },
    {
        "content": "<p>On the implementation side, overall categories I came up with were</p>\n<ul>\n<li>Diagnostics</li>\n<li>Documentation (like the async book)</li>\n<li>Debugging (e.g. deeper integration with gdb for async code)</li>\n<li>Performance of async code</li>\n<li>Compiler performance for async code</li>\n<li>Language feature implementations (GATs, non-TLS-async)</li>\n</ul>\n<p>On the lang/libs side, we have things like</p>\n<ul>\n<li>async drop</li>\n<li>async fn in traits</li>\n<li>Library stabilizations (e.g. <code>AsyncRead</code>)</li>\n<li>Stabilizing an interface for Executors (separating this out since it's likely a bigger project)</li>\n</ul>",
        "id": 185044317,
        "sender_full_name": "tmandry",
        "timestamp": 1578424851
    },
    {
        "content": "<p>I guess documentation can go in either category</p>",
        "id": 185044390,
        "sender_full_name": "tmandry",
        "timestamp": 1578424915
    },
    {
        "content": "<p>I'm sort of trying to differentiate between \"things we can do now\" vs \"things that need design discussions\"</p>",
        "id": 185044460,
        "sender_full_name": "tmandry",
        "timestamp": 1578424941
    },
    {
        "content": "<p>and trying to focus more on the former, for now</p>",
        "id": 185044483,
        "sender_full_name": "tmandry",
        "timestamp": 1578424960
    },
    {
        "content": "<h2>First and foremost, I think we should be making async/await easier to use</h2>",
        "id": 185044650,
        "sender_full_name": "tmandry",
        "timestamp": 1578425049
    },
    {
        "content": "<p>that includes Diagnostics and Documentation above, as well as Debugging</p>",
        "id": 185044695,
        "sender_full_name": "tmandry",
        "timestamp": 1578425081
    },
    {
        "content": "<p>we should probably set aside some time to take stock of the async book, and what the state of the overall documentation is</p>",
        "id": 185045046,
        "sender_full_name": "tmandry",
        "timestamp": 1578425283
    },
    {
        "content": "<p>diagnostics is clearly ongoing, and we're making great progress there</p>",
        "id": 185045087,
        "sender_full_name": "tmandry",
        "timestamp": 1578425307
    },
    {
        "content": "<p>as for debugging</p>",
        "id": 185045163,
        "sender_full_name": "tmandry",
        "timestamp": 1578425356
    },
    {
        "content": "<p>there's some discussion within Fuchsia about doing a deep integration with our debugger, and I think that would be a good place to prototype the interfaces</p>",
        "id": 185045506,
        "sender_full_name": "tmandry",
        "timestamp": 1578425544
    },
    {
        "content": "<p>that will likely involve work in both the compiler and (eventually) in a standard interface for executors, so it kind of straddles both categories above</p>",
        "id": 185045694,
        "sender_full_name": "tmandry",
        "timestamp": 1578425675
    },
    {
        "content": "<p>but even if it has longer lead time, I think it's definitely worth putting some effort into this in 2020</p>",
        "id": 185045771,
        "sender_full_name": "tmandry",
        "timestamp": 1578425738
    },
    {
        "content": "<h2>Performance</h2>",
        "id": 185045861,
        "sender_full_name": "tmandry",
        "timestamp": 1578425778
    },
    {
        "content": "<p>we should focus on the lowest hanging fruit here first, of course</p>",
        "id": 185045885,
        "sender_full_name": "tmandry",
        "timestamp": 1578425790
    },
    {
        "content": "<p>in particular I'd really like to fix <a href=\"https://github.com/rust-lang/rust/issues/62958\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62958\">#62958</a> \"Async fn doubles argument size\"</p>",
        "id": 185046087,
        "sender_full_name": "tmandry",
        "timestamp": 1578425895
    },
    {
        "content": "<p>and I also think we need more benchmarks for async/await code, to catch compiler performance regressions</p>",
        "id": 185046146,
        "sender_full_name": "tmandry",
        "timestamp": 1578425937
    },
    {
        "content": "<p>those two are my top priorities here, I think</p>",
        "id": 185046210,
        "sender_full_name": "tmandry",
        "timestamp": 1578425985
    },
    {
        "content": "<p>beyond that, I think there's ample room to improve performance</p>",
        "id": 185046228,
        "sender_full_name": "tmandry",
        "timestamp": 1578425997
    },
    {
        "content": "<p>e.g. in the generator implementation, one idea is to replace the switch on the generator state with a PC to jump to directly</p>",
        "id": 185046386,
        "sender_full_name": "tmandry",
        "timestamp": 1578426076
    },
    {
        "content": "<p>it would be nice if we could do this in a way that requires only a single jump for a deeply nested state machine</p>",
        "id": 185046410,
        "sender_full_name": "tmandry",
        "timestamp": 1578426104
    },
    {
        "content": "<p>but I'm getting ahead of myself :)</p>",
        "id": 185046429,
        "sender_full_name": "tmandry",
        "timestamp": 1578426118
    },
    {
        "content": "<p>this isn't as important as anything I mentioned above</p>",
        "id": 185046490,
        "sender_full_name": "tmandry",
        "timestamp": 1578426135
    },
    {
        "content": "<h2>Language features</h2>",
        "id": 185046614,
        "sender_full_name": "tmandry",
        "timestamp": 1578426224
    },
    {
        "content": "<p>this one is a little hazier to me</p>",
        "id": 185046628,
        "sender_full_name": "tmandry",
        "timestamp": 1578426236
    },
    {
        "content": "<p>GATs interacts with the traits wg, and is probably more \"their thing\"</p>",
        "id": 185046706,
        "sender_full_name": "tmandry",
        "timestamp": 1578426258
    },
    {
        "content": "<p>my primary interest here is in <em>enabling prototyping for the most important language features</em></p>",
        "id": 185046795,
        "sender_full_name": "tmandry",
        "timestamp": 1578426310
    },
    {
        "content": "<p>since those already have a longer lead time, we should think about anything we can do on the implementation side to reduce that</p>",
        "id": 185046839,
        "sender_full_name": "tmandry",
        "timestamp": 1578426356
    },
    {
        "content": "<p>--<br>\nokay.. I think I'm going to leave it there for now</p>",
        "id": 185046950,
        "sender_full_name": "tmandry",
        "timestamp": 1578426413
    },
    {
        "content": "<p>still need to talk about the lang/libs side, at some point</p>",
        "id": 185047021,
        "sender_full_name": "tmandry",
        "timestamp": 1578426469
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, any thoughts to add?</p>",
        "id": 185047084,
        "sender_full_name": "tmandry",
        "timestamp": 1578426488
    },
    {
        "content": "<p>(rhetorical question.. I'm sure you do <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 185047422,
        "sender_full_name": "tmandry",
        "timestamp": 1578426659
    },
    {
        "content": "<blockquote>\n<p>Language features</p>\n</blockquote>\n<p>I think we shouldn't be having new RFCs or even work on async closures until most of the existing work is finished, that is, the bugs</p>",
        "id": 185051113,
        "sender_full_name": "centril",
        "timestamp": 1578428801
    },
    {
        "content": "<p>yes, I forgot to include bug fixes as an explicit category</p>",
        "id": 185060066,
        "sender_full_name": "tmandry",
        "timestamp": 1578434829
    },
    {
        "content": "<p>but agreed that those should be the highest priority</p>",
        "id": 185060091,
        "sender_full_name": "tmandry",
        "timestamp": 1578434850
    },
    {
        "content": "<p>A few thoughts</p>",
        "id": 185148949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578512395
    },
    {
        "content": "<p>First of all, I think we should stabilize the <code>Stream</code>, <code>AsyncRead</code>, and <code>AsyncWrite</code> traits, perhaps in that order. I've been talking to various folks and I think there's a fairly clear picture forming.</p>",
        "id": 185149039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578512436
    },
    {
        "content": "<p>I've also been forming a plan around GATs but I think that's more for <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a>, as you said.</p>",
        "id": 185149064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578512460
    },
    {
        "content": "<p>I guess I agree with almost everything you wrote <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> -- diagnostics are definitely a huge point that I think comes up fairly regularly. I've not heard many complaints about <em>performance</em>.</p>",
        "id": 185149204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578512548
    },
    {
        "content": "<blockquote>\n<p>I've also been forming a plan around GATs but I think that's more for <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a>, as you said.</p>\n</blockquote>\n<p>I think another lang feature that could tangentially be quite helpful, but which doesn't likely belong in \"this group\", is stabilizing and improving more parts of the <code>impl Trait</code> story</p>",
        "id": 185149226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578512569
    },
    {
        "content": "<blockquote>\n<p>First of all, I think we should stabilize the <code>Stream</code>, <code>AsyncRead</code>, and <code>AsyncWrite</code> traits, perhaps in that order. I've been talking to various folks and I think there's a fairly clear picture forming.</p>\n</blockquote>\n<p>Do you have a plan to stabilize <code>Stream</code> without some form of GATs, or is it blocked on that?</p>",
        "id": 185149382,
        "sender_full_name": "tmandry",
        "timestamp": 1578512668
    },
    {
        "content": "<p>IMO <code>Stream</code> would just be the async equivalent of <code>Iterator</code>, and GATs would allow the introduction of new <code>StreamingIterator</code>/<code>StreamingStream</code> in the future.</p>",
        "id": 185150128,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1578513207
    },
    {
        "content": "<p>What <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> said, basically</p>",
        "id": 185158613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578518693
    },
    {
        "content": "<blockquote>\n<p>I think another lang feature that could tangentially be quite helpful, but which doesn't likely belong in \"this group\", is stabilizing and improving more parts of the impl Trait story</p>\n</blockquote>\n<p>(I agree, but this is blocked on fixing <em>a lot</em> of bugs and fully implementing the feature however. ^^)</p>",
        "id": 185158648,
        "sender_full_name": "centril",
        "timestamp": 1578518714
    },
    {
        "content": "<p>( also cc <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> on this topic )</p>",
        "id": 185158661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578518726
    },
    {
        "content": "<blockquote>\n<p>IMO <code>Stream</code> would just be the async equivalent of <code>Iterator</code>, and GATs would allow the introduction of new <code>StreamingIterator</code>/<code>StreamingStream</code> in the future.</p>\n</blockquote>\n<p>to elaborate on this, I think a guiding principle should be that the sync/async traits basically mirror one another, and that fits well in both of these cases</p>",
        "id": 185158752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578518773
    },
    {
        "content": "<p>Well... the <code>std::io::Read</code>trait is problematic in some respects, so I'm not fully sure that they must match (but that's a separate topic)</p>",
        "id": 185158829,
        "sender_full_name": "centril",
        "timestamp": 1578518835
    },
    {
        "content": "<p>I would also add block_on to the libs changes</p>",
        "id": 185160754,
        "sender_full_name": "boats",
        "timestamp": 1578520237
    },
    {
        "content": "<p>And IMO there are a few very small new language features that are worth doing short term (mainly async drop)</p>",
        "id": 185160799,
        "sender_full_name": "boats",
        "timestamp": 1578520277
    },
    {
        "content": "<p>I would be interested in some work on task locals. I imagine they could be implemented via a field in Context</p>",
        "id": 185173758,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1578530718
    },
    {
        "content": "<blockquote>\n<p>And IMO there are a few very small new language features that are worth doing short term (mainly async drop)</p>\n</blockquote>\n<p>I was going to ask about async drop</p>",
        "id": 185255381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578603797
    },
    {
        "content": "<p>I put out a call for feedback from Fuchsia devs today. Here are the things that were echoed multiple times:</p>\n<ul>\n<li>More guidance on lifetime annotations (i.e. from the compiler, or maybe docs)</li>\n<li>Educational materials, especially around <code>pin</code></li>\n<li>Straightforward way of writing recursive async fns</li>\n<li>Capture lists (to eliminate annoying/confusing boilerplate; they need a \"clone\" capture mode)</li>\n<li>async support in functional helpers like map, filter, all, or_else, etc (an async version of these)</li>\n<li>async fn in trait</li>\n<li>async fns that create Streams</li>\n</ul>\n<p>Some of these are known, but some were new to me.</p>\n<p>Other things that were mentioned:</p>\n<ul>\n<li>AsyncDrop</li>\n<li><code>self: &amp;Arc&lt;Self&gt;</code></li>\n<li>Visibility into cost of variables captured in the state machine</li>\n<li>A SelectAll, but where I can access/drop streams by key</li>\n<li>A Sink, but with a custom async backpressure function</li>\n</ul>",
        "id": 185561626,
        "sender_full_name": "tmandry",
        "timestamp": 1578971779
    },
    {
        "content": "<p>Also, thanks for all the feedback</p>",
        "id": 185561641,
        "sender_full_name": "tmandry",
        "timestamp": 1578971830
    },
    {
        "content": "<p>We probably need a way to track all of these and assign priorities</p>",
        "id": 185561689,
        "sender_full_name": "tmandry",
        "timestamp": 1578971884
    },
    {
        "content": "<p>And produce a sort of \"async roadmap\" with the guiding themes, perhaps?</p>",
        "id": 185561701,
        "sender_full_name": "tmandry",
        "timestamp": 1578971915
    },
    {
        "content": "<p>My pipe dream for async/await is a Stream created from an async fn that has some sugar that yields. <br>\nShort term I suspect as everyone spinal tap's async/await and turns it up to 11, we will see calls to minimise any memory size overheads.</p>",
        "id": 185621407,
        "sender_full_name": "Giles Cope",
        "timestamp": 1579024812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> that's quite interesting -- particularly the \"capture list\" part, I had not heard that</p>",
        "id": 185622953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579025831
    },
    {
        "content": "<p>might be nice to have an example</p>",
        "id": 185622962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579025842
    },
    {
        "content": "<p>I'm reminded that I want to create a wg-async-foundations repository</p>",
        "id": 185622974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579025850
    },
    {
        "content": "<p>and start to create pages that talk about these sorts of things to help catalog requirements and constraints</p>",
        "id": 185622991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579025864
    },
    {
        "content": "<blockquote>\n<p>I'm reminded that I want to create a wg-async-foundations repository</p>\n</blockquote>\n<p>yeah, I was thinking the same</p>",
        "id": 185634546,
        "sender_full_name": "tmandry",
        "timestamp": 1579032285
    },
    {
        "content": "<blockquote>\n<p>might be nice to have an example</p>\n</blockquote>\n<p>the example of something that comes up a lot was</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">call_fn</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">item2</span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"n\">item</span><span class=\"p\">...</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185635006,
        "sender_full_name": "tmandry",
        "timestamp": 1579032577
    },
    {
        "content": "<p>(except we don't allow async closures in our tree, but you get the idea)</p>",
        "id": 185635166,
        "sender_full_name": "tmandry",
        "timestamp": 1579032690
    },
    {
        "content": "<p>I've also seen cases where some vars wanted to be captured by [mutable] reference and some by value</p>",
        "id": 185635257,
        "sender_full_name": "tmandry",
        "timestamp": 1579032737
    },
    {
        "content": "<p>but I'm not sure how common those are</p>",
        "id": 185635649,
        "sender_full_name": "tmandry",
        "timestamp": 1579033024
    },
    {
        "content": "<p>sometimes you can do this implicitly, but it can be hard to follow what's going on</p>",
        "id": 185635996,
        "sender_full_name": "tmandry",
        "timestamp": 1579033231
    },
    {
        "content": "<p>so I guess there's (1) removing clone boilerplate and (2) making capture semantics more explicit, easier to follow/control</p>",
        "id": 185636269,
        "sender_full_name": "tmandry",
        "timestamp": 1579033396
    },
    {
        "content": "<p>the person who brought up (2) was new to Rust and async/await. it might be a learning curve thing and figuring out the right idioms</p>",
        "id": 185636308,
        "sender_full_name": "tmandry",
        "timestamp": 1579033433
    },
    {
        "content": "<p>but personally, there is a level of implicitness in the capture semantics that sometimes makes me uncomfortable. :)</p>",
        "id": 185636406,
        "sender_full_name": "tmandry",
        "timestamp": 1579033478
    },
    {
        "content": "<p>Thanks for doing the research and asking for feedback <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> !</p>",
        "id": 185665150,
        "sender_full_name": "Matthias247",
        "timestamp": 1579059207
    },
    {
        "content": "<p>The pattern I generally use for capture clauses is to replace a closure expression with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// one line per variable I want to &quot;declare&quot;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// borrow y by shared ref</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// take ownership of `z`</span>\n<span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{...}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but while this sometimes strikes me as \"elegant\", it seems clear that most people don't think of it (or perhaps don't care for it), and that it might be nice to have some explicit syntax for declaring what you will capture (plus nothing guarantees that you <em>only</em> capture the variables listed there, which is maybe suboptimal.</p>",
        "id": 186212986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579631906
    },
    {
        "content": "<p>Anyway, zooming out, did anybody here create a big list of thoughts? One list I made was the one I used for [the \"async interviews script\"](<a href=\"https://gist.github.com/nikomatsakis/ae2ede32c4c7d49cbda088a1539724d9\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/ae2ede32c4c7d49cbda088a1539724d9\">https://gist.github.com/nikomatsakis/ae2ede32c4c7d49cbda088a1539724d9</a>, though it's a bit incomplete now</p>",
        "id": 186213639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632317
    },
    {
        "content": "<p>I did not</p>",
        "id": 186213780,
        "sender_full_name": "tmandry",
        "timestamp": 1579632407
    },
    {
        "content": "<p>I think that from my POV the things I would put atop the list would be</p>\n<ul>\n<li>add the stream, async-read, async-write traits to libstd</li>\n<li>continued polish on diagnostics </li>\n<li>perhaps a few things like async-drop, <code>IntoFuture</code>, or other smaller proposals</li>\n</ul>",
        "id": 186213784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632412
    },
    {
        "content": "<p>Why those things? Well, the first ones because they seem to be pretty major candidates for enabling more interop, and because I think the discussions at this point are pretty far along.</p>",
        "id": 186213943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632508
    },
    {
        "content": "<p>The second one because it's the most common complaint :) though it'd be good to maybe drill in more on just what it means</p>",
        "id": 186213991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632543
    },
    {
        "content": "<p>not sure async-drop is small btw</p>",
        "id": 186214079,
        "sender_full_name": "centril",
        "timestamp": 1579632602
    },
    {
        "content": "<p>I'm not sure about the final line, I guess it depends how much energy goes into it, but it seems like it closes some known shortcomings and I wouldn't expect a lot of controversy there</p>",
        "id": 186214131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632613
    },
    {
        "content": "<p>Agreed, I'm not entirely clear about async-drop's size. e.g., there is the idea of generalizing a bit to <a class=\"stream-topic\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations/topic/Async.20Lifecycles\">#wg-async-foundations &gt; Async Lifecycles</a>, though I've not yet read most of the comments in that topic :)</p>",
        "id": 186214204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632679
    },
    {
        "content": "<p><code>IntoFuture</code> was legitimately classified as small cause the actual code changes were trivial and the open questions basically none (except bikeshed on <code>type Output</code> but that was resolved quickly thankfully)</p>",
        "id": 186214210,
        "sender_full_name": "centril",
        "timestamp": 1579632681
    },
    {
        "content": "<p>Agreed that we should be prioritizing things that improve interop, especially the easy ones :)</p>",
        "id": 186214400,
        "sender_full_name": "tmandry",
        "timestamp": 1579632825
    },
    {
        "content": "<p>And I think that diagnostics/ease of use are really important</p>",
        "id": 186214459,
        "sender_full_name": "tmandry",
        "timestamp": 1579632844
    },
    {
        "content": "<p>I think it's unclear to me how much effort needs to go into documentation / async book, though</p>",
        "id": 186214510,
        "sender_full_name": "tmandry",
        "timestamp": 1579632878
    },
    {
        "content": "<p>it's at least \"some\"</p>",
        "id": 186214518,
        "sender_full_name": "tmandry",
        "timestamp": 1579632884
    },
    {
        "content": "<p>but I don't think we have a good way of tracking work like that</p>",
        "id": 186214529,
        "sender_full_name": "tmandry",
        "timestamp": 1579632892
    },
    {
        "content": "<blockquote>\n<p>I think it's unclear to me how much effort needs to go into documentation / async book, though</p>\n</blockquote>\n<p>Yes, I think this is a good question</p>",
        "id": 186214534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632897
    },
    {
        "content": "<p>(which reminds me, we should get a github repo set up for the wg)</p>",
        "id": 186214558,
        "sender_full_name": "tmandry",
        "timestamp": 1579632909
    },
    {
        "content": "<p>One question is what our \"goal\" should be there, to some extent</p>",
        "id": 186214590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579632929
    },
    {
        "content": "<p>I actually don't think we should be prioritizing interop right now, while bugs still exist</p>",
        "id": 186214633,
        "sender_full_name": "centril",
        "timestamp": 1579632962
    },
    {
        "content": "<p>we essentially stabilized with a bunch of bugs open, which have to be paid off</p>",
        "id": 186214692,
        "sender_full_name": "centril",
        "timestamp": 1579632983
    },
    {
        "content": "<p>agreed that fixing bugs is higher priority, in general</p>",
        "id": 186214747,
        "sender_full_name": "tmandry",
        "timestamp": 1579633025
    },
    {
        "content": "<p>(basically, going forward, I think our policy should be that a feature has zero bugs before it can be stabilized)</p>",
        "id": 186214766,
        "sender_full_name": "centril",
        "timestamp": 1579633047
    },
    {
        "content": "<p>I guess it all depends on what one defines as a bug</p>",
        "id": 186214853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633094
    },
    {
        "content": "<p>but I don't think that's very practical nor especially desirable</p>",
        "id": 186214871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633107
    },
    {
        "content": "<p>well ICEs are included for sure</p>",
        "id": 186214890,
        "sender_full_name": "centril",
        "timestamp": 1579633122
    },
    {
        "content": "<p>crashes also</p>",
        "id": 186214897,
        "sender_full_name": "centril",
        "timestamp": 1579633127
    },
    {
        "content": "<p>I guess I'm curious which open bugs you think we should be emphasizing, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>?</p>",
        "id": 186214905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633131
    },
    {
        "content": "<p>and soundness holes</p>",
        "id": 186214907,
        "sender_full_name": "centril",
        "timestamp": 1579633132
    },
    {
        "content": "<p>That is, I think most of the cases we're concerned about at this point are either diagnostic failures or cases where we are more conservative than we would like. I do think we should work to fix them, but they don't strike me as things that automatically take priority over concerns around fostering a healthy ecosystem. In any case i'm not sure how much of an either-or proposition it is, though I think it may be at least somewhat. =)</p>",
        "id": 186215114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633227
    },
    {
        "content": "<p>Yeah, it's useful to draw a distinction around the overly conservative parts for sure</p>",
        "id": 186215227,
        "sender_full_name": "tmandry",
        "timestamp": 1579633289
    },
    {
        "content": "<p>I put those in basically the same category as diagnostics, because they make the feature harder to use</p>",
        "id": 186215249,
        "sender_full_name": "tmandry",
        "timestamp": 1579633305
    },
    {
        "content": "<p>\"Ergonomics\", to some extent</p>",
        "id": 186215323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633329
    },
    {
        "content": "<p>There are some non-diagnostic ICEs remaining, and hacks we added around e.g. <code>Self</code></p>",
        "id": 186215325,
        "sender_full_name": "centril",
        "timestamp": 1579633331
    },
    {
        "content": "<p>I don't remember, are those ICEs now?</p>",
        "id": 186215340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633345
    },
    {
        "content": "<p>( I thought they were controlled errors )</p>",
        "id": 186215360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633359
    },
    {
        "content": "<p>the issue tracker suggests there are non-diagnostic ICEs at least</p>",
        "id": 186215542,
        "sender_full_name": "centril",
        "timestamp": 1579633478
    },
    {
        "content": "<p>going on labels</p>",
        "id": 186215550,
        "sender_full_name": "centril",
        "timestamp": 1579633482
    },
    {
        "content": "<p>Oh, I see, I misinterpreted your comment as suggesting that the \"hacks we added\" and \"non-diagnostic ICEs\" were the same thing</p>",
        "id": 186215633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633548
    },
    {
        "content": "<p>I am pondering :) I do think it's important that we continue polish work -- I am bridling somewhat at the thought of putting further progress on Stream/Async* on hold -- but I'm wondering if I am being unwise.</p>",
        "id": 186215762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633624
    },
    {
        "content": "<p>I guess in general I think we should do <em>some</em> of both</p>",
        "id": 186215769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633631
    },
    {
        "content": "<p>to be clear, I'm mostly thinking of compiler/lang things here</p>",
        "id": 186215801,
        "sender_full_name": "centril",
        "timestamp": 1579633656
    },
    {
        "content": "<p>That is, continue making progress on things that the ecosystem needs to expand, while polishing what we have. But do we have the bandwidth to pull them both off? That is a key question</p>",
        "id": 186215804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633660
    },
    {
        "content": "<p>I would be inclined to take, however, modest steps</p>",
        "id": 186215811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633670
    },
    {
        "content": "<p>Which is why I've not mentioned things like generator syntax</p>",
        "id": 186215819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633679
    },
    {
        "content": "<p>like if there are pure libs improvements that improve ergonomics then why not do it in parallel</p>",
        "id": 186215870,
        "sender_full_name": "centril",
        "timestamp": 1579633696
    },
    {
        "content": "<p>And also why I suggested the 3 traits I did, as I think that a lot of the questions there are fairly well understood at this point</p>",
        "id": 186215880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633708
    },
    {
        "content": "<blockquote>\n<p>to be clear, I'm mostly thinking of compiler/lang things here</p>\n</blockquote>\n<p>I see</p>",
        "id": 186215883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633718
    },
    {
        "content": "<p>wel, indeed, those things are purely libs :)</p>",
        "id": 186215891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633726
    },
    {
        "content": "<p>not sure about bandwidth, to some extent I think we can parallelize (e.g. not all people are involved in both)</p>",
        "id": 186215910,
        "sender_full_name": "tmandry",
        "timestamp": 1579633747
    },
    {
        "content": "<p>(and, further, on my list has been to talk to the libs team more about those next steps, since I think I would want to do it in concert with them)</p>",
        "id": 186215914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633752
    },
    {
        "content": "<p>Although there might be libs things that want to wait on lang things, but well, the things they want to wait on will not be done tomorrow ^^</p>",
        "id": 186215918,
        "sender_full_name": "centril",
        "timestamp": 1579633760
    },
    {
        "content": "<p>I'm also inclined to do both btw</p>",
        "id": 186215934,
        "sender_full_name": "tmandry",
        "timestamp": 1579633774
    },
    {
        "content": "<p>but we should figure out what the bottlenecks are going to be</p>",
        "id": 186215944,
        "sender_full_name": "tmandry",
        "timestamp": 1579633785
    },
    {
        "content": "<p>I think we should be able to parallelize, yes... as I said, I was thinking of that when I drew up that list</p>",
        "id": 186215958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633797
    },
    {
        "content": "<p>(or try?)</p>",
        "id": 186215960,
        "sender_full_name": "tmandry",
        "timestamp": 1579633799
    },
    {
        "content": "<p>but it's also true that it's not entirely clear to me <em>who</em> will be doing what -- it feels like we have to grow the \"bench\" somewhat</p>",
        "id": 186216044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633839
    },
    {
        "content": "<p>yeah, I was trying to find a list of people on the wg, and failing :)</p>",
        "id": 186216108,
        "sender_full_name": "tmandry",
        "timestamp": 1579633884
    },
    {
        "content": "<blockquote>\n<p>And also why I suggested the 3 traits I did, as I think that a lot of the questions there are fairly well understood at this point</p>\n</blockquote>\n<p>Have we figured out what to do with the fact that <code>&amp;mut [u8]</code> provided an uninitialized slice is UB? (<a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a>)</p>",
        "id": 186216129,
        "sender_full_name": "centril",
        "timestamp": 1579633902
    },
    {
        "content": "<p>even though I know who's been involved lately</p>",
        "id": 186216146,
        "sender_full_name": "tmandry",
        "timestamp": 1579633913
    },
    {
        "content": "<blockquote>\n<p>Have we figured out what to do with the fact that <code>&amp;mut [u8]</code> provided an uninitialized slice is UB?</p>\n</blockquote>\n<p>depends on who you ask :) but I think we've worked out most of the tradeoffs, and I also think that the problem is one that is best solved in concert with the work on sync <code>Read</code> trait; <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> is working on a proposal, you can read about it in <a class=\"stream-topic\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs/topic/Read.20.2B.20uninit.20memory\">#t-libs &gt; Read + uninit memory</a> I think</p>",
        "id": 186216275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579633994
    },
    {
        "content": "<blockquote>\n<p>yeah, I was trying to find a list of people on the wg, and failing :)</p>\n</blockquote>\n<p>I've been trying to get more formal about these sorts of things, I'll ping you, let's fix up the teams repo</p>",
        "id": 186216298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634019
    },
    {
        "content": "<blockquote>\n<p>One question is what our \"goal\" should be there, to some extent</p>\n</blockquote>\n<p>I guess the ideal case would be a natural addendum to the Rust book</p>",
        "id": 186216423,
        "sender_full_name": "tmandry",
        "timestamp": 1579634089
    },
    {
        "content": "<p>Is the separate book strategy not working?</p>",
        "id": 186216706,
        "sender_full_name": "centril",
        "timestamp": 1579634270
    },
    {
        "content": "<p>not <em>actually</em> being added, but the standards of quality it would imply</p>",
        "id": 186216723,
        "sender_full_name": "tmandry",
        "timestamp": 1579634281
    },
    {
        "content": "<p>oh</p>",
        "id": 186216770,
        "sender_full_name": "centril",
        "timestamp": 1579634286
    },
    {
        "content": "<p>well</p>",
        "id": 186216779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634293
    },
    {
        "content": "<p>(sorry, unclear)</p>",
        "id": 186216784,
        "sender_full_name": "tmandry",
        "timestamp": 1579634295
    },
    {
        "content": "<p>but maybe that's just not feasible</p>",
        "id": 186216793,
        "sender_full_name": "tmandry",
        "timestamp": 1579634306
    },
    {
        "content": "<p>given limited resources :)</p>",
        "id": 186216802,
        "sender_full_name": "tmandry",
        "timestamp": 1579634313
    },
    {
        "content": "<p>I think it's a matter of time</p>",
        "id": 186216803,
        "sender_full_name": "centril",
        "timestamp": 1579634313
    },
    {
        "content": "<p>the book didn't get polished over night</p>",
        "id": 186216810,
        "sender_full_name": "centril",
        "timestamp": 1579634320
    },
    {
        "content": "<p>ps one other question is maintinance and strategy around futures-rs, I'm not really sure who the maintainers there are besides <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>, though I tknow there are folks</p>",
        "id": 186216831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634337
    },
    {
        "content": "<p>re: the book, I think the level of quality is not the concern so much as the \"table of contents\" -- like, what is the focus going to be, etc, but I think that's a process that is not going to get solved in this meeting at this second.</p>",
        "id": 186216992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634417
    },
    {
        "content": "<p>still, I think it should go on a list of \"things to work out\"</p>",
        "id": 186217024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634437
    },
    {
        "content": "<p>I think also a good question is \"what is the role of doc from frameworks like tokio, async-std, bastion etc\" -- i.e., maybe our goal should be to help people get started, and direct to other frameworks for the detailed questions that go beyond libstd</p>",
        "id": 186217105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634500
    },
    {
        "content": "<p>ah okay, I was thinking more of polish / making it more accessible, and adding any obvious missing pieces</p>",
        "id": 186217107,
        "sender_full_name": "tmandry",
        "timestamp": 1579634501
    },
    {
        "content": "<p>but I do think the existing material is very good -- i.e., covering how the model works etc</p>",
        "id": 186217208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634551
    },
    {
        "content": "<blockquote>\n<p>ah okay, I was thinking more of polish / making it more accessible, and adding any obvious missing pieces</p>\n</blockquote>\n<p>I'm not sure if this is different than what I said :) maybe I'm just reflecting my own uncertainty a bit</p>",
        "id": 186217273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634610
    },
    {
        "content": "<p>I like the idea of offloading non-std stuff to frameworks :)</p>",
        "id": 186217276,
        "sender_full_name": "tmandry",
        "timestamp": 1579634611
    },
    {
        "content": "<p>one other thing btw that was not on my list but which may fall in the \"small, actionable improvements\" is things like extending libstd to include an async mutex and other small utilities</p>",
        "id": 186217410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634686
    },
    {
        "content": "<p>these are all libs-oriented changes, though</p>",
        "id": 186217432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579634703
    },
    {
        "content": "<p>I may have missed this and sorry for being late to this convo, but is there mention of <code>type_alias_impl_trait</code> as being grouped in a thing that might want to be prioritized along with GAT/wg-traits stuff? I know this would be incredibly useful for tower.</p>",
        "id": 186228621,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1579641465
    },
    {
        "content": "<p>I think <code>type_alias_impl_trait</code> is an important feature to work on, but it's also full of bugs. It will take much work to fix it, but <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> has been doing some of that</p>",
        "id": 186232821,
        "sender_full_name": "centril",
        "timestamp": 1579644112
    },
    {
        "content": "<p>I think there's still some design work that needs to be done as well. The current 'must be a fully generic use in defining scope' limitation isn't great</p>",
        "id": 186233092,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579644301
    },
    {
        "content": "<p>I'm not sure what the best solution is, though</p>",
        "id": 186233114,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579644316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> that's <del>only</del> about allowing more code?</p>",
        "id": 186233147,
        "sender_full_name": "centril",
        "timestamp": 1579644337
    },
    {
        "content": "<p>yeah - I meant in terms of it being ready for stabilization</p>",
        "id": 186233224,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579644373
    }
]