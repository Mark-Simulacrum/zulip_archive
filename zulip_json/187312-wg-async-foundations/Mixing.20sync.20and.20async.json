[
    {
        "content": "<p>I'm realizing that I don't think the sketch of APIs I've painted really covers mixing sync and async very well. I imagine scopes may help here though, even though it doesn't eliminate one of the key problems. In other words, today, when you wind up with an async-sync-async sandwich, you have two problems:</p>\n<ol>\n<li>You have to go and insert a <code>spawn_blocking</code> call <em>before</em> the sync code, which may not be in your control (iow, typically you hit this problem you are adding the 2nd async call, but to fix it, you have to modify the 1st one).</li>\n<li>Sometimes you can't insert <code>spawn_blocking</code>, because the sync code may need references or other things, and <code>spawn_blocking</code> requires <code>'static</code>.</li>\n</ol>",
        "id": 245506021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866954
    },
    {
        "content": "<p>Scoped APIs help with the 2nd one</p>",
        "id": 245506043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866961
    },
    {
        "content": "<p>But not the 1st</p>",
        "id": 245506050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866963
    },
    {
        "content": "<p>Tokio's block-in-place style API helps with the 1st, but comes with various gotchas (<span class=\"user-mention\" data-user-id=\"243965\">@Sean McArthur</span> put some energy into thinking about this...)</p>",
        "id": 245506104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866982
    },
    {
        "content": "<p>I'm not sure we will find a fix for that?</p>",
        "id": 245506141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625866996
    },
    {
        "content": "<p>Apart from the crazy stack editing tricks that will probably not work :)</p>",
        "id": 245506187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625867015
    },
    {
        "content": "<p>I'm not following point 1</p>",
        "id": 245984283,
        "sender_full_name": "Carl Lerche",
        "timestamp": 1626280227
    },
    {
        "content": "<p>Me neither. It seems like we can have a <code>spawn_blocking</code> call which returns an <code>Async</code>, which makes sure the scope around it waits for it to complete. Since the blocking method runs to completion anyway, that isn't an unreasonable thing to do?</p>",
        "id": 245984617,
        "sender_full_name": "Matthias247",
        "timestamp": 1626280372
    },
    {
        "content": "<p>I would rather forget about <code>block_in_place</code>, since it purely works with a multithreaded work-stealing runtime and not other async environments, like the usually more common N tasks on a single thread environment</p>",
        "id": 245984718,
        "sender_full_name": "Matthias247",
        "timestamp": 1626280425
    },
    {
        "content": "<p>Let me make it concrete</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fn_a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn_b</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fn_b</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn_c</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fn_c</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If you have this setup, how can you resolve <code>error</code>? In particular, how can you resolve <code>error</code> if <code>fn_a</code> cannot be modified (e.g., it's in a library you are using). The usual solutions don't work:</p>\n<ul>\n<li>Make <code>fn_b</code> async -- that requires modifying <code>fn_a</code> to await</li>\n<li>Make <code>fn_a</code> use <code>spawn_blocking</code>, and then make <code>fn_b</code> use <code>tokio::block_on</code> or something like that --- again requires modifying <code>fn_a</code></li>\n</ul>\n<p>As far as I know, you're just kind of stuck.</p>",
        "id": 246249614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626454552
    },
    {
        "content": "<p>Well if the library with <code>fn_a</code> wants a synchronous function to run, then you can just <code>block_on</code> inside of <code>fn_b</code></p>",
        "id": 246251275,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626455322
    },
    {
        "content": "<p>you can't, though</p>",
        "id": 246255484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626457244
    },
    {
        "content": "<p>bad things happen :)</p>",
        "id": 246255510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626457254
    },
    {
        "content": "<p>so this is about breaking API changes if you are the owner of <code>fn_b</code>?</p>",
        "id": 246256604,
        "sender_full_name": "Matthias247",
        "timestamp": 1626457764
    },
    {
        "content": "<p>The problem definitely comes up - but I don't see how any of the of the proposals we discussed so far would influence that</p>",
        "id": 246256709,
        "sender_full_name": "Matthias247",
        "timestamp": 1626457808
    },
    {
        "content": "<p>I think Niko's async-as-monomorphization-mode idea might :)</p>",
        "id": 246256844,
        "sender_full_name": "tmandry",
        "timestamp": 1626457883
    },
    {
        "content": "<p>but there are a lot of problems to resolve with that</p>",
        "id": 246256867,
        "sender_full_name": "tmandry",
        "timestamp": 1626457893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204219\">Matthias247</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Mixing.20sync.20and.20async/near/246256709\">said</a>:</p>\n<blockquote>\n<p>The problem definitely comes up - but I don't see how any of the of the proposals we discussed so far would influence that</p>\n</blockquote>\n<p>this is my point</p>",
        "id": 246257269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626458090
    },
    {
        "content": "<p>they don't :)</p>",
        "id": 246257280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626458096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Mixing.20sync.20and.20async/near/245506021\">said</a>:</p>\n<blockquote>\n<p>I'm realizing that I don't think the sketch of APIs I've painted really covers mixing sync and async very well. </p>\n</blockquote>",
        "id": 246257298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626458106
    },
    {
        "content": "<p>I'm just pointing that out</p>",
        "id": 246257313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626458111
    },
    {
        "content": "<p>I think the only solutions which do that at the moment are ones which are using stackful coroutines, or ones which are \"programming like that\" (e.g. Java Project Loom which has lightweight threads that program like stackful coroutines but are still actually heap allocated continuations).</p>",
        "id": 246264126,
        "sender_full_name": "Matthias247",
        "timestamp": 1626461634
    },
    {
        "content": "<p>I'm not sure if you want to have no indications of async at all - because it fully hides the fact whether you can or can not block inside a method. It works for Java because they schedule everything on a multithreaded work-stealing scheduler - so even if you are blocking since you don't know you are in an async context its not end of the world. With Rust where some people might prefer single-threaded schedulers that might not be the case?</p>",
        "id": 246264470,
        "sender_full_name": "Matthias247",
        "timestamp": 1626461829
    },
    {
        "content": "<blockquote>\n<p>It works for Java because they schedule everything on a multithreaded work-stealing scheduler</p>\n</blockquote>\n<p>Having lower level control is one of the features that makes me prefer Rust's futures system- but it does bring to mind whether or not \"can safely block\" should be represented at the type system level somehow.</p>",
        "id": 246269431,
        "sender_full_name": "Zoey",
        "timestamp": 1626464555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Comments on <a href=\"https://nikomatsakis.github.io/wg-async-foundations/vision/shiny_future/users_manual.html#bridging-the-sync-and-async-worlds\">https://nikomatsakis.github.io/wg-async-foundations/vision/shiny_future/users_manual.html#bridging-the-sync-and-async-worlds</a> since it also belong to the topic of sync and async</p>\n<div class=\"codehilite\"><pre><span></span><code>std::async::blocking(|| ...).await;\n</code></pre></div>\n<blockquote>\n<p>Note that blocking is an async function. Interally, it is built on the scope method spawn_blocking, which spawns out a task into an inner scope (deliv_scope_api):</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>async fn blocking&lt;R&gt;(f: impl FnOnce() -&gt; R) -&gt; R {\n    scope(|s| s.spawn_blocking(f).await).await\n}\n</code></pre></div>\n<p>What would we gain from having another <code>scope</code> here?  The method should certainly be bound to a scope, but why wouldn't it be the \"current scope\" but a \"child scope\". Is it so that <code>Spawn</code> has to be ony implemented by <code>Scope</code> and not <code>Context</code>? But even in that case - <code>blocking</code> would have access to the current <code>Scope</code> via <code>Context</code> - otherwise it couldn't create a child scope.</p>",
        "id": 246334817,
        "sender_full_name": "Matthias247",
        "timestamp": 1626542915
    },
    {
        "content": "<p>I think might fit into this section and what we should make a goal is that we are able to propagate cancellation around an arbitary amount of sync-&gt;async-&gt;etc contexts. E.g. I would like to see being able to do the following: </p>\n<div class=\"codehilite\"><pre><span></span><code>async fn happy_mix_and_match() {\n    std::async::blocking(|| {\n        crossbeam::scope(|s| {\n            s.spawn(|_| {\n                tokio::Runtime::builder().build().block_on(async {\n                    std::async_thread::scope(async |s| {\n                        for 0 .. 100 {\n                            s.spawn(async {\n                                std::task::sleep(Duration::from_years(123456789)).await;\n                            });\n                        }\n                    });\n                });\n            });\n        }).unwrap()\n    }).await\n}\n</code></pre></div>\n<p>Where cancelling <code>do_something</code> would get the cancellation signal up to the innermost timer, and thereby allows the outer async scope to exit even while it is waiting on a synchronous subtask.</p>",
        "id": 246335044,
        "sender_full_name": "Matthias247",
        "timestamp": 1626543328
    }
]