[
    {
        "content": "<blockquote>\n<p>One thing we identified is that we may want #[inline] to be an error (though I see in the doc that @centril maybe doesn't agree). In short because it's not really clear what it should mean, and right now it doesn't do much.</p>\n</blockquote>\n<p>I do disagree; <code>#[inline]</code> is a hint and it 1) doesn't have to do anything at all, 2) can have its meaning changed whenever we want</p>",
        "id": 174843752,
        "sender_full_name": "centril",
        "timestamp": 1567559893
    },
    {
        "content": "<p>but I think we should not introduce contextual static semantics for it</p>",
        "id": 174843761,
        "sender_full_name": "centril",
        "timestamp": 1567559918
    },
    {
        "content": "<p>I agree that it's just a hint. The main reason to make it an error would be to eliminate bug reports and avoid confusion, since it has no real role in this position. I don't really care strongly enough to argue about it though. We could just close the bug as \"wontfix\"</p>",
        "id": 174914422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567625228
    },
    {
        "content": "<p>That said, the definition of the <code>#[inline]</code> attribute presumably already has some rules about what sorts of items it can be applied to</p>",
        "id": 174914461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567625263
    },
    {
        "content": "<p>It doesn't seem unreasonable for those rules to exclude <code>async fn</code>, just as they exclude (say) structs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6428fab64bfb8c45411c5acf4418a5c3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6428fab64bfb8c45411c5acf4418a5c3\">gives an error</a></p>",
        "id": 174914555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567625312
    },
    {
        "content": "<p>I think <code>struct</code> and <code>async fn</code> are dissimilar. The error message says it cannot be applied to a function, but an <code>async fn</code> is a function. Indeed, with the desugaring based explanation of <code>async fn</code>, it does seem reasonable for <code>#[inline]</code> to essentially transfer to the desugared function. Whether it then has an effect or not is merely a quality-of-implementation issue.</p>\n<p>I would be fine with a lint or something if this becomes a frequent source of reports but I am not convinced it will be.</p>",
        "id": 174941281,
        "sender_full_name": "centril",
        "timestamp": 1567653383
    },
    {
        "content": "<p>In some sense an async fn is just a struct declaration though? Like, that's what happens when it's called</p>",
        "id": 174979840,
        "sender_full_name": "simulacrum",
        "timestamp": 1567694282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  that's the ~output of calling the <code>async fn</code> but it's still a function to be called</p>",
        "id": 174997764,
        "sender_full_name": "centril",
        "timestamp": 1567705314
    },
    {
        "content": "<p><code>async fn</code>s happen to be pure and all</p>",
        "id": 174997825,
        "sender_full_name": "centril",
        "timestamp": 1567705337
    },
    {
        "content": "<p>hm, I guess that's true. Presumably then <code>#[inline]</code> will work similarly to inlining a constructor function</p>",
        "id": 174997833,
        "sender_full_name": "simulacrum",
        "timestamp": 1567705344
    },
    {
        "content": "<p>yea I think that's a good way to think of it</p>",
        "id": 174997886,
        "sender_full_name": "centril",
        "timestamp": 1567705374
    },
    {
        "content": "<p>(there is, I suppose, some parallel with asking for <code>#[inline]</code> on a tuple struct for which we generate <code>fn Type(...)</code>)</p>",
        "id": 174997887,
        "sender_full_name": "simulacrum",
        "timestamp": 1567705375
    }
]