[
    {
        "content": "<p>Spent some time investigating this. First off, with debug-assertions enabled, it ICEs on nightly. Secondly, for some strange reason RUST_LOG isn't printing all the <code>debug!</code> from certain modules for me, which is super annoying, but I've been changing them to <code>eprintln!</code> as needed.</p>",
        "id": 160332442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552084355
    },
    {
        "content": "<p>In any case, I didn't  really figure out what is going on here. =) I'll try to dig more later though, felt like I was <em>starting</em> to see it.</p>",
        "id": 160332460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552084375
    },
    {
        "content": "<p>I've been doing more investigation here. The immediate pathway that leads to the error is that we are proving the \"well-formed\" conditions for a generator witness <code>for&lt;'r&gt; {Store&lt;std::boxed::Box&lt;(dyn Trait + 'r)&gt;&gt;, ()}</code></p>",
        "id": 160517487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552337958
    },
    {
        "content": "<p>This WF code is kind of strange. The way it works is to ignore binders like <code>for</code> and descend, but only to surface constraints that don't involve bound regions.</p>",
        "id": 160517587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338056
    },
    {
        "content": "<p>Here, we correctly find that <code>trait Trait: 'static</code>, which implies that <code>'r: 'static</code> must hold</p>",
        "id": 160517613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338090
    },
    {
        "content": "<p>However, we wind up ICEing (or, if debug-assertions are disabled, getting the error) because the <code>'r</code> is \"universally quantified\"</p>",
        "id": 160517676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338125
    },
    {
        "content": "<p>There are some things that confuse me:</p>",
        "id": 160517689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338143
    },
    {
        "content": "<ul>\n<li>Presumably we can get a similar ICE involving a <code>fn</code> type</li>\n</ul>",
        "id": 160517699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338156
    },
    {
        "content": "<ul>\n<li>But also, for a case where we declared <code>trait Trait: 'static</code>, we ought to infer the region bound to be <code>'static</code></li>\n</ul>",
        "id": 160517709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338173
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Presumably we can get a similar ICE involving a <code>fn</code> type</li>\n</ul>\n</blockquote>\n<p>For now I'm going to see if I can reproduce this</p>",
        "id": 160517717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338183
    },
    {
        "content": "<p>Ah, hmm, maybe the generators wind up erasing all regions within or something, and that is why.</p>",
        "id": 160517804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338244
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/rust-lang/rust/blob/e68bf8ae15ee6c052d0bcc9252386c5c5ee86de2/src/librustc_typeck/check/generator_interior.rs#L116-L119\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e68bf8ae15ee6c052d0bcc9252386c5c5ee86de2/src/librustc_typeck/check/generator_interior.rs#L116-L119\">that is what happens</a></p>",
        "id": 160517853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338314
    },
    {
        "content": "<p>Welp, that suggests a pretty easy fix. I guess it's no more broke than generators today. =)</p>",
        "id": 160518455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338832
    },
    {
        "content": "<p>(Not implying generators are broke; just that if this fix is wrong, I think it would indicate deeper problems)</p>",
        "id": 160518520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338855
    },
    {
        "content": "<p>anyway the real problem is how the WF code works but never mind</p>",
        "id": 160518539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552338877
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Presumably we can get a similar ICE involving a <code>fn</code> type</li>\n</ul>\n</blockquote>\n<p>yep, found one</p>",
        "id": 160518757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552339051
    },
    {
        "content": "<blockquote>\n<blockquote>\n<ul>\n<li>Presumably we can get a similar ICE involving a <code>fn</code> type</li>\n</ul>\n</blockquote>\n<p>yep, found one</p>\n</blockquote>\n<p>Instead of a generator, or instead of a trait object?</p>",
        "id": 160518902,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1552339137
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53548#issuecomment-471735457\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53548#issuecomment-471735457\">left a write-up here</a>, including the ICE example</p>",
        "id": 160519231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552339415
    },
    {
        "content": "<p>gotta go home now though</p>",
        "id": 160519353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552339511
    },
    {
        "content": "<p>all I can say is I can't way to remove this WF code in favor of something universe-based at some point</p>",
        "id": 160519461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552339598
    }
]