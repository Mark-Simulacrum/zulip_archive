[
    {
        "content": "<p>Futures can sometimes end up being unnecessarily <code>!Send</code> due to storing a reference to a <code>!Sync</code> type across a yield point which can make things a bit awkward. However, the internal state of a generated future is entirely opaque, and can only be interacted with via <code>poll</code> which requires a mutable reference. So it seems like we could potentially have the compiler manually apply <code>Sync</code>/<code>Send</code> implementations in these cases. That would mean we couldn't ever add e.g. <code>Debug</code> impls that show the fields, but that doesn't seem like a thing we'd do anyway.</p>",
        "id": 221358731,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609519427
    },
    {
        "content": "<p>Though I guess the reference-to-!Sync is probably not something the compiler would be able to figure out</p>",
        "id": 221358786,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609519492
    },
    {
        "content": "<p>It could minimally have an unconditional <code>Sync</code> impl on the future itself though</p>",
        "id": 221358793,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609519517
    },
    {
        "content": "<p>Making the futures <code>Sync</code> seems like an option</p>",
        "id": 221375788,
        "sender_full_name": "tmandry",
        "timestamp": 1609546122
    },
    {
        "content": "<p>I don't see how we could make them <code>Send</code></p>",
        "id": 221375792,
        "sender_full_name": "tmandry",
        "timestamp": 1609546129
    },
    {
        "content": "<p>I wonder if the sync_wrapper crate is relevant here? <a href=\"https://docs.rs/sync_wrapper/0.1.0/sync_wrapper/struct.SyncWrapper.html\">https://docs.rs/sync_wrapper/0.1.0/sync_wrapper/struct.SyncWrapper.html</a></p>\n<p>I also just ran across <a href=\"https://docs.rs/send_wrapper/0.5.0/send_wrapper/\">https://docs.rs/send_wrapper/0.5.0/send_wrapper/</a>, but haven't looked into it yet.<br>\nEdit: it just does a runtime check to ensure the value's only accessed on the original thread.</p>",
        "id": 221415899,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1609619249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Can.20async.20.7B.7D.20futures.20be.20Sync.2FSend.20more.20often.3F/near/221375792\">said</a>:</p>\n<blockquote>\n<p>I don't see how we could make them <code>Send</code></p>\n</blockquote>\n<p>I think the intuition behind it being <code>Send</code> is that the <code>!Sync</code> reference refers to data owned by a higher-up future in the future chain. i.e, it would be safe to move the higher-up future across threads, but moving just the lower future wouldn't be safe.</p>",
        "id": 221416263,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1609619808
    },
    {
        "content": "<p>I don't follow how <code>Sync</code> even applies to Futures (aparent from the unfortunate Hyper <code>Stream</code> which requires <code>Sync</code> for an unkown reason). When would one ever try to <code>poll </code> a <code>Future</code> from more than 1 thread?</p>",
        "id": 221417131,
        "sender_full_name": "Matthias247",
        "timestamp": 1609621276
    },
    {
        "content": "<p>Even if a future is <code>Sync</code>, it can't be polled from multiple threads because polling requires <code>&amp;mut</code> (so there can only be one reference to the future at the time of polling).</p>\n<p>I'm not aware of a concrete reason for a future to want to be <code>Sync</code>, but perhaps it would be useful for load balancing a multi-threaded executor.</p>",
        "id": 221417416,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1609621673
    },
    {
        "content": "<p>The main issue is if the <em>internal</em> data of a future is <code>Sync</code> or not. If the future holds a reference to a <code>!Sync</code> type then the future becomes <code>!Send</code>.</p>",
        "id": 221417471,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1609621736
    },
    {
        "content": "<p>yeah, to be clear, I don't think making them <code>Sync</code> would be very useful</p>",
        "id": 221480745,
        "sender_full_name": "tmandry",
        "timestamp": 1609722260
    },
    {
        "content": "<p>though some kind of work-stealing executor might want that, in fact</p>",
        "id": 221480861,
        "sender_full_name": "tmandry",
        "timestamp": 1609722485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218805\">Mark Drobnak</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Can.20async.20.7B.7D.20futures.20be.20Sync.2FSend.20more.20often.3F/near/221416263\">said</a>:</p>\n<blockquote>\n<p>I think the intuition behind it being <code>Send</code> is that the <code>!Sync</code> reference refers to data owned by a higher-up future in the future chain. i.e, it would be safe to move the higher-up future across threads, but moving just the lower future wouldn't be safe.</p>\n</blockquote>\n<p>I see now, thanks</p>",
        "id": 221481001,
        "sender_full_name": "tmandry",
        "timestamp": 1609722759
    },
    {
        "content": "<p>Yeah I was really hoping for more Send impls but it seems quite hard to actually do that without some pretty detailed analysis of how references are being created</p>",
        "id": 221481022,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609722811
    },
    {
        "content": "<p>are the references you see from futures higher up (futures polling you), or futures you poll, or both?</p>",
        "id": 221481073,
        "sender_full_name": "tmandry",
        "timestamp": 1609722850
    },
    {
        "content": "<p>it does seem like a difficult analysis, though I'm wondering if we can leverage <code>Pin</code> in some way, maybe</p>",
        "id": 221481092,
        "sender_full_name": "tmandry",
        "timestamp": 1609722908
    },
    {
        "content": "<p>Not sure - this coming off of <a href=\"https://github.com/tokio-rs/tokio/issues/2545\">https://github.com/tokio-rs/tokio/issues/2545</a></p>",
        "id": 221481158,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609722997
    },
    {
        "content": "<blockquote>\n<p>though some kind of work-stealing executor might want that, in fact</p>\n</blockquote>\n<p>No. It needs them to be <code>Send</code> - not <code>Sync</code>. Even if <code>Future</code>s get stolen, they will just be polled from one thread at a time</p>",
        "id": 221481525,
        "sender_full_name": "Matthias247",
        "timestamp": 1609723580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Can.20async.20.7B.7D.20futures.20be.20Sync.2FSend.20more.20often.3F/near/221481158\">said</a>:</p>\n<blockquote>\n<p>Not sure - this coming off of <a href=\"https://github.com/tokio-rs/tokio/issues/2545\">https://github.com/tokio-rs/tokio/issues/2545</a></p>\n</blockquote>\n<p>Isn't that more of a tokio issue than a language issue? tokio could offer a feature for spawning tasks which are guaranteed not be be migrated. It does with <code>LocalSet</code>, but that's not super convenient to use since it doesn't pin but create a fully independent runtime. I proposed having a way to pin resources on the existing runtime (e..g through task groups or configs), but so far this didn't see too much interest and support</p>",
        "id": 221481686,
        "sender_full_name": "Matthias247",
        "timestamp": 1609723807
    },
    {
        "content": "<blockquote>\n<p>No. It needs them to be <code>Send</code> - not <code>Sync</code>. Even if <code>Future</code>s get stolen, they will just be polled from one thread at a time</p>\n</blockquote>\n<p>In the scenario I'm imagining the tasks themselves won't move, since they're already pinned. If each thread is scoped to the executor lifetime it could \"send\" a mutable reference to a task across threads, which only requires <code>Sync</code>.</p>",
        "id": 221495611,
        "sender_full_name": "tmandry",
        "timestamp": 1609745204
    },
    {
        "content": "<p>even though no synchronization is really happening on the task itself</p>",
        "id": 221495685,
        "sender_full_name": "tmandry",
        "timestamp": 1609745288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204219\">Matthias247</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Can.20async.20.7B.7D.20futures.20be.20Sync.2FSend.20more.20often.3F/near/221481686\">said</a>:</p>\n<blockquote>\n<p>I proposed having a way to pin resources on the existing runtime (e..g through task groups or configs), but so far this didn't see too much interest and support</p>\n</blockquote>\n<p>I'm also interested in having  the core runtime workers support a local task queue, but I think <a href=\"https://github.com/tokio-rs/tokio/issues/2545#issuecomment-753450748\">Darksonn's comment</a> about the increased scope of <code>block_in_place</code>'s footgun is the main reason the tokio maintainers don't want to use that approach.</p>",
        "id": 221547578,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1609778638
    }
]