[
    {
        "content": "<p>The original async/await RFC specifies await (well, the macro variant) to go through a IntoFuture trait (<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2394-async_await.md#the-expansion-of-await\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2394-async_await.md#the-expansion-of-await\">see RFC</a>).</p>\n<p>Is there a reason why this wasn't implemented, or is this an oversight?</p>\n<p>The context is <a href=\"https://blog.yoshuawuyts.com/surf/\" target=\"_blank\" title=\"https://blog.yoshuawuyts.com/surf/\">a blog post</a> which gave me the idea for an IntoFuture trait, but someone pointed out that it actually was already in the RFC.</p>\n<p>It's very convenient functionality. </p>\n<p>This seems like something that could also be added retroactively if need be, but I though I'd ask here, with the beta cutoff looming.</p>",
        "id": 176270810,
        "sender_full_name": "theduke",
        "timestamp": 1569082475
    },
    {
        "content": "<p>It was removed at some point, but before I got involved; I believe <span class=\"user-mention\" data-user-id=\"203289\">@boats</span> or <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> could expand.</p>",
        "id": 176363697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569242029
    },
    {
        "content": "<p>We found in futures 0.2 that it was not needed. In 0.1, when future incorporated the error into its type, Result implemented <code>IntoFuture</code>, but in 0.2, there was nothing that did other than futures</p>",
        "id": 176412518,
        "sender_full_name": "boats",
        "timestamp": 1569275061
    },
    {
        "content": "<p>(nit: futures and tuples)</p>",
        "id": 176412814,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1569275302
    },
    {
        "content": "<p>but yeah, <span class=\"user-mention\" data-user-id=\"203289\">@boats</span>'s summary is correct</p>",
        "id": 176412841,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1569275319
    },
    {
        "content": "<blockquote>\n<p>there was nothing that did other than futures</p>\n</blockquote>\n<p>The blog post outlines the use case where I also personally would have wanted this numerous times: being able to <code>.await</code> on a builder type structs, like http/db request builders.</p>\n<p>Without this it requires either always calling a finalizer method like <code>.send()</code>, or keeping an <code>Option&lt;MyFuture&gt;</code> on the builder and checking it on every poll. </p>\n<p><code>IntoFuture</code> would be a pretty big ergonomics win.</p>",
        "id": 176437936,
        "sender_full_name": "theduke",
        "timestamp": 1569308631
    }
]