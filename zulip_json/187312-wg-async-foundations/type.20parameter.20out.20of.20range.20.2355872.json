[
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 168064482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445626
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 168064521,
        "sender_full_name": "davidtwco",
        "timestamp": 1560445653
    },
    {
        "content": "<p>let's try zulip</p>",
        "id": 168064555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445678
    },
    {
        "content": "<p>better logs..plus I have a lot of calls today and that always wears me out</p>",
        "id": 168064609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445689
    },
    {
        "content": "<p>right...so...</p>",
        "id": 168064641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445710
    },
    {
        "content": "<p>it occurs to me I'm not 100% sure how much you understand about the type parameters etc</p>",
        "id": 168064652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445721
    },
    {
        "content": "<p>i.e., you're familiar with the general system of \"substs\" in the compiler?</p>",
        "id": 168064663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445732
    },
    {
        "content": "<p>I think so yeah.</p>",
        "id": 168064681,
        "sender_full_name": "davidtwco",
        "timestamp": 1560445743
    },
    {
        "content": "<p>ok. So the general idea (just to review real briefly) is that when you have a type parameter type like <code>X</code>, it includes an index into the parameters in scope</p>",
        "id": 168064732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445787
    },
    {
        "content": "<p>When we do a substitution, if you have e.g., <code>struct Foo&lt;T&gt; { t: T }</code> and you access the field <code>t</code>, it's type is a <code>Param(0)</code> (say) -- and then we have the substs array (maybe <code>[u32]</code>)</p>",
        "id": 168064821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445818
    },
    {
        "content": "<p>and we index into that array with the <code>0</code> offset to convert <code>T</code> to <code>u32</code> (presuming <code>Foo&lt;u32&gt;</code>)</p>",
        "id": 168064837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445832
    },
    {
        "content": "<p>(all familiar?)</p>",
        "id": 168064844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445837
    },
    {
        "content": "<p>so the reason I'm worried is that an out of range error here <em>usually</em> means we failed to substitute somewhere</p>",
        "id": 168064856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445848
    },
    {
        "content": "<p>and hence a <code>TyParam</code> with an index meant for one set of generics</p>",
        "id": 168064869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445857
    },
    {
        "content": "<p>leaks into a scope with a different set</p>",
        "id": 168064872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445861
    },
    {
        "content": "<p>(though it could have other causes)</p>",
        "id": 168064887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445866
    },
    {
        "content": "<blockquote>\n<p>leaks into a scope with a different set</p>\n</blockquote>\n<p>but if such a leak happens...badness</p>",
        "id": 168064897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445876
    },
    {
        "content": "<p>anyway I guess the first step is to get a backtrace for the ICE</p>",
        "id": 168064987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445930
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/4f0bf9ff3aad9df25c272909492e6982\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/4f0bf9ff3aad9df25c272909492e6982\">https://gist.github.com/davidtwco/4f0bf9ff3aad9df25c272909492e6982</a></p>",
        "id": 168065020,
        "sender_full_name": "davidtwco",
        "timestamp": 1560445963
    },
    {
        "content": "<p>although the minimized form that was given doesn't build for me</p>",
        "id": 168065023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445964
    },
    {
        "content": "<p>hmm this error is very confusing</p>",
        "id": 168065055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445985
    },
    {
        "content": "<p>oh I forgot the edition</p>",
        "id": 168065059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560445987
    },
    {
        "content": "<p>Though, my build for this is maybe a week old at this point, so the actual output may have changed.</p>",
        "id": 168065074,
        "sender_full_name": "davidtwco",
        "timestamp": 1560446000
    },
    {
        "content": "<p>right so I'm skimming past tall the type folder stuff</p>",
        "id": 168065089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446020
    },
    {
        "content": "<p>and I guess the real \"source\" of the error is here</p>\n<div class=\"codehilite\"><pre><span></span>rustc_typeck::collect::find_existential_constraints::ConstraintLocator::check\n</pre></div>",
        "id": 168065114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446042
    },
    {
        "content": "<p>I landed on <code>typeck/collect.rs:1549</code> as being the place to start.</p>",
        "id": 168065152,
        "sender_full_name": "davidtwco",
        "timestamp": 1560446054
    },
    {
        "content": "<p>seems right</p>",
        "id": 168065161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446063
    },
    {
        "content": "<p>so what happens here --</p>",
        "id": 168065189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446087
    },
    {
        "content": "<p>this is the code for an <code>existential type</code> (opaque type)</p>",
        "id": 168065195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446094
    },
    {
        "content": "<p>the idea is that we have some hidden type whose value has been inferred</p>",
        "id": 168065217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446106
    },
    {
        "content": "<p>that is the <code>concrete_type</code> variable</p>",
        "id": 168065220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446110
    },
    {
        "content": "<p>and we are inferring its result</p>",
        "id": 168065223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446119
    },
    {
        "content": "<p>looking more closely at this, I am guessing this is a bug in the handling of <code>existential type</code> as an associated type definition in an impl</p>",
        "id": 168065232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446133
    },
    {
        "content": "<p>and <em>probably</em> not that specific to impl trait</p>",
        "id": 168065234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446138
    },
    {
        "content": "<p>but I guess let's wait a bit before we know if that's true</p>",
        "id": 168065247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446153
    },
    {
        "content": "<p>I believe the <code>concrete_type</code> was <code>impl std::future::Future</code> when I was looking at the logs (but rebuilding so can't check exactly).</p>",
        "id": 168065253,
        "sender_full_name": "davidtwco",
        "timestamp": 1560446158
    },
    {
        "content": "<p>And the <code>substs</code> just <code>[S]</code>.</p>",
        "id": 168065305,
        "sender_full_name": "davidtwco",
        "timestamp": 1560446166
    },
    {
        "content": "<p>ok, that's interesting</p>",
        "id": 168065309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446185
    },
    {
        "content": "<p>this version of the example also ICEs in a very similar way</p>",
        "id": 168065313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446190
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">E</span>: <span class=\"nb\">Copy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">E</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">E</span>: <span class=\"nb\">Copy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">E</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168065316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446194
    },
    {
        "content": "<p>it does not use any async :)</p>",
        "id": 168065323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446199
    },
    {
        "content": "<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc/ty/subst.rs:570: type parameter `T/#1` (T/1) out of range when substituting (root type=Some([closure@/home/nmatsakis/tmp/issue-55872.rs:15:9: 15:14])) substs=[S]\n</pre></div>",
        "id": 168065365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446227
    },
    {
        "content": "<p>but let's dig a <em>bit</em> more</p>",
        "id": 168065473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446291
    },
    {
        "content": "<p>let's use this version</p>",
        "id": 168065474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446293
    },
    {
        "content": "<p>less variables</p>",
        "id": 168065477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446294
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> concrete_type: [closure@/home/nmatsakis/tmp/issue-55872.rs:15:9: 15:14], substs: [S]\n</pre></div>",
        "id": 168065528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446350
    },
    {
        "content": "<p>(from debug logs)</p>",
        "id": 168065531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446353
    },
    {
        "content": "<p>rerunnign with <code>-Zverbose</code></p>",
        "id": 168065547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446370
    },
    {
        "content": "<p>since closure types aren't that useful otherwise</p>",
        "id": 168065552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446377
    },
    {
        "content": "<p>gives</p>\n<div class=\"codehilite\"><pre><span></span>{ concrete_type:\n    [closure@/home/nmatsakis/tmp/issue-55872.rs:15:9: 15:14\n        closure_kind_ty=i8\n        closure_sig_ty=extern &quot;rust-call&quot; fn(())\n    ],\nsubsts: [S] }\n</pre></div>",
        "id": 168065572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446395
    },
    {
        "content": "<p>ok so</p>",
        "id": 168065682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446457
    },
    {
        "content": "<p>I think I see what's going on here</p>",
        "id": 168065685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446459
    },
    {
        "content": "<p>though it's not very evident from the debug output:)</p>",
        "id": 168065716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446475
    },
    {
        "content": "<p>first thing: closure types are implicitly parameterized by all of the generic types that are in scope</p>",
        "id": 168065734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446493
    },
    {
        "content": "<p>(same with async blocks)</p>",
        "id": 168065742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446500
    },
    {
        "content": "<p>this is because they may (e.g.) do things like <code>T::foo()</code></p>",
        "id": 168065749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446509
    },
    {
        "content": "<blockquote>\n<p>though it's not very evident from the debug output:)</p>\n</blockquote>\n<p>this btw sucks and I wish we had time to make it better :)</p>",
        "id": 168065762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446521
    },
    {
        "content": "<p>the full set of closure substitutions therefore will be something like this:</p>",
        "id": 168065819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[\n    S, // from the impl\n    T,  // from the function\n    ... // some other stuff specific to closures, e.g., the type of the upvars (none in this case)\n]\n</pre></div>",
        "id": 168065837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446562
    },
    {
        "content": "<p>now the problem here is that, if you look at the example, the set of generics in scope at the <em>existential type</em> is just <code>S</code></p>",
        "id": 168065867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446588
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">E</span>: <span class=\"nb\">Copy</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168065887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446608
    },
    {
        "content": "<p>this is my preferred minimization</p>",
        "id": 168065978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446661
    },
    {
        "content": "<p>let's switch to this</p>",
        "id": 168065982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446664
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">E</span>: <span class=\"nb\">Copy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">E</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">S</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">E</span>: <span class=\"nb\">Copy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">E</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">S</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168065984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446666
    },
    {
        "content": "<p>here you can see that the return type from <code>foo</code> is <code>(S, T)</code></p>",
        "id": 168065993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446674
    },
    {
        "content": "<p>but you see that there is no way that <code>E</code> could be equal to <code>(S, T)</code>, as <code>T</code> is not in scope there</p>",
        "id": 168065998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446686
    },
    {
        "content": "<p>there is some logic that's supposed to detect this</p>",
        "id": 168066063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446740
    },
    {
        "content": "<p>at least we spend a lot of effort to do it for lifetimes</p>",
        "id": 168066076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446747
    },
    {
        "content": "<p>perhaps we are not doing it for types, or not doing it very well</p>",
        "id": 168066097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446762
    },
    {
        "content": "<p>let's look where this <code>.concrete_existential_types</code> field is populated</p>",
        "id": 168066191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446816
    },
    {
        "content": "<p>i.e., we have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">typeck_tables_of</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">concrete_existential_types</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168066215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446827
    },
    {
        "content": "<p>(earlier in that function)</p>",
        "id": 168066224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446833
    },
    {
        "content": "<p>for me, it's collect.rs:1551</p>",
        "id": 168066231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446839
    },
    {
        "content": "<p>I believe that this is populated in the <code>src/librustc_typeck/check/writeback.rs</code> -- are you familiar with \"writeback\"?</p>",
        "id": 168066306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446885
    },
    {
        "content": "<p>I've been in that file but I have yet to work out why it's called <code>writeback</code>, line 603 in that seems to populate <code>concrete_existential_types</code>.</p>",
        "id": 168066350,
        "sender_full_name": "davidtwco",
        "timestamp": 1560446923
    },
    {
        "content": "<p>it's called writeback because</p>",
        "id": 168066371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446940
    },
    {
        "content": "<p>when we type check a function</p>",
        "id": 168066377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446943
    },
    {
        "content": "<p>we first create a \"local\" set of information for it</p>",
        "id": 168066385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446948
    },
    {
        "content": "<p>this local set includes inference variables and a bunch of intermediate stuff</p>",
        "id": 168066392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446957
    },
    {
        "content": "<p>once all inference is done, we create the final version of the information without any inference variables</p>",
        "id": 168066399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446969
    },
    {
        "content": "<p>then we write that to the global tables</p>",
        "id": 168066402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446972
    },
    {
        "content": "<p>I guess \"write<em>back</em>\" is a bit strange, since it was never there before</p>",
        "id": 168066412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446980
    },
    {
        "content": "<p>I can't remember if we used to do it some other way</p>",
        "id": 168066418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560446990
    },
    {
        "content": "<p>I guess \"commit\" might be a better name or something</p>",
        "id": 168066450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447002
    },
    {
        "content": "<p>anyway</p>",
        "id": 168066471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447003
    },
    {
        "content": "<p>right so this function:</p>",
        "id": 168066513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">           </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">definition_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// `impl Trait`</span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fcx</span><span class=\"p\">.</span><span class=\"n\">infer_opaque_definition_from_instantiation</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">opaque_defn</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">instantiated_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168066515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447030
    },
    {
        "content": "<p>that <code>infer_opaqe_definition_from_instantiation</code> has the job</p>",
        "id": 168066530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447039
    },
    {
        "content": "<p>well, wait up,</p>",
        "id": 168066542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447050
    },
    {
        "content": "<p><strong>in general</strong> what we want to do here</p>",
        "id": 168066550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447055
    },
    {
        "content": "<p>is to map from the \"Local view\" of the type</p>",
        "id": 168066558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447060
    },
    {
        "content": "<p>(the opaque type)</p>",
        "id": 168066576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447066
    },
    {
        "content": "<p>to the \"definition\" version</p>",
        "id": 168066580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447071
    },
    {
        "content": "<p>i.e., if you imagine</p>",
        "id": 168066586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447076
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168066604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447094
    },
    {
        "content": "<p>then the \"hidden type\" is <code>Vec&lt;A&gt;</code>, from the point of view of <code>foo</code></p>",
        "id": 168066630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447117
    },
    {
        "content": "<p>but we want to express it in terms of the bounds of the <em>existential type</em>, so we want <code>Vec&lt;T&gt;</code></p>",
        "id": 168066684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447129
    },
    {
        "content": "<p>because this is the type that, when you substitute <code>T</code> for <code>A</code> (because we have <code>Foo&lt;A&gt;</code>), gives you <code>Vec&lt;A&gt;</code></p>",
        "id": 168066697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447141
    },
    {
        "content": "<p>in general, there may not be a unique reverse mapping</p>",
        "id": 168066719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447157
    },
    {
        "content": "<p>e.g., if you had <code>fn foo() -&gt; Foo&lt;u32&gt; { 22_u32 }</code></p>",
        "id": 168066749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447183
    },
    {
        "content": "<p>then <code>Foo&lt;T&gt;</code> could be either <code>T</code> or <code>u32</code></p>",
        "id": 168066766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447190
    },
    {
        "content": "<p>so we prohibit that :)</p>",
        "id": 168066770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447194
    },
    {
        "content": "<p>specifically, we require that the substitutions for <code>Foo</code> have to be fresh type parameters</p>",
        "id": 168066796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447221
    },
    {
        "content": "<p>that are not in scope for <code>Foo</code> itself</p>",
        "id": 168066815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447231
    },
    {
        "content": "<p>(this is called \"pattern unification\" instead of the more general \"unification\")</p>",
        "id": 168066894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447257
    },
    {
        "content": "<p>i.e., imposing this restriction</p>",
        "id": 168066902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447264
    },
    {
        "content": "<p>(it comes from lambda prolog, as it happens)</p>",
        "id": 168066904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447272
    },
    {
        "content": "<p>anyway, getting a bit afield here...</p>",
        "id": 168066913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447281
    },
    {
        "content": "<p>but the point is we have to do this reverse mapping</p>",
        "id": 168066919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447286
    },
    {
        "content": "<p>I'm not entirely sure which path we are going to go down in this file</p>",
        "id": 168066949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447310
    },
    {
        "content": "<p>i.e., we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// impl Trait</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168066974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447333
    },
    {
        "content": "<p>the comments suggest the first path is specific to <code>-&gt; impl Trait</code></p>",
        "id": 168066979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447339
    },
    {
        "content": "<p>but I think that's not true</p>",
        "id": 168066983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447342
    },
    {
        "content": "<p>I imagine that is the path we are going to go down</p>",
        "id": 168066989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447352
    },
    {
        "content": "<p>do you know what <code>generics.parent</code> is?</p>",
        "id": 168067042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447364
    },
    {
        "content": "<p>(ok, I think I understand the bug fully now...)</p>",
        "id": 168067062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447388
    },
    {
        "content": "<p>Not really, if I had to guess, in our example <code>generics</code> would contain <code>T</code> and <code>generics.parent</code> is where <code>S</code> lives.</p>",
        "id": 168067079,
        "sender_full_name": "davidtwco",
        "timestamp": 1560447406
    },
    {
        "content": "<p>correct</p>",
        "id": 168067095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447415
    },
    {
        "content": "<p>well</p>",
        "id": 168067100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447418
    },
    {
        "content": "<p>sort of</p>",
        "id": 168067103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447422
    },
    {
        "content": "<p>this is indeed the role of parent</p>",
        "id": 168067115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447426
    },
    {
        "content": "<p>if you have nested scopes which inherit the generic parameters from an outer scope</p>",
        "id": 168067118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447430
    },
    {
        "content": "<p>then you get a \"chain\" of generics</p>",
        "id": 168067126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447435
    },
    {
        "content": "<p>so e.g. the generics for the method are <code>[T]</code></p>",
        "id": 168067130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447443
    },
    {
        "content": "<p>but they have a parent of <code>[S]</code></p>",
        "id": 168067132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447447
    },
    {
        "content": "<p>we don't often have such chains -- methods in impls are one of the few cases</p>",
        "id": 168067144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447466
    },
    {
        "content": "<p>in this particular case, though, the generics in question refers to the generics <em>on the existential type</em></p>",
        "id": 168067208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447489
    },
    {
        "content": "<p>so it's going to be <code>[]</code> here, but the parent will be the impl</p>",
        "id": 168067221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447502
    },
    {
        "content": "<p>(it is <code>[]</code> because we have <code>existential type Foo</code>, no generics)</p>",
        "id": 168067228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447512
    },
    {
        "content": "<p>(if we had <code>existential type Foo&lt;A&gt;</code>, it would be <code>[A]</code> (but that'd be GATs))</p>",
        "id": 168067239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447526
    },
    {
        "content": "<p>anyway the reason that it is checking the parent field</p>",
        "id": 168067255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447539
    },
    {
        "content": "<p>this is because we \"desugar\" <code>impl Trait</code> like so:</p>",
        "id": 168067278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447547
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168067293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447564
    },
    {
        "content": "<p>becomes</p>",
        "id": 168067295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447565
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168067306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447578
    },
    {
        "content": "<p>well, <em>something</em> like that</p>",
        "id": 168067309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447582
    },
    {
        "content": "<p>you couldn't actually write it, because scoping doesn't work that way</p>",
        "id": 168067318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447589
    },
    {
        "content": "<p>but the point is, we make the parent be the function, and it inherits the generic parameters from the parent</p>",
        "id": 168067379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447605
    },
    {
        "content": "<p>(there is a legendary hack here concerning lifetimes, but I'm going to ignore that for now)</p>",
        "id": 168067401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447616
    },
    {
        "content": "<blockquote>\n<p>we make the parent be the function, and it inherits the generic parameters from the parent</p>\n</blockquote>\n<p>(<a href=\"https://www.microsoft.com/en-us/research/publication/lexically-scoped-type-variables/\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/publication/lexically-scoped-type-variables/\">https://www.microsoft.com/en-us/research/publication/lexically-scoped-type-variables/</a>)</p>",
        "id": 168067415,
        "sender_full_name": "centril",
        "timestamp": 1560447626
    },
    {
        "content": "<p>this has an interesting implication, in the case of impl Trait</p>",
        "id": 168067423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447637
    },
    {
        "content": "<p>in particular, the <code>existential type Foo</code> that we introduce only ever has lifetime parameters on it. And, the  set of type parameters in scope at its definition (the function) are all <em>parameters the function shares with the existential type</em></p>",
        "id": 168067483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447690
    },
    {
        "content": "<p>in other words, we can just ignore types completely for the purpose of the \"reverse mapping\" check</p>",
        "id": 168067495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447701
    },
    {
        "content": "<p>put another way, the <code>-&gt; impl Trait</code> sugar always ensures all type parametesr that might appear in the hidden type are \"in scope\" (and have the same indices)</p>",
        "id": 168067558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447724
    },
    {
        "content": "<p>so you might get a clue where we are going wrong here now...</p>",
        "id": 168067574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447743
    },
    {
        "content": "<p>when this code was generalized to support <code>existential type Foo;</code> declarations,</p>",
        "id": 168067641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447787
    },
    {
        "content": "<p>we were distinguishing the <em>impl trait</em> case from the <em>more general case</em></p>",
        "id": 168067646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447796
    },
    {
        "content": "<p>(I'm not entirely sure why)</p>",
        "id": 168067649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447799
    },
    {
        "content": "<p>initially, we didn't support those in impls</p>",
        "id": 168067664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447807
    },
    {
        "content": "<p>so we just checked in <a href=\"http://writeback.rs\" target=\"_blank\" title=\"http://writeback.rs\">writeback.rs</a> for whether there is a parent</p>",
        "id": 168067675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447820
    },
    {
        "content": "<p>if so, it is a nested \"impl trait\" item</p>",
        "id": 168067677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447824
    },
    {
        "content": "<p>and it <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/writeback.rs#L454-L458\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/writeback.rs#L454-L458\">invokes the <code>infer_opaque_definition_from_instantiation</code> helper function</a> to check that the lifetimes involved have a reverse mapping</p>",
        "id": 168067751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447854
    },
    {
        "content": "<p>but this helper function ignores types</p>",
        "id": 168067756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447860
    },
    {
        "content": "<p>Does the same desugaring you described for <code>impl Trait</code>, where it is \"defined\" in the function apply when an existential type is an associated type like in our example then?</p>",
        "id": 168067777,
        "sender_full_name": "davidtwco",
        "timestamp": 1560447880
    },
    {
        "content": "<p>it is <a href=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc/infer/opaque_types/mod.rs#L429-L434\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc/infer/opaque_types/mod.rs#L429-L434\">defined here</a></p>",
        "id": 168067794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447891
    },
    {
        "content": "<blockquote>\n<p>Does the same desugaring you described for <code>impl Trait</code>, where it is \"defined\" in the function apply when an existential type is an associated type like in our example then?</p>\n</blockquote>\n<p>in some sense yes</p>",
        "id": 168067825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447907
    },
    {
        "content": "<p>because they share a prefix</p>",
        "id": 168067828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447912
    },
    {
        "content": "<p>of type parameters in common</p>",
        "id": 168067839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447917
    },
    {
        "content": "<p>and those type parameters don't need to be remapped, they're just in scope for both</p>",
        "id": 168067848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447925
    },
    {
        "content": "<p>but the difference is that, here, the method is introducing a <em>new</em> type parameter <code>T</code> that is not shraed</p>",
        "id": 168067866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447946
    },
    {
        "content": "<p>if you look at the <a href=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc_typeck/check/writeback.rs#L459\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc_typeck/check/writeback.rs#L459\">else path</a>, you can see we are <a href=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc_typeck/check/writeback.rs#L491-L500\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc_typeck/check/writeback.rs#L491-L500\">checking that case</a></p>",
        "id": 168067940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560447975
    },
    {
        "content": "<p>in contrast, the impl trait case goes down employs this <a href=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc/infer/opaque_types/mod.rs#L662-L723\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/57a3300c2538fd1044ce45d9ef3b82182acb57ae/src/librustc/infer/opaque_types/mod.rs#L662-L723\"><code>ReverseMapper</code> visitor</a></p>",
        "id": 168068004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448030
    },
    {
        "content": "<p>which just folds types</p>",
        "id": 168068023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448048
    },
    {
        "content": "<p>so I think the fix is to merge those two paths</p>",
        "id": 168068027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448054
    },
    {
        "content": "<p>(i'm not sure why they are separate at all)</p>",
        "id": 168068041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448063
    },
    {
        "content": "<p>maybe no good reason</p>",
        "id": 168068043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> might remember, they were doing some of this work</p>",
        "id": 168068052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448071
    },
    {
        "content": "<p>I think the check we want is basically:</p>\n<ul>\n<li>the type parameter should be part of the common prefix <em>or</em></li>\n<li>should have a reverse mapping</li>\n</ul>",
        "id": 168068123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448096
    },
    {
        "content": "<p>I'm wondering if we should use last few minutes to look at the other problem though :)</p>",
        "id": 168068206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448162
    },
    {
        "content": "<p>That's probably enough background on <a href=\"https://github.com/rust-lang/rust/issues/55872\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55872\">#55872</a> for me to attempt fixing it.</p>",
        "id": 168068231,
        "sender_full_name": "davidtwco",
        "timestamp": 1560448187
    },
    {
        "content": "<p>Thanks, this was very helpful.</p>",
        "id": 168068236,
        "sender_full_name": "davidtwco",
        "timestamp": 1560448192
    },
    {
        "content": "<p>I was thinking -- this would be good material to try and get into the rustc-guide</p>",
        "id": 168068258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448202
    },
    {
        "content": "<p>e.g., talking about how opaque types are implemented</p>",
        "id": 168068320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448218
    },
    {
        "content": "<p>maybe I'll cc <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- do you have some kind of \"queue\" for things that might be good to add to the rustc-guide? If so, there is some coverage of the high-level view of opaque types in this thread that we might try to transcribe.</p>",
        "id": 168068371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560448258
    },
    {
        "content": "<p>so... When I implemented existential types I believed it would not work to merge the paths, but if we add the <code>ty::Param</code> and <code>ConstVal::Param</code> code to the visitor we should be able to do it</p>",
        "id": 168116093,
        "sender_full_name": "oli",
        "timestamp": 1560500227
    },
    {
        "content": "<p>it will end up doing some <code>T</code> by <code>T</code> replacements for <code>impl Trait</code>, but that should be fine.</p>",
        "id": 168116126,
        "sender_full_name": "oli",
        "timestamp": 1560500272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>maybe I'll cc @Santiago Pastorino -- do you have some kind of \"queue\" for things that might be good to add to the rustc-guide? If so, there is some coverage of the high-level view of opaque types in this thread that we might try to transcribe.</p>\n</blockquote>\n<p>Currently it is just github issues, though we have been looking at other things. I opened <a href=\"https://github.com/rust-lang/rustc-guide/issues/339\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-guide/issues/339\">https://github.com/rust-lang/rustc-guide/issues/339</a></p>",
        "id": 168145820,
        "sender_full_name": "mark-i-m",
        "timestamp": 1560526651
    },
    {
        "content": "<blockquote>\n<p>maybe I'll cc <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> -- do you have some kind of \"queue\" for things that might be good to add to the rustc-guide? If so, there is some coverage of the high-level view of opaque types in this thread that we might try to transcribe.</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, cool that <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> did open an issue :)</p>",
        "id": 168158487,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1560536004
    },
    {
        "content": "<p>Sorry for the delay here, had a busy week, submitted <a href=\"https://github.com/rust-lang/rust/issues/62090\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62090\">#62090</a> for this, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>.</p>",
        "id": 168830692,
        "sender_full_name": "davidtwco",
        "timestamp": 1561364370
    }
]