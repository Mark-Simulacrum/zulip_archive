[
    {
        "content": "<p>(Quick notes: <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> proposed something like this and I fleshed out portions of it with <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>. Eliza Weisman helped me flesh this out.)</p>\n<p>I wrote up a rough proposal for a <code>Lifecycle</code> trait, which is meant to support certain types of RAII guards in asynchronous contexts. Specifically, it exposes methods for a type to be notified if was yielded/resumed in a future or a generator. I have a draft which isn't complete, but is shareable: <a href=\"https://paper.dropbox.com/doc/Lifecycle-Trait--Asc4LYWRnMAQVIWxKRCNDP_3Ag-xW4HXDFuNGjeGdq9RkDAF\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Lifecycle-Trait--Asc4LYWRnMAQVIWxKRCNDP_3Ag-xW4HXDFuNGjeGdq9RkDAF\">https://paper.dropbox.com/doc/Lifecycle-Trait--Asc4LYWRnMAQVIWxKRCNDP_3Ag-xW4HXDFuNGjeGdq9RkDAF</a>.</p>",
        "id": 185737833,
        "sender_full_name": "David Barsky",
        "timestamp": 1579118420
    },
    {
        "content": "<p>I wanted to share this here before I posted a more fleshed-out proposal on internals.</p>",
        "id": 185738122,
        "sender_full_name": "David Barsky",
        "timestamp": 1579118594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> :</p>\n<blockquote>\n<p>It would be implemented as a fundamental trait, like Drop. This implies a blanket implementation for all types. </p>\n</blockquote>\n<p>Note that <code>Drop</code> is <em>not</em> implemented for all types. In fact, the <code>pin-project</code> macro relies on this fact in order to to prevent user-written <code>Drop</code> impls of certain annotated types.</p>\n<p>Instead, the compiler has the notion of \"drop glue\", where types that are <code>!Drop</code> (e.g <code>String</code>) nevertheless \"do something\" when dropped (invoking drop glue for fields)</p>\n<p>If <code>Lifecycle</code> is impemented for all types (e.g. <code>T: Lifecycle</code> always holds), then this would need to rely on specialization in some way</p>",
        "id": 185854180,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579205258
    },
    {
        "content": "<p>If we <code>Lifecycle</code> to work in the same way as as <code>Drop</code>, we we need to introduce a notion of <code>Lifecycle</code> glue. This would require making <code>Lifecycle</code> even more deeply integrated into the core language</p>",
        "id": 185854379,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579205399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> oh, that's _really_ cool—I didn't know that. in that case, <code>Lifecycle</code> should follow Drop's footsteps, or it is a \"magic\" trait like <code>Deref</code> which is implemented on only _some_ types.</p>",
        "id": 185854386,
        "sender_full_name": "David Barsky",
        "timestamp": 1579205402
    },
    {
        "content": "<p>Did you mean <code>Drop</code> instead of <code>Deref</code>?</p>",
        "id": 185854505,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579205459
    },
    {
        "content": "<p>that was a confusingly worded sentence :)</p>",
        "id": 185854531,
        "sender_full_name": "David Barsky",
        "timestamp": 1579205475
    },
    {
        "content": "<p>AFAIK, <code>Deref</code> is only magical in that it has syntactic sugar, and can be automatically <em>invoked</em></p>",
        "id": 185854560,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579205492
    },
    {
        "content": "<p>what i'm <em>trying</em> to get to is that this trait should be <em>minimal</em> and opt-in.</p>",
        "id": 185854588,
        "sender_full_name": "David Barsky",
        "timestamp": 1579205512
    },
    {
        "content": "<p>But \"<code>Deref</code> glue\" doesn't exist</p>",
        "id": 185854597,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579205518
    },
    {
        "content": "<p>and ideally, would reduce how much work is needed to support to it.</p>",
        "id": 185854654,
        "sender_full_name": "David Barsky",
        "timestamp": 1579205529
    },
    {
        "content": "<p>ideally, <code>Lifecycle</code> shouldn't rely on specialization or negative bounds.</p>",
        "id": 185854705,
        "sender_full_name": "David Barsky",
        "timestamp": 1579205565
    },
    {
        "content": "<p>it's meant to be more of a hint to the compiler along the lines of: \"if you see a type implementing a trait named <code>Lifecycle</code>, do this codegen\"</p>",
        "id": 185854807,
        "sender_full_name": "David Barsky",
        "timestamp": 1579205622
    },
    {
        "content": "<p>On the design level, I'm concerned about how implicit this is. From the perspective of an <code>async fn</code> author, arbitrary code is being injected both before and after every <code>.yield</code>.</p>\n<p>With <code>Drop</code>, you can look at the indentation of a variable to get a hint as to where its drop glue will run (assuming it's not moved out of). With <code>Lifecycle</code>, you essentially need to keep a mental stack of all locals, which you consult whenever you see a <code>.yield</code></p>",
        "id": 185855456,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579205940
    },
    {
        "content": "<p>I think the explicit approach of annotating the function makes things a lot more readable. I think composing futures is much easier to understand (analogous to the composition of functions) in terms of existing concepts. The <code>Lifecycle</code> trait is in many ways a \"new\" concept that all users need to be aware of in order to understand the behavior of their code</p>",
        "id": 185855838,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579206144
    },
    {
        "content": "<p>Thanks for the design feedback—the \"implicitness\" is a concern for me as well, and I'm not 100% sold on the utility of this. I'd like to fully understand if some sort of task locals/structured concurrency <em>could</em> address the scoping of spans without language changes.</p>",
        "id": 185857733,
        "sender_full_name": "David Barsky",
        "timestamp": 1579207379
    },
    {
        "content": "<p>I realized that Node's Async Hooks is some prior work similar to this proposal: <a href=\"https://nodejs.org/api/async_hooks.html\" target=\"_blank\" title=\"https://nodejs.org/api/async_hooks.html\">https://nodejs.org/api/async_hooks.html</a></p>",
        "id": 187009854,
        "sender_full_name": "David Barsky",
        "timestamp": 1580405408
    },
    {
        "content": "<p>I posted on internals: <a href=\"https://internals.rust-lang.org/t/pre-rfc-lifecycle-trait/12311\" title=\"https://internals.rust-lang.org/t/pre-rfc-lifecycle-trait/12311\">https://internals.rust-lang.org/t/pre-rfc-lifecycle-trait/12311</a>. I don't think I fully grasped what <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> was saying until <span class=\"user-mention\" data-user-id=\"270901\">@Nika Layzell</span> pointed out a few big issues. I'm using that post primarily a \"here's my motivation for proposing this; implementation TBD\".</p>\n<p>I think any sort of implementation around this would require some compiler magic, but I'd rather not cover them now because they're a bit of distraction to problem I'd like to address. I don't want to introduce an idée fixe by accident!</p>",
        "id": 197016831,
        "sender_full_name": "David Barsky",
        "timestamp": 1589062869
    }
]