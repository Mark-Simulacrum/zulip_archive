[
    {
        "content": "<p>Would it be possible somehow to get a <code>&amp;'static str</code> of the current executing state during a generator poll?</p>",
        "id": 235874598,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619197300
    },
    {
        "content": "<p>can you say more? not sure what you mean</p>",
        "id": 235878579,
        "sender_full_name": "tmandry",
        "timestamp": 1619198945
    },
    {
        "content": "<p>Ok so each generator has sub states it can be in one at a time, right?</p>",
        "id": 235880292,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619199608
    },
    {
        "content": "<p>so when I poll a future and and one of those states is slow</p>",
        "id": 235880306,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619199616
    },
    {
        "content": "<p>how can I capture what state that was?</p>",
        "id": 235880315,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619199620
    },
    {
        "content": "<p>For debugging</p>",
        "id": 235880341,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619199630
    },
    {
        "content": "<p>for the future itself I can use <code>std::any::type_name::&lt;F&gt;()</code> to capture the name of the future</p>",
        "id": 235880371,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619199643
    },
    {
        "content": "<p>but not the internal state machine elements</p>",
        "id": 235880383,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619199649
    },
    {
        "content": "<p>so pretending the generator state machine were an enum, you'd want something like <code>std::mem::discriminant</code> to be able to check dynamic what step it is currently \"pending\" at</p>",
        "id": 235882104,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1619200319
    },
    {
        "content": "<p>Yes, something like that</p>",
        "id": 235882538,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619200488
    },
    {
        "content": "<p>it seems like what you want, <span class=\"user-mention\" data-user-id=\"207781\">@Lucio Franco</span>, is a <a href=\"https://doc.rust-lang.org/std/panic/struct.Location.html\"><code>Location</code></a></p>",
        "id": 235883158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619200745
    },
    {
        "content": "<p>Yeah that works too but not for a panic I want for example a way to fill up some <code>Vec&lt;Location&gt;</code> in <code>Context</code> when we poll a future to know what state machine elements were hit</p>",
        "id": 235884393,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619201168
    },
    {
        "content": "<p>during that poll cycle</p>",
        "id": 235884404,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1619201174
    },
    {
        "content": "<p>sure</p>",
        "id": 235893368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619204995
    },
    {
        "content": "<p>I'm just saying that a <code>Location</code> is kind of the info you are looking for, iiuc</p>",
        "id": 235893430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619205008
    },
    {
        "content": "<p>the fact that it lives in <code>std::panic</code>... well, neither here nor there perhaps</p>",
        "id": 235893451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619205018
    }
]