[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"421986\">@eholk</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  -- I wanted to schedule a slot to talk through <a href=\"https://github.com/rust-lang/rust/issues/80956\">#80956</a> and y'all are people I thought <em>might</em> be interested (don't feel obligated).</p>",
        "id": 254337073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301659
    },
    {
        "content": "<p>(Also anyone else)</p>",
        "id": 254337085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301665
    },
    {
        "content": "<p>Here are a few options</p>",
        "id": 254337102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301677
    },
    {
        "content": "<p>Please put a <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> on your preference</p>",
        "id": 254337160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301684
    },
    {
        "content": "<p><time datetime=\"2021-09-24T13:30:00Z\">2021-09-24T09:30:00-04:00</time></p>",
        "id": 254337174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301693
    },
    {
        "content": "<p><time datetime=\"2021-09-24T16:00:00Z\">2021-09-24T12:00:00-04:00</time></p>",
        "id": 254337281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301705
    },
    {
        "content": "<p><time datetime=\"2021-09-24T18:00:00Z\">2021-09-24T14:00:00-04:00</time></p>",
        "id": 254337290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301711
    },
    {
        "content": "<p>This Friday is the polonius Hackathon, so I have a mild preference for the last one.</p>",
        "id": 254337309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632301726
    },
    {
        "content": "<p>(same)</p>",
        "id": 254354967,
        "sender_full_name": "lqd",
        "timestamp": 1632312048
    },
    {
        "content": "<p>So, looks like the crater run might have turned up a couple regressions: <a href=\"https://crater-reports.s3.amazonaws.com/pr-89056/index.html\">https://crater-reports.s3.amazonaws.com/pr-89056/index.html</a><br>\nSpecifically, looking at crymap:<br>\n<code>error[E0310]: the parameter type `impl Write + 'a` may not live long enough</code></p>",
        "id": 254412714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632334429
    },
    {
        "content": "<p>I had been looking at the <code>bb8</code> one, and here's how it looks minimized</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">sink_error1</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sink_error2</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">sink_error2</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254423069,
        "sender_full_name": "lqd",
        "timestamp": 1632338454
    },
    {
        "content": "<p>Will it be recorded / will there be slides available?</p>",
        "id": 254515466,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1632394350
    },
    {
        "content": "<p>that's a very old version of bb8 though</p>",
        "id": 254524757,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1632399536
    },
    {
        "content": "<p>sure, but it still shows a pattern that this PR doesn't handle as-is, cascading the 'static choice for the member constraint can cause issues</p>",
        "id": 254527608,
        "sender_full_name": "lqd",
        "timestamp": 1632400782
    },
    {
        "content": "<p>the same pattern appears in the <code>desync</code> regressions, <code>age-core</code>, etc</p>\n<p>this one minimized from <code>ees</code> is cute, but still the same thing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">ErrorChain</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">error</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">print_error_chain</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">error</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ErrorChain</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">error</span>: <span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I assume some, if not all, the other 15 or so regressions are basically the same</p>",
        "id": 254563403,
        "sender_full_name": "lqd",
        "timestamp": 1632414202
    },
    {
        "content": "<p>OK, let's do 14:00-- we can talk through the regression then, too</p>",
        "id": 254596138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632427504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/member.20constraints.20PR.20.2389056/near/254515466\">said</a>:</p>\n<blockquote>\n<p>Will it be recorded / will there be slides available?</p>\n</blockquote>\n<p>recorded, yes</p>",
        "id": 254596182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632427521
    },
    {
        "content": "<p>(the regression fix looks like it works but I don't think the crater run worked)</p>",
        "id": 254678552,
        "sender_full_name": "lqd",
        "timestamp": 1632477201
    },
    {
        "content": "<p>thanks for the call everyone!</p>",
        "id": 254755954,
        "sender_full_name": "lqd",
        "timestamp": 1632510350
    },
    {
        "content": "<p>So, the example I was thinking of was something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But I'm unsure how to \"capture\" <code>c</code></p>",
        "id": 254798966,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632535909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> since you'll probably miss my github ping, the example I'm thinking of is effectively in <a href=\"https://github.com/rust-lang/rust/issues/89327\">#89327</a></p>",
        "id": 255455097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632942021
    },
    {
        "content": "<p>that makes me wonder:</p>\n<ul>\n<li>whether Oli has seen Niko's <a href=\"https://github.com/rust-lang/rust/issues/89056\">#89056</a>, and if that affects their lazy TAIT work (probably not)</li>\n<li>and if Niko has seen Oli's interesting <a href=\"https://github.com/rust-lang/rust/issues/89229\">#89229</a>, in addition to <a href=\"https://github.com/rust-lang/rust/issues/89327\">#89327</a>, even if both seemed to only affect diagnostics. The former more so than the latter. (Oli's branch naming game is on point tho: <code>i_love_inferctxt</code>)</li>\n</ul>",
        "id": 255462435,
        "sender_full_name": "lqd",
        "timestamp": 1632944878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and I talked today</p>",
        "id": 255496552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632960831
    },
    {
        "content": "<p>He is going to explore the idea of adding <em>intersection regions</em> in today's system</p>",
        "id": 255496563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632960840
    },
    {
        "content": "<p>It doesn't seem <em>that</em> hard and it would let us give precisely the right solutions here</p>",
        "id": 255496611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632960848
    },
    {
        "content": "<p>That said, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, this example is not a \"problem\" for the PR, it's just not one that the PR would allow to type check.</p>",
        "id": 255496656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632960874
    },
    {
        "content": "<p>Right. I'm trying to put into words what I was concerned about</p>",
        "id": 255497147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632961215
    },
    {
        "content": "<p>Maybe that now we error, but we could theoretically select <code>'static</code> with your PR</p>",
        "id": 255497177,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632961242
    },
    {
        "content": "<p>and in the future, we really want the intersection region</p>",
        "id": 255497190,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632961254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/member.20constraints.20PR.20.2389056/near/255497177\">said</a>:</p>\n<blockquote>\n<p>Maybe that now we error, but we could theoretically select <code>'static</code> with your PR</p>\n</blockquote>\n<p>we would not, in this case, because it has upper bounds</p>",
        "id": 255601003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633018267
    },
    {
        "content": "<p>I think the concern is really the auto trait with Send</p>",
        "id": 255601049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633018285
    },
    {
        "content": "<p>I should make the test case!</p>",
        "id": 255601058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633018288
    }
]