[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> -- I have a question about <a href=\"https://github.com/djc/quinn\" title=\"https://github.com/djc/quinn\">quinn</a>. I am curious what it would take to make it portable across executors (or if it already is, even). From persuing the API, I see that when you connect with a stream, you get back something that implements <code>AsyncRead</code> (from the futures crate), but it seems like creating connections requires supplying addresses and things, and I <em>believe</em> that this sort of work is still something that's going to be tied to a specific async runtime. Is that all correct?</p>",
        "id": 195976754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588349376
    },
    {
        "content": "<p>(Others can feel free to chime in :)</p>",
        "id": 195976771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588349390
    },
    {
        "content": "<p>My mental model of where QUIC fits is probably a bit off anyway, I should go read more about it.</p>",
        "id": 195976873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588349436
    },
    {
        "content": "<p>Hi, other quinn maintainer here! We rely on the async runtime (in quinn, not quinn-proto) to provide readiness notifications on a UDP socket and timers. There shouldn't be any serious barriers to abstracting those out.</p>",
        "id": 195989541,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1588355832
    },
    {
        "content": "<p>I believe the parity folks are using quinn-proto, which has no async code per se, with async-std already</p>",
        "id": 195989689,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1588355884
    },
    {
        "content": "<p>the code under <a href=\"https://github.com/djc/quinn/tree/master/quinn/src/platform\" title=\"https://github.com/djc/quinn/tree/master/quinn/src/platform\">https://github.com/djc/quinn/tree/master/quinn/src/platform</a> would need to be refactored to operate on a raw FD and some sort of abstract readiness notification interface, and that interface would need to be piped up to the <code>EndpointBuilder</code>.</p>",
        "id": 195994189,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1588358345
    },
    {
        "content": "<p>very interesting, thanks!</p>",
        "id": 195998151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588360513
    },
    {
        "content": "<p>I was just talking to <span class=\"user-mention\" data-user-id=\"128448\">@stjepang</span> about smol and in that conversation this idea of the \"raw fd as a portability layer\" kind of arose too...</p>",
        "id": 195998190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588360541
    },
    {
        "content": "<p>np, feel free to ping me with any questions!<br>\nnote that managing readiness explicitly, rather than just calling a dynamically dispatched <code>send_to</code>, is important here because we need APIs from libc that aren't exposed by any higher level interface</p>",
        "id": 195998392,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1588360652
    },
    {
        "content": "<p>and the degree of that use is only going to grow as we spend more time on optimization</p>",
        "id": 195998449,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1588360681
    },
    {
        "content": "<p>Also we currently spawn futures implicitly, so we'd need some abstraction around that</p>",
        "id": 195999618,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1588361317
    },
    {
        "content": "<p>but I don't think we have any particularly deep integration with tokio</p>",
        "id": 195999673,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1588361348
    },
    {
        "content": "<p>This is everything from tokio we use in quinn:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">time</span>::<span class=\"p\">{</span><span class=\"n\">delay_until</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Delay</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Instant</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TokioInstant</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">io</span>::<span class=\"n\">PollEvented</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">tokio</span>::<span class=\"n\">spawn</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"n\">AsyncRead</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">AsyncWrite</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">futures</span>::<span class=\"n\">AsyncRead</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">futures</span>::<span class=\"n\">AsyncWrite</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196000126,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1588361581
    },
    {
        "content": "<p>plus the <code>UdpSocket</code> directly from mio</p>",
        "id": 196000158,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1588361605
    },
    {
        "content": "<p>(never mind, added above)</p>",
        "id": 196003037,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1588363149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just to add to what <span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span>  said - both timers and <code>PollEvented</code> (similar to my <code>Async</code> type) could be part of the universal reactor, if standard library is going to provide one</p>",
        "id": 196011744,
        "sender_full_name": "stjepang",
        "timestamp": 1588368193
    },
    {
        "content": "<p>As someone who has implemented all kinds of protocols (including complex ones like HTTP/2), and currently also looking at QUIC: You can model all of those based on a few interfaces which abstract away IO. What you typically need is what <span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> already mentioned:</p>\n<ul>\n<li>IO (either in the form of stream based IO or packet based IO)</li>\n<li>Timers</li>\n<li>The ability to spawn subtasks</li>\n</ul>\n<p>I think all the libraries out there could have already decoupled themselves from tokio/async-std/etc, by simply building on top of those interfaces - which could be integrated in the libraries themselves. The reason why it doesn't happen: It introduces more work, is not obvious to do, and there is no real benefit for the library authors.</p>",
        "id": 196024979,
        "sender_full_name": "Matthias247",
        "timestamp": 1588380721
    },
    {
        "content": "<blockquote>\n<p>I was just talking to @stjepang about smol and in that conversation this idea of the \"raw fd as a portability layer\" kind of arose too...</p>\n</blockquote>\n<p>I think that is a rather bad portability layer. <code>fd</code>s are a unix concept. On windows they play a different role. Fuchsia and other capability based OSes have different assumptions again. And even on unix it doesn't work great, because different OSes and even OS subsystems have different assumptions on whether the fd can actually be async. Most things can not be.</p>",
        "id": 196025120,
        "sender_full_name": "Matthias247",
        "timestamp": 1588380887
    },
    {
        "content": "<p>If you want an async stream abstraction or a timer abstraction, model it as such an abstraction. Then the platform can adept to whatever it offers.</p>",
        "id": 196025182,
        "sender_full_name": "Matthias247",
        "timestamp": 1588380984
    },
    {
        "content": "<p>to be clear, a generic packet-based I/O abstraction is not suitable here as we need a substantial amount of low-level platform specific shenanigans to achieve correct and efficient implementation</p>",
        "id": 196027211,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1588384499
    },
    {
        "content": "<p>The abstraction obviously needs to cover everything that the library needs. That might be a far bigger surface area than anyone who is not working on the library could imagine. That's why I think those abstractions are better off as part part of the libraries themselves.</p>\n<p>For packet based projects, I've e.g. seen projects which support AF_XDP, DPDK, recvmmsg/sendmmsg and the regular socket interfaces. That's a huge surface area, and probably something that could be bikeshedded over for years if would need to get standardized. But if the library itself comes with a platform abstraction layer with all the features it requires people are still able to plug in different backends.</p>",
        "id": 196029074,
        "sender_full_name": "Matthias247",
        "timestamp": 1588387739
    },
    {
        "content": "<p>yeah, that's true; we in fact already have such a trait for abstracting over platforms' UDP stuff, just not exposed, and it's very simple</p>",
        "id": 196030491,
        "sender_full_name": "Benjamin Saunders",
        "timestamp": 1588390134
    }
]