[
    {
        "content": "<p>Is there anywhere I can read about how the scoped-tasks api's will be implemented (not necessarily the hookings into std, but how to deal with the limitations of either 1. unsafe or 2. blocking that <a href=\"https://docs.rs/async-scoped/0.6.1/async_scoped/\">https://docs.rs/async-scoped/0.6.1/async_scoped/</a> has)? A lot of my work teaching people how to do concurrency and blocking concurrency, as well as work on <code>impedance</code> would be easier or very nicely invalidated with the scope apis, and I am wondering if there is a way for me to help on that part of the vision</p>",
        "id": 244890859,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625455907
    },
    {
        "content": "<p>Is it blocked on <code>AsyncDrop</code>?</p>",
        "id": 244890865,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625455920
    },
    {
        "content": "<p>There is no plan (in terms of a design doc) yet</p>",
        "id": 244892647,
        "sender_full_name": "Matthias247",
        "timestamp": 1625458726
    },
    {
        "content": "<p><a href=\"https://carllerche.com/2021/06/17/six-ways-to-make-async-rust-easier/\">https://carllerche.com/2021/06/17/six-ways-to-make-async-rust-easier/</a> lists one way with <code>scope</code> and <code>TaskSet</code>, which looks very reasonable (and is pretty much what Swift does).</p>\n<p><a href=\"https://github.com/tokio-rs/tokio/issues/1879\">https://github.com/tokio-rs/tokio/issues/1879</a> and <a href=\"https://github.com/tokio-rs/tokio/pull/2579\">https://github.com/tokio-rs/tokio/pull/2579</a> described and implemented also something similar - but without the support for completion futures it had some sharp edges on its own.</p>",
        "id": 244892773,
        "sender_full_name": "Matthias247",
        "timestamp": 1625458917
    },
    {
        "content": "<p>How does completion futures interact with this to make it less sharp?</p>",
        "id": 244898414,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625466260
    },
    {
        "content": "<p>Without completion futures, spawned tasks must still be <code>'static</code> even if you're using a scope. The scope only lets you control termination of the tasks, not borrowing data across tasks.</p>",
        "id": 244903718,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1625470905
    },
    {
        "content": "<p>Forgive me for my ignorance, but how do completion futures let you use borrowed data? Is that requiring the object returned by the scope call is a completion future? or requiring that the spawned futures are completion futures?</p>\n<p>Also, if we had AsyncDrop, would it be easier to call poll on a completion future without needing unsafe? (because you can use an asyncdrop impl to finish the polling)?</p>",
        "id": 244969372,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625515073
    },
    {
        "content": "<p>It works because the future returned by <code>scope</code> is a completion future. Spawned futures can be either, but will probably be completion futures because that's more general. It has to be a completion future to guarantee that the data it references isn't destroyed before all the running tasks that reference it complete.<br>\nI don't think AsyncDrop would help, because it won't be guaranteed to be called.</p>",
        "id": 244973014,
        "sender_full_name": "Kestrer",
        "timestamp": 1625518075
    },
    {
        "content": "<p>How will the scope's completion future be polled and guaranteed to be polled before drop (without making users use <code>unsafe</code>)?</p>",
        "id": 244984052,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625531341
    },
    {
        "content": "<p><code>.await</code> (or as proposed just a calling of an async function) would drive the completion future to completion. Users don’t have to use unsafe things.  And the type system will make sure you can’t work around that contract without using unsafe. Eg  you can‘t <code>select!</code> on those are using other mean which poll the Future just once and then leave it alone.</p>",
        "id": 244993587,
        "sender_full_name": "Matthias247",
        "timestamp": 1625544136
    },
    {
        "content": "<p>why it helps: there is no safe way to drop the scope Future anymore before the spawned Futures complete. And this can be enforced via a lexical scope just like with crossbeam scoped threads.</p>",
        "id": 244993667,
        "sender_full_name": "Matthias247",
        "timestamp": 1625544280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> is that the idea that the only way to actually start a root <code>CompletionFuture</code> is to spawn it in a specific method for <code>CompletionFuture</code>'s on the runtime itself? I see now how once you are in the context of a <code>CompletionFuture</code> the type system ensures that everything works out, but upon reading the proposals, I think the <code>completion</code> crate's <code>block_on</code> function is the only way to actually run a<code>CompletionFuture</code> so far?</p>",
        "id": 245067415,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625590492
    },
    {
        "content": "<p>Future executor implementations (like an imaginary tokio 2.0 or tokio 1.0 with extensions) could allow to spawn a <code>CompletionFuture</code> without having to use <code>.block_on</code>. The executor would need to be implemented in a fashion where it never drops an in-progress <code>Future</code> - like the current versions do.</p>",
        "id": 245070709,
        "sender_full_name": "Matthias247",
        "timestamp": 1625592018
    },
    {
        "content": "<p>So if you are in an async context and want await a CompletionFuture, you can spawn it on the runtime, and await the JoinHandle (and if thats dropped it either runs the compfuture in the background to completion or cancels it I suppose)? I am trying to understand how the community will iteratively interact with completion future's</p>",
        "id": 245071470,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625592384
    },
    {
        "content": "<p>There is also the possibility of another abstraction: a spawned <code>CompletionFuture</code> whose handle only implements <code>CompletionFuture</code> and is lazily spawned. For that kind of task, it wouldn't even need any lifetime bounds.</p>",
        "id": 245092369,
        "sender_full_name": "Kestrer",
        "timestamp": 1625602175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360486\">@Kestrer</span> that would be spawned within a scope right?</p>",
        "id": 245092578,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1625602312
    },
    {
        "content": "<p>It doesn't have to be I don't think</p>",
        "id": 245092633,
        "sender_full_name": "Kestrer",
        "timestamp": 1625602327
    },
    {
        "content": "<p>If that abstraction can exist, I do wonder whether scoped tasks are necessary. The eager spawning scoped tasks provide can be worked around with a <code>join_tasks</code> combinator that takes a bunch of <code>CompletionFuture</code>s, polls them all once with a no-op context and then polls each in sequence to completion (thus being much more efficient than regular <code>join</code> or <code>FuturesUnordered</code>).</p>",
        "id": 245092778,
        "sender_full_name": "Kestrer",
        "timestamp": 1625602431
    }
]