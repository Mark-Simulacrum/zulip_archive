[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> the doc of <code>GeneratorInteriorTypeCause</code> declared it will record yield-cross data <strong>and</strong> <a href=\"https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src/librustc_middle/ty/context.rs#L284\" title=\"https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src/librustc_middle/ty/context.rs#L284\">captured types</a>(upvars I guess), but <a href=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_typeck/check/generator_interior.rs#L67\" title=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_typeck/check/generator_interior.rs#L67\">only yield_data</a> were recorded during interior visiting. <br>\nSo, for later error reporting, I'm going to record upvars in this <a href=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_typeck/check/generator_interior.rs#L119\" title=\"https://github.com/rust-lang/rust/blob/42abbd8878d3b67238f3611b0587c704ba94f39c/src/librustc_typeck/check/generator_interior.rs#L119\">to-be-created-else branch</a>, is this approach appliable?</p>",
        "id": 196053922,
        "sender_full_name": "csmoe",
        "timestamp": 1588429313
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">ty</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>not only the <code>ty</code>, but <code>future::ResumeTy</code> is recorded as <code>GeneratorInteriorTypeCause</code> accidently.<br>\nwill invest more.</p>",
        "id": 196179594,
        "sender_full_name": "csmoe",
        "timestamp": 1588598910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> sorry, just getting to this after a long weekend</p>",
        "id": 196379600,
        "sender_full_name": "tmandry",
        "timestamp": 1588720185
    },
    {
        "content": "<p>the <code>ResumeTy</code> of the generator shouldn't get recorded, I thought we resolved that issue already (cc <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>)</p>",
        "id": 196379661,
        "sender_full_name": "tmandry",
        "timestamp": 1588720208
    },
    {
        "content": "<p>I fixed it getting allocated space in the generator, but not the typeck part</p>",
        "id": 196379721,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588720271
    },
    {
        "content": "<p>ah, I see. okay.</p>",
        "id": 196379804,
        "sender_full_name": "tmandry",
        "timestamp": 1588720334
    },
    {
        "content": "<p>regarding upvars, I don't think we handle them in <code>GeneratorInteriorTypeCause</code> because they aren't captured \"in the interior\" of the generator, perhaps</p>",
        "id": 196379853,
        "sender_full_name": "tmandry",
        "timestamp": 1588720397
    },
    {
        "content": "<p>that is, \"captured types\" in this context probably doesn't mean upvars</p>",
        "id": 196379872,
        "sender_full_name": "tmandry",
        "timestamp": 1588720413
    },
    {
        "content": "<p>..because generators are also closures, and closure upvars are handled in a separate path, somewhere</p>",
        "id": 196379907,
        "sender_full_name": "tmandry",
        "timestamp": 1588720440
    },
    {
        "content": "<p>I'm not sure how much work it would be to add obligations from upvars to the same list, for the purpose of error reporting</p>",
        "id": 196380029,
        "sender_full_name": "tmandry",
        "timestamp": 1588720508
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> knows</p>",
        "id": 196380060,
        "sender_full_name": "tmandry",
        "timestamp": 1588720557
    },
    {
        "content": "<p>..oh, there's a PR up :)</p>",
        "id": 196380451,
        "sender_full_name": "tmandry",
        "timestamp": 1588720884
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/issues/71923\" title=\"https://github.com/rust-lang/rust/issues/71923\">#71923</a>)</p>",
        "id": 196380459,
        "sender_full_name": "tmandry",
        "timestamp": 1588720893
    },
    {
        "content": "<p>(lol, I just realized I explicitly said to do this in some mentoring instructions a few weeks ago)</p>",
        "id": 196380551,
        "sender_full_name": "tmandry",
        "timestamp": 1588720963
    },
    {
        "content": "<p>it looks like you figured it out. I left a review, thanks <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>!</p>",
        "id": 196382409,
        "sender_full_name": "tmandry",
        "timestamp": 1588722588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/issue.20.2370818/near/196379872\" title=\"#narrow/stream/187312-wg-async-foundations/topic/issue.20.2370818/near/196379872\">said</a>:</p>\n<blockquote>\n<p>that is, \"captured types\" in this context probably doesn't mean upvars</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> so I just query and filter the upvars during error reporting instead of record them into generator interior, new commits waiting for your review.</p>",
        "id": 196610068,
        "sender_full_name": "csmoe",
        "timestamp": 1588758370
    }
]