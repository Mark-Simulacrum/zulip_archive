[
    {
        "content": "<p>I'm going to dump some thoughts here to start. <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> I'd love your feedback, too</p>",
        "id": 175358491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136060
    },
    {
        "content": "<p>First off, I think the ideal would be if we could figure out, when looking at a causal chain that derives from a generator or closure in the current crate, that we want to somehow cite the local variable that gave rise to that field.</p>",
        "id": 175358564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136109
    },
    {
        "content": "<p>I'm imagining</p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n  --&gt; src/main.rs:23:5\n   |\n23 |     is_send(foo());\n   |     ^^^^^^^ `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n   |\nnote: the `MutexGuard` is captured by the future representing the function `foo`:\n   | async fn foo() {\nxx |     bar(&amp;Mutex::new(22)).await;\n   |            ------------ the result of this expression is potentially live across an await\n   | }\n</pre></div>",
        "id": 175358827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136255
    },
    {
        "content": "<p>this seems like something we could pretty readily do by examining the causal chain; when we see that one of the types is a field of a generator, we can find the def-id of that generator</p>",
        "id": 175358855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136284
    },
    {
        "content": "<p>we can figure out what expression the field represents (I have to check on how to do <em>that</em>)</p>",
        "id": 175358876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136294
    },
    {
        "content": "<p>and that kind of gives us everything we want to know</p>",
        "id": 175358881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136301
    },
    {
        "content": "<p>it won't work for futures defined in other crates, but let's define our scope apropriately</p>",
        "id": 175358901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136309
    },
    {
        "content": "<p>(in that case, we could write something like \"captured by the future respresenting <code>other_crate::foo::bar</code>, at least)</p>",
        "id": 175359076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136332
    },
    {
        "content": "<p>one question would be whether it's important to show how the <em>future type</em> is reachable from the actual type, but I think that's less vital</p>",
        "id": 175359115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568136352
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> -- you around by any chance?</p>",
        "id": 175844553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568662382
    },
    {
        "content": "<p>What's up</p>",
        "id": 175845148,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568662856
    },
    {
        "content": "<p>I was looking into what this message should say and wanted to bounce it off somebody</p>",
        "id": 175845670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568663196
    },
    {
        "content": "<p>I feel like it should .. walk you through the call stack?</p>",
        "id": 175845822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568663299
    },
    {
        "content": "<p>what I had in mind so far</p>",
        "id": 175846002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568663438
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0277]: `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n  --&gt; src/main.rs:23:5\n   |\n23 |     is_send(foo());\n   |     ^^^^^^^ `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n   |\nnote: the `MutexGuard` arises from the suspended state from calling `foo`\nnote: in the function `foo`:\n   | async fn foo() {\n   |          --- the future that results from calling foo...\nNN |     bar(&amp;Mutex::new(22)).await;\n   |     --- may suspend while calling bar...\nnote: in the function `bar`\n   | async fn bar() {\n   |          --- the future that results from calling bar...\nNN |     let g = x.lock().unwrap();\n   |         - may suspend with `g`, a `MutexGuard` on the stack\n</pre></div>",
        "id": 175846005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568663440
    },
    {
        "content": "<p>something like that?</p>",
        "id": 175846012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568663445
    },
    {
        "content": "<p>kind of busy</p>",
        "id": 175846023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568663452
    },
    {
        "content": "<p>also, it doesn't say <em>where</em> the original <code>Send</code> requirement comes from</p>",
        "id": 175846059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568663478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as is the output you're mocking can't be done</p>",
        "id": 175855686,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670306
    },
    {
        "content": "<p>we can't have multiple spans in a note :-/</p>",
        "id": 175855695,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670313
    },
    {
        "content": "<p>I'm thinking using secondary spans directly would be better for communication:</p>",
        "id": 175855724,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670343
    },
    {
        "content": "<blockquote>\n<p>we can't have multiple spans in a note :-/</p>\n</blockquote>\n<p>we should fix that</p>",
        "id": 175855742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670356
    },
    {
        "content": "<p>but I don't know that the \"primary span\" is important here anyway</p>",
        "id": 175855802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670376
    },
    {
        "content": "<p>er, the underlining of <code>foo</code></p>",
        "id": 175855810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670383
    },
    {
        "content": "<p>I believe we have a ticket for it, but we haven't worked on it due to the <code>annotate-snippets</code> epic</p>",
        "id": 175855823,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670390
    },
    {
        "content": "<p>can you paste the original code?</p>",
        "id": 175855830,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670397
    },
    {
        "content": "<p>yeah I mean we should fix it by adopting a more general model from which it just falls out</p>",
        "id": 175855851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670412
    },
    {
        "content": "<p>I wan to mock my preferred output with the right code</p>",
        "id": 175855856,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670416
    },
    {
        "content": "<p>code is in <a href=\"https://github.com/rust-lang/rust/issues/64130\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64130\">#64130</a></p>",
        "id": 175855872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">Mutex</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">is_send</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Mutex</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">)).</span><span class=\"n\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Mutex</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">baz</span><span class=\"p\">().</span><span class=\"n\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">is_send</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 175855875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670430
    },
    {
        "content": "<p>gotta run right now</p>",
        "id": 175855883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670438
    },
    {
        "content": "<p>but I'll check back in later</p>",
        "id": 175855887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670442
    },
    {
        "content": "<p>separately, I was chatting about it with wycats, who thought that I was overemphasizing the concept of \"suspended state\", but we didnt' get a chance to dig into what could replace that</p>",
        "id": 175855915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568670475
    },
    {
        "content": "<p>I'm thinking something like</p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n  --&gt; src/main.rs:23:5\n   |\nLL | async fn foo() {\n   |          --- when calling this fn resolving in a future...\nLL |     bar(&amp;Mutex::new(22)).await;\n   |     --- ...this might suspend\n...\n   | async fn bar() {\n   |          --- when calling this fn resolving in a future...\nLL |     let g = x.lock().unwrap();\n   |         - may suspend with `g`, a `MutexGuard` on the stack (improve wording)\n...\nLL |     is_send(foo());\n   |     ^^^^^^^ `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n</pre></div>",
        "id": 175856188,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670655
    },
    {
        "content": "<p>but even it is not ideal...</p>",
        "id": 175856233,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568670695
    },
    {
        "content": "<p>As a nubie reading this, the point is coming across, though I spent a lot of time parsing \" when calling this fn resolving in a future...\"<br>\nHow about:</p>\n<p>let g = x.lock().unwrap();<br>\n   - may suspend with <code>g</code> on the stack as it's in an async context, but alas <code>MutexGuard</code> is not <code>Send</code>.</p>\n<p>and ditch the preamble of \"--- when calling this fn resolving in a future...\"? (Sorry for unasked bikeshedding)</p>",
        "id": 175927491,
        "sender_full_name": "Giles Cope",
        "timestamp": 1568740503
    },
    {
        "content": "<p>I'm dubious <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> about avoiding notes, because I think the order in which things show up may be confusing.</p>",
        "id": 176046562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568840723
    },
    {
        "content": "<p>This reminds me of my ideas to extend the diagnostic API with some way to say \"this really has to be shown first\", which could take advantage of source order when it fits...but otherwise change how we show things.</p>",
        "id": 176046582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568840751
    },
    {
        "content": "<p>Anyway I'm going to leave some notes about what it would take to do anything at all. And we can hammer out the best appearance after</p>",
        "id": 176046674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568840783
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, I left some <a href=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-532874280\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-532874280\">high-level notes</a> that sketch out the approach I had in mind. It's a non-trivial task; seems unlikely to get done before beta branches, but could <em>maybe</em> be backported. (I think it would well be worth it.) Even if we don't backport, just having it landed on nightly (and available in next release) seems worth it.</p>\n<p>Do you think you're up to try and tackle it? Feel free to say no, I could also take a stab, though I don't know if I'll have time.</p>",
        "id": 176048401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568842220
    },
    {
        "content": "<p>Thanks. I should have time. I’ll give it a go over the next few days.</p>",
        "id": 176048713,
        "sender_full_name": "davidtwco",
        "timestamp": 1568842447
    },
    {
        "content": "<p>Awesome! Obviously send any questions my way.</p>",
        "id": 176049588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568843185
    },
    {
        "content": "<blockquote>\n<p>This reminds me of my ideas to extend the diagnostic API with some way to say \"this really has to be shown first\", which could take advantage of source order when it fits...but otherwise change how we show things.</p>\n</blockquote>\n<p>I'll try to tackle that once we've moved to <code>annotate-snippets</code> across the board.</p>",
        "id": 176050024,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1568843570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you clarify something? </p>\n<blockquote>\n<p>I think what I would like to do is to also remember the hir_id that caused this type to be added. This would probably be stored in the typeck-tables for the generator. Then, when we are printing the stack trace above, and we see an error was reported for some type in the interior, we can find its index and use that to grab the hir_id that caused the type to be added.</p>\n</blockquote>\n<p>By this, do you mean adding a new field to <code>TypeckTables</code> and storing the <code>HirId</code>s in that?</p>",
        "id": 176409455,
        "sender_full_name": "davidtwco",
        "timestamp": 1569272611
    },
    {
        "content": "<p>I think that's what I meant, yes.</p>",
        "id": 176410269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273241
    },
    {
        "content": "<p>I'm struggling to get the <code>hir_id</code> for the exprs.. I added a field to <code>TypeckTables</code>, and in the <code>record</code> function in <code>generator_interior</code>, I also kept track of the <code>expr.map(|e| e.hir_id)</code>. In <code>resolve_interior</code>, I stored that into <code>visitor.fcx.inh.tables.borrow_mut().&lt;my_field&gt;</code>. But in my error reporting function, if I do <code>tcx.typeck_tables_of(generator_did)</code>, then there's nothing in my field. I suspect this isn't quite what you intended me to be doing.</p>",
        "id": 176412416,
        "sender_full_name": "davidtwco",
        "timestamp": 1569274988
    },
    {
        "content": "<p>I'm also unclear on this part:</p>\n<blockquote>\n<p>and we see an error was reported for some type in the interior</p>\n</blockquote>\n<p>Not sure how to work out which type in the interior had the error and thus, which index I should use to get the <code>HirId</code> (when I have access to them).</p>",
        "id": 176412579,
        "sender_full_name": "davidtwco",
        "timestamp": 1569275123
    },
    {
        "content": "<blockquote>\n<p>I suspect this isn't quite what you intended me to be doing.</p>\n</blockquote>\n<p>Hmm, it <em>sounds</em> right, but I suspect some of ... \"off by one\" thing going on.</p>",
        "id": 176413023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275496
    },
    {
        "content": "<p>Ah, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> -- perhaps the problem is that you haven't modified the write-back code?</p>",
        "id": 176413254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275729
    },
    {
        "content": "<p>I definitely haven't modified the writeback code, so if that's something I need to be doing, that'll be the issue.</p>",
        "id": 176413276,
        "sender_full_name": "davidtwco",
        "timestamp": 1569275750
    },
    {
        "content": "<p>Yeah, so, dear god I don't know if this in the rustc-guide but it should be</p>",
        "id": 176413326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275767
    },
    {
        "content": "<p>anyway so we build up a \"temporary\" copy of the typeck-tables, which is the one you are modifying</p>",
        "id": 176413333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275779
    },
    {
        "content": "<p>then <a href=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_typeck/check/writeback.rs#L60\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_typeck/check/writeback.rs#L60\">around this line</a> we copy from that temporary one to the final one,</p>",
        "id": 176413339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275789
    },
    {
        "content": "<p>resolving type inference variables along the way and other artifacts of type inference</p>",
        "id": 176413344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275797
    },
    {
        "content": "<p>so you'll want to add a line like <a href=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_typeck/check/writeback.rs#L60\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_typeck/check/writeback.rs#L60\">that one</a> for your field</p>",
        "id": 176413350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275809
    },
    {
        "content": "<p>(man, I need to start making a little list of like \"random things that have to be explained semi-regularly\", so we can point to them...)</p>",
        "id": 176413378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275838
    },
    {
        "content": "<p>Thanks, will try that.</p>",
        "id": 176413379,
        "sender_full_name": "davidtwco",
        "timestamp": 1569275838
    },
    {
        "content": "<p>great! I gotta run, but bbl</p>",
        "id": 176413386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275849
    },
    {
        "content": "<p>also btw I posted an error message that <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> and I came up with --</p>",
        "id": 176413407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275872
    },
    {
        "content": "<p>it's worth mentioning only because it doesn't require gathering the whole 'stack trace' for the diagnostics, just the 'top frame'</p>",
        "id": 176413457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275886
    },
    {
        "content": "<p>but I guess you didn't get that far yet :)</p>",
        "id": 176413459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275889
    },
    {
        "content": "<p>I've got the frames (not with actual messages, just spans for the functions) like in your original example, and none of the details inside of the functions yet.</p>",
        "id": 176413479,
        "sender_full_name": "davidtwco",
        "timestamp": 1569275936
    },
    {
        "content": "<p>Having not seen your newest sketch of what the error message should be until having been going on this for a day or two, this is what I've got tonight before packing it in for the day:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n  --&gt; src/test/ui/async-await/issue-64130-non-send-future-diags.rs:23:5\n   |\n23 |     is_send(foo());\n   |     ^^^^^^^ `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n   |\n   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard&lt;&#39;_, u32&gt;`\nnote: in the suspended state from calling `XXX`\n  --&gt; src/test/ui/async-await/issue-64130-non-send-future-diags.rs:9:16\n   |\n9  |   async fn foo() {\n   |  ________________^\n10 | |     bar(&amp;Mutex::new(22)).await;\n   | |     --- may suspend when calling\n11 | | }\n   | |_^\nnote: in the suspended state from calling `XXX`\n  --&gt; src/test/ui/async-await/issue-64130-non-send-future-diags.rs:13:30\n   |\n13 |   async fn bar(x: &amp;Mutex&lt;u32&gt;) {\n   |  ______________________________^\n14 | |     let g = x.lock().unwrap();\n15 | |     baz().await;\n   | |     --- may suspend when calling\n16 | | }\n   | |_^\n</pre></div>",
        "id": 176417802,
        "sender_full_name": "davidtwco",
        "timestamp": 1569279990
    },
    {
        "content": "<p>nice!</p>",
        "id": 176421886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569284895
    },
    {
        "content": "<p><strong>my error:</strong></p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n  --&gt; src/test/ui/async-await/issue-64130-non-send-future-diags.rs:23:5\n   |\n23 |     is_send(foo());\n   |     ^^^^^^^ `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n   |\n   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard&lt;&#39;_, u32&gt;`\nnote: in the suspended state from calling `bar`\n  --&gt; src/test/ui/async-await/issue-64130-non-send-future-diags.rs:13:1\n   |\n13 | / async fn bar(x: &amp;Mutex&lt;u32&gt;) {\n14 | |     let g = x.lock().unwrap();\n15 | |     baz().await;\n   | |     --- may suspend when calling\n16 | | }\n   | |_^\n</pre></div>\n\n\n<p>I'm not sure how to get a smaller span for the function name, or how to get the other parts to point at, like <code>g</code>, or the <code>await</code>. </p>\n<p>The generator interior types expression spans are just <code>bar().await</code> and then <code>bar()</code> and <code>await</code> and effectively all of the smaller spans you could get out of that line.</p>\n<p>Any ideas <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?</p>",
        "id": 176506841,
        "sender_full_name": "davidtwco",
        "timestamp": 1569359549
    },
    {
        "content": "<p>Oh, or the span for the <code>T: Send</code> bound on <code>is_send</code>.</p>",
        "id": 176506865,
        "sender_full_name": "davidtwco",
        "timestamp": 1569359579
    },
    {
        "content": "<p><strong>target error:</strong></p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: future cannot be sent between threads safely\n  --&gt; src/main.rs:23:5\n   |\n23 |     is_send(foo());\n   |     ^^^^^^^ future returned by `foo()` is not `Send`\n   |\nnote: future is not send because this value is used across an await\nNN |     let g = x.lock().unwrap();\n   |         - has type `std::sync::MutexGuard&lt;&#39;_, u32&gt;`\nNN |     baz().await;\n   |           ^^^^^ await occurs here, with `g` maybe used later\nNN |  }\n   |  - `g` is later dropped here\nnote: `Send` is required because of this where clause\n  --&gt; src/main.rs:5:1\n   |\n5  | fn is_send&lt;T: Send&gt;(t: T) {\n   |            -------\n</pre></div>",
        "id": 176506930,
        "sender_full_name": "davidtwco",
        "timestamp": 1569359637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> is your branch pushed somewhere I can take a look?</p>",
        "id": 176559863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569415328
    },
    {
        "content": "<p>Might help me to give an intelligent answer</p>",
        "id": 176559888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569415342
    },
    {
        "content": "<p>Not yet, can do shortly.</p>",
        "id": 176561201,
        "sender_full_name": "davidtwco",
        "timestamp": 1569416286
    },
    {
        "content": "<p>woah what is <em>that</em> :)</p>",
        "id": 176561916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569416734
    },
    {
        "content": "<p>Oops.</p>",
        "id": 176562356,
        "sender_full_name": "davidtwco",
        "timestamp": 1569416999
    },
    {
        "content": "<p><a href=\"https://github.com/davidtwco/rust/tree/issue-64130-async-error-definition\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/issue-64130-async-error-definition\">https://github.com/davidtwco/rust/tree/issue-64130-async-error-definition</a> - copying and pasting is hard.</p>",
        "id": 176562423,
        "sender_full_name": "davidtwco",
        "timestamp": 1569417026
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 176563349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569417657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so I'm looking at your branch now -- I think the problem is that you are not getting the <code>HirId</code> of the correct type. I see this:</p>",
        "id": 176667196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511078
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr_hir_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tables</span><span class=\"p\">.</span><span class=\"n\">generator_interior_exprs</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">).</span><span class=\"n\">last</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176667198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511081
    },
    {
        "content": "<p>but I think what you want to do is to look at the causation chain</p>",
        "id": 176667247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511097
    },
    {
        "content": "<p>Ah, I look at those types for other generator interiors in the chain..?</p>",
        "id": 176667262,
        "sender_full_name": "davidtwco",
        "timestamp": 1569511113
    },
    {
        "content": "<p>the <em>actual error</em> should be for some type <code>T</code> which is a part of the generator</p>",
        "id": 176667268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511118
    },
    {
        "content": "<p>not the other generators</p>",
        "id": 176667273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511123
    },
    {
        "content": "<p>the chain should look something like this:</p>\n<ul>\n<li>some type T, part of</li>\n<li>generator interior, part of</li>\n<li>generator</li>\n</ul>",
        "id": 176667292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511138
    },
    {
        "content": "<p>really the interior should not be part of that, actually</p>",
        "id": 176667304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511146
    },
    {
        "content": "<p>(I guess i'm going to have to teach myself to use <code>*</code> for lists, dang it)</p>",
        "id": 176667318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511163
    },
    {
        "content": "<blockquote>\n<p>really the interior should not be part of that, actually</p>\n</blockquote>\n<p>but I think it is today</p>",
        "id": 176667324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511170
    },
    {
        "content": "<p>so you want to find that type <code>T</code>, and then find its index</p>",
        "id": 176667346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511182
    },
    {
        "content": "<blockquote>\n<p>but I think it is today</p>\n</blockquote>\n<p>It is on the PR.</p>",
        "id": 176667351,
        "sender_full_name": "davidtwco",
        "timestamp": 1569511186
    },
    {
        "content": "<p>Where do I get <code>T</code>?</p>",
        "id": 176667358,
        "sender_full_name": "davidtwco",
        "timestamp": 1569511193
    },
    {
        "content": "<p>(yeah, that's a bug, but a separate one)</p>",
        "id": 176667362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> let me look at the debug output a bit, it would be the <code>self_ty</code> from the obligation or something</p>",
        "id": 176667458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511235
    },
    {
        "content": "<p>Sure. On the last generator in the chain (which is the only one I'm looking at now), it's the future, IIRC.</p>",
        "id": 176667537,
        "sender_full_name": "davidtwco",
        "timestamp": 1569511286
    },
    {
        "content": "<p>to make life easier, maybe we should add the <code>DefId</code> of the generator to the witness type</p>",
        "id": 176667689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511381
    },
    {
        "content": "<p>ah well never mind that hardly matters</p>",
        "id": 176667713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511398
    },
    {
        "content": "<p>ok so the data structures here are sort of annoying</p>",
        "id": 176667840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511487
    },
    {
        "content": "<p>in the example example we have, the type we want is the <code>MutexGuard</code> type, which is part of the initial <code>Obligation</code></p>",
        "id": 176667859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511501
    },
    {
        "content": "<p>unfortunately your function is generic over T so it can't readily extract that :)</p>",
        "id": 176667880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511518
    },
    {
        "content": "<p>though we could add a trait bound for it</p>",
        "id": 176667887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511523
    },
    {
        "content": "<p>or we could make some variant of <code>note_obligation_cause</code> that applies when we have a <code>Obligation&lt;TraitRef&gt;</code> or whatever</p>",
        "id": 176667909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511539
    },
    {
        "content": "<p><em>if</em> you have to climb the stack, however, the self-type would come from the <code>parent_trait_ref</code> at each step</p>",
        "id": 176667979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511573
    },
    {
        "content": "<p>so right now you have something like</p>\n<div class=\"codehilite\"><pre><span></span>Obligation(\n    MutexGuard: Send, // &lt;-- what you have to prove, and failed\n    DerivedObligation {\n        parent_trait_ref: GeneratorWitness(...), // annoying\n        parent_cause: DerivedObligation {\n            parent_trait_ref: Generator(def_id), // &lt;-- what we see that tells us we are in a generator\n            parent_cause: ... // irrelevant\n</pre></div>",
        "id": 176668062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511661
    },
    {
        "content": "<p>actually adding a <code>DefId</code> to the generator witness might help a little</p>",
        "id": 176668070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511668
    },
    {
        "content": "<p>the idea would be \"when we see a \"cause\" that is a DerivedObligation from a  generator witness, we get its def-id, and we take the <em>self type</em> of the current thing we are trying to prove\"</p>",
        "id": 176668125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511692
    },
    {
        "content": "<p>if we iterate to the next step, we get the self-type from the <code>parent_trait_ref</code> and repeat</p>",
        "id": 176668150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511721
    },
    {
        "content": "<p>but even w/o modifying the <code>GeneratorWitness</code> would be possible, just .. hairier</p>",
        "id": 176668169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511736
    },
    {
        "content": "<p>does that make sense, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>? (I'm figuring you'd prefer to make the changes? I probably don't have time anyway, though I'm tempted to tinker with it :P)</p>",
        "id": 176668204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511763
    },
    {
        "content": "<p>(but actually today is super full for me)</p>",
        "id": 176668219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511774
    },
    {
        "content": "<p>I think so, with that extra context I'll take another look later today.</p>",
        "id": 176668309,
        "sender_full_name": "davidtwco",
        "timestamp": 1569511817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Sorry for the delay here, updated <a href=\"https://github.com/davidtwco/rust/tree/issue-64130-async-error-definition\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/issue-64130-async-error-definition\">the branch</a>. I'm now getting an error that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n  --&gt; $DIR/issue-64130-non-send-future-diags.rs:23:5\n   |\nLL | fn is_send&lt;T: Send&gt;(t: T) {\n   | ------------------------- required by `is_send`\n...\nLL |     is_send(foo());\n   |     ^^^^^^^ `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely\n   |\n   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard&lt;&#39;_, u32&gt;`\nnote: future is not send because this value is used across an await\n  --&gt; $DIR/issue-64130-non-send-future-diags.rs:13:10\n   |\nLL | async fn bar(x: &amp;Mutex&lt;u32&gt;) {\n   |          ^^^\nLL |     let g = x.lock().unwrap();\n   |         - has type `std::sync::MutexGuard&lt;&#39;_, u32&gt;`\nLL |     baz().await;\n   |     ----------- await occurs here, with `g` maybe used later\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n</pre></div>\n\n\n<p>Almost there, just missing the \"is dropped here\" part of your sketch. It is regressing one other test (see the blessed changes on the branch, changes an error to a cycle error) which I've not looked into fixing yet.</p>",
        "id": 176846518,
        "sender_full_name": "davidtwco",
        "timestamp": 1569713804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> a quick look: a diagnostic item should be used instead of a lang item</p>",
        "id": 176846747,
        "sender_full_name": "centril",
        "timestamp": 1569714277
    },
    {
        "content": "<p>Will look into changing that tomorrow.</p>",
        "id": 176846768,
        "sender_full_name": "davidtwco",
        "timestamp": 1569714355
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/64895\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64895\">#64895</a></p>",
        "id": 176872416,
        "sender_full_name": "davidtwco",
        "timestamp": 1569764453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> that looks pretty awesome! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 176927735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569847127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I left a <a href=\"https://github.com/rust-lang/rust/pull/64895#pullrequestreview-295262273\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64895#pullrequestreview-295262273\">few nits</a> here -- I see <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> also r+'d it</p>",
        "id": 176976895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879235
    },
    {
        "content": "<p>I edited the description to <code>cc</code> the issue, vs \"fixing\" it</p>",
        "id": 176976955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've updated the PR to resolve your comments.</p>",
        "id": 176979781,
        "sender_full_name": "davidtwco",
        "timestamp": 1569881827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/pull/64895#pullrequestreview-295283005\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64895#pullrequestreview-295283005\">wdyt?</a></p>",
        "id": 176980205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569882238
    },
    {
        "content": "<p>Looks good, will update PR.</p>",
        "id": 176980292,
        "sender_full_name": "davidtwco",
        "timestamp": 1569882297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> updated again!</p>",
        "id": 176981192,
        "sender_full_name": "davidtwco",
        "timestamp": 1569883315
    },
    {
        "content": "<p>oh oops, I thought it was waiting for my review</p>",
        "id": 177028221,
        "sender_full_name": "oli",
        "timestamp": 1569912594
    },
    {
        "content": "<p>Looks like the PR <a href=\"https://github.com/rust-lang/rust/issues/64964\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64964\">caused an ICE</a></p>",
        "id": 177131038,
        "sender_full_name": "davidtwco",
        "timestamp": 1570005035
    },
    {
        "content": "<p>d'oh :)</p>",
        "id": 177147321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570021486
    },
    {
        "content": "<p>ah, I see there's a fix</p>",
        "id": 177147464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570021600
    },
    {
        "content": "<p>and  it looks quite reasonable, vg</p>",
        "id": 177147480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570021608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> you had mentioned being up for doing the remaining work, do you have a clear picture of what that is and how to go about it?</p>",
        "id": 177147498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570021620
    },
    {
        "content": "<p>Was it just intercepting the error earlier (or cancelling it in that function and issuing a new one) with a more specific message?</p>",
        "id": 177147825,
        "sender_full_name": "davidtwco",
        "timestamp": 1570021859
    },
    {
        "content": "<p>i.e. <a href=\"https://github.com/rust-lang/rust/pull/64895#discussion_r329794926\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64895#discussion_r329794926\">this comment</a></p>",
        "id": 177147835,
        "sender_full_name": "davidtwco",
        "timestamp": 1570021868
    },
    {
        "content": "<p>yes</p>",
        "id": 177148763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570022512
    },
    {
        "content": "<p>ideally we'd produce <a href=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-534300534\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-534300534\">this message</a> --</p>",
        "id": 177148877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570022553
    },
    {
        "content": "<p>I think there are a few nits, e.g. we'd want to extract the top-most generator frame so we can say things like \"future returned by <code>foo()</code>\"</p>",
        "id": 177148892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570022572
    },
    {
        "content": "<p>we may also want to special case \"future cannot be sent between threads safely\", though I think right now some of that is done via the more generic <code>#[rustc_error]</code> attributes or whatever, maybe we want to extend those with an optional \"future\" attribute or something?</p>",
        "id": 177148965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570022622
    },
    {
        "content": "<p>but I'm happy to take incremental steps toward it</p>",
        "id": 177149359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570022880
    },
    {
        "content": "<blockquote>\n<p>I think there are a few nits, e.g. we'd want to extract the top-most generator frame so we can say things like \"future returned by <code>foo()</code>\"</p>\n</blockquote>\n<p>I think this and the more-specific error shouldn't be too hard.</p>",
        "id": 177149452,
        "sender_full_name": "davidtwco",
        "timestamp": 1570022917
    },
    {
        "content": "<p>Right now, the error is pretty general in that it isn't just send that it cares about.</p>",
        "id": 177149484,
        "sender_full_name": "davidtwco",
        "timestamp": 1570022943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> yep -- and we probably need to consider <code>Sync</code> too --</p>",
        "id": 177151646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570024315
    },
    {
        "content": "<p>but basically this whole thing is tailored to auto traits</p>",
        "id": 177151650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570024319
    },
    {
        "content": "<p>(hmm, maybe <code>Clone</code>?)</p>",
        "id": 177151696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570024324
    },
    {
        "content": "<p>ah, no, of course not, only auto traits, \"because <code>impl Trait</code> leakage\"</p>",
        "id": 177151810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570024397
    },
    {
        "content": "<p>it so happens of course that send/sync are a very common case</p>",
        "id": 177151843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570024428
    },
    {
        "content": "<p>I can make it specialised for those pretty easily I think.</p>",
        "id": 177152778,
        "sender_full_name": "davidtwco",
        "timestamp": 1570025073
    },
    {
        "content": "<p>(I'm seeing that ICE just on a <code>-i</code> bootstrap, actually)</p>",
        "id": 177164411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570032136
    },
    {
        "content": "<p>I did too.</p>",
        "id": 177164449,
        "sender_full_name": "davidtwco",
        "timestamp": 1570032166
    },
    {
        "content": "<p>(this morning, not before it landed)</p>",
        "id": 177164456,
        "sender_full_name": "davidtwco",
        "timestamp": 1570032170
    },
    {
        "content": "<p>Was the PR meant to fix all instances of <code>&lt;Some type&gt; cannot be sent between threads safely</code> regarding futures? I have one that does not end in a <code>note: required by &lt;X&gt;</code>. I can find out if it's possible for me to share this code (it would be an amazing example of an <em>extremely</em> long type being converted to a nice error message)</p>",
        "id": 177340498,
        "sender_full_name": "Paul Faria",
        "timestamp": 1570197110
    },
    {
        "content": "<p>not necessarily -- but it'd be good to see your example <span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span></p>",
        "id": 177348260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570201832
    },
    {
        "content": "<p>Would just the error suffice or access to the code would help too? I can see if I'm allowed to publish it opensource, it's just a utility tool.</p>",
        "id": 177352380,
        "sender_full_name": "Paul Faria",
        "timestamp": 1570204487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> the error might suffice</p>",
        "id": 177361604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570210347
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Nashenas88/f39c143daf2147d3d599ec78c5f6c961\" target=\"_blank\" title=\"https://gist.github.com/Nashenas88/f39c143daf2147d3d599ec78c5f6c961\">https://gist.github.com/Nashenas88/f39c143daf2147d3d599ec78c5f6c961</a> hopefully this helps</p>",
        "id": 177368102,
        "sender_full_name": "Paul Faria",
        "timestamp": 1570214771
    },
    {
        "content": "<p>If I remember from reading <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s gist, I thnk we might have been somewhat conservative when the generator appears inside of a struct, does that sound right <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>?</p>",
        "id": 177371956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570217700
    },
    {
        "content": "<p>If so, I wonder if we should be more general than that</p>",
        "id": 177371975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570217706
    },
    {
        "content": "<p>(I sort of think so)</p>",
        "id": 177371986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570217712
    },
    {
        "content": "<p>It only considers cases where the obligation stack is generators, generator interiors, opaque types and <code>std::future::GenFuture</code>.</p>",
        "id": 177373290,
        "sender_full_name": "davidtwco",
        "timestamp": 1570218584
    },
    {
        "content": "<p>And the last obligation is a item/binding obligation.</p>",
        "id": 177373461,
        "sender_full_name": "davidtwco",
        "timestamp": 1570218687
    },
    {
        "content": "<blockquote>\n<p>It only considers cases where the obligation stack is generators, generator interiors, opaque types and <code>std::future::GenFuture</code>.</p>\n</blockquote>\n<p>notably, anyone using combinators will be unable to benefit here :(</p>",
        "id": 177374499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219478
    },
    {
        "content": "<p>I think we should consider extending that to \"random structs\" that live \"atop\" the generators</p>",
        "id": 177374512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219490
    },
    {
        "content": "<blockquote>\n<p>And the last obligation is a item/binding obligation.</p>\n</blockquote>\n<p>I'm not sure I understand that</p>",
        "id": 177374550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219522
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>And the last obligation is a item/binding obligation.</p>\n</blockquote>\n<p>I'm not sure I understand that</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709\">https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709</a></p>",
        "id": 177374817,
        "sender_full_name": "davidtwco",
        "timestamp": 1570219717
    },
    {
        "content": "<p><strong>Update:</strong> I've got the error changed as shown in the diff below:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/test/ui/async-await/issue-64130-non-send-future-diags.stderr b/src/test/ui/async-await/issue-64130-non-send-future-diags.stderr</span>\n<span class=\"gh\">index 9e9fc52e30b..a393669a3ab 100644</span>\n<span class=\"gd\">--- a/src/test/ui/async-await/issue-64130-non-send-future-diags.stderr</span>\n<span class=\"gi\">+++ b/src/test/ui/async-await/issue-64130-non-send-future-diags.stderr</span>\n<span class=\"gu\">@@ -1,14 +1,14 @@</span>\n<span class=\"gd\">-error[E0277]: `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely</span>\n<span class=\"gi\">+error[E0277]: future cannot be sent between threads safely</span>\n   --&gt; $DIR/issue-64130-non-send-future-diags.rs:23:5\n    |\n LL | fn is_send&lt;T: Send&gt;(t: T) {\n    |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send(foo());\n<span class=\"gd\">-   |     ^^^^^^^ `std::sync::MutexGuard&lt;&#39;_, u32&gt;` cannot be sent between threads safely</span>\n<span class=\"gi\">+   |     ^^^^^^^ future returned by `foo` is not send</span>\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard&lt;&#39;_, u32&gt;`\n<span class=\"gd\">-note: future does not implement `std::marker::Send` as this value is used across an await</span>\n<span class=\"gi\">+note: future is not send as this value is used across an await</span>\n   --&gt; $DIR/issue-64130-non-send-future-diags.rs:15:5\n    |\n LL |     let g = x.lock().unwrap();\n</pre></div>\n\n\n<p>I've generalized it a bit so that combinators and other cases should use this error too and that there's a specialized version for sync - not written test cases for those yet though. I'm going to polish it off a bit locally before throwing a PR up.</p>",
        "id": 177478534,
        "sender_full_name": "davidtwco",
        "timestamp": 1570399487
    },
    {
        "content": "<p>\"is not send\" reads weird.</p>",
        "id": 177478882,
        "sender_full_name": "nagisa",
        "timestamp": 1570400177
    },
    {
        "content": "<p>I was just working to <a href=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-534300534\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-534300534\">the draft in this comment</a>, I think it reads fine though? Any suggestions for alternate wording?</p>",
        "id": 177478894,
        "sender_full_name": "davidtwco",
        "timestamp": 1570400257
    },
    {
        "content": "<blockquote>\n<p>I was just working to <a href=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-534300534\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64130#issuecomment-534300534\">the draft in this comment</a>, I think it reads fine though? Any suggestions for alternate wording?</p>\n</blockquote>\n<p>is not <code>Send</code>? That capital letter does a lot, and so does the inline code markup</p>",
        "id": 177478941,
        "sender_full_name": "nagisa",
        "timestamp": 1570400321
    },
    {
        "content": "<p>I can change it to that.</p>",
        "id": 177478950,
        "sender_full_name": "davidtwco",
        "timestamp": 1570400355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> looks good to me!</p>",
        "id": 177516153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570453086
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709\">https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709</a></p>\n</blockquote>\n<p>ok ok I see -- i'm not sure if that's relevant to <span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span>'s example. It's probably the case that we could lift this restriction if needed.</p>",
        "id": 177516192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570453121
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709\">https://github.com/rust-lang/rust/blob/master/src/librustc/traits/error_reporting.rs#L1708-L1709</a></p>\n</blockquote>\n<p>ok ok I see -- i'm not sure if that's relevant to <span class=\"user-mention silent\" data-user-id=\"116114\">Paul Faria</span>'s example. It's probably the case that we could lift this restriction if needed.</p>\n</blockquote>\n<p>I have in my newest changes.</p>",
        "id": 177516385,
        "sender_full_name": "davidtwco",
        "timestamp": 1570453254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> by any chance, could you try <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a9dbea32d31457d50d40b99c52ee214\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a9dbea32d31457d50d40b99c52ee214\">this example</a> on your current branch?</p>",
        "id": 177715828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570629458
    },
    {
        "content": "<p>I'm curious if the diagnostics at least are improved</p>",
        "id": 177715838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570629464
    },
    {
        "content": "<p>Still the old error, I'll add that as a test case to get working.</p>",
        "id": 177716076,
        "sender_full_name": "davidtwco",
        "timestamp": 1570629596
    },
    {
        "content": "<p>Just got around to looking at that case now, the diagnostic doesn't trigger for that because <code>wat</code> isn't an <code>async fn</code>, just a <code>fn</code> with an <code>async move { }</code> and for a reason I've yet to understand, this diagnostic will cause a cycle-error for <code>async move { }</code>.</p>",
        "id": 177997812,
        "sender_full_name": "davidtwco",
        "timestamp": 1570900356
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-lang/rust/issues/65345\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65345\">#65345</a> with what I have so far.</p>",
        "id": 177998169,
        "sender_full_name": "davidtwco",
        "timestamp": 1570900876
    },
    {
        "content": "<p>Struggling to make it apply to more cases, it still feels very tied to a handful of specific conditions.</p>",
        "id": 177998187,
        "sender_full_name": "davidtwco",
        "timestamp": 1570900918
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> -- so <a href=\"https://github.com/rust-lang/rust/pull/65345\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65345\">https://github.com/rust-lang/rust/pull/65345</a> is causing add'l cycle errors?</p>",
        "id": 178428004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571351632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> No. But, if I remove the check that there must be an <code>async fn</code>, so that it works with <code>async move { }</code> blocks, then <em>that</em> causes cycle errors (for an example, see <a href=\"#narrow/stream/187312-wg-async-foundations/topic/future-not-send.20diagnostic.20.2364130/near/177715828\" title=\"#narrow/stream/187312-wg-async-foundations/topic/future-not-send.20diagnostic.20.2364130/near/177715828\">the case you sent on Oct 9th</a>).</p>",
        "id": 178428096,
        "sender_full_name": "davidtwco",
        "timestamp": 1571351713
    },
    {
        "content": "<p>I should clarify, this happens without that patch, the original patch did the same, which is why that check for <code>async fn</code> specifically existed in the first place.</p>",
        "id": 178428169,
        "sender_full_name": "davidtwco",
        "timestamp": 1571351790
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65345/files#diff-0e12890ad498e250783f40f88a8b8ec6R1824-R1835\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65345/files#diff-0e12890ad498e250783f40f88a8b8ec6R1824-R1835\">These lines specifically</a></p>",
        "id": 178428196,
        "sender_full_name": "davidtwco",
        "timestamp": 1571351829
    },
    {
        "content": "<p>I read the \"Future is not Send\" blog post and have a question about the error and diagnostic. If this isn't the right place to ask, please redirect me to the right place.</p>\n<p><a href=\"https://blog.rust-lang.org/inside-rust/2019/10/11/AsyncAwait-Not-Send-Error-Improvements.html\" target=\"_blank\" title=\"https://blog.rust-lang.org/inside-rust/2019/10/11/AsyncAwait-Not-Send-Error-Improvements.html\">https://blog.rust-lang.org/inside-rust/2019/10/11/AsyncAwait-Not-Send-Error-Improvements.html</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Mutex</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">baz</span><span class=\"p\">().</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>As NLL is now in use, why does <code>g</code> live until the end of the function? Shouldn't it be dropped once it is no longer used?</p>",
        "id": 178661566,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1571668902
    },
    {
        "content": "<p>NLL has little to do with this -- you'd want the lock to still be taken for the duration of the scope</p>",
        "id": 178663689,
        "sender_full_name": "simulacrum",
        "timestamp": 1571670199
    },
    {
        "content": "<p>i.e. it's not really a lifetimes issue</p>",
        "id": 178663697,
        "sender_full_name": "simulacrum",
        "timestamp": 1571670206
    },
    {
        "content": "<p>in the <code>'a</code> sense :)</p>",
        "id": 178663721,
        "sender_full_name": "simulacrum",
        "timestamp": 1571670213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you know why this happens? It's probably not specific to locks, so what is the underlying issue? (If you don't know feel free to redirect me)</p>",
        "id": 178672387,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1571675333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> So the code example can be rewritten as the following, which illustrates why it would change behavior for g's lifetime to end before the await</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Mutex</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">baz</span><span class=\"p\">().</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178675359,
        "sender_full_name": "simulacrum",
        "timestamp": 1571677423
    },
    {
        "content": "<p>(since the code in the destructor would then run earlier)</p>",
        "id": 178675385,
        "sender_full_name": "simulacrum",
        "timestamp": 1571677437
    },
    {
        "content": "<p>Right, but I thought NLL would have changed it to be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Mutex</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mem</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">baz</span><span class=\"p\">().</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178676056,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1571677918
    },
    {
        "content": "<p>What stops this from happening?</p>",
        "id": 178676137,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1571677955
    },
    {
        "content": "<p>NLL does not change destructor ordering</p>",
        "id": 178679824,
        "sender_full_name": "simulacrum",
        "timestamp": 1571680144
    },
    {
        "content": "<p>that would be a massive breaking change</p>",
        "id": 178679834,
        "sender_full_name": "simulacrum",
        "timestamp": 1571680149
    },
    {
        "content": "<p>like, that drop releases the lock</p>",
        "id": 178679846,
        "sender_full_name": "simulacrum",
        "timestamp": 1571680155
    },
    {
        "content": "<p>if we previously had that for the entire block and now don't that could have a number of unexpected effects that people don't want</p>",
        "id": 178679872,
        "sender_full_name": "simulacrum",
        "timestamp": 1571680174
    },
    {
        "content": "<p>Ok, I see. It's a difference between reference and data lifetimes. The data lifetimes didn't change as part of NLL, only references. Thanks for sticking with me to figure this out!</p>",
        "id": 178681156,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1571680930
    },
    {
        "content": "<p>This distinction is talked about in the NLL RFC:</p>\n<blockquote>\n<p>Note that Rust uses the term lifetime in a very particular way. In everyday speech, the word lifetime can be used in two distinct -- but similar -- ways:</p>\n<ol>\n<li>The lifetime of a reference, corresponding to the span of time in which that reference is used.</li>\n<li>The lifetime of a value, corresponding to the span of time before that value gets freed (or, put another way, before the destructor for the value runs).</li>\n</ol>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md\">https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md</a></p>",
        "id": 178681257,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1571681009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any thoughts on why the diagnostic improvement causes cycle errors when I allow it to apply to errors originating from <code>async { }</code> (not <code>async fn</code>)?</p>",
        "id": 178947540,
        "sender_full_name": "davidtwco",
        "timestamp": 1571921081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I .. do not :) can I see the diff maybe?</p>",
        "id": 178948025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571921467
    },
    {
        "content": "<p>eddyb might've fixed this in a recent PR</p>",
        "id": 178948042,
        "sender_full_name": "simulacrum",
        "timestamp": 1571921487
    },
    {
        "content": "<p>not sure though, I recall something similar</p>",
        "id": 178948049,
        "sender_full_name": "simulacrum",
        "timestamp": 1571921493
    },
    {
        "content": "<p>The diff would be removing <a href=\"https://github.com/rust-lang/rust/pull/65345/files#diff-0e12890ad498e250783f40f88a8b8ec6R1824-R1835\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65345/files#diff-0e12890ad498e250783f40f88a8b8ec6R1824-R1835\">these lines</a>?</p>",
        "id": 178950073,
        "sender_full_name": "davidtwco",
        "timestamp": 1571922933
    },
    {
        "content": "<blockquote>\n<p>eddyb might've fixed this in a recent PR</p>\n</blockquote>\n<p>I'll rebase and check.</p>",
        "id": 178950079,
        "sender_full_name": "davidtwco",
        "timestamp": 1571922936
    },
    {
        "content": "<p>oh I'm not sure it landed... let me look</p>",
        "id": 178951315,
        "sender_full_name": "simulacrum",
        "timestamp": 1571923771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I was referring to <a href=\"https://github.com/rust-lang/rust/pull/65743\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65743\">https://github.com/rust-lang/rust/pull/65743</a></p>",
        "id": 178951350,
        "sender_full_name": "simulacrum",
        "timestamp": 1571923794
    },
    {
        "content": "<p>not sure if that actually relates or not though</p>",
        "id": 178951378,
        "sender_full_name": "simulacrum",
        "timestamp": 1571923803
    },
    {
        "content": "<p>It wouldn't take much to rebase atop and check, thanks!</p>",
        "id": 178951433,
        "sender_full_name": "davidtwco",
        "timestamp": 1571923831
    },
    {
        "content": "<p>Unfortunately, that didn't do the trick.</p>",
        "id": 178954445,
        "sender_full_name": "davidtwco",
        "timestamp": 1571925704
    },
    {
        "content": "<p>Still cycle errors.</p>",
        "id": 178954450,
        "sender_full_name": "davidtwco",
        "timestamp": 1571925707
    },
    {
        "content": "<p>This is an example of one of the cycle errors:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0391]: cycle detected when processing `main`\n  --&gt; /home/david/projects/rust/rust4/src/test/ui/generator/not-send-sync.rs:5:1\n   |\nLL | fn main() {\n   | ^^^^^^^^^\n   |\nnote: ...which requires processing `main::{{closure}}#1`...\n  --&gt; /home/david/projects/rust/rust4/src/test/ui/generator/not-send-sync.rs:16:17\n   |\nLL |     assert_send(|| {\n   |                 ^^\n   = note: ...which again requires processing `main`, completing the cycle\nnote: cycle used when processing `main::{{closure}}#0`\n  --&gt; /home/david/projects/rust/rust4/src/test/ui/generator/not-send-sync.rs:9:17\n   |\nLL |     assert_sync(|| {\n   |                 ^^\n\nerror: aborting due to previous error\n</pre></div>",
        "id": 178956303,
        "sender_full_name": "davidtwco",
        "timestamp": 1571926650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> well I guess the problem is <em>somehow</em> related to invoking <code>typeck_tables_of</code> on the generator</p>",
        "id": 179077349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028655
    },
    {
        "content": "<p>what's the example?</p>",
        "id": 179077376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028683
    },
    {
        "content": "<p>I am guessing that there is some error using the generator</p>",
        "id": 179077434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028704
    },
    {
        "content": "<p>triggered by the context that also <em>created</em> the generator</p>",
        "id": 179077443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028709
    },
    {
        "content": "<p>and hence we are reporting the error while type-checking that context</p>",
        "id": 179077450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028717
    },
    {
        "content": "<p>and so there is a sort of cycle</p>",
        "id": 179077459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028723
    },
    {
        "content": "<p>that said, I would expect it may be possible to trigger the error even without removing those lines?</p>",
        "id": 179077484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028743
    },
    {
        "content": "<p>but maybe there's some reason you can't</p>",
        "id": 179077493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572028746
    },
    {
        "content": "<p>That example was from the not-send-sync test.</p>",
        "id": 179080215,
        "sender_full_name": "davidtwco",
        "timestamp": 1572030853
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> by any chance, could you try <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a9dbea32d31457d50d40b99c52ee214\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a9dbea32d31457d50d40b99c52ee214\">this example</a> on your current branch?</p>\n</blockquote>\n<p>This case also triggers it.</p>",
        "id": 179080241,
        "sender_full_name": "davidtwco",
        "timestamp": 1572030878
    },
    {
        "content": "<p>I think because I rely on the information I put in the typeck table to generate the error, as soon as I get rid of that check, and it gets to that point, it cycle errors. I just don’t know how to get around that.</p>",
        "id": 179081054,
        "sender_full_name": "davidtwco",
        "timestamp": 1572031645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so I have to apply a diff to see the cycle errors?</p>",
        "id": 179428125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440291
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 179428137,
        "sender_full_name": "davidtwco",
        "timestamp": 1572440310
    },
    {
        "content": "<p>The PR currently passes everything by prohibiting the diagnostic from applying to non-<code>async fn</code> cases.</p>",
        "id": 179428159,
        "sender_full_name": "davidtwco",
        "timestamp": 1572440341
    },
    {
        "content": "<p>Same as the original PR.</p>",
        "id": 179428174,
        "sender_full_name": "davidtwco",
        "timestamp": 1572440347
    },
    {
        "content": "<p>ok I see</p>",
        "id": 179428212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440380
    },
    {
        "content": "<p>I commented out the <a href=\"https://github.com/rust-lang/rust/pull/65345/files#diff-0e12890ad498e250783f40f88a8b8ec6R1824-R1835\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65345/files#diff-0e12890ad498e250783f40f88a8b8ec6R1824-R1835\">lines you mentioned earlier</a></p>",
        "id": 179428225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440390
    },
    {
        "content": "<p>I'm doing a build</p>",
        "id": 179428228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440392
    },
    {
        "content": "<p>that said, I think I know what the problem is</p>",
        "id": 179428309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440427
    },
    {
        "content": "<p>what I'm <em>not</em> sure of is the best way to fix it</p>",
        "id": 179428678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440668
    },
    {
        "content": "<p>ah, hmm</p>",
        "id": 179428737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572440717
    },
    {
        "content": "<p>So I'm trying something <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> -- which is to get the typeck-tables optionally from the current <code>InferCtxt</code></p>",
        "id": 179429875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441431
    },
    {
        "content": "<p>but hmm that doesn't <em>quite</em> help</p>",
        "id": 179429975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441485
    },
    {
        "content": "<p>oh, I bet I know why</p>",
        "id": 179429985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572441493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ok I pushed a commit</p>",
        "id": 179431152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442208
    },
    {
        "content": "<p>it's marked as <code>[wip]</code></p>",
        "id": 179431163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442215
    },
    {
        "content": "<p>here's the good news: no more cycle errors</p>",
        "id": 179431169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442222
    },
    {
        "content": "<p>the bad news is: the nice diagnostic doesn't trigger</p>",
        "id": 179431174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442227
    },
    {
        "content": "<p>I have to run for a bit but my <em>guess</em> here is that the \"in-progress tables\" haven't had the generator information added to them yet?</p>",
        "id": 179431213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442258
    },
    {
        "content": "<p>otoh, I thought that we added that information at the same time as we resolved the inference variables, so that could be just wrong</p>",
        "id": 179431257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442290
    },
    {
        "content": "<blockquote>\n<p>here's the good news: no more cycle errors</p>\n</blockquote>\n<p>I'm like 90% sure this fix is sufficient -- I was a bit afraid you might have</p>\n<ul>\n<li>function X</li>\n<li>requires function Y</li>\n<li>requires function X</li>\n</ul>\n<p>so that the in-progress tables are not the same as the \"current function\" being tested, but I think that you can't actually wind up here in that case, because you can't have a generator type with the def-id</p>",
        "id": 179431363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442352
    },
    {
        "content": "<p>/me -&gt; out</p>",
        "id": 179431375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572442358
    },
    {
        "content": "<p>Thanks! Will take a look why it doesn't trigger now.</p>",
        "id": 179431718,
        "sender_full_name": "davidtwco",
        "timestamp": 1572442566
    },
    {
        "content": "<p>For <code>not-send-sync</code>, I get </p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n  --&gt; src/test/ui/generator/not-send-sync.rs:16:5\n   |\n7  |     fn assert_send&lt;T: Send&gt;(_: T) {}\n   |        -----------    ---- required by this bound in `main::assert_send`\n...\n16 |     assert_send(|| {\n   |     ^^^^^^^^^^^ `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   |\n   = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell&lt;i32&gt;`\n   = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;std::cell::Cell&lt;i32&gt;`\n   = note: required because it appears within the type `[generator@src/test/ui/generator/not-send-sync.rs:16:17: 20:6 a:&amp;std::cell::Cell&lt;i32&gt; _]`\n\nerror: future cannot be shared between threads safely\n  --&gt; src/test/ui/generator/not-send-sync.rs:9:5\n   |\n6  |     fn assert_sync&lt;T: Sync&gt;(_: T) {}\n   |        -----------    ---- required by this bound in `main::assert_sync`\n...\n9  |     assert_sync(|| {\n   |     ^^^^^^^^^^^ future returned by `main` is not `Sync`\n   |\n   = help: within `[generator@src/test/ui/generator/not-send-sync.rs:9:17: 13:6 {std::cell::Cell&lt;i32&gt;, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell&lt;i32&gt;`\nnote: future is not `Sync` as this value is used across an await\n  --&gt; src/test/ui/generator/not-send-sync.rs:12:9\n   |\n11 |         let a = Cell::new(2);\n   |             - has type `std::cell::Cell&lt;i32&gt;`\n12 |         yield;\n   |         ^^^^^ await occurs here, with `a` maybe used later\n13 |     });\n   |     - `a` is later dropped here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n</pre></div>\n\n\n<p>I think that's correct, <code>assert_send</code> doesn't have any variables inside the generator that aren't <code>Send</code>, it's only the captured var from <em>outside</em> the generator.</p>",
        "id": 179433579,
        "sender_full_name": "davidtwco",
        "timestamp": 1572443651
    },
    {
        "content": "<p>I'll need to adjust the wording so if it isn't async then we say \"yield\" instead of \"await\".</p>",
        "id": 179433623,
        "sender_full_name": "davidtwco",
        "timestamp": 1572443684
    },
    {
        "content": "<blockquote>\n<p>by any chance, could you try <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a9dbea32d31457d50d40b99c52ee214\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a9dbea32d31457d50d40b99c52ee214\">this example</a> on your current branch?</p>\n</blockquote>\n<p>this is the example I was saying doesn't trigger, I think</p>",
        "id": 179434550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572444203
    },
    {
        "content": "<p>Oh, I'll check that in a moment then.</p>",
        "id": 179434835,
        "sender_full_name": "davidtwco",
        "timestamp": 1572444347
    },
    {
        "content": "<p>The issue with that case is that the type in the obligation is <code>dyn Any + Send + 'static</code> but the generator interior list doesn't contain that, it does contain a <code>Client</code> (whose only field is the type we're looking for).</p>",
        "id": 179437214,
        "sender_full_name": "davidtwco",
        "timestamp": 1572445708
    },
    {
        "content": "<p>So I suppose I need to check if the generator interior type \"contains\" the target type.</p>",
        "id": 179437348,
        "sender_full_name": "davidtwco",
        "timestamp": 1572445793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> what I expected to do was to take the type from the frame \"just below\" the generator in the \"backtrace\"</p>",
        "id": 179439078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572446833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Current issue: checking two <code>&amp;Client</code> types (from that test case) for equality returns <code>false</code>, I assume that the region is different in the type, what function do I use to normalize for that?</p>",
        "id": 179449503,
        "sender_full_name": "davidtwco",
        "timestamp": 1572452300
    },
    {
        "content": "<p>Was previously just checking <code>TyS::same_type</code>.</p>",
        "id": 179449583,
        "sender_full_name": "davidtwco",
        "timestamp": 1572452368
    },
    {
        "content": "<p>(I've worked around it with a <code>builtin_deref</code>)</p>",
        "id": 179451522,
        "sender_full_name": "davidtwco",
        "timestamp": 1572453635
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65345#pullrequestreview-309376822\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65345#pullrequestreview-309376822\">Updated the PR</a> with my changes, left some comments where the diagnostic could get better or where I did a hack.</p>",
        "id": 179454469,
        "sender_full_name": "davidtwco",
        "timestamp": 1572455564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ok I'm going to pull this locally I guess</p>",
        "id": 183110408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576017715
    },
    {
        "content": "<p>ok I'm getting to this now, moving slower than I would like</p>",
        "id": 183170420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576079637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are you around at all ?</p>",
        "id": 183170468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576079643
    },
    {
        "content": "<p>I’m here</p>",
        "id": 183170497,
        "sender_full_name": "davidtwco",
        "timestamp": 1576079656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> reviewing the PR, I guess the thing you were least comfortable with was the use of <code>target_ty.builtin_deref</code>, right?</p>",
        "id": 183171945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576080452
    },
    {
        "content": "<p>That does feel a bit ad-hoc</p>",
        "id": 183171952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576080457
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 183171963,
        "sender_full_name": "davidtwco",
        "timestamp": 1576080468
    },
    {
        "content": "<p>It also failed for an example I checked at a previously weekly meeting, IIRC.</p>",
        "id": 183172041,
        "sender_full_name": "davidtwco",
        "timestamp": 1576080493
    },
    {
        "content": "<p>I am wondering if it's connected to <a href=\"https://github.com/rust-lang/rust/pull/65345#discussion_r337709167\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65345#discussion_r337709167\">my comment here</a> about just taking the last span in the table</p>",
        "id": 183172044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576080494
    },
    {
        "content": "<p>i.e., it feels like there's something missing to me,</p>",
        "id": 183172051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576080506
    },
    {
        "content": "<p>of knowing precisely what type/variable you are looking for</p>",
        "id": 183172059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576080513
    },
    {
        "content": "<p>I guess I will re-read a bit to try and see if I can be more specific</p>",
        "id": 183172075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576080525
    },
    {
        "content": "<p>If I remember correctly, the primary reason that <code>TyS::same_type</code> would return <code>false</code> was the <code>Region</code> in a <code>ty::Ref(..)</code>, which is why I went with that approach.</p>",
        "id": 183172372,
        "sender_full_name": "davidtwco",
        "timestamp": 1576080711
    },
    {
        "content": "<p>Though I feel like there was another case that the current code didn’t handle but we expected it to.</p>",
        "id": 183172429,
        "sender_full_name": "davidtwco",
        "timestamp": 1576080727
    },
    {
        "content": "<p>It was one of the examples you asked me to try in a recent weekly meeting.</p>",
        "id": 183172452,
        "sender_full_name": "davidtwco",
        "timestamp": 1576080739
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> maybe the easiest way for me to dig is to build a version without the calls to <code>builtin_deref</code> and compare the behavior..? I guess just removing those lines would be what we \"expect\"?</p>",
        "id": 183172922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081015
    },
    {
        "content": "<p>i.e., instead of <code>let ty = ty.builtin_deref().unwrap_or(ty);</code> just .. nothing?</p>",
        "id": 183172958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081036
    },
    {
        "content": "<p>Return the result of <code>TyS::same_type</code> in the <code>find</code> closure.</p>",
        "id": 183173001,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081081
    },
    {
        "content": "<p>That will make a test result change.</p>",
        "id": 183173048,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081090
    },
    {
        "content": "<p>iow this</p>",
        "id": 183173063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">target_span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tables</span><span class=\"p\">.</span><span class=\"n\">generator_interior_types</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">ty</span>::<span class=\"n\">GeneratorInteriorTypeCause</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">//let ty = ty.builtin_deref(false).map(|ty_and_mut| ty_and_mut.ty).unwrap_or(ty);</span>\n<span class=\"w\">                </span><span class=\"c1\">//let target_ty = target_ty.builtin_deref(false)</span>\n<span class=\"w\">                </span><span class=\"c1\">//    .map(|ty_and_mut| ty_and_mut.ty)</span>\n<span class=\"w\">                </span><span class=\"c1\">//    .unwrap_or(target_ty);</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span>::<span class=\"n\">same_type</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;maybe_note_obligation_cause_for_async_await: ty={:?} \\</span>\n<span class=\"s\">                        target_ty={:?} eq={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">eq</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183173069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081102
    },
    {
        "content": "<p>That’s what I’d expect.</p>",
        "id": 183173091,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081119
    },
    {
        "content": "<p>Some tests <em>should</em> stop passing.</p>",
        "id": 183173119,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081138
    },
    {
        "content": "<p>If I remember everything correctly.</p>",
        "id": 183173132,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081145
    },
    {
        "content": "<p>ok I'm giving that a try</p>",
        "id": 183173141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081154
    },
    {
        "content": "<p>(we might want to just \"erase regions\" when doing the comparison, potentially, as an alternative)</p>",
        "id": 183173159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081170
    },
    {
        "content": "<p>That’s what I tried to find before landing on that solution.</p>",
        "id": 183173263,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081219
    },
    {
        "content": "<p>do you remember btw why taking the \"last\" await-span makes sense?</p>\n<p>i.e., this line</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">await_span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tables</span><span class=\"p\">.</span><span class=\"n\">generator_interior_types</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">).</span><span class=\"n\">last</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183173487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081365
    },
    {
        "content": "<p>I suspect that I would have looked at the generator interior types and found one which was what I wanted.</p>",
        "id": 183173556,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081407
    },
    {
        "content": "<p>I feel like what I expet is</p>",
        "id": 183173589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081434
    },
    {
        "content": "<p>we find the index of a type within that list</p>",
        "id": 183173593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081438
    },
    {
        "content": "<p>I probably printed a note with each of them and found that the last was what I wanted.</p>",
        "id": 183173598,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081441
    },
    {
        "content": "<p>and then we just re-use it later to find the span</p>",
        "id": 183173642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081445
    },
    {
        "content": "<p>however</p>",
        "id": 183173750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081517
    },
    {
        "content": "<p>maybe the dta structure doesn't quite store what I expect</p>",
        "id": 183173760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081523
    },
    {
        "content": "<p>Unfortunately it’s been a while so I don’t quite remember.</p>",
        "id": 183173786,
        "sender_full_name": "davidtwco",
        "timestamp": 1576081538
    },
    {
        "content": "<p>I think I expected to have a <code>await_span</code> such that, for each type in the list, we also tracked some await (or yield) that caused us to include it</p>",
        "id": 183173793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081540
    },
    {
        "content": "<p>that's ok</p>",
        "id": 183173796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576081543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so I reproduced the problem, I'm trying a patch that uses <code>erase_regions</code>, which I imagine will work. It seems like the regions that appear in the interior types are generally naming the bound region from the generator, and hence not equal to anything else.</p>",
        "id": 183179479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576085034
    },
    {
        "content": "<p>Awesome.</p>",
        "id": 183179561,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085066
    },
    {
        "content": "<p>I wonder if that would effect the example you were talking about that didn't work</p>",
        "id": 183179563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576085067
    },
    {
        "content": "<p>I would easily imagine it doing so</p>",
        "id": 183179573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576085075
    },
    {
        "content": "<p>I wasn’t able to find it.</p>",
        "id": 183179579,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085079
    },
    {
        "content": "<p>The current \"built-in deref\" would only work for the simple case of <code>&amp;A</code> vs <code>&amp;B</code></p>",
        "id": 183179589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576085085
    },
    {
        "content": "<p>But it might just have been misremembering.</p>",
        "id": 183179594,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085088
    },
    {
        "content": "<p>but not e.g. <code>&amp;&amp;A</code> or <code>&amp;Foo&lt;'x&gt;</code></p>",
        "id": 183179598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576085090
    },
    {
        "content": "<p>Yeah, that’s why I didn’t like it.</p>",
        "id": 183179620,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085103
    },
    {
        "content": "<p>so for more complex examples it might well be that erasing all regions helps</p>",
        "id": 183179621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576085103
    },
    {
        "content": "<p>I suspect the example that I’m thinking of is the one that spurred on the builtin deref solution.</p>",
        "id": 183179692,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085157
    },
    {
        "content": "<p>It’ll have been in the tests that are in the PR.</p>",
        "id": 183179756,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085176
    },
    {
        "content": "<p>(I thought <a href=\"https://github.com/rust-lang/rust/issues/66444\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66444\">https://github.com/rust-lang/rust/issues/66444</a> was the example where it didn't work ?)</p>",
        "id": 183180760,
        "sender_full_name": "lqd",
        "timestamp": 1576085792
    },
    {
        "content": "<p>Oh, could be!</p>",
        "id": 183180818,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085833
    },
    {
        "content": "<p>I wonder if I confirmed my comment at the time.</p>",
        "id": 183180929,
        "sender_full_name": "davidtwco",
        "timestamp": 1576085885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ok, so, \"erase types\" didn't work, will need to do something a bit more involved (sigh)</p>",
        "id": 183182004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576086649
    },
    {
        "content": "<p>the problem is that \"bound regions\" are not erased</p>",
        "id": 183182021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576086662
    },
    {
        "content": "<p>but there is a longer incantation we can do</p>",
        "id": 183182042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576086675
    },
    {
        "content": "<p>ok, my more involved patch works</p>",
        "id": 183184555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576088206
    },
    {
        "content": "<blockquote>\n<p>I think I expected to have a <code>await_span</code> such that, for each type in the list, we also tracked some await (or yield) that caused us to include it</p>\n</blockquote>\n<p>I'm going to ignore this part as it's pre-existing, but I still think the setup could be improved</p>",
        "id": 183184586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576088239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> commits pushed</p>",
        "id": 183185262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576088649
    },
    {
        "content": "<p>I guess I will r+..? seems clear this PR will help</p>",
        "id": 183185282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576088657
    },
    {
        "content": "<p>Sure, probably makes sense to address anything else in a follow-up rather than having this PR hang around forever.</p>",
        "id": 183185328,
        "sender_full_name": "davidtwco",
        "timestamp": 1576088699
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, do you think you'd have a chance to review <a href=\"https://github.com/rust-lang/rust/pull/67116\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67116\">https://github.com/rust-lang/rust/pull/67116</a> ?</p>",
        "id": 183656683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576595303
    },
    {
        "content": "<p>I'll take a look.</p>",
        "id": 183656973,
        "sender_full_name": "davidtwco",
        "timestamp": 1576595493
    },
    {
        "content": "<p>(I left some comments, actually)</p>",
        "id": 183658408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576596407
    },
    {
        "content": "<p>Left mine too.</p>",
        "id": 183659558,
        "sender_full_name": "davidtwco",
        "timestamp": 1576597052
    }
]