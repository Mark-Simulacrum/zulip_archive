[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I got a bit distracted by my cat so missed the part about timers. Is that about a timeout future?</p>",
        "id": 234853006,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1618579826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400241\">@Zeeshan Ali</span>sorry I missed this. In this particular case we never really said what the timer was for since they're implementing a made up, proprietary protocol.</p>",
        "id": 235147248,
        "sender_full_name": "rylev",
        "timestamp": 1618822144
    },
    {
        "content": "<p>Ah ok. I was asking cause if it's about timeout futures, we have those in <a href=\"https://docs.rs/async-io/1.4.0/async_io/struct.Timer.html\">async-io</a> and hence it's not a problem for runtime-agnosticism</p>",
        "id": 235154769,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1618826111
    },
    {
        "content": "<p>I don't think using something like async-io really qualifies as runtime agnostic. Like, sure, if you use it it will work correctly in any runtime, but now your application suddenly has multiple timer drivers.</p>",
        "id": 235155893,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1618826629
    },
    {
        "content": "<p>that's why I was asking what is meant by timers. :) What's the issue with multiple timer drivers?</p>",
        "id": 235156095,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1618826724
    },
    {
        "content": "<p>I think you should be able to tell the difference between crates that can use the runtime's timer driver, and crates that spawn their own timer driver, and that becomes more difficult to do if everyone uses the same words for both things.</p>",
        "id": 235156909,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1618827127
    },
    {
        "content": "<p>Code bloat might be an issue. Also this requires a deep understanding of the async ecosystem to get things right.</p>",
        "id": 235156994,
        "sender_full_name": "rylev",
        "timestamp": 1618827182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> I see. Yeah that's an issue but I don't agree that it's an obstacle to runtime-agnosticism. Especially, I doubt Alan would know or care about this.</p>",
        "id": 235159959,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1618828953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> Bloat is definitely a problem but I fear it's a more general one. E.g I'm using async-locks in zbus but most users use it with tokio, which comes with its own locks.</p>",
        "id": 235160338,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1618829189
    },
    {
        "content": "<p>It's also spawning an extra background thread to run the driver/reactor.</p>",
        "id": 235180107,
        "sender_full_name": "Sean McArthur",
        "timestamp": 1618838958
    },
    {
        "content": "<p>Ah true, that makes it worse. Still, at least for me, that's not that big a price to pay for providing API that users can just use with any runtime out of the box.</p>",
        "id": 235202976,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1618847108
    },
    {
        "content": "<p>Users may not like this though and its a pretty implicit choice to understand.</p>",
        "id": 235371441,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1618935259
    }
]