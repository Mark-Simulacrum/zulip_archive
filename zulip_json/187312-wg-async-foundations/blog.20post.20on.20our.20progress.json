[
    {
        "content": "<p>Some time ago I wrote up a blog post about the stabilization plans:</p>\n<p><a href=\"https://gist.github.com/nikomatsakis/65d1a56991d60908d94be6171f8f5c2b\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/65d1a56991d60908d94be6171f8f5c2b\">https://gist.github.com/nikomatsakis/65d1a56991d60908d94be6171f8f5c2b</a></p>\n<p>I am posting it here in hopes of getting a bit of feedback. It ends with a \"call to help\", so I might put in a bit more time trying to write some mentoring instructions.</p>",
        "id": 169900940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562616771
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"203289\">@boats</span>, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  take a look at that post, if you get a chance <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 169901069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562616877
    },
    {
        "content": "<p>LGTM!</p>",
        "id": 169904561,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1562619667
    },
    {
        "content": "<p>Some remarks:</p>\n<blockquote>\n<p>After this work is done, it will be possible to build async I/O based applications in Rust, though a number of rough edges remain.</p>\n</blockquote>\n<p>It's already possible but less ergonomic than we want it to be. I think you can do s/possible/more ergonomic.</p>\n<blockquote>\n<p>the std:<span aria-label=\"future\" class=\"emoji emoji-1f52e\" role=\"img\" title=\"future\">:future:</span>:Future trait, which defines the core future protocol (stabilized in 1.36.0!);</p>\n</blockquote>\n<p>Linking to the Future trait would be ideal and stripping the path would also be more readable I think.</p>\n<blockquote>\n<p>Basic async-await syntax</p>\n</blockquote>\n<p>No \"Basic <code>async.await</code> syntax? ;) Where are the built-in puns <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> </p>\n<blockquote>\n<p>or inherent methods:</p>\n</blockquote>\n<p>Indentation of the function seems off... 2 spaces?</p>\n<blockquote>\n<p>Eventually, we plan to extend support so that any place you can write a function,</p>\n</blockquote>\n<p>I understand the point here, but <code>extern async fn</code>?</p>\n<blockquote>\n<p>This book covers the nuts and <strong>bots</strong></p>\n</blockquote>\n<p>Typo here.</p>\n<blockquote>\n<p>The same core compiler transform that enables async await should enable us to support Python- or JS-like generators, making it easy to write iterators.</p>\n</blockquote>\n<p>(I'm not particularly a fan of this wording -- I think it's already easy to write iterators and the functional interface to these are one of my absolute favorite parts about Rust)</p>",
        "id": 169905856,
        "sender_full_name": "centril",
        "timestamp": 1562620684
    },
    {
        "content": "<p>Whoops, sorry <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I missed your comments. I made some edits to the post.</p>",
        "id": 170437186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562664277
    }
]