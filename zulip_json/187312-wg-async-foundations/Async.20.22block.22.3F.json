[
    {
        "content": "<p>Is the async block really a thing? What’s the motivation for it to not share syntax with closures?</p>",
        "id": 170558788,
        "sender_full_name": "nagisa",
        "timestamp": 1562777945
    },
    {
        "content": "<p>The RFC suggests that my initial assumption about what async blocks are was correct. I guess we Ruby now.</p>",
        "id": 170559066,
        "sender_full_name": "nagisa",
        "timestamp": 1562778104
    },
    {
        "content": "<p>I'm fine with \"Ruby\"ing, even if I don't know what the term means?</p>",
        "id": 170559738,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1562778531
    },
    {
        "content": "<p>Ostensibly it means \"Taking inspiration from Ruby's design\"?</p>",
        "id": 170559785,
        "sender_full_name": "centril",
        "timestamp": 1562778562
    },
    {
        "content": "<blockquote>\n<p>What’s the motivation for it to not share syntax with closures?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> there's a semantic difference here; <code>async { ... }</code> makes an <code>impl Future</code> whereas <code>async || ..</code> makes a closure that makes an <code>impl Future</code></p>",
        "id": 170560125,
        "sender_full_name": "centril",
        "timestamp": 1562778774
    },
    {
        "content": "<p>Tho async closures may be the redundant thing</p>",
        "id": 170560150,
        "sender_full_name": "centril",
        "timestamp": 1562778790
    },
    {
        "content": "<p>I was refering to ruby’s syntax being full of magic, often unnecessary magic, and thus being less easy to deal with.</p>",
        "id": 170560181,
        "sender_full_name": "nagisa",
        "timestamp": 1562778825
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>What’s the motivation for it to not share syntax with closures?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> there's a semantic difference here; <code>async { ... }</code> makes an <code>impl Future</code> whereas <code>async || ..</code> makes a closure that makes an <code>impl Future</code></p>\n</blockquote>\n<p>Hmm, okay. Still feels weird. In my head <code>async {}</code> eventually becomes just the body of <code>Future::poll</code> after some generator-like transformations and whatnot. Or something similar.</p>",
        "id": 170560330,
        "sender_full_name": "nagisa",
        "timestamp": 1562778948
    },
    {
        "content": "<p>It is still semantically a function.</p>",
        "id": 170560338,
        "sender_full_name": "nagisa",
        "timestamp": 1562778954
    },
    {
        "content": "<p>Yes sure, that much is true, tho there's one less level of indirection.</p>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  I prefer to think in more monadic terms; <code>impl Future&lt;...&gt;</code> being a container with a value inside</p>",
        "id": 170561558,
        "sender_full_name": "centril",
        "timestamp": 1562779829
    },
    {
        "content": "<p>so \"it's still semantically a function\" is taking a more \"low level\" perspective</p>",
        "id": 170561585,
        "sender_full_name": "centril",
        "timestamp": 1562779859
    },
    {
        "content": "<p>Hmm, I too find async block fairly natural -- an \"async thing\" is something that, when you interact with it \"normally\", you get back a future to the result instead of the original.</p>\n<p>So an <code>async fn</code> is a function that, when called, gives you a future (instead of the result).</p>\n<p>Similarly an <code>async { .. }</code> is a block that, when executed, gives you a future (instead of the result).</p>\n<p>An async closure <code>async ||</code> then is a closure that, when called, gives you a future (instead of the result). </p>\n<p>Similarly <code>async fn foo()</code> and <code>fn foo() { async { } }</code> are basically equivalent, as is <code>async || { ... }</code> and <code>|| async  ... }</code>.</p>",
        "id": 170565410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562782436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but it acts nothing like a block – or rather scope – that we have currently. That’s where most of my \"ewww\" reaction is coming from.</p>",
        "id": 170567511,
        "sender_full_name": "nagisa",
        "timestamp": 1562783875
    },
    {
        "content": "<p>how so?</p>",
        "id": 170567568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562783892
    },
    {
        "content": "<p>it produces a value which, when awaited, executes</p>",
        "id": 170567585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562783910
    },
    {
        "content": "<p>I find the limitations around control flow inside <code>async {}</code> unnatural, for one.</p>",
        "id": 170567591,
        "sender_full_name": "nagisa",
        "timestamp": 1562783914
    },
    {
        "content": "<p><code>async {}</code> looks and feels like it ought to behave like the usual scope, but I now know that it is not the case.</p>",
        "id": 170567633,
        "sender_full_name": "nagisa",
        "timestamp": 1562783947
    },
    {
        "content": "<p>(I do understand where those limitations are coming from, what I disagree with is the syntactic representation of whatever produces this <code>impl Future</code>).</p>",
        "id": 170567785,
        "sender_full_name": "nagisa",
        "timestamp": 1562784033
    },
    {
        "content": "<p>Perhaps it is easiest to compare it with <code>unsafe {}</code> vs <code>{}</code> – both still act like your plain scopes. Hope that makes sense.</p>",
        "id": 170567840,
        "sender_full_name": "nagisa",
        "timestamp": 1562784085
    },
    {
        "content": "<p>(I do also understand that there is nothing I can change here at this point, since the RFC got accepted a long time ago and its my own fault I didn’t follow it)</p>",
        "id": 170567866,
        "sender_full_name": "nagisa",
        "timestamp": 1562784109
    }
]