[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202021-07-16/near/246256270\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"419100\">Chaz Kiker</span> that would be awesome!</p>\n</blockquote>\n<p>where's the place to do this? make a PR to <code>rust-lang/wg-async-foundations</code>? shoot you a link to a HackMD file? just let me know!</p>",
        "id": 246256392,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626457651
    },
    {
        "content": "<p>and thanks everyone for the meeting today and all the work you do for Rust :)</p>",
        "id": 246256447,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626457681
    },
    {
        "content": "<p>HackMD is a good place for drafting. Do you think it could potentially go in <a href=\"https://rust-lang.github.io/async-book/01_getting_started/01_chapter.html\">the async book</a>?</p>",
        "id": 246256638,
        "sender_full_name": "tmandry",
        "timestamp": 1626457788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202021-07-16/near/246256638\">said</a>:</p>\n<blockquote>\n<p>HackMD is a good place for drafting. Do you think it could potentially go in <a href=\"https://rust-lang.github.io/async-book/01_getting_started/01_chapter.html\">the async book</a>?</p>\n</blockquote>\n<p>good question! I guess I'm not totally sure!  </p>\n<p>in some ways I suppose it'd be weird to toss JS examples in a Rust book... but on the other hand I feel like so many people are familiar with the JS Promise that it may be acceptable. </p>\n<p>Maybe at least a mention of it and a link to a separate resource that shows it?</p>\n<p>But what do you think? I'd certainly defer to y'all!</p>",
        "id": 246256854,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626457886
    },
    {
        "content": "<p>I could see the book containing comparisons with many languages, not just JS</p>",
        "id": 246257030,
        "sender_full_name": "tmandry",
        "timestamp": 1626457960
    },
    {
        "content": "<p>but it would also be fine to host it separately and link to it</p>",
        "id": 246257046,
        "sender_full_name": "tmandry",
        "timestamp": 1626457969
    },
    {
        "content": "<p>whatever you do, drop a link here when you'd like a review :)</p>",
        "id": 246257092,
        "sender_full_name": "tmandry",
        "timestamp": 1626457993
    },
    {
        "content": "<p>Maybe some basic comparisons, but I think it would be better separate</p>",
        "id": 246257101,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626458001
    },
    {
        "content": "<p>And the async book could have a collection of links to other learning material</p>",
        "id": 246257122,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626458012
    },
    {
        "content": "<p>It can't cover everything on it's own</p>",
        "id": 246257135,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626458019
    },
    {
        "content": "<p>if it's more than one page then yeah I agree that it should be separate</p>",
        "id": 246257152,
        "sender_full_name": "tmandry",
        "timestamp": 1626458031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202021-07-16/near/246257092\">said</a>:</p>\n<blockquote>\n<p>whatever you do, drop a link here when you'd like a review :)</p>\n</blockquote>\n<p>okay will do. and it'll probably be easier to decide on where it should exist once we take a look at it!</p>",
        "id": 246257224,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626458057
    },
    {
        "content": "<p>I find an abundance of writing about this topic covering various languages in blog posts via google.  Maybe not ideal, but many people have written about it.</p>",
        "id": 246257232,
        "sender_full_name": "Doc Jones",
        "timestamp": 1626458061
    },
    {
        "content": "<p>good to know. blog posts are useful but also not the same as documentation that gets revised over time. I can see there being a place for both.</p>",
        "id": 246257335,
        "sender_full_name": "tmandry",
        "timestamp": 1626458123
    },
    {
        "content": "<p>My favorite is a post about working all of the Oracle Java tutorial problems in Rust.</p>",
        "id": 246257354,
        "sender_full_name": "Doc Jones",
        "timestamp": 1626458130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394977\">Doc Jones</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202021-07-16/near/246257232\">said</a>:</p>\n<blockquote>\n<p>I find an abundance of writing about this topic covering various languages in blog posts via google.  Maybe not ideal, but many people have written about it.</p>\n</blockquote>\n<p>Yes... but there are still niche cases that I never found covered. It's all the more basic/standard examples.</p>",
        "id": 246257474,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626458169
    },
    {
        "content": "<p>I'm not arguing against doing it.  I'm pointing out that the pain is real and examples exist.</p>",
        "id": 246257619,
        "sender_full_name": "Doc Jones",
        "timestamp": 1626458227
    },
    {
        "content": "<p>I broke this out into a distinct topic</p>",
        "id": 246257904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626458354
    },
    {
        "content": "<p>one thing though -- there is also <a class=\"stream\" data-stream-id=\"201246\" href=\"/#narrow/stream/201246-wg-async-foundations.2Fbook\">#wg-async-foundations/book</a></p>",
        "id": 246257923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626458364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/js-rust.20comparisons/near/246257923\">said</a>:</p>\n<blockquote>\n<p>one thing though -- there is also <a class=\"stream\" data-stream-id=\"201246\" href=\"/#narrow/stream/201246-wg-async-foundations.2Fbook\">#wg-async-foundations/book</a></p>\n</blockquote>\n<p>ah yes, maybe this would fit better there?</p>",
        "id": 246258114,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626458443
    },
    {
        "content": "<p>got caught up with some other stuff today, but <a href=\"https://hackmd.io/@chazkiker/compare-async-rust-to-js\">here's an initial draft</a> with practically every possible way to make a Promise in JS. </p>\n<p>I could use some help with the mirrored Rust code... I honestly am unsure what the idiomatic way to write ones own futures are... also happy to figure it out if anyone's got resources they think might be worth sharing.</p>",
        "id": 246297846,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626486967
    },
    {
        "content": "<p><a href=\"https://fasterthanli.me/articles/pin-and-suffering\">https://fasterthanli.me/articles/pin-and-suffering</a> might help you, it shows how to impl a basic future by hand</p>",
        "id": 246298459,
        "sender_full_name": "Zoey",
        "timestamp": 1626487905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"398288\">@Zoey</span> that is immensely helpful — thanks for the resource.</p>",
        "id": 246299664,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626489550
    },
    {
        "content": "<p>If you have any not-worth-asking-groups-questions, feel free to PM them to me</p>",
        "id": 246299673,
        "sender_full_name": "Zoey",
        "timestamp": 1626489593
    },
    {
        "content": "<p>I do not think that manually implementing <code>Future</code> is equivalent to <code>new Promise</code>. As I see it, the actual equivalent is an oneshot channel.</p>",
        "id": 246315989,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626515085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> ohhh… interesting. yes I could see that. </p>\n<p>I am no expert in this realm, so i’d defer to y’all… but <a href=\"https://docs.rs/tokio/1.8.1/tokio/sync/oneshot/index.html\">this api</a> does look rather JS Promise-y… </p>\n<p>(this little pursuit has taught me just how little I know about Rust Futures and async runtime… they are a different beast than JS no doubt.)</p>",
        "id": 246319242,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626520069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> any chance you’d be willing to spin up a quick example for what you think the Rusty <code>new Promise</code> equivalent would look like?</p>",
        "id": 246319299,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626520163
    },
    {
        "content": "<p>This example?</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"c1\">// JavaScript</span>\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Promise { 42 }</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mf\">42</span><span class=\"p\">));</span>\n  <span class=\"c1\">// 42</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">resolved_val</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">promise</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 246319362,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520230
    },
    {
        "content": "<p>When does the contents of the promise constructor run?</p>",
        "id": 246319370,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520249
    },
    {
        "content": "<p>Immediately, or as if you had used <code>setTimeout</code>?</p>",
        "id": 246319375,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520257
    },
    {
        "content": "<p>That is, <code>setTimeout</code> with no deadline / deadline of 0</p>",
        "id": 246319382,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520275
    },
    {
        "content": "<p>I guess the equivalent is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">sync</span>::<span class=\"n\">oneshot</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">resolve</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oneshot</span>::<span class=\"n\">channel</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">tokio</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resolved_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246319514,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520405
    },
    {
        "content": "<p>Hmm, it seems like the actual equivalent wouldn't be spawning a task here</p>",
        "id": 246319566,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520474
    },
    {
        "content": "<p>anyways, <code>then</code> is equivalent to spawning a task that awaits the oneshot receiver, then runs the content of the <code>then</code> closure</p>",
        "id": 246319597,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520517
    },
    {
        "content": "<p>I believe the call to <code>new Promise</code> will toss the callback passed in to the constructor onto the event queue. </p>\n<p>so that code will execute and essentially we have a <code>Promise</code> that immediately resolves itself and is ready to be <code>await</code>-ed. </p>\n<p>the  call to <code>await</code> will just take the resolved value.</p>",
        "id": 246319600,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626520528
    },
    {
        "content": "<p>Well I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"B\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>It prints <code>A</code> first</p>",
        "id": 246319611,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520560
    },
    {
        "content": "<p>So it doesn't go on the event queue, hence no spawn</p>",
        "id": 246319669,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520615
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">sync</span>::<span class=\"n\">oneshot</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">resolve</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oneshot</span>::<span class=\"n\">channel</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resolved_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246319671,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520618
    },
    {
        "content": "<p>Chaining <code>then</code> is equivalent to having a single function that just has all the contents of each <code>then</code> in sequence with an <code>.await</code> at each <code>then</code></p>",
        "id": 246319721,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520696
    },
    {
        "content": "<p>ah, yes, okay. here's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#timing\">MDN's \"Timing\" section</a>. </p>\n<p>I think you are totally 100% correct on all fronts here.</p>",
        "id": 246319760,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626520770
    },
    {
        "content": "<p>e.g. this:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">myPromise</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResolvedA</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResolvedB</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResolvedC</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">tokio</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myPromise</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handleResolvedA</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handleResolvedB</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handleResolvedC</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246319799,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626520797
    },
    {
        "content": "<p>okay — and what do you think RE: <code>.catch()</code>?? </p>\n<p>If we want to replicate </p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s2\">\"Error\"</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>would we just...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">sync</span>::<span class=\"n\">oneshot</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">resolve</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">oneshot</span>::<span class=\"n\">channel</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">some_err</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rejected_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246320010,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626521074
    },
    {
        "content": "<p>Yes, Rust futures do not have built-in support for the output being failure, so you need to use a <code>Result</code> as message type to handle that</p>",
        "id": 246320047,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626521134
    },
    {
        "content": "<p>It's probably worth being clear that in Rust, you use oneshot channels more rarely than promises are used in JS</p>",
        "id": 246320107,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626521205
    },
    {
        "content": "<p>Okay sweet. Thanks for the callout. I'll change that example to use <code>oneshot::channel</code> tomorrow and give the other examples a try.</p>\n<p>Appreciate the insight <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 246320108,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626521206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218683\">Alice Ryhl</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/js-rust.20comparisons/near/246320107\">said</a>:</p>\n<blockquote>\n<p>It's probably worth being clear that in Rust, you use oneshot channels more rarely than promises are used in JS</p>\n</blockquote>\n<p>Yes, that's a fair point... I guess that's a whole different challenge to this problem... <code>Rust != JS</code>... so you <em>can</em> use a oneshot but maybe <em>don't</em> default to it?  </p>\n<p>Couple of things making me re-consider the value of this JS vs Rust comparison.</p>",
        "id": 246320262,
        "sender_full_name": "Chaz Kiker",
        "timestamp": 1626521407
    },
    {
        "content": "<p>I mean, the reason is that you can just, you know, await the thing</p>",
        "id": 246322903,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626525428
    },
    {
        "content": "<p>If you want it to run separately, you spawn a task, then await it there</p>",
        "id": 246322911,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626525453
    },
    {
        "content": "<p>you don't use a promise for that</p>",
        "id": 246322914,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626525457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419100\">Chaz Kiker</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/js-rust.20comparisons/near/246320010\">said</a>:</p>\n<blockquote>\n<p>okay — and what do you think RE: <code>.catch()</code>?? </p>\n</blockquote>\n<p>Probably <code>map_err</code> or <code>or_else</code> from <a href=\"https://docs.rs/futures/0.3.15/futures/future/trait.TryFutureExt.html\"><code>TryFutureExt</code></a>.</p>",
        "id": 246329156,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626534543
    },
    {
        "content": "<p>I mean, you just use ordinary Rust error handling</p>",
        "id": 246329220,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626534630
    },
    {
        "content": "<p>maching</p>",
        "id": 246329221,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626534633
    },
    {
        "content": "<p>question marks</p>",
        "id": 246329223,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626534636
    },
    {
        "content": "<p>that kinda stuff</p>",
        "id": 246329225,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626534638
    },
    {
        "content": "<p>There isn't any need for fancy combinators tbh</p>",
        "id": 246329233,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626534665
    },
    {
        "content": "<p>Well yes but those would be the closest in syntax.</p>",
        "id": 246331087,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1626537372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218683\">Alice Ryhl</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/js-rust.20comparisons/near/246319799\">said</a>:</p>\n<blockquote>\n<p>e.g. this:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">myPromise</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResolvedA</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResolvedB</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResolvedC</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>becomes</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">tokio</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myPromise</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handleResolvedA</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handleResolvedB</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handleResolvedC</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>close - you would need to insert a <code>tokio::task:::yield_now().await</code> after each Rust line - since Javascript will invoke continuations in a new eventloop iteration.</p>",
        "id": 246332992,
        "sender_full_name": "Matthias247",
        "timestamp": 1626540027
    },
    {
        "content": "<p>fair enough</p>",
        "id": 246336101,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1626544923
    }
]