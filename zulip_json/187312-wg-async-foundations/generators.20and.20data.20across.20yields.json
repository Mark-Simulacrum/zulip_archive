[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> we did some more digging after you left. I didn't ever get to the bottom of the <a href=\"https://github.com/rust-lang/rust/issues/53548\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53548\">#53548</a> but we did dig into <a href=\"https://github.com/rust-lang/rust/issues/57017\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57017\">#57017</a> and find the code responsible.</p>",
        "id": 159465705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551221057
    },
    {
        "content": "<p>The basic summary is what I said -- there is an \"approximate\" check that computes the \"generator witness\", which is a superset of the data that is really needed.</p>",
        "id": 159465718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551221078
    },
    {
        "content": "<p>I'll maybe leave some comments on <a href=\"https://github.com/rust-lang/rust/issues/57017\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57017\">#57017</a>, the relevant code is in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs\">generator_interior.rs</a>, and particularly <a href=\"https://github.com/rust-lang/rust/blob/02c4c28920ddfdb43e68a363b7fe59ac4c92399c/src/librustc_typeck/check/generator_interior.rs#L153-L169\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/02c4c28920ddfdb43e68a363b7fe59ac4c92399c/src/librustc_typeck/check/generator_interior.rs#L153-L169\">this part of it</a>. It's presently pretty conservative -- it assumes that  the result of each intermediate expression may be stored as long as the enclosing temporary scope.</p>",
        "id": 159465826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551221187
    },
    {
        "content": "<p>I think we could probably make that more precise by modified the expr-use-visitor and using that to be smarter. This would certainly fix the example in question, though there'd probably still be a measure of imprecision involved. I didn't <em>quite</em> get to seeing clearly the change, have to think on it a bit.</p>",
        "id": 159465871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551221239
    },
    {
        "content": "<p>I want to compute the generator interior on MIR, which should help with those cases</p>",
        "id": 159466781,
        "sender_full_name": "Zoxc",
        "timestamp": 1551222136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> I don't think you can necessarily do that -- in particular, we need to know this information during the typeck phase, in order to compute (e.g.) whether something is <code>Send</code>.</p>",
        "id": 159514268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551275451
    },
    {
        "content": "<p>Further, right now, type checking of the generator is intermingled with type-checking of the surrounding function (this is generally true for closures), so we can't be sure to be able to construct the MIR for the generator until type-checking of the overall fn is complete, and it seems to me that this could depend on whether the generator is <code>Send</code> etc</p>",
        "id": 159514382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551275509
    },
    {
        "content": "<p>(We could potentially do some sort of best effort thing, and error around cycles, but I'm not sure how I feel about that, I'd like to at least explore if we can compute a better approximation of live data first)</p>",
        "id": 159514498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551275551
    },
    {
        "content": "<p>We currently generate an error if we try to infer the generator interior of a generator, but don't know all the types inside. That should leave us room to construct MIR just for the generator in the future</p>",
        "id": 159515086,
        "sender_full_name": "Zoxc",
        "timestamp": 1551275812
    },
    {
        "content": "<p>Which error are you referring to?</p>",
        "id": 159528637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551284455
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs#L58\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs#L58\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/generator_interior.rs#L58</a></p>",
        "id": 159529245,
        "sender_full_name": "Zoxc",
        "timestamp": 1551284824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^this convo seems relevant to the other ongoing thread</p>",
        "id": 160029674,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551812163
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span></p>",
        "id": 160029707,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551812174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> yes I was going to say that :)</p>",
        "id": 160030844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551812885
    },
    {
        "content": "<p>when I mentioned \"I have a hunch what the problem is\", I was thinking of this...</p>",
        "id": 160030852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551812894
    }
]