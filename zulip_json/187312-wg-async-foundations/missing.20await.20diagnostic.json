[
    {
        "content": "<p>Hello, I'm currently working on this issue <a href=\"https://github.com/rust-lang/rust/issues/61076\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61076\">https://github.com/rust-lang/rust/issues/61076</a> and in order to add the diagnostic I'm looking at including <code>Future</code> trait as a lang-item. A couple of people have mentioned that promoting an item to a lang-item is not normal just for a diagnostic; however, as the async/await syntax depends on the type it kind of makes sense to me that it should be a lang-item, but I really wasn't sure. If it were made a lang-item, the lang-item could be used throughout <code>hir::lowering</code> in place of the current paths into <code>std</code> which would be quite neat I think. I was wondering if anyone had any alternative/better ideas?</p>",
        "id": 168535011,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1560970223
    },
    {
        "content": "<p>When I'm working on a diagnostic PR, if I feel the only way to proceed is to make something a lang item, then I normally do and it's never been a problem. If doing so would unblock you to continue, then I'd go ahead and if there are objections during review, we can work out an alternative approach then.</p>\n<p>As I understand it, lang items can't be used during <code>hir::lowering</code> because things haven't been assigned <code>DefId</code>s yet, though I might be mistaken there.</p>",
        "id": 168536370,
        "sender_full_name": "davidtwco",
        "timestamp": 1560971083
    },
    {
        "content": "<p>Just my 2c.</p>",
        "id": 168536374,
        "sender_full_name": "davidtwco",
        "timestamp": 1560971092
    },
    {
        "content": "<p>Ahh okay I hadn't realised the thing about <code>DefId</code>s, thanks a lot!</p>",
        "id": 168536508,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1560971200
    },
    {
        "content": "<p>So, I'm getting there, I just don't want to suggest <code>.await</code> in bodies that aren't <code>async</code>... Is there a way to check if a <code>hir::BodyId</code> is for an async body?</p>",
        "id": 168543742,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1560976818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225949\">@Nathan Corbyn</span> you can use the <code>BodyId</code> to get the <code>Body</code>, which has a field called <code>generator_kind</code> that you can check (look for <code>Some(hir::GeneratorKind::Async)</code>)</p>",
        "id": 168544129,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560977151
    },
    {
        "content": "<p>I actually can't find <code>GeneratorKind</code>...</p>",
        "id": 168544195,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1560977169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225949\">@Nathan Corbyn</span> you'll need a relatively recent copy of rust-lang/rust</p>",
        "id": 168544913,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560977653
    },
    {
        "content": "<p>like, from today</p>",
        "id": 168544924,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560977657
    },
    {
        "content": "<p>or last night</p>",
        "id": 168544936,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560977670
    },
    {
        "content": "<p>Got it! Thanks</p>",
        "id": 168546191,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1560978593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225949\">@Nathan Corbyn</span> sure thing!</p>",
        "id": 168546999,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560979280
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 168552903,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1560985366
    },
    {
        "content": "<p>I was using this to check if the body of a <code>FnCtxt</code> is async, but it causes an ICE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">body_owned_by</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">body_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">krate</span><span class=\"p\">().</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">body_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">GeneratorKind</span>::<span class=\"n\">Async</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">generator_kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I was wondering if anyone knew what was wrong with it?</p>\n<p>(This is the ICE: <code>error: internal compiler error: src/librustc/hir/map/mod.rs:455: body_owned_by: expr { take_u32(bar()) } (hir_id=HirId { owner: DefIndex(16), local_id: 8 }) has no associated body</code>)</p>",
        "id": 168628232,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561060048
    },
    {
        "content": "<p>what is <code>self.body_id</code>? it doesn't look like it's a valid hir_id mapping a node with an associated body</p>",
        "id": 168635172,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1561065219
    },
    {
        "content": "<p>today, body owners are consts, statics, fns, methods, and closures</p>",
        "id": 168635236,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1561065249
    },
    {
        "content": "<p>It's a <code>hir::HirId</code> which is sort of confusing given the name</p>",
        "id": 168635300,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561065316
    },
    {
        "content": "<p>You will want <code>self.inh.body_id</code></p>",
        "id": 168635476,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1561065464
    },
    {
        "content": "<p>Yeah I just spotted that, thanks!</p>",
        "id": 168635535,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561065501
    },
    {
        "content": "<p>Actually, that looks like it's always the containing item, which is no help for a closure in an async fn.</p>",
        "id": 168636451,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1561066238
    },
    {
        "content": "<p>Could you give an example of what you mean?</p>",
        "id": 168636484,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561066290
    },
    {
        "content": "<p><code>async fn foo() { || { /* can't use .await here, but ihn.body_id would refer to the outer function */ } }</code></p>",
        "id": 168636569,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1561066354
    },
    {
        "content": "<p>Ahh okay I see... This makes things complicated</p>",
        "id": 168636641,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561066439
    },
    {
        "content": "<p>I'm trying to work on an reasonably exhaustive list of edge cases like this so I can write a decent test</p>",
        "id": 168636712,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561066468
    },
    {
        "content": "<p>So, body_id looks like the body's HirId when we're checking an item with a body. The correct thing is something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">get_parent_node_by_hir_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">body_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">checked_body_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">maybe_body_owned_by</span><span class=\"p\">(</span><span class=\"n\">item_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">krate</span><span class=\"p\">().</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">body_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">GeneratorKind</span>::<span class=\"n\">Async</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">generator_kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168638021,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1561067715
    },
    {
        "content": "<p>Thank you so much, I'll give it a try!</p>",
        "id": 168638129,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561067801
    },
    {
        "content": "<p>I'm just writing a test for this, should it go in the <code>test/ui/async-await/await-keyword</code> directory or the <code>test/ui/suggestions</code> directory?</p>",
        "id": 168767366,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561241773
    },
    {
        "content": "<p>I’d throw it in async-await but I don’t think it will matter that much.</p>",
        "id": 168792676,
        "sender_full_name": "davidtwco",
        "timestamp": 1561293497
    },
    {
        "content": "<p>I'm trying to extend this to work with chained expressions</p>\n<p>Basically my idea so far is to introduce some logic here <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc_typeck/check/method/suggest.rs#L306\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc_typeck/check/method/suggest.rs#L306\">https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc_typeck/check/method/suggest.rs#L306</a> that will deal with the case that we're looking at a future; however, ideally, I only want to suggest adding <code>.await</code> in cases where awaiting would actually yield a type with the unresolved item (not really sure how to do this)</p>\n<p>Is this overkill (i.e. should I just suggest in potentially appropriate places and use <code>MaybeIncorrect</code>), or does anyone know how to retry type-checking after applying a suggestion? (Or at least checking if a type has a given associated item)</p>",
        "id": 169340290,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561901793
    }
]