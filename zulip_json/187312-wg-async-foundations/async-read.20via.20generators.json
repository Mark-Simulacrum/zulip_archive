[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> when it comes to dealing with hand-written pin impls, I agree with you; it seems like the solution for <code>Stream</code> is to support a generator-based syntax. I'm not sure about async-read and async-write.</p>",
        "id": 196221201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've talked about this before, but you can also write asyncread and asyncwrite via generator syntax</p>",
        "id": 196222556,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588617721
    },
    {
        "content": "<p>if generators get the full set of abilities I'd like them to have, that is</p>",
        "id": 196222623,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588617736
    },
    {
        "content": "<p>However, they do have a similar issue to the io_uring stuff that the easiest-to-use design is one which offers a buffer which will continue to be available in future <code>poll</code>s</p>",
        "id": 196222758,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588617805
    },
    {
        "content": "<p>interesting</p>",
        "id": 196223346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617979
    },
    {
        "content": "<p>I'm curious to hear more about how you see that working, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span></p>",
        "id": 196223435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588618026
    },
    {
        "content": "<p>That may be possible. The main concern that I however have there is that yet another language feature is required to make up for lacks in the other language feature.</p>\n<p>Let's compare Rust here with other languages: In C# or Kotlin people can just have an <code>IStream/etc</code> interface, the method there has an additional <code>async/suspend/etc</code> modifier,  and can implement the method as usual.</p>\n<p>If someone in my team asks me now how to do it this in Rust, I would start with</p>\n<ul>\n<li>You need to implement the <code>poll</code> function manually. You can't use <code>async</code>. Then everyone needs to learn about <code>poll/Context/Waker/etc</code>.</li>\n<li>We could then go on and implement something generator like - but now everyone needs to understand about generators. Crates like <code>async_stream</code> make this somewhat tolerable, but it's still yet another thing to learn.</li>\n<li>The same applies for solutions where we would move to other IO traits which make use of GATs. Then I imagine conversations like:<ul>\n<li>\"How do I make this an interface?\"</li>\n<li>\"That does only work with GATs\"</li>\n<li>\"What are GATs?\"</li>\n<li>\"I actually don't know it myself\"</li>\n</ul>\n</li>\n</ul>\n<p>I want people who are domain experts in building IO heavy services  to use async Rust. Those are often new to Rust, and not necessarily people who are also experts in language design, and aware of advanced constructs. So throwing too much jargon at them in order to \"just wrap a Stream in another Stream\" might be rather intimidating</p>",
        "id": 196226036,
        "sender_full_name": "Matthias247",
        "timestamp": 1588619212
    },
    {
        "content": "<p>And I'm fully aware that there is no easy solution for this problem at the moment - and I myself also don't have one. I just wanted to voice that all those traits are not really a great fit. They have their benefits (allow trait objects), but also their drawbacks (comparability is poor).</p>",
        "id": 196228360,
        "sender_full_name": "Matthias247",
        "timestamp": 1588620379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> I'm curious to take a look at other ecosystems that you think have solved this problem well and learn from them. I'm moderately familiar with C# and Kotlin's interfaces, but I'm not sure I understand the cognitive load distinction between future Rust's <code>async gen fn</code> (<code>async fn</code> + <code>gen fn</code>) and what you get with <code>IStream</code>.</p>",
        "id": 196240668,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588626692
    }
]