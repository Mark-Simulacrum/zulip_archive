[
    {
        "content": "<p>One thing I am wondering about, that relates to what <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> was saying. I've talked to a few people who tried to put async-await to work, and they usually wind up getting stuck in/around the futures library -- e.g., discovering things like the <code>boxed()</code> combinator.</p>",
        "id": 166743582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559066951
    },
    {
        "content": "<p>Based on this, I have the feeling that (a) futures 1.0 stabilization is something we should definitely be paying a lot of attention to in the near future, and (b) there is likely a lot of docs we could write in this area.</p>",
        "id": 166743669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067004
    },
    {
        "content": "<p>(Another question I'm wondering about is whether we can ask people to just tell us the kinds of things they got confused about and would have like to see documented)</p>",
        "id": 166743695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067031
    },
    {
        "content": "<p>I have definitely noticed this as well on discord, a lot of questions can be answered with \"here's the combinator from <code>futures</code> you need\"</p>",
        "id": 166743798,
        "sender_full_name": "Nemo157",
        "timestamp": 1559067116
    },
    {
        "content": "<p>BTW, I ported my standard example from my workshop over to runtime + futures and it works quite nicely. <a href=\"https://github.com/ferrous-systems/rust-three-days-course/blob/master/example/redisish-server/with-runtime/mailbox/src/main.rs\" target=\"_blank\" title=\"https://github.com/ferrous-systems/rust-three-days-course/blob/master/example/redisish-server/with-runtime/mailbox/src/main.rs\">https://github.com/ferrous-systems/rust-three-days-course/blob/master/example/redisish-server/with-runtime/mailbox/src/main.rs</a></p>",
        "id": 166743887,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1559067158
    },
    {
        "content": "<p>also, basic documentation on how to work with pinned variables, like using <code>Box::pin</code> over <code>Box::new</code></p>",
        "id": 166743897,
        "sender_full_name": "Nemo157",
        "timestamp": 1559067165
    },
    {
        "content": "<p>Found 2 confusing things, but nothing serious.</p>",
        "id": 166743922,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1559067184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> what would be a case where users need a Pin?</p>",
        "id": 166743940,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1559067200
    },
    {
        "content": "<p>most commonly when working with generic <code>impl Future</code>/<code>impl Stream</code></p>",
        "id": 166743974,
        "sender_full_name": "Nemo157",
        "timestamp": 1559067231
    },
    {
        "content": "<p>I guess <code>impl Future</code> is taken care of in async/await by <code>.await</code>, but having to pin a stream is not uncommon</p>",
        "id": 166744057,
        "sender_full_name": "Nemo157",
        "timestamp": 1559067281
    },
    {
        "content": "<p>I am wondering whether we can show a lot of the examples we would need be using runtime's current support -- it certainly seems like we could show the various combinators and things that way</p>",
        "id": 166744102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067315
    },
    {
        "content": "<p>probably the major thing is trying to return boxed futures, <code>Box&lt;dyn Future&gt;</code> is unusable, which is why there's the <code>BoxFuture</code> type alias</p>",
        "id": 166744117,
        "sender_full_name": "Nemo157",
        "timestamp": 1559067332
    },
    {
        "content": "<p>for some more advanced things, like the specifics of dealing with HTTP etc, I guess that depends on whether one is using tokio, tide, etc -- for that we might redirect to the docs from each project</p>",
        "id": 166744126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067341
    },
    {
        "content": "<blockquote>\n<p>BTW, I ported my standard example from my workshop over to runtime + futures and it works quite nicely. </p>\n</blockquote>\n<p>I am partly going from \"experience reports\" from wycats + <span class=\"user-mention\" data-user-id=\"132906\">@Jonathan Turner</span> porting over their <a href=\"https://github.com/wycats/nushell\" target=\"_blank\" title=\"https://github.com/wycats/nushell\">nushell project</a></p>",
        "id": 166744248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067426
    },
    {
        "content": "<p>where it seemed like they hit a number of confusing things that they overcame but where docs would have been useful</p>",
        "id": 166744283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067455
    },
    {
        "content": "<p>Some things I've ran into that I suspect others would also run into are:<br>\n1. how to write a trait that returns an Future. I've ended up using <code>BoxFuture</code>.<br>\n2. developing an intuitution as to when you need to use <code>Pin</code>, e.g., <code>pin_mut!</code>. I've sidestepped that issue for now in <a href=\"https://github.com/davidbarsky/proto-lambda\" target=\"_blank\" title=\"https://github.com/davidbarsky/proto-lambda\">https://github.com/davidbarsky/proto-lambda</a> by using <code>BoxFuture</code>, but that's because I afford a heap allocation. Not everybody can.<br>\n3. more generally with async/await—the top-level function _must_ async, hence runtime and friends.</p>",
        "id": 166744555,
        "sender_full_name": "David Barsky",
        "timestamp": 1559067634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did they make public posts, or is that just from discussion?</p>",
        "id": 166744556,
        "sender_full_name": "Nemo157",
        "timestamp": 1559067636
    },
    {
        "content": "<p>oh, just private discussion</p>",
        "id": 166744601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067674
    },
    {
        "content": "<p>(I don't know any details, the only thing I remember had to do w/ boxed)</p>",
        "id": 166744632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559067702
    },
    {
        "content": "<p>Paragraph starting \"Some more on pinning overall:\" in <a href=\"https://internals.rust-lang.org/t/async-await-experience-reports/10200/14\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/async-await-experience-reports/10200/14\">https://internals.rust-lang.org/t/async-await-experience-reports/10200/14</a> is a pretty good commentary on current pinning documentation</p>",
        "id": 166744793,
        "sender_full_name": "Nemo157",
        "timestamp": 1559067810
    },
    {
        "content": "<p>Yup, I'd love if we could have <code>rustc_on_unimplemented</code> for <code>Unpin</code> point to <code>pin_mut!</code> and <code>Box::pin</code>, but unfortunately the former is a 3p crate, so that wouldn't work out</p>",
        "id": 166744964,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559067904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> Thanks for the link! I think their experiences with pinning should be front-and-center in the futures documentation. I can see an argument for <code>pin_mut!</code> for being folded in the futures crate.</p>",
        "id": 166745019,
        "sender_full_name": "David Barsky",
        "timestamp": 1559067937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> fwiw it used to be</p>",
        "id": 166745038,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559067956
    },
    {
        "content": "<p>before it got pulled out into a separate crate</p>",
        "id": 166745095,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559067965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  I'm not sure of the reasoning behind that, but absent any other evidence, bringing <code>pin_mut!</code> back into futures would be a win, IMO.</p>",
        "id": 166745143,
        "sender_full_name": "David Barsky",
        "timestamp": 1559068017
    },
    {
        "content": "<p>it could at least be re-exported since it's almost always useful to users</p>",
        "id": 166745167,
        "sender_full_name": "Nemo157",
        "timestamp": 1559068043
    },
    {
        "content": "<p>regarding pointing to <code>pin_mut!</code>—could a clippy lint provide that information?</p>",
        "id": 166745191,
        "sender_full_name": "David Barsky",
        "timestamp": 1559068065
    },
    {
        "content": "<p>not sure how clippy would help since once you run clippy you've already got it compiling</p>",
        "id": 166745306,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559068128
    },
    {
        "content": "<p>RE \"not sure of the reasoning\" it's because <code>pin_utils</code> is all general-purpose utils for Pin</p>",
        "id": 166745346,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559068154
    },
    {
        "content": "<p>they don't interact directly with <code>std::future/task</code> at all</p>",
        "id": 166745366,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1559068170
    },
    {
        "content": "<p>ah, yes—true about the reasoning. forgot about non-futures use-cases for Pin.</p>",
        "id": 166745387,
        "sender_full_name": "David Barsky",
        "timestamp": 1559068191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> I think _most_ people can waste an allocation, it's totally fair for beginners documentation to go down that route.</p>",
        "id": 166745871,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1559068531
    },
    {
        "content": "<p>That's true! Unrelated, but it's for that reason I've wanted the <code>~</code> operator to return as an alias for Box. The syntactic overhead of  <code>Box</code> dissuades people from heap allocating more than they should, IMO</p>",
        "id": 166746267,
        "sender_full_name": "David Barsky",
        "timestamp": 1559068746
    }
]