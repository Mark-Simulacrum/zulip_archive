[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know when you're available to talk about PR <a href=\"https://github.com/rust-lang/rust/pull/67911\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67911\">https://github.com/rust-lang/rust/pull/67911</a></p>",
        "id": 185040425,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578422669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ok, I can't prob chat too much now, but one immediate question I had was whether we believe this to be primarily a matter of <em>diagnostics</em>? I guess I have to re-read your original description. Is it the case that the error (with your PR) is processed and reported in the closuer's owner, rather than within the closure?</p>",
        "id": 185040536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578422737
    },
    {
        "content": "<p>I believe it's reported within the closure itself</p>",
        "id": 185040620,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578422765
    },
    {
        "content": "<p>before and after?</p>",
        "id": 185040637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578422782
    },
    {
        "content": "<p>yes</p>",
        "id": 185040648,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578422789
    },
    {
        "content": "<p>The current diagnostic isn't \"wrong\", exactly - it's just suboptimal, since the computed upper bound is overly conservative</p>",
        "id": 185040677,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578422811
    },
    {
        "content": "<p>Specifically, the code gives up trying to find an upper bound, since it doesn't know that some of the regions involved are actually \"the same\"</p>",
        "id": 185040708,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578422832
    },
    {
        "content": "<p>Regarding your comment on the PR - I'm not sure that I understand how erasing regions affects this</p>",
        "id": 185040739,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578422858
    },
    {
        "content": "<p>If we were to erase regions earlier, wouldn't we still need to somehow remember which regions are actually the same?</p>",
        "id": 185040829,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578422902
    },
    {
        "content": "<p>e.g. code like <code>fn bar&lt;'a&gt;(first: &amp;'a u8, second: &amp;'a u8) { || do_something(first, second); }</code> needs to know that 'first' and 'second' have the same region</p>",
        "id": 185041025,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423010
    },
    {
        "content": "<p>To answer your earlier question - yes, I believe this is entirely a matter of diagnostics. The current  non-diagnostic code seems perfectly correct - however, the information we need ('more precise' knowledge of region relationships) is not available while we're checking the closure. Changing the diagnostic code seemed to be the simplest way of resolving this</p>",
        "id": 185041336,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423151
    },
    {
        "content": "<blockquote>\n<p>e.g. code like <code>fn bar&lt;'a&gt;(first: &amp;'a u8, second: &amp;'a u8) { || do_something(first, second); }</code> needs to know that 'first' and 'second' have the same region</p>\n</blockquote>\n<p>it doesn't know that now, right?</p>",
        "id": 185041750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423397
    },
    {
        "content": "<p>Ideally, it would not know that</p>",
        "id": 185041776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423412
    },
    {
        "content": "<p>By \"it\" here, I specifically mean the closure</p>",
        "id": 185041787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423418
    },
    {
        "content": "<p>the closure doesn't know now</p>",
        "id": 185041805,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423430
    },
    {
        "content": "<p>The outer fn item <em>does</em> remember those details (i.e., the things that were hand-written by the user)</p>",
        "id": 185041809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423432
    },
    {
        "content": "<p>right</p>",
        "id": 185041819,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423439
    },
    {
        "content": "<p>the closure would communicate back that they must be equal (if that is required locally)</p>",
        "id": 185041837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423448
    },
    {
        "content": "<p>and then the outer fn item would determine if that can be made to be true</p>",
        "id": 185041846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423455
    },
    {
        "content": "<p>that's the intended design, at least</p>",
        "id": 185041854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423459
    },
    {
        "content": "<p>in part because it's not easy to tell if they are equal -- we don't know at the point where we are building MIR, or we won't know</p>",
        "id": 185041875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423476
    },
    {
        "content": "<p>because of subtyping etc</p>",
        "id": 185041939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423493
    },
    {
        "content": "<p>consider e.g.</p>",
        "id": 185041950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423497
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">...(</span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y1</span><span class=\"p\">)...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185041972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423519
    },
    {
        "content": "<p>here, the type of the captured value needs to be inferred</p>",
        "id": 185042029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423553
    },
    {
        "content": "<p>(but we don't want to be doing that inference until borrowck/polonius etc)</p>",
        "id": 185042045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423562
    },
    {
        "content": "<p>anyway I have to go and understand how it is that your PR improves diagnostics specifically I guess</p>",
        "id": 185042072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578423577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: See here: <a href=\"https://github.com/rust-lang/rust/blob/56446fef49d73212f63ea7aa0680d5d602f19b9a/src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs#L332\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/56446fef49d73212f63ea7aa0680d5d602f19b9a/src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs#L332\">https://github.com/rust-lang/rust/blob/56446fef49d73212f63ea7aa0680d5d602f19b9a/src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs#L332</a></p>",
        "id": 185042295,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423675
    },
    {
        "content": "<p>Being able to compute a correct upper bound allows this branch to succeed</p>",
        "id": 185042332,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423694
    },
    {
        "content": "<p>which allows us to create a <code>BorrowExplanation::MustBeValidFor</code> instead of a <code>BorrowExplanation::Unexplained</code></p>",
        "id": 185042386,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423713
    },
    {
        "content": "<p>the <code>BorrowExplanation</code> gets checked later on when producing the message, and allows us to emit a more specific diagnostic</p>",
        "id": 185042471,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423737
    },
    {
        "content": "<p>w.r.t erasing regions - if type check were to erase the regions, where would the original relationships between the regions be stored?</p>",
        "id": 185042521,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423767
    },
    {
        "content": "<p>Would the closure parent still have the information needed to check the propagated constraints, or would that be done elsewhere?</p>",
        "id": 185042565,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1578423787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know when you're available to talk more about this</p>",
        "id": 185625241,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027072
    },
    {
        "content": "<p>Is there a branch somewhere that contains code for erasing regions during typecheck? Or a description somewhere of what those changes will look like?</p>",
        "id": 185625346,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027119
    },
    {
        "content": "<p>If I understand correctly, typecheck will erase the regions (so <code>Closure { upvar_a: Foo&lt;'a&gt;, upvar_b: Bar&lt;'b&gt; }</code> becomes <code>Closure { upvar_a: Foo&lt;'erased&gt;, upvar_b: Bar&lt;'erased&gt;</code>. Then, borrowcheck will create fresh inference variables: <code>Closure { upvar_a: Foo&lt;_#1r&gt;, upvar_b: Bar&lt;_#2r&gt;</code></p>",
        "id": 185625598,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027284
    },
    {
        "content": "<p>If that's the case, I think we could still propagate the necessary information for diagnostics. When we erase regions, we could mark which 'positions' (given by the order in which the regions are visited) correspond to the same region</p>",
        "id": 185625812,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027366
    },
    {
        "content": "<p>e.g. for <code>Closure { first: Foo&lt;'a&gt;, second: Bar&lt;'a&gt;, third: Foo&lt;'b&gt; }</code> we would record something like <code>identical_regions: [ {0, 1}, {2} ]</code></p>",
        "id": 185625911,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027424
    },
    {
        "content": "<p>During borrowcheck, we would associate this information with the freshly created region variables</p>",
        "id": 185625988,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027451
    },
    {
        "content": "<p>The only other solution I can think of would be to use the context of the parent item when running the diagnostic code for closure errors. That would give us access to the 'identical' region information - however, I think we would also lose all information about 'interior' regions in the closure</p>",
        "id": 185626198,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027582
    },
    {
        "content": "<p>The borrowcheck region error code seems quite complicated, so I think it would require a large amount of effort to prevent any diagnostic regressions</p>",
        "id": 185626264,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1579027622
    },
    {
        "content": "<blockquote>\n<p>Is there a branch somewhere that contains code for erasing regions during typecheck? Or a description somewhere of what those changes will look like?</p>\n</blockquote>\n<p>IIUC one of the first steps is <a href=\"https://github.com/rust-lang/rust/pull/67681\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67681\">https://github.com/rust-lang/rust/pull/67681</a>, and the plan is currently being worked on</p>",
        "id": 185632075,
        "sender_full_name": "lqd",
        "timestamp": 1579030849
    }
]