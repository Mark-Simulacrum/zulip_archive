[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Triage.20meeting.202021-12-06/near/263880734\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/Triage.20meeting.202021-12-06/near/263880065\">said</a>:</p>\n<blockquote>\n<p>before Thanksgiving week I was making slow progress on <a href=\"https://github.com/rust-lang/rust/issues/74256\">#74256</a></p>\n</blockquote>\n<p>I'm having a little trouble understanding the \"why\" behind all of the various logic in this function (<a href=\"https://github.com/rust-lang/rust/blob/0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c/compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs#L52:L52\"><code>try_report_anon_anon_conflict </code></a>), so if anyone is familiar please let me know :)</p>\n</blockquote>\n<p>That match is just checking if the return type is related to any anonymous region in the param list (<a href=\"https://github.com/rust-lang/rust/blob/0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c/compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs#L153\">is_return_type_anon</a>), is that helpful, or is it a different part of that super complicated method (it took me a solid minute to see that <code>sup</code> and <code>sub</code> were different <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> )?</p>\n<p>As far as <a href=\"https://github.com/rust-lang/rust/issues/74256\">https://github.com/rust-lang/rust/issues/74256</a> the only thing left is fixing the error for the async function with \"no\" return but different parameter lifetimes error?</p>",
        "id": 264004329,
        "sender_full_name": "DevinR528",
        "timestamp": 1638885457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243877\">@DevinR528</span> sorry for not being more specific, my confusion was around the mapping between the values the sup/subs have and the actual error messages and spans that are produced</p>",
        "id": 264070913,
        "sender_full_name": "tmandry",
        "timestamp": 1638910850
    },
    {
        "content": "<p>essentially, why does each pattern correspond to the code in that match arm?</p>",
        "id": 264071003,
        "sender_full_name": "tmandry",
        "timestamp": 1638910887
    },
    {
        "content": "<p>Ahh I see, well I can give you a bit more info then my knowledge hits a wall :)<br>\n<code>sup</code> is the <code>&amp;mut &amp;i32</code> and <code>sub</code> is <code>&amp;i32</code> for the <code>async fn async_fn(x: &amp;i32, y: &amp;mut &amp;i32)</code> no return case. The match arm is <code>(None, None)</code> and the error is about <code>x</code> not living as long as <code>y</code>. This is the case that happens as long as the function doesn't return anything with a lifetime (and is also not <code>async</code>).</p>\n<p>The <code>(Some(ret_span), _)</code> case is being triggered by the above function because of the <code>impl Future&lt;Output = ()&gt;</code> (this is the misleading error message since this actually has nothing to do with the life time error) and this is the end of what I can explain. I'm not sure why the return of <code>impl Future</code> triggers a match with the parameter types?</p>\n<p>Somewhat interestingly adding the return explicitly and giving it an <code>'_</code> kinda fixes the error sorta</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0106]: missing lifetime specifier\n  --&gt; /home/devinr/aprog/rust/__forks__/rust/src/test/ui/async-await/issue-74256-lifetime-msg.rs:3:85\n   |\nLL | async fn async_fn(x: &amp;i32, y: &amp;mut &amp;i32) -&gt; impl std::future::Future&lt;Output = ()&gt; + &#39;_ {\n   |                      ----     ---------                                             ^^ expected named lifetime parameter\n   |\n   = help: this function&#39;s return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or one of `y`&#39;s 2 lifetimes\n</code></pre></div>",
        "id": 264083225,
        "sender_full_name": "DevinR528",
        "timestamp": 1638916285
    }
]