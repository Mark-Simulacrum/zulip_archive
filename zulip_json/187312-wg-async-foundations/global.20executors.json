[
    {
        "content": "<p>Wrote this post today: <a href=\"https://boats.gitlab.io/blog/post/global-executors/\" target=\"_blank\" title=\"https://boats.gitlab.io/blog/post/global-executors/\">https://boats.gitlab.io/blog/post/global-executors/</a></p>",
        "id": 180752458,
        "sender_full_name": "boats",
        "timestamp": 1573752195
    },
    {
        "content": "<p>I bet you've already considered this already, but I wanted to make explicit that building this into std would make it impossible to have two (or more) global executors running in the same program, which, while undesirable, is possible today using the library-specific spawn functions</p>",
        "id": 180759031,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573756143
    },
    {
        "content": "<p>Note, though, that this could be avoided by using thread-local spawners rather than a single global (but that has its own complexity costs)</p>",
        "id": 180759231,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573756244
    },
    {
        "content": "<p>Yes. Well, its still possible using a different API from <code>std::task::spawn</code> of course</p>",
        "id": 180759255,
        "sender_full_name": "boats",
        "timestamp": 1573756261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203289\">@boats</span> Not if the two libraries both set <code>#[global_executor]</code> internally, which is my fear</p>",
        "id": 180759647,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573756496
    },
    {
        "content": "<p>but yes, that's a good point that we could potentially build best-practices that would help resolve that situation</p>",
        "id": 180759699,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573756542
    },
    {
        "content": "<p>I can imagine making everyone declare <code>#[global_executor]</code> in every program would be rather unpopular, though</p>",
        "id": 180759778,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573756570
    },
    {
        "content": "<p>I see what you mean. Yes, libraries shouldn't depend on crates that set <code>global_executor</code> either.</p>",
        "id": 180759791,
        "sender_full_name": "boats",
        "timestamp": 1573756580
    },
    {
        "content": "<p>That's one reason to provide a simple default, so libraries can \"work\" in testing mode without them having to add some <code>dev-dependency</code> or something</p>",
        "id": 180759851,
        "sender_full_name": "boats",
        "timestamp": 1573756619
    },
    {
        "content": "<p>These sorts of global \"only one person gets to set it\" resources are a nightmare in many other language's ecosystems-- I once spent multiple weeks untangling JVM logging frameworks from various OSS libraries :)</p>",
        "id": 180759899,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573756657
    },
    {
        "content": "<p>Agreed, which is why I think we should be very careful about how many we add, and I don't think we should make it possible for users to define their own.</p>",
        "id": 180760004,
        "sender_full_name": "boats",
        "timestamp": 1573756720
    },
    {
        "content": "<p>The \"only one global allocator\" approach has worked out reasonably well so far IMO. Crates like jemallocator don't set the global allocator themselves by default. That's left to the end user (maybe by turning on a Cargo feature or something like that).</p>",
        "id": 180773522,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1573764694
    },
    {
        "content": "<p>though it'll probably be much more common to set a global executor than global allocator</p>",
        "id": 180774291,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1573765249
    },
    {
        "content": "<p>much more common, I'd think</p>",
        "id": 180865079,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1573846976
    },
    {
        "content": "<p>Hi, I'd like to help out to get Global Executors going in Rust. Is there anything that's ready to be picked up, designing or code?</p>",
        "id": 182254297,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1575146217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252217\">@Khionu Sybiern</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> -- not really, I think there's still a lot of active debate if that is something we would actually want</p>",
        "id": 182474180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575394360
    },
    {
        "content": "<p>What are the issues being debated? Is there another place this discussion is happening?</p>",
        "id": 182499886,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1575409467
    },
    {
        "content": "<p>Iâ€™d much rather have some sort of a task-local mechanism and then make executor one of those task local things</p>",
        "id": 182600818,
        "sender_full_name": "nagisa",
        "timestamp": 1575494406
    },
    {
        "content": "<p>Task-local? Not sure what you mean. The Executor can't belong to a Task.</p>",
        "id": 182606015,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1575497902
    },
    {
        "content": "<p>The task normally only needs to have a handle to submit tasks to the executor, the executor itself can either be owned at a higher level or be reference counted via the handles</p>",
        "id": 182637664,
        "sender_full_name": "Nemo157",
        "timestamp": 1575534140
    },
    {
        "content": "<p>There was significant discussion of the idea in this internals thread: <a href=\"https://internals.rust-lang.org/t/global-executors/11295\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/global-executors/11295\">https://internals.rust-lang.org/t/global-executors/11295</a></p>",
        "id": 182637724,
        "sender_full_name": "Nemo157",
        "timestamp": 1575534225
    },
    {
        "content": "<p>What <span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> said.</p>",
        "id": 182664511,
        "sender_full_name": "nagisa",
        "timestamp": 1575556710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252217\">@Khionu Sybiern</span> one thing that's more short-term is the <code>thread::block_on</code> API, which is not such a huge addition as a global executor. There's an open PR, but I think it needs an RFC to work out some of the details.</p>",
        "id": 183087021,
        "sender_full_name": "boats",
        "timestamp": 1576002325
    },
    {
        "content": "<p>Happy to discuss these details with you if you'd be interested in writing an RFC for the API</p>",
        "id": 183087038,
        "sender_full_name": "boats",
        "timestamp": 1576002336
    }
]