[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> - here's the hack I mentioned in the meeting earlier: <a href=\"https://github.com/eholk/rust/commit/4ef682c0f63b056423cb69d9caf91b22ed1ba94b\">https://github.com/eholk/rust/commit/4ef682c0f63b056423cb69d9caf91b22ed1ba94b</a></p>",
        "id": 247743929,
        "sender_full_name": "eholk",
        "timestamp": 1627669048
    },
    {
        "content": "<p>It fails several tests in the test suite, so that's good</p>",
        "id": 247743956,
        "sender_full_name": "eholk",
        "timestamp": 1627669063
    },
    {
        "content": "<p>On of the tests it fails is from <a href=\"http://async-fn-nonsend.rs\">async-fn-nonsend.rs</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>async fn non_send_temporary_in_match() {\n    // We could theoretically make this work as well (produce a `Send` future)\n    // for scrutinees / temporaries that can or will\n    // be dropped prior to the match body\n    // (e.g. `Copy` types).\n    match Some(non_send()) {\n        Some(_) =&gt; fut().await,\n        None =&gt; {}\n    }\n}\n</code></pre></div>\n<p>That looks pretty similar, but I'm not sure whether it should work or not. Are we allowed to drop the result of <code>Some(non_send())</code> before calling <code>fut().await</code>, since even though we technically still have a borrow in the pattern, <code>Some(_)</code>, it's not actually used?</p>",
        "id": 247744171,
        "sender_full_name": "eholk",
        "timestamp": 1627669190
    },
    {
        "content": "<p>hmm, good question</p>",
        "id": 247771298,
        "sender_full_name": "tmandry",
        "timestamp": 1627685891
    },
    {
        "content": "<p>the language semantics are that <code>Some(non_send())</code> lives until the end of the match</p>",
        "id": 247771575,
        "sender_full_name": "tmandry",
        "timestamp": 1627686128
    },
    {
        "content": "<p>so I think we should err on the side of not allowing it for now</p>",
        "id": 247771584,
        "sender_full_name": "tmandry",
        "timestamp": 1627686135
    },
    {
        "content": "<p>it isn't specified how define how captures across await points actually work; I think we <em>could</em> define them to behave this way, but it feels like a special case</p>",
        "id": 247771876,
        "sender_full_name": "tmandry",
        "timestamp": 1627686395
    },
    {
        "content": "<p>borrowing semantics, on the other hand, are clearly defined by control flow</p>",
        "id": 247771932,
        "sender_full_name": "tmandry",
        "timestamp": 1627686466
    },
    {
        "content": "<p>actually, the more I think about it</p>",
        "id": 247772175,
        "sender_full_name": "tmandry",
        "timestamp": 1627686690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/.2357017/near/247771932\">said</a>:</p>\n<blockquote>\n<p>borrowing semantics, on the other hand, are clearly defined by control flow</p>\n</blockquote>\n<p>that's not what <a href=\"https://github.com/rust-lang/rust/issues/57017\">#57017</a> is about, it's about holding a value (which happens to be a reference) that isn't <code>Sync</code> over an await point</p>",
        "id": 247772430,
        "sender_full_name": "tmandry",
        "timestamp": 1627686938
    },
    {
        "content": "<p>and control flow analysis for these values is really what we want</p>",
        "id": 247772626,
        "sender_full_name": "tmandry",
        "timestamp": 1627687103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> can you explain the comment about <code>Copy</code> types?</p>",
        "id": 247772845,
        "sender_full_name": "tmandry",
        "timestamp": 1627687343
    },
    {
        "content": "<p>I can't find anything that would imply that unused <code>Copy</code> temporaries in scrutinees can be dropped prior to the match body</p>",
        "id": 247772868,
        "sender_full_name": "tmandry",
        "timestamp": 1627687382
    }
]