[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> after you left, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> and me talked some more, and the conclusion is that we can likely find <em>some</em> model that will make generators work. Given how desirable that use-case is, that seems like a constraint worth putting on the model, even if it complicates things. And given that we don't emit <code>noalias</code> for mutable reference ATM per default, it's also not super-urgent tog et this fixed because right now we are not misoptimizing anything (we generate UB-free LLVM IR, for all we know).<br>\nIt is still a soundness bug though to generate UB-ful LLVM IR with <code>-Zmutable-noalias</code>. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> proposed fix is to search for generators inside mutable references (similar to how we search for <code>UnsafeCell</code> inside shard references), and inhibit the attribute when we find one.</p>",
        "id": 174490670,
        "sender_full_name": "RalfJ",
        "timestamp": 1567111344
    },
    {
        "content": "<p>Is it enough to just turn of <code>noalias</code> on the references to generators while still having <code>noalias</code> on the references within the interior?</p>",
        "id": 174491029,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567111644
    },
    {
        "content": "<p>I'd imagine that depends on whether you ever use the reference to the generator to derive a reference to the interior</p>",
        "id": 174491055,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567111680
    },
    {
        "content": "<p>but I don't have a good sense for how the actual formal rules around <code>noalias</code> interact in this case</p>",
        "id": 174491133,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567111722
    },
    {
        "content": "<p>(storing derived pointers)</p>",
        "id": 174491163,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567111741
    },
    {
        "content": "<p>storing a pointer has no effect on that pointer. it keeps its identity.</p>",
        "id": 174492372,
        "sender_full_name": "RalfJ",
        "timestamp": 1567112592
    },
    {
        "content": "<blockquote>\n<p>I'd imagine that depends on whether you ever use the reference to the generator to derive a reference to the interior</p>\n</blockquote>\n<p>you are not allowed to derive a reference to the offending field (the one that has an outstanding loan)</p>",
        "id": 174492409,
        "sender_full_name": "RalfJ",
        "timestamp": 1567112612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Yeah, so we can't ever debug print values that have existing mutable references to them</p>",
        "id": 174498939,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567118578
    },
    {
        "content": "<p>which makes sense</p>",
        "id": 174498942,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567118581
    },
    {
        "content": "<blockquote>\n<p>which makes sense</p>\n</blockquote>\n<p>glad that we agree on that :)</p>",
        "id": 174522911,
        "sender_full_name": "RalfJ",
        "timestamp": 1567151334
    },
    {
        "content": "<blockquote>\n<p>similar to how we search for UnsafeCell inside shard references</p>\n</blockquote>\n<p>By the way, does this currently pessimize type-erased contexts where the type is hidden under <code>dyn Trait</code> or something like that?</p>",
        "id": 174531234,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567159398
    },
    {
        "content": "<p>Hello, i was reading <a href=\"https://github.com/rust-lang/rust/issues/63818#issuecomment-526579977\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63818#issuecomment-526579977\">https://github.com/rust-lang/rust/issues/63818#issuecomment-526579977</a> . I think the direction is great, but the rules feels a little ad-hoc, and i feel if user defined something and its behavior is similar to generators, it won't be protected by the rule, if we only focus on the generator use case.</p>",
        "id": 174565846,
        "sender_full_name": "Charles Lew",
        "timestamp": 1567186412
    },
    {
        "content": "<p>I'm trying to make up my own theory, which might be similar but different in details.<br>\nI'm thinking about use a special named lifetime called <code>'self</code> to mark the self-referential lifetime.</p>\n<p>So for the original problem:</p>\n<div class=\"codehilite\"><pre><span></span>pub async fn test() -&gt; i32 {\n    let a: Cell&lt;i32&gt; = Cell::new(0);\n    let mut b: &amp;Cell&lt;i32&gt; = &amp;a;\n    SomeFuture.await;\n    b.set(100);\n    a.get()\n}\n</pre></div>\n\n\n<p>I think it can desugar into</p>\n<div class=\"codehilite\"><pre><span></span>struct Test {\n    state: ?,\n    a: Cell&lt;i32&gt;,\n    b: &amp;&#39;self Cell&lt;i32&gt;,\n}\n</pre></div>\n\n\n<p>And when <code>'self</code> is used in a struct <code>S</code>, it means it can be self-referential. And <code>&amp;mut S</code> is no longer <code>noalias</code>.</p>",
        "id": 174566439,
        "sender_full_name": "Charles Lew",
        "timestamp": 1567186806
    },
    {
        "content": "<p>Maybe a more powerful version of borrowck in the future can build rules around this special lifetime, and reason about it.</p>",
        "id": 174566824,
        "sender_full_name": "Charles Lew",
        "timestamp": 1567187093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> lifetimes are erased, and cannot have different runtime behavior</p>",
        "id": 174578051,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567195323
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>similar to how we search for UnsafeCell inside shard references</p>\n</blockquote>\n<p>By the way, does this currently pessimize type-erased contexts where the type is hidden under <code>dyn Trait</code> or something like that?</p>\n</blockquote>\n<p>currently actually not, if you have an <code>&amp;dyn Trait</code> Miri will figure out the \"real\" type and treat the reference accordingly. whether that is waht we want, I do not know.</p>",
        "id": 174609526,
        "sender_full_name": "RalfJ",
        "timestamp": 1567242258
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> lifetimes are erased, and cannot have different runtime behavior</p>\n</blockquote>\n<p>I thought named lifetimes can be a little special? But yes this system might be over-complex. I was just thinking about how to make the mechanism able to map to surface syntax.</p>",
        "id": 174620129,
        "sender_full_name": "Charles Lew",
        "timestamp": 1567261912
    }
]