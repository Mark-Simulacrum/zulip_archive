[
    {
        "content": "<p>Since this might also be interesting to this group, I will also share it here: <a href=\"https://internals.rust-lang.org/t/async-traits-the-less-dynamic-allocations-edition/13048/2\">https://internals.rust-lang.org/t/async-traits-the-less-dynamic-allocations-edition/13048/2</a></p>",
        "id": 209947761,
        "sender_full_name": "Matthias247",
        "timestamp": 1600027921
    },
    {
        "content": "<p>If this finds some wider interest, I think <a href=\"https://github.com/Matthias247/async_trait_experiments/blob/master/src/dynamic_future.rs\">DynamicFuture</a> could be a thing that could be worthwhile to include in <code>core::future</code>.  It allows to make type erased futures which use different backing storage mechansism interoperable through the same mechansim that we already use for <code>Waker</code>s. </p>\n<p>But there is obviously no urgent need for it - this could be a mini-library too until we understand the use-cases and demand better.</p>",
        "id": 209947934,
        "sender_full_name": "Matthias247",
        "timestamp": 1600028191
    },
    {
        "content": "<p>I put this in the internals too, but this feature could have a kinda interesting relationship with procedural vtables (and also with &amp;move or equivalent). In fact, as far as I can tell, <code>DynamicFuture</code> is exactly a <code>&amp;move dyn Future</code> with a slightly custom vtable. <a href=\"https://gitlab.com/-/snippets/2013937\">I sketched out a version of it</a> that I'm interested to hear your take on.</p>",
        "id": 210057581,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1600114710
    }
]