[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> hey, remind me again what issues Allan is expected to have on the impl. side of his trait returning a generic future? </p>\n<blockquote>\n<p>Alan seems to have something working, but when he goes to update the examples of how to implement this trait in his crate's documentation, he realizes it doesn't work.</p>\n</blockquote>\n<p>The issue I see is that implementers either have to <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5e04c9a7b4c03b268569adb62e2c79bb\">box/dynamic dispatch</a> as well or implement Future manually (which isn't something Allan would enjoy). Is that what we meant?</p>",
        "id": 233674681,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1617895778
    },
    {
        "content": "<p>If we look at this code <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b2f323f6869b198f9d51b0bf636d3006\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b2f323f6869b198f9d51b0bf636d3006</a> - There's only two choices for the associated type: <code>Box&lt;dyn Future&gt;</code> or some custom type that implements <code>Future</code>. A custom future type would work... We could have Alan do that, but it's messy code. If however, Alan wants to use async/await without boxing the resultant future, that's simply not possible.</p>",
        "id": 233675809,
        "sender_full_name": "rylev",
        "timestamp": 1617896135
    },
    {
        "content": "<p>right. It has to be <code>Pin&lt;Box&lt;dyn Future&gt;&gt;</code> btw. Allan will likely struggle with that <strong>a bit</strong> too.</p>",
        "id": 233679298,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1617897385
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b234b1dc2c913668f1d7a75515315d47\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b234b1dc2c913668f1d7a75515315d47</a></p>",
        "id": 233679556,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1617897492
    },
    {
        "content": "<p>i also wonder if Alan would try <code>type Fut = impl std::future::Future;</code></p>",
        "id": 233689769,
        "sender_full_name": "Andrew Chin (eminence)",
        "timestamp": 1617901377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> actually, custom <code>Future</code> impl would work fine with async/await: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ec5023946b838dd2412c2d540a1dd507\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ec5023946b838dd2412c2d540a1dd507</a> . They might need to pin the future but they can do that using <code>pin_utils::pin_mut</code> macro.</p>",
        "id": 233721045,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1617913040
    },
    {
        "content": "<p>I meant using async/await as the body of the trait function. Thatâ€™s not possible</p>",
        "id": 233727490,
        "sender_full_name": "rylev",
        "timestamp": 1617915685
    },
    {
        "content": "<p>gotcha. PR is up: <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/134\">https://github.com/rust-lang/wg-async-foundations/pull/134</a></p>",
        "id": 233731105,
        "sender_full_name": "Zeeshan Ali",
        "timestamp": 1617916570
    }
]