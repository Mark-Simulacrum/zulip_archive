[
    {
        "content": "<p>I'm curious to find someone who wants to own the \"status quo\" experience for embedded developers. I'm hoping to draft <span class=\"user-mention\" data-user-id=\"348152\">@Dario Nieuwenhuis</span>, <span class=\"user-mention\" data-user-id=\"228912\">@James Munns</span>, or maybe <span class=\"user-mention\" data-user-id=\"392749\">@Daniel Egger</span> into this =)</p>",
        "id": 228507865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614728714
    },
    {
        "content": "<p>I'm only innocent bystander at the moment, time is really flying by... All I can say is that we're seeing two very important topics re async and embedded: runtime/executor/scheduler (we don't have threads but interrupts and increasingly also multi-core which are real and only partially solved challenges) and interfaces/APIs (in embedded we have blocking and \"non-blocking\" traits which allow us write generic drivers which work with any chips implementing drivers following those \"embedded-hal\" interfaces). embedded-hal works but on a rather pedestrian and not really async compatible niveau.</p>",
        "id": 228514163,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614732076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392749\">@Daniel Egger</span> I'm confused a bit -- don't have threads, but do have multicore?</p>",
        "id": 228516018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614733299
    },
    {
        "content": "<p>any pointers to the nonblocking traits?</p>",
        "id": 228516048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614733317
    },
    {
        "content": "<p>I guess probably the status quo for embedded devs on async is kind of \"just can't do it\"?</p>",
        "id": 228516124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614733343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision/near/228516018\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"392749\">Daniel Egger</span> I'm confused a bit -- don't have threads, but do have multicore?</p>\n</blockquote>\n<p>Well, threads are (for most CPUs) only a software abstraction which we don't have in embedded.</p>",
        "id": 228517399,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614734107
    },
    {
        "content": "<p><a href=\"https://docs.rs/embedded-hal/0.2.4/embedded_hal/index.html\">https://docs.rs/embedded-hal/0.2.4/embedded_hal/index.html</a></p>",
        "id": 228517597,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614734206
    },
    {
        "content": "<p>It also shows some very outdated ideas about how futures could possibly come into play.</p>",
        "id": 228517660,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614734246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision/near/228516124\">said</a>:</p>\n<blockquote>\n<p>I guess probably the status quo for embedded devs on async is kind of \"just can't do it\"?</p>\n</blockquote>\n<p>Yes, not in a useful, standardised and efficient manner. And definitely not on stable (though 1.51 will get us yet another step closer).</p>",
        "id": 228517819,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614734335
    },
    {
        "content": "<p>Multi-core in Rust is a sad topic. Rust doesn't quite provide the low-level concepts to deal with those really. Basically you have independent cores (sometimes even different architectures, like ARMv6M ARMv7EM) and sharing some resources resources (RAM, FLASH, memory mapped IO, interrupts) which run in parallel and without hardware arbiter. Often there's an implementation specific hardware peripheral (mailbox, semaphore or fifos) which can be used to exchange data and steer code execution between the cores but other than that the application runing on those chips is supposed to bootstrap the cores and steer execution somehow. We don't have a good story on how we could possibly deal with that in Rust yet; this either requires some sort of OS to be bundled with all bare metal applications or the (partial)  implementation of libstd for specific chips. An async executor alone will probably not get us close enough.</p>",
        "id": 228520019,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614735679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392749\">Daniel Egger</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision/near/228517399\">said</a>:</p>\n<blockquote>\n<p>Well, threads are (for most CPUs) only a software abstraction which we don't have in embedded.</p>\n</blockquote>\n<p>side note: ime people use embedded to mean everything from Raspberry Pi to RTOS or whatever. Are there \"finer-grained\" terms people use?</p>",
        "id": 228562627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614764468
    },
    {
        "content": "<p>(also, I broke this out into its own topic)</p>",
        "id": 228562682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614764507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision.3A.20embedded/near/228562627\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"392749\">Daniel Egger</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/async.20vision/near/228517399\">said</a>:</p>\n<blockquote>\n<p>Well, threads are (for most CPUs) only a software abstraction which we don't have in embedded.</p>\n</blockquote>\n<p>side note: ime people use embedded to mean everything from Raspberry Pi to RTOS or whatever. Are there \"finer-grained\" terms people use?</p>\n</blockquote>\n<p>Nope, you're spot on that people are calling a whole bunch of different things \"embedded\". My personsal definition is something like: Any system which has a programmable processor and is not capable of running a general purpose operating system.</p>",
        "id": 228589636,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614777791
    },
    {
        "content": "<p>Careful with Raspberry Pi because they're now also doing embedded systems... ;)  <a href=\"https://www.raspberrypi.org/blog/raspberry-pi-pico-vertical-innovation/\">https://www.raspberrypi.org/blog/raspberry-pi-pico-vertical-innovation/</a></p>",
        "id": 228589800,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614777861
    },
    {
        "content": "<p>I mean, there are definitely people who are calling what they are doing embedded even if they have an OS on their device. E.g. I know a company that develops Rust software that they run on repurposed wifi routers, and they call this embedded too even though it runs Linux.</p>",
        "id": 228600852,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1614781900
    },
    {
        "content": "<p>Yeah. The embedded WG also caters for Linux based Raspberry Pi developers due to the possibility of doing embedded development on a Raspberry Pi. The available peripherals allow you to connect all kinds of accessories you'd use in much more constrained systems and develop drivers and other things much more comfortably. But that's stretching \"embedded\" quite a bit...</p>",
        "id": 228617786,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1614787557
    }
]