[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> meeting in 26 minutes</p>",
        "id": 215486127,
        "sender_full_name": "tmandry",
        "timestamp": 1604424870
    },
    {
        "content": "<p>I can't stay for long today, but hey everyone! <span class=\"user-mention\" data-user-id=\"248777\">@Bhargav Voleti</span> and I have not made much progress on the RFC vacation + work has been busy. Hoping to get back to it very soon. Beyond that I don't have any other updates. Have a good week everyone!</p>",
        "id": 215489890,
        "sender_full_name": "Lucio Franco",
        "timestamp": 1604426548
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> okay, let's get started</p>",
        "id": 215489978,
        "sender_full_name": "tmandry",
        "timestamp": 1604426589
    },
    {
        "content": "<p><a href=\"https://github.com/orgs/rust-lang/projects/2\">Project board</a></p>",
        "id": 215490061,
        "sender_full_name": "tmandry",
        "timestamp": 1604426634
    },
    {
        "content": "<p>2 things got done/fixed this week:</p>\n<ul>\n<li>Hard to read error message with 2D line drawing and multi-line expressions <a href=\"https://github.com/rust-lang/rust/issues/70935\">#70935</a></li>\n<li>Add section on async ecosystem <a href=\"https://github.com/rust-lang/async-book/issues/104\">async-book#104</a></li>\n</ul>",
        "id": 215490159,
        "sender_full_name": "tmandry",
        "timestamp": 1604426666
    },
    {
        "content": "<p>/me wonders if anyone is actually around today :)</p>",
        "id": 215490253,
        "sender_full_name": "tmandry",
        "timestamp": 1604426711
    },
    {
        "content": "<p>in any case I'll do some triage here, quite a big backlog of new issues</p>",
        "id": 215490409,
        "sender_full_name": "tmandry",
        "timestamp": 1604426776
    },
    {
        "content": "<p><a href=\"https://github.com/search?q=org%3Arust-lang+is%3Aissue+label%3AA-async-await+is%3Aopen+-label%3AAsyncAwait-Triaged&amp;type=Issues\">Untriaged issues</a></p>",
        "id": 215490440,
        "sender_full_name": "tmandry",
        "timestamp": 1604426791
    },
    {
        "content": "<h2>ICE: compiler/rustc_typeck/src/check/closure.rs:608:18: async fn generator return type not an inference variable <a href=\"https://github.com/rust-lang/rust/issues/78654\">#78654</a></h2>",
        "id": 215490523,
        "sender_full_name": "tmandry",
        "timestamp": 1604426836
    },
    {
        "content": "<p>hmm</p>",
        "id": 215490711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604426939
    },
    {
        "content": "<p>I wonder if this is related to the edition 2015?</p>",
        "id": 215490723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604426943
    },
    {
        "content": "<p>seems to reproduce on 2018</p>",
        "id": 215490790,
        "sender_full_name": "tmandry",
        "timestamp": 1604426987
    },
    {
        "content": "<p>huh</p>",
        "id": 215490913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427040
    },
    {
        "content": "<p>I would guess that</p>",
        "id": 215490942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427055
    },
    {
        "content": "<p>the return type is a <code>Ty::Err</code></p>",
        "id": 215490948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427058
    },
    {
        "content": "<p>yeah it's odd</p>",
        "id": 215490949,
        "sender_full_name": "tmandry",
        "timestamp": 1604427059
    },
    {
        "content": "<p>ah</p>",
        "id": 215490960,
        "sender_full_name": "tmandry",
        "timestamp": 1604427062
    },
    {
        "content": "<p>probably an easy fix</p>",
        "id": 215490969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427066
    },
    {
        "content": "<p>do you want to add a comment about that?</p>",
        "id": 215491027,
        "sender_full_name": "tmandry",
        "timestamp": 1604427102
    },
    {
        "content": "<p>marking on deck</p>",
        "id": 215491036,
        "sender_full_name": "tmandry",
        "timestamp": 1604427108
    },
    {
        "content": "<p>sure</p>",
        "id": 215491048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427114
    },
    {
        "content": "<p>next up is</p>",
        "id": 215491158,
        "sender_full_name": "tmandry",
        "timestamp": 1604427173
    },
    {
        "content": "<h2>error[E0391]: cycle detected when computing type of async fn <a href=\"https://github.com/rust-lang/rust/issues/78649\">#78649</a></h2>",
        "id": 215491161,
        "sender_full_name": "tmandry",
        "timestamp": 1604427175
    },
    {
        "content": "<p>cycle errors, my favorite</p>",
        "id": 215491382,
        "sender_full_name": "tmandry",
        "timestamp": 1604427277
    },
    {
        "content": "<p>I can see how this would result in a cycle, it seems like it needs to check that the return type of <code>foo</code> is <code>Send</code></p>",
        "id": 215491510,
        "sender_full_name": "tmandry",
        "timestamp": 1604427337
    },
    {
        "content": "<p>yeah..</p>",
        "id": 215491511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427337
    },
    {
        "content": "<p>while type checking <code>foo</code> itself</p>",
        "id": 215491530,
        "sender_full_name": "tmandry",
        "timestamp": 1604427351
    },
    {
        "content": "<p>this is sort of expected behavior</p>",
        "id": 215491538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427355
    },
    {
        "content": "<p>but I don't see why that doesn't happen with <code>Box</code></p>",
        "id": 215491542,
        "sender_full_name": "tmandry",
        "timestamp": 1604427358
    },
    {
        "content": "<p>for better or worse</p>",
        "id": 215491544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427358
    },
    {
        "content": "<p>oh hmm</p>",
        "id": 215491616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427377
    },
    {
        "content": "<p>(maybe we're special casing Box somewhere?)</p>",
        "id": 215491636,
        "sender_full_name": "tmandry",
        "timestamp": 1604427391
    },
    {
        "content": "<p>ah well</p>",
        "id": 215491687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427423
    },
    {
        "content": "<p>if you look at the signature of <code>FutureExt::Boxed</code>...</p>",
        "id": 215491702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427431
    },
    {
        "content": "<p><code>fn boxed&lt;'a&gt;(self) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Self::Output&gt; + 'a + Send&gt;&gt;</code></p>",
        "id": 215491715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427439
    },
    {
        "content": "<p>it does require <code>Self::Output</code></p>",
        "id": 215491723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427444
    },
    {
        "content": "<p>yeah that's where I was going :)</p>",
        "id": 215491729,
        "sender_full_name": "tmandry",
        "timestamp": 1604427448
    },
    {
        "content": "<p>I don't think <code>Box</code> is special-cased</p>",
        "id": 215491749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427464
    },
    {
        "content": "<p>but maybe it just winds up never demanding the return type somehow</p>",
        "id": 215491758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427471
    },
    {
        "content": "<p>this is definitely super annoying</p>",
        "id": 215491886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427530
    },
    {
        "content": "<p>I guess it can be inferred as <code>Box&lt;{{opaque}}&gt;</code> essentially?</p>",
        "id": 215491900,
        "sender_full_name": "tmandry",
        "timestamp": 1604427539
    },
    {
        "content": "<p>and i'm not 100% sure why it can't be handled well :) it seems like it could</p>",
        "id": 215491915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427548
    },
    {
        "content": "<p>in particular the <code>Output</code> from the generator type is kind of known</p>",
        "id": 215491954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427574
    },
    {
        "content": "<p>but i'm not sure how easy it will be to figure out the right path</p>",
        "id": 215491982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427592
    },
    {
        "content": "<p>okay, I'd say this is somewhat important but requires some real type checker spelunking</p>",
        "id": 215492162,
        "sender_full_name": "tmandry",
        "timestamp": 1604427672
    },
    {
        "content": "<p>I'll add a comment</p>",
        "id": 215492262,
        "sender_full_name": "tmandry",
        "timestamp": 1604427722
    },
    {
        "content": "<p>next up will be</p>\n<h2>Variables not always moved into <code>async move</code> block <a href=\"https://github.com/rust-lang/rust/issues/78633\">#78633</a></h2>",
        "id": 215492349,
        "sender_full_name": "tmandry",
        "timestamp": 1604427766
    },
    {
        "content": "<p>oh actually on the last one</p>",
        "id": 215492407,
        "sender_full_name": "tmandry",
        "timestamp": 1604427810
    },
    {
        "content": "<p>now that I'm writing it out, I'm seeing that <code>Self::Output</code> is clearly just <code>()</code></p>",
        "id": 215492435,
        "sender_full_name": "tmandry",
        "timestamp": 1604427828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E11.2E03/near/215491954\">said</a>:</p>\n<blockquote>\n<p>in particular the <code>Output</code> from the generator type is kind of known</p>\n</blockquote>\n<p>that is what I meant by this</p>",
        "id": 215492455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427840
    },
    {
        "content": "<p>right</p>",
        "id": 215492472,
        "sender_full_name": "tmandry",
        "timestamp": 1604427843
    },
    {
        "content": "<p>it's a bit hard to say without more digging just <em>where</em> the cycle triggers and how hard it will be to avoid</p>",
        "id": 215492545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604427873
    },
    {
        "content": "<p>so is it trying to make sure the function body is well-formed, essentially, before figuring out its return type?</p>",
        "id": 215492548,
        "sender_full_name": "tmandry",
        "timestamp": 1604427874
    },
    {
        "content": "<p>okay, commented. not sure how to prioritize this one, but in an ideal world we'd be finding a way to fix it</p>",
        "id": 215492733,
        "sender_full_name": "tmandry",
        "timestamp": 1604427971
    },
    {
        "content": "<p>I think I'll throw it on deck for now</p>",
        "id": 215492744,
        "sender_full_name": "tmandry",
        "timestamp": 1604427979
    },
    {
        "content": "<p>okay, on to <a href=\"https://github.com/rust-lang/rust/issues/78633\">#78633</a></p>",
        "id": 215492794,
        "sender_full_name": "tmandry",
        "timestamp": 1604428006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/187312-wg-async-foundations/topic/meeting.202020.2E11.2E03/near/215492548\">said</a>:</p>\n<blockquote>\n<p>so is it trying to make sure the function body is well-formed, essentially, before figuring out its return type?</p>\n</blockquote>\n<p>I guess?</p>",
        "id": 215492795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604428007
    },
    {
        "content": "<p>^ added that theory to my comment</p>",
        "id": 215493171,
        "sender_full_name": "tmandry",
        "timestamp": 1604428177
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/78633\">#78633</a> involves capture semantics of <code>async move</code> blocks. are those subtly different from closures somehow?</p>",
        "id": 215493225,
        "sender_full_name": "tmandry",
        "timestamp": 1604428202
    },
    {
        "content": "<p>oh, reading the comments more</p>",
        "id": 215493416,
        "sender_full_name": "tmandry",
        "timestamp": 1604428292
    },
    {
        "content": "<p>er, yeah, my understanding remains the same</p>",
        "id": 215493524,
        "sender_full_name": "tmandry",
        "timestamp": 1604428332
    },
    {
        "content": "<p>(sorry, I had to drop off)</p>",
        "id": 215493553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604428352
    },
    {
        "content": "<p>it looks like with <code>arena</code> is being treated like a temporary somehow</p>",
        "id": 215493560,
        "sender_full_name": "tmandry",
        "timestamp": 1604428357
    },
    {
        "content": "<p>sorry, looks like <code>track</code> is the issue</p>",
        "id": 215493872,
        "sender_full_name": "tmandry",
        "timestamp": 1604428514
    },
    {
        "content": "<p>essentially</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">track</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">track</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arena</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>doesn't compile, but</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">track</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">track</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">track</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// &lt;-- added</span>\n<span class=\"w\">        </span><span class=\"n\">track</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arena</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>does</p>",
        "id": 215493935,
        "sender_full_name": "tmandry",
        "timestamp": 1604428546
    },
    {
        "content": "<p>oh I think I see what's going on</p>",
        "id": 215494124,
        "sender_full_name": "tmandry",
        "timestamp": 1604428636
    },
    {
        "content": "<p>this is how closures work too</p>",
        "id": 215494157,
        "sender_full_name": "tmandry",
        "timestamp": 1604428656
    },
    {
        "content": "<p>I think</p>",
        "id": 215494198,
        "sender_full_name": "tmandry",
        "timestamp": 1604428672
    },
    {
        "content": "<p><code>track</code> in the first example is being captured as a mutable reference, because that's how it's used</p>",
        "id": 215494275,
        "sender_full_name": "tmandry",
        "timestamp": 1604428698
    },
    {
        "content": "<p>yeah so this non-async example shows the same thing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">track</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//let mut track = track;</span>\n<span class=\"w\">        </span><span class=\"n\">track</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arena</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but the error message is different</p>",
        "id": 215494579,
        "sender_full_name": "tmandry",
        "timestamp": 1604428837
    },
    {
        "content": "<p>non-async case:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0521]: borrowed data escapes outside of closure\n --&gt; src/main.rs:9:9\n  |\n6 |     let mut track = Vec::new();\n  |         --------- `track` declared here, outside of the closure body\n...\n9 |         track.push(&amp;arena)\n  |         ^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>async case:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0597]: `arena` does not live long enough\n  --&gt; src/main.rs:10:20\n   |\n7  |     let mut track = Vec::new();\n   |         --------- lifetime `&#39;1` appears in the type of `track`\n...\n10 |         track.push(&amp;arena)\n   |         -----------^^^^^^-\n   |         |          |\n   |         |          borrowed value does not live long enough\n   |         argument requires that `arena` is borrowed for `&#39;1`\n11 |     }\n   |     - `arena` dropped here while still borrowed\n</code></pre></div>",
        "id": 215494654,
        "sender_full_name": "tmandry",
        "timestamp": 1604428877
    },
    {
        "content": "<p>definitely not sure I understand what's going on in the async error</p>",
        "id": 215494863,
        "sender_full_name": "tmandry",
        "timestamp": 1604428988
    },
    {
        "content": "<p>side note, I think this is a pretty confusing aspect of how captures work in general</p>",
        "id": 215494888,
        "sender_full_name": "tmandry",
        "timestamp": 1604429002
    },
    {
        "content": "<p>honestly, I think both error messages are bad</p>",
        "id": 215495228,
        "sender_full_name": "tmandry",
        "timestamp": 1604429167
    },
    {
        "content": "<p>and I don't quite understand why removing <code>move</code> on the examples allows it to compile</p>",
        "id": 215495249,
        "sender_full_name": "tmandry",
        "timestamp": 1604429186
    },
    {
        "content": "<p>I can explain :)</p>",
        "id": 215495469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429323
    },
    {
        "content": "<p>both errors are correct but subtle</p>",
        "id": 215495523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429353
    },
    {
        "content": "<p>OH, <code>track.push(&amp;arena)</code> is actually pushing a reference onto <code>track</code></p>",
        "id": 215495854,
        "sender_full_name": "tmandry",
        "timestamp": 1604429529
    },
    {
        "content": "<p>right</p>",
        "id": 215495894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429559
    },
    {
        "content": "<p>and in the <code>move</code> case the data is owned by the closure/generator</p>",
        "id": 215495918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429571
    },
    {
        "content": "<p>right right</p>",
        "id": 215495931,
        "sender_full_name": "tmandry",
        "timestamp": 1604429582
    },
    {
        "content": "<p>but in the other case, it remains owned by the enclosing stack frame</p>",
        "id": 215495933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429583
    },
    {
        "content": "<p>left a comment</p>",
        "id": 215496043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429645
    },
    {
        "content": "<p>ok and <code>&amp;arena</code> appearing in a <code>move</code> closure captures <code>arena</code> by value, but <code>track.push(...)</code> only captures <code>track</code> by mutable reference</p>",
        "id": 215496054,
        "sender_full_name": "tmandry",
        "timestamp": 1604429651
    },
    {
        "content": "<p>well</p>",
        "id": 215496080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429669
    },
    {
        "content": "<p><code>track</code> is also owned by the clsoure</p>",
        "id": 215496090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429673
    },
    {
        "content": "<p>but regardless it'd be a self-referential struct</p>",
        "id": 215496108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429682
    },
    {
        "content": "<p>ah ok, that makes more sense</p>",
        "id": 215496143,
        "sender_full_name": "tmandry",
        "timestamp": 1604429701
    },
    {
        "content": "<p>i.e., if you think about it the struct would be like <code>struct Generator { arena: u32, track: Vec&lt;&amp;u32&gt; }</code> where <code>track</code> holds a reference to <code>arena</code></p>",
        "id": 215496144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429701
    },
    {
        "content": "<p>I guess the fact that it's pin might mean it could <em>theoretically</em> work maybe</p>",
        "id": 215496241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429757
    },
    {
        "content": "<p>but we'd need some fancier logic</p>",
        "id": 215496250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604429761
    },
    {
        "content": "<p>right, I'm struggling to understand why you can't still do this</p>",
        "id": 215496329,
        "sender_full_name": "tmandry",
        "timestamp": 1604429787
    },
    {
        "content": "<p>in the generator case</p>",
        "id": 215496375,
        "sender_full_name": "tmandry",
        "timestamp": 1604429812
    },
    {
        "content": "<p>declaring those variables <em>inside</em> the generators certainly works</p>",
        "id": 215496467,
        "sender_full_name": "tmandry",
        "timestamp": 1604429857
    },
    {
        "content": "<p>so I guess this comes down to how we handle captures, and the fact that that code is shared with closures</p>",
        "id": 215496586,
        "sender_full_name": "tmandry",
        "timestamp": 1604429890
    },
    {
        "content": "<p>also, I still find the error message \"borrowed data escapes outside of closure\" kind of confusing</p>",
        "id": 215496866,
        "sender_full_name": "tmandry",
        "timestamp": 1604430018
    },
    {
        "content": "<p>it sounds like what it's trying to say is, this creates a closure object which borrows itself</p>",
        "id": 215496901,
        "sender_full_name": "tmandry",
        "timestamp": 1604430040
    },
    {
        "content": "<p>but when I hear \"escapes outside of closure\" I tend to think of what the closure returns</p>",
        "id": 215496931,
        "sender_full_name": "tmandry",
        "timestamp": 1604430058
    },
    {
        "content": "<p>okay, we only got through 3 issues but it's been literally twice the scheduled length of the meeting, so I'm going to call it for now ;)</p>",
        "id": 215497703,
        "sender_full_name": "tmandry",
        "timestamp": 1604430464
    },
    {
        "content": "<p>that's progress, at least</p>",
        "id": 215497722,
        "sender_full_name": "tmandry",
        "timestamp": 1604430479
    },
    {
        "content": "<p>I might come back to do some more triage in a bit</p>",
        "id": 215497791,
        "sender_full_name": "tmandry",
        "timestamp": 1604430503
    }
]