[
    {
        "content": "<p>I've started to play a bit around trying to prototype a primitive async database interface.<br>\nThere are several hard constrains for making such interface usable in diesel:</p>\n<ul>\n<li>Connections are <code>Send</code> but not <code>Sync</code></li>\n<li>The resulting implementation should be usable with tokio, which means that the constructed futures must be <code>Send</code></li>\n<li>The api should be similar to the existing diesel api, for example transactions should be realized with closures or something equally accessible </li>\n</ul>\n<p>I've put together a <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=1a090c56ab5fbcd61e6fd0363150d6ca\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=1a090c56ab5fbcd61e6fd0363150d6ca\">small playground</a> demonstrating that use case. To shorten that story: I'm not able to find an way to make that compiling. I think the first step towards an async database interface is to find a way to fix that.</p>",
        "id": 161990917,
        "sender_full_name": "weiznich",
        "timestamp": 1553805736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215423\">@weiznich</span> I'm not sure how useful this really is, but <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=59516c212ac5b9d4805eb974a023ba75\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=59516c212ac5b9d4805eb974a023ba75\">that interface is ~possible</a></p>",
        "id": 162075140,
        "sender_full_name": "Nemo157",
        "timestamp": 1553886222
    },
    {
        "content": "<p>That's certainly a step into the right direction, but without closures such an interface would be quite wired to work with.</p>",
        "id": 162352395,
        "sender_full_name": "weiznich",
        "timestamp": 1554223663
    },
    {
        "content": "<p>Yeah, unfortunately async closures have a lot of issues still (I wasn’t able to get the HRTB bounds there to line up with them, that’s why I had to switch it out for a function)</p>",
        "id": 162354958,
        "sender_full_name": "Nemo157",
        "timestamp": 1554225386
    },
    {
        "content": "<p>Hello all! Definitely stoked that we have a database WG now! I've been doing a lot of work with the <a href=\"https://github.com/mongodb-labs/mongo-rust-driver-prototype\" target=\"_blank\" title=\"https://github.com/mongodb-labs/mongo-rust-driver-prototype\">mongo driver</a>, and built and the <a href=\"https://github.com/thedodd/wither\" target=\"_blank\" title=\"https://github.com/thedodd/wither\">Wither project</a> (an ODM) on top of it for model driven interaction with the database.</p>\n<p>Definitely lots of additional work to be done, and the MongoDB team is apparently considering building a new one which will be maintained by the company and such. Who knows how long that will take, or if it will even happen. So I wanted to see if there is any interest in forking the current repo for the WG to maintain (which I would love to be a part of).</p>",
        "id": 163206650,
        "sender_full_name": "Doddzilla",
        "timestamp": 1555087801
    },
    {
        "content": "<p>Essentially I was wanting to refactor the current lib to give it an async foundation (on top of tokio), and then finish building out its missing features. After that, the Wither project can be updated to support the async interface.</p>\n<p>Let me know if you have any thoughts or are interested in this idea.</p>",
        "id": 163206755,
        "sender_full_name": "Doddzilla",
        "timestamp": 1555087874
    }
]