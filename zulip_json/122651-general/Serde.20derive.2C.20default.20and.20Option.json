[
    {
        "content": "<p>I have this this field in a struct which is deriving serde Deserialize:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[serde(default)]\ntx: Option&lt;Sender&lt;(String, Value, HttpMethod)&gt;&gt;\n</code></pre></div>\n<p>I am expecting that field to be set to None when the struct is instantiated and I have a method that, when called, it updates it with the proper value.</p>\n<p>Is there a way to workaround </p>\n<div class=\"codehilite\"><pre><span></span><code>167  |     tx: Option&lt;Sender&lt;(String, Value, HttpMethod)&gt;&gt;,\n     |     ^^^^ the trait `Deserialize&lt;&#39;_&gt;` is not implemented for `flume::Sender&lt;(std::string::String, SerdeValue, HttpMethod)&gt;`\n     |\n     = note: required because of the requirements on the impl of `Deserialize&lt;&#39;_&gt;` for `std::option::Option&lt;flume::Sender&lt;(std::string::String, SerdeValue, HttpMethod)&gt;&gt;`\nnote: required by `next_element`\n</code></pre></div>\n<p>?</p>",
        "id": 265064412,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1639597485
    },
    {
        "content": "<p>You probably want to use <code>#[serde(skip)]</code>.</p>",
        "id": 265065049,
        "sender_full_name": "bjorn3",
        "timestamp": 1639597729
    },
    {
        "content": "<p><code>#[serde(skip)]</code>is only for serializing, does not apply for deserializing</p>",
        "id": 265065548,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1639597918
    },
    {
        "content": "<p>According to <a href=\"https://serde.rs/field-attrs.html#skip\">https://serde.rs/field-attrs.html#skip</a> this applies to both serializing and deserializing:</p>\n<blockquote>\n<p>Skip this field: do not serialize or deserialize it.</p>\n<p>When deserializing, Serde will use <code>Default::default()</code> or the function given by <code>default = \"...\"</code> to get a default value for this field.</p>\n</blockquote>",
        "id": 265065678,
        "sender_full_name": "bjorn3",
        "timestamp": 1639597961
    },
    {
        "content": "<p>yes, you are right! sorry and thank you!</p>",
        "id": 265065900,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1639598056
    },
    {
        "content": "<p>tried it and it works so problem solved. Thanks again <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 265066343,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1639598252
    }
]