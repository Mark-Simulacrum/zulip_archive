[
    {
        "content": "<p>Hi there,</p>\n<p>I have a Rust program which is going to use runtime magic to call a Rust function, however the function is not found. Presumably because when an rlib is linked, all statically unused symbols are omitted from the end binary(?).</p>\n<p>Is there a way I can prevent that from happening? Something like <code>#[used]</code>, but for functions?</p>\n<p>The only other idea I have is to put the function in a shared object to stop the function from being stripped.</p>\n<p>Thanks</p>",
        "id": 269585475,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1643295947
    },
    {
        "content": "<p>Even <code>#[used]</code> doesn't apply to the linker I believe. It only applies to LLVM afaik. You can avoid <code>--gc-sections</code> to avoid omitting any symbol from object files that got linked in and pass <code>-Wl,--export-dynamic</code> to export symbols from executables.</p>",
        "id": 269586079,
        "sender_full_name": "bjorn3",
        "timestamp": 1643296170
    }
]