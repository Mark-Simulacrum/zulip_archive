[
    {
        "content": "<p>has anyone ever brought up volatile items? like for example a \"volatile array\" or a \"volatile struct\"? i know you could generate a bad version of these using const generics or macros or smth (\"bad\" since  it would not operate nicely with features like slices and such) but it seems like it could be a nice lang feature for the embedded crowd</p>",
        "id": 224129557,
        "sender_full_name": "devsnek",
        "timestamp": 1611711184
    },
    {
        "content": "<p>I have, T-lang didn't really go for it. Embedded devs get no love in rust :P</p>",
        "id": 224142231,
        "sender_full_name": "Lokathor",
        "timestamp": 1611725566
    },
    {
        "content": "<p>There are Lang folks, myself included, who would like to see it.</p>",
        "id": 224692237,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612163768
    },
    {
        "content": "<p>Needs a precise spec, sufficient to make the formal spec people happy.</p>",
        "id": 224692248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612163788
    },
    {
        "content": "<p>It also needs sufficient clarification to explain how it differs from relaxed atomics.</p>",
        "id": 224692399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612163984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/volatile.20items/near/224692248\">said</a>:</p>\n<blockquote>\n<p>Needs a precise spec, sufficient to make the formal spec people happy.</p>\n</blockquote>\n<p>how that? volatile items are just like the <code>Atomic*</code> types, aren't they? they can be built as a library abstraction on top of <code>read/write_volatile</code>. I don't see anything that would have to be specified on the lang level here.</p>",
        "id": 227091190,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ^</p>",
        "id": 227091203,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827081
    },
    {
        "content": "<p>That said, there's some half-finished works on replacing <code>read/write_volatile</code> by something more precisely specified; in particular, currently there is no way for a program to request a volatile access that will not tear. But that's a discussion on the level of volatile accesses and thus entirely unrelated to volatile items.</p>",
        "id": 227091294,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827153
    },
    {
        "content": "<p>Volatile accesses are guaranteed to not tear, right?</p>",
        "id": 227091365,
        "sender_full_name": "bjorn3",
        "timestamp": 1613827210
    },
    {
        "content": "<p>no. <code>read_volatile</code> works for <code>T</code> of any size, so it's impossible to guarantee no-tear</p>",
        "id": 227091427,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827279
    },
    {
        "content": "<p>in practice, it's guaranteed to not tear if the access is aligned and \"small enough\". but this is not properly documented and there's no way for a library to say \"make this volatile no-tear or just fail the build\" (for cases where tearing would just break everything)</p>",
        "id": 227091494,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827334
    },
    {
        "content": "<p>I think <a href=\"https://internals.rust-lang.org/t/add-volatile-operations-to-core-x86-64/10480\">https://internals.rust-lang.org/t/add-volatile-operations-to-core-x86-64/10480</a> is the proposal I had in mind</p>",
        "id": 227091623,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827494
    },
    {
        "content": "<p>but I seem to recall there was another push later by someone else...</p>",
        "id": 227091644,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827520
    },
    {
        "content": "<p>probably I am thinking of <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/212\">https://github.com/rust-lang/unsafe-code-guidelines/pull/212</a></p>",
        "id": 227091658,
        "sender_full_name": "RalfJ",
        "timestamp": 1613827552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> one way it could get lang support would be to have a <code>*vol T</code> pointer type which is simply always a volatile access whenever it's used.</p>",
        "id": 227095976,
        "sender_full_name": "Lokathor",
        "timestamp": 1613832739
    },
    {
        "content": "<p>If that's all there is to it, why is a library solution not sufficient?</p>",
        "id": 227096103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613832911
    },
    {
        "content": "<p>seems like it would be easy enough to make that work with a newtype</p>",
        "id": 227096114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613832938
    },
    {
        "content": "<p>i said one way :3</p>\n<p>and there are libraries like that, i maintain one of them.</p>\n<p>but because they're a library they can't do things like go from a struct to a field of a struct.</p>",
        "id": 227096179,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833014
    },
    {
        "content": "<p>at least not ergonomically, you'd have to build a facade type that holds a base address and then  imitates fields with methods that return altered addresses by field type and such.</p>",
        "id": 227096269,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833139
    },
    {
        "content": "<p>There's still the issue of <code>&amp;T</code> allowing spurious reads</p>",
        "id": 227096284,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613833153
    },
    {
        "content": "<p>Well this has to be a raw pointer in any case</p>",
        "id": 227096339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833208
    },
    {
        "content": "<p>even if <code>*vol T</code> existed it would have to behave basically like <code>*mut T</code></p>",
        "id": 227096358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833232
    },
    {
        "content": "<p>yes that's the idea</p>",
        "id": 227096362,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833246
    },
    {
        "content": "<p>What is the situation with the raw pointer analogue here? You can't make a raw pointer to a field either</p>",
        "id": 227096392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833295
    },
    {
        "content": "<p>but IIRC there is a macro solution for this</p>",
        "id": 227096399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833311
    },
    {
        "content": "<p>well, correct, because rust is a little behind there too</p>",
        "id": 227096452,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833334
    },
    {
        "content": "<p>but it's in Nightly</p>",
        "id": 227096464,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833354
    },
    {
        "content": "<p>so perhaps the macro approach can be extended to volatile pointers too</p>",
        "id": 227096467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833366
    },
    {
        "content": "<p>uh, heh, not in a way anyone would want to use</p>",
        "id": 227096511,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833406
    },
    {
        "content": "<p>that is, you define <code>struct Volatile&lt;T&gt;(*mut T)</code> and then have a macro <code>vol_ref!(x.field)</code> that turns <code>Volatile&lt;Foo&gt;</code> to <code>Volatile&lt;FooField&gt;</code></p>",
        "id": 227096523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833432
    },
    {
        "content": "<p>that would make those portions of a codebase horribly verbose</p>",
        "id": 227096603,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833496
    },
    {
        "content": "<p>I think it's a good thing that rust doesn't have volatile variables like C. The notation is way too implicit</p>",
        "id": 227096606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833502
    },
    {
        "content": "<p>Well, are you a person who writes volatile code often?</p>",
        "id": 227096635,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833546
    },
    {
        "content": "<p>What kind of code needs to use lots of volatiles but can't afford to be explicit about what the accesses are?</p>",
        "id": 227096636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833548
    },
    {
        "content": "<p>No, I'm honestly curious</p>",
        "id": 227096651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833563
    },
    {
        "content": "<p>I'm sure there is some application but in all the classic examples like MMIO you want to pack everything behind an API anyway</p>",
        "id": 227096705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833601
    },
    {
        "content": "<p>Personally i do not write this particular type of code. i use volatile stuff, but only on a platform with a very simple memory layout, where in fact i have wrapped it all behind an api as you suggest.</p>",
        "id": 227096734,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833637
    },
    {
        "content": "<p>for me volatile accesses are basically function calls and they should look like function calls</p>",
        "id": 227096744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833648
    },
    {
        "content": "<p>well then why not function calls for reading a dn writing a reference?</p>",
        "id": 227096753,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833674
    },
    {
        "content": "<p>because reading a reference doesn't have side effects</p>",
        "id": 227096796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833687
    },
    {
        "content": "<p>reading a volatile often also doesn't actually have side effects</p>",
        "id": 227096820,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833707
    },
    {
        "content": "<p>anyway, based on what I've been told, if the mmio address is dynamic then just having \"an api for this\" becomes quite cumbersome, because as i said you can't easily do fields of a struct</p>",
        "id": 227096868,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833796
    },
    {
        "content": "<p>What if you only have small scale volatiles, like you would get with <code>VolatileU32</code> style types?</p>",
        "id": 227096993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833913
    },
    {
        "content": "<p>so a volatile struct is just a struct with all volatile fields</p>",
        "id": 227097047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833931
    },
    {
        "content": "<p>I guess this causes problems with volatile enums, since you can get rogue discriminant reads</p>",
        "id": 227097063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613833969
    },
    {
        "content": "<p>i doubt anyone uses those</p>",
        "id": 227097093,
        "sender_full_name": "Lokathor",
        "timestamp": 1613833996
    },
    {
        "content": "<p>personally i already have a library that's better than what the language could provide, but i have only limited needs in this area and I'm able to specialize</p>",
        "id": 227097185,
        "sender_full_name": "Lokathor",
        "timestamp": 1613834084
    },
    {
        "content": "<p>is it on <a href=\"http://crates.io\">crates.io</a>?</p>",
        "id": 227097217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613834134
    },
    {
        "content": "<p>sorta, the new min_const_generics isn't currently: <a href=\"https://github.com/rust-console/voladdress/tree/main/src\">https://github.com/rust-console/voladdress/tree/main/src</a></p>",
        "id": 227097305,
        "sender_full_name": "Lokathor",
        "timestamp": 1613834230
    },
    {
        "content": "<p>this version will be the last obvious improvement, so I'm hoping i can boost this to 1.0 if there's no problems in practice</p>",
        "id": 227097437,
        "sender_full_name": "Lokathor",
        "timestamp": 1613834385
    },
    {
        "content": "<p>whoa I've not seen parameterized unsafety before, that's a neat trick</p>",
        "id": 227097516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613834441
    },
    {
        "content": "<p>it is in fact quite neat, and it's also why the language itself would be unable to match the utility (to me) with a new pointer type.</p>",
        "id": 227097659,
        "sender_full_name": "Lokathor",
        "timestamp": 1613834622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/volatile.20items/near/227095976\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> one way it could get lang support would be to have a <code>*vol T</code> pointer type which is simply always a volatile access whenever it's used.</p>\n</blockquote>\n<p>that would need some lang support, but nothing interesting happens in terms of specifying volatile -- this can be completely explained by lowering down to volatile accesses, it's just some built-in sugar</p>",
        "id": 227100865,
        "sender_full_name": "RalfJ",
        "timestamp": 1613837239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/volatile.20items/near/227096464\">said</a>:</p>\n<blockquote>\n<p>but it's in Nightly</p>\n</blockquote>\n<p>it's stable on nightly actually and thus riding the train to stable :D</p>",
        "id": 227100890,
        "sender_full_name": "RalfJ",
        "timestamp": 1613837269
    },
    {
        "content": "<p>well volatile doesn't have to be <em>interesting</em> in terms of volatile. I don't think there's anything interesting about it at all. it's quite boring in fact.</p>",
        "id": 227101272,
        "sender_full_name": "Lokathor",
        "timestamp": 1613837612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/volatile.20items/near/227097305\">said</a>:</p>\n<blockquote>\n<p>sorta, the new min_const_generics isn't currently: <a href=\"https://github.com/rust-console/voladdress/tree/main/src\">https://github.com/rust-console/voladdress/tree/main/src</a></p>\n</blockquote>\n<p>FWIW, know that you can get structural equality (to use <code>const</code>ants as patterns) if you use the</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq, Eq)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">VolAddress_</span><span class=\"o\">&lt;</span><span class=\"n\">Target</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ReadStatus</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WriteStatus</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">address</span>: <span class=\"nc\">NonZeroUsize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">target</span>: <span class=\"nc\">Target</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">read_status</span>: <span class=\"nc\">ReadStatus</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">write_status</span>: <span class=\"nc\">WriteStatus</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">VolAddress</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VolAddress_</span><span class=\"o\">&lt;</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">W</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The main problem then are how it renders in the docs, but you can hide that with some <code>#[cfg(doc)]</code> trickery</p>",
        "id": 227106312,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613843056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/volatile.20items/near/227101272\">said</a>:</p>\n<blockquote>\n<p>well volatile doesn't have to be <em>interesting</em> in terms of volatile. I don't think there's anything interesting about it at all. it's quite boring in fact.</p>\n</blockquote>\n<p>I am just objecting to <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>'s claim that there are open questions of semantics around volatile items. You then responded with volatile pointers. If you do not think that those raise questions of semantics then I misunderstood the point you were trying to make.</p>",
        "id": 227106547,
        "sender_full_name": "RalfJ",
        "timestamp": 1613843326
    },
    {
        "content": "<p>(To be clear, specifying volatile accesses is tricky and I dont think the reference or any other part of the rust [or LLVM] docs does it justice -- but that is entirely orthogonal to whether volatile is considered per-access or per-item/object. My claim here is: volatile items/objects can be entirely specified in terms of volatile accesses, and we already have volatile accesses, so no <em>new</em> spec questions come up from volatile items/objects)</p>",
        "id": 227106571,
        "sender_full_name": "RalfJ",
        "timestamp": 1613843372
    },
    {
        "content": "<p>I misunderstood the phrase \"specified on the lang level\" to mean \"you would not need language support for\" rather than what seems to be your meaning of \"you would need to expand the language specification in some way\"</p>",
        "id": 227108883,
        "sender_full_name": "Lokathor",
        "timestamp": 1613845773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> you should PR that.</p>",
        "id": 227108968,
        "sender_full_name": "Lokathor",
        "timestamp": 1613845854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I wasn't necessarily saying that there aren't possible specifications for them, just that <em>if</em> we were going to add them to the language we would need such a spec defining what they do.</p>",
        "id": 227109753,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613846658
    },
    {
        "content": "<p>(And that spec should be self-contained, not \"they behave like read_volatile and write_volatile\".)</p>",
        "id": 227109864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613846780
    },
    {
        "content": "<p>It may be that that spec would be easy to supply, and uncontroversial. I'm slightly skeptical that that would be the case, but it's possible.</p>",
        "id": 227109887,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613846825
    },
    {
        "content": "<p>But I think I was primarily echoing your sentiment that specifying them is \"tricky\".</p>",
        "id": 227109911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613846864
    },
    {
        "content": "<p>i think they <em>should</em> be specified by referring to something else if possible. that keeps the complexity down. As soon as you understand one thing, you understand both.</p>",
        "id": 227110352,
        "sender_full_name": "Lokathor",
        "timestamp": 1613847331
    },
    {
        "content": "<p>Particularly, simple syntax sugar explanation is the best.</p>\n<p>what we don't want is another unfortunate thing like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">ptr</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where those two lines are slightly different in effect, in a way that a beginner won't really expect.</p>",
        "id": 227110527,
        "sender_full_name": "Lokathor",
        "timestamp": 1613847530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/volatile.20items/near/227109864\">said</a>:</p>\n<blockquote>\n<p>(And that spec should be self-contained, not \"they behave like read_volatile and write_volatile\".)</p>\n</blockquote>\n<p>I disagree; it's better to specify this in terms of something lower-level (and already existing!) than trying to reinvent the wheel</p>",
        "id": 227112356,
        "sender_full_name": "RalfJ",
        "timestamp": 1613849465
    },
    {
        "content": "<p>It feels wrong to specify a language construct in terms of a library function rather than the other way around.</p>",
        "id": 227152457,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613895675
    },
    {
        "content": "<p>isn't it an intrinsic?</p>",
        "id": 227152466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613895707
    },
    {
        "content": "<p>Not all language features are exposed through special syntax, e.g. UnsafeCell</p>",
        "id": 227152539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613895775
    },
    {
        "content": "<p>volatile accesses are intrinsics, indeed. so they already are a language construct.</p>",
        "id": 227165377,
        "sender_full_name": "RalfJ",
        "timestamp": 1613911335
    },
    {
        "content": "<p>\"the other way around\" makes little sense here, that would be explaining volatile accesses in terms of volatile items... but volatile accesses are more expressive since they allow mixing different kinds of accesses on the same location</p>",
        "id": 227165404,
        "sender_full_name": "RalfJ",
        "timestamp": 1613911373
    },
    {
        "content": "<p>Volatile is just weird.  For MMIO, I would prefer to have <code>load</code> and <code>store</code> functions that are defined as desugaring to a single machine instruction if possible, or otherwise failing at compile time.</p>",
        "id": 241672378,
        "sender_full_name": "Demi Obenour",
        "timestamp": 1622954428
    },
    {
        "content": "<p>You could do that on a target by target platform if you wanted.</p>",
        "id": 241694393,
        "sender_full_name": "Lokathor",
        "timestamp": 1622989583
    },
    {
        "content": "<p>I'll bring this up: <a href=\"https://www.kernel.org/doc/Documentation/process/volatile-considered-harmful.rst\">https://www.kernel.org/doc/Documentation/process/volatile-considered-harmful.rst</a></p>\n<p>I don't think it make much sense to have a volatile type. Volatile accesses like <code>read_volatile</code> and <code>write_volatile</code> today is better.</p>",
        "id": 241824682,
        "sender_full_name": "Gary Guo",
        "timestamp": 1623092638
    },
    {
        "content": "<p>while that article is not wrong, it's responding to a totally separate problem than we have here.</p>",
        "id": 241855071,
        "sender_full_name": "Lokathor",
        "timestamp": 1623109168
    },
    {
        "content": "<p>Sorry, should mention that the references are good read too. Snippet from the second reference of that article:</p>\n<blockquote>\n<p>In other words, volatile on data structures is _evil_, because it instills<br>\nthe wrong kind of beliefs in people. \"volatility\" is not a data structure<br>\nissue. It's a matter of the _code_ working on the data structure.</p>\n</blockquote>\n<p>So the core ideas of the article and its references:</p>\n<ol>\n<li>Most uses of volatile is wrong</li>\n<li>Volatility should not a property of data structure, but rather the code accessing it.</li>\n</ol>\n<p>In Rust there are even fewer legit use cases of volatile. Is the value shared or exclusive? Volatile does not make sense for the exclusive case, and will be wrong for the shared case. MMIO is probably one of a few use cases, but volatile is still not the full solution here, you still need barriers to access correctly. Volatile aggregates simply don't make sense.</p>",
        "id": 241867481,
        "sender_full_name": "Gary Guo",
        "timestamp": 1623123650
    },
    {
        "content": "<p>But I happen to know that Snek <em>wants this for MMIO</em>.</p>",
        "id": 241921634,
        "sender_full_name": "Lokathor",
        "timestamp": 1623160050
    }
]