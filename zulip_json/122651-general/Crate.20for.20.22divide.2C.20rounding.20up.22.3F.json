[
    {
        "content": "<p>Is there a well-established crate providing the \"divide, rounding up\" operation?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4095</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4097</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8191</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"k\">u64</span><span class=\"p\">.</span><span class=\"n\">div_round_up</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211431567,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601236250
    },
    {
        "content": "<p>I have such a crate locally, and I'm wondering if I should upload it.</p>",
        "id": 211431579,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601236265
    },
    {
        "content": "<p>would rounding up overflow?</p>",
        "id": 211432928,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601238223
    },
    {
        "content": "<p>In theory, it shouldn't ever be able to overflow, no, since the division should always make it smaller.</p>",
        "id": 211432970,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238263
    },
    {
        "content": "<p>well seems not</p>",
        "id": 211432971,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601238264
    },
    {
        "content": "<p>right this is integer division</p>",
        "id": 211432974,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601238278
    },
    {
        "content": "<p>I do have a <code>round_up</code> operation that goes up to the next multiple, and that <em>could</em> overflow.</p>",
        "id": 211432980,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238302
    },
    {
        "content": "<p>But that'd be something that integer overflow checking should catch.</p>",
        "id": 211432993,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238318
    },
    {
        "content": "<p><code>num-integer</code> has <code>Integer::div_ceil</code></p>",
        "id": 211433057,
        "sender_full_name": "cuviper",
        "timestamp": 1601238374
    },
    {
        "content": "<p>And methods for multiples too</p>",
        "id": 211433063,
        "sender_full_name": "cuviper",
        "timestamp": 1601238393
    },
    {
        "content": "<p>That looks promising, thank you!</p>",
        "id": 211433092,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238457
    },
    {
        "content": "<p>Also, <code>iN::MIN / -1</code> does overflow</p>",
        "id": 211433095,
        "sender_full_name": "cuviper",
        "timestamp": 1601238460
    },
    {
        "content": "<p>well the example is u64</p>",
        "id": 211433146,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601238499
    },
    {
        "content": "<p>True enough, I had considered the negative numerator case, but not the negative denominator case.</p>",
        "id": 211433154,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238511
    },
    {
        "content": "<p>unsigned integer types probably don't need overflow check</p>",
        "id": 211433162,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601238545
    },
    {
        "content": "<p>Ok, yeah, unsigned division can't overflow, only divide-by-0 panics</p>",
        "id": 211433169,
        "sender_full_name": "cuviper",
        "timestamp": 1601238558
    },
    {
        "content": "<p>the only error is divide by zero</p>",
        "id": 211433171,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601238559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Do you happen to know if <code>div_ceil</code> compiles down to decent code if given a power of two? I'm hoping that, for instance, the generated code for <code>x.div_ceil(4096)</code> involves a <code>&gt;&gt; 12</code> somewhere.</p>",
        "id": 211433172,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238561
    },
    {
        "content": "<p>isn't this what <code>ptr::align_to</code> does, at least for powers of 2?</p>",
        "id": 211433256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601238644
    },
    {
        "content": "<p><code>is_multiple_of</code> is going to be nice as well.</p>",
        "id": 211433258,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I'm not working with pointers.</p>",
        "id": 211433260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238657
    },
    {
        "content": "<p>I'm not sure... it's not doing anything fancy, more just a method of convenience</p>",
        "id": 211433279,
        "sender_full_name": "cuviper",
        "timestamp": 1601238699
    },
    {
        "content": "<p>LLVM will probably make that shift though</p>",
        "id": 211433347,
        "sender_full_name": "cuviper",
        "timestamp": 1601238787
    },
    {
        "content": "<p>Yeah, I'd expect that to happen in LLVM rather than in the trait. I more wondered \"is it doing anything sufficiently complex that LLVM can't see through it\".</p>",
        "id": 211433356,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238815
    },
    {
        "content": "<p>Looks like it's the <a href=\"https://docs.rs/num-integer/0.1.43/src/num_integer/lib.rs.html#96-103\">div-and-rem version</a> (which is the only overflow-safe one I know), which <a href=\"https://rust.godbolt.org/z/MW8z47\">LLVM deals with fine</a>.  Honestly with a literal RHS I'd be very surprised if it didn't handle just about anything fine.</p>",
        "id": 211433933,
        "sender_full_name": "scottmcm",
        "timestamp": 1601239770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Thank you very much for pointing me to that! That's going to be very helpful.</p>",
        "id": 211434170,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601240139
    }
]