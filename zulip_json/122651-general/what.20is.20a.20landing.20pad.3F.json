[
    {
        "content": "<p>specifically, I am trying to understand the MIR instructions, resume and abort. to my understanding, resume resumes unwinding of stack while abort aborts it. what bothers me is that the doc says \"landing pad is finished\". what specifically does that mean? hope that is not a dumb question.</p>",
        "id": 203777403,
        "sender_full_name": "Jason Hu",
        "timestamp": 1594677916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> that sounds too level, did it leak into MIR docs?</p>",
        "id": 203792041,
        "sender_full_name": "eddyb",
        "timestamp": 1594691961
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span></p>",
        "id": 203792043,
        "sender_full_name": "eddyb",
        "timestamp": 1594691968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> a \"landing pad\" is effectively a catch/finally/cleanup \"entry point\", that unwinding will start executing</p>",
        "id": 203792107,
        "sender_full_name": "eddyb",
        "timestamp": 1594692007
    },
    {
        "content": "<p>an exception \"lands\" there, and unwinding only resumes when the landing pad explicitly does that - it's also possible to not do that, and that's what a \"catch\" in C++ does</p>",
        "id": 203792117,
        "sender_full_name": "eddyb",
        "timestamp": 1594692046
    },
    {
        "content": "<p>yeah its wrong doc. Its on top of Resume/Abort terminators</p>",
        "id": 203792124,
        "sender_full_name": "nagisa",
        "timestamp": 1594692058
    },
    {
        "content": "<p>that should say \"cleanup\" or something of the sort.</p>",
        "id": 203792134,
        "sender_full_name": "nagisa",
        "timestamp": 1594692071
    },
    {
        "content": "<p>\"cleanup path\"?</p>",
        "id": 203792146,
        "sender_full_name": "eddyb",
        "timestamp": 1594692099
    },
    {
        "content": "<p>I don't think there is anything wrong with it as long as all terminologies are explained.</p>",
        "id": 203792284,
        "sender_full_name": "Jason Hu",
        "timestamp": 1594692306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> it's the wrong level of abstraction: MIR has regular control-flow and cleanup control-flow, \"landing pad\" is at least one level lower down</p>",
        "id": 203793198,
        "sender_full_name": "eddyb",
        "timestamp": 1594693679
    },
    {
        "content": "<p>in the sense that cleanup edges from <code>Call</code>/<code>Assert</code>/<code>Drop</code> terminators will generate an exception-handling \"landing pad\", but MIR data types is not the place to document codegen</p>",
        "id": 203793258,
        "sender_full_name": "eddyb",
        "timestamp": 1594693743
    }
]