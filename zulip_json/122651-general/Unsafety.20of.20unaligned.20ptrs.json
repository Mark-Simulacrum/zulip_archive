[
    {
        "content": "<p>If the pointer is never read from/written, it is safe, correct? Would it be safe to construct a slice with it as long as it is never read, only length checked?</p>",
        "id": 209410764,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599582344
    },
    {
        "content": "<p>I don't think this is safe; pointers are always aligned for their type as part of the validity invariant. It's as bad as <code>3 as bool</code></p>",
        "id": 209411056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599582475
    },
    {
        "content": "<p>You are making a distinction between pointers and references, correct <span class=\"user-mention\" data-user-id=\"277614\">@Braden Nelson</span>? And by \"slice\", do you mean <code>&amp;[T]</code> or <code>*const []</code>?</p>",
        "id": 209411320,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599582595
    },
    {
        "content": "<p>References must always be aligned. Pointers can be unaligned for as long as they are not dereferenced.</p>",
        "id": 209411334,
        "sender_full_name": "bjorn3",
        "timestamp": 1599582602
    },
    {
        "content": "<p>an &amp;[T], constructed with from_raw_parts.</p>",
        "id": 209411483,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599582650
    },
    {
        "content": "<p>Oh, I stand corrected</p>",
        "id": 209411493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599582655
    },
    {
        "content": "<p>In that case *const [T] would be okay but not &amp;[T]</p>",
        "id": 209411540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599582679
    },
    {
        "content": "<p>I believe creating a <code>&amp;[T]</code> from an unaligned raw pointer is invalid.</p>",
        "id": 209411545,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599582685
    },
    {
        "content": "<p>the resulting &amp;[T] is never read, only length checked. I'll assume unsafe/invalid.</p>",
        "id": 209411563,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599582691
    },
    {
        "content": "<p>still UB</p>",
        "id": 209411579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599582703
    },
    {
        "content": "<p>References are marked as <code>dereferencable</code> in the generated LLVM ir. This means that LLVM is allowed to dereference it at any point (for example for speculative loading), which requires the reference to be aligned.</p>",
        "id": 209411615,
        "sender_full_name": "bjorn3",
        "timestamp": 1599582720
    },
    {
        "content": "<p>Yea, I didn't clarify my response. I understand it as UB. Got it.</p>",
        "id": 209411669,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599582732
    },
    {
        "content": "<p>I would suggest taking the length directly off the <code>*const [T]</code> if you can</p>",
        "id": 209411751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599582782
    },
    {
        "content": "<p>And, since you are calling <code>from_raw_parts</code>, you already have the length, so no real reason to jump through that hoop. :-)</p>",
        "id": 209411934,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599582870
    },
    {
        "content": "<p>Looking at some rustc code that was using align_to to figure out a safe offset for a fast path. The code is safe (it's working with an &amp;[u8], no alignment requirements), so i'm now trying to extract the important part of align_to I need (just the alignment calculation itself) to remove an unsafe block.</p>",
        "id": 209411984,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599582900
    },
    {
        "content": "<p>I don't know how you'd go from a pointer + length directly to <code>*const [T]</code> though.</p>",
        "id": 209411987,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599582901
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/ptr/fn.slice_from_raw_parts.html\">https://doc.rust-lang.org/std/ptr/fn.slice_from_raw_parts.html</a></p>",
        "id": 209412068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599582953
    },
    {
        "content": "<p>Ah.</p>\n<blockquote>\n<p>1.42.0</p>\n</blockquote>",
        "id": 209412170,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599583004
    },
    {
        "content": "<p>I asked as it would've made it easier to just comment it with // SAFETY as it's been needing, but it's arguably better to just make it not unsafe at all.</p>",
        "id": 209412209,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599583029
    },
    {
        "content": "<p>As an example for what can go wrong if you turn an unaligned pointer into a reference, even if you don't dereference it: Rust is allowed to make assumptions about valid pointer values and use the other pieces of a reference as a niche. For instance, it could assume non-NULL (which is why you can't have a NULL reference), and it <em>could</em> (though currently it doesn't) assume an aligned pointer and use the low bits as a niche.</p>",
        "id": 209412248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599583053
    },
    {
        "content": "<p>The unsafety is used solely for a normally safe calculation.</p>",
        "id": 209412269,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599583068
    },
    {
        "content": "<p>As a separate topic, you might want to post the concrete code. You've got experienced people looking at it, so you might be able to get some interesting solutions <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 209412373,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599583119
    },
    {
        "content": "<p>Original code. I'm transforming this line into smth slightly longer, but no unsafe. <a href=\"https://github.com/rust-lang/rust/blob/7bc0bf72545f5d6ac6d9639391da875d5e147d9a/library/core/src/slice/memchr.rs#L100\">https://github.com/rust-lang/rust/blob/7bc0bf72545f5d6ac6d9639391da875d5e147d9a/library/core/src/slice/memchr.rs#L100</a><br>\nGiving the file proper <code>// SAFETY</code> docs in the same change.</p>",
        "id": 209412598,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599583239
    },
    {
        "content": "<p>Why not just adapt the <a href=\"https://doc.rust-lang.org/src/core/slice/mod.rs.html#2576-2602\">source of align_to</a> to just get the arithmetic stuff, which is safe anyway on your types?</p>",
        "id": 209413272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599583585
    },
    {
        "content": "<p>Effectively what I'm doing. Original question was in the context of keeping the unsafe {}, but I've realized I can get rid of it entirely.</p>",
        "id": 209413334,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599583628
    },
    {
        "content": "<p>looks like the core function is <code>core::ptr::align_offset</code>, but that is also unsafe</p>",
        "id": 209413406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599583673
    },
    {
        "content": "<p>wait no it isn't</p>",
        "id": 209413496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599583704
    },
    {
        "content": "<p>The power-of-two checked version is perfectly safe.</p>",
        "id": 209413529,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599583723
    },
    {
        "content": "<p>Why is this line in an unsafe block?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">ptr</span>::<span class=\"n\">align_offset</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209413633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599583774
    },
    {
        "content": "<p>I honestly have no idea.</p>",
        "id": 209413782,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599583830
    },
    {
        "content": "<p>Oh I see, the <code>align_offset</code> method calls a private unsafe free function also called <code>align_offset</code> which is not power of 2 checked</p>",
        "id": 209413919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599583894
    },
    {
        "content": "<p>I had occasion to look at the code of <code>align_offset</code> the other day and I have to say it's about 2 orders of magnitude larger than I expected to see</p>",
        "id": 209414085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599583961
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/src/core/ptr/mod.rs.html#1168-1271\">https://doc.rust-lang.org/src/core/ptr/mod.rs.html#1168-1271</a></p>",
        "id": 209414190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599584018
    },
    {
        "content": "<p>What might be a good way to assert a pointer is aligned correctly?</p>",
        "id": 209422715,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599588240
    },
    {
        "content": "<p><code>p.align_to(n) == p</code>?</p>",
        "id": 209422806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599588285
    },
    {
        "content": "<p>That should work. Thank you.</p>",
        "id": 209422826,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599588300
    },
    {
        "content": "<p>that boils down to <code>p &amp; (n-1) == 0</code> if you want something faster</p>",
        "id": 209422855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599588328
    },
    {
        "content": "<p>Hopefully the compiler can figure that out.</p>",
        "id": 209422864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599588337
    },
    {
        "content": "<p>or <code>p.align_offset(n) == 0</code></p>",
        "id": 209422897,
        "sender_full_name": "cuviper",
        "timestamp": 1599588356
    },
    {
        "content": "<p>oh, maybe that doesn't work because it uses units of <code>T</code></p>",
        "id": 209423039,
        "sender_full_name": "cuviper",
        "timestamp": 1599588427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Ah, that's even better.</p>",
        "id": 209423043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599588429
    },
    {
        "content": "<p>Oh, hrm.</p>",
        "id": 209423053,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599588434
    },
    {
        "content": "<p>It'd work if you cast the pointer to <code>u8</code> first, but that's a pain.</p>",
        "id": 209423163,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599588486
    },
    {
        "content": "<p>is pointer <code>align_to</code> really a thing? I only see slice and layout methods</p>",
        "id": 209423214,
        "sender_full_name": "cuviper",
        "timestamp": 1599588524
    },
    {
        "content": "<p>Doesn't seem to be a thing. Hrm. I need to get some other person(s) to look over the changes anyways, as it's a change to memrchr, so i'll PR now, having run the test suite.</p>",
        "id": 209423379,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599588604
    },
    {
        "content": "<p>One moment...</p>",
        "id": 209423401,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599588617
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">is_aligned</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">is_aligned</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">is_aligned</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">is_aligned</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">is_aligned</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">is_aligned</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209423648,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599588755
    },
    {
        "content": "<p>could use <code>mem::align_of_val_raw</code> for <code>T: ?Sized</code></p>",
        "id": 209424069,
        "sender_full_name": "cuviper",
        "timestamp": 1599588986
    },
    {
        "content": "<p>hmm, well maybe the safety there is too questionable</p>",
        "id": 209424173,
        "sender_full_name": "cuviper",
        "timestamp": 1599589050
    },
    {
        "content": "<p>That's also nightly-only.</p>",
        "id": 209424197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599589062
    },
    {
        "content": "<p>Another approach, if you prefer method syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsAlignedExt</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">is_aligned</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsAlignedExt</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">is_aligned</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsAlignedExt</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">is_aligned</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">).</span><span class=\"n\">is_aligned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">).</span><span class=\"n\">is_aligned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">).</span><span class=\"n\">is_aligned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">).</span><span class=\"n\">is_aligned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">).</span><span class=\"n\">is_aligned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209424400,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599589146
    },
    {
        "content": "<p>Is there a way to reasonably construct an instance of a DST, like <code>struct S&lt;T&gt; { t: T, bytes: [u8] }</code> from a <code>T</code>? The last I checked, trying to construct this required basically guessing the layout of DST's?</p>",
        "id": 209452916,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1599604873
    },
    {
        "content": "<p>you need indirection like <code>Box</code>/<code>Rc</code>/<code>Arc</code> for a DST instance</p>",
        "id": 209453071,
        "sender_full_name": "cuviper",
        "timestamp": 1599605023
    },
    {
        "content": "<p>I've seen <a href=\"https://crates.io/crates/slice-dst\"><code>slice-dst</code></a>, but haven't used it yet</p>",
        "id": 209453118,
        "sender_full_name": "cuviper",
        "timestamp": 1599605043
    },
    {
        "content": "<p>Well, yes, in my case, I'm fine just calling malloc and getting bytes for the indirection. But I still need to turn those bytes into a <code>*const S&lt;T&gt;</code> somehow.</p>",
        "id": 209453290,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1599605199
    },
    {
        "content": "<p>Shouldn't you be able to use Layout::new + .extend (the DST) + pad_to_align to safely get the layout of a <code>repr(C)</code> DST?</p>",
        "id": 209538689,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1599670906
    },
    {
        "content": "<p>Oh, I see what you mean. We never adapted any RFC to explicitly set the metadata of a fat pointer right? So you either need to pretend it's a array of <code>u8</code> or you need to guess the layout of fat pointers...</p>",
        "id": 209539501,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1599671270
    },
    {
        "content": "<p>Yeah, the layout of fat pointers is apparently, a pointer to the start and the length of the slice at the end, in elements (not bytes). <code>slice-dst</code> doesn't guess the layout of fat pointers, it just creates a slice using <code>slice_from_raw_parts</code> and casts it to the right type.</p>",
        "id": 209580701,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1599693764
    },
    {
        "content": "<p>Sure, the thing is a while ago (like over a year maybe two) there was some discussions maybe a RFC about being able to more explicitly handle the fat pointer metadata which was rejected/postpone as many other things had higher priority back then as far as I remember. <code>slice-dst</code> is definitely worth to look at  if you want to do DSTs it's not supper simple but e.g. show you how to properly do thinks like handling panics while populating a slice DST from a iterator (assuming they do it correctly which seems the way but I didn't look to closely at it).</p>",
        "id": 209645497,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1599746431
    }
]