[
    {
        "content": "<p>So <a href=\"https://github.com/rust-lang/rust/issues/76725\">#76725</a> mentions a curious example of folding a Vec into existence that I thought was supposed to be semantically near-equivalent in Rust whether it was using mutation directly or using update-in-place. While I acknowledge the simple example would usually be replaced with <code>collect</code>, there are more complicated ones that don't yield as easily, yet would be equivalent. Am I misunderstanding something, or is this an optimization failure?</p>",
        "id": 210170082,
        "sender_full_name": "Jubilee",
        "timestamp": 1600194673
    },
    {
        "content": "<p>I think it's both a missed optimization (ideally the accumulator would get loop-lifted) and non-idiomatic code.  To me it's an anti-pattern to always return the accumulator object in <code>fold</code>; in that case I think it's better to use an <code>FnMut</code> closure instead &lt;<a href=\"https://github.com/rust-lang/rust/pull/76746#issuecomment-692884123\">https://github.com/rust-lang/rust/pull/76746#issuecomment-692884123</a>&gt;.</p>\n<p>(The advantage of the accumulator in <code>fold</code> is that you can move it, which would be awkward in a stateful closure.  But if you only need to <code>&amp;</code> or <code>&amp;mut</code> it, I think it's better to close over it rather than pass it into the closure every time.)</p>",
        "id": 210171338,
        "sender_full_name": "scottmcm",
        "timestamp": 1600195228
    },
    {
        "content": "<p>I find this pattern to be reasonably natural to myself, tbh, but I admit to having a perverse affection for long method chains.<br>\nIs there a way to guarantee the accumulator does get loop lifted?</p>",
        "id": 210172993,
        "sender_full_name": "Jubilee",
        "timestamp": 1600195990
    },
    {
        "content": "<p>the only guaranteed optimization is to do it yourself</p>",
        "id": 210177689,
        "sender_full_name": "cuviper",
        "timestamp": 1600198037
    },
    {
        "content": "<p>A less contrived example (although, admittedly, still contrived) was seeing things like <a href=\"https://exercism.io/tracks/rust/exercises/anagram/solutions/6cc11233635d41128eaaa2f9b3f78d9d\">this Exercism solution</a> where there was a floating return of the accumulator in the closure. This felt like an equivalent to ruby's <a href=\"https://ruby-doc.org/core-2.4.1/Enumerable.html#method-i-each_with_object\"><code>each_with_object</code></a> (although who's to say they did that right?)</p>",
        "id": 210187032,
        "sender_full_name": "Mark",
        "timestamp": 1600202203
    },
    {
        "content": "<p>Yeah, I've seen that pattern a lot as well.<br>\nI think what I really meant was \"if one were to want to optimize this, where would they start?\"</p>",
        "id": 210195800,
        "sender_full_name": "Jubilee",
        "timestamp": 1600206721
    },
    {
        "content": "<p>maybe take a look at the MIR generated for <code>fold</code> and see why it's different from <code>fold_mut</code>?</p>",
        "id": 210196503,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600207099
    },
    {
        "content": "<p><code>-Z unpretty=mir</code></p>",
        "id": 210196514,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600207106
    },
    {
        "content": "<p>it's clear <em>why</em> they're different, moving <code>acc</code> around versus just <code>&amp;mut acc</code></p>",
        "id": 210199320,
        "sender_full_name": "cuviper",
        "timestamp": 1600208815
    },
    {
        "content": "<p>the question is what optimization can do with it, whether in LLVM or maybe someday in MIR</p>",
        "id": 210199371,
        "sender_full_name": "cuviper",
        "timestamp": 1600208848
    },
    {
        "content": "<p>Yeah, the \"moving around the vec in the inner loop\" is pretty clear in the assembly: <a href=\"https://rust.godbolt.org/z/zhrEzj\">https://rust.godbolt.org/z/zhrEzj</a></p>",
        "id": 210208975,
        "sender_full_name": "scottmcm",
        "timestamp": 1600215786
    },
    {
        "content": "<p>Well, I opened an issue for a clippy lint about it: <a href=\"https://github.com/rust-lang/rust-clippy/issues/6053\">https://github.com/rust-lang/rust-clippy/issues/6053</a></p>\n<p>(I don't know if it's even feasible to lint, given them semantic analysis of the closure needed, but...)</p>",
        "id": 210211456,
        "sender_full_name": "scottmcm",
        "timestamp": 1600218176
    }
]