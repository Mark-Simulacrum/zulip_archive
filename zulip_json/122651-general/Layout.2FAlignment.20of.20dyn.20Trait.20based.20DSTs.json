[
    {
        "content": "<p>Is there any RFC or similar, which specifies  how the Layout/Alignment of DST structs containing a <code>dyn Trait</code> field is supposed to be handled?</p>\n<p>For example in <code>#[repr(C)] struct DST { f1: u8, dst: dyn Debug }</code>.</p>\n<p>The thing is that while it's <code>repr(C)</code> <code>dyn Debug</code> has a not at compiler-time known alignment and size, but in a normal C layout  it could theoretically affect the layout of the whole <code>DST</code> struct.</p>\n<p>I know about some ways people had been doing this kind of things in practice, but did we ever specify how it's supposed to work, at least for <code>repr(C)</code> structs? (I have searched the RFC on github but I might have overlooked something).</p>",
        "id": 210671289,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1600615244
    },
    {
        "content": "<p>If anyone wonders:</p>\n<p>The reference does define that:</p>\n<ul>\n<li>structs containing a DST are DST</li>\n<li>dyn Trait DSTs have the same layout as the underlying struct</li>\n<li>how <code>#[repr(C)]</code> in <em>rust</em> works (without specifically mentioning dyn Trait or DSTs)</li>\n</ul>\n<p>From that we can roughly infer that for a <code>#[repr(C)] struct Dst { f1: u8, dst: dyn Debug }</code> where <code>dst</code> is <code>u8</code> the layout is the same as <code>#[repr(C)]  struct DstU8 { f1: u8, dst: u8 }</code> and for a case where <code>dst</code> is a <code>String</code> it's the same as <code>#[repr(C)]  struct DstString { f1: u8, dst: String }</code>.</p>\n<p>This has some interesting consequences:</p>\n<ul>\n<li>The padding between the last non-DS field and the dst field is dependent on the underlying type and as such can vary.</li>\n<li>The alignment of <code>Dst</code> might depend on the underlying type (which isn't surprising)</li>\n<li>\n<p>Casting a <code>&amp;Dst</code> pointer/reference to <code>&amp;DstU8</code>/<code>&amp;DstUString</code>/... must be valid if it's the right underlying type (<br>\n  e.g. you stored the originals TypeId or retrived it from a <code>Any</code> trait)</p>\n</li>\n<li>\n<p>Casting the other way around must be valid to if you have a way to create the correct fat-pointers (RFC2580)</p>\n</li>\n<li>Creating a correctly aligned pointer/reference to the dst field requires looking up the alignment at runtime</li>\n<li>If you have a <code>struct A1 { f1: F1, f2: F2, dst: DST }</code> and a (auto-derived) <code>struct A2 { f1: F1, f2: F2 }</code> then due to<br>\n  how the <code>repr(C)</code> algorithm works as far as I can tell <code>A1</code> and <code>A2</code> have the same exact same layout \"up to\"<br>\n  the dst field in A1/end of A2 which means you should be able to cast a <code>&amp;mut A1</code> to an <code>&amp;mut A2</code>  and still be able to<br>\n  correctly access <code>f1</code>/<code>f2</code> even a mem swap of that casted <code>&amp;mut A2</code> should be valid and just override f1/f2 if I'm not<br>\n  wrong (which seems useless but might matters for some derive based library to allow easier handling of custom DST types).</li>\n</ul>",
        "id": 210753754,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1600700466
    },
    {
        "content": "<p>AFAIK, everything you've mentioned is correct.</p>\n<p>Using <code>struct Wrapper&lt;Dst : ?Sized&gt; { f1: u8, dst: Dst }</code> notation:</p>\n<p>In the <code>Dst = dyn Trait</code> case, the offset to <code>dst</code> is computed as the offset to <code>dst</code> for <code>Dst = ()</code>(_i.e._, one byte past the end of the previous field), and then that is padded to the alignment of the <code>dyn Trait</code> instance present in the struct, which is obtained by reading one field of the vtable (currently laid out as: <code>struct VTable { ... size: usize, align: usize, ... }</code>), through the pointer to it bundled in the fat pointer: <code>::core::mem::align_of_val(&lt;*const Wrapper&lt;dyn Trait&gt;&gt;::cast::&lt;dyn Trait&gt;(p))</code></p>",
        "id": 210759469,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600702840
    },
    {
        "content": "<p>Thanks a lot for the confirmation <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 210766547,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1600706006
    }
]