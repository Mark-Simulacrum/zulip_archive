[
    {
        "content": "<p>Looking to do something like this. This way I can maintain a parsed representation of <code>source</code> while remaining zero-copy. The problem is that I am not sure how to do this safely. I believe Pin is the way to go here, but I do not really understand Pin or its usage here. The documentation has a section on self-referential structs but I am still struggling. Here's the code:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Stuff&lt;&#39;a, T&gt; {\n    pub(crate) source: T,\n    inner: StuffInner&lt;&#39;a&gt;, // Points into `source`\n}\n\npub fn from_path&lt;&#39;a, P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; Result&lt;Stuff&lt;&#39;a, Mmap&gt;&gt; {\n    let source = unsafe { MmapOptions::new().map(&amp;File::open(path.as_ref())?)? };\n    let inner = source.pread_with::&lt;StuffInner&gt;(0, scroll::LE)?;\n    Ok(Stuff {\n        source, // Moves `source` into `Stuff`\n        inner // But `inner` is borrowing `source` as it points into it\n    })\n}\n</code></pre></div>\n\n\n<p>Is this is a good case for Pin, if so how can I use it? Will it require <code>unsafe</code> code or can I use something like <code>pin_project</code> for this? Many thanks.</p>",
        "id": 212825552,
        "sender_full_name": "keegan",
        "timestamp": 1602250312
    },
    {
        "content": "<p>You might want to ask on <a href=\"http://users.rust-lang.org\">users.rust-lang.org</a>. This is a chat server for <em>development</em> of Rust, not usage.</p>",
        "id": 212880843,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602281391
    }
]