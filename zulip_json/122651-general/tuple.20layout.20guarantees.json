[
    {
        "content": "<p>The reference sez:</p>\n<blockquote>\n<p>Tuples do not have any guarantees about their layout.</p>\n</blockquote>\n<p>Is this still accurate? Do we not make any guarantees about the layout (except for the empty tuple)?</p>",
        "id": 167782755,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560190820
    },
    {
        "content": "<p>not having guarantees does not mean we dont want to, it just means nobody pushed through an RFC ;)</p>",
        "id": 167783022,
        "sender_full_name": "RalfJ",
        "timestamp": 1560190983
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md</a></p>",
        "id": 167783053,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191003
    },
    {
        "content": "<p>but generally, given that tuples are <code>repr(Rust)</code>, they are unlikely to get a lot of guarnatees</p>",
        "id": 167783153,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191053
    },
    {
        "content": "<p>Oh sure. And the current layout might become the guaranteed layout at some point as well, so code today might just work by luck.</p>",
        "id": 167783235,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191123
    },
    {
        "content": "<p>Context: <a href=\"https://stackoverflow.com/a/56529158/155423\" target=\"_blank\" title=\"https://stackoverflow.com/a/56529158/155423\">How to convert a tuple of references to a reference of a tuple?</a></p>",
        "id": 167783244,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191142
    },
    {
        "content": "<p>we certainly don't guarantee that fields are laid out in order</p>",
        "id": 167783406,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191265
    },
    {
        "content": "<p>AFAIK tuples are subject to field reordering <em>except</em> for the last field (due to unsizing)</p>",
        "id": 167783420,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191278
    },
    {
        "content": "<p>Looks like it touches on \"Homogeneous structs\" and \"(T1..Tn) would be compatible with TupleN&lt;T1..Tn&gt;\"</p>",
        "id": 167783464,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191283
    },
    {
        "content": "<p><em>homogeneous</em> tuples are a special topic and it seems reasonable to say more there</p>",
        "id": 167783497,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191316
    },
    {
        "content": "<blockquote>\n<p>it's probably invalid to rely on this</p>\n</blockquote>\n<p>not just probably, it <em>is</em> invalid :)</p>",
        "id": 167783587,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191393
    },
    {
        "content": "<p>The general question that OP asked is an easy answer: no, you can't go from <code>(&amp;A, &amp;B)</code> to <code>&amp;(A, B)</code> (right?)</p>",
        "id": 167783589,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191395
    },
    {
        "content": "<p>no you cannot, how would you even know they point to the same thing?</p>",
        "id": 167783723,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> nuances of the meaning of \"invalid\". The code compiles, produces the output you'd expect, and Miri doesn't complain, so it's \"valid\" in some sense. It's not valid in that it's UB</p>",
        "id": 167783732,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191475
    },
    {
        "content": "<p>and if you do know that they point to the same thing, in which situation would you not also know the base address of the thing?</p>",
        "id": 167783745,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191485
    },
    {
        "content": "<p>seems like XY problem to me TBH^^</p>",
        "id": 167783752,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191490
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> nuances of the meaning of \"invalid\". The code compiles, produces the output you'd expect, and Miri doesn't complain, so it's \"valid\" in some sense. It's not valid in that it's UB</p>\n</blockquote>\n<p>to be precise: it relies on explicitly unspecified parts of the semantics</p>",
        "id": 167783836,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191530
    },
    {
        "content": "<p>explicitly specified as unspecified ;-)</p>",
        "id": 167783873,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191559
    },
    {
        "content": "<blockquote>\n<p>This page deliberately left blank</p>\n</blockquote>",
        "id": 167783886,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191571
    },
    {
        "content": "<p>XY problem: absolutely</p>",
        "id": 167783896,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191582
    },
    {
        "content": "<p>that is invalid by any measure I know of ;) it \"happens to work\" is the best you can say about it</p>",
        "id": 167783915,
        "sender_full_name": "RalfJ",
        "timestamp": 1560191590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> this is where you realize the huge mistake you've participated in. Miri reports no issues with the code, that means that there's no UB. This is how it works.</p>",
        "id": 167784207,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191768
    },
    {
        "content": "<p>I understand that's not true, but I do think that's a likely thing for people to think.</p>",
        "id": 167784248,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191804
    },
    {
        "content": "<p>And I think I've started from that assumption once or twice.</p>",
        "id": 167784269,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560191815
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> this is where you realize the huge mistake you've participated in. Miri reports no issues with the code, that means that there's no UB. This is how it works.</p>\n</blockquote>\n<p>and indeed there is no UB -- with this version of Rust on this platform</p>",
        "id": 167790197,
        "sender_full_name": "RalfJ",
        "timestamp": 1560196068
    },
    {
        "content": "<p>isn't that kind of a half-truth? The behavior is undefined, by definition even.</p>",
        "id": 167795202,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560199780
    },
    {
        "content": "<p>well it's a matter of definition mostly. the way I see it, the Rust Abstract Machine is parameterized by how data structures are laid out. Miri tests for UB <em>with a particular instance</em> of that parameter, and there is no UB there.</p>",
        "id": 167797313,
        "sender_full_name": "RalfJ",
        "timestamp": 1560201371
    },
    {
        "content": "<p>the property we probably care about for programs is that they are UB-free under <em>any instance</em>. And now if we are a bit sloppy we might call that property \"being UB-free\" as well.</p>",
        "id": 167797390,
        "sender_full_name": "RalfJ",
        "timestamp": 1560201442
    },
    {
        "content": "<p>but you can arrange the words differently here of course ;)<br>\nwriting the spec in a way that such a program has UB under any execution without having to resort to this \"hidden parameter\" is very non-trivial. that's akin to changing Miri such that it can detect such issues <em>deterministically</em>. so I'd argue that this is a more elegant way to set up the semantics.</p>",
        "id": 167797510,
        "sender_full_name": "RalfJ",
        "timestamp": 1560201556
    }
]