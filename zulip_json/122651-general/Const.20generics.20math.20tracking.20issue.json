[
    {
        "content": "<p>What is the tracking issue for being able to do basic math with const generics?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209380458,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599569128
    },
    {
        "content": "<p>what is that supposed to do?</p>",
        "id": 209380543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599569173
    },
    {
        "content": "<p>(to be precise: how does type checking <code>x</code> in general work if some monomorphizations are not well typed?)</p>",
        "id": 209380722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599569293
    },
    {
        "content": "<p>implicitly: const equality and const well-formedness related issues. <a href=\"https://github.com/rust-lang/compiler-team/issues/340\">https://github.com/rust-lang/compiler-team/issues/340</a></p>",
        "id": 209380797,
        "sender_full_name": "Jubilee",
        "timestamp": 1599569351
    },
    {
        "content": "<p>I wonder if it's <a href=\"https://github.com/rust-lang/rust/issues/68436\">https://github.com/rust-lang/rust/issues/68436</a></p>",
        "id": 209382895,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/Const.20generics.20math.20tracking.20issue/near/209380543\">said</a>:</p>\n<blockquote>\n<p>what is that supposed to do?</p>\n</blockquote>\n<p>The more specific example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">read_u16_le</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209383001,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570460
    },
    {
        "content": "<p>how should it behave for N=1 or N=0 I think is the question</p>",
        "id": 209383105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599570503
    },
    {
        "content": "<p>SFINAE doesn't sound like something I want to add to rust <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 209383131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599570519
    },
    {
        "content": "<p>so it'd split off 2 bytes of the input, convert them to a <code>u16</code>, then return that and the remainder. It's a common request when parsing binary data.</p>",
        "id": 209383135,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570521
    },
    {
        "content": "<p>absolutely. There'd have to be appropriate bounds.</p>",
        "id": 209383165,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Const.20generics.20math.20tracking.20issue/near/209383105\">said</a>:</p>\n<blockquote>\n<p>how should it behave for N=1 or N=0 I think is the question</p>\n</blockquote>\n<p>And this is what the compiler says today:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: constant expression depends on a generic parameter\n --&gt; src/lib.rs:3:51\n  |\n3 | fn read_u16_le&lt;const N: usize&gt;(data: &amp;[u8; N]) -&gt; (u16, &amp;[u8; N - 2]) {\n  |                                                   ^^^^^^^^^^^^^^^^^^^\n  |\n  = note: this may fail depending on what value the parameter takes\n</code></pre></div>",
        "id": 209383340,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570620
    },
    {
        "content": "<p>Although it seems like the <code>^^^</code> should be a bit smaller area</p>",
        "id": 209383395,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570652
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>:\n<span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Well that just <em>looks</em> wrong.</p>",
        "id": 209383846,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570872
    },
    {
        "content": "<p>(<a href=\"https://hackmd.io/OZG_XiLFRs2Xmw5s39jRzA?view\">https://hackmd.io/OZG_XiLFRs2Xmw5s39jRzA?view</a>)</p>",
        "id": 209383878,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599570888
    },
    {
        "content": "<p>I think there was some discussion of <code>where {N &gt; 1}</code>? not sure where though</p>",
        "id": 209383903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599570904
    },
    {
        "content": "<blockquote>\n<p>We currently use where [(); expr]: as a way to add additional const wf bounds.<br>\nOnce we have started experimenting with this it is probably worth it to add<br>\na more intuitive way to add const wf bounds.</p>\n<p>A possible syntax is where (expr),. This is not intended to be part of the<br>\ninitial unstable implementation however.</p>\n</blockquote>",
        "id": 209384167,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599571015
    },
    {
        "content": "<p>I guess that is parsed as valid syntax right now. Isn't implemented in nightly though.</p>",
        "id": 209384337,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599571092
    },
    {
        "content": "<p>you already found the hackmd, here's the relevant compiler mcp: <a href=\"https://github.com/rust-lang/compiler-team/issues/340\">https://github.com/rust-lang/compiler-team/issues/340</a></p>",
        "id": 209398177,
        "sender_full_name": "lcnr",
        "timestamp": 1599577055
    },
    {
        "content": "<p>I am currently working on this but it probably will take a few more weeks until this is available on nightly</p>",
        "id": 209398245,
        "sender_full_name": "lcnr",
        "timestamp": 1599577080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/Const.20generics.20math.20tracking.20issue/near/209398177\">said</a>:</p>\n<blockquote>\n<p>you already found the hackmd, here's the relevant compiler mcp: <a href=\"https://github.com/rust-lang/compiler-team/issues/340\">https://github.com/rust-lang/compiler-team/issues/340</a></p>\n</blockquote>\n<p>That was <a href=\"#narrow/stream/122651-general/topic/Const.20generics.20math.20tracking.20issue/near/209380797\">found as well</a> :-)</p>",
        "id": 209398343,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599577103
    },
    {
        "content": "<p>ah <span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> abready mentioned this <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 209398389,
        "sender_full_name": "lcnr",
        "timestamp": 1599577119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I will ask — is <code>()</code> any kind of special thing for that syntax, or is it just short notation? Would</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>:\n<span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>work the same?</p>",
        "id": 209398727,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599577212
    },
    {
        "content": "<p>yeah, <code>()</code> is just the most boring type we have</p>",
        "id": 209398789,
        "sender_full_name": "lcnr",
        "timestamp": 1599577235
    },
    {
        "content": "<p>so <code>[u8; N - 1]</code> works the same, as long as the given anonymous constant is part of the public signature</p>",
        "id": 209398852,
        "sender_full_name": "lcnr",
        "timestamp": 1599577256
    },
    {
        "content": "<p><code>where [u8; N-1]: Sized</code> (or <code>where [u8; N-1]: ?Sized</code>) looks less odd and is compatible with current syntax.</p>",
        "id": 209419038,
        "sender_full_name": "kennytm",
        "timestamp": 1599586501
    },
    {
        "content": "<p>true, that seems slightly cleaner than just <code>[u8; N - 1]:,</code></p>",
        "id": 209420563,
        "sender_full_name": "lcnr",
        "timestamp": 1599587252
    },
    {
        "content": "<blockquote>\n<p>and is compatible with current syntax</p>\n</blockquote>\n<p>The proposal syntax is already compatible in Rust 1.46 <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">kenny</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209424314,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599589103
    },
    {
        "content": "<p>But I whole-heartedly agree with having something on the RHS. My poor parser in my brain walks off the end otherwise.</p>",
        "id": 209424556,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599589211
    },
    {
        "content": "<p>of the prelude, <code>Eq</code> wins for golfing</p>",
        "id": 209425099,
        "sender_full_name": "cuviper",
        "timestamp": 1599589489
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Wf</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Wf</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"nc\">Wf</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209426450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599590200
    },
    {
        "content": "<p>Alternatively, since trait conjunction is written <code>Trait1 + Trait2</code>, perhaps it should be <code>[(), N - 1]: 0</code></p>",
        "id": 209426944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599590476
    },
    {
        "content": "<p>I was thinking about a <code>WellFormed</code> or <code>Exists</code> trait like that, but then realized it'd want to be in the stdlib anyway, and then it's not <em>that</em> different from <code>: ?Sized</code>.</p>",
        "id": 209427390,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599590666
    },
    {
        "content": "<p><code>[u8; 4]: ?Sized</code> threw me for a loop though, since it seems like it is claiming that the array is unsized</p>",
        "id": 209427475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599590721
    },
    {
        "content": "<p>True.</p>",
        "id": 209428157,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599591076
    },
    {
        "content": "<blockquote>\n<p>The proposal syntax is already compatible in Rust 1.46 </p>\n</blockquote>\n<p>heh TIL. seems introduced since 1.16</p>",
        "id": 209431017,
        "sender_full_name": "kennytm",
        "timestamp": 1599592467
    },
    {
        "content": "<p>Curiosity: is <code>[u32; N]</code> also a bound of <code>N &lt;= usize::MAX/4</code>?</p>\n<p>(Or even <code>isize::MAX/4</code>, given object size restrictions from <code>offset</code>?)</p>",
        "id": 209434158,
        "sender_full_name": "scottmcm",
        "timestamp": 1599594037
    },
    {
        "content": "<p>no, it accepts <code>[u32; usize::MAX]</code></p>",
        "id": 209434356,
        "sender_full_name": "cuviper",
        "timestamp": 1599594134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/Const.20generics.20math.20tracking.20issue/near/209434158\">said</a>:</p>\n<blockquote>\n<p>is <code>[u32; N]</code> also a bound of <code>N &lt;= usize::MAX/4</code>?</p>\n</blockquote>\n<p>Double curiosity: I don't know how to parse this sentence. I see you got an answer, but I still don't get the question. :-)</p>",
        "id": 209434987,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599594452
    },
    {
        "content": "<p>Logically, you could only fit <code>usize::MAX/4</code> u32s in memory, as each takes 4 bytes of space. Which I presume is the context of the question.</p>",
        "id": 209435304,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599594617
    },
    {
        "content": "<p><code>[u32; usize::MAX]</code> is not a valid type -- it's too big to exist.  So I was wondering if the const generics bound cared about that part.  (If it did, that would be another reason for <code>[(); N]</code> instead of <code>[SomethingNotZeroSized; N]</code>.)</p>",
        "id": 209435306,
        "sender_full_name": "scottmcm",
        "timestamp": 1599594618
    },
    {
        "content": "<p>Ah, I didn't even notice the switch from <code>u32</code> and <code>usize</code>. That would have helped slightly.</p>",
        "id": 209435354,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599594662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/Const.20generics.20math.20tracking.20issue/near/209435306\">said</a>:</p>\n<blockquote>\n<p>If it did, that would be another reason for <code>[(); N]</code> instead of <code>[SomethingNotZeroSized; N]</code>.</p>\n</blockquote>\n<p>Why is that? If my function took in / returned <code>SomethingNotZeroSized</code>, wouldn't I rather get those failures?</p>",
        "id": 209435542,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599594756
    },
    {
        "content": "<p>you might want those failures, but you won't get them (as of right now)</p>",
        "id": 209435584,
        "sender_full_name": "cuviper",
        "timestamp": 1599594787
    },
    {
        "content": "<blockquote>\n<p><code>[u32; usize::MAX]</code> is not a valid type -- it's too big to exist</p>\n</blockquote>\n<p>Which definition of \"valid\" is in use here? <code>fn x(_: &amp;[u32; usize::MAX]) {}</code> and <code>fn x(_: [u32; usize::MAX]) {}</code> compile (without calling them, for the reasons you stated).</p>",
        "id": 209435746,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599594859
    },
    {
        "content": "<p><code>fn x(_: [u32; usize::MAX]) {}</code> -- this surprises me -- are we wrapping in the stack frame?!?</p>",
        "id": 209435857,
        "sender_full_name": "cuviper",
        "timestamp": 1599594940
    },
    {
        "content": "<p>I guess it will be passed by-ref, never localized?</p>",
        "id": 209435928,
        "sender_full_name": "cuviper",
        "timestamp": 1599594965
    },
    {
        "content": "<p>the functions have to hit codegen</p>",
        "id": 209435977,
        "sender_full_name": "lcnr",
        "timestamp": 1599594991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/Const.20generics.20math.20tracking.20issue/near/209435584\">said</a>:</p>\n<blockquote>\n<p>you might want those failures, but you won't get them (as of right now)</p>\n</blockquote>\n<p>Sure, but I was reading <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>'s point as \"you might get an error, so avoid that error by using <code>()</code> instead\" but I don't see <em>why</em> you'd want to avoid that error, since the types can never really exist.</p>",
        "id": 209435980,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599594995
    },
    {
        "content": "<p>ah, yes, if you make that a <code>pub fn</code>, playground says:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: the type `[u32; 18446744073709551615]` is too big for the current architecture\n</code></pre></div>",
        "id": 209436007,
        "sender_full_name": "cuviper",
        "timestamp": 1599595019
    },
    {
        "content": "<p>FWIW, 64-bit targets are actually limited to <code>1 &lt;&lt; 47</code> bytes right now<br>\n<a href=\"https://github.com/rust-lang/rust/blob/c59199efca5856cdf810919fbf9b5bce32dc4523/compiler/rustc_target/src/abi/mod.rs#L179-L197\">https://github.com/rust-lang/rust/blob/c59199efca5856cdf810919fbf9b5bce32dc4523/compiler/rustc_target/src/abi/mod.rs#L179-L197</a></p>",
        "id": 209436627,
        "sender_full_name": "cuviper",
        "timestamp": 1599595327
    },
    {
        "content": "<p>no petabyte arrays here!</p>",
        "id": 209436743,
        "sender_full_name": "cuviper",
        "timestamp": 1599595402
    },
    {
        "content": "<p>So it's not really that the _type_ is (in)valid, as this definitely relies on the target.</p>",
        "id": 209437219,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599595573
    },
    {
        "content": "<p>so one implication is that even <code>[u8; N]</code> would be more limited than <code>[(); N]</code>, if the max were checked at the type level</p>",
        "id": 209437332,
        "sender_full_name": "cuviper",
        "timestamp": 1599595641
    },
    {
        "content": "<p>Right, as we <em>can</em> have <code>[(); usize::MAX]</code> on any target.</p>",
        "id": 209437423,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599595683
    },
    {
        "content": "<p>But I'd still circle back to my point that if the type system checked that, then you'd <em>want</em> that to be reported earlier. Kind like pre-/post- monomorphization errors.</p>\n<p>One thing I <strong>am</strong> assuming is that this is all for actual arrays. If we are talking about using arrays only as a vehicle to express bounds for for other usages of const generics...</p>",
        "id": 209437791,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599595846
    },
    {
        "content": "<p>But that seems to fall apart as soon as we don't have <code>usize</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">whatever</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ???</span>\n</code></pre></div>",
        "id": 209437906,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599595921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Wf</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">whatever</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Wf</span><span class=\"o\">&lt;</span><span class=\"n\">expr_using_T</span><span class=\"o\">&gt;</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209438008,
        "sender_full_name": "lcnr",
        "timestamp": 1599595963
    },
    {
        "content": "<p>about checking arrays to be less than <code>1 &lt;&lt; 47</code> elements long, I am somewhat torn but personally think it is slightly better to not check this as part of the type system and emit errors during monomorphization here</p>",
        "id": 209438215,
        "sender_full_name": "lcnr",
        "timestamp": 1599596057
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Wf</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I thought I saw you closed a PR that would allow that ^ ?</p>",
        "id": 209438238,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599596072
    },
    {
        "content": "<p>i think you mixed something up there, we merged a PR that explicitly forbid that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 209438333,
        "sender_full_name": "lcnr",
        "timestamp": 1599596115
    },
    {
        "content": "<p>so this would need a new struct for every new type</p>",
        "id": 209438366,
        "sender_full_name": "lcnr",
        "timestamp": 1599596132
    },
    {
        "content": "<p>the idea is that when we want to actually stabilize this/we have a working version of it, we can add these bounds directly, without needing a type</p>",
        "id": 209438463,
        "sender_full_name": "lcnr",
        "timestamp": 1599596169
    },
    {
        "content": "<p>but for that we have to add new syntax -&gt; <a href=\"https://www.waltons.co.uk/_imagesWT/products/2018-SI-001-001-0011%20%281%29.jpg\">https://www.waltons.co.uk/_imagesWT/products/2018-SI-001-001-0011%20%281%29.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.waltons.co.uk/_imagesWT/products/2018-SI-001-001-0011%20%281%29.jpg\"><img src=\"https://www.waltons.co.uk/_imagesWT/products/2018-SI-001-001-0011%20%281%29.jpg\"></a></div>",
        "id": 209438533,
        "sender_full_name": "lcnr",
        "timestamp": 1599596207
    },
    {
        "content": "<p>Oh, absolutely.</p>",
        "id": 209438642,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599596262
    },
    {
        "content": "<p>I appreciate the meta-ness of not agreeing on which emoji to represent \"bikeshed\"</p>",
        "id": 209438940,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599596417
    }
]