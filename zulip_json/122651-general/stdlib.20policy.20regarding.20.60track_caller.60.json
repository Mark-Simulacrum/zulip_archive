[
    {
        "content": "<p>Hi,<br>\nIs there a policy regarding which functions should be <code>#[track_caller]</code>, I was thinking that it might be user to mark functions that panic because of a user input, but wasn't sure if there's already a policy about that and if everyone will agree with me (I can imagine objections)<br>\nExample: here the panic will point at <code>src/liballoc/vec.rs:975:13</code> but I think that because it happened with invalid user input it should be pointed at the caller site.</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    let mut a = vec![1,2,3];\n    a.swap_remove(7);\n}\n</code></pre></div>\n\n\n<p>The policy I'm thinking about, is if the panic is clearly because of a faulty user input then <code>#[track_caller]</code> should be added.<br>\nopinions? (is this considered API and requires t-libs?)</p>",
        "id": 208664665,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1598953044
    },
    {
        "content": "<p>I think it makes sense for that to be <code>#[track_caller]</code>. File a PR and yeah, that'd be in the purview of T-libs. The RFC lays out the policy pretty well I think: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md#my-fault-vs-your-fault\">https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md#my-fault-vs-your-fault</a></p>",
        "id": 208665660,
        "sender_full_name": "isHavvy",
        "timestamp": 1598953677
    },
    {
        "content": "<p>Does <code>#[track_caller]</code> on a frequently called function (such as in an inner loop) add any overhead?</p>",
        "id": 208698646,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598972092
    },
    {
        "content": "<p>It also reminds me a bit of the \"when do we add <code>#[must_use]</code>\" (lack of) policy</p>",
        "id": 208701619,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598973239
    },
    {
        "content": "<p>well i think must_use is purely docs and warnings (and some ounce of compile time i guess), so in that case there's really no reason to not go all the way with it.</p>\n<p>but track_caller probably does have some overhead.</p>",
        "id": 208717397,
        "sender_full_name": "Lokathor",
        "timestamp": 1598979752
    },
    {
        "content": "<p><code>#[track_caller]</code> at least adds an argument to the annotated function, which can have a cost if the function isn't inlined</p>",
        "id": 208717486,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598979807
    },
    {
        "content": "<blockquote>\n<p>there's really no reason to not go all the way with [<code>must_use</code>]</p>\n</blockquote>\n<p>Not to derail the conversation about <code>track_caller</code> too much, but it's certainly possible that overuse of <code>must_use</code> will annoy users. If it didn't, then the attribute wouldn't exist and instead _every_ function would warn if you ignored the return value.</p>",
        "id": 208717627,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598979880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/stdlib.20policy.20regarding.20.60track_caller.60/near/208717627\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>there's really no reason to not go all the way with [<code>must_use</code>]</p>\n</blockquote>\n<p>Not to derail the conversation about <code>track_caller</code> too much, but it's certainly possible that overuse of <code>must_use</code> will annoy users. If it didn't, then the attribute wouldn't exist and instead _every_ function would warn if you ignored the return value.</p>\n</blockquote>\n<p><a href=\"https://gankra.github.io/blah/linear-rust/\">https://gankra.github.io/blah/linear-rust/</a></p>",
        "id": 208719198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598980654
    },
    {
        "content": "<p>Sure, but \"linear Rust\" â‰  \"Rust as currently used by everyone\" :-)</p>",
        "id": 208721748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598981983
    },
    {
        "content": "<p>right, I was posting this as an example of how it makes things harder to use</p>",
        "id": 208722850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598982580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/stdlib.20policy.20regarding.20.60track_caller.60/near/208698646\">said</a>:</p>\n<blockquote>\n<p>Does <code>#[track_caller]</code> on a frequently called function (such as in an inner loop) add any overhead?</p>\n</blockquote>\n<p>I think it could; it adds a (typically constant) argument on each call site. so this is probably worth benchmarking.</p>",
        "id": 208800724,
        "sender_full_name": "RalfJ",
        "timestamp": 1599040050
    }
]