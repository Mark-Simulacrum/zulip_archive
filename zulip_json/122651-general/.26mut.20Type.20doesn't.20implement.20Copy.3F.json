[
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8aec6c1bd417c71cfb8fe55d23a3765a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8aec6c1bd417c71cfb8fe55d23a3765a\">here</a> a playground</p>",
        "id": 165327670,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1557487175
    },
    {
        "content": "<p>I'm trying to remove some spurious <code>dyn</code> around some code and I found that doing </p>\n<div class=\"codehilite\"><pre><span></span>{\n    let arg = if foo { one } else { another };\n    call(arg);\n}\n    other_call(one);\n    other_call(another);\n</pre></div>\n\n\n<p>triggers that</p>",
        "id": 165327904,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1557487350
    },
    {
        "content": "<p>You can fix this by reborrowing (<code>&amp;mut *some_reference</code>): <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3983e679905e80db4832868e9bd00dc\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3983e679905e80db4832868e9bd00dc\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3983e679905e80db4832868e9bd00dc</a></p>",
        "id": 165329052,
        "sender_full_name": "oli",
        "timestamp": 1557488587
    },
    {
        "content": "<p>The problem is that <code>&amp;mut T</code> is indeed not <code>Copy</code>, and it cannot be, otherwise you could easily create two <code>&amp;mut T</code> to the same memory by just copying</p>",
        "id": 165329075,
        "sender_full_name": "oli",
        "timestamp": 1557488617
    },
    {
        "content": "<p>but you can create a <em>new</em> reference that borrows the original reference, then consume that new reference and the old one still exists</p>",
        "id": 165329147,
        "sender_full_name": "oli",
        "timestamp": 1557488658
    },
    {
        "content": "<p>the strange thing is:</p>\n<div class=\"codehilite\"><pre><span></span>  let arg : &amp;mut Foo = if foo {.. } ...\n</pre></div>\n\n\n<p>Works as well...</p>",
        "id": 165329477,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1557488962
    },
    {
        "content": "<p>probably there's reborrowing going on</p>",
        "id": 165329897,
        "sender_full_name": "RalfJ",
        "timestamp": 1557489435
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>let x = &amp;mut 0;\nfoo(x); // sugar for &quot;foo(&amp;mut *x)&quot;\nfoo(x); // works\nfoo({x}); // the braces defeat the reborrowing\nfoo(x); // does not work\n</pre></div>",
        "id": 165329912,
        "sender_full_name": "RalfJ",
        "timestamp": 1557489473
    },
    {
        "content": "<p>I see :) Now it is clear</p>",
        "id": 165330020,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1557489575
    }
]