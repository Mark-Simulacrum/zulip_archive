[
    {
        "content": "<p>Given the recent release of miri via rustup, I figured I'd try it out on some popular crates to see if I found any issues.</p>\n<p>Ran it on regex, and after making some changes to skip quickcheck, use non-randomized hashes, and avoid inline ASM and simd in memchr, ran into this. I'm not sure if this indicates actual UB, or just something that miri doesn't support; and if it's something that miri doesn't support, is there a supported way of doing what it's trying to do to find the first <code>USIZE</code> aligned pointer within the haystack:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0080]: constant evaluation error: a raw memory access tried to access part of a pointer value as raw bytes\n  --&gt; /home/lambda/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.2.0/src/fallback.rs:64:42\n   |\n64 |         ptr = ptr_add(ptr, USIZE_BYTES - (start_ptr as usize &amp; align));\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n   |\n   = note: inside call to `memchr::fallback::memchr` at /home/lambda/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.2.0/src/lib.rs:153:9\n   = note: inside call to `memchr::memchr::imp` at /home/lambda/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.2.0/src/lib.rs:159:9\n</pre></div>",
        "id": 161887283,
        "sender_full_name": "Brian Campbell",
        "timestamp": 1553711430
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 161908140,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553727988
    },
    {
        "content": "<p>The text sounds like an actual error, but the code it points to (based on my own knowledge / guesses) seems off</p>",
        "id": 161908181,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553728061
    },
    {
        "content": "<p>Like, the highlighted expression is not accessing as raw bytes. It may just be poorly worded for me though.</p>",
        "id": 161908442,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553728353
    },
    {
        "content": "<p>Trying to make a related example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a_ref</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_aligned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"p\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">a_aligned</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0080]: constant evaluation error: a raw memory access tried to access part of a pointer value as raw bytes\n --&gt; src/main.rs:5:21\n  |\n5 |     let a_aligned = a_ptr as usize % 16;\n  |                     ^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n  |\n  = note: inside call to `main` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:64:34\n  = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:52:53\n  = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panicking.rs:293:40\n  = note: inside call to `std::panicking::try::do_call::&lt;[closure@DefId(1/1:1830 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panicking.rs:289:5\n  = note: inside call to `std::panicking::try::&lt;i32, [closure@DefId(1/1:1830 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe]&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panic.rs:388:9\n  = note: inside call to `std::panic::catch_unwind::&lt;[closure@DefId(1/1:1830 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:52:25\n  = note: inside call to `std::rt::lang_start_internal` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:64:5\n  = note: inside call to `std::rt::lang_start::&lt;()&gt;`\n</pre></div>",
        "id": 161908535,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553728450
    },
    {
        "content": "<p>Now I'm curious, since I do the exact same thing in Jetscii (and for the same reason as well â€” to use the PCMPSTRx SIMD instrinsics)</p>",
        "id": 161908548,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553728483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> we gotta get Miri to give some <code>help: maybe you want to do X instead</code> :-)</p>",
        "id": 161908871,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553728876
    },
    {
        "content": "<p>what you usually want to do is to use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.align_to\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/primitive.slice.html#method.align_to\">https://doc.rust-lang.org/std/primitive.slice.html#method.align_to</a> since that uses intrinsics internally to support all the use cases of miri. The low level operation for pointers is <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset\">https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset</a></p>",
        "id": 161931570,
        "sender_full_name": "oli",
        "timestamp": 1553760410
    },
    {
        "content": "<p>yeah, this is because Miri doesnt pick an actual base address for an allocation</p>",
        "id": 161955247,
        "sender_full_name": "RalfJ",
        "timestamp": 1553781907
    },
    {
        "content": "<p>so if the code does anything that depends on what the base address would be, you get an error</p>",
        "id": 161955278,
        "sender_full_name": "RalfJ",
        "timestamp": 1553781920
    },
    {
        "content": "<p>we have a long-standing open issue to better classify errors into \"UB found\" and \"hit engine limitation\"...</p>",
        "id": 161955316,
        "sender_full_name": "RalfJ",
        "timestamp": 1553781943
    },
    {
        "content": "<p>OK, so that would be an instance of <a href=\"https://github.com/rust-lang/miri/issues/417\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/417\">https://github.com/rust-lang/miri/issues/417</a>, and it looks like the right way forward for memchr would be to switch to <code>slice::align_to</code>. Thanks for the info!</p>",
        "id": 161974013,
        "sender_full_name": "Brian Campbell",
        "timestamp": 1553793856
    },
    {
        "content": "<p>A message about <code>maybe you want to do X instead</code> like the compiler gives would definitely be helpful, in addition to distinguishing UB from unsupported operations. Not sure if I'll have time to, but if I do have some cycles to look at contributing to miri, I might try to work on one of those.</p>",
        "id": 161974197,
        "sender_full_name": "Brian Campbell",
        "timestamp": 1553793989
    },
    {
        "content": "<p>There's also <a href=\"https://github.com/rust-rfcs/const-eval/issues/4\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/issues/4\">https://github.com/rust-rfcs/const-eval/issues/4</a> tracking the enum split</p>",
        "id": 161974468,
        "sender_full_name": "oli",
        "timestamp": 1553794188
    },
    {
        "content": "<blockquote>\n<p>This is a nightly-only experimental API.</p>\n</blockquote>\n<p>Well, that's kind of bunk, now innit.</p>",
        "id": 162125353,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553959510
    }
]