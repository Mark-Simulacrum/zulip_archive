[
    {
        "content": "<p>I'm getting this error in my codebase as of <a href=\"https://github.com/rust-lang/rust/issues/81383\">#81383</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: a method with this name may be added to the standard library in the future\n   --&gt; src/parser.rs:652:28\n    |\n652 |         let f = unsafe { f.unwrap_unchecked() };\n    |                            ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D unstable-name-collisions` implied by `-D warnings`\n    = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 &lt;https://github.com/rust-lang/rust/issues/48919&gt;\n    = help: call with fully qualified syntax `util::OptionExt::unwrap_unchecked(...)` to keep using the current method\n    = help: add `#![feature(option_result_unwrap_unchecked)]` to the crate attributes to enable `std::option::Option::&lt;T&gt;::unwrap_unchecked`\n</code></pre></div>\n<p>The thing I don't like about this error is that it doesn't give me any way to suppress the warning without changing the code. The reason for the error is because I have an extension method called <code>unwrap_unchecked</code> on option which does exactly what the recent PR does, and I want my code to break when it lands on stable. I can't set <code>#![feature(option_result_unwrap_unchecked)]</code> because I compile on stable. If I were to change the code to <code>OptionExt::unwrap_unchecked(f)</code> as suggested, besides looking uglier it also wouldn't remind me to clean it up when it lands on stable.</p>",
        "id": 224181463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611754840
    },
    {
        "content": "<p>What do other people do when faced with this situation? From what I can tell the actual future incompatibility mechanism is fairly general, and this is simply the first time I've run into it. But it does seem to be the kind of thing that would come up frequently, since methods that people care enough to make extension methods for are also likely to eventually end up in the standard library.</p>",
        "id": 224183096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611755577
    },
    {
        "content": "<p>The least bad current solution is to <code>allow(unstable_name_collisions)</code> somewhere \"appropriate\"; and that's precisely the issue with allowing it: the most convenient place is to do it a the crate root, at which point the lint serves no purpose whatsoever, so the best approach is to use it as close as possible to each \"accepted call-site\":</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(unstable_name_collisions)]</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">unwrap_unchecked</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Imho, there should be a way to express that a function / method is a polyfill for a future-provided stdlib method:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">OptionExt</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[polyfills( ::core::option::Option&lt;T&gt;::unwrap_unchecked )]</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- bikeshed syntax here</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">unwrap_unchecked</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p>EDIT: <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> actually, maybe <code>#[cfg(accessible(…))]</code> would help here?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(not(accessible(Option::unwrap_unchecked)))]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">OptionExt</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224183157,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1611755604
    },
    {
        "content": "<p>Oh, I guess <code>cfg(accessible(...))</code> doesn't actually exist yet?</p>",
        "id": 224184107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611756055
    },
    {
        "content": "<p>Is there something like <code>#[cfg(rustc_version &lt; \"1.51.0\")]</code>?</p>",
        "id": 224184780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611756321
    },
    {
        "content": "<p>because then the extension method could be guarded behind that, or even</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(rustc_version &gt;= </span><span class=\"s\">\"1.51.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"fm\">compile_error!</span><span class=\"p\">(</span><span class=\"s\">\"note to self: delete OptionExt::unwrap_unchecked\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224185009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611756427
    },
    {
        "content": "<p>Oh dang, the \"least bad\" solution doesn't work either - <code>#[allow(unstable_name_collisions)]</code> at block scope doesn't prevent the lint, it has to be at least function scope</p>",
        "id": 224194782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611760353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/future.20incompatibility.20lint.20on.20extension.20methods/near/224184780\">said</a>:</p>\n<blockquote>\n<p>Is there something like <code>#[cfg(rustc_version &lt; \"1.51.0\")]</code>?</p>\n</blockquote>\n<p><a href=\"https://docs.rs/rustversion\">https://docs.rs/rustversion</a></p>",
        "id": 224382900,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1611863339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/future.20incompatibility.20lint.20on.20extension.20methods/near/224194782\">said</a>:</p>\n<blockquote>\n<p>Oh dang, the \"least bad\" solution doesn't work either - <code>#[allow(unstable_name_collisions)]</code> at block scope doesn't prevent the lint, it has to be at least function scope</p>\n</blockquote>\n<p>that seems like a bug, maybe open an issue?</p>",
        "id": 224496071,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611937401
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <a href=\"https://github.com/rust-lang/rust/issues/81522\">#81522</a></p>",
        "id": 224508655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611942470
    },
    {
        "content": "<p>FWIW, I would love to see accessible implemented, and it has some implementation challenges. I think it could use some extra eyes looking at it.</p>",
        "id": 224903010,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612285875
    }
]