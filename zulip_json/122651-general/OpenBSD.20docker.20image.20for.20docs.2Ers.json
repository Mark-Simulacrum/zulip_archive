[
    {
        "content": "<p>Hi, not sure if this is the right place to ask. I'm working on a couple system crates for OpenBSD, and the <a href=\"http://docs.rs\">docs.rs</a> builds fail because they aren't meant to be built on Linux. Does the <a href=\"https://github.com/rust-lang/crates-build-env\">crates-build-env</a> repository accept PRs for new docker images?</p>",
        "id": 246517512,
        "sender_full_name": "orvi",
        "timestamp": 1626729880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426841\">@orvi</span> do you mean \"are only meant to build on Linux\"? <a href=\"http://Docs.rs\">Docs.rs</a> is only supported on x86_64-unknown-linux-gnu</p>",
        "id": 246523800,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626734052
    },
    {
        "content": "<p>And fixing it isn't simple, you'd need to extend rustwide to support cross compiling to a different host</p>",
        "id": 246523826,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626734079
    },
    {
        "content": "<p>Or something like that, I forget exactly the bug</p>",
        "id": 246523840,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626734094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426841\">@orvi</span> If you're writing an OpenBSD-only crate, you may want to allow at least <em>documenting</em> it on a non-OpenBSD target. You could do that by using <code>cfg(doc)</code>.</p>",
        "id": 246524248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626734439
    },
    {
        "content": "<p>But also, note that while the build requires that the <em>host</em> is Linux, you can use a different <em>target</em>.</p>",
        "id": 246524301,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626734503
    },
    {
        "content": "<p>See <a href=\"https://docs.rs/about/metadata\">https://docs.rs/about/metadata</a></p>",
        "id": 246524305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626734506
    },
    {
        "content": "<p>Oh oh I misunderstood, the crate itself is BSD-only. Does it support being cross compiled? That's the easiest way to fix this</p>",
        "id": 246524311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626734514
    },
    {
        "content": "<p>\"Any target supported by rustup can be used\"</p>",
        "id": 246524319,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626734518
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package.metadata.docs.rs]</span>\n<span class=\"n\">default-target</span> <span class=\"o\">=</span> <span class=\"s\">\"x86_64-unknown-openbsd\"</span>\n<span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"k\">[\"x86_64-unknown-openbsd\"]</span>\n</code></pre></div>",
        "id": 246524447,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626734591
    },
    {
        "content": "<p>/me is very proud of implementing support for arbitrary targets</p>",
        "id": 246524460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626734596
    },
    {
        "content": "<p>As long as you can cross-compile, the above snippet should work.</p>",
        "id": 246524467,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626734606
    },
    {
        "content": "<p>(You might not need to set <code>default-target</code>, since it sounds like it defaults to the first element of <code>targets</code>.)</p>",
        "id": 246524476,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626734619
    },
    {
        "content": "<p>Yeah ideally we wouldn't have both but default-target existed a while before <code>targets</code> did.</p>",
        "id": 246524556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626734683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> awesome! So much easier than spinning up a new docker image. This is what I was looking for, thank you very much</p>",
        "id": 246542090,
        "sender_full_name": "orvi",
        "timestamp": 1626752920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/OpenBSD.20docker.20image.20for.20docs.2Ers/near/246524467\">said</a>:</p>\n<blockquote>\n<p>As long as you can cross-compile, the above snippet should work.</p>\n</blockquote>\n<p>May still have an issue, the crates are system libraries (depend on system headers not found in Linux) :(</p>",
        "id": 246542686,
        "sender_full_name": "orvi",
        "timestamp": 1626753717
    },
    {
        "content": "<p>That's harder, but doable in a few ways.</p>",
        "id": 246548224,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626761173
    },
    {
        "content": "<p>Do you actually need C headers (e.g. because you're using bindgen) or could you just declare <code>extern \"C\"</code> functions for the library?</p>",
        "id": 246548248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626761220
    },
    {
        "content": "<p>If the latter, then you may be interested in helping with the \"raw-dylib\" support, which would do exactly what you want.</p>",
        "id": 246548311,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626761284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/OpenBSD.20docker.20image.20for.20docs.2Ers/near/246548248\">said</a>:</p>\n<blockquote>\n<p>Do you actually need C headers (e.g. because you're using bindgen) or could you just declare <code>extern \"C\"</code> functions for the library?</p>\n</blockquote>\n<p>I'm using bindgen with C headers, but ended up declaring structs and <code>extern \"C\"</code> functions for non-OpenBSD builds (maybe it makes sense to just use the manual declarations, idk)</p>",
        "id": 246635483,
        "sender_full_name": "orvi",
        "timestamp": 1626808316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/OpenBSD.20docker.20image.20for.20docs.2Ers/near/246548311\">said</a>:</p>\n<blockquote>\n<p>If the latter, then you may be interested in helping with the \"raw-dylib\" support, which would do exactly what you want.</p>\n</blockquote>\n<p>I haven't heard of \"raw-dylib\", I'll look into it. Happy to help if I can</p>",
        "id": 246635603,
        "sender_full_name": "orvi",
        "timestamp": 1626808378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426841\">@orvi</span> raw-dylib makes it possible to build a crate that links against a shared library, without having that shared library present on the system.</p>",
        "id": 246636034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626808612
    },
    {
        "content": "<p>So, for instance, raw-dylib would allow cross-compiling the libc crate for OpenBSD without having the library or headers of OpenBSD libc available.</p>",
        "id": 246636094,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626808639
    },
    {
        "content": "<p><em>Huge</em> win for the ease of cross-compilation.</p>",
        "id": 246636118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626808655
    },
    {
        "content": "<p>that sounds awesome, and would definitely drop the need for the manual work I'm doing now. Is is part of rustc?</p>",
        "id": 246636538,
        "sender_full_name": "orvi",
        "timestamp": 1626808861
    },
    {
        "content": "<p>Basic support is implemented for windows afaik.</p>",
        "id": 246637213,
        "sender_full_name": "bjorn3",
        "timestamp": 1626809241
    },
    {
        "content": "<p>ok, I'm reading through the tracking issue now</p>",
        "id": 246637818,
        "sender_full_name": "orvi",
        "timestamp": 1626809528
    }
]