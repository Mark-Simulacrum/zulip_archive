[
    {
        "content": "<p>Hello! I have a crate that i would like to work on x86_64 but with specialized code for avx2. The AVX2 code is not just a simple function that I can annotate with <code>#[target_feature]</code> but rather a whole module. In the generic part of the crate i will rely on runtime feature cpu detection to call the appropriate code.<br>\nWhat is the right way of doing this?</p>",
        "id": 204069563,
        "sender_full_name": "marmeladema",
        "timestamp": 1594897368
    },
    {
        "content": "<p>I cannot really rely on conditional compilation since i want to avx2 code to always be compiled  and part of the library without the user having to enable rustflags or anything</p>",
        "id": 204070035,
        "sender_full_name": "marmeladema",
        "timestamp": 1594897786
    },
    {
        "content": "<p>write a proc macro to annotate every function in the module with <code>#[target_feature]</code>?</p>",
        "id": 204078087,
        "sender_full_name": "eddyb",
        "timestamp": 1594903871
    },
    {
        "content": "<p>if one doesn't already exist</p>",
        "id": 204078110,
        "sender_full_name": "eddyb",
        "timestamp": 1594903882
    },
    {
        "content": "<p>Using <code>#[target_feature]</code> also inhibits some inlining which can lead to (very) suboptimal codegen</p>",
        "id": 204080558,
        "sender_full_name": "marmeladema",
        "timestamp": 1594905113
    },
    {
        "content": "<p>I was wondering if using a <code>build.rs</code> to manually call <code>cargo rustc</code> with the proper flags and then linking with the generated rlib would do the trick</p>",
        "id": 204080739,
        "sender_full_name": "marmeladema",
        "timestamp": 1594905190
    },
    {
        "content": "<p>Only when calling from non-target_feature to target_feature</p>",
        "id": 204080746,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594905194
    },
    {
        "content": "<p>And that should only happen once after runtime detection</p>",
        "id": 204080774,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594905208
    },
    {
        "content": "<p>Hum ok</p>",
        "id": 204081580,
        "sender_full_name": "marmeladema",
        "timestamp": 1594905486
    },
    {
        "content": "<p>yeah, it only prevents what would lead to UB due to unsupported instructions being generated</p>",
        "id": 204088794,
        "sender_full_name": "eddyb",
        "timestamp": 1594908829
    },
    {
        "content": "<p>You could also potentially do what I do in jetscii <a href=\"https://github.com/shepmaster/jetscii/blob/master/src/lib.rs\">https://github.com/shepmaster/jetscii/blob/master/src/lib.rs</a></p>",
        "id": 204100059,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594913446
    },
    {
        "content": "<p>See the dispatch macro</p>",
        "id": 204100117,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594913473
    },
    {
        "content": "<p><a href=\"https://docs.rs/multiversion/\">https://docs.rs/multiversion/</a> might do what you want <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span></p>",
        "id": 204100753,
        "sender_full_name": "Lokathor",
        "timestamp": 1594913699
    }
]