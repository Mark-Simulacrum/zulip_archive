[
    {
        "content": "<p>I'd be interested in hearing opinions on <a href=\"https://github.com/rust-lang/rust/issues/95420\">https://github.com/rust-lang/rust/issues/95420</a>; this seems unfortunate :(</p>",
        "id": 276933483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648502738
    },
    {
        "content": "<p>Named items take precedence over <code>*</code> glob imports.  I'm not sure what your thoughts are towards how the rules would work instead.  I think it could be quite confusing if that shadowing differed based on visibility.</p>",
        "id": 276935785,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648504244
    },
    {
        "content": "<p>Different languages make different choices here.  C++ intentionally picked \"working code never changes behaviour if you make something public\" (see D&amp;E), whereas C# went for \"adding private things to a base class can't* break a derived class\"</p>\n<p>*reflection, of course, can still break</p>",
        "id": 276940018,
        "sender_full_name": "scottmcm",
        "timestamp": 1648507782
    },
    {
        "content": "<p>I prefer forbid shadowing <code>pub</code> glob imports with non-<code>pub</code> imports, or at least add a lint/warning against it.</p>",
        "id": 276962452,
        "sender_full_name": "sgk",
        "timestamp": 1648534824
    },
    {
        "content": "<p>On a second thought. This may be used intentionally to \"block off\" glob import. So add a clippy lint I guess.</p>",
        "id": 276962858,
        "sender_full_name": "sgk",
        "timestamp": 1648535304
    },
    {
        "content": "<p>While named items shadowing globs makes sense to make semver more robust, I've always thought that there should be a lint for that, with, therefore, a way to opt out certain items from the blob:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ warning, `Result` item in this blob import is shadowed</span>\n<span class=\"k\">type</span> <span class=\"nb\">Result</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyResult</span><span class=\"err\">‚Ä¶</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and when intended:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"p\">{</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Not only accepted, but it would also not warn üôè</span>\n<span class=\"k\">type</span> <span class=\"nb\">Result</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyResult</span><span class=\"err\">‚Ä¶</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276983705,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648549025
    },
    {
        "content": "<p>I want to cross reference <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/11858\">https://github.com/rust-analyzer/rust-analyzer/issues/11858</a> here, which is the analogous issue in rust-analyzer, which gets confused when you <code>use foo::*; pub use foo::*;</code>. rustc seems to always prefer the pub use in this case, but it is hard to tell how intentional this is</p>",
        "id": 277232446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648701363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Adding.20private.20imports.20can.20break.20downstream.20crates/near/276983705\">said</a></p>\n<p>(I've just realized that the imaginary syntax I'ver chosen for it happens to be the same as that of importing a trait's methods without importing the trait's type-namespace-name. Since not importing anything from an item and importing the methods would be slightly different semantics, we may need another syntax to avoid this ambiguity, should it be deemed problematic)</p>",
        "id": 277253378,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648718293
    }
]