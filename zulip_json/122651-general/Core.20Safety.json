[
    {
        "content": "<p>Is there any truly fundamental proof, at any level of computer-science-analysis, that Rust must be implemented using unsafe Rust?</p>",
        "id": 278508398,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649652362
    },
    {
        "content": "<p>consider the alternatives:</p>\n<ul>\n<li>most safe languages that don't offer <code>unsafe</code> simply do the exact same unsafe stuff as part of the compiler or interpreter instead</li>\n<li>to go any further than that you have to start proving the compiler is implemented correctly, which is a difficult problem that people have sunk a lot of research into- and the best methods we have for implementing compilers like still that take way more effort than the usual approach of <code>unsafe</code> (whether in the libraries or in the compiler/interpreter)</li>\n</ul>",
        "id": 278508696,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649652892
    },
    {
        "content": "<p>Or other languages just let you do unsafe things without asking you to <em>type</em> <code>unsafe</code> -- as I understand it, using ctypes in Python you can get UB by calling a DLL improperly and there's just no syntactic distinction for the unsafe call.</p>",
        "id": 278510417,
        "sender_full_name": "scottmcm",
        "timestamp": 1649655459
    },
    {
        "content": "<p>There is a proof that unsafe ‚Äúworks‚Äù that you can use unsafe code and build safe abstractions around it where ub cannot be observed</p>",
        "id": 278510826,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649656059
    },
    {
        "content": "<p>Called RustBelt, it shows the type safety of Rust with unsafe code, which in particular implies memory safety</p>",
        "id": 278510875,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649656109
    },
    {
        "content": "<p>Even if a sufficiently advanced Rust compiler could prove all our core library code to be safe (and that already wouldn't be Rust anymore but some hypothetical Rust+) we still have to deal with OS APIs which deal in raw pointers.</p>",
        "id": 278538864,
        "sender_full_name": "The 8472",
        "timestamp": 1649676149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278508398\">said</a>:</p>\n<blockquote>\n<p>Is there any truly fundamental proof, at any level of computer-science-analysis, that Rust must be implemented using unsafe Rust?</p>\n</blockquote>\n<p>how would you possibly do it otherwise? <code>unsafe</code> is inherently necessary for FFI, and you can't have any interaction with the kernel without syscalls, which essentially leaves you with just a fancy space heater.</p>",
        "id": 278554771,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649684452
    },
    {
        "content": "<p>Well, hypothetically you could have an OS that provides APIs with all the safeties needed by rust. But then you're just moving the problem somewhere else.</p>",
        "id": 278556615,
        "sender_full_name": "The 8472",
        "timestamp": 1649685253
    },
    {
        "content": "<blockquote>\n<p>Which essentially leaves you with just a fancy space heater.</p>\n</blockquote>\n<p>Fancy space heaters may be acceptable for theoretical computer-science arguments though? But even then, <code>unsafe</code> is needed to access <code>static mut</code>. In the presence of threads it would be very hard (possibly halting-problem hard) to automatically prove correctness of such accesses.</p>",
        "id": 278557296,
        "sender_full_name": "The 8472",
        "timestamp": 1649685528
    },
    {
        "content": "<p>History is made through the solution of difficult problems. Why is it that most programmers have accepted a cultural shift that involves never touching nor approaching \"hard problems?\"<br>\nFurthermore, I only asked if there was any proof. Are you saying no?</p>",
        "id": 278562844,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649687763
    },
    {
        "content": "<p>My bad; was replying in this case to <span class=\"user-mention\" data-user-id=\"117495\">@rpjohnst</span> in the last bit.</p>",
        "id": 278562925,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649687811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278557296\">said</a>:</p>\n<blockquote>\n<p>In the presence of threads it would be very hard (possibly halting-problem hard) to automatically prove correctness of such accesses.</p>\n</blockquote>\n<p>I don't think it's useful at all to speculate. This is also another trend in programmer circles. I asked for fundamental proof. To be clear, but hopefully not harsh, I don't think people should respond without an answer, as it wastes both of our time.</p>",
        "id": 278563165,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649687895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278554771\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278508398\">said</a>:</p>\n<blockquote>\n<p>Is there any truly fundamental proof, at any level of computer-science-analysis, that Rust must be implemented using unsafe Rust?</p>\n</blockquote>\n<p>how would you possibly do it otherwise? <code>unsafe</code> is inherently necessary for FFI, and you can't have any interaction with the kernel without syscalls, which essentially leaves you with just a fancy space heater.</p>\n</blockquote>\n<p>Why do you need FFI for syscalls? I thought syscalls were a matter of pushing the arguments onto the stack in reverse order and then issuing the \"call\" assembly instruction.</p>",
        "id": 278563349,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649687976
    },
    {
        "content": "<p>syscalls can do arbitrary things. <code>vfork</code> is <em>extremely</em> unsafe even though the actual act of doing the syscall is just manipulating registers and executing a <code>syscall</code> instruction.</p>",
        "id": 278564130,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649688290
    },
    {
        "content": "<p>you're right that technically FFI is not necessary, but in practice most syscalls go through the platform libc</p>",
        "id": 278564183,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649688317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278564183\">said</a>:</p>\n<blockquote>\n<p>you're right that technically FFI is not necessary, but in practice most syscalls go through the platform libc</p>\n</blockquote>\n<p>I didn't know this, though that seems completely unnecessary. I wonder why this is when rust isn't choosing that--llvm does, right? I guess LLD is the one doing that kind of thing, eh?</p>",
        "id": 278564634,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649688513
    },
    {
        "content": "<p>Rust chooses to do that. Go tried to avoid going through libc and it broke on many platforms because linux is the only major OS with a stable syscall ABI.</p>",
        "id": 278564697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649688549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278564130\">said</a>:</p>\n<blockquote>\n<p>syscalls can do arbitrary things. <code>vfork</code> is <em>extremely</em> unsafe even though the actual act of doing the syscall is just manipulating registers and executing a <code>syscall</code> instruction.</p>\n</blockquote>\n<p>\"unsafe\" means \"the compiler cannot verify this\"; the compiler certainly cannot verify the correctness of your OS kernel.</p>",
        "id": 278564737,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649688570
    },
    {
        "content": "<p>Does every core library involve a syscall?</p>",
        "id": 278564921,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649688625
    },
    {
        "content": "<p>I don't understand the question. Things like <code>.as_ref()</code> do not make syscalls, no.</p>",
        "id": 278564975,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649688649
    },
    {
        "content": "<blockquote>\n<p>Is there any truly fundamental proof, at any level of computer-science-analysis, that Rust must be implemented using unsafe Rust?</p>\n</blockquote>\n<p>Technically correct answer üßå: It does not require unsafe rust because rust can be implemented in a non-rust language. Early versions were in fact implemented in OCaml! To make it computer-sciencey: Turing-equivalence!</p>\n<p>What I am aiming at here is that the question is imprecise, and thus invites speculation around its edges, such as whether the OS would be included in safety arguments or not. Theoretical proofs tend to make simplifying assumptions which weren't stated here.</p>",
        "id": 278565022,
        "sender_full_name": "The 8472",
        "timestamp": 1649688673
    },
    {
        "content": "<p>Perhaps \"core library\" is one entity in our context; maybe I've misphrased that, so I'll rephrase. I meant regarding Rust's \"units\" or \"building blocks,\" which is at the core of the language, heretofore implemented (perhaps unnecessarily) in unsafe blocks.</p>",
        "id": 278565134,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649688719
    },
    {
        "content": "<p>I still don't understand your question.</p>",
        "id": 278565342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649688785
    },
    {
        "content": "<p>Do you mean the core library? Or also the compiler itself?</p>",
        "id": 278565411,
        "sender_full_name": "The 8472",
        "timestamp": 1649688814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278565022\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there any truly fundamental proof, at any level of computer-science-analysis, that Rust must be implemented using unsafe Rust?</p>\n</blockquote>\n<p>Technically correct answer üßå: It does not require unsafe rust because rust can be implemented in a non-rust language. Early versions were in fact implemented in OCaml! To make it computer-sciencey: Turing-equivalence!</p>\n<p>What I am aiming at here is that the question is imprecise, and thus invites speculation around its edges, such as whether the OS would be included in safety arguments or not. Theoretical proofs tend to make simplifying assumptions which weren't stated here.</p>\n</blockquote>\n<p>There is no imprecision to the concept of the existence of a truly fundamental proof. It's extremely exact in its wording, but your own simplifications to approach the question might be the problem. \"Fundamental\" has a very specific definition. \"Is there any\" is well-defined. \"Truly\" helps specify that I'm using the specific instance of \"fundamental,\" and all of it modifies \"proof,\" which is a clearly defined term in our context.</p>",
        "id": 278565443,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649688831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278565411\">said</a>:</p>\n<blockquote>\n<p>Do you mean the core library? Or also the compiler itself?</p>\n</blockquote>\n<p>The core, as the compiler isn't made in rust at all, is it? The thing that actually compiles is LLVM, which is known-unsafe.</p>",
        "id": 278565587,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649688867
    },
    {
        "content": "<p>The rust compiler is written in rust and has a written-in-rust codegen backend (cranelift). The main codegen backend is LLVM, yes, but not the only one.</p>",
        "id": 278565658,
        "sender_full_name": "The 8472",
        "timestamp": 1649688906
    },
    {
        "content": "<p>The rust IR-emitter, right? The one everyone's actually using.</p>",
        "id": 278565722,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649688932
    },
    {
        "content": "<p>I presume cranelift can't actually compile to the same generalized platforms that LLVM can; I'll look that up.</p>",
        "id": 278565882,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649688982
    },
    {
        "content": "<p>Even the x86_64 target isn't fully supported nor stable yet, so that's a good sign that it's a red herring.</p>",
        "id": 278566051,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649689057
    },
    {
        "content": "<p>Such concerns shouldn't be relevant for theoretical considerations?</p>",
        "id": 278566069,
        "sender_full_name": "The 8472",
        "timestamp": 1649689066
    },
    {
        "content": "<p>Yes they are, for the sake of understanding why you'd waste your time thinking about quick answers as if I'm an oracle.</p>",
        "id": 278566158,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649689093
    },
    {
        "content": "<p>It doesn't matter if they're written in rust; it matters if they can possibly be written in unsafe rust. Currently, I am proposing through negative space that they are lazily implemented without \"minimum unsafety,\" so you might feel attacked, and that's not what my intention is. I'm asking, outright, if there is a fundamental proof available from any source that anyone is aware of that might indicate the absolute necessity (or the inverse) of using unsafe blocks to implement Rust.</p>",
        "id": 278566399,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649689200
    },
    {
        "content": "<p>Currently, the claim, as stated by the PRACTICE of Rust, is that there could be NO Rust without unsafe, not SOME Rust, but ABSOLUTELY NONE.</p>",
        "id": 278566563,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649689234
    },
    {
        "content": "<p>You didn't give a yes/no answer. So, do you mean just the <code>core</code> library or also the compiler?</p>\n<p>If we exclude the compiler then this becomes trivial because all the use-of-unsafe (but not unsafe-to-use) things in core <em>could</em> be moved to the compiler via intrinsics and lang items. I acknowledge that this is a sleight of hand, but again, it depends on the precise meaning of your question, since the scope of \"Rust\" was not defined (remember, rust has no formal specification).</p>",
        "id": 278567554,
        "sender_full_name": "The 8472",
        "timestamp": 1649689576
    },
    {
        "content": "<p>In general negative statements are much harder to prove. </p>\n<p>But in this case we can answer in the negative: the language includes primitives (<code>UnsafeCell</code>) which are fundamentally unsafe to use.</p>",
        "id": 278567632,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649689611
    },
    {
        "content": "<p>These are part of the <em>language</em> (by virtue of shipping with core)</p>",
        "id": 278567755,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649689656
    },
    {
        "content": "<p>unsafe-to-use is not the same as use-of-unsafe</p>",
        "id": 278567871,
        "sender_full_name": "The 8472",
        "timestamp": 1649689687
    },
    {
        "content": "<p>And <code>Box</code> lives in <code>alloc</code>, not in <code>core</code>. Do we have any use of <code>UnsafeCell</code> in <code>core</code>?</p>",
        "id": 278567987,
        "sender_full_name": "The 8472",
        "timestamp": 1649689725
    },
    {
        "content": "<p>Yes</p>",
        "id": 278568011,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649689733
    },
    {
        "content": "<p><code>core::cell::UnsafeCell</code></p>",
        "id": 278568099,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649689768
    },
    {
        "content": "<p>Yes, I guess I interpreted the question as whether we could have made rust the language not include unsafe rust</p>",
        "id": 278568208,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649689800
    },
    {
        "content": "<p>Rather than whether the compiler has to have unsafe code, since there the answer is no if you‚Äôre willing to pay a large performance penalty</p>",
        "id": 278568346,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649689837
    },
    {
        "content": "<p>We can always replace vec with safe singly linked lists or trees</p>",
        "id": 278568393,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649689854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278567554\">said</a>:</p>\n<blockquote>\n<p>You didn't give a yes/no answer. So, do you mean just the <code>core</code> library or also the compiler?</p>\n<p>If we exclude the compiler then this becomes trivial because all the use-of-unsafe (but not unsafe-to-use) things in core <em>could</em> be moved to the compiler via intrinsics and lang items. I acknowledge that this is a sleight of hand, but again, it depends on the precise meaning of your question, since the scope of \"Rust\" was not defined (remember, rust has no formal specification).</p>\n</blockquote>\n<p>It has no spec? What the fuck?</p>",
        "id": 278568660,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649689964
    },
    {
        "content": "<p>No, rust has no specification, but then again few languages have anything resembling a formal specification</p>",
        "id": 278568817,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690015
    },
    {
        "content": "<p>Rust may get one eventually‚Ñ¢ but there are still many open questions</p>",
        "id": 278568938,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690044
    },
    {
        "content": "<p>See the ‚Äúshould rust have strict provenance‚Äù discussions</p>",
        "id": 278568972,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278568346\">said</a>:</p>\n<blockquote>\n<p>Rather than whether the compiler has to have unsafe code, since there the answer is no if you‚Äôre willing to pay a large performance penalty</p>\n</blockquote>\n<p>Vec is the only unsafe fundamental component? This seems closer to an answer, though I don't want to waste your time. Please note all of my comments here are literally only because you answered originally, making it possible that you might have an answer, and when it looks like you're merely waxing possibilities, I try to pare off that offshoot of thought so we can stay focused. It's the only way I minimize my effect on your life.</p>",
        "id": 278569035,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649690081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278568938\">said</a>:</p>\n<blockquote>\n<p>Rust may get one eventually‚Ñ¢ but there are still many open questions</p>\n</blockquote>\n<p>I don't see how a language that is this old hasn't gotten that out of the way, yet. I wish the project was keeping track of how much time was actually spent on certain features.</p>",
        "id": 278569140,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649690123
    },
    {
        "content": "<p>No, vec is not the only ‚Äúunsafe component‚Äù, the whole point of rust is to enable safe abstractions of unsafe code, encapsulating unsafe code behind observationally safe boundaries and that is what is proved possible in RustBelt</p>",
        "id": 278569327,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690186
    },
    {
        "content": "<p>The short categories of code where you typically find unsafe are: </p>\n<ul>\n<li>collections where we need efficient allocation patterns not expressible in rust types</li>\n<li>concurrency primitives</li>\n<li>low-level system interfaces and ffi</li>\n</ul>",
        "id": 278569505,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278569327\">said</a>:</p>\n<blockquote>\n<p>No, vec is not the only ‚Äúunsafe component‚Äù, the whole point of rust is to enable safe abstractions of unsafe code, encapsulating unsafe code behind observationally safe boundaries and that is what is proved possible in RustBelt</p>\n</blockquote>\n<p>If the entire point of rust is to be unsafe, then why isn't that the first answer I get? Perhaps you don't mean to exactly use \"point\" in that situation?</p>",
        "id": 278569621,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649690292
    },
    {
        "content": "<p>That‚Äôs not the question you asked. You asked if it was possible to have rust with no unsafe code</p>",
        "id": 278569734,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690334
    },
    {
        "content": "<p>The ability to actually abstract around unsafe code is absolutely a foundational feature of the rust type system</p>",
        "id": 278569919,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690404
    },
    {
        "content": "<p>So why did you respond with \"the point is to use unsafe\" if it wasn't an answer (because it isn't an answer) to \"is it possible to have it without it?\"</p>",
        "id": 278569935,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649690411
    },
    {
        "content": "<p>Seems like you have some default script you're following, to be fully frank, instead of just not answering if you don't care about my question.</p>",
        "id": 278570013,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649690439
    },
    {
        "content": "<p>I‚Äôd like to remind you that this a community Zulip and to not make frankly demeaning allegations about other participants. Second, I don‚Äôt represent the Rust project in any official capacity, I just happen to do research on Rust</p>",
        "id": 278570278,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690540
    },
    {
        "content": "<p>Finally, if you reread the thread you‚Äôll see that one of the first things said is that unsafe is necessary for FFI</p>",
        "id": 278570364,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649690576
    },
    {
        "content": "<p>How is it demeaning to say you don't give a fuck about me? You don't, and I don't expect you to. I'm as honest with you as I expect you to be honest with me, and that's how we can approach each other in these spaces.</p>",
        "id": 278570382,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649690586
    },
    {
        "content": "<p>I didn't see any discussion (I was there, actually) regarding the \"fundamental proof\" of the unsafe being necessary for FFI: In fact, we talked about the exact opposite.</p>",
        "id": 278570511,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649690637
    },
    {
        "content": "<p>Rust does provide a safe surface using unsafe under the hood. With enough contortions most of these could possibly achieved without unsafe, but at a cost of performance or compiler complexity. Few people seem to cares about this possibility because it is not the goal of rust to be 100% free of <code>unsafe</code> statements even if it theoretically could be.  <code>unsafe</code> as part of the language anyway so that users  have the same ability to opt-out of those safety constraints because the ability of the borrow-checker and other safety nets reject programs that are in fact safe.</p>\n<p>Any library can elect to not use unsafe in its own code via <code>#![forbid(unsafe_code)]</code>.</p>\n<p>Also, <code>unsafe</code> does not mean rust is unsafe. It means the compiler cannot prove that it is safe and the responsibility lies with the programmer to keep it safe. It's still safe, unless the programmer makes a mistake. But then arguably he's not writing conformant Rust.</p>",
        "id": 278571939,
        "sender_full_name": "The 8472",
        "timestamp": 1649691178
    },
    {
        "content": "<p>So <em>by definition</em> (if we had a spec) rust is always safe.</p>",
        "id": 278571980,
        "sender_full_name": "The 8472",
        "timestamp": 1649691194
    },
    {
        "content": "<p>Hey Saddaminatrix, we try to embody an \"assume good faith\" here. The people here are making a strong effort to help you understand why Rust is safe, from what I can see. If there's something that is making you feel unwelcome, I'd encourage you to reach out to us (the Mods Team) here in DMs or via email (<a href=\"mailto:rust-mods@rust-lang.org\">rust-mods@rust-lang.org</a>), rather than directly call people out, and we can figure out what is necessary to help you feel safe and welcomed.</p>",
        "id": 278572424,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1649691388
    },
    {
        "content": "<p>I'm absolutely assuming good faith, but that's exactly why I'm trying to highlight when I see clear traps that are common in programming circles. An \"unanswered\" question is irritating to most programmers, so they often take shortcuts that they're unaware of to avoid the question going unanswered. I'm not saying anything regarding Xavier's character nor behavior when it comes to clarifying that I know he doesn't give a fuck; I'm genuinely saying \"I know, you know, we all know, and it's okay to not respond.\"</p>",
        "id": 278572617,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649691478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278571939\">said</a>:</p>\n<blockquote>\n<p>Rust does provide a safe surface using unsafe under the hood. With enough contortions most of these could possibly achieved without unsafe, but at a cost of performance or compiler complexity. Few people seem to cares about this possibility because it is not the goal of rust to be 100% free of <code>unsafe</code> statements even if it theoretically could be.  <code>unsafe</code> as part of the language anyway so that users  have the same ability to opt-out of those safety constraints because the ability of the borrow-checker and other safety nets reject programs that are in fact safe.</p>\n<p>Any library can elect to not use unsafe in its own code via <code>#![forbid(unsafe_code)]</code>.</p>\n<p>Also, <code>unsafe</code> does not mean rust is unsafe. It means the compiler cannot prove that it is safe and the responsibility lies with the programmer to keep it safe. It's still safe, unless the programmer makes a mistake. But then arguably he's not writing conformant Rust.</p>\n</blockquote>\n<p>At the end of the day, are you saying that you're unaware of any theoretical framework regarding safety that would let us actually settle the question?</p>",
        "id": 278572751,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649691525
    },
    {
        "content": "<p>The compiler has a definition of safety, so I'd think we'd start with that definition and just see if it was possible to run code safely always, given any standards.</p>",
        "id": 278572839,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649691568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278562844\">said</a>:</p>\n<blockquote>\n<p>History is made through the solution of difficult problems. Why is it that most programmers have accepted a cultural shift that involves never touching nor approaching \"hard problems?\"<br>\nFurthermore, I only asked if there was any proof. Are you saying no?</p>\n</blockquote>\n<p>rust already solves many difficult problems and is a practical improvement over the safety of its predecessors. this does not mean anybody has given up on solving the harder problems; only that progress is incremental.</p>\n<p>and that was my overall point- there is no proof that rust <em>must</em> be implemented using unsafe, but what would that even look like? rust is what it is, there are <em>clearly</em> many other languages that take different approaches to the problem (both more and less rigorous), so your question isn't very interesting without more context.</p>",
        "id": 278573360,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649691753
    },
    {
        "content": "<blockquote>\n<p>At the end of the day, are you saying that you're unaware of any theoretical framework regarding safety that would let us actually settle the question?</p>\n</blockquote>\n<p>Not quite. I'm saying that your question is not sufficiently detailed or precise. There is enough wiggle room to answer it one way or another, depending on assumptions which part of \"Rust\" is in scope, what we mean by \"unsafe Rust\" and maybe other things.</p>\n<p>RustBelt has been mentioned. It's the most formal answer you'll get. Maybe the the <a href=\"https://github.com/rust-lang/miri\">rust mir interpreter</a> is also of interest to you, it can catch many forms of undefined behavior. But neither sets out to answer your specific question.</p>",
        "id": 278574377,
        "sender_full_name": "The 8472",
        "timestamp": 1649692171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278572839\">said</a>:</p>\n<blockquote>\n<p>The compiler has a definition of safety, so I'd think we'd start with that definition and just see if it was possible to run code safely always, given any standards.</p>\n</blockquote>\n<p>this is a perfect example of why people want to dig deeper rather than just give a yes/no answer- the compiler's definition of safety is intentionally very simplistic, precisely because it was only ever designed to be useful in combination with libraries implemented using <code>unsafe</code></p>\n<p>so again, you are going to have to be more detailed about what you would consider \"rust but without unsafe.\" if you just remove unsafe from the language, and move a few things into the compiler, you can trivially get a language that does not use unsafe anywhere... but does that satisfy your criteria? it's certainly not very interesting imo</p>",
        "id": 278574645,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649692286
    },
    {
        "content": "<p>I'm also saying that, depending on what exactly you're actually asking, answering it may not be all that useful because those answers might just consist of bending things into the shape required to give an answer, not what is practically useful. (Edit: This is pretty much what <span class=\"user-mention\" data-user-id=\"117495\">@rpjohnst</span> said above)</p>",
        "id": 278574676,
        "sender_full_name": "The 8472",
        "timestamp": 1649692301
    },
    {
        "content": "<blockquote>\n<p>I'm not saying anything regarding Xavier's character nor behavior when it comes to clarifying that I know he doesn't give a fuck; I'm genuinely saying \"I know, you know, we all know, and it's okay to not respond.\"</p>\n</blockquote>\n<p>This will be my last comment on this specific point as I‚Äôm not interested in starting a flame war, but I am absolutely interested in your question and have made a best-effort attempt to understand what you‚Äôre getting at and answer it. </p>\n<p>As a researcher of Rust, the role and presence of unsafe code is absolutely something I care about understanding</p>",
        "id": 278574681,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649692304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278574377\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>At the end of the day, are you saying that you're unaware of any theoretical framework regarding safety that would let us actually settle the question?</p>\n</blockquote>\n<p>Not quite. I'm saying that your question is not sufficiently detailed or precise. There is enough wiggle room to answer it one way or another, depending on assumptions which part of \"Rust\" is in scope, what we mean by \"unsafe Rust\" and maybe other things.</p>\n<p>RustBelt has been mentioned. It's the most formal answer you'll get. Maybe the the <a href=\"https://github.com/rust-lang/miri\">rust mir interpreter</a> is also of interest to you, it can catch many forms of undefined behavior. But neither sets out to answer your specific question.</p>\n</blockquote>\n<p>Surely \"Unsafe Rust\" has a definition that can't be weaseled around, or else I don't see how we can ever claim anything is safe.</p>",
        "id": 278576870,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278574645\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278572839\">said</a>:</p>\n<blockquote>\n<p>The compiler has a definition of safety, so I'd think we'd start with that definition and just see if it was possible to run code safely always, given any standards.</p>\n</blockquote>\n<p>this is a perfect example of why people want to dig deeper rather than just give a yes/no answer- the compiler's definition of safety is intentionally very simplistic, precisely because it was only ever designed to be useful in combination with libraries implemented using <code>unsafe</code></p>\n<p>so again, you are going to have to be more detailed about what you would consider \"rust but without unsafe.\" if you just remove unsafe from the language, and move a few things into the compiler, you can trivially get a language that does not use unsafe anywhere... but does that satisfy your criteria? it's certainly not very interesting imo</p>\n</blockquote>\n<p>This statement seems to imply that the concept itself is defined by the idea of unsafe, but that \"it can't be defined\" because safe and unsafe are so interrelated without any outside context.</p>",
        "id": 278576984,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693264
    },
    {
        "content": "<p>no, i'm not saying that the concept is defined by the idea of unsafe, but that it has a very simplistic definition that would not let you write very many programs if you removed unsafe from the language entirely.</p>",
        "id": 278577162,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693339
    },
    {
        "content": "<p>Perhaps that's the simplest question. Is safe Rust capable of performing all computational operations? After that, can a system safely implement all operations conceivable?</p>",
        "id": 278577342,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693418
    },
    {
        "content": "<p>safe rust is turing complete, yes; the second question is extremely vague</p>",
        "id": 278577397,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693445
    },
    {
        "content": "<p>The above question is only possible to conceive if \"safe\" has a definition, which is currently, to my understanding, simply \"not unsafe,\" which does not make anything meaningful.</p>",
        "id": 278577409,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693451
    },
    {
        "content": "<p>Being large in scope doesn't make it vague.</p>",
        "id": 278577424,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693461
    },
    {
        "content": "<p>there are many conceivable operations that we have proven to be impossible, such as the halting problem</p>",
        "id": 278577436,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693465
    },
    {
        "content": "<p>so yes, it is vague</p>",
        "id": 278577444,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693469
    },
    {
        "content": "<p>\"Many\" doesn't mean \"vague.\"</p>",
        "id": 278577475,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693492
    },
    {
        "content": "<p>\"All of reality\" is well-defined.</p>",
        "id": 278577491,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693501
    },
    {
        "content": "<p>then the answer is \"no,\" but for reasons completely unrelated to safety and unsafety. surely that is not the sort of answer you are interested in?</p>",
        "id": 278577570,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693527
    },
    {
        "content": "<p>I would also argue that \"the halting problem\" is a concept, not an operation.</p>",
        "id": 278577589,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693534
    },
    {
        "content": "<p>the halting problem is the problem of performing an operation, i.e. checking whether a program halts</p>",
        "id": 278577630,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693556
    },
    {
        "content": "<p>In the context I presented, \"operations\" meant \"computational operations.\" Rust determines that a certain subset of computational operations are indeed safe.</p>",
        "id": 278577652,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693571
    },
    {
        "content": "<p>The halting problem is not the problem of checking whether _a_ program halts. It's the checking of if _any general program_ halts, to my understanding.</p>",
        "id": 278577706,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693609
    },
    {
        "content": "<p>that is incorrect.</p>",
        "id": 278577722,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693621
    },
    {
        "content": "<p>For many individual programs, we can guarantee their halting.</p>",
        "id": 278577726,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693625
    },
    {
        "content": "<p>I entered into this sideshoot to demonstrate how easily programmers can distract and frustrate themselves by shooting off of the topic, just to make it painfully clear why I don't allow this in a conversation.</p>",
        "id": 278577833,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577652\">said</a>:</p>\n<blockquote>\n<p>In the context I presented, \"operations\" meant \"computational operations.\" Rust determines that a certain subset of computational operations are indeed safe.</p>\n</blockquote>\n<p>yes- and it intentionally leaves many computational operations out of that subset, because it's simply not worth the effort when they can be implemented using <code>unsafe</code> but wrapped in a safe API</p>",
        "id": 278577839,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577833\">said</a>:</p>\n<blockquote>\n<p>I entered into this sideshoot to demonstrate how easily programmers can distract and frustrate themselves by shooting off of the topic, just to make it painfully clear why I don't allow this in a conversation.</p>\n</blockquote>\n<p>sigh... you are quibbling over phrasing and terminology, you have not demonstrated anything like that</p>",
        "id": 278577898,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577839\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577652\">said</a>:</p>\n<blockquote>\n<p>In the context I presented, \"operations\" meant \"computational operations.\" Rust determines that a certain subset of computational operations are indeed safe.</p>\n</blockquote>\n<p>yes- and it intentionally leaves many computational operations out of that subset, because it's simply not worth the effort when they can be implemented using <code>unsafe</code> but wrapped in a safe API</p>\n</blockquote>\n<p>\"It's simply not worth the effort,\" he says, despite this laziness leading us to where we are now, unable to deal with the question.</p>",
        "id": 278577900,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693699
    },
    {
        "content": "<p>your question has been answered several times</p>",
        "id": 278577940,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693714
    },
    {
        "content": "<p>if you are not satisfied you will need to come up with a better question</p>",
        "id": 278577974,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577898\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577833\">said</a>:</p>\n<blockquote>\n<p>I entered into this sideshoot to demonstrate how easily programmers can distract and frustrate themselves by shooting off of the topic, just to make it painfully clear why I don't allow this in a conversation.</p>\n</blockquote>\n<p>sigh... you are quibbling over phrasing and terminology, you have not demonstrated anything like that</p>\n</blockquote>\n<p>It's not quibbling over phrasing and terminology; this was about a fundamental definition. That's not a quibble, and in order to read each other, we must come to terms.</p>",
        "id": 278577979,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693732
    },
    {
        "content": "<p>I don't think it's great to try and impose what is \"allowed\" in a conversation. Even as a moderator, I do that with extreme care.</p>",
        "id": 278577991,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1649693743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577974\">said</a>:</p>\n<blockquote>\n<p>if you are not satisfied you will need to come up with a better question</p>\n</blockquote>\n<p>Why use this language? A \"better\" question? You mean a different one, but you judged this so vitriolically that you're incapable of approaching it without hostility.</p>",
        "id": 278578012,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252217\">Khionu Sybiern</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278577991\">said</a>:</p>\n<blockquote>\n<p>I don't think it's great to try and impose what is \"allowed\" in a conversation. Even as a moderator, I do that with extreme care.</p>\n</blockquote>\n<p>You believe in the power of moderation.</p>",
        "id": 278578070,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693768
    },
    {
        "content": "<p>i've already described why i believe your question is deficient</p>",
        "id": 278578094,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693782
    },
    {
        "content": "<p>Many programmers who can't answer a question think it's their personal responsibility to answer it, despite themselves being too ignorant to answer it.</p>",
        "id": 278578137,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693808
    },
    {
        "content": "<p>That isn't a personal deficiency. Don't call it that.</p>",
        "id": 278578146,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693816
    },
    {
        "content": "<p>Students aren't idiots: They're students.</p>",
        "id": 278578160,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693825
    },
    {
        "content": "<p>?????</p>",
        "id": 278578173,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693828
    },
    {
        "content": "<p>nobody is talking about personal deficiency</p>",
        "id": 278578212,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649693845
    },
    {
        "content": "<p>That is such a toxic behavior. Never do that again and you'll be much better off.</p>",
        "id": 278578229,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693849
    },
    {
        "content": "<p>A series of question marks only irritates both parties witnessing it.</p>",
        "id": 278578267,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693863
    },
    {
        "content": "<p>Ok, let's stop there, please, this isn't acceptable under our CoC.</p>",
        "id": 278578365,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1649693899
    },
    {
        "content": "<p>Come back to this later; I'm pleading. Stop this destructive cycle.</p>",
        "id": 278578369,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693902
    },
    {
        "content": "<p>What isn't acceptable? I'm not going to stop because of a user who can't emotionally regulate themselves, inserting themselves into the conversation only to get frustrated. It's entirely unfair to then insert your own self--it's the equivalent of the callout problem you incited earlier.</p>",
        "id": 278578439,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693941
    },
    {
        "content": "<p>We're already so far off topic--further demonstrating my point that you can't let someone wind themselves up when you ask high-level questions.</p>",
        "id": 278578504,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649693973
    },
    {
        "content": "<p>I'd be happy to explain in DMs in 40 minutes, after my meeting</p>",
        "id": 278578530,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1649693988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278563349\">said</a>:</p>\n<blockquote>\n<p>Why do you need FFI for syscalls? I thought syscalls were a matter of pushing the arguments onto the stack in reverse order and then issuing the \"call\" assembly instruction.</p>\n</blockquote>\n<p>The other option, is to use inline assembly, which is also unsafe.<br>\nOf course, this only works on systems that have stable Syscall ABI (such as linux). Good luck maintaining for the BSDs, windows, MacOS, etc.</p>",
        "id": 278578554,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649693999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278578554\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278563349\">said</a>:</p>\n<blockquote>\n<p>Why do you need FFI for syscalls? I thought syscalls were a matter of pushing the arguments onto the stack in reverse order and then issuing the \"call\" assembly instruction.</p>\n</blockquote>\n<p>The other option, is to use inline assembly, which is also unsafe.<br>\nOf course, this only works on systems that have stable Syscall ABI (such as linux). Good luck maintaining for the BSDs, windows, MacOS, etc.</p>\n</blockquote>\n<p>How is using inline assembly fundamentally unsafe?</p>",
        "id": 278578632,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">){</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"s\">\"mov dword ptr [rdi], 3\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rdi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278578737,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694081
    },
    {
        "content": "<p>That's using a specifically unsafe assembly instruction, right? The compiler could surely guarantee that operations, which are more than one instruction, are safe.</p>",
        "id": 278578853,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694125
    },
    {
        "content": "<p>I'm not aware of any system that provides a provably-safe assembly interface. Maybe such a machine could be constructed. Maybe someone even did that. But rust does not limit itself to targeting only such machines.</p>",
        "id": 278578886,
        "sender_full_name": "The 8472",
        "timestamp": 1649694139
    },
    {
        "content": "<p>inline assembly allows you to break the rules of the type system- you can fool the rest of the program into using a value with an invalid representation, or access memory whose lifetime has ended, etc. and the compiler is not able to prevent this in general</p>",
        "id": 278578887,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694141
    },
    {
        "content": "<p>If it can't, then we have our answer: Assembly has to run, and assembly is unsafe, so all code, no matter if it's in unsafe or safe blocks, is unsafe.</p>",
        "id": 278578888,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278578888\">said</a>:</p>\n<blockquote>\n<p>If it can't, then we have our answer: Assembly has to run, and assembly is unsafe, so all code, no matter if it's in unsafe or safe blocks, is unsafe.</p>\n</blockquote>\n<p>this, however, is not correct- assembly can be proven correct in some contexts</p>",
        "id": 278578945,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694168
    },
    {
        "content": "<p>Why can't the compiler verify that the assembly isn't fooling it? Seems like a failing of the compiler.</p>",
        "id": 278578957,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694173
    },
    {
        "content": "<p>Assembly can be proven CORRECT, not SAFE.</p>",
        "id": 278578979,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694180
    },
    {
        "content": "<p>correctness and safety have a lot of overlap</p>",
        "id": 278578998,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694196
    },
    {
        "content": "<p>for example, consider that even a fully safe program is converted to assembly by the compiler</p>",
        "id": 278579072,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694236
    },
    {
        "content": "<p>1) Analyzing assembly is <em>fun</em>. rustc treats the assembly block as an opaque operation.<br>\n2) It can be non-obvious what instructions are safe and which are unsafe.<br>\nIs <code>asm!(\"ud2\");</code> unsafe?</p>",
        "id": 278579077,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694239
    },
    {
        "content": "<p>so yes it is a \"failing\" of the compiler that it doesn't check anything outside that set, but it is an intentional and pragmatic one</p>",
        "id": 278579163,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579163\">said</a>:</p>\n<blockquote>\n<p>so yes it is a \"failing\" of the compiler that it doesn't check anything outside that set, but it is an intentional and pragmatic one</p>\n</blockquote>\n<p>Intentionally avoiding a provable safety, I presume.</p>",
        "id": 278579231,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278578998\">said</a>:</p>\n<blockquote>\n<p>correctness and safety have a lot of overlap</p>\n</blockquote>\n<p>What exact overlap?</p>",
        "id": 278579255,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694314
    },
    {
        "content": "<p>For that matter, is the following code safe:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]){</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"s\">\"syscall\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rax\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rdi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rsi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rdx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278579433,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694391
    },
    {
        "content": "<p>safety simply means that the rules of the type system are followed; correctness typically includes safety but also includes additional properties that are specific to the domain</p>",
        "id": 278579446,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579231\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579163\">said</a>:</p>\n<blockquote>\n<p>so yes it is a \"failing\" of the compiler that it doesn't check anything outside that set, but it is an intentional and pragmatic one</p>\n</blockquote>\n<p>Intentionally avoiding a provable safety, I presume.</p>\n</blockquote>\n<p>yes, intentionally choosing to let library authors convince themselves that their unsafe code maintains safety, rather than pushing proofs all the way to the edges of the system</p>",
        "id": 278579585,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579231\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579163\">said</a>:</p>\n<blockquote>\n<p>so yes it is a \"failing\" of the compiler that it doesn't check anything outside that set, but it is an intentional and pragmatic one</p>\n</blockquote>\n<p>Intentionally avoiding a provable safety, I presume.</p>\n</blockquote>\n<p>Intentionally avoiding having to be a lexicon of<br>\n1) Every single instruction in every single CPU ever,<br>\n2) Every single system call on every single version of every single operating system,<br>\n3) Every single library function on every single operating system,</p>",
        "id": 278579734,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579433\">said</a>:</p>\n<blockquote>\n<p>For that matter, is the following code safe:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]){</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">asm!</span><span class=\"p\">(</span><span class=\"s\">\"syscall\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rax\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rdi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rsi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"rdx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Seems like a question for a compiler. All ASM is target-dependent. The next question that seems interesting, which doesn't seem touched, is still \"is any assembly safe at all? Are there compositions of instructions that are actually safe?\"</p>",
        "id": 278579855,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694567
    },
    {
        "content": "<p>Currently, Rust's \"safe\" term doesn't care about that.</p>",
        "id": 278579870,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579585\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579231\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579163\">said</a>:</p>\n<blockquote>\n<p>so yes it is a \"failing\" of the compiler that it doesn't check anything outside that set, but it is an intentional and pragmatic one</p>\n</blockquote>\n<p>Intentionally avoiding a provable safety, I presume.</p>\n</blockquote>\n<p>yes, intentionally choosing to let library authors convince themselves that their unsafe code maintains safety, rather than pushing proofs all the way to the edges of the system</p>\n</blockquote>\n<p>So we have no framework of determining that safety? Seems like an open and shut question.</p>",
        "id": 278579938,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579734\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579231\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579163\">said</a>:</p>\n<blockquote>\n<p>so yes it is a \"failing\" of the compiler that it doesn't check anything outside that set, but it is an intentional and pragmatic one</p>\n</blockquote>\n<p>Intentionally avoiding a provable safety, I presume.</p>\n</blockquote>\n<p>Intentionally avoiding having to be a lexicon of<br>\n1) Every single instruction in every single CPU ever,<br>\n2) Every single system call on every single version of every single operating system,<br>\n3) Every single library function on every single operating system,</p>\n</blockquote>\n<p>Intentionally avoiding being right is a quick way to die.</p>",
        "id": 278580013,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694618
    },
    {
        "content": "<blockquote>\n<p>Why can't the compiler verify that the assembly isn't fooling it? Seems like a failing of the compiler.</p>\n</blockquote>\n<p>The compiler could try analyzing assembly. But if the goal is to have it safe that means the compiler would have to reject any program it fails to analyze. Together with the halting problem this means we need to reject lots of possible programs without knowing for sure that they're violating some requirement. This would limit the expressiveness of inline assembly.</p>\n<p>So now the argument involves a hypothetical, extremely complex compiler making hypothetical tradeoffs that nobody has decided on.<br>\nWhich makes it pretty useless to argue about because it's so far removed from reality.</p>",
        "id": 278580023,
        "sender_full_name": "The 8472",
        "timestamp": 1649694622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580023\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why can't the compiler verify that the assembly isn't fooling it? Seems like a failing of the compiler.</p>\n</blockquote>\n<p>The compiler could try analyzing assembly. But if the goal is to have it safe that means the compiler would have to reject any program it fails to analyze. Together with the halting problem this means we need to reject lots of possible programs without knowing for sure that they're violating some requirement. This would limit the expressiveness of inline assembly.</p>\n<p>So now the argument involves a hypothetical, extremely complex compiler making hypothetical tradeoffs that nobody has decided on.<br>\nWhich makes it pretty useless to argue about because it's so far removed from reality.</p>\n</blockquote>\n<p>I think you're fixating on the halting problem unnecessarily. What do you think makes it relevant?</p>",
        "id": 278580104,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694654
    },
    {
        "content": "<p>You asked a computer-science question.</p>",
        "id": 278580133,
        "sender_full_name": "The 8472",
        "timestamp": 1649694670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580013\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579734\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579231\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579163\">said</a>:</p>\n<blockquote>\n<p>so yes it is a \"failing\" of the compiler that it doesn't check anything outside that set, but it is an intentional and pragmatic one</p>\n</blockquote>\n<p>Intentionally avoiding a provable safety, I presume.</p>\n</blockquote>\n<p>Intentionally avoiding having to be a lexicon of<br>\n1) Every single instruction in every single CPU ever,<br>\n2) Every single system call on every single version of every single operating system,<br>\n3) Every single library function on every single operating system,</p>\n</blockquote>\n<p>Intentionally avoiding being right is a quick way to die.</p>\n</blockquote>\n<p>we do have a framework for determining that safety- it is simply not checked by the compiler</p>",
        "id": 278580139,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580023\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why can't the compiler verify that the assembly isn't fooling it? Seems like a failing of the compiler.</p>\n</blockquote>\n<p>The compiler could try analyzing assembly. But if the goal is to have it safe that means the compiler would have to reject any program it fails to analyze. Together with the halting problem this means we need to reject lots of possible programs without knowing for sure that they're violating some requirement. This would limit the expressiveness of inline assembly.</p>\n<p>So now the argument involves a hypothetical, extremely complex compiler making hypothetical tradeoffs that nobody has decided on.<br>\nWhich makes it pretty useless to argue about because it's so far removed from reality.</p>\n</blockquote>\n<p>Not only that, it would have to know every single thing about the current system - even things that aren't documented.</p>",
        "id": 278580168,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694685
    },
    {
        "content": "<p>It isn't removed from reality any more than an operator with infinitely long tape, or a machine with infinitely much memory.</p>",
        "id": 278580177,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580139\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579938\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278579585\">said</a>:<br>\nyes, intentionally choosing to let library authors convince themselves that their unsafe code maintains safety, rather than pushing proofs all the way to the edges of the system</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">So</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">framework</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">determining</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">safety</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Seems</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">shut</span><span class=\"w\"> </span><span class=\"n\">question</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"err\">``````</span><span class=\"w\"></span>\n<span class=\"n\">we</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">framework</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">determining</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">safety</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">simply</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"></span>\n<span class=\"err\">```````</span><span class=\"w\"></span>\n<span class=\"n\">What</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">framework</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">analyze</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">assembly</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">outputs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">claim</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">safe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>\n</blockquote>",
        "id": 278580297,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694723
    },
    {
        "content": "<p>On windows: rustc has basically no way to determine what <code>syscall</code> with <code>eax</code>=<code>1</code> does.</p>",
        "id": 278580326,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580326\">said</a>:</p>\n<blockquote>\n<p>On windows: rustc has basically no way to determine what <code>syscall</code> with <code>eax</code>=<code>1</code> does.</p>\n</blockquote>\n<p>That's a failing of Windows, of which there are countless.</p>",
        "id": 278580387,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694752
    },
    {
        "content": "<p>The framework is <code>unsafe</code>: Where the user claims to uphold safety.</p>",
        "id": 278580407,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694759
    },
    {
        "content": "<p>the framework is, for example, checkable by Miri</p>",
        "id": 278580418,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694766
    },
    {
        "content": "<p>Not even Microsoft knows what will happen, typically.</p>",
        "id": 278580422,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493449\">Saddaminatrix Hussein</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580387\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580326\">said</a>:</p>\n<blockquote>\n<p>On windows: rustc has basically no way to determine what <code>syscall</code> with <code>eax</code>=<code>1</code> does.</p>\n</blockquote>\n<p>That's a failing of Windows, of which there are countless.</p>\n</blockquote>\n<p>Not just windows.</p>",
        "id": 278580425,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694769
    },
    {
        "content": "<p>\"Not just the nazis hate the jews, you know.\"</p>",
        "id": 278580455,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694785
    },
    {
        "content": "<p>you may be interested in <a href=\"https://en.wikipedia.org/wiki/Rice%27s_theorem\">https://en.wikipedia.org/wiki/Rice%27s_theorem</a></p>",
        "id": 278580469,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694792
    },
    {
        "content": "<p>No, but the nazis sure are a notable example that we shouldn't minimize by saying otherwise.</p>",
        "id": 278580474,
        "sender_full_name": "Saddaminatrix Hussein",
        "timestamp": 1649694795
    },
    {
        "content": "<p>?!??!</p>",
        "id": 278580491,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649694803
    },
    {
        "content": "<p>um</p>",
        "id": 278580514,
        "sender_full_name": "rpjohnst",
        "timestamp": 1649694810
    },
    {
        "content": "<p>how did you get onto nazis</p>",
        "id": 278580515,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649694811
    },
    {
        "content": "<p>@_<strong>Saddaminatrix Hussein|493449</strong> <a href=\"#narrow/stream/122651-general/topic/Core.20Safety/near/278580455\">said</a>:</p>\n<blockquote>\n<p>\"Not just the nazis hate the jews, you know.\"</p>\n</blockquote>\n<p>I fail to see how that's relevant, necessary, or warrented.</p>",
        "id": 278580548,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649694827
    },
    {
        "content": "<p>The discussion seems to be getting... less sophisticated and the quoted-text-to-reply ratio is pretty bad too. This isn't fun anymore.</p>",
        "id": 278580605,
        "sender_full_name": "The 8472",
        "timestamp": 1649694847
    }
]