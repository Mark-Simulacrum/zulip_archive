[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">RefCell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;already borrowed: BorrowMutError&#39;, src/main.rs:8:27\n</code></pre></div>\n<p>Presumably the <code>drop</code> of the LHS isn't happening until the whole statement is complete?</p>",
        "id": 217043442,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605637934
    },
    {
        "content": "<p>Yeah, temporary values live for the entire duration of the statement they are created in.</p>",
        "id": 217043516,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1605637967
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/rust-lang/rust/pull/75671#issuecomment-684902197\">https://github.com/rust-lang/rust/pull/75671#issuecomment-684902197</a></p>",
        "id": 217043659,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605638016
    },
    {
        "content": "<blockquote>\n<p>Apart from lifetime extension, the temporary scope of an expression is the smallest scope that contains the expression and is for one of the following:<br>\n...<br>\n   The second operand of a lazy boolean expression.<br>\n- <a href=\"https://doc.rust-lang.org/reference/destructors.html#temporary-scopes\">reference</a></p>\n</blockquote>\n<p>I wonder why <em>second</em> is special but not first.</p>",
        "id": 217044675,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605638460
    },
    {
        "content": "<p>So this case is expanded to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">t2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217045210,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605638694
    },
    {
        "content": "<p>but why was that chosen instead of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">t1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">t2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217045257,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605638723
    },
    {
        "content": "<p>Yeah I wish drop rules were simpler</p>",
        "id": 217045377,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605638779
    },
    {
        "content": "<p>In particular I think <code>&amp;&lt;literal value&gt;</code> is too clever by half</p>",
        "id": 217045412,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605638800
    },
    {
        "content": "<p>I often wonder at some of the drop rules as well. Some of the choices definitely feel like warts in the language to me.</p>",
        "id": 217045699,
        "sender_full_name": "isHavvy",
        "timestamp": 1605638966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/what.20does.20short-circuiting.20mean.20for.20evaluation.2Fdrop.20order.3F/near/217044675\">said</a>:</p>\n<blockquote>\n<p>I wonder why <em>second</em> is special but not first.</p>\n</blockquote>\n<p>I would guess because the first always runs, but the second might not.  So any temporary from the first one makes sense to have available after the expression in a way that the second doesn't.</p>\n<p>But I agree that temporary lifetimes are a bit evil.  Especially with the <code>let A = B; C</code> vs <code>match B { A =&gt; C }</code> difference...</p>",
        "id": 217046974,
        "sender_full_name": "scottmcm",
        "timestamp": 1605639614
    },
    {
        "content": "<p>I always have to use <code>drop(g)</code> around my mutex guards because I don't trust the drop rules</p>",
        "id": 217088428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605665564
    },
    {
        "content": "<p>especially with NLL I really have no idea when drop glue runs</p>",
        "id": 217088446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605665595
    },
    {
        "content": "<p>NLL does not affect drop glue.</p>",
        "id": 217088555,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1605665744
    },
    {
        "content": "<p>Doesn't it have to? Because if you only ran drop glue at scope end a la classic borrow checking, because NLL allows some programs that are not well scoped in that way, you could end up accessing a value that has already been invalidated</p>",
        "id": 217088727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605665923
    },
    {
        "content": "<p>Drop glue counts as a use of a borrow, and drops always happen at the end of scope</p>",
        "id": 217088797,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1605666003
    },
    {
        "content": "<p>NLL doesn't change the runtime behavior of a program, it just expands the set of legal programs that compile</p>",
        "id": 217088960,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1605666196
    },
    {
        "content": "<p>Oh, I didn't realize that there was a difference between these situations:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Guard</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Guard</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"running drop glue for {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Guard</span><span class=\"p\">(</span><span class=\"s\">\"y\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Guard</span><span class=\"p\">(</span><span class=\"s\">\"z\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// error double mut</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217089029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605666261
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/57467555/155423\">Will the non-lexical lifetime borrow checker release locks prematurely?</a></p>",
        "id": 217091922,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605669293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/what.20does.20short-circuiting.20mean.20for.20evaluation.2Fdrop.20order.3F/near/217046974\">said</a>:</p>\n<blockquote>\n<p>But I agree that temporary lifetimes are a bit evil.  Especially with the <code>let A = B; C</code> vs <code>match B { A =&gt; C }</code> difference...</p>\n</blockquote>\n<p>Tbf, that's maybe the only one that is predicatable and thus kind of makes sense (I just sometime wish we had <code>let in</code> sugar for some of these things (I also wish std locks also offered callback-based APIs, since they are less error-prone and their inability to allow inner <code>.await</code>s would actually have been a feature <em>w.r.t.</em> <code>async</code> and deadlocks)).</p>\n<p>The horrendous one is <code>if let</code> and <code>while let</code> not behaving the same <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 217123802,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605699713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/what.20does.20short-circuiting.20mean.20for.20evaluation.2Fdrop.20order.3F/near/217123802\">said</a>:</p>\n<blockquote>\n<p>The horrendous one is <code>if let</code> and <code>while let</code> not behaving the same <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>\n</blockquote>\n<p>Oh? Do you have an example?</p>",
        "id": 217125577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605701016
    },
    {
        "content": "<p>My bad, I misremembered: it wasn't <code>if let</code> <em>vs.</em> <code>while let</code>, but <code>if let</code> <em>vs.</em> <code>if</code>: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9a2da82f9170a2d0520e14569060c56d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9a2da82f9170a2d0520e14569060c56d</a> (so I withdraw my <em>horrendous</em> qualification, then, since pattern-matching and expression evaluation do involve different mechanisms: I downgrade it to \"a footgunny thing that may catch some people unaware\")</p>",
        "id": 217134310,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605706373
    },
    {
        "content": "<p>Here is a completely degenerate example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1363000c4ead264020de7b9ded7f90ae\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1363000c4ead264020de7b9ded7f90ae</a>,<br>\nwhich is quite unrealistic, but I do expect people getting bitten by this when dealing with lock guards.</p>",
        "id": 217136421,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605707517
    }
]