[
    {
        "content": "<p>This came up in another thread (sic) -- I don't see any way to wait for one thread out of N to finish (except maybe spawning N more threads that call <code>join</code> on the original ones and send the results over a channel type that supports <code>select</code>).</p>",
        "id": 186829807,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580246107
    },
    {
        "content": "<p>This is not possible on Linux at least. On Windows it might be possible with WaitForMultipleObjects, but even then you're limited to 64 objects. Using <code>select</code> and channels is the only portable way.</p>",
        "id": 186838424,
        "sender_full_name": "Amanieu",
        "timestamp": 1580251744
    },
    {
        "content": "<p>I see, thanks</p>",
        "id": 186838575,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580251872
    },
    {
        "content": "<p>You can do it in application code: Add a guard in each thread, which signals a shared object (e.g. a condition variable, channel, manualresetevent, etc). Then wait on that object.</p>\n<p>If you need to be sure that the thread is really joined and not only close to being joined, then you need to pass each thread some unique ID that you can send back via this channel. Then the waiter can identify the associated <code>JoinHandle</code> and join the thread.</p>",
        "id": 186959398,
        "sender_full_name": "Matthias247",
        "timestamp": 1580367499
    }
]