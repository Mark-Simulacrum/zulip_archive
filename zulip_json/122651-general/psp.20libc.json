[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217081\">@Yuki Okushi</span> quick question on the psp libc, we screwed up by doing #[derive(Copy)] instead of #[derive(::Copy)], should we import or change it?</p>",
        "id": 204986253,
        "sender_full_name": "Paul Sajna",
        "timestamp": 1595648559
    },
    {
        "content": "<p>for enums, which don't have a macro</p>",
        "id": 204986263,
        "sender_full_name": "Paul Sajna",
        "timestamp": 1595648598
    },
    {
        "content": "<p>Use <code>impl ::Copy</code> like other platform's enum.</p>",
        "id": 204987472,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1595650989
    },
    {
        "content": "<p>kk</p>",
        "id": 204987578,
        "sender_full_name": "Paul Sajna",
        "timestamp": 1595651212
    },
    {
        "content": "<p>what about for clone?</p>",
        "id": 204989056,
        "sender_full_name": "Paul Sajna",
        "timestamp": 1595654195
    },
    {
        "content": "<p>let'd do the same way as others</p>",
        "id": 204995756,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1595667785
    },
    {
        "content": "<p>others = other platform's</p>",
        "id": 204995767,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1595667813
    },
    {
        "content": "<p>The thing is, we have way more enums than the other platforms. I don't know if 107 manual implementations of Clone makes sense.</p>",
        "id": 205017689,
        "sender_full_name": "Paul Sajna",
        "timestamp": 1595704535
    },
    {
        "content": "<p>Fun fact: deriving takes longer to build than the version that writes it out. You can probably use a macro_rules to do it, and all that.</p>\n<p>Source: winapi deliberately doesn't derive because deriving is slower to build than manually writing the impl within the macro_rules that declares each type.</p>",
        "id": 205018947,
        "sender_full_name": "Lokathor",
        "timestamp": 1595706406
    },
    {
        "content": "<p><code>#[derive(Copy, Clone)]</code> is supposed to have a shortcut that generates a trivial Clone impl</p>",
        "id": 205019080,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595706663
    },
    {
        "content": "<p>It does, but manually writing out that shortcut also works and is slightly faster to compile</p>",
        "id": 205021055,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1595710026
    },
    {
        "content": "<p>Hmm, \"slightly\"? Did you measure what exactly is faster by any chance?</p>",
        "id": 205021102,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595710087
    },
    {
        "content": "<p>I wouldn't expect derive expansion to take much time, so maybe there's some low-hanging fruits to look into here</p>",
        "id": 205021107,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595710118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217081\">@Yuki Okushi</span>  <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 205039111,
        "sender_full_name": "Paul Sajna",
        "timestamp": 1595745520
    },
    {
        "content": "<p>Would it make sense for us to modify the <code>s!</code> macro to also create the Copy/Clone impls for enums?</p>",
        "id": 205065386,
        "sender_full_name": "Glenn Hope",
        "timestamp": 1595794067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257587\">Glenn Hope</span> <a href=\"#narrow/stream/122651-general/topic/psp.20libc/near/205065386\">said</a>:</p>\n<blockquote>\n<p>Would it make sense for us to modify the <code>s!</code> macro to also create the Copy/Clone impls for enums?</p>\n</blockquote>\n<p>I think it makes sense, or we could also declare <code>e!</code>, either works for me</p>",
        "id": 205067911,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1595798457
    }
]