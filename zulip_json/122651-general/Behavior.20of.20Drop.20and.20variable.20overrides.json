[
    {
        "content": "<p>If you do something like this, is the original dropped on <code>clone</code>, or at the end of the function?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s\">\"ENV\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226077253,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613088545
    },
    {
        "content": "<p>end of the function</p>",
        "id": 226077364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613088616
    },
    {
        "content": "<p>Good to know.</p>",
        "id": 226077394,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613088636
    },
    {
        "content": "<p>If you want to drop it explicitly, you should put it in a scope like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s\">\"ENV\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226077464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613088681
    },
    {
        "content": "<p>or use <code>drop(thing)</code></p>",
        "id": 226077491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613088701
    },
    {
        "content": "<p>Does this also work with <code>if</code> blocks? I.e. can I move the clone (from line 116) to this line? <a href=\"https://github.com/http-rs/http-client/pull/59/files#diff-93473a521a8bd690c25ad5d390cc5d3f0c01542de868f3a11089faa596e80fe9R106\">https://github.com/http-rs/http-client/pull/59/files#diff-93473a521a8bd690c25ad5d390cc5d3f0c01542de868f3a11089faa596e80fe9R106</a></p>",
        "id": 226077629,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613088808
    },
    {
        "content": "<p>I suppose <code>std::mem::drop()</code> might be more explicit to future contributors.</p>",
        "id": 226077735,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613088864
    },
    {
        "content": "<p>Yes, if you use <code>.clone()</code> in the if statement, then the borrow in <code>self.http_pools.get(&amp;addr)</code> will only scope until the end of the let statement (including the if but not past it)</p>",
        "id": 226077808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613088937
    },
    {
        "content": "<p>An easy way to try these things out is to see just how long will rustc allow you to keep a borrow of the original value for.</p>",
        "id": 226077909,
        "sender_full_name": "nagisa",
        "timestamp": 1613088987
    },
    {
        "content": "<p>Actually, looking at the code in the link, it seems like the first <code>pool</code> is a reference, which means that the drop will do nothing</p>",
        "id": 226077959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613089036
    },
    {
        "content": "<p>e.g. </p>\n<div class=\"codehilite\"><pre><span></span><code>let borrow = if true {\n    let apple = ..;\n    &amp;apple\n} else {\n    ...\n}\ndrop(borrow);\n</code></pre></div>",
        "id": 226077969,
        "sender_full_name": "nagisa",
        "timestamp": 1613089045
    },
    {
        "content": "<p>That doesn't help here, because I am trying to prevent thread deadlocks when using dashmap. I'm not having lifetime issues.</p>",
        "id": 226077976,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613089049
    },
    {
        "content": "<p>Oh maybe I see what you are saying for trying it.</p>",
        "id": 226078027,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613089083
    },
    {
        "content": "<p>yeah, I mean in terms of figuring out how long does the underlying value live for or when its dropped.</p>",
        "id": 226078063,
        "sender_full_name": "nagisa",
        "timestamp": 1613089087
    },
    {
        "content": "<p>if you're finding the lifetimes of values (not references) to be tricky in some situation and need a thing to be dropped early <code>drop(x)</code> is your and the person's after you best friend.</p>",
        "id": 226078126,
        "sender_full_name": "nagisa",
        "timestamp": 1613089144
    },
    {
        "content": "<p>I think it is good practice to always either scope or <code>drop(g)</code> any locks because otherwise they can end up in surprising places</p>",
        "id": 226078148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613089167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> The reference is a dashmap smart <code>Ref</code>: it impls <code>Deref</code>, not <code>Clone</code>: <a href=\"https://docs.rs/dashmap/4.0.2/dashmap/mapref/one/struct.Ref.html\">https://docs.rs/dashmap/4.0.2/dashmap/mapref/one/struct.Ref.html</a></p>",
        "id": 226078268,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613089244
    },
    {
        "content": "<p>(I.e. it's not a <code>RefCell</code> <code>Ref</code>)</p>",
        "id": 226078286,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613089258
    },
    {
        "content": "<p>(Essentially a <code>RwLockReadGuard</code>)</p>",
        "id": 226078311,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1613089288
    }
]