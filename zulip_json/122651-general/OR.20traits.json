[
    {
        "content": "<p>Is there any experimental feature that will allow me to make a function that accepts types implementing A OR B?<br>\nsomething like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span> <span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">){}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>or even:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Clonable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cloner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Clonable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cloner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"o\">&gt;</span>::<span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Clonable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cloner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I know that there's a problem of \"which should be used for a type implementing both?\" but maybe there's a nightly rust feature that lets you somehow tell the compiler which take precedents(specialization?)</p>\n<p>(ignore Clone/Copy specifically)</p>",
        "id": 212590737,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602091092
    },
    {
        "content": "<p>ah ha! <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f826c89a9ed6e159158f9d9ec343b4b4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f826c89a9ed6e159158f9d9ec343b4b4</a></p>",
        "id": 212590818,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602091138
    },
    {
        "content": "<p>not actually sure it works:<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=686ed364a7971ef2bf345dfcb7d47f9d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=686ed364a7971ef2bf345dfcb7d47f9d</a></p>",
        "id": 212591137,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602091314
    },
    {
        "content": "<p>Use <code>default fn</code> instead of <code>default impl</code></p>",
        "id": 212592463,
        "sender_full_name": "cuviper",
        "timestamp": 1602091902
    },
    {
        "content": "<p>FWIW, I find <code>default impl</code> to lead to confusion, I wish it was named something like <code>partial impl</code>, because <code>default</code> suggests it can be overridden, and a <code>default impl</code> actually cannot. (For those wanting a <code>default impl</code>, that would be a <code>partial impl { default …, default … }</code>, which makes sense).</p>",
        "id": 212593050,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602092139
    },
    {
        "content": "<p>wow, <em>that's</em> how that syntax works</p>",
        "id": 212594887,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602093015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> The other thing that can let you do this is <a href=\"https://doc.rust-lang.org/nightly/unstable-book/language-features/marker-trait-attr.html\">https://doc.rust-lang.org/nightly/unstable-book/language-features/marker-trait-attr.html</a> to relax the overlap rule.  That works at the cost of not letting the traits have any methods, though, so it's not a replacement for specialization.</p>",
        "id": 212600640,
        "sender_full_name": "scottmcm",
        "timestamp": 1602095793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/OR.20traits/near/212592463\">said</a>:</p>\n<blockquote>\n<p>Use <code>default fn</code> instead of <code>default impl</code></p>\n</blockquote>\n<p>Nice! it works :)</p>",
        "id": 212608939,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602099502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> I like this!</p>",
        "id": 212627905,
        "sender_full_name": "tmandry",
        "timestamp": 1602110309
    },
    {
        "content": "<p>in fact if you wrote up an RFC explaining it and proposing <code>partial</code> as a keyword, I'd support it. it just seems much more self-explanatory</p>",
        "id": 212628400,
        "sender_full_name": "tmandry",
        "timestamp": 1602110642
    },
    {
        "content": "<p>(I'm not on the lang team to be clear)</p>",
        "id": 212628557,
        "sender_full_name": "tmandry",
        "timestamp": 1602110733
    },
    {
        "content": "<p>I.. think there's still time to get it in for the 2021 edition</p>",
        "id": 212628889,
        "sender_full_name": "tmandry",
        "timestamp": 1602110932
    },
    {
        "content": "<p>default fn isn't a thing on stable, right? so it's not an edition thing</p>",
        "id": 212629261,
        "sender_full_name": "simulacrum",
        "timestamp": 1602111144
    },
    {
        "content": "<p>and all of this should be contextual keyword viable, afaict</p>",
        "id": 212629267,
        "sender_full_name": "simulacrum",
        "timestamp": 1602111156
    },
    {
        "content": "<p>generally speaking though lang policy is that we need an active project group, and I don't <em>personally</em> think there's capacity for it (but not lang team myself)</p>",
        "id": 212629844,
        "sender_full_name": "simulacrum",
        "timestamp": 1602111545
    },
    {
        "content": "<p>contextual keyword may work, but since you can define impls in function bodies I'm not sure</p>",
        "id": 212629985,
        "sender_full_name": "tmandry",
        "timestamp": 1602111614
    },
    {
        "content": "<p>the edition would specifically be for reserving the keyword, if it's needed</p>",
        "id": 212630050,
        "sender_full_name": "tmandry",
        "timestamp": 1602111669
    },
    {
        "content": "<p>sure. I imagine we can punt an edition anyway :)</p>",
        "id": 212630223,
        "sender_full_name": "simulacrum",
        "timestamp": 1602111804
    },
    {
        "content": "<p>The edition <a href=\"https://github.com/nikomatsakis/rfcs/blob/edition-2021-and-beyond/text/0000-edition-2021-and-beyond.md\">RFC</a> says that reserving keywords has to be done as part of an active project group, but then later says it has to be an accepted RFC. I would think either/or (and in this case, given that we're modifying one keyword of an unstable language feature, a project group seems like overkill)</p>",
        "id": 212630317,
        "sender_full_name": "tmandry",
        "timestamp": 1602111891
    },
    {
        "content": "<p>yeah we can, I'm just thinking we'll want to stabilize some of specialization in the next 3 years</p>",
        "id": 212630345,
        "sender_full_name": "tmandry",
        "timestamp": 1602111930
    },
    {
        "content": "<p>I think pinging some parser/grammar folks and checking if we can swap this keyword out seems good</p>",
        "id": 212630503,
        "sender_full_name": "simulacrum",
        "timestamp": 1602112060
    },
    {
        "content": "<p>I wouldn't want a blanket reservation anyway, though</p>",
        "id": 212630512,
        "sender_full_name": "simulacrum",
        "timestamp": 1602112068
    },
    {
        "content": "<p>and personally I am pretty sure that we do not have problems with contextual keywords here</p>",
        "id": 212630568,
        "sender_full_name": "simulacrum",
        "timestamp": 1602112094
    },
    {
        "content": "<p>good to know. started a thread in <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> to make sure</p>",
        "id": 212630855,
        "sender_full_name": "tmandry",
        "timestamp": 1602112324
    },
    {
        "content": "<p>I don't have any objection, with my lang hat on, but I would prefer to see specialization on a path to stabilization rather than worrying about its syntax. :)</p>",
        "id": 212786942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602224368
    }
]