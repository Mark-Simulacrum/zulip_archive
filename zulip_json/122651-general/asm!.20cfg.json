[
    {
        "content": "<p>I'm trying to replace C preprocessor ifdefs with rust cfg's with not much luck. Is there a way to get something like this to work? <a href=\"https://gist.github.com/MabezDev/88e87efe100ea3987cf3c6de2757b92c#file-asm-cfg-rs-L26\">https://gist.github.com/MabezDev/88e87efe100ea3987cf3c6de2757b92c#file-asm-cfg-rs-L26</a>.</p>\n<p>The code above emits <code>removing an expression is not supported in this position</code> unfortunately. Maybe this could be relaxed, as it seems like a useful thing to have?</p>",
        "id": 255047842,
        "sender_full_name": "Scott Mabin",
        "timestamp": 1632749417
    },
    {
        "content": "<p>You will have to split the <code>asm!</code> into two or have two distinct <code>asm!</code> expressions, or use an additional macro.</p>",
        "id": 255048365,
        "sender_full_name": "nagisa",
        "timestamp": 1632749617
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/216763-project-inline-asm/topic/Conditional.20compilation\">https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm/topic/Conditional.20compilation</a></p>",
        "id": 255048412,
        "sender_full_name": "nagisa",
        "timestamp": 1632749640
    },
    {
        "content": "<p>Thanks for the link!  I used a similar technique to what you suggested in the thread for cfg'ing my global_asm!. In this case, I anticipate more than one cfg'd block of asm, and because its in a naked function I can't have more than one, hence I don't think that will work.</p>\n<p>I think my only option is a macro based approach, which will probably explode in code size given the number of options this CPU has :(</p>",
        "id": 255049803,
        "sender_full_name": "Scott Mabin",
        "timestamp": 1632750169
    },
    {
        "content": "<p>Naked functions require a single <code>asm!()</code> block <strong>after</strong> macro expansion. Before macro expansion you can have multiple cfg'd blocks.</p>",
        "id": 255050909,
        "sender_full_name": "bjorn3",
        "timestamp": 1632750616
    },
    {
        "content": "<p>i think you can still do </p>\n<div class=\"codehilite\"><pre><span></span><code>asm!(\n    &quot;&lt;block 1 here&gt;&quot;,\n    #[cfg(target_feature = &quot;loop&quot;)] { &quot;&lt;block 2 here&gt;&quot; }\n    #[cfg(not(target_feature = &quot;loop&quot;))] { &quot;&quot; },\n    ...\n)\n</code></pre></div>\n<p>but be careful, the placement of the commas there is deliberate (e.g. you need both the <code>cfg</code> and the <code>cfg(not())</code> in the same comma-delimited section</p>",
        "id": 255075990,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632759372
    },
    {
        "content": "<p>basically it will expand to the empty string if that cfg is off.</p>",
        "id": 255076029,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632759394
    }
]