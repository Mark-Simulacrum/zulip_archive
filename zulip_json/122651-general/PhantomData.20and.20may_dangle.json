[
    {
        "content": "<p>Hi, I'm trying to understand PhantomData and may_dangle. I've read the nomicon and RFCs <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md\">https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md</a> , <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\">https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md</a> , and <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md\">https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md</a> (although the RFCs kinda went over my head)</p>\n<p>Here <a href=\"https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a\">https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a</a> , pnkfelix (who worked on at least 2 of the above RFCs based on edits) says in the comment:</p>\n<p>// (However, in the absence of #[may_dangle], the compiler will constrain<br>\n// things in a manner that may indeed imply that PhantomData is unnecessary;<br>\n// pnkfelix is not 100% sure of this claim yet, though.)</p>\n<p>I've seen this sentiment by at least one other person (and my current understanding tends this way). However, that answer is relatively old, so I was wondering if anyone could comment on that claim (and if it's not true, a counterexample would be enlightening)</p>",
        "id": 252076344,
        "sender_full_name": "Raekye",
        "timestamp": 1630848006
    },
    {
        "content": "<p>Also of interest is that the second answer in the stack overflow question gives examples that (allegedly) failed to compile, but it actually all works now <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d0a2a38d988dff0ca97ecd8a4a8025d3\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d0a2a38d988dff0ca97ecd8a4a8025d3</a> (which is inconsistent with my understanding, meaning there's a flaw in my mental model)</p>\n<p>I did some more testing here <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e441813f71ce817c5ef42089ceedd3db\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e441813f71ce817c5ef42089ceedd3db</a> and it still confuses me. Of interest are the last 3 blocks - MyDropper, MyHiddenDropper, and MyHonestHiddenDropper. a, b, and c are defined in the same let statement, which to my understanding gives them all the same lifetime (even though there's still a strict drop order). When the droppers are given references to the a's, the code compiles. When the droppers are given references to the c's, the code doesn't compile. In some sense, it seems like the compiler is being smart about the drop order - a is defined before b, so a will be dropped after b, so it's fine for b to have a reference to a. But more generally, doesn't this mean that the compiler has given a a longer lifetime than b, but I thought variables defined in the same let statement have the same lifetime, which is necessary to create certain cyclic references?</p>",
        "id": 252076606,
        "sender_full_name": "Raekye",
        "timestamp": 1630848299
    },
    {
        "content": "<p>It seems that you now have to swap the order of <code>a</code> and <code>b</code> to get this effect: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cdf1998144c21a24565679d8fb1dda13\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cdf1998144c21a24565679d8fb1dda13</a></p>",
        "id": 252079359,
        "sender_full_name": "bjorn3",
        "timestamp": 1630851273
    },
    {
        "content": "<p>If I understood, your swapping the order of <code>a</code> and <code>b</code> is the same as the <code>c</code> I introduced defined after <code>b</code> (but in the same let statement). Does this mean that the compiler is reasoning about the drop order? But (without knowing anything about rustc internals) wouldn't it seem that it's actually reasoning about lifetimes, and saying that one strictly outlives the other? But aren't variables defined in the same let statement considered the same lifetime? So shouldn't the order of <code>a</code> and <code>b</code> (in your example, or <code>b</code> and <code>c</code> in mine) not matter (in terms of lifetimes)?</p>",
        "id": 252096192,
        "sender_full_name": "Raekye",
        "timestamp": 1630869719
    },
    {
        "content": "<p>Here's someone else saying that <code>PhantomData&lt;T&gt;</code> with respect to dropck is only needed if <code>#[may_dangle]</code> is used: <a href=\"https://users.rust-lang.org/t/phantomdata-and-dropck-confusion/26624/2\">https://users.rust-lang.org/t/phantomdata-and-dropck-confusion/26624/2</a> but I would like to be extra sure... funnily enough, here's a comment by Ralph Jung on <code>#[may_dangle]</code> <a href=\"https://internals.rust-lang.org/t/rust-1-20-caused-pinning-to-become-incorrect/6695/29\">https://internals.rust-lang.org/t/rust-1-20-caused-pinning-to-become-incorrect/6695/29</a></p>",
        "id": 252096385,
        "sender_full_name": "Raekye",
        "timestamp": 1630869913
    },
    {
        "content": "<p>Not an answer to your questions, but there is an excellent overview of PhantomData and dropck here: <a href=\"https://m.youtube.com/watch?v=TJOFSMpJdzg\">https://m.youtube.com/watch?v=TJOFSMpJdzg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"TJOFSMpJdzg\" href=\"https://m.youtube.com/watch?v=TJOFSMpJdzg\"><img src=\"https://uploads.zulipusercontent.net/589e35b876ad27163232055f703d4d3634eb00cd/68747470733a2f2f692e7974696d672e636f6d2f76692f544a4f46534d704a647a672f64656661756c742e6a7067\"></a></div>",
        "id": 252251846,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630990912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437904\">Raekye</span> <a href=\"#narrow/stream/122651-general/topic/PhantomData.20and.20may_dangle/near/252096385\">said</a>:</p>\n<blockquote>\n<p>Here's someone else saying that <code>PhantomData&lt;T&gt;</code> with respect to dropck is only needed if <code>#[may_dangle]</code> is used: <a href=\"https://users.rust-lang.org/t/phantomdata-and-dropck-confusion/26624/2\">https://users.rust-lang.org/t/phantomdata-and-dropck-confusion/26624/2</a> but I would like to be extra sure...</p>\n</blockquote>\n<p>As the author of that post, I still stand by that statement: the confusion about <code>PhantomData</code> being needed stems from a very old article that still lingers in the nomicon, which was written in a time were Rust was more error prone / <code>#[may_dangle]</code> was implicitly universal, I suspect. This was deemed too dangerous / error-prone, and it was made so that whenever something had an <code>impl Drop</code>, then <code>dropck</code> would require that its generic parameters not dangle when dropped. This is still the case as of today, and is what makes an \"owning <code>PhantomData</code>\" superfluous, albeit a good conversation fuel <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>.</p>\n<p>In order to keep the old behavior available, <code>#[may_dangle]</code> as thus created, but as an unstable attribute. By virtue of being <code>unstable</code>, <code>unsafe</code>, and subtle / error-prone, I'd say that <code>#[may_dangle]</code> is one of the most rare things in user libs out there. So at the end of the day, only the stdlib has to deal with it, and it does, then indeed it does need that \"owning <code>PhantomData</code>\" back.</p>",
        "id": 252283341,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1631010904
    },
    {
        "content": "<p>See <a href=\"https://discord.com/channels/273534239310479360/592856094527848449/876829789154066432\">https://discord.com/channels/273534239310479360/592856094527848449/876829789154066432</a> for a more recent discussion I had about this very topic</p>",
        "id": 252283427,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1631010959
    },
    {
        "content": "<p>I actually did watch the crust of rust video (was good), the author also says (he thinks) <code>PhantomData&lt;T&gt;</code> (in terms of dropck) is only necessary with <code>#[may_dangle]</code>, but he isn't 100% sure. I didn't bother to find the timestamp so I didn't reference it initially (still thanks for pointing it out though!)</p>",
        "id": 252375237,
        "sender_full_name": "Raekye",
        "timestamp": 1631050516
    },
    {
        "content": "<p>And wow, thanks Daniel for the response! I can't seem to open the discord link though, based on the URL is it not the same server as the one here (which I should be in) <a href=\"https://www.rust-lang.org/community\">https://www.rust-lang.org/community</a> ?</p>",
        "id": 252375375,
        "sender_full_name": "Raekye",
        "timestamp": 1631050589
    },
    {
        "content": "<p>(for me the rust server linked to from the community page starts with <code>https://discord.com/channels/442252698964721669</code></p>",
        "id": 252375440,
        "sender_full_name": "Raekye",
        "timestamp": 1631050639
    },
    {
        "content": "<p>It's probably the rust community server.</p>",
        "id": 252396065,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631066736
    },
    {
        "content": "<p><a href=\"https://discord.com/invite/rust-lang-community\">https://discord.com/invite/rust-lang-community</a></p>",
        "id": 252396073,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631066744
    }
]