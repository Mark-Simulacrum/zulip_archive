[
    {
        "content": "<p>My vector is member of outer struct.</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Foo(i32);\n\nstruct Bar {\n    list: Vec&lt;Foo&gt;,\n}\n\nimpl Foo {\n    fn action(mut self) {\n        self.0 += 1;\n    }\n}\n\nfn process_struct(bar: &amp;mut Bar) {\n    bar.list.into_iter().for_each(|item| {\n        item.action();\n    });\n}\n\nfn process_struct_one_by_one(bar: &amp;mut Bar) {\n    while let Some(item) = bar.list.pop() {\n        item.action();\n    };\n}\n</code></pre></div>\n<p>process_struct_one_by_one() works, process_struct() does not.<br>\nIt seems there is no good solution with iterators...</p>",
        "id": 270184583,
        "sender_full_name": "Uniconductive",
        "timestamp": 1643711475
    },
    {
        "content": "<p>the issue is being floated up one layer at a time</p>",
        "id": 270184629,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711500
    },
    {
        "content": "<p>to consume the vector you have an issue because it was <em>borrowed</em> from <code>bar</code></p>",
        "id": 270184660,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711516
    },
    {
        "content": "<p>which means you either need to consume <code>bar</code> or use something like <code>std::mem::take</code> to take ownership of the actual vector inside <code>bar</code></p>",
        "id": 270184754,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711547
    },
    {
        "content": "<p>remember, when you have a borrow (<code>&amp;mut</code>) you have to be able to restore a valid instance of your  type at the end, so that means you cannot <em>consume</em> anyhting (since that would destroy it)</p>",
        "id": 270184813,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711584
    },
    {
        "content": "<p>your <code>process_Struct_one_by_oen</code> is doing something different though</p>",
        "id": 270184863,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711610
    },
    {
        "content": "<p>it's <em>mutating</em> your vector by removing elements</p>",
        "id": 270184882,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711619
    },
    {
        "content": "<p>if you want to do that with an iterator you can use <code>drain()</code></p>",
        "id": 270184896,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711628
    },
    {
        "content": "<p>Ok. Now I am understand. Thanks for help :)</p>",
        "id": 270185029,
        "sender_full_name": "Uniconductive",
        "timestamp": 1643711683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> has marked this topic as resolved.</p>",
        "id": 270185087,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643711717
    },
    {
        "content": "<p>(I marked it as resolved for you)</p>",
        "id": 270185130,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643711735
    }
]