[
    {
        "content": "<p>Hi, I've been using Rust for a bit and have come to want some form of standardised <code>TryIndex</code> trait. Currently, you either need to check the bounds manually or use a <code>get</code> method that may have a different name or not even be implemented for certain types. The trait would define one function <code>try_index</code> (or <code>get</code>? This name is simpler but more confusing as it doesn't relate to the trait name), which returns an <code>Option&lt;T&gt;</code>.</p>\n<p>One of the issues with naming the trait <code>TryIndex</code> is that it implies that the relationship between <code>Index</code> and <code>TryIndex</code> is the same as between <code>From</code> and <code>TryFrom</code>. This isn't entirely true as with <code>Index</code>, the function might panic if the index is incorrect (at least with arrays and vectors, which is probably the most prominent use case for <code>Index</code> anyway). However, <code>From</code>, for most types, will not panic and guarantees that a type can safely be converted to another type. This issue is best shown by the fact that <code>impl TryFrom for T where T: From</code> works but <code>impl TryIndex for T where T: Index</code> does not work (well _technically_ it works but its not what you want). You can't simply wrap the output of the <code>Index</code> trait in an <code>Option</code> to implement <code>TryIndex</code> as the call to <code>index()</code> could still panic. To mitigate this issue, the trait could be named <code>SafeIndex</code> or something along those lines, but I'm not sure about this. </p>\n<p>This trait could also be added with some accompanying syntax. My suggestion would be <code>array[?i]</code>. It's not great, but any potential syntax is limited by a few factors. Firstly, I think that the syntax should include a question mark as that is often associated with trying something and <code>Option</code>s. Also, if <code>? = try</code>, the syntax kind of reads like \"try index i\", which makes sense. The syntax also stems from the fact that the question mark must be placed in such a location as to not be ambiguous with using the <code>Try</code> trait (i.e. <code>a[i?]</code> and <code>a[i]?</code> won't work as syntax for the <code>TryIndex</code> trait).</p>\n<p>Just to close off, I've researched a bit about propositions for a <code>TryIndex</code> trait and came across <a href=\"https://internals.rust-lang.org/t/can-epochs-change-the-definition-of-a-stdlib-trait/7691\">this</a>. I think the primary issue with that pre-RFC was that it wanted to redefine the <code>Index</code> trait instead of just adding a separate trait.</p>\n<p>My experience with Rust is fairly limited, and I have never worked on the compiler, but I do, perhaps naively, think that this would be <em>relatively</em> simple to implement compared to other RFCs if it were approved.</p>",
        "id": 252120985,
        "sender_full_name": "Klim Tsoutsman",
        "timestamp": 1630897495
    },
    {
        "content": "<p>Can you say more about why <code>.get(i)</code> isn't enough for you?  Is it the lack of a trait, or the lack of special syntax?</p>",
        "id": 252122571,
        "sender_full_name": "scottmcm",
        "timestamp": 1630899130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/pre-rfc.3A.20.60TryIndex.60.20trait/near/252122571\">said</a>:</p>\n<blockquote>\n<p>Can you say more about why <code>.get(i)</code> isn't enough for you?  Is it the lack of a trait, or the lack of special syntax?</p>\n</blockquote>\n<p>It's a bit of both. I think that standardising it would help catch unintended potential panics. In the long run, if this gets implemented, it could be added as a Clippy lint, similar to <a href=\"https://rust-lang.github.io/rust-clippy/master/#as_conversions\">as_conversions</a>, that would require you to explicitly allow it, signifying that you have checked that the <code>index()</code> call won't panic.</p>\n<p>I think the syntax would be nice to have, but I understand that it is not very readable and just adds to the complexity.</p>",
        "id": 252123029,
        "sender_full_name": "Klim Tsoutsman",
        "timestamp": 1630899696
    },
    {
        "content": "<p>FWIW, that clippy lint could exist just by convention, even without there being a trait.  It could just look for a <code>get</code>/<code>get_mut</code> method with the appropriate argument type.</p>",
        "id": 252124418,
        "sender_full_name": "scottmcm",
        "timestamp": 1630901353
    },
    {
        "content": "<p>I think the ship has sailed for this, I would have liked <code>Index</code> to return an Option from the start.</p>",
        "id": 252231222,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630969717
    },
    {
        "content": "<p>A second indexing syntax would be weird IMO.</p>",
        "id": 252231237,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630969739
    },
    {
        "content": "<p>Fair enough. I dug around in Clippy's docs some more and it seems that Clippy already <a href=\"https://rust-lang.github.io/rust-clippy/master/#indexing_slicing\">has a lint</a> for this issue.</p>",
        "id": 252241537,
        "sender_full_name": "Klim Tsoutsman",
        "timestamp": 1630980570
    }
]