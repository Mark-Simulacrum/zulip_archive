[
    {
        "content": "<p>rust semantics, scheme/lisp syntax</p>\n<p>Assuming that things ilke lifetime / generics can be made to work nicely with scheme/lisp syntax, anyone else want a rust-semantics, scheme/lisp syntax language ?</p>\n<p>In particular, I believe it will loser the barrier to entry for writing macros (both lisp's defmacro &amp; scheme's hygienic macro system seem more powerful than macro_rules! and easier to use than procedural macros)</p>\n<p>I suspect there are ways of using Rust that I am currently not using because procedural macros require lots of work.</p>",
        "id": 198519690,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1590211889
    },
    {
        "content": "<p>If you were going to go there, I would suggest just a straightforward translation to the Rust AST.</p>",
        "id": 198544460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590255091
    },
    {
        "content": "<p>\"Rust++\"</p>",
        "id": 198557145,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1590277289
    },
    {
        "content": "<p>\"(Rust())\"</p>",
        "id": 198570902,
        "sender_full_name": "RalfJ",
        "timestamp": 1590305143
    },
    {
        "content": "<p>I wonder what the straightforward translation of generics/traits to a lisp-like language is</p>",
        "id": 198571616,
        "sender_full_name": "Lokathor",
        "timestamp": 1590306502
    },
    {
        "content": "<p>we'd have to look at a typed lisp dialect for that (AFAIK most of them are untyped)</p>",
        "id": 198571734,
        "sender_full_name": "RalfJ",
        "timestamp": 1590306745
    },
    {
        "content": "<p>FX is one of my favs: <a href=\"https://apps.dtic.mil/dtic/tr/fulltext/u2/a256798.pdf\">https://apps.dtic.mil/dtic/tr/fulltext/u2/a256798.pdf</a></p>",
        "id": 198882262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590581670
    },
    {
        "content": "<p>But obviously samth’s Typed Scheme is way way way more successful</p>",
        "id": 198882280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590581697
    },
    {
        "content": "<p>Or sorry, Typed Racket</p>",
        "id": 198882299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590581711
    },
    {
        "content": "<p>At the same time, I’m with <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> : I’d “just” add an S-exp variant of the current AST. Unless you’re going to design a new language variant (with new semantics rather than merely new syntax), I don’t think there’s all that much to do to accomplish that.</p>",
        "id": 198884036,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590582904
    },
    {
        "content": "<p>You can even implement the S-exp variant syntax as a macro.</p>",
        "id": 198957294,
        "sender_full_name": "isHavvy",
        "timestamp": 1590615768
    },
    {
        "content": "<p>There is Carp</p>",
        "id": 203565373,
        "sender_full_name": "Gray Jack",
        "timestamp": 1594420852
    },
    {
        "content": "<p><a href=\"https://github.com/carp-lang/Carp\">https://github.com/carp-lang/Carp</a></p>",
        "id": 203565414,
        "sender_full_name": "Gray Jack",
        "timestamp": 1594420915
    }
]