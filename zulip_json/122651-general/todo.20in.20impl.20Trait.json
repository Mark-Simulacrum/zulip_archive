[
    {
        "content": "<p>Is it expected that something like this does not compile?:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227998377,
        "sender_full_name": "kev",
        "timestamp": 1614375464
    },
    {
        "content": "<p>that is expected</p>",
        "id": 227998751,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614375627
    },
    {
        "content": "<p>And sad to me.</p>",
        "id": 228000947,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614376517
    },
    {
        "content": "<p>I think this is the \"fallback\" described in <a href=\"https://github.com/rust-lang/rust/issues/35121\">#35121</a>.</p>",
        "id": 228013868,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614382953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/todo.20in.20impl.20Trait/near/228000947\">said</a>:</p>\n<blockquote>\n<p>And sad to me.</p>\n</blockquote>\n<p>I don't think there should be a way to forge arbitrary implementors of arbitrary types, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">lib</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">seal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">NeverImplemented</span><span class=\"w\"> </span>: <span class=\"nc\">seal</span>::<span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">ub</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span>::<span class=\"n\">core</span>::<span class=\"n\">hint</span>::<span class=\"n\">unreachable_unchecked</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">lib</span>::<span class=\"n\">NeverImplemented</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">exploit</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">helper</span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// where</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">helper</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nc\">lib</span>::<span class=\"n\">NeverImplemented</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>::<span class=\"n\">ub</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That being said, I agree that <em>most</em> traits out there are mainly \"functional\" interfaces (<em>e.g.</em>, <code>Display</code>). So a nice thing to have would be that, when <code>impl</code>ementing a trait for an empty / uninhabited type, providing an implementation for the methods not be needed (since those could always feature a <code>match self {}</code> body). This seems like a pretty sensible thing to do. And then most \"functional interfaces\" traits would have the courtesy of having been implemented for <code>!</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// etc.</span>\n</code></pre></div>",
        "id": 228021074,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614388397
    },
    {
        "content": "<p>That code seems pretty pathological...</p>",
        "id": 228023975,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614390811
    },
    {
        "content": "<p>Yeah, <code>!</code> can't automatically implement <em>all</em> traits -- <code>Default</code> being the usual example.</p>\n<p>Maybe with some limitations, though.  \"Things that are object-safe\" might be pretty close, though it's probably not strictly necessary and might not be sufficient either.</p>",
        "id": 228024206,
        "sender_full_name": "scottmcm",
        "timestamp": 1614391060
    },
    {
        "content": "<p>But isn't it quite useful? I do this (todo macro or loop) when minimizing code. What's the alternative?</p>",
        "id": 228035026,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614403791
    },
    {
        "content": "<p>One day™ <code>!</code> will stabilize and <code>impl Foo for ! {}</code> will cover many of the cases.  Dunno about the rest.</p>",
        "id": 228040543,
        "sender_full_name": "scottmcm",
        "timestamp": 1614410673
    },
    {
        "content": "<p>i'm surprised by this since i was under the impression that were cases where the compiler turns the body of all functions into <code>loop {}</code> (the everybody_loops pass/pprint option). i guess either that doesnt work here (or anymore), or its more involved than i knew.</p>",
        "id": 228041492,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614412010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> it has to explicitly skip these cases:<br>\n<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_interface/util.rs.html#702\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_interface/util.rs.html#702</a></p>",
        "id": 228042105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614412886
    }
]