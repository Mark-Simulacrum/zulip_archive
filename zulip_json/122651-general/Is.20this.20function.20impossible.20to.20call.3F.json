[
    {
        "content": "<p>playground link: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=04bb104a11cbe012e3a59f9635d37a07\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=04bb104a11cbe012e3a59f9635d37a07</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position</span>\n<span class=\"w\">    </span><span class=\"c1\">//assert_eq!(3, f::&lt;1&gt;(2));</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// error[E0282]: type annotations needed</span>\n<span class=\"w\">    </span><span class=\"c1\">// assert_eq!(3, f(2usize));</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If it is indeed impossible to call, should this be linted by rustc?</p>\n<p>I ran into this when trying to add Into&lt;T&gt; to parameters in a function with const generic arguments (Example <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=e60d14fbe18eea4e02bbe84816a1fec5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=e60d14fbe18eea4e02bbe84816a1fec5</a> ). Having to add an underscore for each parameter is a lot of noise so I tried to remove it with impl T</p>",
        "id": 266293559,
        "sender_full_name": "Nick12",
        "timestamp": 1640726431
    },
    {
        "content": "<p>I'm on mobile now, but it will be permitted in the future to call with an explicit value provided. Iirc it's implemented and unstable. The latter call I'm not sure is intended to ever succeed.</p>",
        "id": 266298356,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640730622
    },
    {
        "content": "<p>oh, that makes sense. Thanks!<br>\nI just found it a bit odd that I could define an uncallable function</p>",
        "id": 266299513,
        "sender_full_name": "Nick12",
        "timestamp": 1640731928
    },
    {
        "content": "<p>To be pedantic, there are other ways to define uncallable functions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(adt_const_params)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(never_type)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">uncallable</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_X</span>: <span class=\"o\">!&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">uncallable</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0282]: type annotations needed\n --&gt; src/main.rs:7:5\n  |\n7 |     uncallable();\n  |     ^^^^^^^^^^ cannot infer the value of const parameter `_X` declared on the function `uncallable`\n  |\nhelp: consider specifying the const argument\n  |\n7 |     uncallable::&lt;_X&gt;();\n  |     ~~~~~~~~~~~~~~~~\n</code></pre></div>\n<p>But I agree that it'd be good for functions like yours to be callable.</p>",
        "id": 266307175,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640741110
    },
    {
        "content": "<p>Is there a special object of type <code>!</code>, or is this type specifically never creatable even as far as the compiler is involved?</p>",
        "id": 266307399,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640741349
    },
    {
        "content": "<p><code>!</code> is the never type, which is supposed to be impossible to construct; in other words, if there were a special value of type <code>!</code>, it would break the language :)</p>",
        "id": 266307541,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640741509
    },
    {
        "content": "<p>It is possible to have a function return the <code>!</code> type, which signifies the function will never return. E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>are allowed because they never return.</p>",
        "id": 266307604,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640741563
    },
    {
        "content": "<p>Does the never type provide for a sort of <code>unreachable_unchecked</code>-type culling of code?</p>",
        "id": 266307827,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640741871
    },
    {
        "content": "<p>Indeed it does. Check out the LLVM for <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=41ef093bdb17b152b317bc2deef5f6f0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=41ef093bdb17b152b317bc2deef5f6f0</a></p>",
        "id": 266308207,
        "sender_full_name": "Michael Goulet",
        "timestamp": 1640742272
    },
    {
        "content": "<p>In fact, you'll find that <code>unreachable_unchecked</code> <a href=\"https://doc.rust-lang.org/nightly/std/hint/fn.unreachable_unchecked.html\">returns</a> the never type ;)</p>",
        "id": 266308994,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640742983
    },
    {
        "content": "<p>I believe the never type is actually the <em>source</em> of <code>unreachable_unchecked</code>'s optimizations, though I'm not absolutely certain.</p>",
        "id": 266309036,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640743064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/Is.20this.20function.20impossible.20to.20call.3F/near/266309036\">said</a>:</p>\n<blockquote>\n<p>I believe the never type is actually the <em>source</em> of <code>unreachable_unchecked</code>'s optimizations, though I'm not absolutely certain.</p>\n</blockquote>\n<p>Well, that also produces &lt;<a href=\"https://llvm.org/docs/LangRef.html#unreachable-instruction\">https://llvm.org/docs/LangRef.html#unreachable-instruction</a>&gt; (perhaps via &lt;<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/terminator/enum.TerminatorKind.html#variant.Unreachable\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/terminator/enum.TerminatorKind.html#variant.Unreachable</a>&gt;?) which makes the optimizations more direct than just being an uninhabited type.</p>",
        "id": 267633249,
        "sender_full_name": "scottmcm",
        "timestamp": 1641929599
    }
]