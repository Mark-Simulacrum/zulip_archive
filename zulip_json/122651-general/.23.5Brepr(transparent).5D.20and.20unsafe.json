[
    {
        "content": "<p>I'm trying to teach myself unsafe by working the nomicon and writing some unsafe code myself.<br>\nI'm wondering if the following is sound, and if it would still be sound with the <code>#[repr(transparent)]</code> removed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">StrLike</span><span class=\"p\">(</span><span class=\"kt\">str</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">StrLike</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">StrLike</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">StrLike</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">StrLike</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">StrLike</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">StrLike</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 229347932,
        "sender_full_name": "Ryan Avella",
        "timestamp": 1615227532
    },
    {
        "content": "<p>Currently no: <a href=\"https://doc.rust-lang.org/reference/type-layout.html#the-default-representation\">https://doc.rust-lang.org/reference/type-layout.html#the-default-representation</a></p>\n<p>That may change eventually: <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/structs-and-tuples.html#single-field-structs\">https://rust-lang.github.io/unsafe-code-guidelines/layout/structs-and-tuples.html#single-field-structs</a><br>\nbut the UCGs aren't normative yet.</p>",
        "id": 229353307,
        "sender_full_name": "The 8472",
        "timestamp": 1615229471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"278601\">@Ryan Avella</span> as a general philosophy, getting a guarantee for things in Rust tends to require an explicit \"request\" in the code.  That's helpful in that a change to <code>struct StrLike(str, usize);</code> will fail to compile with the <code>repr(transparent)</code>, as a quick catch on \"someone was relying on that elsewhere\".</p>",
        "id": 229368370,
        "sender_full_name": "scottmcm",
        "timestamp": 1615235353
    },
    {
        "content": "<p>An interesting question here is if <code>#[repr(C)]</code> suffices; AFAIK it does, even though a <code>#[repr(C)]</code> struct with a DST field does not make much sense <em>w.r.t.</em> \"C\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 229592475,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615343623
    },
    {
        "content": "<p>wait is the above code sound <em>only with repr(transparent)</em> or is it unsound all the time?</p>",
        "id": 229596610,
        "sender_full_name": "Lokathor",
        "timestamp": 1615346915
    },
    {
        "content": "<p>I think they are safe <em>currently</em>  both with <code>#[repr(transparent)]</code> and without <code>#[repr(transparent)]</code>: <a href=\"https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library/std/src/sys_common/os_str_bytes.rs#L22-L27\">https://github.com/rust-lang/rust/blob/861872bc453bde79b83ff99d443d035225f10e87/library/std/src/sys_common/os_str_bytes.rs#L22-L27</a><br>\nBut as mentioned <a href=\"#narrow/stream/122651-general/topic/.23.5Brepr%28transparent%29.5D.20and.20unsafe/near/229353307\">above</a>, without <code>#[repr(transparent)]</code>, it's <strong>not guaranteed</strong> to be safe, even it's safe currently, and I believe that is <strong>discouraged</strong> without <strong><code>#[repr(transparent)]</code></strong>.</p>",
        "id": 229612455,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615359987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> C does have flexible array members, but I don't know if this cleanly maps onto Rust's DST's even with <code>#[repr(C)]</code></p>",
        "id": 229770435,
        "sender_full_name": "Ryan Avella",
        "timestamp": 1615421371
    },
    {
        "content": "<p>I think a clean mapping isn't necessary. In repr(C) the first field is at offset 0, regardless of the size of the field. That should be sufficient.</p>",
        "id": 229781957,
        "sender_full_name": "Lokathor",
        "timestamp": 1615429118
    }
]