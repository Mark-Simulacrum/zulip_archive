[
    {
        "content": "<p>Is it possible to make long jumps inside asm! macro?<br>\nI tried</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"jmp 0x0008:{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sym</span><span class=\"w\"> </span><span class=\"n\">long_jmp_target</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but it does not work, instead i get this error</p>\n<div class=\"codehilite\"><pre><span></span><code>error: unexpected token in argument list\n   --&gt; src/main.rs:172:10\n    |\n172 |         &quot;jmp 0x0008:{}&quot;,\n    |          ^\n    |\nnote: instantiated into assembly here\n   --&gt; &lt;inline asm&gt;:2:12\n    |\n2   |     jmp 0x0008:_ZN10goodloader9long_mode17ha326a86a919e71f9E\n    |               ^\n</code></pre></div>",
        "id": 215358586,
        "sender_full_name": "Soveu",
        "timestamp": 1604341595
    },
    {
        "content": "<p>(i686 target)</p>",
        "id": 215360644,
        "sender_full_name": "Soveu",
        "timestamp": 1604342662
    },
    {
        "content": "<p>i can use segment selectors, but in order to change cs selector i need to do a jmp</p>",
        "id": 215361860,
        "sender_full_name": "Soveu",
        "timestamp": 1604343258
    },
    {
        "content": "<p>i fixed it by <code>ljmp 0x0008, offset {}</code></p>",
        "id": 215378141,
        "sender_full_name": "Soveu",
        "timestamp": 1604350900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328907\">@Soveu</span> Are you building for x86-64 or i686?</p>",
        "id": 215384679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604354156
    },
    {
        "content": "<p>as i said, its i686</p>",
        "id": 215483513,
        "sender_full_name": "Soveu",
        "timestamp": 1604423678
    },
    {
        "content": "<p>(didn't see that part of the message, sorry)</p>",
        "id": 215545885,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604471812
    },
    {
        "content": "<p>This seems like a bug in LLVM's assembly parser.</p>",
        "id": 215545898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604471840
    },
    {
        "content": "<p>Using ljmp is one workaround, directly encoding the instruction as bytes is another.</p>",
        "id": 215545909,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604471878
    },
    {
        "content": "<p>But LLVM <em>should</em> handle this in Intel syntax mode.</p>",
        "id": 215545956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604471902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/long.20jump.20inside.20asm!.20macro/near/215545909\">said</a>:</p>\n<blockquote>\n<p>Using ljmp is one workaround, directly encoding the instruction as bytes is another.</p>\n</blockquote>\n<p><code>db</code> doesn't work inside asm! macro<br>\ninstead i did</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"push bx\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"push eax\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"retf\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"bx\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"s\">\"eax\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">jump</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">nomem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">noreturn</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215571077,
        "sender_full_name": "Soveu",
        "timestamp": 1604491138
    },
    {
        "content": "<p>still, i can't force <code>push</code> to be a push with 16bit immediate, but maybe it will work with <code>pushw</code> on AT&amp;T syntax</p>",
        "id": 215571190,
        "sender_full_name": "Soveu",
        "timestamp": 1604491214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328907\">@Soveu</span> You can use <code>.byte</code>.</p>",
        "id": 215620950,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604513826
    },
    {
        "content": "<p><code>push .word 0x8</code>?</p>",
        "id": 215622495,
        "sender_full_name": "Soveu",
        "timestamp": 1604514665
    },
    {
        "content": "<p>what is the syntax that asm macro uses?<br>\ni know basic yasm intel syntax, this is pretty similar, but not quite</p>",
        "id": 215622840,
        "sender_full_name": "Soveu",
        "timestamp": 1604514829
    },
    {
        "content": "<p><code>asm!(\".byte 0x12\", \".byte 0x34\", ...)</code> would emit the bytes 0x12 and then 0x34 into the instruction stream.</p>",
        "id": 215627901,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604517156
    },
    {
        "content": "<p>So if you want to encode an instruction or instruction format that LLVM doesn't understand, you can do it that way.</p>",
        "id": 215627939,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604517176
    },
    {
        "content": "<p>You can't substitute it for one of the operands of an instruction; it's a separate line that just emits data.</p>",
        "id": 215628005,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604517205
    },
    {
        "content": "<p>oh, that way, thanks</p>",
        "id": 215628414,
        "sender_full_name": "Soveu",
        "timestamp": 1604517408
    },
    {
        "content": "<p>the <code>att_syntax</code> works just fine for this one example</p>",
        "id": 215629426,
        "sender_full_name": "Soveu",
        "timestamp": 1604517918
    },
    {
        "content": "<p>someone suggested on discord that <code>push word ptr 0x8</code> in intel syntax is <code>pushw $8</code> in att <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 215630427,
        "sender_full_name": "Soveu",
        "timestamp": 1604518400
    }
]