[
    {
        "content": "<p>Is there a way to fully unwrap results ?e.g. if I build a <code>Result&lt;Result&lt;Result&lt;Result&lt;</code> in generic code, is there a macro or crate that allows <code>?</code> to unwrap them all at once returning the first error ?</p>",
        "id": 182674865,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575562404
    },
    {
        "content": "<p>afaik, nothing existing</p>",
        "id": 182674976,
        "sender_full_name": "simulacrum",
        "timestamp": 1575562464
    },
    {
        "content": "<p>I think it would be plausibly not too hard to implement, though not sure -- seems like either not too hard or pretty much impossible :)</p>",
        "id": 182675001,
        "sender_full_name": "simulacrum",
        "timestamp": 1575562486
    },
    {
        "content": "<p>I don't think <code>?</code> would work, because it can only return one error type, right ?</p>",
        "id": 182675442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575562788
    },
    {
        "content": "<p>We would need to construct an enum of all error types in the chain, and return that as an error, to be able to use <code>?</code>.</p>",
        "id": 182675523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575562815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> do you want <code>Î¼ : T (T a) -&gt; T a</code> ?</p>",
        "id": 182675580,
        "sender_full_name": "centril",
        "timestamp": 1575562860
    },
    {
        "content": "<p>these \"flatten maximally\" are probably not doable without specialization</p>",
        "id": 182675713,
        "sender_full_name": "centril",
        "timestamp": 1575562942
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">....</span>:\n    <span class=\"nc\">x</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182675849,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575563040
    },
    {
        "content": "<p>maybe you can use frunk for \"structural coproducs\"</p>",
        "id": 182676022,
        "sender_full_name": "centril",
        "timestamp": 1575563117
    },
    {
        "content": "<p>to achieve <code>A | B | C</code></p>",
        "id": 182676034,
        "sender_full_name": "centril",
        "timestamp": 1575563126
    },
    {
        "content": "<p>thanks, that solves half of the problem at least</p>",
        "id": 182676166,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575563207
    },
    {
        "content": "<p>I can use specialization to recurse through the <code>Result</code>s as well</p>",
        "id": 182676226,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575563251
    },
    {
        "content": "<p>and use that coproduct for the error type</p>",
        "id": 182676258,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575563274
    },
    {
        "content": "<p>but i don't think I can compute the type of the coproduct easily, I'd need to manually type it in</p>",
        "id": 182676335,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575563308
    },
    {
        "content": "<p>have a look at <a href=\"https://docs.rs/frunk/0.3.0/frunk/coproduct/index.html\" target=\"_blank\" title=\"https://docs.rs/frunk/0.3.0/frunk/coproduct/index.html\">https://docs.rs/frunk/0.3.0/frunk/coproduct/index.html</a></p>",
        "id": 182676815,
        "sender_full_name": "centril",
        "timestamp": 1575563565
    },
    {
        "content": "<p>yes, that's what I checked out</p>",
        "id": 182676967,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575563657
    },
    {
        "content": "<p>Maybe if I get all my error types to implement a particular trait, I can use that to merge them.</p>",
        "id": 182676995,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575563679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> You could use <code>?</code> as long as your return error type is something that impls <code>From&lt;A&gt;</code>, <code>From&lt;B&gt;</code>, and <code>From&lt;C&gt;</code>.</p>",
        "id": 182690032,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1575571726
    },
    {
        "content": "<p>Wouldn't I need to use <code>???</code> ?</p>",
        "id": 182690102,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575571779
    },
    {
        "content": "<p>Yes, that would be the compromise.</p>",
        "id": 182690122,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1575571790
    },
    {
        "content": "<p>Personally I've started to grow on using <code>snafu</code> for everything, which lets you express <code>???</code> with more context like the following</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">error</span>::<span class=\"n\">Http</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">error</span>::<span class=\"n\">Database</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">error</span>::<span class=\"n\">InvalidUserData</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182690402,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1575571936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  <a href=\"https://stackoverflow.com/questions/52453180/how-do-i-unwrap-an-arbitrary-number-of-nested-option-types\" target=\"_blank\" title=\"https://stackoverflow.com/questions/52453180/how-do-i-unwrap-an-arbitrary-number-of-nested-option-types\">https://stackoverflow.com/questions/52453180/how-do-i-unwrap-an-arbitrary-number-of-nested-option-types</a></p>",
        "id": 182724139,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1575599153
    },
    {
        "content": "<p>Should be able to apply either answer to <code>Result</code></p>",
        "id": 182724181,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1575599164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Wouldn't you have to have <code>map_err</code> to use <code>and_then</code> to flatten it to a single type?</p>",
        "id": 182739215,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1575621213
    },
    {
        "content": "<p>Mmm, probably.</p>",
        "id": 182766262,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1575643246
    }
]