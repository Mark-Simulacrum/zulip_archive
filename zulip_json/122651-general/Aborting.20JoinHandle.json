[
    {
        "content": "<p>Hi. I stuck with strange behavior of future canceling:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hh</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tokio</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tokio</span>::<span class=\"n\">time</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"loop finished\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hh</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"sleep(5)\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tokio</span>::<span class=\"n\">time</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"abort\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"n\">abort</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"abort done\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"sleep(10)\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tokio</span>::<span class=\"n\">time</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"sleep(10) finished\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>output:</p>\n<blockquote>\n<p>sleep(5)<br>\n1<br>\n2<br>\n3<br>\n4<br>\nabort<br>\nabort done<br>\nsleep(10)<br>\n5<br>\n6<br>\n7<br>\n8<br>\n9<br>\n10<br>\nloop finished<br>\nsleep(10) finished</p>\n</blockquote>\n<p>but must be:</p>\n<blockquote>\n<p>sleep(5)<br>\n1<br>\n2<br>\n3<br>\n4<br>\nabort<br>\nabort done<br>\nsleep(10)<br>\nsleep(10) finished</p>\n</blockquote>\n<p>Is this a bug in tokio runtime or I miss something?</p>",
        "id": 267882424,
        "sender_full_name": "Uniconductive",
        "timestamp": 1642086808
    },
    {
        "content": "<p>The task created by the inner <code>tokio::spawn</code> isn't canceled by <code>h.abort()</code>. You would need <code>hh.abort()</code> for that.</p>",
        "id": 267888291,
        "sender_full_name": "bjorn3",
        "timestamp": 1642089327
    },
    {
        "content": "<p>Instead of <code>hh.await</code>, try doing smth along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">pin_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">hh</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">hh</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">scopeguard</span>::<span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">hh</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">hh</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">hh</span><span class=\"p\">.</span><span class=\"n\">abort</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"n\">hh</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this will .ake it so when the outer task (<code>h</code>) is dropped (because aborted or run to completion), it will <code>.abort()</code> the inner task (<code>hh</code>), effectively interrupting it should it not have completed.</p>\n<p>Feel free to search about \"async cancellation rust\" blog posts for more info about this.</p>",
        "id": 267908920,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642097758
    }
]