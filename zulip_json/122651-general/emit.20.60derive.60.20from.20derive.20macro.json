[
    {
        "content": "<p>Is there any way to emit a <code>derive</code> from a derive macro? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Macro1)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>turns into</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Macro2)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which then turns into the result.</p>",
        "id": 266872241,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641334692
    },
    {
        "content": "<p>To avoid the X/Y problem, my reason for wanting to do this is so that <code>Macro1</code> can emit an <code>#[attribute(source = include_str!(\"some_file.txt\"))]</code> that will be expanded (I hope) as an argument for <code>Macro2</code>.</p>\n<p>And my ultimate reason for doing <em>that</em> is so that Spans exist for the included file for better error reporting.</p>",
        "id": 266872389,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641334796
    },
    {
        "content": "<p>In context: <a href=\"https://github.com/rust-lang/rust/pull/92526#issuecomment-1005174013\">https://github.com/rust-lang/rust/pull/92526#issuecomment-1005174013</a></p>",
        "id": 266872449,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641334816
    },
    {
        "content": "<p>Feel free to suggest alternative, less hacky ways of accomplishing this.</p>",
        "id": 266872507,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641334861
    },
    {
        "content": "<p>I tried a simple</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[proc_macro_derive(Template)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">derive_template</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">proc_macro</span>::<span class=\"n\">quote</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[derive(::askama::Template__Inner)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$input</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that causes these errors:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0428</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">HelloTemplate</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">multiple</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">HelloTemplate</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">HelloTemplate</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">redefined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">HelloTemplate</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"n\">HelloTemplate</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">once</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">namespace</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">template</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4</span>:<span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">#[template(path = </span><span class=\"s\">\"hello.html\"</span><span class=\"cp\">)]</span><span class=\"w\"> </span><span class=\"c1\">// using the template in this path, relative</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"o\">^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0428</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266872686,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641334988
    },
    {
        "content": "<p><code>cargo expand</code> does show that the second macro's code is generated:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(prelude_import)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[prelude_import]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">prelude</span>::<span class=\"n\">rust_2021</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[macro_use]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">askama</span>::<span class=\"n\">Template</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[template(path = </span><span class=\"s\">\"hello.html\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">HelloTemplate</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[template(path = </span><span class=\"s\">\"hello.html\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">HelloTemplate</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>::<span class=\"n\">askama</span>::<span class=\"n\">Template</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">HelloTemplate</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">render_into</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writer</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">impl</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; ::<span class=\"n\">askama</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">b\"Hello, {{ name }}!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"n\">write_fmt</span><span class=\"p\">(</span>::<span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Arguments</span>::<span class=\"n\">new_v1</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"Hello, \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"!\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;&amp;</span>::<span class=\"n\">askama</span>::<span class=\"n\">MarkupDisplay</span>::<span class=\"n\">new_unsafe</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span>::<span class=\"n\">askama</span>::<span class=\"n\">Html</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">),)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_args</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span>::<span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">ArgumentV1</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_args</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span>::<span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span>::<span class=\"n\">fmt</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">)],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">EXTENSION</span>: ::<span class=\"n\">std</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">primitive</span>::<span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"html\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE_HINT</span>: ::<span class=\"n\">std</span>::<span class=\"n\">primitive</span>::<span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">HelloTemplate</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; ::<span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span>::<span class=\"n\">askama</span>::<span class=\"n\">Template</span>::<span class=\"n\">render_into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HelloTemplate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"world\"</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">render</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">left_val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">right_val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">left_val</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">right_val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">AssertKind</span>::<span class=\"nb\">Eq</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span>::<span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">assert_failed</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">&amp;*</span><span class=\"n\">left_val</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">&amp;*</span><span class=\"n\">right_val</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span>::<span class=\"n\">core</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span>::<span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266872850,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641335062
    },
    {
        "content": "<p>But the struct is duplicated for some reason.</p>",
        "id": 266872868,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641335074
    },
    {
        "content": "<p>The output of a <code>derive</code> macro always gets parsed as a stream of <em>new</em> items</p>",
        "id": 266872979,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641335154
    },
    {
        "content": "<p>you can't modify the original target in any way (which includes adding a new macro invocation applied to the original target)</p>",
        "id": 266873033,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641335170
    },
    {
        "content": "<p>Could <code>Macro1</code> be an attribute macro instead?</p>",
        "id": 266873067,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641335194
    },
    {
        "content": "<p>which then expands to whatever derives are needed?</p>",
        "id": 266873074,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641335203
    },
    {
        "content": "<p>I see...</p>",
        "id": 266873901,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641335742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/emit.20.60derive.60.20from.20derive.20macro/near/266873067\">said</a>:</p>\n<blockquote>\n<p>Could <code>Macro1</code> be an attribute macro instead?</p>\n</blockquote>\n<p>The issue is that that would be a breaking change. It might be possible, but I'd rather avoid having to make API changes.</p>",
        "id": 266873965,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641335772
    },
    {
        "content": "<p>I suppose maybe <code>#[template]</code> could be made a freestanding attribute macro in addition to a <code>derive</code> attribute, and it would be responsible for replacing itself with something?</p>",
        "id": 266874167,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641335918
    },
    {
        "content": "<p>In other words, this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Template)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[template(path = </span><span class=\"s\">\"index.html\"</span><span class=\"cp\">, ...other arguments...)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would be turned into this by <code>#[template]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Template)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[template(source = </span><span class=\"s\">\"index.html\"</span><span class=\"cp\">, ...other arguments...)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which would then be processed by the <code>Template</code> derive. Does that seem feasible?</p>",
        "id": 266874333,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641336007
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span></p>",
        "id": 266874373,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641336035
    },
    {
        "content": "<p>You need a proc-macro to add new derives. That being said, there could be a language feature for your use case: being able to force-call a <code>derive</code> as a proc-macro attribute nonetheless. Say, through a <code>derive_only</code> compiler-builtin helper:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive_only(Foo)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would act a <code>#[Foo] struct Bar …</code>, should that be allowed: it would result in calling <code>Foo</code> with the definition of <code>struct Bar …</code> <em>etc.</em>, which, as any derive, will assume the existence of such a definition, <strong>but it wouldn't (re)emit</strong> that definition, avoiding the repeated defs errors</p>",
        "id": 266874395,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641336052
    },
    {
        "content": "<p>Hmm, are you saying this is a language feature that could be added or that exists?</p>",
        "id": 266874439,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641336093
    },
    {
        "content": "<p>That could be added</p>",
        "id": 266874454,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641336113
    },
    {
        "content": "<p>Really, I feel like the most helpful (and cleanest) language feature that could be added would be for proc macros to be able to load other files into the SourceMap. Is there any reason that shouldn't be done (e.g., problems it could cause)?</p>",
        "id": 266874521,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641336143
    },
    {
        "content": "<p>That would avoid this whole double-macro dance.</p>",
        "id": 266874538,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641336155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/emit.20.60derive.60.20from.20derive.20macro/near/266874333\">said</a>:</p>\n<blockquote>\n<p>Does that seem feasible?</p>\n</blockquote>\n<p>Yes, if you can go for that API then for all means do <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 266874544,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641336161
    },
    {
        "content": "<p>Ok, I'll try it :)</p>",
        "id": 266874560,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641336175
    },
    {
        "content": "<p>(if it happens too many times, you might hit macro recursion limits, that's the only caveat. I think it's around 128 by default?)</p>",
        "id": 266874614,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641336217
    },
    {
        "content": "<p>Unless I introduce a bug, it should only happen once. No more recursion necessary :)</p>",
        "id": 266874778,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641336310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/emit.20.60derive.60.20from.20derive.20macro/near/266874521\">said</a>:</p>\n<blockquote>\n<p>Really, I feel like the most helpful (and cleanest) language feature that could be added would be for proc macros to be able to load other files into the SourceMap. Is there any reason that shouldn't be done (e.g., problems it could cause)?</p>\n</blockquote>\n<p>I've opened a feature-request for this: <a href=\"https://github.com/rust-lang/rust/issues/92565\">#92565</a></p>",
        "id": 266878760,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641338966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/emit.20.60derive.60.20from.20derive.20macro/near/266874333\">said</a>:</p>\n<blockquote>\n<p>In other words, this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Template)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[template(path = </span><span class=\"s\">\"index.html\"</span><span class=\"cp\">, ...other arguments...)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would be turned into this by <code>#[template]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Template)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[template(source = </span><span class=\"s\">\"index.html\"</span><span class=\"cp\">, ...other arguments...)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which would then be processed by the <code>Template</code> derive. Does that seem feasible?</p>\n</blockquote>\n<p>Hmm, this doesn't seem to be possible. rustc appears to expand <code>Template</code> first and then ignore <code>#[template]</code>.</p>",
        "id": 266879298,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641339345
    },
    {
        "content": "<p>Is there any way to expand macros in a piece of AST from inside a proc macro?</p>",
        "id": 266879669,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641339604
    },
    {
        "content": "<p>Ah sorry I misread the stuff: I interpreted <code>template</code> as a proc-macro, not as a helper for the derive. That being said, if the derive were made not to have a helper, and if you were to feature that proc-macro (technically a breaking change if they didn't have it in scope, but a rather small one if you were showcasing a prelude pattern) then it should work. But as a derive helper we'd be back to the aforementioned limitations of a derive</p>",
        "id": 266926966,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641384345
    },
    {
        "content": "<p>What do you mean by \"feature that proc-macro\"?</p>",
        "id": 266984142,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641413175
    },
    {
        "content": "<p>As you say, currently, <code>Template</code> is a derive macro, and <code>#[template]</code> is a helper. I tried changing <code>#[template]</code> to be its own attribute macro, but then it requires an import. Also, I'm not sure how to guarantee that <code>#[template]</code> runs first. I guess maybe a better approach would be to get rid of <code>Template</code> altogether and just have <code>#[template]</code>?</p>",
        "id": 266984356,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641413294
    },
    {
        "content": "<p>Yeah at that point having <code>Template</code> around seems vestigial.</p>",
        "id": 266985821,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641414015
    },
    {
        "content": "<p>(FWIW, I believe a proc-macro <code>#[template]</code> (which, yes, would require an import or a fully qualified path) written after a derive would either error or Just Work (run before the derives), but I don't think it could run afterwards)</p>",
        "id": 266986026,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641414128
    },
    {
        "content": "<p>Ok, I tried making <code>#[template]</code> its own thing, and I got it working—but not quite. I got it to emit this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\"> </span><span class=\"p\">[</span>:: <span class=\"nc\">askama</span><span class=\"w\"> </span>:: <span class=\"nc\">__template_private</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">include_str</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"hello.html\"</span><span class=\"p\">))]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">HelloTemplate</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266989786,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416127
    },
    {
        "content": "<p>But for some reason the <code>include_str!</code> is not expanded before being passed to <code>__template_private</code>.</p>",
        "id": 266989829,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416156
    },
    {
        "content": "<p>How do I force eager-expansion here?</p>",
        "id": 266989840,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416161
    },
    {
        "content": "<p>I don't think we currently support any form of eager expansion</p>",
        "id": 266990016,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416259
    },
    {
        "content": "<p>Macro are expanded in inert attributes (e.g. <code>#[doc = include_str!(...)]</code>) but I don't think any macros can observe the result of that expansion</p>",
        "id": 266990134,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416318
    },
    {
        "content": "<p>Hmm, so stuff like <code>#[doc = include_str!(...)]</code> doesn't work for user-defined macros?</p>",
        "id": 266990550,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416506
    },
    {
        "content": "<p>Dang, I guess this workaround won't work then.</p>",
        "id": 266990724,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416592
    },
    {
        "content": "<p>I think it does</p>",
        "id": 266990838,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416648
    },
    {
        "content": "<p>I mean, using doc with user-defined macros</p>",
        "id": 266990859,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416661
    },
    {
        "content": "<p>I meant more that I want to use <code>include_str!</code> with a user-defined attribute macro</p>",
        "id": 266990905,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416693
    },
    {
        "content": "<p>But I don't think an outer macro will be able to see the result of that expansion - it will see the literal tokens <code>#[doc = some_macro!()]</code></p>",
        "id": 266990916,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416701
    },
    {
        "content": "<p>I don't want to use <code>doc</code> at all; I was just using that as an example of how I wanted my attribute to behave</p>",
        "id": 266991070,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416763
    },
    {
        "content": "<p>I.e., I want to generate <code>#[my_attr(source = include_str!(...))]</code> and have the string expanded before being passed to my macro</p>",
        "id": 266991108,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416783
    },
    {
        "content": "<p>And the ultimate reason for this is to get spans for the contents of the external file</p>",
        "id": 266991140,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416803
    },
    {
        "content": "<p>I think built-in inert attributes are handles specially when you use the syntax <code>#[builtin_attr = some_macro!()]</code></p>",
        "id": 266991258,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416878
    },
    {
        "content": "<p>But nothing else gets that treatment</p>",
        "id": 266991320,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416888
    },
    {
        "content": "<p>Let me see if I can find the docs</p>",
        "id": 266991330,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416894
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83366\">https://github.com/rust-lang/rust/pull/83366</a></p>",
        "id": 266991416,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641416946
    },
    {
        "content": "<p>I believe there was a PR for a limited kind of eager expansion in proc macros</p>",
        "id": 266991613,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641417049
    },
    {
        "content": "<p>I mean, this whole eager-expansion thing I was hoping for as a workaround is a hack. I'd much rather have something like <a href=\"https://github.com/rust-lang/rust/issues/92565\">#92565</a> or <a href=\"https://github.com/rust-lang/rfcs/issues/3200\">RFC#3200</a>, which would be simpler to implement in Askama and cleaner.</p>",
        "id": 266991649,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641417070
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/87264\">https://github.com/rust-lang/rust/pull/87264</a></p>",
        "id": 266991660,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641417074
    },
    {
        "content": "<p>Oh...</p>",
        "id": 266991699,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641417108
    },
    {
        "content": "<p>Hmm, I guess I could try that</p>",
        "id": 266991763,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641417124
    },
    {
        "content": "<p>That worked!</p>",
        "id": 266992529,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641417578
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>!</p>",
        "id": 266992550,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641417588
    },
    {
        "content": "<p>How do I get the contents of a <code>proc_macro::Literal</code> that's a string literal? I suppose I could just do <code>lit.to_string()</code> and then parse it using syn, but I was wondering if there's a less hacky way.</p>",
        "id": 266993681,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641418222
    },
    {
        "content": "<p>Hmm, the Span returned from <code>lit.span()</code> after doing <code>expand_expr</code> is still for the macro call-site, not the file itself...</p>",
        "id": 266996357,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641419487
    },
    {
        "content": "<p>Is that a bug?</p>",
        "id": 266996367,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641419492
    },
    {
        "content": "<p>The context is different (call site is <code>#4</code> while lit is <code>#6</code>), but the source range is the same</p>",
        "id": 266996452,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641419523
    },
    {
        "content": "<p>E.g., reporting an error at the literal's span shows this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">hello</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">#[derive(Template)]</span><span class=\"w\"> </span><span class=\"c1\">// this will generate the code...</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">include_str</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266996509,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641419565
    },
    {
        "content": "<p>Calling <code>.source()</code> yields the same result, except the \"this error originates in the macro <code>include_str</code>\" note is gone</p>",
        "id": 266996736,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641419693
    },
    {
        "content": "<p>AFAIK <code>include_str!()</code> uses the macro location as span, not the included file.</p>",
        "id": 266996765,
        "sender_full_name": "bjorn3",
        "timestamp": 1641419707
    },
    {
        "content": "<p>Really? That's strange... is there a way to get the included file's span?</p>",
        "id": 266996828,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641419743
    },
    {
        "content": "<p>Not that I know of.</p>",
        "id": 266997256,
        "sender_full_name": "bjorn3",
        "timestamp": 1641419978
    },
    {
        "content": "<p>Ugh... this all feels way harder than it should</p>",
        "id": 266997383,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641420015
    },
    {
        "content": "<p>Maybe I could implement <a href=\"https://github.com/rust-lang/rust/issues/92565\">#92565</a> as a nightly-only feature? Would that be acceptable?</p>",
        "id": 266997559,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641420103
    },
    {
        "content": "<p>From a compiler team perspective, I think it would be great to have some form of that on nightly for experimentation. However, you'll also want to talk to petrochenkov, as well as t-libs, about the policy around landing things as unstable features without an accepted RFC/MCP</p>",
        "id": 266999108,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641420810
    },
    {
        "content": "<p>As this is a relatively significant expansion of the abilities of proc-macros</p>",
        "id": 266999193,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641420844
    },
    {
        "content": "<p>At some point, we'll probably also want to consider the interactions with sandboxing (e.g <a href=\"https://github.com/rust-lang/compiler-team/issues/475\">https://github.com/rust-lang/compiler-team/issues/475</a>). What paths should proc-macros be able to open?</p>",
        "id": 266999353,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641420947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/emit.20.60derive.60.20from.20derive.20macro/near/266999193\">said</a>:</p>\n<blockquote>\n<p>As this is a relatively significant expansion of the abilities of proc-macros</p>\n</blockquote>\n<p>Though proc macros can already load external files; all this does is let them get spans for the files so they can report better errors.</p>",
        "id": 267000697,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641421618
    },
    {
        "content": "<p>Like, today you can just do <code>fs::read_to_string</code> (which is what Askama does). This would just be that + a span</p>",
        "id": 267000736,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641421646
    },
    {
        "content": "<p>That's true. I've been mentally grouping that under 'proc macros can currently have arbitrary side effects', though those side effects don't (generally) interact with the current compilation session</p>",
        "id": 267000879,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641421718
    },
    {
        "content": "<p>I mean, proc macros can apparently <a href=\"https://github.com/m-ou-se/whichever-compiles\">fork the compiler</a></p>",
        "id": 267001132,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641421826
    },
    {
        "content": "<p>I don't think a proc-macro <code>include_str!</code> would really give proc-macros much more power. E.g., using <code>expand_expr</code> with the tokens <code>include_str!(...)</code> has the same effect, except the Span is \"wrong\" (for my use case)</p>",
        "id": 267001261,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641421919
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>: does implementing a function <code>proc_macro::include_str</code> (name could be bikeshedded later) that is callable by proc macros and returns <code>(String, Span)</code>, with the span being for the included file, sound reasonable to you?</p>",
        "id": 267001950,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641422312
    },
    {
        "content": "<p>As an experiment, I tried changing <code>include_str!</code> to use the included file's span—but I instead got this pretty picture:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">hello</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">18</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">askama</span>::<span class=\"n\">Template</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">___________________</span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"cp\">#[derive(Template)]</span><span class=\"w\"> </span><span class=\"c1\">// this will generate the code...</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">__________</span><span class=\"o\">--------^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">derive</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">expansion</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">include_str</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267003784,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641423417
    },
    {
        "content": "<p>I suggest implementing whatever the current RFC in flight (<a href=\"https://github.com/rust-lang/rfcs/pull/3200\">https://github.com/rust-lang/rfcs/pull/3200</a>) suggests.<br>\nIt should help to move the RFC forward as well.</p>",
        "id": 267022663,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1641440948
    },
    {
        "content": "<p>The issue is that the current RFC doesn't solve my use case; its <code>include_str</code> doesn't return a Span.</p>",
        "id": 267023026,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641441471
    }
]