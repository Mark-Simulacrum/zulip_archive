[
    {
        "content": "<p>Hi,<br>\nI have a no-std crate with FFI bindings to C,<br>\nThere's an error callback I've configured that is called from C in case of a problem,<br>\nThis function currently panics but unwinding into C is UB, so I want to replace that with abort.<br>\nBut then I lose the printing that panic does, is there a best practice here? I can't print before aborting because it is no-std.<br>\nI wish there was a panic without unwind option. <br>\nWill <a class=\"stream\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind\">#project-ffi-unwind</a> help here?</p>",
        "id": 207240831,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1597743926
    },
    {
        "content": "<p>There are a few options.</p>",
        "id": 207241538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> ffi-unwind will solve the problem by letting you define the bindings as <code>extern \"C-unwind\"</code>, which will allow unwinding without UB.</p>",
        "id": 207241561,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/Panic.20VS.20abort.20through.20FFI/near/207241561\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> ffi-unwind will solve the problem by letting you define the bindings as <code>extern \"C-unwind\"</code>, which will allow unwinding without UB.</p>\n</blockquote>\n<p>How can it allow unwinding through <em>C</em> (not C++) safely? (it's ok to say \"it's complicated go read the RFC\" :) )</p>",
        "id": 207241635,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1597744602
    },
    {
        "content": "<p>It's fairly simple, though you should still read the RFC. ;)</p>",
        "id": 207241647,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744620
    },
    {
        "content": "<p>C stack frames can be unwound.</p>",
        "id": 207241662,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744644
    },
    {
        "content": "<p>What are the other options until <code>\"C-unwind\"</code> will be a thing? <br>\n(FYI, this is the code(pretty simple) <a href=\"https://github.com/rust-bitcoin/rust-secp256k1/blob/master/secp256k1-sys/src/lib.rs#L364\">https://github.com/rust-bitcoin/rust-secp256k1/blob/master/secp256k1-sys/src/lib.rs#L364</a> )</p>",
        "id": 207241738,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1597744691
    },
    {
        "content": "<p>Can you elaborate on \"I can't print before aborting\"?</p>",
        "id": 207241775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744738
    },
    {
        "content": "<p>Normally, <code>panic!</code> will print its message, even if panic=\"abort\".</p>",
        "id": 207241788,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744752
    },
    {
        "content": "<p>It just doesn't unwind if panic=\"abort\".</p>",
        "id": 207241801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744761
    },
    {
        "content": "<p>As long as you don't expect to <code>catch_unwind</code> anywhere, you can just set <code>panic=\"abort\"</code> and you won't unwind.</p>",
        "id": 207241872,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744804
    },
    {
        "content": "<p>It's a library, I shouldn't set <code>panic=abort</code> I thought I should replace the panic call with a <code>libc::abort()</code> or similar (too bad there's no stable <code>abort</code> in core)</p>",
        "id": 207241914,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1597744859
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 207241931,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744876
    },
    {
        "content": "<p>You can't set <code>panic=\"abort\"</code> yourself, but you <em>can</em> document that users should use <code>panic=\"abort\"</code>, and you can use <code>catch_unwind</code> to stop panics from exiting your callback and call abort in that case.</p>",
        "id": 207242070,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597744985
    },
    {
        "content": "<p>Or you could call the same messaging machinery that <code>panic!</code> would call, then abort, but that might be harder. :)</p>",
        "id": 207242098,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597745016
    },
    {
        "content": "<p>(The latter would also not call the panic hook, and you probably want to call the panic hook.)</p>",
        "id": 207242178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597745064
    },
    {
        "content": "<p>Also, we're looking at adding a <code>cfg</code> mechanism for panic strategy: <a href=\"https://github.com/rust-lang/rust/pull/74754\">https://github.com/rust-lang/rust/pull/74754</a></p>",
        "id": 207242244,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597745161
    },
    {
        "content": "<p>That would let you write something like <code>cfg(not(panic = \"abort\")) compile_error!(...)</code>, or perhaps <code>cfg(all(feature = \"no_std\", not(panic = \"abort\"))) compile_error!(...)</code></p>",
        "id": 207242319,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597745205
    },
    {
        "content": "<p>ha, that's pretty cool, I still think an <code>abort</code> macro can be cool, but what should I do that is already stable now? :)<br>\nJust abort and not print anything? that would suck for users if it ever happen</p>",
        "id": 207242594,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1597745448
    },
    {
        "content": "<p>(FYI <code>catch_unwind</code> is in <code>std</code> :/)</p>",
        "id": 207242724,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1597745586
    },
    {
        "content": "<p>How is <code>panic!</code> currently printing when you're built with <code>no_std</code>?</p>",
        "id": 207245503,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597747900
    },
    {
        "content": "<p>that's up to the end user and his panic impl, ie I have a regular std binary using it and it prints like any other panic</p>",
        "id": 207248249,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1597750189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I just found this:</p>\n<blockquote>\n<p>Functions with an ABI that differs from \"Rust\" do not support unwinding in the exact same way that Rust does. Therefore, unwinding past the end of functions with such ABIs causes the process to abort.</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/reference/blob/master/src/items/functions.md#extern-function-qualifier\">https://github.com/rust-lang/reference/blob/master/src/items/functions.md#extern-function-qualifier</a></p>\n<p>does this mean I'm in the clear and there's no UB here?</p>\n<p>CC <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/46833\">https://github.com/rust-lang/rust/pull/46833</a></p>",
        "id": 207931609,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1598340231
    },
    {
        "content": "<p>We tried several times to make unwind from/into C abort, but in all cases that was reverted because it broke existing libraries. That piece of text is likely a leftover from one of those times.</p>",
        "id": 207934567,
        "sender_full_name": "bjorn3",
        "timestamp": 1598342718
    },
    {
        "content": "<p>Somebody who knows what the current behavior is, please send a PR or file an issue explaining the current situation please.</p>",
        "id": 207938099,
        "sender_full_name": "isHavvy",
        "timestamp": 1598345621
    },
    {
        "content": "<p>I believe an RFC was recently accepted relating to this</p>",
        "id": 207958983,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1598360412
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html\">https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html</a></p>",
        "id": 207959133,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1598360478
    },
    {
        "content": "<p>The RFC also says it doesn't abort and it is UB. which contradicts the reference.</p>\n<p>Posted a question on this thread: <a href=\"https://github.com/rust-lang/rust/issues/52652#issuecomment-682454449\">https://github.com/rust-lang/rust/issues/52652#issuecomment-682454449</a></p>",
        "id": 208326920,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1598610971
    }
]