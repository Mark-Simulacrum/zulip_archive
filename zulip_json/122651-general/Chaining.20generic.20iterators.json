[
    {
        "content": "<p>Heya, I'm trying to add a prefix to a generic iterator, and I'm a little stumped by the compiler message:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">use_iterator</span><span class=\"p\">(</span><span class=\"n\">args</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">extend</span><span class=\"p\">(</span><span class=\"n\">suffix</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">use_iterator</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm seeing the following error on the <code>chain</code> invocation: \"expected type parameter <code>impl AsRef&lt;str&gt;</code>, found <code>&amp;String</code>\".<br>\nDoesn't <code>&amp;String</code> implement <code>AsRef&lt;str&gt;</code>? What's the right way to do this chaining?</p>",
        "id": 229509939,
        "sender_full_name": "Sean Klein",
        "timestamp": 1615308561
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dcd686dbc22870346bbc5d4a8bd81186\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dcd686dbc22870346bbc5d4a8bd81186</a></p>",
        "id": 229509987,
        "sender_full_name": "Sean Klein",
        "timestamp": 1615308585
    },
    {
        "content": "<p><code>impl Foo</code> is just sugar for <code>... where T: Foo</code>. I.e. it's generic. So you're trying to chain an iterator over <code>String</code> items together with an iterator over any type as long as it implements <code>AsRef&lt;str&gt;</code>.</p>\n<p>Chain's signature requires them to be _identical_, which is more strict than merely implementing the same traits. U::Item = Self::Item</p>\n<div class=\"codehilite\"><pre><span></span><code>fn chain&lt;U&gt;(self, other: U) -&gt; Chain&lt;Self, U::IntoIter&gt;â“˜ where\n    Self: Sized,\n    U: IntoIterator&lt;Item = Self::Item&gt;,\n</code></pre></div>\n<p>If you wanted heterogenous iterators you'd have to work with dyn Trait. Or you have to normalize them first to <code>Item=&amp;str</code></p>",
        "id": 229511997,
        "sender_full_name": "The 8472",
        "timestamp": 1615309251
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">extend</span><span class=\"p\">(</span><span class=\"n\">suffix</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">use_iterator</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>desugars to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">extend</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">suffix</span>: <span class=\"nc\">I</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>::<span class=\"n\">Item</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"hello\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">use_iterator</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which means that the type of the item is determined by the caller of <code>extend</code> and you don't know inside of <code>extend</code>what type it'll be.</p>",
        "id": 229549353,
        "sender_full_name": "matt1992",
        "timestamp": 1615322341
    }
]