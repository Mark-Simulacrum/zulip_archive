[
    {
        "content": "<p>Hi, i working in a textmate rules parser with rust. When I finish it, I found it's very very slowly. And I figure out those code with <code>clone</code> is the reason.  The <code>rule_id2desc</code> is a hashmap, I need to got a rule from it, and use it to build caches. But it cause <code>second mutable borrow occurs here</code>, I try to resolve it different ways but not working.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">compile_rule</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">stack</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">StackElement</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">allow_a</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">allow_g</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">CompiledRule</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rule_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">rule_id</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rule_id2desc</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rule_id</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rule_scanner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rule_id2desc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">end_rule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allow_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">allow_g</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rule_id2desc</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">rule_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">rule_scanner</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How can I make a changable hashmap in this code? Has anyone have a suggestion about this?</p>",
        "id": 218067188,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1606466263
    },
    {
        "content": "<p>Try moving <code>self.register_rule</code> before <code>rule.compile</code> and then get a reference to the <code>rule</code> from the hashmap just before <code>rule.compile</code>.</p>",
        "id": 218069780,
        "sender_full_name": "bjorn3",
        "timestamp": 1606468335
    },
    {
        "content": "<p>Sorry, I forgot to paste origin code, the rule is mut, so... I need to get mut rule, to update self in Hashmap.. Does <code>Rc&lt;RefCell</code> will works ?</p>",
        "id": 218072068,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1606469900
    }
]