[
    {
        "content": "<p>Typically, using strict version requirements implies you're relying on unspecified implementation-details of the crate, or things that the crate is explicitly allowed to change in compatible versions (either by rust-semver, or explicit declaration by the crate). It also loses the ability to recieve patches, including security and soundness fixes, so it has downsides, and the benefits really only apply if you are doing specific things that you generally shouldn't be.</p>",
        "id": 256329028,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633472912
    },
    {
        "content": "<p>Put another way: if you don't trust the crate to be correct about semver usage during future releases, why are you even using that dependency at all?</p>",
        "id": 256331643,
        "sender_full_name": "Lokathor",
        "timestamp": 1633474515
    },
    {
        "content": "<p>Some crates have policies that allow MSRV breakage in minor releases; pinning to an exact version seems to be the only way to preserve your own MSRV.</p>",
        "id": 256332897,
        "sender_full_name": "Eric Seppanen",
        "timestamp": 1633475228
    },
    {
        "content": "<p>True, which is why I don't ever trust any dependencies myself.</p>",
        "id": 256354983,
        "sender_full_name": "Lokathor",
        "timestamp": 1633493484
    },
    {
        "content": "<p>A large amount of crates have a policy of MSRV breakage on a compatible version. There's no other way if you intend to ever reach a stable version (typically on 1.0). Due to 'newest compatible' resolution there is no good way to ensure rust-version compatibility afaik.</p>",
        "id": 256361135,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1633499467
    },
    {
        "content": "<p>Strict version dependencies are also really painful for Linux distributions.</p>",
        "id": 256361143,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1633499475
    },
    {
        "content": "<p>Since distributions typically only have one compatible version.</p>",
        "id": 256361144,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1633499475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432852\">@João M. Bezerra</span> you may also want to read this old issue <a href=\"https://github.com/rust-lang/cargo/issues/5340\">https://github.com/rust-lang/cargo/issues/5340</a>.</p>",
        "id": 256428429,
        "sender_full_name": "Eh2406",
        "timestamp": 1633533419
    },
    {
        "content": "<blockquote>\n<p>A large amount of crates have a policy of MSRV breakage on a compatible version. There's no other way if you intend to ever reach a stable version (typically on 1.0). Due to 'newest compatible' resolution there is no good way to ensure rust-version compatibility afaik.</p>\n</blockquote>\n<p>Simply don't upgrade the MSRV within a compatible version. Use cargo features, or just have the occasional new major version. It's genuinely not the end of the world.</p>",
        "id": 256432284,
        "sender_full_name": "Lokathor",
        "timestamp": 1633534715
    },
    {
        "content": "<p>Are older Rust versions officially supported?</p>",
        "id": 256432461,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633534785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/Cargo.20-.20Why.20using.20strict.20version.20requirements.20is.20bad.3F/near/256432284\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>A large amount of crates have a policy of MSRV breakage on a compatible version. There's no other way if you intend to ever reach a stable version (typically on 1.0). Due to 'newest compatible' resolution there is no good way to ensure rust-version compatibility afaik.</p>\n</blockquote>\n<p>Simply don't upgrade the MSRV within a compatible version. Use cargo features, or just have the occasional new major version. It's genuinely not the end of the world.</p>\n</blockquote>\n<p>The problem is that some crates don't do this. I've actually encountered this myself, and had to avoid using those crates.</p>",
        "id": 256436938,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633536226
    },
    {
        "content": "<p>I completely agree with you Connor.</p>",
        "id": 256437166,
        "sender_full_name": "Lokathor",
        "timestamp": 1633536293
    },
    {
        "content": "<p>(To be honest, I don't see the point of an MSRV guarantee from a library crate if it can be changed in a minor release)</p>",
        "id": 256437427,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633536369
    },
    {
        "content": "<p>If a minor release cannot change MSRV then many crates wouldn't be able to upgrade their MSRV at all</p>",
        "id": 256437816,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633536492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Cargo.20-.20Why.20using.20strict.20version.20requirements.20is.20bad.3F/near/256432461\">said</a>:</p>\n<blockquote>\n<p>Are older Rust versions officially supported?</p>\n</blockquote>\n<p>No, but a number of crates support them for various reasons (to support binary distrbutions from system package managers is one, I use it so I can support bootstrapping with mrustc)</p>",
        "id": 256437846,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633536503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/122651-general/topic/Cargo.20-.20Why.20using.20strict.20version.20requirements.20is.20bad.3F/near/256437816\">said</a>:</p>\n<blockquote>\n<p>If a minor release cannot change MSRV then many crates wouldn't be able to upgrade their MSRV at all</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 256437869,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633536511
    },
    {
        "content": "<p>I don't think it's desirable that ecosystems are restricted to an old Rust version</p>",
        "id": 256438008,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633536567
    },
    {
        "content": "<p>The alternative is you negate the benefit of having an MSRV guarantee, which is the ability to build on an older rust version.</p>",
        "id": 256438071,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633536591
    },
    {
        "content": "<p>As I said, you can use off-by-default cargo features or you can issue new major versions. Both are entirely acceptable.</p>",
        "id": 256438231,
        "sender_full_name": "Lokathor",
        "timestamp": 1633536639
    },
    {
        "content": "<p>Or if it's entirely internal, you can use <a href=\"http://build.rs\">build.rs</a> to detect available features and enable them internally.</p>",
        "id": 256438332,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633536684
    },
    {
        "content": "<p>With more feature gates it's painful to ensure that all combinations work</p>",
        "id": 256438694,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633536825
    },
    {
        "content": "<p>IMO upgrading MSRV with minor release is reasonable, as long as it's not too frequent and the new MSRV is not too recent</p>",
        "id": 256438802,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633536861
    },
    {
        "content": "<p>I'd find it more painful if my dependency updated and suddenly I can no longer build on a version I absolutely require (actually slightly more painful since both upgrading and downgrading for me ends up being a manual process).</p>",
        "id": 256438818,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633536866
    },
    {
        "content": "<p>You can lock your dependencies</p>",
        "id": 256439000,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633536943
    },
    {
        "content": "<p>I think a reasonable compromise is to say that a minor release can bump MSRV to the \"latest - X\" Rust version. E.g. X can be 9 so that it'll be buildable by a 1-year old compiler.</p>",
        "id": 256439496,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633537133
    },
    {
        "content": "<p>Well, that depends on the downstream requrements.</p>",
        "id": 256439625,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633537187
    },
    {
        "content": "<p>If a downstream distro don't want to update the compiler then probably they don't want to upgrade crates as well.</p>",
        "id": 256439905,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633537309
    },
    {
        "content": "<p>Since compiler upgrade is also a minor release bump</p>",
        "id": 256439990,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633537329
    },
    {
        "content": "<p>I am already quite frastrated when trying to contribute to some Rust projects and seeing their MSRV as 1.4X, which means that I can't use const generics.</p>",
        "id": 256440196,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633537427
    },
    {
        "content": "<p>Keeping MSRV low forever is a big NO for me.</p>",
        "id": 256440290,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633537457
    },
    {
        "content": "<p>Downstream doesn't mean distro necessarily. It can also be a crate. I currently have a project that MUST be 2 steps from a C++ compiler (for bootstrapping purposes, as it is a rust (among others) compiler project that doesn't want the rustc problem), which means that, at least right now, that's 1.39 (almost 2 years old). I can't update until either mrustc upgrades, or gcc-rs releases.</p>",
        "id": 256440423,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633537516
    },
    {
        "content": "<p>If something says 35, but can upgrade in a minor version, I can't use it, because I need to guarantee it can build on 39 at least until I can bump the compatibility version.</p>",
        "id": 256440497,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633537559
    },
    {
        "content": "<p>It sounds like MSRV-aware dependency resolution should work</p>",
        "id": 256440953,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633537725
    },
    {
        "content": "<p>Sure, but that would have to be added. And supported. And suddenly you have the same problem.</p>",
        "id": 256441220,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633537817
    },
    {
        "content": "<p>niche use cases shouldn't stop the whole ecosystems though</p>",
        "id": 256441424,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633537889
    },
    {
        "content": "<p>I would not suggest one crate feature per language feature you use all separately optional.</p>\n<p>What <code>tinyvec</code> does is offer features for compiler level and so one naturally implies the previous one.</p>",
        "id": 256441578,
        "sender_full_name": "Lokathor",
        "timestamp": 1633537933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/Cargo.20-.20Why.20using.20strict.20version.20requirements.20is.20bad.3F/near/256438231\">said</a>:</p>\n<blockquote>\n<p>As I said, you can use off-by-default cargo features or you can issue new major versions. Both are entirely acceptable.</p>\n</blockquote>\n<p>There is no good mechanism for this either, at scale. First of all, this is hell to test. Second, this doesn't work if the new features requires upgrading to a new version of a (private) dependency unless you have two fully incompatible implementations based on those two versions. Which is hell to maintain. And lastly this negates any benefit you could reap from newer versions of Rust, stabiliy and readabilty alike. You're eternally damned to maintain that copy of <code>slice::copy_from_within</code> you made yourself.</p>",
        "id": 256442113,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1633538140
    },
    {
        "content": "<p>Maintaining an old branch to provide bugfixes only probably is easier</p>",
        "id": 256442505,
        "sender_full_name": "The 8472",
        "timestamp": 1633538282
    },
    {
        "content": "<p>That 'old' branch won't work if you intend to expand on a stable crate over time. It works for ZeroVer though.</p>",
        "id": 256442977,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1633538452
    },
    {
        "content": "<p>Then just have a new major version of the crate after a while</p>",
        "id": 256444807,
        "sender_full_name": "Lokathor",
        "timestamp": 1633539165
    },
    {
        "content": "<p>Not for a compatibility crate. I'm sorry but why is it okay to expect something from crate authors that the language itself has explicitly barred itself from doing? That goes directly against to the argument of having 'a small std because there are crates'. The desire to have a true supplement to the standard library with similar commitment is real and just not possible.</p>",
        "id": 256446152,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1633539672
    },
    {
        "content": "<p>I would accept limitations for doing that, e.g. explicit attributes on use so that the compiler can verify the msrv against the stability attributes in std. But 'just bump major version' is not in the least satisfying.</p>",
        "id": 256446691,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1633539898
    },
    {
        "content": "<p>just... bump the minor version and maintain backwards compat stuff on the patch level? sure, they won't get new APIs, but they won't be getting them from std either.</p>",
        "id": 256447361,
        "sender_full_name": "The 8472",
        "timestamp": 1633540196
    },
    {
        "content": "<p>something has to give</p>",
        "id": 256447441,
        "sender_full_name": "The 8472",
        "timestamp": 1633540218
    },
    {
        "content": "<p>I'm fine with MSRV breaks in minor (but not patch) versions. Asking crate authors to keep supporting X-year old compilers which aren't even supported by the Rust project seems like optimizing for the bad use case.</p>",
        "id": 256447677,
        "sender_full_name": "Laurențiu",
        "timestamp": 1633540323
    },
    {
        "content": "<p>That breaks for downstream because their only option with such a policy is strict version requirements. Which is bad because it results in outdated dependencies.</p>",
        "id": 256447750,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1633540351
    },
    {
        "content": "<p>This wouldn't be an issue if crate resolution was sensitive to msrv. Then you can maintain (read: continuously test) even if your downstream dependencies move on to higher msrv in a minor version change; even without going nuclear option of having a &lt;= dependency specification.</p>",
        "id": 256448000,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1633540441
    },
    {
        "content": "<p>I think it would be reasonable for Cargo to support just ignoring crate versions with a declared rust-version higher than your current compiler version.</p>",
        "id": 256451433,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1633541750
    },
    {
        "content": "<p>iif there are good error messages when the resolution fails.</p>",
        "id": 256452666,
        "sender_full_name": "Eh2406",
        "timestamp": 1633542203
    },
    {
        "content": "<p>also iff you can tell cargo about features that change minimum version</p>",
        "id": 256459193,
        "sender_full_name": "Lokathor",
        "timestamp": 1633544472
    }
]