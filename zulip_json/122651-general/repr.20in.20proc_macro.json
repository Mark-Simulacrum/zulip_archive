[
    {
        "content": "<p>Moved from:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"469308\">Wzh</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/repr.20in.20proc_macro/near/267190478\">said</a>:</p>\n<blockquote>\n<p>Hello, I wrote a repr attribute in a proc_macro, but it doesn't seem to work. Define just like this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[proc_macro]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ffi_null_or</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"sc\">' '</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">r#\"</span>\n<span class=\"s\">            #[repr(u8)]</span>\n<span class=\"s\">            pub enum {}OrNull {{</span>\n<span class=\"s\">                Null,</span>\n<span class=\"s\">                Value({})</span>\n<span class=\"s\">            }}</span>\n<span class=\"s\">        \"#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value_type</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And use like this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ffi_null_or</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It can be compiled correctly, however the <code>bindings.h</code> generated by <code>cbindgen</code> dosen't contain the type named <code>IntOrNull</code>. Is my code wrong or something?</p>\n</blockquote>",
        "id": 267610878,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641920059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"469308\">@Wzh</span> the issue is that <code>cbindgen</code> is a limited tool for this kind of things: it's a syntactical tool that struggles with macro-generated code. See <a href=\"https://getditto.github.io/safer_ffi/motivation/traditional-ffi.html#consistent-support-for-macro-generated-definitions\">https://getditto.github.io/safer_ffi/motivation/traditional-ffi.html#consistent-support-for-macro-generated-definitions</a> for more info (disclaimer: I'm the author of <code>safer-ffi</code>).</p>\n<p>I'd thus recommend that you use some binding-generating code tool would be trait-based, rather than something based on a syntactic pass like <code>cbindgen</code> is (although regarding <code>safer-ffi</code>, it sadly does not support such <code>enum</code>s <em>yet</em> (it wouldn't be too hard to add support for them, though)).</p>",
        "id": 267612240,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1641920601
    },
    {
        "content": "<p>Would running the tool on macro-expanded code work?</p>",
        "id": 267612577,
        "sender_full_name": "The 8472",
        "timestamp": 1641920732
    }
]