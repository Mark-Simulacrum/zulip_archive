[
    {
        "content": "<p>Let's say I have:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Test&lt;&#39;a&gt;(&amp;&#39;a [u8]);\n\nstruct TestSlice&lt;&#39;a&gt;([Test&lt;&#39;a&gt;]);\n</code></pre></div>\n\n\n<p>Is it safe to transmute a <code>&amp;[Test&lt;'a&gt;]</code> to a <code>&amp;TestSlice&lt;'a&gt;</code> with:</p>\n<div class=\"codehilite\"><pre><span></span><code>unsafe { std::mem::transmute::&lt;&amp;[Test&lt;&#39;a&gt;], &amp;TestSlice&lt;&#39;a&gt;&gt;(slice) }\n</code></pre></div>\n\n\n<p>and also the other way around?</p>\n<p>Miri does not seem to complain: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5156b9cad5a692c91f13a2bcf444891f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5156b9cad5a692c91f13a2bcf444891f</a></p>",
        "id": 210925476,
        "sender_full_name": "marmeladema",
        "timestamp": 1600805743
    },
    {
        "content": "<p>Afaik you need  <code>#[repr(transparent)]</code> for this to be sound</p>",
        "id": 210925760,
        "sender_full_name": "lcnr",
        "timestamp": 1600805865
    },
    {
        "content": "<p>or <code>C</code></p>",
        "id": 210925767,
        "sender_full_name": "lcnr",
        "timestamp": 1600805868
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nomicon/other-reprs.html#reprtransparent\">https://doc.rust-lang.org/nomicon/other-reprs.html#reprtransparent</a></p>",
        "id": 210925861,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1600805900
    },
    {
        "content": "<p>Description of what that attribute does if you haven't seen it before</p>",
        "id": 210925881,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1600805913
    },
    {
        "content": "<p>Ah thanks, i've totally forgotten about <code>#[repr(transparent)]</code></p>",
        "id": 210925974,
        "sender_full_name": "marmeladema",
        "timestamp": 1600805970
    },
    {
        "content": "<p>Should miri complain on my example since I don't have <code>#[repr(transparent)]</code>?</p>",
        "id": 210926004,
        "sender_full_name": "marmeladema",
        "timestamp": 1600805989
    },
    {
        "content": "<p>Also:</p>\n<div class=\"codehilite\"><pre><span></span><code>This can only be used on structs with a single non-zero-sized field (there may be additional zero-sized fields). The effect is that the layout and ABI of the whole struct is guaranteed to be the same as that one field.\n</code></pre></div>\n\n\n<p>In my case,  I don't have a single non zero sized field, I have only one field which is unsized</p>",
        "id": 210926214,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806092
    },
    {
        "content": "<p>That's fine</p>",
        "id": 210926303,
        "sender_full_name": "lcnr",
        "timestamp": 1600806128
    },
    {
        "content": "<p>I think this comment is only about</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210926335,
        "sender_full_name": "lcnr",
        "timestamp": 1600806154
    },
    {
        "content": "<p>which is not allowed</p>",
        "id": 210926338,
        "sender_full_name": "lcnr",
        "timestamp": 1600806158
    },
    {
        "content": "<p>ok, so it sould be \"at most a single non-zero-sized field\"</p>",
        "id": 210926394,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> In your example, you're transmuting references</p>",
        "id": 210926404,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806197
    },
    {
        "content": "<p>so, while it's still insta-UB, Miri will not actually catch it, since Miri doesn't recurse through references</p>",
        "id": 210926441,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806217
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 210926456,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806225
    },
    {
        "content": "<p>Ok thank you for the explanations</p>",
        "id": 210926556,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> what does insta-UB mean exactly?</p>",
        "id": 210926580,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806282
    },
    {
        "content": "<p>You've violated the validity invariant of the type, so simply constructing it is UB</p>",
        "id": 210926678,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806349
    },
    {
        "content": "<p>I was afraid the transmute would be UB because ref to slice are fat pointers, and ref to my custom <code>TestSlice</code> would not actually be through fat pointer</p>",
        "id": 210926738,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806364
    },
    {
        "content": "<p>as opposed to something like constructing a <code>Vec</code> with a dangling pointer, which violates a safety invariant. It's not immediate UB, but must uses of it will cause UB</p>",
        "id": 210926793,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806386
    },
    {
        "content": "<p>I think the nomicon goes into more detail</p>",
        "id": 210926805,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806392
    },
    {
        "content": "<p>Hum ok. So is it valid with <code>#[repr(transparent)]</code> or is it always wrong?</p>",
        "id": 210926887,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806456
    },
    {
        "content": "<p>I believe it's valid with <code>#[repr(transparent)]</code></p>",
        "id": 210926980,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806501
    },
    {
        "content": "<p>though I would check the nomicon or reference to be sure</p>",
        "id": 210926993,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806511
    },
    {
        "content": "<p>ref to your testslice is still a fatptr</p>",
        "id": 210927010,
        "sender_full_name": "simulacrum",
        "timestamp": 1600806523
    },
    {
        "content": "<p>it should be sound</p>",
        "id": 210927030,
        "sender_full_name": "simulacrum",
        "timestamp": 1600806535
    },
    {
        "content": "<p>Thanks a lot for the help :)<br>\nThe why I am doing that is to bypass some current limitation in rustc/std with<code>Cow</code>.<br>\nIdeally what I would do is: </p>\n<div class=\"codehilite\"><pre><span></span><code>#[derive(Clone, Debug)]\nenum Test &lt;&#39;a&gt; {\n    Int(u8),\n    Array(Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;),\n}\n</code></pre></div>\n\n\n<p>Link: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=11ba66d167e152eeb13de374112f0537\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=11ba66d167e152eeb13de374112f0537</a><br>\nBut I get a <code>overflow evaluating the requirement </code>Test&lt;'a&gt;: std::marker::Sized` error</p>",
        "id": 210927370,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806688
    },
    {
        "content": "<p>I just realized that the behaviour of <code>#[repr(transparent)]</code> isn't well defined on zero-sized struct.</p>\n<p>Because of the \"single non-zero-sized field\".</p>\n<p>We probably should change it to \"at most one non-zero-sized field\"?</p>",
        "id": 210927423,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1600806719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> You'll need to introduce some kind of indirection (e.g. a <code>Box</code>)</p>",
        "id": 210927497,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806741
    },
    {
        "content": "<p>since <code>Test</code> will end up containing itself directly</p>",
        "id": 210927566,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806777
    },
    {
        "content": "<p>Well, manually defining my Cow type works, or using the trick, this thread is about also seem to work</p>",
        "id": 210927577,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806783
    },
    {
        "content": "<p>oh the code I pasted is wrong</p>",
        "id": 210927621,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806807
    },
    {
        "content": "<p>there's a nicer error we should be emitting there, but we aren't for some reason. I'll investigate</p>",
        "id": 210927769,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806863
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b1fa4a65e92987aa92b9d545f2879224\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b1fa4a65e92987aa92b9d545f2879224</a></p>",
        "id": 210927862,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806908
    },
    {
        "content": "<p>This is what I really want to do. It should work without a <code>Box</code>, because the Cow enum will contain either a <code>&amp;[Test]</code> or a <code>Vec&lt;Test&gt;</code></p>",
        "id": 210927919,
        "sender_full_name": "marmeladema",
        "timestamp": 1600806947
    },
    {
        "content": "<p>that's not what cow does, [T]::Owned isn't Vec&lt;T&gt; afaik</p>",
        "id": 210927994,
        "sender_full_name": "simulacrum",
        "timestamp": 1600806974
    },
    {
        "content": "<p>I think it is</p>",
        "id": 210928043,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600806995
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/beta/std/borrow/trait.ToOwned.html#impl-ToOwned-4\">https://doc.rust-lang.org/beta/std/borrow/trait.ToOwned.html#impl-ToOwned-4</a></p>",
        "id": 210928056,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600807002
    },
    {
        "content": "<p>oh hm</p>",
        "id": 210928067,
        "sender_full_name": "simulacrum",
        "timestamp": 1600807008
    },
    {
        "content": "<p>I guess it is!</p>",
        "id": 210928075,
        "sender_full_name": "simulacrum",
        "timestamp": 1600807013
    },
    {
        "content": "<p>so, I guess it's not actually infinitely sized</p>",
        "id": 210928084,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600807016
    },
    {
        "content": "<p>hm so I think the error is actually about a different problem</p>",
        "id": 210928223,
        "sender_full_name": "simulacrum",
        "timestamp": 1600807083
    },
    {
        "content": "<p>i.e., it's just a genuine recursive dep</p>",
        "id": 210928316,
        "sender_full_name": "simulacrum",
        "timestamp": 1600807120
    },
    {
        "content": "<p>we're probably not properly canonicalizing the value somewhere, so we recurse instead of detecting that <code>&lt;B as ToOwned&gt;::Owned</code> is Sized for any B</p>",
        "id": 210928356,
        "sender_full_name": "simulacrum",
        "timestamp": 1600807156
    },
    {
        "content": "<p>I don't have enough knowledge about the compiler to fix it I am afraid <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 210928807,
        "sender_full_name": "marmeladema",
        "timestamp": 1600807415
    },
    {
        "content": "<p>Note that <code>#[repr(C)]</code> suffices here. Also, see <a href=\"https://docs.rs/ref-cast\">https://docs.rs/ref-cast</a></p>",
        "id": 210936845,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600812067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/Transmute.20safety.20question/near/210926441\">said</a>:</p>\n<blockquote>\n<p>so, while it's still insta-UB, Miri will not actually catch it, since Miri doesn't recurse through references</p>\n</blockquote>\n<p>no it is actually not UB. see <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">this list for what is UB</a>.<br>\nhowever, this code relies on an assumption that is not guaranteed by the language, namely, that <code>TestSlice</code> is laid out in a particular way. so the code relies on <em>unspecified behavior</em>, but there is no UB. the code actually has well-defined meaning <em>if the assumption is correct</em>, and it is correct for current stable Rust, but without <code>repr(transparent)</code> or <code>repr(C)</code> it might stop being correct in the future.</p>",
        "id": 211158218,
        "sender_full_name": "RalfJ",
        "timestamp": 1600965894
    },
    {
        "content": "<p>It would be nice to be able to detect code that relies on unspecified behavior, but it is non-trivial... probably the best way would be to add a <code>-Zrandomize-layout</code> flag to rustc that does all sorts of crazy things to layout that would \"hopefully\" lead to actual UB if the code made wrong assumptions.</p>",
        "id": 211158353,
        "sender_full_name": "RalfJ",
        "timestamp": 1600965963
    },
    {
        "content": "<p>If I wanted to fix the compile error for <code>overflow evaluating the requirement Test&lt;'a&gt;: std::marker::Sized</code> where should I start looking? I've ever only done refactoring in the compiler, never actually enhanced it, so its a bit of a new territory to me.</p>",
        "id": 211318822,
        "sender_full_name": "marmeladema",
        "timestamp": 1601068506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Transmute.20safety.20question/near/211158353\">said</a>:</p>\n<blockquote>\n<p>It would be nice to be able to detect code that relies on unspecified behavior, but it is non-trivial... probably the best way would be to add a <code>-Zrandomize-layout</code> flag to rustc that does all sorts of crazy things to layout that would \"hopefully\" lead to actual UB if the code made wrong assumptions.</p>\n</blockquote>\n<p>Can't rustc \"just\" add(under a -ZSomething) some padding bytes at the start of all <code>repr(Rust)</code> structs? that should break almost everything relying on this, I think relying on an exact size/alignment is also unspecified behavior</p>",
        "id": 211353082,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1601115084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/122651-general/topic/Transmute.20safety.20question/near/211353082\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Transmute.20safety.20question/near/211158353\">said</a>:</p>\n<blockquote>\n<p>It would be nice to be able to detect code that relies on unspecified behavior, but it is non-trivial... probably the best way would be to add a <code>-Zrandomize-layout</code> flag to rustc that does all sorts of crazy things to layout that would \"hopefully\" lead to actual UB if the code made wrong assumptions.</p>\n</blockquote>\n<p>Can't rustc \"just\" add(under a -ZSomething) some padding bytes at the start of all <code>repr(Rust)</code> structs? that should break almost everything relying on this, I think relying on an exact size/alignment is also unspecified behavior</p>\n</blockquote>\n<p>yeah that seems like a reasonable first step</p>",
        "id": 211353546,
        "sender_full_name": "RalfJ",
        "timestamp": 1601115820
    },
    {
        "content": "<p>it should also do that for <code>repr(Rust)</code> unions FWIW, and add different amounts of padding to different fields</p>",
        "id": 211353591,
        "sender_full_name": "RalfJ",
        "timestamp": 1601115863
    },
    {
        "content": "<p>it is very common to forget <code>repr(C)</code> when using unions to transmute things</p>",
        "id": 211353593,
        "sender_full_name": "RalfJ",
        "timestamp": 1601115876
    },
    {
        "content": "<p>do you want to open an issue for this? seems like a reasonable request</p>",
        "id": 211353608,
        "sender_full_name": "RalfJ",
        "timestamp": 1601115931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I took the liberty to open <a href=\"https://github.com/rust-lang/rust/issues/77316\">https://github.com/rust-lang/rust/issues/77316</a> with a very brief description. Feel free to improve it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <br>\nI'd be glag to work on it even though, I've no idea where to start ^^</p>",
        "id": 211562738,
        "sender_full_name": "marmeladema",
        "timestamp": 1601335026
    }
]