[
    {
        "content": "<p>Does anyone know why or if this code should compile?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vec_of_foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">mutable_foo_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">custom_foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">mutable_foo_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">custom_foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">vec_of_foo</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">custom_foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231018524,
        "sender_full_name": "kev",
        "timestamp": 1616158903
    },
    {
        "content": "<p>If mutable_foo_ref is used, then compilation errors occur, was curious as to why this compiles in the first place</p>",
        "id": 231018655,
        "sender_full_name": "kev",
        "timestamp": 1616158965
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>warning: value assigned to `mutable_foo_ref` is never read\n  --&gt; src/main.rs:11:7\n   |\n11 |       mutable_foo_ref = Some(&amp;mut custom_foo);\n   |       ^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten before being read?\n</code></pre></div>\n<p>I think because the compiler detects the reference is unused, it doesn't count it as an existing borrow</p>",
        "id": 231018672,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616158974
    },
    {
        "content": "<p>okay got it, so there is no dead code elimination</p>",
        "id": 231019117,
        "sender_full_name": "kev",
        "timestamp": 1616159184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369769\">@kev</span> I think <code>mutable_foo_ref</code> has type <code>Option&lt;&amp;'a mut Foo&gt;</code> where <code>'a</code> only spans the <code>mutable_foo_ref = ..</code> line. This means that it is invalid for use after the for loop (or even after the <code>push</code> call inside the for loop), but this isn't a problem because it has no drop impl</p>",
        "id": 231108440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616200272
    },
    {
        "content": "<p>If you check the MIR:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b960104cf10695c3d4d7cbd51ede4dc5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b960104cf10695c3d4d7cbd51ede4dc5</a><br>\nthe lifetime of <code>&amp;mut custom_foo</code> (_16) ends right after <code>)</code> of the <code>Some</code></p>",
        "id": 231108928,
        "sender_full_name": "Inflation",
        "timestamp": 1616200802
    }
]