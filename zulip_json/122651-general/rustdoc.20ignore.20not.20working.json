[
    {
        "content": "<p>Why is <code>ignore</code> not working here?</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: could not parse code block as Rust code\n  --&gt; compiler/rustc_trait_selection/src/opaque_types.rs:44:9\n   |\n44 |       /// ```ignore (incomplete snippet)\n   |  _________^\n45 | |     /// type Foo = impl Baz;\n46 | |     /// fn bar() -&gt; Foo {\n47 | |     /// //          ^^^ This is the span we are looking for!\n48 | |     /// ```\n   | |___________^\n   |\n   = note: error from rustc: this file contains an unclosed delimiter\n</code></pre></div>",
        "id": 213741787,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603080956
    },
    {
        "content": "<p>(Note: I posted about this on #rustdoc on Discord last week, but I didn't get any replies. It may have been because the formatting was horrible since Discord doesn't seem to have a way to escape backticks <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>)</p>",
        "id": 213741846,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603081021
    },
    {
        "content": "<blockquote>\n<p>I didn't get any replies</p>\n</blockquote>\n<p>I'd have to read the code to tell you :/</p>",
        "id": 213741965,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603081195
    },
    {
        "content": "<p>Which code? The code that caused the error is in the error message. Unless you mean \"I need to read the rustdoc source code\"...</p>",
        "id": 213742194,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603081518
    },
    {
        "content": "<p>Here's the code by itself:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// ```ignore (incomplete snippet)</span>\n<span class=\"sd\">/// type Foo = impl Baz;</span>\n<span class=\"sd\">/// fn bar() -&gt; Foo {</span>\n<span class=\"sd\">/// //          ^^^ This is the span we are looking for!</span>\n<span class=\"sd\">/// ```</span>\n</code></pre></div>",
        "id": 213742206,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603081563
    },
    {
        "content": "<p>For reference, I think this section of rustdoc source code is responsible for parsing the lang string:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span>: <span class=\"kt\">char</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">'_'</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">'-'</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">is_alphanumeric</span><span class=\"p\">()));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"p\">.</span><span class=\"n\">trim</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"should_panic\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">should_panic</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">seen_rust_tags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">seen_other_tags</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"no_run\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">no_run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">seen_rust_tags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">seen_other_tags</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"ignore\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">ignore</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ignore</span>::<span class=\"n\">All</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">seen_rust_tags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">seen_other_tags</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213742260,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603081630
    },
    {
        "content": "<p>Oh wow, I just noticed that you can click on the arrow in the top right of a code snippet and it will open it in the playground! <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 213742318,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603081687
    },
    {
        "content": "<blockquote>\n<p>unless you mean \"I need to read the rustdoc source\"</p>\n</blockquote>\n<p>Yes, that's what I mean</p>",
        "id": 213742562,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603082064
    },
    {
        "content": "<p>Okay, thanks!</p>",
        "id": 213742587,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603082115
    },
    {
        "content": "<p><code>ignore</code> will still try to highlight the contents as Rust code, so I guess there is a pass of the Rust tokenizer, which <em>can</em> fail (whether that case cpuld have a non-fatal fallback to non-colorized code is another question).<br>\nSo, in your case I recommend you use <code>text</code> instead of <code>ignore</code> to make sure rustdoc ignores it.</p>",
        "id": 213846169,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603141676
    },
    {
        "content": "<p>oh that rings a bell</p>",
        "id": 213854875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603146813
    },
    {
        "content": "<p>I think <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> recently changed this to use the rustc_lexer instead of handrolling it</p>",
        "id": 213854892,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603146829
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/75775\">https://github.com/rust-lang/rust/pull/75775</a></p>",
        "id": 213854899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603146836
    },
    {
        "content": "<p>I think ignore still ends up as an <code>#[ignore]</code>d doctest. so it still needs to be syntactically valid I've had to resort to </p>\n<div class=\"codehilite\"><pre><span></span><code>/// ```\n/// # const _: &amp;str = stringify!{\n/// invalid snippet here that should still be syntax highlighted\n/// # };\n/// ```\n</code></pre></div>\n\n\n<p>to get truly ignored text</p>",
        "id": 214005171,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603251493
    },
    {
        "content": "<p>i use <code>txt</code> as the block type sometimes, but then you don't get highlighting</p>",
        "id": 214007478,
        "sender_full_name": "Lokathor",
        "timestamp": 1603254840
    }
]