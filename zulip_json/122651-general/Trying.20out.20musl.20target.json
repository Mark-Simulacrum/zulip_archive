[
    {
        "content": "<p>Hi, noob question. I was trying to statically build with musl. I'm on Debian and have installed musl development packages. I'm following this short guide:<br>\n<a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html\">https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html</a></p>\n<p>I create a new test project and build:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustc --version\nrustc 1.50.0 (cb75ad5db 2021-02-10)\n\n$ cargo new test-musl &amp;&amp; cd test-musl\n$ cargo build --target x86_64-unknown-linux-musl\n</code></pre></div>\n<p>but the compiled binary is dynamically linked. What am I missing?</p>",
        "id": 226527848,
        "sender_full_name": "apiraino",
        "timestamp": 1613489644
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/80000\">#80000</a> <a href=\"https://github.com/rust-lang/rust/issues/79624\">#79624</a></p>",
        "id": 226528855,
        "sender_full_name": "hyd-dev",
        "timestamp": 1613490109
    },
    {
        "content": "<p>I just made a blank binary hello world project and built with musl, and it's statically linked. Do you have any dependencies that use shared libraries (like SQLite)?</p>",
        "id": 226529057,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1613490194
    },
    {
        "content": "<p>in this case it's a simple \"hello world\" project, so I assume being free from any dependencies</p>",
        "id": 226529221,
        "sender_full_name": "apiraino",
        "timestamp": 1613490276
    },
    {
        "content": "<p>Hm, I'm seeing \"statically linked\" with <code>ldd</code> but \"dynamically linked\" with <code>file</code></p>",
        "id": 226529306,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1613490323
    },
    {
        "content": "<p>The binaries are built PIE which can confuse things like file to misclassify them</p>",
        "id": 226529523,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613490418
    },
    {
        "content": "<p>ldd should be the more robust value</p>",
        "id": 226529554,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613490433
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> suggestion points to the root cause. on issue <a href=\"https://github.com/rust-lang/rust/issues/79624\">#79624</a> I read:</p>\n<p><code>x86_64-unknown-linux-musl</code> build target is generating ELF LSB shared object (dynamically linked) while <code>i686-unknown-linux-musl</code> is making ELF LSB executable (statically linked) binary.</p>\n<p>which I confirm is what is happening to me, too</p>",
        "id": 226529646,
        "sender_full_name": "apiraino",
        "timestamp": 1613490481
    },
    {
        "content": "<p>If I <code>ldd</code> the binary it looks to be actually static</p>\n<div class=\"codehilite\"><pre><span></span><code>~/tmp/test-musl$ cargo build --target x86_64-unknown-linux-musl\n    Finished dev [unoptimized + debuginfo] target(s) in 0.00s\n~/tmp/test-musl$ ldd target/x86_64-unknown-linux-musl/debug/test-musl\n    statically linked\n</code></pre></div>",
        "id": 226530026,
        "sender_full_name": "apiraino",
        "timestamp": 1613490610
    },
    {
        "content": "<p>I'll try rebuilding the actual project I wanted to build (which yes <span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> has many shared dependencies such as Postgres, OpenSSL, etc.)</p>",
        "id": 226530331,
        "sender_full_name": "apiraino",
        "timestamp": 1613490742
    },
    {
        "content": "<p>nope, can't get a statically built binary -_-<br>\nI can't build for target <code>i686-unknown-linux-musl</code> because I'd need to install a ton of i686 dependencies</p>",
        "id": 226532726,
        "sender_full_name": "apiraino",
        "timestamp": 1613491445
    },
    {
        "content": "<p>I'm not sure if you've already done this, so disregard if so, but you often have to configure the shared dependencies via features to statically link.</p>",
        "id": 226533253,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1613491580
    },
    {
        "content": "<p>yes, good point. In this case I only need to tell where the openssl development includes and libs are.<br>\nBut since the resulting binary is still <strong>dynamically linked</strong>  against openssl:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ export OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu\n$ export OPENSSL_INCLUDE_DIR=/usr/include\n$ cargo build --target x86_64-unknown-linux-musl\n...\n$ ldd target/x86_64-unknown-linux-gnu/debug/my-binary\n    linux-vdso.so.1 (0x00007ffe8f78e000)\n    libssl.so.1.1 =&gt; /lib/x86_64-linux-gnu/libssl.so.1.1 (0x00007f04758fd000)\n    libcrypto.so.1.1 =&gt; /lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f0475609000)\n    libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f04755ef000)\n    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f04755cd000)\n    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f0475489000)\n    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f0475483000)\n    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f04752bc000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f04770a1000)\n</code></pre></div>\n<p>I suspect that I'm doing something wrong and it silently fails</p>",
        "id": 226534202,
        "sender_full_name": "apiraino",
        "timestamp": 1613491867
    },
    {
        "content": "<blockquote>\n<p><code>export OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu</code></p>\n</blockquote>\n<p>I think that would link the openssl built with glibc dynamically.</p>",
        "id": 226534916,
        "sender_full_name": "hyd-dev",
        "timestamp": 1613492152
    },
    {
        "content": "<p>There's a <a href=\"https://github.com/sfackler/rust-openssl/blob/d7c36c63af66b5272b0b64a803983e5fa4fc3af6/openssl-sys/Cargo.toml#L15\"><code>vendored</code> feature</a> in <code>openssl</code>/<code>openssl-sys</code> crate.</p>",
        "id": 226535346,
        "sender_full_name": "hyd-dev",
        "timestamp": 1613492295
    },
    {
        "content": "<p>That would build openssl from source (<a href=\"https://docs.rs/openssl/0.10.32/openssl/#vendored\">https://docs.rs/openssl/0.10.32/openssl/#vendored</a>), but I have never tried that.</p>",
        "id": 226535805,
        "sender_full_name": "hyd-dev",
        "timestamp": 1613492452
    },
    {
        "content": "<p>I think you're right (or at least very close).  I can build a really statically compiled binary working around the issue by using a docker container that does the job for me<br>\n<a href=\"https://github.com/emk/rust-musl-builder\">https://github.com/emk/rust-musl-builder</a></p>\n<p>this container builds openssl (and other dependencies) internally, then builds your stuff.</p>",
        "id": 226536998,
        "sender_full_name": "apiraino",
        "timestamp": 1613492926
    },
    {
        "content": "<p>it's a bit of a workaround but it seems to unblock me for the moment.</p>",
        "id": 226537143,
        "sender_full_name": "apiraino",
        "timestamp": 1613492991
    }
]