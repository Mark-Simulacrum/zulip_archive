[
    {
        "content": "<p>imagine these definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Parent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Child</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// does not contain any references to Parent!!!</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">create_child</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Child</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is there a way to tell the language that a Child should not outlive the Parent that created it? for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"n\">create_child</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// parent is still usable for immutable and mutable borrows</span>\n\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// compile-time error to access `c` here</span>\n</code></pre></div>",
        "id": 219722780,
        "sender_full_name": "devsnek",
        "timestamp": 1607800474
    },
    {
        "content": "<p>You can store a <code>PhantomData&lt;&amp;'a Parent&gt;</code> in the child</p>",
        "id": 219723883,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607801292
    },
    {
        "content": "<p>oh, but that would prevent mutable borrows of the parent</p>",
        "id": 219723896,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607801308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/122651-general/topic/bound.20lifetime.20of.20child.20struct/near/219723896\">said</a>:</p>\n<blockquote>\n<p>oh, but that would prevent mutable borrows of the parent</p>\n</blockquote>\n<p>yeah that's the part i haven't been able to figure out...</p>",
        "id": 219723931,
        "sender_full_name": "devsnek",
        "timestamp": 1607801391
    },
    {
        "content": "<p>Isn't this isomorphic to scoped threads?</p>",
        "id": 219738438,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607823951
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Parent</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Scope</span><span class=\"p\">(());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">create_child</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Child</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Child</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Child</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">scope</span><span class=\"o\">&lt;'</span><span class=\"na\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">p</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">p</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">example2</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">creator</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">creator</span><span class=\"p\">.</span><span class=\"n\">create_child</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// parent is still usable for immutable and mutable borrows</span>\n<span class=\"w\">        </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">example</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">example2</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219738712,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607824496
    },
    {
        "content": "<p>Callback patterns are indeed very powerful for these things; btw, with a bit of self-plug, let's see how that reads using <a href=\"https://docs.rs/with_locals\">https://docs.rs/with_locals</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[with('local)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">scope</span><span class=\"o\">&lt;'</span><span class=\"na\">scope</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">scope</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">scope</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">local</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Scope</span><span class=\"p\">(()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">example2</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[with]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[with]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">creator</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">creator</span><span class=\"p\">.</span><span class=\"n\">create_child</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// parent is still usable for immutable and mutable borrows</span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">example</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// Just Works.</span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">example2</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219759371,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607861912
    },
    {
        "content": "<p>Actually, <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>, in this instance, we can skip the whole callback ordeal:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"p\">{</span><span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">stuff</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Parent</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Scope</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Child</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">create_child</span><span class=\"o\">&lt;'</span><span class=\"na\">scope</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">scope</span> <span class=\"nc\">Scope</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">Child</span><span class=\"o\">&lt;'</span><span class=\"na\">scope</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Child</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">scope</span><span class=\"o\">&lt;'</span><span class=\"na\">scope</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">scope</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">scope</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">scope</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Scope</span><span class=\"p\">(()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_c</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">creator</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">creator</span><span class=\"p\">.</span><span class=\"n\">create_child</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// parent is still usable for immutable and mutable borrows</span>\n<span class=\"w\">        </span><span class=\"n\">stuff</span>::<span class=\"o\">&lt;&amp;</span><span class=\"n\">Parent</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">stuff</span>::<span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* Uncomment to get an error */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// drop(_c);</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=691165b783b9f67820d58b1a00590f29\">Playground</a></li>\n</ul>",
        "id": 219832472,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607948069
    },
    {
        "content": "<p>Obviously the issue in these instances is that you cannot ensure that a given <code>&amp;'s Scope</code> originates from a specific <code>Parent</code>, imagining a <code>Child</code> constructor along the lines of <code>fn new_child&lt;'s&gt; (&amp;'_ Parent, &amp;'s Scope) -&gt; Child&lt;'s&gt;</code>.<br>\nIn that case, one needs to use lifetime generativity: infect each <code>Parent</code> (or a wrapper of it) with a unique invariant lifetime (which requires callbacks and/or macros), and then one can do stuff like <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c51a4ef5af751e09d89fda612bd2af06\">this</a>.</p>",
        "id": 219832914,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607948300
    },
    {
        "content": "<p>Do you need the <code>Scope</code> struct? Wouldn't<code>fn new_child&lt;'scope&gt;(&amp;'scope mut Parent) -&gt; (&amp;'scope mut Parent, Child&lt;'scope&gt;)</code> work? The trick is the re-outputting of the <code>&amp;mut</code> ref, I don't think you need more than that</p>",
        "id": 219836166,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607950111
    },
    {
        "content": "<p>I also want to drop this here, it's insane but elegant: <a href=\"https://internals.rust-lang.org/t/idea-two-lifetimes-on-unique-references/10613\">https://internals.rust-lang.org/t/idea-two-lifetimes-on-unique-references/10613</a></p>",
        "id": 219837220,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607950709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> indeed the <code>Scope</code> intermediate stuff is not required <em>per se</em>, it's just convenient when creating multiple children and stuff. But for one-time calls, indeed the whole thing can be simplified <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 219845744,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607955133
    }
]