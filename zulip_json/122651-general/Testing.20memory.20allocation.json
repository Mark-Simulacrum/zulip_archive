[
    {
        "content": "<p>I have some types which make raw alloc/free calls. I'm looking for a way to #[test] these types: for example, to check that when one is dropped \"free\" is called appropriately. Is there any way to do that?</p>",
        "id": 216544817,
        "sender_full_name": "Diggsey",
        "timestamp": 1605224040
    },
    {
        "content": "<p>could you use a custom allocator that tracks when alloc/free calls happen?</p>",
        "id": 216549396,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605227132
    },
    {
        "content": "<p>That's what I'm going with, the problem I have now is that I need TLS to record the details, but <code>thread_local!</code> itself allocates</p>",
        "id": 216556146,
        "sender_full_name": "Diggsey",
        "timestamp": 1605231841
    },
    {
        "content": "<p>and I don't know how to prevent the allocator recursively calling itself...</p>",
        "id": 216556251,
        "sender_full_name": "Diggsey",
        "timestamp": 1605231879
    },
    {
        "content": "<p>since storing that flags itself would require TLS...</p>",
        "id": 216556303,
        "sender_full_name": "Diggsey",
        "timestamp": 1605231895
    },
    {
        "content": "<p>Is there a reason you can't just use atomics directly?</p>",
        "id": 216557588,
        "sender_full_name": "simulacrum",
        "timestamp": 1605232633
    },
    {
        "content": "<p>e.g. <code>static ALLOC_COUNT: AtomicUsize = AtomicUsize::new(0);</code></p>",
        "id": 216557598,
        "sender_full_name": "simulacrum",
        "timestamp": 1605232651
    },
    {
        "content": "<p>I want a per-thread count</p>",
        "id": 216558145,
        "sender_full_name": "Diggsey",
        "timestamp": 1605233184
    },
    {
        "content": "<p>I figured out the problem anyway - it wasn't thread_local! allocating, it was a case where I accidentally used * instead of wrapping_mul, which resulted in a panic, and that's what was allocating, which then caused an ILLEGAL_INSTRUCTION error which masked the original panic...</p>",
        "id": 216558228,
        "sender_full_name": "Diggsey",
        "timestamp": 1605233262
    },
    {
        "content": "<p>ah ok</p>",
        "id": 216558449,
        "sender_full_name": "simulacrum",
        "timestamp": 1605233469
    }
]