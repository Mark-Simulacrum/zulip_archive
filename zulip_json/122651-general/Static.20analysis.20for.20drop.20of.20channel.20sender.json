[
    {
        "content": "<p>During training, I showed this code that uses MPSC channels and highlighted that you need to be sure to drop the \"extra\" <code>tx</code> to avoid having a deadlock/livelock when reading from the <code>rx</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mpsc</span>::<span class=\"n\">channel</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t1s</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to send to thread 2\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Two people asked if there were any static analysis available to highlight that problem, instead of just remembering to look out for it.</p>",
        "id": 242916034,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1623865283
    },
    {
        "content": "<p>FWIW, you can also make the <code>map</code> closure be <code>move</code>: the closure then owns that last instance of <code>tx</code>, and it is dropped when that closure temporary is, that is, at the end of the statement.<br>\nI don't know of a static analysis tool able to detect this, but an API change could be less susceptible to this issue: imagine if you needed to consume the initial <code>tx</code> to only then get <code>rx</code>.</p>",
        "id": 242948291,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623880475
    },
    {
        "content": "<blockquote>\n<p>make the map closure be move</p>\n</blockquote>\n<p>This sounds like the kind of thing I would do in my own code as it's clever and <em>much</em> more confusing than calling <code>drop</code> explicitly. </p>\n<blockquote>\n<p>an API change</p>\n</blockquote>\n<p>Which API are you thinking of? I assume not for something in <code>mpsc::*</code>.</p>",
        "id": 242949042,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1623880928
    },
    {
        "content": "<p>Let's say an API alternative; obviously not something for std, but I'll try to experiment with some designs and report back here with how they look like <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> who knows, maybe some crate could choose to feature them</p>",
        "id": 242957459,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623887156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Is there an explanation somewhere on why there will be a deadlock here? Thanks :)</p>",
        "id": 243010866,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1623933596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> in the snippet of code posted, there isn’t one. The rest of the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Thread 1 panicked\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Thread 2 panicked\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243011644,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1623934067
    },
    {
        "content": "<p>The rx waits for all the senders to be dropped before ending iteration</p>",
        "id": 243011728,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1623934099
    },
    {
        "content": "<p>If you write <code>for x in rx</code> or <code>rx.collect()</code>, it only finishes when the sender(s) are closed. This particular example is a bit subtle, because it's not collecting values from the channel, but <code>JoinHandle</code>s.</p>",
        "id": 243011730,
        "sender_full_name": "Laurențiu",
        "timestamp": 1623934099
    }
]