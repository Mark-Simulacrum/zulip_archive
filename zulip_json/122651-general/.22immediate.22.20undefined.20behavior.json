[
    {
        "content": "<p>We always said that <code>std::mem::uninitialized::&lt;[&amp;i32; 1]&gt;()</code> (and friends) were immediately undefined behavior, but that's not quite as true for <code>MaybeUninit</code>, is it?</p>\n<p>It's only UB when we call <code>assume_init</code> and fail to have set the right things, yeah?</p>",
        "id": 218867662,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607104309
    },
    {
        "content": "<p>Correct. <code>std::mem::uninitialized</code> is equivalent to immediately calling <code>assume_init</code>.</p>",
        "id": 218867796,
        "sender_full_name": "bjorn3",
        "timestamp": 1607104354
    },
    {
        "content": "<p>Especially given that <code>MaybeUninit::uninit()</code> is not <code>unsafe</code></p>",
        "id": 218867861,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607104383
    },
    {
        "content": "<p>so with <code>mem::uninitialized</code> there was <strong>no</strong> way of making a <code>[&amp;u8; 1]</code> piecemeal, but with <code>MaybeUninit</code> you could, right?</p>",
        "id": 218868089,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607104474
    },
    {
        "content": "<p>You could make a <code>MaybeUninit&lt;[&amp;u8; 1]&gt;</code>. It is still not allowed to make a direct <code>[&amp;u8; 1]</code> that is uninitialized.</p>",
        "id": 218868275,
        "sender_full_name": "bjorn3",
        "timestamp": 1607104555
    },
    {
        "content": "<p>One interesting way of seeing <code>MaybeUninit</code> is as an <code>Option</code> type that happens to have, implementation-wise, some layout and code optimizations whereby panics are replaced with UB.</p>",
        "id": 218868352,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607104569
    },
    {
        "content": "<p>right, but you can make <code>MaybeUninit&lt;[&amp;u8; 1]&gt;</code>, initialize the values, then <code>assume_init</code> without triggering UB. with <code>mem::uninitialized</code> there was no valid path to do so.</p>",
        "id": 218868427,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607104603
    },
    {
        "content": "<p>Indeed, that's where the <code>MaybeUninit</code> abstraction is incredibly useful</p>",
        "id": 218868522,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607104635
    },
    {
        "content": "<p>See also the main docs of <a href=\"https://docs.rs/uninit\">https://docs.rs/uninit</a></p>",
        "id": 218868605,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607104665
    },
    {
        "content": "<blockquote>\n<p>In hindsight, offering a mem::uninitialized function in the core library of Rust (even if it was marked unsafe), has been of the worst mistakes of the language. </p>\n</blockquote>\n<p>Hmm that sound familiar is this -</p>\n<blockquote>\n<p>Authors<br>\nDaniel Henry-Mantilla </p>\n</blockquote>\n<p>Yup there we go <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218870064,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607105167
    },
    {
        "content": "<blockquote>\n<p>has been <strong>one</strong> of the worst mistakes of the language</p>\n</blockquote>\n<p>(missing a word there <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>)</p>",
        "id": 218887158,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607113662
    },
    {
        "content": "<p><code>explicitely</code> -&gt; <code>explicitly</code></p>",
        "id": 218887251,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607113696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/.22immediate.22.20undefined.20behavior/near/218887158\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>has been <strong>one</strong> of the worst mistakes of the language</p>\n</blockquote>\n<p>(missing a word there <span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span>)</p>\n</blockquote>\n<p>I knew I was missing a word somewhere! I remember spotting that from a place where I couldn't edit my docs, and later on being unable to find it <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 218887403,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607113788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/.22immediate.22.20undefined.20behavior/near/218868352\">said</a>:</p>\n<blockquote>\n<p>One interesting way of seeing <code>MaybeUninit</code> is as an <code>Option</code> type that happens to have, implementation-wise, some layout and code optimizations whereby panics are replaced with UB.</p>\n</blockquote>\n<p>It's an option type with unobservable discriminant. That is, it's possible to branch on whether an <code>Option</code> is <code>Some</code> or <code>None</code> but <code>MaybeUninit</code> has a \"layout optimization\" that stores this discriminant in the instruction pointer. :)</p>",
        "id": 218892020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607116424
    },
    {
        "content": "<p>That's actually a fun way to look at this I must say :)<br>\nassume_init is equivilant to <code>option.unwrap_or_else(unreachable_unchecked)</code> but with less memory usage(no discriminant) :)</p>",
        "id": 219585427,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1607681715
    },
    {
        "content": "<blockquote>\n<p>There currently <strong>are</strong> only two exceptions / valid use cases:</p>\n</blockquote>\n<p>(missing \"are\" <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>)</p>",
        "id": 219675149,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607729796
    },
    {
        "content": "<p>Or</p>\n<blockquote>\n<p>There <strong>are</strong> currently only two...</p>\n</blockquote>",
        "id": 219675164,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607729812
    },
    {
        "content": "<p>(Probably the second one is better)</p>",
        "id": 219675183,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607729825
    }
]