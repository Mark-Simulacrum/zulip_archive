[
    {
        "content": "<p>I made two functions, one returns a String::new() with a let binding and another one returns a String::new() with a const binding</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">const_string</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nb\">String</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">noconst_string</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Why is there different code generated? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\n<a href=\"https://rust.godbolt.org/z/nWP63z\">https://rust.godbolt.org/z/nWP63z</a></p>",
        "id": 211197176,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1600986483
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>playground::const_string:\n    movq    %rdi, %rax\n    movq    .L__unnamed_1+16(%rip), %rcx\n    movq    %rcx, 16(%rdi)\n    movups  .L__unnamed_1(%rip), %xmm0\n    movups  %xmm0, (%rdi)\n    retq\n\nplayground::noconst_string:\n    movq    %rdi, %rax\n    movq    $1, (%rdi)\n    xorps   %xmm0, %xmm0\n    movups  %xmm0, 8(%rdi)\n    retq\n\n.L__unnamed_1:\n    .asciz  &quot;\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000&quot;\n</code></pre></div>\n\n\n<p>For the lazy like me</p>",
        "id": 211198264,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600987277
    },
    {
        "content": "<p>LLVM IR:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"vg\">@0</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">24</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">24</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">\"\\01\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\"</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n\n<span class=\"c\">; playground::const_string</span>\n<span class=\"c\">; Function Attrs: nounwind nonlazybind uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN10playground12const_string17hb89a864b3fed2ca7E</span><span class=\"p\">(</span><span class=\"nv\">%\"std::string::String\"</span><span class=\"p\">*</span> <span class=\"k\">noalias</span> <span class=\"k\">nocapture</span> <span class=\"k\">sret</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">24</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"nv\">%\"std::string::String\"</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">tail</span> <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">24</span><span class=\"p\">)</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">24</span><span class=\"p\">)</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">24</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;,</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">24</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@0</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">0</span><span class=\"p\">),</span> <span class=\"k\">i64</span> <span class=\"m\">24</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">; playground::noconst_string</span>\n<span class=\"c\">; Function Attrs: nounwind nonlazybind uwtable writeonly</span>\n<span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN10playground14noconst_string17hfb4d262f952a04e4E</span><span class=\"p\">(</span><span class=\"nv\">%\"std::string::String\"</span><span class=\"p\">*</span> <span class=\"k\">noalias</span> <span class=\"k\">nocapture</span> <span class=\"k\">sret</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">24</span><span class=\"p\">)</span> <span class=\"nv\">%x</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#1</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%_1.sroa.0.0..sroa_idx.i</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"nv\">%\"std::string::String\"</span><span class=\"p\">,</span> <span class=\"nv\">%\"std::string::String\"</span><span class=\"p\">*</span> <span class=\"nv\">%x</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">0</span>\n  <span class=\"k\">store</span> <span class=\"k\">i64</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"k\">i64</span><span class=\"p\">*</span> <span class=\"nv\">%_1.sroa.0.0..sroa_idx.i</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nv\">!alias.scope</span> <span class=\"nv nv-Anonymous\">!2</span>\n  <span class=\"nv\">%_1.sroa.4.0..sroa_idx.i</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"nv\">%\"std::string::String\"</span><span class=\"p\">,</span> <span class=\"nv\">%\"std::string::String\"</span><span class=\"p\">*</span> <span class=\"nv\">%x</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">1</span>\n  <span class=\"nv\">%_1.sroa.4.0..sroa_cast.i</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"k\">i64</span><span class=\"p\">*</span> <span class=\"nv\">%_1.sroa.4.0..sroa_idx.i</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">tail</span> <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memset.p0i8.i64</span><span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">)</span> <span class=\"nv\">%_1.sroa.4.0..sroa_cast.i</span><span class=\"p\">,</span> <span class=\"k\">i8</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">16</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span> <span class=\"vg\">#4</span><span class=\"p\">,</span> <span class=\"nv\">!alias.scope</span> <span class=\"nv nv-Anonymous\">!2</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<p>the const one becomes a memcpy off a global <code>@0</code> and the non-const one is a memset. maybe llvm is unwilling to \"inline\" the memcpy.</p>",
        "id": 211217231,
        "sender_full_name": "kennytm",
        "timestamp": 1601007958
    }
]