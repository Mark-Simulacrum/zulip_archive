[
    {
        "content": "<p>For <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f4adbdff95841b974ef0a63fd045a6b8\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f4adbdff95841b974ef0a63fd045a6b8</a></p>\n<p>Can someone explain the error in <code>f</code> here? I feel like either both should not work or both should?</p>",
        "id": 214446058,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603569226
    },
    {
        "content": "<p>Returning <code>impl Trait</code> has to resolve to a specific type in the function body. In <code>g</code> that's <code>vec::IntoIter</code>, but in <code>f</code> it's completely unknown.</p>",
        "id": 214446258,
        "sender_full_name": "cuviper",
        "timestamp": 1603569462
    },
    {
        "content": "<p>I don't know why the error calls it \"recursive\" though</p>",
        "id": 214446321,
        "sender_full_name": "cuviper",
        "timestamp": 1603569523
    },
    {
        "content": "<p>The recursive opaque type error is supposed to be for opaque types where the concrete type uses, but is not equal to the opaque type itself. For example</p>",
        "id": 214446546,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603569773
    },
    {
        "content": "<p>You can give it a type like <code>Err::&lt;std::iter::Empty&lt;i32&gt;, _&gt;(err)</code></p>",
        "id": 214446550,
        "sender_full_name": "cuviper",
        "timestamp": 1603569780
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Where the return type has to satisfy <code>T = [T; 1]</code></p>",
        "id": 214446579,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603569824
    },
    {
        "content": "<p>If the opaque type actually equals the resolved type it should have a different note.</p>",
        "id": 214446634,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603569865
    },
    {
        "content": "<p>Ok, so that is misapplied in this case?</p>",
        "id": 214446670,
        "sender_full_name": "cuviper",
        "timestamp": 1603569911
    }
]