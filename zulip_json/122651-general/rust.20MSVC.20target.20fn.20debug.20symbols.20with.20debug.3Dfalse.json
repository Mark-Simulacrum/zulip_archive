[
    {
        "content": "<p>Hi. I recently added PDB support to cargo-bloat so that it could support the MSVC target (<a href=\"https://github.com/RazrFalcon/cargo-bloat/pull/77\">https://github.com/RazrFalcon/cargo-bloat/pull/77</a>)<br>\nBut the cargo-bloat maintainer now said that if it does not work on release builds without having to manually enable debug symbols via <code>debug=true</code>it is useless (<a href=\"https://github.com/RazrFalcon/cargo-bloat/pull/77#issuecomment-1002735688\">https://github.com/RazrFalcon/cargo-bloat/pull/77#issuecomment-1002735688</a>)</p>\n<blockquote>\n<p>So we have to either figure how to get it in a release build or remove PDB support.</p>\n<p>Yes, we can add a warning about PDB + release build, but it seems like a dirty hack.</p>\n</blockquote>\n<p>Does anyone know a way of getting the necessary symbol information with a default release profile? I don't think it's present in the PDB file, but maybe it is in some rustc specific file in the target directory? This is a long shot but I figured I'd ask.</p>",
        "id": 266370758,
        "sender_full_name": "Nick12",
        "timestamp": 1640805032
    },
    {
        "content": "<p>You could set the <code>CARGO_PROFILE_RELEASE_DEBUG=true</code> env var to override the default configuration for the release profile. This will cause the entire project to be recompiled again though. (and probably again once you do <code>cargo build --release</code> as I think it overwrites the result of any previous <code>cargo build --release</code> run.) I don't use windows myself so I don't know if there is a way to get symbol names without a pdb on windows.</p>",
        "id": 266371132,
        "sender_full_name": "bjorn3",
        "timestamp": 1640805360
    },
    {
        "content": "<p>Thanks! That is an interesting idea, but I'm not sure the recompiles are worth it. Plus, it sounds to me like a potentially dangerous thing to do. Couldn't that make it so someone's release binary unintentionally has debug symbols enabled, and they accidentally end up shipping that binary to customers? Iirc games and other propietary software try to <em>not</em> ship with debug symbols. I guess since the PDB is a separate file maybe it's not that big a deal, but idk if rustc also embeds COFF debug info or other debug info in the PE binary itself with debug=true</p>",
        "id": 266371878,
        "sender_full_name": "Nick12",
        "timestamp": 1640805998
    },
    {
        "content": "<p>You can set a different target directory, but I don't think compiling the code twice is an issue. I use <code>cargo bloat</code> from time to time and I expect it to take a while anyway.</p>",
        "id": 266371919,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640806052
    },
    {
        "content": "<p>A target directory would probably fix most of my worries. That also fixes a big part of the recompile problem right? At least for the first cargo build after cargo bloat</p>",
        "id": 266372171,
        "sender_full_name": "Nick12",
        "timestamp": 1640806129
    },
    {
        "content": "<p>With a different target directory, it will recompile the code once. Without, it will either recompile twice (once for <code>cargo bloat</code>, once on the next <code>cargo build --release</code>) or not at all (if the project already enables debug symbols).</p>",
        "id": 266372371,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640806192
    },
    {
        "content": "<p>So it would be something like setting the <code>CARGO_TARGET_DIR</code>environment variable? Adding something like target-bloat would probably annoy people since they would have to add it to their gitignore. Do you think adding it as a subdirectory of the actual target dir is a horrible idea? Like .\\target\\target-cargo-bloat</p>",
        "id": 266372650,
        "sender_full_name": "Nick12",
        "timestamp": 1640806461
    },
    {
        "content": "<blockquote>\n<p>Do you think adding it as a subdirectory of the actual target dir is a horrible idea? Like .\\target\\target-cargo-bloat</p>\n</blockquote>\n<p>Not at all! I know some other tools do this. Just make sure that the name is unlikely to conflict with the name someone may give to a custom profile.</p>",
        "id": 266373488,
        "sender_full_name": "bjorn3",
        "timestamp": 1640807290
    },
    {
        "content": "<p><code>targrt/cargo-bloat</code> should work</p>",
        "id": 266376147,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640809883
    }
]