[
    {
        "content": "<p>Has there been any work in rustup and/or cargo on auto-updating code when a library changes and causes it to be ambiguous? E.g. if upgrading a library dependency would lead to a name collision with method call syntax due to a new trait impl, <code>cargo update</code> could resolve the ambiguity based on how the code compiled beforehand, and then automatically update the code to use UFCS to match.</p>",
        "id": 242009810,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623203714
    },
    {
        "content": "<p>cargo update seems like the wrong command for that, cargo fix is a better place</p>",
        "id": 242009927,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623203839
    },
    {
        "content": "<p>I would be very surprised and a little upset if cargo update modified my code</p>",
        "id": 242009934,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623203856
    },
    {
        "content": "<p>It seems like the problem with cargo fix would be that by the time it gets run, the dependencies have already been upgraded and the information about how to resolve ambiguities would be lost.</p>",
        "id": 242009958,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623203883
    },
    {
        "content": "<p>check if the repo has source control, get cargo.toml/lock from the latest committed version to get information needed?</p>",
        "id": 242026850,
        "sender_full_name": "The 8472",
        "timestamp": 1623224270
    },
    {
        "content": "<p>cargo update --fix seems ok</p>",
        "id": 242040061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623232058
    },
    {
        "content": "<p>But I really don't think it should be on by default, it's too surprising</p>",
        "id": 242040082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623232071
    },
    {
        "content": "<p>maybe <code>cargo update</code> could run <code>check</code> before and after and abort if it regresses and suggest adding <code>--fix</code>?</p>",
        "id": 242045096,
        "sender_full_name": "The 8472",
        "timestamp": 1623235055
    },
    {
        "content": "<p>I don't know exactly how dependabot is implemented, but if it uses <code>cargo update</code> that would allow RCE on dependabot if it starts doing a <code>cargo check</code>. In any case it is just surprising if <code>cargo update</code> tries to compile your code.</p>",
        "id": 242045437,
        "sender_full_name": "bjorn3",
        "timestamp": 1623235281
    },
    {
        "content": "<p>But isn't the point of check that it does not compile the code?</p>\n<p>or, are you saying that it could run <a href=\"http://build.rs\">build.rs</a> or something?</p>",
        "id": 242083525,
        "sender_full_name": "Lokathor",
        "timestamp": 1623252404
    },
    {
        "content": "<p><code>check</code> does compile and run build scripts and proc macros</p>",
        "id": 242083666,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623252461
    },
    {
        "content": "<p>I don't have any strong opinions about whether this would be default behavior vs adding flags, was just wondering if anyone has thought about the idea/if it's architecturally feasible.</p>",
        "id": 242092264,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623255648
    },
    {
        "content": "<p>I recall some discussion about this in the context of rust-analyzer (for some reason)</p>",
        "id": 242092783,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623255862
    },
    {
        "content": "<p>specifically about machine-applicable migration instructions between versions</p>",
        "id": 242092825,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623255883
    },
    {
        "content": "<p>ah, it involved rust-analyzer because of its structural-search-replace feature</p>",
        "id": 242092897,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623255910
    },
    {
        "content": "<p>E.g. I'm not sure whether \"converting a method call with one version of a crate to UFCS with another version of a crate\" is well-defined, although there is probably an intuitive meaning most of the time. In the general case, if <code>x.foo()</code> resolves to <code>A::foo(x)</code> prior to an upgrade and is ambiguous between <code>A::foo(x)</code> and <code>B::foo(x)</code> afterwards, it still might not be sound to autoreplace it with <code>A::foo(x)</code> if we allow the upgrade to make arbitrary structural changes to the definitions of <code>A</code> and <code>B</code>.</p>",
        "id": 242093784,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623256273
    },
    {
        "content": "<p>It might require constraining the problem somewhat, e.g. \"assume the old and new crate versions are semver-compatible with the exception of name resolution ambiguity\"</p>",
        "id": 242093997,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623256353
    },
    {
        "content": "<p>Even so, it seems like it would nice for mostly-unmaintained projects to be able to upgrade their dependencies reliably without making manual changes to their code.</p>",
        "id": 242094118,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623256421
    }
]