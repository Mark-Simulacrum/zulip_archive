[
    {
        "content": "<p>(Sorry I have no idea how to use this chat tool)</p>\n<p>It appears that <code>cargo upgrade</code> completely disobeys semver pinned patch versions. This is a clear violation of what semver users expect.... why is this the case?</p>",
        "id": 203202122,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1594155537
    },
    {
        "content": "<p>Can you give an example?</p>",
        "id": 203202331,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594155640
    },
    {
        "content": "<p><code>tide @ 0.11.0</code> specifies <code>async-sse @ 3.0.0</code>. Running <code>cargo update</code> in the Tide repo causes it to install <code>async-sse @ 3.0.1</code>, which does not satisfy a semver <code>3.0.0</code>.</p>",
        "id": 203202620,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1594155786
    },
    {
        "content": "<p>Note that <code>cargo upgrade</code> is an external Cargo subcommand that's supposed to replace dependencies in <code>Cargo.toml</code> with their newest available version; <code>cargo update</code> is a builtin subcommand that respects <code>Cargo.toml</code> versions and updates only dependencies in <code>Cargo.lock</code></p>",
        "id": 203202661,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594155809
    },
    {
        "content": "<p>3.0.1 is semver-compatible with 3.0.0</p>",
        "id": 203202689,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594155823
    },
    {
        "content": "<p>So <code>cargo update</code> is expected to update to that. In fact it should update to any 3.x.y version of <code>async-sse</code>.</p>",
        "id": 203202809,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594155884
    },
    {
        "content": "<p>let me check how tide defines it</p>",
        "id": 203202900,
        "sender_full_name": "DPC",
        "timestamp": 1594155935
    },
    {
        "content": "<p>Tide just has a default requirement</p>",
        "id": 203202937,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594155956
    },
    {
        "content": "<p>If you require an <em>exact</em> semver version you need to use <code>dep = \"=1.2.3\"</code></p>",
        "id": 203202999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594155975
    },
    {
        "content": "<p>tide does this <a href=\"https://github.com/http-rs/tide/blob/master/Cargo.toml#L36\">https://github.com/http-rs/tide/blob/master/Cargo.toml#L36</a></p>",
        "id": 203203444,
        "sender_full_name": "DPC",
        "timestamp": 1594156204
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span>  can't use the exact semver version because it is a transitive dependency</p>",
        "id": 203203564,
        "sender_full_name": "DPC",
        "timestamp": 1594156281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> why do you say that it disobeys semver?</p>",
        "id": 203203813,
        "sender_full_name": "DPC",
        "timestamp": 1594156420
    },
    {
        "content": "<p>3.0.1 is assumed _compatible_ with 3.0.0, but when specifying \"x.x.x\" the reasonable assumption would be \"that exact version\". I suppose <code>=</code> solves this but the default behavior is quite surprising and I am quite sure I will not be the last person to run into issues surrounding this.</p>",
        "id": 203205636,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1594157386
    },
    {
        "content": "<p>It is documented at <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\">https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html</a> fwiw</p>",
        "id": 203205846,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594157490
    },
    {
        "content": "<p>As well as in the Rust book</p>",
        "id": 203205891,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594157519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> A dependency version specified as <code>\"3.0.0\"</code> means <code>\"^3.0.0\"</code>, or in other words \"semver compatible with 3.0.0\". That allows <code>3.0.y</code> or <code>3.x.y</code>. The default is that way to ensure that the ecosystem can upgrade and move forward without massive friction, given semver compatibility. <code>=</code> is the uncommon case, and having to use it suggests that something has broken semver or some other unusual use case applies, so it isn't the default.</p>",
        "id": 203206240,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594157688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> What if somebody specified <code>1.0.0</code> and somebody else specified <code>1.0.1</code>? If the default was an exact match, then this would be an error, as cargo never duplicates semver compatible versions. When explicitly using an exact match this can already happen, but making exaxt matches the default would make it pretty much impossible to not happen.</p>",
        "id": 203206242,
        "sender_full_name": "bjorn3",
        "timestamp": 1594157689
    }
]