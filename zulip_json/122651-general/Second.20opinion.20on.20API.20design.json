[
    {
        "content": "<p>I'm designing the API for a library. The library has the concept of a \"tag\", which the caller can provide, and which the library will give back to the caller later. The tag has to work as a filename on the filesystem, and the library receives it back from the system later as a filename and can use that to pass it back to the caller.</p>\n<p>Should I:<br>\n1) Accept tags as <code>AsRef&lt;OsStr&gt;</code>, and return them to the caller as <code>OsString</code>.<br>\n  Advantages: no conversion, no checks, just return what I get from the OS.<br>\n  Disadvantages: Pattern matching on an <code>OsString</code> feels painful.<br>\n2) Accept tags as <code>&amp;str</code>, return them to the caller as <code>String</code>.<br>\n  Advantages: Easy pattern matching and indexing.<br>\n  Disadvantage: Conversion (<code>.to_string_lossy()</code>) every time it comes back from the OS.</p>",
        "id": 187237712,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580711585
    },
    {
        "content": "<p>...hrm, I forgot that you also can't pattern match <code>Option&lt;String&gt;</code> using <code>Option&lt;&amp;str&gt;</code>, which makes the use of <code>String</code> not really any less painful.</p>",
        "id": 187238478,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580713026
    },
    {
        "content": "<p><code>match opt.as_deref() {}</code> should work</p>",
        "id": 187240401,
        "sender_full_name": "dubi steinkek",
        "timestamp": 1580715921
    },
    {
        "content": "<p>Unfortunately what I have is a struct containing two fields, one of which is <code>Option&lt;String&gt;</code> (or <code>Option&lt;OsString&gt;</code>).</p>",
        "id": 187240710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580716419
    },
    {
        "content": "<p>So <code>as_deref()</code> by itself doesn't help.</p>",
        "id": 187240768,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580716454
    },
    {
        "content": "<p>for pathing, you have to stick to OsString or it will block some non-utf8 windows file paths from being used. of course, maybe that's not critical for this application i guess.</p>",
        "id": 187247790,
        "sender_full_name": "Lokathor",
        "timestamp": 1580724262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> This library doesn't have to deal with arbitrary file paths, only paths it produced in the first place. Also, this library can't run on Windows, for unrelated reasons. (It uses UNIX sockets.)</p>",
        "id": 187278075,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580747276
    },
    {
        "content": "<p>Then simply String / str should be sufficient.</p>\n<p>Still, you'll have to give up on matching all of it at once i guess</p>",
        "id": 187278455,
        "sender_full_name": "Lokathor",
        "timestamp": 1580747447
    }
]