[
    {
        "content": "<p>I think I found UB in <code>ThreadId::new</code>: If the thread ids become exhausted and you try to get a new thread (by spawning a new thread) id from a panic handler you set previously the lock is acquired re-entrantly, which isn't allowed as the lock is never initialized.</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/7350f655ef7e1b00f287eca6f8c0016a8985900c/library/std/src/thread/mod.rs#L1011\">https://github.com/rust-lang/rust/blob/7350f655ef7e1b00f287eca6f8c0016a8985900c/library/std/src/thread/mod.rs#L1011</a></p>",
        "id": 241138108,
        "sender_full_name": "bjorn3",
        "timestamp": 1622635031
    },
    {
        "content": "<p>For the record, exhausting a u64 is virtually impossible. Take a clock rate faster than any existing CPU, e.g. 10GHz, and increase the counter by one every cycle. Then it still takes <a href=\"https://www.google.com/search?q=2^64%20/%20(10*10^9*3600*24*365)\">almost 60 years</a> to reach u64::MAX. (And nobody can create a new thread every clock cycle.)</p>\n<p>Anyway, we can probably safely replace the <code>panic</code> with an <code>abort</code> to fix the issue, right?</p>",
        "id": 241139852,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1622636172
    },
    {
        "content": "<p>Yes, or maybe nicer explicitly unlock the lock before panicking.</p>",
        "id": 241139911,
        "sender_full_name": "bjorn3",
        "timestamp": 1622636219
    },
    {
        "content": "<p>If we’re assuming a few 100s of clock cycles for spawning new threads (or whatever operation that creates new ThreadIds) then the 60 years become ten-thousands of years. I think <code>abort</code> is a very reasonable approach. There won’t be anyone exhausting a u64 ThreadID <em>by accident</em> in the next few centuries.</p>",
        "id": 241140642,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1622636657
    },
    {
        "content": "<p>It might matter in extreme use cases where programmers have to prove there not existing a single code path leading to an <code>abort</code>. Kind of like <a href=\"https://github.com/Technolution/rustig\">https://github.com/Technolution/rustig</a> but then for <code>abort</code>s <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Some programs might rely on these kind of assertions for certification. (<code>panic</code>s are also frowned upon in those use cases, but can potentially be recovered from at least, e.g. using <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\"><code>catch_unwind</code></a>).</p>",
        "id": 241142435,
        "sender_full_name": "Pointerbender",
        "timestamp": 1622637685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/ThreadId.3A.3Anew.20UB/near/241139911\">said</a>:</p>\n<blockquote>\n<p>Yes, or maybe nicer explicitly unlock the lock before panicking.</p>\n</blockquote>\n<p>or at least add a comment :D</p>",
        "id": 245009120,
        "sender_full_name": "RalfJ",
        "timestamp": 1625560212
    },
    {
        "content": "<p>So... I think with some aggressive optimizations, it may be possible to do a leakocalypse style thread id generation without actually creating any threads. Basically it goes as follows: use the thread builder to create a thread with a stack size that will cause the inner thread creation to panic. catch the panic, repeat.</p>",
        "id": 245025170,
        "sender_full_name": "oli",
        "timestamp": 1625570990
    },
    {
        "content": "<p>Exhausting u64 is still pretty hard. But I agree that elegant code without a failure mode such as this would be nicer.</p>",
        "id": 245027548,
        "sender_full_name": "nagisa",
        "timestamp": 1625572528
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/87011\">https://github.com/rust-lang/rust/pull/87011</a></p>",
        "id": 245482911,
        "sender_full_name": "RalfJ",
        "timestamp": 1625856781
    }
]