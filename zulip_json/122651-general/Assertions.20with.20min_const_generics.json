[
    {
        "content": "<p>Is it possible to have compile-time assertions on const generic values in beta? E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// make this a compile-time check instead of runtime</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231524020,
        "sender_full_name": "John Gallagher",
        "timestamp": 1616525790
    },
    {
        "content": "<p>not with min_const_generics, no</p>",
        "id": 231524211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616525866
    },
    {
        "content": "<p>not sure if it's planned for <code>const_generics</code></p>",
        "id": 231524227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616525874
    },
    {
        "content": "<p>shucks. thanks for the quick answer :)</p>",
        "id": 231524464,
        "sender_full_name": "John Gallagher",
        "timestamp": 1616525975
    },
    {
        "content": "<p>yes, it's possible with associated consts tricks like <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=1add07d188960dcb18dd305d8380ccb5\">https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=1add07d188960dcb18dd305d8380ccb5</a> but that comes with subpar errors for now</p>",
        "id": 231525348,
        "sender_full_name": "lqd",
        "timestamp": 1616526303
    },
    {
        "content": "<p>see for example what's done in stdarch for some of these, including using only one such struct (rather than one per macro invocation) to limit the MIR sizes, compile times, and so on: <a href=\"https://github.com/rust-lang/stdarch/blob/6495bb0e33578443c21764655a4dd8b55399c008/crates/core_arch/src/macros.rs\">https://github.com/rust-lang/stdarch/blob/6495bb0e33578443c21764655a4dd8b55399c008/crates/core_arch/src/macros.rs</a></p>",
        "id": 231525777,
        "sender_full_name": "lqd",
        "timestamp": 1616526456
    },
    {
        "content": "<p>oh that is an <em>excellent</em> hack, I love it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 231526287,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616526629
    },
    {
        "content": "<p>I recall this now: <a class=\"stream-topic\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics\">#t-compiler/const-eval &gt; static_assert for const generics</a></p>",
        "id": 231526589,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616526725
    },
    {
        "content": "<p>(IIRC if you use such tricks with multiple crates, you don't even see the code where the error happens, so it's probably best to wait until error reporting is improved here)</p>",
        "id": 231526616,
        "sender_full_name": "lqd",
        "timestamp": 1616526733
    },
    {
        "content": "<p>that's the one</p>",
        "id": 231526636,
        "sender_full_name": "lqd",
        "timestamp": 1616526739
    },
    {
        "content": "<p>you can also do similar tricks to cast consts, which is otherwise not super easy to do with <code>min_const_generics</code> sometimes</p>",
        "id": 231526892,
        "sender_full_name": "lqd",
        "timestamp": 1616526833
    },
    {
        "content": "<p>there should really be a const_assert in the standard library, at least in nightly</p>",
        "id": 231528367,
        "sender_full_name": "Lokathor",
        "timestamp": 1616527348
    },
    {
        "content": "<p><code>assert!</code> works in constants if you enable <code>#![feature(const_panic)]</code></p>",
        "id": 231534485,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616529713
    }
]