[
    {
        "content": "<p>In a test case, I need to spawn a thread (<code>std::thread::spawn</code>). How can I safely do assertions in that thread, as part of the test case? As far as I can tell, the thread panics but the test keeps running. If the thread fails, the main thread will run forever, so the test case keeps running forever.</p>",
        "id": 186825055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580243310
    },
    {
        "content": "<p>Can you <code>join</code> it?</p>",
        "id": 186825561,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580243613
    },
    {
        "content": "<p>The main thread is waiting on something else, and waiting on both the something else and the child thread would substantially complicate the logic.</p>",
        "id": 186825687,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580243648
    },
    {
        "content": "<p>I suppose you'll need to synchronize them some way, depending on what the main thread is doing.</p>",
        "id": 186825786,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580243713
    },
    {
        "content": "<p>(The child thread exists to call <code>wait</code> on a child process, and then notify the main thread via something it's already watching.)</p>",
        "id": 186825789,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580243715
    },
    {
        "content": "<p>(I really wish that <code>pidfd</code> worked everywhere, but even <em>with</em> that it'd be substantially more complex than the simple test case I'm trying to write.)</p>",
        "id": 186825950,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580243792
    },
    {
        "content": "<p>Do you expect the helper thread to panic (outside of the case when the child could not be launched)?</p>",
        "id": 186826135,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580243891
    },
    {
        "content": "<p>Even that case would be problematic, as I'd like to not have the test case turn into an infinite loop in that case. But yes, the helper thread could also <code>assert!</code>.</p>",
        "id": 186826240,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580243967
    },
    {
        "content": "<p>Like.. if you do <code>Command::new(\"foo\").status()</code>, it's probably not going to panic, even if I don't think it's really documented not to.</p>",
        "id": 186826249,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580243977
    },
    {
        "content": "<p>I actually call <code>.spawn()</code> in the main thread, and then pass the resulting <code>Child</code> to the helper thread.</p>",
        "id": 186826340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244009
    },
    {
        "content": "<p>So that case will panic in the main thread.</p>",
        "id": 186826356,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244020
    },
    {
        "content": "<p>The helper thread just calls <code>let status = child.wait().expect(\"...\");</code> and <code>assert!(status.success());</code>.</p>",
        "id": 186826404,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244054
    },
    {
        "content": "<p>Why not send <code>status</code> over a channel to the main thread?</p>",
        "id": 186826434,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244076
    },
    {
        "content": "<p>I very easily could (the helper thread exists to wait and then pass data to the main thread, and this is a test case <em>for</em> a channel-like construct). But it feels fragile that if the child thread panics for any reason the parent thread will hang.</p>",
        "id": 186826528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244128
    },
    {
        "content": "<p>I'd like something better than \"carefully avoid panicking\".</p>",
        "id": 186826552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244144
    },
    {
        "content": "<p>There is <code>catch_unwind</code>, I suppose, so you could wrap your helper thread logic inside that</p>",
        "id": 186826605,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244182
    },
    {
        "content": "<p>I don't have other ideas, sorry</p>",
        "id": 186826781,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244272
    },
    {
        "content": "<p>Yeah, I could certainly go there. But in the case of a test case, what <em>can</em> I call from the thread that'll cause the test to fail, and ideally still run destructors on the way out?</p>",
        "id": 186826801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244287
    },
    {
        "content": "<p>That depends on what the main thread (test) is doing. If they use a channel to communicate, it can detect that the sender was closed. But there's no \"test framework runtime\" per se that could detect that a background thread has panicked.</p>",
        "id": 186827023,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244399
    },
    {
        "content": "<p>Unfortunately, the nature of the channel I'm using is that you can't tell if the other end was closed.</p>",
        "id": 186827094,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244445
    },
    {
        "content": "<p>Which is why the main thread would block forever: it's waiting on a message that'll never come.</p>",
        "id": 186827118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244464
    },
    {
        "content": "<p>And I guess there's a reason why you can't use a standard channel to pass back the result, regardless of what the test is.. testing.</p>",
        "id": 186827231,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244523
    },
    {
        "content": "<p>Right. Because the main thread can't simultaneously wait on a standard channel and the channel I'm testing, without a lot more complexity in the test.</p>",
        "id": 186827295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244577
    },
    {
        "content": "<p>Then you could spawn a third thread to wait on the channel you're testing and have the main wait for both (using channels, if you need to)</p>",
        "id": 186827432,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244654
    },
    {
        "content": "<p>Yeah, that's a bit awkward</p>",
        "id": 186827475,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244695
    },
    {
        "content": "<p>Heh. True, and true. :)</p>",
        "id": 186827479,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244701
    },
    {
        "content": "<p>I think I'm more broadly trying to figure out how people write tests involving threads in a less painful way.</p>",
        "id": 186827509,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244721
    },
    {
        "content": "<p>With a lot of joining and channels, I'd wager :-). One thing I like about the Windows API is that you can wait on basically every type of handle.</p>",
        "id": 186827757,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244854
    },
    {
        "content": "<p>The same is true on Linux with fds and select/poll/epoll, as long as you have an fd. signalfd and pidfd make it possible to wait on more things as fds.</p>",
        "id": 186827831,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244910
    },
    {
        "content": "<p>And timerfd :D</p>",
        "id": 186827887,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580244947
    },
    {
        "content": "<p>And timerfd, yes. :)</p>",
        "id": 186827950,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580244967
    },
    {
        "content": "<p>Hmm, can you pass the thread a helper struct that wraps a channel <code>Sender</code> and checks <code>thread::panicking</code> in <code>drop</code>?</p>",
        "id": 186828009,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245020
    },
    {
        "content": "<p>...devious. Thinking...</p>",
        "id": 186828070,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245076
    },
    {
        "content": "<p>Actually, the real problem might be how to wait for one thread out of a set</p>",
        "id": 186828235,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245172
    },
    {
        "content": "<blockquote>\n<p>This can also be used in multithreaded applications, in order to send a message to other threads warning that a thread has panicked (e.g., for monitoring purposes).</p>\n</blockquote>",
        "id": 186828237,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245172
    },
    {
        "content": "<p>Yeah, that's pretty much what I need...</p>",
        "id": 186828243,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245177
    },
    {
        "content": "<p>Wouldn't necessarily even have to use a channel, could just print a message to stderr and abort. That sounds like a useful primitive for thread testing.</p>",
        "id": 186828247,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245184
    },
    {
        "content": "<blockquote>\n<p>Actually, the real problem might be how to wait for one thread out of a set</p>\n</blockquote>\n<p>Because if one of them panics you know you can kill the rest</p>",
        "id": 186828360,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245249
    },
    {
        "content": "<p>If you abort, the other tests won't run, right?</p>",
        "id": 186828412,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245285
    },
    {
        "content": "<p>Good point.</p>",
        "id": 186828545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245347
    },
    {
        "content": "<p>It would be nice to be able to abort the <em>test</em> without aborting the entire <em>test framework</em>.</p>",
        "id": 186828552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245359
    },
    {
        "content": "<p>So how do you wait for one thread out of many? I can't find a way.</p>",
        "id": 186828617,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245409
    },
    {
        "content": "<p>I'm not sure I know what you mean? There are several ways to wait for a thread, but how does that solve the problem of \"kill the test (with a failure)\"?</p>",
        "id": 186828709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245444
    },
    {
        "content": "<p>As in \"wait for one\", not \"wait for all\" of them. My reasoning is that you can spawn your two helper threads, wait for either of them to finish, and if it panicked, kill the other thread and propagate the panic.</p>",
        "id": 186828940,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245548
    },
    {
        "content": "<p>Ah, I see what you're getting at.</p>",
        "id": 186829021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245577
    },
    {
        "content": "<p>The main issue seems to be that you can't cancel the read from the channel thingy you're testing</p>",
        "id": 186829055,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245607
    },
    {
        "content": "<p>If I decided to go with the \"two helper threads\" approach, I could just wait on the helper thread then the main thread, and panic if either panics.</p>",
        "id": 186829086,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245628
    },
    {
        "content": "<p>But that's still awkward.</p>",
        "id": 186829093,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> The thing I'm testing is roughly equivalent to a UDP socket.</p>",
        "id": 186829119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245651
    },
    {
        "content": "<p>You don't get a definitive EOF-like signal, because there's no connection.</p>",
        "id": 186829163,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245680
    },
    {
        "content": "<blockquote>\n<p>If I decided to go with the \"two helper threads\" approach, I could just wait on the helper thread then the main thread, and panic if either panics.</p>\n</blockquote>\n<p>But if there's no way to wait for one of them, you'll need to use channels (probably from <code>crossbeam</code>, since they have <code>select</code>).</p>",
        "id": 186829237,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245708
    },
    {
        "content": "<p>\"wait on the helper thread then the main thread\" could just use join.</p>",
        "id": 186829254,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245731
    },
    {
        "content": "<p>If it's a single one, yes, but in the general case you might want to wait for either of them to finish</p>",
        "id": 186829288,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245773
    },
    {
        "content": "<blockquote>\n<p>You don't get a definitive EOF-like signal, because there's no connection.</p>\n</blockquote>\n<p>Got it. But if it was a socket, you could close it, which would result in a read error, so your thread would know it needs to shut down</p>",
        "id": 186829490,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580245850
    },
    {
        "content": "<blockquote>\n<p>If it's a single one, yes, but in the general case you might want to wait for either of them to finish</p>\n</blockquote>\n<p>Sure. And if I can get Rust to add better support for threaded test cases, it might require something more sophisticated. :)</p>",
        "id": 186829568,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245920
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>You don't get a definitive EOF-like signal, because there's no connection.</p>\n</blockquote>\n<p>Got it. But if it was a socket, you could close it, which would result in a read error, so your thread would know it needs to shut down</p>\n</blockquote>\n<p>Closing a sender to a UDP socket (or equivalent) doesn't result in any indication to the receiving socket.</p>",
        "id": 186829653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580245969
    },
    {
        "content": "<p>(I would <em>love</em> a suggestion otherwise. The whole \"helper thread\" mechanism here exists to work around the lack of any EOF mechanism.)</p>",
        "id": 186829711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580246036
    },
    {
        "content": "<p>I'm working with <code>AF_UNIX</code> <code>SOCK_DGRAM</code> sockets.</p>",
        "id": 186829769,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580246057
    },
    {
        "content": "<p><code>std::os::unix::net::UnixDatagram</code></p>",
        "id": 186829778,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580246071
    },
    {
        "content": "<p>I meant closing the receiving end. I might have drifted too much from your original question, but I was thinking that you:</p>\n<ol start=\"0\">\n<li>are writing a test for reading from a socket</li>\n<li>can spawn a thread that tries to read and blocks</li>\n<li>spawn another thread that uses an external process to send data to your socket</li>\n<li>want to detect if either of the two panics, so you can fail the test, and preferably clean up</li>\n<li>with a \"wait one thread\" primitive you can wait for one of the two to finish, decide if the test failed or not, then signal the other thread to close (or kill it)</li>\n<li>you can signal the socket thread to shut down by closing the socket it's reading from</li>\n</ol>",
        "id": 186830169,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580246350
    },
    {
        "content": "<p>Anyway, you already know these things ^</p>",
        "id": 186830349,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580246478
    },
    {
        "content": "<p>Closing the socket that thread is reading from is a potentially hazardous way of making a thread error, since a more complex test could potentially open another file that ends up with the same descriptor.</p>",
        "id": 186830468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580246553
    },
    {
        "content": "<p>Yeah, that's a good point. I don't think there's a race in the simple case, but it could turn into a mess</p>",
        "id": 186830613,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580246662
    },
    {
        "content": "<p>I'm also realizing that Rust doesn't seem to expose \"kill this thread\".</p>",
        "id": 186830729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580246753
    },
    {
        "content": "<p>Given a <code>JoinHandle</code>, it should be possible to terminate a thread.</p>",
        "id": 186830823,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580246804
    },
    {
        "content": "<p>I thought there was a deprecated method for that, but it might have been removed</p>",
        "id": 186830888,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580246851
    },
    {
        "content": "<p>Terminating a thread is not a particularly safe operation. If it was in the process of writing to any shared data, that data can be left in a corrupt state and cause UB when other threads access it. Also if you use scoped threads, all the stack memory is deallocated so the scoped thread now might accidentally access invalid memory.</p>",
        "id": 194627032,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1587347023
    }
]