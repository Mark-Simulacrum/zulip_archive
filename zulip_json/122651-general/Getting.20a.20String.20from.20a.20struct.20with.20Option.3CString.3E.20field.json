[
    {
        "content": "<p>Suppose I have <code>struct S { field: Option&lt;String&gt; }</code>. I have a variable <code>s</code> of type <code>S</code>. Is there a simpler way to get the <code>String</code> out of the field without doing <code>s.field.as_ref().expect(\"...\").clone()</code>?</p>",
        "id": 212977661,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602443593
    },
    {
        "content": "<p><code>s.field.cloned().expect(\"...\")</code></p>",
        "id": 212977708,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602443644
    },
    {
        "content": "<p>Ah, I didn't realize <code>Option</code> had <code>cloned</code>!</p>",
        "id": 212977714,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602443670
    },
    {
        "content": "<p>Handy.</p>",
        "id": 212977715,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602443671
    },
    {
        "content": "<p>Oh, wait, that wants an <code>Option&lt;&amp;T&gt;</code>...</p>",
        "id": 212977730,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602443737
    },
    {
        "content": "<p>I have an <code>Option&lt;String&gt;</code>.</p>",
        "id": 212977733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602443743
    },
    {
        "content": "<p>oh I see</p>",
        "id": 212977736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602443748
    },
    {
        "content": "<p>does <code>s.field.clone()</code> work then?</p>",
        "id": 212977739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602443753
    },
    {
        "content": "<p>Ah. Yes, it does, and since <code>None</code> is a weird error case I don't really care if a clone happens on that path.</p>",
        "id": 212977787,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602443798
    },
    {
        "content": "<p>Do you know, offhand, if cloning the <code>Option&lt;String&gt;</code> and then using <code>.expect(\"...\")</code> to get the <code>String</code> out will avoid copying the string more than once?</p>",
        "id": 212977801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602443826
    },
    {
        "content": "<p>I don't know what you mean by copying - you mean like the assembly it emits? At the language level there's only one copy</p>",
        "id": 212977867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602443925
    },
    {
        "content": "<p>I'm wondering how many <code>memcpy</code>s occur when I write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">OtherStruct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212977935,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444031
    },
    {
        "content": "<p>(Ideally I'd like to avoid cloning the string at all, since the struct containing that field is going away immediately, so the new String should really be able to own the data.)</p>",
        "id": 212977953,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444084
    },
    {
        "content": "<p>why do you need a clone then? I think you can move parts of a struct as long as you don't need the full struct for anything</p>",
        "id": 212977961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444110
    },
    {
        "content": "<p>I would love to do that, except that <code>Option&lt;String&gt;</code> doesn't seem happy with me doing that.</p>",
        "id": 212978001,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444127
    },
    {
        "content": "<p><code>s.field.expect(\"...\")</code> gives <code>error[E0507]: cannot move out of a shared reference</code>.</p>",
        "id": 212978010,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444167
    },
    {
        "content": "<p><code>move occurs because value has type `std::option::Option&lt;std::string::String&gt;`, which does not implement the `Copy` trait</code></p>",
        "id": 212978014,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444176
    },
    {
        "content": "<p>that sounds like <code>s</code> itself is a borrow</p>",
        "id": 212978020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444193
    },
    {
        "content": "<p>...oh, hang on a moment, you're right.</p>",
        "id": 212978031,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444234
    },
    {
        "content": "<p>Sigh, that'll teach me to oversimplify.</p>",
        "id": 212978073,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444252
    },
    {
        "content": "<p>It's not that <code>s</code> was a borrow.</p>",
        "id": 212978075,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444256
    },
    {
        "content": "<p>It's that I was getting this out of a <code>Vec</code>.</p>",
        "id": 212978076,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444263
    },
    {
        "content": "<p>The concrete code, using rusoto:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reservation</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">instances</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[])</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"RunInstances successful but no instance ID\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">instance_id</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Instance had no ID\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212978082,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444281
    },
    {
        "content": "<p>hmm that sounds like it should work</p>",
        "id": 212978092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444319
    },
    {
        "content": "<p>It does. :)</p>",
        "id": 212978093,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444324
    },
    {
        "content": "<p>(I switched from <code>.get(0)</code> to <code>.pop()</code> when you mentioned the possibility that there was a borrow in there. :) )</p>",
        "id": 212978098,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444346
    },
    {
        "content": "<p><code>Reservation</code> contains <code>instances: Option&lt;Vec&lt;Instance&gt;&gt;</code>, and <code>Instance</code> contains <code>instance_id: Option&lt;String&gt;</code>.</p>",
        "id": 212978134,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444363
    },
    {
        "content": "<p>Because there need to be <em>more</em> ways for things to be optional...</p>",
        "id": 212978142,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444372
    },
    {
        "content": "<p>you might want an <code>assert_eq!(instances.len(), 1)</code> in there somewhere</p>",
        "id": 212978146,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Considering that <em>all</em> the error handling there is \"AWS is violating its own documentation\" (which granted does happen occasionally), I think I can ignore the possibility that I asked for 1 instance and got more than one. ;)</p>",
        "id": 212978160,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444428
    },
    {
        "content": "<p>Asking for 1 and getting less than one seems more plausible.</p>",
        "id": 212978167,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444443
    },
    {
        "content": "<p>sounds good to me</p>",
        "id": 212978168,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444444
    },
    {
        "content": "<p>Thanks for the debugging assistance. :)</p>",
        "id": 212978170,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444455
    },
    {
        "content": "<p>This is much cleaner.</p>",
        "id": 212978171,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602444458
    },
    {
        "content": "<p>no problem :)</p>",
        "id": 212978180,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602444475
    },
    {
        "content": "<p>(On <del>nightly</del> beta you can also <code>.try_into()</code> a <code>[T; 1]</code>, if you prefer that to <code>pop</code>.)</p>",
        "id": 212979263,
        "sender_full_name": "scottmcm",
        "timestamp": 1602446332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I'm currently using stable, but I look forward to that.</p>",
        "id": 212979929,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602447394
    }
]