[
    {
        "content": "<p>Hi, I have <code>result: Result&lt;u32, String&gt;</code> at the end of a function that needs to return <code>bool</code> (<code>result.is_ok()</code>). I want to log the Err before returning, but it is messy:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">long</span><span class=\"p\">().</span><span class=\"n\">computation</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">is_err</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Returning Result to caller would be nice, but the API is fixed</span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow(unused_must_use)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"Failure({})\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">unwrap_err</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">is_ok</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It works, but the compiler isn't happy:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>compiler warns unused_must_use</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>21:58  g/exercism/rust/luhn  cargo run<br>\n   Compiling luhn v1.6.1 (/home/trs/g/exercism/rust/luhn)<br>\nwarning: unused attribute <code>allow</code><br>\n  --&gt; src/lib.rs:36:9<br>\n   |<br>\n36 |         #[allow(unused_must_use)]<br>\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^<br>\n   |<br>\n   = note: <code>#[warn(unused_attributes)]</code> on by default<br>\nnote: the built-in attribute <code>allow</code> will be ignored, since it's applied to the macro invocation <code>writeln</code><br>\n  --&gt; src/lib.rs:37:9<br>\n   |<br>\n37 |         writeln!(stderr(), \"Failure({})\", &amp;result.clone().unwrap_err());<br>\n   |         ^^^^^^^</p>\n<p>warning: unused <code>Result</code> that must be used<br>\n  --&gt; src/lib.rs:37:9<br>\n   |<br>\n37 |         writeln!(stderr(), \"Failure({})\", &amp;result.clone().unwrap_err());<br>\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>\n   |<br>\n   = note: <code>#[warn(unused_must_use)]</code> on by default<br>\n   = note: this <code>Result</code> may be an <code>Err</code> variant, which should be handled<br>\n   = note: this warning originates in the macro <code>writeln</code> (in Nightly builds, run with -Z macro-backtrace for more info)</p>\n<p>warning: <code>luhn</code> (lib) generated 2 warnings<br>\n    Finished dev [unoptimized + debuginfo] target(s) in 0.38s<br>\n     Running <code>target/debug/luhn</code></p>\n</div></div>\n<p>Is there an idiomatic way to deal with this?</p>",
        "id": 264537538,
        "sender_full_name": "Tim Siegel",
        "timestamp": 1639192304
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"Failure({})\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)).</span><span class=\"n\">is_ok</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>should work</p>",
        "id": 264537678,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1639192516
    },
    {
        "content": "<p>Yes, of course! For some reason I was reluctant to do side effects in the map()....</p>",
        "id": 264537754,
        "sender_full_name": "Tim Siegel",
        "timestamp": 1639192566
    },
    {
        "content": "<p>The recently added, unstable inspect method is exactly what should eventually be used here.</p>",
        "id": 264537762,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1639192587
    }
]