[
    {
        "content": "<p>Hi,<br>\nI have successfuly cross compiled rustc on x86_86-unknown-linux-gnu system for arm-unknown-linux-gnu target. But I also need to cross compile it for the same target as the build one. The only difference is that the target uses sysrooted toolchain and possible other versions of system libraries. When using GNU autotools I use slighly different triplets for build system and for host/target system. For example x86_64-cross-linux-gnu and x86_64-pc-linux-gnu. But the Rust build system not recognize triplets other than x86_64-unknown-linux-gnu. How can I cross compile The Rust from one system to another (in the sysroot directory with possible different system libraries and symbols than in the build system) when build and target has the same architecture, i.e. x86_64-unknown-linux-gnu ?</p>",
        "id": 212564964,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602080399
    },
    {
        "content": "<p>Rustc is always a cross-compiler. This means that you shouldn't built a different compiler that compiles for the host or target. You should use a single compiler. In your case you will likely want to set both <code>host</code> and <code>target</code> to <code>[\"x86_64-unknown-linux-gnu\", \"arm-unknown-linux-gnu\"]</code> in <code>config.toml</code>. This will create two compilers (<code>host</code>) that each have a sysroot for both targets (<code>target</code>)</p>",
        "id": 212565862,
        "sender_full_name": "bjorn3",
        "timestamp": 1602080774
    },
    {
        "content": "<p>There is no issues when cross compiling for arm target. The issue if cross compiling from x86_64 for another x86_64. If I build rust without cross compilation, then it will be linked with the libraries from build system. But I need that it will be linked with the libraries from the sysroot directory for another linux system. When buiding for the arm target, i have used arm-unknown-linux-gnu- prefixed toolchain for arm and native tools for the build system (stage 1 compiler). But how can I specify different tools when the build and target triplets are the same ? If I specify it in the target.x86_64-unknown-linux-gnu section of config.toml, then it will be used also for stage 1 compiler, but this is not correct.</p>",
        "id": 212566522,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602081063
    },
    {
        "content": "<p>In other words I need to use different gcc  toolchains for the different stages and components. But how can I do this when both build and target have the same triplet ?</p>",
        "id": 212567694,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602081588
    },
    {
        "content": "<p>It would be good if there be ability to specifying stage 1 build tools (cc, cxx, ar, ranlib) in the [build] section and the tools for the stage 2 and std lib in [target.&lt;triplet&gt;] section.</p>",
        "id": 212568402,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602081898
    },
    {
        "content": "<p>Why do you need to use different gcc toolchains? Why not use the final toolchain for everything?</p>",
        "id": 212568541,
        "sender_full_name": "bjorn3",
        "timestamp": 1602081958
    },
    {
        "content": "<p>Because then I use final toolchain for everything, the stage 1 compiler fails to run because it is linked with libraries from the target sysroot and not from the build system.</p>",
        "id": 212568893,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602082063
    },
    {
        "content": "<p>What is the difference between the two toolchains? Why does only one work on the build system?</p>",
        "id": 212569141,
        "sender_full_name": "bjorn3",
        "timestamp": 1602082149
    },
    {
        "content": "<p>The stage 1 rust compiler should be built with the native build toolchain, but for the final stage 2 the target toolchain should be used. Because stage 1 rust compiler needs to run on the build system and not on the target one.</p>",
        "id": 212569288,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602082204
    },
    {
        "content": "<p>What is the target system?</p>",
        "id": 212569456,
        "sender_full_name": "bjorn3",
        "timestamp": 1602082276
    },
    {
        "content": "<p>The target system is x86_64-unknown-linux-gnu. The same as the build one. But set and versions of system components may be different. The target cross gcc toolchain have been configured with \"--with-sysroot\" option.</p>",
        "id": 212569859,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602082400
    },
    {
        "content": "<p>Can you compile everything for the host and then at when running the resulting rustc pass the target toolchain?</p>",
        "id": 212570108,
        "sender_full_name": "bjorn3",
        "timestamp": 1602082491
    },
    {
        "content": "<p>In other word the target system should be isolated from the build one, despite thet it have the same architecture.</p>",
        "id": 212570114,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602082492
    },
    {
        "content": "<p>I am thinking about two stage compilation that you suggest. But how exactly can I do this ?</p>",
        "id": 212570390,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602082624
    },
    {
        "content": "<p>How should I use the \"--stage\" and \"--keep-stage\" options and what components should I build in the each stage of compilation ?</p>",
        "id": 212570556,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602082692
    },
    {
        "content": "<p>The <code>[target.x86_64-unknown-linux-gnu]</code> section in <code>config.toml</code> allows you to specify the linker and C/C++ compiler.</p>",
        "id": 212571189,
        "sender_full_name": "bjorn3",
        "timestamp": 1602082876
    },
    {
        "content": "<p>I do so, but in this case the stage 1 rust compiler also uses this linker and C/C++ compiler. And this is not correct since the stage 1 rust compiler should use the build system's linker and C/C++ compiler as It need to run on the build system for compiling the final stage 2 rust compiler with the linker and C/C++ compiler specified in the [target.x86_64-unknown-linux-gnu] section.</p>",
        "id": 212571798,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602083112
    },
    {
        "content": "<p>I think that the Rust build system should always use native system's C/C++ compiler for the stage 1 rust compiler, or it should be possible to specify C/C++ compiler and linker for the stage 1 rust compiler in the [build] section of config.toml. Since the C/C++ compiler and linker specified in the [target.&lt;triplet&gt;] section should only be used for the final stuff that not intended to run on the build system, even if the target and the build system have tha same architecture and triplet.</p>",
        "id": 212572847,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602083453
    },
    {
        "content": "<p>The same is for llvm-config option</p>",
        "id": 212575211,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602084300
    },
    {
        "content": "<p>That configuration doesn't (to my knowledge) in any way go into the produced binaries, it's purely \"how to build\"</p>",
        "id": 212579740,
        "sender_full_name": "simulacrum",
        "timestamp": 1602086133
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Can you compile everything for the host and then at when running the resulting rustc pass the target toolchain?</p>\n</blockquote>\n</blockquote>\n<p>I have tried to compile for the host with --stage 0 option, and then running the second pass with the target toolchain and the --keep-stage 0 option. But unfortunately x.py tries to recompile the bootstrap components and fails on this. How can I avoid this ?</p>",
        "id": 212652168,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602139570
    },
    {
        "content": "<p>Why bootstrap is recompiled when config.toml is changed ? It make it impossible to use two pass compilation of different stages with the different toolchains.</p>",
        "id": 212652354,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602139747
    },
    {
        "content": "<p>What is the correct way to cross compile the Rust in my case ? I.e. for the same architecture as the build system's, but with different system and llvm libraries isolated in sysroot dir ? The sysroot dir contains components capable to boot themselves.</p>",
        "id": 212652587,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602139987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330140\">Denis Onishchenko</span> <a href=\"#narrow/stream/122651-general/topic/cross.20compilation.20issue/near/212652354\">said</a>:</p>\n<blockquote>\n<p>Why bootstrap is recompiled when config.toml is changed ? It make it impossible to use two pass compilation of different stages with the different toolchains.</p>\n</blockquote>\n<p>I would use different worktrees for this and set <code>rustc = ...</code> to the first one you compile</p>",
        "id": 212715567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602174417
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=worktree#working-on-multiple-branches-at-the-same-time\">https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=worktree#working-on-multiple-branches-at-the-same-time</a></p>",
        "id": 212715584,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602174429
    },
    {
        "content": "<p>this is how I did <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.60x.2Epy.20check.60.20using.20stage.201.3F\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/.60x.2Epy.20check.60.20using.20stage.201.3F</a></p>",
        "id": 212715646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602174464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330140\">Denis Onishchenko</span> <a href=\"#narrow/stream/122651-general/topic/cross.20compilation.20issue/near/212652354\">said</a>:</p>\n<blockquote>\n<p>Why bootstrap is recompiled when config.toml is changed ? It make it impossible to use two pass compilation of different stages with the different toolchains.</p>\n</blockquote>\n<p>this is intentional, otherwise your config.toml won't match the compiler you've built which is <em>extremely</em> confusing</p>",
        "id": 212715737,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602174501
    },
    {
        "content": "<p>This is still problematic, as when building the bootstrap component the target linker is used, and not the host's one. Because when the target's architecture is the same as the build architecture, there is only one section [target.x86_64-unknown-linux-gnu] where the C/C++ toolchain is specified. No matter which rustc is used. bootstrap is failed to build in this case. It should always use build system C/C++ toolchain and not a one specified in [target.x86_64-unknown-linux-gnu].</p>",
        "id": 212817471,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602246127
    },
    {
        "content": "<p>it's not necessary to use two stage bootstrap for me. Building rustc/std/cargo with the target C/C++ toolchain and locally installed rust is sufficient. But even this is not working because bootstrap is building with the target C/C++ toolchain, that is wrong.</p>",
        "id": 212818309,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602246616
    },
    {
        "content": "<p>I don't really understand why you have different toolchains / need different toolchains</p>",
        "id": 212828942,
        "sender_full_name": "simulacrum",
        "timestamp": 1602251906
    },
    {
        "content": "<p>Because I need to build another linux system. First I build gcc cross toolchain configured with sysroot option. Then I build linux kernel, c library, initialization system, shell processor, other utils and rust compiler. The sys-root directory contains all files that belong to the built system. The C/C++ toolchain configured in such a way that it looks for headers and libraries in this sys-root directory. Then I will copy content of this sys-root directory on the new file system and boot the built system from this file system. l have no problem with building all components except the Rust due to described limitations of its build system.</p>",
        "id": 212847587,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602260715
    },
    {
        "content": "<p>Cross compilation not always means building for the another architecture but also for another isolated system, even if this system use the same cpu architecture, kernel and C library. The versions may be different. This case is not supported by the Rust build system.</p>",
        "id": 212848673,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602261307
    },
    {
        "content": "<p>I am unfamiliar, but why can you not just copy the built Rust files from system A to system B?</p>",
        "id": 212848784,
        "sender_full_name": "simulacrum",
        "timestamp": 1602261380
    },
    {
        "content": "<p>the target config should only be used during the build, not anything further (i.e., the compiled artifacts don't contain it)</p>",
        "id": 212848859,
        "sender_full_name": "simulacrum",
        "timestamp": 1602261441
    },
    {
        "content": "<p>because they are linked with the different libraries. For example the system where I build the Rust have LLVM 10 installed, but the target one have LLVM 11, and so on.</p>",
        "id": 212848862,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602261442
    },
    {
        "content": "<p>hm okay</p>",
        "id": 212848903,
        "sender_full_name": "simulacrum",
        "timestamp": 1602261465
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> since maybe you do something similar when building rust for distro use</p>",
        "id": 212848998,
        "sender_full_name": "simulacrum",
        "timestamp": 1602261517
    },
    {
        "content": "<p>but I suspect that yes this is just not supported</p>",
        "id": 212849006,
        "sender_full_name": "simulacrum",
        "timestamp": 1602261524
    },
    {
        "content": "<p>our distro builds are all native</p>",
        "id": 212849061,
        "sender_full_name": "cuviper",
        "timestamp": 1602261575
    },
    {
        "content": "<p>at most, the kernel may not be an exact OS match, but the rest is done in an exact chroot for the target OS, running native code</p>",
        "id": 212849187,
        "sender_full_name": "cuviper",
        "timestamp": 1602261651
    },
    {
        "content": "<p>yeah I thought so</p>",
        "id": 212849207,
        "sender_full_name": "simulacrum",
        "timestamp": 1602261664
    },
    {
        "content": "<p>I suggest to add support fot the \"cc\", \"cxx\", \"ar\", \"ranlib\", \"linker\" and \"llvm-config\" options to the [build] section of config.toml. This options will be used for building the bootstrap component since it always should run on the build system. The same for other components that intended for run only on build system.</p>",
        "id": 212850505,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602262481
    },
    {
        "content": "<p>To avoid collisions when the build and target system's triplets are match.</p>",
        "id": 212850967,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602262721
    },
    {
        "content": "<p>Can you add a custom target that just duplicates x86_64-unknown-linux-gnu and cross-compile for that?</p>",
        "id": 212851649,
        "sender_full_name": "simulacrum",
        "timestamp": 1602263077
    },
    {
        "content": "<p>tbh I am still not quite clear why you need different C/C++ compilers vs different (e.g.) linker arguments</p>",
        "id": 212851713,
        "sender_full_name": "simulacrum",
        "timestamp": 1602263120
    },
    {
        "content": "<p>How can I add a custom target ?</p>",
        "id": 212851733,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602263133
    },
    {
        "content": "<p>well, actually</p>",
        "id": 212851852,
        "sender_full_name": "simulacrum",
        "timestamp": 1602263188
    },
    {
        "content": "<p>I need different C/C++ compiler because it needs to look for the headers and libraries in the sys-root directory for the target system</p>",
        "id": 212851854,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602263188
    },
    {
        "content": "<p>can't the build host use that compiler too?</p>",
        "id": 212851938,
        "sender_full_name": "cuviper",
        "timestamp": 1602263249
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"330140\">@Denis Onishchenko</span> is saying that no, because those libraries are not available on the build host perhaps?</p>",
        "id": 212852273,
        "sender_full_name": "simulacrum",
        "timestamp": 1602263429
    },
    {
        "content": "<p>(though I am not clear on this point)</p>",
        "id": 212852283,
        "sender_full_name": "simulacrum",
        "timestamp": 1602263436
    },
    {
        "content": "<p>it seems like if the target triple is the same though you should be able to compile everything inside a chroot or whatever with those libraries... unless I'm missing something</p>",
        "id": 212852333,
        "sender_full_name": "simulacrum",
        "timestamp": 1602263465
    },
    {
        "content": "<p>Yes, the build host cann't use the compiler for the target, because the target may have the different versions of libraries</p>",
        "id": 212852594,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602263623
    },
    {
        "content": "<p>yeah, I'd suggest using a chroot or container with the target toolchain/libraries/etc.</p>",
        "id": 212853073,
        "sender_full_name": "cuviper",
        "timestamp": 1602263918
    },
    {
        "content": "<p>chroot will work only for the same CPU architecture, but my distro build infrastructure supports different target architectures. In a particular case CPU architectures may match, but not always.</p>",
        "id": 212853556,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602264195
    },
    {
        "content": "<p>I don't want use the different building infrastructure for different architectures. I want unified one.</p>",
        "id": 212853682,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602264263
    },
    {
        "content": "<p>otherwise it will be very ugly.</p>",
        "id": 212853826,
        "sender_full_name": "Denis Onishchenko",
        "timestamp": 1602264357
    },
    {
        "content": "<p>also causes a lot of errors in the compiler</p>",
        "id": 212874527,
        "sender_full_name": "o ninja",
        "timestamp": 1602276876
    }
]