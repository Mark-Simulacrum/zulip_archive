[
    {
        "content": "<p>Interesting talk on abstractions in C++ by Chandler, in particular the part about <code>unique_ptr</code> starting at <a href=\"https://youtu.be/rHIkrotSwcc?t=1053\" target=\"_blank\" title=\"https://youtu.be/rHIkrotSwcc?t=1053\">https://youtu.be/rHIkrotSwcc?t=1053</a>.<br>\nFrom what I understand, Rust doesn't have this problem, right? Our <code>Box</code> is <code>repr(transparent)</code> (I would not have expected that to make such a big difference, nice to see examples of the kind of code it avoids) and we have destructive moves.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"rHIkrotSwcc\" href=\"https://youtu.be/rHIkrotSwcc?t=1053\" target=\"_blank\" title=\"https://youtu.be/rHIkrotSwcc?t=1053\"><img src=\"https://i.ytimg.com/vi/rHIkrotSwcc/default.jpg\"></a></div>",
        "id": 178729902,
        "sender_full_name": "RalfJ",
        "timestamp": 1571729338
    },
    {
        "content": "<p>Lol no we don't have this problem. We have other problems where we don't actually optimize our abstractions to be zero cost, but boxes aren't one of these problems</p>",
        "id": 178738633,
        "sender_full_name": "oli",
        "timestamp": 1571737278
    },
    {
        "content": "<p>I can't read the assembly right now, but panic handling seems to have some overhead here: <a href=\"https://rust.godbolt.org/z/n7d-Li\" target=\"_blank\" title=\"https://rust.godbolt.org/z/n7d-Li\">https://rust.godbolt.org/z/n7d-Li</a></p>",
        "id": 178742961,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571741163
    },
    {
        "content": "<p>I'm surprised that <code>alloc::alloc::box_free</code> and <code>example::baz</code> don't get folded</p>",
        "id": 178743217,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571741406
    },
    {
        "content": "<p>And how is the code at the end of <code>foo</code> reached (the <code>_Unwind_Resume</code> block)?</p>",
        "id": 178743288,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571741487
    },
    {
        "content": "<p>@Laurențiu Nicola : <code>example:baz</code> not folded likely due to <code>#[inline(never)]</code><br>\n<code>box_free</code> only called from panic path.. so LLVM decided not to inline?</p>\n<p>however I share your surprise at the main question: how would the panic unwind path be hit?..<br>\nthat <code>_Unwind_Resume</code> must be magic :)</p>",
        "id": 179014949,
        "sender_full_name": "atagunov",
        "timestamp": 1571967206
    },
    {
        "content": "<p>IIRC, at least on linux, the standard way is to encode via DWARF an unwind table that says where to jump to based on current stack layout (including the ability to do arbitrary operations on registers/memory to \"unwind\" to the appropriate place)</p>",
        "id": 179015949,
        "sender_full_name": "simulacrum",
        "timestamp": 1571968761
    },
    {
        "content": "<p>(this is how exceptions in C++ work as well as our panics, or backtrace gathering for example)</p>",
        "id": 179015955,
        "sender_full_name": "simulacrum",
        "timestamp": 1571968791
    },
    {
        "content": "<p>I'm not sure how windows does it -- but probably something somewhat similar</p>",
        "id": 179016004,
        "sender_full_name": "simulacrum",
        "timestamp": 1571968808
    },
    {
        "content": "<p>But <code>box_free</code> is also <code>#[inline]</code>.. Good point about the unwinding, though.</p>",
        "id": 179024644,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571983898
    }
]