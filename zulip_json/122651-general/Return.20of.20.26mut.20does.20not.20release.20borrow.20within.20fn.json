[
    {
        "content": "<p>Is there any reason for a <code>return x</code> (where <code>x: &amp;mut _</code>) to not release the borrows that <code>x</code> implied with respect to code that follows the return? For instance: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=03064197395bf9f824e5cfe10da80dfd\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=03064197395bf9f824e5cfe10da80dfd</a> fails right now, because returning an element from the vector retains the borrow on the vector itself to the end of the function (even though we are returning here...?)</p>",
        "id": 218184553,
        "sender_full_name": "nagisa",
        "timestamp": 1606603143
    },
    {
        "content": "<p>It seems like not all kinds of borrows have this kind of behaviourâ€¦ this works for example <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=721b9924cef70949d7ec5617b819a845\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=721b9924cef70949d7ec5617b819a845</a></p>",
        "id": 218184604,
        "sender_full_name": "nagisa",
        "timestamp": 1606603235
    },
    {
        "content": "<p>I'd expect this to be <a href=\"https://doc.rust-lang.org/nomicon/lifetime-mismatch.html#improperly-reduced-borrows\">https://doc.rust-lang.org/nomicon/lifetime-mismatch.html#improperly-reduced-borrows</a> or something like it</p>",
        "id": 218185701,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606605245
    },
    {
        "content": "<p>NLL problem case 3 <a href=\"https://rust-lang.github.io/rfcs/2094-nll.html#problem-case-3-conditional-control-flow-across-functions\">https://rust-lang.github.io/rfcs/2094-nll.html#problem-case-3-conditional-control-flow-across-functions</a> and similar issues (like <a href=\"https://github.com/rust-lang/rust/issues/47680\">#47680</a>), involving more complex control flow, were postponed from the NLL implementation (and to be solved in the future via polonius, which should already accept your example, or something else)</p>",
        "id": 218208696,
        "sender_full_name": "lqd",
        "timestamp": 1606649444
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/38023871/155423\">Returning a reference from a HashMap or Vec causes a borrow to last beyond the scope it's in?</a></p>\n<p><a href=\"https://stackoverflow.com/q/50519147/155423\">Double mutable borrow error in a loop happens even with NLL on</a></p>\n<p><a href=\"https://stackoverflow.com/q/64902078/155423\">Is it safe to logically split a borrow to work around a limitation of the NLL-enabled borrow-checker?</a></p>",
        "id": 218211632,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606654466
    }
]