[
    {
        "content": "<p>If someone (Me) were to implement a type like <code>NonMaxUsize</code>, analogous to <code>NonZeroUsize</code> but it can not be <code>usize::MAX</code> would it be welcome in std?</p>",
        "id": 226256265,
        "sender_full_name": "Sebastian Widua",
        "timestamp": 1613236886
    },
    {
        "content": "<p>I sometimes need that for optional indices where I also need the 0th index.</p>",
        "id": 226256335,
        "sender_full_name": "Sebastian Widua",
        "timestamp": 1613236958
    },
    {
        "content": "<p>you can now do <code>pub struct UsizeExcept&lt;const NICHE: usize&gt;(NonZeroUsize);</code></p>",
        "id": 226256549,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613237207
    },
    {
        "content": "<p>that seems preferable over adding a type per desirable niche</p>",
        "id": 226256556,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613237227
    },
    {
        "content": "<p>and doesn't need to be in libstd code either</p>",
        "id": 226256560,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613237242
    },
    {
        "content": "<p>oh right I didn't think of that. Thank you :)</p>",
        "id": 226256849,
        "sender_full_name": "Sebastian Widua",
        "timestamp": 1613237553
    },
    {
        "content": "<p>Yeah, the general problem is that there's at least dozens of such types that could be interesting. <code>USizeButWithoutTheHighBit</code> represents the possible lengths of (non-ZST) slices, for example.  Or emulating HRESULT in a <code>Result</code> would like <code>PostiveI32</code> and <code>NegativeI32</code>.  And ...</p>",
        "id": 226277402,
        "sender_full_name": "scottmcm",
        "timestamp": 1613263003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/NonMax.20types.3F/near/226256549\">said</a>:</p>\n<blockquote>\n<p>you can now do <code>pub struct UsizeExcept&lt;const NICHE: usize&gt;(NonZeroUsize);</code></p>\n</blockquote>\n<p>You'd still need <code>#[rustc_layout_scalar_valid_range_start(i)]</code>and friends.</p>",
        "id": 226297391,
        "sender_full_name": "The 8472",
        "timestamp": 1613298435
    },
    {
        "content": "<p>You don't need those if you're going to subtract, although there are a lot of use cases that aren't served that way, admittedly.</p>",
        "id": 226297470,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613298578
    },
    {
        "content": "<p>Yeah if the type doesn't actually place the niche pattern where it belongs, and i have to add/subtract into and out of the type, then it's just not that helpful at all.</p>",
        "id": 226407018,
        "sender_full_name": "Lokathor",
        "timestamp": 1613407703
    },
    {
        "content": "<p>See also <a href=\"https://stackoverflow.com/q/30414068/155423\">Can I use the “null pointer optimization” for my own non-pointer types?</a></p>",
        "id": 226420170,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613415962
    },
    {
        "content": "<p>I usually use newtypes for this kind of thing, which make it easy to get the expected performance and size. The API usually doesn't have to be very large either, just a few accessors</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Watch</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Watch</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[inline]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">idx</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mask</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Watch</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Watch</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[inline]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">clause</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[inline]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mark</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[inline]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">marked</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226420691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613416309
    }
]