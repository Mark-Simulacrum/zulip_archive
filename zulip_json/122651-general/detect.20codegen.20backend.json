[
    {
        "content": "<p>Is there a way to detect the codegen backend being used (e.g. llvm vs cranelift) ?</p>",
        "id": 148063215,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542743723
    },
    {
        "content": "<p>Ideally a cfg() macro ?</p>",
        "id": 148063222,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542743732
    },
    {
        "content": "<p>That <em>seems</em> like a bad thing to check. From the user's perspective there shouldn't be a difference.</p>",
        "id": 148065094,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542745350
    },
    {
        "content": "<p>yeah, but the std library needs to be able to tell, when using backend-specific intrinsics for example</p>",
        "id": 148068528,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542748356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ^</p>",
        "id": 148068600,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542748435
    },
    {
        "content": "<blockquote>\n<p>yeah, but the std library needs to be able to tell, when using backend-specific intrinsics for example</p>\n</blockquote>\n<p>shouldnt instead the intrinsics have the same name and type and just their implementration differ?</p>",
        "id": 148070409,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750127
    },
    {
        "content": "<p>for rustc intrinsincs yes, but i am skeptical about cranelift's ability to provide all the numerous llvm intrinsics that e.g. correspond to sse instructions</p>",
        "id": 148070450,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542750199
    },
    {
        "content": "<p>wouldn't that be more of a \"does platform support feature X\" flag though?</p>",
        "id": 148070539,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750298
    },
    {
        "content": "<p>One of the ideas with the Cranelift backend is that we can make it automatically fall back to the LLVM backend if it encounters something it doesn't support.</p>",
        "id": 148071261,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1542751015
    },
    {
        "content": "<p>That would be the quickest path to providing users with a working system without having to implement the entire long tail of LLVM's feature set first.</p>",
        "id": 148071376,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1542751127
    },
    {
        "content": "<p>also IMO using LLVM intrinsics from libraries is a complete hack that needs to be replaced at some point</p>",
        "id": 148071521,
        "sender_full_name": "eddyb",
        "timestamp": 1542751262
    },
    {
        "content": "<p>too bad platform-intrinsics wasn't used more</p>",
        "id": 148071616,
        "sender_full_name": "eddyb",
        "timestamp": 1542751325
    },
    {
        "content": "<p>So to answer the original question: no, there isn't a way to detect the backend, and it's too early at this point to even predict if we'll want to add one.</p>",
        "id": 148071752,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1542751469
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"130125\">@Dan Gohman</span> that makes sense. Do you think that if Cretonne can fall back to LLVM it would make sense for stdsimd to use <code>\"platform-intrinsics\"</code> instead of <code>link_llvm_intrinsics</code> ? Or it would not matter ?</p>",
        "id": 148379236,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543250192
    },
    {
        "content": "<p>I don't know the specifics of the \"platform-intrinsics\" vs <code>link_llvm_intrinsics</code> mechanisms.</p>",
        "id": 148379564,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1543250455
    },
    {
        "content": "<p>The basic plan is that Cranelift will implement most of the functionality of the LLVM intrinsics, though they look a little different in Cranelift's IR and builder APIs than in LLVM's.</p>",
        "id": 148379714,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1543250557
    },
    {
        "content": "<p>IIUC <code>link_llvm_intrinsics</code> allows using <code>extern { fn llvm.foo.bar(...) -&gt; .. }</code> to call llvm intrinsics directly from Rust as if one was calling C.<br>\n<code>\"platform-intinriscs\"</code> allows importing functions that are provided by Rust, e.g., <code>extern \"platform-intrinsics\" { fn foo_bar(...) -&gt; ... }</code></p>",
        "id": 148379732,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543250574
    },
    {
        "content": "<p>the difference is that Rust can change what platform intrinsics do, and provide different implementations for the different backends, while <code>link_llvm_intrinsics</code> cannot do that</p>",
        "id": 148379758,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543250612
    },
    {
        "content": "<p>Ah, ok. So yeah, Cranelift won't be providing magical functions named like \"llvm.foo.bar\".</p>",
        "id": 148379782,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1543250630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130125\">@Dan Gohman</span> but could cranelift identify these functions and fall back to LLVM in this case ?</p>",
        "id": 148382203,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543252668
    },
    {
        "content": "<p>We could make that work, though in most cases, what we really want to do is implement the feature in Cranelift too :-).</p>",
        "id": 148382462,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1543252866
    },
    {
        "content": "<p>for x86, we would only need to implement ~2000 SIMD intrinsics, looks like a lot, but is a process that might be automated, the problem is how do we hook them up in stdsimd</p>",
        "id": 148382584,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543252969
    },
    {
        "content": "<p>the logic to choose which intrinsic to emit has to be somewhere, and currently stdsimd uses <code>link_llvm_intrinsic</code>. @eddyb suggested moving that into rustc so that stdsimd just calls <code>platform-intrinsics</code>, and <code>rustc</code> chooses between llvm or cranelift intrinsics</p>",
        "id": 148382695,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543253048
    },
    {
        "content": "<p>we could do that, but to me this looks like moving the problem from stdsimd into rustc, and i'm not so sure that rustc can solve it better than stdsimd does</p>",
        "id": 148382721,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543253096
    },
    {
        "content": "<p>In Cranelift, these things aren't calls to intrinsics. They're just instructions. Rustc seems like it's able to emit those instructions directly, while stdsimd isn't.</p>",
        "id": 148382834,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1543253188
    }
]