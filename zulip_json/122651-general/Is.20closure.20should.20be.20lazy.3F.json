[
    {
        "content": "<p>(deleted)</p>",
        "id": 261084543,
        "sender_full_name": "Reaur",
        "timestamp": 1636596869
    },
    {
        "content": "<p>compiler not allow use variable after that variable captured with closure with 'move' keyword.<br>\nImportant part is; closure is not used, only defined.<br>\nClosure should be lazy, it should not take ownership of captured values until called.</p>\n<p>Example:<br>\n let my_vec = vec![1, 2, 3, 4];<br>\n let my_closure = move |x| my_vec.get(0).unwrap() == x;<br>\n println!(\"{:?}\",my_vec ); // Error: Move occurs</p>\n<p>It should be;<br>\n let my_vec = vec![1, 2, 3, 4];<br>\n let my_closure = move |x| my_vec.get(0).unwrap() == x;<br>\n println!(\"{:?}\",my_vec ); // Should be OK<br>\nlet res = my_closure(5); // closure is called, so take ownership of captured values<br>\nprintln!(\"{:?}\",my_vec ); // Should be Error</p>",
        "id": 261084935,
        "sender_full_name": "Reaur",
        "timestamp": 1636597216
    },
    {
        "content": "<p>Whether or not this a good idea, it would be breaking change, with some subtle implications. Consider this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// currently prints 5, but after this change, it would print 6. Moving it up one statement would change the output to 5 again.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261119099,
        "sender_full_name": "panstromek",
        "timestamp": 1636628624
    },
    {
        "content": "<p>A closure can be called multiple times, so your design will bring in a lot of complexity. If you need this behavior your can do it manually in this way:</p>",
        "id": 261289551,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636740437
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">my_vec</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">().</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"n\">my_vec</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok now.</span>\n</code></pre></div>",
        "id": 261289638,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636740477
    }
]