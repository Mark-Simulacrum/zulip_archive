[
    {
        "content": "<p>Hi everyone, I found out that a Boxed Slice (specifically Box&lt;[u8]&gt;) actually stores two usize values (the pointer + the size) on the stack, and only stores the u8-data on the heap. I needed to make sure Box::leak() didn't leave anything other than the actual array data on the heap. I was passing ownership to a C library and needed to know.<br>\nDue to the syntax Box&lt;[u8]&gt;, I thought at first, a Box is just a single pointer, pointing to a slice on the heap, which is a (sort off) struct, containing a pointer to the array + the length as usize.<br>\nIs it documented somewhere that Box&lt;[u8]&gt; is layed out as a pointer + size on the stack? I was only able to find out by using std::mem::size_of::&lt;Box&lt;[u8]&gt;&gt;().<br>\nI think this is valuable knowledge for anyone using the FFI.</p>",
        "id": 205388939,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596044411
    },
    {
        "content": "<p>slice is defined as just elements in memory without a size</p>",
        "id": 205389045,
        "sender_full_name": "lcnr",
        "timestamp": 1596044463
    },
    {
        "content": "<p>So there are never other things on the heap with <code>Box&lt;[u8]&gt;</code>, i.e. the size is always stored as part of the pointer</p>",
        "id": 205389088,
        "sender_full_name": "lcnr",
        "timestamp": 1596044488
    },
    {
        "content": "<blockquote>\n<p>Is it documented somewhere that Box&lt;[u8]&gt; is layed out as a pointer + size on the stack?</p>\n</blockquote>\n<p>It should</p>",
        "id": 205389214,
        "sender_full_name": "lcnr",
        "timestamp": 1596044542
    },
    {
        "content": "<p>let me search <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 205389224,
        "sender_full_name": "lcnr",
        "timestamp": 1596044552
    },
    {
        "content": "<p>The abi of pointers to dst's (including <code>Box&lt;[T]&gt;</code>) is undefined.</p>",
        "id": 205389272,
        "sender_full_name": "bjorn3",
        "timestamp": 1596044589
    },
    {
        "content": "<p>it is defined that <code>[T]</code> never contains data about itself</p>",
        "id": 205389434,
        "sender_full_name": "lcnr",
        "timestamp": 1596044656
    },
    {
        "content": "<p>Also you should prefer <code>Box::into_raw</code> over <code>Box::leak</code>. The later is for when you really want to leak the memory, while the former is for for example ffi cases. Make sure to use <code>Box::from_raw</code> to deallocate the memory though. You are not allowed to use <code>free</code> to deallocate memory allocated by rust, as rust may use a different allocator than C using <code>#[global_allocator]</code>.</p>",
        "id": 205389485,
        "sender_full_name": "bjorn3",
        "timestamp": 1596044689
    },
    {
        "content": "<blockquote>\n<p>I was passing ownership to a C library and needed to know.</p>\n</blockquote>\n<p>Then you must use <code>malloc</code> or <code>std::alloc::System.alloc</code>.</p>",
        "id": 205389586,
        "sender_full_name": "bjorn3",
        "timestamp": 1596044738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205389272\">said</a>:</p>\n<blockquote>\n<p>The abi of pointers to dst's (including <code>Box&lt;[T]&gt;</code>) is undefined.</p>\n</blockquote>\n<p>Does that mean the behavior of passing the pointer + size of a Box&lt;[T]&gt; to a C function would lead to undefined behavior? What would be the correct way of passing a variable length buffer to a C function?</p>",
        "id": 205389859,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596044875
    },
    {
        "content": "<blockquote>\n<p>Does that mean the behavior of passing the pointer + size of a Box&lt;[T]&gt; to a C function would lead to undefined behavior? </p>\n</blockquote>\n<p>It is unspecified. It depends on the exact abi rustc chooses and what the C function expects.</p>",
        "id": 205390099,
        "sender_full_name": "bjorn3",
        "timestamp": 1596044987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205389434\">said</a>:</p>\n<blockquote>\n<p>it is defined that <code>[T]</code> never contains data about itself</p>\n</blockquote>\n<p>Ah, okay, where is that? I was unable to find it myself...<br>\n<a href=\"https://doc.rust-lang.org/std/primitive.slice.html\">https://doc.rust-lang.org/std/primitive.slice.html</a> is somewhat vague on this and defines a slice as a <code>view int a contiguous sequence</code> which to me suggests the slice itself is the view (so the pointer + size), which isn't the case.</p>",
        "id": 205390106,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596044989
    },
    {
        "content": "<p>Sounds like you might want <code>Vec</code> instead</p>",
        "id": 205390110,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596044991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205389434\">said</a>:</p>\n<blockquote>\n<p>it is defined that <code>[T]</code> never contains data about itself</p>\n</blockquote>\n<p>hmm, this info isn't as public as I thought. It isn't really possible for this to not be the case, considering that we have O(1) subslicing and the ability to use ptr offset to navigate slices...</p>",
        "id": 205390115,
        "sender_full_name": "lcnr",
        "timestamp": 1596044996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205390099\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does that mean the behavior of passing the pointer + size of a Box&lt;[T]&gt; to a C function would lead to undefined behavior? </p>\n</blockquote>\n<p>It is unspecified. It depends on the exact abi rustc chooses and what the C function expects.</p>\n</blockquote>\n<p>Wait, it is defined to pass the size and ptr of a <code>Box</code> to a C function, isn't it? It is undefined to drop said pointer without using <code>Box::from_raw</code> though</p>",
        "id": 205390329,
        "sender_full_name": "lcnr",
        "timestamp": 1596045105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205390110\">said</a>:</p>\n<blockquote>\n<p>Sounds like you might want <code>Vec</code> instead</p>\n</blockquote>\n<p>That's actually what I'm using now, but then I have to store the capacity somewhere else when deallocating later.<br>\nIs the ABI for Vec defined when passing to an FFI function?</p>",
        "id": 205390345,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596045115
    },
    {
        "content": "<p>But my journey from Box&lt;[T]&gt; still left me curious <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 205390435,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596045153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205390329\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205390099\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does that mean the behavior of passing the pointer + size of a Box&lt;[T]&gt; to a C function would lead to undefined behavior? </p>\n</blockquote>\n<p>It is unspecified. It depends on the exact abi rustc chooses and what the C function expects.</p>\n</blockquote>\n<p>Wait, it is defined to pass the size and ptr of a <code>Box</code> to a C function, isn't it? It is undefined to drop said pointer without using <code>Box::from_raw</code> though</p>\n</blockquote>\n<p>If you explicitly separate the ptr and size then it works. If you pass <code>Box&lt;[T]&gt;</code> directly then it isn't allowed.</p>",
        "id": 205390452,
        "sender_full_name": "bjorn3",
        "timestamp": 1596045160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205390452\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205390329\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205390099\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does that mean the behavior of passing the pointer + size of a Box&lt;[T]&gt; to a C function would lead to undefined behavior? </p>\n</blockquote>\n<p>It is unspecified. It depends on the exact abi rustc chooses and what the C function expects.</p>\n</blockquote>\n<p>Wait, it is defined to pass the size and ptr of a <code>Box</code> to a C function, isn't it? It is undefined to drop said pointer without using <code>Box::from_raw</code> though</p>\n</blockquote>\n<p>If you explicitly separate the ptr and size then it works. If you pass <code>Box&lt;[T]&gt;</code> directly then it isn't allowed.</p>\n</blockquote>\n<p>Aaaaah, okay, I was passing the two separately, so it's all good. You had me quite worried there for a second <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  .</p>",
        "id": 205390568,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596045223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205389434\">said</a>:</p>\n<blockquote>\n<p>it is defined that <code>[T]</code> never contains data about itself</p>\n</blockquote>\n<p>hmm, this info isn't as public as I thought. It isn't really possible for this to not be the case, considering that we have O(1) subslicing and the ability to use ptr offset to navigate slices...</p>\n<div class=\"codehilite\"><pre><span></span><code>Where do you think would be the correct place to put such information? It makes a lot of sense that this is the case, but I was still searching to find confirmation of this for about an hour, and it didn&#39;t seem explicitely stated anywhere.\n\nIt&#39;s one of those cases where having it wrong would lead to a tiny memory leak that would be extremely hard to find.\nI figured I could write a few sentences to create a PR to expand the docs on this myself and wanted to know where to start?\n</code></pre></div>",
        "id": 205391035,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596045430
    },
    {
        "content": "<p>Probably in the docs of <code>slice</code> itself.</p>",
        "id": 205391234,
        "sender_full_name": "lcnr",
        "timestamp": 1596045533
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/primitive.slice.html\">https://doc.rust-lang.org/std/primitive.slice.html</a></p>",
        "id": 205391253,
        "sender_full_name": "lcnr",
        "timestamp": 1596045549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/docs/near/205391234\">said</a>:</p>\n<blockquote>\n<p>Probably in the docs of <code>slice</code> itself.</p>\n</blockquote>\n<p>Thanks, I'll try to get a PR up on this in the next while.<br>\nThanks <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> &amp; <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> for your help.</p>",
        "id": 205391521,
        "sender_full_name": "Leon Matthes",
        "timestamp": 1596045656
    }
]