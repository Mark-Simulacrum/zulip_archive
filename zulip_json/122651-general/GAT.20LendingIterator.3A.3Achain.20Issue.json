[
    {
        "content": "<p>So I've being trying to create a chain operation similar to the Iterator::chain but for GAT LendingIterator's:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Of course I need a structure that contains the two lending iterators that I want to chain, that itself impls LendingIterator:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Chain</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Chain</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">A</span>: <span class=\"nc\">LendingIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">LendingIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But the compiler complains (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=de894bf44b0583186b4228b491258e22\">rust playground</a>):</p>\n<blockquote>\n<p>Compiling playground v0.0.1 (/playground)<br>\nerror[E0311]: the parameter type <code>B</code> may not live long enough<br>\n  --&gt; src/main.rs:14:12<br>\n   |<br>\n14 | impl&lt;A, B&gt; LendingIterator for Chain&lt;A, B&gt;<br>\n   |         -  ^^^^^^^^^^^^^^^ ...so that the type <code>B</code> will meet its required lifetime bounds<br>\n   |         |<br>\n   |         help: consider adding an explicit lifetime bound...: <code>B: 'a</code></p>\n<p>error[E0311]: the parameter type <code>B</code> may not live long enough<br>\n  --&gt; src/main.rs:21:8<br>\n   |<br>\n14 | impl&lt;A, B&gt; LendingIterator for Chain&lt;A, B&gt;<br>\n   |         - help: consider adding an explicit lifetime bound...: <code>B: 'a</code><br>\n...<br>\n21 |     fn next(&amp;mut self) -&gt; Option&lt;Self::Item&lt;'_&gt;&gt; {<br>\n   |        ^^^^ ...so that the type <code>B</code> will meet its required lifetime bounds</p>\n<p>error: could not compile <code>playground</code> due to 2 previous errors</p>\n</blockquote>\n<p>I am not sure what I am doing wrong? I've tried adding lifetimes everywhere, nothing seems to work.</p>\n<p>I am sorry if this is the wrong place for this question.</p>",
        "id": 278018043,
        "sender_full_name": "Alastair Holmes",
        "timestamp": 1649249311
    },
    {
        "content": "<p>This is a bug of GATs, see <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269863728\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269863728</a> : having a higher-order GAT equality constraint leads Rust to think the implementor of the constraint needs to satisfy that <code>T : for&lt;'a&gt; 'a</code>, <em>i.e.</em>, that <code>T : 'static</code>, when in reality it should be <code>T : &lt;for 'a where T : 'a&gt; 'a</code>, <em>i.e.</em>, a trivially satisfied constraint.</p>",
        "id": 278176903,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1649343641
    }
]