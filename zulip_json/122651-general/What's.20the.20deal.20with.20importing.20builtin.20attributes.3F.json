[
    {
        "content": "<p>This is valid Rust code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">inline</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It reexports the <code>#[inline]</code> attribute. Builtin attributes cannot actually be used through this though. It also seems that they reside in the macro namespace, despite not really being macros.</p>\n<p>What's the deal with this odd feature? Is this documented anywhere? What <em>can</em> I do with this?</p>",
        "id": 205027336,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595721177
    },
    {
        "content": "<p>file an issue ccing petrochenkov</p>",
        "id": 205031906,
        "sender_full_name": "nagisa",
        "timestamp": 1595730300
    },
    {
        "content": "<p>This is just a consequence of uniform import paths - you can import any name that is in scope.</p>",
        "id": 205041723,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1595750734
    },
    {
        "content": "<p><code>inline</code> is in scope in macro namespace.</p>",
        "id": 205041727,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1595750748
    },
    {
        "content": "<p>Making the <code>use inline;</code> itself an error is too strict because <code>inline</code> can mean something reasonable in other, non-macro namespaces.<br>\nSee e.g. <a href=\"https://github.com/rust-lang/rust/issues/56326\">#56326</a> and other issues linked from <a href=\"https://github.com/rust-lang/rust/pull/56759\">https://github.com/rust-lang/rust/pull/56759</a>.</p>",
        "id": 205041827,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1595750888
    },
    {
        "content": "<p>And actual use of built-in attributes through reexports is prohibited because the built-in attribute detection is often done through silly textual match (<code>name == sym::inline</code>) rather than through name resolution, so <code>use inline as inline2</code> + <code>#[inline2]</code> won't be detected as a use of the <code>inline</code> attribute.</p>",
        "id": 205041887,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1595751076
    },
    {
        "content": "<p>Ah, I see. Thanks for the explanation!</p>",
        "id": 205046108,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595759201
    },
    {
        "content": "<p>Attributes live in the macro namespace. That much, at least, is expected.</p>",
        "id": 205307490,
        "sender_full_name": "alercah",
        "timestamp": 1595983659
    },
    {
        "content": "<p>(because proc macros)</p>",
        "id": 205307551,
        "sender_full_name": "alercah",
        "timestamp": 1595983712
    }
]