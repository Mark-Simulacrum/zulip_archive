[
    {
        "content": "<p>Hi! In one of my projects, I'm defining a trait <code>New</code> to address all objects with a common <code>fn new</code>. This <code>new</code> function takes an <code>&amp;str</code> parameter, so lifetimes come into play. One implementation wants to store that <code>&amp;str</code> parameter in its struct, so the struct also needs a lifetime parameter. On top of that, I don't want trait bounds on <code>New</code> to deal with the lifetime, so I'm definining the lifetime only for the function and not for the entire trait (<code>fn new&lt;'a&gt;</code> instead of <code>trait New&lt;'a&gt;</code>).</p>\n<p>My current code looks like this and doesn't work :D</p>\n<div class=\"codehilite\"><pre><span></span><code>trait New {\n    fn new&lt;&#39;a&gt;(value: &amp;&#39;a str) -&gt; Self;\n}\n\nstruct Obj&lt;&#39;n&gt; {\n    value: &amp;&#39;n str,\n}\n\nimpl&lt;&#39;n&gt; New for Obj&lt;&#39;n&gt; {\n    fn new&lt;&#39;a&gt;(value: &amp;&#39;a str) -&gt; Self {\n        Self { value }\n    }\n}\n</code></pre></div>\n<p>As per Rust rules, I need to specify a lifetime on every <code>impl</code> for <code>Obj</code>. Due to the defined trait, I need to specify a different lifetime for <code>fn new</code>.<br>\nBut now the Rust compiler complains that both lifetimes are not identical.<br>\nI can't change anything in the <code>fn new</code> line though, because then the Rust compiler complains that I'm not implementing the trait correctly.</p>\n<p>What am I missing?</p>",
        "id": 238049755,
        "sender_full_name": "Colin Finck",
        "timestamp": 1620582100
    },
    {
        "content": "<p>You cannot implement that trait by storing borrowed data in <code>Self</code></p>",
        "id": 238050097,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620582472
    },
    {
        "content": "<p>You can change the trait to be generic over <code>'a</code> instead of the <code>new</code> method, then you should be able to implement it</p>",
        "id": 238050145,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620582492
    },
    {
        "content": "<p><span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 238050303,
        "sender_full_name": "Colin Finck",
        "timestamp": 1620582688
    },
    {
        "content": "<p>Thanks a lot! That was indeed the part I missed.<br>\nNow I can also deduce a rule for myself when to put type parameters in the function and when to put them in the trait itself :)</p>",
        "id": 238050408,
        "sender_full_name": "Colin Finck",
        "timestamp": 1620582832
    }
]