[
    {
        "content": "<p>If you have a pinned type (e.g. <code>Pin&lt;&amp;mut Foo&gt;</code>) which has a atomic field like <code>static Foo { ...., atomic: AtomicUsize, ... }</code> and we have some references to the atomic which relies on the guarantees of <code>Pin</code> but might e.g. be from a separate thread. </p>\n<p>Then do we need to have a <code>UnsafeCell&lt;AtomicUsize&gt;</code> (or similar)?</p>\n<p>The thing is we basically have (and use concurrently&amp;parallel) a pointer to the  atomic but at the same time through the <code>Pin&lt;&amp;mut ...&gt;</code> we do have a <code>&amp;mut</code> reference to the field.</p>\n<p>Furthermore the field is on stack, so maybe the compiler have  some assumptions about aliasing rules.</p>\n<p>And <code>Atomic*</code> types have <code>&amp;mut self</code> method relying on it then only being accessed by that reference.</p>\n<p>My guess is as long as we don't access the atomic field through a <code>&amp;mut</code> (even if we access the struct through a <code>&amp;mut</code>) it would be fine. But I'm really unsure about what the compiler and especially llvm might do because of the aliasing guarantees we give out with <code>&amp;mut</code> (through we might currently not pass them to llvm?)??</p>",
        "id": 212923812,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602348296
    },
    {
        "content": "<p><code>AtomicUsize</code> is a wrapper around <code>UnsafeCell&lt;usize&gt;</code>.</p>",
        "id": 212923973,
        "sender_full_name": "bjorn3",
        "timestamp": 1602348587
    },
    {
        "content": "<p>All relevant <code>AtomicUsize</code> methods should take <code>&amp;self</code>.</p>",
        "id": 212924017,
        "sender_full_name": "bjorn3",
        "timestamp": 1602348614
    },
    {
        "content": "<p>You must never have two <code>&amp;mut</code> pointing to the same location at the same time. While it is currently not used, when <code>-Zmutable-noalias=yes</code> is used, LLVM will be told that two <code>&amp;mut</code> don't alias. It is currently disabled because there used to be a bug in LLVM. I don't know if it is already fixed.</p>",
        "id": 212924097,
        "sender_full_name": "bjorn3",
        "timestamp": 1602348791
    },
    {
        "content": "<p>Thanks a lot.</p>\n<p>Given that's a <code>UnsafeCell&lt;usize&gt;</code> internally I know it <del>will</del> should work.</p>\n<p>For clarification, Does having a <code>&amp;mut Foo</code> (which you don't use to access the <code>bar</code> field and a ~<code>&amp;mut Foo.bar</code>  counting as different memory locations or does the <code>&amp;mut Foo</code> implies a <code>&amp;mut Foo.bar</code>?</p>\n<p>(The <code>&amp;mut self</code> method I meant is: <code>pub fn get_mut(&amp;mut self) -&gt; &amp;mut usize</code>, but this no longer matters for my question now that I know that it uses <code>UnsafeCell</code> internally).</p>",
        "id": 212924473,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602349282
    },
    {
        "content": "<blockquote>\n<p>or does the <code>&amp;mut Foo</code> implies a <code>&amp;mut Foo.bar</code>?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 212924610,
        "sender_full_name": "bjorn3",
        "timestamp": 1602349343
    },
    {
        "content": "<p>Thanks a lot knowing this helps quite a bit. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 212925398,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602349760
    },
    {
        "content": "<p>Wait, quoting rust doc:</p>\n<blockquote>\n<p>There is no legal way to obtain aliasing &amp;mut, not even with UnsafeCell&lt;T&gt;</p>\n</blockquote>\n<p>But doesn't that men futures are <del>broken</del> (edit, more like tricky) as they do have both <code>&amp;mut</code> to the future and potential other <code>&amp;mut</code>/<code>&amp;</code> in the internally borrows? It probably is not a problem for async only. But the moment you pass a reference to a thread (using something like a async based scoped thread library) it would fall over, right?</p>",
        "id": 212925680,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602350089
    },
    {
        "content": "<p>Yes <a href=\"https://github.com/rust-lang/rust/issues/63818\">https://github.com/rust-lang/rust/issues/63818</a></p>",
        "id": 212925799,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602350204
    },
    {
        "content": "<p>Ok, then I will need to slightly change my API.</p>\n<p>Luckily I can go from <code>&amp;mut</code> + internal referencing to <code>&amp;</code> + making nearly all parts using cell types. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>.</p>",
        "id": 212925906,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1602350286
    }
]