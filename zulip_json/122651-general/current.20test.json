[
    {
        "content": "<p>Hi folks, do you know if there's some built-in way to determine what test crate and test file (in <code>tests/</code> is currently being run? I need to (optionally) emit some diagnostics to a file (too verbose for stdout/stderr) and I'd like to be able to associate it with the test. I imagine I can set up a macro that achieve (most of) this, but it'd be cool if it was available already.</p>",
        "id": 240578366,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1622192657
    },
    {
        "content": "<p>You can get the file with <code>file!</code>. I don't know how to get the crate name.</p>",
        "id": 240585572,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622196968
    },
    {
        "content": "<p>cargo sets some envvars.</p>",
        "id": 240591989,
        "sender_full_name": "nagisa",
        "timestamp": 1622201772
    },
    {
        "content": "<p>But relying on them in tests is quite nasty - complicates uses without cargo.</p>",
        "id": 240592011,
        "sender_full_name": "nagisa",
        "timestamp": 1622201807
    },
    {
        "content": "<blockquote>\n<p>cargo sets some envvars</p>\n</blockquote>\n<p>Ah, interesting, may look into that. This is essentially a convenience for test-driven-development, so I'm not too worried about uses without cargo. Thanks!</p>",
        "id": 240594625,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1622203574
    },
    {
        "content": "<p>I think <code>module_path!</code> includes the crate name</p>",
        "id": 240653059,
        "sender_full_name": "cuviper",
        "timestamp": 1622231689
    },
    {
        "content": "<p>General undefined behavior question: is a a pointer comparison outside of the same array undefined behavior in Rust like it is in C/C++ (and I believe LLVM as well).</p>\n<p>The offending code I'm working with is another library I'm checking for any issue with correctness/safety, and I found the following offending code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ByteSlice</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">end</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ByteSlice</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">check_len</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In C/C++, <code>self.ptr.add(n) &lt;= self.end</code> would be undefined behavior is <code>n</code> is greater than <code>self.end - self.ptr</code>.</p>",
        "id": 243311246,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1624208280
    },
    {
        "content": "<p>Yes, it is UB: <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#safety-5\">https://doc.rust-lang.org/std/primitive.pointer.html#safety-5</a></p>",
        "id": 243311832,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624209076
    },
    {
        "content": "<p>Not because of the comparison, but just because you constructed the out of bounds pointer in the first place</p>",
        "id": 243311928,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624209201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"153718\">Alexander Huszagh (He/Him)</span> <a href=\"#narrow/stream/122651-general/topic/current.20test/near/243311246\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ByteSlice</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">check_len</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If <code>n</code> is untrusted, it's UB before even getting to the <code>&lt;=</code> because the <code>add</code> needs to be inbounds to be sound.</p>\n<p>(Pointer comparison in Rust is safe, so cannot ever be UB, but it's complex to use the result in a meaningful way.)</p>",
        "id": 243311939,
        "sender_full_name": "scottmcm",
        "timestamp": 1624209229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/current.20test/near/243311832\">said</a>:</p>\n<blockquote>\n<p>Yes, it is UB: <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#safety-5\">https://doc.rust-lang.org/std/primitive.pointer.html#safety-5</a></p>\n</blockquote>\n<p>Perfect, that was my assumption as well. I'm glad I audited this.</p>\n<p>So the correct way would be this, correct?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">check_len</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Or is there a better approach? <code>self.end</code> and <code>self.ptr</code> can be guaranteed to be of the same array (well, end is 1-past-the-end of the array, which is still well-defined behavior).</p>",
        "id": 243312165,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1624209529
    },
    {
        "content": "<p>Ah nevermind, offset_from exists.</p>",
        "id": 243312273,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1624209704
    },
    {
        "content": "<p>Here's what <code>slice::Iter</code> does: <a href=\"https://github.com/rust-lang/rust/blob/2e940ac5e97ba4424be5a8e02ff4c7846ca1e25a/library/core/src/slice/iter/macros.rs#L14-L38\">https://github.com/rust-lang/rust/blob/2e940ac5e97ba4424be5a8e02ff4c7846ca1e25a/library/core/src/slice/iter/macros.rs#L14-L38</a></p>\n<p>If you're only dealing in bytes, though, that complication is unnecessary.</p>",
        "id": 243312927,
        "sender_full_name": "scottmcm",
        "timestamp": 1624210631
    },
    {
        "content": "<p>Wouldn't <code>wrapping_add</code> work here? It specifically does not require the pointer be valid until it is dereferenced</p>",
        "id": 243313169,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624210976
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add\">https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add</a><br>\nThe paragraph on how it compares to <code>add</code> implies it is fine to compare the result as long as you're not dereferencing it</p>",
        "id": 243313250,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624211071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> That looks interesting, yeah.</p>",
        "id": 243314815,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1624213256
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kt\">isize</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">().</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">.</span><span class=\"n\">offset_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This has the advantage of working even for slices of <code>T</code> where <code>size_of::&lt;T&gt;() &gt; 1</code></p>",
        "id": 243317029,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1624216514
    },
    {
        "content": "<p>But I think it doesn't work for ZSTs, since those can be longer than <code>usize::MAX</code>.</p>\n<p><code>offset_from</code> seems like the right choice, so long as it's known that both pointers are part of the same allocated object.</p>",
        "id": 243324812,
        "sender_full_name": "scottmcm",
        "timestamp": 1624227997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/current.20test/near/243324812\">said</a>:</p>\n<blockquote>\n<p>But I think it doesn't work for ZSTs, since those can be longer than <code>usize::MAX</code>.</p>\n<p><code>offset_from</code> seems like the right choice, so long as it's known that both pointers are part of the same allocated object.</p>\n</blockquote>\n<p>Yep, thinking this is the best solution. This is part of my (delayed) efforts to integrate fast-float-rust into core. Basically, the library has a custom slice type for better iteration efficiency, just ensuring there's no UB in it anywhere prior to submitting a PR.</p>",
        "id": 243324897,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1624228174
    },
    {
        "content": "<p>What's wrong with <code>[u8]</code> or <code>slice::Iter&lt;'a, u8&gt;</code>?  How's the custom one faster?</p>",
        "id": 243339964,
        "sender_full_name": "scottmcm",
        "timestamp": 1624251426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/current.20test/near/243324812\">said</a>:</p>\n<blockquote>\n<p>But I think it doesn't work for ZSTs, since those can be longer than <code>usize::MAX</code>.</p>\n</blockquote>\n<p>Yep, I did mean that <code>&gt; 1</code> part: on top of that, <code>.offset_from</code> panics for Zsts! So a <code>if ::mem::size_of::&lt;T&gt;() == 0 { return true; }</code> branch ought to be added should support for Zsts be warranted.</p>",
        "id": 243371029,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1624276354
    }
]