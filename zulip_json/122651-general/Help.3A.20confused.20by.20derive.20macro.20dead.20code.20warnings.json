[
    {
        "content": "<p>For this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Token</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">token_type</span>: <span class=\"nc\">TokenType</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lexeme</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">literal</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Literal</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">line</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I receive the following warning:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">warning</span>: <span class=\"nc\">field</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">read</span>: <span class=\"err\">`</span><span class=\"n\">line</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">token</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">63</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">63</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">line</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"cp\">#[warn(dead_code)]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"n\">Token</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">impls</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">traits</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Debug</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Clone</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">intentionally</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"w\"> </span><span class=\"n\">during</span><span class=\"w\"> </span><span class=\"n\">dead</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">analysis</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">token</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">58</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">#[derive(Clone, Debug)]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^^^^^</span><span class=\"w\">  </span><span class=\"o\">^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">warning</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">derive</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Clone</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Can someone explain to me what this segment means:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"n\">Token</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">impls</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">traits</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Debug</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Clone</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">intentionally</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"w\"> </span><span class=\"n\">during</span><span class=\"w\"> </span><span class=\"n\">dead</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">analysis</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277658032,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649015952
    },
    {
        "content": "<p>I cannot remove the <code>#[derive(Clone, Debug)]</code> line because Debug and Clone are being used in other parts of the code.</p>",
        "id": 277658152,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649016038
    },
    {
        "content": "<p>The <code>dead_code</code> check ignores <code>Debug</code> and <code>Clone</code> impls for the purpose of determining if fields are ever \"used\".  If the impl itself is the only thing using the field, then the field is considered unused.  This is done so that the <code>dead_code</code> lint is actually useful. Otherwise, any <code>Debug</code> impl would prevent <code>dead_code</code> from actually detecting unused fields.  </p>\n<p>There's a bit more discussion at <a href=\"https://github.com/rust-lang/rust/issues/85200\">#85200</a> why this was done.</p>",
        "id": 277659048,
        "sender_full_name": "Eric Huss",
        "timestamp": 1649017320
    },
    {
        "content": "<p>Is that available to third party derives yet</p>",
        "id": 277659093,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649017366
    },
    {
        "content": "<p>Let me try it</p>",
        "id": 277659179,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649017443
    },
    {
        "content": "<p>I'm not aware of any movement towards that.</p>",
        "id": 277659188,
        "sender_full_name": "Eric Huss",
        "timestamp": 1649017457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372058\">@João Marcos Bezerra</span> basically it means that no code usefully reads your fields. Try removing them; is anything broken?</p>",
        "id": 277659234,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649017526
    },
    {
        "content": "<p>It would be \"broken\" because now I won't see them in my Debug uses</p>\n<p>What if I do this <code>log(format!(\"{token:?}\"));</code></p>",
        "id": 277659318,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649017624
    },
    {
        "content": "<p>currently I'm just outputting it in <code>println!</code></p>",
        "id": 277659332,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649017664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Help.3A.20confused.20by.20derive.20macro.20dead.20code.20warnings/near/277659093\">said</a>:</p>\n<blockquote>\n<p>Is that available to third party derives yet</p>\n</blockquote>\n<p>I think no, I tried with Deserialize and it didn't had this <code>note</code> part</p>",
        "id": 277659374,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649017711
    },
    {
        "content": "<p>I'm trying to come up with a better message from a users perspective for this note.</p>\n<p>I think 'dead code analysis' makes more sense from the compiler's point of view.</p>",
        "id": 277659465,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649017834
    },
    {
        "content": "<p>Well, that would only occur if the <code>Deserialize</code> macro opted into using it. The compiler would have to make it available first (which is what my question is).</p>",
        "id": 277659482,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649017870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372058\">João Marcos Bezerra</span> <a href=\"#narrow/stream/122651-general/topic/Help.3A.20confused.20by.20derive.20macro.20dead.20code.20warnings/near/277659318\">said</a>:</p>\n<blockquote>\n<p>It would be \"broken\" because now I won't see them in my Debug uses</p>\n</blockquote>\n<p>If that's literally the <strong>only</strong> purpose of the <code>line</code> field, then add an <code>#[allow(..)]</code> on the field</p>",
        "id": 277659535,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649017925
    },
    {
        "content": "<p>makes sense</p>",
        "id": 277659542,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649017975
    },
    {
        "content": "<p>thanks for the clarifications</p>",
        "id": 277659547,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649017984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Help.3A.20confused.20by.20derive.20macro.20dead.20code.20warnings/near/277659482\">said</a>:</p>\n<blockquote>\n<p>Well, that would only occur if the <code>Deserialize</code> macro opted into using it. The compiler would have to make it available first (which is what my question is).</p>\n</blockquote>\n<p>this line, I think the <code>rustc</code> prefix means it's not available<br>\n<code>#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]</code></p>",
        "id": 277659555,
        "sender_full_name": "João Marcos Bezerra",
        "timestamp": 1649018013
    },
    {
        "content": "<p>Something existing <em>only</em> for the purpose of being output in <code>Debug</code> (not even for end-users via <code>Display</code>) is too rare of an occurrence to prevent warnings for the other cases.</p>",
        "id": 277659572,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649018042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372058\">João Marcos Bezerra</span> <a href=\"#narrow/stream/122651-general/topic/Help.3A.20confused.20by.20derive.20macro.20dead.20code.20warnings/near/277659555\">said</a>:</p>\n<blockquote>\n<p>this line, I think the <code>rustc</code> prefix means it's not available<br>\n<code>#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]</code></p>\n</blockquote>\n<p>Yep, that's what it was last I checked as well. I really want it for SNAFU.</p>",
        "id": 277659603,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649018075
    }
]