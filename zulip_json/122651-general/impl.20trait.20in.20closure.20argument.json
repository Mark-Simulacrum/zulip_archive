[
    {
        "content": "<p>Why do we not support impl traits in closure arguments? </p>\n<p>eg: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//               ^^^^^^^^^  `impl Trait` not allowed outside of function and inherent method return types</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The way I understand it, closures are functions with an environment, so I'm wondering if this just needs to be worked into the compiler, or are there reasons to not do so?</p>",
        "id": 220984517,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609026822
    },
    {
        "content": "<p>Actually, now that I think of this, the error message is also a little incorrect, should it not say something along the lines of <code>impl Trait</code> is not allowed outside of function args and return types because the following is valid Rust code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220984571,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609026923
    },
    {
        "content": "<p>Okay so this was postponed: <a href=\"https://github.com/rust-lang/rfcs/pull/1650\">https://github.com/rust-lang/rfcs/pull/1650</a></p>",
        "id": 220985133,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609027968
    },
    {
        "content": "<p>In the meantime, given your use case, you can use <code>&amp;dyn Debug</code> for your parameter</p>",
        "id": 220985260,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609028265
    },
    {
        "content": "<p>Or if you want to go the extra mile, see the end of this post: <a href=\"https://users.rust-lang.org/t/generic-closure/47732/5\">https://users.rust-lang.org/t/generic-closure/47732/5</a></p>",
        "id": 220985357,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609028453
    },
    {
        "content": "<p>I don't think closures normally support declaring new generic args and we probably didn't want a case where impl trait is the only way to write something</p>",
        "id": 220986728,
        "sender_full_name": "simulacrum",
        "timestamp": 1609031222
    },
    {
        "content": "<p>Not sure if closures as something that can be monomorphized is also well supported</p>",
        "id": 220986744,
        "sender_full_name": "simulacrum",
        "timestamp": 1609031264
    },
    {
        "content": "<p>I think this is one instance of a general hole in expressivity involving the lack of <code>decltype</code> (not that I like that approach to naming the unnameable)</p>",
        "id": 220986866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609031501
    },
    {
        "content": "<p>ideally you would be able to name the type of x inside the body (without changing the signature of the function), and then use that type in the declaration of <code>c</code></p>",
        "id": 220986919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609031593
    },
    {
        "content": "<p>(assuming that the goal here is to declare a non-generic closure <code>c</code> specialized only to the particular type of <code>x</code>, not a generic closure as in the links)</p>",
        "id": 220986968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609031646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/impl.20trait.20in.20closure.20argument/near/220986968\">said</a>:</p>\n<blockquote>\n<p>(assuming that the goal here is to declare a non-generic closure <code>c</code> specialized only to the particular type of <code>x</code>, not a generic closure as in the links)</p>\n</blockquote>\n<p>yea that's kind of what I'm trying to do, and I really just need it for one particular type and. I kind of don't want to add another function just for it</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">trait_func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">trait_func</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">X</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// where X impls A</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220987219,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609032163
    },
    {
        "content": "<p>you just used a trait where a type is expected? Is this <code>impl</code> or <code>dyn</code></p>",
        "id": 220988032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609033667
    },
    {
        "content": "<p>At least in these examples, it's not really a closure at all (it doesn't capture anything), so you can use a local function instead</p>",
        "id": 220988089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609033729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/impl.20trait.20in.20closure.20argument/near/220988032\">said</a>:</p>\n<blockquote>\n<p>you just used a trait where a type is expected? Is this <code>impl</code> or <code>dyn</code></p>\n</blockquote>\n<p><code>x: impl A</code> didn't work, and yeah I have been hiding the capture part <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. <code>x: &amp;dyn A</code> errors out with trait_func method cannot be invoked on a trait object. I haven't gotten too much chance to debug it yet</p>",
        "id": 220988149,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609033821
    },
    {
        "content": "<p>I would assume <code>x: A</code> would get interpreted as <code>x: dyn A</code> and so would get an unsized local error</p>",
        "id": 220988212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609033968
    },
    {
        "content": "<p>the other workaround would be to use <code>fn g&lt;T: Debug&gt;(x: T)</code> for the outer function, of course</p>",
        "id": 220988270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609034096
    },
    {
        "content": "<p>yeah I'm kind of avoiding the outer function,  especially since I don't care about other types that implement that trait</p>",
        "id": 220988327,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609034179
    },
    {
        "content": "<p>The following works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Situation:</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// and we want to write a closure that takes a `f()` as a parameter</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">captured</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// let's imagine an `fn` is out of the question</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">captured</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// typeof(x) = typeof(f())</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Note that in the <code>if false</code> branch, should <code>f</code> be taking parameters, each can be replaced with <code>loop {}</code></p>",
        "id": 221005293,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609068746
    },
    {
        "content": "<p>That's kinda smart. That said I realise impl trait would have not solved my problem. I really just need to be able to write </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">|</span><span class=\"n\">T</span>: <span class=\"nc\">TraitBound</span><span class=\"o\">|</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221025700,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609107581
    },
    {
        "content": "<p>But if <code>T</code> is coming from an outer scope, then it should already have the trait bound from there</p>",
        "id": 221026548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609109118
    }
]