[
    {
        "content": "<p>Hello, question. What tools exist that allow me to define a procedure for generating Rust code? Obviously a proc macro can do it, I guess, but what I really want is to capture the <strong>expansion</strong> of a macro... should I just literally write a macro and then dump the macro expansion into a file?</p>",
        "id": 213371686,
        "sender_full_name": "Jubilee",
        "timestamp": 1602726432
    },
    {
        "content": "<p>\"Possibly yes, why do you want to do this?\"</p>",
        "id": 213376491,
        "sender_full_name": "Lokathor",
        "timestamp": 1602732065
    },
    {
        "content": "<p>because your goal might change the answer</p>",
        "id": 213376493,
        "sender_full_name": "Lokathor",
        "timestamp": 1602732072
    },
    {
        "content": "<p>My two interests for this are generally \"something akin to closely-steered fuzzing\" and \"generating piles of code for something that has a predictable structure, like arch intrinsic functions, in a way that is usually too naughty to do in a <code>macro_rules!</code>declaration\".</p>",
        "id": 213376977,
        "sender_full_name": "Jubilee",
        "timestamp": 1602732717
    },
    {
        "content": "<p>This sort of thing is probably very specialized to the task you want to accomplish. when i needed to generate code beyond what macro_rules could do, i just wrote a program that outputs rust code. i didn't use any special libs to try and manipulate the code in a fancy way at like an AST level, because my needs were ultimately fine with just some string templates that i could format the values into and then print it all to stdout.</p>",
        "id": 213377859,
        "sender_full_name": "Lokathor",
        "timestamp": 1602733790
    },
    {
        "content": "<p>That is Perfectly Reasonable.</p>",
        "id": 213377935,
        "sender_full_name": "Jubilee",
        "timestamp": 1602733873
    },
    {
        "content": "<p>gonna PR \"in order to reach 'C parity' we need a Rust preprocessor\" to rust-lang/rfcs (no)</p>",
        "id": 213378513,
        "sender_full_name": "Jubilee",
        "timestamp": 1602734693
    },
    {
        "content": "<p>@rustbot fcp postpone</p>",
        "id": 213378533,
        "sender_full_name": "Lokathor",
        "timestamp": 1602734732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> One thing I have done occasionally is generate rust code inside of a build script￼. You can use plain strings or bring in the quote crate. ￼</p>",
        "id": 213409941,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602760947
    },
    {
        "content": "<p>Example: <a href=\"https://github.com/shepmaster/jetscii/blob/master/build.rs\">https://github.com/shepmaster/jetscii/blob/master/build.rs</a></p>",
        "id": 213409970,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602760990
    },
    {
        "content": "<p>This is also a way of doing limited kinds of const evaluation before it’s fully supported￼</p>",
        "id": 213410005,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602761029
    }
]