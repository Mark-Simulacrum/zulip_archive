[
    {
        "content": "<p>Dumb question, is there a way to yield execution in async, without actually blocking on anything? Eg. to use in a realtime OS where you want to allow for a switch to a different task, but don't have a specific reason to. In this sort of way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Yielder</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Yielder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Yielder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Fullish example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7e00103c4fa3d5bfaddfb0d78f433902\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7e00103c4fa3d5bfaddfb0d78f433902</a></p>",
        "id": 215992539,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1604817566
    },
    {
        "content": "<p>I think this should Just Work if you add missing <code>cx.waker.wake_by_ref()</code> before returning Pending</p>",
        "id": 216001303,
        "sender_full_name": "Mikail Bagishov",
        "timestamp": 1604832723
    },
    {
        "content": "<p>Such a future is contained in <code>futures-lite</code>.</p>",
        "id": 216002474,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1604834569
    },
    {
        "content": "<p><a href=\"https://docs.rs/futures-lite/1.11.2/futures_lite/future/fn.yield_now.html\">https://docs.rs/futures-lite/1.11.2/futures_lite/future/fn.yield_now.html</a></p>",
        "id": 216002487,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1604834640
    },
    {
        "content": "<p>Sounds good. Yeah, in this case this does \"work\", I just didn't know if there was built-in support for it in some way or another.</p>",
        "id": 216003255,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1604835740
    },
    {
        "content": "<p>Waking before returning pending (to directly reschedule the future) must work, even if the yield case wasn't considered.</p>\n<p>The reason for this is that waking could always be done from a different thread and as such might always happen before returning from poll but after deciding how to return. (And similar races.)</p>",
        "id": 216003566,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1604836212
    },
    {
        "content": "<p>So the \"proper\" way is waking the current waker and returning Pending.</p>\n<p>There is no build-in syntax sugar for this.</p>",
        "id": 216003647,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1604836363
    },
    {
        "content": "<p>For sure! Thanks for that. I haven't yet started playing with wakers (just working with busy-loop schedulers). Mainly trying to get comfortable with the costs and performance of async. Trying to figure out if I want to convert one of my RTOSes to use it. Although, I don't really have much blocking I/O, it still might be somewhat useful for periodic things (like status messages). Kinda neat, but definitely starting to only now dip my toes in!</p>",
        "id": 216004949,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1604838113
    },
    {
        "content": "<p>You'll want to inform your scheduler about the yield, otherwise your task might never execute again since there would be no events to schedule it.</p>",
        "id": 216006020,
        "sender_full_name": "Zoxc",
        "timestamp": 1604839836
    }
]