[
    {
        "content": "<p>Are there plans to make something like this work at some point?<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d97d647ffd300cca6fe8a0eb787dc73d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d97d647ffd300cca6fe8a0eb787dc73d</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">msg</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Hello world!\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Just curious <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 229927450,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1615497470
    },
    {
        "content": "<p>I think that depends on some details of the question.</p>\n<p>For example, I suspect this might never work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">msg</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Hello {}!\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"world\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>because mixing macros -- which are parse time -- with const prop -- which is after typechecking and name lookup and stuff -- is fundamentally awkward.</p>\n<p>If it means <code>println!(msg)</code> as shorthand for <code>println!(\"{}\", msg)</code>, then maybe?</p>",
        "id": 229936314,
        "sender_full_name": "scottmcm",
        "timestamp": 1615500530
    },
    {
        "content": "<p>I see less value in <code>println!(some_string_constant)</code>, because there are plenty of ways to handle that easily. It's potentially doable, but I don't think we should, not when it's easy to just add <code>\"{}\", </code></p>",
        "id": 229982728,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615530092
    },
    {
        "content": "<p>It's <em>theoretically</em> possible to move <code>println!</code> to happen at a later phase of compilation while still being statically checked, but that doesn't necessarily make it a good idea.</p>",
        "id": 229982745,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615530118
    }
]