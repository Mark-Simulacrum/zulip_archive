[
    {
        "content": "<p>Is there any syntax, or has there ever been a proposal, for syntax that would allow something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The basic idea I'm trying to convey is 'valid for all tuples that contain types that won't outlive the tuple'. So <code>(&amp;i32)</code> would fit the impl only for cases where <code>&amp;'b (&amp;'a i32)</code> fits <code>'b: 'a</code></p>",
        "id": 218775636,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607043050
    },
    {
        "content": "<p>Maybe a more clear syntax would be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218775770,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607043157
    },
    {
        "content": "<p>What's the use case? You can get a shorter lifetime from a longer one via a reborrow.</p>",
        "id": 218776765,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1607044112
    },
    {
        "content": "<p>The current code is, trimmed down, roughly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">HelperFn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Value</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Value</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T0</span>: <span class=\"nc\">Reflected</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T0</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">helpers</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HelperFn</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">this</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">borrow</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T0</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Value</span>::<span class=\"n\">from_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>'static</code> bound makes it work as-is, but this should theoretically be sound for non-static <code>T0</code> lifetimes as long as the type being implemented (in this case, a tuple) outlives them. It's acceptable for my purposes, but I was looking if there had ever been proposals or discussion around the pros/cons of allowing this.</p>",
        "id": 218777929,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607045425
    },
    {
        "content": "<p>It's not clear to me that this is actually an expressivity limitation. Do you have an example that doesn't compile without the fancy bound?</p>",
        "id": 218797147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607061755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> Do you have a playground link for that? What are the signatures of <code>Value::borrow</code> and <code>Value::from_ref</code>?</p>",
        "id": 218798447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607063842
    },
    {
        "content": "<p><code>Value&lt;'a&gt;::borrow</code> is <code>fn borrow(&amp;self) -&gt; &amp;'a T</code>, <code>Value::from_ref</code> is <code>fn from_ref&lt;'a, T&gt;(&amp;'a T) -&gt; Value&lt;'a&gt;</code>. The code won't compile without the bound as is, the reason being a case like this from what I can tell:<br>\ngiven <code>&amp;'a (&amp;'b i32)</code> you can't return a <code>&amp;'a &amp;'b i32</code> if <code>'a</code> outlives <code>'b</code>, which can't be proven in the general case, and there seems to be no syntax to add such bounding of the inner type to the lifetime of the outer.</p>",
        "id": 218824837,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607084028
    },
    {
        "content": "<p>Playground Example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=429714bfb40de5056e29290be8892910\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=429714bfb40de5056e29290be8892910</a></p>",
        "id": 218825793,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607084698
    },
    {
        "content": "<p>I think that <code>WF(&amp;'a (&amp;'b i32,))</code> implies <code>'b: 'a</code>, but you should check with the chalk / wg-traits folks to be sure</p>",
        "id": 218825839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607084739
    },
    {
        "content": "<p>although that makes <code>borrow</code> a bit weird, because it's manufacturing a <code>T</code> from nothing</p>",
        "id": 218825994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607084862
    },
    {
        "content": "<p>Hm, alright. Though if that's a bad example, doesn't help that the compiler still thinks there exists <em>some</em> refutation to the soundness of the closure. And I stripped out in the playground a lot of the safety code, the real implementation of <code>Value</code> basically stores what <code>T</code> is and compares the <code>T</code> passed to <code>borrow</code> to what it knows the real value is.</p>",
        "id": 218826286,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085044
    },
    {
        "content": "<p>How can you even put <code>T0: 'a</code> in <code>helpers()</code>? The lifetime in question is being quantified over in the <code>dyn fn</code> constructed in the box</p>",
        "id": 218826310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085072
    },
    {
        "content": "<p>what is <code>'a</code> supposed to refer to?</p>",
        "id": 218826338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085100
    },
    {
        "content": "<p>The existential used for the <code>dyn for&lt;'a&gt; Fn</code> is using higher-kinded types, it says 'for all <code>'a</code> this function will be valid', so the error is that the compiler thinks there exists <em>some</em> <code>T0</code> such that the closure generated will not be valid.</p>",
        "id": 218826446,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">Rune Tynan</span> <a href=\"#narrow/stream/122651-general/topic/Lifetime.20of.20value/near/218826286\">said</a>:</p>\n<blockquote>\n<p>And I stripped out in the playground a lot of the safety code, the real implementation of <code>Value</code> basically stores what <code>T</code> is and compares the <code>T</code> passed to <code>borrow</code> to what it knows the real value is.</p>\n</blockquote>\n<p>I don't think that your safety code can check lifetimes, so you have to assume that <code>T: 'static</code> in <code>borrow</code></p>",
        "id": 218826452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085164
    },
    {
        "content": "<p>right, no bound other than <code>static</code> will work in <code>helpers</code></p>",
        "id": 218826500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085193
    },
    {
        "content": "<p>my impression is that you think there is a valid way to express this, possibly including features not in today's rust, but I don't yet see what the correct version of <code>helpers</code> is supposed to look like</p>",
        "id": 218826628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085256
    },
    {
        "content": "<p>Yeah. Thus my original question of 'has there ever been a proposal that would allow expressing the real bound, because the code would work for non-static as long as it obeyed certain other rules'.</p>",
        "id": 218826645,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085270
    },
    {
        "content": "<p>What does the code look like with the \"real bound\"?</p>",
        "id": 218826677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085302
    },
    {
        "content": "<p>because just putting <code>T0</code> there or <code>T0: 'a</code> obviously doesn't work</p>",
        "id": 218826713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085336
    },
    {
        "content": "<p>That was my original code, attempting to express that case of all types that live long enough that the reference to the thing inside the tuple cannot outlive the reference to the tuple</p>",
        "id": 218826796,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085376
    },
    {
        "content": "<p>If I understand you correctly, that means that <code>borrow</code> has to return a non-static T and I don't think that can ever be correct</p>",
        "id": 218826915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085483
    },
    {
        "content": "<p>And I think <code>borrow</code> works for non-static types because of your earlier WF, <code>&amp;'a T&lt;'b&gt;</code> implies <code>'b: 'a</code>, and <code>Value</code> cannot outlive <code>'a</code></p>",
        "id": 218826969,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085506
    },
    {
        "content": "<p>But the input to <code>borrow</code> doesn't have any <code>'b</code> in it</p>",
        "id": 218827003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085544
    },
    {
        "content": "<p>it's magicking up a <code>T</code> from nowhere</p>",
        "id": 218827012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085554
    },
    {
        "content": "<p>so this has to be an unsafe function if <code>T</code> is not static</p>",
        "id": 218827026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085571
    },
    {
        "content": "<p>because no safety checks can check the lifetimes because lifetimes are not runtime observable</p>",
        "id": 218827052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085597
    },
    {
        "content": "<p>Ah, true. <code>Value</code> can ensure it lives long enough, but the lifetime of the output will be 'whatever it needs to be'</p>",
        "id": 218827181,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085660
    },
    {
        "content": "<p>Actually, hm. Is that true? The reference returned is <code>'a</code>, which definitely outlives <code>'b</code>, so it should never make <code>'b</code> greater than <code>'a</code>, as that would break the same check</p>",
        "id": 218827340,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085748
    },
    {
        "content": "<p>is that <code>dyn fn</code> polymorphic over two lifetimes or just one? I see a <code>&amp;</code> in there</p>",
        "id": 218827395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085786
    },
    {
        "content": "<p>Two, though from the error messages I've gotten playing around, the compiler ensures it's valid for all <code>&amp;'r</code> as well</p>",
        "id": 218827459,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085830
    },
    {
        "content": "<p>I think it depends on whether <code>Container</code> is covariant</p>",
        "id": 218827543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085869
    },
    {
        "content": "<p>When you constrain <code>T0</code> in bad ways, the error becomes <code>Expected dyn for&lt;'r, 'a&gt; Fn(&amp;'r Value&lt;'a&gt;) -&gt; Value&lt;'a&gt; got [something less general]</code></p>",
        "id": 218827575,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607085895
    },
    {
        "content": "<p>yeah <code>'a: 'r</code> is implicit in that bound btw</p>",
        "id": 218827625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607085936
    },
    {
        "content": "<p>Yeah, that's fine. In fact, that's I presume why it still works when I changed something that uses the Fn box to have a signature of <code>(&amp;'a Value&lt;'a&gt;) -&gt; Value&lt;'a&gt;</code>, because that bound was already implicit</p>",
        "id": 218827746,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086003
    },
    {
        "content": "<p>Yeah those are equivalent if <code>Value</code> is covariant, and your phantom data will do so</p>",
        "id": 218827814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086041
    },
    {
        "content": "<p>wait a minute, <code>from_ref</code> also looks shady. It captures its argument with a smaller lifetime than <code>'a</code>, what prevents it from expiring?</p>",
        "id": 218827942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086123
    },
    {
        "content": "<p>So, your question is 'Is <code>from_ref</code> capable of capturing a reference to a thing that outlives the thing'? Because I thought that was part of the compiler's WF guarantee</p>",
        "id": 218828161,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086266
    },
    {
        "content": "<p>er, actually I guess that's <code>&amp;'b T -&gt; Container&lt;'b&gt;</code> because of lifetime elision?</p>",
        "id": 218828203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086302
    },
    {
        "content": "<p>Yeah</p>",
        "id": 218828214,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086312
    },
    {
        "content": "<p>which is basically the same as <code>&amp;'a T -&gt; Container&lt;'a&gt;</code> even though <code>'a</code> is already in scope</p>",
        "id": 218828270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086331
    },
    {
        "content": "<p>Yeah</p>",
        "id": 218828274,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086336
    },
    {
        "content": "<p>so your function has two lifetime parameters and one is unused. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 218828286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086349
    },
    {
        "content": "<p>The inner <code>T</code> may have a lifetime, but the reference will never outlive it, so the compiler finds it sound. At least that's what I assume, as if that wasn't true I'd expect to get the same 'T doesn't live long enough' error</p>",
        "id": 218828337,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086404
    },
    {
        "content": "<p>I'm gonna need to head out soon, but thanks for talking through all this. The nitty-gritty of lifetimes is really interesting, and this project is really diving into it. I'll see if I can find anything on the whole 'given input <code>&amp;'a T&lt;'b&gt;</code> where <code>'b: 'a</code>, and later output <code>&amp;'a T</code>, is the compiler guaranteed to pick a new <code>'b</code> so that <code>'a: 'b</code> and the original lifetimes aren't violated'</p>",
        "id": 218828354,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086418
    },
    {
        "content": "<p>As if there was no <code>'a</code> in the Value, I'm sure that would be unsafe. But as there is, and <code>'a</code> can't outlive the object, I think it should work. Actually, I can test that. Make a <code>Value</code> and see if I can <code>borrow</code> something out that outlives it.</p>",
        "id": 218828503,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086506
    },
    {
        "content": "<p>Okay here's a version with all the lifetimes written out so I can point at it: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9d97cac0d2679d53b936d014e15a9d53\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9d97cac0d2679d53b936d014e15a9d53</a></p>",
        "id": 218828545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086542
    },
    {
        "content": "<p>So because the <code>dyn fn</code> quantifies over <code>'a</code>, it is not possible to add a bound <code>'b: 'a</code>, but this is implied by the WF bound when constructing <code>&amp;'a (T0,)</code></p>",
        "id": 218828714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086644
    },
    {
        "content": "<p>If you actually wanted to support a non-static <code>T0</code> here, you would need something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">HelperFn</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Container</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Container</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>although I'm not sure that it is legal to put lifetime bounds in function signatures like that</p>",
        "id": 218828962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086783
    },
    {
        "content": "<p><code>for&lt;...&gt;</code> doesn't allow lifetime constraints, I tried some</p>",
        "id": 218829050,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086811
    },
    {
        "content": "<p>Might be theoretically possible for it to, might not be. Probably have to go read up the higher-kinded-types stuff</p>",
        "id": 218829098,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607086843
    },
    {
        "content": "<p>It's logical given the theory, but I think there are some inference issues. I know it's on their radar</p>",
        "id": 218829105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607086848
    },
    {
        "content": "<p>I tried it out, to show Value::from_ref (and one I didn't show, Value::from) won't borrow past lifetime:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0597]: `i` does not live long enough\n   --&gt; src\\lib.rs:204:33\n    |\n204 |             v = Value::from_ref(&amp;i);\n    |                                 ^^ borrowed value does not live long enough\n...\n211 |         }\n    |         - `i` dropped here while still borrowed\n212 |\n213 |         let t = v.borrow::&lt;i32&gt;();\n    |                 - borrow later used here\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0597]: `i` does not live long enough\n   --&gt; src\\lib.rs:185:27\n    |\n185 |             t = Test { r: &amp;i };\n    |                           ^^ borrowed value does not live long enough\n...\n193 |         }\n    |         - `i` dropped here while still borrowed\n194 |\n195 |         let t = v.borrow::&lt;Test&gt;();\n    |                 - borrow later used here\n</code></pre></div>",
        "id": 218863327,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607102471
    },
    {
        "content": "<p>These cases work if I comment out any code that tries to use the value beyond the borrowed reference, yay for the borrow checker :P</p>",
        "id": 218863556,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607102587
    },
    {
        "content": "<p>Just fixed some unsoundness with a family of <code>borrow</code>, <code>cast</code>. Because <code>cast</code> takes ownership, what it returns <em>can</em> outlive the Value, and thus <em>can</em> end up magicking up a <code>'static</code> lifetime. The solution is A) Make it only valid when casting to types with a <code>'static</code> bound B) Make it only valid when Value 'owns' its internal data. First is compile checked, second causes a runtime error. That way you can only magic up a lifetime if you own the type, and thus have the authority to do so.</p>",
        "id": 218869297,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607104899
    },
    {
        "content": "<p>I may need to make it unsafe anyways, just in case. But <code>borrow</code>, at least, I can't find a way around so far.</p>",
        "id": 218870130,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607105199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">Rune Tynan</span> <a href=\"#narrow/stream/122651-general/topic/Lifetime.20of.20value/near/218825793\">said</a>:</p>\n<blockquote>\n<p>Playground Example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=429714bfb40de5056e29290be8892910\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=429714bfb40de5056e29290be8892910</a></p>\n</blockquote>\n<p>Here (one of) the issue(s) is that <code>Box&lt;dyn Trait …&gt;</code> like in your case is actually a <code>Box&lt;dyn Trait … + 'static&gt;</code>, meaning that your closure must be <code>'static</code>. And the \"surprising\" part may be that for a given type <code>T</code>, <code>fn(T) -&gt; T</code> is only <code>'static</code> if <code>T</code> is (and more generally, any signature somehow involving some type <code>T</code> will be infected by the maximum lifetime of <code>T</code>)</p>",
        "id": 218870343,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607105306
    },
    {
        "content": "<p>Thanks for the explanation of that. Is there, in theory, some way 'around' this issue? Is this 'I can't express a better bound that would be safe' or 'the compiler / the people who wrote it are smarter than me, there is no more specific bound that would be safe'?</p>",
        "id": 218871043,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607105630
    },
    {
        "content": "<p>This is my most promising attempt without touching <code>HelperFn</code>, which failed: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2548d9e7d700d483da4c493fec346b87\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2548d9e7d700d483da4c493fec346b87</a> (I have used the <code>fn…</code> function pointer type to remove <code>T0</code> from the function signature).<br>\nIt kind of makes sense though: given the signatures (mainly that in <code>HelperFn</code>) we are promising that we can handle _any_ lifetime <code>'a</code>, including a lifetime that would span beyond the region of validity of that inner <code>T0</code>.</p>\n<hr>\n<p>Actually, once that was observed, it sufficed to add a <code>'max</code> bound on the higher-order <code>'a</code>, which requires a helper trait but is doable: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=eaf7ee1f31733ee5f6c9832fa822e549\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=eaf7ee1f31733ee5f6c9832fa822e549</a></p>",
        "id": 218872773,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607106454
    },
    {
        "content": "<p>New question (Not sure whether starting a new thread would be more appropriate):<br>\nAssume I have a function <code>cast&lt;T: ...&gt;(mut self) -&gt; Result&lt;T, Error&gt;</code>, and I really want to have the reverse of a <code>'a</code> bound. I want to guarantee T does <em>not</em> outlive <code>'a</code>. Is there any way to do that?</p>",
        "id": 218910732,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607131465
    },
    {
        "content": "<p>Usually you would bake it into the type somehow like <code>Guard&lt;'a, T&gt;</code></p>",
        "id": 218922415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607151478
    },
    {
        "content": "<p>Just be careful of <code>Clone</code> / <code>Copy</code>ing capabilities, otherwise you end up <a href=\"https://docs.rs/libloading/0.6.6/libloading/struct.Symbol.html#impl-Deref\">offering an unsound API</a></p>",
        "id": 218935941,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607176122
    },
    {
        "content": "<p>Hmm, what do you mean <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>?</p>",
        "id": 218949865,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607197250
    },
    {
        "content": "<p>The issue is that I specifically need to throw away the <code>T</code>, but it is ensured that no one will safely make a <code>Value&lt;'a&gt;</code> with an <code>'a</code> greater than the life of the <code>T</code> used to make it. So if I could declare a 'does not outlive' bound, the casting should be safe. As I can't, I'm stuck doing as many checks on it as I can and making the function unsafe.<br>\n(Yes, I have a lot of weird requirements. It's because I'm trying to do reflection, so most of my types cannot be generic, but have to store type info at runtime. If this turns out to be impossible, fine, but I'm doing it partially because I like the challenge.)</p>",
        "id": 218952573,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607200815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> assuming a <code>Guard&lt;'a, T&gt;</code> with <code>Deref</code> is used on something that is able to create a <code>T</code> outside the <code>Guard</code> (<em>e.g.</em>, because it is <code>Clone</code>), then you end up with that second instance of <code>T</code> that is no longer tied to<code>'a</code>. This can be very problematic when the <code>T</code> is still a reference type to some value that was only valid for <code>'a</code>.</p>\n<p>In the case of libloading, for instance, <code>'a</code> is <code>'lib</code>, the lifetime of the dynamically loaded library (which may be unloaded, deallocating the \"<code>'static</code>\" data inside), and the common problematic reference type <code>T</code> is <code>fn(...) = &amp;'static code</code>. So, with a <code>Symbol&lt;'lib, fn(...)&gt;</code>, you can simply <code>Copy</code> the inner <code>fn</code> and get something that is no longer <code>'lib</code>-limited, even though the referee, the <code>code</code>, is.</p>",
        "id": 218958932,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607210958
    },
    {
        "content": "<p>Can you do that outside of unsafe code?</p>",
        "id": 218959163,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607211333
    },
    {
        "content": "<p>Well, you do need the initial <code>unsafe</code> call to load the library and cast the obtained address to a <code>Symbol&lt;'lib, fn(...)&gt;</code>, but assuming you don't get the loading part wrong (<em>i.e.</em>, the symbol does refer to a function with the right signature and ABI), then it's supposed to be a correct / \"safe\" usage of the library. And at that point, that's where you can, without <code>unsafe</code>, copy the <code>fn()</code> wrappee, drop the library, and (try to) call the <code>fn()</code>. See <a href=\"https://github.com/nagisa/rust_libloading/issues/13\">https://github.com/nagisa/rust_libloading/issues/13</a> .</p>\n<p>Sadly the only way to \"solve\" that would be to remove the <code>Deref</code>, and use some macro to impl an inherent <code>.call()</code> method on <code>Symbol&lt;'lib, fn(...)&gt;</code>, which is deemed to unergonomic. So they're going, it seems, with the approach of saying that that first use of <code>unsafe</code> should also cover a \"you shall not copy/clone <code>'static</code> reference types\": <a href=\"https://github.com/nagisa/rust_libloading/issues/46\">https://github.com/nagisa/rust_libloading/issues/46</a></p>",
        "id": 218959754,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607212427
    },
    {
        "content": "<p>And while that's not the exact same, it's similar to how my <code>Value&lt;'a&gt;</code> can be consumed to make a <code>T</code>, and if that T would outlive the T used to make it, it's unsound. Meaning <code>cast</code> has to be unsafe, because I can't constrain T to less than <code>'a</code>, only more than.</p>",
        "id": 218959956,
        "sender_full_name": "CraftSpider",
        "timestamp": 1607212747
    }
]