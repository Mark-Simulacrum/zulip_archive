[
    {
        "content": "<p>Is there a way to run <code>cargo clippy</code> such that it reports errors in dependent crates? I tried googling for this but it seems like everyone wants the opposite, there was some big effort to fix this in 2020. The use case is for a project that has a few local dependency crates in subfolders that I want to get lints on in CI without having to go into each of these subfolders and run <code>cargo clippy</code> in each of them since this creates a bunch of separate <code>target</code> directories and recompiles all the remote dependency crates many times.</p>",
        "id": 277864935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649159549
    },
    {
        "content": "<p>I suspect the answer might be \"use a workspace\" but I recall hearing some issues with support for workspaces in rust-analyzer or something and never really got around to investigating whether it would work</p>",
        "id": 277865066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649159616
    },
    {
        "content": "<p>I don't think so. Cargo-clippy intentionally limits running clippy-driver to workspace members.</p>",
        "id": 277867415,
        "sender_full_name": "bjorn3",
        "timestamp": 1649160700
    },
    {
        "content": "<p>The issues around workspaces with rust-analyzer are limited to when you want to use different features for different crates I believe. This doesn't  work with vscode workspaces either so switching to cargo workspaces won't regress anything I think.</p>",
        "id": 277867572,
        "sender_full_name": "bjorn3",
        "timestamp": 1649160775
    },
    {
        "content": "<p>A command line option like <code>cargo clippy --lint-deps=foo,bar</code> would be optimal. It's a bit frustrating given that clippy clearly has the capability and just doesn't expose it</p>",
        "id": 277868291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649161172
    },
    {
        "content": "<p>Trying to run clippy on any non-workspace member will mean that no dependency metadata can be reused between cargo check and cargo clippy. The way it works now only prevents sharing for workspace members.</p>",
        "id": 277868558,
        "sender_full_name": "bjorn3",
        "timestamp": 1649161315
    },
    {
        "content": "<p>Definitely a workspace and <code>cargo clippy —all</code> is where I’d start.</p>",
        "id": 277873245,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649163256
    },
    {
        "content": "<p>I’ve also written the bash for “find all Cargo.toml files and run Cargo on them” multiple times. So its not unusual</p>",
        "id": 277873391,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649163332
    },
    {
        "content": "<p>Re: recompile, you could set a unified target directory.</p>",
        "id": 277873449,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649163361
    }
]