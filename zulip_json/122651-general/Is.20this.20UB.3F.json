[
    {
        "content": "<p>I sent a patch to refactor stuff which involves touching a bit of unsafe but mark simulacrum mentioned that it is unsafe. Why is it? <a href=\"https://github.com/rust-lang/rust/pull/79722/files\">https://github.com/rust-lang/rust/pull/79722/files</a></p>",
        "id": 219352225,
        "sender_full_name": "pickfire",
        "timestamp": 1607528012
    },
    {
        "content": "<p>It is UB to read from a value that was moved out of</p>",
        "id": 219352511,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607528123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> Can you point me to which part it is specifically?</p>",
        "id": 219352969,
        "sender_full_name": "pickfire",
        "timestamp": 1607528296
    },
    {
        "content": "<p><code>alloc_from_iter</code> reads the array elements, the expression <code>|| mem::forget(self)</code> moves <code>self</code> into the closure</p>",
        "id": 219353114,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607528359
    },
    {
        "content": "<p>But that only gets called later right?</p>",
        "id": 219353207,
        "sender_full_name": "pickfire",
        "timestamp": 1607528393
    },
    {
        "content": "<p>In <code>clean()</code>.</p>",
        "id": 219353222,
        "sender_full_name": "pickfire",
        "timestamp": 1607528398
    },
    {
        "content": "<p>The closure expression itself moves out of <code>self</code></p>",
        "id": 219353332,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607528429
    },
    {
        "content": "<p>Not the call</p>",
        "id": 219353350,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607528437
    },
    {
        "content": "<p>Thus the point about the lack of <code>move</code> annotation.</p>",
        "id": 219353377,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607528451
    },
    {
        "content": "<p>this means alloc_from_iter is unsound, right? there's no <code>unsafe</code> in the added code</p>",
        "id": 219353452,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528481
    },
    {
        "content": "<p>seems weird it takes a raw pointer without being marked unsafe</p>",
        "id": 219353492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528492
    },
    {
        "content": "<p>Ah.</p>",
        "id": 219353512,
        "sender_full_name": "pickfire",
        "timestamp": 1607528507
    },
    {
        "content": "<p>So I need to add <code>unsafe</code> to the function or should I close the pull request?</p>",
        "id": 219353545,
        "sender_full_name": "pickfire",
        "timestamp": 1607528517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225422\">@pickfire</span> to be clear, adding unsafe will not fix the UB</p>",
        "id": 219353620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528532
    },
    {
        "content": "<p>That doesn't fix the UB</p>",
        "id": 219353633,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607528536
    },
    {
        "content": "<p>it will just make it more clear how it's happening</p>",
        "id": 219353643,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528538
    },
    {
        "content": "<p>What should I do?</p>",
        "id": 219353940,
        "sender_full_name": "pickfire",
        "timestamp": 1607528646
    },
    {
        "content": "<p>Is there any way to fix it?</p>",
        "id": 219353956,
        "sender_full_name": "pickfire",
        "timestamp": 1607528653
    },
    {
        "content": "<p>well, there might be a different way to write alloc_from_iter, but I don't think this implementation can be fixed, no</p>",
        "id": 219354017,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528683
    },
    {
        "content": "<p>T_T</p>",
        "id": 219354428,
        "sender_full_name": "pickfire",
        "timestamp": 1607528866
    },
    {
        "content": "<p>Thanks, so I guess I should just close the PR.</p>",
        "id": 219354450,
        "sender_full_name": "pickfire",
        "timestamp": 1607528877
    },
    {
        "content": "<p>yeah, sorry :/</p>",
        "id": 219354524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528895
    },
    {
        "content": "<p>I am still confused \"the closure expression moves out of <code>self</code>\"</p>",
        "id": 219354525,
        "sender_full_name": "pickfire",
        "timestamp": 1607528896
    },
    {
        "content": "<p><code>self</code> is a <code>[T; N]</code> by value</p>",
        "id": 219354609,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528926
    },
    {
        "content": "<p>when you pass it to the closure, it moves from the stack to the closure struct</p>",
        "id": 219354701,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528963
    },
    {
        "content": "<p>i.e. it's captured and the address in memory changes</p>",
        "id": 219354734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528976
    },
    {
        "content": "<p>so .as_slice().as_ptr() is now dangling</p>",
        "id": 219354770,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607528990
    },
    {
        "content": "<p>Ah, the memory address changed, I thought it is still the same.</p>",
        "id": 219355155,
        "sender_full_name": "pickfire",
        "timestamp": 1607529156
    },
    {
        "content": "<p>any move is allowed to change the address</p>",
        "id": 219355187,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607529172
    },
    {
        "content": "<p>in <em>practice</em> it might not which is why the tests were passing, but it's still UB to depend on the address remaining fixed after a move</p>",
        "id": 219355231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607529197
    },
    {
        "content": "<p>More than anything - reading a value after it has moved is UB. It doesn't matter what actually happens - anything _can_ happen.</p>",
        "id": 219355246,
        "sender_full_name": "rylev",
        "timestamp": 1607529205
    },
    {
        "content": "<p>The fact that it might work is actually worse. it's not guaranteed to continue working</p>",
        "id": 219355376,
        "sender_full_name": "rylev",
        "timestamp": 1607529246
    }
]