[
    {
        "content": "<p>For this piece of code, I get <code>use of moved value: item</code> error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">heap</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Let's say T was a reference type, how would I write it so that a reference is pushed into two difference collections?</p>",
        "id": 246369165,
        "sender_full_name": "Gowri",
        "timestamp": 1626601276
    },
    {
        "content": "<p>If <code>T</code> was a reference type, it would implement <code>Copy</code> so that code would work</p>",
        "id": 246369835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626602442
    },
    {
        "content": "<p>an easy way to express that is to just add <code>where T: Copy</code> to the method bounds</p>",
        "id": 246369841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626602460
    },
    {
        "content": "<p>Alternatively, you can put <code>item</code> in an <code>Rc</code> and clone it so that both data structures contain a reference to the same item. If <code>T</code> is large this is a good strategy for an index map like this</p>",
        "id": 246369873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626602523
    },
    {
        "content": "<p>thanks, i understand. i assume there's no need for lifetime annotations in this case because it can be elided?</p>",
        "id": 246372137,
        "sender_full_name": "Gowri",
        "timestamp": 1626606669
    },
    {
        "content": "<p>^ for a similar pop function that would return a reference</p>",
        "id": 246372153,
        "sender_full_name": "Gowri",
        "timestamp": 1626606715
    },
    {
        "content": "<p>The pop function would presumably be returning a <code>T</code> here, and in that case you don't need any annotations. If you replaced <code>T</code> with <code>&amp;T</code> everywhere here then you might need a lifetime annotation or else the lifetime of the returned reference would be tied to <code>&amp;mut self</code> instead of the map type</p>",
        "id": 246372326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626606919
    },
    {
        "content": "<p>thank you very much</p>",
        "id": 246372967,
        "sender_full_name": "Gowri",
        "timestamp": 1626607942
    }
]