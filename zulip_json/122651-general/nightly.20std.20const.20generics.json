[
    {
        "content": "<p>hello!</p>\n<p>besides required work effort, is there any other reason why const generics are not being taken advantage of inside the nightly std?</p>",
        "id": 203380235,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594298561
    },
    {
        "content": "<p>They are</p>",
        "id": 203380329,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594298635
    },
    {
        "content": "<p>Some array impls in libcore use const generics</p>",
        "id": 203380383,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594298647
    },
    {
        "content": "<p>Apparently <a href=\"https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src/liballoc/lib.rs#L88\">liballoc also uses const generics</a></p>",
        "id": 203380517,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594298740
    },
    {
        "content": "<p>oh cool!</p>",
        "id": 203380728,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594298881
    },
    {
        "content": "<p>I am curious which features exactly are permitted by const generics but I am guessing that's a bit hard of an information to get, or maybe the rust compiler can query all places where they are used</p>",
        "id": 203380848,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594298941
    },
    {
        "content": "<p>I was under the impression that it would allow some revolutionary changes</p>",
        "id": 203380907,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594298976
    },
    {
        "content": "<p>They can be used to e.g. offer some trait impls for arrays larger than 32 elements, but they're still disallowed just in case const generics fall off the table and are removed from the compiler (it would break user code that expects some trait to be implemented for a 33-element array).</p>",
        "id": 203381027,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594299056
    },
    {
        "content": "<p>So until stabilization they can't be used for new functionality</p>",
        "id": 203381048,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594299074
    },
    {
        "content": "<p>That's what I was suspecting heh</p>",
        "id": 203381106,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594299113
    },
    {
        "content": "<p>But in nightly it should be OK? you're talking about stable right?</p>",
        "id": 203381195,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594299143
    },
    {
        "content": "<p>But see <a href=\"https://github.com/rust-lang/rust/pull/74060\">https://github.com/rust-lang/rust/pull/74060</a></p>",
        "id": 203381291,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594299210
    },
    {
        "content": "<p>I think trait impls are always stable</p>",
        "id": 203381315,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594299221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/122651-general/topic/nightly.20std.20const.20generics/near/203381315\">said</a>:</p>\n<blockquote>\n<p>I think trait impls are always stable</p>\n</blockquote>\n<p>I think I've seen <code>#[unstable]</code> applied to trait impls, but I'm not sure</p>",
        "id": 203381417,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594299273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/122651-general/topic/nightly.20std.20const.20generics/near/203381315\">said</a>:</p>\n<blockquote>\n<p>I think trait impls are always stable</p>\n</blockquote>\n<p>I very strongly believe all impls of stable traits are insta stable</p>",
        "id": 203381463,
        "sender_full_name": "lcnr",
        "timestamp": 1594299298
    },
    {
        "content": "<p>unstable traits can and should have unstable impls though afaik</p>",
        "id": 203381491,
        "sender_full_name": "lcnr",
        "timestamp": 1594299317
    },
    {
        "content": "<blockquote>\n<p>besides required work effort, is there any other reason why const generics are not being taken advantage of inside the nightly std?</p>\n</blockquote>\n<p>Because they are still nearly unusable for anything except trait impls rn</p>",
        "id": 203381616,
        "sender_full_name": "lcnr",
        "timestamp": 1594299375
    },
    {
        "content": "<p>the big next step (at least my current plan) is landing <a href=\"https://github.com/rust-lang/rust/pull/74113\">https://github.com/rust-lang/rust/pull/74113</a></p>",
        "id": 203381662,
        "sender_full_name": "lcnr",
        "timestamp": 1594299402
    },
    {
        "content": "<p>Okay, I can see that, I believed their design was more certain, apparently not</p>",
        "id": 203381683,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594299414
    },
    {
        "content": "<p>at this point const generics in methods actually work without causing an ICE</p>",
        "id": 203381706,
        "sender_full_name": "lcnr",
        "timestamp": 1594299430
    },
    {
        "content": "<p>and we can then add the new unstable methods <code>array_chunks</code> + <code>array_windows</code> which will so guuuuud</p>",
        "id": 203381842,
        "sender_full_name": "lcnr",
        "timestamp": 1594299502
    },
    {
        "content": "<p>yes!</p>",
        "id": 203381856,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594299511
    },
    {
        "content": "<p>I really want to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">array_windows</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203381930,
        "sender_full_name": "lcnr",
        "timestamp": 1594299559
    },
    {
        "content": "<p>I feel like I should start contributing to the compiler because all the frustrations I've had I could at least feel like I had power to overcome them, but it feels daunting from here</p>",
        "id": 203381935,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594299565
    },
    {
        "content": "<p>Thanks for updating me</p>",
        "id": 203382080,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594299657
    },
    {
        "content": "<p>There are always simple issues which don't require a lot of knowledge to get you started <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 203382085,
        "sender_full_name": "lcnr",
        "timestamp": 1594299659
    },
    {
        "content": "<p>Also the compiler team will be able to answer your questions if you have any</p>",
        "id": 203382303,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594299759
    },
    {
        "content": "<p>Ahah I'll have to start with that I am certain - however probably the most interesting would be hard to achieve!</p>",
        "id": 203382310,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594299763
    },
    {
        "content": "<p>Well I think your most important resource is time, time to dive into the code, understand how it works, experiment with it, make mistakes, repair them etc...</p>",
        "id": 203382497,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594299873
    },
    {
        "content": "<p>Ah, and time to compile rustc too <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 203382509,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594299880
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy\">https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy</a> might help :-)</p>",
        "id": 203382724,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594299986
    },
    {
        "content": "<p>Also, issues around const generics are labeled <code>F-const_generics</code>... and there are 68 of them</p>",
        "id": 203382812,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594300057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> <a href=\"#narrow/stream/122651-general/topic/nightly.20std.20const.20generics/near/203382812\">said</a>:</p>\n<blockquote>\n<p>Also, issues around const generics are labeled <code>F-const_generics</code>... and there are 68 of them</p>\n</blockquote>\n<p>I can't really recommend looking through them to find interesting things to work with <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 203382907,
        "sender_full_name": "lcnr",
        "timestamp": 1594300104
    },
    {
        "content": "<p>if you want to work on const generics it's a lot simpler to ask me directly <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> (or <span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> and <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> )</p>",
        "id": 203383017,
        "sender_full_name": "lcnr",
        "timestamp": 1594300178
    },
    {
        "content": "<p>most of the remaining const generics issues tend to either be blocked on <a href=\"https://github.com/rust-lang/rust/pull/74113\">https://github.com/rust-lang/rust/pull/74113</a> or are partially outdated</p>",
        "id": 203383123,
        "sender_full_name": "lcnr",
        "timestamp": 1594300227
    },
    {
        "content": "<p>i really should just take some time once <a href=\"https://github.com/rust-lang/rust/issues/74113\">#74113</a> lands to go through all open const generics issues to see what is actually still relevant :/</p>",
        "id": 203383205,
        "sender_full_name": "lcnr",
        "timestamp": 1594300289
    },
    {
        "content": "<p>Thanks a lot for all the guidance!</p>",
        "id": 203394093,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594305750
    },
    {
        "content": "<p>Time to compile rustc, well it compiles incrementally, doesnt it?</p>",
        "id": 203394159,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594305783
    },
    {
        "content": "<p>Yes, it does if you pass the <code>-i</code> flag</p>",
        "id": 203394194,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594305799
    },
    {
        "content": "<p>You can find guidance in the rustc-dev-guide</p>",
        "id": 203394215,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594305807
    },
    {
        "content": "<p>Also I was thinking, is the caching for rustc CI system top notch?</p>",
        "id": 203394280,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594305836
    },
    {
        "content": "<p>Can it cache across jobs of different rustc versions?</p>",
        "id": 203394361,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594305858
    },
    {
        "content": "<p>I think caching intermediate compilation results is a real topic with CI systems in general, they waste so much energy currently!</p>",
        "id": 203394425,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594305891
    },
    {
        "content": "<p>(You should check out the new <a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html\">getting started</a> chapter)</p>",
        "id": 203394498,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594305923
    },
    {
        "content": "<p>I am thinking it would need deep integration with the compiler to be done properly, considering caching forward and backward version changes, maybe integrate with git so that if you cherry-pick a commit onto a branch, it takes an existing cache as close as possible to the change</p>",
        "id": 203394699,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594306002
    },
    {
        "content": "<p>I remember reading there already! Thanks</p>",
        "id": 203394753,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594306037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> If you are interested in that, I’d look at sccache.</p>",
        "id": 203395051,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594306169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I'll have a deeper look, I know about it but I don't think it goes that far</p>",
        "id": 203396374,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594306712
    },
    {
        "content": "<p>\"Please ask questions! A lot of people report feeling that they are \"wasting expert time\", but nobody on t-compiler feels this way. Contributors are important to us.\"</p>\n<p>Yes I feel that way a lot too..</p>",
        "id": 203459396,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594342558
    },
    {
        "content": "<p>I consider myself an expert in other topics and often it freezes my progress when I have to explain the world to curious minds</p>",
        "id": 203459455,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1594342604
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/131828-t-compiler/topic/a.20metaquestion/near/199106963\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/a.20metaquestion/near/199106963</a> on where this note was discussed.</p>",
        "id": 203473361,
        "sender_full_name": "lcnr",
        "timestamp": 1594362533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/nightly.20std.20const.20generics/near/203383205\">said</a>:</p>\n<blockquote>\n<p>i really should just take some time once <a href=\"https://github.com/rust-lang/rust/issues/74113\">#74113</a> lands to go through all open const generics issues to see what is actually still relevant :/</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/74392\">https://github.com/rust-lang/rust/pull/74392</a></p>",
        "id": 204070658,
        "sender_full_name": "lcnr",
        "timestamp": 1594898286
    }
]