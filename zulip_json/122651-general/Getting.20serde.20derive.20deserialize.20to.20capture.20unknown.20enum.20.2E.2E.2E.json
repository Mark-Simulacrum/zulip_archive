[
    {
        "content": "<p>Hi, I've got another question along the lines of \"how do I trick serde derive into doing this quite specific non-standard thing?\".<br>\nIf I have an enum along the lines of <code>enum Foo { VariantA }</code>, container <code>struct FooVariants { #[serde(flatten)] inner: HashMap&lt;Foo, bool&gt; }</code> and json:</p>\n<div class=\"codehilite\"><pre><span></span><code>{&quot;variantA&quot;: true, &quot;variantB&quot;, false}\n</code></pre></div>\n<p>I'd like to be able to get the valid values, but also be told what invalid variants there were. So some result like:</p>\n<div class=\"codehilite\"><pre><span></span><code>FooVariants {\n    inner: hashmap![(Foo::VariantA, true)],\n    other: hashmap![(&quot;variantB&quot;, false)]\n}\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>FooVariants { inner: hashmap![\n    (Foo::VariantA, true),\n    (Foo::Other(&quot;variantB&quot;), false)\n]  }\n</code></pre></div>\n<p>I don't mind reformatting these data structures around a bit as required. Currently I have:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct FooVariants {\n    #[serde(flatten)]\n    inner: HashMap&lt;Foo, bool&gt;,\n\n    #[serde(flatten)]\n    other: HashMap&lt;String, bool&gt;\n }\n</code></pre></div>\n<p>but this results in:</p>\n<div class=\"codehilite\"><pre><span></span><code>FooVariants {\n    inner: hashmap![(Foo::VariantA, true)],\n    other: hashmap![(&quot;variantA&quot;, true), (&quot;variantB&quot;, false)]\n}\n</code></pre></div>\n<p>I think because <code>#[serde(flatten)]</code> is not supposed to be used for both making an inner hashmap transparent _and_ for collecting unparsed fields. Sorry for the rambling question, happy to accept any suggestions for how I can make this kind of thing work. I suppose just manually removing <code>inner</code>'s fields from <code>other</code> would work, but then I'm going back from the enum to the string again which seems less than ideal.</p>",
        "id": 243414776,
        "sender_full_name": "David McGillicuddy",
        "timestamp": 1624296254
    },
    {
        "content": "<p>You won't be able to do it with the derive macro, you'll need to manually implement <code>Deserialize</code> for your type, and add an <code>Unknown</code> variant to capture them.</p>",
        "id": 243420536,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1624298737
    },
    {
        "content": "<p>Okay, that's fair enough. I feel like I've spent more time trying to contort my use case into derive than it would have taken for me to bite the bullet earlier :)</p>",
        "id": 243420654,
        "sender_full_name": "David McGillicuddy",
        "timestamp": 1624298802
    }
]