[
    {
        "content": "<p>Hello,<br>\nI would like to try my hand at porting rustc and its stdlib to another OS. As a first step, I want to make a barebones cross-compiling rustc targeting SerenityOS. </p>\n<p>From my research till now I have gathered that I need for a \"properly-done\" target:</p>\n<ul>\n<li>A target definition json file (I am starting from x86_64-unknown-none-linuxkernel as it seemed to not rely on GNU userspace)</li>\n<li>A port of the libc crate (not entirely sure as I found it on this article: <a href=\"https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix\">https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix</a> and nowhere else, maybe it's out of date)?</li>\n</ul>\n<p>My questions are:</p>\n<ul>\n<li>Where can I find documentation on the target definition?</li>\n<li>What is the general, least \"hacky\" flow to create a new target? </li>\n<li>How does one port libstd? Do I actually need to port libc?</li>\n</ul>\n<p>Thank you in advance!</p>\n<p>PS: Let me know if this is the wrong stream, I couldn't find one that was specific to ports, so I am asking here.</p>",
        "id": 252648197,
        "sender_full_name": "lightspot21",
        "timestamp": 1631202449
    },
    {
        "content": "<p>There isn't much documentation for the target definition, the best reference is the comments in the code: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/mod.rs#L978\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/mod.rs#L978</a></p>",
        "id": 252650353,
        "sender_full_name": "Amanieu",
        "timestamp": 1631203143
    },
    {
        "content": "<p>For a proper port, you wouldn't use a target json and would create a new built-in target. I'd suggest basing it off one of the examples in compiler/rustc_target/src/spec/.</p>",
        "id": 252650523,
        "sender_full_name": "Amanieu",
        "timestamp": 1631203189
    },
    {
        "content": "<p>A libc port is only needed if your target actually uses it. For example, I don't think our windows target use libc, they use the win32 API directly.</p>",
        "id": 252650714,
        "sender_full_name": "Amanieu",
        "timestamp": 1631203231
    },
    {
        "content": "<blockquote>\n<p>For example, I don't think our windows target use libc, they use the win32 API directly.</p>\n</blockquote>\n<p>Huh. Then, how are allocations working? On unix-likes malloc (for example) is defined inside libc, so I guess for the stdlib to work (e.g. Vec) I should also port libc, right?</p>",
        "id": 252652563,
        "sender_full_name": "lightspot21",
        "timestamp": 1631203943
    },
    {
        "content": "<p>Yes, on unix-likes you need to port libc.</p>",
        "id": 252652658,
        "sender_full_name": "bjorn3",
        "timestamp": 1631203987
    },
    {
        "content": "<p>Got it. I'll start with creating a target then. Thanks for the help, both of you!</p>",
        "id": 252652873,
        "sender_full_name": "lightspot21",
        "timestamp": 1631204070
    },
    {
        "content": "<p>Once you have ported libc, it may be a matter of adding serentity to the list at <a href=\"https://github.com/rust-lang/rust/blob/497ee321af3b8496eaccd7af7b437f18bab81abf/library/std/build.rs#L29\">https://github.com/rust-lang/rust/blob/497ee321af3b8496eaccd7af7b437f18bab81abf/library/std/build.rs#L29</a></p>",
        "id": 252652921,
        "sender_full_name": "bjorn3",
        "timestamp": 1631204095
    },
    {
        "content": "<p>You might need to add support to cc-rs as well.</p>",
        "id": 252662561,
        "sender_full_name": "Amanieu",
        "timestamp": 1631208032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/122651-general/topic/Porting.20rustc.20to.20other.20OSs/near/252662561\">said</a>:</p>\n<blockquote>\n<p>You might need to add support to cc-rs as well.</p>\n</blockquote>\n<p>what's that? I suppose it's for those crates that bind to C source and compile it at the same time?</p>",
        "id": 252662848,
        "sender_full_name": "lightspot21",
        "timestamp": 1631208149
    },
    {
        "content": "<p>yes, and it hard-codes a lot of target knowledge</p>",
        "id": 252663144,
        "sender_full_name": "cuviper",
        "timestamp": 1631208263
    },
    {
        "content": "<p>default flags, cross-compilation toolchain prefixes, etc.</p>",
        "id": 252663173,
        "sender_full_name": "cuviper",
        "timestamp": 1631208278
    },
    {
        "content": "<p>Ok, I created the target files, and now I need to teach libc what it needs. My question is, how should I tell the compiler to use my own version and not one from <a href=\"http://crates.io\">crates.io</a>? I saw something about <code>patch</code> in Cargo.toml but then I don't know which version rustc will use when building, so that I patch the correct one. Any ideas?</p>",
        "id": 252688732,
        "sender_full_name": "lightspot21",
        "timestamp": 1631218820
    }
]