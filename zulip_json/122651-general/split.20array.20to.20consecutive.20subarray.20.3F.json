[
    {
        "content": "<p>Is there a way to split array const of Copy type to consecutive sub-array ?<br>\nFor example, I have a <code>[u8; 32]</code>const, I want to split it into <code>[u8; 8]</code> and <code>[u8; 24]</code>.</p>",
        "id": 212219104,
        "sender_full_name": "lzutao",
        "timestamp": 1601811072
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> if you don't mind.</p>",
        "id": 212219159,
        "sender_full_name": "lzutao",
        "timestamp": 1601811125
    },
    {
        "content": "<p>what exactly do you need this for?</p>",
        "id": 212219236,
        "sender_full_name": "lcnr",
        "timestamp": 1601811310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209117\">lzutao</span> <a href=\"#narrow/stream/122651-general/topic/split.20array.20to.20consecutive.20subarray.20.3F/near/212219159\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> if you don't mind.</p>\n</blockquote>\n<p>sorry, I am not involved in the const generic project and cannot help with such questions</p>",
        "id": 212219309,
        "sender_full_name": "RalfJ",
        "timestamp": 1601811425
    },
    {
        "content": "<p>if you only need <code>&amp;[u8; 8]</code> and <code>&amp;[u8; 24]</code> you can use</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">split_at</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">snd</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212219324,
        "sender_full_name": "lcnr",
        "timestamp": 1601811461
    },
    {
        "content": "<p>the try_into should get optimized away by llvm</p>",
        "id": 212219368,
        "sender_full_name": "lcnr",
        "timestamp": 1601811492
    },
    {
        "content": "<p>if by value, something like this would work</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">mem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">split_first</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">split_first</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212219378,
        "sender_full_name": "lcnr",
        "timestamp": 1601811548
    },
    {
        "content": "<p>hashing. It's not entirely needed, but I want to define 4 u64 constant<br>\nfrom a const <code>[u8; 32]</code>.</p>",
        "id": 212219387,
        "sender_full_name": "lzutao",
        "timestamp": 1601811575
    },
    {
        "content": "<p>then probably <code>*arr[0..8].try_into().unwrap()</code></p>",
        "id": 212219443,
        "sender_full_name": "lcnr",
        "timestamp": 1601811628
    },
    {
        "content": "<p>it works, but not in const context since traits aren't allowed.</p>",
        "id": 212219470,
        "sender_full_name": "lzutao",
        "timestamp": 1601811708
    },
    {
        "content": "<p>does</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>work?</p>",
        "id": 212219596,
        "sender_full_name": "lcnr",
        "timestamp": 1601811865
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0015</span><span class=\"p\">]</span>: <span class=\"nc\">calls</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">limited</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"n\">structs</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"n\">variants</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">sip</span><span class=\"o\">/</span><span class=\"n\">hasher</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">18</span>:<span class=\"mi\">43</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">u64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">INIT_STATE</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]))</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                           </span><span class=\"o\">^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>for nightly toolchain</p>",
        "id": 212219829,
        "sender_full_name": "lzutao",
        "timestamp": 1601812279
    },
    {
        "content": "<p>yeah, that's unfortunate</p>",
        "id": 212220002,
        "sender_full_name": "lcnr",
        "timestamp": 1601812586
    },
    {
        "content": "<p>I guess we have to wait until arithmetic support for const generics arguments.</p>",
        "id": 212220015,
        "sender_full_name": "lzutao",
        "timestamp": 1601812659
    },
    {
        "content": "<p>you mean <code>const_evaluatable_checked</code>?</p>",
        "id": 212220060,
        "sender_full_name": "lcnr",
        "timestamp": 1601812707
    },
    {
        "content": "<p>I don't see how this will help though</p>",
        "id": 212220066,
        "sender_full_name": "lcnr",
        "timestamp": 1601812714
    },
    {
        "content": "<p>The error in <a href=\"#narrow/stream/122651-general/topic/split.20array.20to.20consecutive.20subarray.20.3F/near/212219829\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/split.20array.20to.20consecutive.20subarray.20.3F/near/212219829</a> is const trait.<br>\nWhat I mean for arithmetic is in <code>fn foo&lt;const N: usize&gt;(_: [u8; N]) -&gt; [u8; N - 3]</code>.</p>",
        "id": 212220200,
        "sender_full_name": "lzutao",
        "timestamp": 1601812980
    },
    {
        "content": "<p>yeah, that's <code>const_evaluatable_checked</code>, which is both my child and still very broken</p>",
        "id": 212220260,
        "sender_full_name": "lcnr",
        "timestamp": 1601813074
    },
    {
        "content": "<p>so <code>fn foo&lt;const N: usize&gt;(_: [u8; N]) -&gt; [u8; N - 3]</code> works if you enable <code>feature(const_evaluatable_checked)</code></p>",
        "id": 212220271,
        "sender_full_name": "lcnr",
        "timestamp": 1601813098
    },
    {
        "content": "<p>that's nice.<br>\nI implemented a function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">split_bytearray</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">PART</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">core</span>::<span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PART</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">START</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PART</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">END</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">START</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">START</span><span class=\"o\">..</span><span class=\"n\">END</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>but the <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=71e02509c3ee6fa880814a33d487e05b\">compiler error</a>: <code>error[E0401]: can't use generic parameters from outer function</code></p>",
        "id": 212221004,
        "sender_full_name": "lzutao",
        "timestamp": 1601814281
    },
    {
        "content": "<p>what's core::assert!</p>",
        "id": 212221023,
        "sender_full_name": "lcnr",
        "timestamp": 1601814313
    },
    {
        "content": "<p>is that  allowed in design of <code>const_evaluatable_checked</code> ?</p>",
        "id": 212221027,
        "sender_full_name": "lzutao",
        "timestamp": 1601814317
    },
    {
        "content": "<p>consts can't depend on outer generic params</p>",
        "id": 212221035,
        "sender_full_name": "lcnr",
        "timestamp": 1601814345
    },
    {
        "content": "<p>so you probably want to use <code>PART * 8</code> directly here</p>",
        "id": 212221077,
        "sender_full_name": "lcnr",
        "timestamp": 1601814369
    },
    {
        "content": "<p>instead of <code>assert!(PART &lt; 4)</code> you can use <code>where [u8; 3 - N]</code></p>",
        "id": 212221098,
        "sender_full_name": "lcnr",
        "timestamp": 1601814411
    },
    {
        "content": "<p>let me try getting this to compile</p>",
        "id": 212221106,
        "sender_full_name": "lcnr",
        "timestamp": 1601814430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/split.20array.20to.20consecutive.20subarray.20.3F/near/212221023\">said</a>:</p>\n<blockquote>\n<p>what's core::assert!</p>\n</blockquote>\n<p>I want to use libcore only.</p>",
        "id": 212221120,
        "sender_full_name": "lzutao",
        "timestamp": 1601814458
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 212221200,
        "sender_full_name": "lcnr",
        "timestamp": 1601814564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/split.20array.20to.20consecutive.20subarray.20.3F/near/212221077\">said</a>:</p>\n<blockquote>\n<p>so you probably want to use <code>PART * 8</code> directly here</p>\n</blockquote>\n<p>it works, but now <code>ptr::read</code> is not allowed in const fn</p>",
        "id": 212221289,
        "sender_full_name": "lzutao",
        "timestamp": 1601814687
    },
    {
        "content": "<p>yeah</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked, const_panic)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">assert_less_than</span><span class=\"p\">(</span><span class=\"n\">l</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">split_bytearray</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">PART</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">assert_less_than</span><span class=\"p\">(</span><span class=\"n\">PART</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)]</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">PART</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"n\">PART</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">split_bytearray</span>::<span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// split_bytearray::&lt;4&gt;([0; 32]); // compilefail</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212221355,
        "sender_full_name": "lcnr",
        "timestamp": 1601814762
    },
    {
        "content": "<p>but now it's not const</p>",
        "id": 212221358,
        "sender_full_name": "lcnr",
        "timestamp": 1601814769
    },
    {
        "content": "<p>if you only need <code>[u8; 8]</code> you can build the array by manually indexing</p>",
        "id": 212221378,
        "sender_full_name": "lcnr",
        "timestamp": 1601814833
    },
    {
        "content": "<p>but that kind of sucks</p>",
        "id": 212221381,
        "sender_full_name": "lcnr",
        "timestamp": 1601814839
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do we need const traits to get <code>arr[a..b]</code> to work in a const context?</p>",
        "id": 212221426,
        "sender_full_name": "lcnr",
        "timestamp": 1601814874
    },
    {
        "content": "<p>Is slicing here even required? You could just take a pointer to the first element you want no?</p>",
        "id": 212221642,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601815247
    },
    {
        "content": "<p>something like <code>arr.as_ptr().add(PART)</code>, or am I missing something?</p>",
        "id": 212221651,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601815271
    },
    {
        "content": "<p>yeah, that would require pointer dereferences which are also not yet const afaik</p>",
        "id": 212221713,
        "sender_full_name": "lcnr",
        "timestamp": 1601815341
    },
    {
        "content": "<p>or wait, we can always transmute using a union</p>",
        "id": 212221725,
        "sender_full_name": "lcnr",
        "timestamp": 1601815367
    },
    {
        "content": "<p>yeah, I got it work: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b48984b7999f7ecc3ab1c6e61f09947f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b48984b7999f7ecc3ab1c6e61f09947f</a></p>",
        "id": 212221865,
        "sender_full_name": "lzutao",
        "timestamp": 1601815566
    },
    {
        "content": "<p>Slicing does need trait methods first. I currently don't have the time to work on that though. We do have some things implemented around this (impl const Trait is a thing), I don't remember what the exact status of all components is</p>",
        "id": 212223105,
        "sender_full_name": "oli",
        "timestamp": 1601817625
    },
    {
        "content": "<p>Couldn't <code>split_at</code> be made const  before traits can be const implemented?</p>",
        "id": 212239487,
        "sender_full_name": "matt1992",
        "timestamp": 1601842402
    }
]