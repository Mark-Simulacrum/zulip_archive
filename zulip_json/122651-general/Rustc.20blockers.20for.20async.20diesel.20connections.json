[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I have opened this thread here as response to your <a href=\"https://old.reddit.com/r/rust/comments/laf073/part_of_sqlx_will_become_proprietary/glnvcrx/\">comment on reddit</a>. As a diesel maintainer I would like to clarify a few points on why diesel does not support an async connection interface yet.<br>\nFirst of all implementing such a interface is quite a bit work. I'm currently the only person actively maintaining diesel (though there are a few semi-regular contributors) and I am doing that in my free time as an hobby. Implementing large features is currently just something I don't have time for, so such things need be contributed from other persons. (Additionally, I spend in the last months a considerable amount of my available time to work on diesel reporting regressions in rustc and providing reproductions for them. It would probably help not having to do that).<br>\nBeside of that there are few issues in rustc's current implementation of async await that makes it at least a lot harder to actually implement an async connection interface that is somewhat generic over different backend types and provides a sane usability. There are a few basic constraints here. In rust speak most database connections are <code>Send</code> but not <code>Sync</code>. (See <a href=\"https://www.postgresql.org/docs/current/libpq-threading.html\">this postgres documentation for an example</a>). Therefore it's a basic constraint for a <code>AsyncConnection</code> trait to work with these types. Now if we just go down the route of putting <code>async</code> on each function in the existing <code>Connection</code> trait we will hit soon the problem that <code>async fn</code>/<code>-&gt; impl Future</code> leaks <code>Send</code> and <code>Sync</code> trait bounds without that being part of the explicit API. See <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=de59446add68d11a9addf7f3630e538c\">this playground</a> for a toy example. Now one could go and say \"lets use <code>&amp;mut self</code> instead of a shared reference, but then you going straight into lifetime hell (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=553c94492ab79838d567ab8e56f2718d\">updated playground</a>). In the end you will run into <a href=\"https://github.com/rust-lang/rust/issues/59337\">https://github.com/rust-lang/rust/issues/59337</a>. (There is a much longer version of this available <a href=\"https://github.com/diesel-rs/diesel/issues/399#issuecomment-684726924\">here</a>, which explains various other designs as well and points out where they fail). If you, as a language team member, have suggestions how to go forward with the underlying problem I'm happy to hear your suggestions.<br>\nAs an additional note on this: According to our benchmarks <a href=\"https://github.com/diesel-rs/diesel/pull/2507#issuecomment-694103824\">here</a> it does not seem as having an <code>async</code> connection would improve performance in any way. (In contrary, at least for <code>sqlite</code> and possible <code>mysql</code> the opposite seems to be the case). Again that is only a set of benchmarks I've written, so if someone comes up with some benchmark showing something different that would be great.</p>\n<p>(As another unrelated side note: Regarding the automatic schema migration thing you brought up also in that reddit thread. I believe its possible to implement something like that as proc macro attribute applied to a diesel <code>schema.rs</code> file. I think that's a good exercise for someone who want's to know a bit more about proc macros and code generation. That could work as third party crate (from diesels point of view) as well as part of <code>diesel_migrations</code> if someone decides to contribute something like that.)</p>",
        "id": 224844178,
        "sender_full_name": "weiznich",
        "timestamp": 1612256889
    },
    {
        "content": "<p>FWIW, when I mentioned that, I didn't intend it to be a statement against diesel, only a simple statement of fact. I find it <em>really</em> unfortunate, when I came back later, that several people had used that as an opportunity to blast diesel.</p>",
        "id": 224850619,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612260602
    },
    {
        "content": "<p>I understand that adding async support is a <em>huge</em> amount of work.</p>",
        "id": 224850679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612260616
    },
    {
        "content": "<p>I'm sad to see the followups to my comment.</p>",
        "id": 224850884,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612260730
    },
    {
        "content": "<p>I totally understand that this was not written in bad intentions. <br>\nOne thing I really would like to understand why so many people believe that an <code>async</code> database connection would speed up their application. Normally there is only a fixed number of database connection due to constraints by the database server. By design those connections support executing exactly one query at a single point in time. That if you have for example a large web application that gets many requests database connection itself will be the bottelneck, not that queries on those connections are blocking. Maybe you could shed some light on way you are looking for an async implementation here?</p>",
        "id": 224855258,
        "sender_full_name": "weiznich",
        "timestamp": 1612263279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Maybe you could elaborate on that a bit?</p>",
        "id": 224857515,
        "sender_full_name": "weiznich",
        "timestamp": 1612264605
    },
    {
        "content": "<p>FWIW, in my (toy) app, <a href=\"https://github.com/shepmaster/stack-overflow-relay/blob/main/src/database.rs\">I create a separate blocking task for Diesel and treat it as an actor</a>. If I ever had a need for DB-level concurrency (I probably won't), I'd just spawn more of those — creating my own proto-pool.</p>",
        "id": 224877133,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612275809
    },
    {
        "content": "<p>I noticed there was no <code>tokio-postgres</code> version of the benchmarks. Is that because you didn't implement it and nobody else sent a PR?</p>",
        "id": 224877399,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612275934
    },
    {
        "content": "<p>I actually <em>like</em> this because the narrow-ish actor interface forces me to bundle up more work per DB query, including establishing a transaction if need be.</p>",
        "id": 224877452,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612275954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215423\">@weiznich</span> For my use case, the database is unlikely to ever be the bottleneck. I need async not because I expect it to improve database throughput, but because the rest of my program uses async and needs to be responsive, and I don't want to have to use threads to make the database calls non-blocking.</p>",
        "id": 224901749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612285464
    },
    {
        "content": "<p>(smol makes that easy, with \"unblock\", but not as easy as not having to.)</p>",
        "id": 224902148,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612285589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> That sounds exactly like that kind of issue which could easily use that actor approach suggested above or some variant of <code>async_std::task::spawn_blocking</code> (or similar functions of the other async frameworks). I believe something like this is a good candidate for a extension crate for diesel, but someone needs to write and maintain such a thing. (In fact there is already a <code>tokio-diesel</code> crate which goes down this route, but with unclear maintenance status)</p>",
        "id": 224911615,
        "sender_full_name": "weiznich",
        "timestamp": 1612289379
    },
    {
        "content": "<p>I'm already using the actor pattern for a few things, but I don't want to have to refactor all my database calls into a single actor.</p>",
        "id": 224911739,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612289417
    },
    {
        "content": "<p>But yeah, having a shim that does async database calls by using a pool and an approach like that would work.</p>",
        "id": 224911821,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612289458
    },
    {
        "content": "<p>Basically <code>tokio-diesel</code> then: <a href=\"https://docs.rs/tokio-diesel/0.3.0/tokio_diesel/\">https://docs.rs/tokio-diesel/0.3.0/tokio_diesel/</a> <br>\nI would assume that it should not be that hard to modify this crate to support more than one async runtime.</p>",
        "id": 224911950,
        "sender_full_name": "weiznich",
        "timestamp": 1612289521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/122651-general/topic/Rustc.20blockers.20for.20async.20diesel.20connections/near/224877399\">said</a>:</p>\n<blockquote>\n<p>I noticed there was no <code>tokio-postgres</code> version of the benchmarks. Is that because you didn't implement it and nobody else sent a PR?</p>\n</blockquote>\n<p>My justification here is that the <code>postgres</code> crate is only a thin wrapper around <code>tokio-postgres</code>. Its basically only wrapping all the async methods with <code>tokio::block_on</code> and exposes them as non async variant. Now if one would write benchmark code against <code>tokio-postgres</code> it would be required to do something like that manually, therefore I've just assume that the results would be more or less the same.</p>",
        "id": 224912461,
        "sender_full_name": "weiznich",
        "timestamp": 1612289716
    },
    {
        "content": "<blockquote>\n<p>Its basically only wrapping all the async methods</p>\n</blockquote>\n<p>Yeah, it seems a bit pointless to run one query at a time in an async fashion, then wait for it. But that's not specific to the <code>postgres</code> crate in those benches.</p>",
        "id": 224916062,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612291112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> That's something that is required because of the way database connections work. I think all of them require that you run only one query at the time.</p>",
        "id": 224930658,
        "sender_full_name": "weiznich",
        "timestamp": 1612297295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"215423\">weiznich</span> <a href=\"#narrow/stream/122651-general/topic/Rustc.20blockers.20for.20async.20diesel.20connections/near/224855258\">said</a>:</p>\n<blockquote>\n<p>I totally understand that this was not written in bad intentions. <br>\nOne thing I really would like to understand why so many people believe that an <code>async</code> database connection would speed up their application. Normally there is only a fixed number of database connection due to constraints by the database server. By design those connections support executing exactly one query at a single point in time. That if you have for example a large web application that gets many requests database connection itself will be the bottelneck, not that queries on those connections are blocking. Maybe you could shed some light on way you are looking for an async implementation here?</p>\n</blockquote>\n<p>Honestly - I think that what little concern there should be is being amplified by those who went all-in with async themselves and expect others to follow suit and/or feel like they're being held back somewhere else in their stack. <a href=\"https://actix.rs/docs/databases/\">Actix Docs on the matter</a> for example seem to me to be written from the perspective of, well, those who wrote an async webserver they're very proud of ;) hard to fault them for that, but it might blinker them a bit.</p>",
        "id": 224932591,
        "sender_full_name": "Gerald Melles",
        "timestamp": 1612298090
    },
    {
        "content": "<blockquote>\n<p>I don't want to have to refactor all my database calls into a single actor.</p>\n</blockquote>\n<p>Part of the reason I wrote a proc-macro to avoid the overhead of defining the actor :-)</p>",
        "id": 224934428,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612298984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Is your actor-generating proc-macro available somewhere?</p>",
        "id": 224936978,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612300164
    },
    {
        "content": "<p>unpublished and undocumented :-) <a href=\"https://github.com/shepmaster/stack-overflow-relay/tree/main/alictor\">https://github.com/shepmaster/stack-overflow-relay/tree/main/alictor</a></p>",
        "id": 224937028,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612300198
    },
    {
        "content": "<p>Ah, just found it in the repo you linked.</p>",
        "id": 224937034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612300202
    },
    {
        "content": "<p>shortened from \"alice actor\" — <span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> has an in-progress blog post that describes the general idea</p>",
        "id": 224937119,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612300238
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 224941367,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1612302252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"386344\">Gerald Melles</span> <a href=\"#narrow/stream/122651-general/topic/Rustc.20blockers.20for.20async.20diesel.20connections/near/224932591\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"215423\">weiznich</span> <a href=\"#narrow/stream/122651-general/topic/Rustc.20blockers.20for.20async.20diesel.20connections/near/224855258\">said</a>:</p>\n<blockquote>\n<p>I totally understand that this was not written in bad intentions. <br>\nOne thing I really would like to understand why so many people believe that an <code>async</code> database connection would speed up their application. Normally there is only a fixed number of database connection due to constraints by the database server. By design those connections support executing exactly one query at a single point in time. That if you have for example a large web application that gets many requests database connection itself will be the bottelneck, not that queries on those connections are blocking. Maybe you could shed some light on way you are looking for an async implementation here?</p>\n</blockquote>\n<p>Honestly - I think that what little concern there should be is being amplified by those who went all-in with async themselves and expect others to follow suit and/or feel like they're being held back somewhere else in their stack. <a href=\"https://actix.rs/docs/databases/\">Actix Docs on the matter</a> for example seem to me to be written from the perspective of, well, those who wrote an async webserver they're very proud of ;) hard to fault them for that, but it might blinker them a bit.</p>\n</blockquote>\n<p>After looking at this documentation I must say I find that their example is highly misleading. On the one hand they seems to make a very concrete point about that you must have to use <code>web::block</code> for any diesel call, but in the same example they just use a blocking database pool and just checkout the connection outside their <code>web::block</code> callback, which will likely cause much more trouble in a real world application.</p>",
        "id": 224990698,
        "sender_full_name": "weiznich",
        "timestamp": 1612343934
    },
    {
        "content": "<p>I agree. It seems like people are drinking the kool-aid of premature (and potentially fully unnecessary) optimization here.</p>",
        "id": 225461070,
        "sender_full_name": "Gerald Melles",
        "timestamp": 1612699637
    }
]