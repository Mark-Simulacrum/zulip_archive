[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Y</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Neither of these raise any warnings. I swear at one point they did. What happened to the warnings?</p>",
        "id": 156575249,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548126227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> are you sure? seems like 1.0 didn't warn either: <a href=\"https://godbolt.org/z/-3K_fL\" target=\"_blank\" title=\"https://godbolt.org/z/-3K_fL\">https://godbolt.org/z/-3K_fL</a></p>",
        "id": 156588188,
        "sender_full_name": "RalfJ",
        "timestamp": 1548145681
    },
    {
        "content": "<p>Yeah, the lint only fires if such a type is used in a function signature imported from C (not even when you define a <code>extern fn</code> in Rust)</p>",
        "id": 156588259,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548145762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  I'm never sure about anything.</p>\n<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> :-(</p>",
        "id": 156606146,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548166260
    },
    {
        "content": "<p>thanks</p>",
        "id": 156606158,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548166264
    },
    {
        "content": "<p><code>#[repr(C)]</code> is useful if you want a specific layout, even if that layout is not technically compatible with C</p>",
        "id": 156634802,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1548187481
    },
    {
        "content": "<p>Ugh, now I remember this argument (which I see, but feel it's missing the forest for the trees)</p>",
        "id": 156635997,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188459
    },
    {
        "content": "<p>Ditto about <code>extern \"C\"</code> functions...</p>",
        "id": 156636051,
        "sender_full_name": "nagisa",
        "timestamp": 1548188506
    },
    {
        "content": "<p>How do I make the compiler help prevent me and random people asking questions on Stack Overflow from shooting themselves in the foot then?</p>",
        "id": 156636054,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188508
    },
    {
        "content": "<p>or <code>extern \"anything\"</code>, really</p>",
        "id": 156636064,
        "sender_full_name": "nagisa",
        "timestamp": 1548188514
    },
    {
        "content": "<p>Which is something that the Rust compiler in generally lauded for</p>",
        "id": 156636124,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I do not understand how people come to <em>any</em> conclusion about layout of types which have no layout specified and fields of which are private?</p>",
        "id": 156636169,
        "sender_full_name": "nagisa",
        "timestamp": 1548188580
    },
    {
        "content": "<p>Rather seems like there should have been <code>#[repr(not-C-but-im-special)]</code></p>",
        "id": 156636188,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188587
    },
    {
        "content": "<p>arguably yes, but it's far too late to introduce that and demand people use it</p>",
        "id": 156636215,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548188624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I'm not sure I follow your argument.</p>",
        "id": 156636276,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188650
    },
    {
        "content": "<p>I would expect that the majority of people who type <code>extern \"C\" fn</code> actually want to integrate that function with C (or something else using the C ABI). Thus if a type is present that cannot be validly put into such an ABI, I'd hope the compiler would tell me.</p>",
        "id": 156636335,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> What I’m trying to say, that something like <code>extern \"C\" id(x: *mut MyReprCStructWithUndefinedInternalLayout) -&gt; *mut MyReprCStructWithUndefinedInternalLayout</code> is still very much valid code that is hard to get wrong. But since you don’t know the layout of that struct you cannot write an equivalent typedef in C, and that is fine.</p>",
        "id": 156636444,
        "sender_full_name": "nagisa",
        "timestamp": 1548188779
    },
    {
        "content": "<p>my question is, if people are trying to interface with this struct, how do they figure out what the C type definition should look like at all?</p>",
        "id": 156636476,
        "sender_full_name": "nagisa",
        "timestamp": 1548188815
    },
    {
        "content": "<p>that seems like an obvious first roadblock</p>",
        "id": 156636478,
        "sender_full_name": "nagisa",
        "timestamp": 1548188821
    },
    {
        "content": "<p>like you cannot just write <code>typedef struct { field: String } MyReprCStructWithUndefinedLayout</code>, right?</p>",
        "id": 156636510,
        "sender_full_name": "nagisa",
        "timestamp": 1548188854
    },
    {
        "content": "<p>Here's the concrete case that made me ask. Someone had the moral equivalent of <code>extern \"C\" fn foo() -&gt; (TcpListener, TcpStream)</code>. The compiler allows this quite happily. This seems extremely poor.</p>",
        "id": 156636572,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188889
    },
    {
        "content": "<p>now, if there was a lint that said \"hey, you are returning a non-repr(C) struct, probs not what you want\", that would have saved them (or we could ask them why they ignored the warning)</p>",
        "id": 156636608,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548188940
    },
    {
        "content": "<p>right, and nobody can bind to that function either way, because you simply cannot declare <code>TcpListener</code> or <code>TcpStream</code> over FFI. Now the story is quite different for when you have your own non-repr(C) structs that contain entirely primitives and are used in such extern \"C\" functions.</p>",
        "id": 156636738,
        "sender_full_name": "nagisa",
        "timestamp": 1548189024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> in this case, it's hard to tell because the code was reduced, but they were basically just passing it back to Rust later</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">foo</span><span class=\"p\">();</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">();</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 156636749,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189038
    },
    {
        "content": "<p>So they had an \"opaque handle\" (that somehow worked, they claimed)</p>",
        "id": 156636795,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189076
    },
    {
        "content": "<p>I’m not sure how any sort of lint could have helped with this mistake.</p>",
        "id": 156636834,
        "sender_full_name": "nagisa",
        "timestamp": 1548189112
    },
    {
        "content": "<p>I'm... speechless, I guess.</p>",
        "id": 156636901,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189133
    },
    {
        "content": "<p>Even if we <em>had</em> lint that said something about returning a non-<code>repr(C)</code> struct, there’s no way to lint against people having a mismatched declaration on the other side of FFI</p>",
        "id": 156636927,
        "sender_full_name": "nagisa",
        "timestamp": 1548189153
    },
    {
        "content": "<p>Yes, there are always times where people can get it wrong, that's why it's a warning / suggestion</p>",
        "id": 156636961,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189187
    },
    {
        "content": "<p>(note that I’m not arguing against adding such a lint, I’m just trying to understand how such a mistake could’ve been arrived at at all)</p>",
        "id": 156636977,
        "sender_full_name": "nagisa",
        "timestamp": 1548189199
    },
    {
        "content": "<p>rustc sez: \"hey, it's literally impossible to access this type in the C ABI\"</p>",
        "id": 156636988,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189208
    },
    {
        "content": "<p>this sparks the brain</p>",
        "id": 156637010,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189231
    },
    {
        "content": "<p>we have lints for far less \"meaningful\" mistakes (e.g. all the snake_case stuff that I love)</p>",
        "id": 156637088,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189267
    },
    {
        "content": "<blockquote>\n<p>hey, it's literally impossible to access this type in the C ABI</p>\n</blockquote>\n<p>It is if the declaration and definition of the function <em>matches</em> (e.g. Rust code both declares and defines the same function with the same signature).</p>",
        "id": 156637116,
        "sender_full_name": "nagisa",
        "timestamp": 1548189299
    },
    {
        "content": "<p>Unclear what you mean: It is ... possible? impossible?</p>",
        "id": 156637160,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189333
    },
    {
        "content": "<p>It is possible to have <code>extern \"C\"</code> function to work with non-repr(C) return types and arguments. All <code>extern \"C\"</code> changes is how the arguments and return types are passed around. As long as expectations on both the caller and callee side match up, everything will work well, and there are reasonable use-cases for doing so (e.g. dynamically loaded libraries).</p>",
        "id": 156637263,
        "sender_full_name": "nagisa",
        "timestamp": 1548189416
    },
    {
        "content": "<p>we lint against that, because the common use-case is to interface with another language, and dynamic loading is a secondary use-case.</p>",
        "id": 156637299,
        "sender_full_name": "nagisa",
        "timestamp": 1548189458
    },
    {
        "content": "<p>that is fine.</p>",
        "id": 156637300,
        "sender_full_name": "nagisa",
        "timestamp": 1548189460
    },
    {
        "content": "<blockquote>\n<p>there are reasonable use-cases</p>\n</blockquote>\n<p>I definitely am not arguing against that. That's what <code>allow</code> is for</p>",
        "id": 156637306,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189473
    },
    {
        "content": "<blockquote>\n<p>we lint against that</p>\n</blockquote>\n<p>Wait... what <strong>do</strong> we lint against?</p>",
        "id": 156637360,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189494
    },
    {
        "content": "<p>We lint against using non-<code>repr(C)</code> in function signatures.</p>",
        "id": 156637390,
        "sender_full_name": "nagisa",
        "timestamp": 1548189524
    },
    {
        "content": "<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dbb3a68b886ca78f97d80a7f0de63dd7\" target=\"_blank\" title=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dbb3a68b886ca78f97d80a7f0de63dd7\">we do not</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>   Compiling playground v0.0.1 (/playground)\nwarning: function is never used: `foo`\n --&gt; src/lib.rs:1:1\n  |\n1 | extern &quot;C&quot; fn foo() -&gt; String {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(dead_code)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.49s\n</pre></div>",
        "id": 156637429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189574
    },
    {
        "content": "<p>wait, what do we lint against then lol.</p>",
        "id": 156637494,
        "sender_full_name": "nagisa",
        "timestamp": 1548189608
    },
    {
        "content": "<p>/me rattles their head</p>",
        "id": 156637513,
        "sender_full_name": "nagisa",
        "timestamp": 1548189625
    },
    {
        "content": "<p>And now we are cycling back to my original point <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 156637520,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189631
    },
    {
        "content": "<p>But thank you for pointing out that it it (was?) only on functions.</p>",
        "id": 156637535,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189646
    },
    {
        "content": "<p>That is certainly a piece I was missing.</p>",
        "id": 156637553,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189661
    },
    {
        "content": "<p>we lint against <code>extern \"C\" { fn foo(x: String); }</code></p>",
        "id": 156637570,
        "sender_full_name": "nagisa",
        "timestamp": 1548189675
    },
    {
        "content": "<p>which makes sense because we are about 100% sure this function is being imported across FFI.</p>",
        "id": 156637590,
        "sender_full_name": "nagisa",
        "timestamp": 1548189699
    },
    {
        "content": "<p>We should perhaps lint against defining functions like that, with perhaps a lint that is different from the current one.</p>",
        "id": 156637680,
        "sender_full_name": "nagisa",
        "timestamp": 1548189748
    },
    {
        "content": "<p>the uncertainty with the existing lint would be host process functions in a DLL, presumably?</p>",
        "id": 156637687,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189757
    },
    {
        "content": "<p>I do not think we should lint against <code>#[repr(C)]</code> structs, though. Mostly because a programmer would notice this either way by trying to declare a compatible type on the other side of the FFI.</p>",
        "id": 156637724,
        "sender_full_name": "nagisa",
        "timestamp": 1548189799
    },
    {
        "content": "<p>Yeah, I'd be cool with that line in the sand as well.</p>",
        "id": 156637751,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189839
    },
    {
        "content": "<p>I agree. I have actually previously argued for linting <code>improper_ctypes</code> in Rust-defined <code>#[no_mangle] extern \"C\"</code> functions. There was an issue about it, let me find it.</p>",
        "id": 156637792,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548189843
    },
    {
        "content": "<p>although I wish that there had been the \"other\" repr that wasn't conflicted meaning</p>",
        "id": 156637846,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189896
    },
    {
        "content": "<p>Clearly we need a <code>repr(cdylib)</code> analog ;-)</p>",
        "id": 156637865,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189911
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/19834\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/19834\">https://github.com/rust-lang/rust/issues/19834</a></p>",
        "id": 156637875,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548189924
    },
    {
        "content": "<p>/me looks at their comment in the linked issue.</p>",
        "id": 156637963,
        "sender_full_name": "nagisa",
        "timestamp": 1548189981
    },
    {
        "content": "<p>Some jerk named \"nagisa\" shot it down, I see.</p>",
        "id": 156637973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189992
    },
    {
        "content": "<p><span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 156637978,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548189996
    },
    {
        "content": "<p>Though it was exactly everybody’s position at the time: no-false-positives in rustc, rest in clippy</p>",
        "id": 156638018,
        "sender_full_name": "nagisa",
        "timestamp": 1548190032
    },
    {
        "content": "<p>not sure whether it has changed yet, but it quite likely that it hasn’t.</p>",
        "id": 156638044,
        "sender_full_name": "nagisa",
        "timestamp": 1548190058
    },
    {
        "content": "<p>I'm going to take a screenshot of your comment here saying it should exist and just post it with no commentary.</p>",
        "id": 156638050,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548190060
    },
    {
        "content": "<p><em>no</em> false positives seems overly strong.</p>",
        "id": 156638072,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548190075
    },
    {
        "content": "<p>But certainly a very low rate, absolutely.</p>",
        "id": 156638139,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548190099
    },
    {
        "content": "<p>Right, because <code>extern \"C\" { fn ... }</code> is also not quite 100% false-positive free.</p>",
        "id": 156638155,
        "sender_full_name": "nagisa",
        "timestamp": 1548190113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> dug up a <a href=\"https://github.com/rust-lang/rust/issues/36464\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/36464\">https://github.com/rust-lang/rust/issues/36464</a></p>",
        "id": 156638716,
        "sender_full_name": "nagisa",
        "timestamp": 1548190559
    },
    {
        "content": "<p>well you linked to it from the other one^^</p>",
        "id": 156638908,
        "sender_full_name": "RalfJ",
        "timestamp": 1548190685
    },
    {
        "content": "<p>One way to pass semi-C, semi-Rust structures across C is this (I just thought of it)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">That</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>: <span class=\"nc\">c_int</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"nc\">c_banana</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">qux</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">that</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">That</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">that</span> <span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n     <span class=\"n\">banana</span> <span class=\"n\">bar</span><span class=\"p\">;</span>\n     <span class=\"kt\">uint8_t</span> <span class=\"n\">rest</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">struct</span> <span class=\"n\">that</span><span class=\"o\">*</span> <span class=\"n\">that</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n</pre></div>",
        "id": 156693057,
        "sender_full_name": "nagisa",
        "timestamp": 1548254070
    },
    {
        "content": "<p>seems very fine to me as long as nobody attempts to interpret <code>rest</code> in any way.</p>",
        "id": 156693315,
        "sender_full_name": "nagisa",
        "timestamp": 1548254274
    },
    {
        "content": "<p>My opinion stated in that issue hasn't changed. Please lint on non C compatible types in <code>extern \"C\"</code> signatures.</p>",
        "id": 157400569,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1549070400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125267\">@Peter</span> don't we?</p>",
        "id": 157438657,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549141881
    },
    {
        "content": "<p>what issue?</p>",
        "id": 157438658,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549141884
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/36464\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/36464\">https://github.com/rust-lang/rust/issues/36464</a></p>",
        "id": 157438666,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1549141920
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 157438691,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549141922
    },
    {
        "content": "<p>yeah I agree</p>",
        "id": 157438710,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549141938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> you can also just do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">s</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">make_Foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_x</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">Foo</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Foo</span><span class=\"o\">*</span> <span class=\"nf\">make_Foo</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"nf\">get_x</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"k\">const</span><span class=\"o\">*</span> <span class=\"n\">f</span><span class=\"p\">);</span>\n</pre></div>",
        "id": 157439054,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549142547
    }
]