[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/2c3dc04ea4071805fbd1b07bd726c1daf03c0384/src/librustc_attr/builtin.rs#L576\">https://github.com/rust-lang/rust/blob/2c3dc04ea4071805fbd1b07bd726c1daf03c0384/src/librustc_attr/builtin.rs#L576</a> <br>\nIs there a reason why <code>env</code> here?<br>\nWhen building <code>rustfmt</code> (which depends on <code>librustc_attr</code>) via <code>cargo build</code>, I always have to manually pass some value to it to not get a build failure <code>environment variable </code>CFG_RELEASE_CHANNEL<code> not defined</code></p>\n<p>Is there a reason to not simply use <code>option_env!(...).unwrap_or_default()</code> so that we end up with a <code>String::new()</code> in case no env var is passed?</p>",
        "id": 207277903,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1597766278
    },
    {
        "content": "<p>I try to discourage option_env! in rustc -- it's really error prone, you can e.g. typo it and it's hard to track down</p>",
        "id": 207278706,
        "sender_full_name": "simulacrum",
        "timestamp": 1597766618
    },
    {
        "content": "<p>maybe we can e.g. do <code>option_env_if_cfg!(cfg, \"FOO\")</code> which mandates it without the cfg</p>",
        "id": 207278830,
        "sender_full_name": "simulacrum",
        "timestamp": 1597766658
    },
    {
        "content": "<p>then we could have bootstrap set that cfg for in-tree builds but then we have reasonable defaults still</p>",
        "id": 207278879,
        "sender_full_name": "simulacrum",
        "timestamp": 1597766683
    }
]