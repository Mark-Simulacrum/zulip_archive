[
    {
        "content": "<p>Hi everyone, I'm wondering how <code>repr(C)</code> works under the hood. I understand it uses the C ABI of the platform that you're compiling for. How does the compiler know about this? Does it use something like libclang, or relying on LLVM, or something else?</p>\n<p>(I tried searching through the streams but I didn't find the exact answer)</p>",
        "id": 238312736,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620741796
    },
    {
        "content": "<p>(also feel free to redirect me to the most appropriate stream to discuss this if general is the wrong place to ask this)</p>",
        "id": 238313214,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620741959
    },
    {
        "content": "<p>I think it uses a mixture of implementing the C ABI in rustc, and relying on LLVM to get the calling convention right</p>",
        "id": 238313403,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620742015
    },
    {
        "content": "<p>That's included in the definition of a target in rustc itself: <a href=\"https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs\">https://github.com/rust-lang/rust/blob/125505306744a0a5bb01d62337260a95d9ff8d57/compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs</a></p>",
        "id": 238313475,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1620742040
    },
    {
        "content": "<p>I see, thank you for the pointers</p>",
        "id": 238314065,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620742266
    },
    {
        "content": "<p>So, If I understand correctly it uses the <code>data_layout</code> attr along with something like <a href=\"https://doc.rust-lang.org/reference/type-layout.html#reprc-structs\">https://doc.rust-lang.org/reference/type-layout.html#reprc-structs</a> to build the struct?</p>",
        "id": 238314497,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620742428
    },
    {
        "content": "<p>Yep.</p>",
        "id": 238333758,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1620748880
    },
    {
        "content": "<p>Great, thanks. Do you also perform any checks for struct values coming from C? Do you assume that whatever C shared library the user is interfacing with will have the same ABI / calling convention as the platform you're compiling in?</p>",
        "id": 238335426,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620749419
    },
    {
        "content": "<p>The overall context of my questions is wondering how Rust deals with pass-by-value structs in the FFI. For example, if a C returns a struct, Rust should know how the layout of that struct, somehow. Or, if the C library performs rvo on the struct, how does Rust know?</p>",
        "id": 238335889,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620749597
    },
    {
        "content": "<p>You can't perform RVO and adhere to the ABI. That's rather the point of an ABI.</p>",
        "id": 238341822,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620751993
    },
    {
        "content": "<p>Unless \"RVO\" were baked into the ABI, in which case it'd be a part of the definition of the ABI.</p>",
        "id": 238341890,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620752033
    },
    {
        "content": "<p>So, yes, you need to define the struct using equivalent layouts in both languages.</p>",
        "id": 238342027,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620752076
    },
    {
        "content": "<p>You declare which ABI you want via <code>extern \"Foo\" fn</code>. Usually <code>\"C\"</code>, but there are others for less-common cases, such as 32-bit Windows variants or Linux kernel or embedded interrupt handlers.</p>",
        "id": 238342197,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620752162
    },
    {
        "content": "<p>See also <code>FnAbi::adjust_for_cabi</code> <a href=\"https://github.com/rust-lang/rust/blob/2bafe96272bf22cd191c6a01741184b60063292d/compiler/rustc_target/src/abi/call/mod.rs#L602-L603\">https://github.com/rust-lang/rust/blob/2bafe96272bf22cd191c6a01741184b60063292d/compiler/rustc_target/src/abi/call/mod.rs#L602-L603</a></p>",
        "id": 238348517,
        "sender_full_name": "cuviper",
        "timestamp": 1620753072
    },
    {
        "content": "<blockquote>\n<p>You can't perform RVO and adhere to the ABI.</p>\n</blockquote>\n<p>Thanks for the clarification <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> . I tried searching for an answer as to whether RVO could happen across shared libraries, but didn't find a good source. Evidently my google-fu is lacking</p>",
        "id": 238349981,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620753699
    },
    {
        "content": "<blockquote>\n<p>So, yes, you need to define the struct using equivalent layouts in both languages.</p>\n</blockquote>\n<p>Does the compiler emit a warning if there's a mismatch, or does it assume that you will do it correctly?</p>",
        "id": 238350439,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620753890
    },
    {
        "content": "<p>Not for shared libraries, but also check out link-time optimization (LTO)</p>",
        "id": 238350563,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620753945
    },
    {
        "content": "<p>Is that re: rvo or re: compiler warnings?</p>",
        "id": 238350802,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620754032
    },
    {
        "content": "<p>general concept of \"optimizations across units\"</p>",
        "id": 238351760,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620754337
    },
    {
        "content": "<p>How would you propose such a warning would be implemented? What would you use to tell if the struct is \"correct\"?</p>",
        "id": 238351836,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620754371
    },
    {
        "content": "<p>I'm not sure if it can be done, that's why I was asking</p>",
        "id": 238351929,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620754398
    },
    {
        "content": "<p>I was looking into how Rust does FFI because I'm trying to see how to do pass-by-value with structs correctly in the Pony programming language.</p>",
        "id": 238352526,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620754636
    },
    {
        "content": "<p>Someone reported that it wasn't working correctly, so it was removed from the compiler, but I'm trying to figure out how to bring pass-by-value structs back.</p>",
        "id": 238352696,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620754690
    },
    {
        "content": "<p>At runtime, you just have a bag of bytes, there's no runtime type information (RTTI)</p>",
        "id": 238353410,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620755016
    },
    {
        "content": "<p>at best you could inspect the C header, parse it, then generate code. Rust does that with bindgen</p>",
        "id": 238353498,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620755048
    },
    {
        "content": "<p>You may also want to look at libffi, which has to deal with all sorts of this junk</p>",
        "id": 238353544,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620755071
    },
    {
        "content": "<p>Pass by value is part of the calling convention. If the calling convention says no, you aren't allowed to pass structs by value. If the ABI says yes, you must pass it by value. You can have different calling conventions for different functions though. For example in Rust the default calling convention is \"Rust\". This calling convention is unstable and currently passes structs up to 2 registers big by value and everything else by reference. When interfacing with C you define the \"C\" abi, which will match the native C abi for the target you are compiling for. On some targets only simple structs wrapping a single integer are passed by value. On some targets it allows more complex structs to be passed by value and on yet other targets structs are always passed by reference.</p>",
        "id": 238353973,
        "sender_full_name": "bjorn3",
        "timestamp": 1620755259
    },
    {
        "content": "<p>I see, thanks for the help everyone. I need to get some reading done. One thing though, how much work does LLVM do for you when it comes to this? I assumed that LLVM would take care of generating the code with the correct calling convention.</p>",
        "id": 238354466,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620755462
    },
    {
        "content": "<p>The part that determines the actual register and stack locations is in LLVM. The pass by value/pass by reference logic is inside rustc itself and split out over <a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/abi/call\">https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/abi/call</a> and <a href=\"https://github.com/rust-lang/rust/blob/2bafe96272bf22cd191c6a01741184b60063292d/compiler/rustc_middle/src/ty/layout.rs#L2448-L3009\">https://github.com/rust-lang/rust/blob/2bafe96272bf22cd191c6a01741184b60063292d/compiler/rustc_middle/src/ty/layout.rs#L2448-L3009</a></p>",
        "id": 238354830,
        "sender_full_name": "bjorn3",
        "timestamp": 1620755620
    },
    {
        "content": "<blockquote>\n<p>the correct calling convention</p>\n</blockquote>\n<p>Part of the problem is that there are many. And, as mentioned:</p>\n<blockquote>\n<p>For example in Rust the default calling convention is \"Rust\". This calling convention is unstable</p>\n</blockquote>\n<p>LLVM wouldn't even know what Rust's calling convention is. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238354908,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620755645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Have to go now, but will look through your links later, thanks!</p>",
        "id": 238355697,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620755971
    },
    {
        "content": "<p>Thanks all for your help!</p>",
        "id": 238355728,
        "sender_full_name": "Borja o'Cook",
        "timestamp": 1620755986
    }
]