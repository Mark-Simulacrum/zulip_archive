[
    {
        "content": "<p>I have a question regarding NonNull: its documentation says that in addition to the wrapped pointer being non-null, NonNull is defined to be covariant over T. I've read the Rustonomicon regarding variance, although it's still giving me headaches.</p>\n<p>Does this requirement have any practical implications on a developer and if so, what are they? In particular, I'm confused as <code>&amp;'a mut T</code> is invariant over <code>T</code> because one could mutate <code>T</code> through this reference. In my case, I'm taking some <code>&amp;'static mut u8</code> and want to convert that into a pointer represented by <code>NonNull&lt;u8&gt;</code> . Does variance even matter if the type in question is a <code>u8</code>? Are there any types itself which can violate this required property on <code>NunNull</code> in Rust?</p>",
        "id": 246870494,
        "sender_full_name": "Leon Schuermann",
        "timestamp": 1626971142
    },
    {
        "content": "<p>Variance only comes into play when lifetimes are involved, so you don't have to worry about it if you're just dealing with a <code>u8</code></p>",
        "id": 246870951,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971381
    },
    {
        "content": "<p>constructing a <code>NonNull&lt;T&gt;</code> will never cause any problems by itself (assuming that you don't pass a null value to <code>new_unchecked</code>, of course)</p>",
        "id": 246871299,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971524
    },
    {
        "content": "<p>the problem would occur when your (unsafe) code tries to dereference the pointer</p>",
        "id": 246871332,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971540
    },
    {
        "content": "<p>Oh, I think I get it now. So while we don't have proper subtyping in terms of proper types, we do have subtyping for generic lifetime arguments, for instance <code>Foo&lt;'static&gt;</code> is going to be a subtype of <code>Foo&lt;'a&gt;</code>?</p>",
        "id": 246871349,
        "sender_full_name": "Leon Schuermann",
        "timestamp": 1626971547
    },
    {
        "content": "<p>That's right</p>",
        "id": 246871364,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971556
    },
    {
        "content": "<p>Imagine that wrote some kind of 'boxed cell' that was defined as <code>BoxedCell&lt;T&gt;(NonNull&lt;T&gt;)</code></p>",
        "id": 246871454,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971604
    },
    {
        "content": "<p>which exposed the same API as <code>Cell</code>, but used a heap allocation for whatever reason</p>",
        "id": 246871485,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971620
    },
    {
        "content": "<p>in that case, the covariance would end up causing an issue</p>",
        "id": 246871513,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971638
    },
    {
        "content": "<p>note that <code>&amp;'a mut T</code> is still covariant in <code>'a</code>, just not for lifetimes in <code>T</code> itself</p>",
        "id": 246871573,
        "sender_full_name": "cuviper",
        "timestamp": 1626971650
    },
    {
        "content": "<p>because you could write a function like <code>fn copy&lt;'a&gt;(dst: &amp;BoxedCell&lt;&amp;'a bool&gt;, src: &amp;BoxedCell&lt;&amp;'a bool&gt;) { dst.set(src.get()) }</code></p>",
        "id": 246871695,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971712
    },
    {
        "content": "<p>btw, the reference's section on variance is newer than the 'nomicon -- we should redirect that<br>\n<a href=\"https://doc.rust-lang.org/reference/subtyping.html\">https://doc.rust-lang.org/reference/subtyping.html</a></p>",
        "id": 246871711,
        "sender_full_name": "cuviper",
        "timestamp": 1626971723
    },
    {
        "content": "<p>hmm, it's shorter though</p>",
        "id": 246871838,
        "sender_full_name": "cuviper",
        "timestamp": 1626971781
    },
    {
        "content": "<p>and then call it like <code>copy(&amp;static_bool_ptr, &amp;non_static_bool_ptr)</code></p>",
        "id": 246871907,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971808
    },
    {
        "content": "<p>That makes a ton of sense. Thanks for the hints!</p>\n<p>My reason for asking was that I didn't find a way to convert a proper rust reference (or a slice reference, for that matter) into a <code>NonNull</code> without <code>new_unchecked</code>. I was assuming that had something to do with Variance but it seems obvious that's not the case.</p>",
        "id": 246871951,
        "sender_full_name": "Leon Schuermann",
        "timestamp": 1626971827
    },
    {
        "content": "<p>You should be able to cast the reference to a raw pointer with <code>as</code></p>",
        "id": 246872003,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971850
    },
    {
        "content": "<p>and then call <code>NonNull::new</code></p>",
        "id": 246872012,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971855
    },
    {
        "content": "<p>or, you can use one of the <code>From</code> impls</p>",
        "id": 246872058,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626971870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I feel very embarrassed now TBH. I didn't look at the From trait impls at all! That of course works.</p>",
        "id": 246872217,
        "sender_full_name": "Leon Schuermann",
        "timestamp": 1626971931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409192\">Leon Schuermann</span> has marked this topic as resolved.</p>",
        "id": 246872250,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626971949
    },
    {
        "content": "<p>Thank you so much for your help!</p>",
        "id": 246872310,
        "sender_full_name": "Leon Schuermann",
        "timestamp": 1626971976
    },
    {
        "content": "<p>TBH I feel like a lot of <code>From</code> implementations are not documented well and are left alone in some dark corner.</p>",
        "id": 246885497,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1626977713
    },
    {
        "content": "<p>Well, <code>From</code> is a bit odd in that if the <code>From</code> implementation needs documentation to be understood, that's also an argument that maybe it shouldn't have been a <code>From</code> implementation in the first place <em>‌cough‌</em> <a href=\"https://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html#impl-From%3CVec%3CT%2C%20Global%3E%3E\">https://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html#impl-From%3CVec%3CT%2C%20Global%3E%3E</a> <em>‌cough‌</em></p>",
        "id": 247101036,
        "sender_full_name": "scottmcm",
        "timestamp": 1627174264
    }
]