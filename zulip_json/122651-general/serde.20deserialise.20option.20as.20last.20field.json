[
    {
        "content": "<p>Hi there. I'm wanting to have serde deserialise the last field of a struct only if there are bytes available to it e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Deserialize, PartialEq, Serialize)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CommandRequest</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">last_event_offset</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">command</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Thus when serialising, if <code>command</code> is <code>None</code> then I'd like to skip serialisation. I can do this quite easily using a field attribute and serialising function.</p>\n<p>When deserialising, if there are no bytes available to be deserialised then I'd like to assume <code>None</code>. If I provide a field attribute with a deserialiser function, then <code>C</code> appears to be constructed by default (?). For example, if <code>C</code> is an enum then I'm getting the first variant of it.</p>\n<p>Thanks for any help.</p>",
        "id": 264961488,
        "sender_full_name": "Christopher Hunt",
        "timestamp": 1639539576
    },
    {
        "content": "<p>Agh - ignore this. The buffer I provided to my deserialisation was greater than what it should have been, thus I wasn't able to trap the error when attempting to consume. Here's what my struct now looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Deserialize, PartialEq, Serialize)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CommandRequest</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">DeserializeOwned</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">last_event_offset</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[serde(</span>\n<span class=\"cp\">        deserialize_with = </span><span class=\"s\">\"deserialise_last_field\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">        serialize_with = </span><span class=\"s\">\"serialise_last_field\"</span><span class=\"cp\"></span>\n<span class=\"cp\">    )]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">command</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...and the serde functions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">deserialise_last_field</span><span class=\"o\">&lt;'</span><span class=\"na\">de</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">d</span>: <span class=\"nc\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">D</span>: <span class=\"nc\">Deserializer</span><span class=\"o\">&lt;'</span><span class=\"na\">de</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Deserialize</span><span class=\"o\">&lt;'</span><span class=\"na\">de</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">).</span><span class=\"n\">map_or_else</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">serialise_last_field</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">o</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"nc\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">S</span>::<span class=\"nb\">Ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">S</span>: <span class=\"nc\">Serializer</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Serialize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">serialize_unit</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>All good. :-)</p>",
        "id": 264965701,
        "sender_full_name": "Christopher Hunt",
        "timestamp": 1639544050
    }
]