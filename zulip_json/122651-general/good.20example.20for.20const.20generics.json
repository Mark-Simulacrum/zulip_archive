[
    {
        "content": "<p>For a training, I'd like to show off some in-progress Rust features, like const generics. My previous example was </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">make_array</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>That was fine when const generics were super broken and ICEd, but now it fails because of the weirdness around <code>Default</code> and <code>[T; 0]</code>. What's another short (ideally 5 line or less) example of why such a thing is useful?</p>",
        "id": 203612256,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594499488
    },
    {
        "content": "<p>Maybe the trait impls for arrays in libcore?</p>",
        "id": 203612309,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594499541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> is there even a const-generic <code>Default</code> impl for arrays? I saw a PR earlier today which seemed to add one for the first time</p>",
        "id": 203625886,
        "sender_full_name": "eddyb",
        "timestamp": 1594525413
    },
    {
        "content": "<p>this <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3ec519f42d40fff3e8c0890d6b497ff2\">works</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">filled</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mh\">0xff</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203625933,
        "sender_full_name": "eddyb",
        "timestamp": 1594525497
    },
    {
        "content": "<p>and so does this (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=675a1ea357f6eeb34f172169c0d7b4a2\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=675a1ea357f6eeb34f172169c0d7b4a2</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">collect_to_array</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">it</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">by_ref</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">is_none</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">array</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collect_to_array</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203626078,
        "sender_full_name": "eddyb",
        "timestamp": 1594525771
    },
    {
        "content": "<blockquote>\n<p>is there even a const-generic <code>Default</code> impl for arrays?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> no, because of the weirdness I mentioned. Right now in stable Rust, arrays implement <code>Default</code> for <code>[T; 0]</code> <strong>and</strong> <code>[T; 1, 2, 3... 32] where T: Default</code>. This makes using const genetics for them not really possible without some kind of specialization</p>",
        "id": 203640911,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594555396
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/pull/74254\">https://github.com/rust-lang/rust/pull/74254</a>, which tries to fix this</p>",
        "id": 203640958,
        "sender_full_name": "lcnr",
        "timestamp": 1594555444
    },
    {
        "content": "<p>There is still an interesting issue with trait selection of which I am actually not completely sure how easy this is fixable</p>",
        "id": 203640963,
        "sender_full_name": "lcnr",
        "timestamp": 1594555480
    },
    {
        "content": "<p>So that PR might not end up going anywhere</p>",
        "id": 203640966,
        "sender_full_name": "lcnr",
        "timestamp": 1594555499
    },
    {
        "content": "<p>But it's still a fairly clean approach imo</p>",
        "id": 203640972,
        "sender_full_name": "lcnr",
        "timestamp": 1594555509
    },
    {
        "content": "<p>Auto traits, eh.</p>",
        "id": 203641264,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594556045
    },
    {
        "content": "<p>yeah :/ We probably shouldn't have added <code>impl&lt;T&gt; Default for [T; 0]</code> in the past, as we now require partially overlapping impls which we don't really support rn</p>",
        "id": 203641391,
        "sender_full_name": "lcnr",
        "timestamp": 1594556309
    },
    {
        "content": "<p>Yeah, but I bet whoever added that implementation felt really smart about it (and they were right!)</p>",
        "id": 203641398,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594556374
    },
    {
        "content": "<p>It really was <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so I can't even blame anyone here</p>",
        "id": 203641447,
        "sender_full_name": "lcnr",
        "timestamp": 1594556437
    },
    {
        "content": "<p>Does min specialization interact well with const genetics?</p>",
        "id": 203641463,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594556511
    },
    {
        "content": "<p>It should be fine</p>",
        "id": 203641464,
        "sender_full_name": "lcnr",
        "timestamp": 1594556521
    },
    {
        "content": "<p>but min_specialization doesn't help here</p>",
        "id": 203641504,
        "sender_full_name": "lcnr",
        "timestamp": 1594556531
    },
    {
        "content": "<p>Oh?</p>",
        "id": 203641506,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594556540
    },
    {
        "content": "<p>afaik we can only specialize subsets</p>",
        "id": 203641507,
        "sender_full_name": "lcnr",
        "timestamp": 1594556549
    },
    {
        "content": "<p>and we have overlapping sets</p>",
        "id": 203641514,
        "sender_full_name": "lcnr",
        "timestamp": 1594556567
    },
    {
        "content": "<p>I guess you can’t specialize to have less of a trait restriction</p>",
        "id": 203641520,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594556593
    },
    {
        "content": "<p>yeah</p>",
        "id": 203641522,
        "sender_full_name": "lcnr",
        "timestamp": 1594556600
    },
    {
        "content": "<p>there's the \"obvious\" solution of changing <code>Default</code> to a lang item and manually implementing it inside of the compiler</p>",
        "id": 203641572,
        "sender_full_name": "lcnr",
        "timestamp": 1594556692
    },
    {
        "content": "<p>but nooooo</p>",
        "id": 203641579,
        "sender_full_name": "lcnr",
        "timestamp": 1594556723
    },
    {
        "content": "<p>Well we did that with <code>Clone</code> due to reasons</p>",
        "id": 203641592,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594556761
    },
    {
        "content": "<p>We did it with <code>Clone</code> because we had already done it with <code>Copy</code> and it was causing ICEs.</p>",
        "id": 203641653,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594556829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/122651-general/topic/good.20example.20for.20const.20generics/near/203641653\">said</a>:</p>\n<blockquote>\n<p>We did it with <code>Clone</code> because we had already done it with <code>Copy</code> and it was causing ICEs.</p>\n</blockquote>\n<p>Because we ended up with <code>T: Copy</code> but not <code>T: Clone</code>, which breaks the requirement of <code>trait Copy: Clone</code>?</p>",
        "id": 203641710,
        "sender_full_name": "lcnr",
        "timestamp": 1594556963
    },
    {
        "content": "<p>yeah</p>",
        "id": 203641715,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594556983
    },
    {
        "content": "<p>oh god, I think I've peaked:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// A trait implemented by all arrays which are either empty or contain a type implementing `Default`.</span>\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">&quot;array_default_internals&quot;</span><span class=\"cp\">, reason = </span><span class=\"s\">&quot;implementation detail&quot;</span><span class=\"cp\">, issue = </span><span class=\"s\">&quot;none&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">&quot;array_default_internals&quot;</span><span class=\"cp\">, reason = </span><span class=\"s\">&quot;implementation detail&quot;</span><span class=\"cp\">, issue = </span><span class=\"s\">&quot;none&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">&quot;array_default_internals&quot;</span><span class=\"cp\">, reason = </span><span class=\"s\">&quot;implementation detail&quot;</span><span class=\"cp\">, issue = </span><span class=\"s\">&quot;none&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayDefault</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default_hack</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">default_hack</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unreachable</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">default_hack</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[stable(since = </span><span class=\"s\">&quot;1.4.0&quot;</span><span class=\"cp\">, feature = </span><span class=\"s\">&quot;array_default&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span>: <span class=\"nc\">ArrayDefault</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203642562,
        "sender_full_name": "lcnr",
        "timestamp": 1594558431
    },
    {
        "content": "<p>I was thinking about something where theres a \"broken\" implementation that's specialized with a working implementation, but couldn't figure out how to prevent that from leaking out to <code>[NotDefault; 42]</code> and failing at runtime.</p>",
        "id": 203644111,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594560794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> not completely sure what you mean here. Do you fear that we might somehow end up with calling the <code>DefaultHack</code> default impl?</p>",
        "id": 203644958,
        "sender_full_name": "lcnr",
        "timestamp": 1594562293
    },
    {
        "content": "<p>We could fix that by using the following <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> (which causes a linker error in case we get this wrong)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DefaultHack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">default_hack</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">array_default_specialization_unexpected_default_hack_leak</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">array_default_specialization_unexpected_default_hack_leak</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203644964,
        "sender_full_name": "lcnr",
        "timestamp": 1594562311
    },
    {
        "content": "<p>I am really confident in my approach, as it shouldn't have any of the subtle problems with trait selection</p>",
        "id": 203644979,
        "sender_full_name": "lcnr",
        "timestamp": 1594562374
    },
    {
        "content": "<p>My basic unimplemented thoughts were much simpler than your code. Along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// specialize on const generic</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Default</span> <span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// specialize on trait</span>\n</code></pre></div>\n\n\n<p>But this shape wouldn't prevent calling it for something that shouldn't exist.</p>",
        "id": 203645279,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594562861
    },
    {
        "content": "<p>That \" // specialize on const generic\" is also what I meant by how does specialization interact with const generics.</p>",
        "id": 203645344,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594562933
    },
    {
        "content": "<p>Aaah, so that wasn't a concern with my current impl but much rather that you had a similar idea to what I ended up with</p>",
        "id": 203645347,
        "sender_full_name": "lcnr",
        "timestamp": 1594562937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/good.20example.20for.20const.20generics/near/203645344\">said</a>:</p>\n<blockquote>\n<p>That \" // specialize on const generic\" is also what I meant by how does specialization interact with const generics.</p>\n</blockquote>\n<p>I am not actually sure how well this already works <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 203645361,
        "sender_full_name": "lcnr",
        "timestamp": 1594562982
    },
    {
        "content": "<p>might be interesting to try, even if I am kind of afraid of the outcome</p>",
        "id": 203645408,
        "sender_full_name": "lcnr",
        "timestamp": 1594563023
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, min_specialization)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">thing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;default&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">thing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;threethreethree&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>works as intended!</p>",
        "id": 203645585,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594563363
    },
    {
        "content": "<p>is that intended to work or is it working by accident?</p>",
        "id": 203645724,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594563711
    },
    {
        "content": "<p>It is intended to work in the future imo, but we haven't spend a lot of effort on getting this to work, so I kind of expected weird errors /ICE here</p>",
        "id": 203645783,
        "sender_full_name": "lcnr",
        "timestamp": 1594563786
    },
    {
        "content": "<p>An other thing entirely would be to show const-generics for indexing a slice as an array:<br>\nThe most amazing thing about this is that generic argument deduction works!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RangeTo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Index</span><span class=\"o\">&lt;</span><span class=\"n\">RangeTo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">RangeTo</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">with_beginning</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">[</span><span class=\"n\">RangeTo</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203648253,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1594568000
    },
    {
        "content": "<p>my example had deduction as well :P</p>",
        "id": 203654511,
        "sender_full_name": "eddyb",
        "timestamp": 1594577674
    },
    {
        "content": "<p>it used to not work but that was a bug in how pattern checking was done, not fundamental</p>",
        "id": 203654529,
        "sender_full_name": "eddyb",
        "timestamp": 1594577713
    },
    {
        "content": "<p>const generics inference works just as well as type inference, because it's implemented the same  :P</p>",
        "id": 203654547,
        "sender_full_name": "eddyb",
        "timestamp": 1594577751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> that <code>unsafe</code> is unsound if <code>slice.len() &lt; N</code> btw</p>",
        "id": 203656207,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594580483
    },
    {
        "content": "<p>oh never mind it will panic instead</p>",
        "id": 203656311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594580619
    },
    {
        "content": "<p>carry on</p>",
        "id": 203656313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594580621
    }
]