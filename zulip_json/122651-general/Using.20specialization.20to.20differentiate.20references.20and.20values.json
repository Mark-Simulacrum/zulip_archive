[
    {
        "content": "<p>Hi, I've got a question regarding specialization. I have <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=094a65ade5170a4854f78b539e6f9038\">this code</a> that is intended to print </p>\n<div class=\"codehilite\"><pre><span></span><code>value\nref\n</code></pre></div>\n<p>but it fails to compile. How would I do this, and if it requires the unsound specialization feature, how would it be done in theory?</p>",
        "id": 243571195,
        "sender_full_name": "StackDoubleFlow",
        "timestamp": 1624391944
    },
    {
        "content": "<p>Well, the error message is odd. </p>\n<blockquote>\n<p>= note: downstream crates may implement trait <code>t::Type</code> for type <code>&amp;mut _</code></p>\n</blockquote>\n<p>That can't happen for a private trait, I think. Unless there's some issue with private traits leaking somewhere.</p>",
        "id": 243572376,
        "sender_full_name": "The 8472",
        "timestamp": 1624392556
    },
    {
        "content": "<p>Right, this is still open: <a href=\"https://github.com/rust-lang/rust/issues/48869\">https://github.com/rust-lang/rust/issues/48869</a><br>\nAlthough, I do want Type to be public if it can be</p>",
        "id": 243572660,
        "sender_full_name": "StackDoubleFlow",
        "timestamp": 1624392712
    },
    {
        "content": "<p>Well, I tried with min_specialization and adding a marker trait, that would have worked if it weren't for the associated type.</p>\n<p>With the associated type I only got it to work with full specialization which is problematic and most likely not what you want.<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=375b1e2881bf5aad2add887e469793ae\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=375b1e2881bf5aad2add887e469793ae</a></p>",
        "id": 243573760,
        "sender_full_name": "The 8472",
        "timestamp": 1624393315
    },
    {
        "content": "<p>Maybe if you separate your specialization from the trait's basic definition with associated type you could make it work</p>",
        "id": 243574037,
        "sender_full_name": "The 8472",
        "timestamp": 1624393471
    },
    {
        "content": "<p>simplified case without associated type that works with min specialization: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a8e0d37ed7169b0face644dc61ebaec\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2a8e0d37ed7169b0face644dc61ebaec</a></p>",
        "id": 243576015,
        "sender_full_name": "The 8472",
        "timestamp": 1624394445
    },
    {
        "content": "<p>the 2nd <code>#[rustc_specialization_trait]</code> isn't needed.</p>",
        "id": 243576152,
        "sender_full_name": "The 8472",
        "timestamp": 1624394520
    },
    {
        "content": "<p>Thanks for your help! This is valuable information.</p>",
        "id": 243609884,
        "sender_full_name": "StackDoubleFlow",
        "timestamp": 1624428046
    },
    {
        "content": "<p>Would it be possible to have it fail to compile if you tried to use a <code>&amp;mut</code>?</p>",
        "id": 243721249,
        "sender_full_name": "StackDoubleFlow",
        "timestamp": 1624487518
    },
    {
        "content": "<p>Depends on what your goal is, would handing out &amp;T do the job?</p>",
        "id": 243965532,
        "sender_full_name": "The 8472",
        "timestamp": 1624652177
    }
]