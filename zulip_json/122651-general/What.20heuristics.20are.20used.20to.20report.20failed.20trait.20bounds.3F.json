[
    {
        "content": "<p>In this example, the compiler reports that <code>Vec&lt;&amp;&amp;str&gt;</code> doesn't implement <code>Iterator</code> (needed by <code>Itertools::join</code>). That's <em>true</em>, but in this case the user wanted to call <code>slice::join</code> (where the bounds are <strong>also</strong> not met). How/why does the compiler decide to show one set of failed bounds but not the other?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">itertools</span>::<span class=\"n\">Itertools</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 0.10.0</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">combos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"c\"</span><span class=\"p\">].</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:#?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">combos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0599]: the method `join` exists for struct `Vec&lt;&amp;&amp;str&gt;`, but its trait bounds were not satisfied\n   --&gt; src/main.rs:5:33\n    |\n5   |       println!(&quot;{:#?}&quot;, combos[0].join(&quot;&quot;));\n    |                                   ^^^^ method cannot be called on `Vec&lt;&amp;&amp;str&gt;` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec&lt;&amp;&amp;str&gt;: Iterator`\n            which is required by `Vec&lt;&amp;&amp;str&gt;: Itertools`\n            `&lt;[&amp;&amp;str] as Join&lt;_&gt;&gt;::Output = _`\n            `[&amp;&amp;str]: Iterator`\n            which is required by `[&amp;&amp;str]: Itertools`\n</code></pre></div>",
        "id": 236548330,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619631524
    },
    {
        "content": "<p>sorry, wrong thread</p>",
        "id": 236549296,
        "sender_full_name": "The 8472",
        "timestamp": 1619631923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I'd say it favors methods for the very type in question, even behind traits (do they have to be in scope?), and maybe even <code>&amp;self</code> and <code>&amp;mut self</code> methods. But in order to think of <code>&lt;[_]&gt;::join</code> it would need to go through a <code>Deref</code>, which I don't think can happen when wanting to suggest methods.</p>",
        "id": 236651314,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619692419
    },
    {
        "content": "<p>It seems like it already deref'd though in the note about which trait bounds were not satisfied.</p>\n<div class=\"codehilite\"><pre><span></span><code>`&lt;[&amp;&amp;str] as Join&lt;_&gt;&gt;::Output = _`\n`[&amp;&amp;str]: Iterator`\n</code></pre></div>",
        "id": 236777331,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619750315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> oh you're right, I somehow missed that line; so it did happen to mention <code>[_] as Join</code>, although not very \"loudly\". Also, <code>.join()</code> used to be a trait-enabled method and is now an inherent method that is trait-guarded.<br>\nIf anything, the <code>&lt;[&amp;&amp;str] as Join&lt;_&gt;&gt;::Output = _</code> line ought to be spelled as <code>[&amp;&amp;str] : Join&lt;&amp;str&gt;</code>, and from there complain that <code>&amp;&amp;str : Borrow&lt;str&gt;</code> is not met.</p>\n<p>In other words, the following error message is more like what I would have expected:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    = note: the following trait bounds were not satisfied:\n            `Vec&lt;&amp;&amp;str&gt;: Iterator`\n            which is required by `Vec&lt;&amp;&amp;str&gt;: Itertools`\n            `&amp;&amp;str : Borrow&lt;str&gt;`\n            which is required by `[&amp;&amp;str] : Join&lt;&amp;str&gt;`\n            `[&amp;&amp;str]: Iterator`\n            which is required by `[&amp;&amp;str]: Itertools`\n</code></pre></div>\n<p>So it does not seem that much to be about order of resolution (no indirection (inherent then through trait), followed by through deref indirection (inherent then through trait)), but rather, about the readbility of the unmet bounds for <code>Join</code> to be met, I'd say.</p>",
        "id": 236825291,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619785016
    }
]