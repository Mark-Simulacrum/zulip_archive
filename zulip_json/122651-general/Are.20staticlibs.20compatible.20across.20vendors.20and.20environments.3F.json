[
    {
        "content": "<p>Hey, if you distribute a <code>unknown-unknown</code> or a <code>unknown-none</code> staticlib, is it compatible with more specific environments and vendors? For example if I distribute a <code>aarch64-unknown-none</code> staticlib, could you later compile that single staticlib for both ARM Linux and ARM Windows? (provided using a linker that can understand ELF on both hosts)</p>",
        "id": 240840936,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622471896
    },
    {
        "content": "<p>There are two main variants for staticlibs. BSD ar and GNU ar. Both are incompatible with each other. Linux uses GNU ar. I am not sure what variant Windows uses.</p>",
        "id": 240841447,
        "sender_full_name": "bjorn3",
        "timestamp": 1622472207
    },
    {
        "content": "<p>Windows uses a COFF archive.</p>",
        "id": 240844931,
        "sender_full_name": "nagisa",
        "timestamp": 1622474144
    },
    {
        "content": "<p>The object formats aren't compatible between Windows and Linux either.</p>",
        "id": 240845125,
        "sender_full_name": "nagisa",
        "timestamp": 1622474234
    },
    {
        "content": "<p>If you had a specific linker that worked on all platforms and supported some common format for archives and objects, then there wouldn't be any issues, though, as the machine code within the objects is conceptually independent of the OS.</p>",
        "id": 240845248,
        "sender_full_name": "nagisa",
        "timestamp": 1622474305
    },
    {
        "content": "<p>The ABI might differ though, right? Maybe not for AArch64</p>",
        "id": 240846185,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622474886
    },
    {
        "content": "<p><a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#archive-member-headers\">Windows ar</a> is gnu compatible (there's an extra \"/\" member but it's technically redundant). However the object files it contains are indeed <a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#coff-file-header-object-and-image\">COFF</a>. Also Windows libraries can contain things which aren't objects files, or object files that contain Windows specific metadata, etc.</p>",
        "id": 240847534,
        "sender_full_name": "Chris Denton",
        "timestamp": 1622475721
    },
    {
        "content": "<p>Unix static libraries can also contain non-object files for as long as they come after all object files. For example rlibs contain <code>lib.rmeta</code>.</p>",
        "id": 240847895,
        "sender_full_name": "bjorn3",
        "timestamp": 1622475938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> So that does that imply that *NIX -&gt; *NIX is trivially possible? E.g. <code>aarch64-unknown-none</code> with <code>aarch64-unknown-linux-gnu</code>?</p>",
        "id": 240867446,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622491700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> In theory it should be. Various non-Rust tools count on that (typically in the reverse direction: they build for somearch-unknown-linux-gnu, carefully ensuring no references to libraries or unavailable builtin symbols, and use the resulting object files for embedded).</p>",
        "id": 240867695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622491926
    },
    {
        "content": "<p>In principle there's no fundamental reason that <code>somearch-unknown-unknown</code> object files couldn't work on any <code>somearch-*-*</code> target.</p>",
        "id": 240867804,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492053
    },
    {
        "content": "<p>I can potentially imagine scenarios in which code generation might vary slightly, in that <code>somearch-unknown-unknown</code> might avoid references to builtin symbols that <code>somearch-unknown-linux-gnu</code> wouldn't.</p>",
        "id": 240867858,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492117
    },
    {
        "content": "<p>But it shouldn't be <em>broken</em>, I think.</p>",
        "id": 240867862,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492127
    },
    {
        "content": "<p>Right, Iâ€™ve just messed with enough with the target code in rustc to know there arenâ€™t really invariants to enforce that compatibility, so thereâ€™s nothing stopping an arbitrary environment being incompatible with another. Not that Iâ€™m saying there should be something stopping that, but it is why I ask if other people have already tried this.</p>",
        "id": 240868226,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622492413
    },
    {
        "content": "<p>Many people in C have done things <em>like</em> it. I've never seen it done in Rust.</p>",
        "id": 240868309,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492508
    },
    {
        "content": "<p>Also, this won't necessarily work for <em>arbitrary</em> architectures, only those where the ABI for the target is the same on all OSes.</p>",
        "id": 240868406,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492594
    },
    {
        "content": "<p>Some architectures have different ABIs on different OSes.</p>",
        "id": 240868416,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492611
    },
    {
        "content": "<p>As an example, even if the object file formats were compatible, x86_64 has a different ABI on Windows and on all UNIX variants.</p>",
        "id": 240868514,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492713
    },
    {
        "content": "<p>Hmm yeah, I mentioned Linux to Windows as an extreme, but Iâ€™m mostly interested in intra-family cross-compilation (BSD -&gt; BSD, Windows -&gt; Windows)</p>\n<p>What Iâ€™m essentially trying to achieve is distributing a c library with a wide compatibility without having to create artifacts for every platform, since itâ€™s code should be mostly OS and platform agnostic.</p>",
        "id": 240868917,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622493082
    },
    {
        "content": "<p>Technically the <code>e_ident[EI_OSABI]</code> field in the elf header specifies the target OS, but I believe it is often just ignored.</p>",
        "id": 240868923,
        "sender_full_name": "bjorn3",
        "timestamp": 1622493093
    },
    {
        "content": "<p>I am curious what the library will do by the way.</p>",
        "id": 240869010,
        "sender_full_name": "bjorn3",
        "timestamp": 1622493168
    },
    {
        "content": "<p>Heh, Iâ€™m afraid I want to keep that a surprise for now. ðŸ˜„</p>",
        "id": 240870227,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1622494345
    },
    {
        "content": "<p>Ok, no problem. I just got even more curious now :)</p>",
        "id": 240870515,
        "sender_full_name": "bjorn3",
        "timestamp": 1622494648
    }
]