[
    {
        "content": "<p>From a very lofty perspective...  I wonder if there is a way to improve compile times with multi-step caching.</p>\n<p>For myself, I don't care if it takes 5 hours for the rustc compiler to compile the first time...  What's far more important to me is the time it takes to recompile after making minor changes, for example the initial value of a single literal, or the internals of a single function.</p>\n<p>What would happen if we cache the required data from each stage of the compiler, along with the information we would need to find and replace any changes in the output. Each stage could identify and recompile just the bits that changed.</p>\n<p>That might not make sense, so let me try an example...   </p>\n<p>Imagine we have a big application that we are recompiling after just changing the implementation of a single function without changing the function's definition.</p>\n<p>What would it take to recompile and insert just that function's implementation at each stage? </p>\n<p>The next stage would then be able to do a comparison of what's changed, and again just recompile and replace that bits that changed.</p>\n<p>If at any time, the changes become overwhelming, invalidate/delete the rest of the cache, and proceed as normal.  </p>\n<p>Even if we can only get this to work for 2 or 3 stages, it would seem that this could vastly improve the average compile time. </p>\n<p>It seems like something that could be grown slowly, for example, first allowing only function internals to change in just the first couple of stages. Eventually, it may be possible to extend the technique to handle more.</p>\n<p>Disk Space:<br>\nI've seen that some people are reluctant to see the compiler waste valuable disk space. I think it's a very worthwhile exchange if it can save me time, especially if the cache is stored in a specially marked, easy to recognize location (folder named \"cache\"?) where the user would easily be able to delete the folder and save space when they are finished.</p>",
        "id": 203599672,
        "sender_full_name": "drcarrybit",
        "timestamp": 1594479063
    },
    {
        "content": "<p>Sounds like incremental compilation? Doesn't really work across stages but you almost never need more than one anyways. Just set <code>incremental = true</code> in config.toml.</p>",
        "id": 203599845,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594479346
    },
    {
        "content": "<p>I don't think they are referring to bootstrap stages, but instead \"compiler phases\".  <span class=\"user-mention\" data-user-id=\"320218\">@drcarrybit</span> rustc has a caching system that works at a fine granularity.  You can read more about it here <a href=\"https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation.html\">https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation.html</a> (and the rest of that chapter).   There is ongoing work to continue to improve it.</p>",
        "id": 203601051,
        "sender_full_name": "Eric Huss",
        "timestamp": 1594481159
    }
]