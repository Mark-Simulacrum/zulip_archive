[
    {
        "content": "<p>I have a struct with an <code>UnsafeCell&lt;MaybeUninit&lt;T&gt;&gt;</code> and some other fields and want <code>drop</code> to be called on T.  I'm not entirely sure what happens when the default drop implementation is called, but I believe that <code>UnsafeCell</code>s <code>drop</code> is called, which calls <code>drop</code> of <code>MaybeUninit</code>, which doesn't call <code>T</code>s drop method. I want to ensure that <code>T</code>s drop method is called. Since <code>Drop::drop</code> takes a mutable reference to self I cannot move out of the field that contains the <code>UnsafeCell</code>. Can anybody tell me how one can drop <code>T</code> and the other fields of the struct manually?</p>",
        "id": 231705825,
        "sender_full_name": "BN",
        "timestamp": 1616618887
    },
    {
        "content": "<p>get a pointer and call <code>ptr::drop_in_place</code></p>",
        "id": 231706104,
        "sender_full_name": "cuviper",
        "timestamp": 1616619019
    },
    {
        "content": "<p>Thanks</p>",
        "id": 231707710,
        "sender_full_name": "BN",
        "timestamp": 1616619701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> I've added <a href=\"https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_drop\"><code>.assume_init_drop()</code></a> for this a while ago. But it's still unstable.</p>",
        "id": 232113237,
        "sender_full_name": "Mara",
        "timestamp": 1616874228
    }
]