[
    {
        "content": "<p>I have set things up in <code>config.toml</code> to only build the X86 backend (<code>targets = \"X86\"</code>), but I just noticed this in the LLVM build log:</p>\n<div class=\"codehilite\"><pre><span></span><code>-- Targeting X86\n-- Targeting AVR\nTraceback (most recent call last):\n  File &quot;&lt;string&gt;&quot;, line 22, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre></div>\n\n\n<p>Is that expected? Shouldn't it disable AVR?</p>",
        "id": 209223058,
        "sender_full_name": "RalfJ",
        "timestamp": 1599394861
    },
    {
        "content": "<p>someone else ran into this recently: <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Failed.20to.20compile.20.60rustc_driver.60.3A.20linking.20with.20.60cc.60.20failed\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Failed.20to.20compile.20.60rustc_driver.60.3A.20linking.20with.20.60cc.60.20failed</a>, so it might be a new bug in x.py</p>",
        "id": 209223140,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599395024
    },
    {
        "content": "<p>I am also surprised that AVR is built with LLVM, mabe related to AVR pull requests.</p>",
        "id": 209223231,
        "sender_full_name": "lzutao",
        "timestamp": 1599395162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> did you edit experimental targets to exclude AVR too?</p>",
        "id": 209223646,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395704
    },
    {
        "content": "<p>it looks like it's in there by default</p>",
        "id": 209223651,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395712
    },
    {
        "content": "<p>this is the first time I hear about \"experimental targets\"</p>",
        "id": 209223654,
        "sender_full_name": "RalfJ",
        "timestamp": 1599395724
    },
    {
        "content": "<p>I think my <code>config.toml</code> was created before that was a thing^^</p>",
        "id": 209223711,
        "sender_full_name": "RalfJ",
        "timestamp": 1599395765
    },
    {
        "content": "<p>but the comment claims they are not built by default:</p>\n<div class=\"codehilite\"><pre><span></span><code># LLVM experimental targets to build support for. These targets are specified in\n# the same format as above, but since these targets are experimental, they are\n# not built by default and the experimental Rust compilation targets that depend\n# on them will not work unless the user opts in to building them.\n#experimental-targets = &quot;AVR&quot;\n</code></pre></div>",
        "id": 209223722,
        "sender_full_name": "RalfJ",
        "timestamp": 1599395814
    },
    {
        "content": "<p>I am not sure I would trust that comment</p>",
        "id": 209223756,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395879
    },
    {
        "content": "<p>well I think the comment is right in that it should be off-by-default^^</p>",
        "id": 209223797,
        "sender_full_name": "RalfJ",
        "timestamp": 1599395898
    },
    {
        "content": "<p>right, probably</p>",
        "id": 209223802,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395904
    },
    {
        "content": "<p>but it looks like the code hardcodes that being omitted as implying AVR</p>",
        "id": 209223805,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395912
    },
    {
        "content": "<p>so try with <code>experimental-targets = \"\"</code></p>",
        "id": 209223807,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395926
    },
    {
        "content": "<p>I wouldnt expect to have to disable two things. but yes, adding an explicit <code>experimental-targets = \"\"</code> helps</p>",
        "id": 209223809,
        "sender_full_name": "RalfJ",
        "timestamp": 1599395927
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> any idea why AVR is on by default contrary to what the comment says?</p>",
        "id": 209223823,
        "sender_full_name": "RalfJ",
        "timestamp": 1599395959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209223805\">said</a>:</p>\n<blockquote>\n<p>but it looks like the code hardcodes that being omitted as implying AVR</p>\n</blockquote>\n<p>maybe that should be changed?</p>",
        "id": 209223827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599395978
    },
    {
        "content": "<p>I think the comment is ambiguous, as it's unclear if it applies to LLVM or Rust.</p>",
        "id": 209223887,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599396061
    },
    {
        "content": "<p>At the very least we probably want a bug filed for whatever config causes that opaque error</p>",
        "id": 209223939,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396139
    },
    {
        "content": "<p>And CI wants to enable it by default (so that releases can target it)</p>",
        "id": 209223953,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599396188
    },
    {
        "content": "<p>We could also lump the experimental targets back together and have some logic in the build to say \"oh, AVR needs to go in <em>this</em> bucket for LLVM args\"</p>",
        "id": 209223965,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599396236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> apologies for the extra build time, doctor <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 209224006,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599396262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209223953\">said</a>:</p>\n<blockquote>\n<p>And CI wants to enable it by default (so that releases can target it)</p>\n</blockquote>\n<p>right, but then maybe it is better to enable it on CI than to enable it for all contributors</p>",
        "id": 209224128,
        "sender_full_name": "RalfJ",
        "timestamp": 1599396466
    },
    {
        "content": "<p>defaults <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  should <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  be <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  defaults <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  for <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  contributors</p>",
        "id": 209224177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599396497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209223887\">said</a>:</p>\n<blockquote>\n<p>I think the comment is ambiguous, as it's unclear if it applies to LLVM or Rust.</p>\n</blockquote>\n<p>ah. that did not occur to me -- it is probably only ambiguous if you know a lot about how rustbuild interacts with LLVM^^</p>",
        "id": 209224187,
        "sender_full_name": "RalfJ",
        "timestamp": 1599396522
    },
    {
        "content": "<p>yeah it seems pretty clear that they <em>are</em> built by default currently</p>",
        "id": 209224195,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396553
    },
    {
        "content": "<p>I think the challenge is that when you constrain targets here we start seeing tests fail because CI enables them unconditionally</p>",
        "id": 209224207,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396582
    },
    {
        "content": "<p>(and when configuring rustbuild, I dont really care what LLVM's default are)</p>",
        "id": 209224208,
        "sender_full_name": "RalfJ",
        "timestamp": 1599396598
    },
    {
        "content": "<p>so it's not an obvious case of defaults being wrong</p>",
        "id": 209224210,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396601
    },
    {
        "content": "<p>CI could use <code>--set</code>, couldn't it?</p>",
        "id": 209224251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599396610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209224177\">said</a>:</p>\n<blockquote>\n<p>defaults <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  should <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  be <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  defaults <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  for <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  contributors</p>\n</blockquote>\n<p>It is. For contributors working on AVR :-)</p>",
        "id": 209224252,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599396610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209224252\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209224177\">said</a>:</p>\n<blockquote>\n<p>defaults <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  should <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  be <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  defaults <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  for <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span>  contributors</p>\n</blockquote>\n<p>It is. For contributors working on AVR :-)</p>\n</blockquote>\n<p>it seems like working on AVR isn't the default though :P</p>",
        "id": 209224256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599396635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> my point is that even for <em>non</em>-AVR contributors, there's presumably tests in tree that will fail if you don't have it enabled</p>",
        "id": 209224258,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209224207\">said</a>:</p>\n<blockquote>\n<p>I think the challenge is that when you constrain targets here we start seeing tests fail because CI enables them unconditionally</p>\n</blockquote>\n<p>what kinds of tests? I am not running the rustc test suite for the AVR target^^</p>",
        "id": 209224259,
        "sender_full_name": "RalfJ",
        "timestamp": 1599396638
    },
    {
        "content": "<p>I have constrained the normal targets and nothing failed</p>",
        "id": 209224270,
        "sender_full_name": "RalfJ",
        "timestamp": 1599396665
    },
    {
        "content": "<p>e.g. src/test/codegen/avr/avr-func-addrspace.rs</p>",
        "id": 209224271,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396667
    },
    {
        "content": "<p>why would the AVR target be different?</p>",
        "id": 209224273,
        "sender_full_name": "RalfJ",
        "timestamp": 1599396672
    },
    {
        "content": "<p>I guess that has needs-llvm-components: avr</p>",
        "id": 209224277,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396674
    },
    {
        "content": "<p>so probably this is not a problem in practice and we can switch the default to off</p>",
        "id": 209224281,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396685
    },
    {
        "content": "<p>IIRC it followed the existing pattern of <code>targets</code> which also populates it to a big set when not present</p>",
        "id": 209224341,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599396741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209224341\">said</a>:</p>\n<blockquote>\n<p>IIRC it followed the existing pattern of <code>targets</code> which also populates it to a big set when not present</p>\n</blockquote>\n<p>right but (a) that doesnt say \"not built by default\" in the docs and (b) I had already emptied <code>targets</code> in my config for this exact reason, which worked fine until AVR came along and circumvented me disabling all non-X86 targets ;)</p>",
        "id": 209225542,
        "sender_full_name": "RalfJ",
        "timestamp": 1599398840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/LLVM.20backends/near/209223939\">said</a>:</p>\n<blockquote>\n<p>At the very least we probably want a bug filed for whatever config causes that opaque error</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/76408\">https://github.com/rust-lang/rust/issues/76408</a></p>",
        "id": 209225605,
        "sender_full_name": "RalfJ",
        "timestamp": 1599398958
    },
    {
        "content": "<p>NB that in the past we had other experimental targets enabled by default</p>",
        "id": 209244046,
        "sender_full_name": "nagisa",
        "timestamp": 1599430679
    },
    {
        "content": "<p>in particular – wasm</p>",
        "id": 209244082,
        "sender_full_name": "nagisa",
        "timestamp": 1599430684
    },
    {
        "content": "<p>RISCV is another.</p>",
        "id": 209244094,
        "sender_full_name": "nagisa",
        "timestamp": 1599430743
    },
    {
        "content": "<p>not sure if either of those have been stabilized in LLVM recently.</p>",
        "id": 209244099,
        "sender_full_name": "nagisa",
        "timestamp": 1599430754
    }
]