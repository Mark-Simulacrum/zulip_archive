[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn decode_message&lt;T: Read&gt;(\n    tree: &amp;mut MessageTree,\n    transaction: Option&lt;&amp;mut InnerTransaction&gt;,\n    buf: &amp;mut T,\n) -&gt; Fallible&lt;()&gt; {\n\n    match transaction {\n        None =&gt; {\n            let mut chs = [0];\n            loop {\n                let size = buf.read(&amp;mut chs)?;\n                if size == 0 {\n                    break;\n                }\n                let ch = chs[0];\n\n                match dbg!(ch) {\n                    b&#39;t&#39; =&gt; decode_transaction(tree, None, buf)?,\n                    b&#39;T&#39; =&gt; return Ok(()),\n                    b&#39;E&#39; =&gt; decode_event(tree, None, buf)?,\n                    b&#39;M&#39; =&gt; decode_metric(tree, None, buf)?,\n                    b&#39;H&#39; =&gt; decode_heartbeat(tree, None, buf)?,\n                    b&#39;L&#39; =&gt; decode_trace(tree, None, buf)?,\n                    _ =&gt; unimplemented!(&quot;unsupported type&quot;),\n                }\n            }\n        },\n        Some(transaction) =&gt; {\n            let mut chs = [0];\n            loop {\n                let size = buf.read(&amp;mut chs)?;\n                if size == 0 {\n                    break;\n                }\n                let ch = chs[0];\n\n                match dbg!(ch) {\n                    b&#39;t&#39; =&gt; decode_transaction(tree, Some(transaction), buf)?,\n                    b&#39;T&#39; =&gt; return Ok(()),\n                    b&#39;E&#39; =&gt; decode_event(tree, Some(transaction), buf)?,\n                    b&#39;M&#39; =&gt; decode_metric(tree, Some(transaction), buf)?,\n                    b&#39;H&#39; =&gt; decode_heartbeat(tree, Some(transaction), buf)?,\n                    b&#39;L&#39; =&gt; decode_trace(tree, Some(transaction), buf)?,\n                    _ =&gt; unimplemented!(&quot;unsupported type&quot;),\n                }\n            }\n        }\n    }\n\n    Ok(())\n}\n</pre></div>",
        "id": 160212824,
        "sender_full_name": "gfreezy",
        "timestamp": 1551975898
    },
    {
        "content": "<p>You could replace the entire <code>match transaction</code> with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">chs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">chs</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">chs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"sc\">b&#39;t&#39;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">decode_transaction</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">transaction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"sc\">b&#39;T&#39;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(()),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"sc\">b&#39;E&#39;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">decode_event</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">transaction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"sc\">b&#39;M&#39;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">decode_metric</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">transaction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"sc\">b&#39;H&#39;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">decode_heartbeat</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">transaction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"sc\">b&#39;L&#39;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">decode_trace</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">transaction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;unsupported type&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and just pass the <code>Option&lt;&amp;mut...&gt;</code> directly into your decode methods</p>",
        "id": 160213965,
        "sender_full_name": "oli",
        "timestamp": 1551976600
    },
    {
        "content": "<p>can they? its in a loop, that will move it (and thus it won't be available in the next loop iteration), right?</p>",
        "id": 160248708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552001627
    },
    {
        "content": "<p>i.e. I think one thing that may be happening is that their original code is reborrowing the <code>&amp;mut</code> underneath the option in the <code>Some</code> case, no?</p>",
        "id": 160248782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552001646
    },
    {
        "content": "<p>(let me double-check this claim)</p>",
        "id": 160248854,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552001754
    },
    {
        "content": "<p>yes, here is a demonstration of what I am saying (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018\">play</a>): </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo_1</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Oops</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">handle_arg</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">handle_arg</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo_2</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Oops</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">handle_arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160249308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552002186
    },
    {
        "content": "<p>in the above, <code>foo_1</code> compiles successfully while <code>foo_2</code> has an error, \"use of moved value <code>arg</code>\"</p>",
        "id": 160249330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552002216
    },
    {
        "content": "<p>This one works, but yuck: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo_3</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">arg</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Oops</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">handle_arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160249520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552002450
    },
    {
        "content": "<p>/me wonders if this pattern occurs enough to motivate a <code>fn reborrow(&amp;mut self)</code> method on <code>Option&lt;&amp;mut T&gt;</code> and the like</p>",
        "id": 160249738,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552002638
    },
    {
        "content": "<p>This works if i changed <code> Option&lt;&amp;mut Oops&gt;</code> to <code> &amp;mut Option&lt;Oops&gt;</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">handle_arg</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Oops</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo_1</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Oops</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">handle_arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160258376,
        "sender_full_name": "gfreezy",
        "timestamp": 1552012861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200128\">@gfreezy</span> yep, that's definitely nice, if it can be used. (note though that there are situations where you would't be able to do that transformation; e.g. if the <code>&amp;mut Oops</code> were coming from somewhere else and you couldn't change the spot where the original <code>Oops</code> lives to hold an <code>Option&lt;Oops&gt;</code>)</p>",
        "id": 160275895,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552038059
    }
]