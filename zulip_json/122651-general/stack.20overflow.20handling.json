[
    {
        "content": "<p>/me wishes that current architectures had a mechanism to specifically define the stack range, so that you <em>can't</em> accidentally reference something outside the bounds of the stack, without using stack guard pages.</p>",
        "id": 237222767,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620073349
    },
    {
        "content": "<p>with something like how Cranelift has special intra-stack-slot load/store instructions?</p>",
        "id": 237222860,
        "sender_full_name": "eddyb",
        "timestamp": 1620073393
    },
    {
        "content": "<p>and it takes an explicit operation to get a \"global address\"</p>",
        "id": 237222877,
        "sender_full_name": "eddyb",
        "timestamp": 1620073404
    },
    {
        "content": "<p>You'd be allowed to access things on the stack via a global address, but not access global things via a stack-relative address.</p>",
        "id": 237223033,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620073462
    },
    {
        "content": "<p>And if you modified the stack pointer to be outside of the defined range (via sub, push, or anything else), you'd immediately get an error, rather than relying on a paging-based fault mechanism.</p>",
        "id": 237223134,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620073521
    },
    {
        "content": "<p>right, so the separate instructions would allow this to be checked</p>",
        "id": 237223137,
        "sender_full_name": "eddyb",
        "timestamp": 1620073522
    },
    {
        "content": "<p>oooh magical register?</p>",
        "id": 237223154,
        "sender_full_name": "eddyb",
        "timestamp": 1620073532
    },
    {
        "content": "<p>not very RISC-y but certainly seems useful</p>",
        "id": 237223178,
        "sender_full_name": "eddyb",
        "timestamp": 1620073542
    },
    {
        "content": "<p>Right, this would only work on platforms that have the equivalent of either <code>ss</code> or <code>sp</code> or both.</p>",
        "id": 237223196,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620073549
    },
    {
        "content": "<p>And if you're on a platform where this is a thing, you don't need to set up guard pages.</p>",
        "id": 237223340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620073601
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"268952\" href=\"/#narrow/stream/268952-edition-2021/topic/stack.20overflow\">#edition 2021 &gt; stack overflow</a> by <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span></p>",
        "id": 237223381,
        "sender_full_name": "Notification Bot",
        "timestamp": 1620073622
    },
    {
        "content": "<p>I have been writing a compiler with stack overflow in mind, with the hopeful goal of eliminating the need for guard pages and stack probes, and one of the first issues I discovered is that it is not possible on linux to ensure that you don't stack overflow before you reach <code>_start</code>; someone can be very rude and put a bunch of crap in environment variables and also give you not much stack to work with, so you can literally stack overflow in a 100-byte hello world ELF</p>",
        "id": 237226540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620074946
    },
    {
        "content": "<p>This is exactly the kind of reason why I'd love to see hardware assistance there.</p>",
        "id": 237245210,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620083722
    },
    {
        "content": "<p>/me wonders how pointer authentication could come into play here.</p>",
        "id": 237248814,
        "sender_full_name": "nagisa",
        "timestamp": 1620086367
    },
    {
        "content": "<p>This seems like a very special case of a mechanism that could be more general (e.g. buffer-overflow safe accesses)</p>",
        "id": 237248892,
        "sender_full_name": "nagisa",
        "timestamp": 1620086407
    },
    {
        "content": "<p>ARMv8-M Mainline has this I believe</p>",
        "id": 237249342,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620086714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> Interesting! What does it look like there?</p>",
        "id": 237256797,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620092741
    },
    {
        "content": "<p>Not sure if it's exactly what you're asking for but it has MSPLIM, which defines a stack pointer limit</p>",
        "id": 237257196,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620093079
    }
]