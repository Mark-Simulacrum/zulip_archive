[
    {
        "content": "<p>For various trait-hacking-style reasons unrelated to this question, I am using std::mem::transmute in my code to \"unwrap\" zero-cost tags.<br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Tag</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">unwrap</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">tag</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Tag</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Because of zero-cost abstractions, I believe the memory layout of Tag&lt;T&gt; will be exactly the same as T, so this transposition should be sound.<br>\nIs my reasoning correct? Is this safe to do?</p>",
        "id": 276777993,
        "sender_full_name": "Kiran Gopinathan",
        "timestamp": 1648372832
    },
    {
        "content": "<p>You should add <code>repr(transparent)</code> to <code>Tag</code>.</p>",
        "id": 276778789,
        "sender_full_name": "The 8472",
        "timestamp": 1648373963
    },
    {
        "content": "<p>Ah, I see, got it, thanks!</p>",
        "id": 276779107,
        "sender_full_name": "Kiran Gopinathan",
        "timestamp": 1648374462
    },
    {
        "content": "<p>This is also what <a href=\"https://docs.rs/ref-cast/latest/ref_cast/\">https://docs.rs/ref-cast/latest/ref_cast/</a> does. If you'd prefer to not write unsafe</p>",
        "id": 276779196,
        "sender_full_name": "mejrs",
        "timestamp": 1648374592
    },
    {
        "content": "<p>Thanks for the pointer, will check it out!</p>",
        "id": 276779441,
        "sender_full_name": "Kiran Gopinathan",
        "timestamp": 1648374958
    },
    {
        "content": "<p>Recycling an old post if you're curious about <em>why</em> Rust works like this: <a href=\"https://users.rust-lang.org/t/repr-transparent-why/67636/6?u=scottmcm\">https://users.rust-lang.org/t/repr-transparent-why/67636/6?u=scottmcm</a></p>",
        "id": 276806454,
        "sender_full_name": "scottmcm",
        "timestamp": 1648413340
    }
]