[
    {
        "content": "<p>I have a <code>&amp;[u8]</code> and I'd like to turn it into a <code>&amp;[u16]</code>. If the original slice is aligned properly I can just cast the original one to a pointer and then use <code>slice::from_raw_parts</code> but if the orignal slice isn't aligned on an addr that is <code>u16</code> friendly, I need to memcopy the data to somewhere what is properly aligned. What's my best option? Using std::alloc::alloc? Or should I just create a <code>Vec&lt;u16&gt;</code> and loop over the original slice in chunks, copying the the data over?</p>",
        "id": 223940321,
        "sender_full_name": "rylev",
        "timestamp": 1611599579
    },
    {
        "content": "<p>I think <code>[T]::align_to</code> would be useful: <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.align_to\">https://doc.rust-lang.org/std/primitive.slice.html#method.align_to</a></p>",
        "id": 223940591,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611599691
    },
    {
        "content": "<p>Maybe something like <code>data.chunks_exact(2).map(|chunk| u16::from_le_bytes(chunk.try_into().unwrap())).collect::&lt;Vec&lt;u16&gt;&gt;()</code>?</p>",
        "id": 223940606,
        "sender_full_name": "bjorn3",
        "timestamp": 1611599696
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.align_to\">https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.align_to</a> will do the transmute in a safe way for you, but doesn't really help with reallocating to get it right</p>",
        "id": 223940613,
        "sender_full_name": "simulacrum",
        "timestamp": 1611599698
    },
    {
        "content": "<p><code>align_to</code> won't give the correct result when it is unaligned.</p>",
        "id": 223940667,
        "sender_full_name": "bjorn3",
        "timestamp": 1611599726
    },
    {
        "content": "<p>The data is correct, it's just not aligned, so <code>align_to</code> isn't what I need</p>",
        "id": 223940710,
        "sender_full_name": "rylev",
        "timestamp": 1611599748
    },
    {
        "content": "<p>well - it might be most efficient to go via align_to</p>",
        "id": 223940738,
        "sender_full_name": "simulacrum",
        "timestamp": 1611599761
    },
    {
        "content": "<p>You could use <code>Cow::Borrowed</code> when <code>align_to</code> works out, and <code>Cow::Owned</code> to copy otherwise</p>",
        "id": 223940743,
        "sender_full_name": "cuviper",
        "timestamp": 1611599762
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>'s is the right answer if I want to only use safe Rust</p>",
        "id": 223940786,
        "sender_full_name": "rylev",
        "timestamp": 1611599767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/memcopy.20unaligned.20data/near/223940738\">said</a>:</p>\n<blockquote>\n<p>well - it might be most efficient to go via align_to</p>\n</blockquote>\n<p>Not sure what you mean</p>",
        "id": 223940847,
        "sender_full_name": "rylev",
        "timestamp": 1611599808
    },
    {
        "content": "<p>ah, yeah, align_to actually will not quite work because if you're not aligned it will give you a bunch of \"wrong\" u16s</p>",
        "id": 223940850,
        "sender_full_name": "simulacrum",
        "timestamp": 1611599809
    },
    {
        "content": "<p>Exactly</p>",
        "id": 223940865,
        "sender_full_name": "rylev",
        "timestamp": 1611599818
    },
    {
        "content": "<p>but if <code>align_to</code> does give you an empty head and tail, the middle is usable</p>",
        "id": 223940909,
        "sender_full_name": "cuviper",
        "timestamp": 1611599839
    },
    {
        "content": "<p>Wouldn't <code>align_to::&lt;u16&gt;</code> on a <code>&amp;[u8]</code> with an extra byte result in an empty head and a single element tail?</p>",
        "id": 223941028,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1611599894
    },
    {
        "content": "<p>It would, but if the start is not at a multiple of two, it would result in a non-empty head, but the first two bytes are expected to form a single <code>u16</code>.</p>",
        "id": 223941112,
        "sender_full_name": "bjorn3",
        "timestamp": 1611599955
    },
    {
        "content": "<p>Yep, <code>align_to</code> puts the extra in the head not the tail: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fab53af840bb330745c0a835a57fe293\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fab53af840bb330745c0a835a57fe293</a></p>",
        "id": 223941598,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1611600212
    },
    {
        "content": "<p>Depends on alignment.  Here's a counterexample where the extra byte is at the end: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9690110475e5bd887c39fd5764a5b0ab\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9690110475e5bd887c39fd5764a5b0ab</a></p>",
        "id": 223942668,
        "sender_full_name": "scottmcm",
        "timestamp": 1611600748
    },
    {
        "content": "<p>Someone asked me to add this to bytemuck just last week: <a href=\"https://docs.rs/bytemuck/1.5.0/bytemuck/allocation/fn.pod_collect_to_vec.html\">https://docs.rs/bytemuck/1.5.0/bytemuck/allocation/fn.pod_collect_to_vec.html</a></p>",
        "id": 223961557,
        "sender_full_name": "Lokathor",
        "timestamp": 1611609454
    }
]