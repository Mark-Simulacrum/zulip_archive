[
    {
        "content": "<p>In this code, <code>u32</code> is <code>Copy</code>, so I was surprised to see that <code>move</code> is required to make it work. How does the compiler capture <code>power</code> â€” by reference or by value? By value is what I would have expected, since <code>pow</code> takes by value, but since <code>move</code> is required it seems like it must be by reference.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">power</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">power</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0373]: closure may outlive the current function, but it borrows `power`, which is owned by the current function\n --&gt; src/lib.rs:3:5\n  |\n3 |     |x| x.pow(power)\n  |     ^^^       ----- `power` is borrowed here\n  |     |\n  |     may outlive borrowed value `power`\n</code></pre></div>",
        "id": 227606234,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614177001
    },
    {
        "content": "<p>A non-move closure takes captures by the \"least restrictive\" mode possible IIRC. Since power is Copy, it can just take a reference and copy that in the closure code, so it does that.</p>",
        "id": 227606452,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614177077
    },
    {
        "content": "<p>So the compiler would apply the <code>Copy</code> \"function call\" at closure execution time, not at closure execution time.</p>",
        "id": 227606595,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614177125
    },
    {
        "content": "<p>And the <code>Copy</code> \"function call\" would be <code>fn copy(&amp;self) -&gt; Self</code>.</p>",
        "id": 227606675,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614177156
    },
    {
        "content": "<p>yeah, it's applied at execution time not construction time</p>",
        "id": 227606735,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614177179
    },
    {
        "content": "<p>I think this was basically the reason that move closures were created - we initially thought that the compiler could just figure out the right capture mode, but this is a case where there are multiple \"correct\" answers unless you start relying on outside constraints on how the closure is used</p>",
        "id": 227606874,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614177222
    },
    {
        "content": "<p>It's interesting to me because a related thing I've often mused about is which is the \"real\" copy in code like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Is the copy here</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Or here</span>\n</code></pre></div>\n<p>In generally hasn't mattered because the <em>point</em> of the copy is that both are identical.</p>",
        "id": 227607119,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614177305
    },
    {
        "content": "<p>Alright, thank you. We ultimately deduced that it <em>had</em> to be copied by reference based on the behavior, but it's hard to see  from inspection of the code because of how <code>Copy</code> is automatically performed by the compiler\u0010.</p>",
        "id": 227607452,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614177428
    },
    {
        "content": "<p>You can check \"where the <code>Copy</code> happens\" by looking at the MIR:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">power</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">power</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// WARNING: This output format is intended for human consumers only</span>\n<span class=\"c1\">// and is subject to change without notice. Knock yourself out.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span>::<span class=\"p\">{</span><span class=\"n\">closure</span><span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"p\">}(</span><span class=\"n\">_1</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4</span>:<span class=\"mi\">14</span>: <span class=\"mi\">4</span>:<span class=\"mi\">35</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">;</span><span class=\"w\">                       </span><span class=\"c1\">// in scope 0 at src/main.rs:4:15: 4:16</span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">power</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">).</span><span class=\"mi\">0</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">));</span><span class=\"w\">   </span><span class=\"c1\">// in scope 0 at src/main.rs:3:9: 3:14</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\">                     </span><span class=\"c1\">// return place in scope 0 at src/main.rs:4:23: 4:23</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_3</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\">                     </span><span class=\"c1\">// in scope 0 at src/main.rs:4:23: 4:24</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_4</span>: <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\">                     </span><span class=\"c1\">// in scope 0 at src/main.rs:4:29: 4:34</span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at src/main.rs:4:23: 4:24</span>\n<span class=\"w\">        </span><span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">;</span><span class=\"w\">                         </span><span class=\"c1\">// scope 0 at src/main.rs:4:23: 4:24</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_4</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at src/main.rs:4:29: 4:34</span>\n<span class=\"w\">        </span><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">).</span><span class=\"mi\">0</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">));</span><span class=\"w\">         </span><span class=\"c1\">// scope 0 at src/main.rs:4:29: 4:34</span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">num</span>::<span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span>::<span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// scope 0 at src/main.rs:4:23: 4:35</span>\n<span class=\"w\">                                         </span><span class=\"c1\">// mir::Constant</span>\n<span class=\"w\">                                         </span><span class=\"c1\">// + span: src/main.rs:4:25: 4:28</span>\n<span class=\"w\">                                         </span><span class=\"c1\">// + literal: Const { ty: fn(u32, u32) -&gt; u32 {core::num::&lt;impl u32&gt;::pow}, val: Value(Scalar(&lt;ZST&gt;)) }</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb1</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_4</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at src/main.rs:4:34: 4:35</span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at src/main.rs:4:34: 4:35</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at src/main.rs:4:35: 4:35</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Notice the dereference on the <code>_4 = â€¦</code> assignment</p>",
        "id": 227614825,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614180233
    }
]