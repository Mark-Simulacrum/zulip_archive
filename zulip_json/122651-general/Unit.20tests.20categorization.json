[
    {
        "content": "<p>I'm not sure if this is an appropriate place to ask this question, but anyway. </p>\n<p>I haven't found a <em>reasonable</em> way to categorize unit tests. As far as I understood, everything that is annotated by <code>#[test]</code> is getting collected by a compiler and passed into <code>libtest</code>'s runner. <br>\nWhile that's great state of things, one would like to have a bit more control, for example for long-running tests that shouldn't always run. Yes, there's <code>#[ignore]</code>, but that allows only to separate tests into two categories: regular test and ignored test.<br>\nWhat I want:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[category(</span><span class=\"s\">\"regression\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[issue(</span><span class=\"s\">\"#12345\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_long_compute</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// something that takes a long time</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there a way to achieve that? I know that I can write an external script that would run <code>cargo test $args</code> with specific test cases and mark most of them ignored, but that's definitely less than ideal. <br>\nAlso, I know there's <a href=\"https://github.com/rust-lang/rust/issues/50297\">https://github.com/rust-lang/rust/issues/50297</a> but not sure if it's that relevant there.</p>",
        "id": 237387825,
        "sender_full_name": "Edward",
        "timestamp": 1620157935
    },
    {
        "content": "<p>you can put them into different modules depending on the category and name the module after the category</p>",
        "id": 237391077,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620159359
    },
    {
        "content": "<p>Is there a way to alter how compiler does collect the tests? I.e to make example above work? I know a lot of workarounds and it's not a big painpoint at all, but in the end it's a workaround anyway.</p>",
        "id": 237462717,
        "sender_full_name": "Edward",
        "timestamp": 1620205234
    },
    {
        "content": "<p>Yeah, I want to fix the build issue at some point but it's tricky because right now x.py doesn't really have a concept of individual crates, only \"steps\"</p>",
        "id": 237474142,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620211481
    },
    {
        "content": "<p>So it's a pretty big change</p>",
        "id": 237474149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620211487
    },
    {
        "content": "<p>Probably not relevant to you though <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 237474179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620211507
    },
    {
        "content": "<p>Just to clarify, I was talking about altering the rules for aggregating tests from crate, which happens <a href=\"https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_builtin_macros/src/test_harness.rs#L95\">~here</a>.<br>\nI just realized that I probably could just use <a href=\"https://doc.rust-lang.org/unstable-book/language-features/custom-test-frameworks.html\">https://doc.rust-lang.org/unstable-book/language-features/custom-test-frameworks.html</a> to toy with that :)</p>",
        "id": 237530123,
        "sender_full_name": "Edward",
        "timestamp": 1620234033
    },
    {
        "content": "<p>for that I would just use integration tests so you can use <code>--test</code></p>",
        "id": 237530375,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620234127
    },
    {
        "content": "<p>I'm (very slowly, very early) writing my own dang test framework â€” <a href=\"https://github.com/shepmaster/crispy-sniffle/blob/\">https://github.com/shepmaster/crispy-sniffle/blob/</a>. It has the ability to skip tests and labels are totally a reasonable thing to add.</p>",
        "id": 237560601,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620246787
    },
    {
        "content": "<p>It looks like this in usage:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">tests</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#![tf_macros::foo]</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[before]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">one</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Setup\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">use_it</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">alpha</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237560848,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620246896
    }
]