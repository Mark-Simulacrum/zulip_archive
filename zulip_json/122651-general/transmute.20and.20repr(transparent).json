[
    {
        "content": "<p>It's safe to transmute <code>Vec&lt;Foo&lt;T&gt;&gt;</code> to <code>Vec&lt;T&gt;</code> if <code>Foo</code> is <code>repr(transparent)</code>, yeah?</p>",
        "id": 178689506,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571686486
    },
    {
        "content": "<p>and I assume <code>struct Foo(T)</code>?</p>",
        "id": 178691017,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687411
    },
    {
        "content": "<p>I think yes (but beware an extra <code>Drop</code> impl for <code>Foo</code>)</p>",
        "id": 178691120,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687467
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/rfcs/pull/2756\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2756\">https://github.com/rust-lang/rfcs/pull/2756</a></p>",
        "id": 178691135,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687474
    },
    {
        "content": "<p>Should <code>miri</code> detect a missing <code>#[repr(transparent)]</code>?</p>",
        "id": 178691429,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571687630
    },
    {
        "content": "<p>no, miri doesn't detect relying on unspecified layout details</p>",
        "id": 178691489,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687650
    },
    {
        "content": "<p>we could conceivably add a flag to randomize <code>repr(Rust)</code> layout and add some redundant padding or so to detect such cases, but currently we dont have anything like that</p>",
        "id": 178691571,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687707
    },
    {
        "content": "<p>Ah, okay</p>",
        "id": 178691593,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571687723
    },
    {
        "content": "<p>I don't believe we've ever made a commitment wrt. type constructors in this way</p>",
        "id": 178691595,
        "sender_full_name": "centril",
        "timestamp": 1571687724
    },
    {
        "content": "<p>well it kind of follows from <code>repr(transparent)</code> allowing transmutes</p>",
        "id": 178691842,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687854
    },
    {
        "content": "<p>and the fact that <code>Vec</code> extensively documents its internals</p>",
        "id": 178691871,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687863
    },
    {
        "content": "<p>if you wanted to be really safe you'd go via <code>to/from_raw_parts</code></p>",
        "id": 178691911,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687882
    },
    {
        "content": "<p>well probably you should actually, given <a href=\"https://github.com/rust-lang/rust-clippy/issues/4484\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/issues/4484\">https://github.com/rust-lang/rust-clippy/issues/4484</a> ^^</p>",
        "id": 178691975,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687903
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/rust/issues/64073\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64073\">https://github.com/rust-lang/rust/issues/64073</a></p>",
        "id": 178691994,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687921
    },
    {
        "content": "<blockquote>\n<p>and I assume <code>struct Foo(T)</code>?</p>\n</blockquote>\n<p><code>struct Foo&lt;T&gt; { value: T } </code> (but <code>repr(transparent)</code> enforces only one value, IIRC)</p>",
        "id": 178693465,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571688702
    },
    {
        "content": "<p>As a general principle, transmuting under type constructors is plainly incorrect: associated types and constants as well as various parametricity-piercing widgets can make <code>Foo&lt;Wrapper&lt;T&gt;&gt;</code> and <code>Foo&lt;T&gt;</code> differ<br>\nSo it's always up to what the specific <code>Foo</code> (in this case <code>Vec</code>) guarantees</p>",
        "id": 178694122,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571689122
    },
    {
        "content": "<p><code>Vec</code> could make guarantee that it only depends on size and alignment for these matters, but it currently doesn't, so the transmute is at least \"library UB\"</p>",
        "id": 178694185,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571689163
    },
    {
        "content": "<p>I wish there was a <code>Vec::to_raw_parts</code></p>",
        "id": 178694876,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571689538
    },
    {
        "content": "<p>I'm happy I asked. I was 95% sure it was fine.</p>",
        "id": 178695034,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571689629
    },
    {
        "content": "<blockquote>\n<p>I wish there was a <code>Vec::to_raw_parts</code></p>\n</blockquote>\n<p>This feels like an API that we can and should add</p>",
        "id": 178695157,
        "sender_full_name": "simulacrum",
        "timestamp": 1571689715
    },
    {
        "content": "<p>As I said it, I was wondering what it'd return. A tuple? A little struct?</p>",
        "id": 178695254,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571689770
    },
    {
        "content": "<p>I guess a tuple would be fine</p>",
        "id": 178695291,
        "sender_full_name": "RalfJ",
        "timestamp": 1571689797
    },
    {
        "content": "<p>tuple, I'd say, to let you easily destructure and pass to from_raw_parts</p>",
        "id": 178695600,
        "sender_full_name": "simulacrum",
        "timestamp": 1571689961
    },
    {
        "content": "<p>Seems sensible</p>",
        "id": 178695955,
        "sender_full_name": "centril",
        "timestamp": 1571690198
    },
    {
        "content": "<p>To be easier to use correctly than just writing out <code>(v.as_ptr(), v.len(), v.capacity())</code> (which requires <code>mem::forget</code> afterwards) it should probably be <code>into_raw_parts(self)</code></p>",
        "id": 178698907,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571691997
    },
    {
        "content": "<p>Alrighty, I'm running the tests locally (also added it for <code>String</code>), will push when those pass.</p>",
        "id": 178757654,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571752260
    },
    {
        "content": "<p>And by \"tests\" I really mean building rust / LLVM so hard that my screen glitches and my machine restarted</p>",
        "id": 178764855,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571756922
    },
    {
        "content": "<p>for a PR to add those methods?</p>",
        "id": 178771025,
        "sender_full_name": "Lokathor",
        "timestamp": 1571760994
    },
    {
        "content": "<p>yep</p>",
        "id": 178773767,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571763024
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65705\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65705\">https://github.com/rust-lang/rust/pull/65705</a></p>",
        "id": 178773796,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571763065
    },
    {
        "content": "<p>these LLVM builds also feel like they take longer and longer... and compared to earlier times I have to rebuild LLVM much more often, too</p>",
        "id": 178793688,
        "sender_full_name": "RalfJ",
        "timestamp": 1571774646
    },
    {
        "content": "<p>I'm doing <code>../x.py --jobs 3 test src/liballoc/</code> and one thing I always know is that there's some faster way to run the tests I want, but I never know what.</p>",
        "id": 178794304,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571775066
    },
    {
        "content": "<p>(set to 3 to allow me to use my computer for other things)</p>",
        "id": 178794326,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1571775088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> did you edit rustc at all? if you only edit libstd you can do stage 0 tests... add <code>--stage 0</code></p>",
        "id": 179075852,
        "sender_full_name": "RalfJ",
        "timestamp": 1572027634
    }
]