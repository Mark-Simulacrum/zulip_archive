[
    {
        "content": "<p>Hello! Not sure if this is the place to ask this, but I'm trying to build a vec of futures and await/join them in a non-async function. Something like this:</p>\n<div class=\"codehilite\"><pre><span></span>fn some_function() {\n                    use futures::executor::block_on;\n                    use futures::future::join_all;\n                    use futures::task::SpawnExt;\n\n                    let futs: Vec&lt;_&gt; = some_vec\n                        .into_iter()\n                        .map(|cl| tokio::task::spawn_blocking(async || { some_async_function(cl).await }))\n                        .collect();\n\n                    let res: Vec&lt;CodeLens&gt; = block_on(join_all(c))\n                        .into_iter()\n                        .map(|c| c.unwrap())\n                        .collect();\n}\n</pre></div>\n\n\n<p>My intention is to basically spawn that vec of futures and await them in parallel, to then join them to the main thread, but I'm now getting this error, on the last collect:</p>\n<div class=\"codehilite\"><pre><span></span>the trait std::iter::FromIterator&lt;impl core::future::future::Future&gt; is not implemented for std::vec::Vec&lt;lsp_types::CodeLens&gt;\n</pre></div>\n\n\n<p>Can someone help me understand what I'm doing wrong here? (or a better way to do this)</p>",
        "id": 191968451,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1585271830
    },
    {
        "content": "<p>I think you wanted to say <code>block_on(join_all(futs))</code> instead of <code>block_on(join_all(c))</code>? But it does seem written in a round-about way, e.g. I don't think you need <code>spawn_blocking</code> since your future doesn't block so <code>spawn</code> might be enough. There's also <code>FuturesUnordered</code> which may be more efficient than <code>join_all</code>.</p>",
        "id": 191984142,
        "sender_full_name": "Laurențiu",
        "timestamp": 1585294672
    },
    {
        "content": "<p>Assuming that <code>c</code> is a typo, I'm still not sure why you're getting the error, since <code>block_on(join_all(futs))</code> should return a <code>Vec&lt;Option&lt;CodeLens&gt;&gt;</code> if  <code>some_async_function</code> returns an <code>Option&lt;CodeLens&gt;</code>.</p>",
        "id": 191984297,
        "sender_full_name": "Laurențiu",
        "timestamp": 1585294791
    },
    {
        "content": "<p>Ah yeah that was a typo, my bad. <code>some_async_function</code> there returns a <code>failure::Fallible&lt;CodeLens&gt;</code>.</p>",
        "id": 191990607,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1585299850
    },
    {
        "content": "<p>So you're getting that error on the <code>block_on</code> line?</p>",
        "id": 191991443,
        "sender_full_name": "Laurențiu",
        "timestamp": 1585300471
    },
    {
        "content": "<p>Try checking the types, or comment out bits of code to see where is the type mismatch. From that error I get that <code>block_on(join_all(c)).into_iter().map(|c| c.unwrap())</code> yields <code>Future</code>s</p>",
        "id": 191991567,
        "sender_full_name": "Laurențiu",
        "timestamp": 1585300566
    },
    {
        "content": "<p>ok I managed to get it working, had to change that to a <code>spawn</code> and was missing a second <code>unwrap</code> on that map in the end. I didn't know spawn returned a result though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 191991645,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1585300659
    },
    {
        "content": "<p>also, thank you! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 191992458,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1585301238
    }
]