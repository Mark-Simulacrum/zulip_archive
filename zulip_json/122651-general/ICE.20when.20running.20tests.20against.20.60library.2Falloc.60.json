[
    {
        "content": "<p>I was able to get the tests to pass with <code>./x.py test library/alloc/ --stage 1</code> though.  Any idea as to why this works?</p>",
        "id": 256946159,
        "sender_full_name": "Michael de Silva",
        "timestamp": 1633863657
    },
    {
        "content": "<p>One should be very careful when using <code>--keep-stage</code>. There is a warning that should have been printed (albeit somewhat hidden in the long output): <code>Warning: Using a potentially old libstd. This may not behave well.</code>  There's also some docs at <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html#incremental-builds-with---keep-stage\">https://rustc-dev-guide.rust-lang.org/building/suggested.html#incremental-builds-with---keep-stage</a> which mention the hazards of using it.</p>\n<p>From a completely fresh checkout, it should have displayed an error about stage1 being missing.  So there was likely an outdated copy of stage1 std.  The compiler and std are pretty intimately intertwined, so they need to be very closely in sync.</p>",
        "id": 256957110,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633874274
    },
    {
        "content": "<p>See <a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html#building-and-testing-rustc\">https://rustc-dev-guide.rust-lang.org/getting-started.html#building-and-testing-rustc</a>. I think this needs a bit more polish in that regard.</p>",
        "id": 257048658,
        "sender_full_name": "Michael de Silva",
        "timestamp": 1633950897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/ICE.20when.20running.20tests.20against.20.60library.2Falloc.60/near/256957110\">said</a>:</p>\n<blockquote>\n<p>One should be very careful when using <code>--keep-stage</code>. There is a warning that should have been printed (albeit somewhat hidden in the long output): <code>Warning: Using a potentially old libstd. This may not behave well.</code>  There's also some docs at <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html#incremental-builds-with---keep-stage\">https://rustc-dev-guide.rust-lang.org/building/suggested.html#incremental-builds-with---keep-stage</a> which mention the hazards of using it.</p>\n<p>From a completely fresh checkout, it should have displayed an error about stage1 being missing.  So there was likely an outdated copy of stage1 std.  The compiler and std are pretty intimately intertwined, so they need to be very closely in sync.</p>\n</blockquote>\n<p>This fails with the same ICE error <code>./x.py test library/alloc</code></p>",
        "id": 257048957,
        "sender_full_name": "Michael de Silva",
        "timestamp": 1633951077
    },
    {
        "content": "<p>I got a similar error when running stage 0 doc tests instead of keep-stage. <a href=\"https://github.com/rust-lang/rust/issues/89564\">#89564</a></p>",
        "id": 257051923,
        "sender_full_name": "The 8472",
        "timestamp": 1633952715
    },
    {
        "content": "<p>Hm, I'm guessing maybe you have the <code>library</code> profile?  It looks like that defaults to <code>test-stage=0</code>.  I'm not a big fan of that, since it can cause issues like this.  However, I understand that people want faster and easier build and test cycles.</p>\n<p>I'm sure the people who work on rustc-dev-guide would be happy to have some help to polish the docs.  There's a channel here at <a class=\"stream\" data-stream-id=\"196385\" href=\"/#narrow/stream/196385-t-compiler.2Fwg-rustc-dev-guide\">#t-compiler/wg-rustc-dev-guide</a> where they hang out.</p>\n<p>I tried digging through some of the recent changes to that file and issues reporting errors with <code>trimmed_def_paths</code>, but none of them seem to resolve the issue.</p>",
        "id": 257088914,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633970435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/ICE.20when.20running.20tests.20against.20.60library.2Falloc.60/near/257088914\">said</a>:</p>\n<blockquote>\n<p>Hm, I'm guessing maybe you have the <code>library</code> profile?  It looks like that defaults to <code>test-stage=0</code>.  I'm not a big fan of that, since it can cause issues like this.  However, I understand that people want faster and easier build and test cycles.</p>\n<p>I'm sure the people who work on rustc-dev-guide would be happy to have some help to polish the docs.  There's a channel here at <a class=\"stream\" data-stream-id=\"196385\" href=\"/#narrow/stream/196385-t-compiler.2Fwg-rustc-dev-guide\">#t-compiler/wg-rustc-dev-guide</a> where they hang out.</p>\n<p>I tried digging through some of the recent changes to that file and issues reporting errors with <code>trimmed_def_paths</code>, but none of them seem to resolve the issue.</p>\n</blockquote>\n<p>Hi Eric. What do you mean by library profile? Have I missed a local Config?  You’re right, mine sticks to stage 0 for whatever reason. Thanks.</p>",
        "id": 257089857,
        "sender_full_name": "Michael de Silva",
        "timestamp": 1633970889
    },
    {
        "content": "<p>In <code>config.toml</code> there is a <code>profile = \"...\"</code> setting that sets up some defaults.  The \"library\" setting is intended for people working on the standard library, and it disables building the compiler and instead using the beta compiler. Normally if you don't set the profile, the default is <code>--stage=1</code> which means to build the local compiler.</p>",
        "id": 257090161,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633971052
    },
    {
        "content": "<p>Thanks I’ll check that.</p>",
        "id": 257090613,
        "sender_full_name": "Michael de Silva",
        "timestamp": 1633971306
    },
    {
        "content": "<p>That's a beta compiler compiling and testing the nightly standard library. Since the compiler itself isn't linked against the nightly standard library (right?), so an ICE is somewhat unexpected. A test failing would be a different story but that's usually handled by adding a <code>cfg(bootstrap)</code>.</p>",
        "id": 257090861,
        "sender_full_name": "The 8472",
        "timestamp": 1633971453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> which compiler do you mean? All compilers except for the beta compiler are linked against nightly</p>",
        "id": 257091709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633971873
    },
    {
        "content": "<p>But yeah I agree I don't see how stages are relevant here</p>",
        "id": 257091760,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633971904
    },
    {
        "content": "<p>The compiler used to build the tests in <code>./x.py test library/alloc --stage 0</code>. Aiui that uses the beta compiler linked against beta standard library and only builds the nightly standard library as an external crate, i.e. it's not a mismatch between compiler and stdlib that could be causing the ICE.</p>",
        "id": 257091990,
        "sender_full_name": "The 8472",
        "timestamp": 1633972011
    },
    {
        "content": "<p>For reference, this is the failing doc test. I guess beta isn't handling the compile error properly</p>\n<div class=\"codehilite\"><pre><span></span><code>/// ```compile_fail,E0277\n/// trait TraitExample {}\n///\n/// impl&lt;&#39;a&gt; TraitExample for &amp;&#39;a str {}\n///\n/// fn example_func&lt;A: TraitExample&gt;(example_arg: A) {}\n///\n/// let example_string = String::from(&quot;example_string&quot;);\n/// example_func(&amp;example_string);\n/// ```\n</code></pre></div>",
        "id": 257092816,
        "sender_full_name": "The 8472",
        "timestamp": 1633972439
    },
    {
        "content": "<p>Yea, I don't think it is a mismatch issue.  I thought for sure it would be one of <a href=\"https://github.com/rust-lang/rust/issues/89126\">#89126</a>, <a href=\"https://github.com/rust-lang/rust/issues/89408\">#89408</a>, <a href=\"https://github.com/rust-lang/rust/issues/88719\">#88719</a> or <a href=\"https://github.com/rust-lang/rust/issues/88546\">#88546</a>, which all are recent PRs dealing with trimmed_def_paths and <code>error_reporting/suggestions.rs</code>, but none of them fixed it.</p>",
        "id": 257092817,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633972439
    },
    {
        "content": "<p>(That is, applying those to the stage0 compiler.)</p>",
        "id": 257092904,
        "sender_full_name": "Eric Huss",
        "timestamp": 1633972473
    },
    {
        "content": "<p>Another one, this time with check instead of tests. <a href=\"https://github.com/rust-lang/rust/issues/89775\">#89775</a></p>",
        "id": 257100063,
        "sender_full_name": "The 8472",
        "timestamp": 1633976496
    },
    {
        "content": "<p>I've hit this yesterday as well</p>",
        "id": 257100506,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633976750
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89785\">#89785</a> should fix it.</p>",
        "id": 257109910,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633982296
    }
]