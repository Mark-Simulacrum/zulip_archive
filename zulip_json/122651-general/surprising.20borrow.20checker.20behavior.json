[
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ec573600fbfee22498b02f9af4894632\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ec573600fbfee22498b02f9af4894632</a></p>",
        "id": 203602371,
        "sender_full_name": "David Renshaw",
        "timestamp": 1594483164
    },
    {
        "content": "<p>Presumably since <code>W</code> is early-bound, but the elided lifetime parameters are late-bound?</p>",
        "id": 203602445,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594483238
    },
    {
        "content": "<p>interesting</p>",
        "id": 203602464,
        "sender_full_name": "David Renshaw",
        "timestamp": 1594483267
    },
    {
        "content": "<p>Is there any way to make the lifetime late-bound without declaring wrapper functions?</p>",
        "id": 203602564,
        "sender_full_name": "David Renshaw",
        "timestamp": 1594483361
    },
    {
        "content": "<p>I want to be able to add a type annotation to <code>do_write</code>. It seems like the missing piece I would need is a lifetime-level lambda.</p>",
        "id": 203605541,
        "sender_full_name": "David Renshaw",
        "timestamp": 1594488185
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">do_write</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;r</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">packed</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"na\">&#39;t</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">write_message_packed</span>::<span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;t</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"na\">&#39;t</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">write_message</span>::<span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;t</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203605602,
        "sender_full_name": "David Renshaw",
        "timestamp": 1594488274
    },
    {
        "content": "<p>where that  <code>&lt;'t&gt;</code> is fake syntax and what I mean by \"lifetime-level lambda\"</p>",
        "id": 203605607,
        "sender_full_name": "David Renshaw",
        "timestamp": 1594488303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^ remember when I was suggesting we remove the early/late-bound distinction (or even early parameterization of functions by type parameters etc.), by having a binder around the substs of a function in <code>ty::FnDef</code>?</p>",
        "id": 203626234,
        "sender_full_name": "eddyb",
        "timestamp": 1594526048
    },
    {
        "content": "<p>(I don't really want explicit syntax if we can avoid it)</p>",
        "id": 203626243,
        "sender_full_name": "eddyb",
        "timestamp": 1594526073
    },
    {
        "content": "<p>as usual, inference backwards compatibility makes me sad</p>",
        "id": 203626254,
        "sender_full_name": "eddyb",
        "timestamp": 1594526108
    },
    {
        "content": "<p>since I bet some crates have abused <code>let f = generic_function;</code> and then using <code>f</code> multiple times, to guide inference</p>",
        "id": 203626263,
        "sender_full_name": "eddyb",
        "timestamp": 1594526150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but it should be possible to at least infer more interesting types for <code>ty::FnDef</code>, than today, if we do add a binder</p>",
        "id": 203626386,
        "sender_full_name": "eddyb",
        "timestamp": 1594526346
    },
    {
        "content": "<p>all lifetime parameters not explicitly specified could be handled as bound to the <code>ty::FnDef</code> and I guess at least that shouldn't cause inference problems. and <code>for&lt;...&gt; fn(...)</code> / <code>impl for&lt;...&gt; Fn(...)</code> hints could, just like they do today with closures, introduce <code>for&lt;...&gt;</code></p>",
        "id": 203626457,
        "sender_full_name": "eddyb",
        "timestamp": 1594526488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> effectively making <code>path::to::function</code> equivalent to <code>|a, b, c| path::to::function(a, b, c)</code></p>",
        "id": 203626460,
        "sender_full_name": "eddyb",
        "timestamp": 1594526518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258831\">@David Renshaw</span> at least you don't need wrapper functions, just closures <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a8125e473d8d25ae6da57cc13f8ff03d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a8125e473d8d25ae6da57cc13f8ff03d</a></p>",
        "id": 203626531,
        "sender_full_name": "eddyb",
        "timestamp": 1594526642
    },
    {
        "content": "<p>note that this doesn't work w/o the hint</p>",
        "id": 203626560,
        "sender_full_name": "eddyb",
        "timestamp": 1594526700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hmm, actually, there is something we could do backwards-compatibly, but it's weird? we can skolemize <code>f</code> (from <code>let f = path::to::function;</code>) <em>only</em> wrt lifetimes, so that every time it's called they can be different, but infer a fixed type \"skeleton\" otherwise</p>",
        "id": 203626675,
        "sender_full_name": "eddyb",
        "timestamp": 1594526896
    },
    {
        "content": "<p>the problem with that is that e.g. calling the function with <code>&amp;'x mut Foo&lt;'y&gt;</code> could result in <code>path::to::function::&lt;_&gt;</code> becoming <code>for&lt;'a, 'b&gt; path::to::function::&lt;&amp;'a mut Foo&lt;'b&gt;&gt;</code> and I doubt that kind of binder injection is at all possible today, without making the entire <code>ty::FnDef</code> actually an inference variable</p>",
        "id": 203626744,
        "sender_full_name": "eddyb",
        "timestamp": 1594527062
    },
    {
        "content": "<p>anyway this is all random ranting</p>",
        "id": 203626752,
        "sender_full_name": "eddyb",
        "timestamp": 1594527111
    }
]