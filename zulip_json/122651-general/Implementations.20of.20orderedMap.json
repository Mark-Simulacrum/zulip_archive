[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> Can hashbrown/SwissTable design support orderedmaps?</p>",
        "id": 200983872,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592294698
    },
    {
        "content": "<p><a href=\"https://github.com/bluss/indexmap/pull/131\">https://github.com/bluss/indexmap/pull/131</a></p>",
        "id": 200983913,
        "sender_full_name": "Amanieu",
        "timestamp": 1592294740
    },
    {
        "content": "<p>That was fast :) Thank You!<br>\n<span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> could you please give a few words on how IndexMap works? (I can't seem to see an explanation)<br>\n(ie is it map+vector of keys / pointer to keys? is it something nicer?)<br>\nThanks!</p>",
        "id": 200984460,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592295096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> yeah, it's basically a hash table containing just indices, referencing the actual items ordered in a vector</p>",
        "id": 201054274,
        "sender_full_name": "cuviper",
        "timestamp": 1592331420
    },
    {
        "content": "<p>so far it's a bespoke table based on robin-hood hashing, but that PR ports it to hashbrown's RawTable</p>",
        "id": 201054310,
        "sender_full_name": "cuviper",
        "timestamp": 1592331444
    },
    {
        "content": "<p>So it's a hashmap containing references as values, and the keys ordered in a vector? (so overhead of N*sizeof(ptr))</p>",
        "id": 201054436,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592331503
    },
    {
        "content": "<p>so that becomes <code>RawTable&lt;usize&gt;</code>, <code>Vec&lt;Bucket&lt;K, V&gt;&gt;</code>, and the hasher</p>",
        "id": 201054438,
        "sender_full_name": "cuviper",
        "timestamp": 1592331504
    },
    {
        "content": "<p>indexes, not references, but yes</p>",
        "id": 201054488,
        "sender_full_name": "cuviper",
        "timestamp": 1592331527
    },
    {
        "content": "<p>references would have lifetime issues</p>",
        "id": 201054546,
        "sender_full_name": "cuviper",
        "timestamp": 1592331560
    },
    {
        "content": "<p>oh the hashmap contains indexes? hmm, but then any random removal from the hashmap and vec will require iterating through the hashmap and updating the indexes?</p>",
        "id": 201054612,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592331591
    },
    {
        "content": "<p>removal is painful, yes. indexmap offers <code>swap_remove</code> or <code>shift_remove</code> to pick your poison</p>",
        "id": 201054777,
        "sender_full_name": "cuviper",
        "timestamp": 1592331648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> do you have other ideas how you'd do it?</p>",
        "id": 201055011,
        "sender_full_name": "cuviper",
        "timestamp": 1592331756
    },
    {
        "content": "<p>Hmm I'm trying to find more design patterns for IndexMap, where my use cases are: inserting(always the end of the vec), checking if contains, and removal(random locations in the vec).</p>",
        "id": 201055027,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592331766
    },
    {
        "content": "<p>My first idea was a vec containing pointers to the keys in the map, or duplicating the key both in the vec and the map(less nice)</p>",
        "id": 201055114,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592331804
    },
    {
        "content": "<p>another idea is boxing the key, and leaking the pointer storing it both in the map and the vec, and then iterating over the vec to find the pointer itself so you can search in the map, this looses a lot of the nice properties of hashbrown though (cache locality)</p>",
        "id": 201055370,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592331946
    },
    {
        "content": "<p>tradeoffs abound -- those schemes sound like the table can't help find the index at all</p>",
        "id": 201057009,
        "sender_full_name": "cuviper",
        "timestamp": 1592332736
    },
    {
        "content": "<p>yeah, so in those schemes you need to iterate the vec and compare</p>",
        "id": 201057067,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592332766
    },
    {
        "content": "<p>idk if this is worse or better than the need to iterate the map and update the indexes for every random removal?</p>",
        "id": 201057164,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592332806
    },
    {
        "content": "<p>indexmap is definitely weighted toward the assumption that removal is relatively infrequent</p>",
        "id": 201057388,
        "sender_full_name": "cuviper",
        "timestamp": 1592332920
    },
    {
        "content": "<p>I might try to fork it change the design and benchmarks the difference and affects to better understand the exact tradeoffs (I'll wait for the hashbrown PR though before).<br>\nI'm currently writing a similar thing in Go, but there I sadly can't get a pointer to the map's key, so I have to duplicate the key itself which sucks.</p>",
        "id": 201058093,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592333283
    },
    {
        "content": "<p>FWIW, indexmap used to be called ordermap: <a href=\"https://github.com/bluss/indexmap/issues/14\">https://github.com/bluss/indexmap/issues/14</a></p>",
        "id": 201064299,
        "sender_full_name": "cuviper",
        "timestamp": 1592336549
    },
    {
        "content": "<p>if you want to emphasize ordering, and less  indexing, maybe we could offer the old name back to you for your fork</p>",
        "id": 201064351,
        "sender_full_name": "cuviper",
        "timestamp": 1592336588
    },
    {
        "content": "<p>(it's been long enough that hopefully that wouldn't cause confusion)</p>",
        "id": 201064388,
        "sender_full_name": "cuviper",
        "timestamp": 1592336610
    },
    {
        "content": "<p>for example, some folks were suggesting removal by tombstones, which we decided against for indexmap</p>",
        "id": 201064499,
        "sender_full_name": "cuviper",
        "timestamp": 1592336649
    },
    {
        "content": "<p>Another option is a table of doubly linked list nodes.</p>",
        "id": 201284411,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592494204
    },
    {
        "content": "<p>More memory usage, and ordered traversal is pointer chasing, but insertion and removal are both constant time.</p>",
        "id": 201284531,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592494266
    },
    {
        "content": "<p>Works better using an intrusive collection, where the pointers live in the objects.</p>",
        "id": 201296071,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592499258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> Just saw that you forked indexmap, so tagged in-case this discussion might be of interest to you :)</p>",
        "id": 205238374,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1595944683
    },
    {
        "content": "<p>Thanks! My use case actually fits the current implementation pretty well, because I only care about the dedicated list of indices to allow me to efficiently choose random keys. This also means that <code>swap_remove</code> is totally fine for me.</p>",
        "id": 205239330,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1595945149
    }
]