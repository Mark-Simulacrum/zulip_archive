[
    {
        "content": "<p>I'm trying to write a test to ensure that two futures run concurrently, rather than sequentially. They're futures to spawn processes.</p>",
        "id": 206521058,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597098698
    },
    {
        "content": "<p>I'd like to figure out a more reliable, and faster, way to test that than just spawning two futures running <code>sleep 1</code>  and making sure that it takes less than 1.5 seconds.</p>",
        "id": 206521134,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597098738
    },
    {
        "content": "<p>maybe create a <a href=\"https://doc.rust-lang.org/std/time/struct.Duration.html\">https://doc.rust-lang.org/std/time/struct.Duration.html</a> before and after and check <a href=\"https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_sub\">https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_sub</a> ?</p>",
        "id": 206521404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597098976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Checking the duration isn't the problem. I'm trying to find a different solution that doesn't involve sleeping.</p>",
        "id": 206521433,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597099005
    },
    {
        "content": "<p>oh I see</p>",
        "id": 206521440,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597099015
    },
    {
        "content": "<p>yeah not sure, sorry</p>",
        "id": 206521444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597099019
    },
    {
        "content": "<p>/me ponders a solution involving pipes.</p>",
        "id": 206521462,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597099043
    },
    {
        "content": "<p>Figured it out.</p>",
        "id": 206522817,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597100142
    },
    {
        "content": "<p>Spawned <code>/bin/sh -c \"read line\"</code> as the first process, and <code>/bin/false</code> as the second one. Combined the futures with <code>or</code> and confirmed that the result I get back is from <code>/bin/false</code>.</p>",
        "id": 206522930,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597100244
    },
    {
        "content": "<p>(as opposed to hanging)</p>",
        "id": 206522945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597100253
    },
    {
        "content": "<p>You could have the futures return <code>std::thread::current().id()</code>, then compare</p>",
        "id": 206527387,
        "sender_full_name": "cuviper",
        "timestamp": 1597104097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> The problem wasn't that they were running on the same thread. The problem was that they were running sequentially on the same thread rather than concurrently on the same thread.</p>",
        "id": 206538529,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597119140
    },
    {
        "content": "<p>Bug due to interesting interaction with the kernel. Turns out that setting a pidfd to <code>O_NONBLOCK</code> does nothing.</p>",
        "id": 206538533,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597119166
    },
    {
        "content": "<p>Ah, ok. From the sleeping I thought you meant to block one thread and let something run on another. I guess that could be an async sleep though.</p>",
        "id": 206538682,
        "sender_full_name": "cuviper",
        "timestamp": 1597119460
    },
    {
        "content": "<p>I was spawning a separate process running <code>/bin/sleep</code>. ;)</p>",
        "id": 206538737,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597119513
    },
    {
        "content": "<p>Just to have something that took a while.</p>",
        "id": 206538739,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597119522
    }
]