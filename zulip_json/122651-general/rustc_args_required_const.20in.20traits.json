[
    {
        "content": "<p>I'm trying to implement an intrinsic that takes a literal value as argument:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">VectorCtf</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">vector_signed_int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nb\">Result</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vector_float</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[target_feature(enable = </span><span class=\"s\">&quot;altivec&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[rustc_args_required_const(1)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">vec_ctf</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">vec_vcfsx</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This leads to:</p>\n<div class=\"codehilite\"><pre><span></span>error: argument 2 is required to be a constant\n   --&gt; crates/core_arch/src/powerpc/altivec.rs:447:13\n    |\n447 |             vec_vcfsx(self, b)\n    |             ^^^^^^^^^^^^^^^^^^\n</pre></div>\n\n\n<p>Am I doing something silly or there is a limitation to be addressed in rustc?</p>",
        "id": 166522197,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558781790
    },
    {
        "content": "<p>simpler testcase <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=930967e5ad01ef08697720805ed09062\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=930967e5ad01ef08697720805ed09062\">here</a></p>",
        "id": 166522387,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558782135
    },
    {
        "content": "<p>even calling function from function fails <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f2a2a96e4d0019048c6661668a782088\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f2a2a96e4d0019048c6661668a782088\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f2a2a96e4d0019048c6661668a782088</a></p>",
        "id": 166522449,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558782257
    },
    {
        "content": "<p>I don't think these were ever intended to be used this way. To be honest that feature is a total hack that I don't know how it ever got exposed to users without an RFC</p>",
        "id": 166531723,
        "sender_full_name": "oli",
        "timestamp": 1558797844
    },
    {
        "content": "<p>I don't think this will get addressed any time soon (if ever). Const generics should give us a much cleaner way to use these</p>",
        "id": 166531738,
        "sender_full_name": "oli",
        "timestamp": 1558797901
    },
    {
        "content": "<p>AFAIK, <code>rustc</code> attributes are generally expected to be used only inside rustc</p>",
        "id": 166531971,
        "sender_full_name": "RalfJ",
        "timestamp": 1558798216
    },
    {
        "content": "<p>we can't stop you (on nightly) from using them yourself, but dont expect documentation, dont expect any kind of stability, and dont expect them to work for anything beyond what rustc needed them for</p>",
        "id": 166531990,
        "sender_full_name": "RalfJ",
        "timestamp": 1558798250
    },
    {
        "content": "<p>If I understand it correctly the above is actually for \"inside rustc\" (isn't <code>core_arch</code> related to <code>core::arch</code>?)</p>",
        "id": 166532712,
        "sender_full_name": "oli",
        "timestamp": 1558799437
    },
    {
        "content": "<p>I want a time machine and just implement a crappy version of const generics (that can't handle being used in array lengths) and just allows the intrinsic use case</p>",
        "id": 166532736,
        "sender_full_name": "oli",
        "timestamp": 1558799507
    },
    {
        "content": "<blockquote>\n<p>To be honest that feature is a total hack that I don't know how it ever got exposed to users without an RFC</p>\n</blockquote>\n<p>It was never approved by the language team; the libs team inappropriately approved it. That's how <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 166550430,
        "sender_full_name": "centril",
        "timestamp": 1558830543
    },
    {
        "content": "<p>I would have never approved it had I been on the language team at that point</p>",
        "id": 166550437,
        "sender_full_name": "centril",
        "timestamp": 1558830559
    },
    {
        "content": "<p>and yeah, it's a total hack; if we want to make a sane version out of it you'd need <code>fn foo(const N: usize)</code></p>",
        "id": 166550441,
        "sender_full_name": "centril",
        "timestamp": 1558830598
    },
    {
        "content": "<p>which is basically \"const generics but not an implicit argument\"</p>",
        "id": 166550493,
        "sender_full_name": "centril",
        "timestamp": 1558830618
    },
    {
        "content": "<p>oh, \"exposed to users\" not as in \"users can use this attribute\" but \"users can use methods that have that attribute\"... yeah that's sad :(</p>",
        "id": 166564350,
        "sender_full_name": "RalfJ",
        "timestamp": 1558857224
    },
    {
        "content": "<p>well, the alternative is to have a first class literal-arg.</p>",
        "id": 166569277,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558866597
    },
    {
        "content": "<p>And we need it to expose intrinsics</p>",
        "id": 166569323,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558866616
    },
    {
        "content": "<p>(and yes it is used in what will be <code>core::arch::altivec</code> :P)</p>",
        "id": 166569337,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558866677
    },
    {
        "content": "<p>what's the stabilization timeline on <code>core::arch::altivec</code>?</p>",
        "id": 166570077,
        "sender_full_name": "oli",
        "timestamp": 1558867971
    },
    {
        "content": "<p>like can this just wait on const generics?</p>",
        "id": 166570087,
        "sender_full_name": "oli",
        "timestamp": 1558867987
    },
    {
        "content": "<p>I can postpone those instructions</p>",
        "id": 166571184,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558870108
    },
    {
        "content": "<p>what's the const generics timeline?</p>",
        "id": 166571186,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1558870126
    },
    {
        "content": "<p>From current events I'd guess this year?</p>",
        "id": 166573126,
        "sender_full_name": "oli",
        "timestamp": 1558873877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> this was required for x86 SIMD on stable, so... without this \"hack\", we couldn't have stabilized SIMD last year</p>",
        "id": 166697925,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559035500
    },
    {
        "content": "<p>also const-generics wouldn't be enoug</p>",
        "id": 166697966,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559035529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I'm not complaining about the feature, I'm complaining about the lack of a story of how to get rid of the hack and have an actual feature that users can use, too</p>",
        "id": 166697996,
        "sender_full_name": "oli",
        "timestamp": 1559035559
    },
    {
        "content": "<blockquote>\n<p>also const-generics wouldn't be enoug</p>\n</blockquote>\n<p>please elaborate!</p>",
        "id": 166698061,
        "sender_full_name": "oli",
        "timestamp": 1559035579
    },
    {
        "content": "<p>the lang team was consulted, and the recommendation was to actually go with this attribute, because the features required only make sense designing after const-generics has been fully implemented and stabilized, so the timeline for what's required would be \"maybe start thinking about more const generics feature after const generics is stable\"</p>",
        "id": 166698064,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559035582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> these would need const function arguments</p>",
        "id": 166698083,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559035597
    },
    {
        "content": "<p>I don't understand, what's the difference?</p>",
        "id": 166698090,
        "sender_full_name": "oli",
        "timestamp": 1559035610
    },
    {
        "content": "<p>the same as between <code>impl Trait</code> in argument position and generics</p>",
        "id": 166698125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559035631
    },
    {
        "content": "<p>e.g. you can't <code>foo::&lt;3&gt;()</code> for example</p>",
        "id": 166698155,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559035649
    },
    {
        "content": "<p>you can <code>foo::&lt;{3}&gt;()</code>, right?</p>",
        "id": 166698178,
        "sender_full_name": "oli",
        "timestamp": 1559035671
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=587dde74a85e3762b9a03928e39d8547\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=587dde74a85e3762b9a03928e39d8547\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=587dde74a85e3762b9a03928e39d8547</a></p>",
        "id": 166698270,
        "sender_full_name": "oli",
        "timestamp": 1559035729
    },
    {
        "content": "<p>jup, that works</p>",
        "id": 166698299,
        "sender_full_name": "oli",
        "timestamp": 1559035751
    },
    {
        "content": "<p>oh, wait, now I understand</p>",
        "id": 166698412,
        "sender_full_name": "oli",
        "timestamp": 1559035833
    },
    {
        "content": "<p>you mean if we get argument position const generics, we can't specify those in generic brackets?</p>",
        "id": 166698434,
        "sender_full_name": "oli",
        "timestamp": 1559035856
    },
    {
        "content": "<p>I mean this all seems fairly reasonable, and I want it. But the lack of an RFC for a feature that is user visible and basically (due to backwards incompat rules) insta-stable forever, makes me uncomfortable.</p>",
        "id": 166698563,
        "sender_full_name": "oli",
        "timestamp": 1559035955
    },
    {
        "content": "<p>I don't see any problem with the current feature, but extending it so the arguments appear as constants inside the function is dangerous</p>",
        "id": 166698603,
        "sender_full_name": "oli",
        "timestamp": 1559035994
    },
    {
        "content": "<p>const generics is implemented far enough for an RFC to be written for argument position const generics, so I suggest to go down that route</p>",
        "id": 166698690,
        "sender_full_name": "oli",
        "timestamp": 1559036056
    },
    {
        "content": "<p>i mean that we need <code>fn foo(x: const usize)</code> which AFAICT needs supports for existential const generics</p>",
        "id": 166698762,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036134
    },
    {
        "content": "<p>the lang team argued _back then_ that it made little sense to design existential const types when const generics aren't even a thing</p>",
        "id": 166698880,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036218
    },
    {
        "content": "<p>if that changed, an RFC for that would be great</p>",
        "id": 166698999,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036300
    },
    {
        "content": "<blockquote>\n<p>I don't see any problem with the current feature, but extending it so the arguments appear as constants inside the function is dangerous</p>\n</blockquote>\n<p>I don't think anybody is requesting that. A user misunderstood what the feature should do, and filled an issue, but that has been clarified, and the issue can be closed.</p>",
        "id": 166699058,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036359
    },
    {
        "content": "<blockquote>\n<p>const generics is implemented far enough for an RFC to be written for argument position const generics, so I suggest to go down that route</p>\n</blockquote>\n<p>I suppose that an RFC for existential const types can be written now, e.g., exploring <code>fn foo(x: const usize);</code>, <code>fn bar() -&gt; const usize;</code>, etc. and proposing some feature that mixes well with the language</p>",
        "id": 166699182,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036444
    },
    {
        "content": "<p>how would argument position constants be different from const generics?</p>",
        "id": 166699216,
        "sender_full_name": "oli",
        "timestamp": 1559036477
    },
    {
        "content": "<p>arent's arguments universal (that's what I got from <code>impl Trait</code> at least)</p>",
        "id": 166699226,
        "sender_full_name": "oli",
        "timestamp": 1559036493
    },
    {
        "content": "<p>I understand that return position constants are a different story, but that doesn't need to be solved right now</p>",
        "id": 166699251,
        "sender_full_name": "oli",
        "timestamp": 1559036521
    },
    {
        "content": "<p>IIRC <code>impl Trait</code> is always an existential type, but in argument position it is isomorphic to a similar universally quantified type</p>",
        "id": 166699299,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036526
    },
    {
        "content": "<p>ah, yea, that argument</p>",
        "id": 166699314,
        "sender_full_name": "oli",
        "timestamp": 1559036551
    },
    {
        "content": "<p>i think <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> wrote something showing that</p>",
        "id": 166699316,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036554
    },
    {
        "content": "<p>I don't like it :P</p>",
        "id": 166699320,
        "sender_full_name": "oli",
        "timestamp": 1559036556
    },
    {
        "content": "<p>I held a presentation about that ;)</p>",
        "id": 166699332,
        "sender_full_name": "oli",
        "timestamp": 1559036577
    },
    {
        "content": "<p>in any case, maybe now it is the time for that feature, but stable SIMD shipped in Februrary last year, and this attribute was added like 6 months before, so back then, this attribute was the best solution we had</p>",
        "id": 166699363,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036609
    },
    {
        "content": "<p>it was also clear that this attribute should just error if an argument isn't const, and that's it. It was never intended to be \"const generic arguments\" or something like that, just something that allows us to change these APIs to use \"const generic arguments\" in a backward compatible way once those become available</p>",
        "id": 166699426,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> i think I wrote an RFC about const generic arguments back then, you might want to scavenge it ;)</p>",
        "id": 166699500,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036727
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> Still could use some documentation love in <a href=\"https://github.com/rust-lang/rust/blob/e70d5386d7abcf39adf54feb43a655c4f8a1bcb6/src/libsyntax/feature_gate.rs#L1465\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e70d5386d7abcf39adf54feb43a655c4f8a1bcb6/src/libsyntax/feature_gate.rs#L1465\">https://github.com/rust-lang/rust/blob/e70d5386d7abcf39adf54feb43a655c4f8a1bcb6/src/libsyntax/feature_gate.rs#L1465</a></p>",
        "id": 166699509,
        "sender_full_name": "oli",
        "timestamp": 1559036737
    },
    {
        "content": "<p>all it says there is \"will never be stable\" :D</p>",
        "id": 166699517,
        "sender_full_name": "oli",
        "timestamp": 1559036747
    },
    {
        "content": "<p>heh, I already have a const RFC open, one thing at a time</p>",
        "id": 166699602,
        "sender_full_name": "oli",
        "timestamp": 1559036794
    },
    {
        "content": "<p>that should be enough for those that need to use it :P in this case it wasn't, so i'm sorry that <span class=\"user-mention\" data-user-id=\"131070\">@Luca Barbato</span> wasted time on this, but I don't know if a comment there would have helped much</p>",
        "id": 166699637,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036826
    },
    {
        "content": "<p>we don't want to encourage anybody to use this, this is for libstd consumption only</p>",
        "id": 166699653,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> i thought the const RFC was already merged ?</p>",
        "id": 166699668,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036875
    },
    {
        "content": "<p>w/oboats one i mean</p>",
        "id": 166699693,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559036882
    },
    {
        "content": "<p>not sure which one you mean, but I'm talking about <a href=\"https://github.com/rust-lang/rfcs/pull/2632\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2632\">https://github.com/rust-lang/rfcs/pull/2632</a></p>",
        "id": 166699748,
        "sender_full_name": "oli",
        "timestamp": 1559036936
    },
    {
        "content": "<p>ah no, i meant this one: <a href=\"https://github.com/rust-lang/rfcs/pull/2000\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2000\">https://github.com/rust-lang/rfcs/pull/2000</a></p>",
        "id": 166699927,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037078
    },
    {
        "content": "<p>this has nothing to do with \"existential consts\"</p>",
        "id": 166699933,
        "sender_full_name": "centril",
        "timestamp": 1559037083
    },
    {
        "content": "<blockquote>\n<p>we don't want to encourage anybody to use this, this is for libstd consumption only</p>\n</blockquote>\n<p>yea, sorry about overreacting. It's just not been an easy feature to work with when changing things in the compiler's const qualifier.</p>",
        "id": 166699938,
        "sender_full_name": "oli",
        "timestamp": 1559037089
    },
    {
        "content": "<p>the only difference between <code>fn foo(const A: B)</code> and <code>fn foo&lt;const A: B&gt;()</code> is that the latter allows for value inference whereas the latter doesn't</p>",
        "id": 166700018,
        "sender_full_name": "centril",
        "timestamp": 1559037147
    },
    {
        "content": "<p>is the <code>const B</code> in the first one part of the function generic parameters ?</p>",
        "id": 166700072,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037215
    },
    {
        "content": "<p>to de-hack this we will therefore need to introduce <code>fn foo(const A: B)</code></p>",
        "id": 166700079,
        "sender_full_name": "centril",
        "timestamp": 1559037231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  I would suggest not thinking of this in terms of \"generic parameters\"</p>",
        "id": 166700131,
        "sender_full_name": "centril",
        "timestamp": 1559037248
    },
    {
        "content": "<p>we have implicit arguments and explicit arguments</p>",
        "id": 166700139,
        "sender_full_name": "centril",
        "timestamp": 1559037256
    },
    {
        "content": "<p>the things in <code>&lt;...&gt;</code> are implicit and the things in <code>(...)</code> are explicit</p>",
        "id": 166700144,
        "sender_full_name": "centril",
        "timestamp": 1559037269
    },
    {
        "content": "<p>Would <code>fn foo&lt;const A: B&gt;(const A: B)</code>work ?</p>",
        "id": 166700167,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  that would be like saying <code>fn foo(x: u8, x: u8)</code></p>",
        "id": 166700208,
        "sender_full_name": "centril",
        "timestamp": 1559037327
    },
    {
        "content": "<p>i.e. you are introducing <code>A</code> twice</p>",
        "id": 166700227,
        "sender_full_name": "centril",
        "timestamp": 1559037356
    },
    {
        "content": "<p>Maybe <code>fn foo&lt;const A: usize&gt;(x: A)</code></p>",
        "id": 166700285,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037367
    },
    {
        "content": "<p><code>A</code> is not a type so <code>x: A</code> is not well-formed</p>",
        "id": 166700320,
        "sender_full_name": "centril",
        "timestamp": 1559037397
    },
    {
        "content": "<p>The smart thing to do here would have been to introduce <code>fn foo&lt;const A: B&gt;()</code>  for these arguments but not put in place the inference</p>",
        "id": 166700389,
        "sender_full_name": "centril",
        "timestamp": 1559037454
    },
    {
        "content": "<p>so one has to pick between <code>fn foo&lt;const A: usize&gt;(); foo::&lt;3&gt;()</code>, and <code>fn foo(const x: usize); foo(3)</code>, but <code>foo::&lt;3&gt;(3);</code> is never a thing</p>",
        "id": 166700391,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037457
    },
    {
        "content": "<p>so that you have to specify as <code>foo::&lt;3&gt;()</code></p>",
        "id": 166700398,
        "sender_full_name": "centril",
        "timestamp": 1559037470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> well unless you have <code>fn foo&lt;const A: usize&gt;(const B: usize)</code></p>",
        "id": 166700466,
        "sender_full_name": "centril",
        "timestamp": 1559037516
    },
    {
        "content": "<p>there's no link between the 3 in the <code>&lt;..&gt;</code> and the 3 in the <code>(..)</code></p>",
        "id": 166700477,
        "sender_full_name": "centril",
        "timestamp": 1559037539
    },
    {
        "content": "<p>That makes A and B different - my point was about whether they can be the same</p>",
        "id": 166700505,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037562
    },
    {
        "content": "<p>like, say I want to create a <code>fn()-&gt;()</code> to a <code>fn foo(const A: usize)</code> where <code>A==3</code></p>",
        "id": 166700529,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037592
    },
    {
        "content": "<p><code>let ptr: fn(3)-&gt;() = foo::&lt;3&gt;();</code> would not work</p>",
        "id": 166700607,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037637
    },
    {
        "content": "<p><code>let ptr: fn() = foo::&lt;{3}&gt;();</code> should work out of the box I think</p>",
        "id": 166700639,
        "sender_full_name": "oli",
        "timestamp": 1559037673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> we don't have partial application</p>",
        "id": 166700659,
        "sender_full_name": "centril",
        "timestamp": 1559037699
    },
    {
        "content": "<p>but just like with impl trait in argument position, that won't work for const in arugment position</p>",
        "id": 166700661,
        "sender_full_name": "oli",
        "timestamp": 1559037704
    },
    {
        "content": "<p>which is what you'd need for htis</p>",
        "id": 166700664,
        "sender_full_name": "centril",
        "timestamp": 1559037707
    },
    {
        "content": "<p>@oli if <code>foo&lt;const A: usize&gt;();</code> yes, but if <code>foo(const A: usize);</code> then only if there is some link between <code>&lt;{3}&gt;</code> and <code>(...)</code></p>",
        "id": 166700666,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> we do for generics</p>",
        "id": 166700667,
        "sender_full_name": "oli",
        "timestamp": 1559037710
    },
    {
        "content": "<p>ah yes</p>",
        "id": 166700673,
        "sender_full_name": "oli",
        "timestamp": 1559037718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  no that's not partial application</p>",
        "id": 166700693,
        "sender_full_name": "centril",
        "timestamp": 1559037722
    },
    {
        "content": "<p>if we find a solution for impl trait in arg position we have a solution for const in arg position</p>",
        "id": 166700725,
        "sender_full_name": "oli",
        "timestamp": 1559037733
    },
    {
        "content": "<p>if you supply 1 argument to the <code>&lt;...&gt;</code> you must provide all</p>",
        "id": 166700728,
        "sender_full_name": "centril",
        "timestamp": 1559037738
    },
    {
        "content": "<p>it's exactly the same problem</p>",
        "id": 166700729,
        "sender_full_name": "oli",
        "timestamp": 1559037740
    },
    {
        "content": "<p>yes</p>",
        "id": 166700731,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037744
    },
    {
        "content": "<p>The difference between <code>&lt;...&gt;</code> and <code>(...)</code> is well studied in type theory really</p>",
        "id": 166700767,
        "sender_full_name": "centril",
        "timestamp": 1559037785
    },
    {
        "content": "<p>and the only difference is one of type inference</p>",
        "id": 166700780,
        "sender_full_name": "centril",
        "timestamp": 1559037806
    },
    {
        "content": "<p>so given that <code>fn foo&lt;const A: usize&gt;()</code> already exists, the question is how to extend that to <code>fn bar(const A: usize)</code>, such that one can still specify the <code>A</code> parameter for <code>bar</code></p>",
        "id": 166700796,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037828
    },
    {
        "content": "<p>or to decide that we don't want to support that at all</p>",
        "id": 166700848,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037846
    },
    {
        "content": "<p>we currently don't support that for <code>impl Trait</code></p>",
        "id": 166700858,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> we already have <code>fn bar(const A: usize)</code> in the type system</p>",
        "id": 166700873,
        "sender_full_name": "centril",
        "timestamp": 1559037877
    },
    {
        "content": "<p>just with weird syntax</p>",
        "id": 166700879,
        "sender_full_name": "centril",
        "timestamp": 1559037884
    },
    {
        "content": "<p>and you can already specify the <code>A</code> parameter for <code>bar</code></p>",
        "id": 166700907,
        "sender_full_name": "centril",
        "timestamp": 1559037917
    },
    {
        "content": "<p>that's why i said that this is a given</p>",
        "id": 166700913,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037924
    },
    {
        "content": "<p>this isn't related to impl Trait at all</p>",
        "id": 166700918,
        "sender_full_name": "varkor",
        "timestamp": 1559037932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> how would you pass the <code>A</code> parameter for <code>bar</code> ?</p>",
        "id": 166700926,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <code>bar(3)</code></p>",
        "id": 166700935,
        "sender_full_name": "centril",
        "timestamp": 1559037959
    },
    {
        "content": "<p>how do you take a function pointer to that ?</p>",
        "id": 166700985,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559037970
    },
    {
        "content": "<p>I think the only difference is whether parameters can be inferred or not, as <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> says</p>",
        "id": 166700987,
        "sender_full_name": "varkor",
        "timestamp": 1559037975
    },
    {
        "content": "<p>although if you need pointers too...</p>",
        "id": 166701004,
        "sender_full_name": "varkor",
        "timestamp": 1559038000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <code>bar(3)</code> passes the parameter to bar, and calls it</p>",
        "id": 166701012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <code>let x: fn(const A: usize) = bar;</code></p>",
        "id": 166701017,
        "sender_full_name": "centril",
        "timestamp": 1559038012
    },
    {
        "content": "<p>that's different from just passing the parameter to bar</p>",
        "id": 166701027,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038018
    },
    {
        "content": "<p>as I said, we don't have partial application</p>",
        "id": 166701055,
        "sender_full_name": "centril",
        "timestamp": 1559038032
    },
    {
        "content": "<p>do you need a pointer to a function with a specific value?</p>",
        "id": 166701060,
        "sender_full_name": "varkor",
        "timestamp": 1559038043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I think that's what they want</p>",
        "id": 166701080,
        "sender_full_name": "centril",
        "timestamp": 1559038076
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28eae3d99eef208f35b54448607c792a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28eae3d99eef208f35b54448607c792a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28eae3d99eef208f35b54448607c792a</a></p>",
        "id": 166701141,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038101
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_ptr</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166701150,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038112
    },
    {
        "content": "<p>that works today</p>",
        "id": 166701153,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> yes because that's in the <code>&lt;...&gt;</code></p>",
        "id": 166701170,
        "sender_full_name": "centril",
        "timestamp": 1559038135
    },
    {
        "content": "<p>you shouldn't be allowed to take a function pointer of <code>fn(const)</code></p>",
        "id": 166701188,
        "sender_full_name": "kennytm",
        "timestamp": 1559038147
    },
    {
        "content": "<p>exactly, and my question is, should (...) forbid you from doing that ?</p>",
        "id": 166701190,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038152
    },
    {
        "content": "<p>if you write <code>fn foo(x: usize)</code> we don't allow you to partially apply <code>foo</code> either</p>",
        "id": 166701192,
        "sender_full_name": "centril",
        "timestamp": 1559038153
    },
    {
        "content": "<p>that's a big different between ITAP and generics</p>",
        "id": 166701201,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038174
    },
    {
        "content": "<p>ITAP?</p>",
        "id": 166701210,
        "sender_full_name": "centril",
        "timestamp": 1559038181
    },
    {
        "content": "<p>impl trait in argument position</p>",
        "id": 166701216,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038188
    },
    {
        "content": "<p>APIT</p>",
        "id": 166701217,
        "sender_full_name": "varkor",
        "timestamp": 1559038189
    },
    {
        "content": "<p>APIT <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 166701219,
        "sender_full_name": "kennytm",
        "timestamp": 1559038192
    },
    {
        "content": "<p>:P</p>",
        "id": 166701225,
        "sender_full_name": "varkor",
        "timestamp": 1559038196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> damn you! :P</p>",
        "id": 166701226,
        "sender_full_name": "centril",
        "timestamp": 1559038198
    },
    {
        "content": "<p>you don't need the ability to partially apply explicit const generic parameters to have <code>#[rustc_whatever_it_was_named]</code> be removed</p>",
        "id": 166701305,
        "sender_full_name": "centril",
        "timestamp": 1559038243
    },
    {
        "content": "<p>that's correct</p>",
        "id": 166701428,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038381
    },
    {
        "content": "<p>an RFC for adding a feature to allow <code>#[rustc_whatever]</code> to be removed might need to argue that this is not required, desired, a future compatible extension, etc.</p>",
        "id": 166701469,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038424
    },
    {
        "content": "<p>maybe; it is not expected by any type theory I know of</p>",
        "id": 166701541,
        "sender_full_name": "centril",
        "timestamp": 1559038484
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/pre-rfc-const-function-arguments/6709\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-const-function-arguments/6709\">https://internals.rust-lang.org/t/pre-rfc-const-function-arguments/6709</a></p>",
        "id": 166701582,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038512
    },
    {
        "content": "<p>that one argues that this is not supported</p>",
        "id": 166701587,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038522
    },
    {
        "content": "<p><code>#[rustc_args_required_const]</code> already forbids taking a function pointer (\"this function can only be invoked directly, not through a function pointer\"). i don't see any controversy disallowing <code>fn(const)</code> pointers</p>",
        "id": 166701688,
        "sender_full_name": "kennytm",
        "timestamp": 1559038605
    },
    {
        "content": "<p>An RFC today would probably need to discuss <code>fn foo() -&gt; const usize</code> as well</p>",
        "id": 166701800,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038698
    },
    {
        "content": "<p>At least say that this is out-of-scope for the RFC</p>",
        "id": 166701812,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038720
    },
    {
        "content": "<p>why would you want to return a const?</p>",
        "id": 166701843,
        "sender_full_name": "varkor",
        "timestamp": 1559038746
    },
    {
        "content": "<p>why not just use <code>const X: usize = { .. };</code>?</p>",
        "id": 166701855,
        "sender_full_name": "varkor",
        "timestamp": 1559038756
    },
    {
        "content": "<p>or rather to rephrase: why do you want to require that the return value be a compile time value?</p>",
        "id": 166701876,
        "sender_full_name": "centril",
        "timestamp": 1559038790
    },
    {
        "content": "<p>(similarly, you cannot return lifetimes — so the generic parameters a function takes as input doesn't have to line up with the output)</p>",
        "id": 166701878,
        "sender_full_name": "varkor",
        "timestamp": 1559038794
    },
    {
        "content": "<p>if you want to have the possibility, use <code>const fn</code></p>",
        "id": 166701886,
        "sender_full_name": "centril",
        "timestamp": 1559038802
    },
    {
        "content": "<p>are we talking about <code>fn x(const y: usize)</code> (<code>const</code> applied to arg) or <code>fn x(y: const usize)</code> (<code>const</code> applied to type)</p>",
        "id": 166701946,
        "sender_full_name": "kennytm",
        "timestamp": 1559038819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span>  they are functionally equivalent, no?</p>",
        "id": 166701974,
        "sender_full_name": "centril",
        "timestamp": 1559038847
    },
    {
        "content": "<p>@varkor &gt;why would you want to return a const?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">init_buffer</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MIN_BUFF_SIZE</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)...;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">...</span><span class=\"n\">alloc</span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MIN_BUFF_SIZE</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>maybe</p>",
        "id": 166701978,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559038849
    },
    {
        "content": "<p>unless you try to do <code>fn foo(x: (const u8, String))</code></p>",
        "id": 166702012,
        "sender_full_name": "centril",
        "timestamp": 1559038874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> the implication of latter is more powerful <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 166702033,
        "sender_full_name": "kennytm",
        "timestamp": 1559038911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> yea it is</p>",
        "id": 166702083,
        "sender_full_name": "centril",
        "timestamp": 1559038925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> and I discussed it a bunch</p>",
        "id": 166702091,
        "sender_full_name": "centril",
        "timestamp": 1559038935
    },
    {
        "content": "<p>we got into some category theory and talked about functors iirc</p>",
        "id": 166702094,
        "sender_full_name": "centril",
        "timestamp": 1559038952
    },
    {
        "content": "<p>meanwhile the former is just a nicer form of <code>#[rustc_args_required_const]</code></p>",
        "id": 166702137,
        "sender_full_name": "kennytm",
        "timestamp": 1559039012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> one might imagine <code>fn foo&lt;T: const usize&gt;(...)</code> and <code>fn foo&lt;T: usize&gt;(...)</code> converesely</p>",
        "id": 166702216,
        "sender_full_name": "centril",
        "timestamp": 1559039059
    },
    {
        "content": "<p>dependent types <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 166702222,
        "sender_full_name": "centril",
        "timestamp": 1559039067
    },
    {
        "content": "<blockquote>\n<p>IIRC <code>impl Trait</code> is always an existential type, but in argument position it is isomorphic to a similar universally quantified type</p>\n</blockquote>\n<p>that's actually quite nice, somehow this had not occurred to me even though I otherwise use that isomorphism all the time :)</p>",
        "id": 166702483,
        "sender_full_name": "RalfJ",
        "timestamp": 1559039299
    },
    {
        "content": "<p>though the question remains... and now I have a deja-vu, I feel I discussed this at some point but not sure in which context... when you start nesting things, like <code>fn foo(fn(impl Trait) -&gt; impl Trait)</code>, the \"proper\" thing you'd expect is that the existentials are like <code>fn foo(fn(exists T: Trait, T) -&gt; (exists T: Trait, T))</code>.</p>",
        "id": 166702545,
        "sender_full_name": "RalfJ",
        "timestamp": 1559039396
    },
    {
        "content": "<p>but I guess in Rust it translates to <code>fn foo(exists (T1: Trait) (T2: Trait), fn(T1) -&gt; T2)</code>. which is not the same.</p>",
        "id": 166702610,
        "sender_full_name": "RalfJ",
        "timestamp": 1559039428
    },
    {
        "content": "<p>It should be equivalent to (using the isomorphism): <code>exists A: Trait. forall B: Trait. fn foo(fn(A) -&gt; B)</code></p>",
        "id": 166702691,
        "sender_full_name": "centril",
        "timestamp": 1559039516
    },
    {
        "content": "<p>no</p>",
        "id": 166702814,
        "sender_full_name": "RalfJ",
        "timestamp": 1559039588
    },
    {
        "content": "<p>it is equivalent to <code>fn foo(forall A: Trait, fn(A) -&gt; (exists B: Trait, B))</code></p>",
        "id": 166702830,
        "sender_full_name": "RalfJ",
        "timestamp": 1559039609
    },
    {
        "content": "<p>actually... it is not clear what this means because of function pointers</p>",
        "id": 166702839,
        "sender_full_name": "centril",
        "timestamp": 1559039615
    },
    {
        "content": "<p>which is not representable in Rust</p>",
        "id": 166702846,
        "sender_full_name": "RalfJ",
        "timestamp": 1559039627
    },
    {
        "content": "<p>though if we think of the <code>Fn</code> trait instead, if we had higher-ranked trait bounds for types, we could write</p>\n<div class=\"codehilite\"><pre><span></span>fn foo&lt;F: for &lt;T: Trait&gt; Fn(T) -&gt; impl U&gt;(f: F)\n</pre></div>\n\n\n<p>not sure if the <code>U</code> part would work though^^</p>",
        "id": 166702922,
        "sender_full_name": "RalfJ",
        "timestamp": 1559039698
    },
    {
        "content": "<p>where did you get the U from?</p>",
        "id": 166703164,
        "sender_full_name": "centril",
        "timestamp": 1559039938
    },
    {
        "content": "<p>(this is probably a different thread tho)</p>",
        "id": 166703180,
        "sender_full_name": "centril",
        "timestamp": 1559039950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> would you be willing to champion an RFC of the form of the internal one, for adding const function arguments support (only, no return type, no way to specify types via <code>&lt;...&gt;</code> for <code>(...)</code> arguments, etc. ?</p>",
        "id": 166704423,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  champion as in write it up?</p>",
        "id": 166704453,
        "sender_full_name": "centril",
        "timestamp": 1559041157
    },
    {
        "content": "<p>no, champion as in \"help\" pushing it through the process. That is, I'll update and improve the internals one, send a github link to you, maybe <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> and <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> for initial feedback, proof reading, etc. and then once that looks good, submit it as a PR to the RFC repo</p>",
        "id": 166704543,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041230
    },
    {
        "content": "<p>but i don't think we should do any of that if there is no interest in tackling this issue in the next months by the lang team</p>",
        "id": 166704561,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041256
    },
    {
        "content": "<p>There probably isn't -- I think we should see to RFC 2000 (const generics) first before doing any extensions -- also, it is the \"maturity\" year</p>",
        "id": 166704599,
        "sender_full_name": "centril",
        "timestamp": 1559041306
    },
    {
        "content": "<p>I've almost stopped all new language design</p>",
        "id": 166704607,
        "sender_full_name": "centril",
        "timestamp": 1559041316
    },
    {
        "content": "<p>so by champion i mean, \"facilitator\" (is that the new term?) - pinging the appropriate team, making sure that either there is progress, or that it is clear why there isn't, so that something can be done about it (or just postpone)</p>",
        "id": 166704609,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041319
    },
    {
        "content": "<p>so, this is precisely why <code>#[rustc_whatever_const_arg]</code> exists</p>",
        "id": 166704678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041352
    },
    {
        "content": "<p>you could have done other hacks which would have relied on <code>&lt;..&gt;</code> instead of <code>(...)</code></p>",
        "id": 166704711,
        "sender_full_name": "centril",
        "timestamp": 1559041388
    },
    {
        "content": "<p>that wouldn't have allowed us to match the C intrinsics</p>",
        "id": 166704725,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041413
    },
    {
        "content": "<p>e.g. always emit \"ambiguous type\"</p>",
        "id": 166704726,
        "sender_full_name": "centril",
        "timestamp": 1559041415
    },
    {
        "content": "<p>being able to call <code>foo(...)</code> was a requirement, instead of <code>foo::&lt;{ ... }&gt;(...)</code></p>",
        "id": 166704743,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> why is that a requirement?</p>",
        "id": 166704753,
        "sender_full_name": "centril",
        "timestamp": 1559041442
    },
    {
        "content": "<p>we RFC'ed that the C intrinsics should look like.. well.. C</p>",
        "id": 166704801,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041463
    },
    {
        "content": "<p>C does not have \"generics\", turbofish, etc.</p>",
        "id": 166704826,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041494
    },
    {
        "content": "<p>seems unimportant to me that you should be able to call them as <code>(...)</code> instead of <code>&lt;...&gt;</code> if that complicates the type theory</p>",
        "id": 166704848,
        "sender_full_name": "centril",
        "timestamp": 1559041508
    },
    {
        "content": "<p>it doesn't have const generics, overloading, etc. either - all C compilers make these builtins</p>",
        "id": 166704853,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041511
    },
    {
        "content": "<p>yeah, not important</p>",
        "id": 166704858,
        "sender_full_name": "centril",
        "timestamp": 1559041518
    },
    {
        "content": "<p>i didn't rfc'ed that</p>",
        "id": 166704864,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041527
    },
    {
        "content": "<p>i was just working within the rfc'ed constraints, and that was a constrait: we don't change the API of the intrinsics</p>",
        "id": 166704886,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041556
    },
    {
        "content": "<p>I think the thing one should care about is discoverability and having the actual hardware capabilities</p>",
        "id": 166704893,
        "sender_full_name": "centril",
        "timestamp": 1559041561
    },
    {
        "content": "<p>there is zero Rust documentation about the 5000 intrinsics that we expose today</p>",
        "id": 166704955,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041579
    },
    {
        "content": "<p>the simd intrinsics are not ergonomic in any case</p>",
        "id": 166704956,
        "sender_full_name": "centril",
        "timestamp": 1559041580
    },
    {
        "content": "<p>so being able to reuse the C documentation, was considered very valuable</p>",
        "id": 166704964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041591
    },
    {
        "content": "<p>IIRC, that was the main reason, the second main reason was not doing any new API design, because if we have to do API design for the 10000 intrinsics that are in the list, that would take forever</p>",
        "id": 166705000,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041644
    },
    {
        "content": "<p>and each new API design would need to be reviewed, RFC, manually verified, etc.</p>",
        "id": 166705012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041664
    },
    {
        "content": "<p>I think it would be fairly easy to communicate that the sole <code>&lt;const: A: B&gt;</code> parameter is the one that corresponds to the C one in all cases</p>",
        "id": 166705015,
        "sender_full_name": "centril",
        "timestamp": 1559041673
    },
    {
        "content": "<p>and you could do this translation mechanically</p>",
        "id": 166705020,
        "sender_full_name": "centril",
        "timestamp": 1559041680
    },
    {
        "content": "<p>some intrinsics take multiple <code>const</code> argument IIRC</p>",
        "id": 166705069,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041705
    },
    {
        "content": "<blockquote>\n<p>and each new API design would need to be reviewed, RFC, manually verified, etc.</p>\n</blockquote>\n<p>I don't see why... just shuffle any const argument to be in <code>&lt;..&gt;</code></p>",
        "id": 166705071,
        "sender_full_name": "centril",
        "timestamp": 1559041708
    },
    {
        "content": "<p>OK; then do them in order, left to right</p>",
        "id": 166705079,
        "sender_full_name": "centril",
        "timestamp": 1559041716
    },
    {
        "content": "<p>I'm not saying it is impossible, i'm saying, that's what was RFCed</p>",
        "id": 166705091,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041737
    },
    {
        "content": "<p>complicating the type theory for some vague \"should be like C\" benefits seems like not taking complexity in the type theory seriously enough</p>",
        "id": 166705112,
        "sender_full_name": "centril",
        "timestamp": 1559041758
    },
    {
        "content": "<p>Yeah I understand</p>",
        "id": 166705117,
        "sender_full_name": "centril",
        "timestamp": 1559041765
    },
    {
        "content": "<p>and back then, nobody rejected <code>#[rustc_const_arg_...]</code> either, because const function arguments seemed worth doing anyways</p>",
        "id": 166705118,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041767
    },
    {
        "content": "<p>so it wasn't that const function arguments weren't explored either _before_ adding <code>#[rustc_const_arg]</code></p>",
        "id": 166705134,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041794
    },
    {
        "content": "<p>nobody suggested using <code>&lt;...&gt;</code> instead of <code>(...)</code></p>",
        "id": 166705196,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041818
    },
    {
        "content": "<blockquote>\n<p>because const function arguments seemed worth doing anyways</p>\n</blockquote>\n<p>I hope this turns out to be true...</p>",
        "id": 166705197,
        "sender_full_name": "centril",
        "timestamp": 1559041822
    },
    {
        "content": "<p>would be pretty sad to have <code>#[rustc_const_arg...]</code> forever</p>",
        "id": 166705207,
        "sender_full_name": "centril",
        "timestamp": 1559041844
    },
    {
        "content": "<p>there are some intrinsics that we can't implement right now because it isn't</p>",
        "id": 166705209,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041848
    },
    {
        "content": "<p>so i hope so too</p>",
        "id": 166705257,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041905
    },
    {
        "content": "<p>\"because it isn't\" it isn't what?</p>",
        "id": 166705348,
        "sender_full_name": "RalfJ",
        "timestamp": 1559041971
    },
    {
        "content": "<p>because it isn't a true const</p>",
        "id": 166705363,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041986
    },
    {
        "content": "<p>just a lint</p>",
        "id": 166705366,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559041990
    },
    {
        "content": "<p>as in, <code>#[rustc_const_arg(N)]</code> is only a lint, so some intrinsics cannot be implemented right now with it</p>",
        "id": 166705390,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559042033
    },
    {
        "content": "<p>I do think it's a shame that this was stabilised like this, rather than as const generics, as it's essentially just a less powerful version with different syntax... but if it hadn't been, it would have had to remain unstable for a lot longer, because of const generics<br>\n(though we could probably just have used the CG syntax without true CGs...)</p>",
        "id": 166705815,
        "sender_full_name": "varkor",
        "timestamp": 1559042399
    },
    {
        "content": "<p>I don't see any reason to make this feature available to users, though, because as far as I see, it's completely subsumed by CGs</p>",
        "id": 166706065,
        "sender_full_name": "varkor",
        "timestamp": 1559042613
    },
    {
        "content": "<p>the only difference being whether the arguments can be inferred or not</p>",
        "id": 166706080,
        "sender_full_name": "varkor",
        "timestamp": 1559042631
    },
    {
        "content": "<p>Then the fix for these would actually be not to add a \"const function arguments\" feature, but to keep <code>#[rustc_const_arg]</code> forever and extend it to make those arguments actually implicitly const generic \"somehow\"</p>",
        "id": 166706274,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559042793
    },
    {
        "content": "<p>many intrinsics can be implemented without doing this, but doing it that way has a big cost, and the intrinsics that cannot be implemented with this today, aren't implemented not because writing the code is impossible, but because doing so makes compile-times explode</p>",
        "id": 166706340,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559042865
    },
    {
        "content": "<p>last time we tested, the compilation time of the standard library increased by ~10min per each time one of these intrinsics is used</p>",
        "id": 166706401,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559042898
    },
    {
        "content": "<p>so if you call them 4 times in the std library, you bump the compilation time of libstd by 40 minutes</p>",
        "id": 166706425,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559042919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> Agda and Idris both have <code>{A: Type}</code>and <code>(A: Type)</code> so it doesn't seem strange to me</p>",
        "id": 166706432,
        "sender_full_name": "centril",
        "timestamp": 1559042930
    },
    {
        "content": "<p>being able to pick whether something should be inferrable or not seems like a nice thing to give users</p>",
        "id": 166706564,
        "sender_full_name": "centril",
        "timestamp": 1559043009
    },
    {
        "content": "<p>users can't build abstractions on top of these intrinsics today</p>",
        "id": 166706589,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>: if we want to control inference specifically, it should be extended to all parameters, not just consts</p>",
        "id": 166706594,
        "sender_full_name": "varkor",
        "timestamp": 1559043037
    },
    {
        "content": "<p>and they wouldn't be able to do this even if const generics was stable</p>",
        "id": 166706600,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I mean... I agree that <code>fn foo(A: type)</code> would be nice</p>",
        "id": 166706607,
        "sender_full_name": "centril",
        "timestamp": 1559043059
    },
    {
        "content": "<p>also, it's not the same as Agda, etc. because you have an additional compile-time requirement</p>",
        "id": 166706609,
        "sender_full_name": "varkor",
        "timestamp": 1559043061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> but I don't think we have to do \"all or nothing\"</p>",
        "id": 166706657,
        "sender_full_name": "centril",
        "timestamp": 1559043109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>: we might be able to retroactively change that, so the syntax is just sugar for const generics, which would allow them to interact nicely</p>",
        "id": 166706663,
        "sender_full_name": "varkor",
        "timestamp": 1559043113
    },
    {
        "content": "<p>its sad having to add this feature just for this</p>",
        "id": 166706716,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>: it's possibly less useful though</p>",
        "id": 166706721,
        "sender_full_name": "varkor",
        "timestamp": 1559043137
    },
    {
        "content": "<p>(though maybe still valuable)</p>",
        "id": 166706729,
        "sender_full_name": "varkor",
        "timestamp": 1559043155
    },
    {
        "content": "<p>removing the <code>#[rustc_const_arg]</code> hack through <code>const A: B</code> seems like a useful intermediary step</p>",
        "id": 166706730,
        "sender_full_name": "centril",
        "timestamp": 1559043160
    },
    {
        "content": "<p>one advantage is not having to write the <code>::&lt;{ ... }&gt;</code>, but i wish we could gain that independently of whether const generics are used or \"this\"</p>",
        "id": 166706733,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043163
    },
    {
        "content": "<p>i mean, if we provide <code>(...)</code>, why would a user write const generics ?</p>",
        "id": 166706775,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043193
    },
    {
        "content": "<p>(that would be nicer without turbofish <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span>)</p>",
        "id": 166706776,
        "sender_full_name": "varkor",
        "timestamp": 1559043193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  it's still const generics</p>",
        "id": 166706788,
        "sender_full_name": "centril",
        "timestamp": 1559043213
    },
    {
        "content": "<p>we've essentially just got two ways of writing the same thing now</p>",
        "id": 166706797,
        "sender_full_name": "varkor",
        "timestamp": 1559043233
    },
    {
        "content": "<p>the only difference is inference/no</p>",
        "id": 166706798,
        "sender_full_name": "centril",
        "timestamp": 1559043233
    },
    {
        "content": "<p>If we provide <code>fn foo(const X: T);</code> why would anyone prefer <code>fn foo&lt;const X: T&gt;()</code> instead ?</p>",
        "id": 166706802,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> cause you get inference</p>",
        "id": 166706855,
        "sender_full_name": "centril",
        "timestamp": 1559043247
    },
    {
        "content": "<p>so that's useful, but why wouldn't you be able to get inference with <code>const X: T</code> syntax as well ?</p>",
        "id": 166706874,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043277
    },
    {
        "content": "<p>e.g. <code>fn foo(const X: usize) where  X == 0 { .. }</code></p>",
        "id": 166706898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043293
    },
    {
        "content": "<p>I'd find the trade-off: const-generics: inference but <code>{...}</code>-syntax vs const-arg: no-inference but nice-syntax unnecessary</p>",
        "id": 166707012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043383
    },
    {
        "content": "<p>cause that's what you have with <code>(...)</code></p>",
        "id": 166707172,
        "sender_full_name": "centril",
        "timestamp": 1559043541
    },
    {
        "content": "<p>Sure, I just think it is sub-optimal to have to make that choice</p>",
        "id": 166707192,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043565
    },
    {
        "content": "<p>this is the problem</p>",
        "id": 166707201,
        "sender_full_name": "varkor",
        "timestamp": 1559043576
    },
    {
        "content": "<p>we now have two syntaxes, and the \"proper\" one looks uglier</p>",
        "id": 166707213,
        "sender_full_name": "varkor",
        "timestamp": 1559043595
    },
    {
        "content": "<p>yeah :/</p>",
        "id": 166707267,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043611
    },
    {
        "content": "<p>well it's two syntaxes for two different things</p>",
        "id": 166707272,
        "sender_full_name": "centril",
        "timestamp": 1559043615
    },
    {
        "content": "<p>slightly-different things</p>",
        "id": 166707289,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043635
    },
    {
        "content": "<p>being able to force non-inference is useful</p>",
        "id": 166707296,
        "sender_full_name": "centril",
        "timestamp": 1559043645
    },
    {
        "content": "<p>\"I really want people to specify things explicitly here\"</p>",
        "id": 166707315,
        "sender_full_name": "centril",
        "timestamp": 1559043664
    },
    {
        "content": "<p>can we get inference + being able to use the type in where clauses, bounds, etc. ?</p>",
        "id": 166707326,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043683
    },
    {
        "content": "<p>e.g., <code>fn foo&lt;A: [i32; N]&gt;(const N: usize, x: Vec&lt;A&gt;) where N &gt; 0, A: SomeTrait -&gt; A { ... }</code> ?</p>",
        "id": 166707347,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043708
    },
    {
        "content": "<p>I mean you can assign that meaning to that syntax if you want</p>",
        "id": 166707421,
        "sender_full_name": "centril",
        "timestamp": 1559043762
    },
    {
        "content": "<p>it's surprising tho.</p>",
        "id": 166707425,
        "sender_full_name": "centril",
        "timestamp": 1559043767
    },
    {
        "content": "<p>if we were to do that, the only reason for an user to prefer <code>fn foo&lt;const X: usize&gt;()</code> over <code>fn bar(const X: usize)</code> is \"i explicitly want to forbid inference\"</p>",
        "id": 166707471,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043841
    },
    {
        "content": "<p>that's sometimes desirable, but most of the time APIs with  inference are more appropriate</p>",
        "id": 166707585,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559043904
    },
    {
        "content": "<p><code>&lt;A: [i32; N]&gt;</code> presumably is runtime dependent typing</p>",
        "id": 166707593,
        "sender_full_name": "centril",
        "timestamp": 1559043909
    },
    {
        "content": "<p>no, i screwed the type signature up, what i meant is:</p>\n<p><code>fn foo&lt;A&gt;(const N: usize, x: B&lt;N&gt;, z: A) where N &gt; 0 , A: SomeTrait&lt;N&gt; -&gt; C&lt;N&gt; { ... }</code></p>",
        "id": 166707729,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559044031
    },
    {
        "content": "<p>so that <code>N</code> is inferred, but it still can be used in where clauses / trait bounds, etc.</p>",
        "id": 166707748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559044059
    },
    {
        "content": "<p>Aside: <code>where N &gt; 0 , A: SomeTrait&lt;N&gt; -&gt; C&lt;N&gt;</code> &lt;-- that's going to be fun in terms of parser ambiguity</p>",
        "id": 166707889,
        "sender_full_name": "centril",
        "timestamp": 1559044143
    },
    {
        "content": "<p>if we were to allow this, <code>fn foo&lt;const X: usize&gt;()</code> would become super rare, and so would having to write <code>{ ... }</code> when passing const generics to functions in function calls</p>",
        "id": 166707900,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559044148
    },
    {
        "content": "<p>so it isn't necessarily a bad thing</p>",
        "id": 166707909,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559044162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> we could have <code>where { N &gt; 0 }</code></p>",
        "id": 166707925,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559044182
    },
    {
        "content": "<p>yeah</p>",
        "id": 166708005,
        "sender_full_name": "centril",
        "timestamp": 1559044228
    },
    {
        "content": "<p><code>where N &gt; 0 , A: Fn() -&gt; C&lt;N&gt;</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 166708021,
        "sender_full_name": "centril",
        "timestamp": 1559044244
    },
    {
        "content": "<p>(you can pick a parse, so it's not so bad)</p>",
        "id": 166708053,
        "sender_full_name": "centril",
        "timestamp": 1559044268
    },
    {
        "content": "<p>it seems that here it is just better to wait for stable const generics, and then re-consider this as something to build on top of that</p>",
        "id": 166708283,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559044465
    },
    {
        "content": "<p>re. inference: it's not clear that not inferring the arguments is an intentional decision, rather than just being easier to implement</p>",
        "id": 166711270,
        "sender_full_name": "varkor",
        "timestamp": 1559046863
    },
    {
        "content": "<p>in which case it's an implementation limitation and should hence be equivalent exactly to const generics</p>",
        "id": 166711305,
        "sender_full_name": "varkor",
        "timestamp": 1559046889
    },
    {
        "content": "<p>The distinction between <code>&lt;..&gt;</code> and <code>(..)</code> in terms of inference seems clear to me at least</p>",
        "id": 166711491,
        "sender_full_name": "centril",
        "timestamp": 1559047051
    },
    {
        "content": "<p>it's very much intentional in Agda/Idris</p>",
        "id": 166711497,
        "sender_full_name": "centril",
        "timestamp": 1559047064
    },
    {
        "content": "<p>TBH I always viewed <code>&lt;...&gt;</code> vs <code>(...)</code> as compile-time vs run-time</p>",
        "id": 166711913,
        "sender_full_name": "RalfJ",
        "timestamp": 1559047413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>: yes, but this isn't Agda</p>",
        "id": 166711932,
        "sender_full_name": "varkor",
        "timestamp": 1559047431
    },
    {
        "content": "<p>and not as having anything to do with implicit/explicit arguments in agda/idris (coq has them too and I assume they are similar)</p>",
        "id": 166711934,
        "sender_full_name": "RalfJ",
        "timestamp": 1559047433
    },
    {
        "content": "<p>it's a coïncidence here</p>",
        "id": 166711937,
        "sender_full_name": "varkor",
        "timestamp": 1559047439
    },
    {
        "content": "<p>I also prefer to draw the distinction at <code>&lt;...&gt;</code> holding static / compile time parameters and arguments while <code>(...)</code> hold dynamic / run time ones. I understand that Centril would like to eliminate this distinction but current and historical Rust does have it and I don't see any consensus that should definitely change. With that in mind the presence vs absence of inference seems subordinate to me, a byproduct of type inference (for Rust's type system) being a neatly solved problem while expression synthesis is much more difficult.</p>",
        "id": 166711981,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559047446
    },
    {
        "content": "<p>basically, what <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> said :)</p>",
        "id": 166711998,
        "sender_full_name": "RalfJ",
        "timestamp": 1559047471
    },
    {
        "content": "<p>I prefer thinking about the compile time distinction too</p>",
        "id": 166712006,
        "sender_full_name": "varkor",
        "timestamp": 1559047479
    },
    {
        "content": "<p>If we allow <code>(const A: B)</code> then that compiletime/runtime distinction goes away</p>",
        "id": 166712029,
        "sender_full_name": "centril",
        "timestamp": 1559047497
    },
    {
        "content": "<p>I think we should treat that as a mistake</p>",
        "id": 166712059,
        "sender_full_name": "varkor",
        "timestamp": 1559047523
    },
    {
        "content": "<p>or \"FFI sugar\"</p>",
        "id": 166712068,
        "sender_full_name": "varkor",
        "timestamp": 1559047535
    },
    {
        "content": "<p>and not propagate it further</p>",
        "id": 166712097,
        "sender_full_name": "varkor",
        "timestamp": 1559047551
    },
    {
        "content": "<p>I personally don't find the compile-time/run-time distinction important nor useful pedagogically, especially when <code>const</code> itself helps to qualify things</p>",
        "id": 166712182,
        "sender_full_name": "centril",
        "timestamp": 1559047606
    },
    {
        "content": "<p>It's also not clear to me why the inference aspect is subordinate to the staging aspect</p>",
        "id": 166712314,
        "sender_full_name": "centril",
        "timestamp": 1559047702
    },
    {
        "content": "<p>Having one argument list just for compile time arguments and a separate one for run time arguments has the advantage that one doesn't need (to worry about) partial application to nail down the compile time parts and get e.g. a function pointer.</p>",
        "id": 166712316,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559047706
    },
    {
        "content": "<p>We don't have partial application for either part</p>",
        "id": 166712365,
        "sender_full_name": "centril",
        "timestamp": 1559047752
    },
    {
        "content": "<p>From what <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> says, having <code>(const A: B)</code> with or without seems like a necessity for some of the intrinsics</p>",
        "id": 166712506,
        "sender_full_name": "centril",
        "timestamp": 1559047846
    },
    {
        "content": "<p>that, or we use <code>&lt;...&gt;</code> for some of the intrinsics</p>",
        "id": 166712550,
        "sender_full_name": "centril",
        "timestamp": 1559047879
    },
    {
        "content": "<p>well we have \"apply all the compile-time things but none of the run-time things\"</p>",
        "id": 166712553,
        "sender_full_name": "RalfJ",
        "timestamp": 1559047885
    },
    {
        "content": "<p>which is partial application if we start mixing those</p>",
        "id": 166712562,
        "sender_full_name": "RalfJ",
        "timestamp": 1559047891
    },
    {
        "content": "<p>I thought we established partial application was not necessary</p>",
        "id": 166712564,
        "sender_full_name": "varkor",
        "timestamp": 1559047894
    },
    {
        "content": "<p>I also find this exact distinction extremely helpful pedagogically</p>",
        "id": 166712584,
        "sender_full_name": "RalfJ",
        "timestamp": 1559047907
    },
    {
        "content": "<p>Yes I was getting at what <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> said: we can currently go from <code>fn foo&lt;...&gt;(...) -&gt; R</code> to a <code>fn(...) -&gt; R</code> by supplying everything for the <code>&lt;...&gt;</code>. If you intermingle the statically-given parts in the <code>(...)</code> as well, there's no nice way to specify the static parts and get a monomorphic function without partial application.</p>",
        "id": 166712668,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559047944
    },
    {
        "content": "<p>You don't have partial application within either of the lists</p>",
        "id": 166712672,
        "sender_full_name": "centril",
        "timestamp": 1559047950
    },
    {
        "content": "<p>Yes? I know that. I'm saying is we can do a useful thing now <em>without</em> having partial application, <em>because</em> there are two separate argument lists you can fill in entirely or not.</p>",
        "id": 166712730,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559047995
    },
    {
        "content": "<p>you can just not allow getting a function pointer when it has <code>(const A: B)</code> -- function pointers are of marginal utility anyways (eddyb hates them I hear... ^^)</p>",
        "id": 166712832,
        "sender_full_name": "centril",
        "timestamp": 1559048050
    },
    {
        "content": "<p>i.e. what <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> said</p>",
        "id": 166712837,
        "sender_full_name": "centril",
        "timestamp": 1559048056
    },
    {
        "content": "<p>It's not just function pointers, it's also non-higher-rank <code>Fn()</code>s</p>",
        "id": 166712853,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559048078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> trait objects?</p>",
        "id": 166712879,
        "sender_full_name": "centril",
        "timestamp": 1559048095
    },
    {
        "content": "<p>For example. But also it's a pain to work with higher rank things (at least today, we'll see how much of that chalkification can fix)</p>",
        "id": 166712947,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559048145
    },
    {
        "content": "<p>Speaking of... going back to reviewing the most boring PR ever ^^</p>",
        "id": 166713074,
        "sender_full_name": "centril",
        "timestamp": 1559048202
    },
    {
        "content": "<p>I don't know how we could make <code>(...)</code> run-time only</p>",
        "id": 166713665,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048580
    },
    {
        "content": "<p>Well it is right now</p>",
        "id": 166713713,
        "sender_full_name": "centril",
        "timestamp": 1559048613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">One</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TypeNum</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Num</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166713719,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048615
    },
    {
        "content": "<p>is <code>foo(One)</code> run-time ?</p>",
        "id": 166713742,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048628
    },
    {
        "content": "<p>yes?</p>",
        "id": 166713750,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048634
    },
    {
        "content": "<p><code>One</code> is a run-time value?</p>",
        "id": 166713760,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048639
    },
    {
        "content": "<p>well it isn't \"compile time only\"</p>",
        "id": 166713810,
        "sender_full_name": "centril",
        "timestamp": 1559048647
    },
    {
        "content": "<p>it isn't a run-time thing either, your CPU won't execute stuff with one</p>",
        "id": 166713863,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048668
    },
    {
        "content": "<p>the compile-time argument is <code>One</code>, too (we use the same name for the type and the value but that does not make them the same thing)</p>",
        "id": 166713865,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048671
    },
    {
        "content": "<p>It's <code>foo::&lt;One&gt;(One)</code> really.</p>",
        "id": 166713872,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048677
    },
    {
        "content": "<p>if you use <code>typenum</code>, you can do arithmetic at compile-time, by passing \"run-time\" values like that</p>",
        "id": 166713905,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048701
    },
    {
        "content": "<blockquote>\n<p>It's foo::&lt;One&gt;(One) really.</p>\n</blockquote>\n<p>Well, yes.</p>",
        "id": 166713938,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048716
    },
    {
        "content": "<p>LLVM or rustc may optimize away things but that's different</p>",
        "id": 166713946,
        "sender_full_name": "centril",
        "timestamp": 1559048725
    },
    {
        "content": "<p>the arithemtic you are doing then is on the <em>type</em> <code>One</code>, not the <em>value</em> <code>One</code></p>",
        "id": 166713947,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048725
    },
    {
        "content": "<blockquote>\n<p>it isn't a run-time thing either, your CPU won't execute stuff with one</p>\n</blockquote>\n<p>that's an implementation detail (that ZSTs optimize away)</p>",
        "id": 166713965,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> aside: having a separate type and value namespace makes me sad</p>",
        "id": 166713993,
        "sender_full_name": "centril",
        "timestamp": 1559048759
    },
    {
        "content": "<p>from a user-pov, i think it would be a disservice to const generics to have to teach the difference</p>",
        "id": 166714050,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048772
    },
    {
        "content": "<p>well in a language without dependent types it's kinda useful ;)</p>",
        "id": 166714063,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048780
    },
    {
        "content": "<p>it would be bad if const generics APIs end up being worse than using <code>typenum</code></p>",
        "id": 166714070,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yea but then you suddenly want ~dependent types (const generics in this case) and it gets bad</p>",
        "id": 166714086,
        "sender_full_name": "centril",
        "timestamp": 1559048801
    },
    {
        "content": "<p>because <code>typenum</code> can be inferred, but const generics cannot</p>",
        "id": 166714090,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> uh? I think if someone doesnt understand the difference between the type and value <code>One</code> they'll have a hard time</p>",
        "id": 166714097,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048805
    },
    {
        "content": "<p>but for const generics this is different anyway</p>",
        "id": 166714104,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048810
    },
    {
        "content": "<p>so I dont follow</p>",
        "id": 166714107,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048812
    },
    {
        "content": "<p>then it'd be <code>foo::&lt;{1}&gt;()</code> or so. no runtime argument. right?</p>",
        "id": 166714157,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048844
    },
    {
        "content": "<p>with typenum I can write: <code>let one = ..; let two = ..; let three = add(one, two);</code> and get a <code>three</code> value that's computed at compile-time</p>",
        "id": 166714164,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048849
    },
    {
        "content": "<p>with const generics i'd gave to write <code>let three = add::&lt;{one, two}&gt;();</code></p>",
        "id": 166714193,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559048869
    },
    {
        "content": "<p>same amount of information though</p>",
        "id": 166714214,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048881
    },
    {
        "content": "<p>just more annoying to type</p>",
        "id": 166714259,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048885
    },
    {
        "content": "<p>what happens here is that you are using singleton types, basically</p>",
        "id": 166714274,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048893
    },
    {
        "content": "<p>eww</p>",
        "id": 166714285,
        "sender_full_name": "centril",
        "timestamp": 1559048901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> have you seen the singletons haskell package?</p>",
        "id": 166714315,
        "sender_full_name": "centril",
        "timestamp": 1559048921
    },
    {
        "content": "<p>but really <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> you'd write <code>const THREE = ONE+TWO;</code></p>",
        "id": 166714321,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048926
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> have you seen the singletons haskell package?</p>\n</blockquote>\n<p>no</p>",
        "id": 166714331,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048931
    },
    {
        "content": "<p><code>let three = add::&lt;{one, two}&gt;();</code>  -- is this supposed to be a tuple?</p>",
        "id": 166714371,
        "sender_full_name": "centril",
        "timestamp": 1559048953
    },
    {
        "content": "<p>just a typo I think. <code>let three = add::&lt;{one}, {two}&gt;();</code></p>",
        "id": 166714401,
        "sender_full_name": "oli",
        "timestamp": 1559048976
    },
    {
        "content": "<p>still not sure why you'd call const addition by going through const generics^^</p>",
        "id": 166714416,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048983
    },
    {
        "content": "<p>what's the return type of <code>add</code> anyway?</p>",
        "id": 166714432,
        "sender_full_name": "RalfJ",
        "timestamp": 1559048994
    },
    {
        "content": "<blockquote>\n<p>no</p>\n</blockquote>\n<p>good <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> -- it's a monstrosity (the author agrees)... hacking in dependent types through singleton types</p>",
        "id": 166714436,
        "sender_full_name": "centril",
        "timestamp": 1559048996
    },
    {
        "content": "<blockquote>\n<p>what's the return type of <code>add</code> anyway?</p>\n</blockquote>\n<p><code>Add&lt;One, Add&lt;One, One&gt;&gt;</code> or the binary version of that</p>",
        "id": 166714542,
        "sender_full_name": "oli",
        "timestamp": 1559049029
    },
    {
        "content": "<p>no I mean in the const generics version, not in the numtypes version</p>",
        "id": 166714572,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049050
    },
    {
        "content": "<p>ah</p>",
        "id": 166714579,
        "sender_full_name": "oli",
        "timestamp": 1559049055
    },
    {
        "content": "<p>you don't do that :P</p>",
        "id": 166714596,
        "sender_full_name": "oli",
        "timestamp": 1559049064
    },
    {
        "content": "<p>Just <code>3</code> ?</p>",
        "id": 166714604,
        "sender_full_name": "centril",
        "timestamp": 1559049066
    },
    {
        "content": "<p>:P</p>",
        "id": 166714606,
        "sender_full_name": "centril",
        "timestamp": 1559049067
    },
    {
        "content": "<p>that's what I mean :D</p>",
        "id": 166714611,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049070
    },
    {
        "content": "<p>it'd be <code>const fn add(x: i32, y: i32) -&gt; i32</code> or so</p>",
        "id": 166714626,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049080
    },
    {
        "content": "<p>I mean you can, but it would be <code>TypeNumber&lt;3&gt;</code> in that case</p>",
        "id": 166714654,
        "sender_full_name": "oli",
        "timestamp": 1559049092
    },
    {
        "content": "<p>not <code>const fn&lt;X: i32, Y: i32&gt;() -&gt; Add&lt;X, Y&gt;</code> or whatever</p>",
        "id": 166714661,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <code>const usize</code>? what the heck is that?^^</p>",
        "id": 166714693,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049114
    },
    {
        "content": "<p>that's what <code>TypeNumber&lt;3&gt;</code> is</p>",
        "id": 166714758,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049132
    },
    {
        "content": "<p>I'm very confused</p>",
        "id": 166714771,
        "sender_full_name": "oli",
        "timestamp": 1559049143
    },
    {
        "content": "<p><code>TypeNumber</code> is a hack you need when you dont have const generics</p>",
        "id": 166714775,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049146
    },
    {
        "content": "<p>why do you still want to use that hack with const generics...?</p>",
        "id": 166714787,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  It's an idea me and <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> had about lifting <code>Type</code> to a <code>ConstType</code> universe</p>",
        "id": 166714790,
        "sender_full_name": "centril",
        "timestamp": 1559049159
    },
    {
        "content": "<p>with typenum, what one writes is <code>fn&lt;const X: usize, const Y: usize&gt;() -&gt; const Z: usize</code></p>",
        "id": 166714797,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049163
    },
    {
        "content": "<blockquote>\n<p>with typenum, what one writes is <code>fn&lt;const X: usize, const Y: usize&gt;() -&gt; const Z: usize</code></p>\n</blockquote>\n<p>uh, why would one do that??</p>",
        "id": 166714815,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049175
    },
    {
        "content": "<p>e.g. <code>let x: const usize = random(); // nope</code></p>",
        "id": 166714834,
        "sender_full_name": "centril",
        "timestamp": 1559049183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> that's orthogonal :P</p>",
        "id": 166714876,
        "sender_full_name": "oli",
        "timestamp": 1559049199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I don't know what that means^^</p>",
        "id": 166714946,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> well you'd write <code>fn foo&lt;N: const usize&gt;</code> instead of <code>fn foo&lt;const N: usize&gt;</code> in that case</p>",
        "id": 166715001,
        "sender_full_name": "centril",
        "timestamp": 1559049250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> we barely know what it means as well :P</p>",
        "id": 166715019,
        "sender_full_name": "centril",
        "timestamp": 1559049261
    },
    {
        "content": "<blockquote>\n<p>uh, why would one do that??</p>\n</blockquote>\n<p>That's how typenum is implemented</p>",
        "id": 166715077,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049304
    },
    {
        "content": "<p>as far as I am concerned both are just <code>&lt;N: usize&gt;</code>. as in, compile-time <code>usize</code>.</p>",
        "id": 166715083,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049309
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>uh, why would one do that??</p>\n</blockquote>\n<p>That's how typenum is implemented</p>\n</blockquote>\n<p>yes because it doesnt have const generics</p>",
        "id": 166715094,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049315
    },
    {
        "content": "<p>no need to kludge to an awful hack when you got the proper thing</p>",
        "id": 166715108,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  well... the gist of it is that <code>const T</code> is <code>{ x: T | is_constexpr(x) }</code></p>",
        "id": 166715195,
        "sender_full_name": "centril",
        "timestamp": 1559049363
    },
    {
        "content": "<p>I don't know what type of argument you are trying to make</p>",
        "id": 166715212,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049367
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>  well... the gist of it is that <code>const T</code> is <code>{ x: T | is_constexpr(x) }</code></p>\n</blockquote>\n<p>that's ill-typed, <code>x</code> is a value and you are passing it to a term expecting an expression</p>",
        "id": 166715237,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049385
    },
    {
        "content": "<p>with <code>typenum</code> you can write <code>fn foo(X: Typenum, y: usize) -&gt; usize</code></p>",
        "id": 166715243,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049389
    },
    {
        "content": "<p>so that would become <code>fn foo&lt;X: usize&gt;(y: usize) -&gt; usize</code></p>",
        "id": 166715266,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049408
    },
    {
        "content": "<p>so that i can write <code>let three = foo(N, run_time_val);</code></p>",
        "id": 166715270,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049413
    },
    {
        "content": "<p>I consider having to write <code>let three = foo::&lt;{N}&gt;(run_time_val);</code> a regression</p>",
        "id": 166715293,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049433
    },
    {
        "content": "<p>to me it looks like you want to recreate an old unergonomic API in a new framework that was specifrically designed to <em>not</em> require having to do those unergonomic things.</p>",
        "id": 166715300,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049438
    },
    {
        "content": "<p>if you think that <code>foo::&lt;{N}&gt;(val)</code> is nicer than <code>foo(N, val)</code>, then just say so</p>",
        "id": 166715322,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049467
    },
    {
        "content": "<p>i disagre, and we can call it a day</p>",
        "id": 166715339,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049476
    },
    {
        "content": "<p>I think that's just syntax and I thought were were talking about something deeper than that</p>",
        "id": 166715365,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049482
    },
    {
        "content": "<p>no</p>",
        "id": 166715403,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049495
    },
    {
        "content": "<p>or not AFAICT</p>",
        "id": 166715406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049500
    },
    {
        "content": "<p>because currently what you are really writing is <code>foo::&lt;{N}&gt;(N, val)</code>, just you get some inference</p>",
        "id": 166715415,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't follow; I'm using refinment type notation here for \"Given a type, all the expressions of that type computable at compile time\"</p>",
        "id": 166715419,
        "sender_full_name": "centril",
        "timestamp": 1559049511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yeah but types classify values, not expressions</p>",
        "id": 166715439,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> but because there is inference, I don't have to write <code>::&lt;{N}&gt;</code></p>",
        "id": 166715456,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049542
    },
    {
        "content": "<p>so I dont see how that would work. unless you are going with thunks or call-by-name or so.</p>",
        "id": 166715467,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049543
    },
    {
        "content": "<p>or is the argument that inference isn't important?</p>",
        "id": 166715494,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049565
    },
    {
        "content": "<p>the only difference betwee const generics, and const function arguments is inference</p>",
        "id": 166715515,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> sounds to me like you are looking for some kind of staged type system</p>",
        "id": 166715520,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049588
    },
    {
        "content": "<p>then you get types on each stage -- like, a compile-time <code>T</code> and a run-time <code>T</code></p>",
        "id": 166715547,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049601
    },
    {
        "content": "<p>these are not really sigma types though, that's a very different thing</p>",
        "id": 166715606,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049610
    },
    {
        "content": "<p>it's more like a modality</p>",
        "id": 166715616,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> me and <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> were discussing something like that yes</p>",
        "id": 166715625,
        "sender_full_name": "centril",
        "timestamp": 1559049619
    },
    {
        "content": "<p>I don't literally mean a sigma type</p>",
        "id": 166715641,
        "sender_full_name": "centril",
        "timestamp": 1559049628
    },
    {
        "content": "<blockquote>\n<p>or is the argument that inference isn't important?</p>\n</blockquote>\n<p>inference is important. I was just under the impression that we talked about something else.^^</p>",
        "id": 166715690,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049660
    },
    {
        "content": "<p>hence universes and \"lifting\" <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 166715717,
        "sender_full_name": "centril",
        "timestamp": 1559049671
    },
    {
        "content": "<blockquote>\n<p>the only difference betwee const generics, and const function arguments is inference</p>\n</blockquote>\n<p>no. the only difference is where you have to put your argument.</p>",
        "id": 166715750,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049693
    },
    {
        "content": "<p><code>foo::&lt;{N}&gt;(y)</code> and <code>foo(N, y)</code> have the exact same amount of inference going on</p>",
        "id": 166715772,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049708
    },
    {
        "content": "<p>assuming the latter is a const fn argument</p>",
        "id": 166715830,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think what <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> is getting at is that the former would permit inference whereas the latter wouldn't</p>",
        "id": 166715856,
        "sender_full_name": "centril",
        "timestamp": 1559049744
    },
    {
        "content": "<p>inference only comes into play when you consider the hack that is currently used to encode values in types</p>",
        "id": 166715862,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049748
    },
    {
        "content": "<p>i.e. implicit vs. explicit arguments</p>",
        "id": 166715864,
        "sender_full_name": "centril",
        "timestamp": 1559049750
    },
    {
        "content": "<p>then the two variants are <code>foo::&lt;{N}&gt;(N, y)</code> and <code>foo(N, y)</code>, but thanks to inference you can leave away one <code>N</code> in the former</p>",
        "id": 166715894,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049775
    },
    {
        "content": "<p>that confused me before centril, but as @ralfj says, you get the same inference with both</p>",
        "id": 166715933,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> note that today <code>foo::&lt;{N}&gt;(N)</code> is not allowed, only <code>foo::&lt;{N}&gt;()</code></p>",
        "id": 166715992,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049837
    },
    {
        "content": "<p>my impression here is that the complaint about using const generics to encode const fn arguments is only about syntax and has nothing to do with being implicit/explicit, or synax</p>",
        "id": 166715996,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049839
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> note that today <code>foo::&lt;{N}&gt;(N)</code> is not allowed, only <code>foo::&lt;{N}&gt;()</code></p>\n</blockquote>\n<p>hu? I was assuming use of typenum there</p>",
        "id": 166716063,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049852
    },
    {
        "content": "<p>then it's <code>add::&lt;One, One&gt;(One, One)</code>, right? in the code you wrote above (with <code>struct One;</code>)</p>",
        "id": 166716079,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049865
    },
    {
        "content": "<p>well with const generics you can say: <code>fn foo&lt;const N: usize&gt;(x: [u8; N])</code> and then just write <code>foo([])</code> such that <code>N</code> is inferred to <code>0</code></p>",
        "id": 166716095,
        "sender_full_name": "centril",
        "timestamp": 1559049876
    },
    {
        "content": "<p>I thought you were talking const generics</p>",
        "id": 166716096,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049877
    },
    {
        "content": "<p>oh no so much talking past each other^^</p>",
        "id": 166716120,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049898
    },
    {
        "content": "<blockquote>\n<p>well with const generics you can say: <code>fn foo&lt;const N: usize&gt;(x: [u8; N])</code> and then just write <code>foo([])</code> such that <code>N</code> is inferred to <code>0</code></p>\n</blockquote>\n<p>having to do that, would suck</p>",
        "id": 166716123,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559049899
    },
    {
        "content": "<p>with const generics there is just one <code>N</code></p>",
        "id": 166716135,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049906
    },
    {
        "content": "<p>whereas if you wrote <code>fn foo(const N: usize, x: [u8; N])</code> then you'd be forced to write <code>foo(0, [])</code></p>",
        "id": 166716186,
        "sender_full_name": "centril",
        "timestamp": 1559049940
    },
    {
        "content": "<p>at least assuming the implicit/explicit distinction</p>",
        "id": 166716196,
        "sender_full_name": "centril",
        "timestamp": 1559049951
    },
    {
        "content": "<p>we have <em>three</em> systems that came up in this discussion: typenum, const generics, const fn arguments. typenum needs inference to avoid repetition.</p>",
        "id": 166716259,
        "sender_full_name": "RalfJ",
        "timestamp": 1559049979
    },
    {
        "content": "<p>typenum needs to go away <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 166716273,
        "sender_full_name": "centril",
        "timestamp": 1559049989
    },
    {
        "content": "<p>but what replaces it shouldn't be worse</p>",
        "id": 166716281,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050004
    },
    {
        "content": "<p>worse? huh...</p>",
        "id": 166716289,
        "sender_full_name": "centril",
        "timestamp": 1559050014
    },
    {
        "content": "<p>const generics can sometimes be inferred like when the value <em>also</em> occurs in a type. but the cases we are talking  about are such that that's not possible (I thought)</p>",
        "id": 166716312,
        "sender_full_name": "RalfJ",
        "timestamp": 1559050027
    },
    {
        "content": "<p>how can const generics be worse than singleton hacks to fake dependent types</p>",
        "id": 166716313,
        "sender_full_name": "centril",
        "timestamp": 1559050030
    },
    {
        "content": "<p>by forcing people to write <code>foo::&lt;{....}&gt;()</code> vs just <code>foo(...)</code></p>",
        "id": 166716354,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050053
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> please stop with your inference stuff because I dont think that applies here :) like in <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>'s <code>foo(N, run_time_val)</code>, there is no inferring <code>N</code>.</p>",
        "id": 166716470,
        "sender_full_name": "RalfJ",
        "timestamp": 1559050106
    },
    {
        "content": "<p>i consider having to change a function from <code>fn foo(x: i32)</code> callable as <code>foo(x)</code> to <code>fn foo&lt;const x: i32&gt;()</code> callable as <code>foo::&lt;{x}&gt;()</code> a regression - if the only intent is to encode in the type that <code>x</code> must be a <code>const</code></p>",
        "id": 166716486,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'm so confused now... :P</p>",
        "id": 166716529,
        "sender_full_name": "centril",
        "timestamp": 1559050144
    },
    {
        "content": "<p>also I should get some work done, maybe you two can deconfuse yourselves easier without me being around :) ttyl</p>",
        "id": 166716560,
        "sender_full_name": "RalfJ",
        "timestamp": 1559050163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  In the cases where you'd need to write <code>foo::&lt;{ ... }&gt;()</code> with const generics you'd presumably have to write <code>fn foo::&lt;{ ... }&gt;</code> to write out the singleton type in any case</p>",
        "id": 166716693,
        "sender_full_name": "centril",
        "timestamp": 1559050224
    },
    {
        "content": "<p>well no if the code was using typenum</p>",
        "id": 166716726,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050244
    },
    {
        "content": "<p>because the singleton type cannot be inferred unless constrained by a type</p>",
        "id": 166716741,
        "sender_full_name": "centril",
        "timestamp": 1559050257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> what sort of magic does typenum have :D</p>",
        "id": 166716769,
        "sender_full_name": "centril",
        "timestamp": 1559050270
    },
    {
        "content": "<p><code>fn foo&lt;T&gt;(x: T); foo(one: One);</code></p>",
        "id": 166716834,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050319
    },
    {
        "content": "<p>you need to write out the ZST expression there</p>",
        "id": 166716922,
        "sender_full_name": "centril",
        "timestamp": 1559050361
    },
    {
        "content": "<p>how is that ergonomic?</p>",
        "id": 166716932,
        "sender_full_name": "centril",
        "timestamp": 1559050366
    },
    {
        "content": "<p>i don't have to write <code>foo::&lt;One&gt;()</code>, I find writing <code>foo(one)</code> better</p>",
        "id": 166716970,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050388
    },
    {
        "content": "<p>I'm having the feeling that you all prefer <code>foo::&lt;{one}&gt;()</code> better than <code>foo(one)</code></p>",
        "id": 166716994,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050412
    },
    {
        "content": "<p>No not really</p>",
        "id": 166717023,
        "sender_full_name": "centril",
        "timestamp": 1559050426
    },
    {
        "content": "<p>I think it's a minor papercut</p>",
        "id": 166717030,
        "sender_full_name": "centril",
        "timestamp": 1559050434
    },
    {
        "content": "<p>I do find <code>foo::&lt;1&gt;()</code> nicer tho</p>",
        "id": 166717136,
        "sender_full_name": "centril",
        "timestamp": 1559050484
    },
    {
        "content": "<p>1 vs. One</p>",
        "id": 166717148,
        "sender_full_name": "centril",
        "timestamp": 1559050492
    },
    {
        "content": "<p>tbh given the effort put trying to slay the turbofish i don't think this is a minor papercut :P</p>",
        "id": 166717176,
        "sender_full_name": "kennytm",
        "timestamp": 1559050504
    },
    {
        "content": "<p>as a user, having to remember which argument is a const generic and which one isn't isn't minor</p>",
        "id": 166717207,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> that's mostly a matter of consistency <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 166717211,
        "sender_full_name": "centril",
        "timestamp": 1559050526
    },
    {
        "content": "<p>like if I call foo(x, y, z) and <code>y</code> needs to be a const, I  probably get a really good error message with <code>foo(x: i32, const y: i32, z: i32)</code></p>",
        "id": 166717241,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050550
    },
    {
        "content": "<p>but if I have <code>foo::&lt;const Y: usize&gt;(x: i32, z: i32)</code> instead, the error message might be weird</p>",
        "id": 166717312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I'm in favor of <code>(const A: B)</code> where <code>A</code> must be provided explicitly, so it seems we are agreed practically speaking?</p>",
        "id": 166717314,
        "sender_full_name": "centril",
        "timestamp": 1559050578
    },
    {
        "content": "<blockquote>\n<p>the error message might be weird</p>\n</blockquote>\n<p>Let's reserve judgement until <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> has worked is magic shall we?</p>",
        "id": 166717357,
        "sender_full_name": "centril",
        "timestamp": 1559050619
    },
    {
        "content": "<p>the number of arguments doesn't match, a single type parameter is missing or can't be deduced, ...</p>",
        "id": 166717404,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050646
    },
    {
        "content": "<p>the best error message that I can imagine for this function would still be worse than \"y is not a <code>const</code> but should be\"</p>",
        "id": 166717430,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050668
    },
    {
        "content": "<p>if we have this, can we declare this to be just syntactic sugar? so that later phases of the compiler dont even have to know about this any more?</p>",
        "id": 166717633,
        "sender_full_name": "RalfJ",
        "timestamp": 1559050768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the main problem with making this just syntax sugar, is that we'd need to translate <code>fn foo(const X: i32)</code> to <code>fn foo&lt;const X: i32&gt;()</code> at some point</p>",
        "id": 166717781,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050842
    },
    {
        "content": "<p>and then the question about how this mapping works needs to be resolved</p>",
        "id": 166717835,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050871
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125254\">kennytm</span> that's mostly a matter of consistency :)</p>\n</blockquote>\n<p>i suppose the issue at hand is <code>_mm_shuffle_pd::&lt;0b10&gt;(x, y)</code>, if so written, is inconsistent with other SIMD APIs</p>",
        "id": 166717851,
        "sender_full_name": "kennytm",
        "timestamp": 1559050880
    },
    {
        "content": "<p><code>fn foo&lt;'a, T&gt;(const X: usize)</code> =&gt; <code>fn foo&lt;const X: usize, 'a, T&gt;()</code>, <code>fn foo&lt;'a, const X: usize, T&gt;</code>, etc.</p>",
        "id": 166717983,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559050944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> the desugared syntax needs to map to const generic syntax, so we need to put \"const function arguments\" somewhere in the type list</p>",
        "id": 166718210,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559051089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  where the mapped parameter is placed should be internal to the compiler and irrelevant to the API user</p>",
        "id": 166718213,
        "sender_full_name": "kennytm",
        "timestamp": 1559051091
    },
    {
        "content": "<p>i thought it would impact name mangling, etc.</p>",
        "id": 166718259,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559051127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> it doesnt have to be a desugaring that is literally concerned with restrictions such as this list of parameters</p>",
        "id": 166718265,
        "sender_full_name": "RalfJ",
        "timestamp": 1559051131
    },
    {
        "content": "<p>but it could be conceptual</p>",
        "id": 166718279,
        "sender_full_name": "RalfJ",
        "timestamp": 1559051137
    },
    {
        "content": "<p>just have a 2nd invisible list that these desugared things are added to, or so</p>",
        "id": 166718311,
        "sender_full_name": "RalfJ",
        "timestamp": 1559051159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> it's ok as long as the mangling is internally consistent?</p>",
        "id": 166718314,
        "sender_full_name": "kennytm",
        "timestamp": 1559051160
    },
    {
        "content": "<p>and for mangling imagine that list to be at the end</p>",
        "id": 166718374,
        "sender_full_name": "RalfJ",
        "timestamp": 1559051169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so i also would want this to just be desugaring</p>",
        "id": 166718377,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559051171
    },
    {
        "content": "<p>or just literally just have it at the end, and lift the restrictions we usually have about only giving none or all of the implicit arguments such that the desugared case where only the \"const fn arg\" parts are filled is okay</p>",
        "id": 166718410,
        "sender_full_name": "RalfJ",
        "timestamp": 1559051194
    },
    {
        "content": "<p>i think it should have the same treatment as APIT regarding mangling</p>",
        "id": 166718446,
        "sender_full_name": "kennytm",
        "timestamp": 1559051217
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 166718488,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559051245
    },
    {
        "content": "<p>const parameters must currently come last anyway, so there's a canonical choice of desugaring</p>",
        "id": 166727284,
        "sender_full_name": "varkor",
        "timestamp": 1559057106
    },
    {
        "content": "<p>(though that may not always be true)</p>",
        "id": 166727324,
        "sender_full_name": "varkor",
        "timestamp": 1559057146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  s/first/last ?</p>",
        "id": 166727609,
        "sender_full_name": "centril",
        "timestamp": 1559057333
    },
    {
        "content": "<p>Good morning!</p>",
        "id": 167168820,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1559552379
    },
    {
        "content": "<p>I'm all for having a mean to put constants as normal arguments :)</p>",
        "id": 167169593,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1559553062
    },
    {
        "content": "<p><code>vec_splat_u8::&lt;15&gt;()</code> is _quite_ a lot of noise</p>",
        "id": 167169634,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1559553122
    }
]