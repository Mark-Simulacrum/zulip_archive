[
    {
        "content": "<p>I don't understand why the borrow checker complains in the following example, can anybody help me with this, please?</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::collections::HashMap;\nuse std::fmt::Debug;\n\n#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\nstruct Key {\n  index: usize,\n}\n\nstruct Foo {\n  key_map: HashMap&lt;Key, Key&gt;,\n}\n\nimpl Foo {\n  fn remove_key(&amp;mut self, key: &amp;Key) {\n    println!(&quot;do something here with key {:?}&quot;, key);\n  }\n\n  fn reset_at(&amp;mut self, key: &amp;Key) {\n    let mut key = key;\n    let key_map = &amp;self.key_map;\n    key = key_map.get(key).unwrap();\n\n    self.remove_key(key);  // Why is the immutable borrow of `key_map` still live here?\n  }\n}\n\nfn main() {}\n</code></pre></div>\n<p>results in the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:23:5\n   |\n20 |     let key_map = &amp;self.key_map;\n   |                   ------------- immutable borrow occurs here\n...\n23 |     self.remove_key(key);\n   |     ^^^^^----------^^^^^\n   |     |    |\n   |     |    immutable borrow later used by call\n   |     mutable borrow occurs here\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9f4e7b89d978f9340bef268f298ec845\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9f4e7b89d978f9340bef268f298ec845</a></p>",
        "id": 257514435,
        "sender_full_name": "BN",
        "timestamp": 1634208428
    },
    {
        "content": "<p><code>HashMap::get</code> borrows key_map, <code>key</code> keeps that borrow alive</p>",
        "id": 257524722,
        "sender_full_name": "The 8472",
        "timestamp": 1634213981
    },
    {
        "content": "<p>since Key is Copy you can end the borrow by derefing it</p>",
        "id": 257524903,
        "sender_full_name": "The 8472",
        "timestamp": 1634214060
    }
]