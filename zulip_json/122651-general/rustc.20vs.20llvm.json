[
    {
        "content": "<p>Hey, I'm not sure whether it is right place to ask (I've seen that there's a wg-llvm channel but it's more of a discussion channel for a WG than a question one). So there it goes:</p>\n<p>As far as I see, <code>rustc</code> uses <code>libLLVM</code> shared library as a compiler backend provider to compile to every target architecture allowed by LLVM. Thus, <code>x86-64-unknown-linux</code> allows me to (after downloading appropriate target <code>std</code> crate and so on via <code>rustup target add ...</code>) to compile for specific target. Where does this shared library live in <code>*-windows-*</code> toolchains? Both <code>msvc</code> and <code>gnu</code> toolchains have DLLs in <code>bin</code> directory for e.g. <code>rustc-drivers</code> (which I'd gladly love to learn what does it actually do) but there's no <code>libLLVM</code> library. It cannot be baked into <code>rustc</code> binary because it is too small. So where is it? Unless I got it wrong and it works completely in a different way.</p>",
        "id": 184515687,
        "sender_full_name": "Gabriel Górski",
        "timestamp": 1577751345
    },
    {
        "content": "<p>Hmm, maybe it's statically-linked into <code>.rustup/toolchains/nightly-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/codegen-backends/rustc_codegen_llvm-llvm.dll</code>?</p>",
        "id": 184590680,
        "sender_full_name": "Laurențiu",
        "timestamp": 1577870733
    },
    {
        "content": "<p>On a related note, why do I have both <code>toolchains/nightly-x86_64-unknown-linux-gnu/lib/libLLVM-9-rust-1.41.0-nightly.so</code> and <code>toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libLLVM-9-rust-1.41.0-nightly.so</code>?</p>",
        "id": 184590725,
        "sender_full_name": "Laurențiu",
        "timestamp": 1577870771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> </p>\n<blockquote>\n<p>Hmm, maybe it's statically-linked into <code>rustc_codegen_llvm-llvm.dll</code></p>\n</blockquote>\n<p>That's possible. But firstly <code>rustc_codegen_llvm-llvm.dll</code> seems to be quite small in size - just 42 MB, where <code>libLLVM.so</code> weights almost 80 MB. Secondly, it is placed in a pretty weird directory - <code>.rustup/toolchains/&lt;toolchain&gt;/lib/rustlib/&lt;specific-target&gt;/codegen-backends/</code> where specific target is <code>x86_64-pc-windows-msvc</code>. If it was backend for generating code for all targets, then why is it placed in a host target directory?</p>\n<blockquote>\n<p>On a related note, why do I have both</p>\n</blockquote>\n<p>That's what I noticed as well. Duplication of libraries is only partial, though. Weird.</p>\n<p>Is there some kind of document explaining internal architecture of toolchains and their dependencies?</p>",
        "id": 184599755,
        "sender_full_name": "Gabriel Górski",
        "timestamp": 1577887581
    },
    {
        "content": "<p>Static linking might explain the size. Re docs, I suppose the place to look into would be <a href=\"https://rust-lang.github.io/rustc-guide/codegen/backend-agnostic.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/codegen/backend-agnostic.html\">https://rust-lang.github.io/rustc-guide/codegen/backend-agnostic.html</a>, but it's not very helpful in this case. Maybe someone who's really familiar with how codegen works will chime in.</p>",
        "id": 184599885,
        "sender_full_name": "Laurențiu",
        "timestamp": 1577887852
    },
    {
        "content": "<p>Thanks for link. I agree that someone actively developing those bits would be invaluable.</p>",
        "id": 184600361,
        "sender_full_name": "Gabriel Górski",
        "timestamp": 1577888774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256068\">@Gabriel Górski</span> Since LLVM is statically linked, the linker can eliminate a lot of unused code from the final binary. On the other hand <a href=\"http://libLLVM.so\" target=\"_blank\" title=\"http://libLLVM.so\">libLLVM.so</a> needs to export the full LLVM API.</p>",
        "id": 184608066,
        "sender_full_name": "Amanieu",
        "timestamp": 1577903111
    },
    {
        "content": "<p>That makes sense. So is in fact <code>LLVM</code> statically linked into <code>rustc_codegen_llvm-llvm.dll</code>? Why does linux toolchain differ so much from msvc one? Doesn't it make further maintaining of toolchains a bit harder? I mean I suppose there's valid reasoning behind decisions made or at least I have no expertise to decide there isn't. </p>\n<p>Still, it would be really cool to know what are the exact responsibilities of included libraries/files and reasoning behind file hierarchy within .rustup directories. Is <a href=\"https://rust-lang.github.io/rustc-guide/\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/\">https://rust-lang.github.io/rustc-guide/</a> enough to find out? (had no time yet to dig into it)</p>",
        "id": 184608859,
        "sender_full_name": "Gabriel Górski",
        "timestamp": 1577904517
    },
    {
        "content": "<p>to my knowledge rustc guide does not document the directory layout, no</p>",
        "id": 184608877,
        "sender_full_name": "simulacrum",
        "timestamp": 1577904572
    },
    {
        "content": "<p>(indeed I'm not sure there's any documentation beyond people's heads, in this area)</p>",
        "id": 184608880,
        "sender_full_name": "simulacrum",
        "timestamp": 1577904585
    },
    {
        "content": "<p>Hmm I see. </p>\n<blockquote>\n<p>beyond people's heads</p>\n</blockquote>\n<p>I can imagine toolchains become a bit messy over time. I thought there's some kind of documented-ish convention :P</p>",
        "id": 184609011,
        "sender_full_name": "Gabriel Górski",
        "timestamp": 1577904763
    },
    {
        "content": "<p>hm, not sure I follow</p>",
        "id": 184609083,
        "sender_full_name": "simulacrum",
        "timestamp": 1577904894
    },
    {
        "content": "<p>the layout of the rust distribution is pretty ad-hoc, but has remained relatively stable over time</p>",
        "id": 184609095,
        "sender_full_name": "simulacrum",
        "timestamp": 1577904924
    },
    {
        "content": "<p>I'm not insinuating anything. If it works, it works. I'm just exploring insides of the ecosystem, that's all. I'd like to learn more about it. Rustc guide seems like a good starting point I guess</p>",
        "id": 184609315,
        "sender_full_name": "Gabriel Górski",
        "timestamp": 1577905282
    },
    {
        "content": "<p>Sure! I think documenting the layout (not to stabilize it, but just for rustc devs) would be great.</p>",
        "id": 184609325,
        "sender_full_name": "simulacrum",
        "timestamp": 1577905317
    },
    {
        "content": "<p>Just no one has done so yet :)</p>",
        "id": 184609369,
        "sender_full_name": "simulacrum",
        "timestamp": 1577905326
    },
    {
        "content": "<blockquote>\n<p>to my knowledge rustc guide does not document the directory layout, no</p>\n</blockquote>\n<p>I think it would be great to do so :)</p>",
        "id": 184625674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1577936169
    }
]