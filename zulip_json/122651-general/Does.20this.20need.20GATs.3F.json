[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Omega</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">IntoIter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Alpha</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Omega</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Omega</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(<a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4dd6ff3538a0ba49e427c65ed25a19fb\">Playground</a>)</p>\n<p>Errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0207]: the lifetime parameter `&#39;a` is not constrained by the impl trait, self type, or predicates\n --&gt; src/lib.rs:7:6\n  |\n7 | impl&lt;&#39;a, T&gt; IntoIterator for Wrapper&lt;T&gt;\n  |      ^^ unconstrained lifetime parameter\n</code></pre></div>\n<p>This feels like it shouldn't need GATs, but the error message leads me to think that it does. What am I missing?</p>",
        "id": 261591022,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1637030459
    },
    {
        "content": "<p>Would it work to have the <code>'a</code> parameter on <code>Wrapper&lt;'a, T&gt;</code>? It should not be too difficult to satisfy the constraint in calling code since this <code>'a</code> parameter simply needs to outlive the <code>T::Item</code> and <code>T::IntoIter</code> types</p>",
        "id": 261592093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637031530
    },
    {
        "content": "<p>Otherwise, this impl doesn't make much sense since it's returning an iterator type with an unbound lifetime (should it be <code>'static</code>?)</p>",
        "id": 261592202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637031611
    },
    {
        "content": "<p>However, I don't think <code>'static</code> is appropriate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Omega</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">IntoIter</span>: <span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">IntoIter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Alpha</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Omega</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Omega</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(<a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7c992e29b973a0435e5c6f72177f5838\">Playground</a>)</p>\n<p>Errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0597]: `a` does not live long enough\n  --&gt; src/main.rs:28:29\n   |\n28 |     let b = Wrapper::Alpha(&amp;a[..]);\n   |                             ^ borrowed value does not live long enough\n29 |     let _c = b.into_iter().collect::&lt;Vec&lt;_&gt;&gt;();\n   |              ------------- argument requires that `a` is borrowed for `&#39;static`\n30 | }\n   | - `a` dropped here while still borrowed\n</code></pre></div>",
        "id": 261592340,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1637031956
    },
    {
        "content": "<p>This is why it feels like the problem starts to move into GAT territory.</p>",
        "id": 261592443,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1637032013
    },
    {
        "content": "<p>I'm off to bed soon, but I'll try to pick back up in the morning — appreciate the time!</p>",
        "id": 261592452,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1637032033
    },
    {
        "content": "<p>(I'm not sure what the best way to add a <code>PhantomData</code> to an enum is.) This works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Omega</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Phantom</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">IntoIter</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">IntoIter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Alpha</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Omega</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Omega</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Phantom</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span>::<span class=\"n\">Alpha</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261594237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637034056
    },
    {
        "content": "<p>meanwhile it works if you use:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">IntoIter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261596220,
        "sender_full_name": "cuviper",
        "timestamp": 1637036434
    },
    {
        "content": "<p>but it does feel like there should be a way to write <code>Box&lt;dyn Trait + '_&gt;</code> tied to the lifetime of <code>T::IntoIter</code></p>",
        "id": 261596283,
        "sender_full_name": "cuviper",
        "timestamp": 1637036514
    },
    {
        "content": "<p>including variance</p>",
        "id": 261596398,
        "sender_full_name": "cuviper",
        "timestamp": 1637036607
    },
    {
        "content": "<p>You could also use a <code>Map&lt;_, Box&lt;dyn Fn&gt;&gt;</code>, since <code>'static</code> is fine in that position</p>",
        "id": 261597624,
        "sender_full_name": "cuviper",
        "timestamp": 1637038012
    },
    {
        "content": "<p>Funnily enough, with TAIT we don't have this problem, since a type-generic existential will be lifetime-bound by its type parameters:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">IntoIterWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n</code></pre></div>",
        "id": 261628012,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637062242
    },
    {
        "content": "<p>More generally, this just hints at Rust lacking a lifetime operators:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">inter</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">usabilityof</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">usabilityof</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261628026,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637062249
    },
    {
        "content": "<p>In this instance, I guess, the solution without lifetime operators and keeping trait objects would indeed be to have a distinct <code>IntoIterator</code> trait, one which would name an arbitrary lifetime parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;'</span><span class=\"nb\">__</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">IntoIter</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">inter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;'</span><span class=\"na\">inter</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">IntoIterator</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">inter</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">inter</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">inter</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But then I can just imagine how that would infect all the APIs that depended on <code>IntoIterator</code> (on top of being breaking <em>w.r.t.</em> the stdlib, but just imagine this would be a third-party crate trait we'd be talking about). GATs could sooth a bit that, but then it would require the correct <em>outlives</em> bounds (<code>type Item&lt;'me&gt; where Self : 'me</code>), which I haven't tested to see if they would indeed accomodate to this use case.</p>",
        "id": 261628040,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637062264
    },
    {
        "content": "<p>This, more generally, just showcases a silly limitation of <code>dyn Trait</code>s' lifetime elision rules: not only can they be surprising for beginners (as seen on URLO from time to time), but the only time they could have been useful, they aren't.</p>\n<p>I'd personally just roll my own trait object without that silly limitation:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">BoxDynIterator</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"w\"> </span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"nc\">ptr</span>::<span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">ty</span>::<span class=\"n\">Erased</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vtable</span>: <span class=\"nc\">ptr</span>::<span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">GetVTable</span><span class=\"o\">&gt;</span>::<span class=\"n\">VTable</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"w\"> </span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BoxDynIterator</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"w\"> </span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BoxDynIterator</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But so doing currently requires <code>unsafe</code> (I wonder if we could offer safe-construction of such things with a macro <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 261628427,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637062530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/Does.20this.20need.20GATs.3F/near/261596220\">said</a>:</p>\n<blockquote>\n<p>meanwhile it works if you use:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">IntoIter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is what I ultimately did before posting. Rather ugly, and Clippy complains it's a very complicated type (I tried, Clippy!)</p>",
        "id": 261643884,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1637071090
    },
    {
        "content": "<p>At least it has less indirection, though</p>",
        "id": 261652101,
        "sender_full_name": "cuviper",
        "timestamp": 1637074551
    },
    {
        "content": "<p>yep, and no additional heap allocation.</p>",
        "id": 261658906,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1637076947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Does.20this.20need.20GATs.3F/near/261628026\">said</a>:</p>\n<blockquote>\n<p>More generally, this just hints at Rust lacking a lifetime operators:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">inter</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">usabilityof</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">usabilityof</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>hmm, I think the correct lifetime would actually be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">inter</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">usabilityof</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">IntoIter</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">usabilityof</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>cuz <code>T</code> doesn't need to be in the returned iterator at all, what matters is the iterator <code>T</code> can be converted to.</p>",
        "id": 261662215,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637078153
    },
    {
        "content": "<p>Ah yeah, good catch</p>",
        "id": 261676475,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637083810
    }
]