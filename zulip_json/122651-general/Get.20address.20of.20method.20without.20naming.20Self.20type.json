[
    {
        "content": "<p>Is there any way to get the address of an inherent method without naming the Self type explicitly? In other words, I have a variable <code>x</code> of some type T which I cannot name, and I know an inherent method called \"foo\" exists, callable as <code>x.foo()</code>. Can I get the address of foo?</p>",
        "id": 210689458,
        "sender_full_name": "Diggsey",
        "timestamp": 1600642636
    },
    {
        "content": "<p>You could feed <code>&amp;x</code> to a helper <code>fn foo&lt;T&gt;(_: &amp;T) -&gt; ...</code></p>",
        "id": 210690385,
        "sender_full_name": "cuviper",
        "timestamp": 1600644194
    },
    {
        "content": "<p>Then that can return <code>T::foo</code> as a pointer or <code>usize</code> or whatever</p>",
        "id": 210690466,
        "sender_full_name": "cuviper",
        "timestamp": 1600644311
    },
    {
        "content": "<p>Well, ok, it's not that simple, I'm too lazy this Sunday</p>",
        "id": 210690536,
        "sender_full_name": "cuviper",
        "timestamp": 1600644402
    },
    {
        "content": "<p>I'm guessing you really have some <code>Foo&lt;X, Y, Z&gt;</code>, where one of those parameters is the unnameable bit</p>",
        "id": 210690554,
        "sender_full_name": "cuviper",
        "timestamp": 1600644480
    },
    {
        "content": "<p>So you'd parameterize that one in the helper to give it a name</p>",
        "id": 210690601,
        "sender_full_name": "cuviper",
        "timestamp": 1600644507
    },
    {
        "content": "<p>unfortunately, no, the method is on a completely unknown type</p>",
        "id": 210691008,
        "sender_full_name": "Diggsey",
        "timestamp": 1600645285
    },
    {
        "content": "<p>I'm looking to write a macro like <code>my_macro!(x.foo())</code> which can expand to something that uses the address of the <code>T::foo</code> method</p>",
        "id": 210691061,
        "sender_full_name": "Diggsey",
        "timestamp": 1600645348
    },
    {
        "content": "<p>I have no idea what the type of the <code>x</code> expression is</p>",
        "id": 210691074,
        "sender_full_name": "Diggsey",
        "timestamp": 1600645424
    },
    {
        "content": "<p>just in case, be aware that function addresses in Rust are \"unstable\" (not in a semver sense but in an LLVM sense). the only meaningful operation on them is to call them; comparing them for equality is not meaningful.</p>",
        "id": 210708849,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673512
    },
    {
        "content": "<p>so maybe one possible hack you could use is to use the closure <code>|x| x.foo()</code>, which captures nothing and thus is coercible to a <code>fn(_)</code></p>",
        "id": 210708937,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673554
    },
    {
        "content": "<p>you'll just have to nudge type inference to infer the right type for the <code>x</code> argument here...</p>",
        "id": 210708964,
        "sender_full_name": "RalfJ",
        "timestamp": 1600673581
    },
    {
        "content": "<p>yeah the only thing I'm going to be doing with it is calling it - the closure option is probably my best bet. The issue with that is the return type has a lifetime linked to <code>x</code>, ie. the function signature is <code>for&lt;'a&gt; fn(&amp;'a self, arg) -&gt; impl Future&lt;Output&gt; + 'a</code> and there's no way to define a closure with this signature</p>",
        "id": 210723384,
        "sender_full_name": "Diggsey",
        "timestamp": 1600683695
    },
    {
        "content": "<p>I could maybe use some unsafe code to temporarily cast away the lifetimes</p>",
        "id": 210723594,
        "sender_full_name": "Diggsey",
        "timestamp": 1600683854
    },
    {
        "content": "<p>you can nudge input type inference like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210767834,
        "sender_full_name": "cuviper",
        "timestamp": 1600706708
    },
    {
        "content": "<p>can't the return type be inferred?</p>",
        "id": 210767844,
        "sender_full_name": "cuviper",
        "timestamp": 1600706716
    },
    {
        "content": "<p>Closures simply don't support this kind of generic return type (where it's a type implementing Future but parameterized by the lifetime of the closure argument) AFAIK</p>",
        "id": 210778214,
        "sender_full_name": "Diggsey",
        "timestamp": 1600711494
    },
    {
        "content": "<p>I think this is the same reason why async closures are not a thing</p>",
        "id": 210778263,
        "sender_full_name": "Diggsey",
        "timestamp": 1600711515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295632\">Diggory Blake</span> <a href=\"#narrow/stream/122651-general/topic/Get.20address.20of.20method.20without.20naming.20Self.20type/near/210778263\">said</a>:</p>\n<blockquote>\n<p>I think this is the same reason why async closures are not a thing</p>\n</blockquote>\n<p>You mean not yet stabilized?</p>",
        "id": 210779921,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1600712255
    },
    {
        "content": "<p>I mean that they don't work in the way async closures should work:<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a0704e23c1b15683cf893a901238509e\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a0704e23c1b15683cf893a901238509e</a></p>",
        "id": 210781975,
        "sender_full_name": "Diggsey",
        "timestamp": 1600713315
    },
    {
        "content": "<p>there's no way to tie the lifetime of the future returned by the closure to the lifetime of the closure's first argument</p>",
        "id": 210782287,
        "sender_full_name": "Diggsey",
        "timestamp": 1600713459
    },
    {
        "content": "<p>FWIW, I've been unable to express that the returned future was tied to the higher-order lifetime of the input closure: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1144e195f6703152873288bb8a3a208c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1144e195f6703152873288bb8a3a208c</a><br>\nIn the unlikely event you do not need a higher-order lifetime and can use one fixed capturing that of the value fed to your macro, then you could do: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=56657c5bc69860500b44f16dbf557525\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=56657c5bc69860500b44f16dbf557525</a></p>\n<p>EDIT: I've managed to achieve it but by boxing the returned future, since otherwise we stumble upon Rust limitation when dealing with higher-order lifetimes and resolving type equality: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a09d9b498ea57271fe1fe4922feaf743\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a09d9b498ea57271fe1fe4922feaf743</a></p>",
        "id": 210787465,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600715923
    }
]