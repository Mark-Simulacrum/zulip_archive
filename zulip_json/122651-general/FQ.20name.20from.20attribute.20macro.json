[
    {
        "content": "<p>Is it possible to get the fully-qualified name of an item to which an attribute macro is applied?</p>",
        "id": 232183491,
        "sender_full_name": "Diggsey",
        "timestamp": 1616955622
    },
    {
        "content": "<p>A proc-macro cannot do that; we would, at the very least, need something like an unstringified <code>module_path!()</code>,</p>\n<ul>\n<li>note that if you just want the stringified FQ name for debugging purposes or some other reason, then <code>concat!(module_path!(), \"::\", stringify!($item_name))</code> works Just Fine™.</li>\n</ul>\n<p>which would thus need arbitrary token expansion which is achieved by using callback-style (otherwise we'd end up with the same limitations as <code>concat_idents!</code>). This means that, similar to <code>concat_idents!</code> being fixable if instead it were <code>with_concat_idents!</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">with_concat_idents</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$fname</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"cp\">$fname</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>an unstringified <code>module_path!</code> would be possible if it were:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">with_module_path</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"> </span><span class=\"cp\">$($path</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// …</span>\n<span class=\"p\">)}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That would still not always be enough, since the item to which an attribute macro is applied could still be an associated item within an <code>impl</code> block, or a <code>trait</code> definition.</p>\n<hr>\n<p>From all this, maybe there is a way to circumvent this issue and get to whatever it is you want to achieve here (XY yadda yadda), if you describe your ulterior objective <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 232187260,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616959429
    },
    {
        "content": "<p><code>module_path!</code> should work fine for my use-case, thanks :)</p>",
        "id": 232188379,
        "sender_full_name": "Diggsey",
        "timestamp": 1616960670
    },
    {
        "content": "<p>I'm writing a task queue and wanted a way to generate a default name for tasks</p>",
        "id": 232188421,
        "sender_full_name": "Diggsey",
        "timestamp": 1616960726
    }
]