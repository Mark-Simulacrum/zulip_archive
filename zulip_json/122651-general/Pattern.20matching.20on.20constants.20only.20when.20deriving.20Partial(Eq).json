[
    {
        "content": "<p>Why is it that pattern matching is only allowed on constants when the type of the constant <em>derives</em> PartialEq/Eq and not when there is a manual implementation? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3a00de71b7e371b86b0ce8287da1c5c2\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3a00de71b7e371b86b0ce8287da1c5c2</a></p>",
        "id": 224762007,
        "sender_full_name": "rylev",
        "timestamp": 1612200775
    },
    {
        "content": "<p>IIRC, cause a manual implementation could \"lie\" about equality</p>",
        "id": 224762140,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612200836
    },
    {
        "content": "<p>The match logic doesn't use the actual impl, but matches directly on the structure of the object</p>",
        "id": 224762188,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612200844
    },
    {
        "content": "<p>so a custom impl could disagree with match's behavior</p>",
        "id": 224762199,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612200852
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/marker/trait.StructuralEq.html\">https://doc.rust-lang.org/std/marker/trait.StructuralEq.html</a><br>\n<a href=\"https://doc.rust-lang.org/std/marker/trait.StructuralPartialEq.html\">https://doc.rust-lang.org/std/marker/trait.StructuralPartialEq.html</a></p>",
        "id": 224762309,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612200898
    },
    {
        "content": "<p>Ah that's a shame. We're doing manual implementation of these traits in the <code>windows</code> crate because <a href=\"https://github.com/rust-lang/rust/issues/80118\">they are quite slow to derive</a>.</p>",
        "id": 224762958,
        "sender_full_name": "rylev",
        "timestamp": 1612201136
    },
    {
        "content": "<p>IIRC last time we checked, we saw that manually implementing the structural_match impls was still faster than using the derives (but still slower than not having them of course) ?</p>",
        "id": 224781217,
        "sender_full_name": "lqd",
        "timestamp": 1612209023
    },
    {
        "content": "<p>Is deriving just the Eq also expensive? That trait has no methods</p>",
        "id": 224784454,
        "sender_full_name": "nagisa",
        "timestamp": 1612210560
    },
    {
        "content": "<p>No, <code>Eq</code> is fairly fast. PartialEq is much slower</p>",
        "id": 224890360,
        "sender_full_name": "rylev",
        "timestamp": 1612281251
    },
    {
        "content": "<p>Do you have an example how the manual implementation looks like?</p>",
        "id": 224891637,
        "sender_full_name": "tm",
        "timestamp": 1612281697
    },
    {
        "content": "<p>When deriving both <code>eq</code> &amp; <code>ne</code> the derive compiles slightly faster than similar manual implementation. On the other hand omitting the <code>ne</code> makes quite a difference (probably we should remove it from derive unless there is some runtime impact).</p>",
        "id": 224917419,
        "sender_full_name": "tm",
        "timestamp": 1612291680
    },
    {
        "content": "<p>Though, the derive doesn't scale very well with the number of fields.</p>",
        "id": 224918951,
        "sender_full_name": "tm",
        "timestamp": 1612292255
    },
    {
        "content": "<p>The implementations happen in a proc macro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"nb\">PartialEq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"nb\">Eq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225024181,
        "sender_full_name": "rylev",
        "timestamp": 1612363317
    },
    {
        "content": "<p>I know from benchmarking that PartialOrd is the real trouble maker when it comes to compile times. I need to benchmark whether PartialEq derivation actually impacts compile times in a noticeable way</p>",
        "id": 225024431,
        "sender_full_name": "rylev",
        "timestamp": 1612363420
    },
    {
        "content": "<p>PartialEq and PartialOrd will generally produce very similar code, because they both ultimately either generate a match over the enum variants and compare the inner values or compare the struct fields.</p>",
        "id": 225025255,
        "sender_full_name": "nagisa",
        "timestamp": 1612363760
    },
    {
        "content": "<p>PartialOrd has a bunch more functions though, right? I think we still generate le/lt/ge/gt or more</p>",
        "id": 225025502,
        "sender_full_name": "simulacrum",
        "timestamp": 1612363862
    },
    {
        "content": "<p>I wouldn't be surprised we do that, but I wouldn't be surprised if it just implemented <code>fn partial_cmp</code> and then let the default impls of those methods do their thing.</p>",
        "id": 225026351,
        "sender_full_name": "nagisa",
        "timestamp": 1612364237
    },
    {
        "content": "<p>Just checked, it exapands to implementing every method. <code>eq</code> and <code>ne</code> for <code>PartialEq</code> and 5 methods for <code>PartialOrd</code>.</p>",
        "id": 225026572,
        "sender_full_name": "nagisa",
        "timestamp": 1612364345
    },
    {
        "content": "<p>so off hand estimate is that <code>PartialOrd</code> is 2.5 times more expensive to derive compared to <code>PartialEq</code>.</p>",
        "id": 225026623,
        "sender_full_name": "nagisa",
        "timestamp": 1612364372
    },
    {
        "content": "<p>I find it interesting that <code>PartialOrd</code> derive calls the contained types' <code>partial_cmp</code> even in the <code>le</code>/<code>ge</code>/etc. methods rather than directly calling their <code>le</code>/<code>ge</code>/etc.</p>",
        "id": 225026844,
        "sender_full_name": "nagisa",
        "timestamp": 1612364464
    },
    {
        "content": "<p>That seems like something that should be fixed - partial_cmp can do more work than le/ge/etc in some cases</p>",
        "id": 225028041,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612364888
    },
    {
        "content": "<p>With regards to PartialOrd, my intention is to remove all remaining operators as described in <a href=\"https://github.com/rust-lang/rust/pull/81384#issuecomment-772446462\">https://github.com/rust-lang/rust/pull/81384#issuecomment-772446462</a>.</p>",
        "id": 225030359,
        "sender_full_name": "tm",
        "timestamp": 1612365741
    },
    {
        "content": "<p>The implementation additionally uses nested closures which triggers an exponential compile time behaviour with respect to the number of fields.</p>",
        "id": 225030415,
        "sender_full_name": "tm",
        "timestamp": 1612365775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/122651-general/topic/Pattern.20matching.20on.20constants.20only.20when.20deriving.20Partial(Eq)/near/225028041\">said</a>:</p>\n<blockquote>\n<p>That seems like something that should be fixed - partial_cmp can do more work than le/ge/etc in some cases</p>\n</blockquote>\n<p>Yeah, that would make sense to me, but also an observable change in user code that would need to be scrutinized.</p>",
        "id": 225033676,
        "sender_full_name": "nagisa",
        "timestamp": 1612367147
    },
    {
        "content": "<p>Why observable change? They both use <code>partial_cmp</code> if not for the fact they are currently derived incorrectly <a href=\"https://github.com/rust-lang/rust/issues/81373\">#81373</a>, the behaviour would be exactly the same.</p>",
        "id": 225033986,
        "sender_full_name": "tm",
        "timestamp": 1612367280
    },
    {
        "content": "<p>And if you are not currently encountering the buggy part of the implementation, the fields would observe exactly the same sequence of <code>partial_cmp</code> invocations.</p>",
        "id": 225034469,
        "sender_full_name": "tm",
        "timestamp": 1612367447
    },
    {
        "content": "<p>Oh, I misunderstood, you were proposing using <code>le</code>/<code>ge</code> directly. This would require at least two calls per field to deal with incomparable values. Old implementation used to work like that, but that in turn was exponential in runtime with respect to type nesting.</p>",
        "id": 225035421,
        "sender_full_name": "tm",
        "timestamp": 1612367789
    },
    {
        "content": "<p>I think, only last trailing comparison could be implemented like that.</p>",
        "id": 225035555,
        "sender_full_name": "tm",
        "timestamp": 1612367854
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/50011\">https://github.com/rust-lang/rust/pull/50011</a></p>",
        "id": 225036275,
        "sender_full_name": "tm",
        "timestamp": 1612368067
    },
    {
        "content": "<p>ah right</p>",
        "id": 225036520,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612368147
    },
    {
        "content": "<p>Do we do the \"if you're deriving both PartialOrd and Ord then use the Ord implementation from PartialOrd\" thing?  (Like IIRC with do with Copy+Clone)</p>",
        "id": 225053556,
        "sender_full_name": "scottmcm",
        "timestamp": 1612374855
    },
    {
        "content": "<p>We don't do anything fancy like that for Ord.</p>",
        "id": 225061363,
        "sender_full_name": "tm",
        "timestamp": 1612377847
    },
    {
        "content": "<p>Just thinking that <code>Ord</code> would be the one where potentially-overridden <code>PartialOrd::lt</code> in subfields becomes not a concern, so might save some volume-of-code-emitted.</p>",
        "id": 225062788,
        "sender_full_name": "scottmcm",
        "timestamp": 1612378345
    }
]