[
    {
        "content": "<p>Is it legal to have a slice of u8 that starts at, say, address <code>!0 - 0xff</code> with a length of 512?</p>",
        "id": 163579836,
        "sender_full_name": "Jethro",
        "timestamp": 1555520227
    },
    {
        "content": "<p>maybe no because one of the elements is at address 0, which it's not legal to have a reference to</p>",
        "id": 163579873,
        "sender_full_name": "Jethro",
        "timestamp": 1555520258
    },
    {
        "content": "<p>what if you have a slice of structs that you happen to have aligned such that no field is at address 0?</p>",
        "id": 163579946,
        "sender_full_name": "Jethro",
        "timestamp": 1555520305
    },
    {
        "content": "<p>not sure how to actually make such a struct because 0 is aligned for all alignments</p>",
        "id": 163580262,
        "sender_full_name": "Jethro",
        "timestamp": 1555520571
    },
    {
        "content": "<p>no, address computation must not overflow</p>",
        "id": 163580711,
        "sender_full_name": "RalfJ",
        "timestamp": 1555520935
    },
    {
        "content": "<p>makes sense</p>",
        "id": 163580963,
        "sender_full_name": "Jethro",
        "timestamp": 1555521109
    },
    {
        "content": "<p>how strict is that?</p>",
        "id": 163580970,
        "sender_full_name": "Jethro",
        "timestamp": 1555521116
    },
    {
        "content": "<p>is it invalid to create a fat raw pointer with a length that's too long?</p>",
        "id": 163581027,
        "sender_full_name": "Jethro",
        "timestamp": 1555521128
    },
    {
        "content": "<p>or is it just for references</p>",
        "id": 163581093,
        "sender_full_name": "Jethro",
        "timestamp": 1555521168
    },
    {
        "content": "<p>uh. no idea.^^</p>",
        "id": 163581610,
        "sender_full_name": "RalfJ",
        "timestamp": 1555521529
    },
    {
        "content": "<p>this is essnetially the question of whether raw fat ptr metadata must be valid, which is not decided</p>",
        "id": 163581629,
        "sender_full_name": "RalfJ",
        "timestamp": 1555521544
    },
    {
        "content": "<p>but even if you can <em>have</em> the raw ptr, you'd not be allowed to <em>use</em> it</p>",
        "id": 163581643,
        "sender_full_name": "RalfJ",
        "timestamp": 1555521556
    },
    {
        "content": "<p>sure</p>",
        "id": 163581681,
        "sender_full_name": "Jethro",
        "timestamp": 1555521593
    },
    {
        "content": "<p>mostly a question of whether I need to check validity before creating the pointer or whether I can do it after</p>",
        "id": 163581754,
        "sender_full_name": "Jethro",
        "timestamp": 1555521611
    },
    {
        "content": "<p>I guess I'm creating the fat pointer by calling slice::from_raw_parts and then converting it to a pointer, which I suppose is always invalid</p>",
        "id": 163581873,
        "sender_full_name": "Jethro",
        "timestamp": 1555521698
    },
    {
        "content": "<p>yeah then you have a reference (for a short time)</p>",
        "id": 163584086,
        "sender_full_name": "RalfJ",
        "timestamp": 1555523093
    }
]