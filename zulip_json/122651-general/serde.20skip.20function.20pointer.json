[
    {
        "content": "<p>Hello, I'm fairly new to Rust and have run into the following issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>filename.rs:\n\npub type MyFnType = fn(usize) -&gt; usize;\npub fn default_fn(index: usize) -&gt; usize {\n    0\n}\n\n#[derive(Serialize, Deserialize)]\npub struct MyStruct {\n    pub some_var: usize,\n    #[serde(skip)]\n    #[serde(default = &quot;crate::filename::default_fn&quot;)]\n\n    pub fun_var: MyFnType,\n}\n</code></pre></div>\n<p>The issue is serde can't serialize a function pointer, so I am forced to skip it. Serde then tries to find a MyFnType::default() function, but it doesn't exist and can't exist because of orphan trait rule or however it's called. So I try to pass in a default value by hand, but it seems serde's default macro is trying to call the function instead of passing the function pointer. I see two options: write a custom deserializer for MyStruct or write a function that returns a closure of type MyFnType, but both options seem somewhat silly to me. Is there no trivial way to fix this? </p>\n<p>Thanks in advance.</p>",
        "id": 259819475,
        "sender_full_name": "Vitaly Artemiev",
        "timestamp": 1635731132
    },
    {
        "content": "<p>tried wrapping it in an option <code>Option</code>?</p>",
        "id": 259819748,
        "sender_full_name": "The 8472",
        "timestamp": 1635731608
    },
    {
        "content": "<p>You can define a function that returns <code>crate::filename::default_fn</code> and use that new function with <code>#[serde(default)]</code>. I think that's the way to do it with Serde.</p>",
        "id": 259819821,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635731715
    },
    {
        "content": "<p>Thanks, for some reason I thought you can only return closures, not functions</p>",
        "id": 259820168,
        "sender_full_name": "Vitaly Artemiev",
        "timestamp": 1635732105
    },
    {
        "content": "<p>Kinda strange that there's no issue about this in serde repository or anywhere, I wouldn't think this is such a rare use case</p>",
        "id": 259820411,
        "sender_full_name": "Vitaly Artemiev",
        "timestamp": 1635732398
    }
]