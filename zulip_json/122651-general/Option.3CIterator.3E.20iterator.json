[
    {
        "content": "<p>Is there an implementation of an iterator over (a newtype around) <code>Option&lt;impl Iterator&gt;</code> in the standard library? I notice that <code>Fuse</code> has exactly this type but doesn't let you construct the <code>None</code> variant</p>",
        "id": 208171965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598494183
    },
    {
        "content": "<p>er, Fuse is not that type, or at least has different behavior than Option</p>",
        "id": 208172017,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494224
    },
    {
        "content": "<p>We can add a Fuse::empty() constructor if that'd be helpful, though</p>",
        "id": 208172027,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494245
    },
    {
        "content": "<p>I realize this is kind of an abuse of <code>Fuse</code>. If there is a better type with the same representation I'm all ears</p>",
        "id": 208172272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598494678
    },
    {
        "content": "<p>What are you using it for?</p>",
        "id": 208172313,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494696
    },
    {
        "content": "<p>I want to return either an iterator or empty</p>",
        "id": 208172319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598494712
    },
    {
        "content": "<p>But not an empty Iterator?</p>",
        "id": 208172321,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494729
    },
    {
        "content": "<p>I want something that yields elements of the underlying iterator, in the first case, and yields none immediately in the second case</p>",
        "id": 208172331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598494764
    },
    {
        "content": "<p>I can implement such a thing with a data representation that is <code>Option&lt;I&gt;</code> but I assume such a thing already exists</p>",
        "id": 208172363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598494784
    },
    {
        "content": "<p>You could do it with .filter I guess</p>",
        "id": 208172366,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494787
    },
    {
        "content": "<p>The current best contender I think is <code>flatten</code> on <code>Option::IntoIter</code></p>",
        "id": 208172416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598494819
    },
    {
        "content": "<p>but I think the data representation of that is somewhat larger than just <code>Option&lt;I&gt;</code></p>",
        "id": 208172422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598494841
    },
    {
        "content": "<p>Hm shouldn't be I think</p>",
        "id": 208172435,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494880
    },
    {
        "content": "<p>.filter will work though without the option</p>",
        "id": 208172443,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494904
    },
    {
        "content": "<p>I would not be opposed to adding a method to Fuse which, uh, lights the fuse so to speak too</p>",
        "id": 208172497,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494964
    },
    {
        "content": "<p>(forcing it to return None)</p>",
        "id": 208172502,
        "sender_full_name": "simulacrum",
        "timestamp": 1598494976
    },
    {
        "content": "<p><code>flatten</code> has quite a lot of stuff in it, because it supports forward and reverse iteration and also fuses it's internal iterator</p>",
        "id": 208172562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598495056
    },
    {
        "content": "<p>How would <code>filter</code> work? In the none case I don't have an iterator to filter in the first place</p>",
        "id": 208172578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598495100
    },
    {
        "content": "<p>Oh, I guess I misunderstood</p>",
        "id": 208172664,
        "sender_full_name": "simulacrum",
        "timestamp": 1598495209
    },
    {
        "content": "<p>Yeah flatten is probably your best bet</p>",
        "id": 208172669,
        "sender_full_name": "simulacrum",
        "timestamp": 1598495217
    },
    {
        "content": "<p>Note that <code>Fuse</code> assumes it will never have <code>None</code> for a <code>FusedIterator</code></p>",
        "id": 208173308,
        "sender_full_name": "cuviper",
        "timestamp": 1598496252
    },
    {
        "content": "<p>You could use <code>Either&lt;I, Empty&gt;</code> in general, which I think will even have the same size as <code>Option&lt;I&gt;</code></p>",
        "id": 208173334,
        "sender_full_name": "cuviper",
        "timestamp": 1598496350
    },
    {
        "content": "<p>I noticed that; I'm now seeing if I can prove that this is UB in safe code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">FusedIterator</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Liar</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Liar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">take</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FusedIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Liar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Liar</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">fuse</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><code>miri</code> doesn't notice any issue, but it doesn't print <code>None</code>. I don't know enough about getting rust to show the relevant mir output to confirm</p>",
        "id": 208173548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598496612
    },
    {
        "content": "<p>Assuming I'm reading it correctly, either the <code>unreachable_unchecked</code> needs to be downgraded to <code>unreachable!</code> or <code>FusedIterator</code> should be an unsafe trait</p>",
        "id": 208173630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598496736
    },
    {
        "content": "<p>Why? You haven't demonstrated any memory unsafety.</p>",
        "id": 208173647,
        "sender_full_name": "cuviper",
        "timestamp": 1598496774
    },
    {
        "content": "<p>It's semantically wrong since your <code>FusedIterator</code> doesn't fuse itself, but it's still safe.</p>",
        "id": 208173683,
        "sender_full_name": "cuviper",
        "timestamp": 1598496835
    },
    {
        "content": "<p>It's hitting <code>unreachable_unchecked</code>. I'm pretty sure that can cause memory unsafety once LLVM goes to town on it</p>",
        "id": 208173815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598496982
    },
    {
        "content": "<p>The safety invariant is that <code>Fuse</code> should never set its iterator to <code>None</code> in this case, to keep that <code>unreachable_unchecked</code> valid</p>",
        "id": 208173816,
        "sender_full_name": "cuviper",
        "timestamp": 1598496982
    },
    {
        "content": "<p>Oh you are saying that the <code>Fuse</code> implementation is not setting itself to <code>None</code></p>",
        "id": 208173840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598497032
    },
    {
        "content": "<p>Right</p>",
        "id": 208173846,
        "sender_full_name": "cuviper",
        "timestamp": 1598497040
    },
    {
        "content": "<p>ok false alarm</p>",
        "id": 208173867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598497079
    }
]