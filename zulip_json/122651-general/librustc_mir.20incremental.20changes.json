[
    {
        "content": "<p>Is it just me or did incremental changes to librustc_mir get a lot slower? I think it used to be on the order of 3-4min for a <code>./x.py build --keep-stage 0 src/rustc</code>, now it's 5min just for the compiler artifacts and 7min in total. (also since when does the LLVM backend depend on <code>rand</code>? Are we generating random code now? :D )</p>",
        "id": 171623878,
        "sender_full_name": "RalfJ",
        "timestamp": 1563988039
    },
    {
        "content": "<p>Hashing needs <code>rand</code> I guess</p>",
        "id": 171624344,
        "sender_full_name": "oli",
        "timestamp": 1563988394
    },
    {
        "content": "<p>I think the <code>rand</code> dependency is coming from <code>cc</code> which uses <code>tempdir</code> which uses <code>rand</code>. Seems innocuous enough.</p>",
        "id": 171625368,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1563989146
    },
    {
        "content": "<p>yeah I also don't think <code>rand</code> is responsible for the slowdown</p>",
        "id": 171626549,
        "sender_full_name": "RalfJ",
        "timestamp": 1563989981
    },
    {
        "content": "<p><code>thread::sleep_ms(rand::random())</code></p>",
        "id": 171636528,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1563997409
    },
    {
        "content": "<p><code>const _: () = thread::sleep_ms(rand::random())</code> otherwise it won't affect compiletimes</p>",
        "id": 171641565,
        "sender_full_name": "oli",
        "timestamp": 1564001035
    },
    {
        "content": "<p>Except when its part of the compiler :D</p>",
        "id": 171642232,
        "sender_full_name": "nagisa",
        "timestamp": 1564001546
    },
    {
        "content": "<p>Something that seems like it could acutally be <code>const</code> at some point:<br>\n<code>const _: MaybeUninit&lt;[u8; 1 &lt;&lt; (SystemTime::now() - UNIX_EPOCH).as_secs() % 30]&gt; = MaybeUninit::zeroed()</code><br>\nBorrowing idea from <code>C</code>s initial randomness, the <code>__TIME__</code> macro.</p>",
        "id": 171642731,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1564001899
    },
    {
        "content": "<p>That is a very bad idea</p>",
        "id": 171642895,
        "sender_full_name": "oli",
        "timestamp": 1564002004
    },
    {
        "content": "<p>Especially considering that it would make a const fn return different values at each invocation</p>",
        "id": 171643135,
        "sender_full_name": "oli",
        "timestamp": 1564002186
    },
    {
        "content": "<p>Similar to <code>__TIME__</code> I would expect the value to be <em>some</em> constant during compilation such as the start time.</p>",
        "id": 171643248,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1564002257
    },
    {
        "content": "<p>I'm fairly certain that combined with const prop you'd be able to cause UB or sth</p>",
        "id": 171643252,
        "sender_full_name": "oli",
        "timestamp": 1564002263
    },
    {
        "content": "<p>Different crates will see different values</p>",
        "id": 171643259,
        "sender_full_name": "oli",
        "timestamp": 1564002273
    },
    {
        "content": "<p>Also if you just want some constant, I propose <code>const fn random() -&gt; i32 { 4 /* chosen by fair dice roll */}</code></p>",
        "id": 171643449,
        "sender_full_name": "oli",
        "timestamp": 1564002430
    },
    {
        "content": "<p>I mean if you use <code>include_bytes!</code> on a <code>/dev/foo</code> you can already get random stuff at compile time and process that via const eval</p>",
        "id": 171643543,
        "sender_full_name": "oli",
        "timestamp": 1564002497
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 171643583,
        "sender_full_name": "oli",
        "timestamp": 1564002543
    },
    {
        "content": "<p>Also, we should probably edit the topic</p>",
        "id": 171643604,
        "sender_full_name": "oli",
        "timestamp": 1564002577
    }
]