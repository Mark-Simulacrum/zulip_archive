[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">//                      ^ expected expression, found `&amp;&amp;`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This example works with parentheses around the <code>match</code> expression. I guess this is due to a parser ambiguity between expressions and statements?</p>",
        "id": 203466780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594352689
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203467263,
        "sender_full_name": "kennytm",
        "timestamp": 1594353437
    },
    {
        "content": "<p>I guess that the parentheses around <code>false</code> are needed there to distinguish it from the (nonsense) three statements</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203468241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594354964
    },
    {
        "content": "<p>What are the rules around statement splitting? Are they written down or discussed anywhere?</p>",
        "id": 203468295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594355046
    },
    {
        "content": "<p>wait what</p>",
        "id": 203470328,
        "sender_full_name": "eddyb",
        "timestamp": 1594358373
    },
    {
        "content": "<p><code>&amp;&amp;false</code> should be a valid expression</p>",
        "id": 203470331,
        "sender_full_name": "eddyb",
        "timestamp": 1594358384
    },
    {
        "content": "<p>(of type <code>&amp;&amp;bool</code>)</p>",
        "id": 203470333,
        "sender_full_name": "eddyb",
        "timestamp": 1594358396
    },
    {
        "content": "<p>It is, but the issue here seems to be that parsing is ambiguous - there are multiple parse trees yielding the same token sequence</p>",
        "id": 203472073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594360922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> but the <code>rustc</code> parser doesn't really understand ambiguity</p>",
        "id": 203577340,
        "sender_full_name": "eddyb",
        "timestamp": 1594436700
    },
    {
        "content": "<p>it's largely LL(k) for small k (4? not sure)</p>",
        "id": 203577347,
        "sender_full_name": "eddyb",
        "timestamp": 1594436714
    },
    {
        "content": "<p>Right; of course the parser is deterministic, so something has to come out at the end, but the basic CFG style presentation of the grammar will contain impossible parses as a result</p>",
        "id": 203577391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594436783
    },
    {
        "content": "<p>I mean that the error is nonsensical because <code>&amp;&amp;</code> can start an expression</p>",
        "id": 203577392,
        "sender_full_name": "eddyb",
        "timestamp": 1594436805
    },
    {
        "content": "<p>shortest example I can make: <code>fn main() { {} &amp;&amp; false }</code></p>",
        "id": 203577393,
        "sender_full_name": "eddyb",
        "timestamp": 1594436808
    },
    {
        "content": "<p>well, <code>false</code> could be any expression</p>",
        "id": 203577394,
        "sender_full_name": "eddyb",
        "timestamp": 1594436816
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: expected expression, found `&amp;&amp;`\n --&gt; src/main.rs:1:16\n  |\n1 | fn main() { {} &amp;&amp; false }\n  |             -- ^^ expected expression\n  |             |\n  |             help: parentheses are required to parse this as an expression: `({})`\n</code></pre></div>",
        "id": 203577398,
        "sender_full_name": "eddyb",
        "timestamp": 1594436831
    },
    {
        "content": "<p>oh, that's more help than I got</p>",
        "id": 203577400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594436858
    },
    {
        "content": "<p>I wonder if this error comes from something that doesn't actually correctly implement a heuristic for \"what tokens can start an expression\"</p>",
        "id": 203577402,
        "sender_full_name": "eddyb",
        "timestamp": 1594436861
    },
    {
        "content": "<p>My interpretation of the error is that it has decided that it is three statements <code>{}</code> <code>&amp;&amp;</code> <code>false</code> and the middle one is not well formed</p>",
        "id": 203577446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594436897
    },
    {
        "content": "<p>or it's intentional, but in that case... yeah it behaves correctly with <code>&amp; &amp; false</code></p>",
        "id": 203577447,
        "sender_full_name": "eddyb",
        "timestamp": 1594436898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> nope, that should be impossible</p>",
        "id": 203577448,
        "sender_full_name": "eddyb",
        "timestamp": 1594436913
    },
    {
        "content": "<p>that normally happens if you write <code>{} expr</code> is that it's equivalent to having a semicolon between them</p>",
        "id": 203577451,
        "sender_full_name": "eddyb",
        "timestamp": 1594436930
    },
    {
        "content": "<p><code>{} &amp;&amp;false</code> should work exactly like <code>{} &amp; &amp;false</code></p>",
        "id": 203577458,
        "sender_full_name": "eddyb",
        "timestamp": 1594436943
    },
    {
        "content": "<p>and <code>&amp;&amp;false</code>, when parsed as an expression, does parse like <code>&amp; &amp;false</code></p>",
        "id": 203577463,
        "sender_full_name": "eddyb",
        "timestamp": 1594436959
    },
    {
        "content": "<p>I guess there must be some special casing to turn <code>&amp;&amp;</code> into <code>&amp;</code> <code>&amp;</code>?</p>",
        "id": 203577465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594436979
    },
    {
        "content": "<p>so it must be <em>something else</em> that is checking \"can this token start an expression\" and produce the confusing error</p>",
        "id": 203577466,
        "sender_full_name": "eddyb",
        "timestamp": 1594436981
    },
    {
        "content": "<p>composite tokens semi-automatically decompose</p>",
        "id": 203577468,
        "sender_full_name": "eddyb",
        "timestamp": 1594436994
    },
    {
        "content": "<p>ideally we'd have the <code>libproc_macro</code> token model which has individual punctuation characters with \"is this adjoined to the next punctuation character\" flags</p>",
        "id": 203577508,
        "sender_full_name": "eddyb",
        "timestamp": 1594437040
    },
    {
        "content": "<p>anyway I might be able to find the problem code</p>",
        "id": 203577509,
        "sender_full_name": "eddyb",
        "timestamp": 1594437056
    },
    {
        "content": "<p>I mean it's true that <code>&amp;&amp;</code> can't start an expression, expressions have to start with <code>&amp;</code> <code>&amp;</code> so it looks like the token decomposition didn't happen or didn't happen at the right time</p>",
        "id": 203577515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594437077
    },
    {
        "content": "<p>but <code>&amp;&amp;false</code> is a valid expression</p>",
        "id": 203577561,
        "sender_full_name": "eddyb",
        "timestamp": 1594437129
    },
    {
        "content": "<p><del>try it!</del> nvm I think I misread what you said, <code>&amp;</code> <code>&amp;</code> doesn't look very different from <code>&amp; &amp;</code> in dark mode</p>",
        "id": 203577562,
        "sender_full_name": "eddyb",
        "timestamp": 1594437131
    },
    {
        "content": "<p>okay I think I found it and judging by the looks of this code it <em>is</em> intentional (to some extent?) but the error message doesn't get across what it means</p>",
        "id": 203577570,
        "sender_full_name": "eddyb",
        "timestamp": 1594437182
    },
    {
        "content": "<p>okay <code>should_continue_as_assoc_expr</code> is confusing me further but it explicitly lists <code>&amp;&amp;</code> so I assume this is very much intentional</p>",
        "id": 203577621,
        "sender_full_name": "eddyb",
        "timestamp": 1594437289
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_parse/parser/expr.rs#L293-L299\">https://github.com/rust-lang/rust/blob/master/src/librustc_parse/parser/expr.rs#L293-L299</a></p>",
        "id": 203577632,
        "sender_full_name": "eddyb",
        "timestamp": 1594437329
    },
    {
        "content": "<p>I notice also that <code>fn main() { {} &amp;&amp; false }</code> complains about the return type being <code>()</code> instead of <code>bool</code> so it has decided that <code>false</code> is a statement on its own</p>",
        "id": 203577633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594437333
    },
    {
        "content": "<p>if it produced an error during parsing, it's likely the AST <del>is broken</del> doesn't match the source too well</p>",
        "id": 203577634,
        "sender_full_name": "eddyb",
        "timestamp": 1594437357
    },
    {
        "content": "<p>presumably threw away the <code>&amp;&amp;</code> and kept going</p>",
        "id": 203577677,
        "sender_full_name": "eddyb",
        "timestamp": 1594437381
    },
    {
        "content": "<p>Where is that <code>ambiguous_block_expr_parse</code> used later?</p>",
        "id": 203577691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594437465
    },
    {
        "content": "<p>ughhhh apparently this sort of thing was introduced for diagnostics <a href=\"https://github.com/rust-lang/rust/pull/60188\">https://github.com/rust-lang/rust/pull/60188</a></p>",
        "id": 203577730,
        "sender_full_name": "eddyb",
        "timestamp": 1594437502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> oh this behavior might actually be a bug</p>",
        "id": 203577740,
        "sender_full_name": "eddyb",
        "timestamp": 1594437558
    },
    {
        "content": "<p><code>{} &amp;&amp; 0</code> does what one might expect</p>",
        "id": 203577741,
        "sender_full_name": "eddyb",
        "timestamp": 1594437568
    },
    {
        "content": "<p>Is it because <code>false</code> is a <code>is_reserved_ident()</code>?</p>",
        "id": 203577751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594437601
    },
    {
        "content": "<p>yeah, it's a keyword</p>",
        "id": 203577791,
        "sender_full_name": "eddyb",
        "timestamp": 1594437607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> is the intention here to look for <em>control-flow</em> keywords? <a href=\"https://github.com/rust-lang/rust/blob/daecab3a784f28082df90cebb204998051f3557d/src/librustc_parse/parser/expr.rs#L300-L302\">https://github.com/rust-lang/rust/blob/daecab3a784f28082df90cebb204998051f3557d/src/librustc_parse/parser/expr.rs#L300-L302</a></p>",
        "id": 203577794,
        "sender_full_name": "eddyb",
        "timestamp": 1594437617
    },
    {
        "content": "<p>which also explains why <code>&amp;&amp;(false)</code> works</p>",
        "id": 203577797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594437623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> because there's way more keywords in Rust and not all of them have the same properties</p>",
        "id": 203577806,
        "sender_full_name": "eddyb",
        "timestamp": 1594437654
    },
    {
        "content": "<p>also left a comment on the PR but maybe a new issue should be created <a href=\"https://github.com/rust-lang/rust/pull/61500#discussion_r453148523\">https://github.com/rust-lang/rust/pull/61500#discussion_r453148523</a></p>",
        "id": 203577883,
        "sender_full_name": "eddyb",
        "timestamp": 1594437786
    },
    {
        "content": "<p>it's unclear from the code what the effect is but this definitely seems to be the condition getting triggered</p>",
        "id": 203577887,
        "sender_full_name": "eddyb",
        "timestamp": 1594437803
    },
    {
        "content": "<p>also \"expected expression, found <code>...</code>\" looks very wrong when the token in question can actually start an expression</p>",
        "id": 203577934,
        "sender_full_name": "eddyb",
        "timestamp": 1594437849
    },
    {
        "content": "<p>but I guess it makes sense for something like <code>{} / 2</code>, where <code>/2</code> is not a valid expression</p>",
        "id": 203577936,
        "sender_full_name": "eddyb",
        "timestamp": 1594437862
    },
    {
        "content": "<p>Note that this code, mentioned in the comment, also triggers the same <code>expected expression, found &amp;&amp;</code> error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203577937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594437868
    },
    {
        "content": "<p>huh I wonder if the \"Fix regression\" PR actually introduced a new bug</p>",
        "id": 203577949,
        "sender_full_name": "eddyb",
        "timestamp": 1594437891
    },
    {
        "content": "<p>it's not clear from the comment text if it is intended to show a known good case or a known bad case</p>",
        "id": 203577955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594437911
    },
    {
        "content": "<p>oh the test shows what it's trying to prevent</p>",
        "id": 203577973,
        "sender_full_name": "eddyb",
        "timestamp": 1594437949
    },
    {
        "content": "<p><code>&amp;&amp;A =&gt; {} &amp;&amp;B =&gt; {}</code> in a <code>match</code></p>",
        "id": 203577977,
        "sender_full_name": "eddyb",
        "timestamp": 1594437959
    },
    {
        "content": "<p>specifically the middle interaction</p>",
        "id": 203578014,
        "sender_full_name": "eddyb",
        "timestamp": 1594437967
    },
    {
        "content": "<p>oh but <code>&amp;&amp;true =&gt; {} &amp;&amp;false =&gt; {}</code> is also valid in the same context</p>",
        "id": 203578100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594438151
    },
    {
        "content": "<p>as it should be. nobody is suggesting that <code>{} &amp;&amp; ...</code> actually parse as a logical AND expression I don't think</p>",
        "id": 203578157,
        "sender_full_name": "eddyb",
        "timestamp": 1594438204
    },
    {
        "content": "<p>(well, my first post was suggesting that but I've since repented)</p>",
        "id": 203578171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594438242
    },
    {
        "content": "<p>what case does <code>{} &amp; false</code> even hit?</p>",
        "id": 203578181,
        "sender_full_name": "eddyb",
        "timestamp": 1594438303
    },
    {
        "content": "<p>maybe that's what we're missing</p>",
        "id": 203578183,
        "sender_full_name": "eddyb",
        "timestamp": 1594438307
    },
    {
        "content": "<p>presumably <code>can_continue_expr_unambiguously</code>?</p>",
        "id": 203578223,
        "sender_full_name": "eddyb",
        "timestamp": 1594438323
    },
    {
        "content": "<p>ah! <a href=\"https://github.com/rust-lang/rust/blob/daecab3a784f28082df90cebb204998051f3557d/src/librustc_parse/parser/expr.rs#L308\">https://github.com/rust-lang/rust/blob/daecab3a784f28082df90cebb204998051f3557d/src/librustc_parse/parser/expr.rs#L308</a></p>",
        "id": 203578226,
        "sender_full_name": "eddyb",
        "timestamp": 1594438337
    },
    {
        "content": "<p>the first time I read this I missed the <code>!</code></p>",
        "id": 203578232,
        "sender_full_name": "eddyb",
        "timestamp": 1594438355
    },
    {
        "content": "<p>so it's skipping erroring if it may be ambiguous</p>",
        "id": 203578239,
        "sender_full_name": "eddyb",
        "timestamp": 1594438367
    },
    {
        "content": "<p>so the definition of <code>can_continue_expr_unambiguously</code> is probably wrong</p>",
        "id": 203578244,
        "sender_full_name": "eddyb",
        "timestamp": 1594438383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> oh another fun trick is using godbolt to show that code that compiled on some older version has since regressed</p>",
        "id": 203578257,
        "sender_full_name": "eddyb",
        "timestamp": 1594438423
    },
    {
        "content": "<p>lemme go do that</p>",
        "id": 203578258,
        "sender_full_name": "eddyb",
        "timestamp": 1594438427
    },
    {
        "content": "<p>and then open an issue, assuming you haven't already</p>",
        "id": 203578259,
        "sender_full_name": "eddyb",
        "timestamp": 1594438436
    },
    {
        "content": "<p>I haven't (I'm still not quite sure what the \"right\" answer is in these examples)</p>",
        "id": 203578303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594438458
    },
    {
        "content": "<p><code>&amp;&amp;</code> parsing like <code>&amp; &amp;</code> does</p>",
        "id": 203578310,
        "sender_full_name": "eddyb",
        "timestamp": 1594438472
    },
    {
        "content": "<p>well, <code>} &amp;&amp;</code> specifically</p>",
        "id": 203578317,
        "sender_full_name": "eddyb",
        "timestamp": 1594438498
    },
    {
        "content": "<p>I think the parsing of <code>{} &amp; false</code> is right though?</p>",
        "id": 203578389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594438609
    },
    {
        "content": "<p>Because it cannot continue unambiguously, it stops the expr at the end of the block and continues as a separate statement</p>",
        "id": 203578396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594438638
    },
    {
        "content": "<p><code>&amp;&amp;</code> should do the same</p>",
        "id": 203578400,
        "sender_full_name": "eddyb",
        "timestamp": 1594438652
    },
    {
        "content": "<p>it's just a broken heuristic</p>",
        "id": 203578402,
        "sender_full_name": "eddyb",
        "timestamp": 1594438665
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/MTb489\">https://godbolt.org/z/MTb489</a></p>",
        "id": 203578405,
        "sender_full_name": "eddyb",
        "timestamp": 1594438670
    },
    {
        "content": "<p>yeah this is a stable-to-stable regression. brb writing bug report :D</p>",
        "id": 203578446,
        "sender_full_name": "eddyb",
        "timestamp": 1594438685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> sorry, got distracted <a href=\"https://github.com/rust-lang/rust/issues/74233\">https://github.com/rust-lang/rust/issues/74233</a></p>",
        "id": 203579024,
        "sender_full_name": "eddyb",
        "timestamp": 1594439791
    },
    {
        "content": "<p>what's your GitHub @? you should get props for hitting this</p>",
        "id": 203579037,
        "sender_full_name": "eddyb",
        "timestamp": 1594439819
    },
    {
        "content": "<p>(and asking about it instead of tweaking the code and moving on :P)</p>",
        "id": 203579053,
        "sender_full_name": "eddyb",
        "timestamp": 1594439848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that code you linked is supposed to not change parse behavior, only keep extra info around in case we encounter likely expressions missing parens. I'll read this thread later in more detail.</p>",
        "id": 203579683,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1594441091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> there were some false starts, mostly due to me looking in the wrong part of the code. the fix should just be removing one case from <code>can_continue_expr_unambiguously</code> (the <code>LAnd</code> aka <code>&amp;&amp;</code> one, which is actually as ambiguous as <code>&amp;</code>). it might even remove the need for <a href=\"https://github.com/rust-lang/rust/issues/61500\">#61500</a> (i.e. I think you may have worked around the regression using a heuristic when the problem was elsewhere)</p>",
        "id": 203579777,
        "sender_full_name": "eddyb",
        "timestamp": 1594441239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> the important stuff is detailed in my report, <a href=\"https://github.com/rust-lang/rust/issues/74233\">#74233</a></p>",
        "id": 203579779,
        "sender_full_name": "eddyb",
        "timestamp": 1594441255
    },
    {
        "content": "<p>anyway, while making a PR should be easy (just remove the <code>LAnd |</code> line), it might be possible to cleanup the other heuristics taking into account that multi-character punctuation can have different interpretations in different positions</p>",
        "id": 203579869,
        "sender_full_name": "eddyb",
        "timestamp": 1594441438
    },
    {
        "content": "<p>and also the thing about <code>+</code> not being a valid prefix operator in Rust, but that's neither here nor there</p>",
        "id": 203579918,
        "sender_full_name": "eddyb",
        "timestamp": 1594441482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> as to why it changed behavior: you're emitting an error that you thought was replacing a different error, but the conditions for emitting the error are incorrect in at least one case and it's emitted even though previously there was no error</p>",
        "id": 203579932,
        "sender_full_name": "eddyb",
        "timestamp": 1594441528
    },
    {
        "content": "<p>I'm surprised there isn't a different heuristic for \"can this start an expression\" that you could've used</p>",
        "id": 203579939,
        "sender_full_name": "eddyb",
        "timestamp": 1594441561
    },
    {
        "content": "<p>or maybe there is but it's annoying to use because of tokens etc.</p>",
        "id": 203579978,
        "sender_full_name": "eddyb",
        "timestamp": 1594441574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I am @digama0</p>",
        "id": 203708052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594643096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> thanks!</p>",
        "id": 203708655,
        "sender_full_name": "eddyb",
        "timestamp": 1594643480
    }
]