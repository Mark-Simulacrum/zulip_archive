[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FOO</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BAR</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>error: expected identifier, found `(`\n --&gt; src/lib.rs:1:8\n  |\n1 | static (FOO, BAR): (i32, i32) = (1, 2);\n  |        ^ expected identifier\n</code></pre></div>",
        "id": 205285595,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595967661
    },
    {
        "content": "<p>Do patterns have name mangling?</p>",
        "id": 205285913,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595967820
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <code>static</code>s often feel a bit more \"public\" than let bindings, so I prioritize readability a bit more here. So I am slightly against doing so.</p>",
        "id": 205285960,
        "sender_full_name": "lcnr",
        "timestamp": 1595967842
    },
    {
        "content": "<p>I mostly think that no one cared about this enough in the past to get this working, at least I personally did not see any discussions about this previously</p>",
        "id": 205286049,
        "sender_full_name": "lcnr",
        "timestamp": 1595967874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Why.20do.20we.20prevent.20defining.20statics.20via.20destructuring.3F/near/205285913\">said</a>:</p>\n<blockquote>\n<p>Do patterns have name mangling?</p>\n</blockquote>\n<p>couldn't we just mangle <code>FOO</code> and <code>BAR</code> separately here?</p>",
        "id": 205286143,
        "sender_full_name": "lcnr",
        "timestamp": 1595967926
    },
    {
        "content": "<p>If you were calling some <code>const fn</code> that returns a tuple in the initializer, how would you break it apart? I'd think that having two <code>static</code>s would be more readable than <code>FOO_BAR.0</code>.</p>",
        "id": 205286268,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595967970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/Why.20do.20we.20prevent.20defining.20statics.20via.20destructuring.3F/near/205286143\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Why.20do.20we.20prevent.20defining.20statics.20via.20destructuring.3F/near/205285913\">said</a>:</p>\n<blockquote>\n<p>Do patterns have name mangling?</p>\n</blockquote>\n<p>couldn't we just mangle <code>FOO</code> and <code>BAR</code> separately here?</p>\n</blockquote>\n<p>Yes, but not for <code>static (): () = ();</code> and other patterns</p>",
        "id": 205286418,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968040
    },
    {
        "content": "<p>Heh, I guess it would also be ambiguous with <code>static mut</code></p>",
        "id": 205286479,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968071
    },
    {
        "content": "<p><code>static ()</code> doesn't have any identifiers we can reference though, so there isn't a point in storing them, is there</p>",
        "id": 205286483,
        "sender_full_name": "lcnr",
        "timestamp": 1595968073
    },
    {
        "content": "<p>It should still create a symbol though, right?</p>",
        "id": 205286585,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968108
    },
    {
        "content": "<p>What about adding <code>#[no_mangle]</code> and <code>pub</code> to that static, for example?</p>",
        "id": 205286615,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968122
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[link_name = </span><span class=\"s\">&quot;Hey&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205286641,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595968134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Why.20do.20we.20prevent.20defining.20statics.20via.20destructuring.3F/near/205286615\">said</a>:</p>\n<blockquote>\n<p>What about adding <code>#[no_mangle]</code> and <code>pub</code> to that static, for example?</p>\n</blockquote>\n<p>what would <code>#[no_mangle]</code> even mean here</p>",
        "id": 205286656,
        "sender_full_name": "lcnr",
        "timestamp": 1595968142
    },
    {
        "content": "<p>exactly</p>",
        "id": 205286672,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968150
    },
    {
        "content": "<p>Also consider: or-patterns</p>",
        "id": 205286749,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968182
    },
    {
        "content": "<p>or-patterns:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">RESULT</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">RESULT</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">wow</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205286868,
        "sender_full_name": "lcnr",
        "timestamp": 1595968222
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">huh</span><span class=\"p\">)</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205286874,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968223
    },
    {
        "content": "<blockquote>\n<p>variable <code>huh</code> is not bound in all patterns</p>\n</blockquote>",
        "id": 205286937,
        "sender_full_name": "lcnr",
        "timestamp": 1595968259
    },
    {
        "content": "<p>that's \"easy\", you have the same error as <code>let</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>variable `a` is not bound in all patterns\n</code></pre></div>",
        "id": 205286945,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595968262
    },
    {
        "content": "<p>oh, right</p>",
        "id": 205286960,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968267
    },
    {
        "content": "<p>And I'd assume that it'd be <code>static (mut FOO, mut BAR) ...</code></p>",
        "id": 205287096,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595968328
    },
    {
        "content": "<p>I suppose you could just treat each ident binding as its own <code>static</code>, but it does make my brain hurt</p>",
        "id": 205287108,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968336
    },
    {
        "content": "<p>Would that create 2 unsafe statics?</p>",
        "id": 205287148,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968355
    },
    {
        "content": "<p>I'd be OK with the restriction, but I'm not sure how to work around it.</p>",
        "id": 205287189,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595968374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Why.20do.20we.20prevent.20defining.20statics.20via.20destructuring.3F/near/205287148\">said</a>:</p>\n<blockquote>\n<p>Would that create 2 unsafe statics?</p>\n</blockquote>\n<p>IMO yes.</p>",
        "id": 205287220,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595968389
    },
    {
        "content": "<p><code>mut ident</code> patterns have become kinda rare</p>",
        "id": 205287362,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968453
    },
    {
        "content": "<p>Like, if you have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">thing</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>how could you get each <code>i32</code> into a static without calling the function twice?</p>",
        "id": 205287372,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595968459
    },
    {
        "content": "<p>Now, maybe <em>because</em> it's <code>const</code>, calling it twice isn't a problem at all...</p>",
        "id": 205287388,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595968475
    },
    {
        "content": "<p>A <code>const fn</code> can't really be an expensive computation today, but once/if we get <code>if</code>s and loops in <code>const fn</code>, that might become a compile-time concern in certain very specific cases</p>",
        "id": 205287879,
        "sender_full_name": "Goat",
        "timestamp": 1595968702
    },
    {
        "content": "<p>if every single function which doesn't do FFI/system calls/memory allocations becomes a <code>const fn</code> at some point, some of them would certainly visibly affect compile time</p>",
        "id": 205288049,
        "sender_full_name": "Goat",
        "timestamp": 1595968794
    },
    {
        "content": "<p>that's a rather niche thing to optimize for, though</p>",
        "id": 205288139,
        "sender_full_name": "Goat",
        "timestamp": 1595968825
    },
    {
        "content": "<p>In these cases it can be solved by using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">WOW</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEFT</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WOW</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RIGHT</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WOW</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205288143,
        "sender_full_name": "lcnr",
        "timestamp": 1595968828
    },
    {
        "content": "<p>The value of <code>WOW</code> is cached, so thing should only get evaluated once</p>",
        "id": 205288167,
        "sender_full_name": "lcnr",
        "timestamp": 1595968843
    },
    {
        "content": "<p>aren't nullary <code>const fn</code> also cached?</p>",
        "id": 205288208,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595968865
    },
    {
        "content": "<p>maybe <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 205288241,
        "sender_full_name": "lcnr",
        "timestamp": 1595968887
    },
    {
        "content": "<p>This works, but the syntax is somewhat bulky; after all, tuple patterns are just syntactic sugar for:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_temporary_tuple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_tuple</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_temporary_tuple</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_temporary_tuple</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// equivalent to:</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_tuple</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205288569,
        "sender_full_name": "Goat",
        "timestamp": 1595969050
    },
    {
        "content": "<p>My point here is that if we have a way of destructuring output of a <code>const fn</code> into two constants, there's no reason not to add convenience syntax for that and that we <em>should</em> add it eventually</p>",
        "id": 205288819,
        "sender_full_name": "Goat",
        "timestamp": 1595969217
    },
    {
        "content": "<p>yeah, I don't think my solution is optimal here.</p>\n<p>I do however think that patterns in consts/statics require some implementation and design effort and are fairly far below an <code>awesome/effort</code> ratio of 1</p>",
        "id": 205289097,
        "sender_full_name": "lcnr",
        "timestamp": 1595969387
    }
]