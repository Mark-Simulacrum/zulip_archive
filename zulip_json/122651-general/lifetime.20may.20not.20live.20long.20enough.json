[
    {
        "content": "<p>I got the following snippet that does not compile,<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=06f7ea05b561238bb062206634871fe9\">playground</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If I am not mistaken, this should be valid but rust doesn't seem to understand the outlives relations here for closures(works fine as a function), is there a way to nudge rust to understand this here?</p>\n<p>Error log(<code>'2</code> I assume here should be the lifetime of the self parameter to <code>iter</code> right?):</p>\n<div class=\"codehilite\"><pre><span></span><code>error: lifetime may not live long enough\n --&gt; src/main.rs:5:9\n  |\n4 |     let _ = |b: &amp;HashMap&lt;(), ()&gt;| {\n  |                 -               - return type of closure is std::collections::hash_map::Iter&lt;&#39;2, (), ()&gt;\n  |                 |\n  |                 let&#39;s call the lifetime of this reference `&#39;1`\n5 |         b.iter()\n  |         ^^^^^^^^ returning this value requires that `&#39;1` must outlive `&#39;2`\n</code></pre></div>",
        "id": 265579745,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640015146
    },
    {
        "content": "<p>Isn't it the lifetime of the iterator returned by <code>iter()</code>?</p>",
        "id": 265580059,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640015288
    },
    {
        "content": "<p>How did you write that as a function?</p>",
        "id": 265580120,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640015334
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">hash_map</span>::<span class=\"n\">Iter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265580405,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640015454
    },
    {
        "content": "<p>hmm, I expected this to work, but it still gives the same error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">hash_map</span>::<span class=\"n\">Iter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265581022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640015705
    },
    {
        "content": "<p>I don't think this is fixable because closures don't allow specifying generic parameters</p>",
        "id": 265581059,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640015720
    },
    {
        "content": "<p>Yeah, it's strange. I have a feeling it's <a href=\"#narrow/stream/122651-general/topic/Borrow.20error.20on.20closure.20argument.20in.20loop\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Borrow.20error.20on.20closure.20argument.20in.20loop</a> all over again</p>",
        "id": 265581134,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640015750
    },
    {
        "content": "<p>That was my thought as well, but I think those are different issues, annoying as being able to write this would allow me to get rid of some duplication but nothing to grim</p>",
        "id": 265585752,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1640017882
    },
    {
        "content": "<p>Depending on <code>$stuff</code>, you might be able to define a struct and package the captured variables into it, like a hand-rolled closure</p>",
        "id": 265586927,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640018457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/lifetime.20may.20not.20live.20long.20enough/near/265581134\">said</a>:</p>\n<blockquote>\n<p>Yeah, it's strange. I have a feeling it's <a href=\"#narrow/stream/122651-general/topic/Borrow.20error.20on.20closure.20argument.20in.20loop\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Borrow.20error.20on.20closure.20argument.20in.20loop</a> all over again</p>\n</blockquote>\n<p>I confirm, it's the same issue, but with the <em>return</em> lifetime being inferred-and-thus-fixed-rather-than-higher-order, rather than the input lifetime. Indeed, while a non-elided / explicit input lifetime \"hole\" is enough to promote it to being higher-order, a lifetime in return position can only be higher-order promoted through the \"trait bounds retroaction\" where a literal closure expression is written / through the bounds on the function to which the closure is given.</p>\n<p>Hence the canonical (but cumbersome) workaround: the \"closure signature nudger\" funnel:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">funnel</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Iter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">funnel</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265636169,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640049111
    },
    {
        "content": "<p>Haha, that's a great idiom</p>",
        "id": 265652336,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640068673
    }
]