[
    {
        "content": "<p>Hello! I have a small issue I can't quite figure out.. I am trying to make a hash map based on Serde return values from a JSON file, like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>// &amp;Value is a serve_json Value type\n\npub fn (extracted_events: &amp;Value) {\n  let mut results: HashMap&lt;&amp;String, Vec&lt;&amp;serde_json::Value&gt;&gt; = HashMap::new();\n  for event in extracted_events.as_array().unwrap() {\n        let uid = event[&quot;_source&quot;][&quot;UID&quot;].to_string();\n        results.entry(&amp;uid).or_insert_with(Vec::new).push(event);\n  }\n}\n</code></pre></div>\n\n\n<p>Basically, iterate over the array of events from an ElasticSearch index, record the UID for each ES document as a String, then pass it to the \"entry\" method of \"results\" and if it does not exist, insert a new empty array in as a result, else just push the current event into the existing key's vector/array. However I am getting this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>   |\n52 |         results.entry(&amp;uid).or_insert_with(Vec::new).push(event);\n   |         -------       ^^^^^^^^ borrowed value does not live long enough\n   |         |\n   |         borrow later used here\n53 |     }\n   |     - `uid` dropped here while still borrowed\n</code></pre></div>\n\n\n<p>I don't get it.. I understood that to make this work, I HAVE to borrow from the event's value (\"UID\") in order to then be able to use it later. If I remove the ampersand, the compiler suggests putting it back, saying I should be borrowing. But then clearly the value of &amp;uid does not live long enough. What am I doing wrong here?</p>",
        "id": 211475869,
        "sender_full_name": "pm5k",
        "timestamp": 1601289623
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-  let mut results: HashMap&lt;&amp;String, Vec&lt;&amp;serde_json::Value&gt;&gt; = HashMap::new();</span>\n<span class=\"gi\">+  let mut results: HashMap&lt;String, Vec&lt;&amp;serde_json::Value&gt;&gt; = HashMap::new();</span>\n// ...\n<span class=\"gd\">-       results.entry(&amp;uid).or_insert_with(Vec::new).push(event);</span>\n<span class=\"gi\">+       results.entry(uid).or_insert_with(Vec::new).push(event);</span>\n</code></pre></div>",
        "id": 211479871,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601292725
    },
    {
        "content": "<p>The problem is that <code>to_string()</code>  creates a new <code>String</code> but the <code>HashMap</code> signature states it needs a reference to a <code>String</code>. But the new owned String instance returned by <code>to_string</code> lives not long enough as it is dropped at the end of the for loop iteration.</p>",
        "id": 211479922,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601292772
    },
    {
        "content": "<p>Basically the <code>uid</code> you are using is local to each iteration of the loop and is then disposed of as the next iteration happens. Thus, any borrow / reference to it dangles as soon as we leave one iteration of the loop. And yet you were using a <code>HashMap</code> whose keys were made of such borrows, and trying to use that <code>HashMap</code> with thus a dangling  key during the second iteration of the loop, which would have violated memory safety, hence the compilation error.<br>\nThe solution is then easy: instead of letting the <code>String</code> be disposed of at the end of the loop, while keeping a thus dangling reference as the key of the <code>HashMap</code>,  simply use that very <code>String</code> directly as the key of said <code>HashMap</code>, which thus holds it alive while the map itself is, avoiding any issues.<br>\nFWIW, <code>String</code> itself is already a \"pointer type\" (it's very similar to <code>Box&lt;str&gt;</code>, except for its <em>capacity</em> to keep growing), so there is no need to add that <code>&amp;</code> indirection <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211480267,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601293001
    },
    {
        "content": "<p>Wups Daniel was faster <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>Anyway I can recommend you to \"normally\" either use <code>&amp;str</code> or <code>String</code>.</p>\n<p>So either use what Daniel provided or use <code>as_str()</code> instead of <code>to_string()</code> (BUT that will return None if the json value is not a string while <code>to_string()</code> will display format whatever kind of value it is which won't fail but might not be what you want).</p>",
        "id": 211480779,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601293331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209646\">@Philipp Korber</span> and <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>  - thank you both! This works fine and I actually now understand why, thanks to both of you. I also found that thanks to how serde_json handles values, I need to convert \"uid\" by doing:</p>\n<div class=\"codehilite\"><pre><span></span><code>event[&quot;_source&quot;][&quot;uid&quot;].as_str().unwrap()\n</code></pre></div>\n\n\n<p>else it appears as - \"\\\"item1\\\"\" inside the resulting hash map. And then pass that into entry as <code>uid.to_string()</code>!  (What a headache..)</p>",
        "id": 211481007,
        "sender_full_name": "pm5k",
        "timestamp": 1601293483
    },
    {
        "content": "<p><code>to_string()</code> is provided by the standard library through the <code>ToString</code> trait automatically for any type implementing <code>Display</code>. <code>ToString</code> is in the prelude so you can always use that method without import. And <code>Value</code> \"displays\" as well-formed JSON.</p>",
        "id": 211481793,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601294021
    }
]