[
    {
        "content": "<p>I have a problem of needing to essentially provide a cfg-bool as a public API of a library. So far the only solution that comes to mind is to have a macro that spits out tokens provided certain cfgs were set, but that is very inconvenient to implement and not obvious to use.</p>",
        "id": 152710785,
        "sender_full_name": "nagisa",
        "timestamp": 1546103883
    },
    {
        "content": "<p>do we have any better solutions?</p>",
        "id": 152710792,
        "sender_full_name": "nagisa",
        "timestamp": 1546103889
    },
    {
        "content": "<p>I'm trying to understand what you mean by a \"cfg-bool\"? Is the intent to export a value that can somehow be used within attributes or other expansion-time constructs?</p>",
        "id": 157268802,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548938548
    },
    {
        "content": "<p>Or is this just a single value that you want to be used <em>as</em> something that would act like <code>#[cfg(bool)]</code> depending on some internal function  of various cfg's it sees?</p>",
        "id": 157268824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548938585
    },
    {
        "content": "<p>Well, the problem Iâ€™m trying to solve is as follows: certain functions simply do not exist for targets A, B and C.</p>",
        "id": 157269967,
        "sender_full_name": "nagisa",
        "timestamp": 1548939859
    },
    {
        "content": "<p>internally within the library I have the <code>cfg</code>s that I work based on. Those are generated by the build script.</p>",
        "id": 157269976,
        "sender_full_name": "nagisa",
        "timestamp": 1548939879
    },
    {
        "content": "<p>Now how do I export that information to those targets so that they could decide whether to use the functions or implement some sort of a fallback.</p>",
        "id": 157269984,
        "sender_full_name": "nagisa",
        "timestamp": 1548939902
    },
    {
        "content": "<p>What I have so far is this (within my library)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[cfg(not(function_a_exists))]</span><span class=\"w\"></span>\n<span class=\"n\">macro_rules</span><span class=\"w\"> </span><span class=\"n\">with_function_a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"cp\">$tree</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(function_a_exists)]</span><span class=\"w\"></span>\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">with_function_a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"cp\">$tree</span>: <span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$($tree</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(and also similarly negative variant <code>with_not_function_a</code>) which is ugly and otherwise inconvenient.</p>",
        "id": 157270072,
        "sender_full_name": "nagisa",
        "timestamp": 1548940017
    },
    {
        "content": "<p>I would much rather just make the <code>function_a_exsists</code> cfg a part of my public API.</p>",
        "id": 157270095,
        "sender_full_name": "nagisa",
        "timestamp": 1548940043
    }
]