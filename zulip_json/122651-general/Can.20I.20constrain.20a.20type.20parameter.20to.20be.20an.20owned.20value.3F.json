[
    {
        "content": "<p>Can I constrain a type parameter to be an owned value (and not a reference) in a function signature?</p>",
        "id": 211239823,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601028820
    },
    {
        "content": "<p>I think the answer is no.</p>",
        "id": 211239887,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601028846
    },
    {
        "content": "<p>I think not, what do you need this for</p>",
        "id": 211239959,
        "sender_full_name": "lcnr",
        "timestamp": 1601028903
    },
    {
        "content": "<p>We can theoretically add a trait into the compiler which is implemented for everything except references</p>",
        "id": 211239994,
        "sender_full_name": "lcnr",
        "timestamp": 1601028928
    },
    {
        "content": "<p>so if there is something which can't be solved otherwise that seems like a potentially worthwhile addition</p>",
        "id": 211240017,
        "sender_full_name": "lcnr",
        "timestamp": 1601028950
    },
    {
        "content": "<blockquote>\n<p>what do you need this for</p>\n</blockquote>\n<p>I think this <em>might</em> be useful for our tracing JIT system, where we want the user to pass us an owned value because we assume a certain ABI for trace compilation.</p>\n<p>It's hard to explain, but may be useful in a wider context too? Maybe it's a bit niche?</p>\n<p>Conversely, can you constrain that a type parameter <em>is</em> a reference? That might be useful too?</p>",
        "id": 211240767,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601029553
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsReference</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsReference</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsReference</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211241004,
        "sender_full_name": "lcnr",
        "timestamp": 1601029705
    },
    {
        "content": "<blockquote>\n<p>owned value</p>\n</blockquote>\n<p>That's not really what references are though, are they?</p>",
        "id": 211241021,
        "sender_full_name": "lcnr",
        "timestamp": 1601029724
    },
    {
        "content": "<p>Is <code>struct Foo&lt;'a, T&gt;(&amp;'a T)</code> an owned value?</p>",
        "id": 211241033,
        "sender_full_name": "lcnr",
        "timestamp": 1601029739
    },
    {
        "content": "<p>It might make more sense to maybe restrict the inputs to <code>'static</code></p>",
        "id": 211241075,
        "sender_full_name": "lcnr",
        "timestamp": 1601029767
    },
    {
        "content": "<p>meaning that can can't borrow anything</p>",
        "id": 211241083,
        "sender_full_name": "lcnr",
        "timestamp": 1601029774
    },
    {
        "content": "<p>I'm thinking more about function boundaries:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn f&lt;T&gt;(t: T) -&gt; {...}\n</code></pre></div>\n\n\n<p>And constrain <code>T</code> to be either a reference or an owned value (regardless of what is actually inside <code>T</code>).</p>",
        "id": 211241230,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601029883
    },
    {
        "content": "<p>yeah, but what do you mean with \"owned value\"?</p>",
        "id": 211241295,
        "sender_full_name": "lcnr",
        "timestamp": 1601029927
    },
    {
        "content": "<p>are these just things with a <code>'static</code> bound?</p>",
        "id": 211241308,
        "sender_full_name": "lcnr",
        "timestamp": 1601029938
    },
    {
        "content": "<p>if you can't clearly define it, can you give some examples of what's owned and what is not owned in your mind?</p>",
        "id": 211241347,
        "sender_full_name": "lcnr",
        "timestamp": 1601029980
    },
    {
        "content": "<p>Maybe my mental model is wrong.</p>\n<p>I'd say if <code>T</code> was of type <code>S</code> where <code>S</code> is a struct, it's owned (regardless of if it contains references).</p>\n<p>I'd say if <code>T</code> was of type <code>&amp;S</code> where <code>S</code> is a struct, it's not owned.</p>",
        "id": 211241489,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601030089
    },
    {
        "content": "<p>hmm, then about \" where we want the user to pass us an owned value because we assume a certain ABI for trace compilation\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211241623,
        "sender_full_name": "lcnr",
        "timestamp": 1601030194
    },
    {
        "content": "<p>With your definition <code>Foo</code> would be an owned value but have the exact same ABI as <code>&amp;'a String</code></p>",
        "id": 211241641,
        "sender_full_name": "lcnr",
        "timestamp": 1601030215
    },
    {
        "content": "<p>from what I can tell this seems a bit like an XY problem for me, but I might be misunderstanding what exactly you are trying to do here</p>",
        "id": 211241728,
        "sender_full_name": "lcnr",
        "timestamp": 1601030286
    },
    {
        "content": "<p>I think I need to think about it a bit more myself.</p>",
        "id": 211241743,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601030304
    }
]