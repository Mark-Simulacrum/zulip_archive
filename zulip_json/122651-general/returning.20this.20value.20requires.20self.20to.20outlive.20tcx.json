[
    {
        "content": "<p>I don't understand this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">lifetime</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustdoc</span><span class=\"o\">/</span><span class=\"n\">html</span><span class=\"o\">/</span><span class=\"n\">format</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1095</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1092</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">print_with_space</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span>: <span class=\"o\">'</span><span class=\"na\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">input</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">input</span> <span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                 </span><span class=\"o\">----</span><span class=\"w\">          </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">input</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                 </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                 </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">1095</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\">         </span><span class=\"n\">display_fn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">1096</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">clean</span>::<span class=\"n\">Public</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">write_str</span><span class=\"p\">(</span><span class=\"s\">\"pub \"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"mi\">1097</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">clean</span>::<span class=\"n\">Inherited</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(()),</span><span class=\"w\"></span>\n<span class=\"mi\">1098</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">clean</span>::<span class=\"n\">Visibility</span>::<span class=\"n\">Restricted</span><span class=\"p\">(</span><span class=\"n\">did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">did</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">CRATE_DEF_INDEX</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1118</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"mi\">1119</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">__________</span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">returning</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">input</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">adding</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">bound</span>: <span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">input</span>: <span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Or rather, I understand what it's saying, but not why. What part of the closure requires that the input outlives <code>tcx</code>?</p>\n<p>For reference, this is the closure: <a href=\"https://github.com/jyn514/rust/blob/visibility-on-demand/src/librustdoc/html/format.rs#L1095-L1119\">https://github.com/jyn514/rust/blob/visibility-on-demand/src/librustdoc/html/format.rs#L1095-L1119</a></p>\n<p>The reason I can't just use the suggestion is that the lifetimes with the suggestion are very clearly wrong and the compiler tells me so itself:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: lifetime may not live long enough\n    --&gt; src/librustdoc/html/render/mod.rs:4079:9\n     |\n4073 | fn item_foreign_type(w: &amp;mut Buffer, cx: &amp;Context&lt;&#39;_&gt;, it: &amp;clean::Item, cache: &amp;Cache) {\n     |                                                   --       - let&#39;s call the lifetime of this reference `&#39;1`\n     |                                                   |\n     |                                                   let&#39;s call this `&#39;2`\n...\n4079 |         it.visibility.print_with_space(cx.tcx()),\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `&#39;1` must outlive `&#39;2`\n</code></pre></div>\n<p>The <code>Context</code> arena always outlives the borrow, because the borrow only lives for the lifetime of the function.</p>",
        "id": 220186978,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160328
    },
    {
        "content": "<p>well, in this case I fixed it by making <code>Self</code> Copy</p>",
        "id": 220187166,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160497
    },
    {
        "content": "<p>but it would be nice to know for next time</p>",
        "id": 220187177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160502
    },
    {
        "content": "<p>You said <code>impl Display + 'tcx</code>, so any references in the value have to live for at least <code>'tcx</code>, and you moved a <code>&amp;'input Self</code>, namely <code>self</code>, into the closure</p>",
        "id": 220187471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608160724
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 220187483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160739
    },
    {
        "content": "<p>so here's what happens if I don't say <code>+ 'tcx</code></p>",
        "id": 220187492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160747
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: lifetime may not live long enough\n    --&gt; src/librustdoc/html/format.rs:1099:9\n     |\n1092 |       crate fn print_with_space&lt;&#39;tcx, &#39;input&gt;(\n     |                                 ----  ------ lifetime `&#39;input` defined here\n     |                                 |\n     |                                 lifetime `&#39;tcx` defined here\n...\n1099 | /         display_fn(move |f| match vis {\n1100 | |             clean::Public =&gt; f.write_str(&quot;pub &quot;),\n1101 | |             clean::Inherited =&gt; Ok(()),\n1102 | |             clean::Visibility::Restricted(did) if did.index == CRATE_DEF_INDEX =&gt; {\n...    |\n1122 | |             }\n1123 | |         })\n     | |__________^ associated function was supposed to return data with lifetime `&#39;input` but it is returning data with lifetime `&#39;tcx`\n</code></pre></div>",
        "id": 220187518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160779
    },
    {
        "content": "<p>what if you use <code>+ 'input</code> instead?</p>",
        "id": 220187642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608160864
    },
    {
        "content": "<p>then I have to say 'tcx: 'input - let me try that</p>",
        "id": 220187664,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n    --&gt; src/librustdoc/html/format.rs:1095:10\n     |\n1095 |     ) -&gt; impl fmt::Display + &#39;input {\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\nnote: hidden type `impl std::fmt::Display` captures the lifetime `&#39;tcx` as defined on the method body at 1092:31\n    --&gt; src/librustdoc/html/format.rs:1092:31\n     |\n1092 |     crate fn print_with_space&lt;&#39;tcx: &#39;input, &#39;input&gt;(\n     |                               ^^^^\n</code></pre></div>",
        "id": 220187689,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608160905
    },
    {
        "content": "<p>Hm, I don't know what <code>impl Trait</code> does about hidden structs with multiple lifetime parameters. Does <code>impl Display + 'input + 'tcx</code> work? The syntax here seems insufficient</p>",
        "id": 220187950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608161090
    },
    {
        "content": "<p>I think the closure is actually <code>Closure&lt;'input, 'tcx: 'input&gt;</code></p>",
        "id": 220188054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608161152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/returning.20this.20value.20requires.20self.20to.20outlive.20tcx/near/220187950\">said</a>:</p>\n<blockquote>\n<p>Hm, I don't know what <code>impl Trait</code> does about hidden structs with multiple lifetime parameters. Does <code>impl Display + 'input + 'tcx</code> work? The syntax here seems insufficient</p>\n</blockquote>\n<p>surprisingly yes!</p>",
        "id": 220189738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162430
    },
    {
        "content": "<p>oh wait that's because I made it copy lol</p>",
        "id": 220189754,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162442
    },
    {
        "content": "<p>one sec</p>",
        "id": 220189756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162444
    },
    {
        "content": "<p>no, it doesn't help:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: lifetime may not live long enough\n    --&gt; src/librustdoc/html/format.rs:1098:9\n     |\n1092 |       crate fn print_with_space&lt;&#39;tcx: &#39;input, &#39;input&gt;(\n     |                                 ----          ------ lifetime `&#39;input` defined here\n     |                                 |\n     |                                 lifetime `&#39;tcx` defined here\n...\n1098 | /         display_fn(move |f| match *self {\n1099 | |             clean::Public =&gt; f.write_str(&quot;pub &quot;),\n1100 | |             clean::Inherited =&gt; Ok(()),\n1101 | |             clean::Visibility::Restricted(did) if did.index == CRATE_DEF_INDEX =&gt; {\n...    |\n1121 | |             }\n1122 | |         })\n     | |__________^ returning this value requires that `&#39;input` must outlive `&#39;tcx`\n     |\n     = help: consider adding the following bound: `&#39;input: &#39;tcx`\n``\n</code></pre></div>",
        "id": 220189778,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162466
    },
    {
        "content": "<p>which makes sense, I said the whole closure lives for <code>'tcx</code>, which means <code>'input</code> has to live for <code>'tcx</code></p>",
        "id": 220189830,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162487
    },
    {
        "content": "<p><a href=\"#narrow/stream/122651-general/topic/returning.20this.20value.20requires.20self.20to.20outlive.20tcx/near/220187689\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/returning.20this.20value.20requires.20self.20to.20outlive.20tcx/near/220187689</a> is very confusing though</p>",
        "id": 220189856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162512
    },
    {
        "content": "<p>I wonder if it works with an explicit struct</p>",
        "id": 220190045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608162674
    },
    {
        "content": "<p>it might be hard to fit that in with the closures</p>",
        "id": 220190061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608162689
    },
    {
        "content": "<p>well if there's an explicit closure there's no point to using <code>display_fn</code> in the first place</p>",
        "id": 220190145,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162736
    },
    {
        "content": "<p>that's just a little wrapper to <code>impl Display</code> for you, kind of like lambdas in Java</p>",
        "id": 220190165,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162758
    },
    {
        "content": "<p>but yes I would expect that to work with an explicit struct</p>",
        "id": 220190194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608162787
    },
    {
        "content": "<p>Yeah, I don't really mean to use it, only to test what lifetime annotations are needed and whether impl trait will still like it</p>",
        "id": 220191185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608163465
    },
    {
        "content": "<p>Does <code>-&gt; impl fmt::Display + rustc_data_structures::captures::Captures&lt;'tcx&gt;</code> work by any chance? That's what I use when there's a lifetime that doesn't appear in bounds but the return type doesn't actually live for that lifetime</p>",
        "id": 220192941,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608164795
    },
    {
        "content": "<p>It was suggested to me in a PR a long time ago, it saved my life many times since. That should probably be better documented</p>",
        "id": 220193943,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608165625
    },
    {
        "content": "<p>Knowing this a few days earlier would have saved me some hairs</p>",
        "id": 220197921,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1608169120
    },
    {
        "content": "<p>I've been there &gt;&lt;</p>",
        "id": 220199842,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608171136
    },
    {
        "content": "<p>I think this should be in std and rustc should advise the use of <code>Captures</code> when it detects that \"hidden type for captures lifetime that does not appear in bounds\"</p>",
        "id": 220199868,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608171181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> Open an issue? Always good to do so we don't lose it :)</p>",
        "id": 220201230,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608172782
    },
    {
        "content": "<p>TIL</p>\n<hr>\n<p>The issue is nevertheless weird, and feels more like a workaround for a limitation of the compiler semantics: I suspect that replacing <code>impl</code> with <code>Box&lt;dyn</code> would, for instance, solve the problem. <code>impl ...</code> should represent an opaque type that meets the given bounds, and which captures, as needed, all the type and lifetime params in scope.</p>\n<p>That is, given the minimal repro (for some type <code>S&lt;'_, '_&gt;</code> invariant over its second lifetime param):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// 'c is the intersection of 'a and 'b</span>\n<span class=\"k\">fn</span> <span class=\"nf\">_example</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">it</span>: <span class=\"nc\">S</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">it</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=dd505862a1d20766a8614fae769ec7a4\">Playground</a></li>\n</ul>\n<p>Using the suggested hack does indeed solve the issue</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&lt;'</span><span class=\"na\">lt</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">__</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-   -&gt; impl Trait + 'c</span>\n<span class=\"gi\">+   -&gt; impl Trait + 'c + C&lt;'b&gt;</span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=46058be3b522d56197a3240e100eb2d4\">Playground</a></li>\n</ul>\n<p>The workaround with <code>type_alias_impl_trait</code> that allows to circumvent the default unsugaring being to:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-   -&gt; impl Trait + 'c</span>\n<span class=\"gi\">+   -&gt; Existential&lt;'c, 'a, 'b&gt;</span>\n\n<span class=\"gi\">+ type Existential&lt;'c, 'a : 'c, 'b : 'c&gt; = impl Trait + 'c;</span>\n</code></pre></div>\n<p>(I have added the <code>'a</code> parameter explicitely even if it isn't needed)</p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7d06a074ce4db280225c3b3ab14b8910\">Playground</a></li>\n</ul>\n<p>And this is what I mean: one can add \"excessive\" lifetime parameters to these explicit existential parameters and it does not seem to be overly restrictive, quite the opposite! So what about unsugaring to that?</p>",
        "id": 220301528,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608238728
    },
    {
        "content": "<p>Turns out there are issues mentioning the confusion already: <a href=\"https://github.com/rust-lang/rust/issues/66551\">https://github.com/rust-lang/rust/issues/66551</a> <a href=\"https://github.com/rust-lang/rust/issues/61756\">https://github.com/rust-lang/rust/issues/61756</a>, and the Captures trait was suggested there</p>",
        "id": 220319103,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608248625
    },
    {
        "content": "<p>But what I'd like to know is if there would be drawbacks to fixing this. As I mentioned in my previous post, there are unsugarings of <code>-&gt; impl</code> that do not require these hacks, so why not use those? I'd like to know if an \"overly lifetime-generic\" abstract type would be too restrictive for some use cases; and I suspect it wouldn't.</p>",
        "id": 220364860,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608293680
    },
    {
        "content": "<p>Also, found a smaller repro: <code>fn __&lt;'a, 'b&gt; (it: &amp;'a mut 'b ()) -&gt; impl Sized + 'a { it }</code></p>",
        "id": 220365762,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608294385
    },
    {
        "content": "<p>The doc for Captures mentions this comment: <a href=\"https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\">https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999</a>. The PR that prevents what you want seems to be <a href=\"https://github.com/rust-lang/rust/pull/49041\">https://github.com/rust-lang/rust/pull/49041</a>. Might be more info there</p>",
        "id": 220390660,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608307671
    },
    {
        "content": "<p>I think the problem is linked to inferring variance in the overly generic case</p>",
        "id": 220390973,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608307792
    },
    {
        "content": "<p>Though if Captures works, the compiler could just insert those Captures automatically when needed I dunno</p>",
        "id": 220392285,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608308262
    }
]