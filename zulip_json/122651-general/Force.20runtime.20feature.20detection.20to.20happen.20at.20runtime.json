[
    {
        "content": "<p>Problem: <code>is_x86_feature_detected!</code> (and its friends) will simply compile to <code>true</code> if a feature is enabled at compile time, instead of actually checking if a feature is available at runtime.</p>\n<p>This means that you can't have a program where you enable extra CPU features for the build and then check your assumptions at the start of the program and print a nice error message to the user if their CPU doesn't fit your assumptions.</p>\n<p>I think we should support that sort of thing, so I think that we need an \"actually really check for this feature at runtime\" ability.</p>",
        "id": 195501602,
        "sender_full_name": "Lokathor",
        "timestamp": 1588049729
    },
    {
        "content": "<p>This might be a nice mitigation for some programs, but since e.g. enabling AVX will let LLVM use AVX all over the code for small-ish memcpys, it's generally only useful if done <em>immediately</em> at the start of <code>main()</code>. This is specific enough that I don't think it should be tied to <code>is_x86_feature_detected</code>, it should be a separate function for this specific use case only.</p>",
        "id": 195523796,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588055947
    },
    {
        "content": "<p>I would absolutely agree. It should be stand alone.</p>\n<p>If it were to eventually be in libstd, probably the best way would be to expose the \"backend\" of the macro that does the runtime checking, and then the macro would continue to wrap it all up in a <code>cfg!(target_feature=\"foo\") || runtime_check(\"foo\")</code> type of deal.</p>",
        "id": 195525917,
        "sender_full_name": "Lokathor",
        "timestamp": 1588057765
    },
    {
        "content": "<p>In the general case, I would expect a program compiled with such support enabled to potentially attempt to use that support <em>before</em> main, or for that matter in the course of calling ordinary functions, unpredictably.</p>",
        "id": 195529730,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588060582
    },
    {
        "content": "<p>So even checking at the top of main may not suffice.</p>",
        "id": 195529735,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588060591
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> had a issue or thread about automatically doing this (and maybe e.g. panicking or whatever if the feature set doesn't match)</p>",
        "id": 195567653,
        "sender_full_name": "simulacrum",
        "timestamp": 1588082293
    },
    {
        "content": "<p>What about intrinsics?<br>\nCan we not use avx intrinsics without compiling everything with avx enabled? (and then guard those with a runtime check)</p>",
        "id": 195581956,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1588088134
    },
    {
        "content": "<p>Uh, right. To back up a bit and give a little background: <code>core::arch</code> exposes all intrinsics as <code>unsafe</code> functions without you needing to enable the feature at compile time. It's up to you to come up with a system of making the unsafe safe.</p>\n<ul>\n<li>One way is with runtime checks and then calling specific functions that are designed to utilize a feature once you know that the feature is available on the current machine.</li>\n<li>The other is by turning on compile time target features and then having LLVM just use the features wherever it thinks they're appropriate all over the place (and you can also manually call them yourself of course).</li>\n</ul>\n<p>The second option is \"simpler\", but also now your program expects a minimum CPU to run, and both Rust and most operating systems lack a way to mark a binary with what CPU features it needs, so there's no easy way to give a message if the current CPU is missing a feature you expected. Instead the user runs a program that looks like a normal program, and they get a mysterious crash.</p>",
        "id": 195590198,
        "sender_full_name": "Lokathor",
        "timestamp": 1588091515
    }
]