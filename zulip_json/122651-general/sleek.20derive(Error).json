[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, MyError)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[my_error::display(</span><span class=\"s\">&quot;Could not open config file at {}: {}&quot;</span><span class=\"cp\">, self.filename.display(), self.source)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span>: <span class=\"nc\">PathBuf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SaveConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MissingUser</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">do_it</span><span class=\"p\">(</span><span class=\"n\">fail</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;/tmp/config&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fs</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;config&quot;</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">SaveConfig</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Error</span>::<span class=\"n\">MissingUser</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Check out my sweet new Error-type-boilerplate-reduction-derive-macro thingie</p>",
        "id": 156954322,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548560552
    },
    {
        "content": "<p>And now to bed.</p>",
        "id": 156954325,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548560582
    },
    {
        "content": "<p>The failure crate has a very similar thing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// taken from https://boats.gitlab.io/failure/</span>\n<span class=\"cp\">#[derive(Debug, Fail)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">ToolchainError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[fail(display = </span><span class=\"s\">&quot;invalid toolchain name: {}&quot;</span><span class=\"cp\">, name)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">InvalidToolchainName</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[fail(display = </span><span class=\"s\">&quot;unknown toolchain version: {}&quot;</span><span class=\"cp\">, version)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">UnknownToolchainVersion</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">version</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is there a major difference here?</p>",
        "id": 156964942,
        "sender_full_name": "nagisa",
        "timestamp": 1548581199
    },
    {
        "content": "<p>Yes: I didn't invent a brand new trait. Failure doesn't implement <code>From</code> AFAICT.</p>",
        "id": 156974670,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548600557
    },
    {
        "content": "<p>There's a reason I also included the usage sites</p>",
        "id": 156974674,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548600573
    },
    {
        "content": "<p>Failure's Display also <a href=\"https://github.com/rust-lang-nursery/failure/issues/189\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/failure/issues/189\">forces the causal error to be printed in a certain way</a></p>",
        "id": 156974729,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548600637
    },
    {
        "content": "<p>Every time I've attempted to use failure (not many, TBH), I've felt that it wasn't designed by folk that actually used it.</p>\n<p>Obviously that can't be true, but I've never once understood why people are so very in love with it.</p>",
        "id": 156974781,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548600735
    },
    {
        "content": "<p>One thing that failure states (obliquely) that I agree with is that directly supporting <code>From&lt;AnotherError&gt;</code> isn't a great pattern. Just because an IO error happened doesn't express anything useful. There's a context to that IO operation in my usage (in the example: reading or writing a file)</p>",
        "id": 156974845,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548600892
    },
    {
        "content": "<p>Which is why I like <code>fs::read(filename).context(OpenConfig { filename })?</code></p>",
        "id": 156974856,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548600922
    },
    {
        "content": "<p>extending the current concept of \"context\" to mean both \"some additional data beyond just the error type\" and \"the context of <strong>my</strong> code in which the underlying error happened\"</p>",
        "id": 156974906,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548600991
    },
    {
        "content": "<p>Thatâ€™s what I do with \"error chaining\"</p>",
        "id": 156975019,
        "sender_full_name": "nagisa",
        "timestamp": 1548601203
    },
    {
        "content": "<p>(adding context)</p>",
        "id": 156975036,
        "sender_full_name": "nagisa",
        "timestamp": 1548601211
    },
    {
        "content": "<p>I even began using this concept in C++ and errors there, implementing casts and constructors between different kinds of errors to collect the context.</p>",
        "id": 156975042,
        "sender_full_name": "nagisa",
        "timestamp": 1548601254
    },
    {
        "content": "<p>Do you use failure? If so, can you provide an equivalent construct? I could not figure out how to do it.</p>",
        "id": 156977813,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548606438
    },
    {
        "content": "<p>do you mean</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">).</span><span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 156977935,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606624
    },
    {
        "content": "<p>I may have used <code>failure</code> a while ago, not sure in which project though. IIRC what I would usually do is <code>fallible().context(format!(\"my nice error message and some formatted useful info\")</code> IIRC.</p>",
        "id": 156977953,
        "sender_full_name": "nagisa",
        "timestamp": 1548606704
    },
    {
        "content": "<p>ah it was internal work project IIRC.</p>",
        "id": 156977997,
        "sender_full_name": "nagisa",
        "timestamp": 1548606735
    },
    {
        "content": "<p>canâ€™t check the code there now</p>",
        "id": 156978000,
        "sender_full_name": "nagisa",
        "timestamp": 1548606748
    },
    {
        "content": "<p>with failure (on crater) I just use <code>with_context</code> everywhere</p>",
        "id": 156978001,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606748
    },
    {
        "content": "<p>So that'd be using stringly-typed errors, yes? Maybe OK for an app, not the best for a library?</p>",
        "id": 156978004,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548606764
    },
    {
        "content": "<p>to avoid slowing down things where stuff is ok</p>",
        "id": 156978006,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606766
    },
    {
        "content": "<p>you can of course use typed errors as contexts</p>",
        "id": 156978007,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606782
    },
    {
        "content": "<p>on crater I don't need them to be typed though</p>",
        "id": 156978017,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606809
    },
    {
        "content": "<p>yeah, in my case I was making an executable as well (rather than a library)</p>",
        "id": 156978018,
        "sender_full_name": "nagisa",
        "timestamp": 1548606828
    },
    {
        "content": "<p>for libraries I tend to avoid any error handling crates entirely</p>",
        "id": 156978019,
        "sender_full_name": "nagisa",
        "timestamp": 1548606840
    },
    {
        "content": "<p>Why?</p>",
        "id": 156978061,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548606852
    },
    {
        "content": "<p>No idea... my libraries are all on the small side and not pulling in such a crate feels more lightweight</p>",
        "id": 156978067,
        "sender_full_name": "nagisa",
        "timestamp": 1548606892
    },
    {
        "content": "<p>I guess.</p>",
        "id": 156978069,
        "sender_full_name": "nagisa",
        "timestamp": 1548606900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> how would you create those typed contexts? More applications of deriving <code>Fail</code>?</p>",
        "id": 156978084,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548606919
    },
    {
        "content": "<p>yep, mostly the same as your derive</p>",
        "id": 156978095,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606935
    },
    {
        "content": "<p>one sec</p>",
        "id": 156978098,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606936
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/crater/blob/master/src/utils/hex.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/crater/blob/master/src/utils/hex.rs\">https://github.com/rust-lang-nursery/crater/blob/master/src/utils/hex.rs</a> for example</p>",
        "id": 156978142,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548606974
    },
    {
        "content": "<p>... you wrote your own hex decoding?</p>",
        "id": 156978213,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607123
    },
    {
        "content": "<p>didn't want to pull a crate just for 30 lines of code :(</p>",
        "id": 156978219,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607145
    },
    {
        "content": "<p>crater already has something like 300 deps</p>",
        "id": 156978229,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607166
    },
    {
        "content": "<p>(counting deps of the deps)</p>",
        "id": 156978231,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607172
    },
    {
        "content": "<p>I shan't ever understand you folk.</p>",
        "id": 156978232,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607174
    },
    {
        "content": "<p>One of those is probably the hex crate... If so, using the dependency would make compiling <em>faster</em></p>",
        "id": 156978234,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607198
    },
    {
        "content": "<p>Looks like 60 lines because you wrote tests, because it wasn't tested by other people</p>",
        "id": 156978287,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607252
    },
    {
        "content": "<p>Anyway, I'm missing how this example corresponds to my code above.</p>",
        "id": 156978300,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607292
    },
    {
        "content": "<p>Let me start over, please.</p>",
        "id": 156978354,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607327
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">fs</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;config&quot;</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">SaveConfig</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Can you show the equivalent using failure? i.e. \"this <code>io::Error</code> means something went bad for opening a file, this <code>io::Error</code> means something when bad saving a file\"</p>",
        "id": 156978360,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607344
    },
    {
        "content": "<p>Which would get bucketed into </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OpenConfig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// whatever you need, presumably an io::Error is inside here</span>\n<span class=\"w\">    </span><span class=\"n\">SaveConfig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// whatever you need, presumably an io::Error is inside here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156978369,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607393
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">).</span><span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ConfigError</span>::<span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">fs</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;config&quot;</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">ConfigError</span>::<span class=\"n\">SaveConfig</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156978372,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607432
    },
    {
        "content": "<p>and the context definition is the same one you would use for an error</p>",
        "id": 156978423,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607456
    },
    {
        "content": "<p>for example that hex error enum</p>",
        "id": 156978426,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607464
    },
    {
        "content": "<p>what does the error type (an enum?) that contains either of <code>OpenConfig</code> / <code>SaveConfig</code> look like?</p>",
        "id": 156978430,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, Fail)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">ConfigError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[fail(display = </span><span class=\"s\">&quot;failed to open configuration file {}&quot;</span><span class=\"cp\">, filename)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span>: <span class=\"nb\">String</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[fail(display = </span><span class=\"s\">&quot;failed to save the configuration file&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SaveConfig</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156978501,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607597
    },
    {
        "content": "<p>Now I'm missing something... how does the struct <code>OpenConfig</code> (which is also <code>derive(Fail)</code>, right?) get converted to <code>ConfigError::OpenConfig</code>?</p>",
        "id": 156978637,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607841
    },
    {
        "content": "<p>and where does the underlying cause (the <code>io::Error</code>) get stashed?</p>",
        "id": 156978651,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607876
    },
    {
        "content": "<blockquote>\n<p>Now I'm missing something... how does the struct OpenConfig (which is also derive(Fail), right?) get converted to ConfigError::OpenConfig?</p>\n</blockquote>\n<p>uh... it's actually <code>ConfigError::OpenConfig</code>, woops</p>",
        "id": 156978714,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548607951
    },
    {
        "content": "<p>So is is actually using <code>with_context</code> then?</p>",
        "id": 156978722,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548607981
    },
    {
        "content": "<p>cause a <code>Context&lt;io:Error, ConfigError&gt;</code> presumably cannot be converted to a <code>ConfigError</code>...</p>",
        "id": 156978733,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608014
    },
    {
        "content": "<p>yep, but it can be converted to a <code>Box&lt;Fail&gt;</code> or <code>Error</code></p>",
        "id": 156978780,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608050
    },
    {
        "content": "<p>you can implement contexts manually if you want to avoid the boxing</p>",
        "id": 156978798,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608093
    },
    {
        "content": "<p>never did that, but <em>I think</em> you can do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, Fail)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">ConfigError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[fail(display = </span><span class=\"s\">&quot;failed to open configuration file {}&quot;</span><span class=\"cp\">, filename)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">#[cause]</span><span class=\"w\"> </span><span class=\"n\">cause</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[fail(display = </span><span class=\"s\">&quot;failed to save the configuration file&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SaveConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">#[cause]</span><span class=\"w\"> </span><span class=\"n\">cause</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156978838,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608157
    },
    {
        "content": "<p>you won't be able to use the <code>.with_context</code> method though</p>",
        "id": 156978884,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608176
    },
    {
        "content": "<p>which also means you can't use <code>?</code>, right?</p>",
        "id": 156978965,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608319
    },
    {
        "content": "<p>no</p>",
        "id": 156978967,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608324
    },
    {
        "content": "<p>What's the equivalent of <code>fs::read(filename).context(OpenConfig { filename })?</code> for this most recent enum?</p>",
        "id": 156978982,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">io</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ConfigError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cause</span>: <span class=\"nc\">io</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156979045,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608416
    },
    {
        "content": "<p><em>I think</em></p>",
        "id": 156979047,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608420
    },
    {
        "content": "<p>haven't used an enum like that though</p>",
        "id": 156979059,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608441
    },
    {
        "content": "<p>so failure isn't providing us anything for that line, as that's just a struct literal and <code>Result::map_err</code></p>",
        "id": 156979142,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608562
    },
    {
        "content": "<p>Also, you totally got to write it as <code>map_err(|cause| ConfigError { filename, cause })?;</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 156979153,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608588
    },
    {
        "content": "<p>yeah, if you want <code>.context</code> you have to use the provided <code>Context</code> struct</p>",
        "id": 156979156,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608608
    },
    {
        "content": "<p>compare:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// failure</span>\n<span class=\"n\">foo</span><span class=\"p\">().</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">cause</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ConfigError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// to-be-named</span>\n<span class=\"n\">foo</span><span class=\"p\">().</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156979200,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608649
    },
    {
        "content": "<p>I'm technically doing other things right now <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 156979201,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608654
    },
    {
        "content": "<p>I'd prefer if context was a closure though</p>",
        "id": 156979208,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608677
    },
    {
        "content": "<p>or at least support closures there</p>",
        "id": 156979210,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608690
    },
    {
        "content": "<p>and how do you store the underlying cause?</p>",
        "id": 156979223,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608707
    },
    {
        "content": "<p>I mean, that's a straight-forward addition, and orthogonal. Failure supports both (<code>context</code> / <code>with_context</code>)</p>",
        "id": 156979229,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608719
    },
    {
        "content": "<p>(and I added it to my TODO, as well)</p>",
        "id": 156979235,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, MyError)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span>: <span class=\"nc\">PathBuf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SaveConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">io</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156979278,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608763
    },
    {
        "content": "<p>The cause is right there ^</p>",
        "id": 156979282,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608773
    },
    {
        "content": "<p>using that fresh new name of \"source\"</p>",
        "id": 156979285,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608789
    },
    {
        "content": "<p>so you have a struct <code>OpenConfig</code> that you then convert to <code>Error::OpenConfig</code>?</p>",
        "id": 156979307,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608829
    },
    {
        "content": "<p>you are correct</p>",
        "id": 156979311,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608840
    },
    {
        "content": "<p>hmm</p>",
        "id": 156979315,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608862
    },
    {
        "content": "<p>could be nice</p>",
        "id": 156979317,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548608873
    },
    {
        "content": "<p>(it's been pointed out that a <em>derive</em> creating new types is not an obvious use, so I'll probably switch to a plain proc-macro)</p>",
        "id": 156979318,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608873
    },
    {
        "content": "<p>And of course, this all needs docs with prose</p>",
        "id": 156979363,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608906
    },
    {
        "content": "<p>But pasting it here has helped me figure out the \"value proposition\" as well as what needs to be explicitly pointed out</p>",
        "id": 156979367,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608935
    },
    {
        "content": "<p>And prevents me from releasing purely duplicate crates ;-)</p>",
        "id": 156979376,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608952
    },
    {
        "content": "<p>Before I forget, thank you both <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> and <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> !</p>",
        "id": 156979380,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548608970
    },
    {
        "content": "<p>is this going to be the third error handling crate on the nursery?</p>",
        "id": 156979429,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548609021
    },
    {
        "content": "<p>I also need to add some backtrace. Debating over </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"cp\">#[my_error::backtrace]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Alpha</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// vs</span>\n<span class=\"w\">   </span><span class=\"n\">Alpha</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>: <span class=\"nc\">my_error</span>::<span class=\"n\">Backtrace</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156979431,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548609023
    },
    {
        "content": "<p>I don't know why it'd be on the nursery; most of the crates I've made have faded into obscurity. I don't have the position of authority to claim that my crate will replace the standard library and everyone should jump ship to it. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 156979448,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548609099
    },
    {
        "content": "<p>what about</p>\n<div class=\"codehilite\"><pre><span></span>enum Error {\n    Alpha { ctx: Ctx&lt;io::Error&gt; }\n}\n</pre></div>",
        "id": 156979453,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548609120
    },
    {
        "content": "<p>and then include both the context and the backtrace on the ctx?</p>",
        "id": 156979497,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548609129
    },
    {
        "content": "<p>(name bikesheddable a lot)</p>",
        "id": 156979500,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548609140
    },
    {
        "content": "<p>having to add the backtrace to every error is going to be a pain</p>",
        "id": 156979514,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1548609173
    },
    {
        "content": "<blockquote>\n<p>having to add the backtrace to every error</p>\n</blockquote>\n<p>This is something I need to get a better sense of. For example, people may not want a backtrace generated <em>for reasons</em>. Also, you might want a backtrace generated even if there isn't an underlying cause (actually, this seems like the <strong>more</strong> likely case)</p>",
        "id": 156979589,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548609338
    },
    {
        "content": "<p>since ideally the underlying error has its own backtrace</p>",
        "id": 156979592,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548609355
    },
    {
        "content": "<p>which includes the current libraries code location by construction</p>",
        "id": 156979638,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548609378
    },
    {
        "content": "<p>So bundling them together <em>seems</em> like a non-starter</p>",
        "id": 156979647,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548609423
    }
]