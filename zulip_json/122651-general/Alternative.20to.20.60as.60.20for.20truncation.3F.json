[
    {
        "content": "<p>If I want to get the low 8 bits of a <code>u64</code> as a <code>u8</code> (where truncation is intended to happen), is there an alternative to <code>x as u8</code> to represent this more explicitly? <code>Wrapping</code> doesn't seem to have anything useful and there is a (IMO reasonable) clippy lint against <code>as</code>.</p>",
        "id": 217480650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926182
    },
    {
        "content": "<p>You could use the byte array conversion and then get the right byte</p>",
        "id": 217480706,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926282
    },
    {
        "content": "<p>that's a bit weird since I want to get <code>x % 256</code> and don't care about byte order</p>",
        "id": 217480752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926312
    },
    {
        "content": "<p>Ooh, what if <code>Wrapping&lt;u64&gt;: Into&lt;Wrapping&lt;u8&gt;&gt;</code></p>",
        "id": 217480820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926427
    },
    {
        "content": "<p>Hm why not do % 256 then?</p>",
        "id": 217480825,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926452
    },
    {
        "content": "<p>because it is still a u64</p>",
        "id": 217480830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926465
    },
    {
        "content": "<p>I don't think we should implement into</p>",
        "id": 217480831,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926469
    },
    {
        "content": "<p>I think the into impl for the respective <code>Wrapping</code> structs makes sense from a modular arithmetic POV</p>",
        "id": 217480835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926502
    },
    {
        "content": "<p>I'm generally against implementing traits for things that don't want to be used generically</p>",
        "id": 217480838,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926509
    },
    {
        "content": "<p>?</p>",
        "id": 217480880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926546
    },
    {
        "content": "<p>Aren't most <code>From</code> impls in that category?</p>",
        "id": 217480885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926559
    },
    {
        "content": "<p>You almost certainly don't want a function taking <code>impl Into&lt;Wrapping&lt;u8&gt;&gt;</code>, and it's not an obvious conversion from u64 IMO</p>",
        "id": 217480894,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926635
    },
    {
        "content": "<p>I don't think they are, no</p>",
        "id": 217480935,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926653
    },
    {
        "content": "<p>It's the quotient map <code>Z/2^64 -&gt; Z/2^8</code></p>",
        "id": 217480939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926674
    },
    {
        "content": "<p>I don't disagree</p>",
        "id": 217480942,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926685
    },
    {
        "content": "<p>in fact it <em>only</em> makes sense going \"down\" the types, rather than up as with the regular numeric types</p>",
        "id": 217480958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926718
    },
    {
        "content": "<p>But I would be opposed, because though there's not obvious other behavior, I would not want silent truncation like that</p>",
        "id": 217481009,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926769
    },
    {
        "content": "<p>I think a truncate method would be great, though</p>",
        "id": 217481014,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926782
    },
    {
        "content": "<p>it's not silent, there's a conversion</p>",
        "id": 217481023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926827
    },
    {
        "content": "<p>I don't like lossy conversions in From/Into, and consider them an antipattern.</p>",
        "id": 217481069,
        "sender_full_name": "simulacrum",
        "timestamp": 1605926908
    },
    {
        "content": "<p>Hm, I'm not even sure I want to call it lossy, it's a faithful representation of the value in the target type</p>",
        "id": 217481082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926955
    },
    {
        "content": "<p>A <code>truncate</code> method would be more terse in my setting though, because I'm not using <code>Wrapping</code> currently</p>",
        "id": 217481092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605926988
    },
    {
        "content": "<p>It's definitely what I would call lossy. I don't think \"faithful representation\" is wrong, just sort of unhelpful</p>",
        "id": 217481145,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927039
    },
    {
        "content": "<p>Same as how I wouldn't want impls from various types to bool</p>",
        "id": 217481154,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927063
    },
    {
        "content": "<p>If we were C it might make sense to have impls to bool but I don't think rust makes any judgments about \"truthiness\" of values in other types</p>",
        "id": 217481172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605927122
    },
    {
        "content": "<p>I think several libs team members have been in favor of truncate and similar methods to replace as over time</p>",
        "id": 217481202,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927127
    },
    {
        "content": "<p>So I would expect a PR to be accepted personally</p>",
        "id": 217481206,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927145
    },
    {
        "content": "<p>Right, but I think the same reasoning applies to bool conversion as to u8, even though it's not a perfect match</p>",
        "id": 217481213,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927187
    },
    {
        "content": "<p>I think it's important that I'm not talking about u8 though, I'm talking about Wrapping&lt;u8&gt;</p>",
        "id": 217481222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605927230
    },
    {
        "content": "<p>If you're thinking of these types as maps of Z, then it makes some sense, but I don't think most people do</p>",
        "id": 217481223,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927233
    },
    {
        "content": "<p>All the operations on <code>Wrapping&lt;u8&gt;</code> make sense only if you think of it as Z/256 and not 0..256</p>",
        "id": 217481265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605927273
    },
    {
        "content": "<p>Well... yes? But also no, because my guess is the majority of people have not seen or really understand Z/256 as a concept. I think the idea of these maps from Wrapping to Wrapping type is not common enough to be uplifted as a From/Into impl because I would not expect to use it in a generic way</p>",
        "id": 217481320,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927400
    },
    {
        "content": "<p>I think a similar argument can be had about <code>i64 -&gt; Saturating&lt;i16&gt;</code> and so on; it's not clear where else to file the method besides as a From impl</p>",
        "id": 217481325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605927417
    },
    {
        "content": "<p>I think the method should be on u64</p>",
        "id": 217481330,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927435
    },
    {
        "content": "<p>If we're talking about a <code>u64 -&gt; u8</code> method then it should definitely be something like <code>truncate</code> and not a from impl</p>",
        "id": 217481333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605927461
    },
    {
        "content": "<p>It doesn't make a difference IMO whether it's on saturating or on wrapping or what, I think it makes sense for it to always be a method</p>",
        "id": 217481374,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927491
    },
    {
        "content": "<p>(similar to how we have wrapping_mul and don't say \"wrap it in Wrapping\" or so)</p>",
        "id": 217481381,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927540
    },
    {
        "content": "<p>But isn't that the whole point of the wrapper structs? The addition on <code>Wrapping&lt;u8&gt;</code> is not a method called <code>wrapping_add</code></p>",
        "id": 217481382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605927542
    },
    {
        "content": "<p>If we had a Truncate trait, then I agree implementing it would make sense</p>",
        "id": 217481389,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927569
    },
    {
        "content": "<blockquote>\n<p>is there an alternative to x as u8 to represent this more explicitly</p>\n</blockquote>\n<p>Why is <code>as</code> so disliked? It's literally the exact thing you're looking for.</p>",
        "id": 217481439,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605927642
    },
    {
        "content": "<p><code>as</code> currently can be implicitly lossy when that's not necessarily what you wanted</p>",
        "id": 217481447,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927667
    },
    {
        "content": "<p>But here it actually is</p>",
        "id": 217481452,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605927676
    },
    {
        "content": "<p>Right, but if the code doesn't say that, then you don't know when reading if it was intentional</p>",
        "id": 217481461,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927705
    },
    {
        "content": "<p>and now I have to warn clippy that this is what I meant every time</p>",
        "id": 217481462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605927712
    },
    {
        "content": "<p>(there is a reason it's just a clippy lint right now)</p>",
        "id": 217481508,
        "sender_full_name": "simulacrum",
        "timestamp": 1605927747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">u64_as_u8</span><span class=\"p\">(</span><span class=\"n\">u</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217487154,
        "sender_full_name": "Lokathor",
        "timestamp": 1605938448
    },
    {
        "content": "<p>I still think we need to have <code>(wrapping,checked,saturating)_cast</code> in addition to <code>(wrapping,checked,saturating)_add</code> and other arithmetic operations (<a href=\"https://github.com/rust-lang/rust/issues/1218\">#1218</a>).</p>",
        "id": 217492614,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1605949568
    },
    {
        "content": "<p>how about  <code>u8::try_from(val &amp; 0xFF).unwrap()</code> ?</p>",
        "id": 217503116,
        "sender_full_name": "The 8472",
        "timestamp": 1605967463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Alternative.20to.20.60as.60.20for.20truncation.3F/near/217503116\">said</a>:</p>\n<blockquote>\n<p>how about  <code>u8::try_from(val &amp; 0xFF).unwrap()</code> ?</p>\n</blockquote>\n<p>That's actually optimizing quite nicely: <a href=\"https://godbolt.org/z/Yf8TGf\">https://godbolt.org/z/Yf8TGf</a></p>",
        "id": 217553695,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1606055197
    },
    {
        "content": "<p>i think <code>val as u8</code> is still the correct thing here, and clippy just needs to hush some of the time.</p>",
        "id": 217570038,
        "sender_full_name": "Lokathor",
        "timestamp": 1606079240
    },
    {
        "content": "<p>I am currently spelling this operation <code>#[allow(clippy::cast_possible_truncation)] { val as u8 }</code>, which is more verbose than some of the options but at least gets the point across</p>",
        "id": 217574690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606085737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/122651-general/topic/Alternative.20to.20.60as.60.20for.20truncation.3F/near/217492614\">said</a>:</p>\n<blockquote>\n<p>I still think we need to have <code>(wrapping,checked,saturating)_cast</code> in addition to <code>(wrapping,checked,saturating)_add</code> and other arithmetic operations (<a href=\"https://github.com/rust-lang/rust/issues/1218\">#1218</a>).</p>\n</blockquote>\n<p>See also the proposal for <code>wrapping_from</code> and friends in <a href=\"https://github.com/rust-lang/rfcs/pull/2484\">https://github.com/rust-lang/rfcs/pull/2484</a></p>",
        "id": 217577672,
        "sender_full_name": "scottmcm",
        "timestamp": 1606089959
    }
]