[
    {
        "content": "<p>Does anyone else find themselves commonly searching a codebase for instances of a method used on <strong>particular</strong> types?</p>\n<p>For example, what does your intuition tell you to do if you wanted to find every instance where <code>.to_string</code> is used on a type that the Rust compiler considers to be a <code>StringView</code> in this github repo? --&gt; <a href=\"https://github.com/LightningCreations/lccc/search?q=to_string\">https://github.com/LightningCreations/lccc/search?q=to_string</a> </p>\n<p>(As opposed to finding instances of <code>.to_string</code> on any other type)</p>",
        "id": 276953525,
        "sender_full_name": "Darrow O'Lykos [Rust Philly]",
        "timestamp": 1648523567
    },
    {
        "content": "<p>I don't know that \"trait system\" is particularly relevant here, as this is also common in other languages that don't have Rust's traits.</p>\n<p>Finding calls to <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#toString()\"><code>object.toString</code></a> in Java but only for a particular type has the same issue, as does finding calls to <a href=\"https://en.cppreference.com/w/cpp/named_req/Container\"><code>.cbegin()</code></a> on a particular container in C++.  Or even in C, which doesn't have the same kind of generic behaviour, finding all the uses of the <code>.len</code> field on a particular struct.</p>\n<p>So either you intentionally break it somehow and use compiler errors to find it, or you use something like rust-analyzer can supports type-aware queries.</p>",
        "id": 276959103,
        "sender_full_name": "scottmcm",
        "timestamp": 1648530858
    }
]