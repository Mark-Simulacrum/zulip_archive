[
    {
        "content": "<p>Hello! I'd like your opinion about the soundness / safety of this <code>WriteOnceCell</code>: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6e220ff9a97663dc35f593d0cc8d4bd5\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6e220ff9a97663dc35f593d0cc8d4bd5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6e220ff9a97663dc35f593d0cc8d4bd5</a></p>",
        "id": 193963626,
        "sender_full_name": "marmeladema",
        "timestamp": 1586902515
    },
    {
        "content": "<p>Maybe using <code>MaybeUninit</code> is overkill? I just realized that <code>Option&lt;T&gt;</code> might be enough?</p>",
        "id": 193964461,
        "sender_full_name": "marmeladema",
        "timestamp": 1586903072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> you can also ask <a class=\"stream\" data-stream-id=\"146229\" href=\"/#narrow/stream/146229-wg-secure-code\">#wg-secure-code</a> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193968851,
        "sender_full_name": "DPC",
        "timestamp": 1586906853
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span>  is probably better for that</p>",
        "id": 193971544,
        "sender_full_name": "centril",
        "timestamp": 1586909440
    },
    {
        "content": "<p>Thank you! I will ask there then!</p>",
        "id": 193995891,
        "sender_full_name": "marmeladema",
        "timestamp": 1586937616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> yeah on first sight this seems good.<br>\nTo get some more assurance, you could write a few tests and run them in <a href=\"https://github.com/rust-lang/miri/\" title=\"https://github.com/rust-lang/miri/\">Miri</a> :D</p>",
        "id": 194006811,
        "sender_full_name": "RalfJ",
        "timestamp": 1586944220
    },
    {
        "content": "<p>I definitely want to take a closer look at Miri, i've heard and read about it but never actually used it myself!</p>",
        "id": 194007648,
        "sender_full_name": "marmeladema",
        "timestamp": 1586944762
    },
    {
        "content": "<p>That gave me an idea. Maybe we can somehow write a safe abstraction over Once to let you safely write into a mutable static because it knows it can only happen once</p>",
        "id": 194014017,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586948960
    },
    {
        "content": "<p>What do people think about something along these lines? <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9d4672b0cb186749c4a3ea977db0cce7\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9d4672b0cb186749c4a3ea977db0cce7\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9d4672b0cb186749c4a3ea977db0cce7</a><br>\nI think it should be possible to decrease the size to 24 bytes and then it would truly be zero cost, but I'm not sure how to do it without heap allocation (being generic over <code>F: Fn() -&gt; T</code> is problematic because statics can't auto infer types)</p>",
        "id": 194033803,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586958909
    },
    {
        "content": "<p>Is this the same functionality as <code>lazy_static</code>, modulo syntactic sugar?</p>",
        "id": 194039145,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1586961018
    },
    {
        "content": "<p>I'm unclear on the differences tween this and <a href=\"https://docs.rs/once_cell/1.3.1/once_cell/\" title=\"https://docs.rs/once_cell/1.3.1/once_cell/\">OnceCell</a>.</p>",
        "id": 194039796,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1586961327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/WriteOnceCell/near/194039796\" title=\"#narrow/stream/122651-general/topic/WriteOnceCell/near/194039796\">said</a>:</p>\n<blockquote>\n<p>I'm unclear on the differences tween this and <a href=\"https://docs.rs/once_cell/1.3.1/once_cell/\" title=\"https://docs.rs/once_cell/1.3.1/once_cell/\">OnceCell</a>.</p>\n</blockquote>\n<p>Looks interesting, but I don't want to call <code>get_or_init</code> every time I want to access it.<br>\nI find myself doing things like this quite a lot: <a href=\"https://play.rust-lang.org/?gist=51a178a221188189e6f711e062c83604\" title=\"https://play.rust-lang.org/?gist=51a178a221188189e6f711e062c83604\">https://play.rust-lang.org/?gist=51a178a221188189e6f711e062c83604</a></p>",
        "id": 194050170,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586965280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span>  I don't think I'm following. Isn't that literally</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">once_cell</span>::<span class=\"n\">sync</span>::<span class=\"n\">OnceCell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Do something computationally intensive.</span>\n<span class=\"w\">        </span><span class=\"n\">Context</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">get_context</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">INSTANCE</span>: <span class=\"nc\">OnceCell</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OnceCell</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">INSTANCE</span><span class=\"p\">.</span><span class=\"n\">get_or_init</span><span class=\"p\">(</span><span class=\"n\">Context</span>::<span class=\"n\">new</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194213722,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1586977919
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">once_cell</span>::<span class=\"n\">sync</span>::<span class=\"n\">Lazy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Do something computationally intensive.</span>\n<span class=\"w\">        </span><span class=\"n\">Context</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">CONTEXT</span>: <span class=\"nc\">Lazy</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Lazy</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Context</span>::<span class=\"n\">new</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194213887,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1586977994
    },
    {
        "content": "<p>hehe, you're right. if you plug it into my design then it does look good and free of unsafe :)<br>\nOh and Lazy does exactly that ha. <br>\nHow does it compile without explictly specifying the exact type? that did not work for me</p>",
        "id": 194215477,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586978833
    },
    {
        "content": "<p>oh because of the equal sign in <code>F = fn() -&gt; T</code></p>",
        "id": 194217115,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586979666
    }
]