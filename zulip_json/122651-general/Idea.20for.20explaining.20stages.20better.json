[
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/843\">https://github.com/rust-lang/rustc-dev-guide/pull/843</a> trying to explain stages some more. Trying to drum up visibility since it won't go through MCP :) please take a look if you're interested!</p>",
        "id": 208635443,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598923258
    },
    {
        "content": "<p>trying this again: <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/857/\">https://github.com/rust-lang/rustc-dev-guide/pull/857/</a></p>",
        "id": 209448740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599601901
    },
    {
        "content": "<p>fyi <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/857\">https://github.com/rust-lang/rustc-dev-guide/pull/857</a> is getting close to merging, you might be interested in taking a look  :)</p>",
        "id": 211977576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601587539
    },
    {
        "content": "<p>(wow, did this really take me a whole month?)</p>",
        "id": 211977613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601587561
    },
    {
        "content": "<p>I read through the changes. I don't see any issues, but it's not clear to me how or where people get confused, so it's hard to know what will help.</p>",
        "id": 212125119,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601670671
    },
    {
        "content": "<blockquote>\n<p>it's not clear to me how or where people get confused</p>\n</blockquote>\n<p>mostly that '--stage 0' builds <em>with</em> the stage0 compiler, not that it gets built: <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/stage1.20compiler.20without.20std\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/stage1.20compiler.20without.20std</a></p>",
        "id": 212126232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601671229
    },
    {
        "content": "<p>Here's something that confuses me: Does <code>--stage 1</code> build stage 1 or does it build <em>with</em> stage 1?</p>",
        "id": 212127091,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601671712
    },
    {
        "content": "<p><code>build --stage 1</code> builds with stage 1, except rustdoc which is special</p>",
        "id": 212130874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674019
    },
    {
        "content": "<p>Ah, so <code>--stage 1</code> builds stage 2 (except rustdoc)?</p>",
        "id": 212130900,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601674039
    },
    {
        "content": "<p>What does it do for rustdoc?</p>",
        "id": 212130911,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601674050
    },
    {
        "content": "<p><code>--stage 1 compiler/rustc</code> builds stage 2 without assembling it, I wouldn't say <code>--stage 1</code> builds stage 2 in general</p>",
        "id": 212130985,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674097
    },
    {
        "content": "<p><code>build --stage 1 src/tools/rustdoc</code> builds with stage 0 and links to stage 1</p>",
        "id": 212131032,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674125
    },
    {
        "content": "<p>unlike <code>build --stage 1 src/tools/clippy</code> which builds with stage 1 and links to stage 2</p>",
        "id": 212131062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674148
    },
    {
        "content": "<p>(that's a bug though)</p>",
        "id": 212131426,
        "sender_full_name": "simulacrum",
        "timestamp": 1601674368
    },
    {
        "content": "<p>it's just unclear which direction is expected</p>",
        "id": 212131445,
        "sender_full_name": "simulacrum",
        "timestamp": 1601674380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212131426\">said</a>:</p>\n<blockquote>\n<p>(that's a bug though)</p>\n</blockquote>\n<p>what is a bug? the staging behavior for clippy and miri makes sense, IMO; it is consistent with \"build with stage X\". so I assume rustdoc in the bug. why would the rustdoc direction be expected when it is not how anything else works?</p>",
        "id": 212165979,
        "sender_full_name": "RalfJ",
        "timestamp": 1601722572
    },
    {
        "content": "<p>Wow, so confusing <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 212184281,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601750067
    },
    {
        "content": "<p>rustdoc's direction is currently the case mostly because people wanted stage 0 rustdoc to point at beta rustdoc. in order for there to not be an awkward hole (where stage 0 is beta and stage 1 is a full 2 compilers later) we shift rustdoc down a stage, matching rustc -- i.e., if we have a hypothetical src/tools/rustc, rustdoc matches that binary). clippy/miri are different in that a stage 0 build for them will still build a full compiler toolchain, iirc</p>",
        "id": 212184384,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> would it make sense to keep the current behavior of <code>doc --stage N</code>, but change <code>build</code> to match the other commands?</p>",
        "id": 212184538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750456
    },
    {
        "content": "<p>Then if you're actually working on rustdoc the stages are consistent, but you can document with beta rustdoc if you want to</p>",
        "id": 212184547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750479
    },
    {
        "content": "<p>maybe. not sure. I don't really use either so hard to say; might be more confusing.</p>",
        "id": 212184556,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750519
    },
    {
        "content": "<p>That seems more consistent in general with '--stage N runs the stage N compiler'</p>",
        "id": 212184593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750526
    },
    {
        "content": "<p>I think it's a question of whether you treat rustdoc as a library or as a binary</p>",
        "id": 212184599,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750551
    },
    {
        "content": "<p>i.e., usually the binaries produced from stage N build will go into stage N+1/bin</p>",
        "id": 212184607,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750572
    },
    {
        "content": "<p>I think it should be consistent with compiler/rustc, which my idea does</p>",
        "id": 212184617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750589
    },
    {
        "content": "<p>er, no? at least I think no</p>",
        "id": 212184622,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750600
    },
    {
        "content": "<p>As do the rest of the tools</p>",
        "id": 212184623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750601
    },
    {
        "content": "<p>I don't see why not? You build rustdoc the first time with <code>build --stage 0</code> and it goes into stage1/bin</p>",
        "id": 212184678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750651
    },
    {
        "content": "<p>As opposed to the current situation which builds with --stage 1 for the first time</p>",
        "id": 212184684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750675
    },
    {
        "content": "<p>hm maybe</p>",
        "id": 212184686,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750676
    },
    {
        "content": "<p>I'd need to look at code and think about it for a bit</p>",
        "id": 212184695,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750688
    },
    {
        "content": "<p>I guess I don't see how \"which rustdoc is used by <code>--stage 0 doc</code>\" is connected with \"which rustdoc is built by <code>--stage 0 build</code>\".</p>",
        "id": 212214783,
        "sender_full_name": "RalfJ",
        "timestamp": 1601803797
    },
    {
        "content": "<p>Well, that's sort of my complaint about bootstrap in general is that this is inconsistent across commands ;)</p>",
        "id": 212222194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601816103
    },
    {
        "content": "<p>But I think it should <em>at least</em> be consistently inconsistent and not treat rustdoc differently than other tools</p>",
        "id": 212222205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601816136
    },
    {
        "content": "<p>With my lense for \"the stage says which compiler is sued to build the thing you are asking to be built\", the problem is that with <code>doc</code> nothing really gets built...</p>",
        "id": 212222639,
        "sender_full_name": "RalfJ",
        "timestamp": 1601816929
    },
    {
        "content": "<p>but I'd interpret this loosely as \"it defines from which stage the rustdoc comes\"</p>",
        "id": 212222642,
        "sender_full_name": "RalfJ",
        "timestamp": 1601816945
    },
    {
        "content": "<p>so <code>doc --stage 0</code> should use the one from bootstrap and <code>doc --stage 1</code> should <code>build --stage 0 rustdoc</code> and then use that (similar to <code>test --stage 1 src/test/ui</code>)</p>",
        "id": 212222653,
        "sender_full_name": "RalfJ",
        "timestamp": 1601816982
    },
    {
        "content": "<p>Yeah, that's my \"consistently inconsistent\" proposal. I guess that would need another MCP?</p>",
        "id": 212222967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601817373
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/rust-lang/rust/pull/77489\">https://github.com/rust-lang/rust/pull/77489</a> is stalled on forming a consensus <del>even though there was already an MCP a month ago</del> so you might be interested in taking a look</p>",
        "id": 212223315,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601817979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212223315\">said</a>:</p>\n<blockquote>\n<p>also <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"https://github.com/rust-lang/rust/pull/77489\">https://github.com/rust-lang/rust/pull/77489</a> is stalled on forming a consensus <del>even though there was already an MCP a month ago</del> so you might be interested in taking a look</p>\n</blockquote>\n<p>I don't really have an opinion on this TBH... I basically never use <code>x.py</code> without a filter, and cannot think of any that would be a good default</p>",
        "id": 212223480,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818300
    },
    {
        "content": "<p>TBH I'd probably make the filter mandatory if it was up to me^^</p>",
        "id": 212223483,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212222639\">said</a>:</p>\n<blockquote>\n<p>With my lense for \"the stage says which compiler is sued to build the thing you are asking to be built\", the problem is that with <code>doc</code> nothing really gets built...</p>\n</blockquote>\n<p>the thing being built is the documentation</p>",
        "id": 212223601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601818450
    },
    {
        "content": "<p>so you're using the stage 0 compiler to build the docs, so in that sense <code>doc --stage 0</code> running beta is consistent with the rest of the subcommands</p>",
        "id": 212223608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601818473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212223608\">said</a>:</p>\n<blockquote>\n<p>so you're using the stage 0 compiler to build the docs, so in that sense <code>doc --stage 0</code> running beta is consistent with the rest of the subcommands</p>\n</blockquote>\n<p>agreed</p>",
        "id": 212223700,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818632
    },
    {
        "content": "<p>but <code>build --stage 0 rustdoc</code> is currently <em>not</em> consistent with the rest I'd argue</p>",
        "id": 212223707,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818646
    },
    {
        "content": "<p>right, that's the thing I want to change</p>",
        "id": 212223759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601818699
    },
    {
        "content": "<p>oh, I remembered I think why I thought we wanted this for other tools as well (or at least other subcommands).</p>\n<p>x.py build --stage 1 clippy, ideally, would require only one rustc build. That implies using the <em>stage0</em> compiler to compile clippy, linking it against stage0 compiler artifacts. This would match rustdoc behavior</p>",
        "id": 212230695,
        "sender_full_name": "simulacrum",
        "timestamp": 1601830081
    },
    {
        "content": "<p>that would also mean that e.g. x.py test --stage 1 src/test/ui src/tools/clippy is pretty fast, unlike today where I think that means two full rustc builds</p>",
        "id": 212230743,
        "sender_full_name": "simulacrum",
        "timestamp": 1601830114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212222639\">said</a>:</p>\n<blockquote>\n<p>With my lense for \"the stage says which compiler is sued to build the thing you are asking to be built\", the problem is that with <code>doc</code> nothing really gets built...</p>\n</blockquote>\n<p>Well, it does end up in <code>build/doc</code>, so the documentation is what's being built.</p>",
        "id": 212232017,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601832206
    },
    {
        "content": "<p>Oops, <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> already said that</p>",
        "id": 212232024,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601832221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212230743\">said</a>:</p>\n<blockquote>\n<p>that would also mean that e.g. x.py test --stage 1 src/test/ui src/tools/clippy is pretty fast, unlike today where I think that means two full rustc builds</p>\n</blockquote>\n<p>really the odd one out here is <code>test --stage 1 src/test/ui</code> though -- for testing <code>library/X</code> or <code>src/tools/miri</code>, <code>--stage 0</code> is already what you want to build rustc as few times as possible.</p>",
        "id": 212240612,
        "sender_full_name": "RalfJ",
        "timestamp": 1601843808
    },
    {
        "content": "<p>hm, perhaps :)</p>",
        "id": 212240618,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843823
    },
    {
        "content": "<p>I do wonder -- testing clippy and UI tests feels like it should not be different, so it would make sense for both to have the same stage, I think</p>",
        "id": 212240641,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843871
    },
    {
        "content": "<p>I guess the difference is UI tests only depend on std, unless they're  fulldeps</p>",
        "id": 212240688,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212240688\">said</a>:</p>\n<blockquote>\n<p>I guess the difference is UI tests only depend on std, unless they're  fulldeps</p>\n</blockquote>\n<p>yeah I think that is the technical reason why <code>test --stage 0 src/test/ui</code> just doesn't work... running ui tests needs a compiler build <em>and a stdlib built with that compiler</em></p>",
        "id": 212240798,
        "sender_full_name": "RalfJ",
        "timestamp": 1601844028
    }
]