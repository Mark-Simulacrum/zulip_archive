[
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/843\">https://github.com/rust-lang/rustc-dev-guide/pull/843</a> trying to explain stages some more. Trying to drum up visibility since it won't go through MCP :) please take a look if you're interested!</p>",
        "id": 208635443,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598923258
    },
    {
        "content": "<p>trying this again: <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/857/\">https://github.com/rust-lang/rustc-dev-guide/pull/857/</a></p>",
        "id": 209448740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599601901
    },
    {
        "content": "<p>fyi <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/857\">https://github.com/rust-lang/rustc-dev-guide/pull/857</a> is getting close to merging, you might be interested in taking a look  :)</p>",
        "id": 211977576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601587539
    },
    {
        "content": "<p>(wow, did this really take me a whole month?)</p>",
        "id": 211977613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601587561
    },
    {
        "content": "<p>I read through the changes. I don't see any issues, but it's not clear to me how or where people get confused, so it's hard to know what will help.</p>",
        "id": 212125119,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601670671
    },
    {
        "content": "<blockquote>\n<p>it's not clear to me how or where people get confused</p>\n</blockquote>\n<p>mostly that '--stage 0' builds <em>with</em> the stage0 compiler, not that it gets built: <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/stage1.20compiler.20without.20std\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/stage1.20compiler.20without.20std</a></p>",
        "id": 212126232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601671229
    },
    {
        "content": "<p>Here's something that confuses me: Does <code>--stage 1</code> build stage 1 or does it build <em>with</em> stage 1?</p>",
        "id": 212127091,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601671712
    },
    {
        "content": "<p><code>build --stage 1</code> builds with stage 1, except rustdoc which is special</p>",
        "id": 212130874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674019
    },
    {
        "content": "<p>Ah, so <code>--stage 1</code> builds stage 2 (except rustdoc)?</p>",
        "id": 212130900,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601674039
    },
    {
        "content": "<p>What does it do for rustdoc?</p>",
        "id": 212130911,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601674050
    },
    {
        "content": "<p><code>--stage 1 compiler/rustc</code> builds stage 2 without assembling it, I wouldn't say <code>--stage 1</code> builds stage 2 in general</p>",
        "id": 212130985,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674097
    },
    {
        "content": "<p><code>build --stage 1 src/tools/rustdoc</code> builds with stage 0 and links to stage 1</p>",
        "id": 212131032,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674125
    },
    {
        "content": "<p>unlike <code>build --stage 1 src/tools/clippy</code> which builds with stage 1 and links to stage 2</p>",
        "id": 212131062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674148
    },
    {
        "content": "<p>(that's a bug though)</p>",
        "id": 212131426,
        "sender_full_name": "simulacrum",
        "timestamp": 1601674368
    },
    {
        "content": "<p>it's just unclear which direction is expected</p>",
        "id": 212131445,
        "sender_full_name": "simulacrum",
        "timestamp": 1601674380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212131426\">said</a>:</p>\n<blockquote>\n<p>(that's a bug though)</p>\n</blockquote>\n<p>what is a bug? the staging behavior for clippy and miri makes sense, IMO; it is consistent with \"build with stage X\". so I assume rustdoc in the bug. why would the rustdoc direction be expected when it is not how anything else works?</p>",
        "id": 212165979,
        "sender_full_name": "RalfJ",
        "timestamp": 1601722572
    },
    {
        "content": "<p>Wow, so confusing <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 212184281,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601750067
    },
    {
        "content": "<p>rustdoc's direction is currently the case mostly because people wanted stage 0 rustdoc to point at beta rustdoc. in order for there to not be an awkward hole (where stage 0 is beta and stage 1 is a full 2 compilers later) we shift rustdoc down a stage, matching rustc -- i.e., if we have a hypothetical src/tools/rustc, rustdoc matches that binary). clippy/miri are different in that a stage 0 build for them will still build a full compiler toolchain, iirc</p>",
        "id": 212184384,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> would it make sense to keep the current behavior of <code>doc --stage N</code>, but change <code>build</code> to match the other commands?</p>",
        "id": 212184538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750456
    },
    {
        "content": "<p>Then if you're actually working on rustdoc the stages are consistent, but you can document with beta rustdoc if you want to</p>",
        "id": 212184547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750479
    },
    {
        "content": "<p>maybe. not sure. I don't really use either so hard to say; might be more confusing.</p>",
        "id": 212184556,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750519
    },
    {
        "content": "<p>That seems more consistent in general with '--stage N runs the stage N compiler'</p>",
        "id": 212184593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750526
    },
    {
        "content": "<p>I think it's a question of whether you treat rustdoc as a library or as a binary</p>",
        "id": 212184599,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750551
    },
    {
        "content": "<p>i.e., usually the binaries produced from stage N build will go into stage N+1/bin</p>",
        "id": 212184607,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750572
    },
    {
        "content": "<p>I think it should be consistent with compiler/rustc, which my idea does</p>",
        "id": 212184617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750589
    },
    {
        "content": "<p>er, no? at least I think no</p>",
        "id": 212184622,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750600
    },
    {
        "content": "<p>As do the rest of the tools</p>",
        "id": 212184623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750601
    },
    {
        "content": "<p>I don't see why not? You build rustdoc the first time with <code>build --stage 0</code> and it goes into stage1/bin</p>",
        "id": 212184678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750651
    },
    {
        "content": "<p>As opposed to the current situation which builds with --stage 1 for the first time</p>",
        "id": 212184684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601750675
    },
    {
        "content": "<p>hm maybe</p>",
        "id": 212184686,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750676
    },
    {
        "content": "<p>I'd need to look at code and think about it for a bit</p>",
        "id": 212184695,
        "sender_full_name": "simulacrum",
        "timestamp": 1601750688
    },
    {
        "content": "<p>I guess I don't see how \"which rustdoc is used by <code>--stage 0 doc</code>\" is connected with \"which rustdoc is built by <code>--stage 0 build</code>\".</p>",
        "id": 212214783,
        "sender_full_name": "RalfJ",
        "timestamp": 1601803797
    },
    {
        "content": "<p>Well, that's sort of my complaint about bootstrap in general is that this is inconsistent across commands ;)</p>",
        "id": 212222194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601816103
    },
    {
        "content": "<p>But I think it should <em>at least</em> be consistently inconsistent and not treat rustdoc differently than other tools</p>",
        "id": 212222205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601816136
    },
    {
        "content": "<p>With my lense for \"the stage says which compiler is sued to build the thing you are asking to be built\", the problem is that with <code>doc</code> nothing really gets built...</p>",
        "id": 212222639,
        "sender_full_name": "RalfJ",
        "timestamp": 1601816929
    },
    {
        "content": "<p>but I'd interpret this loosely as \"it defines from which stage the rustdoc comes\"</p>",
        "id": 212222642,
        "sender_full_name": "RalfJ",
        "timestamp": 1601816945
    },
    {
        "content": "<p>so <code>doc --stage 0</code> should use the one from bootstrap and <code>doc --stage 1</code> should <code>build --stage 0 rustdoc</code> and then use that (similar to <code>test --stage 1 src/test/ui</code>)</p>",
        "id": 212222653,
        "sender_full_name": "RalfJ",
        "timestamp": 1601816982
    },
    {
        "content": "<p>Yeah, that's my \"consistently inconsistent\" proposal. I guess that would need another MCP?</p>",
        "id": 212222967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601817373
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/rust-lang/rust/pull/77489\">https://github.com/rust-lang/rust/pull/77489</a> is stalled on forming a consensus <del>even though there was already an MCP a month ago</del> so you might be interested in taking a look</p>",
        "id": 212223315,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601817979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212223315\">said</a>:</p>\n<blockquote>\n<p>also <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"https://github.com/rust-lang/rust/pull/77489\">https://github.com/rust-lang/rust/pull/77489</a> is stalled on forming a consensus <del>even though there was already an MCP a month ago</del> so you might be interested in taking a look</p>\n</blockquote>\n<p>I don't really have an opinion on this TBH... I basically never use <code>x.py</code> without a filter, and cannot think of any that would be a good default</p>",
        "id": 212223480,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818300
    },
    {
        "content": "<p>TBH I'd probably make the filter mandatory if it was up to me^^</p>",
        "id": 212223483,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212222639\">said</a>:</p>\n<blockquote>\n<p>With my lense for \"the stage says which compiler is sued to build the thing you are asking to be built\", the problem is that with <code>doc</code> nothing really gets built...</p>\n</blockquote>\n<p>the thing being built is the documentation</p>",
        "id": 212223601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601818450
    },
    {
        "content": "<p>so you're using the stage 0 compiler to build the docs, so in that sense <code>doc --stage 0</code> running beta is consistent with the rest of the subcommands</p>",
        "id": 212223608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601818473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212223608\">said</a>:</p>\n<blockquote>\n<p>so you're using the stage 0 compiler to build the docs, so in that sense <code>doc --stage 0</code> running beta is consistent with the rest of the subcommands</p>\n</blockquote>\n<p>agreed</p>",
        "id": 212223700,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818632
    },
    {
        "content": "<p>but <code>build --stage 0 rustdoc</code> is currently <em>not</em> consistent with the rest I'd argue</p>",
        "id": 212223707,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818646
    },
    {
        "content": "<p>right, that's the thing I want to change</p>",
        "id": 212223759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601818699
    },
    {
        "content": "<p>oh, I remembered I think why I thought we wanted this for other tools as well (or at least other subcommands).</p>\n<p>x.py build --stage 1 clippy, ideally, would require only one rustc build. That implies using the <em>stage0</em> compiler to compile clippy, linking it against stage0 compiler artifacts. This would match rustdoc behavior</p>",
        "id": 212230695,
        "sender_full_name": "simulacrum",
        "timestamp": 1601830081
    },
    {
        "content": "<p>that would also mean that e.g. x.py test --stage 1 src/test/ui src/tools/clippy is pretty fast, unlike today where I think that means two full rustc builds</p>",
        "id": 212230743,
        "sender_full_name": "simulacrum",
        "timestamp": 1601830114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212222639\">said</a>:</p>\n<blockquote>\n<p>With my lense for \"the stage says which compiler is sued to build the thing you are asking to be built\", the problem is that with <code>doc</code> nothing really gets built...</p>\n</blockquote>\n<p>Well, it does end up in <code>build/doc</code>, so the documentation is what's being built.</p>",
        "id": 212232017,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601832206
    },
    {
        "content": "<p>Oops, <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> already said that</p>",
        "id": 212232024,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601832221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212230743\">said</a>:</p>\n<blockquote>\n<p>that would also mean that e.g. x.py test --stage 1 src/test/ui src/tools/clippy is pretty fast, unlike today where I think that means two full rustc builds</p>\n</blockquote>\n<p>really the odd one out here is <code>test --stage 1 src/test/ui</code> though -- for testing <code>library/X</code> or <code>src/tools/miri</code>, <code>--stage 0</code> is already what you want to build rustc as few times as possible.</p>",
        "id": 212240612,
        "sender_full_name": "RalfJ",
        "timestamp": 1601843808
    },
    {
        "content": "<p>hm, perhaps :)</p>",
        "id": 212240618,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843823
    },
    {
        "content": "<p>I do wonder -- testing clippy and UI tests feels like it should not be different, so it would make sense for both to have the same stage, I think</p>",
        "id": 212240641,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843871
    },
    {
        "content": "<p>I guess the difference is UI tests only depend on std, unless they're  fulldeps</p>",
        "id": 212240688,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Idea.20for.20explaining.20stages.20better/near/212240688\">said</a>:</p>\n<blockquote>\n<p>I guess the difference is UI tests only depend on std, unless they're  fulldeps</p>\n</blockquote>\n<p>yeah I think that is the technical reason why <code>test --stage 0 src/test/ui</code> just doesn't work... running ui tests needs a compiler build <em>and a stdlib built with that compiler</em></p>",
        "id": 212240798,
        "sender_full_name": "RalfJ",
        "timestamp": 1601844028
    },
    {
        "content": "<p>I ran into this in <a href=\"https://github.com/rust-lang/rust/issues/92538\">https://github.com/rust-lang/rust/issues/92538</a> . It's quite confusing to have rustdoc behave differently than other tools w.r.t the meaning of '--stage N'</p>",
        "id": 266872904,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641335100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> fyi I suspect neither I nor <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> are likely to make a PR for this, but <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> might be willing to accept a PR changing it to be consistent with the other commands</p>",
        "id": 266879413,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1641339429
    },
    {
        "content": "<p>It's intentional iirc?</p>",
        "id": 266879713,
        "sender_full_name": "simulacrum",
        "timestamp": 1641339646
    },
    {
        "content": "<p>Otherwise --stage 0 and --stage 1 will be inconsistent (or there's no way to access strictly bootstrap docs)</p>",
        "id": 266879758,
        "sender_full_name": "simulacrum",
        "timestamp": 1641339679
    },
    {
        "content": "<p>But maybe it makes sense to change other tools - the primary reason for being inconsistent is that we currently have stage0/bin/rustdoc but not clippy, etc</p>",
        "id": 266879892,
        "sender_full_name": "simulacrum",
        "timestamp": 1641339764
    },
    {
        "content": "<p>But yeah I'm not like 1000% committed to anything here, so a well motivated PR arguing the tradeoff here (or MCP, perhaps) seem reasonable to some extent.</p>",
        "id": 266879983,
        "sender_full_name": "simulacrum",
        "timestamp": 1641339833
    },
    {
        "content": "<p>I guess a distinction between build --stage 0 rustdoc and doc --stage 0 std could be drawn (or interpreted in the right way), not sure. It would sort of make sense - stages have sort of different meaning at a conceptual level between use for compiler tools (rustdoc) and use of those tools (building documentation).</p>",
        "id": 266880226,
        "sender_full_name": "simulacrum",
        "timestamp": 1641340013
    },
    {
        "content": "<p>I wonder if we should use names rather than numbers to refer to stages? So something like:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>x build --with-stage bootstrap rustdoc\n</code></pre></div>\n<p>Just an idea; it might be more confusing <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 266880380,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641340137
    },
    {
        "content": "<p>Or just changing <code>--stage</code> to <code>--with-stage</code> or <code>--for-stage</code> depending on the meaning. (I think this has been proposed before though.)</p>",
        "id": 266880395,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641340160
    },
    {
        "content": "<p>The latter for sure has been talked about, may not be a terrible idea (particularly with only one of those options available for different subcommands).</p>",
        "id": 266880932,
        "sender_full_name": "simulacrum",
        "timestamp": 1641340635
    },
    {
        "content": "<p>Names are ... Hard. I have no nice names for these things, beyond bootstrap, and even that sounds a little confusing. Maybe \"using=downloaded-rustc\" but that has it's own problems.</p>",
        "id": 266880998,
        "sender_full_name": "simulacrum",
        "timestamp": 1641340686
    },
    {
        "content": "<blockquote>\n<p>Maybe \"using=downloaded-rustc\" but that has it's own problems.</p>\n</blockquote>\n<p>Yeah, that's hard because it could mean either bootstrap or stage1 (with <code>download-rustc = true</code>)</p>",
        "id": 266881442,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641341006
    },
    {
        "content": "<p>I do think it might be good to use <code>--with-stage</code> or <code>--for-stage</code> (better name could be brainstormed) instead of just <code>--stage</code>. We could leave <code>--stage</code> as an alias to the old behavior if people have scripts/muscle memory that they don't want to lose.</p>",
        "id": 266881561,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641341063
    },
    {
        "content": "<p>It might also be helpful to have \"curated flags\" since in most cases only a few combinations of commands and flags are actually commonly used.</p>",
        "id": 266881753,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641341192
    },
    {
        "content": "<p>E.g., <code>x doc --with-bootstrap library/std</code> vs <code>x doc --with-local library/std</code> are the only two versions that are really useful.</p>",
        "id": 266881796,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641341225
    },
    {
        "content": "<p>And these curated flags could handle the issue of needing to use stage1 rustdoc with download-rustc off but stage2 with it on.</p>",
        "id": 266881838,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641341259
    },
    {
        "content": "<p>Perhaps, yeah. Not sure.</p>",
        "id": 266882224,
        "sender_full_name": "simulacrum",
        "timestamp": 1641341541
    },
    {
        "content": "<p>Even if people keep using <code>--stage</code> just having the <code>--with</code> and <code>--from</code> version could help explaining what they mean in a specific context.</p>",
        "id": 266883940,
        "sender_full_name": "The 8472",
        "timestamp": 1641343064
    },
    {
        "content": "<blockquote>\n<p>Otherwise --stage 0 and --stage 1 will be inconsistent (or there's no way to access strictly bootstrap docs)</p>\n</blockquote>\n<p>Can you elaborate? What prevents clippy from having the same behavior (e.g. stage0 means running with bootstrap)?</p>",
        "id": 266884160,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641343239
    },
    {
        "content": "<p>We don't have a bootstrap clippy, unless we start downloading it - which isn't impossible but adds difficulty (particularly if it's optional). So currently there's nothing to run with --stage 0.</p>",
        "id": 266884347,
        "sender_full_name": "simulacrum",
        "timestamp": 1641343421
    },
    {
        "content": "<p>I think it would be better for that option to just error, then</p>",
        "id": 266884470,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641343514
    },
    {
        "content": "<p>Instead of changing what stage 0/1 means depending on the command</p>",
        "id": 266884491,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641343538
    },
    {
        "content": "<p>Sure, changing all the other tools to match current rustdoc behavior may be a viable strategy</p>",
        "id": 266884504,
        "sender_full_name": "simulacrum",
        "timestamp": 1641343552
    },
    {
        "content": "<p>My two cents (and I may have misunderstood things): the documentation states that passing in <code>--stage=n</code> means using the stage n compiler to build stage n+1 artifacts, so I expected <code>x.py build --stage=2</code> to build up to stage2 rustc and then build a stage3 compiler in <code>stage2-rustc</code>. However, using <code>--stage=2</code> only built the folders <code>stage2</code> and <code>stage2-std</code>, and I had to use <code>--stage=3</code> to get a <code>stage2-rustc</code> folder along with a <code>stage3</code> folder containing a stage3 rustc and associated artifacts. (This was with <code>full-bootstrap = true</code> in <code>config.toml</code> BTW.) Either I'm misunderstanding what that section means or that section's wording should be updated to be clearer.</p>",
        "id": 266888304,
        "sender_full_name": "Ryan Lee",
        "timestamp": 1641347314
    },
    {
        "content": "<p>That particular problem is because we have defaults which didn't match your expectation: iirc, they don't include rustc, just std. There was another thread quite recently about removing defaults entirely in favor of requiring users to specify what they want, which may help address that.</p>",
        "id": 266890739,
        "sender_full_name": "simulacrum",
        "timestamp": 1641349991
    },
    {
        "content": "<p>did someone end cooking a PR about this? I'd also love to see some better consistency here</p>",
        "id": 268443019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1642534004
    },
    {
        "content": "<p>I have the beginnings of an attempt to rewrite the bootstrapping section. I'm only looking at how <code>x.py build</code> works to start with; I haven't considered <code>x.py test</code>, for example. This is as much to help me improve my own understanding as much as anything</p>",
        "id": 268460618,
        "sender_full_name": "nnethercote",
        "timestamp": 1642542513
    }
]