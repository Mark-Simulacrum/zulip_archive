[
    {
        "content": "<p>Is it possible to express this bound, perhaps using const generics?</p>",
        "id": 212547786,
        "sender_full_name": "Diggsey",
        "timestamp": 1602072335
    },
    {
        "content": "<p>ZST should be an auto trait like Send or Sync, if we add it</p>",
        "id": 212548033,
        "sender_full_name": "lzutao",
        "timestamp": 1602072497
    },
    {
        "content": "<p>Well <code>mem::size_of()</code> is const, so I figured it might be possible to bound on it, but I get the error <code>error: constant expression depends on a generic parameter</code></p>",
        "id": 212548114,
        "sender_full_name": "Diggsey",
        "timestamp": 1602072569
    },
    {
        "content": "<p>what I mean is that ZST types usually have some determined constructs.<br>\nan auto trait that auto-implemented for those constructs is nice.</p>",
        "id": 212548287,
        "sender_full_name": "lzutao",
        "timestamp": 1602072675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295632\">Diggory Blake</span> <a href=\"#narrow/stream/122651-general/topic/where.20T.3A.20ZST/near/212548114\">said</a>:</p>\n<blockquote>\n<p>Well <code>mem::size_of()</code> is const, so I figured it might be possible to bound on it, but I get the error <code>error: constant expression depends on a generic parameter</code></p>\n</blockquote>\n<p>The <code>const_evaluatable_checked</code> feature might help, but it is a hard problem to implement.<br>\nAn auto-trait is easier to implement, but it is a T-lang issue.</p>",
        "id": 212548619,
        "sender_full_name": "lzutao",
        "timestamp": 1602072843
    },
    {
        "content": "<p>Something like this maybe? <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ee83789c748745b2d8d66dfafc145fb9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ee83789c748745b2d8d66dfafc145fb9</a></p>",
        "id": 212548909,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602073036
    },
    {
        "content": "<p>It's not quite what you want I believe unfortunately</p>",
        "id": 212548924,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1602073048
    },
    {
        "content": "<p>I got it working using <code>const_evaluatable_unchecked</code>: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fdc3700a12f8f7fd321ea239b005df35\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fdc3700a12f8f7fd321ea239b005df35</a></p>",
        "id": 212549764,
        "sender_full_name": "Diggsey",
        "timestamp": 1602073411
    },
    {
        "content": "<p>(if you change y -&gt; x, or switch to <code>p</code>, it compiles)</p>",
        "id": 212549881,
        "sender_full_name": "Diggsey",
        "timestamp": 1602073484
    },
    {
        "content": "<p>Can you elaborate on <em>why</em> you want to bound on ZST?  That said, the safe transmute work will probably make it possible to bound on <code>T: SomeBikeshed&lt;()&gt;</code> that will probably be good enough.</p>\n<p>Most code right now just checks it dynamically, since it's trivially optimized away for non-ZST so there's no runtime or binary size cost.</p>",
        "id": 212581417,
        "sender_full_name": "scottmcm",
        "timestamp": 1602086779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/250\">https://github.com/rust-lang/unsafe-code-guidelines/issues/250</a> and <a href=\"https://github.com/rust-lang/rfcs/issues/3000\">https://github.com/rust-lang/rfcs/issues/3000</a> for context</p>",
        "id": 212591848,
        "sender_full_name": "Diggsey",
        "timestamp": 1602091623
    },
    {
        "content": "<p>I'm probably going to continue to rely on a dynamic assert for now, at least when on stable rust</p>",
        "id": 212591901,
        "sender_full_name": "Diggsey",
        "timestamp": 1602091652
    },
    {
        "content": "<p>The ability to write this bound would make going from ZST -&gt; non-ZST in a library a breaking change, do we want that?</p>",
        "id": 212618248,
        "sender_full_name": "tmandry",
        "timestamp": 1602104330
    },
    {
        "content": "<p>it already is a breaking change (for you can <code>assert_eq!(size_of::&lt;T&gt;(), 0)</code>) or whatever, for some definition of breaking change.</p>",
        "id": 212619113,
        "sender_full_name": "nagisa",
        "timestamp": 1602104756
    },
    {
        "content": "<p>or an equivalent <code>static_assert</code>.</p>",
        "id": 212619208,
        "sender_full_name": "nagisa",
        "timestamp": 1602104784
    },
    {
        "content": "<p>Much like inference failures introduced by addition of additional implementations this is not broadly considered an actual reason to bump the major version though.</p>",
        "id": 212619319,
        "sender_full_name": "nagisa",
        "timestamp": 1602104848
    },
    {
        "content": "<p>yeah I mean, it's definitely a gray area</p>",
        "id": 212621683,
        "sender_full_name": "tmandry",
        "timestamp": 1602106124
    },
    {
        "content": "<p>I think introducing a trait could mean more people expect it to be a breaking change</p>",
        "id": 212621826,
        "sender_full_name": "tmandry",
        "timestamp": 1602106205
    },
    {
        "content": "<p>maybe that's solvable with documentation</p>",
        "id": 212621889,
        "sender_full_name": "tmandry",
        "timestamp": 1602106265
    },
    {
        "content": "<p>but this would be the first trait in std that I know of whose impls are not guaranteed to hold in the future</p>",
        "id": 212622010,
        "sender_full_name": "tmandry",
        "timestamp": 1602106337
    },
    {
        "content": "<p>which is something</p>",
        "id": 212622016,
        "sender_full_name": "tmandry",
        "timestamp": 1602106341
    },
    {
        "content": "<p>With const generics, can't you have the trait be <code>where T: Size&lt;0&gt;</code>?</p>",
        "id": 212622097,
        "sender_full_name": "isHavvy",
        "timestamp": 1602106407
    },
    {
        "content": "<p>if a type has any private fields or is non-exhaustive, <code>size_of</code> should be considered a private detail</p>",
        "id": 212623046,
        "sender_full_name": "cuviper",
        "timestamp": 1602107025
    },
    {
        "content": "<p>yeah, that sounds exactly right to me!</p>",
        "id": 212627186,
        "sender_full_name": "tmandry",
        "timestamp": 1602109840
    }
]