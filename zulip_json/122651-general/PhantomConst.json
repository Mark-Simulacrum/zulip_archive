[
    {
        "content": "<p>Will there be a <code>PhantomData</code> equivalent for const generics?</p>",
        "id": 167234324,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559597775
    },
    {
        "content": "<p>The current plan is that it won't be required</p>",
        "id": 167234918,
        "sender_full_name": "centril",
        "timestamp": 1559598311
    },
    {
        "content": "<p>since there's no variance etc. to deal with</p>",
        "id": 167234944,
        "sender_full_name": "centril",
        "timestamp": 1559598332
    },
    {
        "content": "<p>I wanted to make a </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">FakeArray</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>What would be the way to do so?</p>",
        "id": 167284683,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559649426
    },
    {
        "content": "<p>That there should work</p>",
        "id": 167285162,
        "sender_full_name": "yodal",
        "timestamp": 1559649724
    },
    {
        "content": "<p>hm; did I not even try it?</p>",
        "id": 167285251,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559649783
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 167285316,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559649833
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"218608\">@yodal</span></p>",
        "id": 167285360,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559649843
    },
    {
        "content": "<p>I'm just so used to needing to make use of the parameters</p>",
        "id": 167285387,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559649873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218608\">@yodal</span> should I file this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">FakeArray</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FakeArray</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">N</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FakeArray</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fa</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc/infer/canonical/canonicalizer.rs:553: failed to lift `QueryResponse { var_values: CanonicalVarValues { var_values: [^0, Const { ty: _, val: Infer(Canonical(DebruijnIndex(0), 1)) }] }, region_constraints: [], certainty: Proven, value: FakeArray&lt;^0, _: _&gt; }`, canonicalized from `QueryResponse { var_values: CanonicalVarValues { var_values: [{integer}, Const { ty: _, val: Infer(Var(_#0c)) }] }, region_constraints: [], certainty: Proven, value: FakeArray&lt;{integer}, _: _&gt; }`\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, src/librustc_errors/lib.rs:637:9\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\nerror: aborting due to previous error\n</pre></div>\n\n\n<p>I found <a href=\"https://github.com/rust-lang/rust/issues/60879\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60879\">https://github.com/rust-lang/rust/issues/60879</a> but it's been closed and this still repros</p>",
        "id": 167285672,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559650147
    },
    {
        "content": "<p>Interesting, I tested that one myself and <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> added a regression test so it shouldn't repro on the latest</p>",
        "id": 167286190,
        "sender_full_name": "yodal",
        "timestamp": 1559650581
    },
    {
        "content": "<p>Could you submit an issue? Yours creates an error while the code in that issue doesn't.</p>",
        "id": 167286584,
        "sender_full_name": "yodal",
        "timestamp": 1559650932
    },
    {
        "content": "<p>Sure can!</p>",
        "id": 167286594,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559650943
    },
    {
        "content": "<p>At any rate, if not for that ICE, that code should work just fine</p>",
        "id": 167286606,
        "sender_full_name": "yodal",
        "timestamp": 1559650961
    },
    {
        "content": "<p>Ah, I see what is triggering it. Your code has an explicit const param in the initializer while there code infers it</p>",
        "id": 167286892,
        "sender_full_name": "yodal",
        "timestamp": 1559651221
    }
]