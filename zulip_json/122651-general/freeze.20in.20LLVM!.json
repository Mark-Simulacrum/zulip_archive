[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> wow, it finally happened :D<br>\n<a href=\"https://github.com/llvm/llvm-project/blob/master/llvm/docs/LangRef.rst#L10202\" target=\"_blank\" title=\"https://github.com/llvm/llvm-project/blob/master/llvm/docs/LangRef.rst#L10202\">https://github.com/llvm/llvm-project/blob/master/llvm/docs/LangRef.rst#L10202</a></p>",
        "id": 180044027,
        "sender_full_name": "RalfJ",
        "timestamp": 1573054592
    },
    {
        "content": "<p>Yeah, it's nice isn't it? :3 Let's hope undef dies soon, too.</p>",
        "id": 180044576,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573054924
    },
    {
        "content": "<p>Where's the RFC for a freeze intrinsic? ;P</p>",
        "id": 180156579,
        "sender_full_name": "Lokathor",
        "timestamp": 1573149240
    },
    {
        "content": "<p>In Rust? That's a different can of worms because LLVM's <code>freeze</code> operates on a single SSA value while Rust types are generally not mapped to SSA values.</p>",
        "id": 180174499,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573159848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203193\">@aqjune</span>  was this you? :D</p>",
        "id": 180221163,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212394
    },
    {
        "content": "<p>The docs do not mention that the <code>freeze</code> intrinsic might write to the memory</p>",
        "id": 180221210,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212436
    },
    {
        "content": "<p>and it is unclear whether doing that might be a data-race</p>",
        "id": 180221218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212452
    },
    {
        "content": "<p>(how does it synchronize?)</p>",
        "id": 180221220,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573212458
    },
    {
        "content": "<p>Different <code>freeze</code>! This thread is about the instruction that freezes a single SSA value, not a range of memory. You're thinking of the intrinsic discussed in <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Intrinsic.20for.20freezing.20bytes\" title=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Intrinsic.20for.20freezing.20bytes\">https://rust-lang.zulipchat.com/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Intrinsic.20for.20freezing.20bytes</a> which hasn't landed yet.</p>",
        "id": 180222090,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573213336
    },
    {
        "content": "<p>Ah!</p>",
        "id": 180230756,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573220884
    },
    {
        "content": "<p>So this looks useful as in of itself.</p>",
        "id": 180230840,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573220949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  Hi, yes. :)<br>\nReplacing undef with poison is the next target. I guess this might need another time frame, but I believe people will finally like it as well.<br>\nThe freeze intrinsic for memory is still effective as <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> said . But its semantics is not crystal clear yet, and after discussion with people (including <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>) I became  to think that it will be informative to implement freeze intrinsics with several different semantics and see which one generates efficient code with existing LLVM optimizations. It may take some time, but having such data will be helpful for the design choice.</p>",
        "id": 180245047,
        "sender_full_name": "aqjune",
        "timestamp": 1573229887
    }
]