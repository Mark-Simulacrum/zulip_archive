[
    {
        "content": "<p>Is there a general mechanism to annotate some function or block with X so that it/anything it calls cannot call a function annotated Y, and the compiler complains if you do this? My current use case is preventing calling blocking functions from critical sections in a kernel, but there's also things like not calling async-signal-unsafe functions in a signal handler, etc.</p>",
        "id": 207173013,
        "sender_full_name": "Geoffrey Thomas",
        "timestamp": 1597685767
    },
    {
        "content": "<p>The best way to do that would probably be to make the function <code>Y</code> take a special marker type as a parameter</p>",
        "id": 207188501,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1597693464
    },
    {
        "content": "<p>which can only be constructed in the proper context</p>",
        "id": 207188517,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1597693478
    },
    {
        "content": "<p>there's no automated way of doing this that woul handle transitive function calls (e.g. <code>X() -&gt; A() -&gt; Y()</code>)</p>",
        "id": 207188607,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1597693542
    },
    {
        "content": "<p>there's some call graph analysis stuff from the embedded folks, I think</p>",
        "id": 207190120,
        "sender_full_name": "simulacrum",
        "timestamp": 1597694411
    },
    {
        "content": "<p>but you can't get 100% without a parameter or so, yeah</p>",
        "id": 207190158,
        "sender_full_name": "simulacrum",
        "timestamp": 1597694425
    },
    {
        "content": "<p>sure, but the problem is you can always construct the marker and pass it around, e.g., nothing prevents you from doing</p>\n<div class=\"codehilite\"><pre><span></span><code>let marker = OkToBlock::new();\nlet guard = CriticalSection::new();\nlet data = load_from_disk(sector, &amp;marker);\n</code></pre></div>\n\n\n<p>I need to make sure that <code>marker</code> and <code>guard</code> _don't_ exist at the same time within the same flow of control / same thread</p>",
        "id": 207200143,
        "sender_full_name": "Geoffrey Thomas",
        "timestamp": 1597700382
    },
    {
        "content": "<p>is cargo-call-stack the thing I want to look at? (I'd be totally fine with a lint)</p>",
        "id": 207200407,
        "sender_full_name": "Geoffrey Thomas",
        "timestamp": 1597700538
    },
    {
        "content": "<blockquote>\n<p>you can always construct the marker</p>\n</blockquote>\n<p>That's not strictly true, is it?</p>",
        "id": 207210538,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597708598
    },
    {
        "content": "<p>you just do more types</p>",
        "id": 207210548,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597708621
    },
    {
        "content": "<p>even your example is very similar to a mutex and a condvar</p>",
        "id": 207210570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597708644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">marker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OkToBlock</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CriticalSection</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">marker</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// move it here</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load_from_disk</span><span class=\"p\">(</span><span class=\"n\">sector</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">marker</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Can&#39;t use it cause it&#39;s moved</span>\n</code></pre></div>",
        "id": 207210590,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597708671
    },
    {
        "content": "<p>What stops you from creating another marker at compile-time?</p>",
        "id": 207210824,
        "sender_full_name": "teor",
        "timestamp": 1597708887
    },
    {
        "content": "<p>Privacy, presumably?</p>",
        "id": 207210922,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597708981
    },
    {
        "content": "<p>depends how much control you want to have. ultimately you can <code>transmute</code> something to get a marker</p>",
        "id": 207210941,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597708998
    },
    {
        "content": "<p>but if you do something like</p>",
        "id": 207210945,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597709007
    },
    {
        "content": "<p>You can make <code>transmute</code>s UB if you really want to</p>",
        "id": 207210975,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597709031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">locked</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Marker</span><span class=\"p\">(());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">start_thread</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">Marker</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">Marker</span><span class=\"p\">(()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CriticalSection</span><span class=\"p\">(</span><span class=\"n\">Marker</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">exchange_for_critical_section</span><span class=\"p\">(</span><span class=\"n\">m</span>: <span class=\"nc\">Marker</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">CriticalSection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">CriticalSection</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">exchange_for_marker</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">CriticalSection</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Marker</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">locked</span>::<span class=\"n\">start_thread</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">marker</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">locked</span>::<span class=\"n\">exchange_for_critical_section</span><span class=\"p\">(</span><span class=\"n\">marker</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">marker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">locked</span>::<span class=\"n\">exchange_for_marker</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207211164,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597709198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> what's that technique?</p>",
        "id": 207211209,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597709254
    },
    {
        "content": "<p>what stops you from calling <code>start_thread</code> again inside the critical section?</p>",
        "id": 207211222,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597709277
    },
    {
        "content": "<p>Just put a non-ZST inside without setting a repr, then all transmutes are UB</p>",
        "id": 207211273,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597709315
    },
    {
        "content": "<p>I was assuming that <code>start_thread</code> would actually start another thread and you'd want one marker per thread. You need to ensure that they cant be used across threads.</p>",
        "id": 207211295,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597709346
    },
    {
        "content": "<p>We use a similar approach to the code above for embedded critical sections, just with a lifetime-constrained <code>CriticalSection</code>/<code>Marker</code> so you can't move them out</p>",
        "id": 207211314,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597709370
    },
    {
        "content": "<p>Yep ^</p>",
        "id": 207211327,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597709386
    },
    {
        "content": "<p>Which is the same technique that scoped threads use, right?</p>",
        "id": 207211386,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597709411
    },
    {
        "content": "<p>Yeah</p>",
        "id": 207211390,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597709422
    },
    {
        "content": "<p>(I'm fine with the restriction that only safe code gets the benefit of this checks, if you start transmuting stuff you're on your own.)</p>",
        "id": 207211767,
        "sender_full_name": "Geoffrey Thomas",
        "timestamp": 1597709807
    },
    {
        "content": "<p>is the idea here that you would thread a Marker through literally every function call that might need to either block or enter a critical section? that... seems... rough but maybe workable? I guess you wouldn't need to pass it into functions that do neither</p>",
        "id": 207211805,
        "sender_full_name": "Geoffrey Thomas",
        "timestamp": 1597709861
    }
]