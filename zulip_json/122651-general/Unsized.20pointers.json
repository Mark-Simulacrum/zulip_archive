[
    {
        "content": "<p>What is an unsized pointer, like <code>*const [T]</code>? I assume it has the same representation as <code>&amp;[T]</code>, but there don't seem to be any functions to work with one, and <code>as</code> cast to/from references doesn't work either.</p>",
        "id": 209305242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599491137
    },
    {
        "content": "<p>In particular, I don't know how reasonable it is to cast between <code>*const T</code> and <code>*const [T]</code> in the same way as one would with C arrays, for example</p>",
        "id": 209305392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599491217
    },
    {
        "content": "<p>Or as an alternative to <code>transmute::&lt;&amp;[T], &amp;[T]&gt;(slice)</code> for lifetime erasure</p>",
        "id": 209305544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599491321
    },
    {
        "content": "<p>It's same as the relationship between <code>*const T</code> and <code>&amp;T</code> -- no lifetime, might not be valid/dereferencable, etc</p>",
        "id": 209315514,
        "sender_full_name": "cuviper",
        "timestamp": 1599499193
    },
    {
        "content": "<p>There are raw-parts constructors in the <code>ptr</code> module</p>",
        "id": 209315569,
        "sender_full_name": "cuviper",
        "timestamp": 1599499218
    },
    {
        "content": "<p>I think <code>&amp;[T]</code> should be able to cast <code>as *const [T]</code>, or even just coerce, but the other way is unsafe and must be explicit</p>",
        "id": 209315688,
        "sender_full_name": "cuviper",
        "timestamp": 1599499354
    },
    {
        "content": "<p><code>&amp;*ptr</code> like usual</p>",
        "id": 209315731,
        "sender_full_name": "cuviper",
        "timestamp": 1599499407
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// non-primitive cast: `*const [T]` as `&amp;[T]`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209316610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599500353
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">slice_from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>almost works but needs an unstable feature?</p>",
        "id": 209316783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599500537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> which unstable feature?</p>",
        "id": 209317895,
        "sender_full_name": "RalfJ",
        "timestamp": 1599501837
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/71146\">https://github.com/rust-lang/rust/issues/71146</a></p>",
        "id": 209317946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599501860
    },
    {
        "content": "<p>It's blocked on <a href=\"https://github.com/rust-lang/rust/issues/73987\">https://github.com/rust-lang/rust/issues/73987</a> but the reasoning doesn't make much sense to me, since it would apply equally to any method in the <code>std::ptr</code> namespace</p>",
        "id": 209317981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599501923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209319166,
        "sender_full_name": "cuviper",
        "timestamp": 1599503288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/Unsized.20pointers/near/209317981\">said</a>:</p>\n<blockquote>\n<p>It's blocked on <a href=\"https://github.com/rust-lang/rust/issues/73987\">https://github.com/rust-lang/rust/issues/73987</a> but the reasoning doesn't make much sense to me, since it would apply equally to any method in the <code>std::ptr</code> namespace</p>\n</blockquote>\n<p>does it? this is only really a footgun when the same method exists on raw ptrs and references.</p>",
        "id": 209319504,
        "sender_full_name": "RalfJ",
        "timestamp": 1599503608
    },
    {
        "content": "<p>You can also call it as a free function if you are really worried (although that would require <code>&amp;raw</code> which I think is also not stable)</p>",
        "id": 209319615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599503652
    },
    {
        "content": "<p>Perhaps there should be an alias like <code>std::ptr::raw_slice_len(x: *const [T]) -&gt; usize</code> that can be standardized independently of <code>&lt;*const [T]&gt;::len()</code>?</p>",
        "id": 209319874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599503846
    },
    {
        "content": "<p>Shouldn't we standardize a generic method to get fat pointer meta data instead, e.g. something on the line of <code>std::ptr::get_fat_ptr_meta&lt;T: DST&gt;(x: *const T) -&gt; DST::PtrMeta</code> where <code>[T] impl DST { type PtrMeta = usize }</code> or so. This would also work with any wrapper of a slice and with trait objects (which have <code>PtrMeta=VTablePtr&lt;dyn Trait&gt;</code>, where <code>VTablePtr</code> is for now a opaque type like <code>struct VTablePtr&lt;T&gt;(*const u8, PhantomData&lt;T&gt;)</code> (note that the inner layout of <code>VTablePtr</code> is here just a example and non-pub)).</p>",
        "id": 209666702,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1599752863
    },
    {
        "content": "<p>you're welcome to join <a href=\"https://github.com/rust-lang/lang-team/issues/55\">https://github.com/rust-lang/lang-team/issues/55</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 209666977,
        "sender_full_name": "kennytm",
        "timestamp": 1599752983
    },
    {
        "content": "<p>Thanks <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 209667094,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1599753025
    }
]