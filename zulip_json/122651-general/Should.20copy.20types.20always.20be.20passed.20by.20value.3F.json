[
    {
        "content": "<p>I know that in some languages passing by value always means copying if the function isn't inlined,<br>\nin rust can we assume that the compiler can always optimize it to passing by reference if it's not mutated? such that even <code>[u128; 2048]</code> can be safely passed by value around without fear of big copies?</p>",
        "id": 225485981,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1612734787
    },
    {
        "content": "<p>for this (simple) code it's copied into each stack frame <a href=\"https://godbolt.org/z/466x4n\">https://godbolt.org/z/466x4n</a><br>\ni'd say \"no\"</p>",
        "id": 225487983,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1612737481
    },
    {
        "content": "<p>ha. that's interesting.<br>\nAre there any rules of thumbs here?</p>\n<p>Also, why doesn't the C one copies the array?</p>",
        "id": 225525788,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1612780598
    },
    {
        "content": "<blockquote>\n<p>can we assume that the compiler can always optimize it to passing by reference if it's not mutated</p>\n</blockquote>\n<p>Generally, no. <code>Copy</code> types are generally pretty small, so small that the cost of passing a pointer and dereferencing it will likely be bigger than making a copy. </p>\n<blockquote>\n<p>Also, why doesn't the C one copies the array?</p>\n</blockquote>\n<p>I guess clang's own optimizations. Note that gcc also produces <code>memcpy</code>s.</p>",
        "id": 225530297,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1612783496
    },
    {
        "content": "<p>Yeah, currently Rust is rather bad at optimizing away copies</p>",
        "id": 225530534,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612783634
    },
    {
        "content": "<p>I think if you pass a non-<code>Copy</code> value to a function we'll always pass by reference, but not otherwise</p>",
        "id": 225530570,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612783670
    },
    {
        "content": "<p>Non-<code>Copy</code> values will also be passed by value if the ABI requires it. For example wrappers around integers are often passed by-value. The x86_64 System-V abi is also very aggressive in packing structs in one or two registers. Even when there are more fields. Beyond that for the \"Rust\" abi, types of at most two registers are often passed by-value.</p>",
        "id": 225532037,
        "sender_full_name": "bjorn3",
        "timestamp": 1612784618
    },
    {
        "content": "<blockquote>\n<p>Yeah, currently Rust is rather bad at optimizing away copies</p>\n</blockquote>\n<p>To be fair, so is gcc. I think rust could support it by  using LLVM's <code>byval</code> attribute, but I don't know why it currently doesnt.</p>",
        "id": 225532222,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1612784747
    },
    {
        "content": "<p><code>byval</code> is used when the ABI requires it.</p>",
        "id": 225532344,
        "sender_full_name": "bjorn3",
        "timestamp": 1612784825
    },
    {
        "content": "<p>The disadvantage of using <code>byval</code> is that it forces the value to be at a specific stack location, which means that a <code>memcpy</code> would be necessary if something else needed to be stored at that location previously.</p>",
        "id": 225532487,
        "sender_full_name": "bjorn3",
        "timestamp": 1612784926
    },
    {
        "content": "<p>But aren't we already doing a <code>memcpy</code> anyway?</p>",
        "id": 225536335,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1612787230
    },
    {
        "content": "<p>Yes, in this case it requires a <code>memcpy</code> at the callee side, but it may not always need it. At least when you don't pass the argument to another function it isn't needed. However when using <code>byval</code>, there must almost always be a copy on the caller. In that case it is not possible to decide to not do a <code>memcpy</code> when the callee doesn't pass it as argument to another function.</p>",
        "id": 225537325,
        "sender_full_name": "bjorn3",
        "timestamp": 1612787768
    },
    {
        "content": "<p>There is something odd / curious here: if we forget about the wrappers and just look at <code>sum</code> in <a href=\"https://godbolt.org/z/znc9Kc\">https://godbolt.org/z/znc9Kc</a>, using <code>ByVal { x }: ByVal</code> or <code>ByVal { ref x }: ByVal</code> does change the implementation (alloca in the llvm-ir only for the former), even with <code>panic = \"abort\"</code> and <code>opt-level=3</code> for both cases. I'd have expected the second case to be equivalent to <code>arg: ByVal</code> followed by a <code>let ByVal { ref x } = arg;</code> which would have been equivalent to doing <code>let x = &amp;arg.x</code> which, by inlining that expression, should be equivalent to the first case <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 225539452,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612788959
    }
]