[
    {
        "content": "<p>Hello!</p>",
        "id": 248826826,
        "sender_full_name": "Ilya Kamenshchikov",
        "timestamp": 1628504190
    },
    {
        "content": "<p>This code is breaking for me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Problem</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//Solution</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">solution</span>: <span class=\"nc\">Self</span>::<span class=\"n\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BlackboxOptimizer</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">P</span>: <span class=\"nc\">Problem</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//Problem</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_problem</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">P</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">best_solution</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">P</span>::<span class=\"n\">S</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Breaks here: S not found in Self::P</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">best_score</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_problem</span><span class=\"p\">().</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">best_solution</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My logic is that, since P has trait bound \"Problem\", I should be able to access associated type S from P</p>",
        "id": 248826967,
        "sender_full_name": "Ilya Kamenshchikov",
        "timestamp": 1628504324
    },
    {
        "content": "<p>this works</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Problem</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//Solution</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">solution</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BlackboxOptimizer</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">P</span>: <span class=\"nc\">Problem</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//Problem</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_problem</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">P</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">best_solution</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">P</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Problem</span><span class=\"o\">&gt;</span>::<span class=\"n\">S</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Breaks here: S not found in Self::P</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">best_score</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_problem</span><span class=\"p\">().</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">best_solution</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 248827840,
        "sender_full_name": "lcnr",
        "timestamp": 1628505014
    },
    {
        "content": "<p>iirc the reason that <code>Type::Assoc1::Assoc2</code> does not work but instead needs <code>&lt;Type::Assoc1 as Trait&gt;::Assoc2</code> is that we (currently) figure out which trait an associated type belongs to during name resolution, which happens quite early during compilation. That means that we can't yet reason about which traits are implemented and so on without some hacks.</p>\n<p>So even though <code>Assoc2</code> might be unambiguous we still require explicit annotations by the user</p>",
        "id": 248828115,
        "sender_full_name": "lcnr",
        "timestamp": 1628505222
    },
    {
        "content": "<p>Got it, many thanks!! I'll publish your explanation on SO for google to cache this answer ;) let me know if you are not OK with publishing it. <a href=\"https://stackoverflow.com/questions/68710642/cant-access-an-associated-type/68710643#68710643\">https://stackoverflow.com/questions/68710642/cant-access-an-associated-type/68710643#68710643</a></p>",
        "id": 248828665,
        "sender_full_name": "Ilya Kamenshchikov",
        "timestamp": 1628505611
    },
    {
        "content": "<p>sure <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> go ahead</p>\n<p>wrt your answer: <code>&lt;Self::X as B&gt;::A</code> does also work, fully qualified syntax should only be needed starting with the second associated type in a row</p>",
        "id": 248828779,
        "sender_full_name": "lcnr",
        "timestamp": 1628505722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"377928\">Ilya Kamenshchikov</span> <a href=\"#narrow/stream/122651-general/topic/Beginner.3A.20Associated.20type.20question/near/248828665\">said</a>:</p>\n<blockquote>\n<p>Got it, many thanks!! I'll publish your explanation on SO for google to cache this answer ;) let me know if you are not OK with publishing it. <a href=\"https://stackoverflow.com/questions/68710642/cant-access-an-associated-type/68710643#68710643\">https://stackoverflow.com/questions/68710642/cant-access-an-associated-type/68710643#68710643</a></p>\n</blockquote>\n<p>Dupe: <a href=\"https://stackoverflow.com/questions/66226345/why-are-nested-associated-type-paths-considered-ambiguous\">https://stackoverflow.com/questions/66226345/why-are-nested-associated-type-paths-considered-ambiguous</a> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 248863311,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1628522909
    }
]