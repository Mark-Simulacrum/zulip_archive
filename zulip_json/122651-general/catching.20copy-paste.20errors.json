[
    {
        "content": "<p>Is there a lint in either the compiler or clippy that could have caught this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Treat all files as text, disabling binary attributes and detection.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_text</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">DiffOptions</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"n\">raw</span>::<span class=\"n\">GIT_DIFF_FORCE_TEXT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Treat all files as binary, disabling text diffs</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">DiffOptions</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"n\">raw</span>::<span class=\"n\">GIT_DIFF_FORCE_TEXT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223841318,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611529968
    },
    {
        "content": "<p>The issue is that <code>force_binary</code> has the same body as <code>force_text</code>, right?</p>",
        "id": 223842884,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611531834
    },
    {
        "content": "<p>That might be one way to catch this.</p>",
        "id": 223843202,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532250
    },
    {
        "content": "<p>There are a pile of functions here that all look the same, setting a flag based on a bool argument.</p>",
        "id": 223843227,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532312
    },
    {
        "content": "<p>Maybe there could be a clippy lint for two (or more) functions with the same arguments, return type, and body, but different names.</p>",
        "id": 223843282,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611532341
    },
    {
        "content": "<p>I can imagine catching this due to identical non-trivial function bodies with different names and doc comments, or due to <code>force_binary</code> not following the pattern...</p>",
        "id": 223843289,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532345
    },
    {
        "content": "<p>Or something along those lines.</p>",
        "id": 223843290,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611532345
    },
    {
        "content": "<p>You might want to ask in <a class=\"stream\" data-stream-id=\"257328\" href=\"/#narrow/stream/257328-clippy\">#clippy</a>.</p>",
        "id": 223843294,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611532352
    },
    {
        "content": "<p>Will do, thank you.</p>",
        "id": 223843299,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532358
    },
    {
        "content": "<p>I'm guessing this is too specialized for rustc.</p>",
        "id": 223843301,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611532360
    },
    {
        "content": "<p>Sure! :)</p>",
        "id": 223843302,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611532362
    },
    {
        "content": "<p>Yeah, I figured it was likely too specialized for rustc; I only asked in case there was <em>already</em> something and it wasn't triggering.</p>",
        "id": 223843319,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532391
    },
    {
        "content": "<p>I don't know of any lint like that and I wouldn't expect there to be one because it's so specialized. But it's possible it's allow-by-default or something :)</p>",
        "id": 223844061,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611533196
    },
    {
        "content": "<p>I can't remember the name of the tool, but there's a C or C++ tool that I think would catch something similar</p>",
        "id": 223845947,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611535822
    },
    {
        "content": "<p>They write blog posts showing examples of running their tool on open source projects.</p>",
        "id": 223845951,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611535841
    },
    {
        "content": "<p>But I can't find one now.</p>",
        "id": 223845956,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611535846
    },
    {
        "content": "<p>coverity, maybe</p>",
        "id": 223845963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611535862
    },
    {
        "content": "<p>Oh, here it is — <a href=\"https://www.viva64.com/en/a/0068/\">https://www.viva64.com/en/a/0068/</a></p>",
        "id": 223845977,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611535894
    },
    {
        "content": "<p><a href=\"https://www.viva64.com/en/b/0708/\">https://www.viva64.com/en/b/0708/</a></p>",
        "id": 223846040,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611535942
    },
    {
        "content": "<p><a href=\"https://www.jetbrains.com/help/idea/analyzing-duplicates.html\">https://www.jetbrains.com/help/idea/analyzing-duplicates.html</a> may be able to chat this case.</p>",
        "id": 223898905,
        "sender_full_name": "Eh2406",
        "timestamp": 1611582566
    }
]