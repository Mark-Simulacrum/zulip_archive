[
    {
        "content": "<p>Please vote which you prefer using some emoji! I didn't test either, but I hope the intent is clear.</p>",
        "id": 154148007,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546386840
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">WrappedVal</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154148048,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546386849
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">WrappedVal</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154148058,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546386910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Yeah, I'm chipping away at that one... should have a WIP PR up in a few days I think.</p>",
        "id": 154149516,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1546389885
    },
    {
        "content": "<p>ByteOrder uses the first one though: <a href=\"https://github.com/BurntSushi/byteorder/blob/master/src/lib.rs#L744\" target=\"_blank\" title=\"https://github.com/BurntSushi/byteorder/blob/master/src/lib.rs#L744\">https://github.com/BurntSushi/byteorder/blob/master/src/lib.rs#L744</a></p>",
        "id": 154150341,
        "sender_full_name": "snf",
        "timestamp": 1546391739
    },
    {
        "content": "<p>I have a little voice in the back of my head that says \"avoid <code>transmute</code> as much as possible\", but I also feel that someone (maybe <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ?) had a set of guidelines when <code>transmute</code> was \"better\".</p>",
        "id": 154151557,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546394218
    },
    {
        "content": "<p><code>&amp;mut *(v as *mut _ as *mut T)</code> is preferred. One case where it catches an issue (and transmute won’t) is if you’re casting between fat pointers. </p>\n<p>EDIT: oh wait... does it? <br>\nEDIT2: yeah, it does.</p>\n<div class=\"codehilite\"><pre><span></span>error[E0606]: casting `*mut dyn std::fmt::Display` as `*mut dyn std::fmt::Debug` is invalid\n</pre></div>",
        "id": 154169920,
        "sender_full_name": "nagisa",
        "timestamp": 1546427954
    },
    {
        "content": "<p>I was also going to say that you avoid accidentally increasing the lifetime, but it turns out that it happens with the casts as well <span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// both work...</span>\n<span class=\"w\">    </span><span class=\"c1\">//std::intrinsics::transmute::&lt;&amp;mut u32, &amp;mut u32&gt;(x)</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154169993,
        "sender_full_name": "nagisa",
        "timestamp": 1546428024
    },
    {
        "content": "<p>OTOH <code>transmute</code> at least screams DANGER, whereas <code>as</code> of a raw ptr type looks awfully harmless</p>",
        "id": 154180752,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442812
    },
    {
        "content": "<p>as a reviewer I very strongly dislike these raw ptr casts, they are so easy to miss</p>",
        "id": 154180777,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442863
    },
    {
        "content": "<p>how about <code>unsafe fn almost_transmute&lt;T, U&gt;(x: &amp;mut T) -&gt; &amp;mut U { ... } </code>? Preserves the lifetime too!</p>",
        "id": 154183614,
        "sender_full_name": "nagisa",
        "timestamp": 1546445740
    },
    {
        "content": "<p>bikeshed: <code>transmute_almost</code> (since we have <code>transmute_copy</code>)</p>",
        "id": 154183696,
        "sender_full_name": "centril",
        "timestamp": 1546445795
    },
    {
        "content": "<p><code>transmute_me_maybe</code>.</p>",
        "id": 154184022,
        "sender_full_name": "nagisa",
        "timestamp": 1546446036
    },
    {
        "content": "<p><code>transmute_ref</code></p>",
        "id": 154185696,
        "sender_full_name": "RalfJ",
        "timestamp": 1546447514
    }
]