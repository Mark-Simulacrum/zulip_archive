[
    {
        "content": "<p>Hi everyone,</p>\n<p>A colleague and I were talking today about the tuple limitations currently in Rust, that you may only have 12 elements max, and that tuples of different lengths are effectively distinct types.</p>\n<p>I was wondering: is it therefore impossible to have a function/struct/... parametrised by <code>T</code> where <code>T</code> is a tuple of unspecified structure?</p>\n<p>Is this something you'd want to allow in the future? And if so, how would it be implemented?</p>\n<p>Thanks</p>",
        "id": 202804858,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1593783742
    },
    {
        "content": "<p>You can have an arbitrary number of elements, the trait impls in libcore just stop at 12. To extend this to arbitrary tuples would require some form of variadic generics.</p>",
        "id": 202804950,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593783837
    },
    {
        "content": "<p>OK, I didn't know that! I guess it has to do with the lack of allocation features in <code>core</code>.</p>\n<p>What about this part:</p>\n<blockquote>\n<p>is it therefore impossible to have a function/struct/... parametrised by T where T is a tuple of unspecified structure?</p>\n</blockquote>",
        "id": 202805068,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1593783918
    },
    {
        "content": "<p>Tuples aren't heap-allocated, this is just a limitation of the trait system</p>",
        "id": 202805261,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593784042
    },
    {
        "content": "<blockquote>\n<p>I guess it has to do with the lack of allocation features in core.</p>\n</blockquote>\n<p>It's not about allocation. Tuples generally inherit trait implementations from their members (e.g. <code>(T1, T2, T3)</code> is <code>Debug</code> if <code>T1</code> is <code>Debug</code>, <code>T2</code> is <code>Debug</code> and <code>T3</code> is <code>Debug</code>) and without variadic generics there's no way to provide those implementations for tuples of every size. The implementations in <code>core</code> stop at 12 as an arbitrary choice.</p>",
        "id": 202805306,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593784076
    },
    {
        "content": "<blockquote>\n<p>is it therefore impossible to have a function/struct/... parametrised by T where T is a tuple of unspecified structure?</p>\n</blockquote>\n<p>Of course, but only up to an arbitrary limit. You can define a trait and implement it for tuples of every size you want or need.</p>",
        "id": 202805383,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593784119
    },
    {
        "content": "<p>So I think you are saying it <em>is</em> possible? Can you show me?</p>\n<p>Suppose we have a function:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn f&lt;T&gt;(x: T) { ... }\n</code></pre></div>\n\n\n<p>And we want <code>f</code> to accept any tuple (and of any length), but reject anything not a tuple?</p>\n<p>I didn't think this was possible. How would you access the elements in a type-safe manner?</p>",
        "id": 202806154,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1593784640
    },
    {
        "content": "<p>The problem is the \"of any length\". That is not currently possible, for the same reason that the impls stop at tuples of size 12.</p>",
        "id": 202806556,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593784878
    },
    {
        "content": "<p>I see. Thank you!</p>",
        "id": 202806798,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1593785013
    },
    {
        "content": "<p>IIUC that would require const generics? Is that a use case of const generics?</p>",
        "id": 202806812,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593785035
    },
    {
        "content": "<p>Ah nevermind, that's tuples</p>",
        "id": 202806919,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593785089
    },
    {
        "content": "<p>If you want long tuples, you might be interested in <a href=\"https://docs.rs/frunk/0.3.1/frunk/hlist/index.html\">https://docs.rs/frunk/0.3.1/frunk/hlist/index.html</a>, a kind of type-level linked list</p>",
        "id": 202806976,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593785113
    },
    {
        "content": "<p>being generic over tuples would require some form of variadic generics</p>",
        "id": 202903325,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1593920571
    },
    {
        "content": "<p>I remember an RFC for variadic tuples that never made it to completion</p>",
        "id": 202912042,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1593938597
    },
    {
        "content": "<p>Maybe it’s worth someone picking it up again</p>",
        "id": 202912046,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1593938608
    },
    {
        "content": "<p>every once in a while someone tries again</p>",
        "id": 202925216,
        "sender_full_name": "eddyb",
        "timestamp": 1593961666
    },
    {
        "content": "<p>a VG RFC was <em>the very first issue</em> I made on the <code>rust-lang/rust</code> repo</p>",
        "id": 202925258,
        "sender_full_name": "eddyb",
        "timestamp": 1593961683
    },
    {
        "content": "<p>so that must've been somewhere in late 2013 / early 2014</p>",
        "id": 202925272,
        "sender_full_name": "eddyb",
        "timestamp": 1593961705
    },
    {
        "content": "<p>I even kind of tried to implement it once, before I knew enough about compiler internals :P</p>",
        "id": 202925290,
        "sender_full_name": "eddyb",
        "timestamp": 1593961746
    },
    {
        "content": "<p>I kind of don't see a path for a VG design to be <em>accepted</em></p>",
        "id": 202925310,
        "sender_full_name": "eddyb",
        "timestamp": 1593961789
    },
    {
        "content": "<p>any time soon</p>",
        "id": 202925357,
        "sender_full_name": "eddyb",
        "timestamp": 1593961818
    },
    {
        "content": "<p>maybe after type HRTB (<code>T: for&lt;X: Clone&gt; Trait&lt;X&gt;</code>) and generic closures? since those would allow a certain \"functional interface\" over tuples and make the nitty gritty details of how it's actually implemented, less important</p>",
        "id": 202925388,
        "sender_full_name": "eddyb",
        "timestamp": 1593961904
    },
    {
        "content": "<p>GATs would also help with certain things, like turning a type like <code>(X, Y, Z)</code> into <code>(&amp;'a X, &amp;'a Y, &amp;'a Z)</code> (by having <code>type Foo&lt;T&gt; = &amp;'a T;</code> in an <code>impl</code>)</p>",
        "id": 202925459,
        "sender_full_name": "eddyb",
        "timestamp": 1593962023
    },
    {
        "content": "<p>and you need stuff like that to express the type of some primitive operations that are largely unimplementable in user code without some kind of reflection and <code>unsafe</code> shenanigans</p>",
        "id": 202925506,
        "sender_full_name": "eddyb",
        "timestamp": 1593962069
    }
]