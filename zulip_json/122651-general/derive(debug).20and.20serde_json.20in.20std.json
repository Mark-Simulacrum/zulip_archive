[
    {
        "content": "<p>Hello, I had a question regarding how <code>{:?}</code> and <code>{:#?}</code> are displayed, in particular, I wanted to ask that is the behaviour of giving valid JSON output for <code>{:?}</code> intended and will it be retained in the future?</p>",
        "id": 200562605,
        "sender_full_name": "qedk",
        "timestamp": 1591890318
    },
    {
        "content": "<p>for context:<br>\n<code>{:?}</code> output</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">&quot;irc&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">&quot;topic&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;IRC&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;server&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;irc.freenode.net&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;nickname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;zuliptesting&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;channel&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#wikimedia-bots-testing&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;stream&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;goodbot&quot;</span><span class=\"p\">},</span> <span class=\"nt\">&quot;api&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">&quot;key&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;xxx&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;site&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;https://wikimedia.zulipchat.com&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;test1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;email&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;good-bot@zulipchat.com&quot;</span><span class=\"p\">}}</span>\n</code></pre></div>\n\n\n<p><code>{:#?}</code> output:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n    <span class=\"nt\">&quot;irc&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;server&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;irc.freenode.net&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;nickname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;zuliptesting&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;stream&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;goodbot&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;topic&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;IRC&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;channel&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;#wikimedia-bots-testing&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">&quot;api&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;site&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;https://wikimedia.zulipchat.com&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;test1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;key&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;xxx&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;email&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;good-bot@zulipchat.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 200562675,
        "sender_full_name": "qedk",
        "timestamp": 1591890356
    },
    {
        "content": "<p>The output is implementation-defined and may change between Rust versions</p>",
        "id": 200562881,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591890430
    },
    {
        "content": "<p>if you want JSON output the way to go is serde_json</p>",
        "id": 200562949,
        "sender_full_name": "simulacrum",
        "timestamp": 1591890471
    },
    {
        "content": "<p>for json output you probably want the <code>serde</code> crate and <code>serde_json</code></p>",
        "id": 200562957,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591890476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307289\">Poliorcetics</span> <a href=\"#narrow/stream/122651-general/topic/derive(debug)/near/200562957\">said</a>:</p>\n<blockquote>\n<p>for json output you probably want the <code>serde</code> crate and <code>serde_json\n</code></p>\n</blockquote>\n<p>I am fine with a json string and the std provides it alright, i just wanted to ask if it's intended, otherwise i'll write my own or use the defined behaviour</p>",
        "id": 200563099,
        "sender_full_name": "qedk",
        "timestamp": 1591890526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/derive(debug)/near/200562881\">said</a>:</p>\n<blockquote>\n<p>The output is implementation-defined and may change between Rust versions</p>\n</blockquote>\n<p>Implementation means the structure I'm calling it on, like \"HashMap\"?</p>",
        "id": 200563221,
        "sender_full_name": "qedk",
        "timestamp": 1591890579
    },
    {
        "content": "<p>It means \"it's not documented and you cannot rely on it\"</p>",
        "id": 200563362,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591890630
    },
    {
        "content": "<p>Well, not cannot, more \"should not\"</p>",
        "id": 200563395,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591890644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307289\">Poliorcetics</span> <a href=\"#narrow/stream/122651-general/topic/derive(debug)/near/200563362\">said</a>:</p>\n<blockquote>\n<p>It means \"it's not documented and you cannot rely on it\"</p>\n</blockquote>\n<p>Got it, thanks! I think it's a good implementation to retain (in any case). I don't have a hard and fast need so I'll consider writing my own solution later on. Thanks for the help, everyone <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 200563587,
        "sender_full_name": "qedk",
        "timestamp": 1591890726
    },
    {
        "content": "<p>No problem <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span><br>\nIf it's for a personal project a quick-and-dirty implementation is more than good enough, but if you need something bigger/more polished, <code>serde</code> is really really cool</p>",
        "id": 200563749,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591890810
    },
    {
        "content": "<p>serde_json should probably be put into std given how ubiquitous it is</p>",
        "id": 200563956,
        "sender_full_name": "qedk",
        "timestamp": 1591890891
    },
    {
        "content": "<p>I don't think so, mainly because it allows it to evolve without being constrained by the stability guarantees of the std</p>",
        "id": 200564044,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591890929
    },
    {
        "content": "<p>there's only so much a json module can do (or should do rather)</p>",
        "id": 200564166,
        "sender_full_name": "qedk",
        "timestamp": 1591890963
    },
    {
        "content": "<p>Like, if a new JSON standard comes out tomorrow, serde can just update and publish a new version without a 6 weeks beta cycle</p>",
        "id": 200564262,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591890977
    },
    {
        "content": "<p><strong>and</strong> without breaking any previously working code with the new version</p>",
        "id": 200564390,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891005
    },
    {
        "content": "<p>i don't think that's an issue because after the RFC adoption is always gradual and quite often more than 6 weeks</p>",
        "id": 200564447,
        "sender_full_name": "qedk",
        "timestamp": 1591891032
    },
    {
        "content": "<p>backwards compatibility is nice, but its cost is infinite, so the less there is in the std, the less the maintainers have to think about</p>",
        "id": 200564541,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891078
    },
    {
        "content": "<p>Python has a saying \"the std is where library go to die\" and it's easily applicable to a lot of other languages</p>",
        "id": 200564654,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891117
    },
    {
        "content": "<p>Rust has managed to avoid that IMO, which is a very good thing I think</p>",
        "id": 200564728,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891147
    },
    {
        "content": "<p>I think it's a fruitful std, the issue is with Python's PEP system being so slow to adapt to changes</p>",
        "id": 200564795,
        "sender_full_name": "qedk",
        "timestamp": 1591891175
    },
    {
        "content": "<p>Also <code>serde_json</code> is far from complete. It lacks <code>no_std</code> support, the very structure of its <code>Value</code> implies deeply nsted recursive destructor calls, and it can not do stream deserialization or async serialization (correct me if I did miss a release).</p>",
        "id": 200564807,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1591891182
    },
    {
        "content": "<p>solutions in std are not for 100% use-cases but to work on a limited of use-cases perfectly (such as with std structures)</p>",
        "id": 200565048,
        "sender_full_name": "qedk",
        "timestamp": 1591891270
    },
    {
        "content": "<p>maybe serde is not there yet (i don't know) but if ever, it would probably make a good addition because it's used widely, not that it should be in std but i'd like to see ubiquitous needs being added to std</p>",
        "id": 200565282,
        "sender_full_name": "qedk",
        "timestamp": 1591891333
    },
    {
        "content": "<p>That's an opinion but I don't think JSON parsing should be added to the std over any other description language parsing</p>",
        "id": 200565345,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891376
    },
    {
        "content": "<p>If JSON is added, then it will be BSON, then TOML, then something else</p>",
        "id": 200565381,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891395
    },
    {
        "content": "<p>.json is the only universal format tbh (hence why it's used everywhere), bson/yaml/toml are not even close</p>",
        "id": 200565451,
        "sender_full_name": "qedk",
        "timestamp": 1591891434
    },
    {
        "content": "<p>The cost is very very high and cargo allows us to bypass the pains that exist in other languages about external libraries</p>",
        "id": 200565546,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891463
    },
    {
        "content": "<p>I'd rather see something added to <code>crates.io</code> or registries and cargo that make the difference between inclusion in <code>std</code> and crates outside matter less.</p>",
        "id": 200565555,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1591891467
    },
    {
        "content": "<p>But this discussion is not about <code>derive(debug)</code> anymore</p>",
        "id": 200565606,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891488
    },
    {
        "content": "<p>A new topic would be better</p>",
        "id": 200565624,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1591891500
    },
    {
        "content": "<p>yeah xD now it's about serde_json being into std</p>",
        "id": 200565638,
        "sender_full_name": "qedk",
        "timestamp": 1591891505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> <a href=\"#narrow/stream/122651-general/topic/derive(debug).20and.20serde_json.20in.20std/near/200565555\">said</a>:</p>\n<blockquote>\n<p>I'd rather see something added to <code>crates.io</code> or registries and cargo that make the difference between inclusion in <code>std</code> and crates outside matter less.</p>\n</blockquote>\n<p>like default installation which is more than std?</p>",
        "id": 200565743,
        "sender_full_name": "qedk",
        "timestamp": 1591891554
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200567521,
        "sender_full_name": "qedk",
        "timestamp": 1591892362
    }
]