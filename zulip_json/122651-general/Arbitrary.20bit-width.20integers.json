[
    {
        "content": "<p>It doesn't look like arbitrary bit-width integers have ever been discussed for Rust. Has anyone considered adding them to Rust? I think they have some nice applications in some situations although often niche. LLVM supports them and I think they might have some performance advantages in some cases.</p>",
        "id": 245880910,
        "sender_full_name": "ruster",
        "timestamp": 1626207304
    },
    {
        "content": "<p>what perf advantages do they have?</p>",
        "id": 245881396,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626207599
    },
    {
        "content": "<p>They've been thoroughly discussed: <a href=\"https://github.com/rust-lang/rfcs/pull/2581\">https://github.com/rust-lang/rfcs/pull/2581</a></p>",
        "id": 245882312,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626208081
    },
    {
        "content": "<p>So depending on the environment these may be software-emulated but I believe there is also cases where there might be some hardware support to some extent for the types and using them instead of handling overflow logic manually will most likely often result in better codegen. I'm discussing this right now with someone on a Zig server (Zig has arbitrary bit-width integers) and we found out that the custom bit-width integer works better than manually doing the branch. Here's an actual use case: Imagine you have a 4x4 grid of apps and you want to be able to select through it in all four directions. We also want to jump back to the first or last item if we reached the end of either side of the grid.<br>\nSo for this we could have <code>x</code> and <code>y</code> variables of type <code>u2</code> to store the selected grid cell in. <code>u2</code> offers a range of 0 to 3 and that fits for our 4x4 grid so we simply need the code to increment <code>x</code> and <code>y</code> depending on the direction key pressed. The overflow and underflow logic does not need to be manually handled with <code>if</code>s (to set the axis to <code>0</code> or <code>3</code> which is usually pretty ugly to do). The <code>u2</code> does that naturally and that's one performance advantage. Of course that's just one thing. Here's another thing I read: <a href=\"https://www.theregister.com/2020/04/24/llvm_project_adds_support_for/\">https://www.theregister.com/2020/04/24/llvm_project_adds_support_for/</a><br>\nFor FPGAs it's apparently useful too</p>",
        "id": 245882372,
        "sender_full_name": "ruster",
        "timestamp": 1626208094
    },
    {
        "content": "<p>I am very much in support of adding generic integers, I'm currently writing a Rust-based Hardware Description Language, and I had to write my own generic integer types: <a href=\"https://salsa.debian.org/Kazan-team/rust-hdl/-/blob/master/src/values/integer.rs\">https://salsa.debian.org/Kazan-team/rust-hdl/-/blob/master/src/values/integer.rs</a></p>",
        "id": 245883053,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626208264
    },
    {
        "content": "<p>wouldn't arithmetic on them be lowered to <code>(a + b) &amp; MASK</code> in any case?</p>",
        "id": 245883096,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626208288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span>  Hmm, I see, I will give that a read. It seems to talk exclusively about custom bit sizes right? What about custom integer ranges? You see, if I wanted my menu grid to be 5x5 instead, I wouldn't have any fitting integer size available to choose from, the next one would be <code>u3</code> where the range goes up to 7, which is too big. I just read about this issue for Zig where they want custom <em>ranges</em>, not just <em>bits</em>: <a href=\"https://github.com/ziglang/zig/issues/3806\">https://github.com/ziglang/zig/issues/3806</a><br>\nHas that ever been discussed for Rust?</p>",
        "id": 245883106,
        "sender_full_name": "ruster",
        "timestamp": 1626208291
    },
    {
        "content": "<p>yes</p>",
        "id": 245883237,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626208345
    },
    {
        "content": "<p>Can you link an issue? Is it that issue?</p>",
        "id": 245883299,
        "sender_full_name": "ruster",
        "timestamp": 1626208379
    },
    {
        "content": "<p>for example here <a href=\"https://github.com/rust-lang/rfcs/issues/671\">https://github.com/rust-lang/rfcs/issues/671</a></p>",
        "id": 245883315,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626208392
    },
    {
        "content": "<p>Oh, but it doesn't seem like <a href=\"https://github.com/rust-lang/rfcs/pull/2581\">https://github.com/rust-lang/rfcs/pull/2581</a> is entirely dead, it has some discussion within in the last 26 days so maybe there is still hope</p>",
        "id": 245883359,
        "sender_full_name": "ruster",
        "timestamp": 1626208422
    },
    {
        "content": "<p>Very nice to see</p>",
        "id": 245883490,
        "sender_full_name": "ruster",
        "timestamp": 1626208476
    },
    {
        "content": "<p>yeah, it's postponed due to waiting on const-generics: <a href=\"https://github.com/rust-lang/rfcs/pull/2581#issuecomment-435233740\">https://github.com/rust-lang/rfcs/pull/2581#issuecomment-435233740</a></p>",
        "id": 245883700,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626208580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Arbitrary.20bit-width.20integers/near/245883096\">said</a>:</p>\n<blockquote>\n<p>wouldn't arithmetic on them be lowered to <code>(a + b) &amp; MASK</code> in any case?</p>\n</blockquote>\n<p>improved data locality can be a solid win certain situations because Modern CPU &gt; IO speed / Memory bandwidth</p>\n<p>packing structs to single usize is something I intend to explore after const eval &amp; generics land beta.</p>\n<p>Language wise, <code>let x = 1u4;</code> being valid code would be nice.</p>",
        "id": 245883964,
        "sender_full_name": "Bot+",
        "timestamp": 1626208718
    },
    {
        "content": "<p>Even if LLVM might still just pad those custom integer bit widths to natural ones (8, 16, 32 et al), it can potentially still give great hints to LLVM about the boundaries and allow it to do some more optimizations</p>",
        "id": 245884041,
        "sender_full_name": "ruster",
        "timestamp": 1626208755
    },
    {
        "content": "<p>yeah, but that's another can of worms</p>",
        "id": 245884087,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626208778
    },
    {
        "content": "<p>it would be cool if data could be packed into bitfields somehow</p>",
        "id": 245884189,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626208807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Arbitrary.20bit-width.20integers/near/245883096\">said</a>:</p>\n<blockquote>\n<p>wouldn't arithmetic on them be lowered to <code>(a + b) &amp; MASK</code> in any case?</p>\n</blockquote>\n<p>only for unsigned ints or cases where the sign-extended bits aren't needed, signed ints would lower to a sign-extension</p>",
        "id": 245884839,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626209115
    }
]