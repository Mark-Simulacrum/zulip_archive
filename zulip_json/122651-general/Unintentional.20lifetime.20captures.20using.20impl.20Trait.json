[
    {
        "content": "<p>This code returns an <code>impl Trait</code> that completely owns the value, but the error indicates that the argument's lifetime is being captured as well. Is there a way to avoid the unintended capture?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">make_debug</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">42</span><span class=\"k\">u8</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;value&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">make_debug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0597]: `value` does not live long enough\n --&gt; src/lib.rs:7:16\n  |\n5 | fn test() -&gt; impl std::fmt::Debug {\n  |              -------------------- opaque type requires that `value` is borrowed for `&#39;static`\n6 |     let value = &quot;value&quot;.to_string();\n7 |     make_debug(&amp;value)\n  |                ^^^^^^ borrowed value does not live long enough\n8 | }\n  | - `value` dropped here while still borrowed\n</pre></div>",
        "id": 170565978,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562782807
    },
    {
        "content": "<p>there's at least an issue for this somewhere that maybe contains some hints...</p>",
        "id": 170644713,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859410
    },
    {
        "content": "<p>ah I misremembered, that's not the problem I ran into once</p>",
        "id": 170644798,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I think changing the return type to <code>impl Debug + 'static</code> should help</p>",
        "id": 170644888,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859494
    },
    {
        "content": "<p>hm, seems like it does not</p>",
        "id": 170644937,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859533
    },
    {
        "content": "<p>that's odd?</p>",
        "id": 170644940,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859535
    },
    {
        "content": "<p>Right? :-)</p>",
        "id": 170644953,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562859542
    },
    {
        "content": "<p>I would try <code>let v = make_debug(&amp;value); v</code> myself, but not sure</p>",
        "id": 170644972,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859556
    },
    {
        "content": "<p>ah I guess that's a different bug</p>",
        "id": 170644996,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'm also pretty sure that the original uses <code>'static</code> implicitly: <em>opaque type requires that <code>value</code> is borrowed for <code>'static</code></em></p>",
        "id": 170645158,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562859690
    },
    {
        "content": "<p>it should say \"whatever type actually is behind this <code>impl Trait</code> outlives static\"</p>",
        "id": 170645293,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859768
    },
    {
        "content": "<p>aka \"didnt capture any non-static references\"</p>",
        "id": 170645301,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859777
    },
    {
        "content": "<p>which is what we want here</p>",
        "id": 170645304,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859780
    },
    {
        "content": "<p>I feel like this might actually be intentional in some way, but I'm not sure</p>",
        "id": 170645500,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859912
    },
    {
        "content": "<p>It certainly isn't great from a usability perspective</p>",
        "id": 170645510,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859921
    },
    {
        "content": "<p>but I seem to recall some discussion around impl trait today basically \"capturing\" all input lifetimes</p>",
        "id": 170645525,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859937
    },
    {
        "content": "<p>The original SO question points out that changing to <code>make_debug&lt;T&gt;(_: &amp;T)</code> allows it to work</p>",
        "id": 170645546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562859955
    },
    {
        "content": "<p>right -- I think that's connected to the lifetime becoming \"visible\"</p>",
        "id": 170645604,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859977
    },
    {
        "content": "<p>And <code>fn make_debug&lt;T&gt;(_: T) -&gt; Box&lt;dyn std::fmt::Debug&gt;</code> also works</p>",
        "id": 170645623,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562859993
    },
    {
        "content": "<p>neither \"hide\" the lifetime in T though</p>",
        "id": 170645678,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860059
    },
    {
        "content": "<p>Why doesn't the <code>Box</code> version \"hide\" it?</p>",
        "id": 170645751,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562860106
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">#42940</a></p>",
        "id": 170645761,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860117
    },
    {
        "content": "<p>Yeah, that's definitely the issue I was thinking about</p>",
        "id": 170645824,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^ in case you're interested</p>",
        "id": 170645882,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860209
    },
    {
        "content": "<p>Doesn't look like the one workaround mentioned applies here, unless I misunderstood:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DebugStatic</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DebugStatic</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">make_debug</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">DebugStatic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"k\">u8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">DebugStatic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;value&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">make_debug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 170646095,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562860415
    },
    {
        "content": "<p>ah, do you have a link to the comment?</p>",
        "id": 170646184,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/issues/42940#issuecomment-452756105\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940#issuecomment-452756105\">https://github.com/rust-lang/rust/issues/42940#issuecomment-452756105</a></p>",
        "id": 170646907,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562861001
    },
    {
        "content": "<p>hm -- so I think that looks slightly different, since it's nested impl trait</p>",
        "id": 170647000,
        "sender_full_name": "simulacrum",
        "timestamp": 1562861072
    },
    {
        "content": "<p>I suspect that was like, actually a bug, whereas the behavior we're seeing is intentional</p>",
        "id": 170647043,
        "sender_full_name": "simulacrum",
        "timestamp": 1562861117
    },
    {
        "content": "<p>(or, currently intentional, I think)</p>",
        "id": 170647063,
        "sender_full_name": "simulacrum",
        "timestamp": 1562861138
    },
    {
        "content": "<p>but how is it not a bug if a type explicitly marked <code>'static</code> is not static?</p>",
        "id": 170650158,
        "sender_full_name": "RalfJ",
        "timestamp": 1562863490
    },
    {
        "content": "<p>hm -- yeah, not sure</p>",
        "id": 170654931,
        "sender_full_name": "simulacrum",
        "timestamp": 1562866893
    },
    {
        "content": "<p>that might be abug</p>",
        "id": 170654936,
        "sender_full_name": "simulacrum",
        "timestamp": 1562866897
    },
    {
        "content": "<p>but I think the idea of capturing T's lifetime is probably not one</p>",
        "id": 170654952,
        "sender_full_name": "simulacrum",
        "timestamp": 1562866911
    }
]