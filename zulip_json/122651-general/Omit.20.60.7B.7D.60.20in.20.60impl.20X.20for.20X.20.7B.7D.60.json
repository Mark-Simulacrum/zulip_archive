[
    {
        "content": "<p>To accept only specific types for the parameter of a function you might do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>impl X for X {}</code> pattern is definitely common. Has it ever been considered to allow writing <code>impl X for X;</code> because there's no body?</p>",
        "id": 246334171,
        "sender_full_name": "ruster",
        "timestamp": 1626541858
    },
    {
        "content": "<p>Same for <code>trait A {}</code> I suppose. <code>struct A;</code> is allowed but not <code>trait A;</code>, why is that? Just because it's less common?</p>",
        "id": 246334258,
        "sender_full_name": "ruster",
        "timestamp": 1626541983
    },
    {
        "content": "<p><code>struct A;</code> is not a shorthand for <code>struct A {}</code>, it behaves differently</p>",
        "id": 246334824,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626542948
    },
    {
        "content": "<p>similarly, <code>fn f();</code> is not a shorthand for <code>fn f() {}</code></p>",
        "id": 246334827,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626542973
    },
    {
        "content": "<p>so there's the possibility of causing some confusion when adding similar syntax that <em>does</em> mean the same</p>",
        "id": 246334873,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626543011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334827\">said</a>:</p>\n<blockquote>\n<p>similarly, <code>fn f();</code> is not a shorthand for <code>fn f() {}</code></p>\n</blockquote>\n<p>But that doesn't even exist does it?</p>",
        "id": 246334883,
        "sender_full_name": "ruster",
        "timestamp": 1626543055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334873\">said</a>:</p>\n<blockquote>\n<p>so there's the possibility of causing some confusion when adding similar syntax that <em>does</em> mean the same</p>\n</blockquote>\n<p>That is true</p>",
        "id": 246334890,
        "sender_full_name": "ruster",
        "timestamp": 1626543068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334824\">said</a>:</p>\n<blockquote>\n<p><code>struct A;</code> is not a shorthand for <code>struct A {}</code>, it behaves differently</p>\n</blockquote>\n<p>What is the difference?</p>",
        "id": 246334893,
        "sender_full_name": "ruster",
        "timestamp": 1626543079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"376093\">ruster</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334883\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334827\">said</a>:</p>\n<blockquote>\n<p>similarly, <code>fn f();</code> is not a shorthand for <code>fn f() {}</code></p>\n</blockquote>\n<p>But that doesn't even exist does it?</p>\n</blockquote>\n<p>It exists in traits, <code>fn f() {}</code> defines a default implementation of <code>f</code> while <code>fn f();</code> requires all impls to provide an implementation of <code>f</code>.</p>",
        "id": 246334966,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626543198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"376093\">ruster</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334893\">said</a>:</p>\n<blockquote>\n<p>What is the difference?</p>\n</blockquote>\n<p><code>struct A;</code> is like: <code>struct A {} const A: A = A {};</code></p>",
        "id": 246334969,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626543202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334966\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376093\">ruster</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334883\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334827\">said</a>:</p>\n<blockquote>\n<p>similarly, <code>fn f();</code> is not a shorthand for <code>fn f() {}</code></p>\n</blockquote>\n<p>But that doesn't even exist does it?</p>\n</blockquote>\n<p>It exists in traits, <code>fn f() {}</code> defines a default implementation of <code>f</code> while <code>fn f();</code> requires all impls to provide an implementation of <code>f</code>.</p>\n</blockquote>\n<p>Oh, right, I thought you were talking about the top level</p>",
        "id": 246335265,
        "sender_full_name": "ruster",
        "timestamp": 1626543685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334969\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376093\">ruster</span> <a href=\"#narrow/stream/122651-general/topic/Omit.20.60.7B.7D.60.20in.20.60impl.20X.20for.20X.20.7B.7D.60/near/246334893\">said</a>:</p>\n<blockquote>\n<p>What is the difference?</p>\n</blockquote>\n<p><code>struct A;</code> is like: <code>struct A {} const A: A = A {};</code></p>\n</blockquote>\n<p>Interesting.</p>",
        "id": 246335338,
        "sender_full_name": "ruster",
        "timestamp": 1626543801
    }
]