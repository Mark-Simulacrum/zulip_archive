[
    {
        "content": "<p>Does anyone know why I always see:</p>\n<div class=\"codehilite\"><pre><span></span>warning: due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n\nwarning: ignoring --out-dir flag due to -o flag\n\nwarning: ignoring -C extra-filename flag due to -o flag\n</pre></div>\n\n\n<p>and no MIR output when trying to output MIR  from the playground?</p>",
        "id": 135255704,
        "sender_full_name": "davidtwco",
        "timestamp": 1538747179
    },
    {
        "content": "<p>Only happens when there's a compilation failure.</p>",
        "id": 135255727,
        "sender_full_name": "davidtwco",
        "timestamp": 1538747223
    },
    {
        "content": "<p>It shouldn't be only when there's a failure...</p>\n<p>It's because of the way that the command line is constructed. Lemme see if I can rustle it up.</p>",
        "id": 135256147,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538747716
    },
    {
        "content": "<p>Well, the only time I run into it is when there's a failure.</p>",
        "id": 135256217,
        "sender_full_name": "davidtwco",
        "timestamp": 1538747790
    },
    {
        "content": "<p>I often try get the MIR output for a failing test case on the playground so I can understand what's happening better - it's quicker than writing it to a file and dumping it locally.</p>",
        "id": 135256231,
        "sender_full_name": "davidtwco",
        "timestamp": 1538747820
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Compilation command is &quot;docker&quot; &quot;run&quot; &quot;--rm&quot; &quot;--cap-drop=ALL&quot; &quot;--cap-add=DAC_OVERRIDE&quot; &quot;--security-opt=no-new-privileges&quot; &quot;--workdir&quot; &quot;/playground&quot; &quot;--net&quot; &quot;none&quot; &quot;--memory&quot; &quot;256m&quot; &quot;--memory-swap&quot; &quot;320m&quot; &quot;--env&quot; &quot;PLAYGROUND_TIMEOUT=10&quot; &quot;--pids-limit&quot; &quot;512&quot; &quot;--volume&quot; &quot;/var/folders/_b/d4_bd15x7s5g99cjvyhpw26w0000gp/T/33433498d126482c8c126597d9eb9c98:/playground/src/main.rs&quot; &quot;--volume&quot; &quot;/var/folders/_b/d4_bd15x7s5g99cjvyhpw26w0000gp/T/9d2b307dc4d9471f890629a2bca5f037:/playground-result&quot; &quot;rust-stable&quot; &quot;cargo&quot; &quot;rustc&quot; &quot;--&quot; &quot;-o&quot; &quot;/playground-result/compilation&quot; &quot;--emit=mir&quot;\n</pre></div>",
        "id": 135256458,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748046
    },
    {
        "content": "<p>So <code>cargo rustc -- -o /playground-result/compilation --emit=mir</code></p>",
        "id": 135256484,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748092
    },
    {
        "content": "<p>But I see it in success cases, like <code>fn example() {}</code>:</p>\n<div class=\"codehilite\"><pre><span></span>Standard Error\n   Compiling playground v0.0.1 (file:///playground)\nwarning: due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n\nwarning: ignoring --out-dir flag due to -o flag\n\nwarning: ignoring -C extra-filename flag due to -o flag\n\nwarning: function is never used: `example`\n --&gt; src/lib.rs:1:1\n  |\n1 | fn example() {}\n  | ^^^^^^^^^^^^\n  |\n  = note: #[warn(dead_code)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.51s\nResult\n// WARNING: This output format is intended for human consumers only\n// and is subject to change without notice. Knock yourself out.\nfn example() -&gt; (){\n    let mut _0: ();                      // return place\n\n    bb0: {\n        return;                          // bb0[0]: scope 0 at src/lib.rs:1:16: 1:16\n    }\n}\n</pre></div>",
        "id": 135256601,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748194
    },
    {
        "content": "<p>IIRC, it's because Cargo also specifies an output directory, and then we override it.</p>",
        "id": 135256622,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748239
    },
    {
        "content": "<p>Yeah, it works in success cases. When I'm working on diagnostics, it is never success cases, so every so often I forget that and try it on playground and end up needing to do it locally which is more annoying.</p>",
        "id": 135256689,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748290
    },
    {
        "content": "<p>Oh! So your real question is why is there no output? I was misled by you asking about the warning messages.</p>",
        "id": 135256725,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748344
    },
    {
        "content": "<p>I guess yeah.</p>",
        "id": 135256732,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748356
    },
    {
        "content": "<p>It'd be real helpful if the MIR was output regardless of success or failure.</p>",
        "id": 135256782,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748376
    },
    {
        "content": "<p>Well, in cases where it gets to the point in the compiler where that is generated.</p>",
        "id": 135256786,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748385
    },
    {
        "content": "<p>Is MIR actually output when the compiler fails (and when using those stable arguments)?</p>",
        "id": 135256828,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748456
    },
    {
        "content": "<p>I have no idea about stable arguments, I only ever use <code>-Z dump-mir=all</code>.</p>",
        "id": 135256844,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748475
    },
    {
        "content": "<p>Having nightly-only logic is one of the more painful parts of the playground (and expressing that difference in easily-digestible terms in the UI).</p>",
        "id": 135256919,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748564
    },
    {
        "content": "<p>you got a small example of something that should generate MIR but the playground doesn't show it?</p>",
        "id": 135256985,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538748634
    },
    {
        "content": "<p>I've got <a href=\"https://play.rust-lang.org/?gist=e882b4c581c625bb27ad9c7c1f01d658&amp;version=nightly&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=e882b4c581c625bb27ad9c7c1f01d658&amp;version=nightly&amp;mode=debug&amp;edition=2015\">this example</a> - it's a slightly modified test case of an issue I'm tackling now.</p>",
        "id": 135257011,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748692
    },
    {
        "content": "<p>Running that with <code>-Z mir-dump=all</code> gives a folder with a dozen or so files in <code>mir_dump</code>.</p>",
        "id": 135257068,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748730
    },
    {
        "content": "<p>I know that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has mused that they'd like to have <em>all</em> of those shown in the playground</p>",
        "id": 135257861,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538749546
    }
]