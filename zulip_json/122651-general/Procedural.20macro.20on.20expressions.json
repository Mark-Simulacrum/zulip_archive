[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/procedural.20macro.20on.20expression/near/226297536\">said</a>:</p>\n<blockquote>\n<p>Any idea/RFC for procedural macro on expressions? For example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[invariant(...)]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 226323313,
        "sender_full_name": "kentrixy",
        "timestamp": 1613334668
    },
    {
        "content": "<p>yes: <a href=\"https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#stabilizing-function-like-procedural-macros-in-expressions-patterns-and-statements\">https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#stabilizing-function-like-procedural-macros-in-expressions-patterns-and-statements</a></p>",
        "id": 226323370,
        "sender_full_name": "oliver",
        "timestamp": 1613334779
    },
    {
        "content": "<p>in short <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 226323404,
        "sender_full_name": "oliver",
        "timestamp": 1613334824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226323370\">said</a>:</p>\n<blockquote>\n<p>yes: <a href=\"https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#stabilizing-function-like-procedural-macros-in-expressions-patterns-and-statements\">https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#stabilizing-function-like-procedural-macros-in-expressions-patterns-and-statements</a></p>\n</blockquote>\n<p>Thanks. But does this apply to attribute marcos? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[proc_macro_attribute]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">invariant</span><span class=\"p\">(</span><span class=\"n\">_attr</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">item</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226323910,
        "sender_full_name": "kentrixy",
        "timestamp": 1613335579
    },
    {
        "content": "<p>like this: <a href=\"https://github.com/rust-lang/rust/pull/80689\">https://github.com/rust-lang/rust/pull/80689</a>?</p>",
        "id": 226324235,
        "sender_full_name": "oliver",
        "timestamp": 1613336001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226324235\">said</a>:</p>\n<blockquote>\n<p>like this: <a href=\"https://github.com/rust-lang/rust/pull/80689\">https://github.com/rust-lang/rust/pull/80689</a>?</p>\n</blockquote>\n<p>I think this works to an extend, essential what I am looking for is for a attribute/macro to capture the next block. Eg: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[some_attr]</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_stuff</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[proc_macro_attribute]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">some_attr</span><span class=\"p\">(</span><span class=\"n\">args</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// input == TokenStream of the while block</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But I suppose it is deduceable with some for information for example span of the attribute usage?</p>",
        "id": 226326253,
        "sender_full_name": "kentrixy",
        "timestamp": 1613338874
    },
    {
        "content": "<p>I've never seen anything like that before</p>",
        "id": 226326660,
        "sender_full_name": "oliver",
        "timestamp": 1613339462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326660\">said</a>:</p>\n<blockquote>\n<p>I've never seen anything like that before</p>\n</blockquote>\n<p>Would you think that is something makes sense/possible? My use case here is to \"annotate\" a block of code and process them</p>",
        "id": 226326821,
        "sender_full_name": "kentrixy",
        "timestamp": 1613339710
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/15701\">https://github.com/rust-lang/rust/issues/15701</a></p>",
        "id": 226326882,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613339788
    },
    {
        "content": "<p>i know it's been suggested beore for stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[likely]</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226326908,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613339863
    },
    {
        "content": "<p>and stuff like #[allow(...)] works this way i believe</p>",
        "id": 226327177,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613340044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326821\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326660\">said</a>:</p>\n<blockquote>\n<p>I've never seen anything like that before</p>\n</blockquote>\n<p>Would you think that is something makes sense/possible? My use case here is to \"annotate\" a block of code and process them</p>\n</blockquote>\n<p>it's not a very explicit approach is it?</p>",
        "id": 226327349,
        "sender_full_name": "oliver",
        "timestamp": 1613340093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226327349\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326821\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326660\">said</a>:</p>\n<blockquote>\n<p>I've never seen anything like that before</p>\n</blockquote>\n<p>Would you think that is something makes sense/possible? My use case here is to \"annotate\" a block of code and process them</p>\n</blockquote>\n<p>it's not a very explicit approach is it?</p>\n</blockquote>\n<p>What do you mean by that?</p>",
        "id": 226328491,
        "sender_full_name": "kentrixy",
        "timestamp": 1613340579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326882\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/rust-lang/rust/issues/15701\">https://github.com/rust-lang/rust/issues/15701</a></p>\n</blockquote>\n<p>Thanks, I think that is the issue I am looking for.</p>",
        "id": 226328681,
        "sender_full_name": "kentrixy",
        "timestamp": 1613340735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226328491\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226327349\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326821\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326660\">said</a>:</p>\n<blockquote>\n<p>I've never seen anything like that before</p>\n</blockquote>\n<p>Would you think that is something makes sense/possible? My use case here is to \"annotate\" a block of code and process them</p>\n</blockquote>\n<p>it's not a very explicit approach is it?</p>\n</blockquote>\n<p>What do you mean by that?</p>\n</blockquote>\n<p>I think in terms of the compiler locality of reasoning refers to being explicit as<br>\nbeing able to reason about code without having to reference other locations</p>",
        "id": 226342723,
        "sender_full_name": "oliver",
        "timestamp": 1613360938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226342723\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226328491\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226327349\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326821\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/122651-general/topic/Procedural.20macro.20on.20expressions/near/226326660\">said</a>:</p>\n<blockquote>\n<p>I've never seen anything like that before</p>\n</blockquote>\n<p>Would you think that is something makes sense/possible? My use case here is to \"annotate\" a block of code and process them</p>\n</blockquote>\n<p>it's not a very explicit approach is it?</p>\n</blockquote>\n<p>What do you mean by that?</p>\n</blockquote>\n<p>I think in terms of the compiler locality of reasoning refers to being explicit as<br>\nbeing able to reason about code without having to reference other locations</p>\n</blockquote>\n<p>Sorry if I misunderstood, but isn't an attribute directly on a statement/expression block explicit enough for the compiler?</p>",
        "id": 226347012,
        "sender_full_name": "kentrixy",
        "timestamp": 1613367341
    },
    {
        "content": "<p>To me, it seems it mostly is. However, consider <code>#[likely] if x == f(y, a == b)</code>; what does the attribute apply to? Sure, it's the outer expression. But you might also want to add one to the inner <code>a == b</code> comparison, like in <code>f(y, #[likely a == b)</code>.</p>",
        "id": 226354834,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613376784
    },
    {
        "content": "<p>Other than this, proc macro attributes on statements make sense to me.</p>",
        "id": 226354858,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613376800
    },
    {
        "content": "<p>For pattern matching, <code>if let #[likely] Some(x) = f()</code> would be more clear to the compiler (and could work for <code>match</code>, too)</p>",
        "id": 226355092,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613376967
    },
    {
        "content": "<p>FWIW, this is possible in today Rust using the pre-processor pattern, as showcased by <a href=\"https://docs.rs/with_locals\">https://docs.rs/with_locals</a> tracking call-sites <code>#[with] let x = foo();</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[with]</span><span class=\"w\"> </span><span class=\"c1\">// --(preprocessor)-+ sees</span>\n<span class=\"k\">fn</span> <span class=\"nf\">wrapping_function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// |</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"c1\">//                  |</span>\n<span class=\"w\">    </span><span class=\"cp\">#[with]</span><span class=\"w\"> </span><span class=\"c1\">// &lt;--(marker)--+</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226381390,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613394412
    }
]