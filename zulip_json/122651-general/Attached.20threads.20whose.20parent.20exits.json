[
    {
        "content": "<p>Does anyone know if POSIX (or other concurrency APIs) say anything about what happens when a thread is attached to a parent thread, and the parent thread exits first? I tried to find out from the docs but didn't find a clear statement. Maybe I was looking in the wrong place.<br>\n(See <a href=\"https://github.com/rust-lang/miri/pull/1284#discussion_r400812567\" title=\"https://github.com/rust-lang/miri/pull/1284#discussion_r400812567\">here for the context for this question</a>.)<br>\nCc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> who originally mentioned this.</p>",
        "id": 194607822,
        "sender_full_name": "RalfJ",
        "timestamp": 1587315682
    },
    {
        "content": "<p>I may have remembered it wrong. At least exiting from the main thread kills the other threads though.</p>",
        "id": 194608348,
        "sender_full_name": "bjorn3",
        "timestamp": 1587316369
    },
    {
        "content": "<p>Except when calling <code>pthread_exit</code>, in which case the other threads continue.</p>",
        "id": 194608516,
        "sender_full_name": "bjorn3",
        "timestamp": 1587316591
    },
    {
        "content": "<p><a href=\"https://computing.llnl.gov/tutorials/pthreads/#CreatingThreads\" title=\"https://computing.llnl.gov/tutorials/pthreads/#CreatingThreads\">https://computing.llnl.gov/tutorials/pthreads/#CreatingThreads</a> Link: <a href=\"https://computing.llnl.gov/tutorials/pthreads/#CreatingThreads\" title=\"https://computing.llnl.gov/tutorials/pthreads/#CreatingThreads\">https://computing.llnl.gov/tutorials/pthreads/#CreatingThreads</a></p>",
        "id": 194608571,
        "sender_full_name": "bjorn3",
        "timestamp": 1587316676
    },
    {
        "content": "<p>lucky enough <code>pthread_exit</code> is not part of this proposal :D</p>",
        "id": 194608850,
        "sender_full_name": "RalfJ",
        "timestamp": 1587317161
    },
    {
        "content": "<p>also Cc <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span></p>",
        "id": 194609048,
        "sender_full_name": "RalfJ",
        "timestamp": 1587317419
    },
    {
        "content": "<p>hm so these \"resources\" that need to be freed, does that mean if we do not detach a thread and do not join it there is a leak? could we make miri detect that leak?</p>",
        "id": 194609060,
        "sender_full_name": "RalfJ",
        "timestamp": 1587317452
    },
    {
        "content": "<p>also is the parent thread relationship used for <em>anything</em>? doesnt seem like it, any thread can join any other thread I think...</p>",
        "id": 194609078,
        "sender_full_name": "RalfJ",
        "timestamp": 1587317482
    },
    {
        "content": "<p>however, \" It is a logical error to attempt multiple joins on the same thread. \"</p>",
        "id": 194609086,
        "sender_full_name": "RalfJ",
        "timestamp": 1587317502
    },
    {
        "content": "<p>we should catch that as UB</p>",
        "id": 194609089,
        "sender_full_name": "RalfJ",
        "timestamp": 1587317505
    },
    {
        "content": "<p>A <code>pthread_t</code> join handle isn't \"owned\" by any particular thread in pthreads. It can be freely sent from one thread to another.</p>",
        "id": 194611594,
        "sender_full_name": "Amanieu",
        "timestamp": 1587321058
    },
    {
        "content": "<p>Calling <code>pthread_detach</code> or <code>pthread_join</code> effectively \"consumes\" the <code>pthread_t</code>, it becomes invalid afterwards.</p>",
        "id": 194611614,
        "sender_full_name": "Amanieu",
        "timestamp": 1587321102
    },
    {
        "content": "<p>Exiting from <code>main()</code> will kill all other threads as if <code>exit()</code> was called. However if the main thread calls <code>pthread_exit</code> then other threads continue running.</p>",
        "id": 194611660,
        "sender_full_name": "Amanieu",
        "timestamp": 1587321142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/122651-general/topic/Attached.20threads.20whose.20parent.20exits/near/194611594\" title=\"#narrow/stream/122651-general/topic/Attached.20threads.20whose.20parent.20exits/near/194611594\">said</a>:</p>\n<blockquote>\n<p>A <code>pthread_t</code> join handle isn't \"owned\" by any particular thread in pthreads. It can be freely sent from one thread to another.</p>\n</blockquote>\n<p>okay so I take this to mean that the parent thread relationship is entirely irrelevant</p>",
        "id": 194641388,
        "sender_full_name": "RalfJ",
        "timestamp": 1587368348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/122651-general/topic/Attached.20threads.20whose.20parent.20exits/near/194611660\" title=\"#narrow/stream/122651-general/topic/Attached.20threads.20whose.20parent.20exits/near/194611660\">said</a>:</p>\n<blockquote>\n<p>Exiting from <code>main()</code> will kill all other threads as if <code>exit()</code> was called. However if the main thread calls <code>pthread_exit</code> then other threads continue running.</p>\n</blockquote>\n<p>what does this mean for TLS dtors? do they get run for the \"killed\" threads?</p>",
        "id": 194641419,
        "sender_full_name": "RalfJ",
        "timestamp": 1587368366
    },
    {
        "content": "<p>No, I don't think so.</p>",
        "id": 194662022,
        "sender_full_name": "Amanieu",
        "timestamp": 1587382151
    },
    {
        "content": "<p>Actually, I am 100% sure they are not executed on the killed threads.</p>",
        "id": 194662057,
        "sender_full_name": "Amanieu",
        "timestamp": 1587382176
    },
    {
        "content": "<p>Whether they are executed on the main thread is a bit blurry: <a href=\"https://github.com/rust-lang/rust/issues/28129\" title=\"https://github.com/rust-lang/rust/issues/28129\">#28129</a></p>",
        "id": 194662077,
        "sender_full_name": "Amanieu",
        "timestamp": 1587382196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/122651-general/topic/Attached.20threads.20whose.20parent.20exits/near/194662077\" title=\"#narrow/stream/122651-general/topic/Attached.20threads.20whose.20parent.20exits/near/194662077\">said</a>:</p>\n<blockquote>\n<p>Whether they are executed on the main thread is a bit blurry: <a href=\"https://github.com/rust-lang/rust/issues/28129\" title=\"https://github.com/rust-lang/rust/issues/28129\">#28129</a></p>\n</blockquote>\n<p>ah, that's interesting... miri has run them so far.  I guess that's the conservative choice here; if there are leaks in the real execution because TLS dtors dont run they dont matter as the process is quitting anyway. and if the TLS dtors are wrong/UB, this way we catch that.</p>",
        "id": 194703367,
        "sender_full_name": "RalfJ",
        "timestamp": 1587401562
    },
    {
        "content": "<p>so I guess we should run TLS dtors for joined threads, the main thread... and I suppose detached threads when they are done?</p>",
        "id": 194703427,
        "sender_full_name": "RalfJ",
        "timestamp": 1587401601
    },
    {
        "content": "<p>We shouldn't run them for the main thread when using <code>pthread_exit</code> from the main thread, as the program can continue executing.</p>",
        "id": 194703671,
        "sender_full_name": "bjorn3",
        "timestamp": 1587401733
    },
    {
        "content": "<p>we don't support <code>pthread_exit</code> at all</p>",
        "id": 194704904,
        "sender_full_name": "RalfJ",
        "timestamp": 1587402309
    },
    {
        "content": "<p>Forgot that</p>",
        "id": 194705114,
        "sender_full_name": "bjorn3",
        "timestamp": 1587402403
    },
    {
        "content": "<p>detached threads are interesting though</p>",
        "id": 194705312,
        "sender_full_name": "RalfJ",
        "timestamp": 1587402496
    }
]