[
    {
        "content": "<p>Hi,<br>\nLet's say I have a library that provides <code>MyBool</code> <a href=\"https://play.rust-lang.org/?gist=04a65599a5fe5df5ed56264384015fe6\" title=\"https://play.rust-lang.org/?gist=04a65599a5fe5df5ed56264384015fe6\">https://play.rust-lang.org/?gist=04a65599a5fe5df5ed56264384015fe6</a></p>\n<p>Is this a correct/idiomatic use of unsafe? there will be no language UB or memory unsafety if you use it, but it will violate the library API contract.</p>",
        "id": 193572683,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586527821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span>  I would do <code>enum Something { Yes, No }</code></p>",
        "id": 193574255,
        "sender_full_name": "centril",
        "timestamp": 1586528763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> You're right. I was trying to show a simple example, but I'm sure you can imagine a library that assumes some struct has only certain values, and my question is if the <code>unchecked</code> version of the constructor should be unsafe or not</p>",
        "id": 193574373,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586528831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span>  only if the invariants that need to be upheld can cause UB if not</p>",
        "id": 193574785,
        "sender_full_name": "centril",
        "timestamp": 1586529070
    },
    {
        "content": "<p>UB at a language level or also at a library level?</p>",
        "id": 193574817,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586529095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> UB only exists at the \"language level\"; it occurs if you violate the operational semantics of the language causing the abstract machine to throw an <code>Err(_)</code> (in the Miri sense)</p>",
        "id": 193575976,
        "sender_full_name": "centril",
        "timestamp": 1586529751
    },
    {
        "content": "<p>It might be better to panic if the setter receives a value which is unexpected (not 0 or 1 in this case). Panicking is idiomatic when the issue is \"unrecoverable\", such as indexing out of bounds (<code>array[100]</code> panics, <code>array.get(100)</code> still returns an <code>Option</code>).<br>\n<a href=\"https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-panic.html\" title=\"https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-panic.html\">https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-panic.html</a></p>",
        "id": 193577820,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1586530734
    },
    {
        "content": "<p>A library can certainly consider some of its invariants relevant for safety (and thus reserve the right to cause UB if the invariant is broken) even if it does not <em>currently</em> do anything that could lead to UB if the invariant is broken. However, <code>unsafe</code> should not be \"diluted\" by wantonly using it for things that aren't and never will be relevant to the prevention of UB. So unless you have a specific reason to expect you'll need an invariant like this, it's probably best to be cautious and not introduce <code>unsafe</code> just for fun.</p>",
        "id": 193582108,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1586532801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193575976\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193575976\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> UB only exists at the \"language level\"; it occurs if you violate the operational semantics of the language causing the abstract machine to throw an <code>Err(_)</code> (in the Miri sense)</p>\n</blockquote>\n<p>to be fair, even Rust libstd is not entirely precise about this use of UB though. And UB is a common enough term in library APIs that I am not sure if it is worth to fight the idea of \"library UB\". think, e.g., of our allocator traits.</p>",
        "id": 193591576,
        "sender_full_name": "RalfJ",
        "timestamp": 1586537918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> I would say if you plan to have some code, elsewhere, rely on your invariant for safety/UB-freedom, then this is totally idiomatic.</p>",
        "id": 193591646,
        "sender_full_name": "RalfJ",
        "timestamp": 1586537965
    },
    {
        "content": "<p>generally, if your type's <a href=\"https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html\" title=\"https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html\">safety invariant</a> could be violated by a method, I'd use <code>unsafe</code> for that</p>",
        "id": 193591738,
        "sender_full_name": "RalfJ",
        "timestamp": 1586538004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> well \"library UI\" meaning \"Misuse of this library can result in R-AM UB right now or later\" is something I'm behind, but using it for other things feels confusing</p>",
        "id": 193593109,
        "sender_full_name": "centril",
        "timestamp": 1586538669
    },
    {
        "content": "<p>I think it is fine to use it for non-Rust abstract machine UB, too, though, right? Like this is the principle behind things like FFI being unsafe</p>",
        "id": 193593225,
        "sender_full_name": "simulacrum",
        "timestamp": 1586538730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  I believe we also accepted the notion of \"target UB\" in UCG</p>",
        "id": 193593264,
        "sender_full_name": "centril",
        "timestamp": 1586538758
    },
    {
        "content": "<p>which covers that aspect</p>",
        "id": 193593281,
        "sender_full_name": "centril",
        "timestamp": 1586538768
    },
    {
        "content": "<p>ah, not sure I follow that -- I meant specifically that the set of non-confusing UB being larger than just that of R-AM is what I'd expect</p>",
        "id": 193593336,
        "sender_full_name": "simulacrum",
        "timestamp": 1586538811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  yeah I read your message again and I think I read it wrong</p>",
        "id": 193593359,
        "sender_full_name": "centril",
        "timestamp": 1586538826
    },
    {
        "content": "<p>some other abstract machine integrated with Rust also seems reasonable for \"UB\"</p>",
        "id": 193593426,
        "sender_full_name": "centril",
        "timestamp": 1586538849
    },
    {
        "content": "<p>E.g. the combined program using C++ and Rust causing either of the abstract machines to have UB</p>",
        "id": 193593471,
        "sender_full_name": "centril",
        "timestamp": 1586538875
    },
    {
        "content": "<p>probably LLVM UB of some form</p>",
        "id": 193593493,
        "sender_full_name": "centril",
        "timestamp": 1586538885
    },
    {
        "content": "<p>sure, but I would say that limiting in such a way seems odd</p>",
        "id": 193593524,
        "sender_full_name": "simulacrum",
        "timestamp": 1586538904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593109\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593109\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> well \"library UI\" meaning \"Misuse of this library can result in R-AM UB right now or later\" is something I'm behind, but using it for other things feels confusing</p>\n</blockquote>\n<p>I would say that is exactly what \"violating a library's safety invariant\" is. That's what safety invariants are for.</p>",
        "id": 193593541,
        "sender_full_name": "RalfJ",
        "timestamp": 1586538915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah that's how I'd phrase it as well <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193593584,
        "sender_full_name": "centril",
        "timestamp": 1586538942
    },
    {
        "content": "<p>yeah, e.g. it includes putting non-UTF8 data inside string (presuming that String never actually causes R-AM UB due to that)</p>",
        "id": 193593594,
        "sender_full_name": "simulacrum",
        "timestamp": 1586538950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593594\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593594\">said</a>:</p>\n<blockquote>\n<p>yeah, e.g. it includes putting non-UTF8 data inside string (presuming that String never actually causes R-AM UB due to that)</p>\n</blockquote>\n<p>exactly. (right now UTF-8 str <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\" title=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">is a R-AM condition</a> but I think we should get rid of that.)</p>",
        "id": 193593671,
        "sender_full_name": "RalfJ",
        "timestamp": 1586538974
    },
    {
        "content": "<p>That is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// # Safety</span>\n</pre></div>\n\n\n<p>basically</p>",
        "id": 193593676,
        "sender_full_name": "centril",
        "timestamp": 1586538977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I thought everyone was agreed it's not a R-AM condition</p>",
        "id": 193593724,
        "sender_full_name": "centril",
        "timestamp": 1586538994
    },
    {
        "content": "<p>well the reference says it's one^^</p>",
        "id": 193593752,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539004
    },
    {
        "content": "<p>oh wow</p>",
        "id": 193593759,
        "sender_full_name": "centril",
        "timestamp": 1586539008
    },
    {
        "content": "<p>so I figured we'd need an RFC to change that</p>",
        "id": 193593767,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539015
    },
    {
        "content": "<p>that's a pretty weird and unusable form of UB it seems to me</p>",
        "id": 193593797,
        "sender_full_name": "centril",
        "timestamp": 1586539031
    },
    {
        "content": "<p>what is LLVM going to use that for... heh?</p>",
        "id": 193593815,
        "sender_full_name": "centril",
        "timestamp": 1586539040
    },
    {
        "content": "<p><em>shrug</em> IIRC I just grandfathered it when editing that page</p>",
        "id": 193593825,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593815\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593815\">said</a>:</p>\n<blockquote>\n<p>what is LLVM going to use that for... heh?</p>\n</blockquote>\n<p>I dont know why you bring up LLVM here. MIR is an IR with semantics on its own right. ;)</p>",
        "id": 193593848,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> sure but many of the UB conditions we have are for some good reason  (e.g. LLVM exploiting it)</p>",
        "id": 193593920,
        "sender_full_name": "centril",
        "timestamp": 1586539089
    },
    {
        "content": "<p>is this UB condition just a result of confusing safety invariant with UB?</p>",
        "id": 193593939,
        "sender_full_name": "centril",
        "timestamp": 1586539103
    },
    {
        "content": "<p>I mean we could give LLVM, in theory, the right to optimize the search in UTF-8 data knowing that</p>",
        "id": 193593949,
        "sender_full_name": "simulacrum",
        "timestamp": 1586539109
    },
    {
        "content": "<p>I think this one exists because \"someone added it to the reference when initially writing that page\" <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 193593955,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593939\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593939\">said</a>:</p>\n<blockquote>\n<p>is this UB condition just a result of confusing safety invariant with UB?</p>\n</blockquote>\n<p>I think so</p>",
        "id": 193593974,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539134
    },
    {
        "content": "<p>i.e. we really meant \"safety invariant\" but used the wrong term \"accidentally\"?</p>",
        "id": 193593979,
        "sender_full_name": "centril",
        "timestamp": 1586539135
    },
    {
        "content": "<p>but yeah, I think it is just a safety invariant</p>",
        "id": 193594006,
        "sender_full_name": "simulacrum",
        "timestamp": 1586539149
    },
    {
        "content": "<p>it's older than that term</p>",
        "id": 193594008,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539150
    },
    {
        "content": "<p>(ah, should be)</p>",
        "id": 193594028,
        "sender_full_name": "simulacrum",
        "timestamp": 1586539166
    },
    {
        "content": "<p>I think that seems like a reasonable theory about what happened here</p>",
        "id": 193594051,
        "sender_full_name": "centril",
        "timestamp": 1586539183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> it goes back aaaall the way: <a href=\"https://doc.rust-lang.org/1.0.0/reference.html#behavior-considered-undefined\" title=\"https://doc.rust-lang.org/1.0.0/reference.html#behavior-considered-undefined\">https://doc.rust-lang.org/1.0.0/reference.html#behavior-considered-undefined</a></p>",
        "id": 193594140,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> hmm... do you want to open a PR to the reference to remove that? If you want an FCP let's do it on an issue or so</p>",
        "id": 193594152,
        "sender_full_name": "centril",
        "timestamp": 1586539231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594152\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594152\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> hmm... do you want to open a PR to the reference to remove that? If you want an FCP let's do it on an issue or so</p>\n</blockquote>\n<p>so you are saying no RFC needed? you are the process expert, fine for me ;)</p>",
        "id": 193594185,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539252
    },
    {
        "content": "<p>I'll add doing that to my list</p>",
        "id": 193594192,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539257
    },
    {
        "content": "<p>That would be a pretty short RFC heh :D</p>",
        "id": 193594227,
        "sender_full_name": "centril",
        "timestamp": 1586539271
    },
    {
        "content": "<p>if you prefer that format over FCP that's fine by me -- I can't imagine anyone on the team actually thinking it's a part of the validity invariant</p>",
        "id": 193594308,
        "sender_full_name": "centril",
        "timestamp": 1586539311
    },
    {
        "content": "<p>(of course my imagination is sometimes limited ^^)</p>",
        "id": 193594388,
        "sender_full_name": "centril",
        "timestamp": 1586539338
    },
    {
        "content": "<p><em>shrug</em> I'm in for both, if FCP works it's less work for me ;)</p>",
        "id": 193594393,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539339
    },
    {
        "content": "<p>it also seems like it's at least presumably not important for outside consumers?</p>",
        "id": 193594410,
        "sender_full_name": "simulacrum",
        "timestamp": 1586539351
    },
    {
        "content": "<p>sgtm then ^^</p>",
        "id": 193594416,
        "sender_full_name": "centril",
        "timestamp": 1586539353
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/78\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/78\">https://github.com/rust-lang/unsafe-code-guidelines/issues/78</a> everyone also agreed it should be safety, not validity</p>",
        "id": 193594439,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594410\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594410\">said</a>:</p>\n<blockquote>\n<p>it also seems like it's at least presumably not important for outside consumers?</p>\n</blockquote>\n<p>it's relevant in the sense that if you create a non-UTF-8 <code>str</code> and dont use it, this makes it UB</p>",
        "id": 193594477,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539395
    },
    {
        "content": "<p>but if we only have \"library UB\" then that's actually fine</p>",
        "id": 193594485,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539401
    },
    {
        "content": "<p>sure, yeah</p>",
        "id": 193594506,
        "sender_full_name": "simulacrum",
        "timestamp": 1586539410
    },
    {
        "content": "<p>you only start having to worry about this once you call <code>str</code> methods</p>",
        "id": 193594515,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539418
    },
    {
        "content": "<p>though \"using it\" is a bit up in the air</p>",
        "id": 193594517,
        "sender_full_name": "simulacrum",
        "timestamp": 1586539419
    },
    {
        "content": "<p>ah yes</p>",
        "id": 193594586,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539445
    },
    {
        "content": "<p>so if its a validity invariant then it has to hold even when the value is just <em>constructed</em></p>",
        "id": 193594605,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539457
    },
    {
        "content": "<p>but if its just a safety invariant then as long as you dont pass it to a foreign method as <code>&amp;str</code>, you are definitely good</p>",
        "id": 193594634,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539478
    },
    {
        "content": "<p>like, if you only pass it around in your own code at that type</p>",
        "id": 193594644,
        "sender_full_name": "RalfJ",
        "timestamp": 1586539485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is the standard library not violating this  validity invariant in a bunch of places?</p>",
        "id": 193594665,
        "sender_full_name": "centril",
        "timestamp": 1586539498
    },
    {
        "content": "<p>maybe it always works with <code>[u8]</code> internally in those APIs</p>",
        "id": 193594718,
        "sender_full_name": "centril",
        "timestamp": 1586539521
    },
    {
        "content": "<p>hm, I think std is pretty good about it</p>",
        "id": 193594732,
        "sender_full_name": "simulacrum",
        "timestamp": 1586539525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593949\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593949\">said</a>:</p>\n<blockquote>\n<p>I mean we could give LLVM, in theory, the right to optimize the search in UTF-8 data knowing that</p>\n</blockquote>\n<p>Out of curiosity, is there a plausible compiler where this could actually give some noticeable benefits?</p>",
        "id": 193594935,
        "sender_full_name": "centril",
        "timestamp": 1586539620
    },
    {
        "content": "<p>That's a very speculative question... but well, there it is <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193594954,
        "sender_full_name": "centril",
        "timestamp": 1586539630
    },
    {
        "content": "<p>the UCG discussion makes it a fairly clear \"no\" I think</p>",
        "id": 193595240,
        "sender_full_name": "centril",
        "timestamp": 1586539792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594665\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594665\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> is the standard library not violating this  validity invariant in a bunch of places?</p>\n</blockquote>\n<p>no idea...</p>",
        "id": 193596015,
        "sender_full_name": "RalfJ",
        "timestamp": 1586540168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594935\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193594935\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593949\" title=\"#narrow/stream/122651-general/topic/Library.20level.20Undefined.20Behavior/near/193593949\">said</a>:</p>\n<blockquote>\n<p>I mean we could give LLVM, in theory, the right to optimize the search in UTF-8 data knowing that</p>\n</blockquote>\n<p>Out of curiosity, is there a plausible compiler where this could actually give some noticeable benefits?</p>\n</blockquote>\n<p>that search is in a method though, so this method could conceivably still do <code>unsafe_assume(this_is_utf8)</code> and use the safety invariant to justify the assume</p>",
        "id": 193596062,
        "sender_full_name": "RalfJ",
        "timestamp": 1586540210
    },
    {
        "content": "<p>true</p>",
        "id": 193596568,
        "sender_full_name": "simulacrum",
        "timestamp": 1586540489
    },
    {
        "content": "<p>Hehe, I was thinking of utf8 but didn't want to bring it up because lately it comes up a lot when I talk with <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 193613676,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586550355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> here you go: <a href=\"https://github.com/rust-lang/reference/pull/792\" title=\"https://github.com/rust-lang/reference/pull/792\">https://github.com/rust-lang/reference/pull/792</a></p>",
        "id": 193663582,
        "sender_full_name": "RalfJ",
        "timestamp": 1586616148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> FCP as promised: <a href=\"https://github.com/rust-lang/rust/issues/71033#issuecomment-612481973\" title=\"https://github.com/rust-lang/rust/issues/71033#issuecomment-612481973\">https://github.com/rust-lang/rust/issues/71033#issuecomment-612481973</a></p>",
        "id": 193672644,
        "sender_full_name": "centril",
        "timestamp": 1586629119
    },
    {
        "content": "<p>The Rustonomicon has long put \"also anything else your library chooses to call unsafe\" as part of what's unsafe.</p>",
        "id": 193677580,
        "sender_full_name": "Lokathor",
        "timestamp": 1586636252
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 193678822,
        "sender_full_name": "marmeladema",
        "timestamp": 1586638133
    }
]