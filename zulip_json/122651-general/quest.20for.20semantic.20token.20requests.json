[
    {
        "content": "<p>I am making my own language server in Rust and I don't know of a better place to ask for help than here.</p>\n<p>I want to add syntax highlighting via semantic tokens (<a href=\"https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens\">https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens</a>), but I am not getting any requests. I added it to my server's capabilities like this (I am using <code>lsp_types</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">server_capabilities</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ServerCapabilities</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ServerCapabilities</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">text_document_sync</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">TextDocumentSyncCapability</span>::<span class=\"n\">Kind</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TextDocumentSyncKind</span>::<span class=\"n\">Incremental</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hover_provider</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">HoverProviderCapability</span>::<span class=\"n\">Simple</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">semantic_tokens_provider</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">SemanticTokensOptions</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">legend</span>: <span class=\"nc\">SemanticTokensLegend</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">token_types</span>: <span class=\"nc\">SUPPORTED_TYPES</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">token_modifiers</span>: <span class=\"nc\">SUPPORTED_MODIFIERS</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">full</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">SemanticTokensFullOptions</span>::<span class=\"n\">Delta</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">delta</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">range</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">work_done_progress_options</span>: <span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Hover works as expected, but <strong>I am not getting any requests for semantic tokens</strong>. I assume that maybe I have to enable it in my client. (I am using <code>vscode-languageclient</code> for that) This is how I launch the server and client.</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LanguageClient</span><span class=\"p\">,</span> <span class=\"nx\">LanguageClientOptions</span><span class=\"p\">,</span> <span class=\"nx\">ServerOptions</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"vscode-languageclient/node\"</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ChildProcess</span><span class=\"p\">,</span> <span class=\"nx\">spawn</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"child_process\"</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SemanticTokensFeature</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"vscode-languageclient/lib/common/semanticTokens\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">client</span>: <span class=\"kt\">LanguageClient</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">server</span>: <span class=\"kt\">ChildProcess</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">startServer</span><span class=\"p\">(</span><span class=\"nx\">serverPath</span> : <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">serverPath</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">serverOptions</span>: <span class=\"kt\">ServerOptions</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">ChildProcess</span><span class=\"o\">&gt;</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">spawn</span><span class=\"p\">(</span><span class=\"nx\">serverPath</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">server</span><span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kr\">const</span> <span class=\"nx\">clientOptions</span>: <span class=\"kt\">LanguageClientOptions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"nx\">documentSelector</span><span class=\"o\">:</span> <span class=\"p\">[{</span> <span class=\"nx\">scheme</span><span class=\"o\">:</span> <span class=\"s2\">\"file\"</span><span class=\"p\">,</span> <span class=\"nx\">language</span><span class=\"o\">:</span> <span class=\"s2\">\"volpe\"</span> <span class=\"p\">}],</span>\n            <span class=\"nx\">diagnosticCollectionName</span><span class=\"o\">:</span> <span class=\"s2\">\"volpe-ls\"</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LanguageClient</span><span class=\"p\">(</span><span class=\"s2\">\"volpe-ls\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Volpe Language Server\"</span><span class=\"p\">,</span> <span class=\"nx\">serverOptions</span><span class=\"p\">,</span> <span class=\"nx\">clientOptions</span><span class=\"p\">);</span>\n        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">registerFeature</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SemanticTokensFeature</span><span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">));</span>\n\n        <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This still doesn't work - I am not getting any requests related to semantic tokens. I don't have a grammar in my <code>package.json</code>, because I plan to do all syntax highlighting via semantic tokens.</p>\n<p>I have tried updating my dependencies.</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code>    <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"vscode-languageclient\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^7.0.0\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"devDependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"@types/node\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^12.12.6\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"@types/vscode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^1.53.0\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^4.9.0\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"@typescript-eslint/parser\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^4.9.0\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"typescript\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^4.1.2\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"eslint\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^7.15.0\"</span>\n    <span class=\"p\">}</span>\n</code></pre></div>\n<p>I tried digging around in the rust-analyzer vscode client for clues, but it doesn't seem like it registers this feature explictly.<br>\nI looked in the npm vscode-languageclient module source (I found CommonLanguageClient which is where I saw <code>this.registerFeature(new SemanticTokensFeature(this))</code>.<br>\nI looked over the LSP documentation related to semantic tokens.<br>\nI scoured github issues.<br>\nI am so lost.</p>\n<p>Any ideas for what to try next?</p>",
        "id": 228401541,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614688407
    },
    {
        "content": "<p>It's a bit far-fetched, but which theme are you using? Also, you might want to post further questions in <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0</a>, for visibility</p>",
        "id": 228403515,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614689244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> <br>\nI am using Ayu Dark Bordered. I will try with different ones. Thanks for the idea.<br>\nIs my question suitable for that stream?</p>",
        "id": 228404246,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614689638
    },
    {
        "content": "<p>Try Default Light+ or Default Dark+</p>",
        "id": 228404457,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614689726
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> That did it!</p>",
        "id": 228404490,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614689746
    },
    {
        "content": "<p>Code only uses semantic highlighting if the theme supports it, so it might not even send the requests</p>",
        "id": 228404498,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614689748
    },
    {
        "content": "<p>Any rust-analyzer question is suitable for that stream :-)</p>",
        "id": 228404607,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614689791
    },
    {
        "content": "<p>Oh my god. I spent so much time completely lost and it was just my theme the entire time!<br>\nIs there a place where I can post this so people don't have to suffer my fate?</p>",
        "id": 228404724,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614689857
    },
    {
        "content": "<p>You can also force enable it for themes I think</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code>    <span class=\"nt\">\"editor.semanticTokenColorCustomizations\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"[ThemeNameHere]\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"enabled\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"rules\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n</code></pre></div>",
        "id": 228404760,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614689876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> <br>\nIs this in from settings.json or something I can put in my package.json?</p>",
        "id": 228404932,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614689952
    },
    {
        "content": "<p>settings.json</p>",
        "id": 228404946,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614689964
    },
    {
        "content": "<p>thats for your settings.json</p>",
        "id": 228404950,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614689966
    },
    {
        "content": "<p>I guess I'll just have to tell everyone that uses my extension to enable it? Or is there a way to change that setting through an extension?</p>",
        "id": 228405293,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614690117
    },
    {
        "content": "<p>They must use a theme that supports semantic highlighting if they want that feature</p>",
        "id": 228405398,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614690149
    },
    {
        "content": "<p>I don't think there is. In general one usually doesn't want to force enable it for themes because it kinda ruins most themes due</p>",
        "id": 228405437,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614690170
    },
    {
        "content": "<p>I think you can change settings from an extension, but as a user I would find that a bit.. tacky</p>",
        "id": 228405495,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614690194
    },
    {
        "content": "<p>If i recall correctly vscode just uses some internal mapping from semantic tokens to text mate scopes</p>",
        "id": 228405499,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614690195
    },
    {
        "content": "<p>So best is to just recommend using a semantic highlighting enabled theme(which people should really switch to anyways imo)</p>",
        "id": 228405563,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614690231
    },
    {
        "content": "<p>Any recommendations?</p>",
        "id": 228405625,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614690249
    },
    {
        "content": "<p>anyway, thank you very much for the help</p>",
        "id": 228405899,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1614690374
    },
    {
        "content": "<p>Cant really recommend anything as I use a custom one specifically made with rust tokens in mind <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228405936,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1614690397
    },
    {
        "content": "<p>I use <code>Default Light+</code></p>",
        "id": 228406097,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614690481
    }
]