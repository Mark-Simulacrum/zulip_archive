[
    {
        "content": "<p>TLDR: Where do I put the HRTB when using <code>dyn</code>?</p>\n<p>I'm trying to use generators (which are currently unstable) for my project.<br>\nI want to store a generator in a struct. Since generators are basically closures and therefore have unique types, I store a trait object<code>Pin&lt;Box&lt;dyn Generator&lt;...&gt;&gt;&gt;</code>.<br>\nI have to specify the resume type, which is the same for generators as the argument type is for closures. I have a <code>Pin&lt;Box&lt;dyn Generator&lt;&amp;'a Foo, Yield = (), Return = ()&gt;&gt;&gt;</code>, where <code>&amp;'a Foo</code> is the resume type.<br>\nThe <code>Generator</code> trait suffers from the same problem as the <code>Fn</code> traits do: They require HRTB.<br>\nIf I were to use static dispatch instead of trait objects, I would specify it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">G</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">G</span>: <span class=\"nc\">Generator</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Return</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">generator</span>: <span class=\"nc\">G</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But when using <code>dyn</code> I don't know where to put the <code>where</code> clause.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">generator</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Generator</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Return</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What do I have to do?</p>",
        "id": 271878297,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644867726
    },
    {
        "content": "<p><code>dyn for&lt;'a&gt; ...</code> works</p>",
        "id": 271880355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644868749
    },
    {
        "content": "<p>Oh, thanks! Should have thought of it myself...</p>",
        "id": 271884441,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644870791
    },
    {
        "content": "<p>How do these errors make any sense?</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; src/show/demo.rs:59:12\n   |\n59 |     Self { generator }\n   |            ^^^^^^^^^ one type is more general than the other\n   |\n   = note: expected type `for&lt;&#39;a&gt; core::ops::Generator&lt;(&amp;&#39;a mut light::Lights, util::AsmDelay)&gt;`\n              found type `core::ops::Generator&lt;(&amp;mut light::Lights, util::AsmDelay)&gt;`\n\nerror: implementation of `core::ops::Generator` is not general enough\n  --&gt; src/show/demo.rs:59:12\n   |\n59 |     Self { generator }\n   |            ^^^^^^^^^ implementation of `core::ops::Generator` is not general enough\n   |\n   = note: `[generator@src/show/demo.rs:26:21: 55:6]` must implement `core::ops::Generator&lt;(&amp;&#39;1 mut ligh\nt::Lights, util::AsmDelay)&gt;`, for any lifetime `&#39;1`...\n   = note: ...but it actually implements `core::ops::Generator&lt;(&amp;&#39;2 mut light::Lights, util::AsmDelay)&gt;`\n, for some specific lifetime `&#39;2`\n</code></pre></div>\n<p>How are these different?<br>\n<code>core::ops::Generator&lt;(&amp;'1 mut light::Lights, util::AsmDelay)&gt;</code>, for any lifetime <code>'1</code>...<br>\n<code>core::ops::Generator&lt;(&amp;'2 mut light::Lights, util::AsmDelay)&gt;</code><br>\n, for some specific lifetime <code>'2</code></p>",
        "id": 271886846,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644872080
    },
    {
        "content": "<p>Don't suppose you can put a small example in the playground?</p>",
        "id": 271888694,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644872929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> <br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c64cff512dc6da885efdb08462f11de3\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c64cff512dc6da885efdb08462f11de3</a></p>",
        "id": 271889355,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644873243
    },
    {
        "content": "<p>Annoying that a normal generic lifetime allows it to work.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">generator</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Generator</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Return</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271889678,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644873407
    },
    {
        "content": "<p>This is at least a bad error message if not something worse.</p>",
        "id": 271890634,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644873851
    },
    {
        "content": "<p>Yeah, it's not great, but it's also hard to word it better, IME.</p>",
        "id": 271890945,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644873986
    },
    {
        "content": "<p>I <em>think</em> it's kind of like this has happened:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">generator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">foo</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Foo</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271891016,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644874023
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/rfcs/pull/3216\">Allow using <code>for&lt;'a&gt;</code> syntax when declaring closures </a> may be relevant</p>",
        "id": 271891078,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644874060
    },
    {
        "content": "<p>It doesn't look like the conforming function trick works here though.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">conform</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Generator</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Return</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271892067,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644874497
    },
    {
        "content": "<p>It's also possible this is a misfeature of generators, which are only half-baked, as you know.</p>",
        "id": 271893429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644874935
    },
    {
        "content": "<p>Interesting. Yes, I see how this RFC is related.</p>\n<p>The conforming function trick is genius, but yeah doesn't work unfortunately.</p>",
        "id": 271893485,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644874976
    },
    {
        "content": "<p>Yeah, could totally be generators.</p>",
        "id": 271893574,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644875022
    },
    {
        "content": "<p>Yep, generator closures don't get to feature a higher-order resume arg yet, and there is no way to nudge it in the right direction, to my knowledge</p>",
        "id": 271895140,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644875852
    },
    {
        "content": "<p>But you can write your own <code>Generators</code> that do, though, fwiw <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271895187,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644875876
    },
    {
        "content": "<p>Thanks for your help. I'm going to investigate alternatives, like <code>genawaiter</code> and <code>next_gen</code> or maybe I can't use generators at all...</p>",
        "id": 271896015,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644876249
    },
    {
        "content": "<p><code>next-gen</code> doesn't support higher-order resume arg, at least for now.</p>",
        "id": 271896216,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644876374
    },
    {
        "content": "<p>Fully supporting it would have required emulating HKTs, which would have been unwieldy, or using a lot of unsafe type erasure, which would make next-gen potentially UB-prone</p>",
        "id": 271896290,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644876429
    },
    {
        "content": "<p>That's unfortunate. I just realized now, that you're the author <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271896412,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1644876493
    },
    {
        "content": "<p>Yeah, I did think about that API a lot, and decided it wasn't worth the hassle for starters, hence that <code>: 'static</code> on the <code>ResumeArg</code>. That being said, <code>fn</code> pointer types are a nice and convenient way to get HKTs, so the \"type erasure way\" may not be as tough as it initially looked. I suspect I will need TAITs, though</p>",
        "id": 271904663,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644881370
    },
    {
        "content": "<p>(cc hrtb and closure return)</p>",
        "id": 271904766,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644881432
    }
]