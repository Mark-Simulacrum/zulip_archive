[
    {
        "content": "<p>Hey everyone, </p>\n<p>I'm having some trouble understanding the difference between <code>ExactSizeIterator</code> and <code>TrustedLen</code> and why  being <code>unsafe</code> matters.</p>\n<p>I'm also wondering how long until the trait gets stabilized as the stdlib specializes quite a bit on <code>TrustedLen</code> yet normal users of the stable toolchain can't enjoy those performance benefits.</p>",
        "id": 235531766,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1619019001
    },
    {
        "content": "<p>The difference between <code>ExactSizeIterator</code> and <code>TrustedLen</code> is that in the former case lying about the size is merely a logic bug and may cause a panic, in the latter case it is a safety issue and may cause UB. For this reason <code>TrustedLen</code> is marked as <code>unsafe</code>.</p>",
        "id": 235534039,
        "sender_full_name": "bjorn3",
        "timestamp": 1619019877
    },
    {
        "content": "<p>Note also that they have materially different rules.</p>\n<p><code>Skip</code> and <code>Chain</code> help emphasize the differences.  ESI needs to be able to represent the length as a <code>usize</code>, so it can still know the remaining length after a <code>Skip</code>, but that might not be true after a <code>Chain</code> because the addition could overflow.  Whereas overflow is ok for TrustedLen, so it can be maintained through a <code>Chain</code>, but not through a <code>Skip</code> because once it's overflowed, the subtraction is no longer going to give the right answer.</p>\n<p>Basically, ESI is just to make <code>rposition</code> work, and because it's handy to have a <code>.len()</code> sometimes.</p>",
        "id": 235540385,
        "sender_full_name": "scottmcm",
        "timestamp": 1619022345
    },
    {
        "content": "<p>While TrustedLen is used in various optimizations around consuming iterators, e.g. allocating once and then just slotting iterator results into the allocated collection without any additional bounds or capacity checks.</p>",
        "id": 235550731,
        "sender_full_name": "The 8472",
        "timestamp": 1619026431
    }
]