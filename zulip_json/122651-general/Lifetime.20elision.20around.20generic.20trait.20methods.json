[
    {
        "content": "<p>I'm working on implementing lifetime annotations in mrustc, and using the nomicon as a reference to how lifetime elision works. Found an example that doesn't quite match the as-documented rules  (I asked this over on Discord, was directed here - considering also opening an issue on the nomicon repository)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Baz</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// Elision expands to `impl&lt;'a&gt; Foo&lt;&amp;'a i32&gt; for Baz`</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Lifetime elision rules say that this should become:</span>\n<span class=\"w\">    </span><span class=\"c1\">// `fn foo&lt;'s, 'b&gt;(&amp;'s self, _bar: &amp;'b i32)`</span>\n<span class=\"w\">    </span><span class=\"c1\">// but looks like it becomes</span>\n<span class=\"w\">    </span><span class=\"c1\">// `fn foo&lt;'s&gt;(&amp;'s self, _bar: &amp;'a i32)` (where `'a` is elided in impl header)</span>\n<span class=\"w\">    </span><span class=\"c1\">// so that the function matches the signature.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_bar</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268939566,
        "sender_full_name": "John Hodge (Mutabah)",
        "timestamp": 1642830725
    },
    {
        "content": "<p>What gives you the impression that it uses the lifetime of the trait parameter?</p>\n<p>Also, this compiles in rustc:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4a60c17db1cdd81a88e8b66f9d05ece8\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4a60c17db1cdd81a88e8b66f9d05ece8</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Baz</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">y</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">x</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_bar</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">y</span> <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My guess for why this works is that methods in implementations can be more permissive than in the trait.</p>",
        "id": 268943977,
        "sender_full_name": "matt1992",
        "timestamp": 1642837509
    },
    {
        "content": "<p>Hmm... I was assuming that the trait signature had to match exactly.</p>",
        "id": 268944096,
        "sender_full_name": "John Hodge (Mutabah)",
        "timestamp": 1642837721
    },
    {
        "content": "<p>you can have the impl be more permissive but i dont think it does anything(?) ^^'</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">y</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">x</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_bar</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">y</span> <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10_</span><span class=\"k\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">blah</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>errors saying <code>blah</code> doesnt live for <code>'static</code></p>",
        "id": 268944309,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1642838051
    },
    {
        "content": "<p>Current mrustc impl (hacked up since the original message) just copies the lifetime annotations from the trait (after checking that everything else matches).<br>\nMaybe rustc does the same (or something very similar)</p>",
        "id": 268944382,
        "sender_full_name": "John Hodge (Mutabah)",
        "timestamp": 1642838133
    },
    {
        "content": "<p>You're allowed to <code>impl</code> a trait with more-permissive lifetimes than the trait.  So if the method has an unconstrained lifetime parameter, that's ok for a parameter even if it's not forced to match some other lifetime.</p>",
        "id": 268948076,
        "sender_full_name": "scottmcm",
        "timestamp": 1642843534
    },
    {
        "content": "<p>I bet if you change the trait method to return <code>Self</code> too then <code>-&gt; &amp;i32</code> in the impl will stop working.</p>",
        "id": 268948129,
        "sender_full_name": "scottmcm",
        "timestamp": 1642843583
    }
]