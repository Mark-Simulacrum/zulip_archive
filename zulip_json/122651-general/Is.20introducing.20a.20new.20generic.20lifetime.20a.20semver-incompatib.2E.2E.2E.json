[
    {
        "content": "<p>During training today, someone asked if this change would be breaking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// to</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">x</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">x</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I’m pretty sure that the answer is “no, it’s not a breaking change”, but I started to doubt myself, then doubt my doubts.</p>",
        "id": 250436973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1629773111
    },
    {
        "content": "<p>I can't think of a way it would break.  rust-semvever says it would, but I find it gives a lot of false positives.</p>",
        "id": 250438754,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629775685
    },
    {
        "content": "<p>That seems fine to me - the compiler can always choose 'x to be the same as 'a</p>",
        "id": 250439279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629776432
    },
    {
        "content": "<p>Oh hmm, I guess the one way is if someone was using turbofish syntax: <code>foo::&lt;'static&gt;(\"a\", \"b\")</code> would no longer compile</p>",
        "id": 250439301,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629776479
    },
    {
        "content": "<p>Never mind, that's not valid apparently</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n --&gt; src/main.rs:9:9\n  |\n9 |   foo::&lt;&#39;static&gt;(&quot;a&quot;, &quot;b&quot;);\n  |         ^^^^^^^\n  |\nnote: the late bound lifetime parameter is introduced here\n --&gt; src/main.rs:2:8\n  |\n2 | fn foo&lt;&#39;a&gt;(a: &amp;&#39;a str, b: &amp;&#39;a str) -&gt; &amp;&#39;a str { todo!() }\n  |        ^^\n</code></pre></div>\n<p>So yeah, this is backwards compatible</p>",
        "id": 250439432,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629776655
    },
    {
        "content": "<p>you can make <code>'a</code> early bound by doing <code>'a: 'a</code> on the fn def</p>",
        "id": 250439509,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1629776765
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"awd\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"boo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250439515,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1629776782
    },
    {
        "content": "<p>Another thing I tried was to pass <code>&amp;mut foo</code> to an argument accepting a <code>&amp;mut for&lt;'a&gt; fn(&amp;'a str, &amp;'a str) -&gt; &amp;'a str</code>, but this doesn't work because the actual type of <code>foo</code> is <code>for&lt;'a&gt; fn(&amp;'a str, &amp;'a str) -&gt; &amp;'a str {foo}</code> and you can't spell that</p>",
        "id": 250439518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629776788
    },
    {
        "content": "<p>you can use a coercion, but this applies equally to both versions of <code>foo</code></p>",
        "id": 250439534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629776830
    },
    {
        "content": "<p>if we ever get a <code>typeof</code> like operator you might be able to tell the difference</p>",
        "id": 250439601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629776886
    },
    {
        "content": "<p>HRTBs make it backwards incompatible, though I doubt your trainee had this in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">hrtb</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hrtb</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hrtb</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ERROR</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250440784,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629778666
    },
    {
        "content": "<p>You managed to nerd-snipe half the chat, btw. Congrats!</p>",
        "id": 250440833,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629778711
    },
    {
        "content": "<p>you got it backwards - <code>bar</code> is the original and we're replacing it with <code>foo</code>, so that isn't breakage, it's fixage</p>",
        "id": 250441139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629779238
    },
    {
        "content": "<p>I think OP's change is a minor change, per RFC 1105. RFC 1105 even allows adding a new type parameter, so adding a new lifetime parameter should also be okay.</p>",
        "id": 250441851,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629780283
    }
]