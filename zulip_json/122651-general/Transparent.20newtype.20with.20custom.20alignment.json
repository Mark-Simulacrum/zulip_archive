[
    {
        "content": "<p>I have a use case for transmuting a reference to a struct containing only a <code>[u8; 4]</code>, but the struct should have an alignment of 4. Is there a way to accomplish that?</p>\n<p>I tried to use <code>#[repr(transparent, align(4))]</code>, but the compiler refuses to accept that, saying they conflict. My understanding is that <code>#[repr(align(4))]</code> doesn't guarantee anything about the inner layout, so how would I accomplish this?</p>",
        "id": 202923329,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593958415
    },
    {
        "content": "<p>Well if the struct contains only a single field you could use <code>#[repr(C, align(4))]</code></p>",
        "id": 202924817,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1593960962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> you don't need <code>transparent</code> for <em>transmuting</em></p>",
        "id": 202925119,
        "sender_full_name": "eddyb",
        "timestamp": 1593961447
    },
    {
        "content": "<p>But I need some defined layout that matches how <code>[u8; 4]</code> looks in memory, right?</p>",
        "id": 202925124,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593961479
    },
    {
        "content": "<p><code>transparent</code> allows <code>fn(Foo)</code> and <code>fn([u8; 4])</code> to be interchangeable (although maybe only for <code>extern \"C\"</code>)</p>",
        "id": 202925129,
        "sender_full_name": "eddyb",
        "timestamp": 1593961484
    },
    {
        "content": "<p>that's not what <code>transparent</code> does, although it kind of has to <em>also</em> do that</p>",
        "id": 202925131,
        "sender_full_name": "eddyb",
        "timestamp": 1593961495
    },
    {
        "content": "<p>defined <em>memory</em> layout is just <code>repr(C)</code> like <span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> suggested</p>",
        "id": 202925136,
        "sender_full_name": "eddyb",
        "timestamp": 1593961514
    },
    {
        "content": "<p>and AFAIK <code>#[repr(C)]</code> can look different than just the inner field on some platforms, right?</p>",
        "id": 202925140,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593961545
    },
    {
        "content": "<p>only by <em>trailing</em> padding AFAIK, which would result in a different size, which would cause a compilation error because <code>transmute</code>, I guess?</p>",
        "id": 202925186,
        "sender_full_name": "eddyb",
        "timestamp": 1593961579
    },
    {
        "content": "<p>but I can't remember if that's possible with byte arrays at all</p>",
        "id": 202925188,
        "sender_full_name": "eddyb",
        "timestamp": 1593961596
    },
    {
        "content": "<p>I see, that should work then. Thanks.</p>",
        "id": 202925452,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593962001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Transparent.20newtype.20with.20custom.20alignment/near/202925140\">said</a>:</p>\n<blockquote>\n<p>and AFAIK <code>#[repr(C)]</code> can look different than just the inner field on some platforms, right?</p>\n</blockquote>\n<p>a C struct with a single field always match the field's memory layout (unless you explicitly override the alignment obviously)</p>",
        "id": 202926266,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1593963428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> That's true, but that doesn't necessarily mean that the structure or its single field will always be passed the same way if they are an argument to a function. Some targets have interesting ABIs for passing structures.</p>",
        "id": 202930491,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593970248
    },
    {
        "content": "<p>For instance, a u64 may be passed in a register, while a struct containing a u64 may be passed as a pointer.</p>",
        "id": 202930503,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593970292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> That's really interesting!  what arch does this? where can I read on that? :)</p>",
        "id": 202931510,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1593972209
    },
    {
        "content": "<p>I don't know which ABIs do that off the top of my head. I know that some do, and some don't.</p>",
        "id": 202932034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593973035
    },
    {
        "content": "<p>I think SPARC or s390x or maybe PPC, but I do remember one of the obscurer targets supported by Rust having different ABI in that respect.</p>",
        "id": 202932906,
        "sender_full_name": "nagisa",
        "timestamp": 1593974444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> yeah, that's why we were talking about memory layout specifically</p>",
        "id": 202944219,
        "sender_full_name": "eddyb",
        "timestamp": 1593994438
    },
    {
        "content": "<p>for transmute, memory layout matching is enough, no need to worry about call ABI and <code>#[transparent]</code></p>",
        "id": 202944259,
        "sender_full_name": "eddyb",
        "timestamp": 1593994456
    },
    {
        "content": "<p>the x86_64 SysV ABI (the one used everywhere outside of windows) is actually kind of unique in how aggressive it is at looking inside types, and even combining the cases of <code>union</code>s IIRC</p>",
        "id": 202944348,
        "sender_full_name": "eddyb",
        "timestamp": 1593994624
    },
    {
        "content": "<p>32-bit arches (x86 and ARM?) should have some examples where a <code>struct</code> is passed more opaquely than primitives, mostly because they predate ABIs getting more aggressive, I think</p>",
        "id": 202944412,
        "sender_full_name": "eddyb",
        "timestamp": 1593994750
    }
]