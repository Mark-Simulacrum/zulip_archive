[
    {
        "content": "<p>So, this is 2nd time I'm utterly confused by some things surrounding <code>Pin</code>. First, there's <a href=\"https://doc.rust-lang.org/stable/std/pin/index.html#drop-implementation\">this section</a>, which specifically says:</p>\n<blockquote>\n<p>Moreover, if your type is #[repr(packed)], the compiler will automatically move fields around to be able to drop them. It might even do that for fields that happen to be sufficiently aligned. As a consequence, you cannot use pinning with a #[repr(packed)] type.</p>\n</blockquote>\n<p>This all makes sense to me in this context. Am I understanding it right that obtaining a <code>Pin&lt;&amp;mut Option&lt;PackedType&gt;&gt;</code> is unsound? Because <code>Option</code> implements <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.as_pin_mut\"><code>as_pin_mut</code></a>, which would ultimately allow you to <code>Pin</code> a repr(packed)` type? What about <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1a62b7e3002bf44b6fd3955229dbb945\">this code</a> then?</p>",
        "id": 227638856,
        "sender_full_name": "nagisa",
        "timestamp": 1614187868
    },
    {
        "content": "<p>I'm sure I'm missing something trivial here again…</p>",
        "id": 227638896,
        "sender_full_name": "nagisa",
        "timestamp": 1614187882
    },
    {
        "content": "<p>Is this saying that you must not obtain pinned references to <em>fields</em> of a packed ADT?</p>",
        "id": 227640108,
        "sender_full_name": "nagisa",
        "timestamp": 1614188287
    },
    {
        "content": "<p>But that would be superfluous, as you cannot (in the future, its a forward compat lint right now) obtain any kind of references to a packed structs anyway…</p>",
        "id": 227640820,
        "sender_full_name": "nagisa",
        "timestamp": 1614188538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/nagisa.20doesn't.20understand.20pin.20again/near/227640108\">said</a>:</p>\n<blockquote>\n<p>Is this saying that you must not obtain pinned references to <em>fields</em> of a packed ADT?</p>\n</blockquote>\n<p>I don't think so... But to be honest I don't know the answer...</p>",
        "id": 227641430,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614188759
    },
    {
        "content": "<p>However the documentation says \"this can never cause a problem in safe code because implementing a type that relies on pinning requires unsafe code\",</p>",
        "id": 227641509,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614188774
    },
    {
        "content": "<p>so I <em>guess</em> such \"unsafe code\" is <em>responsible</em> for problems.</p>",
        "id": 227641686,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614188862
    },
    {
        "content": "<p>That is, unsafe code that assumes <code>PackedType</code> from <code>Pin&lt;&amp;mut PackedType&gt;</code> is pinned should never exist.<br>\nBut that's only my guess, I could be wrong...</p>",
        "id": 227641988,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614188969
    },
    {
        "content": "<p>I think in general the thing about Pin (and Unpin for that matter) that often confuses me is that some things aren't marked <code>unsafe</code> (like implementing Unpin). I think the reason some things that seem unsafe aren't is because they only become actual violations when a person writes incorrect unsafe code. The pin module docs get into this a bit, as <span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> mentioned</p>\n<p>That said, <code>pin-project</code> straight up rejects structs that that are repr(packed), so perhaps something funky is going on here</p>",
        "id": 227687432,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1614206504
    },
    {
        "content": "<p>Yeah, the <code>Unpin</code> thing was exactly what I got super confused about the first time around: <a href=\"#narrow/stream/122651-general/topic/Manual.20implementations.20of.20Unpin.20can.20be.20unsound.3F/near/200737518\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Manual.20implementations.20of.20Unpin.20can.20be.20unsound.3F/near/200737518</a></p>",
        "id": 227691351,
        "sender_full_name": "nagisa",
        "timestamp": 1614208417
    },
    {
        "content": "<p>but admittedly that time half of the problem was me not reading the std::pin docs through 3 times over before starting a thread.</p>",
        "id": 227691422,
        "sender_full_name": "nagisa",
        "timestamp": 1614208446
    },
    {
        "content": "<p>this time around I made sure to read the whole thing twice and then the relevant paragraph many times over. I even took a walk to give my brain time to process everything.</p>",
        "id": 227691657,
        "sender_full_name": "nagisa",
        "timestamp": 1614208580
    },
    {
        "content": "<p>I wonder if it would help if I managed (or failed) to actually construct an example that demonstrated the unsoundness here. I pondered the idea but due to how it only implicit involves moves that I've little control over, it also seems quite difficult to achieve.</p>",
        "id": 227692231,
        "sender_full_name": "nagisa",
        "timestamp": 1614208902
    },
    {
        "content": "<p>I think that an example would be the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(packed)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"c1\">// #[pin_project]</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"nc\">OneAlignedPinSensitive</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// !Unpin</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pin_project_foo_c</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">OneAlignedPinSensitive</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">map_unchecked</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">foo</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"c1\">// c is well-aligned</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">stuff</span><span class=\"p\">(</span><span class=\"n\">pin_project_foo_c</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"n\">as_ref</span><span class=\"p\">()));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The idea is that when <code>Foo</code> is dropped, after having been pinned and having pin-projected to <code>c</code> at least once, we have to drop <code>c</code> <em>in place</em> before it is moved or deallocated. <code>c</code> is dropped by <code>Foo</code>'s implicit / \"automatic\" drop of its fields, and, because it is a <code>#[repr(packed)]</code> struct, there is no guarantee that such compiler-generated code does not move <code>c</code> before dropping it. For instance, it could do something along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">FooUnpacked</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* same definition as Foo */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_unpacked</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooUnpacked</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"nc\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">).</span><span class=\"n\">read_unaligned</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"nc\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">read_unaligned</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"nc\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">).</span><span class=\"n\">read_unaligned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"c1\">// c is *moved* before having been dropped</span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"c1\">// _unpacked is dropped, dropping the moved c.</span>\n</code></pre></div>",
        "id": 227696169,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614210946
    }
]