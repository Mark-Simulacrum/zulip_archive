[
    {
        "content": "<p>This thread is worth reading: <a href=\"https://www.reddit.com/r/rust/comments/gvqhea/rust_seems_like_the_most_consistent_language_ive/\">https://www.reddit.com/r/rust/comments/gvqhea/rust_seems_like_the_most_consistent_language_ive/</a></p>",
        "id": 199659640,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591209814
    },
    {
        "content": "<p>We may be able to learn something from the inconsistencies people point out, which we could potentially improve in a future edition (2021 or otherwise).</p>",
        "id": 199659684,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591209833
    },
    {
        "content": "<p>From the top of my head:</p>\n<ul>\n<li><code>FromStr</code> using <code>Err</code> instead of <code>Error</code></li>\n<li>rarely seemingly arbitrary abbreviations, typing a view letters more normally doesn't hurt anyone</li>\n<li><code>&amp;mut</code> having some pseudo <code>Copy</code> behaviour which any struct wrapping a <code>&amp;mut</code> can't have without additional verbosity (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=71ab71dcf82feeecb877f68428d1f82e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=71ab71dcf82feeecb877f68428d1f82e</a>)</li>\n<li>field access allows splitting a <code>&amp;mut</code> into multipl <code>&amp;mut</code>'s but once accessors (get/set) are used this won't work anymore</li>\n<li><code>impl Trait</code> being one syntax used for two completely separate features depending on context. Making it easier to use if you don't try to understand what it does, but harder to properly understand it IMHO. Also making discussion for existential impl trait in other positions (like fields) more complex.</li>\n<li><code>impl Trait</code> as generics syntax sugar just working with a small subset of generics, even just having a parameter which is a closure with a generic type parameter requires going back to traditional generics</li>\n<li>features and optional dependencies being treated the same from the outside (opt. deps. can be enabled like features) but it's not possible to have a feature and opt. dep. with the same name, nor can a opt. dep. specify other opt. dependencies</li>\n<li>rust having a way to specify unstable thinks in lib std, but external libraries can not do so</li>\n<li>certain methods only work for \"Any\" trait objects but not for other trait objects</li>\n<li>inconsistent and incomplete derives for std traits</li>\n<li><code>dev-dependencies</code> for cargo test/cargo run --example but no <code>dev-default</code> features or similar.</li>\n</ul>\n<p>Thinks which are in process to get solved:</p>\n<ul>\n<li>existential <code>impl Trait</code> only working in function return but not Trait return, not type alias and not in struct fields. Which makes it easier to encapsulate it. This makes it inconsistent when you can replace a boxed trait with <code>impl Trait </code> and when not</li>\n<li>some parts around arrays, but most have now been fixed or are going to be fixed through const</li>\n<li>some parts around <code>macro_rules!</code></li>\n</ul>\n<p>Two things I think  we should be careful about is to look ahead a bit more.  For example: <code>impl Trait</code> the way we have it now is done exactly IMHO right if we only look at functions/methods. Sure there are some corner cases where existential <code>impl Trait</code> in function parameters would be nice, but they are mostly wrt. macros/code gen and can be worked around. So it's preferable to make it easier to use it for the general case by making it an syntax sugar for generics. But the moment it gets extended to places where the input/output relationship is less clear. Like struct fields. It becomes messy because now you have a situation where both the universal and existential variations make sense depending on how you want to use the struct but for the universal use case we already have generics so we need it in the existential form. But due to it existing in both forms with the same syntax it now becomes harder to explain/learn then when it only would exist in the existential form. Another think is we should be careful with terminology universal/existential <code>impl Trait</code> look like two variations of the same feature. But in the end they are to completely different features which just have some similarity to them IMHO.  Sur in type theory this might not be the case,  but in the way you can use and implement them it is.</p>",
        "id": 199867681,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1591359571
    },
    {
        "content": "<p>Just to be clear most of the thinks above are to some degree nit-picking. Non have any major negative influence on my productivity.  And universal <code>impl Trait</code> is still a neat syntax sugar. I just which it wouldn't overlap with existential <code>impl Trait</code>.</p>",
        "id": 199867893,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1591359715
    },
    {
        "content": "<p>I really wish we never added impl Trait for non existential cases.</p>",
        "id": 199894531,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1591371529
    },
    {
        "content": "<p>I personally think of <code>impl Trait</code> as just being an inferred type. So in ret position it is inferred from the function it self, in input position from the function argument.</p>",
        "id": 199897472,
        "sender_full_name": "lcnr",
        "timestamp": 1591372765
    },
    {
        "content": "<p>This interpretation also makes is fairly intuitive for me to extend this to <code>type Foo = impl PartialEq</code>. For me, this is a type alias for which the compiler infers the type.</p>",
        "id": 199897489,
        "sender_full_name": "lcnr",
        "timestamp": 1591372773
    },
    {
        "content": "<p>I mostly got that intuition from a blog by <span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> : <a href=\"https://varkor.github.io/blog/2018/07/04/a-new-perspective-on-impl-trait.html\">https://varkor.github.io/blog/2018/07/04/a-new-perspective-on-impl-trait.html</a></p>",
        "id": 199897647,
        "sender_full_name": "lcnr",
        "timestamp": 1591372824
    },
    {
        "content": "<p>I'd put <code>unsafe</code> meaning two different things at the top of my list</p>",
        "id": 200516058,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863269
    },
    {
        "content": "<p>\"features and optional dependencies being treated the same from the outside (opt. deps. can be enabled like features) but it's not possible to have a feature and opt. dep. with the same name, nor can a opt. dep. specify other opt. dependencies\" is also being worked on (by me, slowly) -&gt; <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#namespaced-features\">https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#namespaced-features</a></p>",
        "id": 200522152,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1591867697
    },
    {
        "content": "<p>My main complaint is the seemingly arbitrary limitations of deref coercion</p>",
        "id": 200522200,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1591867735
    },
    {
        "content": "<p>i.e. when a <code>&amp;Vec</code> becomes <code>&amp;[]</code> vs when it doesn't (same for <code>&amp;String</code> and <code>&amp;str</code>)</p>",
        "id": 200522228,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1591867764
    }
]