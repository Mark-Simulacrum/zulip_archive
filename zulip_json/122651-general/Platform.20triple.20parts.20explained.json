[
    {
        "content": "<p>Is there a write up of what each section of a platform triple is? Looking at. <a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support.html\">https://doc.rust-lang.org/nightly/rustc/platform-support.html</a></p>\n<p><code>arm-unknown-linux-gnueabihf</code><br>\ncpu = <code>arm</code><br>\nvendor = <code>unknown</code><br>\nsystem = <code>linux</code><br>\n??? = <code>gnueabihf</code></p>",
        "id": 244607839,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625163996
    },
    {
        "content": "<p>From rustc's point of view the whole triple is a single unstructured string, it doesn't break it into parts in any ways.</p>",
        "id": 244608769,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1625164458
    },
    {
        "content": "<p>But generally the convention is <code>&lt;arch&gt;&lt;subarch&gt;-&lt;vendor&gt;-&lt;os&gt;-&lt;abi&gt;</code>.</p>",
        "id": 244608835,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1625164502
    },
    {
        "content": "<p><a href=\"https://clang.llvm.org/docs/CrossCompilation.html#target-triple\">https://clang.llvm.org/docs/CrossCompilation.html#target-triple</a></p>",
        "id": 244608855,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1625164518
    },
    {
        "content": "<p>Also, \"vendor\" is somewhat vestigial, and almost no current platform uses it for anything meaningful or useful.</p>",
        "id": 244614711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625167421
    },
    {
        "content": "<p>(There are a few target triples that use it in a way that should <em>probably</em> be part of \"abi\" instead.)</p>",
        "id": 244614739,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625167441
    },
    {
        "content": "<p>Also, for Rust's purposes, <code>gnueabihf</code> gets split into <code>gnu</code> and <code>eabihf</code>, which are treated as two different things inside rustc and when exposed to Rust <code>cfg</code> directives.</p>",
        "id": 244614824,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625167478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> What does that split end up looking like? Are you saying <code>gnueabihf</code> would generate <code>--cfg=gnu</code> and <code>--cfg=eabihf</code>?</p>",
        "id": 244627559,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625173969
    },
    {
        "content": "<p>No, they're provided as named <code>target_</code> constructs. One moment...</p>",
        "id": 244627651,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625174014
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/reference/conditional-compilation.html\">https://doc.rust-lang.org/reference/conditional-compilation.html</a></p>",
        "id": 244627816,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625174047
    },
    {
        "content": "<p><code>gnueabihf</code> has <code>target_env=\"gnu\"</code></p>",
        "id": 244627942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625174092
    },
    {
        "content": "<p>And <code>target_abi=\"eabihf\"</code>.</p>",
        "id": 244628020,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625174154
    }
]