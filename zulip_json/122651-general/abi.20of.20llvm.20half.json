[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> Do you know what the ABI of LLVM half type is on other language frontends?</p>",
        "id": 164155054,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556183995
    },
    {
        "content": "<p>AFAICT all assume that its layout is the same as <code>i16</code> and interface by passing <code>i16</code> through ABIs. The SysV spec does not mention half, so I have no idea whether this is correct.</p>",
        "id": 164155121,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556184043
    },
    {
        "content": "<p>Here be dragons</p>",
        "id": 164155156,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556184075
    },
    {
        "content": "<p>Because C doesn't have a standard or even nonstandard-yet-widely-adopted <code>half</code> type and many targets (including x86_64) have no special support for it, its ABI is likely a wild west mess.</p>",
        "id": 164155234,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556184164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> so clang errors when <code>half</code> is used in APIs</p>",
        "id": 164156928,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556185980
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/gnPqjw\" target=\"_blank\" title=\"https://godbolt.org/z/gnPqjw\">https://godbolt.org/z/gnPqjw</a></p>",
        "id": 164156946,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556185997
    },
    {
        "content": "<p>that's... more sane that I had feared</p>",
        "id": 164156956,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186011
    },
    {
        "content": "<p>more careful, to be precise</p>",
        "id": 164157007,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186043
    },
    {
        "content": "<p>it only allows passing them by memory</p>",
        "id": 164157037,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186062
    },
    {
        "content": "<p>in rust we can use <code>i16</code> to interface with the LLVM intrinsics just fine</p>",
        "id": 164157183,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186203
    },
    {
        "content": "<p>appears that <code>i16</code> and <code>f16</code> have the same layout</p>",
        "id": 164157195,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186221
    },
    {
        "content": "<p>for stuff like <code>fadd</code> we do need a bitcast</p>",
        "id": 164157294,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186340
    },
    {
        "content": "<p>right but we could have Rust intrinsics like <code>fadd_f16h(i16, i16) -&gt; i16</code> that expand to bitcast -&gt; fadd -&gt; bitcast</p>",
        "id": 164157411,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186473
    },
    {
        "content": "<p>sure, that's what I meant - i was asked to write a proper constructive reply to the RFC</p>",
        "id": 164157419,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186492
    },
    {
        "content": "<p>If we really wanted to avoid introducing a new primitive type for binary16</p>",
        "id": 164157422,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186496
    },
    {
        "content": "<p>did not want to put anything wrong in there</p>",
        "id": 164157428,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186503
    },
    {
        "content": "<p>you mentions that implementing the type in a library could be problematic, if it extends to f32, but i don't think that's the only implementation possible</p>",
        "id": 164157478,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186536
    },
    {
        "content": "<p>like sure, a library could do that, and then it would have the problems you mention, but it could also just implement arithmetic without extending to f32 AFAICT</p>",
        "id": 164157489,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186563
    },
    {
        "content": "<p>that would most certainly incur a perf cost in most targets</p>",
        "id": 164157514,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186597
    },
    {
        "content": "<p>Yeah that would be even worse for performance on the affected targets (those without native f16 instructions)</p>",
        "id": 164157518,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186602
    },
    {
        "content": "<p>but then using f32 internally could be done with a <code>fast_math</code> cargo feature</p>",
        "id": 164157521,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186622
    },
    {
        "content": "<p>I don't understand what problem you're trying to solve by that</p>",
        "id": 164157527,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186638
    },
    {
        "content": "<p>Expanding to f32 for arithmetic is perfectly fine</p>",
        "id": 164157573,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186657
    },
    {
        "content": "<p>I thought IEEE754 required that to be opt-in</p>",
        "id": 164157578,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186673
    },
    {
        "content": "<p>Ok hold on</p>",
        "id": 164157581,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186684
    },
    {
        "content": "<p>Otherwise the results would be different between a target that does that, and one that does have f16 arithmetic in hardware</p>",
        "id": 164157583,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186696
    },
    {
        "content": "<p>IIRC that's IEEE754:2008 10.4</p>",
        "id": 164157596,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186719
    },
    {
        "content": "<p>(in C it would be fine though, because C does not guarantee that a float is really 32-bit wide)</p>",
        "id": 164157641,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556186753
    },
    {
        "content": "<p>If you explicitly round back to bfloat16 after every single operation, then some operations are automatically correctly rounded and the rest are off in deterministic ways (independent of optimizer choices). So there's a reasonable level of predictability and reproducibility there, just not across different hardware, but that's already not true currently for f{32,64} for various reasons.</p>",
        "id": 164157813,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556186930
    },
    {
        "content": "<p>I guess my question is whether, e.g., <code>rn(a: f16 + b: f16)</code> produces the same result as <code>rn(a: f16 as f32 + b: f16 as f32) as f16</code> where a <code>rn</code> happens for the 32-bit addition, and then i suppose anotherone happens in the conversion back to f16</p>",
        "id": 164157915,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187058
    },
    {
        "content": "<p>IIRC for addition that does produce the same result. Multiplication and sqrt and so on I'm not sure about</p>",
        "id": 164157940,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556187102
    },
    {
        "content": "<p>Furthermore, if we demand an actual correctly rounded (= software) implementation of everything, then I am really skeptical whether implementing that is economical (i.e., it would make me lean towards not providing the type portably at all). And why should we demand that? It's likely not going to help achieve reproduciblity because on hardware <em>with</em> native support for there are going to be all the same obstacles to reproducibility as we currently have with f32, f64.</p>",
        "id": 164158002,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556187131
    },
    {
        "content": "<p>I'm not suggesting that we should, only that we could provide different implementations</p>",
        "id": 164158021,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187179
    },
    {
        "content": "<p>Probably including not-quite-compliant hardware that you can't paper over except by massive slowdown, as with x87. Only nobody cares about x87 but bfloat16 implementations are hot right now.</p>",
        "id": 164158022,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556187181
    },
    {
        "content": "<p>I think we shouldn't paper over x87, but we shouldn't make it constrain our design space either</p>",
        "id": 164158097,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187260
    },
    {
        "content": "<p>We can fix the precision of x87 o 24 or 5x mantissa bits by default, and offer a flag to let users do whatever they want, or provide a f80 type that explicitly does that, or...</p>",
        "id": 164158110,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187304
    },
    {
        "content": "<p>anyhow this is a different topic</p>",
        "id": 164158116,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187317
    },
    {
        "content": "<p>I think you have answered the question</p>",
        "id": 164158123,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187335
    },
    {
        "content": "<p>I think that while a library can do the <code>as f32</code> , if we were to provide intrinsics for f16 or bfloat16, these would deal in i16, and whether things are casted to f32 or not would be up to rustc to decide</p>",
        "id": 164158189,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187377
    },
    {
        "content": "<p>if we were to do that, I expect the intrinsics that rustc provides to be portable</p>",
        "id": 164158198,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187403
    },
    {
        "content": "<p>such that a library wouldn't need to do the casts</p>",
        "id": 164158202,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187412
    },
    {
        "content": "<p>It wouldn't need to, but it could (with fp_contract related caveats noted). That was my point: even with only target specific intrinsics in core::arch, a third party crate could provide a decent (if non-optimal) <em>portable</em> implementation of bfloat16</p>",
        "id": 164158289,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556187492
    },
    {
        "content": "<p>To check that I understood. Those fp_contract caveats only would hold if LLVM can't apply them properly to whatever IR we would generate right ?</p>",
        "id": 164158430,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187663
    },
    {
        "content": "<p>I think you have raised a similar point that I did not fully get. You mention that an advantage of a native type would be \"arithmetic operators\".</p>",
        "id": 164158448,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187698
    },
    {
        "content": "<p>How is that different from implementing the <code>std::ops</code> (e.g. where <code>Add::add</code> just forwards to <code>core::intrinsics::fadd_f16</code> or similar) ?</p>",
        "id": 164158510,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556187735
    },
    {
        "content": "<blockquote>\n<p>To check that I understood. Those fp_contract caveats only would hold if LLVM can't apply them properly to whatever IR we would generate right ?</p>\n</blockquote>\n<p>Right, if we generate IR that works with <code>fadd bfloat16</code> or whatever without explicitly casting back and forth, then we're giving LLVM backends the option of not rounding after every operation. If we have the rounding steps explicitly in there, either because we used a \"pure library implementation\" or because rustc intrinsics expand to f16b adds to <code>cast; fadd float; cast</code>, then I don't think they can be eliminated.</p>",
        "id": 164158615,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556187853
    },
    {
        "content": "<blockquote>\n<p>How is that different from implementing the <code>std::ops</code> (e.g. where <code>Add::add</code> just forwards to <code>core::intrinsics::fadd_f16</code> or similar) ?</p>\n</blockquote>\n<p>You can provide intrinsics <em>and</em> a wrapper type that implements them, but at that point as far as the user is concerned you might as well expose the type <em>instead of</em> the intrinsics and then the details are mostly noise (including the decision of whether it's an actual literal primitive type or a core-provided library type that's in the prelude)</p>",
        "id": 164158658,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556187954
    },
    {
        "content": "<p>Well except for literals but ¯\\_(ツ)_/¯</p>",
        "id": 164158707,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556187974
    },
    {
        "content": "<p>A couple of things.</p>\n<p>So if we were to go the intrinsics way, i'd expect a <code>core::f16</code> module containing f16 operations, one would be <code>core::f16_as_f32(i16) -&gt; f32</code>, and another would be <code>core::f16::add(i16, i16) -&gt; i16</code>. </p>\n<p>I don't expect rustc to expand add to cast, fadd, cast, but to an fadd on f16 (with bitcasts). If that does not work on all targets right now, then the library would need to work around that on that target (rustc could just emit a <code>unimplemented!</code> for those).</p>",
        "id": 164158738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188031
    },
    {
        "content": "<p>I think the issues in favor of a native type are literals, and <code>as</code> casts. But C++ does not have these issues because of user-defined literals and casts</p>",
        "id": 164158818,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188113
    },
    {
        "content": "<p>And many rust libraries would benefit from those</p>",
        "id": 164158820,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188123
    },
    {
        "content": "<p>A problem with providing <code>f16</code> native types is that we would need to pick a rust ABI, wouldn't be usable in <code>extern \"C\"</code>, etc. etc.</p>",
        "id": 164158841,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188167
    },
    {
        "content": "<p>I suppose these problems are minor</p>",
        "id": 164158849,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188177
    },
    {
        "content": "<p>Very. We don't need to pick any rust ABI because rust ABI is unstable, and rejecting it in <code>extern \"C\"</code> is like two lines of code added to improper_ctypes.</p>",
        "id": 164158915,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556188216
    },
    {
        "content": "<p>but at the end our <code>f16</code> primitive type implementation wouldn't be much better than that of a library, and would be quite harder to iterate on, since it can't be in a crate</p>",
        "id": 164158916,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188217
    },
    {
        "content": "<p>(because of a cyclic dep with core at least)</p>",
        "id": 164158920,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188232
    },
    {
        "content": "<p>although we could hack that</p>",
        "id": 164158923,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188238
    },
    {
        "content": "<p>I just don't see many advantages either way. We already have a crate for <code>f16</code>, if the issues with casts, perf, literals, are real, we might just want to extend the language to fix those for the <code>half</code> crate, and all other crates that would benefit.</p>",
        "id": 164158955,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188298
    },
    {
        "content": "<p>Oh sure for prototyping it would probably be great to do as much out of tree as possible but there's still the question of what interface we ultimately want to expose to end users and that should IMO be unclouded by development process concerns.</p>",
        "id": 164159017,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556188328
    },
    {
        "content": "<p>As in, adding a new primitive type is a big change, that for <code>f16</code> and <code>bfloat16</code> benefits a minority, while user-defined literals would be a more self-contained change, that would benefit everyone</p>",
        "id": 164159021,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188335
    },
    {
        "content": "<p>User-defined literals are a gigantic can of worms and I don't want to touch it</p>",
        "id": 164159032,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556188362
    },
    {
        "content": "<p>I think C++ solves this nicely.</p>",
        "id": 164159037,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188375
    },
    {
        "content": "<p><code>trait UDL { const fn from_literal_string(s: &amp;str) -&gt; Self; } </code></p>",
        "id": 164159077,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188418
    },
    {
        "content": "<p><em>tiredly gestures at the extensive pre-RFC discussions</em></p>",
        "id": 164159081,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556188429
    },
    {
        "content": "<p>oh i wasn't aware of those</p>",
        "id": 164159139,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188447
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/pre-rfc-custom-literals-via-traits/8050\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-custom-literals-via-traits/8050\">https://internals.rust-lang.org/t/pre-rfc-custom-literals-via-traits/8050</a> ?</p>",
        "id": 164159171,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188492
    },
    {
        "content": "<p>That is the one I had in mind but I can't swear there isn't more. If there is it's hopefully cross-referenced.</p>",
        "id": 164159287,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1556188629
    },
    {
        "content": "<p>ok so I read the RFC and was like, this is what i had in ming, read the comments, and is like udls should solve units of measure <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 164159386,
        "sender_full_name": "gnzlbg",
        "timestamp": 1556188763
    }
]