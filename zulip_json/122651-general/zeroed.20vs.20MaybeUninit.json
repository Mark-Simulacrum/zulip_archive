[
    {
        "content": "<p>I don't think we're doing <code>mem::zeroed</code>. Instead we'll do <code>MaybeUninit::zeroed</code></p>",
        "id": 180832394,
        "sender_full_name": "oli",
        "timestamp": 1573825296
    },
    {
        "content": "<p>Well that is a distressing and poor decision :(</p>",
        "id": 180842384,
        "sender_full_name": "Lokathor",
        "timestamp": 1573831704
    },
    {
        "content": "<p>Why? It will encourage people to use the better supported version.</p>",
        "id": 180843169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1573832065
    },
    {
        "content": "<p>Thinking of other deprecated functions, will <code>thread::sleep</code> be const? :-)</p>",
        "id": 180843221,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1573832095
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> uh sure we could do that</p>",
        "id": 180843671,
        "sender_full_name": "oli",
        "timestamp": 1573832376
    },
    {
        "content": "<p>Nice. Then I can gradually speed up the compile times of my code.</p>",
        "id": 180845171,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1573833331
    },
    {
        "content": "<p>nah, it won't do a thing</p>",
        "id": 180845520,
        "sender_full_name": "oli",
        "timestamp": 1573833564
    },
    {
        "content": "<p>There's no point in making the old version const fn because to use that you'd need to be on a new compiler which has MaybeUninit already anyway right?</p>",
        "id": 180846228,
        "sender_full_name": "simulacrum",
        "timestamp": 1573834009
    },
    {
        "content": "<p>yes</p>",
        "id": 180846561,
        "sender_full_name": "oli",
        "timestamp": 1573834223
    },
    {
        "content": "<p>not giving features to deprecated things will help adoption of the replacement, too</p>",
        "id": 180846596,
        "sender_full_name": "oli",
        "timestamp": 1573834262
    },
    {
        "content": "<p>We didn't deprecate <code>mem::zeroed</code> though, only <code>mem::uninitialized</code>.</p>",
        "id": 180858363,
        "sender_full_name": "Amanieu",
        "timestamp": 1573842432
    },
    {
        "content": "<p>Because <code>mem::zeroed</code> has valid use cases with FFI.</p>",
        "id": 180858388,
        "sender_full_name": "Amanieu",
        "timestamp": 1573842455
    },
    {
        "content": "<p>hm, but so does uninitialized, right? My impression was that the two are essentially equivalent...</p>",
        "id": 180858485,
        "sender_full_name": "simulacrum",
        "timestamp": 1573842517
    },
    {
        "content": "<p>Maybe I misunderstood</p>",
        "id": 180858488,
        "sender_full_name": "simulacrum",
        "timestamp": 1573842522
    },
    {
        "content": "<p>Basically <code>*val = mem::zeroed();</code> is equivalent to <code>memset(&amp;val, 0, sizeof(val));</code></p>",
        "id": 180859107,
        "sender_full_name": "Amanieu",
        "timestamp": 1573842973
    },
    {
        "content": "<p>sure, I understand that, but I'd expect us to push users towards <code>MaybeUninit::zeroed().assume_init()</code>. I guess that's not really better in any way.</p>",
        "id": 180859291,
        "sender_full_name": "simulacrum",
        "timestamp": 1573843112
    },
    {
        "content": "<p>though arguably you should pass the ptr into FFI if you can rather than the zeroed struct (and then afterwards assume_init())</p>",
        "id": 180859329,
        "sender_full_name": "simulacrum",
        "timestamp": 1573843146
    },
    {
        "content": "<p>that's way longer to type for no actual gain in clarity. the argument could be made that clarity is significantly reduced in fact</p>",
        "id": 180868729,
        "sender_full_name": "Lokathor",
        "timestamp": 1573849759
    },
    {
        "content": "<p>essentially any C struct from FFI is safe to be zeroed (in the \"data validity\" sense), and you often set fields of the structure on your side of things before passing the pointer to FFI</p>",
        "id": 180868893,
        "sender_full_name": "Lokathor",
        "timestamp": 1573849883
    },
    {
        "content": "<p>yeah, that's true</p>",
        "id": 180869015,
        "sender_full_name": "simulacrum",
        "timestamp": 1573849961
    },
    {
        "content": "<p>though it is sometimes convenient to have references and such in FFI layers which can't then be zeroed</p>",
        "id": 180869031,
        "sender_full_name": "simulacrum",
        "timestamp": 1573849975
    },
    {
        "content": "<p>that danger is already being fixed: <a href=\"https://github.com/rust-lang/rust/pull/66059\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66059\">https://github.com/rust-lang/rust/pull/66059</a></p>",
        "id": 180869095,
        "sender_full_name": "Lokathor",
        "timestamp": 1573850033
    },
    {
        "content": "<p>i wish that rust language people would please stop thinking that core::mem::zeroed is somehow not good to use</p>",
        "id": 180869179,
        "sender_full_name": "Lokathor",
        "timestamp": 1573850081
    },
    {
        "content": "<p>it is a better API than MaybeUninit::zeroed().assume_init()</p>",
        "id": 180869199,
        "sender_full_name": "Lokathor",
        "timestamp": 1573850101
    },
    {
        "content": "<p>just because it is less verbose and you see the point of the expression more easily when reading the page</p>",
        "id": 180869231,
        "sender_full_name": "Lokathor",
        "timestamp": 1573850129
    },
    {
        "content": "<p>you know this is zulip and you can fork a thread instead of hijacking the const fn wishlist for hashing out different opinions on things ;)</p>",
        "id": 180869364,
        "sender_full_name": "oli",
        "timestamp": 1573850236
    },
    {
        "content": "<p>/me had thought this was just about zeroed :)</p>",
        "id": 180869390,
        "sender_full_name": "simulacrum",
        "timestamp": 1573850255
    },
    {
        "content": "<p>ah right, is there a way to fork a thread after the fact?</p>",
        "id": 180869494,
        "sender_full_name": "Lokathor",
        "timestamp": 1573850308
    },
    {
        "content": "<p>i did not mean to clog up the list</p>",
        "id": 180869507,
        "sender_full_name": "Lokathor",
        "timestamp": 1573850323
    },
    {
        "content": "<p>trying to figure that out right now, I've seen ppl do it before</p>",
        "id": 180869509,
        "sender_full_name": "oli",
        "timestamp": 1573850325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> done -- not very intuitive</p>",
        "id": 180869673,
        "sender_full_name": "simulacrum",
        "timestamp": 1573850475
    },
    {
        "content": "<p>you want to do \"view source / edit topic\" and say \"all later\"</p>",
        "id": 180869695,
        "sender_full_name": "simulacrum",
        "timestamp": 1573850495
    },
    {
        "content": "<p>oh, I found the editing, but not something that would do the whole shebang</p>",
        "id": 180869773,
        "sender_full_name": "oli",
        "timestamp": 1573850543
    },
    {
        "content": "<p>Anyway, wrt safe uses of <code>zeroed</code>, instead of asking whether dangerous API or obviously dangerous API is worse, shouldn't we ask \"can we figure out a way to make zero init safe for the types where it is?\"?</p>",
        "id": 180869982,
        "sender_full_name": "oli",
        "timestamp": 1573850719
    },
    {
        "content": "<p>I think there's definitely some discussion around that and an auto trait for it</p>",
        "id": 180870168,
        "sender_full_name": "simulacrum",
        "timestamp": 1573850855
    },
    {
        "content": "<p>in theory we could get pretty much 100% fidelity since the compiler knows all cases of \"nonzero\"</p>",
        "id": 180870175,
        "sender_full_name": "simulacrum",
        "timestamp": 1573850873
    },
    {
        "content": "<p>omg right, we could even detect enums that can be zeroed</p>",
        "id": 180870250,
        "sender_full_name": "oli",
        "timestamp": 1573850915
    },
    {
        "content": "<p>although for <code>repr(Rust)</code> types that's bad</p>",
        "id": 180870266,
        "sender_full_name": "oli",
        "timestamp": 1573850933
    },
    {
        "content": "<p>probably needs someone to write up an RFC, there's probably issues I'm not thinking of :)</p>",
        "id": 180870271,
        "sender_full_name": "simulacrum",
        "timestamp": 1573850934
    },
    {
        "content": "<p>because compiler updates can then break trait resolution</p>",
        "id": 180870285,
        "sender_full_name": "oli",
        "timestamp": 1573850942
    },
    {
        "content": "<p>hm, sure, though I imagine you would perhaps say \"don't use mem zeroed generally\"</p>",
        "id": 180870310,
        "sender_full_name": "simulacrum",
        "timestamp": 1573850968
    },
    {
        "content": "<p>or even just reordering of enum variants, which isn't a breaking change in any definition I think</p>",
        "id": 180870313,
        "sender_full_name": "oli",
        "timestamp": 1573850973
    },
    {
        "content": "<p><code>trait Zero</code> and <code>auto trait Zeroable {}</code> and <code>mem::zeroed::&lt;T: Zero&gt;()</code> with the first you need to explicitly implement</p>",
        "id": 180870342,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851002
    },
    {
        "content": "<p>yea, but if a compiler update changes <code>Option&lt;usize&gt;::None</code> into <code>Option&lt;usize&gt;::Some(0)</code>, that's bad</p>",
        "id": 180870390,
        "sender_full_name": "oli",
        "timestamp": 1573851010
    },
    {
        "content": "<p>sure, we'd error on the <code>impl Zero for Foo</code></p>",
        "id": 180870407,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851026
    },
    {
        "content": "<p>and have some guidelines -- maybe e.g. enums are never zero-safe</p>",
        "id": 180870413,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851037
    },
    {
        "content": "<p>oh it's all opt-in?</p>",
        "id": 180870415,
        "sender_full_name": "oli",
        "timestamp": 1573851039
    },
    {
        "content": "<p>right, yeah, the safety aspect</p>",
        "id": 180870425,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851046
    },
    {
        "content": "<p>but it's always safe to opt-in</p>",
        "id": 180870430,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851051
    },
    {
        "content": "<p>well <code>repr(C)</code> enums can be zero safe</p>",
        "id": 180870447,
        "sender_full_name": "oli",
        "timestamp": 1573851066
    },
    {
        "content": "<p>sure - basically I'm saying that you'd say that for some types maybe we auto do it</p>",
        "id": 180870553,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851136
    },
    {
        "content": "<p>e.g. a repr C struct with <code>u32</code> or so fields</p>",
        "id": 180870560,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851146
    },
    {
        "content": "<p>kk</p>",
        "id": 180870594,
        "sender_full_name": "oli",
        "timestamp": 1573851181
    },
    {
        "content": "<p>but if you get into repr(Rust) types, maybe we error out unless explicitly enabled</p>",
        "id": 180870605,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851185
    },
    {
        "content": "<p>(and that explicit enabler is not unsafe ever, just a stability promise in some sense)</p>",
        "id": 180870624,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851204
    },
    {
        "content": "<p>the compiler can't make that stability promise</p>",
        "id": 180870741,
        "sender_full_name": "oli",
        "timestamp": 1573851257
    },
    {
        "content": "<p>So what I'm getting at is that I'm saying \"I will not make this non-zeroable\"</p>",
        "id": 180870843,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851307
    },
    {
        "content": "<p>e.g. maybe it's repr(Rust) struct</p>",
        "id": 180870900,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851317
    },
    {
        "content": "<p>but I know that it'll always be valid at zero</p>",
        "id": 180870912,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851327
    },
    {
        "content": "<p>ah</p>",
        "id": 180870913,
        "sender_full_name": "oli",
        "timestamp": 1573851327
    },
    {
        "content": "<p>right, but what a zeroed value means may change arbitrarily</p>",
        "id": 180870942,
        "sender_full_name": "oli",
        "timestamp": 1573851341
    },
    {
        "content": "<p>well, for some things, yes</p>",
        "id": 180870954,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851350
    },
    {
        "content": "<p>but e.g. a <code>u32</code> I could imagine we promise is always safe to zero</p>",
        "id": 180870976,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851362
    },
    {
        "content": "<p>yea, also any struct array or tuple I think</p>",
        "id": 180871053,
        "sender_full_name": "oli",
        "timestamp": 1573851377
    },
    {
        "content": "<p>so if I have <code>struct Foo(u32);</code> I could promise that's safe to zero</p>",
        "id": 180871063,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851381
    },
    {
        "content": "<p>I only see problems with enums</p>",
        "id": 180871064,
        "sender_full_name": "oli",
        "timestamp": 1573851381
    },
    {
        "content": "<p>well, things containing enums, right?</p>",
        "id": 180871079,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851390
    },
    {
        "content": "<p>right</p>",
        "id": 180871084,
        "sender_full_name": "oli",
        "timestamp": 1573851395
    },
    {
        "content": "<p>recursively</p>",
        "id": 180871094,
        "sender_full_name": "oli",
        "timestamp": 1573851399
    },
    {
        "content": "<p>Do we optimize structs ever today by reusing padding fields?</p>",
        "id": 180871134,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851425
    },
    {
        "content": "<p>I guess probably no</p>",
        "id": 180871191,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851442
    },
    {
        "content": "<p>since you need to be able to take references</p>",
        "id": 180871226,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851459
    },
    {
        "content": "<p>and in any case we'd never make zero magically invalid I suspect</p>",
        "id": 180871343,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851524
    },
    {
        "content": "<p>yeah, I agree that only enums are presently an issue</p>",
        "id": 180871377,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851546
    },
    {
        "content": "<p>though maybe e.g. references are also interesting</p>",
        "id": 180871404,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851566
    },
    {
        "content": "<p>since we have \"more than one\" bit in them which we currently might assume we're free to use for enum optimization (eventually)</p>",
        "id": 180871421,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851595
    },
    {
        "content": "<p>due to them being well-aligned</p>",
        "id": 180871426,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851601
    },
    {
        "content": "<p>so <code>&amp;Align16</code> has not just zero as an invalid bit pattern</p>",
        "id": 180871492,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851624
    },
    {
        "content": "<p>wait slow down, <a href=\"https://github.com/rust-lang/rust/pull/66059\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66059\">https://github.com/rust-lang/rust/pull/66059</a> Ralf is already working on type based panic if it would be invalid</p>",
        "id": 180871506,
        "sender_full_name": "Lokathor",
        "timestamp": 1573851640
    },
    {
        "content": "<p>right, but that's just at runtime</p>",
        "id": 180871535,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851668
    },
    {
        "content": "<p>we're discussing making <code>zeroed</code> entirely safe</p>",
        "id": 180871537,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851674
    },
    {
        "content": "<p>I'm not sure if that affects the rest of this since you said quite a bit in like 5min XD</p>",
        "id": 180871542,
        "sender_full_name": "Lokathor",
        "timestamp": 1573851678
    },
    {
        "content": "<p>oh, fully safe at compile time</p>",
        "id": 180871553,
        "sender_full_name": "Lokathor",
        "timestamp": 1573851693
    },
    {
        "content": "<p>\"yes please\"</p>",
        "id": 180871558,
        "sender_full_name": "Lokathor",
        "timestamp": 1573851699
    },
    {
        "content": "<p>with a trait!</p>",
        "id": 180871571,
        "sender_full_name": "Lokathor",
        "timestamp": 1573851714
    },
    {
        "content": "<p>I wonder if we could even get e.g. <code>#[repr(ptr_packed)] struct Foo(&amp;Align16, bool, bool, bool, bool);</code> such that the bools go into the ptr 'slots' transparently</p>",
        "id": 180871693,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851803
    },
    {
        "content": "<p>wait how does &amp;Align16 have an invalid bit pattern other than zero?</p>",
        "id": 180871788,
        "sender_full_name": "Lokathor",
        "timestamp": 1573851855
    },
    {
        "content": "<p>you know that the bottom bits of the pointer can never be anything than zero, right?</p>",
        "id": 180871844,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851881
    },
    {
        "content": "<p>e.g. <code>0x1</code> is not a valid value for that reference</p>",
        "id": 180871880,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851894
    },
    {
        "content": "<p>(nor <code>0x.....1</code>, etc.)</p>",
        "id": 180872012,
        "sender_full_name": "simulacrum",
        "timestamp": 1573851992
    },
    {
        "content": "<p>ahhh</p>",
        "id": 180872898,
        "sender_full_name": "Lokathor",
        "timestamp": 1573852591
    },
    {
        "content": "<p>right, so it has a number of bits of niche</p>",
        "id": 180872916,
        "sender_full_name": "Lokathor",
        "timestamp": 1573852606
    },
    {
        "content": "<p>does Rust actually use that currently?</p>",
        "id": 180872926,
        "sender_full_name": "Lokathor",
        "timestamp": 1573852615
    },
    {
        "content": "<p>I believe this is not generally true (currently)</p>",
        "id": 180872930,
        "sender_full_name": "simulacrum",
        "timestamp": 1573852618
    },
    {
        "content": "<p>i.e., we don't use it</p>",
        "id": 180872945,
        "sender_full_name": "simulacrum",
        "timestamp": 1573852625
    },
    {
        "content": "<p>because it means you can't take a reference to that field</p>",
        "id": 180872980,
        "sender_full_name": "simulacrum",
        "timestamp": 1573852654
    },
    {
        "content": "<p>(since then unrelated code would need to not \"just\" dereference it, which has a cost)</p>",
        "id": 180873002,
        "sender_full_name": "simulacrum",
        "timestamp": 1573852671
    },
    {
        "content": "<blockquote>\n<p>I think there's definitely some discussion around that and an auto trait for it</p>\n</blockquote>\n<p>An auto trait would easily brick a crate like <a href=\"https://docs.rs/refl/0.2.0/refl/struct.Id.html\" target=\"_blank\" title=\"https://docs.rs/refl/0.2.0/refl/struct.Id.html\">https://docs.rs/refl/0.2.0/refl/struct.Id.html</a> (if it used <code>*mut T</code> instead of function pointers, which a previous iteration did) rendering it unsound</p>",
        "id": 180879356,
        "sender_full_name": "centril",
        "timestamp": 1573857639
    },
    {
        "content": "<p>it gives you the ability to conjure up values for types that the crate author didn't want to enable</p>",
        "id": 180879392,
        "sender_full_name": "centril",
        "timestamp": 1573857679
    },
    {
        "content": "<p>so it cannot be a safe API</p>",
        "id": 180879406,
        "sender_full_name": "centril",
        "timestamp": 1573857688
    },
    {
        "content": "<p>hm, I think that's not entirely true</p>",
        "id": 180879412,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857705
    },
    {
        "content": "<p>i.e., we could presumably say that such types would need to be disabled somehow for it</p>",
        "id": 180879465,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857726
    },
    {
        "content": "<p>in any case, I think saying that the things you need to guarantee for safety are just \"library conditions on the existence of this type\" are much easier to satisfy, in general, than \"make sure there are no references etc in here anywhere\"</p>",
        "id": 180879508,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857773
    },
    {
        "content": "<p>auto traits work structurally, so you'll need some structural condition to make the implementations unavailable</p>",
        "id": 180879511,
        "sender_full_name": "centril",
        "timestamp": 1573857775
    },
    {
        "content": "<p>I guess that's true, since it would be backwards incompatible</p>",
        "id": 180879526,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857800
    },
    {
        "content": "<p>but even if it stays unsafe but we reduce the things you need to prove that's still pretty amazing</p>",
        "id": 180879539,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857821
    },
    {
        "content": "<p>And Ralf's work here is already moving us closer</p>",
        "id": 180879548,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857834
    },
    {
        "content": "<p>Ralf's PR is cursed ^^</p>",
        "id": 180879606,
        "sender_full_name": "centril",
        "timestamp": 1573857865
    },
    {
        "content": "<p>well it just broke cargo</p>",
        "id": 180879624,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857883
    },
    {
        "content": "<p>i.e., revealed unsoundness in some dep</p>",
        "id": 180879635,
        "sender_full_name": "simulacrum",
        "timestamp": 1573857895
    },
    {
        "content": "<p>fun stuff</p>",
        "id": 180879656,
        "sender_full_name": "centril",
        "timestamp": 1573857912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </p>\n<blockquote>\n<p>hm, but so does uninitialized, right? My impression was that the two are essentially equivalent...</p>\n</blockquote>\n<p>no. <code>mem::uninitialized</code> is pretty much always wrong, including in FFI. there are very few types for this this is not insta-UB. (basically, <code>let m: MaybeUninit&lt;T&gt; = mem::uninitialized();</code> is okay, but that's about it)</p>",
        "id": 180904899,
        "sender_full_name": "RalfJ",
        "timestamp": 1573896423
    },
    {
        "content": "<blockquote>\n<p>sure, I understand that, but I'd expect us to push users towards <code>MaybeUninit::zeroed().assume_init()</code>. I guess that's not really better in any way.</p>\n</blockquote>\n<p>actually <code>mem::zeroed</code> will do better run-time checks once <a href=\"https://github.com/rust-lang/rust/pull/66059\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66059\">https://github.com/rust-lang/rust/pull/66059</a> lands, so between the two of them, <code>mem::zeroed</code> is better ;)<br>\n<code>MaybeUninit</code> provides type-based tracking of initializedness; if you don't need that for correctness (which can indeed be the case if 0-initialization is allowed for your types), there is no reason to use it.</p>\n<blockquote>\n<p>though arguably you should pass the ptr into FFI if you can rather than the zeroed struct (and then afterwards assume_init())</p>\n</blockquote>\n<p>yes.</p>",
        "id": 180904947,
        "sender_full_name": "RalfJ",
        "timestamp": 1573896512
    },
    {
        "content": "<p>so I am actually fine with making <code>mem::zeroed</code> a <code>const fn</code> (maybe we could hack something to do a full validity check for such values, which generally for perf reasons we do not do in CTFE). however I'd prefer to not implement the <code>init</code> intrinsic in CTFE, it's quite a mess; instead we should implement <code>mem::zeroed</code> as <code>MaybeUninit::zeroed().assume_init()</code> and make the latter a <code>const fn</code>.</p>",
        "id": 180905103,
        "sender_full_name": "RalfJ",
        "timestamp": 1573896768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I like your idea :) I think using <code>repr(C)</code> is better than a Zeroable trait.<br>\n(although it might push some users to start putting <code>repr(C)</code> just to be able to zeroize)<br>\nthat way we can just lint if <code>mem::zeroed()</code>  is used on any non <code>repr(C)</code> type</p>",
        "id": 181287490,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574328083
    },
    {
        "content": "<p>repr(C) is not an appropriate way to track if a type can be zeroed</p>",
        "id": 181717430,
        "sender_full_name": "Lokathor",
        "timestamp": 1574518513
    }
]