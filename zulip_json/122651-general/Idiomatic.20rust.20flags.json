[
    {
        "content": "<p>Do we have a idiomatic way of maintaining flags?<br>\nenums are great for anything that's mutually exclusive, but it isn't great for things that can aggregate,<br>\nso you either do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Flags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">One</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Two</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Three</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OneTwo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OneThree</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Note that Two and Three are mutually exclusive</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>another option is to seperate the flags into multiple enums and a struct, but the memory representation of that is currently not optimial (<a href=\"https://play.rust-lang.org/?gist=1650ccb51fa1311b86f2678aaf9206f4\">https://play.rust-lang.org/?gist=1650ccb51fa1311b86f2678aaf9206f4</a>)<br>\nThis still allows mutually exclusive flags (you can only choose a single write flag in my example)</p>\n<p>The last option is crates like <code>bitflags</code> but I have 2 problems with those:</p>\n<ol>\n<li>It doesn't allow mutually exclusive flags.</li>\n<li>It exposes an implementation detail that I don't care about (choosing sizes and bits).</li>\n</ol>\n<p>The 2nd one is the important problem IMHO, rust doesn't have layout guarantees exactly because of that, to allow great optimizations depending on the usage and on niche.</p>\n<p>Would love to hear thoughts, either on other ways to do this or on ideas for new language features to allow this</p>",
        "id": 242873812,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1623847124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> your \"struct and enums\" idea seems good, it sounds like the only drawback was the memory layout? That could be improved without language changes.</p>",
        "id": 242876480,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623848566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Idiomatic.20rust.20flags/near/242876480\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> your \"struct and enums\" idea seems good, it sounds like the only drawback was the memory layout? That could be improved without language changes.</p>\n</blockquote>\n<p>The main downside of that approach is that it requires writing a lot of boilerplate code, and using the result is also not too nice. (altough with complex match expressions you might be able to do some cool things)</p>",
        "id": 242878512,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1623849517
    },
    {
        "content": "<p>Looks like the compiler just does it as a newtype over an integer, and some constants: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ReprFlags.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ReprFlags.html</a></p>\n<p>As for the language change, it'd probably be this: <a href=\"https://internals.rust-lang.org/t/towards-even-smaller-structs/14686/3?u=scottmcm\">https://internals.rust-lang.org/t/towards-even-smaller-structs/14686/3?u=scottmcm</a></p>",
        "id": 242914535,
        "sender_full_name": "scottmcm",
        "timestamp": 1623864586
    }
]