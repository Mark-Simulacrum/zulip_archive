[
    {
        "content": "<p>Hi, a question that probably has been asked and answered before, but I couldn't find a real answer nonetheless: </p>\n<p>I like distribution packages and the simplicity of \"zypper install rust\". And I'd like to develop for the riscv32imc-unknown-none-elf target (cross-compile to it). The distribution package provides me with a rustc which can emit code for that target. Now to get things working I also need a libcore for that target. </p>\n<p>I could use \"rustup target add riscv32imc-unknown-none-elf\" with some additional flags to use the distro-provided rustc, but then that seems to be non-ideal as well: rustup is not packaged in most distributions (and by intentionally so, it seems), and it seems to be not encouraging that use case either.</p>\n<p>So the question would be: What does the rust team think of a \"proper\" solution there? Should distributions somehow package libcore for such targets as well? And if so, how would that work/are there examples out there doing that?</p>",
        "id": 226642325,
        "sender_full_name": "Philipp Wagner",
        "timestamp": 1613560508
    },
    {
        "content": "<p>I haven't heard of anyone doing this without either rustup or <code>-Z build-std</code>. I don't think nightly is packaged, so <code>build-std</code> won't work.</p>",
        "id": 226672251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613575537
    },
    {
        "content": "<p>I suspect that rustup not being packaged isn't because nobody wants it, just because it isn't trivial to package. It isn't on <a href=\"http://crates.io\">crates.io</a> for instance.</p>",
        "id": 226694247,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583252
    },
    {
        "content": "<p>It's reasonable to want to install rustup via a distro package manager.</p>",
        "id": 226694311,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583279
    },
    {
        "content": "<p>That provides a chain of trust.</p>",
        "id": 226694325,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583287
    },
    {
        "content": "<p>As far as I know rustup doesn't verify the signature of the toolchains it installs.</p>",
        "id": 226694685,
        "sender_full_name": "bjorn3",
        "timestamp": 1613583415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I got my impression after reading (your) GitHub issue <a href=\"https://github.com/rust-lang/rustup/issues/835\">https://github.com/rust-lang/rustup/issues/835</a> and related discussions such as <a href=\"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=955208\">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=955208</a>. </p>\n<p>And then I realized that actually the distro-provided rustc is fine, it's just the libcore that is missing. So if we could just build some/all libcore for the different cross-targets and include it in the distro package (or as subpackage) then <br>\nthere would be no need to install them after the fact at all.</p>",
        "id": 226695184,
        "sender_full_name": "Philipp Wagner",
        "timestamp": 1613583575
    },
    {
        "content": "<p>This is true. If you're working with distro rustc, the ideal scenario would be for that rustc to ship all the targets you care about.</p>",
        "id": 226698995,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613585117
    },
    {
        "content": "<p>For instance, Debian ships <code>libstd-rust-dev-wasm32</code> and <code>libstd-rust-dev-windows</code>.</p>",
        "id": 226699242,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613585220
    },
    {
        "content": "<p>Ah, great pointer! Thanks <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  I didn't find those in Debian before, but that's exactly the approach I was thinking about. I'll try to adopt that to add a riscv32 libcore package.</p>",
        "id": 226700362,
        "sender_full_name": "Philipp Wagner",
        "timestamp": 1613585657
    }
]