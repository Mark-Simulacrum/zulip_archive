[
    {
        "content": "<p>Hi,</p>\n<p>In our code we have a <code>struct State</code>. Since the library we're using requires a cheap <code>Clone</code> implementation (so that the state can be given to multiple workers), we're using <code>Arc&lt;RwLock&lt;...&gt;&gt;</code> for the interior fields, like </p>\n<div class=\"codehilite\"><pre><span></span><code>struct State {\n    user_data: Arc&lt;RwLock&lt;HashMap&lt;String, u64&gt;&gt;&gt;,\n}\n</code></pre></div>\n<p>We also have convenience method for modifying the state, something like </p>\n<div class=\"codehilite\"><pre><span></span><code>impl State {\n    pub async fn update_data(&amp;self, user: &amp;str) {\n        let entry = self.user_data.write().await.entry();\n        /* modify the entry */\n    }\n}\n</code></pre></div>\n<p>We currently disagree whether the methods should rather be </p>\n<div class=\"codehilite\"><pre><span></span><code>pub async fn update_data(&amp;mut self, user: &amp;str)\n</code></pre></div>\n<p>since the method clearly changes the interior state. On the other hand, many rust projects only require an immutable borrow of self whenever <code>RwLock</code>, for instance <a href=\"https://github.com/smallnest/rpcx-rs/blob/master/rpcx_client/src/discovery.rs\">this one</a>. This probably stems from the fact that, once <code>RwLock</code> is employed, there are no memory safety issues coming from the use of <code>&amp;self</code>.</p>\n<p>Which way is more preferable in Rust?</p>",
        "id": 260396121,
        "sender_full_name": "Marcin Mielniczuk",
        "timestamp": 1636113725
    }
]