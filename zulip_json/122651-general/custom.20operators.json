[
    {
        "content": "<p>Hello! do we have any Pre-RFC / RFC about custom operators with custom precedence and fixity in Rust? I know it scares a bunch of people but it would be so practical… I’m currently writing an EDSL in Rust and it’s truly painful. For instance, I cannot override the <code>==</code> operator (<code>Eq</code> + <code>PartialEq</code>) because they return <code>bool</code> while I need <code>Expr&lt;bool&gt;</code>. The only sane way I know how to fix that is what we do in Haskell: define a custom operator, let’s say <code>.==</code>, that would have the correct type.</p>\n<p>Is there any work regarding that matter already? If no, I’d be willing to start writing a Pre-RFC.</p>",
        "id": 220023065,
        "sender_full_name": "phaazon",
        "timestamp": 1608057593
    },
    {
        "content": "<p>Have you tried using a macro?</p>",
        "id": 220023709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608057951
    },
    {
        "content": "<p>If you want to use the same operators as rust does but give them new meaning, it shouldn't be so bad especially if you use a procedural macro</p>",
        "id": 220023893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058038
    },
    {
        "content": "<p>I will say that I think operator overloading is somewhat discouraged by the community. Typically operators are only used when the meaning is very straight-forwarded (e.g., I might implement PartialEq for my Point type because equating two points is extremely straight forwarded). Many types in Rust don't support <code>=</code>, like raw pointers which have an <code>.eq</code> method instead.</p>",
        "id": 220024894,
        "sender_full_name": "rylev",
        "timestamp": 1608058512
    },
    {
        "content": "<p>yes, I have some macros</p>",
        "id": 220024911,
        "sender_full_name": "phaazon",
        "timestamp": 1608058519
    },
    {
        "content": "<p>for an EDSL, using <code>.eq</code> is not really what I want</p>",
        "id": 220024980,
        "sender_full_name": "phaazon",
        "timestamp": 1608058549
    },
    {
        "content": "<p>right now I have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220025059,
        "sender_full_name": "phaazon",
        "timestamp": 1608058567
    },
    {
        "content": "<p>but I’m not really satisfied with this</p>",
        "id": 220025067,
        "sender_full_name": "phaazon",
        "timestamp": 1608058571
    },
    {
        "content": "<p>I could also be using a proc-macro, but it’s not really the direction I want to take right now</p>",
        "id": 220025095,
        "sender_full_name": "phaazon",
        "timestamp": 1608058587
    },
    {
        "content": "<p>I was thinking more like an attribute on a full function containing many of your DSL ops</p>",
        "id": 220025209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058650
    },
    {
        "content": "<p>yes, a proc-macro</p>",
        "id": 220025292,
        "sender_full_name": "phaazon",
        "timestamp": 1608058685
    },
    {
        "content": "<p>(i.e. a function attribute proc-macro)</p>",
        "id": 220025304,
        "sender_full_name": "phaazon",
        "timestamp": 1608058690
    },
    {
        "content": "<p>what do you want the interface to look like?</p>",
        "id": 220025395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058743
    },
    {
        "content": "<p>the closest to Rust</p>",
        "id": 220025583,
        "sender_full_name": "phaazon",
        "timestamp": 1608058826
    },
    {
        "content": "<p>right now, besides a bunch of exception and thanks to type inference</p>",
        "id": 220025608,
        "sender_full_name": "phaazon",
        "timestamp": 1608058836
    },
    {
        "content": "<p>you don’t really see the difference between regular Rust expressions and the EDSL expressions</p>",
        "id": 220025633,
        "sender_full_name": "phaazon",
        "timestamp": 1608058847
    },
    {
        "content": "<p>it gets more complicated with the statements, though</p>",
        "id": 220025657,
        "sender_full_name": "phaazon",
        "timestamp": 1608058856
    },
    {
        "content": "<p>that seems like something a function attribute macro would do well with</p>",
        "id": 220025707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058872
    },
    {
        "content": "<p>I have to have a <code>&amp;mut T</code> on an opaque <code>T</code>, accumulating the state</p>",
        "id": 220025709,
        "sender_full_name": "phaazon",
        "timestamp": 1608058873
    },
    {
        "content": "<p>probably, yes</p>",
        "id": 220025737,
        "sender_full_name": "phaazon",
        "timestamp": 1608058886
    },
    {
        "content": "<p>because you have all the usual structures of a function but they have new meaning</p>",
        "id": 220025765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058894
    },
    {
        "content": "<p>I will investigate, I’ve written proc-macros already, it shouldn’t be too hard to do</p>",
        "id": 220025791,
        "sender_full_name": "phaazon",
        "timestamp": 1608058912
    },
    {
        "content": "<p>the problem with the proc-macro is that it makes it semi-magical</p>",
        "id": 220025919,
        "sender_full_name": "phaazon",
        "timestamp": 1608058957
    },
    {
        "content": "<p>and very hard to mix “normal” Rust expressions with the lifted ones into the EDSL</p>",
        "id": 220025955,
        "sender_full_name": "phaazon",
        "timestamp": 1608058971
    },
    {
        "content": "<p>I agree with Ryan though that this is the sort of thing folks will frown on</p>",
        "id": 220025959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058971
    },
    {
        "content": "<p>because it <em>is</em> magical</p>",
        "id": 220026028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608058995
    },
    {
        "content": "<p>Another option is to delimit the macro to block scope</p>",
        "id": 220026112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059031
    },
    {
        "content": "<p>for instance right now, if <code>x: Expr&lt;i32&gt;</code>, I can write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220026120,
        "sender_full_name": "phaazon",
        "timestamp": 1608059035
    },
    {
        "content": "<p><code>z</code> gets lifted into the EDSL without too much sugar</p>",
        "id": 220026200,
        "sender_full_name": "phaazon",
        "timestamp": 1608059060
    },
    {
        "content": "<p>that looks pretty magical to me</p>",
        "id": 220026212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059066
    },
    {
        "content": "<p>if it's not actually adding something there</p>",
        "id": 220026237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059080
    },
    {
        "content": "<p>while with a proc-macro… it would difficult to know whether <code>3</code> should be in the EDSL, or not</p>",
        "id": 220026249,
        "sender_full_name": "phaazon",
        "timestamp": 1608059087
    },
    {
        "content": "<p>yes, it’s building an EDSL</p>",
        "id": 220026264,
        "sender_full_name": "phaazon",
        "timestamp": 1608059096
    },
    {
        "content": "<p>that’s the whole purpose of an EDSL and why I would have preferred custom operators</p>",
        "id": 220026298,
        "sender_full_name": "phaazon",
        "timestamp": 1608059109
    },
    {
        "content": "<p>so that I could have, for instance, <code>.+</code></p>",
        "id": 220026307,
        "sender_full_name": "phaazon",
        "timestamp": 1608059114
    },
    {
        "content": "<p><code>.==</code>, etc.</p>",
        "id": 220026315,
        "sender_full_name": "phaazon",
        "timestamp": 1608059117
    },
    {
        "content": "<p>but you can do <code>let y = expr! { x + 3 };</code></p>",
        "id": 220026399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059159
    },
    {
        "content": "<p>and maybe put more statements in the block to make it more interesting</p>",
        "id": 220026466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059176
    },
    {
        "content": "<p>and now the code is clear that there is some magic happening and <code>x</code> was not actually added to <code>3</code></p>",
        "id": 220026528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059210
    },
    {
        "content": "<p>that’s the current behavior</p>",
        "id": 220026717,
        "sender_full_name": "phaazon",
        "timestamp": 1608059296
    },
    {
        "content": "<p>because this doesn’t work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220026742,
        "sender_full_name": "phaazon",
        "timestamp": 1608059308
    },
    {
        "content": "<p>it’s ambiguous</p>",
        "id": 220026748,
        "sender_full_name": "phaazon",
        "timestamp": 1608059315
    },
    {
        "content": "<p>so what's the problem then?</p>",
        "id": 220026774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059328
    },
    {
        "content": "<p>it could be <code>Expr 1 + Expr 2</code> or <code>Expr (1 + 2)</code></p>",
        "id": 220026775,
        "sender_full_name": "phaazon",
        "timestamp": 1608059328
    },
    {
        "content": "<p>for this situation I have <code>lit!()</code></p>",
        "id": 220026793,
        "sender_full_name": "phaazon",
        "timestamp": 1608059335
    },
    {
        "content": "<p>so I guess I’ll have to use the same trick  for <code>==</code> etc.</p>",
        "id": 220026812,
        "sender_full_name": "phaazon",
        "timestamp": 1608059344
    },
    {
        "content": "<p>it would have been just better to have access to custom operators <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 220026832,
        "sender_full_name": "phaazon",
        "timestamp": 1608059357
    },
    {
        "content": "<p>You can still have custom operators in your macro</p>",
        "id": 220026867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059375
    },
    {
        "content": "<p>but you can also just steal the builtins</p>",
        "id": 220026883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059386
    },
    {
        "content": "<p>just spitballing here, <code>expr! { x + eval(1 + 2) }</code> if you want to do evaluation/antiquoting in the middle of the expression (or maybe find a sigil that works there)</p>",
        "id": 220027066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059470
    },
    {
        "content": "<p>I suppose you can look to the <code>quote!</code> macro for inspiration</p>",
        "id": 220027119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059503
    },
    {
        "content": "<p>Of course none of this really answers your question. I think it would be great if rust supported custom operators a la haskell, although it might be hard to change the lexer in the middle of processing a crate</p>",
        "id": 220027614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059737
    },
    {
        "content": "<p>it also makes it harder for future RFCs to invent new syntax if it can all potentially be used by users already</p>",
        "id": 220027833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608059844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282041\">phaazon</span> <a href=\"#narrow/stream/122651-general/topic/custom.20operators/near/220023065\">said</a>:</p>\n<blockquote>\n<p>For instance, I cannot override the <code>==</code> operator (<code>Eq</code> + <code>PartialEq</code>) because they return <code>bool</code> while I need <code>Expr&lt;bool&gt;</code>. The only sane way I know how to fix that is what we do in Haskell: define a custom operator, let’s say <code>.==</code>, that would have the correct type.</p>\n</blockquote>\n<p>How tied are you to it being a different operator?  If <code>PartialEq</code> <em>could</em> return a different type, would that be enough?</p>\n<p>(An associated type that defaults to <code>bool</code> might be a more palatable change for people.)</p>",
        "id": 220030877,
        "sender_full_name": "scottmcm",
        "timestamp": 1608061052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> it would be enough, yes</p>",
        "id": 220032867,
        "sender_full_name": "phaazon",
        "timestamp": 1608062035
    },
    {
        "content": "<p>like what I already do with <code>+</code>, <code>-</code>, etc.</p>",
        "id": 220032885,
        "sender_full_name": "phaazon",
        "timestamp": 1608062042
    },
    {
        "content": "<p>but the problem is also the same for <code>&lt;</code>, <code>&gt;</code>, etc.</p>",
        "id": 220032935,
        "sender_full_name": "phaazon",
        "timestamp": 1608062052
    },
    {
        "content": "<p>(they return <code>Option&lt;Ordering&gt;</code>, basically)</p>",
        "id": 220032955,
        "sender_full_name": "phaazon",
        "timestamp": 1608062065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> yes I agree that it makes it harder to introduce new syntax without breaking change, but we have editions for this, don’t we? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220033064,
        "sender_full_name": "phaazon",
        "timestamp": 1608062122
    }
]