[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">literal</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">N</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>error[E0770]: the type of const parameters must not depend on other generic parameters\n  --&gt; src/main.rs:12:30\n   |\n12 | const fn literal&lt;T, const N: T&gt;() -&gt; T {\n   |                              ^ the type must not depend on the parameter `T`\n</code></pre></div>\n\n\n<p>Is this a hard limitation or a \"we haven't done it yet\" limitation?</p>",
        "id": 206145080,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596722676
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74152\">https://github.com/rust-lang/rust/issues/74152</a></p>\n<blockquote>\n<p>While we may want to support this in the future, this should not be part of the MVP and causes a lot of problems with our current approach. It causes both ICE ICE baby and breaks <code>foo&lt;const N: [u8; { 1+ 4 }]&gt;()</code> because <code>{ 1 + 4 }</code> contains <code>N</code> itself in its substitutions.</p>\n</blockquote>",
        "id": 206152297,
        "sender_full_name": "kennytm",
        "timestamp": 1596725838
    },
    {
        "content": "<p>Sounds good, thanks!</p>",
        "id": 206152371,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596725877
    },
    {
        "content": "<p>My case was something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[serde(default = </span><span class=\"s\">&quot;literal::&lt;_, 42&gt;&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206152491,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596725923
    },
    {
        "content": "<p>Sem-related: I wish serde just let you provide a literal directly. Serde's proc macro API could be a bit more user friendly.</p>",
        "id": 206171725,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1596734945
    },
    {
        "content": "<p>It certainly could be extended. I was surprised that <code>#[serde(default = \"|| 42\")]</code> didn't work.</p>",
        "id": 206188712,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596743639
    },
    {
        "content": "<p>That's a fun trick I allow for in SNAFU for converting error types</p>",
        "id": 206188779,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596743660
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[snafu(from(Box::new))]</span><span class=\"w\"></span>\n<span class=\"c1\">// or</span>\n<span class=\"cp\">#[snafu(from(|a| whatever_you_want))]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206188846,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596743697
    },
    {
        "content": "<p>But serde's method allows earlier error reporting</p>",
        "id": 206188999,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596743780
    }
]