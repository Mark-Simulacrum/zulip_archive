[
    {
        "content": "<p>How strong are the aliasing guarantees on pointers (<code>*mut T</code>).</p>\n<p>Is it correct that I can hand out to <code>*mut T</code> to the same <code>T</code> as long as I make sure<br>\nthat I will not access them at the same time?</p>\n<p>I'm fully aware about the aliasing guarantees of a <code>&amp;mut T</code>.</p>\n<p>The rust reference: </p>\n<blockquote>\n<p>[..] without safety or liveness guarantees [..]</p>\n</blockquote>\n<p>And while we are at it what about alignment? With DSTs there are some situations where you might have miss alised pointers, but then they are normally <code>*mut ()</code> or <code>*mut u8</code> so it doesn't matter much still it would be good to know.</p>",
        "id": 212104027,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601659545
    },
    {
        "content": "<p>I'm pretty sure that the guarantees around <code>*mut T</code> are the same as <code>*const T</code>; it's mostly a thing to help with type inference and readability</p>",
        "id": 212116519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601666270
    },
    {
        "content": "<p>A raw pointer is not required to be aligned unless you dereference it</p>",
        "id": 212116601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601666302
    },
    {
        "content": "<p>there are no aliasing guarantees on <code>*mut T</code></p>",
        "id": 212119500,
        "sender_full_name": "lcnr",
        "timestamp": 1601667763
    },
    {
        "content": "<p>the biggest difference between <code>*mut T</code> and <code>*const T</code> is that <code>*mut T</code> is invariant while <code>*const T</code> is covariant</p>",
        "id": 212119560,
        "sender_full_name": "lcnr",
        "timestamp": 1601667791
    },
    {
        "content": "<p>and no alignment guarantees, so <code>1 as *mut u64</code> is sound</p>",
        "id": 212119769,
        "sender_full_name": "lcnr",
        "timestamp": 1601667897
    },
    {
        "content": "<p>Thanks a lot <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  this cleared up some questions I had.</p>",
        "id": 212120342,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601668257
    },
    {
        "content": "<p>Said otherwise, pointers themselves have neither <a href=\"https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html\">safety nor validity invariants</a>.  (As evidenced by the fact that <code>some_usize as *const Whatever</code> is legal safe code that never fails.)  <em>Dereferencing</em> them has preconditions, of course, but the values themselves are unconstrained.</p>",
        "id": 212127531,
        "sender_full_name": "scottmcm",
        "timestamp": 1601671956
    },
    {
        "content": "<p>Though, not ably, I think we have not yet decided if that is true of <em>unsized</em> pointers, i.e., if the unsized metadata needs to be valid or not.</p>",
        "id": 212127940,
        "sender_full_name": "simulacrum",
        "timestamp": 1601672185
    },
    {
        "content": "<p>that came up in the debate whether <code>ptr::is_null</code> should look at metadata -- I thought there were reasons why the vtable had to be valid</p>",
        "id": 212131009,
        "sender_full_name": "cuviper",
        "timestamp": 1601674114
    },
    {
        "content": "<p>and similarly, <code>ptr::null</code> and <code>NonNull::dangling</code> require <code>T: Sized</code></p>",
        "id": 212131090,
        "sender_full_name": "cuviper",
        "timestamp": 1601674169
    },
    {
        "content": "<blockquote>\n<p>not yet decided if that is true of unsized pointers</p>\n</blockquote>\n<p>With the way <a href=\"https://github.com/rust-lang/rfcs/pull/2580\">PR/RFC 2580</a> is currently designed it would not be true, i.e. the vtable pointer would be a valid pointer but not necessary for the right vtable.</p>\n<p>The reason for this is that <code>&lt;*const/mut T&gt;::from_raw_parts</code> is not unsafe and the <code>dyn Trait</code> DST metadata is not generic over which trait it is. </p>\n<p>So you can safely create a <code>*const FooTrait</code> with a vtable from <code>*const BarTrait</code>.</p>\n<p>Maybe we need to mark the <code>from_raw_parts</code> functions  as unsafe?</p>",
        "id": 212134595,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601676694
    },
    {
        "content": "<p>I think there was also a point about <code>*const Self</code> and <code>*mut Self</code> being method receivers in a trait object</p>",
        "id": 212135028,
        "sender_full_name": "cuviper",
        "timestamp": 1601677004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209646\">@Philipp Korber</span> I'm not sure what functions you're talking about -- I think we only have std::ptr::slice_from_raw_parts? That one is usize/usize tuple which has less invalid restrictions that I could see us wanting to exploit</p>",
        "id": 212140561,
        "sender_full_name": "simulacrum",
        "timestamp": 1601681383
    },
    {
        "content": "<p>the linked RFC proposes those methods</p>",
        "id": 212140621,
        "sender_full_name": "cuviper",
        "timestamp": 1601681413
    },
    {
        "content": "<p>oh, okay</p>",
        "id": 212140627,
        "sender_full_name": "simulacrum",
        "timestamp": 1601681424
    }
]