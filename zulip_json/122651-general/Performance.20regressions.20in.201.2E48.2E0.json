[
    {
        "content": "<p>Hello!<br>\nHas anyone else noticed performance regressions with last stable version? My macro benchmarks shows up to 13% regressions. I will _try_ to isolate the issue.<br>\nBut I mostly wondered if anyone else had notice a similar thing?</p>",
        "id": 217397065,
        "sender_full_name": "marmeladema",
        "timestamp": 1605877056
    },
    {
        "content": "<p>Compile or runtime performance?</p>",
        "id": 217399125,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1605878273
    },
    {
        "content": "<p>Runtime performance of a rust project built by rustc</p>",
        "id": 217402819,
        "sender_full_name": "marmeladema",
        "timestamp": 1605880281
    },
    {
        "content": "<p>if it's runtime performance, I am confused by the mention of macros</p>",
        "id": 217405154,
        "sender_full_name": "simulacrum",
        "timestamp": 1605881423
    },
    {
        "content": "<p>Sorry for the confusion. I meant macro benchmark as opposed to micro benchmark</p>",
        "id": 217406211,
        "sender_full_name": "marmeladema",
        "timestamp": 1605881994
    },
    {
        "content": "<p>Now that I reread it with your perspective, I can see how confusing that can be^^</p>",
        "id": 217406319,
        "sender_full_name": "marmeladema",
        "timestamp": 1605882036
    },
    {
        "content": "<p>Isolating would be great.</p>",
        "id": 217406605,
        "sender_full_name": "simulacrum",
        "timestamp": 1605882197
    },
    {
        "content": "<p>Is there a bisecting script/tool that I could re-use to build my project with all nightly versions between 1.47 to 1.48?</p>",
        "id": 217421017,
        "sender_full_name": "marmeladema",
        "timestamp": 1605888523
    },
    {
        "content": "<p>there is, <a href=\"https://github.com/rust-lang/cargo-bisect-rustc/\">https://github.com/rust-lang/cargo-bisect-rustc/</a></p>",
        "id": 217421068,
        "sender_full_name": "lqd",
        "timestamp": 1605888547
    },
    {
        "content": "<p>ah! nice!</p>",
        "id": 217421107,
        "sender_full_name": "marmeladema",
        "timestamp": 1605888570
    },
    {
        "content": "<p>Thank you very much! That looks really helpful. I will first try to reproduce the slowdown locally with a script</p>",
        "id": 217422495,
        "sender_full_name": "marmeladema",
        "timestamp": 1605889062
    },
    {
        "content": "<p>Ok, I can reproduce locally :)</p>",
        "id": 217436736,
        "sender_full_name": "marmeladema",
        "timestamp": 1605895084
    },
    {
        "content": "<p>So I have written my <a href=\"http://bisect.sh\">bisect.sh</a> script and tried to use <code>cargo-bisect-rustc</code> with the following commits:</p>\n<ul>\n<li>start = 1.47.0 = <a href=\"https://github.com/rust-lang/rust/commit/18bf6b4f01a6feaf7259ba7cdae58031af1b7b39\">18bf6b4f01a6feaf7259ba7cdae58031af1b7b39</a></li>\n<li>end = 1.48.0 = <a href=\"https://github.com/rust-lang/rust/commit/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\">7eac88abb2e57e752f3302f02be5f3ce3d7adfb4</a><br>\nand here is what I got:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo-bisect-rustc --by-commit --start=18bf6b4f01a6feaf7259ba7cdae58031af1b7b39 --end=7eac88abb2e57e752f3302f02be5f3ce3d7adfb4 --script=./bisect.sh\nbisecting ci builds\nstarting at 18bf6b4f01a6feaf7259ba7cdae58031af1b7b39, ending at 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\ncloning rust repository\nfetching (via local git) commits from 18bf6b4f01a6feaf7259ba7cdae58031af1b7b39 to 7eac88abb2e57e752f3302f02be5f3ce3d7adfb4\nopening existing repository at &quot;rust.git&quot;\nrefreshing repository\nlooking up first commit\nlooking up second commit\nchecking that commits are by bors and thus have ci artifacts...\nfinding bors merge commits\nERROR: failed during attempt to create/access local git repository: Expected author Brian Anderson to be bors for beb9a0dfc52ebda4f8db4e5d439e08e4f3a43a39\n</code></pre></div>",
        "id": 217439558,
        "sender_full_name": "marmeladema",
        "timestamp": 1605896453
    },
    {
        "content": "<p>Those commits are matching with the tags on github: <a href=\"https://github.com/rust-lang/rust/tags\">https://github.com/rust-lang/rust/tags</a></p>",
        "id": 217439889,
        "sender_full_name": "marmeladema",
        "timestamp": 1605896626
    },
    {
        "content": "<p>I would not try to pass explicit start/end, just bisect normally.</p>",
        "id": 217441026,
        "sender_full_name": "simulacrum",
        "timestamp": 1605897204
    },
    {
        "content": "<p>I have never used that tool, so I don't really know what is the \"normal\" way to use it. I just followed to guide provided on the repo: <a href=\"https://github.com/rust-lang/cargo-bisect-rustc/blob/master/TUTORIAL.md\">https://github.com/rust-lang/cargo-bisect-rustc/blob/master/TUTORIAL.md</a></p>",
        "id": 217441149,
        "sender_full_name": "marmeladema",
        "timestamp": 1605897267
    },
    {
        "content": "<p>yeah try with the start and end dates like shown there</p>",
        "id": 217441267,
        "sender_full_name": "lqd",
        "timestamp": 1605897329
    },
    {
        "content": "<p>Ok, used <code>cargo bisect-rustc --script=./bisect.sh --end=2020-11-16</code></p>",
        "id": 217441672,
        "sender_full_name": "marmeladema",
        "timestamp": 1605897542
    },
    {
        "content": "<p>Since rustup says <code>rustc 1.48.0 (7eac88abb 2020-11-16)</code></p>",
        "id": 217441735,
        "sender_full_name": "marmeladema",
        "timestamp": 1605897572
    },
    {
        "content": "<p>I mean you don't need to pass explicit start/end, it should be fine without that</p>",
        "id": 217442393,
        "sender_full_name": "simulacrum",
        "timestamp": 1605897928
    },
    {
        "content": "<p>Ok, well it has started with --end=2020-11-16 so i'll keep it running like that for now</p>",
        "id": 217442544,
        "sender_full_name": "marmeladema",
        "timestamp": 1605897991
    },
    {
        "content": "<p>each build/test take 5/6min so I think it will run for a while</p>",
        "id": 217442578,
        "sender_full_name": "marmeladema",
        "timestamp": 1605898010
    },
    {
        "content": "<p>as long it's not using commits it's not going to change much</p>",
        "id": 217442579,
        "sender_full_name": "lqd",
        "timestamp": 1605898010
    },
    {
        "content": "<p>Just for my knowledge though, when it says: \"RESULT: nightly-2020-11-16, ===&gt; Yes\" that means the bug was reproduced by that version?<br>\ni.e: that the <a href=\"http://bisect.sh\">bisect.sh</a> script returned != 0 ?</p>",
        "id": 217442695,
        "sender_full_name": "marmeladema",
        "timestamp": 1605898082
    },
    {
        "content": "<p>IIRC yes</p>",
        "id": 217442885,
        "sender_full_name": "lqd",
        "timestamp": 1605898172
    },
    {
        "content": "<p>Ok thanks :)</p>",
        "id": 217443029,
        "sender_full_name": "marmeladema",
        "timestamp": 1605898238
    },
    {
        "content": "<p>Bisection has ended and points to <a href=\"https://github.com/rust-lang/rust/commit/0d0f6b113047b2cf9afbde990cee30fd5b866469\">https://github.com/rust-lang/rust/commit/0d0f6b113047b2cf9afbde990cee30fd5b866469</a></p>",
        "id": 217457639,
        "sender_full_name": "marmeladema",
        "timestamp": 1605905798
    },
    {
        "content": "<p>The code that regressed is unfortunately not open source so I am not sure if I will be able to provide a standalone and minimized example to reproduce it</p>",
        "id": 217457682,
        "sender_full_name": "marmeladema",
        "timestamp": 1605905839
    },
    {
        "content": "<p>What would be the way forward?</p>",
        "id": 217457767,
        "sender_full_name": "marmeladema",
        "timestamp": 1605905884
    },
    {
        "content": "<p>Without some way of reproducing the slowdown, getting it fixed seems unlikely</p>",
        "id": 217459423,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1605906772
    },
    {
        "content": "<p>I will do my best, but that won't be easy :/</p>",
        "id": 217459666,
        "sender_full_name": "marmeladema",
        "timestamp": 1605906889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> perhaps <a href=\"https://github.com/shepmaster/rust-mre\">https://github.com/shepmaster/rust-mre</a> can help.</p>",
        "id": 217460278,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605907221
    },
    {
        "content": "<p>There are also automated reduction tools.</p>",
        "id": 217460297,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605907229
    },
    {
        "content": "<p>Great! Thank you! I will try that in the next couple of days (or next week...)<br>\nIn the mean time, I have created <a href=\"https://github.com/rust-lang/rust/issues/79246\">https://github.com/rust-lang/rust/issues/79246</a></p>",
        "id": 217460642,
        "sender_full_name": "marmeladema",
        "timestamp": 1605907408
    },
    {
        "content": "<p>To be honest, when you look at the numbers in the PR, it's already suspicious, on average -0.7% and +0.3% does not seem like a real improvement.</p>",
        "id": 217461085,
        "sender_full_name": "marmeladema",
        "timestamp": 1605907668
    },
    {
        "content": "<p>Avoiding the system allocator can be a huge win on some platforms. (On macos in particular, due to <code>free</code> being required to check with every registered malloc_zone_t).</p>\n<p>The rustc-bench stuff will be on linux when using jemalloc, which won't have those problems and have very cheap allocs.</p>",
        "id": 217464702,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605909853
    },
    {
        "content": "<p>Not sure which perf results you're looking at, there are much larger wins than -0.7%. The last measurements for that PR can be found here: <a href=\"https://perf.rust-lang.org/compare.html?start=62dad457bc73804891c6ac9a31f90de19cbb59a3&amp;end=0d0f6b113047b2cf9afbde990cee30fd5b866469&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=62dad457bc73804891c6ac9a31f90de19cbb59a3&amp;end=0d0f6b113047b2cf9afbde990cee30fd5b866469&amp;stat=instructions:u</a></p>",
        "id": 217497453,
        "sender_full_name": "The 8472",
        "timestamp": 1605957536
    },
    {
        "content": "<p>Yeah I looked at those afterwards<br>\nIt's a mix of improvements and regression, but improvements <em>seem</em> to overweight the regressions.<br>\nEven the biggest regressions don't show up as +16%</p>",
        "id": 217498104,
        "sender_full_name": "marmeladema",
        "timestamp": 1605958701
    },
    {
        "content": "<p>So preliminary results shows that the regressions are actually in the <code>bitvec</code> crate. My code is using version <code>0.17.4</code> which is quite \"old\". <br>\nWith rust 1.47.0, most of the time is spent in:</p>\n<ul>\n<li>\n<p><code>itvec::vec::iter::&lt;impl core::iter::traits::collect::Extend&lt;bool&gt; for bitvec::vec::BitVec&lt;O,T&gt;&gt;::extend</code><br>\nwhereas with rust 1.48.0, most of the time is spent in:</p>\n</li>\n<li>\n<p><code>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;O,T&gt;&gt;::push</code></p>\n</li>\n</ul>",
        "id": 217499774,
        "sender_full_name": "marmeladema",
        "timestamp": 1605961609
    },
    {
        "content": "<p>Could it be that rust now fails to apply some optimization?<br>\nThe (really) good news is that, updating the <code>bitvec</code> crate seems to fix the regression :)</p>",
        "id": 217499835,
        "sender_full_name": "marmeladema",
        "timestamp": 1605961695
    },
    {
        "content": "<p>That quick analysis was done by running perf record on both versions and perf diff to compare the results</p>",
        "id": 217499854,
        "sender_full_name": "marmeladema",
        "timestamp": 1605961776
    },
    {
        "content": "<p>bitvec has its own Extend implementation, I don't see how changes to vec's <code>FromIterator</code> or <code>Extend</code> implementation would impact it unless it does use std's Vec under the hood somewhere. Which is a bit difficult to tell since the type names are the same <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 217500455,
        "sender_full_name": "The 8472",
        "timestamp": 1605962772
    },
    {
        "content": "<p>There is always the possibility that my analysis is wrong :)</p>",
        "id": 217500472,
        "sender_full_name": "marmeladema",
        "timestamp": 1605962848
    },
    {
        "content": "<p>did you run perf with -g? then you should be able to get a caller/callee tree and see if std::Vec is involved</p>",
        "id": 217500520,
        "sender_full_name": "The 8472",
        "timestamp": 1605962890
    },
    {
        "content": "<p>I did not, but I can definitely rerun</p>",
        "id": 217500525,
        "sender_full_name": "marmeladema",
        "timestamp": 1605962915
    },
    {
        "content": "<p>actually, run perf with <code>-call-graph dwarf</code> and compile with debuginfo=1 (or higher), that'll give more accurate stacks. Otherwise it'll try to use frame pointers which is inaccurate since they can get optimized out.</p>",
        "id": 217500638,
        "sender_full_name": "The 8472",
        "timestamp": 1605963107
    },
    {
        "content": "<p>Yeah debuginfo is already enabled for release builds</p>",
        "id": 217500878,
        "sender_full_name": "marmeladema",
        "timestamp": 1605963486
    },
    {
        "content": "<p>I'll rerun the tests later today</p>",
        "id": 217500880,
        "sender_full_name": "marmeladema",
        "timestamp": 1605963495
    },
    {
        "content": "<p>So, in isolation, upgrading the bitvec crate fixes the performance regression entirely?</p>",
        "id": 217512591,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605983062
    },
    {
        "content": "<p>Could you bisect versions of the bitvec crate?</p>",
        "id": 217512599,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605983081
    },
    {
        "content": "<p>That would narrow down the code change that makes it stop triggering this problem.</p>",
        "id": 217512617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605983106
    },
    {
        "content": "<p>You might even be able to bisect commits from the bitvec repository.</p>",
        "id": 217512630,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605983145
    },
    {
        "content": "<p>I'd also be interested if there's a case that my change made worse; even if a new bitvec version doesn't happen to hit it anymore.</p>\n<p>I have looked at the bitvec source a bit (<a href=\"https://github.com/myrrlyn/bitvec/blob/develop/src/vec/iter.rs\">https://github.com/myrrlyn/bitvec/blob/develop/src/vec/iter.rs</a> specifically) and surprisingly they actually added more code using <code>alloc::Vec</code> since 0.17.4. But they also added a bunch of optimizations. So no obvious culprit.</p>\n<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span>  did you <code>perf diff</code> from stable to stable or from the commit that bisect returned + its parent? The former range could contain multiple regressions and improvements that could muddle the diff results.</p>",
        "id": 217513613,
        "sender_full_name": "The 8472",
        "timestamp": 1605984711
    },
    {
        "content": "<p>I did compare from stable to stable yeah you are totally right that might hides things.<br>\nI will try to reproduce the issue with a minimized example in a standalone sharable crate. If I can manage that, that should hopefully help understand the issue better.</p>",
        "id": 217547209,
        "sender_full_name": "marmeladema",
        "timestamp": 1606044919
    },
    {
        "content": "<p>Ok, I managed to reproduce it</p>",
        "id": 217549585,
        "sender_full_name": "marmeladema",
        "timestamp": 1606048845
    },
    {
        "content": "<p>on a minimized example, the regression is of about 24% for a call to <code>BitVec::extend</code></p>",
        "id": 217549608,
        "sender_full_name": "marmeladema",
        "timestamp": 1606048898
    },
    {
        "content": "<p>I verified by comparing from stable to stable. I am now running the bisection again on the minimized example to see if it points to the same commit.</p>",
        "id": 217550700,
        "sender_full_name": "marmeladema",
        "timestamp": 1606050678
    },
    {
        "content": "<p>Ok today I cannot run the bisection anymore because some artifacts are missing:</p>\n<div class=\"codehilite\"><pre><span></span><code>********************************************************************************\nRegression in nightly-2020-09-02\n********************************************************************************\n\nfetching https://static.rust-lang.org/dist/2020-09-01/channel-rust-nightly-git-commit-hash.txt\nERROR: Tarball not found at https://static.rust-lang.org/dist/2020-09-01/channel-rust-nightly-git-commit-hash.txt\n</code></pre></div>",
        "id": 217551451,
        "sender_full_name": "marmeladema",
        "timestamp": 1606051847
    },
    {
        "content": "<p>Surprisingly, even if the bisection has failed, it seems to point to <code>nightly-2020-09-02</code> whereas previous bisection (on the closed source crate) pointed to <code>nightly-2020-09-04</code></p>",
        "id": 217552051,
        "sender_full_name": "marmeladema",
        "timestamp": 1606052769
    },
    {
        "content": "<p>Further investigation shows that with rust 1.48.0, bitvec <code>1.17.4</code> suffers from the regression whereas <code>1.18.0</code> (just version just after) does not</p>",
        "id": 217552177,
        "sender_full_name": "marmeladema",
        "timestamp": 1606052996
    },
    {
        "content": "<p>Yeah, there's some updates to that tool that are needed now probably...</p>",
        "id": 217552229,
        "sender_full_name": "simulacrum",
        "timestamp": 1606053044
    },
    {
        "content": "<p>So probably something in those commits <a href=\"https://github.com/myrrlyn/bitvec/compare/v0.17.4...v0.18.0\">https://github.com/myrrlyn/bitvec/compare/v0.17.4...v0.18.0</a> has made the crate not hit the regression anymore</p>",
        "id": 217552239,
        "sender_full_name": "marmeladema",
        "timestamp": 1606053086
    },
    {
        "content": "<p>you can probably use the script you used with <code>cargo-bisect-rustc</code> to <code>git bisect</code> bitvec</p>",
        "id": 217552309,
        "sender_full_name": "lqd",
        "timestamp": 1606053236
    },
    {
        "content": "<p>now that you've identified the nightly</p>",
        "id": 217552352,
        "sender_full_name": "lqd",
        "timestamp": 1606053258
    },
    {
        "content": "<p>Yep, will try to do that. But I am confused about two different nightly being pointed at by the bisection</p>",
        "id": 217552358,
        "sender_full_name": "marmeladema",
        "timestamp": 1606053288
    },
    {
        "content": "<p>hopefully the missing artifacts didn't cause the tool to mis-identify the nightly</p>",
        "id": 217552420,
        "sender_full_name": "lqd",
        "timestamp": 1606053371
    },
    {
        "content": "<p>So I bisected <code>bitvec</code> and it appears that the commit that does not hit the regression seems to be: <a href=\"https://github.com/myrrlyn/bitvec/commit/f82112243707923a380e5091deab51c29b4f2948\">https://github.com/myrrlyn/bitvec/commit/f82112243707923a380e5091deab51c29b4f2948</a><br>\nBut ... it's a commit that almost rewrites the entire crate so not very useful</p>",
        "id": 217552887,
        "sender_full_name": "marmeladema",
        "timestamp": 1606054122
    },
    {
        "content": "<p>Ok I've created <a href=\"https://github.com/marmeladema/bitvec-perf-regression\">https://github.com/marmeladema/bitvec-perf-regression</a> to dump my experiments</p>",
        "id": 217553433,
        "sender_full_name": "marmeladema",
        "timestamp": 1606054914
    },
    {
        "content": "<p>That the rustc bisect gives different results is suspicious.</p>",
        "id": 217556072,
        "sender_full_name": "The 8472",
        "timestamp": 1606058604
    },
    {
        "content": "<p>I can try to bisect manually rustc though to be sure. Is there a way to tell cargo to use a custom rustc/libstd? The ones that I would have built from rust sources</p>",
        "id": 217558972,
        "sender_full_name": "marmeladema",
        "timestamp": 1606063170
    },
    {
        "content": "<p>Ah yeah just RUSTC, that was easy :D</p>",
        "id": 217559074,
        "sender_full_name": "marmeladema",
        "timestamp": 1606063318
    },
    {
        "content": "<p>Ok the <code>bitvec</code> regression seems to have been introduced by commit <code>1d22f75c9f75cad2e408a145861904898ac982dd</code> in rustc</p>",
        "id": 217563305,
        "sender_full_name": "marmeladema",
        "timestamp": 1606069857
    },
    {
        "content": "<p>Which is <a href=\"https://github.com/rust-lang/rust/commit/1d22f75c9f75cad2e408a145861904898ac982dd\">https://github.com/rust-lang/rust/commit/1d22f75c9f75cad2e408a145861904898ac982dd</a> / merge of <a href=\"https://github.com/rust-lang/rust/pull/76030\">https://github.com/rust-lang/rust/pull/76030</a></p>",
        "id": 217563373,
        "sender_full_name": "marmeladema",
        "timestamp": 1606069961
    },
    {
        "content": "<p>So latest nightly also trigger the regression, I have reverted the offending PR and indeed it fixes the regression.</p>",
        "id": 217566958,
        "sender_full_name": "marmeladema",
        "timestamp": 1606074951
    },
    {
        "content": "<p>Apparently it could be a bug in llvm :/</p>",
        "id": 217692010,
        "sender_full_name": "marmeladema",
        "timestamp": 1606170768
    },
    {
        "content": "<p>How does one change the label of an issue? The <code>E-needs-mcve</code> label should probably be removed from <a href=\"https://github.com/rust-lang/rust/issues/79246\">https://github.com/rust-lang/rust/issues/79246</a> since I provided a MCVE <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 217730395,
        "sender_full_name": "marmeladema",
        "timestamp": 1606210574
    },
    {
        "content": "<p>I removed it for you, but next time you can use <code>@rustbot modify labels: -E-needs-mcve</code>.</p>",
        "id": 217730930,
        "sender_full_name": "bjorn3",
        "timestamp": 1606210983
    },
    {
        "content": "<p>With <code>+</code> instead of <code>-</code> you can add a label.</p>",
        "id": 217730950,
        "sender_full_name": "bjorn3",
        "timestamp": 1606210997
    },
    {
        "content": "<p>There are a few labels that you can't change this way, but most can be changed.</p>",
        "id": 217730987,
        "sender_full_name": "bjorn3",
        "timestamp": 1606211030
    },
    {
        "content": "<p>Ok thanks! I wish we had some contextual help on issues / PR for that kind of thing</p>",
        "id": 217730995,
        "sender_full_name": "marmeladema",
        "timestamp": 1606211033
    },
    {
        "content": "<p>Even better would be if github would natively support changing specific labels by outside contributors without going through a bot.</p>",
        "id": 217731133,
        "sender_full_name": "bjorn3",
        "timestamp": 1606211120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> I don't think we have an MCVE yet? The repo linked in the description seems to have 3 <a href=\"http://crates.io\">crates.io</a> dependencies, an MCVE ideally should have zero</p>",
        "id": 217754268,
        "sender_full_name": "simulacrum",
        "timestamp": 1606225160
    },
    {
        "content": "<p>But how do you measure hardware counters for retired instructions without some help?</p>",
        "id": 217760299,
        "sender_full_name": "marmeladema",
        "timestamp": 1606228016
    },
    {
        "content": "<p>and one of the dependency is actually the crate where the regression has been detected</p>",
        "id": 217760360,
        "sender_full_name": "marmeladema",
        "timestamp": 1606228051
    },
    {
        "content": "<p>but feel free to re add the tag, I might don't understand what a <em>real</em> mcve is</p>",
        "id": 217760392,
        "sender_full_name": "marmeladema",
        "timestamp": 1606228073
    },
    {
        "content": "<p>Ideally the reproduction of slowdown would be e.g. 10-20 lines of Rust code</p>",
        "id": 217760461,
        "sender_full_name": "simulacrum",
        "timestamp": 1606228094
    },
    {
        "content": "<p>e.g., if I had improved/regressed performance of number formatting, one possibility could be a program like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">1000000</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">hint</span>::<span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">).</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217760572,
        "sender_full_name": "simulacrum",
        "timestamp": 1606228160
    },
    {
        "content": "<p>One solution is to copy-pasta all the crates into one. Then continue removing things that aren't relevant.</p>",
        "id": 217766281,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606230669
    },
    {
        "content": "<p><em>Sometimes</em> it's the fact that there are crates that causes the problem, but then that's an important part of the reduction.</p>",
        "id": 217766345,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606230702
    },
    {
        "content": "<p>I wonder if any of the automated reducers have had any success.</p>",
        "id": 217766388,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606230721
    },
    {
        "content": "<p>Not sure if it's preferred that way but you could get the perf counters via <code>perf</code> instead of doing it programmatically.</p>",
        "id": 217767369,
        "sender_full_name": "The 8472",
        "timestamp": 1606231120
    },
    {
        "content": "<p>But do we need to reduce it further?</p>",
        "id": 217774152,
        "sender_full_name": "marmeladema",
        "timestamp": 1606233872
    },
    {
        "content": "<p>I think so, or at least, I imagine we'll end up wanting a regression test in either rust or LLVM upstream, and either way that needs to be much more minimal than what we have now</p>",
        "id": 217775060,
        "sender_full_name": "simulacrum",
        "timestamp": 1606234219
    },
    {
        "content": "<p>i will try to spend some time on it in the next couple of days</p>",
        "id": 217775884,
        "sender_full_name": "marmeladema",
        "timestamp": 1606234452
    },
    {
        "content": "<p>Testing locally, the performance difference seems to be primarily about inlining decision for BitVec push &amp; deref. Marking those as inline removes the most of regression.</p>",
        "id": 217793188,
        "sender_full_name": "tm",
        "timestamp": 1606241783
    },
    {
        "content": "<p>But does that mean llvm takes inlining decision based on the name of the types?</p>",
        "id": 217796141,
        "sender_full_name": "marmeladema",
        "timestamp": 1606243096
    },
    {
        "content": "<p>Could be different ordering when making those decisions, perhaps... this is where an mcve would help clarify exactly what's needed.</p>",
        "id": 217799204,
        "sender_full_name": "simulacrum",
        "timestamp": 1606244602
    },
    {
        "content": "<p>I have reduced it a bit: <a href=\"https://github.com/marmeladema/bitvec-perf-regression/blob/main/src/main.rs\">https://github.com/marmeladema/bitvec-perf-regression/blob/main/src/main.rs</a><br>\nbut it's <em>very</em> strange, if I remove the usage of serde_json, then I cannot reproduce the regression anymore</p>",
        "id": 217825998,
        "sender_full_name": "marmeladema",
        "timestamp": 1606259413
    },
    {
        "content": "<p>If it's really just llvm heuristics making different inlining decisions I don't think there's much that can be improved anyway other than providing explicit annotations on affected code.</p>",
        "id": 218130471,
        "sender_full_name": "The 8472",
        "timestamp": 1606512546
    },
    {
        "content": "<p>Yeah though the performance regression can be really huge</p>",
        "id": 218313830,
        "sender_full_name": "marmeladema",
        "timestamp": 1606755429
    }
]