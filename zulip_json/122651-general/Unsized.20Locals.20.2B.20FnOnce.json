[
    {
        "content": "<p>This compiles:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(unsized_locals)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pass_fn_once</span><span class=\"p\">(</span><span class=\"n\">do_thing</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Is there any way to actually call it though?</p>",
        "id": 183106792,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1576014880
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(unsized_locals)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pass_fn_once</span><span class=\"p\">(</span><span class=\"n\">do_thing</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">box_lam</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lam</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">box_lam</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pass_fn_once</span><span class=\"p\">(</span><span class=\"n\">lam</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183135159,
        "sender_full_name": "centril",
        "timestamp": 1576051659
    },
    {
        "content": "<p>Hmm. That feels unfortunate; is there a way to do it <em>without</em> heap allocation? I feel like I should be able to create an unsized local in <code>main</code> without it.</p>",
        "id": 183167126,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1576077693
    },
    {
        "content": "<p>I imagine you could possibly <code>&amp;mut dyn FnOnce()</code> and then cast that to <code>*mut</code> and ptr::read from that to get it onto the stack</p>",
        "id": 183167266,
        "sender_full_name": "simulacrum",
        "timestamp": 1576077803
    },
    {
        "content": "<p>but not sure if unsized_locals and friends are good enough for that yet :)</p>",
        "id": 183167277,
        "sender_full_name": "simulacrum",
        "timestamp": 1576077816
    },
    {
        "content": "<p>Yeah, that's always a thing I struggle with for unstable features - is that part impossible / not planned to work / doesn't work yet?</p>",
        "id": 183167401,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1576077899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> best way to figure that out is to file an issue</p>",
        "id": 183167521,
        "sender_full_name": "centril",
        "timestamp": 1576077967
    },
    {
        "content": "<p>(don't post on the tracking issue)</p>",
        "id": 183167543,
        "sender_full_name": "centril",
        "timestamp": 1576077985
    },
    {
        "content": "<p>I, uh, disagree</p>",
        "id": 183167551,
        "sender_full_name": "simulacrum",
        "timestamp": 1576077992
    },
    {
        "content": "<p>filing an issue to ask a question isn't great</p>",
        "id": 183167560,
        "sender_full_name": "simulacrum",
        "timestamp": 1576078002
    },
    {
        "content": "<p>if you have a case that should work (in your opinion) but doesn't, that's another matter</p>",
        "id": 183167578,
        "sender_full_name": "simulacrum",
        "timestamp": 1576078017
    },
    {
        "content": "<p>that's the way I'd ask the question</p>",
        "id": 183167600,
        "sender_full_name": "centril",
        "timestamp": 1576078032
    },
    {
        "content": "<p>I think in the future I would hope that just <code>let f: dyn FnOnce() = move || {};</code> should basically just work</p>",
        "id": 183167612,
        "sender_full_name": "simulacrum",
        "timestamp": 1576078047
    },
    {
        "content": "<p>I'd go with more chat / forum avenues before I file an issue (if I ever got to an issue, I agree it feels wrong). Here or Discord are easy places, then graduate to  IRLO if not answered.</p>",
        "id": 183167750,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1576078134
    }
]