[
    {
        "content": "<p>Would it be reasonable for library authors to mark functions as <code>unsafe</code> to signal that failing to uphold certain preconditions could lead to undesirable behavior, even if that undesirable behavior doesn't include memory safety violations?</p>",
        "id": 252344546,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1631037118
    },
    {
        "content": "<p>I believe the (partial) consensus is that we don't want to overload unsafe for all kinds of undesirable behavior and want to focus it to just memory safety.</p>",
        "id": 252345069,
        "sender_full_name": "bjorn3",
        "timestamp": 1631037308
    },
    {
        "content": "<p>The example I have in mind is e.g. a cryptography library exposing a \"safe\" API that's difficult to misuse, while exposing some of its internals (e.g. a function that accepts a user-provided nonce) as <code>unsafe</code>. (These <code>unsafe</code> functions require special care because e.g. reusing a nonce could lead to security problems.) Another example would be a SQL library requiring <code>unsafe</code> to execute a query that isn't a compile-time constant.</p>",
        "id": 252345119,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1631037334
    },
    {
        "content": "<p>I agree that this could lead to people becoming desensitized to \"unsafe\" blocks, though.</p>",
        "id": 252345344,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1631037412
    },
    {
        "content": "<p>Are there other recommended practices for indicating that APIs are dangerous to use (outside of not exposing them)? I guess I could put <code>_DANGER_DANGER</code> at the end of the function name, but that seems a bit silly. (Cargo features are another option, but they don't have the same level of encapsulation.)</p>\n<p>Basically, I think <code>unsafe</code> blocks provide a useful auditing and encapsulation signal, since they indicate pieces of code that might need special scrutiny. It would be nice to have a similarly standardized auditing signal for security concerns beyond memory safety. Not sure what the best way to do that is, though.</p>",
        "id": 252347537,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1631038275
    },
    {
        "content": "<p>You could create a token type, e.g. <code>Unsecure</code>, and then require it for those functions</p>",
        "id": 252350501,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631039503
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">unsecure</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Unsecure</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">unsecure</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Unsecure</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Unsecure</span><span class=\"p\">(()))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">unsecure</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">not_so_secure_fn</span><span class=\"p\">(</span><span class=\"n\">_u</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Unsecure</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unsecure</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">u</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">not_so_secure_fn</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 252350912,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631039656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392468\">Teddy Katz</span> <a href=\"#narrow/stream/122651-general/topic/.60unsafe.60.20as.20an.20API.20hardening.20escape.20hatch/near/252347537\">said</a>:</p>\n<blockquote>\n<p>Are there other recommended practices for indicating that APIs are dangerous to use (outside of not exposing them)? I guess I could put <code>_DANGER_DANGER</code> at the end of the function name, but that seems a bit silly. (Cargo features are another option, but they don't have the same level of encapsulation.)</p>\n</blockquote>\n<p>I think putting it in a different module (e.g. <code>yourcrate::raw_crypto::func</code>) would help. I also think, within reason, giving that module a dangerous-sounding name would be appropriate.</p>",
        "id": 252352063,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631040138
    },
    {
        "content": "<p>(To the extent <code>raw_crypto</code> doesn't already sound dangerous.)</p>",
        "id": 252352120,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631040161
    },
    {
        "content": "<p>API will always be misused if there are no proper enforcement</p>",
        "id": 252352262,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631040226
    },
    {
        "content": "<p>Clippy has a way to deny usage of certain functions.</p>",
        "id": 252352408,
        "sender_full_name": "bjorn3",
        "timestamp": 1631040276
    },
    {
        "content": "<p>It could deny individual functions, but if there are many functions I think it'll be hard to manage</p>",
        "id": 252352828,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631040434
    },
    {
        "content": "<p>If, e.g. the unsecure token approach is used, then when auditing you'll only need to disallow \"unsecure\" fn.</p>",
        "id": 252352918,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631040473
    },
    {
        "content": "<p><code>_unchecked</code> is commonly used for memory safe but dangerous functions, as well as outright unsafe functions.</p>",
        "id": 252357563,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1631042136
    },
    {
        "content": "<p>you could put the raw API into a module and gate that on a non-default feature of the crate</p>",
        "id": 252361571,
        "sender_full_name": "The 8472",
        "timestamp": 1631043989
    }
]