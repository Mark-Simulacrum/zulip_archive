[
    {
        "content": "<p>I’ve a MacBook with a 6-core i9 at 2.9 GHz. I’m trying to do some CPU-related benchmarking but I’m seeing some pretty big swings (e.g. ~14%) when I haven’t changed code. I’m guessing that things like Turboboost and thermal load are affecting me. </p>\n<p>Does anyone know of a way I can construct a more stable benchmark on this machine?</p>",
        "id": 168798959,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561306264
    },
    {
        "content": "<p>If it has anything resembling firmware configuration, you could go there an underclock your CPU, which by extension would disable boosting and any sort of frequency adjustment..</p>",
        "id": 168802693,
        "sender_full_name": "nagisa",
        "timestamp": 1561313264
    },
    {
        "content": "<p>your best bet is put your macbook into a freezer and load the null cpufreq kmod (don’t remember what it is called, sadly)</p>",
        "id": 168802802,
        "sender_full_name": "nagisa",
        "timestamp": 1561313404
    },
    {
        "content": "<p>there is a kext to disable turboboost too, so coupled with null cpufreq kext you should be in a pretty stable situation <a href=\"https://github.com/nanoant/DisableTurboBoost.kext\" target=\"_blank\" title=\"https://github.com/nanoant/DisableTurboBoost.kext\">https://github.com/nanoant/DisableTurboBoost.kext</a></p>",
        "id": 168802972,
        "sender_full_name": "nagisa",
        "timestamp": 1561313751
    },
    {
        "content": "<p>There’s still thermal throttling, and you won’t be able to deal with it without a higher difference in temperature between your rads and air.</p>",
        "id": 168803021,
        "sender_full_name": "nagisa",
        "timestamp": 1561313809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> have you tried other metrics, such as instruction count? it's usually much more stable.</p>",
        "id": 168804889,
        "sender_full_name": "RalfJ",
        "timestamp": 1561317255
    },
    {
        "content": "<p>on Linux <code>perf</code> can measure that with very little overhead, no idea about macOS though.</p>",
        "id": 168804891,
        "sender_full_name": "RalfJ",
        "timestamp": 1561317267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> thats a good point. I could even run in a VM for that, since the actual wallclock wouldn’t matter as much</p>",
        "id": 168805959,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561319486
    },
    {
        "content": "<p>I’m not <em>super</em> excited about putting my laptop in a freezer <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 168805962,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561319506
    },
    {
        "content": "<p>Instruction count is only useful if you know that instructions have approximately the same throughput and latency, which they don’t.</p>",
        "id": 168807249,
        "sender_full_name": "nagisa",
        "timestamp": 1561322090
    },
    {
        "content": "<p>However if what <em>is</em> very useful is number of cycles <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 168807258,
        "sender_full_name": "nagisa",
        "timestamp": 1561322122
    },
    {
        "content": "<p>(also measured by perf)</p>",
        "id": 168807259,
        "sender_full_name": "nagisa",
        "timestamp": 1561322129
    },
    {
        "content": "<p>however number of cycles has almost as much variance as time</p>",
        "id": 168808358,
        "sender_full_name": "RalfJ",
        "timestamp": 1561324262
    },
    {
        "content": "<p>so while instruction count is a worse proxy for performance than cycles, it can be measured much better, making it overall more useful</p>",
        "id": 168808369,
        "sender_full_name": "RalfJ",
        "timestamp": 1561324283
    },
    {
        "content": "<p>that's why instructions is also the default view for rust-perf</p>",
        "id": 168808375,
        "sender_full_name": "RalfJ",
        "timestamp": 1561324318
    },
    {
        "content": "<p>(there was a long post where someone from the team explained that all in more detail but I cannot find it now)</p>",
        "id": 168808416,
        "sender_full_name": "RalfJ",
        "timestamp": 1561324332
    },
    {
        "content": "<p>if you want to get a visual idea for the variance, some pictures from perf measurement of a research project I am involved in:<br>\ninstructions: two nice clear lines with basically constant separation: <a href=\"https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=instructions&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*\" target=\"_blank\" title=\"https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=instructions&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*\">https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=instructions&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*</a><br>\ntime: just a mess: <a href=\"https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=time&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*\" target=\"_blank\" title=\"https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=time&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*\">https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=time&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*</a><br>\ncycles are less messy but still don't give a useful signal here: <a href=\"https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=cycles&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*\" target=\"_blank\" title=\"https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=cycles&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*\">https://coq-speed.mpi-sws.org/d/Ne7jkX6kk/coq-speed?orgId=1&amp;from=1556168879192&amp;to=1558362701773&amp;var-metric=cycles&amp;var-project=iris&amp;var-branch=master&amp;var-config=All&amp;var-group=().*</a><br>\n(beware, non-zeroed y axis)</p>",
        "id": 168808473,
        "sender_full_name": "RalfJ",
        "timestamp": 1561324447
    },
    {
        "content": "<p>this is on a system where we did what we could, with our limited knowledge, to isolate things in terms of performance (it's a 2-socket system with one socket entirely reserved to the thing being benchmarked)</p>",
        "id": 168808487,
        "sender_full_name": "RalfJ",
        "timestamp": 1561324538
    },
    {
        "content": "<p>ah here's the post by nnethercote I was mentioning earlier: <a href=\"https://internals.rust-lang.org/t/what-is-perf-rust-lang-org-measuring-and-why-is-instructions-u-the-default/9815/5?u=ralfjung\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/what-is-perf-rust-lang-org-measuring-and-why-is-instructions-u-the-default/9815/5?u=ralfjung\">https://internals.rust-lang.org/t/what-is-perf-rust-lang-org-measuring-and-why-is-instructions-u-the-default/9815/5?u=ralfjung</a></p>",
        "id": 168808531,
        "sender_full_name": "RalfJ",
        "timestamp": 1561324601
    },
    {
        "content": "<p>Now, can I trick criterion into gathering those numbers and making a pretty graph</p>",
        "id": 168809356,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561326250
    },
    {
        "content": "<p>if you find out how, please tell us!</p>",
        "id": 168830976,
        "sender_full_name": "RalfJ",
        "timestamp": 1561364658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is that branchy code?</p>",
        "id": 168860241,
        "sender_full_name": "nagisa",
        "timestamp": 1561390505
    },
    {
        "content": "<p>Dedicating a single core is not sufficient when cache is shared.</p>",
        "id": 168860253,
        "sender_full_name": "nagisa",
        "timestamp": 1561390522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> looks like it’s getting closer to possible: <a href=\"https://github.com/bheisler/criterion.rs/issues/130\" target=\"_blank\" title=\"https://github.com/bheisler/criterion.rs/issues/130\">https://github.com/bheisler/criterion.rs/issues/130</a></p>",
        "id": 168878007,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561404569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> </p>\n<blockquote>\n<p>Dedicating a single core is not sufficient when cache is shared.</p>\n</blockquote>\n<p>I said <em>single socket</em></p>",
        "id": 168878820,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405208
    },
    {
        "content": "<p>as in, entire physical CPU. dedicated L1, L2, L3 caches and even dedicated memory controller, if the OS doesn't screw up and allocate memory attached to the other socket.</p>",
        "id": 168878823,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405211
    },
    {
        "content": "<p>that machine has two of them, each with 10 cores and HT (so 40 virtual cores total)</p>",
        "id": 168878838,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405224
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> is that branchy code?</p>\n</blockquote>\n<p>no idea. this is running Coq to check proofs we wrote. Coq is written in OCaml.</p>",
        "id": 168878864,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405244
    },
    {
        "content": "<p>Anyone know <em>how</em> to read the instruction count? Is that a magic x86 register thing?</p>",
        "id": 168878993,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561405369
    },
    {
        "content": "<p>I know how to do it with <code>perf</code>^^</p>",
        "id": 168879117,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405470
    },
    {
        "content": "<p>which uses special Linux kernel APIs</p>",
        "id": 168879125,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405485
    },
    {
        "content": "<p>pffft. I like writing that low-level assembly</p>",
        "id": 168879228,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561405563
    },
    {
        "content": "<p>well <code>perf</code> does way more than this magic instruction that also exists</p>",
        "id": 168879268,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405603
    },
    {
        "content": "<p>There’s <a href=\"http://gz.github.io/rust-perfcnt/perfcnt/\" target=\"_blank\" title=\"http://gz.github.io/rust-perfcnt/perfcnt/\">http://gz.github.io/rust-perfcnt/perfcnt/</a>, but it’s lInux-only for that reason</p>",
        "id": 168879270,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561405604
    },
    {
        "content": "<p>sure, but how much of that is needed in the context of e.g. criterion?</p>",
        "id": 168879306,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561405651
    },
    {
        "content": "<p>it's some kind of statistical thing where the CPU takes snapshots of stuff and runs a bit of priviledged code to compress it enough to allow streaming the rest to disk for post-mortem analysis or whatever... you end up being told in which function all the instructions are spent etc. a bit like callgrind, but without the overhead. it's pure magic.</p>",
        "id": 168879307,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405651
    },
    {
        "content": "<blockquote>\n<p>sure, but how much of that is needed in the context of e.g. criterion?</p>\n</blockquote>\n<p>I have no idea. ;) Just know the user side of this.</p>",
        "id": 168879320,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405671
    },
    {
        "content": "<p>Perfcounters are most likely not directly accessible by user-space programs.</p>",
        "id": 168880932,
        "sender_full_name": "nagisa",
        "timestamp": 1561406849
    },
    {
        "content": "<p>So your options are to a) figure out what (possibly undocumented) syscall things like Instruments use to measure that or b) write a kernel module which exposes that data to you</p>",
        "id": 168881021,
        "sender_full_name": "nagisa",
        "timestamp": 1561406904
    },
    {
        "content": "<p>dtrace should be similar enough to <code>perf</code> on macOS I think</p>",
        "id": 168881514,
        "sender_full_name": "simulacrum",
        "timestamp": 1561407323
    },
    {
        "content": "<p>I know very little about it though</p>",
        "id": 168881529,
        "sender_full_name": "simulacrum",
        "timestamp": 1561407330
    },
    {
        "content": "<p>If you have SIP enabled on macOS, you're going to have a bad time trying to use dtrace. For example: <a href=\"https://www.reddit.com/r/macsysadmin/comments/ahrn10/has_apple_broken_dtruss_in_mojave/\" target=\"_blank\" title=\"https://www.reddit.com/r/macsysadmin/comments/ahrn10/has_apple_broken_dtruss_in_mojave/\">https://www.reddit.com/r/macsysadmin/comments/ahrn10/has_apple_broken_dtruss_in_mojave/</a></p>",
        "id": 168882585,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1561408176
    },
    {
        "content": "<p>I gather SIP here is not the VoIP protocol...?</p>",
        "id": 168883803,
        "sender_full_name": "RalfJ",
        "timestamp": 1561409205
    },
    {
        "content": "<p>system integrity protection</p>",
        "id": 168884159,
        "sender_full_name": "simulacrum",
        "timestamp": 1561409519
    },
    {
        "content": "<p>ah, that makes so much more sense :D</p>",
        "id": 168884251,
        "sender_full_name": "RalfJ",
        "timestamp": 1561409578
    },
    {
        "content": "<p>~Hackers are strong tonight~<br>\n~They will profile your code~<br>\n~Figure out instructions~<br>\n~And their costs~<br>\n~For much improved security~<br>\n~We disabled perfcounters~</p>",
        "id": 168887063,
        "sender_full_name": "nagisa",
        "timestamp": 1561412128
    }
]