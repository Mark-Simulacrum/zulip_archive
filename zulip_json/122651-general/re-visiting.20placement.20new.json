[
    {
        "content": "<p>Do any recent changes (<code>MaybeUninit</code>, raw references, maybe even <code>Pin</code>?) make implementing placement new more feasible nowadays?</p>",
        "id": 186346810,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579739544
    },
    {
        "content": "<p>not really. What we need an optimisation that guarantees construction of data into a location and once we do have that you wouldn't need a separate function for this.</p>",
        "id": 186347082,
        "sender_full_name": "nagisa",
        "timestamp": 1579739878
    },
    {
        "content": "<p>Would such an optimization work in all cases, e.g. even for collections?</p>",
        "id": 186347268,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579740040
    },
    {
        "content": "<p>It would have to if we wanted placement-in.</p>",
        "id": 186347593,
        "sender_full_name": "nagisa",
        "timestamp": 1579740462
    },
    {
        "content": "<p>The original placement in just relied on having a <code>*mut T</code> to put a <code>T</code> into</p>",
        "id": 186347646,
        "sender_full_name": "nagisa",
        "timestamp": 1579740492
    },
    {
        "content": "<p>the problem is that forcing an arbitrary expression to put its data directly into the pointer rather than onto stack is… non-trivial</p>",
        "id": 186347662,
        "sender_full_name": "nagisa",
        "timestamp": 1579740520
    },
    {
        "content": "<p>i.e. the problem is the right hand side, not the left hand one.</p>",
        "id": 186347680,
        "sender_full_name": "nagisa",
        "timestamp": 1579740540
    },
    {
        "content": "<p>(I think \"guaranteed optimization\" is sort of a contradiction in terms. Optimizations are definitionally about improving code in some ways while preserving as-if. If as-if is not preserved it is not an optimization.)</p>",
        "id": 186347778,
        "sender_full_name": "centril",
        "timestamp": 1579740624
    },
    {
        "content": "<p>right.</p>",
        "id": 186347798,
        "sender_full_name": "nagisa",
        "timestamp": 1579740647
    },
    {
        "content": "<p>Whatever guarantees we make have to, in my view, be backed up by operational semantics, but should also be simple enough to specify (for the spec) and understand (for users).</p>",
        "id": 186347826,
        "sender_full_name": "centril",
        "timestamp": 1579740690
    },
    {
        "content": "<p>rather than it being optimisation, we need a way to guarantee that we can make <code>*t = EXPR</code> put its result into the location pointed to by pointer for arbitrary EXPRs.</p>",
        "id": 186347836,
        "sender_full_name": "nagisa",
        "timestamp": 1579740701
    },
    {
        "content": "<p>and that’s… not feasible AFAICT anyway</p>",
        "id": 186347857,
        "sender_full_name": "nagisa",
        "timestamp": 1579740723
    },
    {
        "content": "<p>without changing how EXPRs work, which is what C++ did.</p>",
        "id": 186347890,
        "sender_full_name": "nagisa",
        "timestamp": 1579740749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> my understanding is that C++'s guarantees were not operational either</p>",
        "id": 186347914,
        "sender_full_name": "centril",
        "timestamp": 1579740785
    },
    {
        "content": "<p>I can’t think of an example that would disprove it, tbh</p>",
        "id": 186348003,
        "sender_full_name": "nagisa",
        "timestamp": 1579740920
    },
    {
        "content": "<p>disprove what?</p>",
        "id": 186348018,
        "sender_full_name": "centril",
        "timestamp": 1579740953
    },
    {
        "content": "<p>Disprove that their guarantees are operational.</p>",
        "id": 186348071,
        "sender_full_name": "nagisa",
        "timestamp": 1579740983
    },
    {
        "content": "<p>unless we’re talking about different things.</p>",
        "id": 186348075,
        "sender_full_name": "nagisa",
        "timestamp": 1579740993
    },
    {
        "content": "<p>I mean, yes it is true that C++ requires the programmer to write code in a very particular way if they want the guarantee, but once they do it, they have the guarantee.</p>",
        "id": 186348113,
        "sender_full_name": "nagisa",
        "timestamp": 1579741057
    },
    {
        "content": "<p>(whether people write their code that way is a different question altogether)</p>",
        "id": 186348127,
        "sender_full_name": "nagisa",
        "timestamp": 1579741078
    },
    {
        "content": "<p>At least for Rust, we would need a way to observe the difference with and without the guarantee</p>",
        "id": 186348793,
        "sender_full_name": "centril",
        "timestamp": 1579741700
    },
    {
        "content": "<p>Well, <code>box [0; 1_000_000]</code> is going to blow your stack, but with placement new won't, right?</p>",
        "id": 186350594,
        "sender_full_name": "simulacrum",
        "timestamp": 1579743928
    },
    {
        "content": "<p>but maybe not the best example :)</p>",
        "id": 186350600,
        "sender_full_name": "simulacrum",
        "timestamp": 1579743939
    },
    {
        "content": "<p>Does Miri have a concept of a stack in this sense?<br>\nUsing \"stack overflow\" as the observable distinction would also make this guarantee subject to the things already in the stack (in memory) and the size of the new allocation</p>",
        "id": 186351194,
        "sender_full_name": "centril",
        "timestamp": 1579744804
    },
    {
        "content": "<p>I'm not sure why being able to observe something (in the sense of being able to nail down that observation) would need to be in the spec. Loosely, I would expect that placement construction boils down to \"space is not allocated by the compiler\" or something along those lines -- i.e., that the compiler is not permitted to place values outside the region provided during the construction of the object.</p>",
        "id": 186351425,
        "sender_full_name": "simulacrum",
        "timestamp": 1579745114
    },
    {
        "content": "<p>That might be too strict, I'm not sure.</p>",
        "id": 186351428,
        "sender_full_name": "simulacrum",
        "timestamp": 1579745121
    },
    {
        "content": "<p>I don't think the spec should be specified in terms of a compilation model. Even the word \"compiler\" is suspect in the spec imo.</p>",
        "id": 186353492,
        "sender_full_name": "centril",
        "timestamp": 1579748306
    },
    {
        "content": "<p>It seems like a lot of it can be half-solved with maybeuninit if you're willing to write code that sticks to a convention</p>",
        "id": 186366169,
        "sender_full_name": "Lokathor",
        "timestamp": 1579766655
    },
    {
        "content": "<p>The convention that is needed for this is a very invasive and painful one, where you can't use a ordinary expressions or APIs to produce a significant amount of data and instead have to rewrite all the code involved in producing the values you want to write them to the destination piecewise. This is hardly a solution for the placement problem, similar (though to a lesser extent) to how \"write assembly\" is hardly a solution for missed optimizations.</p>",
        "id": 186376765,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1579776415
    },
    {
        "content": "<p>C++'s guarantee are specifically about copy/move constructor elision: you can observe the difference because your constructor is not getting called. The C++ standard makes no guarantees on stack usage.</p>",
        "id": 186394649,
        "sender_full_name": "Amanieu",
        "timestamp": 1579790503
    },
    {
        "content": "<p>I wonder if there's some tie-in to Pin's guarantees about movement that we could utilize. Nothing springs to mind though.</p>",
        "id": 186395127,
        "sender_full_name": "simulacrum",
        "timestamp": 1579790824
    },
    {
        "content": "<p>I wonder if there is a way to specify it operationally via an asymptotic space efficiency argument, a la Clinger 1998. Unfortunately I don’t know if he still has a public copy on a website</p>",
        "id": 186458107,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579833651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"https://citeseer.ist.psu.edu/viewdoc/download;jsessionid=0FA23CCE7E9A17539134E7CFCD0CC6A0?doi=10.1.1.50.4500&amp;rep=rep1&amp;type=pdf\" target=\"_blank\" title=\"https://citeseer.ist.psu.edu/viewdoc/download;jsessionid=0FA23CCE7E9A17539134E7CFCD0CC6A0?doi=10.1.1.50.4500&amp;rep=rep1&amp;type=pdf\">https://citeseer.ist.psu.edu/viewdoc/download;jsessionid=0FA23CCE7E9A17539134E7CFCD0CC6A0?doi=10.1.1.50.4500&amp;rep=rep1&amp;type=pdf</a>?</p>",
        "id": 186458137,
        "sender_full_name": "simulacrum",
        "timestamp": 1579833713
    },
    {
        "content": "<p>Good work!</p>",
        "id": 186458188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579833752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I'm not clear on how you think it is so invasive. Maybe you're not imagining the same thing as me?</p>\n<p>You can get \"pseudo placement new\" with just additional methods added to exiting types. If you give all your types a function that takes <code>&amp;mut MaybeUninit&lt;Self&gt;</code> and initializes it, then you can construct in place. Of course, the biggest drawback is that you can't access the fields of MaybeUninit at all easily. The second biggest drawback is that it's unsafe as all get out, so there's that. The third problem is of course that adding one method for each type you want to support \"pseudo placement new\" with doesn't scale very well. I'm not saying that a language level change isn't necessary, but I think that you can get a lot of the desired effect with MaybeUninit and/or zeroed().</p>\n<p>However, I also haven't had to do much with the \"don't let it touch the stack\" problem. In the cases that I've faced personally, you can just alloc_zeroed and turn the pointer into a Boxed array and call it a day. So maybe I don't even understand the problem properly.</p>",
        "id": 186468658,
        "sender_full_name": "Lokathor",
        "timestamp": 1579850289
    },
    {
        "content": "<p>No, that's pretty much what I mean too. Except it isn't just one method per type, it's extra code per \"way to move a value\". For example, if you want to have two <code>Vec&lt;HugeStruct&gt;</code> and want to take the last element of one Vec and push it onto the other Vec with minimal moves (and stack usage), you don't just need a placement-aware variant of <code>Vec::push</code>, you also need to reimplement <code>Vec::pop</code> to place the popped value into the destination directly. Open-coded that might look something like this:</p>\n<div class=\"codehilite\"><pre><span></span>vec1.push_emplace(|dest| {\n    dest.as_mut_ptr().copy_from(vec2.last_mut().unwrap());\n    vec2.set_len(vec2.len() - 1);\n});\n</pre></div>\n\n\n<p>In this example the blowup is not so terrible, but in general if you have a <code>big(complicated(expression()))</code> resulting in a large type <code>T</code>, you may end up having to rewrite <em>all</em> code transitively used by that expression to have an out-argument instead. Sometimes that is unavoidable anyway, but in many cases the compiler <em>ought</em> to be able to generate the right code by just writing the results of expressions directly into their eventual destination without any temporaries.</p>",
        "id": 186482531,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1579864959
    },
    {
        "content": "<p>I am not sure if \"operational guarantees\" is the right benchmark here... sounds to me more like designing an opsem that is simple to compile efficiently. that's like how we don't guarantee that <code>i + 1</code> is compiled to an addition instruction (plus potential overflow check) instead of something ridicolously inefficient.</p>",
        "id": 187167568,
        "sender_full_name": "RalfJ",
        "timestamp": 1580573947
    },
    {
        "content": "<p>Depends on whether best-effort optimizations like any others are sought after or if it is stability guarantees. The latter would, in my view, require something operational. The former is \"just\" a quality of implementation matter which the compiler team can tweak (and regress, improve again, ...) as they see fit.</p>",
        "id": 187210411,
        "sender_full_name": "centril",
        "timestamp": 1580660083
    },
    {
        "content": "<p>The people who have spoken to me about this being a requirement at all usually speak as if it's a <em>hard</em> requirement. If you use the Placement New then the generated code <em>must</em> have the transformation applied.</p>\n<p>Of course they could be exaggerating, but I think people want an absolute assurance.</p>",
        "id": 187215227,
        "sender_full_name": "Lokathor",
        "timestamp": 1580668856
    },
    {
        "content": "<p>Yes, otherwise the code in question will just hit stack overflow 100% of the time.</p>",
        "id": 187217164,
        "sender_full_name": "nagisa",
        "timestamp": 1580672635
    },
    {
        "content": "<p>ain’t good enough if applying this pattern would just reduce the chance you get an overflow</p>",
        "id": 187217208,
        "sender_full_name": "nagisa",
        "timestamp": 1580672685
    },
    {
        "content": "<blockquote>\n<p>Well, <code>box [0; 1_000_000]</code> is going to blow your stack, but with placement new won't, right?</p>\n</blockquote>\n<p>well this already works now (even when adding a zero).</p>\n<p>I agree with <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I don't know of any language that promises if new placement will be directly on the heap, or even that it will be on the heap.<br>\nI think we should do our best that the compiler will actually optimize it to be directly on the heap (ideally even without the <code>box</code> syntax) but not promise that.</p>",
        "id": 187247923,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1580724401
    },
    {
        "content": "<p>Placement new (in C++) merely allows you to instantiate an object directly in the provided memory location. As such this is a hard guarantee that no additional memory allocations will be used (no matter whether the provided memory location is on the heap or on the stack).  [search for placement new in <a href=\"https://en.cppreference.com/w/cpp/language/new\" target=\"_blank\" title=\"https://en.cppreference.com/w/cpp/language/new\">https://en.cppreference.com/w/cpp/language/new</a> ]</p>",
        "id": 187262207,
        "sender_full_name": "Wodann",
        "timestamp": 1580737068
    },
    {
        "content": "<p>IMO if you can guarantee that <code>box Struct { fields }</code>, <code>box Struct(fields)</code> (including <code>Enum::Variant(fields)</code>) and <code>box [x; n]</code> will not blow up the stack it already covers 99% use case of placement new</p>",
        "id": 187263715,
        "sender_full_name": "kennytm",
        "timestamp": 1580738197
    },
    {
        "content": "<p><code>box</code> is equivalent to what <code>HEAP &lt;- expr</code> was with the removed placement new.</p>",
        "id": 187264419,
        "sender_full_name": "nagisa",
        "timestamp": 1580738695
    },
    {
        "content": "<p>As thus it shares all of the caveats.</p>",
        "id": 187264459,
        "sender_full_name": "nagisa",
        "timestamp": 1580738711
    },
    {
        "content": "<p>you know how it should generalize to <code>&lt;-</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> i don't think it worth the effort to guarantee for arbitrary <code>expr</code></p>",
        "id": 187264667,
        "sender_full_name": "kennytm",
        "timestamp": 1580738842
    },
    {
        "content": "<p>if someone writes <code>box f(x)</code> (<code>HEAP &lt;- f(x)</code>), i don't think we can avoid occupying the stack</p>",
        "id": 187264759,
        "sender_full_name": "kennytm",
        "timestamp": 1580738891
    },
    {
        "content": "<p>We could guarantee it for at least <code>extern \"Rust\"</code> stuff  if we adapt ABI (to e.g. always make caller allocate location for return values)</p>",
        "id": 187264971,
        "sender_full_name": "nagisa",
        "timestamp": 1580739044
    },
    {
        "content": "<p>but if we do that, we no longer need a separate syntax for this</p>",
        "id": 187264997,
        "sender_full_name": "nagisa",
        "timestamp": 1580739070
    },
    {
        "content": "<blockquote>\n<p>but if we do that, we no longer need a separate syntax for this</p>\n</blockquote>\n<p>you mean <code>vec.push(f(x))</code> would be made equivalent to <code>vec &lt;- f(x)</code> with such ABI?</p>",
        "id": 187266093,
        "sender_full_name": "kennytm",
        "timestamp": 1580739779
    },
    {
        "content": "<p>well, not that.</p>",
        "id": 187269036,
        "sender_full_name": "nagisa",
        "timestamp": 1580741846
    },
    {
        "content": "<p>because that introduces a semantic difference in operation</p>",
        "id": 187269048,
        "sender_full_name": "nagisa",
        "timestamp": 1580741857
    },
    {
        "content": "<p>/me takes everything back and throws it into the pit</p>",
        "id": 187269078,
        "sender_full_name": "nagisa",
        "timestamp": 1580741871
    },
    {
        "content": "<p>but that ABI particularity is a precondition for <code>vec &lt;- f(x)</code> to work reliably if at all</p>",
        "id": 187269179,
        "sender_full_name": "nagisa",
        "timestamp": 1580741931
    },
    {
        "content": "<p>The ABI changes necessary to make <code>place &lt;- f(x)</code> work as intended (modulo whatever happens inside of <code>f</code>) are actually another good reason to not pursue a strict guarantee of \"no moves\" (however this is formalized) but treat it as a QoI matter. A function returning e.g . an int should obviously be able to return it by value. Direct emplacement of return values is only useful for large types, where \"large\" is somewhat vague but certainly past the point where a \"write the result through this out-pointer\" ABI is desired anyway =&gt; we don't really need ABI changes, just RVO exploiting the existing ABI.</p>",
        "id": 187290150,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1580754767
    },
    {
        "content": "<p>More generally, making this a QoI matter <em>and being good enough at it</em> (much more consistent than we are today) shouldn't really make a difference vs. a hard guarantee for people worried about blowing up their stack: many other things that affect stack usage (e.g. amount of inlining, effectiveness of stack coloring, spills during register allocation) are also not guaranteed, but in practice these are rarely pathological enough to cause stack overflows and when they do it's often due to bugs we'd want to fix anyway. I'd like us to get to the same point with carefully-written Rust: if you adhere to a few conventions while constructing large objects in otherwise natural ways (i.e., not rewriting everything to have explicit out-pointers), the stack should not blow up unless a whole sequence of very unlikely things happened.</p>",
        "id": 187290604,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1580755069
    },
    {
        "content": "<blockquote>\n<p>The people who have spoken to me about this being a requirement at all usually speak as if it's a <em>hard</em> requirement. If you use the Placement New then the generated code <em>must</em> have the transformation applied.</p>\n<p>Of course they could be exaggerating, but I think people want an absolute assurance.</p>\n</blockquote>\n<p>I bet the same people say it is a <em>hard</em> requirement that <code>i+j</code> doesnt use up 1MB of stack space</p>",
        "id": 187301484,
        "sender_full_name": "RalfJ",
        "timestamp": 1580762397
    },
    {
        "content": "<p>and yet our spec says nothing like that, and it would be very hard to make it do that (lets get a spec first before making it awesome like that)</p>",
        "id": 187301559,
        "sender_full_name": "RalfJ",
        "timestamp": 1580762422
    },
    {
        "content": "<p>so, I dont see how focusing on a \"hard operational requirement\" is helping the slightest here</p>",
        "id": 187301569,
        "sender_full_name": "RalfJ",
        "timestamp": 1580762434
    },
    {
        "content": "<p>what matters is that <em>in practice</em>, the compiler will never make the stack blow</p>",
        "id": 187301589,
        "sender_full_name": "RalfJ",
        "timestamp": 1580762454
    },
    {
        "content": "<p>just like <em>in practice</em>, the compiler wont do ridiculous things with additions</p>",
        "id": 187301610,
        "sender_full_name": "RalfJ",
        "timestamp": 1580762470
    },
    {
        "content": "<p>I agree though that \"the compiler can <em>probably</em> optimize this\" is <em>not</em> good enough -- it needs to be structural, as easy as it is to compile addition. that's why I spoke of designing an opsem that can be efficiently compiler (in all cases).</p>",
        "id": 187301653,
        "sender_full_name": "RalfJ",
        "timestamp": 1580762505
    },
    {
        "content": "<blockquote>\n<p>'d like us to get to the same point with carefully-written Rust: if you adhere to a few conventions while constructing large objects in otherwise natural ways (i.e., not rewriting everything to have explicit out-pointers), the stack should not blow up unless a whole sequence of very unlikely things happened.</p>\n</blockquote>\n<p>that still sounds somewhat unsatisfying though... something where no optimizations are needed but the structure of the code is such that in-place init is the natural way to compile things would be better, IMO. but this is an outsider opinion, I havent delved into all the hard questions here (nor do I have time to do that)</p>",
        "id": 187302014,
        "sender_full_name": "RalfJ",
        "timestamp": 1580762705
    },
    {
        "content": "<p>I think we're actually in agreement, just approaching it from different directions. I'm also hedging my wording because no matter what we do, there will always be expressions that require huge temporaries to evaluate (but this should be predictable from examining the expression and the functions it calls), and there will also also expressions that run out of stack space despite being compiled in a way that does not involve any huge temporary (but e.g. perhaps a lot of small stack allocations that add up).</p>",
        "id": 187302538,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1580763051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span></p>\n<blockquote>\n<p>I think we're actually in agreement, just approaching it from different directions</p>\n</blockquote>\n<p>I can believe that :)</p>",
        "id": 187364591,
        "sender_full_name": "RalfJ",
        "timestamp": 1580827979
    },
    {
        "content": "<p>I want to imagine there's a macro called <code>init!</code>, let me show it by example:<br>\nassume we have</p>\n<div class=\"codehilite\"><pre><span></span>struct S{ a: u32 }\nstruct T { s: S, t: [u32; 5] }\nfn foo(x: bool) -&gt; u32 { ... }\n</pre></div>\n\n\n<p>when there's a <code>let mut v = MaybeUninit::uninit();</code>, we can call<br>\n<code>init!(v, T { s: S { a: f1 }, t: [f2; 5] }, f1 = foo(true), f2 = foo(false));</code> to fully initialize it.</p>\n<p>the first parameter is a MaybeUninit&lt;T&gt;, the second parameter describes the \"structure\" of the init value, and the rest parameters are named parameters that got evaluated on the stack.</p>\n<p>After this we can wrap it into a macro <code>box!(S {a: f1}, f1 = foo(true))</code> that provides the functionality of placement new and deprecate the box operator :)</p>",
        "id": 187558659,
        "sender_full_name": "Charles Lew",
        "timestamp": 1581003494
    }
]