[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug, Default)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(align(8))]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">AlignToU64</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BYTE_LEN</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AlignToU64</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">BYTE_LEN</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u64_arrays</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">align_to</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">&quot;buffer was not aligned for 64-bit numbers&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">u64_arrays</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;buffer was not long enough&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">&quot;buffer was too long&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">example</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Data</span>::<span class=\"n\">default</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This code passes outside of Miri, but fails inside:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0080]: Miri evaluation error: the evaluated program panicked at &#39;buffer was not aligned for 64-bit numbers&#39;, src/main.rs:13:5\n  --&gt; src/main.rs:13:5\n   |\n13 |     assert!(head.is_empty(), &quot;buffer was not aligned for 64-bit numbers&quot;);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Miri evaluation error: the evaluated program panicked at &#39;buffer was not aligned for 64-bit numbers&#39;, src/main.rs:13:5\n   |\n</pre></div>",
        "id": 172237033,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564677472
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 172237051,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564677483
    },
    {
        "content": "<p>I see <code>repr(packed)</code> in Miri testcases, but didn't see <code>repr(align)</code>. No issues immediately popped out, either.</p>",
        "id": 172237104,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564677507
    },
    {
        "content": "<p>I dont think miri needs any extra handling for <code>repr(align)</code>, that just affects layout computation. but let me digest that example.</p>",
        "id": 172237618,
        "sender_full_name": "RalfJ",
        "timestamp": 1564677928
    },
    {
        "content": "<p><code>align_to</code> in Miri always puts everything into the first component</p>",
        "id": 172237705,
        "sender_full_name": "RalfJ",
        "timestamp": 1564677984
    },
    {
        "content": "<p>so Miri does support <code>align</code> but Miri also exploits the freedom that the <code>align_to</code> spec grants</p>",
        "id": 172237721,
        "sender_full_name": "RalfJ",
        "timestamp": 1564677997
    },
    {
        "content": "<p>which is to say \"oh Im sorry you cannot align this\"</p>",
        "id": 172237732,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678012
    },
    {
        "content": "<p>...</p>",
        "id": 172237748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678022
    },
    {
        "content": "<p>now, we could do better. and by this I mean, even considering that I am not sure we want an implementation that is equivalent to what rustc does, because that impedes our ability to find mis-aligned accesses, we could still do better.</p>",
        "id": 172237992,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678094
    },
    {
        "content": "<p>I am not sure if that's enough for your example though.</p>",
        "id": 172238002,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678101
    },
    {
        "content": "<p>oh and just to complete the lawyering, the <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.align_to\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.align_to\">spec says</a>:</p>\n<blockquote>\n<p>The method does a best effort to make the middle slice the greatest length possible for a given type and input slice, but only your algorithm's performance should depend on that, not its correctness.</p>\n</blockquote>",
        "id": 172238065,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678142
    },
    {
        "content": "<p>I see what you are saying, but I feel like it's veering into the camp of</p>",
        "id": 172238073,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678148
    },
    {
        "content": "<p>yeah, rules lawyering</p>",
        "id": 172238079,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678154
    },
    {
        "content": "<p>well the thing is these rules are useful</p>",
        "id": 172238092,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678168
    },
    {
        "content": "<p>Except that the quoted rules taken to the letter effectively make the function useless.</p>",
        "id": 172238179,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678211
    },
    {
        "content": "<p>\"Here is a thing <strong>guaranteed</strong> by the language to be aligned\" ... \"oh, that's not aligned\"</p>",
        "id": 172238204,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678234
    },
    {
        "content": "<p>that is incorrect</p>",
        "id": 172238206,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678235
    },
    {
        "content": "<p>the part in the middle is guaranteed to be aligned</p>",
        "id": 172238216,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678245
    },
    {
        "content": "<p>libstd correctly uses this function to great effect</p>",
        "id": 172238221,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678251
    },
    {
        "content": "<p>just because you used it wrong and without reading the spec (or ignoring it) doesnt mean it cant usefully be used correctly ;)</p>",
        "id": 172238275,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678299
    },
    {
        "content": "<p>Ok, what is the appropriate function to use?</p>",
        "id": 172238344,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678334
    },
    {
        "content": "<p>the typical usecase is to process the parts on the 1st and 3rd slice with a \"slow path\" and use an alignment-optimized \"fast path\" for the middle</p>",
        "id": 172238345,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678334
    },
    {
        "content": "<p>memchr and memrchr do that, for example. both work fine in Miri.</p>",
        "id": 172238365,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678352
    },
    {
        "content": "<p>what you are doing with this function is weird... there's no point in using it if you already know everything is aligned</p>",
        "id": 172238391,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678376
    },
    {
        "content": "<p>Do I need to (as <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> said... somewhere) use <code>ptr::align</code>and do it myself?</p>",
        "id": 172238409,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678383
    },
    {
        "content": "<p>just cast your pointers</p>",
        "id": 172238411,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678383
    },
    {
        "content": "<p>or check alignment</p>",
        "id": 172238441,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678414
    },
    {
        "content": "<p><code>aign_to</code> is for when you want to handle any-aligned data</p>",
        "id": 172238450,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678422
    },
    {
        "content": "<p>you clearly dont want to do that, sicne you are asserting the first and last component to be empty</p>",
        "id": 172238467,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678436
    },
    {
        "content": "<p>Which I <strong>did</strong>, until <a href=\"#narrow/stream/122651-general/topic/how.20much.20should.20I.20worry.20about.20alignment.20on.20x86.3F\" title=\"#narrow/stream/122651-general/topic/how.20much.20should.20I.20worry.20about.20alignment.20on.20x86.3F\">that tanked my performance</a></p>",
        "id": 172238526,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678459
    },
    {
        "content": "<p>so just do <code>assert!(data as *const _ as usize % mem::align_of::&lt;u64&gt;() == 0)</code> or so</p>",
        "id": 172238532,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678465
    },
    {
        "content": "<p>I dont see how making your code more complicated by calling <code>align_to</code> will make performance better?</p>",
        "id": 172238575,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678494
    },
    {
        "content": "<p>the recommendation to sue <code>align_to</code> as to use it the way it is intended to be used</p>",
        "id": 172238620,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678521
    },
    {
        "content": "<p>not to shoehorn it into your existing code in ways that make little sense</p>",
        "id": 172238641,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678545
    },
    {
        "content": "<p>but I also dont know anything about how to make the optimizer happy^^</p>",
        "id": 172238659,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678562
    },
    {
        "content": "<p>No, I mean that my original code could operate on unaligned data, so I wanted to use <code>align_to</code>to handle it. The algorithm itself doesn't handle it well, so I'm having to rewrite that. Now I have to rewrite this as well.</p>",
        "id": 172238753,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678626
    },
    {
        "content": "<p>all I can help you with is correctness and clarity, and in terms of that, I'd say it is quite clear: <code>align_to</code> is for when you dont know if your input is aligned, but it is a big slice of things that has an \"aligned middle part\".<br>\nyour case seems to be that it already has to be aligned, so you can just assert that and go on with it. (you might run into Miri limitations at some point as well but then it'll really be Miri's fault. ;)</p>",
        "id": 172238777,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678656
    },
    {
        "content": "<p>IIRC you said the algorithm didnt handle unaligned \"pre\"-data or so?</p>",
        "id": 172238852,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678687
    },
    {
        "content": "<p>I sense an XY problem somewhere near us^^</p>",
        "id": 172238859,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678695
    },
    {
        "content": "<p>No</p>",
        "id": 172238879,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678710
    },
    {
        "content": "<p>Basically <code>align_to</code> has zero use whatsoever in this code.</p>",
        "id": 172238899,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678728
    },
    {
        "content": "<p>I dont see how \"using align_to to handle it\" implies \"using align_to in a case where it literally makes no sense because you assume data is already aligned\"</p>",
        "id": 172238900,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678729
    },
    {
        "content": "<blockquote>\n<p>Basically <code>align_to</code> has zero use whatsoever in this code.</p>\n</blockquote>\n<p>that may well be the case</p>",
        "id": 172238912,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678740
    },
    {
        "content": "<p>if the algorithm cannot work with an unaligned prefix followed by an aligned central part, indeed align_to does not help</p>",
        "id": 172238941,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678756
    },
    {
        "content": "<p>Originally I used <code>align_to</code> to handle unaligned data, and I wanted to reuse the same code for a buffer I <em>knew</em> to be aligned</p>",
        "id": 172238965,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678773
    },
    {
        "content": "<p>if there is some mroe context around the minimal example you gave me above, sure maybe the code makes sense</p>",
        "id": 172238998,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678801
    },
    {
        "content": "<p>I dont know that context, obviously</p>",
        "id": 172239075,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678827
    },
    {
        "content": "<p>Well, we've talked about it in the other thread.</p>",
        "id": 172239088,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678837
    },
    {
        "content": "<p>you would have to lobby for strengthening the align_to spec then though</p>",
        "id": 172239092,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678840
    },
    {
        "content": "<p>and maybe Miri should support align_to better (and certainly it has to if the spec gets strengthened)</p>",
        "id": 172239104,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678852
    },
    {
        "content": "<p>This boils down to I'm stupid and can't read the documentation or implement an algorithm.</p>",
        "id": 172239112,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678860
    },
    {
        "content": "<p>So I probably shouldn't be writing this code in the first place.</p>",
        "id": 172239132,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678874
    },
    {
        "content": "<blockquote>\n<p>Well, we've talked about it in the other thread.</p>\n</blockquote>\n<p>I barely remember anything from that, it's not like I was heavily involved or didnt have two dozen other Rust discussions since then^^</p>",
        "id": 172239143,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678884
    },
    {
        "content": "<p>I dont think you are stupid :)<br>\nand I am sorry if I came across too negative above</p>",
        "id": 172239164,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678901
    },
    {
        "content": "<p>My only feedback is that Miri should put at least one thing into the aligned chunk, otherwise that code will never be exercised by Miri.</p>",
        "id": 172239181,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564678916
    },
    {
        "content": "<blockquote>\n<p>My only feedback is that Miri should put at least one thing into the aligned chunk, otherwise that code will never be exercised by Miri.</p>\n</blockquote>\n<p>that is indeed a concern I had. but there's a big downside to doing that, which is that we can no longer reliably detect unaligned accesses.</p>",
        "id": 172239251,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678948
    },
    {
        "content": "<p>accesses might be aligned \"by chance\" (because of what the allocator picked) and we could not distinguish that from properly checked aligned accesses</p>",
        "id": 172239288,
        "sender_full_name": "RalfJ",
        "timestamp": 1564678980
    },
    {
        "content": "<p>we had the thought of emitting a warning when that happens (we can detect that case) and encouraging the user to run Miri with lots of different seeds</p>",
        "id": 172239319,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679011
    },
    {
        "content": "<p>but if we then make <code>align_to</code> actually put anything into the middle, that warning would basically fire for 100% of the code</p>",
        "id": 172239336,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679027
    },
    {
        "content": "<p>(like, any code using <code>align_to</code> on a sufficiently big slice)</p>",
        "id": 172239391,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679048
    },
    {
        "content": "<p>so we might as well not have the warning and just generally encourage using different seeds</p>",
        "id": 172239420,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679069
    },
    {
        "content": "<p>and maybe that's indeed the best we can do</p>",
        "id": 172239431,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679075
    },
    {
        "content": "<p>ah btw, if we ever want to make <code>align_to</code> a <code>const fn</code> we also have to keep its spec the way it is.</p>",
        "id": 172240781,
        "sender_full_name": "RalfJ",
        "timestamp": 1564680055
    },
    {
        "content": "<p><code>align_to</code> was made specifically with the intention that <code>miri</code> would never put anything in the middle.</p>",
        "id": 172248445,
        "sender_full_name": "nagisa",
        "timestamp": 1564684902
    },
    {
        "content": "<p>well, would be allowed to not.</p>",
        "id": 172248466,
        "sender_full_name": "nagisa",
        "timestamp": 1564684914
    },
    {
        "content": "<p>Note that miri the tool may still use the nondeterministic mode to arbitrarily overalign for fuzzing reasons</p>",
        "id": 172253918,
        "sender_full_name": "oli",
        "timestamp": 1564688381
    },
    {
        "content": "<p>Const eval needs to do the deterministic non-aligning</p>",
        "id": 172253974,
        "sender_full_name": "oli",
        "timestamp": 1564688404
    },
    {
        "content": "<p>There's also no point in using <code>ptr::align</code> because it also does the fallback where it returns usize::max_value or sth</p>",
        "id": 172254052,
        "sender_full_name": "oli",
        "timestamp": 1564688501
    },
    {
        "content": "<p>we <em>could</em> decide to change the spec of <code>align_to</code> and the underlying <code>align</code> to disallow spurious failures when run outside const context. that would be implementable at least. it would however restrict miri's ability to do alignment checks. I would be fine if t-libs concluded that this trade-off is worth it.</p>",
        "id": 172260953,
        "sender_full_name": "RalfJ",
        "timestamp": 1564693113
    },
    {
        "content": "<p>What’s the point though? The whole point of this function is that you would have to write code that has no observable differences (other than performance) regardless of how inputs are split</p>",
        "id": 172269525,
        "sender_full_name": "nagisa",
        "timestamp": 1564701094
    },
    {
        "content": "<p>I've written code (nothing outside of throwaway demos, thankfully) that assumed that using align_to to go from &amp;[u8] to &amp;[T] wouldn't return more than align_of::&lt;T&gt;() items in the first slice. I think I just asserted on this, but hearing that miri takes advantage of this to put everything in the first slice is fairly surprising</p>",
        "id": 172274128,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1564706613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Ah, finally found the rustc issue for this: <a href=\"https://github.com/rust-lang/rust/issues/62420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62420\">https://github.com/rust-lang/rust/issues/62420</a></p>",
        "id": 172286211,
        "sender_full_name": "RalfJ",
        "timestamp": 1564725903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> given that we explicitly document that code may not rely on getting the best possible splitting, is there anything else that could be done to make this less surprising?</p>",
        "id": 172286225,
        "sender_full_name": "RalfJ",
        "timestamp": 1564725961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Err, why can't it always return slices such that the middle is the largest possible? I agree it's documented, but it seems like a needless restriction that will only trip people up.</p>",
        "id": 172286532,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1564726460
    },
    {
        "content": "<p>I'm probably missing something though, since I've mostly thought about this for the &amp;[u8] input case</p>",
        "id": 172286696,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1564726720
    },
    {
        "content": "<p>The reason this exists is that const eval cannot return a middle slice because it doesn't know the alignment of an allocation</p>",
        "id": 172287772,
        "sender_full_name": "oli",
        "timestamp": 1564728389
    },
    {
        "content": "<p>Like the real alignment</p>",
        "id": 172287776,
        "sender_full_name": "oli",
        "timestamp": 1564728397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> returning anything is for miri to be able to check the code that <em>should</em> be the same, but the user may have screwed up</p>",
        "id": 172287812,
        "sender_full_name": "oli",
        "timestamp": 1564728482
    },
    {
        "content": "<p>We don't tend to put needless restrictions into our language spec. We are not the adversary. ;)</p>",
        "id": 172288244,
        "sender_full_name": "RalfJ",
        "timestamp": 1564729084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> <a href=\"https://github.com/rust-lang/rust/issues/62420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62420\">https://github.com/rust-lang/rust/issues/62420</a> mentions some reasons</p>",
        "id": 172288249,
        "sender_full_name": "RalfJ",
        "timestamp": 1564729099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> hm, I just realized that with dropping alignment checks from CTFE, the argument that we need this to make <code>align_to</code> a <code>const fn</code> becomes much weaker</p>",
        "id": 172288347,
        "sender_full_name": "RalfJ",
        "timestamp": 1564729252
    },
    {
        "content": "<p>OTOH, we still don't have an alignment to actually use</p>",
        "id": 172288365,
        "sender_full_name": "RalfJ",
        "timestamp": 1564729281
    },
    {
        "content": "<p>Yeah I think CTFE is a strong argument here.<br>\n<span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> so imagine running this during CTFE. When the program wants a 1-aligned allocation, such as for <code>Vec&lt;u8&gt;</code>, we create an allocation that we remember to have alignment 1. We don't actually position this anywhere in the virtual address space -- after all we cannot know (in case this allocation end up in the output of CTFE and is used by the final program) where in the virtual address space this allocation will lie. So even for a 1-aligned allocation of size 256, where in the final program there will be <em>some</em> 8-aligned indices in that allocation, we cannot know <em>which</em> are 8-aligned during CTFE. So conservatively, we have to treat none of them as 8-aligned.</p>",
        "id": 172288518,
        "sender_full_name": "RalfJ",
        "timestamp": 1564729491
    },
    {
        "content": "<p>However, in <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>'s original test case here, the allocation actually <em>is</em> 8-aligned. So we could do better here.</p>",
        "id": 172288546,
        "sender_full_name": "RalfJ",
        "timestamp": 1564729559
    },
    {
        "content": "<p>I am still not convinced that <code>align_to</code> actually helps for what <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> wants to achieve, but we might be able to get one obstacle out of the way.</p>",
        "id": 172288598,
        "sender_full_name": "RalfJ",
        "timestamp": 1564729595
    },
    {
        "content": "<p>Oh, that makes sense. We can make <code>align_to</code> respect the allocation's alignment. I think we even have a FIXME for that somewhere</p>",
        "id": 172289428,
        "sender_full_name": "oli",
        "timestamp": 1564730718
    },
    {
        "content": "<p>we do</p>",
        "id": 172289437,
        "sender_full_name": "RalfJ",
        "timestamp": 1564730747
    },
    {
        "content": "<p>this is not easy in general though</p>",
        "id": 172289443,
        "sender_full_name": "RalfJ",
        "timestamp": 1564730759
    },
    {
        "content": "<p>hm well maybe it's not so bad</p>",
        "id": 172289487,
        "sender_full_name": "RalfJ",
        "timestamp": 1564730770
    },
    {
        "content": "<p>if requested alignment is &lt;= alloc.align:  round up offset to next multiple of requested align</p>",
        "id": 172289491,
        "sender_full_name": "RalfJ",
        "timestamp": 1564730786
    },
    {
        "content": "<p>does that seem reasonable?</p>",
        "id": 172289492,
        "sender_full_name": "RalfJ",
        "timestamp": 1564730790
    },
    {
        "content": "<p>Jup, or offset by zero if already aligned</p>",
        "id": 172290155,
        "sender_full_name": "oli",
        "timestamp": 1564731670
    },
    {
        "content": "<p>that should be an instance of \"round up to next multiple\"</p>",
        "id": 172290464,
        "sender_full_name": "RalfJ",
        "timestamp": 1564732053
    },
    {
        "content": "<p>the one thing I am worried about here is that the code iterating over the middle part (if non-empty) might use SSE or so...^^</p>",
        "id": 172290479,
        "sender_full_name": "RalfJ",
        "timestamp": 1564732081
    },
    {
        "content": "<p>ah it gets more complicated becuase <code>align_offset</code> returns an offset it units of <code>size_of::&lt;T&gt;()</code></p>",
        "id": 172290903,
        "sender_full_name": "RalfJ",
        "timestamp": 1564732575
    },
    {
        "content": "<p>so the best thing probably is to just run the libcore code...^^</p>",
        "id": 172290910,
        "sender_full_name": "RalfJ",
        "timestamp": 1564732585
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/miri/issues/873\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/873\">https://github.com/rust-lang/miri/issues/873</a></p>",
        "id": 172290998,
        "sender_full_name": "RalfJ",
        "timestamp": 1564732697
    },
    {
        "content": "<p>Oh right</p>",
        "id": 172292724,
        "sender_full_name": "oli",
        "timestamp": 1564734794
    },
    {
        "content": "<p>OK, we are doing the right thing here</p>",
        "id": 172292733,
        "sender_full_name": "oli",
        "timestamp": 1564734803
    },
    {
        "content": "<p>We can't detect SSE vs non-sse</p>",
        "id": 172292792,
        "sender_full_name": "oli",
        "timestamp": 1564734849
    },
    {
        "content": "<p>Or lol, we can</p>",
        "id": 172292796,
        "sender_full_name": "oli",
        "timestamp": 1564734854
    },
    {
        "content": "<p>Make a snapshot, wait for failure, if it happens, revert and run normally</p>",
        "id": 172292836,
        "sender_full_name": "oli",
        "timestamp": 1564734930
    },
    {
        "content": "<p>Kill snapshot on return from frame that did snapshot</p>",
        "id": 172292850,
        "sender_full_name": "oli",
        "timestamp": 1564734954
    },
    {
        "content": "<p><span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 172292902,
        "sender_full_name": "oli",
        "timestamp": 1564734975
    },
    {
        "content": "<p><span aria-label=\"skull\" class=\"emoji emoji-1f480\" role=\"img\" title=\"skull\">:skull:</span></p>",
        "id": 172294553,
        "sender_full_name": "RalfJ",
        "timestamp": 1564737134
    },
    {
        "content": "<p>maybe they are not using complex SSE instructions ;) from what I gathered, there's a small amount of them that should cover most code</p>",
        "id": 172294569,
        "sender_full_name": "RalfJ",
        "timestamp": 1564737162
    },
    {
        "content": "<blockquote>\n<p>We don't tend to put needless restrictions into our language spec. We are not the adversary. ;)</p>\n</blockquote>\n<p>Sure, but it's often in a language designer's best interest to be vague where possible, whereas it's in the programmer's best interest for those vagueness's to be concrete.</p>",
        "id": 172338095,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1564776033
    },
    {
        "content": "<p>I like proving things about programs, so I don't usually like vague. ;)</p>",
        "id": 172338849,
        "sender_full_name": "RalfJ",
        "timestamp": 1564776775
    }
]