[
    {
        "content": "<p>I'm wondering if it if possible to check if a symbol is defined in a macro (declarative or procedural) and then take different branches.</p>\n<p>Say, I have a macro  named <code>log_info</code>. If a symbol named <code>LOG_PREFIX</code> is define, it will be prepended to <code>log_info</code> output. If that symbol is not defined, <code>log_info</code> does does something different.</p>",
        "id": 241696714,
        "sender_full_name": "Wei Liu",
        "timestamp": 1622993147
    },
    {
        "content": "<p>No, it is not possible for a macro to check if a symbol is defined as the set of defined symbols is only known <strong>after</strong> macro expansion.</p>",
        "id": 241700432,
        "sender_full_name": "bjorn3",
        "timestamp": 1622998917
    },
    {
        "content": "<p>Good point. Thanks.</p>",
        "id": 241702364,
        "sender_full_name": "Wei Liu",
        "timestamp": 1623001828
    },
    {
        "content": "<p>So, you seem to want a behavior such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">my_println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// No prefix</span>\n<span class=\"w\">    </span><span class=\"n\">module</span>::<span class=\"n\">main</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LOG_PREFIX</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"[LOG] \"</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">my_println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Has prefix</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In that case, while, indeed, what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> said is true, and macros can't, indeed, know whether a given symbol is in scope, it turns out that macros can emit code which is interpreted different by the compiler based on whether a symbol is in scope or not. Indeed, it is possible to (ab)use glob imports and their behavior <em>w.r.t.</em> shadowing to get imports that can be shadowed by items already being in scope. Which thus interacts directly with what you require.</p>\n<p>For instance, consider the following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// const LOG_PREFIX: &amp;str = \"[LOG] \";</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MY_PREFIX</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow(unused_imports)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">module</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mod</span> <span class=\"nn\">module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#![allow(unused)]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//  vvvv</span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">helper</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// ^^^^ Fight!</span>\n<span class=\"w\">            </span><span class=\"k\">mod</span> <span class=\"nn\">helper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LOG_PREFIX</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">LOG_PREFIX</span><span class=\"w\"> </span><span class=\"cm\">/* refers to the one in `helper` unless one was already in scope */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">MY_PREFIX</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"cm\">/* Value thus depends on whether `LOG_PREFIX` was in scope */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=039dc68fc48c7829e2180631417fde83\">Playground</a></li>\n</ul>\n<p>At this point, it is not hard to automate this pattern within a helper macro, and make the intended snippet Just Workâ„¢ <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">my_println</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"> </span><span class=\"cp\">$($msg</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">__HELPER__</span>: <span class=\"kp\">&amp;</span>::<span class=\"n\">core</span>::<span class=\"n\">primitive</span>::<span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow(unused_imports)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">__helper__</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mod</span> <span class=\"nn\">__helper__</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#![allow(unused)]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">nested</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">mod</span> <span class=\"nn\">nested</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LOG_PREFIX</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">LOG_PREFIX</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span>::<span class=\"n\">std</span>::<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"{}{}\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__HELPER__</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span>::<span class=\"n\">core</span>::<span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"cp\">$($msg</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">})}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">my_println</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>\n<h2><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0439d2781d5772fc51dac0af70cf69d6\">Playground</a></h2>\n</li>\n</ul>",
        "id": 241702700,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623002363
    },
    {
        "content": "<p>this is <code>cfg(accessible)</code> I think</p>",
        "id": 241704639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623004707
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64797\">https://github.com/rust-lang/rust/issues/64797</a></p>",
        "id": 241704643,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623004717
    },
    {
        "content": "<p>Daniel, thank you for your detailed reply. While I think your trick is neat, I don't think the idea of abusing shadowing will fly in the project I want to work on. :-)</p>",
        "id": 241711990,
        "sender_full_name": "Wei Liu",
        "timestamp": 1623015416
    },
    {
        "content": "<p>Yeah, inlining that isn't great, for sure, but through that macro layer to hide the implementation details I <em>personally</em> find it to be fine <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>. As Joshua mentioned, there will be a cleaner way to do this in the future, at which point the macro could be seamlessly updated to use that</p>",
        "id": 241832086,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623095987
    }
]