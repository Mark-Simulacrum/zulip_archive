[
    {
        "content": "<p>I am currently trying to use an enum like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Zar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218958520,
        "sender_full_name": "lcnr",
        "timestamp": 1607210204
    },
    {
        "content": "<p>if I now have <code>Foo&lt;!&gt;</code> and <code>Foo&lt;SmallTy&gt;</code> so that the <code>Size</code> of <code>Foo</code> is the same in both cases</p>",
        "id": 218958530,
        "sender_full_name": "lcnr",
        "timestamp": 1607210238
    },
    {
        "content": "<p>can i soundly transmute between the two if they are a different variant to <code>Foo::Var</code>?</p>",
        "id": 218958538,
        "sender_full_name": "lcnr",
        "timestamp": 1607210273
    },
    {
        "content": "<p>i kind of don't think so but i would be interested in seeing any potential approaches worth trying here</p>",
        "id": 218958589,
        "sender_full_name": "lcnr",
        "timestamp": 1607210316
    },
    {
        "content": "<p>I intend to only use this inside of <code>rustc</code> tiself, so I wouldn't mind being forced to rely on some publicly unspecified implementation detail</p>",
        "id": 218958605,
        "sender_full_name": "lcnr",
        "timestamp": 1607210372
    },
    {
        "content": "<p>as long as we are able to reason about said implementation detail without too much effort</p>",
        "id": 218958658,
        "sender_full_name": "lcnr",
        "timestamp": 1607210425
    },
    {
        "content": "<p>You could give it a <code>#[repr(...)]</code>, such as <code>C</code> or <code>u8</code>. In that case it should be sound to transmute</p>",
        "id": 218959094,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607211216
    },
    {
        "content": "<p>See <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/enums.html#layout-of-a-data-carrying-enums-with-an-explicit-repr-annotation\">https://rust-lang.github.io/unsafe-code-guidelines/layout/enums.html#layout-of-a-data-carrying-enums-with-an-explicit-repr-annotation</a> (it's non-normative yet, but definitely stable enough for <code>rustc</code>)</p>",
        "id": 218959471,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607211953
    },
    {
        "content": "<p>Given that repr(rust) it can't optimize away the discriminant in any of the cases anyway, I think the <code>#[repr(C, u8)]</code> kind of solution is probably best.  Doesn't introduce extra cost, and doesn't rely on unspecified details.</p>",
        "id": 218960319,
        "sender_full_name": "scottmcm",
        "timestamp": 1607213341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/transmute.20between.20generic.20enums/near/218959471\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/enums.html#layout-of-a-data-carrying-enums-with-an-explicit-repr-annotation\">https://rust-lang.github.io/unsafe-code-guidelines/layout/enums.html#layout-of-a-data-carrying-enums-with-an-explicit-repr-annotation</a> (it's non-normative yet, but definitely stable enough for <code>rustc</code>)</p>\n</blockquote>\n<p>Don't know how recently this was added to the reference, <br>\nbut <code>#[repr(Int)]</code> and <code>#[repr(C, Int)]</code> enums with fields are both in the stable reference already:<br>\n<a href=\"https://doc.rust-lang.org/reference/type-layout.html?highlight=repr,inet#primitive-representation-of-enums-with-fields\">https://doc.rust-lang.org/reference/type-layout.html?highlight=repr,inet#primitive-representation-of-enums-with-fields</a></p>",
        "id": 218963760,
        "sender_full_name": "matt1992",
        "timestamp": 1607219683
    }
]