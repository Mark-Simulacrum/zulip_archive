[
    {
        "content": "<p>I discussed the idea of a <code>flatten</code> method to convert <code>[[T; N]]</code> to <code>[T]</code> on URLO (<a href=\"https://users.rust-lang.org/t/is-there-t-n-flatten/73350\">link</a>). I was interested in proposing/implementing this, and <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> said</p>\n<ol>\n<li>I could bring it up here if I was interested in more input, which I am</li>\n<li>Adding methods to builtin-types such as slices can be hard because of \"silly reasons\"</li>\n</ol>\n<p>I am interested in thoughts, (there was discussion of using safe transmute, which is interesting), but I also don't know what weirdness and \"silly reasons\" there are/may be.</p>",
        "id": 276746768,
        "sender_full_name": "Cyborus",
        "timestamp": 1648330143
    },
    {
        "content": "<p>(also this is my first time ever using zulip so I really hope I did this right)</p>",
        "id": 276746770,
        "sender_full_name": "Cyborus",
        "timestamp": 1648330146
    },
    {
        "content": "<p>The idea of having flatten working on <code>[A]</code> where A can be safely transmuted into <code>[T; N]</code> does look good too, but safe transmute is not yet stable, and even if flatten took <code>[[T; N]]</code>, it could be modified to take <code>[A]</code> instead later</p>",
        "id": 276746998,
        "sender_full_name": "Cyborus",
        "timestamp": 1648330418
    },
    {
        "content": "<p>Yeah, zulip can take a bit to get used to (though I quite like it).  Make sure you've been to the \"subscribe to more streams\" at the bottom left to find everything -- you might be interested in <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a> and <a class=\"stream\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp\">#t-compiler/help</a> , for example.  (But here is probably fine.)</p>\n<blockquote>\n<p>but I also don't know what weirdness and \"silly reasons\" there are/may be.</p>\n</blockquote>\n<p>New <code>impl</code> blocks on slices require new lang items.  You can see an example of how to do that in <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span>'s PR here: <a href=\"https://github.com/rust-lang/rust/pull/93397/files\">https://github.com/rust-lang/rust/pull/93397/files</a></p>\n<blockquote>\n<p>where <code>A</code> can be safely transmuted into <code>[T; N]</code> does look good too</p>\n</blockquote>\n<p>It has the downside of creating ambiguity, though.  I'd much rather be able to just <code>.flatten()</code> than have to say <code>.flatten::&lt;f32, 4&gt;()</code> because it's <em>safe</em> to also flatten that as <code>.flatten::&lt;u16, 8&gt;()</code> -- that latter is so rarely what I'd actually want that I think full safe transmute isn't actually desirable in such a method.</p>",
        "id": 276747445,
        "sender_full_name": "scottmcm",
        "timestamp": 1648331060
    },
    {
        "content": "<p>That's a good point, maybe a transmuting-flatten would be better suited for either an external crate, or a dedicated<code>transmute_slice</code>/<code>safe_align_to</code> method</p>",
        "id": 276747805,
        "sender_full_name": "Cyborus",
        "timestamp": 1648331582
    },
    {
        "content": "<p>Especially since they could easily be combined -- like <code>.safe_transmute::&lt;[u16; 8]&gt;().flatten()</code>.</p>",
        "id": 276747884,
        "sender_full_name": "scottmcm",
        "timestamp": 1648331674
    },
    {
        "content": "<p>One way to make it <em>slightly</em> more general while still not needing annotation would be to have a no-type-parameter trait to bound on it.  Like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CanonicalArrayRepr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Element</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CanonicalArrayRepr</span><span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Element</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which would also be convenient since then you wouldn't need the new <code>lang_item</code>s.</p>\n<p>But that wouldn't actually be more general unless the trait were <code>pub</code>lic, and I don't know whether the library team would want such a thing -- <code>core</code> is quite conservative around traits.</p>",
        "id": 276748085,
        "sender_full_name": "scottmcm",
        "timestamp": 1648331957
    },
    {
        "content": "<p>I think the direct <code>[[T; N]]</code> to <code>[T]</code> is the best option. It does just one thing which is easy to understand, and isn't too overloaded with features. To me, flattening a slice and converting <code>[Color]</code> -&gt; <code>[u8]</code> feel like logically distinct operations.</p>",
        "id": 276748733,
        "sender_full_name": "Cyborus",
        "timestamp": 1648332751
    },
    {
        "content": "<p>(given <code>#[repr(C)] Color { r: u8, g: u8, b: u8 }</code>)</p>",
        "id": 276748751,
        "sender_full_name": "Cyborus",
        "timestamp": 1648332803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/Flattening.20slices.20of.20arrays/near/276747445\">said</a>:</p>\n<blockquote>\n<p>New <code>impl</code> blocks on slices require new lang items. </p>\n</blockquote>\n<p>That makes sense, but <a href=\"https://github.com/rust-lang/rust/commit/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc\">this commit</a> is really confusing me. I can't even find any context for it</p>",
        "id": 277467846,
        "sender_full_name": "Cyborus",
        "timestamp": 1648841493
    },
    {
        "content": "<p>Context: <a href=\"https://github.com/rust-lang/rust/commit/bef6f3e895beede5bfd5ba4bb12898615c156d59\">https://github.com/rust-lang/rust/commit/bef6f3e895beede5bfd5ba4bb12898615c156d59</a><br>\nlooks like this was reworked recently</p>",
        "id": 277468337,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648841824
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94963\">https://github.com/rust-lang/rust/pull/94963</a></p>",
        "id": 277468377,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648841856
    },
    {
        "content": "<p>thanks!</p>",
        "id": 277468544,
        "sender_full_name": "Cyborus",
        "timestamp": 1648841944
    },
    {
        "content": "<p>Oh, nice!  That will make things way easier.</p>",
        "id": 277469592,
        "sender_full_name": "scottmcm",
        "timestamp": 1648842627
    },
    {
        "content": "<p>excuse me while I try to remember how to make a commit without botching the submodules</p>",
        "id": 277469990,
        "sender_full_name": "Cyborus",
        "timestamp": 1648842847
    },
    {
        "content": "<p>(My suggestion is to never <code>merge</code> in <code>master</code> ever; always <code>rebase</code>.)</p>",
        "id": 277470514,
        "sender_full_name": "scottmcm",
        "timestamp": 1648843169
    },
    {
        "content": "<p>I haven't even committed anything yet but the submodules are already giving me a hassle</p>",
        "id": 277472049,
        "sender_full_name": "Cyborus",
        "timestamp": 1648843953
    },
    {
        "content": "<p>there's submodule changes for <code>src/llvm-project</code>, <code>src/tools/cargo</code>, and <code>src/tools/miri</code> but they aren't being fixed by <code>x.py</code></p>",
        "id": 277472131,
        "sender_full_name": "Cyborus",
        "timestamp": 1648844000
    },
    {
        "content": "<p>on the master branch</p>",
        "id": 277472245,
        "sender_full_name": "Cyborus",
        "timestamp": 1648844063
    },
    {
        "content": "<p>Did you do a <code>git submodule update</code>? (If not, you may wish to)</p>",
        "id": 277472345,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648844126
    },
    {
        "content": "<p>It may be the case that git says \"your submodules should be at revision X\" but your on disk is at revision Y.</p>",
        "id": 277472406,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648844162
    },
    {
        "content": "<p>I just tried that and nothing happened (also TIL that command exists :P)</p>",
        "id": 277472469,
        "sender_full_name": "Cyborus",
        "timestamp": 1648844206
    },
    {
        "content": "<p>I did run out of disk space during a branch change, is it possible that's causing problems?</p>",
        "id": 277472475,
        "sender_full_name": "Cyborus",
        "timestamp": 1648844209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/Flattening.20slices.20of.20arrays/near/277470514\">said</a>:</p>\n<blockquote>\n<p>(My suggestion is to never <code>merge</code> in <code>master</code> ever; always <code>rebase</code>.)</p>\n</blockquote>\n<p><del>in <code>master</code></del></p>",
        "id": 277473226,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648844627
    },
    {
        "content": "<p>merges are good. rebases are good. people generally don't want to spend time learning when one should be used over the other.</p>",
        "id": 277474452,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648845298
    },
    {
        "content": "<blockquote>\n<p>there's submodule changes</p>\n</blockquote>\n<p>What do you see, specifically?</p>",
        "id": 277474572,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648845376
    },
    {
        "content": "<p>For example, I just pulled the master branch and I see things like</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Changes not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   src/doc/book (new commits)\n    modified:   src/doc/embedded-book (new commits)\n</code></pre></div>\n<p>After a <code>git submodule update</code>, those lines are gone.</p>",
        "id": 277474659,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648845425
    },
    {
        "content": "<p>oh, sorry, I just re-cloned the repo, so I can't check now</p>",
        "id": 277478004,
        "sender_full_name": "Cyborus",
        "timestamp": 1648847398
    },
    {
        "content": "<p>Not sure what to do about this</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0390]: only a single inherent implementation marked with `#[lang = \"slice\"]` is allowed for the `[T]` primitive\n    --&gt; library\\core\\src\\slice\\mod.rs:3997:1\n     |\n3997 | / impl&lt;T, const N: usize&gt; [[T; N]] {\n3998 | |     pub fn flatten(&amp;self) -&gt; &amp;[T] {\n3999 | |         unsafe {\n4000 | |             let len = if crate::mem::size_of::&lt;T&gt;() == 0 {\n...    |\n4022 | |     }\n4023 | | }\n     | |_^\n     |\n     = help: consider using a trait to implement these methods\n</code></pre></div>\n<p>It's suggesting a trait but I'm too not sure about that</p>",
        "id": 277480049,
        "sender_full_name": "Cyborus",
        "timestamp": 1648848574
    },
    {
        "content": "<p>Does it need a new lang item anyway..?</p>",
        "id": 277480227,
        "sender_full_name": "Cyborus",
        "timestamp": 1648848673
    },
    {
        "content": "<p>haha! it works!</p>",
        "id": 277488855,
        "sender_full_name": "Cyborus",
        "timestamp": 1648854324
    },
    {
        "content": "<p>I did add a new lang item</p>",
        "id": 277488858,
        "sender_full_name": "Cyborus",
        "timestamp": 1648854330
    },
    {
        "content": "<p>that fixed it</p>",
        "id": 277488861,
        "sender_full_name": "Cyborus",
        "timestamp": 1648854337
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/95579\">https://github.com/rust-lang/rust/pull/95579</a></p>",
        "id": 277494822,
        "sender_full_name": "Cyborus",
        "timestamp": 1648860280
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/95579#discussion_r840984849\">They're going to need <code>unstable</code> attributes</a>, two questions:</p>\n<ol>\n<li>Do I need to define the feature anywhere else, or does it just need to go in the attribute?</li>\n<li>What issue do I set it to?</li>\n</ol>",
        "id": 277495661,
        "sender_full_name": "Cyborus",
        "timestamp": 1648861301
    },
    {
        "content": "<p>do I need to make a tracking issue for it?</p>",
        "id": 277495739,
        "sender_full_name": "Cyborus",
        "timestamp": 1648861415
    },
    {
        "content": "<p>Just the attribute is enough.  Here's an example: <a href=\"https://github.com/rust-lang/rust/pull/95218/files#diff-246941135168fbc44fce120385ee9c3156e08a1c3e2697985b56dcb8d728eedeR1789\">https://github.com/rust-lang/rust/pull/95218/files#diff-246941135168fbc44fce120385ee9c3156e08a1c3e2697985b56dcb8d728eedeR1789</a></p>",
        "id": 277495810,
        "sender_full_name": "scottmcm",
        "timestamp": 1648861491
    },
    {
        "content": "<p>You can make a tracking issue now (it's an option in <a href=\"https://github.com/rust-lang/rust/issues/new/choose\">https://github.com/rust-lang/rust/issues/new/choose</a>) or just leave the number a placeholder -- <a href=\"https://github.com/scottmcm/rust/commit/f4076dd9edb6a8abe227eb41085c853a173c0490#diff-b5736412f785f181ff3fcd768a2ea5f3bc1c6313af38a0094e5ef49c0e489c4fR190\">I use 88888888</a> -- for new pending reviewer feedback, and make the tracking issue later.  Up to you.</p>",
        "id": 277495902,
        "sender_full_name": "scottmcm",
        "timestamp": 1648861595
    },
    {
        "content": "<p>(If you're curious: for <em>language</em> features it's more complicated, see <a href=\"https://rustc-dev-guide.rust-lang.org/implementing_new_features.html#stability-in-code\">https://rustc-dev-guide.rust-lang.org/implementing_new_features.html#stability-in-code</a>, but for library features just adding it in the attribute suffices.)</p>",
        "id": 277496024,
        "sender_full_name": "scottmcm",
        "timestamp": 1648861703
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 277496035,
        "sender_full_name": "Cyborus",
        "timestamp": 1648861719
    },
    {
        "content": "<p>is it possible to set you as the reviewer? If so, can I, and how do I?</p>",
        "id": 277498211,
        "sender_full_name": "Cyborus",
        "timestamp": 1648864137
    },
    {
        "content": "<p>err, Assignee*</p>",
        "id": 277498221,
        "sender_full_name": "Cyborus",
        "timestamp": 1648864150
    },
    {
        "content": "<p><code>r? @scottmcm</code></p>",
        "id": 277498335,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648864322
    },
    {
        "content": "<p>thanks</p>",
        "id": 277498368,
        "sender_full_name": "Cyborus",
        "timestamp": 1648864336
    }
]