[
    {
        "content": "<p>I got a few errors that instructed me to increase my <code>type_length_limit</code> to <code>1394658</code>. What is the unit of this setting? Should I be worried about running into this soft-limit?</p>",
        "id": 186009222,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579376857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/middle/recursion_limit.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/middle/recursion_limit.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc/middle/recursion_limit.rs</a><br>\nIt looks like the default is 1048576</p>",
        "id": 186009359,
        "sender_full_name": "Zexbe",
        "timestamp": 1579377117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259133\">@Zexbe</span> ok, but what is the unit of this setting? Should I be worried about running into this soft-limit?</p>",
        "id": 186009416,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579377201
    },
    {
        "content": "<p>The unit is types. So <code>u32</code> has length 1, <code>Vec&lt;u32&gt;</code> has length 2 (<code>Vec&lt;u32&gt;</code> and <code>u32</code>), <code>Vec(u32, u32)&gt;</code> has length 4 (<code>Vec(u32, u32)&gt;</code>, <code>(u32, u32)</code>, <code>u32</code>, `u32).</p>",
        "id": 186009489,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579377346
    },
    {
        "content": "<p>wow, so 1048576 is really big then</p>",
        "id": 186009552,
        "sender_full_name": "Zexbe",
        "timestamp": 1579377451
    },
    {
        "content": "<p>Futures code can fairly easily hit this limit (it's after monomorphization and sees through impl trait). You may want to consider strategic use of <code>Pin&lt;Box&lt;dyn Future&gt;&gt;</code>.</p>",
        "id": 186009598,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579377492
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/reference/attributes/limits.html#the-type_length_limit-attribute\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/reference/attributes/limits.html#the-type_length_limit-attribute\">https://doc.rust-lang.org/nightly/reference/attributes/limits.html#the-type_length_limit-attribute</a></p>",
        "id": 186009600,
        "sender_full_name": "centril",
        "timestamp": 1579377499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> hmm; why does the limit exist?</p>",
        "id": 186009684,
        "sender_full_name": "centril",
        "timestamp": 1579377619
    },
    {
        "content": "<p>To avoid really slow codegen.</p>",
        "id": 186009687,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579377639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> thanks for the docs, but I don't see how it correlates to what <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> says:</p>\n<blockquote>\n<p>maximum number of type substitutions</p>\n</blockquote>\n<p>How is <code>u32</code> a \"type substitution\"?</p>",
        "id": 186009688,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579377639
    },
    {
        "content": "<p>since it's after monomorphization, it doesn't seem to be about preventing non-termination in e.g. the trait system</p>",
        "id": 186009706,
        "sender_full_name": "centril",
        "timestamp": 1579377687
    },
    {
        "content": "<p>No, that's what the recursion limit is for.</p>",
        "id": 186009710,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579377706
    },
    {
        "content": "<p>oh; it's used for traits as well, not just macros</p>",
        "id": 186009714,
        "sender_full_name": "centril",
        "timestamp": 1579377718
    },
    {
        "content": "<p>and recursive monomorphizations, etc.</p>",
        "id": 186009757,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579377750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I don't suppose there's an issue about improving the error to guide us to a judicious use of boxing?</p>",
        "id": 186009758,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579377750
    },
    {
        "content": "<p>is <code>type_length_limit</code> somehow related to the linker and avoiding literally too long type names in debuginfo?</p>",
        "id": 186009766,
        "sender_full_name": "centril",
        "timestamp": 1579377781
    },
    {
        "content": "<p>I don't think so. There may be a more general issue about tracking sizes of async futures.</p>",
        "id": 186009777,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579377826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> is the \"really slow codegen\" answer insufficient a reason?</p>",
        "id": 186009778,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579377828
    },
    {
        "content": "<p>ah, I missed matthew's answer</p>",
        "id": 186009827,
        "sender_full_name": "centril",
        "timestamp": 1579377897
    },
    {
        "content": "<p>Is there a rough relation of number of types to compilation time? Like, if the default were 1M and I \"needed\" 100M (made up numbers), what kind of pain would I be feeling?</p>",
        "id": 186009979,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1579378179
    },
    {
        "content": "<p>/me ponders whether storing generator witnesses out of line to reduce the impact of this would make any sense</p>",
        "id": 186009987,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579378202
    }
]