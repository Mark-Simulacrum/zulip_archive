[
    {
        "content": "<p>Hi all, I'm curious to get feedback on an idea. I'd like to work on an addition to rustc that allows passing arbitrary LLVM IR or bitcode as additional modules during compilation. It's already possible to compile LLVM into a rust project by using something like the cc crate, but that requires clang as an external dependency. My interest is in providing a way to include bitcode without requiring dependencies outside of rustc, and it seems like it should be possible by including the user provided contents in the modules passed to LLVM after codegen. Do any plans for something like this already exist? Has such an idea already been discussed and rejected, and if so, why?</p>\n<p>I may build a prototype just for the experience, but I'd like to understand if this is something that I should try to make an RFC. This is my first time on zulip, so happy to be redirected to a more appropriate place to ask this question!</p>",
        "id": 276766556,
        "sender_full_name": "Stefan J. Wernli",
        "timestamp": 1648358071
    },
    {
        "content": "<p>How would that interact with non-LLVM backends?</p>",
        "id": 276777818,
        "sender_full_name": "The 8472",
        "timestamp": 1648372610
    },
    {
        "content": "<p>Also what LLVM version will you generate bitcode for? While the officially distributed rustc uses a very recent LLVM version, distros often build it against an LLVM that is several versions older. While newer LLVM can load older bitcode, the opposite is not true. Even if it seems like it succeeded, you may have inadvertently introduced UB due to an attribute being ignored.</p>",
        "id": 276781513,
        "sender_full_name": "bjorn3",
        "timestamp": 1648377692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20arbitrary.20LLVM.20IR.20in.20rustc/near/276777818\">said</a>:</p>\n<blockquote>\n<p>How would that interact with non-LLVM backends?</p>\n</blockquote>\n<p>There are currently two such backends:</p>\n<ul>\n<li>rustc_codegen_gcc by <span class=\"user-mention silent\" data-user-id=\"404242\">antoyo</span> with a focus on portability</li>\n<li>rustc_codegen_cranelift by me with a focus on compilation speed</li>\n</ul>",
        "id": 276781581,
        "sender_full_name": "bjorn3",
        "timestamp": 1648377746
    },
    {
        "content": "<p>Good questions. Unlike clang, which allows providing .bc or .ll files the same way as .c and .cpp files, I think these should be differentiated from .rs files by a special flag. Since the IR may come from any tools that can produce it as output, it would be treated as an external static dependency and treated as unsafe by default. So it would be more analogous to providing static libraries to satisfy extern declarations than a mechanism for including other rust code. If LLVM files are provided via this flag when compiling with non-LLVM codegen backends, it would be an error.</p>",
        "id": 276804036,
        "sender_full_name": "Stefan J. Wernli",
        "timestamp": 1648409966
    }
]