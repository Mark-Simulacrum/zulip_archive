[
    {
        "content": "<p>Hello, I have been thinking about constructing (String) tries at compile time and attempted it in zig <a href=\"https://gist.github.com/benmkw/4c3d04ec87dd7668e4af972d5ae6971b\">https://gist.github.com/benmkw/4c3d04ec87dd7668e4af972d5ae6971b</a> and there is prior work in cpp e.g. <a href=\"https://github.com/smilingthax/cttrie\">https://github.com/smilingthax/cttrie</a>. I could not find something that does the same in rust. If it isn just me searching in all the wrong places and also not a limitation of proc macros (I don't think it should be a limitation because I think I can sort tokens and output some if statements?) then this might be an interesting project to learn more about proc macros. Thanks for your thoughts!</p>",
        "id": 203884737,
        "sender_full_name": "Benedikt Mandelkow",
        "timestamp": 1594759039
    },
    {
        "content": "<p>yeah you should be able to</p>",
        "id": 203889004,
        "sender_full_name": "eddyb",
        "timestamp": 1594761137
    },
    {
        "content": "<p>ok nice, this will make it harder to give up once I try :)</p>",
        "id": 203889792,
        "sender_full_name": "Benedikt Mandelkow",
        "timestamp": 1594761587
    },
    {
        "content": "<p>you probably want a hierarchy of <code>match</code>es so it compiles down like a <code>switch</code> would in other languages</p>",
        "id": 203890177,
        "sender_full_name": "eddyb",
        "timestamp": 1594761761
    },
    {
        "content": "<p>you might even get away without a hierarchy, and just expanding <code>\"foo\"</code> into <code>[b'f', b'o', b'o']</code>, depending on how the pattern-matching compiles that</p>",
        "id": 203890252,
        "sender_full_name": "eddyb",
        "timestamp": 1594761805
    },
    {
        "content": "<p>It would certainly be interesting to compare it against the match approach. I would expect the match to do comparisons for each char and not reuse them across branches (like reuse the prefixes) but I'd like to be wrong on that.</p>",
        "id": 203940988,
        "sender_full_name": "Benedikt Mandelkow",
        "timestamp": 1594811092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"309872\">@Benedikt Mandelkow</span> it will not reuse anything if you use <code>\"...\"</code> literals as patterns. it does something more advanced, IIRC, when there is some structure to the pattern</p>",
        "id": 203941045,
        "sender_full_name": "eddyb",
        "timestamp": 1594811142
    },
    {
        "content": "<p>in some cases <code>match x { pat0 =&gt; ..., pat1 =&gt; ..., ... }</code> might be similar to <code>if let pat0 = x { ... } else if let pat1 = x { ... } else ...</code></p>",
        "id": 203941175,
        "sender_full_name": "eddyb",
        "timestamp": 1594811235
    },
    {
        "content": "<p>but I believe we still try to do better than that when there's some prefix sharing in the patterns. cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 203941217,
        "sender_full_name": "eddyb",
        "timestamp": 1594811273
    },
    {
        "content": "<p>ok so its probably also a question if this happens when matching on str as well which would make this whole DIY approach redundant for that case. And maybe this happens for small matches by llvm but not for longer ones so its a question of who does it? </p>\n<p>If it happens for matches on slices (and not just by llvm) but not for str, a manual implementation might still make sense. <br>\nBut I was just curious about proc macros so its not primarily a discussion about performance for me because there are obviously other options like perfect hashing available as well so I kind of expect matches to not use such a specific technique (trie) by default.</p>",
        "id": 203942426,
        "sender_full_name": "Benedikt Mandelkow",
        "timestamp": 1594812163
    },
    {
        "content": "<p>it doesn't for (byte) string literals</p>",
        "id": 203942440,
        "sender_full_name": "eddyb",
        "timestamp": 1594812176
    },
    {
        "content": "<p>for various reasons we just <code>memcmp</code> in that case</p>",
        "id": 203942452,
        "sender_full_name": "eddyb",
        "timestamp": 1594812190
    },
    {
        "content": "<p>We do better in cases like: <code>Some(1) =&gt; { ... }, Some(2) =&gt; { ... }</code> (we only check the enum discriminant once).</p>",
        "id": 203946202,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594814758
    },
    {
        "content": "<p>I can show some results <a href=\"https://paste.rs/Lls\">https://paste.rs/Lls</a> <br>\nnotably the unsafe version trusts the input to be one of the enum variants <br>\ndon't really have a conclusion but it was fun and maybe I can turn this into a proper api/ have some ideas left and will show up again then :D</p>",
        "id": 209218884,
        "sender_full_name": "Benedikt Mandelkow",
        "timestamp": 1599387523
    }
]