[
    {
        "content": "<p>to work around the lack of variadic generics i was thinking of doing a proc macro that parses the function parameters and stores that info somewhere. i'm just not sure where \"somewhere\" is. typically i'd use a trait but there's no way to impl a trait for a function item. anyone have any ideas?</p>",
        "id": 249068988,
        "sender_full_name": "devsnek",
        "timestamp": 1628658224
    },
    {
        "content": "<p>Is this function only invoked by your macro? If so, you could make it a constant that implements a trait or something.</p>",
        "id": 249634013,
        "sender_full_name": "Kestrer",
        "timestamp": 1629141339
    },
    {
        "content": "<blockquote>\n<p>there's no way to impl a trait for a function item</p>\n</blockquote>\n<p>If the proc macro is the one emitting the function, you can create your own ZST which fakes being a function item; I guess I should probably publish that knowledge / technique as a lib:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! Classic well-known case</span>\n\n<span class=\"sd\">/// Instead of:</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nc\">Arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nc\">Ret</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Emit:</span>\n<span class=\"cp\">#[derive(Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">Arg</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ret</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">foo</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">Ret</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FUN</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Arg</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">arg</span>: <span class=\"nc\">Arg</span><span class=\"o\">|</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ret</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">FUN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* Now you can do `foo(arg)` without problems, `foo` is a ZST,</span>\n<span class=\"cm\">   and can also `impl Stuff for foo */</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! More advanced case: GENERICS.</span>\n<span class=\"sd\">/// Instead of:</span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nc\">Arg</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nc\">Ret</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Emit:</span>\n<span class=\"cp\">#[::ghost::phantom]</span><span class=\"w\"> </span><span class=\"c1\">// or inline its implementation</span>\n<span class=\"k\">struct</span> <span class=\"nc\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">GenericConst</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GenericConst</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FUN</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Arg</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ret</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">arg</span>: <span class=\"nc\">Arg</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ret</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">GenericConst</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">FUN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>There is one subtlety, though: while the <em>type</em> and <em>constant</em> generic parameters must go on the ZST, I highly recommend that the <em>lifetime</em> generic parameters go on the <code>FUN</code> assoc constant and <code>Deref::Target</code> (by using <code>for&lt;'lifetimes…&gt; fn…</code> syntax). This will ensure the function remains higher order which may be needed to reduce friction / disparity-wrt-a-real-fun to a minimum.</li>\n</ul>",
        "id": 249971702,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1629372339
    }
]