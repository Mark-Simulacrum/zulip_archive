[
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/rust/pull/77972\">https://github.com/rust-lang/rust/pull/77972</a>, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> fixed the most trivial cases of <code>loop {}</code> miscompiling. We already had <a href=\"https://github.com/rust-lang/rust/issues/28728#issuecomment-637880180\">some incidental fixes due to MIR optimization</a> which meant that we needed a closure to cause the miscompilation. What's the next-most simple way of causing UB to be triggered?</p>",
        "id": 223129283,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1610981715
    },
    {
        "content": "<p>Anything placed inside the loop which will split into two bb's will cause the fix to not fire</p>",
        "id": 223129456,
        "sender_full_name": "simulacrum",
        "timestamp": 1610981798
    },
    {
        "content": "<p>e.g., I imagine an assert or call of any kind</p>",
        "id": 223129474,
        "sender_full_name": "simulacrum",
        "timestamp": 1610981809
    },
    {
        "content": "<p>self-recursive function calls are entirely not targeted right now and also cause the problem</p>",
        "id": 223129518,
        "sender_full_name": "simulacrum",
        "timestamp": 1610981836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/forcing.20loop.20miscompilation/near/223129518\">said</a>:</p>\n<blockquote>\n<p>self-recursive function calls are entirely not targeted right now and also cause the problem</p>\n</blockquote>\n<p>I actually tried that first, but the trivial ones are not UB:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">oops</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">oops</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223129931,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1610982009
    },
    {
        "content": "<p>Won't self recursive functions stack overflow even if they're not unsound?</p>",
        "id": 223130107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610982045
    },
    {
        "content": "<p>LLVM will replace those with just unreachable (i.e. UB).</p>",
        "id": 223130195,
        "sender_full_name": "nagisa",
        "timestamp": 1610982065
    },
    {
        "content": "<p>For <code>loop {}</code> to miscompile, you need to have a side-effect free <code>loop {}</code> in a function and call that function.</p>",
        "id": 223130366,
        "sender_full_name": "nagisa",
        "timestamp": 1610982110
    },
    {
        "content": "<p>the miscompile will be observable in the callee.</p>",
        "id": 223130393,
        "sender_full_name": "nagisa",
        "timestamp": 1610982118
    },
    {
        "content": "<p>asserts in particular will be considered to be side-effectful, so that won't help to repro in any way.</p>",
        "id": 223130612,
        "sender_full_name": "nagisa",
        "timestamp": 1610982171
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">oops</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223130697,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1610982206
    },
    {
        "content": "<p>seems to trigger</p>",
        "id": 223130720,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1610982213
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/bW9WsE\">https://rust.godbolt.org/z/bW9WsE</a> another way to do it.</p>",
        "id": 223130921,
        "sender_full_name": "nagisa",
        "timestamp": 1610982301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I appreciate your fruit examples <span aria-label=\"love\" class=\"emoji emoji-2764\" role=\"img\" title=\"love\">:love:</span></p>",
        "id": 223163978,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611004111
    }
]