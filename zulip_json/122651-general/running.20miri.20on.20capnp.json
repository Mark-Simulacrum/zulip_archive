[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I am impressed with how easy it easy to run miri on things these days. Bravo! And thanks for the suggestion.</p>",
        "id": 185780858,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579143370
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: Miri evaluation error: no item granting read access to tag &lt;untagged&gt; found in borrow stack\n    --&gt; /home/dwrensha/src/capnproto-rust/capnp/src/private/layout.rs:2863:18\n     |\n2863 |                 ((*b) &amp; (1u8 &lt;&lt; (boffset % BITS_PER_BYTE as u32) as usize)) != 0\n     |                  ^^^^ Miri evaluation error: no item granting read access to tag &lt;untagged&gt; found in borrow stack\n</pre></div>",
        "id": 185781446,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579144180
    },
    {
        "content": "<p>oof. I'm not sure what that means.</p>",
        "id": 185781451,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579144200
    },
    {
        "content": "<p>Oh no, an <code>untagged</code>. Not sure how to debug these</p>",
        "id": 185788724,
        "sender_full_name": "oli",
        "timestamp": 1579155041
    },
    {
        "content": "<p>Is <code>b</code> a raw pointer by any chance?</p>",
        "id": 185788783,
        "sender_full_name": "oli",
        "timestamp": 1579155145
    },
    {
        "content": "<p>Often this error means that after you created <code>b</code> , you wrote via the original reference that you got <code>b</code> from</p>",
        "id": 185788800,
        "sender_full_name": "oli",
        "timestamp": 1579155200
    },
    {
        "content": "<p>it also often means that you used a raw pointer outside of its \"range of validity\"</p>",
        "id": 185796295,
        "sender_full_name": "RalfJ",
        "timestamp": 1579165422
    },
    {
        "content": "<p>like, maybe you did <code>&amp;x[0] as *const _</code> and then <code>offset</code> that pointer -- which is illegal, only <code>x[0]</code> may be accessed by raw ptrs</p>",
        "id": 185796350,
        "sender_full_name": "RalfJ",
        "timestamp": 1579165459
    },
    {
        "content": "<p>if you want to access the entire thing, call <code>x.as_ptr()</code></p>",
        "id": 185796355,
        "sender_full_name": "RalfJ",
        "timestamp": 1579165467
    },
    {
        "content": "<p>Yep, that was it! <a href=\"https://github.com/capnproto/capnproto-rust/commit/72480efb3514d32278bd2502a7b90b22a34d12b8\" target=\"_blank\" title=\"https://github.com/capnproto/capnproto-rust/commit/72480efb3514d32278bd2502a7b90b22a34d12b8\">https://github.com/capnproto/capnproto-rust/commit/72480efb3514d32278bd2502a7b90b22a34d12b8</a></p>",
        "id": 185808881,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579176810
    },
    {
        "content": "<p>why is <code>&amp;x[0] as *const _</code> illegal?</p>",
        "id": 185808888,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579176827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258831\">@David Renshaw</span> the issue where we track that is <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a>. the wider context is <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md</a> and the blog posts and papers it links.</p>",
        "id": 185810330,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178025
    },
    {
        "content": "<p>basically, we want the compiler to optimize based on assumptions like \"<code>&amp;mut</code> pointers are unique\", and to that effect we have to be very careful what we actually allow to be done with raw pointers</p>",
        "id": 185810400,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178067
    },
    {
        "content": "<p>note that the cast itself is perfectly legal, as is accessing the element you casted, but going outside that range is not allowed by the current model. there might be other models that do allow this, but likely at the cost of significant extra complexity (so, making it harder to understand the model) and/or at the cost of optimization potential.</p>",
        "id": 185810455,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178131
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 185810467,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579178143
    },
    {
        "content": "<p>when I saw choices like this while designing Stacked Borrows, I usually decided to opt for the <em>more restrictive</em> choice. it is much easier to relax such constraints later than to tighten them.</p>",
        "id": 185810526,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178182
    },
    {
        "content": "<p>basically, I wanted to see how much I could get away with :P</p>",
        "id": 185810550,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178210
    },
    {
        "content": "<p>I added this to the list in the issue... but the list is pretty incomplete, this is probably the stacked borrows issue that comes up most freuqently (alongside <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/133\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/133\">https://github.com/rust-lang/unsafe-code-guidelines/issues/133</a>)</p>",
        "id": 185810703,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178357
    },
    {
        "content": "<p>re: <a href=\"https://github.com/capnproto/capnproto-rust/commit/3ea257068e9f7b6f3968a4ddb4669ff54ad79175\" target=\"_blank\" title=\"https://github.com/capnproto/capnproto-rust/commit/3ea257068e9f7b6f3968a4ddb4669ff54ad79175\">https://github.com/capnproto/capnproto-rust/commit/3ea257068e9f7b6f3968a4ddb4669ff54ad79175</a>, I wonder if there is a way to reduce the number of iterations or so? to get at least a tiny bit of fuzzing done with miri?</p>",
        "id": 185810774,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178420
    },
    {
        "content": "<p>but yeah, I've had to disable such tests in other repos as well :/</p>",
        "id": 185810787,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178459
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> I am impressed with how easy it easy to run miri on things these days. Bravo! And thanks for the suggestion.</p>\n</blockquote>\n<p>(totally forgot to reply) thanks, that is encouraging :)</p>",
        "id": 185810812,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178499
    },
    {
        "content": "<p>I was bracing myself for needing to get some kind of xargo setup going. It was amazing to be able to <code>rustup component add</code> and have it just work.</p>",
        "id": 185810885,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579178559
    },
    {
        "content": "<p>yeah I hacked that auto-setup during RustFest Rome and later wondered why I hadn't done it earlier :D</p>",
        "id": 185810933,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178639
    },
    {
        "content": "<p>it's still just as ugly under the hood as it used to be, but hidden better^^</p>",
        "id": 185811017,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178709
    },
    {
        "content": "<p>The other immediate thing that miri is finding is that I create (but never deference) pointers that are exactly one element beyond the end of an allocation. I can understand why miri want me to not do that (and I'll fix my code), but just for perspective: this is following a c++ pattern of using \"1 past end of container\" as the end iterator <code>container.end()</code>.</p>",
        "id": 185811390,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579179120
    },
    {
        "content": "<p>one past the end of the container pointers are ok: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9b6b532e5b20d76ed422f7a86580af07\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9b6b532e5b20d76ed422f7a86580af07\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9b6b532e5b20d76ed422f7a86580af07</a></p>",
        "id": 185813334,
        "sender_full_name": "oli",
        "timestamp": 1579180703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258831\">@David Renshaw</span> by \"pointer\", do you mean \"reference\"? because references in Rust are a bit like references in C++ in that they must be dereferencable. the one-past-the-end thing is invalid for both. it is valid for raw pointers though.</p>",
        "id": 185840890,
        "sender_full_name": "RalfJ",
        "timestamp": 1579197329
    },
    {
        "content": "<p>Indeed, my code constructs such invalid references! I didn't realize it because it immediately casts them to raw pointers.</p>",
        "id": 185873687,
        "sender_full_name": "David Renshaw",
        "timestamp": 1579217632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258831\">@David Renshaw</span> ah... you might be interested in <a href=\"https://github.com/rust-lang/rfcs/pull/2582\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2582\">https://github.com/rust-lang/rfcs/pull/2582</a></p>",
        "id": 185897089,
        "sender_full_name": "RalfJ",
        "timestamp": 1579250595
    }
]