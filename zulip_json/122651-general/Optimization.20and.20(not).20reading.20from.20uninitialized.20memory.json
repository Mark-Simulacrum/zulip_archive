[
    {
        "content": "<p>I have a case where I'd like to read from uninitialized memory. Sort of. Let me explain...</p>\n<div class=\"codehilite\"><pre><span></span><code>let buf: [MaybeUninit&lt;u64&gt;; 8] = MaybeUninit::uninit_array();\n</code></pre></div>\n\n\n<p>Suppose we've initialized the first N bytes of a u64 in buf. Now we want to initialize the rest of it. I believe the fastest way would involve bit manipulation--something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>some_u64 = ...\n\nmask = bitmask that will extract valid portion of buf[i]\n\nshift = shift that will put some_u64 into invalid portion of buf[i]\n\nbuf[i] = (buf[i] &amp; mask) | (some_u64 &lt;&lt; shift)\n</code></pre></div>\n\n\n<p>But AFAICT, we can't do this without violating MaybeUninit's contract. The problem is that we're reading a partially initialized (i.e. uninitialized) u64, buf[i]. We end up masking out the uninitialized portion, so I think it could be considered safe with the right API. But I'm not sure that API exists.</p>\n<p>I'm aware of some contortions I can do to accomplish this in a safe way, but I'm wondering if I can directly express the above safely somehow, so I don't have to rely on the optimizer to change the contortions to something at least as efficient as the above.</p>\n<p>Any ideas?</p>",
        "id": 209459365,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599610567
    },
    {
        "content": "<p>If you're initializing 8 u64s, and that's not an \"example number\" I would check that you can't afford just zero initializing them up front - that's going to be pretty fast.</p>\n<p>How did you initialize parts of the u64? Maybe you can use MaybeUninit&lt;u8&gt; and initialize each byte instead...</p>",
        "id": 209461715,
        "sender_full_name": "simulacrum",
        "timestamp": 1599612846
    },
    {
        "content": "<p>I'm actually trying to determine the cost of that upfront initialization, and this is where I got stuck :)</p>\n<p>I haven't actually used MaybeUninit&lt;u64&gt; because of getting stuck here, but I assumed I could initialize them partially with something like copy_nonoverlapping (with statically known sizes so the memcpy gets optimized out, and with considerations for endianness).</p>\n<p>I did look at using a <code>[u8]</code> / <code>[MaybeUninit&lt;u8&gt;]</code> instead, and just copying in the new bytes,  but the generated code wasn't ideal. It may be enough for me to tell whether or not using MaybeUninit is worth it to begin with though.</p>",
        "id": 209462749,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599614131
    },
    {
        "content": "<p>But in general, I'm also wondering if there's a hole in the API here, or if there's some other tool I should be reaching for</p>",
        "id": 209462815,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599614204
    },
    {
        "content": "<p>This is my first brush with MaybeUninit, and I'm fairly new to Rust overall</p>",
        "id": 209462824,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599614229
    },
    {
        "content": "<p>Iirc from the UCG repos, LLVM doesn't track per byte (or bit) initialization of an integer, so reading from a <code>*mut u64</code> is UB if you manually bitmask stuff - the whole integer is treated as uninitialized.</p>",
        "id": 209462841,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1599614277
    },
    {
        "content": "<p>Aha - found it. <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71#issuecomment-686904006\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71#issuecomment-686904006</a></p>",
        "id": 209463207,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1599614730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306073\">@Tyson Nottingham</span> how are you initializing the first N bytes? Is that from a u64 as well?</p>",
        "id": 209463367,
        "sender_full_name": "simulacrum",
        "timestamp": 1599614898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span>  Well, the operation that I want to convey is just a copy at the end of the day. I don't really need to read that uninitialized memory, but I want the hardware to do that if it's optimal. From context, I know that it can always be expressed as as a mask + shift + OR. I just need to reliably convince the optimizer that it should do that (assuming that it's optimal).</p>",
        "id": 209463400,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599614941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> The first N bytes are from one or more integers of any size.</p>",
        "id": 209463504,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599615024
    },
    {
        "content": "<p>Are you combining multiple integers into one?</p>",
        "id": 209463559,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1599615115
    },
    {
        "content": "<p>Yes. This is a SipHasher128 optimization I'm working on.</p>",
        "id": 209463665,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599615232
    },
    {
        "content": "<p>which does this kind of combination</p>",
        "id": 209463709,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599615250
    },
    {
        "content": "<p>There are endianness considerations, if you're thinking about that, but don't worry, they're on my mind :)</p>",
        "id": 209463748,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599615326
    },
    {
        "content": "<p>Will you do each integer one-by-one? If so, you might be able to get away with a single scratch u64.</p>",
        "id": 209463823,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1599615402
    },
    {
        "content": "<p>Heh, if I understand you correctly, that's what the current implementation does :)</p>",
        "id": 209463834,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599615441
    },
    {
        "content": "<p>I'm basically adding some buffering to create a better hot path</p>",
        "id": 209463853,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599615480
    },
    {
        "content": "<p>In theory anyway... I haven't done much perf optimization, so we'll see if that makes any sense. Looks somewhat promising so far.</p>",
        "id": 209463985,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599615632
    },
    {
        "content": "<p>As far I know, Rust doesn't have what you want. I'd say just benchmark the cost of zero initialization to see if it's passable - iirc C(++) has the same limitations here.</p>",
        "id": 209464191,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1599615953
    },
    {
        "content": "<p>Thanks, I'll see how it goes</p>",
        "id": 209464429,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599616254
    },
    {
        "content": "<p>Hmm, I think the shift fundamentally going to be trouble here.  In a bunch of other situations you can sidestep these problems with <code>#[repr(align(8))] struct Foo([u8; 8]);</code>, but actually doing the operation on it complicates things.</p>",
        "id": 209466998,
        "sender_full_name": "scottmcm",
        "timestamp": 1599620037
    }
]