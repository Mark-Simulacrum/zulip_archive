[
    {
        "content": "<p>Hello, I'm sorry if this is the wrong place to ask. I have a code block as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">possible_anagrams</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"n\">HashSet</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">possible_anagrams</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// middle steps omitted for clarity</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>compiler is giving an error, and I don't understand how to use lifetimes annotations to handle it correctly.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">error[E0515]: cannot return value referencing local variable `p`</span>\n<span class=\"go\">  --&gt; src\\lib.rs:18:23</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">18 |         .map(|(p, _)| p.as_str())</span>\n<span class=\"go\">   |                       -^^^^^^^^^</span>\n<span class=\"go\">   |                       |</span>\n<span class=\"go\">   |                       returns a value referencing data owned by the current function</span>\n<span class=\"go\">   |                       `p` is borrowed here</span>\n</code></pre></div>\n\n\n<p>I would appreciate if anyone can point me in the right direction.</p>",
        "id": 210387734,
        "sender_full_name": "Yakup TÃ¼rkan",
        "timestamp": 1600348700
    },
    {
        "content": "<p><code>p.to_lowercase()</code> returns a <code>String</code>. When you do <code>p.as_str()</code> there is nothing keeping that string alive after <code>.map()</code>. You should collection into <code>Vec&lt;String&gt;</code> instead.</p>",
        "id": 210388063,
        "sender_full_name": "bjorn3",
        "timestamp": 1600348845
    },
    {
        "content": "<p>In this case it is not a problem of annotations, it is a problem of liftimes. <code>|(p, _)| p.as_str()</code> takes an Owned object in this case a <code>String</code>, it tries to return a barrow of it <code>&amp;str</code>, but then <code>drop</code>'s (frees) it. It is telling you that the <code>&amp;str</code>you are returning is pointing at freed memory so cant be used.</p>",
        "id": 210388344,
        "sender_full_name": "Eh2406",
        "timestamp": 1600348989
    },
    {
        "content": "<p>so how would I have any chance to return a <code>HashSet&lt;&amp;'a str&gt;</code>. I'm trying to solve a exercise question and currently tests require me to return a <code>HashSet&lt;&amp;'a str&gt;</code> my solution was to use iterators on the source string so I could compare each to find an exact match</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">anagrams_for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">word</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">possible_anagrams</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ordered</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ordered</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">().</span><span class=\"n\">sort</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">HashSet</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">possible_anagrams</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">ordered</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>would using loop version permit me to? Apperantly I cannot even clone to get out of this situation? Compiler warns about late lifetime binding.</p>",
        "id": 210393912,
        "sender_full_name": "Yakup TÃ¼rkan",
        "timestamp": 1600351331
    },
    {
        "content": "<p>You'll have to return items from one of your arguments. in this case I think <code>possible_anagrams</code>.</p>",
        "id": 210394672,
        "sender_full_name": "Eh2406",
        "timestamp": 1600351648
    },
    {
        "content": "<p>I thought I was iterating over possible_anagrams, does calling <code>p.to_lowecase()</code> makes it change from possible_anagram iterations to some temporary variable?</p>",
        "id": 210395076,
        "sender_full_name": "Yakup TÃ¼rkan",
        "timestamp": 1600351825
    },
    {
        "content": "<p>Yes</p>",
        "id": 210396604,
        "sender_full_name": "Eh2406",
        "timestamp": 1600352444
    },
    {
        "content": "<p><code>to_lowecase</code> returns an owned <code>String</code></p>",
        "id": 210396662,
        "sender_full_name": "Eh2406",
        "timestamp": 1600352471
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.to_lowercase\">https://doc.rust-lang.org/std/primitive.str.html#method.to_lowercase</a></p>",
        "id": 210396753,
        "sender_full_name": "Eh2406",
        "timestamp": 1600352509
    },
    {
        "content": "<p>I have discarded all the map operations so I can iterate over possible_anagrams, but something is still not working right now when I try to it complains about </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">HashSet</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">possible_anagrams</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">().</span><span class=\"n\">sort</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">ordered</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}))</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">   = note: expected struct `std::collections::HashSet&lt;&amp;&#39;a str, std::collections::hash_map::RandomState&gt;`</span>\n<span class=\"go\">              found struct `std::collections::HashSet&lt;&amp;&amp;str, _&gt;`</span>\n</code></pre></div>\n\n\n<p>why is it iterating over <code>&amp;&amp;str</code>how can I filter if I cannot iterate over possible_anagrams directly? As I understand right now I'm iterating over a reference to possible_anagrams array which composed with str references. As soon as I use clone or something compiler states that I need lifetime annotation at function decleration</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">4  |   pub fn anagrams_for&lt;&#39;a&gt;(word: &amp;str, possible_anagrams: &amp;[&amp;str]) -&gt; HashSet&lt;&amp;&#39;a str&gt; {</span>\n<span class=\"go\">   |                                                          ------- help: add explicit lifetime `&#39;a` to the type of `possible_anagrams`: `&amp;[&amp;&#39;a str]`</span>\n</code></pre></div>",
        "id": 210398729,
        "sender_full_name": "Yakup TÃ¼rkan",
        "timestamp": 1600353375
    },
    {
        "content": "<p>try <code>into_iter</code> instead of <code>iter</code>, I think.</p>",
        "id": 210399017,
        "sender_full_name": "Eh2406",
        "timestamp": 1600353490
    },
    {
        "content": "<p>No, sorry, that is not it. give me a min.</p>",
        "id": 210399351,
        "sender_full_name": "Eh2406",
        "timestamp": 1600353621
    },
    {
        "content": "<p>Wtf. Is this from the code you were given? <code>pub fn anagrams_for&lt;'a&gt;(word: &amp;str, possible_anagrams: &amp;[&amp;str]) -&gt; HashSet&lt;&amp;'a str&gt; {</code></p>",
        "id": 210399992,
        "sender_full_name": "Eh2406",
        "timestamp": 1600353897
    },
    {
        "content": "<p>The <code>'a</code> only appears in the return parameter. which is odd.</p>",
        "id": 210400116,
        "sender_full_name": "Eh2406",
        "timestamp": 1600353961
    },
    {
        "content": "<p>Sorry I didn't see that earlier.</p>",
        "id": 210400199,
        "sender_full_name": "Eh2406",
        "timestamp": 1600353985
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c90dcb7a114264ba7479ce1fd02309eb\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c90dcb7a114264ba7479ce1fd02309eb</a></p>",
        "id": 210400346,
        "sender_full_name": "Eh2406",
        "timestamp": 1600354062
    },
    {
        "content": "<p>work, by adding the clone and the <code>'a</code> that the error recomended.</p>",
        "id": 210400432,
        "sender_full_name": "Eh2406",
        "timestamp": 1600354092
    },
    {
        "content": "<p>If  you can use <code>pub fn anagrams_for&lt;'a&gt;(word: &amp;str, possible_anagrams: &amp;'a [&amp;'a str]) -&gt; HashSet&lt;&amp;'a str&gt; {</code>then you are good. If not then I want to know more about where this example came from!</p>",
        "id": 210401456,
        "sender_full_name": "Eh2406",
        "timestamp": 1600354531
    },
    {
        "content": "<p>I have tried using it, It works but I failed some tests so I'm debugging if I made some logical mistakes. What suprises me is str in Rust is not <code>null char</code> based. cause when I try to see what possible_anagrams look like CLion reports three element side by side as a single value. Question is from <a href=\"https://exercism.io\">https://exercism.io</a> Rust track - Anagram</p>",
        "id": 210402142,
        "sender_full_name": "Yakup TÃ¼rkan",
        "timestamp": 1600354786
    },
    {
        "content": "<p>Yes, and <code>str</code> is a pointer and a length. So it can be a part of some other string.</p>",
        "id": 210402571,
        "sender_full_name": "Eh2406",
        "timestamp": 1600354951
    },
    {
        "content": "<p>according to <a href=\"https://github.com/exercism/rust/tree/master/exercises/anagram\">https://github.com/exercism/rust/tree/master/exercises/anagram</a> it does want case insensitve. I think we can change <code>let t = p.clone()</code> into <code>let t = p.to_lowercase();</code></p>",
        "id": 210403263,
        "sender_full_name": "Eh2406",
        "timestamp": 1600355256
    },
    {
        "content": "<p>thanks for the help. I have created a for loop version to wrap my mind. I'm bad at iterators. I have found that I was iterating on the clone of the str while I really need to iterate over <code>Vec&lt;char&gt;</code>. here is the final form.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">anagrams_for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">word</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">possible_anagrams</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ordered</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ordered</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let mut set = HashSet::new();</span>\n<span class=\"w\">    </span><span class=\"c1\">// for p in possible_anagrams {</span>\n<span class=\"w\">    </span><span class=\"c1\">//     println!(&quot;p {}&quot;, p);</span>\n<span class=\"w\">    </span><span class=\"c1\">//     if p.len() != word.len() { continue }</span>\n<span class=\"w\">    </span><span class=\"c1\">//     else if p.to_lowercase().eq(&amp;word.to_lowercase()) { continue }</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">//     let mut t = p.to_lowercase().chars().collect::&lt;Vec&lt;char&gt;&gt;();</span>\n<span class=\"w\">    </span><span class=\"c1\">//     t.sort();</span>\n<span class=\"w\">    </span><span class=\"c1\">//     if t.eq(&amp;ordered) { set.insert(p.clone()); }</span>\n<span class=\"w\">    </span><span class=\"c1\">// }</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// set</span>\n\n<span class=\"w\">    </span><span class=\"n\">HashSet</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">possible_anagrams</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ordered</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210405818,
        "sender_full_name": "Yakup TÃ¼rkan",
        "timestamp": 1600356243
    },
    {
        "content": "<p>There is also no point to using null terminators in the language if you always know the length of the string.<br>\nThe point of that question is to prompt the student to change the function signature slightly in order to be able to pass the tests, yes, it was the original author's theory about how to introduce lifetimes more specifically.</p>",
        "id": 210585879,
        "sender_full_name": "Jubilee",
        "timestamp": 1600472351
    }
]