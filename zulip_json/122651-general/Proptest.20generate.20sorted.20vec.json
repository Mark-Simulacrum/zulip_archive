[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> do you have any suggestions on how I could generate an arbitrary <code>Vec&lt;Option&lt;T&gt;&gt;</code> where all of the <code>Some</code> values are sorted?</p>\n<p>Said another way, a sorted <code>Vec</code> with <code>None</code>s scattered throughout.</p>",
        "id": 191313482,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745444
    },
    {
        "content": "<p>My current path is an arbitrary vec that I've sorted, then I map over that with <code>prop_perturb</code>, convert it into an iterator, then generate a random number of <code>None</code>s for each step. This works-ish, but doesn't have great shrinking.</p>",
        "id": 191313664,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> does the vector need to be sorted across <code>None</code>s?</p>",
        "id": 191313671,
        "sender_full_name": "centril",
        "timestamp": 1584745615
    },
    {
        "content": "<p>Or is  <code>[S(1), None, S(0)]</code> valid?</p>",
        "id": 191313695,
        "sender_full_name": "centril",
        "timestamp": 1584745650
    },
    {
        "content": "<p>I'm not 100% I know what you mean. This would be a valid result: <code>vec![None, Some(1), None, None, None, Some(2)]</code></p>",
        "id": 191313701,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745654
    },
    {
        "content": "<p>(modulo ascending/descending — that should be trivial <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 191313776,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745705
    },
    {
        "content": "<p>another example then: <code>[S(0), N, S(1), N, S(0)]</code></p>",
        "id": 191313800,
        "sender_full_name": "centril",
        "timestamp": 1584745738
    },
    {
        "content": "<p>in other words, is <code>None</code> a boundary for sorting?</p>",
        "id": 191313816,
        "sender_full_name": "centril",
        "timestamp": 1584745754
    },
    {
        "content": "<p>Ah, gotcha. No, I do not want that.</p>",
        "id": 191313855,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745787
    },
    {
        "content": "<p>Another tack would be if there was a way I could sort the <code>Vec&lt;Option&lt;T&gt;&gt;</code> leaving all of the <code>None</code>s in place.</p>",
        "id": 191313936,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745843
    },
    {
        "content": "<p>that's what I would do</p>",
        "id": 191313942,
        "sender_full_name": "centril",
        "timestamp": 1584745854
    },
    {
        "content": "<p>... but I don't actually know how to do that ;-)</p>",
        "id": 191313968,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745876
    },
    {
        "content": "<p>Like, I know that's not proptest, but my brain isn't braining a way to do that in Rust</p>",
        "id": 191313976,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  what happens if you use a stable sort and deem <code>None</code> equal to anything?</p>",
        "id": 191313981,
        "sender_full_name": "centril",
        "timestamp": 1584745897
    },
    {
        "content": "<p>I'll whip up a playground and see.</p>",
        "id": 191313998,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584745922
    },
    {
        "content": "<p>Looks like that treats the <code>None</code> as boundaries. <a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3f3356592813dea501c31110446169b4\" target=\"_blank\" title=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3f3356592813dea501c31110446169b4\">https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3f3356592813dea501c31110446169b4</a></p>",
        "id": 191314204,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584746119
    },
    {
        "content": "<p>yea, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=23be3c5dc4c67795852866d122904872\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=23be3c5dc4c67795852866d122904872\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=23be3c5dc4c67795852866d122904872</a> is my version</p>",
        "id": 191314211,
        "sender_full_name": "centril",
        "timestamp": 1584746131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> what if you change your requirements <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>  :D</p>",
        "id": 191314263,
        "sender_full_name": "centril",
        "timestamp": 1584746184
    },
    {
        "content": "<p>So, I said <code>Option</code>, but it's actually <code>Poll</code> — this is for mimicking a stream that returns sorted data but that might not be ready for a number of calls.</p>",
        "id": 191314308,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584746253
    },
    {
        "content": "<p>So solving that is my goal and real requirements ;-)</p>",
        "id": 191314326,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584746280
    },
    {
        "content": "<p>isomorphic, so same thing :P</p>",
        "id": 191314366,
        "sender_full_name": "centril",
        "timestamp": 1584746283
    },
    {
        "content": "<p>exactly, and I went with <code>Option</code> because it's more familiar</p>",
        "id": 191314390,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584746311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  here's a different idea that might be worse, who knows:  Generate a <code>(elems: Vec&lt;T&gt;, insertions: Vec&lt;(where: usize, number: usize)&gt;)</code>, sort <code>elems</code>, throw away anything in <code>insertions</code> which would be out of bounds in <code>elems</code>, and then insert <code>number</code> of <code>None</code>s at <code>elems[where]</code></p>",
        "id": 191314644,
        "sender_full_name": "centril",
        "timestamp": 1584746555
    },
    {
        "content": "<p>the throwing away avoids <code>prop_flat_map</code></p>",
        "id": 191314665,
        "sender_full_name": "centril",
        "timestamp": 1584746575
    },
    {
        "content": "<p>I'm not actually using <code>prop_flat_map</code> — just <code>Iterator::flat_map</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">arb_sorted_data</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Arbitrary</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Ord</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Strategy</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">any</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">().</span><span class=\"n\">prop_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">d</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Adds a small arbitrary number of `Poll::Pending` values before</span>\n<span class=\"w\">    </span><span class=\"sd\">/// and after each existing sorted value.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">arb_proto_stream</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Arbitrary</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Ord</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Strategy</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ProtoStream</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">max_pending_in_a_row</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">arb_sorted_data</span><span class=\"p\">().</span><span class=\"n\">prop_perturb</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">poll_values</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n_pending</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"p\">.</span><span class=\"n\">gen_range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_pending_in_a_row</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">n_pending</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">results</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n_pending</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rng</span><span class=\"p\">.</span><span class=\"n\">gen_range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_pending_in_a_row</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">poll_values</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">n_pending</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">ProtoStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">original</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">poll_values</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191315023,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584746937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yeah sure; my mention of flat mapping is unrelated to your current thing</p>",
        "id": 191315102,
        "sender_full_name": "centril",
        "timestamp": 1584747010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  how about this: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ff7bfe6a1adf92c82202a4603f67fa60\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ff7bfe6a1adf92c82202a4603f67fa60\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ff7bfe6a1adf92c82202a4603f67fa60</a></p>",
        "id": 191315535,
        "sender_full_name": "centril",
        "timestamp": 1584747383
    },
    {
        "content": "<p>basically, selection sort seems to be perfect for this since it will keep scanning for things ahead that might be smaller, as opposed to fixating on two things</p>",
        "id": 191315711,
        "sender_full_name": "centril",
        "timestamp": 1584747558
    },
    {
        "content": "<p>Thanks. I'll give a look / try after dinner. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 191315714,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584747564
    },
    {
        "content": "<p>Enjoy <span aria-label=\"food\" class=\"emoji emoji-1f372\" role=\"img\" title=\"food\">:food:</span>  <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 191315723,
        "sender_full_name": "centril",
        "timestamp": 1584747581
    },
    {
        "content": "<p>N.B. selection sort is O(n^2), but works well on smaller inputs</p>",
        "id": 191316141,
        "sender_full_name": "centril",
        "timestamp": 1584747896
    },
    {
        "content": "<p>so it should work well for <code>any::&lt;Vec&lt;T&gt;&gt;()</code>, but if you start jacking up the size into 100'000s or so or millions things will go slower :P</p>",
        "id": 191316178,
        "sender_full_name": "centril",
        "timestamp": 1584747945
    },
    {
        "content": "<p>though at that point I suspect the selection sort is the least of your problems <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 191316398,
        "sender_full_name": "centril",
        "timestamp": 1584748146
    },
    {
        "content": "<p>I’m wondering how much that differs from the concepts in <code>sort_by_cached_key</code> <a href=\"https://doc.rust-lang.org/src/alloc/slice.rs.html#331-375\" target=\"_blank\" title=\"https://doc.rust-lang.org/src/alloc/slice.rs.html#331-375\">https://doc.rust-lang.org/src/alloc/slice.rs.html#331-375</a></p>",
        "id": 191342890,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584792874
    },
    {
        "content": "<p>And folk over in Stack Overflow chat suggest something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sort_present_values</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Ord</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">d</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191357690,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584812858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> seems like a fine way to do it; at least in terms of complexity you get  <code>O(n log n)</code>, but on the other hand, there's more allocating back and forth</p>",
        "id": 191381482,
        "sender_full_name": "centril",
        "timestamp": 1584855055
    },
    {
        "content": "<p>And of course now the requirements have changed. Now all the <code>Some</code> values need to be unique. Sigh.</p>",
        "id": 191502586,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584982224
    },
    {
        "content": "<p>I wonder if it would be simpler to create a <code>Vec&lt;T&gt;</code> of length N and a <code>Vec&lt;usize&gt;</code> of  length N+1 and then zip them, mapping the first to <code>Some</code> and the second to <code>usize</code> <code>None</code>s.</p>",
        "id": 191504701,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584983066
    },
    {
        "content": "<p>Then we could use a <code>BTreeSet</code> instead of the first vec and get the sorted / unique for free</p>",
        "id": 191504761,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584983093
    },
    {
        "content": "<p>It's closer to my original idea, but avoids the direct RNG usage</p>",
        "id": 191504808,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1584983107
    }
]