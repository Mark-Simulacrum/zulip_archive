[
    {
        "content": "<p>Found a minor case of bad codegen</p>\n<p><a href=\"https://rust.godbolt.org/z/hWqe7efrz\">https://rust.godbolt.org/z/hWqe7efrz</a></p>\n<p>Compiler cannot figure bextr returns uintN and inserts a redundant bounds check.</p>",
        "id": 252512722,
        "sender_full_name": "Bot+",
        "timestamp": 1631126957
    },
    {
        "content": "<p>why go through the intrinsic instead of using <code>i = (src &gt;&gt; 60) &amp; 3</code>?</p>",
        "id": 252609883,
        "sender_full_name": "kennytm",
        "timestamp": 1631187247
    },
    {
        "content": "<p>if you <em>need</em> to replace the <code>shr</code> &amp; <code>add</code> instructions by <code>mov</code> &amp; <code>bextr</code> you could use <code>-C target-cpu=skylake -C target-feature=+fast-bextr</code>.<br>\nbut <code>bextr</code> is not necessarily faster according to <a href=\"https://reviews.llvm.org/D52570\">https://reviews.llvm.org/D52570</a>.</p>",
        "id": 252611461,
        "sender_full_name": "kennytm",
        "timestamp": 1631188160
    },
    {
        "content": "<p>I was Rewriting in Rust. By being explicit, I match the original and get better assembly.</p>",
        "id": 252635949,
        "sender_full_name": "Bot+",
        "timestamp": 1631197982
    },
    {
        "content": "<p>As for perf, I do have a BMI-free variant with shift+and for ancient cpus like znver2 (microcode pext is slooow). On newer µarchs like znver3 it's measurably slower because humans are still smarter than optimizers.</p>",
        "id": 252636169,
        "sender_full_name": "Bot+",
        "timestamp": 1631198052
    },
    {
        "content": "<blockquote>\n<p>On newer µarchs like znver3 it's measurably slower because humans are still smarter than optimizers.</p>\n</blockquote>\n<p>if you set <code>-C target-cpu=znver3</code> it does produce <code>mov</code>+<code>bextr</code> for <code>(src &gt;&gt; 60) &amp; 3</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DUMMY_LUT</span>: <span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">good_compiler</span><span class=\"p\">(</span><span class=\"n\">src</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DUMMY_LUT</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">good_compiler:</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"mi\">572</span>\n        <span class=\"nf\">lea</span>     <span class=\"no\">rcx</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">rip</span> <span class=\"err\">+</span> <span class=\"no\">.L__unnamed_1</span><span class=\"p\">]</span>\n        <span class=\"nf\">bextr</span>   <span class=\"no\">rax</span><span class=\"p\">,</span> <span class=\"no\">rdi</span><span class=\"p\">,</span> <span class=\"no\">rax</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">dword</span> <span class=\"no\">ptr</span> <span class=\"p\">[</span><span class=\"no\">rcx</span> <span class=\"err\">+</span> <span class=\"mi\">4</span><span class=\"p\">*</span><span class=\"no\">rax</span><span class=\"p\">]</span>\n        <span class=\"nf\">ret</span>\n\n<span class=\"nl\">.L__unnamed_1:</span>\n        <span class=\"na\">.ascii</span>  <span class=\"s\">\"\\004\\000\\000\\000\\374\\377\\377\\377\\b\\000\\000\\000\\370\\377\\377\\377\"</span>\n</code></pre></div>",
        "id": 252640387,
        "sender_full_name": "kennytm",
        "timestamp": 1631199433
    },
    {
        "content": "<p>you can also get the same optimization result on <code>znver3</code> if you replace that intrinsic (which the optimizer likely won't touch) with the manual implementation (which allows const propagation and stuff).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bextr</span><span class=\"p\">(</span><span class=\"n\">src</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mask</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0xff</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://rust.godbolt.org/z/91x3bEbGP\">https://rust.godbolt.org/z/91x3bEbGP</a></p>",
        "id": 252642797,
        "sender_full_name": "kennytm",
        "timestamp": 1631200296
    },
    {
        "content": "<p>( this won't produce a <code>bextr</code> instruction if the <code>mask</code> happens to be non-constant <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> )</p>",
        "id": 252644042,
        "sender_full_name": "kennytm",
        "timestamp": 1631200784
    },
    {
        "content": "<p>Yeah, getting compiler to be consistent with detecting bextr seems to be bit of a hit-and-miss.</p>",
        "id": 252666202,
        "sender_full_name": "Bot+",
        "timestamp": 1631209574
    },
    {
        "content": "<p>To use a near-pointless base64 micro-optimization I did a while back as example,</p>\n<p><a href=\"https://rust.godbolt.org/z/ov3aqofnK\">https://rust.godbolt.org/z/ov3aqofnK</a></p>\n<p>Opportunities for bextr are easy to spot, so the nice safe-ish Rust is almost as good as asm with SWAR.</p>\n<p>Try something more complex, and I guess other optimizations will break the pattern.</p>",
        "id": 252666304,
        "sender_full_name": "Bot+",
        "timestamp": 1631209628
    }
]