[
    {
        "content": "<p>I am wondering whether we can invoke miri in the middle of MIR inside of a compiler? </p>\n<p>the current problem I am facing is that I would like to capture the panic string whenever some panic function is called. however, sometimes the argument passed in might not be a string constant, but some local. I would like to obtain a string of the local at the best effort. is there a chance to achieve this?</p>",
        "id": 203975539,
        "sender_full_name": "Jason Hu",
        "timestamp": 1594829036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> hmm, does the local refer to a string constant? you might just need constprop</p>",
        "id": 203981932,
        "sender_full_name": "eddyb",
        "timestamp": 1594831993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/122651-general/topic/how.20to.20invoke.20miri.3F/near/203981932\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"320010\">Jason Hu</span> hmm, does the local refer to a string constant? you might just need constprop</p>\n</blockquote>\n<p>yes that indeed is constant propagation. how should I proceed?</p>",
        "id": 204143112,
        "sender_full_name": "Jason Hu",
        "timestamp": 1594933628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> you shouldn't have to do anything</p>",
        "id": 204149872,
        "sender_full_name": "eddyb",
        "timestamp": 1594937498
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 204149875,
        "sender_full_name": "eddyb",
        "timestamp": 1594937502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> but an example might be good, in case you're seeing a limitation of constprop</p>",
        "id": 204149958,
        "sender_full_name": "eddyb",
        "timestamp": 1594937543
    },
    {
        "content": "<p>(it should run by default, to be clear)</p>",
        "id": 204149978,
        "sender_full_name": "eddyb",
        "timestamp": 1594937561
    },
    {
        "content": "<p>you should be able to just put your optimization/mir-pass after const prop and you get most of what you're asking for. If not, open issues with repro examples and we'll have a look. Let's continue this discussion in <a class=\"stream\" data-stream-id=\"189540\" href=\"/#narrow/stream/189540-t-compiler.2Fwg-mir-opt\">#t-compiler/wg-mir-opt</a></p>",
        "id": 204181083,
        "sender_full_name": "oli",
        "timestamp": 1594973671
    },
    {
        "content": "<p>IIRC <span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> is playing around with a custom backend, which shouldn't even get to see unoptimized MIR</p>",
        "id": 204187501,
        "sender_full_name": "eddyb",
        "timestamp": 1594978616
    },
    {
        "content": "<p>I take <code>optimized_mir</code> so I guess the mir has been optimized. I can dig a bit but I think it's somewhere deep down in the stdlib</p>",
        "id": 204443219,
        "sender_full_name": "Jason Hu",
        "timestamp": 1595261927
    }
]