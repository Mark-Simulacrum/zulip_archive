[
    {
        "content": "<p>I seem to be unable to do the following, which tries to match a <code>&amp;str</code> in a const context.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">protocol_version</span><span class=\"p\">(</span><span class=\"n\">version_string</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">version_string</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"1.14.4\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">498</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cm\">/* ... */</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get the following error message, which is not very enlightening:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n --&gt; crates/brine_proto_backend/src/version.rs:5:9\n  |\n5 |         &quot;1.14.4&quot; =&gt; Some(498),\n  |         ^^^^^^^^\n</code></pre></div>\n<p>It's very much against my intuition that this doesn't work. Does anyone know why it doesn't work?</p>",
        "id": 268494671,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1642570993
    },
    {
        "content": "<p>Looking at the MIR (removing <code>const</code> so it compiles), looks like the <code>match</code> gets lowered into a <code>PartialEq::eq</code> call. Perhaps that's it?</p>",
        "id": 268495389,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1642571941
    },
    {
        "content": "<p>Indeed: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir_build/src/build/matches/test.rs#L261\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir_build/src/build/matches/test.rs#L261</a></p>",
        "id": 268495825,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1642572368
    },
    {
        "content": "<p>Interesting. And I guess \"const trait impl` isn't exactly a thing at the moment?</p>",
        "id": 268599959,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1642624786
    },
    {
        "content": "<p>I wonder how many other scenarios there are where the MIR lowering introduces things that the user didn't explicitly write, causing similarly unhelpful compiler errors</p>",
        "id": 268602022,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1642625796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/122651-general/topic/Match.20.26str.20in.20const.20fn/near/268599959\">said</a>:</p>\n<blockquote>\n<p>Interesting. And I guess \"const trait impl\" isn't exactly a thing at the moment?</p>\n</blockquote>\n<p>It is on nightly.</p>",
        "id": 268610405,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642629947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435059\">@Ben Reeves</span> FWIW, byte-string comparisons do already work in <code>const fn</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">protocol_version</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">version_string</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">version_string</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">b\"1.14.4\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">498</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cm\">/* â€¦ */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268628577,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642641830
    },
    {
        "content": "<p>Oh noice, thanks <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> . Did you mean to put that extra <code>|</code> in there?</p>",
        "id": 268629166,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1642642413
    },
    {
        "content": "<p>Fixed</p>",
        "id": 268629223,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642642459
    },
    {
        "content": "<p>Ah but I can't <code>Option::unwrap()</code> in const context on stable Rust yet :/</p>",
        "id": 268639477,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1642652177
    },
    {
        "content": "<p>Well, you can <code>panic!</code> in <code>const</code> contexts now, there are just some limitations, if writing a generic <code>const fn unwrap</code>, about the drop glue (even if unreachable). So the following, in practice can be quite handy:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">unwrap</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"> </span><span class=\"cp\">$opt</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"cp\">$opt</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span>::<span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span>::<span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span>::<span class=\"n\">core</span>::<span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Called `unwrap()` on a `None` value\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">)}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=27dad7f5846a7cf05ba470bc95082436\">Demo</a></li>\n</ul>",
        "id": 268675895,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642676724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Match.20.26str.20in.20const.20fn/near/268629223\">said</a>:</p>\n<blockquote>\n<p>Fixed</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">match_arm_leading_pipes</span> <span class=\"o\">=</span> <span class=\"s\">\"Always\"</span>\n</code></pre></div>",
        "id": 268734744,
        "sender_full_name": "fee1-dead",
        "timestamp": 1642702599
    },
    {
        "content": "<p>Whaaat, that's a thing?? All this time without knowing about it <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span>, I guess just no codebase uses that setting <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 268738220,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642704008
    }
]