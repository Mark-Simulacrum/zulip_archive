[
    {
        "content": "<p>Do we have a way on stable to efficiently init <code>Box&lt;[T; N]&gt;</code> that not through Vec ?</p>",
        "id": 224739496,
        "sender_full_name": "lzutao",
        "timestamp": 1612192437
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">].</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">().</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generates bad code in debug mode.</p>",
        "id": 224739726,
        "sender_full_name": "lzutao",
        "timestamp": 1612192534
    },
    {
        "content": "<p>You could manually allocate, initialize that yourself, and then Box::from_raw</p>",
        "id": 224739881,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612192592
    },
    {
        "content": "<p>but the unstable Box::new_uninit and Box::new_zeroed are the cleaner ways of doing that</p>",
        "id": 224740013,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612192646
    },
    {
        "content": "<p>If you need to target stable, there are crates out there showcasing the functionality of the <code>unstable</code> API: <a href=\"https://docs.rs/uninit/0.4.0/uninit/extension_traits/trait.BoxUninit.html#optimized-in-place-heap-initialization\">https://docs.rs/uninit/0.4.0/uninit/extension_traits/trait.BoxUninit.html#optimized-in-place-heap-initialization</a></p>",
        "id": 224741466,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612193213
    },
    {
        "content": "<p>thanks for the suggestions.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/122651-general/topic/efficiency.20Box.3C.5BT.3B.20N.5D.3E.20initilization.20.3F/near/224740013\">said</a>:</p>\n<blockquote>\n<p>but the unstable Box::new_uninit and Box::new_zeroed are the cleaner ways of doing that</p>\n</blockquote>\n<p>Those APIs are not bad. However, I don't see them convenient enough for <code>[T; N]</code>.<br>\nBut I cannot think about better API, I'll keep them in mind when they're in stable.</p>\n<hr>\n<p>Does </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"nb\">Box</span>::<span class=\"n\">uninit</span><span class=\"p\">().</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generate code with alloc_zeros ?</p>",
        "id": 224743264,
        "sender_full_name": "lzutao",
        "timestamp": 1612193850
    },
    {
        "content": "<p>Not sure, but I'd really doubt it. That's why the zeroed constructor's there.</p>",
        "id": 224743580,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1612193965
    },
    {
        "content": "<p>Going through a slice is unlikely to work well since <code>Box&lt;[T]&gt;</code> will have to carry the length in its allocation while the array encodes it in the type and thus needs a box that's 1 usize smaller. Direct conversion methods obviously couldn't exist before const generics. Should they be added?</p>",
        "id": 224788253,
        "sender_full_name": "The 8472",
        "timestamp": 1612212396
    },
    {
        "content": "<p>Nevermind, I was wrong about the allocation.</p>",
        "id": 224807048,
        "sender_full_name": "The 8472",
        "timestamp": 1612221050
    }
]