[
    {
        "content": "<p>I was chatting with <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> about const generics + property-based testing (<a href=\"https://github.com/AltSysrq/proptest/issues/219\">example</a>). One piece of code we came up with was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Example</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* elided */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* elided */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* elided */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// This is dependent typing</span>\n<span class=\"k\">fn</span> <span class=\"nf\">generate</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Example</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// How could you implement this?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Is this still called \"dependent typing\"?</span>\n<span class=\"k\">fn</span> <span class=\"nf\">generate</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// How could you implement this?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218127772,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606509660
    },
    {
        "content": "<p>I was thinking the other day about how const generics are kind of like a limited version of dependent typing. (Also I'm assuming there's more to come in your post.)</p>",
        "id": 218127863,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606509747
    },
    {
        "content": "<p>It <em>feels</em> like the \"dynamic dependent typing\" should be possible, much like how we had <code>Box&lt;dyn Foo&gt;</code> well before we had <code>impl Foo</code>.</p>",
        "id": 218127864,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606509748
    },
    {
        "content": "<blockquote>\n<p>I'm assuming there's more to come in your post</p>\n</blockquote>\n<p>Not really; feel free to jump in at any time.</p>",
        "id": 218127899,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606509813
    },
    {
        "content": "<p>I guess if I have a question (and I certainly don't have a fully-formed one) it would be: what has been discussed in this realm already?</p>",
        "id": 218127986,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606509880
    },
    {
        "content": "<p>(playground: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=31bda78dc66f8d143c55a8d51beb0b1d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=31bda78dc66f8d143c55a8d51beb0b1d</a>)</p>",
        "id": 218128026,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606509925
    },
    {
        "content": "<p>Can there be a <code>dyn usize</code>?</p>",
        "id": 218128032,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606509930
    },
    {
        "content": "<p>Well I don't know too much about const generics, but my understanding is that dependent types include non-const values</p>",
        "id": 218128099,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606509971
    },
    {
        "content": "<p>Copy-pasting from the Idris website:</p>\n<div class=\"codehilite\" data-code-language=\"Idris\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Vect</span> <span class=\"ow\">:</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n    <span class=\"nf\">Nil</span>  <span class=\"ow\">:</span> <span class=\"kt\">Vect</span> <span class=\"kt\">Z</span> a\n    <span class=\"ow\">(::)</span> <span class=\"ow\">:</span> a <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> k a <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"ow\">(</span><span class=\"kt\">S</span> k<span class=\"ow\">)</span> a\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Idris\"><pre><span></span><code><span class=\"nf\">app</span> <span class=\"ow\">:</span> <span class=\"kt\">Vect</span> n a <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> m a <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"ow\">(</span>n <span class=\"ow\">+</span> m<span class=\"ow\">)</span> a\napp <span class=\"kt\">Nil</span>       ys <span class=\"ow\">=</span> ys\napp <span class=\"ow\">(</span>x <span class=\"ow\">::</span> xs<span class=\"ow\">)</span> ys <span class=\"ow\">=</span> x <span class=\"ow\">::</span> app xs ys\n</code></pre></div>",
        "id": 218128120,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606510014
    },
    {
        "content": "<p>The type <code>Vect</code>  has a type! Or I guess a 'kind'?</p>",
        "id": 218128153,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606510062
    },
    {
        "content": "<p>I have no idea how it's implemented though</p>",
        "id": 218128166,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606510080
    },
    {
        "content": "<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Is this still called \"dependent typing\"?</span>\n<span class=\"k\">fn</span> <span class=\"nf\">generate</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// How could you implement this?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Wouldn't you have to specify <code>n</code> in <code>Box&lt;dyn SomeTrait&gt;</code> somehow? I feel like this wouldn't be possible because const generics need to be <em>const</em></p>",
        "id": 218128271,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606510185
    },
    {
        "content": "<p>My limited understanding is that dependent types require that the concept of “type” be expressable at runtime.</p>",
        "id": 218128466,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606510421
    },
    {
        "content": "<p>not necessarily <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218128537,
        "sender_full_name": "lcnr",
        "timestamp": 1606510485
    },
    {
        "content": "<p>we could allow them at compile time only (i.e. functions that could only be called at compile time)</p>",
        "id": 218128545,
        "sender_full_name": "lcnr",
        "timestamp": 1606510512
    },
    {
        "content": "<p>So a <code>onlyconst fn</code></p>",
        "id": 218128625,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606510598
    },
    {
        "content": "<p>so my understanding is that dependent types mean that values and types can influence each other in the same context</p>",
        "id": 218128629,
        "sender_full_name": "lcnr",
        "timestamp": 1606510601
    },
    {
        "content": "<p>Will full const generics allow <code>fn x(_: Foo&lt;thing()&gt;)</code>?</p>",
        "id": 218128659,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606510679
    },
    {
        "content": "<p><code>min_const_generics</code> already allows this</p>",
        "id": 218128701,
        "sender_full_name": "lcnr",
        "timestamp": 1606510693
    },
    {
        "content": "<p>well <code>Foo&lt;{ thing() }&gt;</code></p>",
        "id": 218128708,
        "sender_full_name": "lcnr",
        "timestamp": 1606510702
    },
    {
        "content": "<p>I hesitated about the curlies</p>",
        "id": 218128721,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606510719
    },
    {
        "content": "<p>always use the curlies</p>",
        "id": 218128736,
        "sender_full_name": "lcnr",
        "timestamp": 1606510740
    },
    {
        "content": "<p>they are your friend</p>",
        "id": 218128740,
        "sender_full_name": "lcnr",
        "timestamp": 1606510745
    },
    {
        "content": "<p>except when they aren't</p>",
        "id": 218128745,
        "sender_full_name": "lcnr",
        "timestamp": 1606510749
    },
    {
        "content": "<p>in which case they are not</p>",
        "id": 218128746,
        "sender_full_name": "lcnr",
        "timestamp": 1606510753
    },
    {
        "content": "<p>So a <code>const fn x(n: usize) -&gt; Foo&lt;{n}&gt;)</code> isn’t conceptually distant from the current world.</p>",
        "id": 218128830,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606510842
    },
    {
        "content": "<p>oh that</p>",
        "id": 218128834,
        "sender_full_name": "lcnr",
        "timestamp": 1606510849
    },
    {
        "content": "<p>that is distant <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> at least from what I can tell</p>",
        "id": 218128852,
        "sender_full_name": "lcnr",
        "timestamp": 1606510868
    },
    {
        "content": "<p>(Different from what I said previously, I’m echoing your <code>onlyconst</code> idea)</p>",
        "id": 218128879,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606510896
    },
    {
        "content": "<p>so <code>Foo&lt;{ n }&gt;</code> captures <code>n</code> from a context (word choice might not be correct but whatever) which is equal to the one it exists in itself</p>",
        "id": 218128937,
        "sender_full_name": "lcnr",
        "timestamp": 1606510942
    },
    {
        "content": "<p>getting this to work requires const eval to happen as the same time as typeck</p>",
        "id": 218129077,
        "sender_full_name": "lcnr",
        "timestamp": 1606511082
    },
    {
        "content": "<p>So it’s just a bit of refactoring? 😝</p>",
        "id": 218129454,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606511541
    },
    {
        "content": "<p><em>a bit</em></p>",
        "id": 218129587,
        "sender_full_name": "lcnr",
        "timestamp": 1606511677
    },
    {
        "content": "<p>Popping back up a bit, it feels like <code>Foo&lt;dyn usize&gt;</code> should be theoretically possible / conceptually coherent with our current <code>min_const_generic</code> (or <code>const_generic</code>) world.</p>",
        "id": 218129644,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606511755
    },
    {
        "content": "<p>i am still not sure what <code>dyn usize</code> means though</p>",
        "id": 218129699,
        "sender_full_name": "lcnr",
        "timestamp": 1606511784
    },
    {
        "content": "<p>would this require <code>Foo&lt;dyn usize&gt;</code> to contain impls for all possible values of <code>usize</code> in its vtable?</p>",
        "id": 218129724,
        "sender_full_name": "lcnr",
        "timestamp": 1606511814
    },
    {
        "content": "<p>No, I’d expect that the vtable would be created for each concrete N</p>",
        "id": 218129974,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606512045
    },
    {
        "content": "<p>so it's more similar to <code>Foo&lt;impl usize&gt;</code> then</p>",
        "id": 218129999,
        "sender_full_name": "lcnr",
        "timestamp": 1606512075
    },
    {
        "content": "<p>Much like the vtable is created for a concrete type when it’s made into a trait object.</p>",
        "id": 218130016,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606512094
    },
    {
        "content": "<p>or to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DynFoo</span><span class=\"w\"> </span><span class=\"p\">{]</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DynFoo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218130042,
        "sender_full_name": "lcnr",
        "timestamp": 1606512114
    },
    {
        "content": "<p>ah so it's</p>\n<div class=\"codehilite\"><pre><span></span><code>Foo&lt;dyn usize&gt; &lt;=&gt; \\exists n: usize. T: Foo&lt;N&gt;\n</code></pre></div>",
        "id": 218130131,
        "sender_full_name": "lcnr",
        "timestamp": 1606512186
    },
    {
        "content": "<p>B E H O L D my macro</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">const_prop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"cp\">$($n</span>: <span class=\"nc\">literal</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">paste</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">proptest</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"cp\">$(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">fn</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">doesnt_crash_</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"o\">&gt;</span><span class=\"p\">](</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">collection</span>::<span class=\"n\">vec</span><span class=\"p\">(</span><span class=\"n\">num</span>::<span class=\"kt\">u8</span>::<span class=\"n\">ANY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"o\">*</span><span class=\"mi\">1024</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sr</span>: <span class=\"nc\">StringRing</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"cp\">$n</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">StringRing</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">sr</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"extending failed\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">const_prop</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218132140,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606514469
    },
    {
        "content": "<p>What does that even <em>do</em>?</p>",
        "id": 218134215,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606516899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/122651-general/topic/static.20vs.20dynamic.20dependent.20typing/near/218134215\">said</a>:</p>\n<blockquote>\n<p>What does that even <em>do</em>?</p>\n</blockquote>\n<p>call chtulhu ?</p>",
        "id": 218134839,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606517698
    },
    {
        "content": "<p>Like most macros, it’s not <em>that</em> bad if you take it in pieces. </p>\n<p>It defines a macro that accepts zero or more comma separated literal values with an optional trailing comma. It then starts a paste context and a proptest context. Paste adds the <code>[&lt;&gt;]</code> syntax for concatenation of idents. Proptest adds the <code>for x in X</code> syntax to the test function signature.</p>",
        "id": 218135915,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606519129
    },
    {
        "content": "<p>I can call this with a bunch of numbers and it copy-pastes my test functions, appending the number to the test name and using it as the const generic parameter.</p>",
        "id": 218135975,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606519211
    },
    {
        "content": "<p>It’s not as powerful as actual property based tests, but at least let’s me check various parameter values.</p>",
        "id": 218135988,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606519253
    },
    {
        "content": "<p>What does this mean though?</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">doesnt_crash_</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 218140098,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606525826
    },
    {
        "content": "<p>And also: is this public code that I can look at? I'm really curious about what it's for :)</p>",
        "id": 218140105,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606525844
    },
    {
        "content": "<p>This creates functions named <code>doesnt_crash_0</code>, <code>doesnt_crash_1</code>, ...</p>",
        "id": 218140231,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606526110
    },
    {
        "content": "<p>Macro hygiene prevent creation of identifiers in such way in \"normal\" rust</p>",
        "id": 218140243,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606526155
    },
    {
        "content": "<p>Ah I <em>think</em> I understand...</p>",
        "id": 218141622,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606528529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> That syntax is parsed by the <code>paste</code> macro</p>",
        "id": 218148460,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606540220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/122651-general/topic/static.20vs.20dynamic.20dependent.20typing/near/218140105\">said</a>:</p>\n<blockquote>\n<p>And also: is this public code that I can look at? I'm really curious about what it's for :)</p>\n</blockquote>\n<p>I've published it at <a href=\"https://github.com/shepmaster/fantastic-rotary/blob/main/src/lib.rs\">https://github.com/shepmaster/fantastic-rotary/blob/main/src/lib.rs</a>, but it's super early and very untested.</p>\n<p>Basically I'm playing with const generics to be used as an in-place buffer for streaming UTF-8 text for XML parsing.</p>",
        "id": 218164367,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606569959
    },
    {
        "content": "<blockquote>\n<p>xml parsing</p>\n</blockquote>\n<p>Well, if you come back from that with your sanity intact, we can probably create a religion out of it</p>",
        "id": 218164568,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606570285
    },
    {
        "content": "<p>Not my first XML rodeo :-) (<a href=\"https://docs.rs/sxd-document/0.3.2/sxd_document/\">https://docs.rs/sxd-document/0.3.2/sxd_document/</a>; <a href=\"https://docs.rs/sxd-xpath/0.4.2/sxd_xpath/\">https://docs.rs/sxd-xpath/0.4.2/sxd_xpath/</a>)</p>",
        "id": 218164612,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606570326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/static.20vs.20dynamic.20dependent.20typing/near/218127864\">said</a>:</p>\n<blockquote>\n<p>It <em>feels</em> like the \"dynamic dependent typing\" should be possible, much like how we had <code>Box&lt;dyn Foo&gt;</code> well before we had <code>impl Foo</code>.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/static.20vs.20dynamic.20dependent.20typing/near/218128466\">said</a>:</p>\n<blockquote>\n<p>My limited understanding is that dependent types require that the concept of “type” be expressable at runtime.</p>\n</blockquote>\n<p>(I have a background in dependent type theory) For something to be a dependent type, it has to be able to depend on a value that has a type. That means that things like <code>Box&lt;dyn SomeTrait&gt;</code> are not dependent types, because the type itself doesn't depend on anything other than the types <code>Box</code> and <code>dyn SomeTrait</code>, which can be typechecked without caring about <code>n</code>. Const-eval is absolutely dependent typing, although IIUC the rust version has a pretty underpowered proof theory in the dependencies; in a real DTT you could write things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">concat</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p><em>without</em> any unsafe code, in such a way that no bounds checks are necessary. (That said, I'm not actually recommending this course - you will never find the bottom of that rabbit hole.)<br>\n<span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/static.20vs.20dynamic.20dependent.20typing/near/218129077\">said</a>:</p>\n<blockquote>\n<p>getting this to work requires const eval to happen as the same time as typeck</p>\n</blockquote>\n<p>This is the fundamental tradeoff of DTT: since types and terms become mutually recursive, type checking and evaluation have to happen at the same time. Note that since this all has to happen at compile time, run time values don't actually matter here (even in a real DTT); instead you are doing symbolic evaluation, and you have to worry about additional kinds of equality like whether <code>2 * n = n + n</code> (which is true for numerals but probably not for expressions unless you specifically optimize this; and it's not really a pure optimization because every evaluation or non-evaluation choice is observable in this domain).<br>\n<span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/static.20vs.20dynamic.20dependent.20typing/near/218129644\">said</a>:</p>\n<blockquote>\n<p>Popping back up a bit, it feels like <code>Foo&lt;dyn usize&gt;</code> should be theoretically possible / conceptually coherent with our current <code>min_const_generic</code> (or <code>const_generic</code>) world.</p>\n</blockquote>\n<p>I think <code>Foo&lt;dyn usize&gt;</code> makes sense, but the notation does no favors. What you want is <code>Σ n. Foo&lt;n&gt;</code> aka <code>exists n. Foo&lt;n&gt;</code>, where the sigma represents a dependent tuple of a value <code>n: usize</code> and a <code>Foo&lt;n&gt;</code>. You can think of the <code>n: usize</code> as the analogue of a typeid and <code>Foo&lt;n&gt;</code> as the vtable if you compare it to a <code>dyn Trait</code>.</p>\n<p>I think proper existential types in rust would be great. They can probably be supported without full dependent types, as long as the use is localized like <code>Foo&lt;N&gt; -&gt; exists n. Foo&lt;n&gt;</code>. The hard direction is the eliminator though; if you have an <code>exists n. Foo&lt;n&gt;</code> then you can't just get a <code>Foo&lt;N&gt;</code> out because it's been erased. You can't really call a monomorphized <code>foo&lt;N&gt;(f: Foo&lt;N&gt;) -&gt; A</code> either (that is, given <code>ex: exists n. Foo&lt;n&gt;</code>, there is some primitive operation <code>unpack(ex, foo): A</code>), because you would need <em>all</em> the copies of <code>foo</code> in order to compile it. Most dependently typed programming languages will compile the existential variable to a runtime value for this purpose, which is why you often need to box everything in these languages.</p>",
        "id": 218170713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606580669
    },
    {
        "content": "<blockquote>\n<p>Basically I'm playing with const generics to be used as an in-place buffer for streaming UTF-8 text for XML parsing.</p>\n</blockquote>\n<p>That sounds cool!</p>",
        "id": 218186381,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606606589
    }
]