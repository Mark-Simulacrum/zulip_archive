[
    {
        "content": "<p>Which nightly feature do I have to enable to allow this? The error message does not say</p>\n<div class=\"codehilite\"><pre><span></span><code>static A: i32 = 42;\nconst P: *const i32 = &amp;A;\n</code></pre></div>",
        "id": 236794576,
        "sender_full_name": "hannahE2",
        "timestamp": 1619766403
    },
    {
        "content": "<p>there's no feature for this</p>",
        "id": 236822655,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619783440
    },
    {
        "content": "<p>I see. Thanks. Any idea why this is not allowed ? C++ supports this, e.g.,</p>\n<div class=\"codehilite\"><pre><span></span><code>extern int A;\nconstexpr int* p = &amp;a;\n</code></pre></div>\n<p>but I was wondering how sound this is. It appears to be sound in C++ at least.</p>",
        "id": 236824838,
        "sender_full_name": "hannahE2",
        "timestamp": 1619784738
    },
    {
        "content": "<p>C++ doesn't have distinct <code>static</code> and <code>const</code> items, I think all globals are equivalent to Rust's <code>static</code> there</p>",
        "id": 236824954,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619784816
    },
    {
        "content": "<p>But C++ constexpr can be used in constant positions like array lengths, right?</p>",
        "id": 236825077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619784893
    },
    {
        "content": "<p>Right but you can't cast a pointer to an integer at compile-time</p>",
        "id": 236825508,
        "sender_full_name": "hannahE2",
        "timestamp": 1619785146
    },
    {
        "content": "<p>Ah, I didn't see the <code>constexpr</code> example. I'm not sure what the semantics of that is. What happens if the bits of <code>p</code> are inspected at compiletime?</p>",
        "id": 236825513,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619785147
    },
    {
        "content": "<p>You already can't cast pointers to usize in const eval in rust</p>",
        "id": 236825558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619785182
    },
    {
        "content": "<p>so this seems like it might be implementable</p>",
        "id": 236825571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619785193
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(linkage)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">raw</span>::<span class=\"n\">c_int</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// static mut A: c_int;</span>\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"A\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[linkage = </span><span class=\"s\">\"external\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=83e21e90f3e6d455488b495cba5853a3\">Playground</a></li>\n</ul>",
        "id": 236826318,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619785607
    },
    {
        "content": "<p>Wow I didn't know you can spawn sub-processes on the playground, good to know <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> .</p>",
        "id": 236826719,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1619785835
    },
    {
        "content": "<p>Yeah, there are good odds to time out when doing so, but when it works, it is quite nice to be able to test \"meta\" setups <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<hr>\n<p>By the way, on <code>--release</code> at least, using <code>&amp;A</code> for an <code>extern { static A... }</code> and using <code>p</code> where it's been assigned the address of <code>A</code> through <code>linkage = \"external\"</code> yields the same assembly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">c_int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"A\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[linkage = </span><span class=\"s\">\"external\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span>::<span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">read_volatile</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span>::<span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">read_volatile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">_ZN7example4main17hc5ea6c58e81a25c4E:</span>\n    <span class=\"na\">.cfi_startproc</span>\n    <span class=\"nf\">movq</span>    <span class=\"no\">A@GOTPCREL</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">movl</span>    <span class=\"p\">(</span><span class=\"nv\">%rax</span><span class=\"p\">),</span> <span class=\"nv\">%ecx</span>\n    <span class=\"nf\">movl</span>    <span class=\"p\">(</span><span class=\"nv\">%rax</span><span class=\"p\">),</span> <span class=\"nv\">%eax</span>\n    <span class=\"nf\">retq</span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=17dc856c60efc0ac3517a5071e519a1a\">Playground</a></li>\n</ul>",
        "id": 236828077,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619786618
    },
    {
        "content": "<p>This means that also simply using:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">{()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span>: ::<span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">raw</span>::<span class=\"n\">c_int</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span>::<span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">})}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>as a way to <code>#define p (&amp;A)</code> in C parlance may be a legitimate alternative (it's one that works on stable, for instance).</p>",
        "id": 236828296,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619786752
    }
]