[
    {
        "content": "<p>When working on miri against a locally built rustc, I use an invocation like <code>./x.py build src/rustc --keep-stage 0</code> because without <code>keep-stage</code>, the edit-compile cycle involves a full clean compiler build and two builds of librustc_mir (sometimes even two builds of librustc) and easily takes &gt;20min. This used to work fine, but it looks like something changed (semi-)recently and now I often end up with errors like</p>\n<div class=\"codehilite\"><pre><span></span>error[E0514]: found crate `std` compiled by an incompatible version of rustc\n  |\n  = help: please recompile that crate using this compiler (rustc 1.43.0-nightly (c52d85610 2020-02-28))\n  = note: the following crate versions were found:\n          crate `std` compiled by rustc 1.43.0-nightly (1fec68277 2020-02-28): /home/r/src/rust/rustc.2/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-9a44f0c4a069c23d.rlib\n          crate `std` compiled by rustc 1.43.0-nightly (1fec68277 2020-02-28): /home/r/src/rust/rustc.2/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-9a44f0c4a069c23d.so\n</pre></div>\n\n\n<p>this happens whenever I do <code>git commit</code> or a night passes since I did my last non-<code>keep-stage</code> build, and it makes my work quite painful.<br>\nis there any work-around, or does someone know why this was not a problem earlier (like, last year)?<br>\na possible work-around would be to build a stage 2 libstd instead of \"Uplifting stage1 std\", but I don't know how to trigger that.</p>",
        "id": 189300148,
        "sender_full_name": "RalfJ",
        "timestamp": 1582887188
    },
    {
        "content": "<p>commenting out the std uplifting logic works around this successfully:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/bootstrap/compile.rs b/src/bootstrap/compile.rs</span>\n<span class=\"gh\">index 7dded96e18e..ff5cd87481f 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/compile.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/compile.rs</span>\n<span class=\"gu\">@@ -66,7 +66,7 @@ impl Step for Std {</span>\n\n         let mut target_deps = builder.ensure(StartupObjects { compiler, target });\n\n<span class=\"gd\">-        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);</span>\n<span class=\"gi\">+        /*let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);</span>\n         if compiler_to_use != compiler {\n             builder.ensure(Std { compiler: compiler_to_use, target });\n             builder.info(&amp;format!(&quot;Uplifting stage1 std ({} -&gt; {})&quot;, compiler_to_use.host, target));\n<span class=\"gu\">@@ -81,7 +81,7 @@ impl Step for Std {</span>\n                 target,\n             });\n             return;\n<span class=\"gd\">-        }</span>\n<span class=\"gi\">+        }*/</span>\n\n         target_deps.extend(copy_third_party_objects(builder, &amp;compiler, target).into_iter());\n</pre></div>\n\n\n<p>so maybe that should be an option, or maybe <code>--keep-stage</code> should trigger that (though I probably still want rustc uplifting), or so?</p>",
        "id": 189300431,
        "sender_full_name": "RalfJ",
        "timestamp": 1582887530
    },
    {
        "content": "<p>oh never mind, that just triggers another similar failure later:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0514]: found crate `rustc_apfloat` compiled by an incompatible version of rustc\n  --&gt; src/lib.rs:10:1\n   |\n10 | extern crate rustc_apfloat;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: please recompile that crate using this compiler (rustc 1.43.0-nightly (c52d85610 2020-02-28))\n   = note: the following crate versions were found:\n           crate `rustc_apfloat` compiled by rustc 1.43.0-nightly (1fec68277 2020-02-28): /home/r/src/rust/rustc.2/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_apfloat-abb1b5f86bb36b4a.rlib\n</pre></div>",
        "id": 189300458,
        "sender_full_name": "RalfJ",
        "timestamp": 1582887561
    },
    {
        "content": "<p>hm, are those errors during bootstrap itself? at what stage? I would not expect to see -nightly as the compiler at any point during bootstrap</p>",
        "id": 189305971,
        "sender_full_name": "simulacrum",
        "timestamp": 1582893739
    },
    {
        "content": "<p>what you're trying to do is get a stage 2 compiler, right?</p>",
        "id": 189305986,
        "sender_full_name": "simulacrum",
        "timestamp": 1582893763
    },
    {
        "content": "<p>sorry I should have said: those are errors I get when building miri against the stage2 compiler</p>",
        "id": 189306241,
        "sender_full_name": "RalfJ",
        "timestamp": 1582894074
    },
    {
        "content": "<p>building stage2 works, but the resulting stage2 is useless because it considers itself incompatible with its own libstd</p>",
        "id": 189306289,
        "sender_full_name": "RalfJ",
        "timestamp": 1582894094
    },
    {
        "content": "<p>(yes I did <code>rm target -rf</code> on the miri side)</p>",
        "id": 189306308,
        "sender_full_name": "RalfJ",
        "timestamp": 1582894124
    },
    {
        "content": "<p>oh, hm</p>",
        "id": 189306528,
        "sender_full_name": "simulacrum",
        "timestamp": 1582894340
    },
    {
        "content": "<p>are you sure you're building with stage 2? Maybe your editor is messing with the target directory (e.g., cargo check running in the background?)</p>",
        "id": 189306535,
        "sender_full_name": "simulacrum",
        "timestamp": 1582894365
    },
    {
        "content": "<p>What does stage/bin/rustc -vV give?</p>",
        "id": 189306541,
        "sender_full_name": "simulacrum",
        "timestamp": 1582894375
    },
    {
        "content": "<p>I would expect -dev as the \"toolchain\" whereas you seem to be getting interference from a nightly toolchain</p>",
        "id": 189306553,
        "sender_full_name": "simulacrum",
        "timestamp": 1582894399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 189306567,
        "sender_full_name": "simulacrum",
        "timestamp": 1582894416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/.22incompatible.20version.20of.20rustc.22.20when.20using.20.60--keep-stage.60/near/189306535\" title=\"#narrow/stream/122651-general/topic/.22incompatible.20version.20of.20rustc.22.20when.20using.20.60--keep-stage.60/near/189306535\">said</a>:</p>\n<blockquote>\n<p>are you sure you're building with stage 2? Maybe your editor is messing with the target directory (e.g., cargo check running in the background?)</p>\n</blockquote>\n<p>I am doing this directly on the console, <code>rustup show</code> says \"rustc.2-s2 (directory override for '/home/r/src/rust/miri')\" is active</p>",
        "id": 189306777,
        "sender_full_name": "RalfJ",
        "timestamp": 1582894610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/.22incompatible.20version.20of.20rustc.22.20when.20using.20.60--keep-stage.60/near/189306553\" title=\"#narrow/stream/122651-general/topic/.22incompatible.20version.20of.20rustc.22.20when.20using.20.60--keep-stage.60/near/189306553\">said</a>:</p>\n<blockquote>\n<p>I would expect -dev as the \"toolchain\" whereas you seem to be getting interference from a nightly toolchain</p>\n</blockquote>\n<p>ooohhhhh</p>",
        "id": 189306792,
        "sender_full_name": "RalfJ",
        "timestamp": 1582894625
    },
    {
        "content": "<p>yeah I had set <code>channel = \"nightly\"</code> in my <code>config.toml</code> ages ago as that is required to test build-manifest, and forgot to change it back :/</p>",
        "id": 189306828,
        "sender_full_name": "RalfJ",
        "timestamp": 1582894669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> thanks, that drove me in the right direction</p>",
        "id": 189306905,
        "sender_full_name": "RalfJ",
        "timestamp": 1582894724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I am amazed that helped if you had already set the toolchain as nightly :)</p>",
        "id": 189364657,
        "sender_full_name": "simulacrum",
        "timestamp": 1582935203
    },
    {
        "content": "<p>the rustup toolchain was right all along</p>",
        "id": 189382307,
        "sender_full_name": "RalfJ",
        "timestamp": 1582965401
    },
    {
        "content": "<p>just, my locally compiled rustc was compiled as \"nightly\" instead of the usual \"dev\"</p>",
        "id": 189382310,
        "sender_full_name": "RalfJ",
        "timestamp": 1582965412
    }
]