[
    {
        "content": "<p>Hi, I've been hacking on uefi-rs lately and came across something weird. Whenever I've seen documentation around extern function pointers, they either have the abi specified or state that \"C\" is the default. However, I've been experimenting with changing the specified abi in uefi-rs's function pointers and it doesn't seem to affect execution in any way. They're originally \"efiapi\", but I've tried \"C\", \"cdecl\", and even \"stdcall\" and everything still runs, at least on an x86-64 VM. Do extern fn pointers care about the specified abi?</p>",
        "id": 258307258,
        "sender_full_name": "Timothy Roberts",
        "timestamp": 1634700756
    },
    {
        "content": "<p>To clarify, the function pointers in question point to functions provided by the UEFI firmware implementation, which in this test is OVMF, written in C and supposedly following the \"win64\" abi. The rust target is \"x86_64-unknown-uefi\".</p>",
        "id": 258311023,
        "sender_full_name": "Timothy Roberts",
        "timestamp": 1634704451
    },
    {
        "content": "<p>Without knowing the precise details of the ABI, it's entirely <em>possible</em> that for the arguments and return type that you're using the ABIs are effectively identical and so you won't see problems.</p>",
        "id": 258314754,
        "sender_full_name": "Lokathor",
        "timestamp": 1634707975
    },
    {
        "content": "<p>On x86_64 there are sysv64 and win64 abi that are explicit, and the rest probably just follow target default, which is win64 on uefi platform.</p>",
        "id": 258320289,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634712688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451918\">@Timothy Roberts</span> On the <code>x86_64-unknown-uefi</code> target, <code>extern \"C\"</code> should be the UEFI ABI.</p>",
        "id": 258325544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634715750
    }
]