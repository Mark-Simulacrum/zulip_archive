[
    {
        "content": "<p>Is there an easy way to use async code in documentation examples? Or is my best bet to use block_on?</p>",
        "id": 219789901,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607905687
    },
    {
        "content": "<p>what kind of \"use\"?</p>",
        "id": 219889025,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607973560
    },
    {
        "content": "<p>you could compile it without actually running it</p>",
        "id": 219889077,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607973585
    },
    {
        "content": "<p>yea, I was hoping to also run it as its an easy way to ensure examples are valid and they can somewhat expand unit test coverage.</p>",
        "id": 219890568,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607974080
    },
    {
        "content": "<p>Yeah, you'll want to bring one of the executors in then.</p>",
        "id": 219891579,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974550
    },
    {
        "content": "<p>you know how to hide things in doc tests though? With the leading <code>#</code>?</p>",
        "id": 219891650,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974568
    },
    {
        "content": "<p>You can add a little hidden main that calls your async function / block</p>",
        "id": 219891685,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974590
    },
    {
        "content": "<p>still a pain for you, but at least the code looks nice to the doc reader.</p>",
        "id": 219891707,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974604
    },
    {
        "content": "<p>That sound like the best option. I assume there is no way to share the code across across examples so its not full of copy pasting?</p>",
        "id": 219892147,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607974823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"371560\">@Michael Carson</span> you could have a <code>doc(hidden)</code> public function in the main library</p>",
        "id": 219892222,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607974864
    },
    {
        "content": "<p>Nothing I know of directly. ^</p>",
        "id": 219892237,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974868
    },
    {
        "content": "<p>I'd probably make it <code>cfg(doc)</code> as well</p>",
        "id": 219892259,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974886
    },
    {
        "content": "<p>or would it be test</p>",
        "id": 219892282,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974895
    },
    {
        "content": "<p>One or the other</p>",
        "id": 219892289,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607974899
    },
    {
        "content": "<p>ideally it would be <code>cfg(doctest)</code> but <code>cfg(doctest)</code>is broken</p>",
        "id": 219892322,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607974917
    },
    {
        "content": "<p>not sure if cargo sets <code>test</code> or <code>doc</code></p>",
        "id": 219892379,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607974930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  I'll look into that as well</p>",
        "id": 219892402,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607974942
    },
    {
        "content": "<p>unsure if there is already a feature request for this but I think there is a good usecase for adding an # AsyncExamples block</p>",
        "id": 219892462,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607974985
    },
    {
        "content": "<p>though having it be executor agnostic is probably semi-tough</p>",
        "id": 219892494,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607975001
    },
    {
        "content": "<p>I think a general setup/teardown test framework is probably more general and helpful</p>",
        "id": 219892539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607975026
    },
    {
        "content": "<p>unfortunately that hasn't seen any movement in the last couple years :/</p>",
        "id": 219892571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607975040
    },
    {
        "content": "<p>I have been using the beta test framework for a code base that needed integration testing</p>",
        "id": 219892688,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607975081
    },
    {
        "content": "<p>does that allow setup/teardown? I thought libtest ran each test in isolation</p>",
        "id": 219892722,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607975101
    },
    {
        "content": "<p>You can define a test runner and then pass it a list of functions. Each file will run in isolation but within a file they run in the same \"state space\".</p>",
        "id": 219892882,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607975172
    },
    {
        "content": "<p>ah hmm, that does sound useful</p>",
        "id": 219892914,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607975186
    },
    {
        "content": "<p>having shared code is still a pain though as its easy to get circular references. But its the best way I have found to do integration testing and still use cargo test.</p>",
        "id": 219892993,
        "sender_full_name": "Michael Carson",
        "timestamp": 1607975228
    }
]