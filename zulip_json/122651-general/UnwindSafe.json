[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> so maybe a better way to explain <code>UnwindSafe</code> is to explain it as a \"warning\" that has false positives, and <code>AssertUnwindSafe</code> is just a way to toggle that warning off.</p>",
        "id": 179526391,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525177
    },
    {
        "content": "<p>In particular, it is ok and safe to always turn this warning off, and it is common to do so in generic code.</p>",
        "id": 179526431,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525221
    },
    {
        "content": "<p>When the warning triggers, user can either use it to improve their code, or ignore it.</p>",
        "id": 179526548,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525328
    },
    {
        "content": "<p>I personally like to think about <code>UnwindSafe</code> as \"a waste of time that you should bypass with as little effort as possible\" :P</p>",
        "id": 179526821,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525556
    },
    {
        "content": "<p>It's insufficiently precise to be useful in practice imo</p>",
        "id": 179526847,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525588
    },
    {
        "content": "<p>probably to late to deprecate it and remove it</p>",
        "id": 179527010,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525706
    },
    {
        "content": "<p>adding an auto trait to the language to provide a \"warning\" with a lot of false positives that is always ok to ignore, and for which most code's only option is to actually ignore it, doesn't sound like a good trade-off</p>",
        "id": 179527090,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525740
    },
    {
        "content": "<p>yeah</p>",
        "id": 179527101,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525751
    },
    {
        "content": "<p>we could in theory remove the bound on catch_unwind which I think may be the only place it comes up</p>",
        "id": 179527118,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525768
    },
    {
        "content": "<p>We could at least improve the docs to tell users \"If you are here, just use <code>AssertUnwindSafe</code>\"</p>",
        "id": 179527122,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525774
    },
    {
        "content": "<p>not sure if that's really doable in practice though</p>",
        "id": 179527125,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525776
    },
    {
        "content": "<p>I think that's doable</p>",
        "id": 179527137,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525784
    },
    {
        "content": "<p>worst case we can just add catch_unwind2 or whatever :P</p>",
        "id": 179527151,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525799
    },
    {
        "content": "<p>we probably can't remove the auto trait</p>",
        "id": 179527152,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525800
    },
    {
        "content": "<p>and deprecate the traits</p>",
        "id": 179527154,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525802
    },
    {
        "content": "<p>oh yeah they definitely can't go away since they're stable</p>",
        "id": 179527164,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525811
    },
    {
        "content": "<p>Yeah, deprecate everything, remove the bound on catch_unwind, that would save users the time to actually try to learn what this is for</p>",
        "id": 179527187,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525836
    },
    {
        "content": "<p>I will open an internal threads later, if there are others that feel that this would be a good idea, I might try wording a small RFC</p>",
        "id": 179527271,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572525902
    },
    {
        "content": "<p>something related I've been meaning to do is to write up a std::sync reform rfc, to move things out of the one big module into std::mutex etc and shift to non-poisoning versions</p>",
        "id": 179527371,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572525977
    },
    {
        "content": "<p>UnwindSafe and poisoning are two \"pseudo-safety\" mechanisms that in the end turned out to be mostly useless. I hope we've learned the lesson by now and will strictly stick to memory safety.</p>",
        "id": 179528787,
        "sender_full_name": "Amanieu",
        "timestamp": 1572527050
    },
    {
        "content": "<p>At least we got rid of the Freeze bound on Mutex::new :P</p>",
        "id": 179539115,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1572533890
    },
    {
        "content": "<blockquote>\n<p>something related I've been meaning to do is to write up a std::sync reform rfc, to move things out of the one big module into std::mutex etc and shift to non-poisoning versions</p>\n</blockquote>\n<p>Please do.</p>",
        "id": 179547911,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572538790
    },
    {
        "content": "<p>I really have no idea why a panic through a mutexguard panics a mutex.</p>",
        "id": 179548048,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572538865
    },
    {
        "content": "<p>Can't it just release the lock ? The <code>unsafe</code> code using the guard needs to make sure that in case of a panic the content behind the mutex has its invariants restored anyways.</p>",
        "id": 179548117,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572538922
    },
    {
        "content": "<p>Poisoning is not for safety (as you can see from the fact that un-poisoning is safe), just like UnwindRef it was intended as a guardrail against logical bugs from observing broken internal invariants due to untimely panics</p>",
        "id": 179548458,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572539122
    },
    {
        "content": "<p>Sure, but if a panic can cause some unsafe code to leave some invariants broken, then that unsafe code is broken, independently of whether poisoning or unwindref are used</p>",
        "id": 179548623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572539224
    },
    {
        "content": "<p>Its more like a second line of defense against broken code, which ends up being a bit weird if one deals with code that's not broken</p>",
        "id": 179548754,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572539284
    },
    {
        "content": "<p>The invariants in question can also be <em>logical</em> invariants that aren't relevant for safety but only for correct behavior of the program</p>",
        "id": 179549267,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572539621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn main() {\n    println!(&quot;Hello, world!&quot;);\n}\n</pre></div>",
        "id": 179679791,
        "sender_full_name": "chabing",
        "timestamp": 1572659883
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179679797,
        "sender_full_name": "chabing",
        "timestamp": 1572659895
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello, world!&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179679801,
        "sender_full_name": "chabing",
        "timestamp": 1572659917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247690\">@chabing</span> wrong thread ?</p>",
        "id": 179693662,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572684877
    },
    {
        "content": "<p>I recently met someone who considered Mutex poisoning one of the best innovations of Rust in the exception safety space and that ocaml might copy it for dealing with their \"async exceptions\"</p>",
        "id": 179746681,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786554
    },
    {
        "content": "<p>so, not sure about removing that one</p>",
        "id": 179746683,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786559
    },
    {
        "content": "<p>but for <code>UnwindSafe</code>, yes, that didn't really pull its weight</p>",
        "id": 179746686,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> have you opened that IRLO thread yet?</p>",
        "id": 179746692,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786601
    },
    {
        "content": "<p>not yet</p>",
        "id": 179818219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572860594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> if a Rust program can result in a lock being poisoned, I think the program has a bug.</p>",
        "id": 179827559,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572869534
    },
    {
        "content": "<p>poisoning is not the way to fix the bug</p>",
        "id": 179827565,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572869546
    },
    {
        "content": "<p>more like a diagnostic mechanism.<br>\nIf helping users find these bugs and fixing them is the goal, poisoning is overkill. <br>\nWe could, e.g., have a flag that dumps the stack trace and aborts when a panic unwinds a lock, in a similar vein to how <code>parking_lot</code> locks have optional dead-lock detection (if your program has a deadlock, it has a bug as well - we could poison the locks instead, but that isn't the goal there either).</p>",
        "id": 179827758,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572869705
    },
    {
        "content": "<blockquote>\n<p>if a Rust program can result in a lock being poisoned, I think the program has a bug.</p>\n</blockquote>\n<p>One use-case is detecting if someone (e.g. a user) outside of the program kills a thread, or when the program itself does it. It's considered to be a bad idea, but I've seen people calling <code>TerminateThread</code>, for various reasons. Another one is probably software that goes the extra mile to handle errors, panic and restart, à la Erlang.</p>",
        "id": 179832166,
        "sender_full_name": "Laurențiu",
        "timestamp": 1572873821
    },
    {
        "content": "<p>I think lock poisoning is still somewhat unexplored and has potential for some interesting applications. I'm not convinced I want the standard libraries to do it, but isn't it a bit late anyone? How can we get rid of poisoning without changing the API?</p>",
        "id": 179832423,
        "sender_full_name": "Laurențiu",
        "timestamp": 1572874020
    },
    {
        "content": "<p>Yeah if a lock is poisoned it's sometimes rational to ignore the poison and keep going (eg: a global RNG state which can't possibly be bad), and sometimes you want to report it to a log file, or maybe do other things. I don't think there's a single good answer to all those.</p>",
        "id": 179844054,
        "sender_full_name": "Lokathor",
        "timestamp": 1572882057
    },
    {
        "content": "<blockquote>\n<p>One use-case is detecting if someone (e.g. a user) outside of the program kills a thread, or when the program itself does it. It's considered to be a bad idea, but I've seen people calling TerminateThread, for various reasons. Another one is probably software that goes the extra mile to handle errors, panic and restart, à la Erlang.</p>\n</blockquote>\n<p>One of the reasons this is a bad idea is because this does not work. When you kill a thread, nothing guarantees that if that threads holds a lock the lock will be poisoned.</p>",
        "id": 179851185,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572886355
    },
    {
        "content": "<p>A program that assumes that this is the case already has a bug.</p>",
        "id": 179851206,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572886383
    },
    {
        "content": "<p>If you happen to, e.g., be on Linux, and the thread happens to call a cancellation point close to when something tries to kill it, then that cancellation point will unwind with a foreign exception, which <code>catch_unwind</code> will silently let through, and that will probably poison a <code>std::sync::Mutex</code></p>",
        "id": 179851371,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572886490
    },
    {
        "content": "<p>but one of the other things that can happen if you don't hit a cancellation point and you haven't configured your thread in specific ways is asynchronous cancellation, where the OS raises a signal, and if you don't have a signal handler to catch it, the thread just dies, no unwinding</p>",
        "id": 179851440,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572886555
    },
    {
        "content": "<p>or if instead of unwinding from a cancellation point like <code>glibc</code> does, your program uses <code>musl</code> which <code>longjmp</code>s, unwinding the thread stack without running destructors</p>",
        "id": 179851588,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572886655
    },
    {
        "content": "<p>Gah, kill it with fire.</p>",
        "id": 179852660,
        "sender_full_name": "Laurențiu",
        "timestamp": 1572887295
    },
    {
        "content": "<p>It would be interesting to try and run crater or manually audit code to determine if there are uses of the poisoned mutex that do something other than unwrap or reach through the poison error; if I'm following correctly, our assertion is that no such valid uses exist.</p>",
        "id": 179857033,
        "sender_full_name": "simulacrum",
        "timestamp": 1572890209
    },
    {
        "content": "<p>The assertion being that poisoning is useless? Unwrapping is perfectly consistent with poisoning being useful, as it will terminate the program when it reaches circumstances that the program hasn't been written to handle (similar to e.g. an out-of-bounds slice index). Sure, a ton of those unwraps are probably written with a mindset of not caring about poisoning and never get exercised when the program runs, but you can't determine whether that's the case by locally inspecting the code.</p>",
        "id": 179870334,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572897859
    },
    {
        "content": "<p>Right, this isn't a test for poisoning being useless, but rather that there are no \"interesting\" uses, so to speak</p>",
        "id": 179877503,
        "sender_full_name": "simulacrum",
        "timestamp": 1572902217
    },
    {
        "content": "<p>not sure if that makes sense :)</p>",
        "id": 179877511,
        "sender_full_name": "simulacrum",
        "timestamp": 1572902221
    },
    {
        "content": "<p>I don't know what \"interesting\" uses you imagine. The two uses you describe are pretty much the only two (modulo what you do after you've reached through the poison error) I can imagine even in a world where everyone unambiguously agrees that poisoning is Good</p>",
        "id": 179877836,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572902448
    },
    {
        "content": "<p>right -- I mean that maybe there's code that does something with the poison error other than re-panic or getting the value out anything</p>",
        "id": 179878056,
        "sender_full_name": "simulacrum",
        "timestamp": 1572902567
    },
    {
        "content": "<p>getting the value out anyway*</p>",
        "id": 179878085,
        "sender_full_name": "simulacrum",
        "timestamp": 1572902584
    },
    {
        "content": "<p>but I'm also not sure what we would get out of such examples, so it may not be worth the trouble :)</p>",
        "id": 179878115,
        "sender_full_name": "simulacrum",
        "timestamp": 1572902601
    },
    {
        "content": "<p>Ah, yes, that would by conceivable. For example, resetting the state to a sensible default so that the program can carry on as normal without seeing more poisoning errors in the future.</p>",
        "id": 179878168,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572902641
    },
    {
        "content": "<p>My thought, I guess, is that if there are such uses, that might inform us better as to the uses for poisoning; e.g. one could imagine that you instead of returning <code>Result&lt;Guard&lt;..., T&gt;, PoisonError&lt;T&gt;&gt;</code> or just <code>T</code> always return some sort of type that deref's to T and has a method for \"is_poisoned\"</p>",
        "id": 179878364,
        "sender_full_name": "simulacrum",
        "timestamp": 1572902785
    },
    {
        "content": "<p>obviously this isn't backwards compatible :)</p>",
        "id": 179878369,
        "sender_full_name": "simulacrum",
        "timestamp": 1572902792
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> if a Rust program can result in a lock being poisoned, I think the program has a bug.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  Isn't that the same statement as \"if a Rust program can result in a panic, the program has a bug\"?</p>",
        "id": 179913774,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945488
    },
    {
        "content": "<blockquote>\n<p>but one of the other things that can happen if you don't hit a cancellation point and you haven't configured your thread in specific ways is asynchronous cancellation, where the OS raises a signal, and if you don't have a signal handler to catch it, the thread just dies, no unwinding</p>\n</blockquote>\n<p>but in that case the lock will also remain locked, right? so a future call to <code>lock()</code> just don't return.</p>",
        "id": 179913979,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945637
    },
    {
        "content": "<p>though with <code>get_mut</code> one could likely still get to the data...</p>",
        "id": 179914005,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945664
    },
    {
        "content": "<p><code>unsafe</code> code is required to be safe in the presence of panics</p>",
        "id": 179915698,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947076
    },
    {
        "content": "<p>such that catching a panic is safe</p>",
        "id": 179915736,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947110
    },
    {
        "content": "<p>with thread cancellation, right now we just have instant UB</p>",
        "id": 179915881,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947237
    },
    {
        "content": "<p>even if thread cancellation unwinds</p>",
        "id": 179915962,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947287
    },
    {
        "content": "<p>So you can get a poisoned mutex, but your program already has UB</p>",
        "id": 179915976,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947301
    },
    {
        "content": "<p>well that's even \"better\" then, at least in terms of justifying poisoning</p>",
        "id": 179916504,
        "sender_full_name": "RalfJ",
        "timestamp": 1572947738
    },
    {
        "content": "<p>how come?</p>",
        "id": 179916562,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947776
    },
    {
        "content": "<p>sounds like doing a null pointer check after having dereferenced a null pointer</p>",
        "id": 179916580,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947794
    },
    {
        "content": "<blockquote>\n<p>how come?</p>\n</blockquote>\n<p>someone caused UB by doing thread cancellation. poisoning only has to protect against things that can actually happen in UB-free programs.</p>",
        "id": 179916636,
        "sender_full_name": "RalfJ",
        "timestamp": 1572947856
    },
    {
        "content": "<p>ah yeah, but in UB free programs, there is really no safety issue with just ignoring that a lock has been poisoned</p>",
        "id": 179916733,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947925
    },
    {
        "content": "<p>its a good feature to have if you want to diagnose a particular situation, just like deadlock detection (e.g. find if a lock guard was dropped by a panic)</p>",
        "id": 179916786,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947993
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 179916885,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572948061
    },
    {
        "content": "<blockquote>\n<p>ah yeah, but in UB free programs, there is really no safety issue with just ignoring that a lock has been poisoned</p>\n</blockquote>\n<p>poisoning is about correctness, not safety</p>",
        "id": 179918174,
        "sender_full_name": "RalfJ",
        "timestamp": 1572949266
    },
    {
        "content": "<p>so is deadlock freedom</p>",
        "id": 179920197,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572950990
    },
    {
        "content": "<p>and many other things</p>",
        "id": 179920208,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572950999
    },
    {
        "content": "<p>While a deadlock is always a bug, a poisoned mutex is only sometimes a bug (this is kind of why it is interesting to add an API to check this - for deadlocks it isn't)</p>",
        "id": 179920293,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572951046
    },
    {
        "content": "<p>The question is whether it is a good trade-off to force all users of mutexes to check whether the mutex has been poisoned</p>",
        "id": 179920315,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572951065
    },
    {
        "content": "<p>Is the cost of having to do that worth the amount of logic bugs it catches ?</p>",
        "id": 179920429,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572951152
    },
    {
        "content": "<p>agreed</p>",
        "id": 179928091,
        "sender_full_name": "RalfJ",
        "timestamp": 1572958047
    },
    {
        "content": "<p>Lock poisoning is also completely useless and pure noise with panic=abort</p>",
        "id": 181182437,
        "sender_full_name": "Zoxc",
        "timestamp": 1574230052
    }
]