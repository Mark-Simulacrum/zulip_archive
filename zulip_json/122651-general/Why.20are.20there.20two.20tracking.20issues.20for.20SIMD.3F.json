[
    {
        "content": "<p>stdarch points to <a href=\"https://github.com/rust-lang/rust/issues/27731\">https://github.com/rust-lang/rust/issues/27731</a>, libcore and libstd point to <a href=\"https://github.com/rust-lang/rust/issues/48556\">https://github.com/rust-lang/rust/issues/48556</a>. They have almost exactly the same title, both opened by <span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span>, and were opened 3 years apart.</p>",
        "id": 233117075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617575207
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/27731\">#27731</a> was the old plan for implementing SIMD (RFC 1199). This was introducing <code>extern \"platform-intrinsic\"</code> and then putting platform independent and platform dependent intrinsics there. <a href=\"https://github.com/rust-lang/rust/issues/48556\">#48556</a> was for the new plan for implementing SIMD (RFC 2325). This was introducing a <code>std::arch</code> module with a one to one match between the C vendor intrinsics and the intrinisics in this module. These intrinsics have been implemented using <code>extern \"platform-intrinsic\"</code> when there were platform independent intrinsics or directly using LLVM intrinsics when there weren't.</p>",
        "id": 233146632,
        "sender_full_name": "bjorn3",
        "timestamp": 1617608955
    },
    {
        "content": "<p>Are both issues \"open\"? Or has one approach supplanted the other?</p>",
        "id": 233146812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617609144
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/48556\">#48556</a> has been stabilized for x86. The <code>extern \"platform-intrinsic\"</code> from <a href=\"https://github.com/rust-lang/rust/issues/27731\">#27731</a> is used internally by <code>core::arch</code> and will be used by <a href=\"https://github.com/rust-lang/stdsimd\">https://github.com/rust-lang/stdsimd</a>, which is the new plan for portable SIMD.</p>",
        "id": 233146918,
        "sender_full_name": "bjorn3",
        "timestamp": 1617609272
    }
]