[
    {
        "content": "<p>Is it possible to use iterator adapters / chaining to set values in a pre-allocated mutable reference?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">populate</span><span class=\"p\">(</span><span class=\"n\">buf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">return</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cm\">/* Imperative version that works</span>\n<span class=\"cm\">    for i in 0..5 {</span>\n<span class=\"cm\">        buf[i] = 2*i as i32;</span>\n<span class=\"cm\">    }</span>\n<span class=\"cm\">    */</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Is something like this possible?</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241092658,
        "sender_full_name": "miles",
        "timestamp": 1622593860
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">populate</span><span class=\"p\">(</span><span class=\"n\">buf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">).</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>ought to work.</p>",
        "id": 241094595,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1622595527
    },
    {
        "content": "<p><code>slice::fill_with</code> may be nicer?</p>",
        "id": 241096350,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622597247
    },
    {
        "content": "<p>I'm seeing different errors when trying to compile the <code>fill_with</code> version locally:</p>\n<div class=\"codehilite\"><pre><span></span><code>no method named `fill_with` found for mutable reference `&amp;mut [i32]` in the current scope\n</code></pre></div>\n<p>This is even after adding <code>use std::slice;</code>. Am I missing something else in order for <code>fill_with</code> to be available locally?</p>\n<p>The playgound version gives a more helpful <code>Option</code> mismatch error. I'm guessing the playground has some hidden includes / <code>use</code> statements.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">populate</span><span class=\"p\">(</span><span class=\"n\">buf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">fill_with</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p>Also wondering if there's a good way to cancel filling upon receiving the first <code>None</code> (assuming we don't know how many elements will be added until running the closure).</p>",
        "id": 241097851,
        "sender_full_name": "miles",
        "timestamp": 1622598843
    },
    {
        "content": "<p>I would do something like <code>buf.iter_mut().enumerate().take(5).for_each(|(x, p)| *p = 2*x)</code></p>",
        "id": 241097946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622598989
    },
    {
        "content": "<p>You can use <code>try_for_each</code> or an actual for loop if you want cancellation</p>",
        "id": 241097973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622599029
    },
    {
        "content": "<p>What's your rust compiler version? <code>slice::fill_with</code> has been added in 1.50 as an unstable methods and has been stabilized in 1.51. If you have an older compiler it won't work</p>",
        "id": 241295207,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1622656668
    }
]