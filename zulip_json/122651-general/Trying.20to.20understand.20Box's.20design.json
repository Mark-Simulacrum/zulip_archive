[
    {
        "content": "<p>There are a few things in Box that I never quite understood, if anyone wants to give me code examples of why they are necessary i'd love that :)<br>\n(I read the nomicon on Drop check and PhantomData a bunch of time, the latter i've used myself a lot in lifetimes contexts)</p>\n<ol>\n<li>The <code>box</code> keyword, why is that needed?</li>\n<li>The <code>owned_box</code> lang item, why is that needed?</li>\n<li>The <code>#[may_dangle]</code> attribute on Drop<br>\n4 . Why  the <code>PhantomData&lt;T&gt;</code> in <code>Unique</code> is needed</li>\n</ol>\n<p>Here's a minimal example of a <code>Box</code> impl without all of these that seems to be working, so I'm looking for examples on what doesn't work and which of the 4 questions solve those examples.<br>\n<a href=\"https://play.rust-lang.org/?gist=d308dda3358e13151a32e551661ad58b\">https://play.rust-lang.org/?gist=d308dda3358e13151a32e551661ad58b</a></p>\n<p>Thanks in advance :)</p>",
        "id": 210977752,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600853012
    },
    {
        "content": "<p><a href=\"https://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/\">https://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/</a></p>",
        "id": 210978230,
        "sender_full_name": "Laurențiu",
        "timestamp": 1600853306
    },
    {
        "content": "<p>Specifically,</p>\n<blockquote>\n<p>You could move out of deref with <code>Box&lt;T&gt;</code></p>\n</blockquote>",
        "id": 210978309,
        "sender_full_name": "Laurențiu",
        "timestamp": 1600853360
    },
    {
        "content": "<p>we also add special attributes for box during codegen (which is why it has to be a lang item)</p>",
        "id": 210978344,
        "sender_full_name": "lcnr",
        "timestamp": 1600853387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20Box's.20design/near/210978309\">said</a>:</p>\n<blockquote>\n<p>Specifically,</p>\n<blockquote>\n<p>You could move out of deref with <code>Box&lt;T&gt;</code></p>\n</blockquote>\n</blockquote>\n<p>Nice! I assume this is done via the lang item <code>owned_box</code>? now 3 more questions to go <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 210978683,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600853568
    },
    {
        "content": "<p>The <code>box</code> keyword was to guarantee that the value would be directly written to the allocated memory without first going through the stack (placement in). This ended up not working out, but the <code>box</code> keyword was never removed for <code>Box&lt;T&gt;</code>. It used to also allow other types to be constructed, but that is no longer the case.</p>",
        "id": 210980067,
        "sender_full_name": "bjorn3",
        "timestamp": 1600854382
    },
    {
        "content": "<blockquote>\n<ol start=\"3\">\n<li>The #[may_dangle] attribute on Drop</li>\n</ol>\n</blockquote>\n<p>This makes it possible to write code like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><code>a</code> and <code>b</code> don't strictly outlive each other according to dropck. This means that <code>b</code> could be dropped before <code>a</code>. Normally that would make it possible to access a dangling pointer from the <code>Drop</code> impl, but <code>#[may_dangle]</code> says that you will not do so.</p>",
        "id": 210980380,
        "sender_full_name": "bjorn3",
        "timestamp": 1600854567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20Box's.20design/near/210980067\">said</a>:</p>\n<blockquote>\n<p>The <code>box</code> keyword was to guarantee that the value would be directly written to the allocated memory without first going through the stack (placement in). This ended up not working out, but the <code>box</code> keyword was never removed for <code>Box&lt;T&gt;</code>. It used to also allow other types to be constructed, but that is no longer the case.</p>\n</blockquote>\n<p>It would be interesting to understand why it didn't worked out, but as of now it doesn't achieve anything, right?</p>",
        "id": 210980747,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600854768
    },
    {
        "content": "<blockquote>\n<p>4 . Why the PhantomData&lt;T&gt; in Unique is needed</p>\n</blockquote>\n<p>This is necessary for the right variance. For example <code>&amp;'a T</code> is covariant in <code>'a</code>meaning that it is possible to go from <code>&amp;'a T</code> to <code>&amp;'b T</code> where <code>'a: 'b</code>. <code>fn(&amp;'a T)</code> is contravariant in <code>'a</code> meaning that it is possible to go from <code>fn(&amp;'a T)</code> to <code>fn(&amp;'b T)</code> where <code>'b: 'a</code>. <code>&amp;'_ mut T</code> is invariant in <code>T</code> meaning that it is not possible to change the lifetimes in <code>T</code>. Otherwise it would be possible to store a <code>T</code> that lives shorter than required in <code>&amp;'_ mut T</code>.</p>",
        "id": 210980749,
        "sender_full_name": "bjorn3",
        "timestamp": 1600854769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20Box's.20design/near/210980747\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20Box's.20design/near/210980067\">said</a>:</p>\n<blockquote>\n<p>The <code>box</code> keyword was to guarantee that the value would be directly written to the allocated memory without first going through the stack (placement in). This ended up not working out, but the <code>box</code> keyword was never removed for <code>Box&lt;T&gt;</code>. It used to also allow other types to be constructed, but that is no longer the case.</p>\n</blockquote>\n<p>It would be interesting to understand why it didn't worked out, but as of now it doesn't achieve anything, right?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/49733\">https://github.com/rust-lang/rust/issues/49733</a> is the current tracking issue for <code>box expr</code>. (<code>box pat</code> has a different tracking issue) <a href=\"https://github.com/rust-lang/rust/pull/48333\">https://github.com/rust-lang/rust/pull/48333</a> has some info about why it didn't work out.</p>",
        "id": 210980991,
        "sender_full_name": "bjorn3",
        "timestamp": 1600854929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20Box's.20design/near/210980380\">said</a>:</p>\n<blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>The #[may_dangle] attribute on Drop</li>\n</ol>\n</blockquote>\n<p>This makes it possible to write code like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><code>a</code> and <code>b</code> don't strictly outlive each other according to dropck. This means that <code>b</code> could be dropped before <code>a</code>. Normally that would make it possible to access a dangling pointer from the <code>Drop</code> impl, but <code>#[may_dangle]</code> says that you will not do so.</p>\n</blockquote>\n<p>Ha, can't dropck know that <code>b</code> should be dropped only after <code>a</code>? or can this problem also arise with <code>b</code> allocated on top of a or something like that?</p>",
        "id": 210982269,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600855740
    },
    {
        "content": "<p><code>a</code> and <code>b</code> have the same lifetime lexically. The old borrowck also considered them to have exactly the same lifetime.</p>",
        "id": 210982497,
        "sender_full_name": "bjorn3",
        "timestamp": 1600855870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20Box's.20design/near/210980749\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>4 . Why the PhantomData&lt;T&gt; in Unique is needed</p>\n</blockquote>\n<p>This is necessary for the right variance. For example <code>&amp;'a T</code> is covariant in <code>'a</code>meaning that it is possible to go from <code>&amp;'a T</code> to <code>&amp;'b T</code> where <code>'a: 'b</code>. <code>fn(&amp;'a T)</code> is contravariant in <code>'a</code> meaning that it is possible to go from <code>fn(&amp;'a T)</code> to <code>fn(&amp;'b T)</code> where <code>'b: 'a</code>. <code>&amp;'_ mut T</code> is invariant in <code>T</code> meaning that it is not possible to change the lifetimes in <code>T</code>. Otherwise it would be possible to store a <code>T</code> that lives shorter than required in <code>&amp;'_ mut T</code>.</p>\n</blockquote>\n<p>I keep reading the variance stuff, and I understand them on &amp;mut T and &amp;T, on lifetimes, I don't quite understand on <code>fn(T) -&gt; U</code> and on Box/Cell etc, like what can <code>Box</code> do that <code>MyBox</code> can't and adding <code>PhantomData&lt;T&gt;</code> will solve?</p>\n<p>Thank you for the detailed answers :)</p>",
        "id": 210982654,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600855955
    },
    {
        "content": "<p>The <code>PhantomData&lt;T&gt;</code> is necessary to tell rustc which of the variances (co-, contra-, invariant) it should use for the type parameter.</p>",
        "id": 210982931,
        "sender_full_name": "bjorn3",
        "timestamp": 1600856136
    },
    {
        "content": "<p><a href=\"https://gist.github.com/bjorn3/df27609cd6193a2545c5460027afa0bd\">https://gist.github.com/bjorn3/df27609cd6193a2545c5460027afa0bd</a></p>",
        "id": 210983454,
        "sender_full_name": "bjorn3",
        "timestamp": 1600856430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20Box's.20design/near/210983454\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/bjorn3/df27609cd6193a2545c5460027afa0bd\">https://gist.github.com/bjorn3/df27609cd6193a2545c5460027afa0bd</a></p>\n</blockquote>\n<p>Did you post this here by mistake?</p>",
        "id": 210985478,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600857935
    },
    {
        "content": "<p>Yeah, should have been in <a class=\"stream\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance\">#t-compiler/performance</a>.</p>",
        "id": 210986424,
        "sender_full_name": "bjorn3",
        "timestamp": 1600858800
    },
    {
        "content": "<blockquote>\n<ol start=\"4\">\n<li>Why the <code>PhantomData&lt;T&gt;</code> in <code>Unique&lt;T&gt;</code> is needed<br>\nI've given a very detailed explanation about that here: <a href=\"https://users.rust-lang.org/t/phantomdata-and-dropck-confusion/26624/2\">https://users.rust-lang.org/t/phantomdata-and-dropck-confusion/26624/2</a></li>\n</ol>\n</blockquote>",
        "id": 211007419,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600869802
    },
    {
        "content": "<p>Is there any non-legacy reason why Box uses Unique instead of <code>NonNull</code> + <code>PhantomData</code> + <code>Send</code>/<code>Sync</code> implementations?</p>",
        "id": 211008954,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1600870340
    },
    {
        "content": "<p>I don't think so. Even the unstable message for <code>Unique</code> says \"use <code>NonNull</code> instead and consider <code>PhantomData&lt;T&gt;</code> (if you also use <code>#[may_dangle]</code>), <code>Send</code>, and/or <code>Sync</code>\".</p>",
        "id": 211009526,
        "sender_full_name": "bjorn3",
        "timestamp": 1600870563
    }
]