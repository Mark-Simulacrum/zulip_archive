[
    {
        "content": "<p>It seems like adding <code>#[repr(C)]</code> can make huge impact on codegen in places that seem like the result should be the same?<br>\nThe code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">//#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">conv</span><span class=\"p\">(</span><span class=\"n\">msgs</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Wrapper</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">msgs</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Wrapper</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Godbolt: <a href=\"https://godbolt.org/z/d69aaK3b9\">https://godbolt.org/z/d69aaK3b9</a><br>\nif you uncomment the repr(c) you'll see the assembly gets much bigger.</p>",
        "id": 245053355,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625584561
    },
    {
        "content": "<p>If you use <code>#[repr(transparent)]</code> you get the same assembly as without the repr attribute</p>",
        "id": 245053777,
        "sender_full_name": "marmeladema",
        "timestamp": 1625584703
    },
    {
        "content": "<p>Another related find is the codegen of this compared to the one above:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">conv</span><span class=\"p\">(</span><span class=\"n\">msgs</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Wrapper</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">msgs</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">m</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://godbolt.org/z/Ts9qq88z4\">https://godbolt.org/z/Ts9qq88z4</a></p>\n<p>Credit: <span class=\"user-mention\" data-user-id=\"219793\">@joey</span>  in IRC</p>",
        "id": 245053856,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625584738
    },
    {
        "content": "<p>This is the more interesting one ^</p>",
        "id": 245054066,
        "sender_full_name": "joey",
        "timestamp": 1625584812
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/jMe7vxcnn\">https://godbolt.org/z/jMe7vxcnn</a> comparing one that gets optimised, and another that doesnt</p>",
        "id": 245054190,
        "sender_full_name": "joey",
        "timestamp": 1625584864
    },
    {
        "content": "<p>It seems lik also the LLVM IR is very different (both with a closure and with <code>core::convert::identity</code>)</p>",
        "id": 245054416,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625584950
    },
    {
        "content": "<p>C ABI often treats \"struct with single int field\" differently from \"single int\"</p>",
        "id": 245055173,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625585277
    },
    {
        "content": "<p>(I think the topic was a bit of a misdirection, the real issue seems to be the jME7.. link I pasted)</p>",
        "id": 245055377,
        "sender_full_name": "joey",
        "timestamp": 1625585340
    },
    {
        "content": "<p>as soon as the layout of <code>usize</code> and <code>Wrapper</code> differs, the in-place collect optimization will be impossible</p>",
        "id": 245055385,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625585342
    },
    {
        "content": "<p>hmm, though I wouldn't expect this to happen for x86_64</p>",
        "id": 245055497,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625585394
    },
    {
        "content": "<p>look at <a href=\"https://godbolt.org/z/jMe7vxcnn\">https://godbolt.org/z/jMe7vxcnn</a> theyre the same type and it defeats the in-place opt!</p>",
        "id": 245055707,
        "sender_full_name": "joey",
        "timestamp": 1625585467
    },
    {
        "content": "<p>Technically the inplace optimization is still there in all these examples, what's going wrong is the elision of loops with empty bodies. Look for example at .LBB0_7 in the last example you linked</p>",
        "id": 245057197,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1625586106
    },
    {
        "content": "<p>That's <a href=\"https://github.com/rust-lang/rust/issues/79308\">#79308</a></p>",
        "id": 245060306,
        "sender_full_name": "The 8472",
        "timestamp": 1625587229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> heh cool, nearly exact the same test case</p>",
        "id": 245060547,
        "sender_full_name": "joey",
        "timestamp": 1625587307
    },
    {
        "content": "<p>I tried adding an additional optimization to eliminate that loop based on <code>TrustedLen</code> (an existing optimization requires <code>TrustedRandomAccess</code> which needs <code>T: Copy</code>) but it hasn't been reliable. When I do microbenchmarks it optimizes away, when I write a codegen tests the loop is suddenly back. :(<br>\nSo, if you derive Copy for your <code>Wrapper</code> it might work for now.</p>",
        "id": 245060991,
        "sender_full_name": "The 8472",
        "timestamp": 1625587470
    },
    {
        "content": "<p>Hrm, no, doesn't look like it, interesting.</p>",
        "id": 245061292,
        "sender_full_name": "The 8472",
        "timestamp": 1625587598
    },
    {
        "content": "<p>Adding <code>Copy</code> works for the plain wrapper, but it doesn't for the <code>repr(C)</code> one.</p>",
        "id": 245063147,
        "sender_full_name": "The 8472",
        "timestamp": 1625588408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> indeed this is why the C++ people are regretting their choices around <code>unique_ptr</code>... it's a single-field \"repr(C)\" struct and as such has a lot of overhead compared to just passing a pointer. and they can't change it as that would be ABI-breaking...</p>",
        "id": 245547179,
        "sender_full_name": "RalfJ",
        "timestamp": 1625919625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/does.20Repr.28C.29.20on.20a.20single.20field.20struct.20hurts.20optimizations.3F/near/245547179\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> indeed this is why the C++ people are regretting their choices around <code>unique_ptr</code>... it's a single-field \"repr(C)\" struct and as such has a lot of overhead compared to just passing a pointer. and they can't change it as that would be ABI-breaking...</p>\n</blockquote>\n<p>For <code>unique_ptr</code>, isn't that only with a stateful allocator (well, deleter), since tuples/compressed pairs use empty-base optimization? Which, I'm not really sure there is an alternative.</p>",
        "id": 245566260,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625944195
    },
    {
        "content": "<p>It can't be passed in a register is the issue, since it's non-trivial for the purposes of calls.</p>",
        "id": 245566537,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625944574
    },
    {
        "content": "<p><code>unique_ptr</code> <em>should</em> be like <code>Box</code> -- but it isnt: in Rust terms, <code>Box</code> is <code>repr(transparent)</code>; <code>unique_ptr</code> is <code>repr(C)</code>.<br>\nthe difference (as was said above) is whether the pointer is passed via register or via stack.</p>",
        "id": 245575446,
        "sender_full_name": "RalfJ",
        "timestamp": 1625956758
    },
    {
        "content": "<p>The deleter makes that fun: Not only does <code>unique_ptr</code> allow choosing a deleter, you could also customize the behaviour of <code>std::default_delete</code>, where passing in a register would be invalid. Of course, that could be done by special-casing, but it would be a lot narrower of a special case than <code>Box&lt;T,Global&gt;</code>, so one could argue whether that special case is worth it.</p>",
        "id": 245575896,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625957515
    },
    {
        "content": "<p>Ah.</p>",
        "id": 245587384,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625977728
    }
]