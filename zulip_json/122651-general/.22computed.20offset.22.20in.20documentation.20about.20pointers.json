[
    {
        "content": "<p>In the <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.add\">rustdocs</a>, several pointer methods (<code>ptr::add</code>, <code>ptr::offset</code>, etc) have the safety invariant:</p>\n<blockquote>\n<ul>\n<li>The computed offset, in bytes, cannot overflow an isize.</li>\n<li>The offset being in bounds cannot rely on \"wrapping around\" the address space. That is, the infinite-precision sum must fit in a usize.</li>\n</ul>\n</blockquote>\n<p>What exactly is meant with \"<em>computed offset</em>\" in this case? Is this <code>base + offset</code> or just <code>offset</code> itself? The adjective \"computed\" here suggests the former to my non-native English brain, but then the next bullet suggests the latter. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 235229787,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618858242
    },
    {
        "content": "<p>i think the offset from the base. the problem is that rust uses usize for these things but llvm uses isize internally, so <code>isize::MAX as usize + 1</code> is a usize you can pass in to <code>add</code>, but it  does the wrong thing on the llvm side</p>",
        "id": 235230500,
        "sender_full_name": "Lokathor",
        "timestamp": 1618858555
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> ! In that case, shouldn't the rustdocs say:</p>\n<blockquote>\n<ul>\n<li>The offset being in bounds cannot rely on \"wrapping around\" the address space. That is, the infinite-precision sum must fit in <del>a usize</del> <strong>an isize</strong>.</li>\n</ul>\n</blockquote>\n<p>?</p>",
        "id": 235232904,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618859454
    },
    {
        "content": "<p>The sum need not be an isize, but the addend must be</p>",
        "id": 235233001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618859494
    },
    {
        "content": "<p><code>offset &lt;= isize::MAX</code>, <code>base + offset &lt;= usize::MAX</code></p>",
        "id": 235233068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618859523
    },
    {
        "content": "<p>in infinite precision</p>",
        "id": 235233110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618859528
    },
    {
        "content": "<p>honestly it might be better for the docs to just say this in (pseudo)code</p>",
        "id": 235233195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618859570
    },
    {
        "content": "<p>That indeed sounds more clear <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 235233288,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618859630
    },
    {
        "content": "<p>yeah just writing some assert expressions in to the docs is probably a better way to do this</p>",
        "id": 235233302,
        "sender_full_name": "Lokathor",
        "timestamp": 1618859635
    },
    {
        "content": "<p>although <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is always quick to correct me whenever I use <code>+</code> on pointers or suggest that the operation is just adding numbers</p>",
        "id": 235233422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618859668
    },
    {
        "content": "<p>because provenance</p>",
        "id": 235233442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618859679
    },
    {
        "content": "<p>I tried my hand at the <a href=\"https://llvm.org/docs/GetElementPtr.html#what-happens-if-a-gep-computation-overflows\">LLVM manual</a> which has this to say:</p>\n<blockquote>\n<p>This means that GEPs have an asymmetric relation between the pointer base (which is treated as unsigned) and the offset applied to it (which is treated as signed). The result of the additions within the offset calculation cannot have signed overflow, but when applied to the base pointer, there can be signed overflow.</p>\n</blockquote>",
        "id": 235234314,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860064
    },
    {
        "content": "<p>I'm still trying to <em>wrap</em> my head around that (pun intended)</p>",
        "id": 235234507,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860149
    },
    {
        "content": "<p>Basically nothing is allowed to wrap in the computation, but the offsets are signed integers on LLVM side and usize on rust side</p>",
        "id": 235234626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860216
    },
    {
        "content": "<p>I think if you use <code>offset</code> it's actually an <code>isize</code></p>",
        "id": 235234681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860236
    },
    {
        "content": "<p>The part where it can have signed overflow and can't have  unsigned overflow is a bit confusing, I wonder which of the two it picks in the case of <code>ptr::offset</code>.</p>",
        "id": 235234685,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860237
    },
    {
        "content": "<p>That's correct, and <code>ptr::add</code> calls <code>ptr::offset</code> internally</p>",
        "id": 235234775,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860273
    },
    {
        "content": "<p>There is no overflow allowed, but the interpretation of \"overflow\" changes depending on which part of the computation you are talking about</p>",
        "id": 235234817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860295
    },
    {
        "content": "<p>the signed parts don't allow signed overflow and the unsigned part (adding to the base pointer) doesn't allow unsigned overflow</p>",
        "id": 235234872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860325
    },
    {
        "content": "<p>Is the signature of the computation <code>ptr = base + offset</code> then <code>usize = usize + isize</code> or <code>isize = usize + isize</code>?</p>",
        "id": 235234908,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860345
    },
    {
        "content": "<p><code>usize = usize + isize</code></p>",
        "id": 235234922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860358
    },
    {
        "content": "<p>Ah!</p>",
        "id": 235234970,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860367
    },
    {
        "content": "<p>or for full GEPi <code>usize = usize + isize * const + ... + isize</code></p>",
        "id": 235235024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860402
    },
    {
        "content": "<p>everything is isize except the base pointer</p>",
        "id": 235235071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860435
    },
    {
        "content": "<p>and the multiplication by constants (the stride) is also not allowed to overflow</p>",
        "id": 235235116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860462
    },
    {
        "content": "<p>Very interesting. Then indeed all cases where <code>isize::MIN &lt;= offset &lt;= isize::MAX</code> then <code>ptr::offset</code>(and therefore also <code>ptr::add</code>) are legal, as long as <code>base + offset &lt;= usize::MAX</code>.</p>",
        "id": 235235215,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860496
    },
    {
        "content": "<p>You don't want underflow either</p>",
        "id": 235235287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860537
    },
    {
        "content": "<p>(imagine a case where <code>base = usize::MAX - 1</code> and <code>offset &gt; 1</code>, this is illegal)</p>",
        "id": 235235292,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860539
    },
    {
        "content": "<p>if <code>offset &lt; -base</code> you are in trouble</p>",
        "id": 235235326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860554
    },
    {
        "content": "<p>Good one</p>",
        "id": 235235359,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860569
    },
    {
        "content": "<p>In practice I think neither of these is a problem because the computation has to be <em>inbounds</em> anyway (meaning entirely within an allocation)</p>",
        "id": 235235425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860603
    },
    {
        "content": "<p>which is far more restrictive</p>",
        "id": 235235486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618860616
    },
    {
        "content": "<p>Indeed, that also assures there can be no overflow/underflow of an <code>usize</code></p>",
        "id": 235235561,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860645
    },
    {
        "content": "<p>This was very enlightening and cleared it up entirely for me, thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 235235696,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618860717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/.22computed.20offset.22.20in.20documentation.20about.20pointers/near/235235425\">said</a>:</p>\n<blockquote>\n<p>In practice I think neither of these is a problem because the computation has to be <em>inbounds</em> anyway (meaning entirely within an allocation)<br>\nwhich is far more restrictive</p>\n</blockquote>\n<p>Actually, might this be a counter example to this? Imagine a single allocation the size of <code>usize::MAX</code> (that's unlikely I know, but for the sake of science <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>  this goes for any allocation bigger than <code>isize::MAX</code> ) Then if you had a pointer to the start of that allocation (either <code>null</code> or at address <code>1</code>), then you could still overflow the offset (an <code>isize</code>) without going out of bounds of the allocation. Doesn't that mean the \"inbounds\" requirement is not more strict than the overflow requirement?</p>",
        "id": 235236564,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618861086
    },
    {
        "content": "<p>Or is there a safety net somewhere that doesn't let you allocate anything over <code>isize::MAX</code> in size?</p>",
        "id": 235236640,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618861131
    },
    {
        "content": "<p>(including <code>mmap</code>)</p>",
        "id": 235236653,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618861144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400735\">Pointerbender</span> <a href=\"#narrow/stream/122651-general/topic/.22computed.20offset.22.20in.20documentation.20about.20pointers/near/235236640\">said</a>:</p>\n<blockquote>\n<p>Or is there a safety net somewhere that doesn't let you allocate anything over <code>isize::MAX</code> in size?</p>\n</blockquote>\n<p>Yeah, basically.  See the conversation in <a href=\"https://github.com/rust-lang/rust/issues/83996#issuecomment-817189443\">https://github.com/rust-lang/rust/issues/83996#issuecomment-817189443</a> -- you're only allowed to make \"allocated objects\" for which the <code>offset</code> rules hold.  That's why <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html#safety\">from_raw_parts</a> restricts the maximum size of a slice, for example.</p>",
        "id": 235241256,
        "sender_full_name": "scottmcm",
        "timestamp": 1618863112
    },
    {
        "content": "<p>Nice!</p>",
        "id": 235241982,
        "sender_full_name": "Pointerbender",
        "timestamp": 1618863387
    }
]