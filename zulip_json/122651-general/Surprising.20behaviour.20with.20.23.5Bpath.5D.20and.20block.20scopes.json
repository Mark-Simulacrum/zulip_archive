[
    {
        "content": "<p>I managed to find a (at least to me) surprising behavior when combining modules, block scopes and the <code>#[path = \"..\"]</code> attribute.</p>\n<p>It involves two files so no playground link but the gist is the following:</p>\n<p>Given a <code>lib.rs</code> or <code>main.rs</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">outline</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With <code>outline.rs</code> defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">inline</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[path = </span><span class=\"s\">\"pathed.rs\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mod</span> <span class=\"nn\">pathed</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>rust attempts to load <code>src/inline/pathed.rs</code> ( no <code>outline</code> in the path), which makes sense given that the module path doesn't leak outside the const's scope.</p>\n<p>But with <code>outline.rs</code> defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">inline</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mod</span> <span class=\"nn\">inline</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[path = </span><span class=\"s\">\"pathed.rs\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">mod</span> <span class=\"nn\">pathed</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>rust suddently attempts to load <code>src/outline/inline/inline/pathed.rs</code>, though I would expect it to try to load <code>src/inline/inline/pathed.rs</code> instead. Note how having the const item inside of an inline module brings back the source files module into the path.</p>\n<p>Is this expected and noted down somewhere? This looks like some rather inconsistent behavior making it sound like a bug to me.<br>\n(Note that I am not attempting to use this mess in a code base, I was just trying to find the limits of rust's module system <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>)</p>",
        "id": 274989107,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1647012075
    },
    {
        "content": "<p>I think the answer is that it is complicated.  When <code>#[path]</code> is used inside an inline module, it changes the behavior to include the module name (and in the inline names). And to make that more complicated, it depends on if it is a <code>mod.rs</code> file or a non-mod-rs.</p>\n<p>What is interesting in your example is that it includes anonymous modules.  That does seem to be a bit surprising that they change the behavior that way.  I think one way to look at it is that the anonymous module is behaving similarly to a <code>mod.rs</code>, where it does not include the path of the module it is located in.</p>\n<p>There is some documentation in the <a href=\"https://doc.rust-lang.org/nightly/reference/items/modules.html#the-path-attribute\">path attribute docs</a>, but it does not discuss anonymous modules at all.  It might be good to extend that.</p>\n<p>In general, I wish modules weren't allowed inside blocks.</p>",
        "id": 274993065,
        "sender_full_name": "Eric Huss",
        "timestamp": 1647014111
    },
    {
        "content": "<p>Ye the reference is what I used to source most of my information from, but it didn't state anything about how all of this works inside items with bodies.</p>\n<p>Just wanted to bring it up in case this (my second snippet that is) sounds like a bug, which it at least does for me.</p>",
        "id": 274994482,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1647014629
    }
]