[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459607\">infrandomness</span> has marked this topic as resolved.</p>",
        "id": 277185537,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648664079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I am willing to tackle the step :<br>\n« reduce the noisiness (it's reported multiple times on different parts of an expression, but should only trigger on the innermost/first one) » and all of the other ones as well</p>",
        "id": 277517296,
        "sender_full_name": "infrandomness",
        "timestamp": 1648890430
    },
    {
        "content": "<p>Cool!. I don't quite know yet what the best way tackle it is, but one way that could work is to add a field to MirNeighborCollector that is a <code>Vec&lt;Span&gt;</code> and check before emitting whether we've seen a span before that overlaps with the new one. When we emit, we add the span to the vec</p>",
        "id": 277523656,
        "sender_full_name": "oli",
        "timestamp": 1648898633
    },
    {
        "content": "<p>Shouldn't that be a <code>HashSet</code> or <code>BTreeSet</code>? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 277525453,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648900900
    },
    {
        "content": "<p>What is the difference between these 3?</p>",
        "id": 277543401,
        "sender_full_name": "infrandomness",
        "timestamp": 1648923108
    },
    {
        "content": "<p>HashSet and BTreeSet mostly differ in performance characteristics and BTreeSet has an iterator method returning values in the order of the <code>PartialOrd</code> impl on the element type. For HashSet iterating results in a random order. Both HashSet and BTreeSet don't allow duplicate elements and allow checking if an element is present in logarithmic time, while Vec allows duplicates and requires checking if an element is present in linear time which is slower.</p>",
        "id": 277544017,
        "sender_full_name": "bjorn3",
        "timestamp": 1648923871
    },
    {
        "content": "<p>A BTreeSet should allow finding overlapping/containing spans faster than the other two.</p>",
        "id": 277548131,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648929056
    },
    {
        "content": "<p>So I've started working on this and I added a field to the <code>MirNeighborCollector</code>, but now all of the instances of that struct ask for the argument to be passed</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Index</span>: <span class=\"nc\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_monomorphize</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collector</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">IDEA</span><span class=\"w\"> </span><span class=\"n\">additional</span><span class=\"w\"> </span><span class=\"n\">info</span>:\n<span class=\"nc\">Subsystem</span>: <span class=\"nc\">com</span><span class=\"p\">.</span><span class=\"n\">intellij</span><span class=\"p\">.</span><span class=\"n\">openapi</span><span class=\"p\">.</span><span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"k\">impl</span><span class=\"p\">.</span><span class=\"n\">patch</span><span class=\"p\">.</span><span class=\"n\">CharsetEP</span><span class=\"w\"></span>\n<span class=\"o\">&lt;+&gt;</span><span class=\"n\">UTF</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"o\">===================================================================</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_monomorphize</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collector</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_monomorphize</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collector</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_monomorphize</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collector</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">revision</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">ad4eb207b369017f5140918b5e4b0d3650b46b0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_monomorphize</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collector</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"w\"> </span><span class=\"mi\">1649066818484</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">178</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">178</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"sd\">//! this is not implemented however: a mono item will be produced</span>\n<span class=\"w\"> </span><span class=\"sd\">//! regardless of whether it is actually needed or not.</span>\n\n<span class=\"o\">+</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">BTreeSet</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_data_structures</span>::<span class=\"n\">fx</span>::<span class=\"p\">{</span><span class=\"n\">FxHashMap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FxHashSet</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_data_structures</span>::<span class=\"n\">sync</span>::<span class=\"p\">{</span><span class=\"n\">par_iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MTLock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MTRef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ParallelIterator</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_hir</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">605</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">606</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">body</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mir</span>::<span class=\"n\">Body</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">output</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Spanned</span><span class=\"o\">&lt;</span><span class=\"n\">MonoItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">instance</span>: <span class=\"nc\">Instance</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">large_assignment_lint</span>: <span class=\"nc\">BTreeSet</span><span class=\"o\">&lt;</span><span class=\"n\">Span</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MirNeighborCollector</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1386</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1388</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">instance</span>: <span class=\"nc\">Instance</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">output</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Spanned</span><span class=\"o\">&lt;</span><span class=\"n\">MonoItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">large_assignment_lint</span>: <span class=\"nc\">BTreeSet</span><span class=\"o\">&lt;</span><span class=\"n\">Span</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"collect_neighbours: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">instance_mir</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">def</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0061</span><span class=\"p\">]</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">takes</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">supplied</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_monomorphize</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">collector</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">424</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">424</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"n\">collect_neighbours</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">neighbors</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"o\">^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"o\">---</span><span class=\"w\">  </span><span class=\"o\">--------</span><span class=\"w\">  </span><span class=\"o\">--------------</span><span class=\"w\"> </span><span class=\"n\">supplied</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the thing is, I don't know what to give to them, since the place I add elements to is in the function <code>visit_operand()</code></p>",
        "id": 277708918,
        "sender_full_name": "infrandomness",
        "timestamp": 1649066849
    },
    {
        "content": "<p>There's something I'm missing here, what I've done is so ugly</p>",
        "id": 277711196,
        "sender_full_name": "infrandomness",
        "timestamp": 1649068253
    },
    {
        "content": "<p>Just getting caught up on this; is it the intent of the design that this lint runs after optimizations? We have existing passes - NRVO and dest prop, the first of which is on by default - that eliminate these kinds of moves. This seems like it means we'd give different output on debug vs release mode, which feels not great</p>",
        "id": 277712387,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649068983
    },
    {
        "content": "<p>Does it even make sense to emit this lint on debug mode at all?</p>",
        "id": 277712413,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649069001
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I'll let oli answer that</p>",
        "id": 277712546,
        "sender_full_name": "infrandomness",
        "timestamp": 1649069079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jak{e,ob} Degen</span> <a href=\"#narrow/stream/122651-general/topic/.E2.9C.94.20https.3A.2F.2Fgithub.2Ecom.2Frust-lang.2Frust.2Fissues.2F83518/near/277712413\">said</a>:</p>\n<blockquote>\n<p>Does it even make sense to emit this lint on debug mode at all?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 277863459,
        "sender_full_name": "infrandomness",
        "timestamp": 1649158827
    },
    {
        "content": "<p>Hmm... is the effect of release-only mir opts that strong on generator size?</p>",
        "id": 277865352,
        "sender_full_name": "oli",
        "timestamp": 1649159745
    },
    {
        "content": "<p>Not running in debug mode seems a bit weird, but having different results depending on opts is also not great.</p>",
        "id": 277865540,
        "sender_full_name": "oli",
        "timestamp": 1649159814
    },
    {
        "content": "<p>This is not just generator size. Optimizations can entirely eliminate large assignments.</p>",
        "id": 277867980,
        "sender_full_name": "bjorn3",
        "timestamp": 1649160978
    },
    {
        "content": "<p>Speaking practically, I don't think \"release-only\" mir opts are really a thing. I looked through all the passes in rustc_transform and these are the only ones not gated on <code>-Zunsound-mir-opts</code> or <code>mir-opt-level &gt; 0</code>:</p>\n<ul>\n<li><code>const-goto</code>: mir-opt-level &gt;= 4</li>\n<li><code>deduplicate-blocks</code>: mir-opt-level &gt;= 4</li>\n<li><code>match-branches</code>: mir-opt-level &gt;= 3</li>\n<li><code>multiple-return-terminators</code>: mir-opt-level &gt;= 4</li>\n<li><code>normalize-array-len</code>: mir-opt-level &gt;= 4</li>\n<li><code>separate-const-switch</code>: mir-opt-level &gt;= 4</li>\n<li><code>unreachable-prop</code>: mir-opt-level &gt;= 4</li>\n</ul>\n<p>However, we only ever set <a href=\"https://github.com/rust-lang/rust/blob/634770c0a7f8598164ab825cfe419cc8b03c36e5/compiler/rustc_session/src/options.rs#L106\">mir-opt-level = 1 | 2</a>. So effectively, we don't have any mir opts that run on a release build and not a debug build.</p>",
        "id": 277882293,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1649167045
    },
    {
        "content": "<p>Yeah, I'm worried about the assignments going away, not shrinking. Wesley makes a good point though, which probably means this is more of a theoretical distinction than a practical one at this point - still, I feel that it might be worth it to have some kind of plan here for when that changes</p>",
        "id": 277914730,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649179648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jak{e,ob} Degen</span> <a href=\"#narrow/stream/122651-general/topic/.E2.9C.94.20https.3A.2F.2Fgithub.2Ecom.2Frust-lang.2Frust.2Fissues.2F83518/near/277914730\">said</a>:</p>\n<blockquote>\n<p>Yeah, I'm worried about the assignments going away, not shrinking. Wesley makes a good point though, which probably means this is more of a theoretical distinction than a practical one at this point - still, I feel that it might be worth it to have some kind of plan here for when that changes</p>\n</blockquote>\n<p>so what should I do ?</p>",
        "id": 278219408,
        "sender_full_name": "infrandomness",
        "timestamp": 1649362050
    }
]