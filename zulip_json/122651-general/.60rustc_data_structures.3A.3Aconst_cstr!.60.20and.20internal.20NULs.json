[
    {
        "content": "<p>The documentation of <code>rustc_data_structures::const_cstr!</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/macro.const_cstr.html\">says</a>:</p>\n<blockquote>\n<p>Note that macro only checks the string literal for internal NULs if debug-assertions are enabled in order to avoid runtime overhead in release builds.</p>\n</blockquote>\n<p>And looks like it indeed does not check for internal NULs in release builds: <a href=\"https://github.com/rust-lang/rust/blob/0e63af5da3400ace48a0345117980473fd21ad73/compiler/rustc_data_structures/src/const_cstr.rs#L24-L28\">https://github.com/rust-lang/rust/blob/0e63af5da3400ace48a0345117980473fd21ad73/compiler/rustc_data_structures/src/const_cstr.rs#L24-L28</a><br>\nHowever, the documentation of <code>std::ffi::CStr::from_bytes_with_nul_unchecked</code> <a href=\"https://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked\">says</a>:</p>\n<blockquote>\n<p>The provided slice <strong>must</strong> be nul-terminated and not contain any interior nul bytes.</p>\n</blockquote>\n<p>I think that means other <em>unsafe</em> code can assume the slice returned by <code>CStr::to_bytes</code> does not contain any <code>0</code>, but it seems using <code>const_cstr!</code> can violate this contract in release builds without any unsafe code. Does this mean using <code>const_cstr!</code> with such unsafe code and without <em>any other</em> unsafe code may cause UB (so it's unsound)?</p>",
        "id": 224655781,
        "sender_full_name": "hyd-dev",
        "timestamp": 1612115253
    },
    {
        "content": "<p>seems that way</p>",
        "id": 224656161,
        "sender_full_name": "Lokathor",
        "timestamp": 1612115748
    },
    {
        "content": "<p>This macro could also compute whether the string literal doesn't contain any nul bytes at compile-time(using const eval), that was already possible when the last commit was made. This shouldn't be expensive, because the macro is used very little in the entire GitHub organization.</p>",
        "id": 224657455,
        "sender_full_name": "matt1992",
        "timestamp": 1612117440
    },
    {
        "content": "<blockquote>\n<p>that was already possible when the last commit was made</p>\n</blockquote>\n<p>Sorry, I don't understand what \"last commit\" means. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>\n<blockquote>\n<p>compute whether the string literal doesn't contain any nul bytes at compile-time(using const eval)</p>\n</blockquote>\n<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">const_cstr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$s</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">CStr</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">STR_PLUS_NUL</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"cp\">$s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\0</span><span class=\"s\">\"</span><span class=\"p\">).</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">STR_PLUS_NUL</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">STR_PLUS_NUL</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">result</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">CStr</span>::<span class=\"n\">from_bytes_with_nul_unchecked</span><span class=\"p\">(</span><span class=\"n\">STR_PLUS_NUL</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224660158,
        "sender_full_name": "hyd-dev",
        "timestamp": 1612121071
    },
    {
        "content": "<p>I was thinking about keeping the current behavior of panicking at runtime, while computing where the inner NUL byte is at compile-time:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7c8878fa9ffc2ad5f72572ce5fad6008\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7c8878fa9ffc2ad5f72572ce5fad6008</a></p>\n<p>But if you think making it a compile-time error is a good idea, the out of bounds error can contain the index of the nul byte:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=099ec85f462edac56c23498724bd3187\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=099ec85f462edac56c23498724bd3187</a></p>",
        "id": 224662856,
        "sender_full_name": "matt1992",
        "timestamp": 1612124848
    },
    {
        "content": "<p>I've never understood the horrible fear of an internal null byte</p>",
        "id": 224664004,
        "sender_full_name": "Lokathor",
        "timestamp": 1612126364
    },
    {
        "content": "<p>It's a lot like utf8 for strs</p>",
        "id": 224666107,
        "sender_full_name": "nagisa",
        "timestamp": 1612129120
    },
    {
        "content": "<p>In that the implementations using or methods on cstr may assume that and optimize accordingly, potentially leading to library level ub</p>",
        "id": 224666123,
        "sender_full_name": "nagisa",
        "timestamp": 1612129177
    },
    {
        "content": "<p>In that respect rustc and the rust standard library may assume certain things that aren't necessarily something external code may do. Since it knows what the implementation of cstr is</p>",
        "id": 224666208,
        "sender_full_name": "nagisa",
        "timestamp": 1612129290
    },
    {
        "content": "<p>i very rarely use <code>std::ffi::{CStr,CString}</code> but yeah i often ignore the possibility of internal nuls in the stuff i use as an alternative since it's not UB (in my code, which isn't using those types), just probably a bug</p>",
        "id": 224675265,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612140626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/.60rustc_data_structures.3A.3Aconst_cstr!.60.20and.20internal.20NULs/near/224664004\">said</a>:</p>\n<blockquote>\n<p>I've never understood the horrible fear of an internal null byte</p>\n</blockquote>\n<p><code>Box&lt;CStr&gt;</code> is one example where you have to get this right</p>",
        "id": 224704503,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612173188
    },
    {
        "content": "<p><code>CStr</code> is currently an unsized type with the length as metadata. If it ever becomes an unsized type without metadata it would indeed be necessary to get it right to ensure that the right size is passed to the dealloc function.</p>",
        "id": 224704684,
        "sender_full_name": "bjorn3",
        "timestamp": 1612173292
    },
    {
        "content": "<p>Is this better?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">const_cstr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$s</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">CStr</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">STR_PLUS_NUL</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"cp\">$s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\0</span><span class=\"s\">\"</span><span class=\"p\">).</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">STR_PLUS_NUL</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">STR_PLUS_NUL</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">STR_PLUS_NUL</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">idx</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}];</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">CStr</span>::<span class=\"n\">from_bytes_with_nul_unchecked</span><span class=\"p\">(</span><span class=\"n\">STR_PLUS_NUL</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The error message could even be better if <code>const_panic</code> is used, but for some reasons, <code>#[allow_internal_unstable(const_panic)]</code> does not work, and I'm concerning that 2021-edition <code>panic!</code>/<code>assert!</code> will always use <code>format_args!</code>, which is const-unfriendly, so <code>core::panicking::panic()</code> may be needed there.</p>",
        "id": 224705629,
        "sender_full_name": "hyd-dev",
        "timestamp": 1612173918
    },
    {
        "content": "<p>Regarding the error message, you can define a helper <code>const</code>- generic struct, so that <code>const_cstr!(\"Hell\\0, W\\0rld!\")</code> yields:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>   = note: expected struct `CStrLen&lt;13_usize&gt;`\n              found struct `CStrLen&lt;4_usize&gt;`\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=322962250bae530f7816c4da902dce8a\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=322962250bae530f7816c4da902dce8a</a></p>",
        "id": 224706774,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612174598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> It would be better if the entire block to compute the index was a function that's defined outside the macro.<br>\nI don't get macro authors who decide to generate duplicated code in cases where they could easily use functions defined outside of the macro.</p>",
        "id": 224761320,
        "sender_full_name": "matt1992",
        "timestamp": 1612200457
    },
    {
        "content": "<blockquote>\n<p>where they could easily use functions defined outside of the macro.</p>\n</blockquote>\n<p>One reason is that the function then becomes part of a public API and thus subject to semver concerns.</p>",
        "id": 224762585,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612200995
    },
    {
        "content": "<blockquote>\n<p>It would be better if the entire block to compute the index was a function that's defined outside the macro.</p>\n</blockquote>\n<p>Actually I just didn't want to make things complicated here.</p>\n<blockquote>\n<p>One reason is that the function then becomes part of a public API and thus subject to semver concerns.</p>\n</blockquote>\n<p><code>rustc_data_structures</code> is always 0.0.0 and unstable, so a \"public\" API may be fine there, but I still want to prevent people from accidentally using it.<br>\nI also tried to solve this problem by using <code>decl_macro</code>,  but I got <code>error: type `fn() {rustc_data_structures::const_cstr::_dummy}` is private</code> (I defined a <code>_dummy()</code> function to test it).</p>",
        "id": 224769153,
        "sender_full_name": "hyd-dev",
        "timestamp": 1612203831
    },
    {
        "content": "<blockquote>\n<p>where they could easily use functions defined outside of the macro.</p>\n</blockquote>\n<p>I make the \"private\" items used by macros <code>#[doc(hidden)] pub</code>, and expect IDEs not to be broken enough to display them as public items.<br>\nThose macros don't allow copying the code from macro expansion and then updating the library, since I might have changed one of those <code>#[doc(hidden)] pub</code> items.<br>\nThe ideal solution would be allowing macro to access private items from the same module, the same way that you can access them in functions defined in the same module.</p>",
        "id": 224781935,
        "sender_full_name": "matt1992",
        "timestamp": 1612209400
    },
    {
        "content": "<blockquote>\n<p>The ideal solution would be allowing macro to access private items from the same module</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/lang-team/issues/59\">https://github.com/rust-lang/lang-team/issues/59</a></p>",
        "id": 224817570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612228631
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/rust-lang/rust/issues/82057\">#82057</a> is going to fix this.</p>",
        "id": 226246281,
        "sender_full_name": "hyd-dev",
        "timestamp": 1613224927
    }
]