[
    {
        "content": "<p>It's pretty rare that I have issues with the borrow checker, but when I do it can get really frustrating.  I have this example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=143802c4fcf4b43bb4d5676f660e6dde\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=143802c4fcf4b43bb4d5676f660e6dde</a></p>\n<p>The commented code works, but if I move the commented code to a function, the borrow checker complains.  No amount of rearranging things or adding lifetime annotations seems to help.  I feel like I'm missing something simple, can anyone spot it?</p>",
        "id": 224601290,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612035349
    },
    {
        "content": "<p>Changing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>works.</p>",
        "id": 224601498,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1612035612
    },
    {
        "content": "<p>hmm, it looks like what happened is that <code>map</code> is implicitly reborrowed in the call to f</p>",
        "id": 224601890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612036272
    },
    {
        "content": "<p>I wonder why that happens</p>",
        "id": 224601892,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612036276
    },
    {
        "content": "<p>Unfortunately I don't think I can make that change in the real code.  The real code involves a bunch of enum variants with values that should be borrowed (not copied).</p>",
        "id": 224602042,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612036473
    },
    {
        "content": "<p>I just used option in the example to simplify it.</p>",
        "id": 224602044,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612036482
    },
    {
        "content": "<p>ok I think I see why it's reborrowed: otherwise it can't be borrowed the second time because &amp;mut T is not Copy</p>",
        "id": 224602233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612036748
    },
    {
        "content": "<p>this is fixed with -Z polonius btw</p>",
        "id": 224602318,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612036836
    },
    {
        "content": "<p>I don't know if there's a way around this otherwise</p>",
        "id": 224602444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612037016
    },
    {
        "content": "<p>oh, that's interesting!  Thanks for taking a look <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> !  I'm not too familiar with polonius, I'll need to learn more.</p>\n<p>Here's a slightly closer example that uses an enum: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6d4b16a49a993f973d0781e6487a66b0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6d4b16a49a993f973d0781e6487a66b0</a></p>",
        "id": 224602519,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612037120
    },
    {
        "content": "<p>polonius is still a ways off, IIRC cargo wants to build on stable so it's probably not workable in the short-term</p>",
        "id": 224602538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612037154
    },
    {
        "content": "<p>yea.  This isn't for cargo, but I do prefer to stick with stable anyways.</p>",
        "id": 224602580,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612037179
    },
    {
        "content": "<p>This code is safe, but requires position-dependent borrows (or whatever that's called); the first borrow <code>f(map, x)</code> in <code>g</code> ends in one branch but extends out of the function in the other branch.</p>",
        "id": 224602791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612037482
    },
    {
        "content": "<p>This was apparently a feature that was removed from NLL before it made it into rust 2018, and is in polonius</p>",
        "id": 224602856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612037551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> Do you happen to know if there are any workarounds (even if they are ugly)?</p>",
        "id": 224602878,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612037588
    },
    {
        "content": "<p>If I were in your position I would just transmute my way around the problem</p>",
        "id": 224602884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612037592
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 224602890,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612037609
    },
    {
        "content": "<p>in this case, a <code>mem::transmute::&lt;&amp;Option&lt;String&gt;, &amp;Option&lt;String&gt;&gt;(v)</code> in the none branch should fix it</p>",
        "id": 224602906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612037632
    },
    {
        "content": "<p>you may want to add a test that it builds with -Z polonius without the transmute lol</p>",
        "id": 224602969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612037701
    },
    {
        "content": "<p>just in case someone changes it later</p>",
        "id": 224602973,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612037705
    },
    {
        "content": "<p>Would you be able to move the map into <code>g</code>? That would help.</p>",
        "id": 224603835,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1612038982
    },
    {
        "content": "<p>I don't think so.  The actual code is a file cache.  The function is something like <code>get_entry_from_cache(&amp;mut Cache, &amp;Path)</code>.  Just fetching an entry from a HashMap is simple.  The problem is that the function also needs to check if the entry is a specific kind (a \"redirect\"), and if it is, follow the redirect to the entry it points to.  That \"if entry is redirect then return get_entry_from_cache(cache, target)\" is what is tripping things up. </p>\n<p>Another option is to just duplicate the logic for that \"if is a redirect\" in a few places.  I think it's only about 3 lines of code, used only 2 or 3 times.</p>",
        "id": 224604004,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612039234
    },
    {
        "content": "<p>you could make it a macro maybe</p>",
        "id": 224604013,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612039258
    },
    {
        "content": "<p>yea, that would probably help.</p>\n<p>I was just hoping I was missing some lifetime annotation that would magically make it work.</p>",
        "id": 224604028,
        "sender_full_name": "Eric Huss",
        "timestamp": 1612039314
    },
    {
        "content": "<p>nah, this is just a bug in the borrow checker IMO</p>",
        "id": 224604091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612039398
    },
    {
        "content": "<p>Yeah, this is the textbook case of Polonius. The real interesting thing is that when the logic is inlined, the borrow-checker is less strict. That is, the current borrow checker is a bit too strict in its way of special-casing <em>return</em> values.<br>\nSo your three main choices would be:</p>\n<ul>\n<li>use a macro indeed, especially given that macros can be re-exported from a module;</li>\n<li>use <code>unsafe</code>, since it is a text-book case of a polonius-saved solution (if you want to go crazy, you can <code>cfg</code>-gate the usage of <code>unsafe</code> and transmute, and have / generate some test that runs <code>cargo check</code> with polonius (and its cfg) enabled.</li>\n<li>Use continuation-passing style (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1080f1ccecb25c62f1b7c8b1c8be3f6e\">Demo</a>), which can be made (more) ergonomic using <a href=\"https://docs.rs/with_locals\">https://docs.rs/with_locals</a> (but in this instance it feels inferior to directly using a macro).</li>\n</ul>",
        "id": 224705468,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612173804
    }
]