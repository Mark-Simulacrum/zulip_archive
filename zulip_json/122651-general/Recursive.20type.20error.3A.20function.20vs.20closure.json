[
    {
        "content": "<p>Basically if you try and compile something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">with_foo</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">local</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">local</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span><span class=\"w\"> </span>: <span class=\"nb\">Default</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span>::<span class=\"n\">rand</span>::<span class=\"n\">random</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">with_foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">with_foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=11d2236f9614b25fe19d7bd541632676\">It fails with</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: reached the recursion limit while instantiating `with_foo::&lt;(), [closure@src/main.rs:10:21: 10:35]&gt;`\n  --&gt; src/main.rs:10:9\n   |\n10 |         with_foo(a, |_: &amp;'_ ()| ());\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n\n<p>But if instead of <code>|_: &amp;'_ ()| ()</code> you feed it <code>{ fn f(_: &amp;'_ ()) {}; f }</code>, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b9f503ebdd6da67b1bf1d133beee1767\">it compiles fine</a>!!!</p>\n<p>My guess is that the type of the given closure, even if it does not capture any variable whatsoever, is somehow infected with the <code>F</code> parameter in scope, maybe? And that of course would lead to a recursive type</p>",
        "id": 212317736,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601912603
    },
    {
        "content": "<blockquote>\n<p>My guess is that the type of the given closure, even if it does not capture any variable whatsoever, is somehow infected with the F parameter in scope, maybe?</p>\n</blockquote>\n<p>That is correct. In fact this is one of the things polymorphization will help with.</p>",
        "id": 212328955,
        "sender_full_name": "bjorn3",
        "timestamp": 1601917781
    },
    {
        "content": "<p>That makes me worry about effectively making polymorphization mandatory part of the language spec, since it affects whether code compiles or not</p>",
        "id": 212329129,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601917864
    },
    {
        "content": "<p>Is there are a place where I can read about polymorphization [&amp; Rust]?</p>",
        "id": 212331083,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601918966
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"216091\" href=\"/#narrow/stream/216091-t-compiler.2Fwg-polymorphization\">#t-compiler/wg-polymorphization</a></p>",
        "id": 212331117,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601918983
    },
    {
        "content": "<p>Duh, thanks <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212331127,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601918992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Recursive.20type.20error.3A.20function.20vs.20closure/near/212329129\">said</a>:</p>\n<blockquote>\n<p>That makes me worry about effectively making polymorphization mandatory part of the language spec, since it affects whether code compiles or not</p>\n</blockquote>\n<p>well, this is already the case for mir opts</p>",
        "id": 212332844,
        "sender_full_name": "lcnr",
        "timestamp": 1601919871
    },
    {
        "content": "<p>but polymorphization will indeed make this worse</p>",
        "id": 212332880,
        "sender_full_name": "lcnr",
        "timestamp": 1601919885
    },
    {
        "content": "<p>how so?</p>",
        "id": 212333444,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601920180
    },
    {
        "content": "<p>I don't think we go from \"does not compile regardless of recursion limit\" to \"compiles with defaults\" because of any MIR opt</p>",
        "id": 212333538,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601920215
    },
    {
        "content": "<p>And const prop warnings can be disabled</p>",
        "id": 212333565,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601920234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">recurse</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">recurse</span>::<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212334599,
        "sender_full_name": "lcnr",
        "timestamp": 1601920780
    },
    {
        "content": "<p>branch elim</p>",
        "id": 212334724,
        "sender_full_name": "lcnr",
        "timestamp": 1601920822
    },
    {
        "content": "<p>fails with <code>mir-opt-level=0</code> compiles with <code>mir-opt-level=1</code></p>",
        "id": 212335000,
        "sender_full_name": "lcnr",
        "timestamp": 1601920948
    },
    {
        "content": "<p>Ah, right</p>",
        "id": 212335048,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601920978
    },
    {
        "content": "<p>A final question: I'd like to refer to this \"issue\" / limitation / quirk (you name it) from within the scope of a PR that adds a <code>dyn Fn...</code> coercion to circumvent it. What's the canonical issue in the repo I should refer to?<br>\nEDIT: there is <a href=\"https://github.com/rust-lang/rust/pull/69749\">this PR</a>, but mentioning an already-merged PR that doesn't solve that particular issue does not feel right.</p>",
        "id": 212407010,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601978879
    },
    {
        "content": "<p>FWIW, I've submitted <a href=\"https://github.com/rust-lang/rust/issues/77664\">https://github.com/rust-lang/rust/issues/77664</a></p>",
        "id": 212604850,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602097629
    }
]