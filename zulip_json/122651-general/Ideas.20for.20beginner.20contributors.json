[
    {
        "content": "<p>I'm ideating on how to write a dedicated section of the rustc-dev-guide that covers specific ideas for first-time or novice contributors.</p>\n<p>Currently, we have the <a href=\"https://rustc-dev-guide.rust-lang.org/contributing.html\">Introduction</a> section, and it does cover some good ideas for beginners:</p>\n<ul>\n<li>try <code>E-easy</code> issues</li>\n<li>writing documentation<ul>\n<li>contributing to rustc-dev-guide</li>\n</ul>\n</li>\n<li>triaging issues</li>\n</ul>\n<p>But I think it'd be good to cover more things. As a novice contributor myself, here are some more ways that I think beginners can contribute:</p>\n<ul>\n<li>Adding reproducible ICEs to glacier</li>\n<li>Minimizing user-provided code samples.</li>\n<li>\"Deduping\" issues to other issues (can't actually close the issue, but can link to other related ones)</li>\n<li>Using cargo-bisect-rustc to bisect <code>E-needs-bisection</code> issues.</li>\n<li>Writing tests for <code>E-needs-test</code> issues.</li>\n<li><code>A-diagnostics</code> issues (I've found that these are a great way to get your hands a little dirtier without requiring very deep understanding of rustc)</li>\n</ul>\n<p>I feel like these are ideas that I wouldn't have thought of if I weren't so stubborn / obsessed. I basically learned that I could do all these things by browsing through the open issues and seeing what others were doing. It'd be great if those who are maybe less intrepid than me could get these ideas directly from the dev-guide.</p>\n<p>Anybody else have ideas that I've missed? And/or thoughts on creating a dedicated rustc-dev-guide chapter/section for this?</p>",
        "id": 266142607,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1640575269
    },
    {
        "content": "<p>I really like those ideas</p>",
        "id": 266159526,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640597997
    },
    {
        "content": "<p>The dev guide also might need a section on adding tags to issues with the bot, because I looked everywhere before looking at what others were doing in other issues</p>",
        "id": 266160007,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640598529
    },
    {
        "content": "<p>There's also going through old issues to see if they have been fixed in the meantime, and if so, adding them to the test cases via pull request to close the issue</p>",
        "id": 266160198,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640598758
    },
    {
        "content": "<blockquote>\n<p>Using cargo-bisect-rustc to bisect E-needs-bisection issues.</p>\n</blockquote>\n<p>a fun first project for someone - it would be cool to automate this entirely by pasting a script and telling triagebot or something to run it until it gets a result</p>",
        "id": 266183246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640621240
    },
    {
        "content": "<p>this only really makes sense for ICEs and ok -&gt; error though, since otherwise you need to play around with the script</p>",
        "id": 266183266,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640621263
    },
    {
        "content": "<p>As a beginner contributor trying to fix <code>ICE</code> issues I would love to see a section that shows breaking down of a <code>ICE</code> i.e </p>\n<ul>\n<li>Where could this issue come from (rules of thumb, general advice)</li>\n<li>Locate what goes wrong where</li>\n<li>Ideas to fix it</li>\n<li>General tips to follow along (i.e look at document <code>x</code> if you are trying to fix bug on part <code>y</code> of the compiler)</li>\n<li>Words of encouragement <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></li>\n</ul>",
        "id": 266184332,
        "sender_full_name": "Oguz",
        "timestamp": 1640622104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451171\">@Patrick Poitras</span> <a href=\"#narrow/stream/122651-general/topic/Ideas.20for.20beginner.20contributors/near/266160007\">said</a>:</p>\n<blockquote>\n<p>The dev guide also might need a section on adding tags to issues with the bot, because I looked everywhere before looking at what others were doing in other issues</p>\n</blockquote>\n<p>Does this not cover what you wish? <a href=\"https://rustc-dev-guide.rust-lang.org/contributing.html#issue-triage\">https://rustc-dev-guide.rust-lang.org/contributing.html#issue-triage</a></p>",
        "id": 266211820,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1640645438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Ideas.20for.20beginner.20contributors/near/266183246\">said</a>:</p>\n<blockquote>\n<p>it would be cool to automate this entirely by pasting a script and telling triagebot or something to run it until it gets a result</p>\n</blockquote>\n<p>I only just yesterday found out (by chance!) that there is a <code>@rustbot glacier</code> command where you can give it a link to a gist and it will automatically add a commit to the glacier repo.</p>\n<p>I gave myself a TODO item to update the glacier README to mention this, and also to maybe improve that command so it can directly take in a playground link as well. Happy to have anybody beat me to it for either of those :)</p>",
        "id": 266212312,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1640645878
    },
    {
        "content": "<p>One related idea regarding bot support: I would <em>love</em> to ask bors or rustbot to run the testsuite, generate the patch to bless new test output, and submit that as a PR against my PR branch.</p>",
        "id": 266214260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640647580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460107\">Oguz</span> <a href=\"#narrow/stream/122651-general/topic/Ideas.20for.20beginner.20contributors/near/266184332\">said</a>:</p>\n<blockquote>\n<p>As a beginner contributor trying to fix <code>ICE</code> issues I would love to see a section that shows breaking down of a <code>ICE</code> i.e </p>\n<ul>\n<li>Where could this issue come from (rules of thumb, general advice)</li>\n<li>Locate what goes wrong where</li>\n<li>Ideas to fix it</li>\n<li>General tips to follow along (i.e look at document <code>x</code> if you are trying to fix bug on part <code>y</code> of the compiler)</li>\n<li>Words of encouragement <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"460107\">@Oguz</span> here's a stab at it :)</p>\n<p>ICEs fall into two main categories:</p>\n<ol>\n<li>this code is broken, and rustc breaks while trying to give an error</li>\n<li>this code should work, but rustc breaks instead of compiling it</li>\n</ol>\n<p>Some strategies are shared between the two; for both, it's a good idea to get started by reproducing the crash locally, write a UI or run-make test which reproduces the issue automatically, then compile rustc with debug symbols and run <code>RUST_BACKTRACE=1</code>to get an idea of what the code is doing.</p>\n<p>For 1. the fix is usually simple: either change an <code>unwrap()</code> or <code>bug!</code> into <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/session/struct.Session.html#method.delay_span_bug\"><code>delay_span_bug</code></a>, or change the time the check happens until later, when we know that part of the code is valid.</p>\n<p>For 2. the fix is usually more complex, and it might be a good idea to ask for suggestions on the issue or on Zulip (but if you already have ideas, it's fine to go ahead and try them :)</p>\n<p>Once you've made a change you think fixes the issue, run the automated test you wrote at the test to make sure it works, then make a PR following the instructions in <a href=\"https://rustc-dev-guide.rust-lang.org/contributing.html#pull-requests\">https://rustc-dev-guide.rust-lang.org/contributing.html#pull-requests</a>.</p>",
        "id": 266219899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640652319
    },
    {
        "content": "<p>another good first issue would be documenting the rest of the commands for <code>@rust-timer</code>, right now only <code>queue</code> is documented: <a href=\"https://perf.rust-lang.org/help.html\">https://perf.rust-lang.org/help.html</a></p>",
        "id": 266220123,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640652531
    },
    {
        "content": "<p>I know <code>build</code> at least exists, although I only found it by looking through the source code</p>",
        "id": 266220129,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640652549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Ideas.20for.20beginner.20contributors/near/266219899\">said</a>:</p>\n<blockquote>\n<ol>\n<li>this code is broken, and rustc breaks while trying to give an error</li>\n<li>this code should work, but rustc breaks instead of compiling it</li>\n</ol>\n</blockquote>\n<p>And for either one, it's okay to set it aside if it proves too challenging. Leaving a note on the issue with the data and findings you've collected so far is, IMO, just as valuable as actually fixing the ICE.</p>",
        "id": 266224250,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1640657537
    },
    {
        "content": "<p>Thanks a lot!  <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <br>\nOnce I fix handful of ICEs I am thinking of writing the process .</p>",
        "id": 266242386,
        "sender_full_name": "Oguz",
        "timestamp": 1640681484
    }
]