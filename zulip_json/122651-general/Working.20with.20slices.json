[
    {
        "content": "<p>I have a function that parses a byte array, it currently looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn parse_status_payload(payload: Vec&lt;u8&gt;) -&gt; Result&lt;Value, Box&lt;dyn std::error::Error&gt;&gt; {\n    Ok(json!({\n        &quot;SystemTime&quot;:        u64::from_be_bytes(payload.get(0..8).ok_or(&quot;Unexpected payload length&quot;)?.try_into()?),\n        &quot;UtcDate&quot;:           u32::from_be_bytes(payload.get(8..12).ok_or(&quot;Unexpected payload length&quot;)?.try_into()?),\n        //...\n</code></pre></div>\n\n\n<p>Is there an easier way to do this? this looks kinda ugly</p>",
        "id": 215096668,
        "sender_full_name": "Johannes",
        "timestamp": 1604065926
    },
    {
        "content": "<p>Could use byteorder, but that looks about right. The input might not be long enough, so you have to handle that, and slicing doesn't preserve the length in the typesystem.</p>",
        "id": 215097441,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066310
    },
    {
        "content": "<p>Once const generics (maybe not min const generics?) lands, you'd be able to convert the input vec into a <code>&amp;[u8; 12]</code> and then perform all compile-time slicing without risk of error</p>",
        "id": 215097576,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066369
    },
    {
        "content": "<p>reducing it to a single dynamic length check / error</p>",
        "id": 215097610,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066388
    },
    {
        "content": "<p>Hmm ok thank you. I am very new to rust and wasn't sure if I am missing something here.</p>",
        "id": 215097829,
        "sender_full_name": "Johannes",
        "timestamp": 1604066468
    },
    {
        "content": "<p>It's annoying that a slice doesn't get converted to an array automatically. Also do you know why u32::from_be_bytes() does not accept a slice?</p>",
        "id": 215098026,
        "sender_full_name": "Johannes",
        "timestamp": 1604066541
    },
    {
        "content": "<p>I don't think it's a great idea to cross post everywhere<br>\nwithout giving time for answers<br>\nCopying from Discord:</p>",
        "id": 215098118,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066582
    },
    {
        "content": "<p>I expect that a library will spring into existence (I've thought about writing it myself) that will let you do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(FromBytesBe)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">system_time</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">utc_date</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">X</span>::<span class=\"n\">from_bytes_be</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">])</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215098151,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066595
    },
    {
        "content": "<p>OK I'm sorry I'll keep that in mind. I wasn't sure how active zulip is. Is discord the main platform?</p>",
        "id": 215098399,
        "sender_full_name": "Johannes",
        "timestamp": 1604066710
    },
    {
        "content": "<blockquote>\n<p>It's annoying that a slice doesn't get converted to an array automatically</p>\n</blockquote>\n<p>Because what should happen if the slice isn't the right length for the array?</p>\n<blockquote>\n<p>why u32::from_be_bytes() does not accept a slice</p>\n</blockquote>\n<p>Because what should happen if the slice isn't the right length for an <code>u32</code>?</p>",
        "id": 215098419,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066722
    },
    {
        "content": "<p>Zulip is roughly people working on Rust. Discord is more people working _with_ Rust, some working _on_ Rust. There's also a community Discord server that's mostly people working with Rust.</p>",
        "id": 215098546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066772
    },
    {
        "content": "<p>It's fine to ask here, just annoying to have to answer the same question both places simultaneously</p>",
        "id": 215098605,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604066799
    },
    {
        "content": "<p>Yeah makes perfekt sense, thanks.</p>",
        "id": 215098775,
        "sender_full_name": "Johannes",
        "timestamp": 1604066882
    },
    {
        "content": "<p>Personally, I'd recommend the <a href=\"https://discord.gg/aVESxV8\">community discord</a> for this kind of question.  In my experience it's the most active with people looking to reply to questions like that.</p>",
        "id": 215121034,
        "sender_full_name": "scottmcm",
        "timestamp": 1604076582
    },
    {
        "content": "<p>Activity is roughly in the order: Community Discord, Zulip, Other Platforms (Official Discord, Discourse, etc)</p>",
        "id": 215125011,
        "sender_full_name": "Lokathor",
        "timestamp": 1604078459
    },
    {
        "content": "<p>semi-quiet Slack channel as well :)</p>",
        "id": 215125103,
        "sender_full_name": "oliver",
        "timestamp": 1604078499
    },
    {
        "content": "<p>even freenode <code>##rust</code> still has quite a few members</p>",
        "id": 215125679,
        "sender_full_name": "cuviper",
        "timestamp": 1604078760
    },
    {
        "content": "<p>also there are three separate matrix channels, two are official, one is for embedded</p>",
        "id": 215126108,
        "sender_full_name": "oliver",
        "timestamp": 1604078938
    }
]