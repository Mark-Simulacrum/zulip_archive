[
    {
        "content": "<p>Is there any guidance regarding feature-gating public enum variants? They seem like a bad idea because enabling a feature can break unrelated code that matches on the enum without a <code>_</code> fallback. I know that marking the enum as non-exhaustive prevents that, but it still feels pretty non-idiomatic to me.</p>",
        "id": 228452498,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614706866
    },
    {
        "content": "<p>Why would making the enum non-exhaustive be non-idiomatic? That sounds like exactly what you're asking for.</p>",
        "id": 228453599,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1614707217
    },
    {
        "content": "<p>Marking it as non-exhaustive is idiomatic, but it feels that it might be better to not feature-gate the variants in the first place. Though I guess it's pretty hard to give any other advice without more details.</p>",
        "id": 228454070,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614707359
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/71481\">#71481</a></p>",
        "id": 228461666,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614710098
    },
    {
        "content": "<p>I feel like the alternative would be worse. If there are variants that can never occur with a given feature disabled, making the user handle those variants seems unfortunate, when they know they can never happen.</p>",
        "id": 228630544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614791956
    },
    {
        "content": "<p>The alternative would be dropping the feature and leaving it always enabled. But I can see how some users might not like that. <a href=\"https://github.com/georust/gdal/issues/169\">https://github.com/georust/gdal/issues/169</a> is what prompted me to ask.</p>",
        "id": 228631606,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614792314
    },
    {
        "content": "<p>As prior art, <code>postgres</code> feature-gates <code>chrono</code>, but doesn't have an enum with the supported types</p>",
        "id": 228631675,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614792342
    },
    {
        "content": "<p>The enum is <a href=\"https://github.com/georust/gdal/blob/master/src/vector/feature.rs#L457-L473\">https://github.com/georust/gdal/blob/master/src/vector/feature.rs#L457-L473</a>. In this case the set of types is more or less closed, and it's understandable why the crate went with an enum instead of conversion traits</p>",
        "id": 228632295,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614792579
    },
    {
        "content": "<p>An option in the future, but which won't be compiler-checked unless we have some feature agnostic <code>cargo check</code> of some sorts, would be to have downstream users of your code match on:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">that_enum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(accessible(::that_crate::ThatEnum::ThatVariant))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ThatEnum</span>::<span class=\"n\">ThatVariant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>should they want to match exhaustively <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n<hr>\n<p>I guess a more idiomatic approach would be to have <code>that_crate</code> start by defining their enum as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">ThatEnum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ThatVariant</span><span class=\"p\">(</span><span class=\"n\">ThatVariant</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(not(feature…))]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ThatVariant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_void</span>: ::<span class=\"n\">core</span>::<span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(feature…)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ThatVariant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228633426,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614792995
    },
    {
        "content": "<p>If it's non-exhaustive then it doesn't matter if they're feature gated or not, because the user needs a <code>_ =&gt; </code> arm no matter what.</p>",
        "id": 228692002,
        "sender_full_name": "Lokathor",
        "timestamp": 1614816382
    }
]