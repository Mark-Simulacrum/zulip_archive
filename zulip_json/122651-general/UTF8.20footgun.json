[
    {
        "content": "<p>Footgun of the day: non-printed UTF8 characters. I just managed to shoot myself with this one: <a href=\"https://github.com/rust-lang/rust/issues/77417\">https://github.com/rust-lang/rust/issues/77417</a> - I copied one of those \"&shy;\" characters into my code, which wasn't printed, so I thought I found a compiler bug. Lovely, do anybody see a way to avoid these kinds of mistakes?</p>",
        "id": 211950320,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601575594
    },
    {
        "content": "<p>Some editors will highlight those character for you</p>",
        "id": 211950407,
        "sender_full_name": "oliver",
        "timestamp": 1601575635
    },
    {
        "content": "<p>Thanks, I didn't know that. Unfortunately, VS Code doesn't seem to. Anyway, what would people think about a \"suspicious string\" lint for this? For clippy, for example? (Is it even possible to get the original byte sequence for a string literal?)</p>",
        "id": 211954601,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601577385
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/7560177/highlighting-and-replacing-non-printable-unicode-characters-in-emacs\">https://stackoverflow.com/questions/7560177/highlighting-and-replacing-non-printable-unicode-characters-in-emacs</a></p>",
        "id": 211955543,
        "sender_full_name": "oliver",
        "timestamp": 1601577788
    },
    {
        "content": "<p>Can't really speak to the linting idea. Seems like you are getting the feedback<br>\nfrom the compiler as it is. What was the error message you get?</p>",
        "id": 211964452,
        "sender_full_name": "oliver",
        "timestamp": 1601581704
    },
    {
        "content": "<p>No error message, I just got an unexpected binary because I didn't notice the non-printed chars in the source.</p>",
        "id": 211964699,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601581811
    },
    {
        "content": "<p>It's not unreasonable that it would error if it's producing unexpected results</p>",
        "id": 211964880,
        "sender_full_name": "oliver",
        "timestamp": 1601581911
    },
    {
        "content": "<p>But Rust fully supports UTF8 in strings, so it's not invalid - just extremely hard to notice</p>",
        "id": 211965030,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601581974
    },
    {
        "content": "<p>\\302\\255\\302\\255</p>",
        "id": 211965920,
        "sender_full_name": "oliver",
        "timestamp": 1601582387
    },
    {
        "content": "<p>I actually thought it was a different issue without looking at your link</p>",
        "id": 211966918,
        "sender_full_name": "oliver",
        "timestamp": 1601582823
    },
    {
        "content": "<p>I suspected a parse error up until the point where I tried an other character code and noticed that only one of the \\u{ad}'s changed... Hence the footgun, but I'm not sure if you or others would agree. I managed to play myself, after all.</p>",
        "id": 211966931,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601582825
    },
    {
        "content": "<p>Linting on invisible characters sounds logical to me; one can always use escapes to put those in.  Or use <code>include_str!</code> (which the lint should probably not look at).</p>",
        "id": 212010995,
        "sender_full_name": "scottmcm",
        "timestamp": 1601620212
    },
    {
        "content": "<p>I'm not (yet) sure how <code>include_str!</code> works and would interact with the lint, but we need to look at the string at the source level (i.e. what the user actually typed), since escape sequences seem to be parsed immediately.</p>\n<p>I would argue that a check like this would be most useful as a compiler warning, and that it probably is expensive enough to not be that.</p>",
        "id": 212041924,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601624561
    },
    {
        "content": "<p>I've opened a PR against Clippy. Thanks for your input.</p>",
        "id": 212057715,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601634839
    }
]