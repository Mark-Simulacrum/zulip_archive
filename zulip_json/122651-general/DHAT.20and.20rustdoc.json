[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> how does DHAT compare to the <code>self-profile</code> framework?</p>",
        "id": 219655533,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607717272
    },
    {
        "content": "<p>hmm, I couldn't get this to work with rustdoc:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/tools/rustdoc/Cargo.toml b/src/tools/rustdoc/Cargo.toml</span>\n<span class=\"gh\">index 36aa5916da7..b9b05ec38da 100644</span>\n<span class=\"gd\">--- a/src/tools/rustdoc/Cargo.toml</span>\n<span class=\"gi\">+++ b/src/tools/rustdoc/Cargo.toml</span>\n<span class=\"gu\">@@ -13,3 +13,4 @@ path = \"main.rs\"</span>\n\n [dependencies]\n rustdoc = { path = \"../../librustdoc\" }\n<span class=\"gi\">+dhat = \"0.1\"</span>\n<span class=\"gh\">diff --git a/src/tools/rustdoc/main.rs b/src/tools/rustdoc/main.rs</span>\n<span class=\"gh\">index 5b499a1fa1f..3876b03fa4c 100644</span>\n<span class=\"gd\">--- a/src/tools/rustdoc/main.rs</span>\n<span class=\"gi\">+++ b/src/tools/rustdoc/main.rs</span>\n<span class=\"gu\">@@ -1,3 +1,9 @@</span>\n<span class=\"gi\">+use dhat::{Dhat, DhatAlloc};</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+#[global_allocator]</span>\n<span class=\"gi\">+static ALLOCATOR: DhatAlloc = DhatAlloc;</span>\n<span class=\"gi\">+</span>\n fn main() {\n<span class=\"gd\">-    rustdoc::main()</span>\n<span class=\"gi\">+    let _dhat = Dhat::start_heap_profiling();</span>\n<span class=\"gi\">+    rustdoc::main();</span>\n }\n</code></pre></div>\n<p>there's no output from DHAT or .json file:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustdoc +stage1 --version\nrustdoc 1.50.0-dev\n</code></pre></div>",
        "id": 219657965,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607718604
    },
    {
        "content": "<p>oh! I think it's because it's calling process::exit instead of returning normally</p>",
        "id": 219658149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607718698
    },
    {
        "content": "<p>would be neat if there were a way to intercept that somehow</p>",
        "id": 219658229,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607718726
    },
    {
        "content": "<p>oh boooo rustdoc catches <em>every</em> code with process::exit even if it's successful, that's rude</p>",
        "id": 219658528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607718862
    },
    {
        "content": "<p>ok yes changing that fixed it</p>",
        "id": 219659089,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607719150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> hmm, it always shows me 0 MB allocated no matter what</p>\n<div class=\"codehilite\"><pre><span></span><code>dhat: Total:     0 bytes in 0 blocks\ndhat: At t-gmax: 0 bytes in 0 blocks\ndhat: At t-end:  0 bytes in 0 blocks\ndhat: The data in dhat-heap.json is viewable with dhat/dh_view.html\n</code></pre></div>\n<p>maybe rustc is overriding the global allocator somehow? not sure what I'm doing wrong</p>",
        "id": 219661925,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607720601
    },
    {
        "content": "<p>here's the json file in case it matters:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"dhatFileVersion\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"mode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rust-heap\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"verb\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allocated\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"bklt\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"bkacc\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"tu\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Âµs\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"Mtu\"</span><span class=\"p\">:</span> <span class=\"s2\">\"s\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"tuth\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"cmd\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/home/joshua/.local/lib/rustup/toolchains/stage1/bin/rustdoc --edition=2018 --crate-type lib --crate-name stm32h7xx_hal src/lib.rs -o /home/joshua/stm32h7xx-hal/target/doc --cfg feature=\\\"default\\\" --cfg feature=\\\"device-selected\\\" --cfg feature=\\\"rm0433\\\" --cfg feature=\\\"stm32h742\\\" --cfg feature=\\\"unproven\\\" --error-format=json --json=diagnostic-rendered-ansi -L dependency=/home/joshua/stm32h7xx-hal/target/debug/deps --extern bare_metal=/home/joshua/stm32h7xx-hal/target/debug/deps/libbare_metal-b638650e24c983d6.rmeta --extern cast=/home/joshua/stm32h7xx-hal/target/debug/deps/libcast-b0b77c08a1b60a35.rmeta --extern cortex_m=/home/joshua/stm32h7xx-hal/target/debug/deps/libcortex_m-d6410f0e6e3645ac.rmeta --extern cortex_m_rt=/home/joshua/stm32h7xx-hal/target/debug/deps/libcortex_m_rt-8ec1a455b0abe068.rmeta --extern embedded_hal=/home/joshua/stm32h7xx-hal/target/debug/deps/libembedded_hal-b5f4b69e0567e3fb.rmeta --extern nb=/home/joshua/stm32h7xx-hal/target/debug/deps/libnb-1dc7c396850f6243.rmeta --extern paste=/home/joshua/stm32h7xx-hal/target/debug/deps/libpaste-d4fad1d9f130d2fb.so --extern stm32h7=/home/joshua/stm32h7xx-hal/target/debug/deps/libstm32h7-eef1a06249d842d1.rmeta --extern void=/home/joshua/stm32h7xx-hal/target/debug/deps/libvoid-0a792be597e5ef56.rmeta --crate-version 0.8.0\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pid\"</span><span class=\"p\">:</span> <span class=\"mi\">31534</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"tg\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"te\"</span><span class=\"p\">:</span> <span class=\"mi\">155340789</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pps\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n  <span class=\"nt\">\"ftbl\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"[root]\"</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 219662022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607720647
    },
    {
        "content": "<p>(which I know for a fact is using several GB of memory)</p>",
        "id": 219662050,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607720668
    },
    {
        "content": "<p>let me try this on a program smaller than rustdoc</p>",
        "id": 219662173,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607720761
    },
    {
        "content": "<p><code>rustc/src/main.rs</code> optionally uses jemalloc, but it doesn't look like <code>rustdoc</code> ever does</p>",
        "id": 219662262,
        "sender_full_name": "cuviper",
        "timestamp": 1607720798
    },
    {
        "content": "<p>I don't <em>think</em> I'm setting jemalloc-sys anywhere</p>",
        "id": 219662360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607720858
    },
    {
        "content": "<p>You can't set 2 #[global_allocator]s, so that wouldn't be the issue</p>",
        "id": 219662457,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607720901
    },
    {
        "content": "<p>this works on a hello world program, not sure what's going on :/</p>\n<div class=\"codehilite\"><pre><span></span><code>Hello, world!\ndhat: Total:     1,112 bytes in 3 blocks\ndhat: At t-gmax: 1,112 bytes in 3 blocks\ndhat: At t-end:  1,112 bytes in 3 blocks\ndhat: The data in dhat-heap.json is viewable with dhat/dh_view.html\n</code></pre></div>",
        "id": 219662554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607720972
    },
    {
        "content": "<p>maybe it has something to do with dynamic linking?</p>",
        "id": 219662636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721010
    },
    {
        "content": "<p>I'll try adding this to src/librustdoc instead of src/tools/rustdoc</p>",
        "id": 219662650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721019
    },
    {
        "content": "<p>nothing :(</p>",
        "id": 219662974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I tried using dhat-rs on rustc itself and likewise failed. I didn't know about the <code>process::exit</code> thing, that's surprising. I guess you can <code>drop(_dhat)</code> just before that point, if <code>process::exit</code> is within main.</p>",
        "id": 219663089,
        "sender_full_name": "njn",
        "timestamp": 1607721281
    },
    {
        "content": "<p>yeah, <code>drop(_dhat)</code> from with <code>librustdoc::main</code> worked</p>",
        "id": 219663115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721297
    },
    {
        "content": "<p>the process::exit is in librustdoc so it doesn't work from src/tools/rustdoc unfortunately</p>",
        "id": 219663133,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721311
    },
    {
        "content": "<p>As for the zero numbers, that indicates that the allocator replacement isn't working, but I don't know why that would be the case. I'm not much of an expert on how allocator replacement works</p>",
        "id": 219663148,
        "sender_full_name": "njn",
        "timestamp": 1607721320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Rust.20performance.20book/near/219663115\">said</a>:</p>\n<blockquote>\n<p>yeah, <code>drop(_dhat)</code> from with <code>librustdoc::main</code> worked</p>\n</blockquote>\n<p>(worked in the sense that it printed 0 bytes)</p>",
        "id": 219663162,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721328
    },
    {
        "content": "<p>Right, fixes the first of the two problems</p>",
        "id": 219663177,
        "sender_full_name": "njn",
        "timestamp": 1607721339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">njn</span> <a href=\"#narrow/stream/122651-general/topic/Rust.20performance.20book/near/219663148\">said</a>:</p>\n<blockquote>\n<p>As for the zero numbers, that indicates that the allocator replacement isn't working, but I don't know why that would be the case. I'm not much of an expert on how allocator replacement works</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you happen to know why <code>#[global_allocator]</code> doesn't work for either rustc or rustdoc?</p>",
        "id": 219663259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721371
    },
    {
        "content": "<p>I tried modifying both src/tools/rustdoc and src/librustdoc without success</p>",
        "id": 219663280,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721383
    },
    {
        "content": "<p>uh</p>",
        "id": 219663298,
        "sender_full_name": "simulacrum",
        "timestamp": 1607721394
    },
    {
        "content": "<p>grep for it?</p>",
        "id": 219663303,
        "sender_full_name": "simulacrum",
        "timestamp": 1607721397
    },
    {
        "content": "<p>remove it for the compiler</p>",
        "id": 219663322,
        "sender_full_name": "simulacrum",
        "timestamp": 1607721407
    },
    {
        "content": "<p>There is a <code>dhat::finish</code> function that <code>Dhat:drop</code> calls. I guess I could make that public so that people could call it in a different place from where <code>Dhat</code> is created</p>",
        "id": 219663329,
        "sender_full_name": "njn",
        "timestamp": 1607721411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> nah, drop works well enough</p>",
        "id": 219663341,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Rust.20performance.20book/near/219663303\">said</a>:</p>\n<blockquote>\n<p>grep for it?</p>\n</blockquote>\n<p>nothing:</p>\n<div class=\"codehilite\"><pre><span></span><code>rg &#39;#\\[global_allocator&#39; compiler/\ncompiler/rustc_metadata/src/creader.rs\n41:    /// This crate has a `#[global_allocator]` item.\n776:                        &quot;the `#[global_allocator]` in {} \\\n806:                           add `#[global_allocator]` to a static item \\\n\ncompiler/rustc_codegen_cranelift/example/alloc_example.rs\n11:#[global_allocator]\n\ncompiler/rustc_codegen_cranelift/build_sysroot/alloc_system/lib.rs\n52:/// with the `#[global_allocator]` attribute\n59:/// #[global_allocator]\n\ncompiler/rustc_feature/src/accepted.rs\n155:    /// Allows the `#[global_allocator]` attribute.\n\ncompiler/rustc_builtin_macros/src/global_allocator.rs\n28:    // Allow using `#[global_allocator]` on an item statement\n\ncompiler/rustc_feature/src/active.rs\n200:    /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n</code></pre></div>",
        "id": 219663390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721448
    },
    {
        "content": "<p>But if the <code>process::exit</code> is some distance from <code>main</code>, you'd have to pass the <code>Dhat</code> around</p>",
        "id": 219663392,
        "sender_full_name": "njn",
        "timestamp": 1607721450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">njn</span> <a href=\"#narrow/stream/122651-general/topic/Rust.20performance.20book/near/219663329\">said</a>:</p>\n<blockquote>\n<p>There is a <code>dhat::finish</code> function that <code>Dhat:drop</code> calls. I guess I could make that public so that people could call it in a different place from where <code>Dhat</code> is created</p>\n</blockquote>\n<p>(it would be nice for <code>let _dhat = Dhat;</code> not to compile though, I made that mistake)</p>",
        "id": 219663433,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721470
    },
    {
        "content": "<p>oh</p>",
        "id": 219663449,
        "sender_full_name": "simulacrum",
        "timestamp": 1607721479
    },
    {
        "content": "<p>jemallocator probably has it?</p>",
        "id": 219663491,
        "sender_full_name": "simulacrum",
        "timestamp": 1607721483
    },
    {
        "content": "<p>I don't know</p>",
        "id": 219663499,
        "sender_full_name": "simulacrum",
        "timestamp": 1607721485
    },
    {
        "content": "<p>ok, no problem</p>",
        "id": 219663511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721493
    },
    {
        "content": "<p>back to bashing my head against bootstrap <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I seem to do an awful lot of that</p>",
        "id": 219663536,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721510
    },
    {
        "content": "<p>this is how jemalloc works for reference: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc/src/main.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc/src/main.rs</a></p>",
        "id": 219663587,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721540
    },
    {
        "content": "<p>looks very cursed</p>",
        "id": 219663611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721552
    },
    {
        "content": "<p>BTW I was going to post an issue for a way to not count allocations in set up code. But, just moving the <code>let _dhat = Dhat::start_heap_profiling();</code> to after the set up workes grate.</p>",
        "id": 219663622,
        "sender_full_name": "Eh2406",
        "timestamp": 1607721562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> second cursed question: I assume there's no way to link rustc_driver and company statically?</p>",
        "id": 219663769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607721649
    },
    {
        "content": "<p>not sure. seems like it probably is, I don't see any reason why not</p>",
        "id": 219665915,
        "sender_full_name": "simulacrum",
        "timestamp": 1607722810
    },
    {
        "content": "<p>maybe try removing dylib from crate types.</p>",
        "id": 219665923,
        "sender_full_name": "simulacrum",
        "timestamp": 1607722817
    },
    {
        "content": "<p>I've only skimmed this thread, so maybe this doesn't apply, but I've found I need to run profilers against <code>$(rustup +toolchain which rustc)</code>, not <code>rustc +toolchain</code>, so that it runs against the real binary, not the shim, or whatever the terminology is.</p>",
        "id": 219666167,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1607722950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306073\">@Tyson Nottingham</span> this isn't an external process, it's a global allocator</p>",
        "id": 219666203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607722976
    },
    {
        "content": "<p>so it's part of the binary itself</p>",
        "id": 219666212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607722980
    },
    {
        "content": "<p>Ah, okay :)</p>",
        "id": 219666220,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1607722987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219665923\">said</a>:</p>\n<blockquote>\n<p>maybe try removing dylib from crate types.</p>\n</blockquote>\n<p>no idea why but this fixed it - thank you so much!</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_driver/Cargo.toml b/compiler/rustc_driver/Cargo.toml</span>\n<span class=\"gh\">index 0adc006b624..781c680ae82 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_driver/Cargo.toml</span>\n<span class=\"gi\">+++ b/compiler/rustc_driver/Cargo.toml</span>\n<span class=\"gu\">@@ -4,8 +4,8 @@ name = \"rustc_driver\"</span>\n version = \"0.0.0\"\n edition = \"2018\"\n\n<span class=\"gd\">-[lib]</span>\n<span class=\"gd\">-crate-type = [\"dylib\"]</span>\n<span class=\"gi\">+#[lib]</span>\n<span class=\"gi\">+#crate-type = [\"dylib\"]</span>\n\n [dependencies]\n libc = \"0.2\"\n</code></pre></div>",
        "id": 219666430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">njn</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219663089\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> I tried using dhat-rs on rustc itself and likewise failed. I didn't know about the <code>process::exit</code> thing, that's surprising. I guess you can <code>drop(_dhat)</code> just before that point, if <code>process::exit</code> is within main.</p>\n</blockquote>\n<p>hmm, there's no <code>at_exit</code> unfortunately</p>",
        "id": 219666747,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723324
    },
    {
        "content": "<p>well, there is, but it doesn't seem to be stable: <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/mod.rs#L121\">https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/mod.rs#L121</a></p>",
        "id": 219666838,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723388
    },
    {
        "content": "<p><a href=\"#narrow/stream/219381-t-libs/topic/at_exit.20.3F\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/at_exit.20.3F</a></p>",
        "id": 219667730,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723906
    },
    {
        "content": "<p>wow, rustdoc is still going <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I started it running on stm32 with DHAT like 15 minutes ago</p>",
        "id": 219667751,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723930
    },
    {
        "content": "<p>hasn't even gotten to intra-doc links yet</p>",
        "id": 219667761,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607723937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> do you happen to have benchmarks for DHAT itself? it's slowing down rustdoc an awful lot ...</p>",
        "id": 219669766,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607725290
    },
    {
        "content": "<p>well, I guess that's something to do while I wait lol <a href=\"https://github.com/nnethercote/dhat-rs/pull/7\">https://github.com/nnethercote/dhat-rs/pull/7</a></p>",
        "id": 219670020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607725492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I have done very little perf measurement</p>",
        "id": 219670080,
        "sender_full_name": "njn",
        "timestamp": 1607725554
    },
    {
        "content": "<p>30x is very high :(</p>",
        "id": 219670129,
        "sender_full_name": "njn",
        "timestamp": 1607725568
    },
    {
        "content": "<p>well, I don't have exact numbers, but rustdoc took a minute and a half without DHAT and with DHAT ... well, I started it at 4:45 and it's still running.</p>",
        "id": 219670219,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607725638
    },
    {
        "content": "<p>in your defense, it is allocating a total of over 50 GB IIRC</p>",
        "id": 219670242,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607725662
    },
    {
        "content": "<p>but still</p>",
        "id": 219670246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607725667
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Finished dev [unoptimized + debuginfo] target(s) in 51m 56s\n</code></pre></div>\n\n<p>whew</p>",
        "id": 219671021,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726276
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>dhat: Total:     39,304,210,661 bytes in 176,996,655 blocks\ndhat: At t-gmax: 2,328,561,660 bytes in 7,955,048 blocks\ndhat: At t-end:  6,344 bytes in 6 blocks\ndhat: The data in dhat-heap.json is viewable with dhat/dh_view.html\n</code></pre></div>",
        "id": 219671070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726286
    },
    {
        "content": "<p>if someone wants a copy LMK, I can arrange SFTP access but I don't know where else I can store 71 MB of JSON haha</p>",
        "id": 219671448,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> do you know a way to sort the output by max allocation? I only see by total <a href=\"/user_uploads/4715/obhxID9Fz4YZzACDg8ELGxfg/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/obhxID9Fz4YZzACDg8ELGxfg/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/obhxID9Fz4YZzACDg8ELGxfg/image.png\"></a></div>",
        "id": 219671551,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726649
    },
    {
        "content": "<p>oh I think gmax is it, sorry for the ping</p>",
        "id": 219671569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726668
    },
    {
        "content": "<p>Yes, t-gmax is \"time of global heap max\"</p>",
        "id": 219671593,
        "sender_full_name": "njn",
        "timestamp": 1607726698
    },
    {
        "content": "<p>I'm having trouble reading the results - what does 'children' mean in this context?</p>",
        "id": 219671618,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726717
    },
    {
        "content": "<p>and 1.1/9?</p>",
        "id": 219671625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726727
    },
    {
        "content": "<p>oh it says here: <a href=\"https://valgrind.org/docs/manual/dh-manual.html\">https://valgrind.org/docs/manual/dh-manual.html</a></p>",
        "id": 219671709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726782
    },
    {
        "content": "<p>ok, so get_blanket_impls is at least <em>partially</em> to blame lol <a href=\"/user_uploads/4715/LoIbq-OnvKSABpKCqD3QdgW4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/LoIbq-OnvKSABpKCqD3QdgW4/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/LoIbq-OnvKSABpKCqD3QdgW4/image.png\"></a></div>",
        "id": 219671794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607726878
    },
    {
        "content": "<p>I'm also a little nervous this is missing allocations - I recorded 8.5 GB a while ago and I doubt it went down by a factor of 4 without anyone noticing</p>",
        "id": 219672128,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607727110
    },
    {
        "content": "<p>let me run this again without DHAT just in case</p>",
        "id": 219672137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607727116
    },
    {
        "content": "<p>well there's good news and bad news - the bad news is the usage comes from just having a metric ton of <code>Item</code>s all stored for the lifetime of the process</p>",
        "id": 219674122,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607728903
    },
    {
        "content": "<p>the good news is that means even small changes to the size of <code>Item</code> will have an outsized impact</p>",
        "id": 219674131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607728915
    },
    {
        "content": "<p>e.g. I think boxing <code>ItemKind</code> could help</p>",
        "id": 219674201,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607728946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219672128\">said</a>:</p>\n<blockquote>\n<p>I'm also a little nervous this is missing allocations - I recorded 8.5 GB a while ago and I doubt it went down by a factor of 4 without anyone noticing</p>\n</blockquote>\n<p>oh huh it was 2.5 GB even without DHAT</p>",
        "id": 219674518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607729248
    },
    {
        "content": "<p>maybe this is related to -Z self-profile and that has more accurate measurements? that seems unlikely though</p>",
        "id": 219674533,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607729262
    },
    {
        "content": "<p>god damn no wonder</p>\n<div class=\"codehilite\"><pre><span></span><code>[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;Item&gt;() = 784\n[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;ItemKind&gt;() = 408\n</code></pre></div>",
        "id": 219674712,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607729412
    },
    {
        "content": "<p>that's like a kilobyte per item lol</p>",
        "id": 219674716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607729419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219674533\">said</a>:</p>\n<blockquote>\n<p>maybe this is related to -Z self-profile and that has more accurate measurements? that seems unlikely though</p>\n</blockquote>\n<p>nope, time-passes reports the same. not sure where I got 8.5 from <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 219675156,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607729803
    },
    {
        "content": "<p>ok I think I'm going to start by trimming down <code>clean::types::Span</code></p>",
        "id": 219675583,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607730210
    },
    {
        "content": "<p>it's 100 bytes and all of it except the <code>rustc_span</code> can be rederived from a <code>tcx</code></p>",
        "id": 219675595,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607730227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219671448\">said</a>:</p>\n<blockquote>\n<p>if someone wants a copy LMK, I can arrange SFTP access but I don't know where else I can store 71 MB of JSON haha</p>\n</blockquote>\n<p>I have access to an \"everything is public on this\" server, I can host it if you wish</p>",
        "id": 219681729,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607736514
    },
    {
        "content": "<p>I believe it's not using https too</p>",
        "id": 219681731,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607736524
    },
    {
        "content": "<p>actually I just realized I can host this on google drive haha</p>",
        "id": 219681833,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736688
    },
    {
        "content": "<p>Yup, not https XD</p>",
        "id": 219681844,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607736700
    },
    {
        "content": "<p><a href=\"https://drive.google.com/file/d/1QU6RdwTbm2jOpHSQo0pYo7JIwY9CnTTO/view?usp=sharing\">https://drive.google.com/file/d/1QU6RdwTbm2jOpHSQo0pYo7JIwY9CnTTO/view?usp=sharing</a></p>",
        "id": 219681856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219675595\">said</a>:</p>\n<blockquote>\n<p>it's 100 bytes and all of it except the <code>rustc_span</code> can be rederived from a <code>tcx</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> would you take a PR that passes <code>tcx</code> into <code>render</code>?</p>",
        "id": 219683589,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607739255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219675595\">said</a>:</p>\n<blockquote>\n<p>it's 100 bytes and all of it except the <code>rustc_span</code> can be rederived from a <code>tcx</code></p>\n</blockquote>\n<p>meanwhile in places where people actually care about performance <a href=\"https://github.com/rust-lang/rust/blob/5bd9b60333b3dc0a51e7a5607cd1e0d537a9f718/compiler/rustc_span/src/span_encoding.rs#L15\">https://github.com/rust-lang/rust/blob/5bd9b60333b3dc0a51e7a5607cd1e0d537a9f718/compiler/rustc_span/src/span_encoding.rs#L15</a></p>\n<blockquote>\n<p>/// <code>SpanData</code> is 12 bytes, which is a bit too big to stick everywhere.</p>\n</blockquote>",
        "id": 219685957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607742781
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;Item&gt;() = 680\n[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;ItemKind&gt;() = 408\n[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;Span&gt;() = 8\n</code></pre></div>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 219688419,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607746191
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79957\">https://github.com/rust-lang/rust/pull/79957</a></p>",
        "id": 219688601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607746491
    },
    {
        "content": "<p>next one on the list is Attributes, it takes up 96 bytes</p>",
        "id": 219690695,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607749658
    },
    {
        "content": "<p>Cheering you on, <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>.</p>",
        "id": 219695253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607757622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219683589\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219675595\">said</a>:</p>\n<blockquote>\n<p>it's 100 bytes and all of it except the <code>rustc_span</code> can be rederived from a <code>tcx</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> would you take a PR that passes <code>tcx</code> into <code>render</code>?</p>\n</blockquote>\n<p>Why do you need it? (I'm not opposed of it but I'm not sure why you would need it... For errors or for compiler queries? Or both maybe? XD)</p>",
        "id": 219707434,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1607777404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> in this case it turned out I didn't need it, I could get all the info about Spans from a Session alone. In general I will need it to move computation from <code>clean</code> to the place it's used: <a href=\"https://github.com/rust-lang/rust/issues/76382\">https://github.com/rust-lang/rust/issues/76382</a></p>",
        "id": 219707975,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607778216
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 219707983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607778232
    },
    {
        "content": "<p>I don't have a specific example for that, I'm happy to hold off until I do</p>",
        "id": 219707984,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607778232
    },
    {
        "content": "<p>Oh nice!</p>",
        "id": 219708036,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1607778283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219690695\">said</a>:</p>\n<blockquote>\n<p>next one on the list is Attributes, it takes up 96 bytes</p>\n</blockquote>\n<p>actually I'll tackle ItemKind first</p>\n<div class=\"codehilite\"><pre><span></span><code>[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;ItemKind&gt;() = 408\n[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;(Function, Option&lt;rustc_hir::Defaultness&gt;)&gt;() = 336\n[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;Function&gt;() = 328\n[src/librustdoc/lib.rs:102] std::mem::size_of::&lt;Impl&gt;() = 400\n</code></pre></div>",
        "id": 219711100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607783261
    },
    {
        "content": "<p>hmm so Impl is tricky because it has a ton of logic in <code>clean</code> <a href=\"https://github.com/rust-lang/rust/blob/3f2088aa603d2cd3f43c20795872de9cd6ec7735/src/librustdoc/clean/mod.rs#L2083-L2130\">https://github.com/rust-lang/rust/blob/3f2088aa603d2cd3f43c20795872de9cd6ec7735/src/librustdoc/clean/mod.rs#L2083-L2130</a></p>",
        "id": 219712791,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607785955
    },
    {
        "content": "<p>maybe I could turn all those fields into methods, like before? I'm not sure how that interacts with caching</p>",
        "id": 219712801,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607785988
    },
    {
        "content": "<p>I think for now I'll just box those variants</p>",
        "id": 219712870,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607786104
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/pull/80014#issuecomment-746810284\">https://github.com/rust-lang/rust/pull/80014#issuecomment-746810284</a>)</p>\n<blockquote>\n<p>A way I thought of to reduce that size is to calculate them on demand with something like <code>enum ItemId</code></p>\n</blockquote>\n<p>lol this had exactly 343 errors</p>",
        "id": 220163574,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608148106
    },
    {
        "content": "<p>maybe this is a sign I should take a break and play Halo <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 220163589,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608148123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/DHAT.20and.20rustdoc/near/219690695\">said</a>:</p>\n<blockquote>\n<p>next one on the list is Attributes, it takes up 96 bytes</p>\n</blockquote>\n<p>I took so long with this someone else is helping out <a href=\"https://github.com/rust-lang/rust/pull/84494\">https://github.com/rust-lang/rust/pull/84494</a> :)</p>",
        "id": 236091622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619383269
    }
]