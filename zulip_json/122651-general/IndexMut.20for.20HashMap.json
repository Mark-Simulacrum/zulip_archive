[
    {
        "content": "<p>This seems like a conspicuous absence. Why doesn't <code>HashMap</code> implement <code>IndexMut</code>, given that it does have <code>Index</code> and you can write <code>get_mut(idx).unwrap()</code> for a similar effect?</p>",
        "id": 240285032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622011785
    },
    {
        "content": "<p>I think because in a lot of languages you can use that for insertion, and it would be confusing that that causes panics</p>",
        "id": 240285642,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622012362
    },
    {
        "content": "<p>(however, using it for insertion in rust is impossible, unless the type implements Default or something â€” you need to give the assignment a target)</p>",
        "id": 240285727,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622012414
    },
    {
        "content": "<p>I think there's also been the idea of possibly having <code>m[k] = v;</code> through some kind of an <code>IndexSet</code>, but that can't be added later if it has an <code>IndexMut</code> now.</p>",
        "id": 240291243,
        "sender_full_name": "scottmcm",
        "timestamp": 1622016593
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/30414424/155423\">How can I update a value in a mutable HashMap?</a></p>",
        "id": 240336054,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622040445
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/23559\">Future-proof indexing on maps: remove IndexMut</a></p>",
        "id": 240336106,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622040463
    },
    {
        "content": "<p>sadly it wasn't future proof enough, or we could index and indexmut to get Entry values (i think the traits allow that?)</p>",
        "id": 240340035,
        "sender_full_name": "Lokathor",
        "timestamp": 1622041825
    },
    {
        "content": "<p>No, you have to return a reference from <code>index</code>/<code>index_mut</code></p>",
        "id": 240347798,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1622044770
    },
    {
        "content": "<p>I'll be sad if an <code>IndexSet</code> trait collides with the <a href=\"https://docs.rs/indexmap/1.6.2/indexmap/set/struct.IndexSet.html\">collection</a></p>",
        "id": 240350337,
        "sender_full_name": "cuviper",
        "timestamp": 1622045686
    },
    {
        "content": "<p>it would be possible to work with that, but just annoying</p>",
        "id": 240350371,
        "sender_full_name": "cuviper",
        "timestamp": 1622045712
    },
    {
        "content": "<p>(and FWIW, we do <code>impl IndexMut&lt;_&gt; for IndexMap</code>)</p>",
        "id": 240351342,
        "sender_full_name": "cuviper",
        "timestamp": 1622046144
    },
    {
        "content": "<p>IndexGet and IndexSet aren't very difficult traits to design (I wrote an RFC a while back), but it seems like something that's not a priority compared to everything else.</p>",
        "id": 240369659,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1622053923
    }
]