[
    {
        "content": "<p>Hello - I'm trying to understand \"Branded Types\" more thoroughly, and- while lifetimes can be used to perform this trick (a la <a href=\"https://crates.io/crates/generativity\">generativity</a> or <a href=\"http://plv.mpi-sws.org/rustbelt/ghostcell/\">Ghost Cell</a>)- I'm at a bit of a loss for understanding how to translate this concept into other type systems.</p>\n<p>I'm attempting to create a function which produces a result of some type T with genericity such that two outputs from the function are _incompatible_ with eachother for some binary associative functions until they are proven to share the same \"brand\" value via a runtime check.</p>\n<p>My assumption is that I can return <code>T&lt;'brand&gt;</code> where 'brand is guaranteed unique per invocation, provide an impl:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">brand</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyBrandedType</span><span class=\"o\">&lt;'</span><span class=\"na\">brand</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">into_compatible</span><span class=\"o\">&lt;</span><span class=\"n\">Other</span>: <span class=\"nc\">MyBrandedType</span><span class=\"o\">&lt;'</span><span class=\"na\">other</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Other</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">MyBrandedType</span><span class=\"o\">&lt;'</span><span class=\"na\">other</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">do_my_runtime_compatible_check</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">// use phantomdata::default to instantiate a new instance with the 'other lifetime</span>\n<span class=\"w\">      </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">todo!</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But ... What does this map to in something like Haskell's type system, where lifetimes are not present? Am I overlooking something with regards to the compatibility of invariant lifetimes?</p>\n<p>I suspect the core aspect of the idea is that of proving that two items with runtime data are or are not compatible at compile time, despite the actual <code>subtypes</code> of that data being statically unknowable. Is there some other way to represent such a scenario with compile-time enforcement?</p>",
        "id": 248691141,
        "sender_full_name": "Zoey",
        "timestamp": 1628304372
    },
    {
        "content": "<p>The technique of branded types looks very similar to the existential type trick used to make <a href=\"https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Monad-ST.html#v:runST\"><code>runST</code></a> and <code>ST</code>-refs work. In particular, multiple calls to <code>runST</code> get distinct, quantified type variables, much like the lifetime variable <code>'brand</code> in this example.</p>",
        "id": 248692362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628306161
    },
    {
        "content": "<p>Rust can't express <code>runST</code> because it doesn't have functions with type quantifiers - you can have <code>for&lt;'a&gt; fn(T&lt;'a&gt;)</code> but not <code>for&lt;X&gt; fn(T&lt;X&gt;)</code></p>",
        "id": 248692440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628306268
    },
    {
        "content": "<p>How does X differ from a generic <code>X</code> on an <code>impl&lt;X&gt;</code>; do type quantifiers not need constrained? It looks like type quantifiers would arrive as a part of HKT, if Rust were to add it, if I am understanding correctly where the representation hole exists?</p>",
        "id": 248693468,
        "sender_full_name": "Zoey",
        "timestamp": 1628307614
    },
    {
        "content": "<p>No, here we're talking about a single function pointer that can accept multiple types. It might be possible to do this with some kind of <code>dyn</code>, but for the most part the rust type system is not set up to do this in the same way as haskell</p>",
        "id": 248693755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628307989
    },
    {
        "content": "<p>I'm not sure what HKT proposals look like these days, but I imagine that they would be handled using static dispatch (<code>impl</code> not <code>dyn</code>), and it would almost certainly not be object safe because of the generics</p>",
        "id": 248693871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628308166
    }
]