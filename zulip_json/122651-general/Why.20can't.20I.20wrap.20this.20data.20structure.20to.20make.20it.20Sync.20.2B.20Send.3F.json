[
    {
        "content": "<p>I'm working with html5ever (or rather, a library based on it) and I'm having a problem because I'm trying to use a data structure containing a <code>StrTendril</code> in a <code>Future</code>. rustc complains, understandably, that the value is not Sync or Send because Tendril contains a <code>Cell&lt;usize&gt;</code>. Usually I could just wrap the data structure in an <code>Arc&lt;Mutex&lt;&gt;&gt;</code> and be done with it, but that doesn't work in this case, I still get the error about <code>Cell&lt;usize&gt;</code> not being Sync. Here's a minimal example:</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::sync::{Mutex, Arc};\nuse html5ever::tendril::{Tendril, StrTendril, fmt::UTF8, NonAtomic, Atomic};\n\nfn foo&lt;D: Send&gt;(d: D) { }\n\nfn main() {\n    let tendril = Tendril::&lt;UTF8, NonAtomic&gt;::new();\n    let tendril = Arc::new(Mutex::new(tendril));\n    /*\n    Compiling testproj v0.1.0 (/Users/pwoolcock/Code/testproj)\n    error[E0277]: `Cell&lt;usize&gt;` cannot be shared between threads safely\n     --&gt; src/main.rs:9:5\n      |\n    4 | fn foo&lt;D: Send&gt;(d: D) { }\n      |           ---- required by this bound in `foo`\n    ...\n    9 |     foo(tendril);\n      |     ^^^ `Cell&lt;usize&gt;` cannot be shared between threads safely\n      |\n      = help: within `NonAtomic`, the trait `Sync` is not implemented for `Cell&lt;usize&gt;`\n      = note: required because it appears within the type `NonAtomic`\n      = note: required because of the requirements on the impl of `Send` for `Tendril&lt;UTF8&gt;`\n      = note: required because of the requirements on the impl of `Send` for `Mutex&lt;Tendril&lt;UTF8&gt;&gt;`\n      = note: required because of the requirements on the impl of `Send` for `Arc&lt;Mutex&lt;Tendril&lt;UTF8&gt;&gt;&gt;`\n\n    error: aborting due to previous error; 1 warning emitted\n\n    For more information about this error, try `rustc --explain E0277`.\n    error: could not compile `testproj`\n\n    To learn more, run the command again with --verbose.\n    */\n    foo(tendril);\n}\n</code></pre></div>\n<p>I could use <code>Tendril&lt;UTF8, Atomic&gt;</code>, but that is not allowed in the <code>TreeSink</code> trait so I'm stuck. Is there any way to wrap this to allow it to be Send + Sync?</p>",
        "id": 221559307,
        "sender_full_name": "Paul Woolcock",
        "timestamp": 1609783923
    },
    {
        "content": "<p><code>&amp;T</code> is send when <code>T</code> is sync. If <code>Cell&lt;usize&gt;</code> was sync, <code>&amp;Cell&lt;usize&gt;</code> would be send, which makes it trivial to get a data race.</p>",
        "id": 221560131,
        "sender_full_name": "bjorn3",
        "timestamp": 1609784337
    },
    {
        "content": "<p>Sure, but shouldn't anything protected by a <code>Mutex</code> be <code>Sync</code>?</p>",
        "id": 221560330,
        "sender_full_name": "Paul Woolcock",
        "timestamp": 1609784423
    },
    {
        "content": "<p><code>Tendril&lt;F, A&gt;</code> requires <code>A: Sync</code> for it to be <code>Send</code>: <a href=\"https://docs.rs/html5ever/0.25.1/html5ever/tendril/struct.Tendril.html\">https://docs.rs/html5ever/0.25.1/html5ever/tendril/struct.Tendril.html</a></p>",
        "id": 221561183,
        "sender_full_name": "bjorn3",
        "timestamp": 1609784835
    },
    {
        "content": "<p>yes, but as I stated above, as soon as I change <code>A</code> to <code>Atomic</code>, I can no longer implement the <code>TreeSink</code> trait, which I also need</p>",
        "id": 221561361,
        "sender_full_name": "Paul Woolcock",
        "timestamp": 1609784912
    },
    {
        "content": "<p>I can't help with this. Try asking one of the authors of html5ever.</p>",
        "id": 221562604,
        "sender_full_name": "bjorn3",
        "timestamp": 1609785515
    },
    {
        "content": "<p>After looking a bit at the design of the crate, it seems to me that, either the <code>TreeSink</code> trait itself ought to be atomic over the <code>Atomicity</code>, or that its methods should. So what you can do is fork the crate, implement those changes, submit them with a PR; and until your PR or an equivalent workaround is published, use your own fork as a \"patch\" of the official crate (in your <code>Cargo.toml</code>)</p>",
        "id": 221564351,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609786369
    }
]