[
    {
        "content": "<p>Hey everyone, just released <a href=\"https://github.com/XtremeDevX/turbo-delete\">https://github.com/XtremeDevX/turbo-delete</a> which can delete folders way faster than <code>cargo clean</code> on windows.</p>\n<p>Would you be open to considering a PR to use this for <code>cargo clean</code> if I made it a crate?</p>\n<p>Here's hyperfine benchmarks:<br>\n<a href=\"/user_uploads/4715/4NvHsX5XOMs9LGQ-1LMe7E1M/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4NvHsX5XOMs9LGQ-1LMe7E1M/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/4NvHsX5XOMs9LGQ-1LMe7E1M/image.png\"></a></div><blockquote>\n<p>hyperfine 'td ./target' 'cargo clean' --prepare 'cargo check' --show-output<br>\nThat was the command I used to test it out!</p>\n</blockquote>",
        "id": 272808183,
        "sender_full_name": "Tejas Ravishankar",
        "timestamp": 1645539387
    },
    {
        "content": "<p>you might try asking over in <a class=\"stream\" data-stream-id=\"246057\" href=\"/#narrow/stream/246057-t-cargo\">#t-cargo</a>  as well</p>",
        "id": 272809290,
        "sender_full_name": "bstrie",
        "timestamp": 1645539866
    },
    {
        "content": "<p>How does it achieve the extra speed?</p>",
        "id": 272814083,
        "sender_full_name": "Eh2406",
        "timestamp": 1645541922
    },
    {
        "content": "<p>looks like it's just doing the deletion on a thread pool</p>",
        "id": 272816582,
        "sender_full_name": "The 8472",
        "timestamp": 1645543004
    },
    {
        "content": "<p>Also looks like it follows links by default, which seems dangerous for a recursive delete?</p>",
        "id": 272816663,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645543050
    },
    {
        "content": "<p>When not specifying any arguments <code>cargo clean</code> uses <code>std::fs::remove_dir_all</code> on the target directory: <a href=\"https://github.com/rust-lang/cargo/blob/06ee2296749120bdde747dd6d0ff076afb9b50f7/src/cargo/ops/cargo_clean.rs#L56\">https://github.com/rust-lang/cargo/blob/06ee2296749120bdde747dd6d0ff076afb9b50f7/src/cargo/ops/cargo_clean.rs#L56</a></p>",
        "id": 272821513,
        "sender_full_name": "bjorn3",
        "timestamp": 1645544887
    },
    {
        "content": "<p>On linux we could speed up recursive delete with io_uring, but... that's a lot just to speed up remove_dir_all. On windows I don't know of a better  option  than parallelism, with all the synchronous filter thingies (such as antivirus). As a user one could exempt the target dir from scanning.</p>",
        "id": 272845487,
        "sender_full_name": "The 8472",
        "timestamp": 1645554154
    },
    {
        "content": "<p>/me wonders why Windows can't just say \"OK, deleted\" while it's still processing the filters in the background. Windows would really benefit from the concept of \"deleted but still has open handles\".</p>",
        "id": 272850449,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645556315
    },
    {
        "content": "<p>There is since windows 10. It is called <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/ns-ntddk-_file_disposition_information_ex\"><code>FILE_DISPOSITION_POSIX_SEMANTICS</code></a>.</p>",
        "id": 272850964,
        "sender_full_name": "bjorn3",
        "timestamp": 1645556478
    },
    {
        "content": "<p>You would end up with a situation where a filter could read a file, as you have a handle, but it's parent directory does not exist because it's already been deleted.</p>",
        "id": 272851120,
        "sender_full_name": "Eh2406",
        "timestamp": 1645556527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/cargo.20clean/near/272850449\">said</a>:</p>\n<blockquote>\n<p>/me wonders why Windows can't just say \"OK, deleted\" while it's still processing the filters in the background. Windows would really benefit from the concept of \"deleted but still has open handles\".</p>\n</blockquote>\n<p>Bypassing filters can result in inconsistencies. For example shadow volume copies are done using a filter that buffers actions while performing the copy I believe.</p>",
        "id": 272851394,
        "sender_full_name": "bjorn3",
        "timestamp": 1645556658
    },
    {
        "content": "<p>We're already using it anway. <a href=\"https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library/std/src/sys/windows/fs.rs#L575\">https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library/std/src/sys/windows/fs.rs#L575</a></p>",
        "id": 272851424,
        "sender_full_name": "The 8472",
        "timestamp": 1645556674
    },
    {
        "content": "<p>NTFS also has some bottlenecks around concurrent accesses. In addition disabling 8.3 dos compatibility names supposedly gives a huge perf boost for NTFS.</p>",
        "id": 272851763,
        "sender_full_name": "bjorn3",
        "timestamp": 1645556826
    },
    {
        "content": "<p>Hmm, <code>rustup</code> also has custom logic for closing files to get around the windows slowness, right?</p>",
        "id": 272851997,
        "sender_full_name": "scottmcm",
        "timestamp": 1645556907
    },
    {
        "content": "<p>Does windows have faster filesystems? On linux I have my project directory on an ext4 with some YOLO mount options while the rest of the system is on btrfs.</p>",
        "id": 272852626,
        "sender_full_name": "The 8472",
        "timestamp": 1645557177
    },
    {
        "content": "<p>I'd highly recommend reading <a href=\"https://github.com/Microsoft/WSL/issues/873#issuecomment-425272829\">this</a> and <a href=\"https://github.com/Microsoft/WSL/issues/873#issuecomment-427211871\">this</a> for some background.</p>",
        "id": 272852958,
        "sender_full_name": "Chris Denton",
        "timestamp": 1645557343
    },
    {
        "content": "<p>Ah, too bad. Then obviously the best solution is to do windows development under wine in wsl2. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 272853761,
        "sender_full_name": "The 8472",
        "timestamp": 1645557703
    },
    {
        "content": "<p>Or use more threads.</p>",
        "id": 272853897,
        "sender_full_name": "The 8472",
        "timestamp": 1645557742
    },
    {
        "content": "<blockquote>\n<p>particularly on the system volume (so if you have a D: drive or partition, I recommend using that instead, since it likely has fewer filters attached).</p>\n</blockquote>\n<p>This might be useful</p>",
        "id": 272854077,
        "sender_full_name": "The 8472",
        "timestamp": 1645557827
    },
    {
        "content": "<p>(possibly off-topic)</p>\n<p>At the current time, I'm suspicious of using io_uring to speed up filesystem operations. I did a very crude version of <code>dirstat-rs</code> with the <code>io_uring</code> crate (just recursive <code>getdents</code> + <code>statx</code>). No matter how I tuned things, it was always slower but less parallel and used more total CPU time. The only thing I could gather from a profile is that most cycles were spent in a spinlock.</p>",
        "id": 272862006,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1645561698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120827\">@Ben Kimock (Saethlin)</span> The maintainer of <code>io_uring</code> tends to be extremely interested in performance issues; if you sent your prototype upstream, they might be able to figure out a solution to optimize either your code or the kernel implementation to eliminate that problem.</p>",
        "id": 272862438,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645561933
    },
    {
        "content": "<p>Hunh. I guess I just assumed the kernel stuff needed time to bake. Thanks, I'll raise this.</p>",
        "id": 272862731,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1645562113
    },
    {
        "content": "<p>The stuff that's already there should in theory be fairly solid. But it's <em>entirely</em> possible that you've hit some manner of scaling issue that hasn't previously been noticed.</p>",
        "id": 272864717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645563120
    },
    {
        "content": "<p>For instance, I can <em>imagine</em> that you might actually be one of the first to test a workload that's <em>just</em> getdents/statx.</p>",
        "id": 272864772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645563135
    },
    {
        "content": "<p>getdents is fairly new, so maybe it's not as optimized as some other IO paths</p>",
        "id": 272866561,
        "sender_full_name": "The 8472",
        "timestamp": 1645563816
    },
    {
        "content": "<p>I also guess there are lots of ways one can use it inefficiently, like doing io_uring_enter too often or not often enough so something gets starved and spins?</p>",
        "id": 272866815,
        "sender_full_name": "The 8472",
        "timestamp": 1645563957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/cargo.20clean/near/272851997\">said</a>:</p>\n<blockquote>\n<p>Hmm, <code>rustup</code> also has custom logic for closing files to get around the windows slowness, right?</p>\n</blockquote>\n<p>rustup does... extremely weird things to handle Windows, including for perf optimizations, yes.</p>",
        "id": 272883765,
        "sender_full_name": "Jubilee",
        "timestamp": 1645574116
    },
    {
        "content": "<p>The major thing is, in fact, \"don't just accept the story we are told about how NTFS is always slower, actually profile it\".</p>\n<p>...but also some extremely cursed code around the tail end of the self-update mechanism. &lt;_&lt;</p>",
        "id": 272884076,
        "sender_full_name": "Jubilee",
        "timestamp": 1645574291
    }
]