[
    {
        "content": "<p>Hello, I can't seem to find documentation on out-only parameters in rust.</p>\n<p>I'm trying to supress/fix rustcE0381 on a function that <em>must</em> initialize the buffer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">num_buffer</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">init_from</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">num_buffer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm trying to reuse code that copies &amp; transforms bytes obtained from a <code>to_le_bytes()</code> and/or <code>as_bytes()</code> from deep inside a struct v.</p>\n<p>In C# I could tell the compiler that it doesnt matter num_buffer isnt initialized by declaring the param with out, which also constraints the function to intialize the param. Is there something similar in (std) rust?</p>\n<p>Best,<br>\ngxt</p>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier</a></p>",
        "id": 243729660,
        "sender_full_name": "Guillaume Xavier Taillon",
        "timestamp": 1624494127
    },
    {
        "content": "<p>Short answer: no. The only true \"out parameters\" in rust are return values</p>",
        "id": 243729847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624494367
    },
    {
        "content": "<p>If you really need to do this, you can use <code>&amp;mut MaybeUninit&lt;[u8; 8]&gt;</code> and a healthy sprinkling of <code>unsafe</code></p>",
        "id": 243729975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624494576
    },
    {
        "content": "<p>Thanks! That's a lot more unsafe than I expected haha, I'll check it out.</p>",
        "id": 243730506,
        "sender_full_name": "Guillaume Xavier Taillon",
        "timestamp": 1624495264
    },
    {
        "content": "<p>Barring MaybeUninit, a type is a valid instance of its type only if it is initialized. You can just use something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">init_from</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where init_from returns <code>[u8; 8]</code> instead.</p>",
        "id": 243735623,
        "sender_full_name": "Jubilee",
        "timestamp": 1624501948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421637\">Guillaume Xavier Taillon</span> <a href=\"#narrow/stream/122651-general/topic/Out.20keyword.20to.20suppress.20E0381/near/243729660\">said</a>:</p>\n<blockquote>\n<p>In C# I could tell the compiler that it doesnt matter num_buffer isnt initialized by declaring the param with out, which also constraints the function to intialize the param. Is there something similar in (std) rust?</p>\n</blockquote>\n<p>Note that C# is <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.parameterinfo.isout?view=net-5.0#remarks\">slightly</a> lying to you there, as at the CLR level it's just a <code>ref</code> parameter that the compiler initialized to <code>default</code> before calling the method.  You can swap out the implementing DLL to one that doesn't initialize the value and the bytecode verifier will accept it.</p>\n<p>So the direct equivalent is passing a <code>&amp;mut</code> either to <code>let mut num_buffer: Option&lt;[u8; 8]&gt; = None;</code> (if you're thinking a reference type in C#) or to zero-initialize the buffer before calling it (if you're thinking a value type in C#).</p>\n<p>(C# can zero-initialize everything, but Rust can't, which is why the difference here exists.)</p>",
        "id": 243751253,
        "sender_full_name": "scottmcm",
        "timestamp": 1624520494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/Out.20keyword.20to.20suppress.20E0381/near/243729975\">said</a>:</p>\n<blockquote>\n<p>If you really need to do this, you can use <code>&amp;mut MaybeUninit&lt;[u8; 8]&gt;</code> and a healthy sprinkling of <code>unsafe</code></p>\n</blockquote>\n<p>With the major caveat that <code>&amp;mut T</code> =&gt; <code>&amp;mut MaybeUninit&lt;T&gt;</code> is not, in general, sound (althouhg it can be done interanly in sound APIs in specific cases) as the T can be overwritten with <code>MaybeUninit::uninit()</code></p>",
        "id": 243760853,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624527134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span>, you shouldn't need to perform that cast here, right? You \"uninitialize\" the buffer by replacing <code>let num_buffer: [u8; 8];</code> with <code>let num_buffer = MaybeUninit::&lt;[u8; 8]&gt;::uninit();</code> and then pass a mutable reference to that to <code>init_from</code> and <code>assume_init()</code> it before passing to <code>finish()</code></p>",
        "id": 243784797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624541130
    },
    {
        "content": "<p>But to reiterate what others (and I) have said, using return values is <em>the</em> way to do this. They are perfect out parameters, especially if RVO works properly, and you don't need any unsafe.</p>",
        "id": 243785103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624541260
    },
    {
        "content": "<p>Yeah, you can do it without that cast, although it would be easy to think that cast was fine, and design an api that assumed it, so I figured I'd mention it.</p>\n<p>Also I've sadly seen tons of cases where out-params are needed for perf for various reasons... Hopefully LLVM is a bit better now, since it's been a couple years, but it used to get very confused...</p>",
        "id": 243836879,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624563914
    },
    {
        "content": "<p>observationally as far as I can tell code returning arrays becomes something pretty decent at opt-level=3, but if it's more dynamic, it might have more problems.</p>",
        "id": 243849626,
        "sender_full_name": "Jubilee",
        "timestamp": 1624570425
    },
    {
        "content": "<p>makes me think we need better ABIs that support using more registers for return values and not just the one or two that the C ABIs use...</p>",
        "id": 243850275,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624570830
    },
    {
        "content": "<p>ideally you can use as many registers for return values as you can use for argument values</p>",
        "id": 243850364,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624570896
    },
    {
        "content": "<p>the cases i'm thinking of weren't arrays, but yeah, the ABI was a problem. Part of why I'm glad we keep it flexible, even if it is sometimes inconvenient</p>",
        "id": 243854408,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624573639
    },
    {
        "content": "<p><a href=\"https://docs.rs/uninit\">https://docs.rs/uninit</a> explains these issues quite in detail and offers an <code>Out&lt;'_, T&gt;</code> parameter pointer type</p>",
        "id": 244012702,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1624710416
    }
]