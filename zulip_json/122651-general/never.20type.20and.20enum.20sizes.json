[
    {
        "content": "<p>I thought that using the never type in an enum would \"cancel out\" that variant completely, allowing the compiler to pack it tighter:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(never_type)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Phase</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Expr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ident</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Ast</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Phase</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_Expr</span><span class=\"p\">(</span><span class=\"n\">P</span>::<span class=\"n\">Expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_Ident</span><span class=\"p\">(</span><span class=\"n\">P</span>::<span class=\"n\">Ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Late</span><span class=\"p\">(());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Phase</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Late</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ident</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Ast</span><span class=\"o\">&lt;</span><span class=\"n\">Late</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It doesn't seem to be the case:</p>\n<div class=\"codehilite\"><pre><span></span><code>assertion failed: `(left == right)`\n  left: `32`,\n right: `24`&#39;\n</code></pre></div>\n\n\n<p>Am I incorrectly assuming that those should be the same size?</p>",
        "id": 200111161,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591628930
    },
    {
        "content": "<p>Your expectation is wrong, unfortunately. See <a href=\"https://github.com/rust-lang/rust/issues/49298#issuecomment-380844923\">https://github.com/rust-lang/rust/issues/49298#issuecomment-380844923</a> and the many issues linked to that issue</p>",
        "id": 200142079,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1591642985
    },
    {
        "content": "<p>This is why the layout of rust is not fixed. So that we can allow adding optimizations like this :-)</p>\n<p>Anyway it seems that rust just fails to realize that optimization if the variant with <code>!</code> also contains a non zero-sized second field. Also the fact that <code>P</code> is generic could maybe play a role in making it harder to detect the optimization (through probably should not as resolving the types should be done before doing anything related to that kind of optimization).</p>",
        "id": 200146740,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1591645551
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3c95b68bcbbf75bd2e39c94f5f9da990\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3c95b68bcbbf75bd2e39c94f5f9da990</a></p>",
        "id": 200146829,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1591645580
    },
    {
        "content": "<p>I didn't saw what <span class=\"user-mention silent\" data-user-id=\"124289\">Hanna Kruppe</span>  had written. Which explains why it doesn't work for that specific case.</p>",
        "id": 200147260,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1591645808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> thank you for the link (and your attempts to coalesce all the issues into one!). One thing I didn’t see is if leaving space is intended as a “final” / “desired” end state, or if it’s just to prevent bad code for now.</p>",
        "id": 200209912,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591701832
    },
    {
        "content": "<p>I think that's here to stay, the desire to be able to eliminate temporaries won't go away. The specific comment I linked to seems to indicate this is also the T-compiler position.</p>",
        "id": 200210198,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1591701977
    },
    {
        "content": "<p>Interesting; one optimization preventing another. </p>\n<p>With zero actual data to prove it, I’d feel like the space saving of the smaller enum would outweigh the one-time moving of temporaries.</p>",
        "id": 200210380,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591702125
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 200516211,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> my reasoning is that temporaries are everywhere, whereas variants with an uninhabited <em>and</em> non-ZST data should be quite rare - rarer than <code>Result&lt;T, !&gt;</code>, anyway</p>",
        "id": 202036432,
        "sender_full_name": "eddyb",
        "timestamp": 1593126651
    },
    {
        "content": "<p>Perhaps I misunderstood which temporaries were being referred to. I was thinking it was temporaries when constructing the enum, but I'm now guessing that it's a broader scope.</p>",
        "id": 202037579,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593127795
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/49298#issuecomment-380615281\">https://github.com/rust-lang/rust/issues/49298#issuecomment-380615281</a> I assume</p>",
        "id": 202038739,
        "sender_full_name": "alercah",
        "timestamp": 1593128903
    },
    {
        "content": "<p>If you think about the abstract semantics here, you get a temporary <code>String</code> returned from <code>String::new</code>, then the panic happens. The temporary is dropped. <code>x</code> never gets touched.</p>\n<p>The optimization here is not to allocate space for the temporary on the stack, but to put it directly into the memory allocated for <code>x</code>. This overwrites the value previously in <code>x</code>, but it's okay, because the panic causes you to lose track of it anyway.</p>\n<p>But if <code>Option&lt;(String, !)&gt;</code> is zero-sized, you can't do this optimization, because you'd actually write to the memory allocated for <code>y</code>. And that in turn means that you can't do this optimization for generic <code>Option&lt;(String, T)&gt;</code> until monomorphization when you can be confident that <code>T</code> is nonempty.</p>",
        "id": 202039124,
        "sender_full_name": "alercah",
        "timestamp": 1593129355
    },
    {
        "content": "<p>That said, this might be a missed safe case of the optimization: even though the <code>_Expr</code> variant needs to have space for the <code>i32</code>, I don't think it needs space for a discriminant. You can never have a valid value with the <code>_Expr</code> variant.</p>",
        "id": 202039722,
        "sender_full_name": "alercah",
        "timestamp": 1593129751
    },
    {
        "content": "<p>If it was the other way around, with <code>((), i32)</code> and <code>(!, String)</code> variants, you'd still need 3 words for the <code>String</code>, but again I don't think you need space for a discriminant. So this could still be size 24 and not 32.</p>",
        "id": 202040024,
        "sender_full_name": "alercah",
        "timestamp": 1593129996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> thoughts?</p>",
        "id": 202041136,
        "sender_full_name": "alercah",
        "timestamp": 1593131003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> in order to optimize away temporaries you'd have to check the layout or assume you can't (especially if generics are involved). I guess we could maybe special-case <code>enum</code> variants (but still have <code>(!, T)</code>be the size of <code>T</code>), with some work?</p>",
        "id": 202041295,
        "sender_full_name": "eddyb",
        "timestamp": 1593131157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> reading now, seems like you said the same thing heh (in more detail)</p>",
        "id": 202041393,
        "sender_full_name": "eddyb",
        "timestamp": 1593131224
    },
    {
        "content": "<p><code>Option&lt;(!, T)&gt;</code> and similar are good examples because you might have non-ZST <code>(!, T)</code> that isn't stored in <code>Option</code> at all</p>",
        "id": 202041436,
        "sender_full_name": "eddyb",
        "timestamp": 1593131279
    },
    {
        "content": "<p>so basically you can't get rid of the temporary when constructing variants of enums. that still sounds pretty terrible</p>",
        "id": 202041492,
        "sender_full_name": "eddyb",
        "timestamp": 1593131318
    },
    {
        "content": "<p>ah that may well be that I am saying the same thing with more words :)</p>\n<p>I'm not sure what you mean by \"non-ZST <code>(!, T)</code> that isn't stored in <code>Option</code> at all\"</p>",
        "id": 202044085,
        "sender_full_name": "alercah",
        "timestamp": 1593134863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> I meant that you could theoretically have a ZST <code>Option&lt;(!, T)&gt;</code> (no <code>Some</code> variant) while <code>(!, T)</code> remaining non-ZST (to support partial init)</p>",
        "id": 203352041,
        "sender_full_name": "eddyb",
        "timestamp": 1594272690
    },
    {
        "content": "<p>but then <code>Some(expr)</code> can't be made in-place unless you know the layout of <code>expr</code>'s type</p>",
        "id": 203352098,
        "sender_full_name": "eddyb",
        "timestamp": 1594272725
    },
    {
        "content": "<p>Hm, now that I think about it, is that not the case already though, because of niches? Without knowing the layout of <code>expr</code>'s type, you don't know whether it's allocated at offset 0 or 1 or 8.</p>",
        "id": 204968796,
        "sender_full_name": "alercah",
        "timestamp": 1595626012
    },
    {
        "content": "<p>Unless the compiler takes a conservative approach to it pre-monomorphization by assuming there's no niche, allocating enough extra space to store the discriminant just in case (to avoid going off the end), and then letting monomorphization figure out where the discriminant actually goes and what the actual object address is.</p>",
        "id": 204968986,
        "sender_full_name": "alercah",
        "timestamp": 1595626178
    },
    {
        "content": "<p>I don't know anything about the workings of the compiler, but it seems to me it would at the very least need to know the byte offset of <code>expr</code> in <code>Option&lt;T&gt;</code> pre-monomorphization to avoid something ridiculous like that.</p>",
        "id": 204969140,
        "sender_full_name": "alercah",
        "timestamp": 1595626290
    },
    {
        "content": "<p>If I assume that's the case, and the pre-monomorphization code has some way to know the byte offset <code>b</code> of the <code>T</code> in <code>Some(T)</code>, say as a <code>usize</code>, then perhaps that could be extended by sending a <code>Option&lt;usize&gt;</code> and, if <code>b.is_none()</code>, then the pre-monomorphization code will know that <code>expr</code> will not fit into the object, forcing a temporary stack allocation.</p>",
        "id": 204969303,
        "sender_full_name": "alercah",
        "timestamp": 1595626402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 204970445,
        "sender_full_name": "alercah",
        "timestamp": 1595627381
    },
    {
        "content": "<p>The offset isn't known before monomorphization, but that isn't a problem: as long as it'll be <em>some</em> offset (as opposed to rerouting to an entirely different location), it's just as easy to compute it at monomorphization time. Note that this isn't really enum specific, e.g. even with <code>#[repr(C)] struct Pair&lt;T&gt;(T, T)</code> you can't know the offset of the second field without knowing what's substituted for T.</p>",
        "id": 204971960,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1595628674
    },
    {
        "content": "<p>(And on that note it still doesn't make sense that <code>core</code> doesn't have an offset_of macro)</p>",
        "id": 204972462,
        "sender_full_name": "Lokathor",
        "timestamp": 1595629106
    },
    {
        "content": "<p>I guess you could add it now that raw references exist.</p>",
        "id": 204981497,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595640208
    },
    {
        "content": "<p>Hm, I guess in order to really understand it I'd need to look at the compiler code, wouldn't I?</p>",
        "id": 205073748,
        "sender_full_name": "alercah",
        "timestamp": 1595810008
    }
]