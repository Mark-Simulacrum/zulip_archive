[
    {
        "content": "<p>I'm trying to figure out a compiler error I don't fully understand.</p>",
        "id": 206365882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924213
    },
    {
        "content": "<p>I first wrote this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sockets</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">AsRawFd</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206365892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924241
    },
    {
        "content": "<p>That gave me this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0310]: the parameter type `impl AsRawFd` may not live long enough\n   --&gt; src/lib.rs:117:58\n    |\n117 |     pub fn connect(&amp;mut self, sockets: impl IntoIterator&lt;Item = &amp;impl AsRawFd&gt;) -&gt; anyhow::Result&lt;u32&gt; {\n    |                                                          ^^^^^^^^------------\n    |                                                          |       |\n    |                                                          |       help: consider adding an explicit lifetime bound...: `impl AsRawFd + &#39;static`\n    |                                                          ...so that the reference type `&amp;&#39;static impl AsRawFd` does not outlive the data it points at\n</code></pre></div>",
        "id": 206365936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924271
    },
    {
        "content": "<p>I got a similar error if I tried to use <code>'_</code>.</p>",
        "id": 206365940,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924293
    },
    {
        "content": "<p>So, I wrote this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">connect</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sockets</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">AsRawFd</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206365952,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924317
    },
    {
        "content": "<p>Which gave me <em>two</em> of this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0309]: the parameter type `impl AsRawFd` may not live long enough\n   --&gt; src/lib.rs:117:62\n    |\n117 |     pub fn connect&lt;&#39;a&gt;(&amp;mut self, sockets: impl IntoIterator&lt;Item = &amp;&#39;a impl AsRawFd&gt;) -&gt; anyhow::Result&lt;u32&gt; {\n    |                                                              ^^^^^^^^^^^------------\n    |                                                              |          |\n    |                                                              |          help: consider adding an explicit lifetime bound...: `impl AsRawFd + &#39;a`\n    |                                                              ...so that the reference type `&amp;&#39;a impl AsRawFd` does not outlive the data it points at\n</code></pre></div>",
        "id": 206365956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924346
    },
    {
        "content": "<p>I finally had to write this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">connect</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sockets</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">AsRawFd</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206365958,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924357
    },
    {
        "content": "<p>And I don't understand why.</p>",
        "id": 206365959,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924361
    },
    {
        "content": "<p>I'd appreciate some help understanding this interesting corner of references and lifetimes.</p>",
        "id": 206366008,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596924433
    },
    {
        "content": "<p>I think it might be helpful to desugar the <code>impl</code>s to understand this, like this (for the original snippet, no idea why it defaults to <code>'static</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>    pub fn connect&lt;I&gt;(&amp;mut self, sockets: I) -&gt; anyhow::Result&lt;u32&gt;\n    where I: IntoIterator, &amp;&#39;static I::Item: AsRawFd\n</code></pre></div>",
        "id": 206366962,
        "sender_full_name": "nagisa",
        "timestamp": 1596925938
    },
    {
        "content": "<p><code>'static</code> is fairly clearly wrong. :)</p>",
        "id": 206366982,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596925980
    },
    {
        "content": "<p>I'm just not understanding why the <code>+ 'a</code> would be required, and for that matter why the lifetime needs specifying explicitly at all.</p>",
        "id": 206366998,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596926015
    },
    {
        "content": "<p>I recall there being a papercut issue filled about this â€“ IIRC the conclusion was that although in this particular setting the lifetimes could be inferred from each other, this in particular is only such special case/situation.</p>",
        "id": 206367133,
        "sender_full_name": "nagisa",
        "timestamp": 1596926199
    },
    {
        "content": "<p>That is in <code>&amp;'a Bound: Trait + 'a</code> the latter lifetime is superfluous as they both say the same thing.</p>",
        "id": 206367239,
        "sender_full_name": "nagisa",
        "timestamp": 1596926362
    },
    {
        "content": "<p>OK then, I'm now less confused. :)</p>",
        "id": 206367289,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596926434
    },
    {
        "content": "<p>I was assuming this had some meaning I didn't understand, rather than being redundant.</p>",
        "id": 206367298,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596926448
    },
    {
        "content": "<p>I guess someobody might want to have something like <code>'b: 'a, &amp;'a Bound: Trait + 'b</code> in some extremely rare case?</p>",
        "id": 206367300,
        "sender_full_name": "nagisa",
        "timestamp": 1596926454
    },
    {
        "content": "<p>Thanks for the explanation. :)</p>",
        "id": 206367301,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596926456
    },
    {
        "content": "<p>(I can't easily imagine a scenario where that'd be useful, but sure, you <em>could</em> do that. You just shouldn't have to write it out in the normal case.)</p>",
        "id": 206367315,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596926490
    },
    {
        "content": "<p>A 'static trait bound would also work here, but it might be a stronger bound than you need:<br>\n<a href=\"https://doc.rust-lang.org/rust-by-example/scope/lifetime/static_lifetime.html#trait-bound\">https://doc.rust-lang.org/rust-by-example/scope/lifetime/static_lifetime.html#trait-bound</a></p>",
        "id": 206367507,
        "sender_full_name": "teor",
        "timestamp": 1596926808
    },
    {
        "content": "<p>The actual argument a caller would pass in will not have a static lifetime.</p>",
        "id": 206367582,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596926913
    },
    {
        "content": "<p>Maybe I'm confused here:<br>\n\"As a trait bound, 'static means the type does not contain any non-static references.\"</p>\n<p>For example, an owned RawFd value would meet the AsRawFd + 'static bound.</p>",
        "id": 206368004,
        "sender_full_name": "teor",
        "timestamp": 1596927752
    },
    {
        "content": "<p>That seems like an unnecessary restriction to impose on the caller.</p>",
        "id": 206368740,
        "sender_full_name": "nagisa",
        "timestamp": 1596929335
    },
    {
        "content": "<p>One could imagine something like <code>Buffered&lt;'a, File&gt;</code> implementing <code>AsRawFd</code> but not <code>'static</code>.</p>",
        "id": 206368748,
        "sender_full_name": "nagisa",
        "timestamp": 1596929375
    },
    {
        "content": "<blockquote>\n<p>it might be a stronger bound than you need:</p>\n</blockquote>\n<p>I think we're agreeing here.</p>",
        "id": 206369332,
        "sender_full_name": "teor",
        "timestamp": 1596930431
    }
]