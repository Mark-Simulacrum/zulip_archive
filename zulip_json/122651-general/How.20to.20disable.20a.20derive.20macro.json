[
    {
        "content": "<p>If a crate <code>foo_derive</code> declares a derive macro <code>derive(Foo)</code>, is there a way to disable it using a cargo feature flag? If I just say the crate is not there, all the uses of <code>derive(Foo)</code> in my code will break, but I would like them to be ignored (produce no code) without having to annotate all uses of <code>derive(Foo)</code> with the feature flag.</p>",
        "id": 209585192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599697885
    },
    {
        "content": "<p>you could make your own proc-macro crate that defines a dummy derive</p>",
        "id": 209585291,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599698002
    },
    {
        "content": "<p>and <code>use my_crate::Dummy as Foo;</code></p>",
        "id": 209585309,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599698024
    },
    {
        "content": "<p>Would you include the stub crate only if the feature is disabled?</p>",
        "id": 209585392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599698097
    },
    {
        "content": "<p>sure</p>",
        "id": 209585486,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599698206
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">&quot;x&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo_derive</span>::<span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">&quot;x&quot;</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">my_crate</span>::<span class=\"n\">Dummy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209585506,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599698235
    },
    {
        "content": "<p>I mean at the toml level. Would you have both crates compiled in the Foo-for-real case?</p>",
        "id": 209585709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599698451
    },
    {
        "content": "<p>oh I see, features are only additive</p>",
        "id": 209585803,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599698547
    },
    {
        "content": "<p>well, not sure then</p>",
        "id": 209585806,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599698552
    },
    {
        "content": "<p>Since derive is an attribute, you probably want <code>cfg_attr</code>:</p>\n<p><code>#[cfg_attr(reason, derive(Thing))]</code></p>",
        "id": 209588710,
        "sender_full_name": "Lokathor",
        "timestamp": 1599702721
    },
    {
        "content": "<p>Are you in control of all of this code?</p>",
        "id": 209589030,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599703083
    },
    {
        "content": "<p>If so, you can pass a feature flag to the derive macro code and branch on it</p>",
        "id": 209589050,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599703100
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/snafu/blob/7fba216782cd1a0466b077b2667c15bb5f397203/snafu-derive/src/lib.rs#L1722-L1730\">For example</a></p>",
        "id": 209589063,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599703127
    },
    {
        "content": "<p>I did write the derive macro, so I went with that approach. It just made me wonder why all derive macros don't have a disable flag</p>",
        "id": 209593473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599709670
    },
    {
        "content": "<p>They do, cfg_attr is how you do it</p>",
        "id": 209593869,
        "sender_full_name": "Lokathor",
        "timestamp": 1599710282
    },
    {
        "content": "<p>Because it‚Äôs not <em>usual</em> to want to disable the derive. üòÖ</p>",
        "id": 209629090,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599739980
    },
    {
        "content": "<p>What other code do you use regularly that has a global ‚Äúdo nothing‚Äù switch?</p>",
        "id": 209629213,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599740064
    },
    {
        "content": "<p>And, as stated, cfg_attr. <a href=\"https://stackoverflow.com/q/42551113/155423\">https://stackoverflow.com/q/42551113/155423</a></p>",
        "id": 209629242,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599740089
    },
    {
        "content": "<p>Certainly a global \"do nothing\" switch is a weird and undesirable thing to force on a design, but it seems like a natural consequence of the rules around derive macros living in different crates and feature flag monotonicity</p>",
        "id": 209636181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599743475
    },
    {
        "content": "<p>if you call a function in a crate you didn't list as a dependency you get an error, not just \"do nothing\". A derive is the same.</p>",
        "id": 209643651,
        "sender_full_name": "Lokathor",
        "timestamp": 1599745894
    }
]