[
    {
        "content": "<p>If I know that merge some other PR will make my own PR unmergable, is there a way to resolve this before the other PR lands?</p>\n<p>I think the most obvious solution is to rebase my changes over the other PR's branch, which might be bad because what if that PR fails CI?</p>",
        "id": 247577339,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627562461
    },
    {
        "content": "<p>I would just wait for the other PR to land personally</p>",
        "id": 247578653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627563189
    },
    {
        "content": "<p>I usually try to get my PRs merged first (lol)</p>",
        "id": 247578747,
        "sender_full_name": "apiraino",
        "timestamp": 1627563241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/resolving.20merge.20conflicts.20before.20a.20PR.20gets.20landed/near/247578653\">said</a>:</p>\n<blockquote>\n<p>I would just wait for the other PR to land personally</p>\n</blockquote>\n<p>Yeah, but we might be able to (have a functionality to) automatically detect when one PR creates conflicts for other PRs to make things run more smoothly.</p>",
        "id": 247581071,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627564414
    },
    {
        "content": "<p>which might be helpful but there really isn't an easy way to resolve this before the other PR gets merged.</p>",
        "id": 247581202,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627564477
    },
    {
        "content": "<p>you could locally rebase your branch on top of the other PR</p>",
        "id": 247584904,
        "sender_full_name": "The 8472",
        "timestamp": 1627566340
    },
    {
        "content": "<p>you don't even need to add a new remote, github includes PRs in the repo heads</p>",
        "id": 247585024,
        "sender_full_name": "The 8472",
        "timestamp": 1627566389
    },
    {
        "content": "<p>bors will often comment on the PR if a merge has made the PR unmergeable</p>",
        "id": 247586609,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1627567144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361356\">@fee1-dead</span> that wouldn't scale very well - there are over 400 open PRs for rust-lang/rust, you'd end up with hundreds of notifications. Especially for big PRs which conflict with literally everything.</p>",
        "id": 247613324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627579070
    },
    {
        "content": "<p>It could be done only for approved PRs and we can just check if any PR earlier in the queue can cause conflicts for those later in the queue.</p>",
        "id": 247668889,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627618890
    },
    {
        "content": "<p>That would be less likely to spam notifications, but I'm still not convinced how much benefit it has. What is the expected outcome here? What are people supposed to do when they see a conflict, unapproved the PR? Then neither gets merged. And this doesn't handle semantic conflicts at all because git doesn't handle semantic conflicts.</p>",
        "id": 247695397,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627644363
    }
]