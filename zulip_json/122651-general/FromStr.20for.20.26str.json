[
    {
        "content": "<p>Is there a reason why FromStr is not implemented for &amp;str?</p>",
        "id": 201692864,
        "sender_full_name": "chabing",
        "timestamp": 1592895500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247690\">chabing</span> <a href=\"#narrow/stream/122651-general/topic/FromStr.20for.20.26str/near/201692864\">said</a>:</p>\n<blockquote>\n<p>Is there a reason why FromStr is not implemented for &amp;str?</p>\n</blockquote>\n<p>Because the return value of <code>FromStr::from_str</code> cannot use the lifetime of the <code>&amp;str</code> that was passed in. Hence why <code>FromStr</code> is implemented for <code>String</code> but not for <code>&amp;str</code>.</p>",
        "id": 201693018,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1592895651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125267\">Peter Rabbit</span> <a href=\"#narrow/stream/122651-general/topic/FromStr.20for.20.26str/near/201693018\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247690\">chabing</span> <a href=\"#narrow/stream/122651-general/topic/FromStr.20for.20.26str/near/201692864\">said</a>:</p>\n<blockquote>\n<p>Is there a reason why FromStr is not implemented for &amp;str?</p>\n</blockquote>\n<p>Because the return value of <code>FromStr::from_str</code> cannot use the lifetime of the <code>&amp;str</code> that was passed in. Hence why <code>FromStr</code> is implemented for <code>String</code> but not for <code>&amp;str</code>.</p>\n</blockquote>\n<p>So what would be the best way to do something like this (contrived) example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">std</span>::<span class=\"kt\">str</span>::<span class=\"n\">FromStr</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s\">&quot;3&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s\">&quot;abc&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201694224,
        "sender_full_name": "chabing",
        "timestamp": 1592896687
    },
    {
        "content": "<p>I'd implement your own trait, following the example of <code>TryFrom</code></p>",
        "id": 201721717,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592917333
    }
]