[
    {
        "content": "<p>I'm hazy on what kinds of pointers are valid for reads/writes with respect to alignment requirements. Can someone school me?</p>\n<p>I'm pretty confident this is invalid:</p>\n<div class=\"codehilite\"><pre><span></span><code>let mut x: [u8; 8] = [0; 8];  // edit: had [u8; 4] here earlier\nlet p = &amp;mut x as *mut _ as *mut u64;\nlet value = 42;\n\n// UB: destination may not be u64 aligned.\nunsafe {\n    // Write one u64 to x.\n    std::ptr::write_bytes(p, value, 1);\n}\n</code></pre></div>\n\n\n<p>But I'm less clear on these, where you're writing individual bytes into a larger integer:</p>\n<div class=\"codehilite\"><pre><span></span><code>let mut x: u64 = 0;\nlet p = &amp;mut x as *mut _ as *mut u8;\nlet value = 42;\n\n// A: aligned for u64, but partial write\nunsafe {\n    std::ptr::write_bytes(p, value, 1);\n}\n\n// B: aligned for u64, but partial write and &quot;weird&quot; number of bytes\nunsafe {\n    std::ptr::write_bytes(p, value, 3);\n}\n\n// C: unaligned for u64 (but does that matter?) and partial write\nunsafe {\n    std::ptr::write_bytes(p.add(1), value, 1);\n}\n</code></pre></div>\n\n\n<p>Are A, B, and C all valid, invalid, or a mix of both?</p>",
        "id": 209896616,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599939504
    },
    {
        "content": "<p>The requirement is for the pointee's alignment, which is <code>u8</code> here, so they all should be fine from what I understand</p>",
        "id": 209896721,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599939686
    },
    {
        "content": "<p>Although I think they are all implementation defined behavior because of endianness</p>",
        "id": 209896772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599939730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>, just to be clear, the very first example _is_ invalid though, right?</p>",
        "id": 209896881,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599939946
    },
    {
        "content": "<p>Yeah</p>",
        "id": 209896885,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599939953
    },
    {
        "content": "<p>Cool, thank you</p>",
        "id": 209896904,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599939963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>, thanks also. I know that different endianness causes different things to happen here, but I'm assuming I can rely on it to be exactly one thing on LE and exactly another thing on BE. There's no UB I assume.</p>",
        "id": 209897161,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599940413
    },
    {
        "content": "<p>Actually that's a good question for UCG. Is transmuting integer types specified? I'm pretty sure this is one of the areas where the zeitgeist is so strong that the spec can't really say it is anything else</p>",
        "id": 209897279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599940570
    },
    {
        "content": "<p>AFAIK current memory model is trying to avoid typing memory, which means that the only thing that matters is the accessing pointer's type</p>",
        "id": 209897309,
        "sender_full_name": "simulacrum",
        "timestamp": 1599940676
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html\">https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html</a> doesn't say anything about endianness but it does mention C compatibility, which would imply the usual behavior wrt endianness</p>",
        "id": 209897349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599940703
    },
    {
        "content": "<p>we will ~shortly have <code>&amp;u64 -&gt; &amp;[u8; 8]</code> in std which guarantees that, <a href=\"https://github.com/rust-lang/rust/pull/76610\">https://github.com/rust-lang/rust/pull/76610</a></p>",
        "id": 209897370,
        "sender_full_name": "simulacrum",
        "timestamp": 1599940798
    },
    {
        "content": "<p>Plus <a href=\"https://github.com/rust-lang/rfcs/pull/2981\">https://github.com/rust-lang/rfcs/pull/2981</a>, where one of the primary motivations is looking at things as slices of bytes safely.</p>",
        "id": 209897450,
        "sender_full_name": "scottmcm",
        "timestamp": 1599940913
    },
    {
        "content": "<p>OoO I did not realize <code>write_bytes</code> requires <code>dst</code> to be aligned. this is awesome!. it means that the implementation could know the alignment at compile time and potentially be faster than <code>memset</code> :)</p>",
        "id": 209920870,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1599986738
    }
]