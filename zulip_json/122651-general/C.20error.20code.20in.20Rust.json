[
    {
        "content": "<p>Is there an idiom to represent C error codes in Rust C FFI? I have a C function that returns a <code>libc::c_int</code>, where <code>0</code> indicates success, and the rest are error conditions. </p>\n<p>I was thinking of representing the error conditions as <code>#[repr(C, transparent)] struct Error(pub NonZero&lt;c_int&gt;);</code>, and then using <code>Result&lt;???, Error&gt;</code> in C FFI, the question is, what do I put in <code>()</code> so that <code>0</code> gets translated to <code>Ok</code> ?</p>",
        "id": 137034023,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541168341
    },
    {
        "content": "<p>Or shall I just use <code>Option&lt;Error&gt;</code> as the return type? (that should map <code>0</code> to <code>None</code>)</p>",
        "id": 137034262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541168398
    },
    {
        "content": "<p>Damn, NonZero&lt;T&gt; does not exist anymore - how can I dispatch to the appropriate <code>NonZeroU{X}</code> type from <code>c_int</code> ?</p>",
        "id": 137037020,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541169017
    },
    {
        "content": "<p>how unstable are you willing to go?</p>",
        "id": 137038060,
        "sender_full_name": "oli",
        "timestamp": 1541169253
    },
    {
        "content": "<p>We do have <a href=\"https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src/libcore/nonzero.rs#L17\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src/libcore/nonzero.rs#L17\">this attribute</a> which allows compiler internals to invent <code>NonZero</code></p>",
        "id": 137038332,
        "sender_full_name": "oli",
        "timestamp": 1541169323
    },
    {
        "content": "<p>(and it will never be stabilized)</p>",
        "id": 137038572,
        "sender_full_name": "oli",
        "timestamp": 1541169379
    },
    {
        "content": "<p>Thanks, that might do. I feel it really weird that nobody raised \"how do we use <code>NonZero</code> for libc types in the RFC that decided to kill NonZero&lt;T&gt; =/</p>",
        "id": 137038620,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541169391
    },
    {
        "content": "<p>well... I think the idea is to have integer subtypes at some point. So that you can say things like <code>i32&lt;5..30&gt;</code> or whatever bikeshedded syntax we get</p>",
        "id": 137038801,
        "sender_full_name": "oli",
        "timestamp": 1541169435
    },
    {
        "content": "<p>the second problem is that result is not FFI safe</p>",
        "id": 137039963,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541169711
    },
    {
        "content": "<p>well... I'd use <code>Option</code> in that case.</p>",
        "id": 137040805,
        "sender_full_name": "oli",
        "timestamp": 1541169908
    },
    {
        "content": "<p>Or create an <code>FfiResult</code></p>",
        "id": 137040915,
        "sender_full_name": "oli",
        "timestamp": 1541169932
    },
    {
        "content": "<p>Is there a way to easily create an <code>FfiResult</code> type that has the same API as <code>Result</code> ?</p>",
        "id": 137041543,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541170065
    },
    {
        "content": "<blockquote>\n<p>how can I dispatch to the appropriate NonZeroU{X} type from c_int ?</p>\n</blockquote>\n<p>maybe you could</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasNonZeroUnsigned</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">NonZeroUnsigned</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasNonZeroUnsigned</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">NonZeroUnsigned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NonZeroU32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasNonZeroUnsigned</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">NonZeroUnsigned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NonZeroUsize</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">NonZeroCUInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">c_int</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasNonZeroUnsigned</span><span class=\"o\">&gt;</span>::<span class=\"n\">NonZeroUnsigned</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 137041699,
        "sender_full_name": "kennytm",
        "timestamp": 1541170090
    },
    {
        "content": "<p>that's a good idea <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span>  :)</p>",
        "id": 137041825,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541170121
    }
]