[
    {
        "content": "<p>Something like <code>explicit_generic_args_with_impl_trait</code> (<a href=\"https://github.com/rust-lang/rust/issues/83701\">#83701</a>) has no apparent blockers and no design concerns (there's really only one way to do it), and it's been implemented since <a href=\"https://github.com/rust-lang/rust/issues/86176\">#86176</a> landed in August. How long do features need to wait before being stabilized when in a situation like this? Asking both about this feature and more generally.</p>",
        "id": 267671345,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1641950426
    },
    {
        "content": "<p>Having only skimmed the issue, one concern I'd have is does this feature preclude allowing users to specify the types of <code>impl Trait</code> arguments in the future?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//         ^^^^^^</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267674995,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641954145
    },
    {
        "content": "<p>Also, to (try to) answer your question, I think it varies a lot. Usually there needs to be a decent amount of successful use \"in the wild\" first.</p>",
        "id": 267675027,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641954207
    },
    {
        "content": "<p>Internal use can qualify too. Is this feature used in the compiler? The standard library? Rustdoc or Clippy?</p>",
        "id": 267675038,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641954234
    },
    {
        "content": "<p>(FWIW, I'm just stating what I've seen in practice; I don't know if there are any hard rules about this.)</p>",
        "id": 267675093,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641954272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/Baking.20period.3F/near/267674995\">said</a>:</p>\n<blockquote>\n<p>Having only skimmed the issue, one concern I'd have is does this feature preclude allowing users to specify the types of <code>impl Trait</code> arguments in the future?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//         ^^^^^^</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is disallowed. I think there's some consensus that <code>impl Trait</code> shouldn't be explicit specifiable. Back when the <code>impl Trait</code> is proposed it's suggested that this'd treated as a syntax sugar but with RPIT and TAIT I think people don't treat these as sugar for generics anymore.</p>",
        "id": 267679269,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641958938
    },
    {
        "content": "<p>The thing that needs to be addressed is to create some informative diagnostics message when compiler rejects the code you mentioned.</p>",
        "id": 267679325,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641959022
    },
    {
        "content": "<p>As the implementator of the feature gate I want its stablisation too, but I think the diagnostics improvement need to happen before stabilisation. I might have a go when I have time.</p>",
        "id": 267679452,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641959152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/122651-general/topic/Baking.20period.3F/near/267671345\">said</a>:</p>\n<blockquote>\n<p>How long do features need to wait before being stabilized when in a situation like this?</p>\n</blockquote>\n<p>When there's not a design, there's no guarantee of anything.</p>\n<p>The big question that jumps to mind here is between:</p>\n<ul>\n<li>APIT means it can't be turbofished, and</li>\n<li>APIT adds anonymous parameters in occurrence order</li>\n</ul>\n<p>I've seen both suggested at different times.</p>\n<p>Generally I think it needs someone to argue for a particular design.  A particularly common question was whether there should be a way to semver-compatibly switch between generics and APITs.</p>",
        "id": 267740584,
        "sender_full_name": "scottmcm",
        "timestamp": 1642001609
    }
]