[
    {
        "content": "<p>I'm having a problem were I need a constraint that looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>F: for&lt;&#39;b&gt; FnOnce(&amp;&#39;b SomeFixedType) -&gt; T, T: &#39;b\n</code></pre></div>\n\n\n<p>Where <code>SomeFixedType</code> is not generic, but the return value is. I want the returned value to have the contrained <code>'b</code> lifetime, but based on the error messages I'm seeing with simply <code>FnOnce(&amp;SomeFixedType) -&gt; T</code> as the constraint, it seems to not be able to do this. Is there a way to achieve this constraint? Some special syntax for function traits?</p>",
        "id": 208845255,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599061633
    },
    {
        "content": "<p>The caller of your function would chose a <code>T</code>, but then it would need to be valid for all possible <code>'b</code>. The only possible lifetime for this would be <code>'static</code>: <code>T: 'static</code>.</p>",
        "id": 208846236,
        "sender_full_name": "bjorn3",
        "timestamp": 1599062008
    },
    {
        "content": "<p>Shouldn't the 'all possible <code>'b</code>' semantics only apply to function inputs? I <em>think</em> I should be able to take any function which operates on a referenced <code>'b</code> and return something which will only be valid for the caller to use while <code>'b</code> is valid, i.e. it doesn't outlive that <code>'b</code>? Or maybe I'm wholly misinterpreting the error message I see: when I call this generic function with a <code>F: FnOnce(&amp;SomeFixedType) -&gt; T</code> constraint, I get an error at the call site complaining that the input reference lifetime (let's call it <code>'b</code> for consistency) must outlive the returned value's lifetime.</p>",
        "id": 208847257,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599062396
    },
    {
        "content": "<p>The thing is that <code>T</code> is chosen by the caller of the function, not by the implementation.</p>",
        "id": 208847534,
        "sender_full_name": "bjorn3",
        "timestamp": 1599062479
    },
    {
        "content": "<p>I agree, but the caller is also choosing <code>F</code>, so there should be a way to express this relationship between <code>F</code> and <code>T</code>?</p>",
        "id": 208847626,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599062515
    },
    {
        "content": "<p>Yes, but then the caller must also choose <code>'b</code>.</p>",
        "id": 208847783,
        "sender_full_name": "bjorn3",
        "timestamp": 1599062554
    },
    {
        "content": "<p>Okay, but then is there a correct way of taking a function that should return a value not outliving a parameter? Sorry if I'm missing something here, but that feels like it should be possible as far as lifetime checking goes.</p>",
        "id": 208848151,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599062704
    },
    {
        "content": "<p>Could you give (a gist of) the function you are trying to get compiling?</p>",
        "id": 208848594,
        "sender_full_name": "bjorn3",
        "timestamp": 1599062899
    },
    {
        "content": "<p>Here's a stripped down example that demonstrates the error (with rustc 1.46.0):</p>\n<div class=\"codehilite\"><pre><span></span><code>use futures::future::{Future, FutureExt, LocalBoxFuture};\n\ntrait DoThing {\n    fn do_thing&lt;&#39;a, F, Fut, Ret&gt;(&amp;&#39;a mut self, f: F) -&gt; LocalBoxFuture&lt;&#39;a, Ret&gt;\n    where\n        F: FnOnce(&amp;mut u64) -&gt; Fut + &#39;a,\n        Fut: Future&lt;Output = Ret&gt;,\n    {\n        async move {\n            let mut t: u64 = 42;\n            let ret = f(&amp;mut t).await;\n            t += 100;\n            ret\n        }\n        .boxed_local()\n    }\n}\n\nimpl&lt;T&gt; DoThing for T {}\n\nasync fn try_do_thing() {\n    let mut v = true;\n    v.do_thing(|i| async move { *i += 5; false }).await;\n}\n</code></pre></div>",
        "id": 208850093,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599063583
    },
    {
        "content": "<p>Although now that I've written that out, I do realize the lifetime error :(</p>",
        "id": 208850402,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599063720
    },
    {
        "content": "<p>In that the returned future from <code>do_thing</code> is outliving the lifetime of <code>&amp;mut t</code>.</p>",
        "id": 208850493,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599063747
    },
    {
        "content": "<p>Or maybe that's not an error... the returned value from <code>f(&amp;mut t)</code> is awaited immediately, which should have the correct lifetime?</p>",
        "id": 208850611,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599063824
    },
    {
        "content": "<p>Probably should have mentioned that this is all involved with async code; I have a non-async counterpart that works as expected.</p>",
        "id": 208850709,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599063867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329463\">Alex Franchuk</span> <a href=\"#narrow/stream/122651-general/topic/Function.20trait.20constraint.20return.20lifetimes/near/208850493\">said</a>:</p>\n<blockquote>\n<p>In that the returned future from <code>do_thing</code> is outliving the lifetime of <code>&amp;mut t</code>.</p>\n</blockquote>\n<p>Yes, that is the error.<br>\n<span class=\"user-mention silent\" data-user-id=\"329463\">Alex Franchuk</span> <a href=\"#narrow/stream/122651-general/topic/Function.20trait.20constraint.20return.20lifetimes/near/208850611\">said</a>:</p>\n<blockquote>\n<p>Or maybe that's not an error... the returned value from <code>f(&amp;mut t)</code> is awaited immediately, which should have the correct lifetime?</p>\n</blockquote>\n<p>Rustc doesn't know that this is the case by looking at the signature of <code>do_thing</code>.</p>\n<p>I tried if I could get it working, but it is pretty hard.</p>",
        "id": 208859041,
        "sender_full_name": "bjorn3",
        "timestamp": 1599067657
    },
    {
        "content": "<p>Yeah, I've also tried a number of things (besides <code>std::mem::transmute</code>ing the lifetimes) to get it working...</p>",
        "id": 208859546,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599067879
    },
    {
        "content": "<p>I think the fundamental issue here is that I'm trying to express an \"at most\" lifetime constraint, but I believe the rust lifetime constraints are all \"at least\".</p>",
        "id": 208860467,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599068324
    },
    {
        "content": "<p>Just to close the loop a bit here, it looks like this problem has been reported as a bug (the closest I got to something working ran into this issue): <a href=\"https://github.com/rust-lang/rust/issues/70263\">https://github.com/rust-lang/rust/issues/70263</a></p>",
        "id": 209048042,
        "sender_full_name": "Alex Franchuk",
        "timestamp": 1599184042
    }
]