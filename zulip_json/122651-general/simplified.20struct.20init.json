[
    {
        "content": "<p>I would like to ask about a new way to initialize structs.<br>\nSay we have </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">a</span>: <span class=\"nc\">int</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">b</span>: <span class=\"nc\">int</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">c</span>: <span class=\"nc\">int</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and we have already defined b and c. Than we currently can create a new Foo by writing </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">a</span>: <span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If we have created f: Foo before, we can also write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">a</span>: <span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now I wanted to ask about simplifying the case above where we defined b and c locally into:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">a</span>: <span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In this case the local values of b and c should be inserted. <br>\nI would argue that this feature makes sense, since Foo:new(b,c) constructor functions are quite common, afaik.<br>\nFirst you check that the given input is in some allowed range, set the omitted inputs to some reasonable default and if all values are fine you just create the struct and return it.<br>\nWe already have the .. Syntax for \"copy-constructors\" which are probably less used that the shown \"constructor from variables\".<br>\nI know that Rust is about being explicit, but I would argue that <code> ..</code> is not hiding relevant information compared to the two available other initialization methods. At least for me it feels natural and I expected it to be available after learning about <code>..f</code>.</p>\n<p>Do you think it makes sense to add an RFC for that?</p>",
        "id": 227062867,
        "sender_full_name": "Manuel Drehwald",
        "timestamp": 1613792960
    },
    {
        "content": "<p>i'm not a fan of this for a few reasons, but they boil down to its unclear which variables from the scope are being used.</p>",
        "id": 227063085,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613793173
    },
    {
        "content": "<p>i dont think there's currently a way in rust to use variables without typing their names, and this would add that.</p>",
        "id": 227063144,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613793239
    },
    {
        "content": "<p>This might be a better fit for <a href=\"http://internals.rust-lang.org\">internals.rust-lang.org</a> . In particular I think <a href=\"https://internals.rust-lang.org/t/pre-pre-rfc-syntactic-sugar-for-default-default/13234\">https://internals.rust-lang.org/t/pre-pre-rfc-syntactic-sugar-for-default-default/13234</a> is a conflicting proposal that is worth a read to see whether you prefer for this corner of the syntax</p>",
        "id": 227063197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613793252
    },
    {
        "content": "<p>I'm with Thom</p>",
        "id": 227063275,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793347
    },
    {
        "content": "<p>It would be a bit weird that adding a member <code>x</code> to <code>Foo</code> causes an undefined variable reference of <code>x</code> in <code>fn mk_foo() -&gt; Foo { Foo {..} }</code> that never mentions <code>x</code></p>",
        "id": 227063483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613793526
    },
    {
        "content": "<p>naw you could make the error message there fairly good</p>",
        "id": 227063517,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793576
    },
    {
        "content": "<p>i think that the reason to not do it is different from a potentially bad error message</p>",
        "id": 227063570,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793605
    },
    {
        "content": "<p>including, but not limited to, the fact that if you add a field to a struct suddenly you might grab in new variables in other code elsewhere using that type with the {..} syntax</p>",
        "id": 227063620,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793661
    },
    {
        "content": "<p>oh yeah, that's stability breaking in all sorts of nasty ways</p>",
        "id": 227063650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613793683
    },
    {
        "content": "<p>and if those are Copy fields, then you wouldn't even get told (if they're non-copy fields you'll <em>probably</em> get a sudden use-after-move error)</p>",
        "id": 227063658,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793700
    },
    {
        "content": "<p>Well I understand that ..f hides the variable names and {.. b, c,} hides where those b and c values exactly come from.<br>\nMy proposal would therefore hide which variables are used plus where those variables come from.<br>\nSo I understand that it could accumulate complexity. <br>\nI just wanted to ask about opinions since both other methods are available and as mentioned it felt natural to me.<br>\nBut I'm not into rustc, so I wasn't aware of all the pitfalls it could bring. <br>\nThanks for your explanations :)</p>",
        "id": 227063730,
        "sender_full_name": "Manuel Drehwald",
        "timestamp": 1613793759
    },
    {
        "content": "<p>Also, this isn't the main source of boilerplate in these constructor functions IMO, you still have to write out the function with the types and names same as the struct and so on</p>",
        "id": 227063782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613793823
    },
    {
        "content": "<p>I absolutely want .. to be better, and apparently a lot of others do (that thread linked had 119 posts), but i think this is a little too much unspoken magic</p>",
        "id": 227063790,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> Thank you for the link to the internals, I just followed the links from here: <a href=\"https://github.com/rust-lang/rust/blob/25f39fe80293f77bd86f64a1261a3e2c0ca23847/CONTRIBUTING.md\">https://github.com/rust-lang/rust/blob/25f39fe80293f77bd86f64a1261a3e2c0ca23847/CONTRIBUTING.md</a> to zulip. <br>\nBut next time I will start there.</p>\n<p>The other proposal there also sounds interesting.</p>",
        "id": 227063885,
        "sender_full_name": "Manuel Drehwald",
        "timestamp": 1613793933
    },
    {
        "content": "<p>Oh no don't worry in terms of protocol! Asking a question in #general is entirely fine.</p>",
        "id": 227063895,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793961
    },
    {
        "content": "<p>though in general the zulip and the forums cater to slightly different crowds, it's not 100% crossover</p>",
        "id": 227063949,
        "sender_full_name": "Lokathor",
        "timestamp": 1613793991
    },
    {
        "content": "<p>Yeah I don't mean to say this is off topic, only that this kind of question comes up more often on IRLO so you will probably get more useful responses</p>",
        "id": 227064052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613794101
    },
    {
        "content": "<p>Another reason is that I would expect .. to do something different: fill in default values, not values from locals named like the fields.</p>",
        "id": 227074960,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613807556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/simplified.20struct.20init/near/227063483\">said</a>:</p>\n<blockquote>\n<p>It would be a bit weird that adding a member <code>x</code> to <code>Foo</code> causes an undefined variable reference of <code>x</code> in <code>fn mk_foo() -&gt; Foo { Foo {..} }</code> that never mentions <code>x</code></p>\n</blockquote>\n<p>or worse, you could end up with <code>Foo</code> capturing an unrelated internal variable you had in scope:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">raw_mutex</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">racy_stuff</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// field of Foo</span>\n<span class=\"w\">    </span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">do_racy_thing_since_guard_was_not_dropped_yet</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// release the lock</span>\n<span class=\"w\">    </span><span class=\"n\">stuff</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then adding some generic-compatible <code>g</code> field to <code>Foo</code> would suddenly lead to a data race <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span>  (granted, this can also be interpreted as yet another instance where raw guards ought to be dropped explicitly).</p>",
        "id": 227096822,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613833715
    },
    {
        "content": "<p>oh the things we'd put into rust2 if we knew at the time</p>",
        "id": 227098032,
        "sender_full_name": "Lokathor",
        "timestamp": 1613835014
    },
    {
        "content": "<p>but explicit drops are bad for early returns, so there's that.</p>",
        "id": 227098043,
        "sender_full_name": "Lokathor",
        "timestamp": 1613835038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/simplified.20struct.20init/near/227098032\">said</a>:</p>\n<blockquote>\n<p>oh the things we'd put into rust2 if we knew at the time</p>\n</blockquote>\n<p>Yeah, I was hinting at the \"programmer good practices\" more than a fully enforced language thing.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/simplified.20struct.20init/near/227098043\">said</a>:</p>\n<blockquote>\n<p>but explicit drops are bad for early returns, so there's that.</p>\n</blockquote>\n<p>True, it's definitely a good argument against generalizing that to too many types.</p>\n<p>FWIW, here is what the fully paranoid API would look like (<em>à la</em> linear_types (modulo unwinding)):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Mutex</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">with_lock</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// compute some stuff out of the wrapped value</span>\n<span class=\"w\">    </span><span class=\"c1\">// return ret; /* Uncomment to make compilation fail */</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"p\">.</span><span class=\"nb\">drop</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// we can release the drop early</span>\n<span class=\"w\">        </span><span class=\"c1\">// do stuff with the lock released</span>\n<span class=\"w\">        </span><span class=\"cm\">/* … */</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"p\">.</span><span class=\"n\">returning</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// or late:</span>\n<span class=\"w\">    </span><span class=\"n\">guard</span><span class=\"p\">.</span><span class=\"nb\">drop</span><span class=\"p\">().</span><span class=\"n\">returning</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=38fc68c01af1acff7cf2a21975c13c6e\">Playground</a></li>\n</ul>",
        "id": 227106693,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613843483
    }
]