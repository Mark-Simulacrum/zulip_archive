[
    {
        "content": "<p>I just got this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./x.py check\nextracting /home/r/src/rust/rustc.3/build/cache/2020-12-30/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\nextracting /home/r/src/rust/rustc.3/build/cache/2020-12-30/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\nextracting /home/r/src/rust/rustc.3/build/cache/2020-12-30/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\nextracting /home/r/src/rust/rustc.3/build/cache/2020-11-19/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\nerror: XZ support is required to download LLVM\nhelp: consider disabling `download-ci-llvm` or using python3\n</code></pre></div>\n<p>Looks like I now need to explicitly prefix <code>python3</code> for every single <code>x.py</code> invocation? That seems... rather suboptimal.^^<br>\nCc <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span></p>",
        "id": 221398907,
        "sender_full_name": "RalfJ",
        "timestamp": 1609592101
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/download-ci-llvm.20is.20broken.20again\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/download-ci-llvm.20is.20broken.20again</a></p>",
        "id": 221398923,
        "sender_full_name": "bjorn3",
        "timestamp": 1609592152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the GZ artifacts aren't stored on s3 anymore</p>",
        "id": 221401231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609596286
    },
    {
        "content": "<p>If you find a way to download xz with python 2 do let me know</p>",
        "id": 221401241,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609596305
    },
    {
        "content": "<p>at least on Linux that should be easy by using <code>curl</code>+<code>tar</code> -- no idea about other OSes though</p>",
        "id": 221401255,
        "sender_full_name": "RalfJ",
        "timestamp": 1609596349
    },
    {
        "content": "<p>See also <a href=\"https://github.com/rust-lang/rust/pull/80585\">https://github.com/rust-lang/rust/pull/80585</a>, which went badly</p>",
        "id": 221401301,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609596407
    },
    {
        "content": "<blockquote>\n<p>at least on Linux that should be easy by using <code>curl</code>+<code>tar</code> -- no idea about other OSes though</p>\n</blockquote>\n<p>Well right, that's exactly what went wrong in 80585 - the second you depend on a shell everything is non portable</p>",
        "id": 221401322,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609596467
    },
    {
        "content": "<p>FWIW if you're on debian/ubuntu you can fix this with <code>sudo apt install python-is-python3</code></p>",
        "id": 221402811,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609598990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221401301\">said</a>:</p>\n<blockquote>\n<p>See also <a href=\"https://github.com/rust-lang/rust/pull/80585\">https://github.com/rust-lang/rust/pull/80585</a>, which went badly</p>\n</blockquote>\n<p>yeah I saw that. a really cute hack though :D</p>",
        "id": 221407491,
        "sender_full_name": "RalfJ",
        "timestamp": 1609606891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221402811\">said</a>:</p>\n<blockquote>\n<p>FWIW if you're on debian/ubuntu you can fix this with <code>sudo apt install python-is-python3</code></p>\n</blockquote>\n<p>\"fix\" as in \"make everything else on my system explode, but x.py will work\"? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 221407541,
        "sender_full_name": "RalfJ",
        "timestamp": 1609606925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221401322\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>at least on Linux that should be easy by using <code>curl</code>+<code>tar</code> -- no idea about other OSes though</p>\n</blockquote>\n<p>Well right, that's exactly what went wrong in 80585 - the second you depend on a shell everything is non portable</p>\n</blockquote>\n<p>you don't have to depend on a shell to call <code>curl</code>+<code>tar</code> from python, though.</p>",
        "id": 221407556,
        "sender_full_name": "RalfJ",
        "timestamp": 1609606954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221407556\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221401322\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>at least on Linux that should be easy by using <code>curl</code>+<code>tar</code> -- no idea about other OSes though</p>\n</blockquote>\n<p>Well right, that's exactly what went wrong in 80585 - the second you depend on a shell everything is non portable</p>\n</blockquote>\n<p>you don't have to depend on a shell to call <code>curl</code>+<code>tar</code> from python, though.</p>\n</blockquote>\n<p>well, people don't have tar installed on windows though</p>",
        "id": 221407636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609607054
    },
    {
        "content": "<p>sure, but they'll probably have <code>python</code> being Python 3, right?</p>",
        "id": 221408142,
        "sender_full_name": "RalfJ",
        "timestamp": 1609607798
    },
    {
        "content": "<p>so if <code>tar</code> is just the fallback in case python doesn't support <code>gz</code>, that could still help</p>",
        "id": 221408149,
        "sender_full_name": "RalfJ",
        "timestamp": 1609607809
    },
    {
        "content": "<p>hmm, that could work</p>",
        "id": 221408207,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609607882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Do you have Python 3 installed? Not as \"python\" obviously, but do python3?</p>",
        "id": 221410558,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611351
    },
    {
        "content": "<p>We could run x.py using \"python\" and use python (rather than shell) to figure out if we can then re-execute it using Python 3.</p>",
        "id": 221410631,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611462
    },
    {
        "content": "<p>oh boy</p>",
        "id": 221410639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611481
    },
    {
        "content": "<p>that could work, yeah</p>",
        "id": 221410676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611490
    },
    {
        "content": "<p>That's just a PATH search. Shouldn't be <em>that</em> hard.</p>",
        "id": 221410677,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221410558\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> Do you have Python 3 installed? Not as \"python\" obviously, but do python3?</p>\n</blockquote>\n<p>yes. <code>python3 ./x.py</code> is what I currently do when it complains.</p>",
        "id": 221410706,
        "sender_full_name": "RalfJ",
        "timestamp": 1609611568
    },
    {
        "content": "<p>As another option, we could change x.py to use \"python3\" in its shebang, and tell people who don't have python3 to edit it if they have to...</p>",
        "id": 221410707,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221410707\">said</a>:</p>\n<blockquote>\n<p>As another option, we could change x.py to use \"python3\" in its shebang, and tell people who don't have python3 to edit it if they have to...</p>\n</blockquote>\n<p>that was tried before. it fails on Windows where it seems the python 3 installer installs <code>python.exe</code>.</p>",
        "id": 221410715,
        "sender_full_name": "RalfJ",
        "timestamp": 1609611595
    },
    {
        "content": "<p>there's <code>shutil.which</code> but that only works in python3 <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 221410718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611597
    },
    {
        "content": "<p>I can just rewrite it, it's like 10 lines</p>",
        "id": 221410766,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> insert screaming here...</p>",
        "id": 221410767,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221410767\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> insert screaming here...</p>\n</blockquote>\n<p>yeah, I feel you</p>",
        "id": 221410770,
        "sender_full_name": "RalfJ",
        "timestamp": 1609611633
    },
    {
        "content": "<p>\"python\" should always be python 2, or not exist.</p>",
        "id": 221410779,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611658
    },
    {
        "content": "<p>it is in <code>distutils</code> but that is a rabbit hole I am <em>not</em> willing to go down</p>",
        "id": 221410786,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Yeah. Just detect if you're in python 3, and if not, manually search PATH.</p>",
        "id": 221410798,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221410779\">said</a>:</p>\n<blockquote>\n<p>\"python\" should always be python 2, or not exist.</p>\n</blockquote>\n<p>sadly, someone decided otherwise. <code>apt install python-is-python3</code> will make <code>python</code> be <code>python3</code> on Debian+derivatives. my impression is that they (They?) decided that \"when the transition is done\", <code>python</code> should be python 3. why anyone thought that was a good idea is beyond me.</p>",
        "id": 221410849,
        "sender_full_name": "RalfJ",
        "timestamp": 1609611737
    },
    {
        "content": "<p>I'm aware, and I agree: that abomination should not exist.</p>",
        "id": 221410871,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611807
    },
    {
        "content": "<p>on the plus side, this is yet another aspect in which the python 2-&gt;3 transition is a very useful case study of how <em>not</em> to do this ;)</p>",
        "id": 221410873,
        "sender_full_name": "RalfJ",
        "timestamp": 1609611822
    },
    {
        "content": "<p>why not have update-alternatives for python versions?</p>",
        "id": 221410878,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611826
    },
    {
        "content": "<p>I wish debian used update-alternatives more, it's so annoying that clang-tidy is 6.0 and I have to say clang-tidy-11 instead</p>",
        "id": 221410924,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221410878\">said</a>:</p>\n<blockquote>\n<p>why not have update-alternatives for python versions?</p>\n</blockquote>\n<p>python 2 and python 3 are different languages... <code>python</code> should just never be python 3. IMO.</p>",
        "id": 221410928,
        "sender_full_name": "RalfJ",
        "timestamp": 1609611864
    },
    {
        "content": "<p>update-atlernatives is for compatible replacements, which this definitely is not^^</p>",
        "id": 221410934,
        "sender_full_name": "RalfJ",
        "timestamp": 1609611880
    },
    {
        "content": "<p>well, fair enough</p>",
        "id": 221410939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Because the two are not compatible, and Debian does have a policy against using alternatives for things that aren't compatible.</p>",
        "id": 221410945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Do you already know about os.pathsep?</p>",
        "id": 221410953,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'm just going to <code>try: Popen(\"python3\"); catch: pass</code></p>",
        "id": 221410961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609611930
    },
    {
        "content": "<p>Please don't. That'll add the overhead of actually starting python3 to every invocation of x.py.</p>",
        "id": 221411028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609611986
    },
    {
        "content": "<p>only if this is python2</p>",
        "id": 221411041,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612010
    },
    {
        "content": "<p>(Well, every invocation that's... Yes, that. :) )</p>",
        "id": 221411052,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'm confused, what could I do instead?</p>",
        "id": 221411064,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612043
    },
    {
        "content": "<p>also, bootstrap.py already cares <em>very</em> little about its latency lol</p>",
        "id": 221411072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612063
    },
    {
        "content": "<p>isn't that negiligble given that we're starting python2 first and then python3, i.e. we have at least 2 interpreter startups? <code>python3 --version</code> should be reasonably cheap in comparison</p>",
        "id": 221411080,
        "sender_full_name": "RalfJ",
        "timestamp": 1609612075
    },
    {
        "content": "<p>for a while it would run <code>rustup default</code> twice per run and no one noticed</p>",
        "id": 221411083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that's a good point, actually. It'll only have overhead if you have Python 2 and not Python 3.</p>",
        "id": 221411135,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612118
    },
    {
        "content": "<p><em>unnecessary</em> overhead, rather.</p>",
        "id": 221411151,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612137
    },
    {
        "content": "<p>then the overhead is whatever it takes to figure out that python 3 does not exist</p>",
        "id": 221411154,
        "sender_full_name": "RalfJ",
        "timestamp": 1609612143
    },
    {
        "content": "<p>Then in that case...</p>",
        "id": 221411159,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612154
    },
    {
        "content": "<p>which we'd have to pay anyway no matter the fallback mechanism?</p>",
        "id": 221411160,
        "sender_full_name": "RalfJ",
        "timestamp": 1609612154
    },
    {
        "content": "<p>Checking something...</p>",
        "id": 221411233,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612225
    },
    {
        "content": "<p>ok, this seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/x.py b/x.py</span>\n<span class=\"gh\">index 7973730ef17..8b263954e3e 100755</span>\n<span class=\"gd\">--- a/x.py</span>\n<span class=\"gi\">+++ b/x.py</span>\n<span class=\"gu\">@@ -4,6 +4,17 @@</span>\n\n import os\n import sys\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# If this is python2, check if python3 is available and re-execute with that</span>\n<span class=\"gi\">+# interpreter.</span>\n<span class=\"gi\">+if sys.version_info.major &lt; 3:</span>\n<span class=\"gi\">+    import subprocess</span>\n<span class=\"gi\">+    try:</span>\n<span class=\"gi\">+        exit(subprocess.call([\"python3\"] + sys.argv))</span>\n<span class=\"gi\">+    except OSError:</span>\n<span class=\"gi\">+        # Python 3 isn't available, do nothing</span>\n<span class=\"gi\">+        pass</span>\n<span class=\"gi\">+</span>\n</code></pre></div>",
        "id": 221411310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612340
    },
    {
        "content": "<p>yup and that supports XZ :)</p>",
        "id": 221411332,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> To answer your earlier question, I was originally expecting that you would getenv PATH (with fallback to os.defpath), split on os.pathsep, and search for python3 in each dir.</p>",
        "id": 221411408,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> that breaks if python3 isn't actually executable</p>",
        "id": 221411412,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612460
    },
    {
        "content": "<p>better to ask forgiveness than permission and all that</p>",
        "id": 221411415,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612468
    },
    {
        "content": "<p>If you have python3 on your path but it isn't executable then you're asking for trouble. :)</p>",
        "id": 221411423,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612485
    },
    {
        "content": "<p>well, this handles it for me automatically</p>",
        "id": 221411428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612505
    },
    {
        "content": "<p>That said...</p>",
        "id": 221411439,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612532
    },
    {
        "content": "<p>How about, instead of subprocess, calling execvp instead?</p>",
        "id": 221411443,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612561
    },
    {
        "content": "<p>that doesn't let me catch the exception and fall back to python2</p>",
        "id": 221411486,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612573
    },
    {
        "content": "<p>I really think the overhead is not worth worrying about</p>",
        "id": 221411487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612589
    },
    {
        "content": "<p>If it returns at all, it failed, so keep going with the python  you have.</p>",
        "id": 221411490,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612597
    },
    {
        "content": "<p>I agree with going ahead and trying, rather than checking first. I'm just suggesting using exec instead.</p>",
        "id": 221411506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612627
    },
    {
        "content": "<p>I don't see what benefit that has over subprocess?</p>",
        "id": 221411507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612640
    },
    {
        "content": "<p>I'm not even sure execvp is available on windows</p>",
        "id": 221411511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612657
    },
    {
        "content": "<p>if it works, it replaces the current process, rather than creating a separate one and leaving the original around until the separate one finishes.</p>",
        "id": 221411515,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612668
    },
    {
        "content": "<p>And yes, it's available on Windows. I just checked.</p>",
        "id": 221411516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612675
    },
    {
        "content": "<p>Is this something we could do onetime as part of <code>x.py setup</code> and then store the result in <code>config.toml</code> so we don't have to do this on every invocation?</p>",
        "id": 221411568,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609612735
    },
    {
        "content": "<p>I am still confused why everyone is worried so much about overhead</p>",
        "id": 221411575,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612752
    },
    {
        "content": "<p>this is <em>maybe</em> a tenth of a second</p>",
        "id": 221411578,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612759
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">execvp</span><span class=\"p\">(</span><span class=\"s2\">\"python3\"</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"n\">catch</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre></div>",
        "id": 221411587,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221411587\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">execvp</span><span class=\"p\">(</span><span class=\"s2\">\"python3\"</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"n\">catch</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>sure, I'm switching to that now, but I still think if you want to make bootstrap faster there are lots of better places to do it</p>",
        "id": 221411638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612843
    },
    {
        "content": "<p>make rustbuild compile faster for one</p>",
        "id": 221411642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612849
    },
    {
        "content": "<p>Python startup can be slow on slow systems.</p>",
        "id": 221411657,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612885
    },
    {
        "content": "<p>Several seconds, not a tenth of a second.</p>",
        "id": 221411661,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612897
    },
    {
        "content": "<p>on systems that slow building rust will be intolerably slow anyway</p>",
        "id": 221411665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612902
    },
    {
        "content": "<p>like, days</p>",
        "id": 221411668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609612906
    },
    {
        "content": "<p>True. In any case, thanks for working on this.</p>",
        "id": 221411710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609612925
    },
    {
        "content": "<p>I would generally agree with you <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> but I just want to mention that process startup and filesystem operations are both really slow on Windows in comparison to Linux. Even on a fast pc.</p>",
        "id": 221411742,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609613037
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 221411801,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613087
    },
    {
        "content": "<p>would be interested to see some numbers for that</p>",
        "id": 221411802,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613092
    },
    {
        "content": "<p>Let me go test it :)</p>",
        "id": 221411806,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609613096
    },
    {
        "content": "<p>I don't have the beefiest Windows box, but it's also not unreasonably slow.</p>",
        "id": 221411815,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609613122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> your execvp script is passing arguments directly to the python interpreter somehow <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <code>x.py -h</code> now gives</p>\n<div class=\"codehilite\"><pre><span></span><code>usage: ./x.py [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-b     : issue warnings about str(bytes_instance), str(bytearray_instance)\n         and comparing bytes/bytearray with str. (-bb: issue errors)\n-B     : don&#39;t write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x\n...\n</code></pre></div>",
        "id": 221411867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613172
    },
    {
        "content": "<p>Oh, oops.</p>",
        "id": 221411873,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609613203
    },
    {
        "content": "<p>[\"python3\"] + sys.args</p>",
        "id": 221411881,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609613224
    },
    {
        "content": "<p><del>sys.argv is <code>['./x.py', '-h']</code> so that's not the issue</del> never mind I don't understand how argv works</p>",
        "id": 221411884,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613226
    },
    {
        "content": "<p>It's executing python3 and making python think it's called x.py. :)</p>",
        "id": 221411901,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609613274
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/80625\">https://github.com/rust-lang/rust/pull/80625</a></p>",
        "id": 221411946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613296
    },
    {
        "content": "<p>I'm seeing <code>0.08 - 0.11</code> seconds consistently on my Windows box (Windows 10 w/ Windows Defender no other AV, 16 gb RAM i7 4790k, ssd)</p>",
        "id": 221412046,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609613489
    },
    {
        "content": "<p>Probably not enough to worry about</p>",
        "id": 221412052,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609613502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> since you're on windows anyway, can you tell me if this works in powershell and cmd.exe?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/x.py b/x.py</span>\n<span class=\"gh\">index ab02072b04f..3a5382ee937 100755</span>\n<span class=\"gd\">--- a/x.py</span>\n<span class=\"gi\">+++ b/x.py</span>\n<span class=\"gu\">@@ -1,4 +1,20 @@</span>\n<span class=\"gd\">-#!/usr/bin/env python</span>\n<span class=\"gi\">+#!/bin/sh</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# The beginning of this script is both valid shell and valid python, such that</span>\n<span class=\"gi\">+# the script starts with the shell and is reexecuted with the right python.</span>\n<span class=\"gi\">+# This works because shells only execute a line at a time.</span>\n<span class=\"gi\">+# Thanks to `./mach` from servo for the idea!</span>\n<span class=\"gi\">+''':' &amp;&amp; {</span>\n<span class=\"gi\">+exists() { command -v \"$1\" &gt;/dev/null 2&gt;&amp;1; }</span>\n<span class=\"gi\">+if exists python3; then</span>\n<span class=\"gi\">+    exec python3 \"$0\" \"$@\"</span>\n<span class=\"gi\">+elif exists python; then</span>\n<span class=\"gi\">+    exec python \"$0\" \"$@\"</span>\n<span class=\"gi\">+else</span>\n<span class=\"gi\">+    exec python2 \"$0\" \"$@\"</span>\n<span class=\"gi\">+fi</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+'''</span>\n</code></pre></div>",
        "id": 221412223,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613712
    },
    {
        "content": "<p>Just as a random data point: my 2016 mbp does the same thing consistently in <code>0.03</code> seconds and my Linux box does it in <code>0.01</code> seconds.</p>",
        "id": 221412224,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609613717
    },
    {
        "content": "<p>it does work in fish, so there's that at least</p>",
        "id": 221412296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613831
    },
    {
        "content": "<p>(<code>git apply</code> will apply that diff for you automatically, just copy paste it in)</p>",
        "id": 221412360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609613947
    },
    {
        "content": "<p>Sorry, I'm not signed into Zulip or GH on that pc so it took a little while to get setup</p>",
        "id": 221412870,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609614656
    },
    {
        "content": "<p>It worked fine in cmd.exe (using <code>python x.py</code>)</p>",
        "id": 221412880,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609614674
    },
    {
        "content": "<p>I got a an error in Powershell but I think it's unrelated.</p>",
        "id": 221412885,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609614692
    },
    {
        "content": "<p>Oh interesting, do people not run ./x.py directly on windows?</p>",
        "id": 221412886,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609614696
    },
    {
        "content": "<p>Can you paste the powershell error?</p>",
        "id": 221412895,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609614710
    },
    {
        "content": "<p>It's related to paths on my filesystem because I usually use <code>bash</code> on windows not powershell or cmd</p>",
        "id": 221412937,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609614731
    },
    {
        "content": "<p>Hmm, ok.</p>",
        "id": 221412945,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609614757
    },
    {
        "content": "<p><code>x.py</code> was invoked though and it failed later than the changes I applied</p>",
        "id": 221412947,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609614758
    },
    {
        "content": "<p>well this is exciting :D</p>",
        "id": 221412963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609614804
    },
    {
        "content": "<p>on linux running powershell natively ... appears to be broken, I can't even open the shell :( it was working yesterday</p>",
        "id": 221413063,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609614948
    },
    {
        "content": "<p>I just tested running x.py directly, and added my results to the issue. In short, it doesn't work</p>",
        "id": 221413893,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> did <code>./x.py</code> work before? I'm confused whether people use ./x.py or <code>python x.py</code> on windows</p>",
        "id": 221413961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616225
    },
    {
        "content": "<p><code>x.py</code> works currently, it's what I use when working in powershell</p>",
        "id": 221414125,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616414
    },
    {
        "content": "<p>Interestingly, <code>python x.py</code> still works, by <code>py x.py</code> does <em>not</em>, and that's something I'd consider significant breakage, as I use <code>py</code> more than <code>python</code>, because I can actually set the version of <code>py</code>.</p>",
        "id": 221414210,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616533
    },
    {
        "content": "<p>Actually, apparently, <code>py -m x</code> works still. Fun</p>",
        "id": 221414213,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616544
    },
    {
        "content": "<p>oh that's very strange</p>",
        "id": 221414214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616544
    },
    {
        "content": "<p>what does <code>py x.py</code> do?</p>",
        "id": 221414216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616549
    },
    {
        "content": "<p>(what error I mean)</p>",
        "id": 221414220,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616554
    },
    {
        "content": "<p>what confuses me is that there was a hashbang before, it was /usr/bin/env - is the issue that /usr/bin exists but not /bin?</p>",
        "id": 221414231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616582
    },
    {
        "content": "<p>I can fix that by changing it to /usr/bin/env sh</p>",
        "id": 221414238,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616589
    },
    {
        "content": "<p>Same error as running it without a program. I wonder if <code>py</code> actually sets the PATH so the correct version is active, then just does <code>filename.py</code>?</p>",
        "id": 221414244,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616602
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/JOkTUqj4MOt-vkfJ32R73WvB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/JOkTUqj4MOt-vkfJ32R73WvB/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/JOkTUqj4MOt-vkfJ32R73WvB/image.png\"></a></div>",
        "id": 221414255,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616630
    },
    {
        "content": "<p><code>/usr/bin</code> also doesn't exist, but I wonder if it's special-cased?</p>",
        "id": 221414300,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616647
    },
    {
        "content": "<p>yeah, try changing the hashbang and see if it fixes it</p>",
        "id": 221414309,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616661
    },
    {
        "content": "<p><code>/usr/bin/env sh</code>:<br>\n<a href=\"/user_uploads/4715/SXczkxMAMMfn8oVJEvfQsnUj/image.png\">image.png</a> <br>\n<code>/usr/bin/env python</code>:<br>\n<a href=\"/user_uploads/4715/SCpK4ijhoqMRJMHdQ1Ag7NJo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/SXczkxMAMMfn8oVJEvfQsnUj/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/SXczkxMAMMfn8oVJEvfQsnUj/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/SCpK4ijhoqMRJMHdQ1Ag7NJo/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/SCpK4ijhoqMRJMHdQ1Ag7NJo/image.png\"></a></div>",
        "id": 221414334,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616730
    },
    {
        "content": "<p>wtf</p>",
        "id": 221414345,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616748
    },
    {
        "content": "<p>is it literally special casing the exact string <code>/usr/bin/env python</code>?</p>",
        "id": 221414355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616759
    },
    {
        "content": "<p>I hate that so much</p>",
        "id": 221414374,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616762
    },
    {
        "content": "<p>Wait, I think I know why this is all like it is</p>",
        "id": 221414395,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616764
    },
    {
        "content": "<p>Running <code>x.py</code> is exactly equivalent to running <code>py x.py</code>. <code>py</code> special cases <em>specifically python shebangs</em>, because it expects a python file. Other ones, it tries to interpret, because it thinks they might actually point to a valid alternate interpreter</p>",
        "id": 221414416,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616814
    },
    {
        "content": "<p>(That's a guess, to clarify, not absolute truth. But it matches observations)</p>",
        "id": 221414427,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616837
    },
    {
        "content": "<p>ugh</p>",
        "id": 221414428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616843
    },
    {
        "content": "<p>ok I'll revert that commit then</p>",
        "id": 221414430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616854
    },
    {
        "content": "<p><code>python</code> doesn't special-case, because that's actually the interpreter exe, not a windows-shim to make python files behave like they do on linux</p>",
        "id": 221414435,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616881
    },
    {
        "content": "<p>that's such a hack</p>",
        "id": 221414491,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609616963
    },
    {
        "content": "<p>Yep. A lot of command-line stuff on windows feels like 'A hack because we wanted it to behave like linux'</p>",
        "id": 221414503,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609616991
    },
    {
        "content": "<p>For windows, using <code>py -3</code> should get you the same behavior as <code>python3</code> on linux, if you want to make the pure-python re-exec work</p>",
        "id": 221414511,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617000
    },
    {
        "content": "<p>Every time I think a language has finally solved the problem of cross platform scripting, something has to mess it up :(</p>",
        "id": 221414562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609617018
    },
    {
        "content": "<p>well it doesn't matter on windows because download-ci-llvm doesn't work yet</p>",
        "id": 221414571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617031
    },
    {
        "content": "<p>but eventually it will matter I guess - does <code>py</code> default to python 2?</p>",
        "id": 221414578,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617041
    },
    {
        "content": "<p>Mine defaults to 3.9. I think it defaults to whatever comes first in your PATH, which unless you change it by hand, is the one you installed first?</p>",
        "id": 221414600,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617075
    },
    {
        "content": "<p>that seems fine then, certainly not worth messing with</p>",
        "id": 221414604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617090
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 221414611,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617104
    },
    {
        "content": "<p>Sorry to ruin the shebang magic, I really like it in theory :P</p>",
        "id": 221414657,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617126
    },
    {
        "content": "<p>nah you're good, if it breaks things it's not worth it</p>",
        "id": 221414661,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617146
    },
    {
        "content": "<p>What's the rationale for using python in  <code>x.py</code>? I assumed it was for the cross platform thing</p>",
        "id": 221414677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609617195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> <a href=\"https://github.com/rust-lang/rust/issues/71818#issuecomment-623291126\">https://github.com/rust-lang/rust/issues/71818#issuecomment-623291126</a></p>",
        "id": 221414682,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617238
    },
    {
        "content": "<p>I wonder if a <code>/usr/bin/env python[2|3]</code> shebang will make <code>py</code> default to that version</p>",
        "id": 221414729,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617287
    },
    {
        "content": "<p>That would allow the shebang to work right as long as you're not explicitly invoking the interpreter, right?</p>",
        "id": 221414737,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> sure, but then that breaks bash on windows <a href=\"https://github.com/rust-lang/rust/pull/71841#issuecomment-623108800\">https://github.com/rust-lang/rust/pull/71841#issuecomment-623108800</a></p>",
        "id": 221414788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617378
    },
    {
        "content": "<p>also explicitly invoking the interpreter is fine</p>",
        "id": 221414793,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617392
    },
    {
        "content": "<p>it's only when something tries to invoke /usr/bin/env python and doesn't find it that it's an issue</p>",
        "id": 221414795,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617407
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 221414799,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617422
    },
    {
        "content": "<p>Love how everything but exactly what it is breaks <em>something</em></p>",
        "id": 221414810,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617459
    },
    {
        "content": "<p>oh no exactly what it is breaks things too lol</p>",
        "id": 221414819,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617474
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/71818\">https://github.com/rust-lang/rust/issues/71818</a></p>",
        "id": 221414820,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617477
    },
    {
        "content": "<p>truly astounding how badly python managed to mess this up</p>",
        "id": 221414859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617489
    },
    {
        "content": "<p>I love the language, but the way they handled the 2 -&gt; 3 switch was not what I'd call ideal :P</p>",
        "id": 221414876,
        "sender_full_name": "CraftSpider",
        "timestamp": 1609617550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/221412886\">said</a>:</p>\n<blockquote>\n<p>Oh interesting, do people not run ./x.py directly on windows?</p>\n</blockquote>\n<p>That doesn't work for me, at least.  So it's <code>python x.py test</code>.</p>\n<p>(But I almost always just get it by hitting up in the terminal, so I've never cared about that.)</p>",
        "id": 221420785,
        "sender_full_name": "scottmcm",
        "timestamp": 1609626496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> do you have time to see whether reexecuting with <code>py -3</code> works on windows? <a href=\"https://github.com/rust-lang/rust/pull/80625\">https://github.com/rust-lang/rust/pull/80625</a></p>",
        "id": 221987325,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610046931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Yeah, I can do that. I'll try the PR and see if it work</p>",
        "id": 221997729,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052050
    },
    {
        "content": "<p>The attempt to run <code>python3</code> is. Redirecting me to the windows store. I really hate that</p>",
        "id": 221998320,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052365
    },
    {
        "content": "<p>oh oof</p>",
        "id": 221998336,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052373
    },
    {
        "content": "<p>whose bright idea was that lol</p>",
        "id": 221998365,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> how are you running it? as <code>./x.py</code>?</p>",
        "id": 221998667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052552
    },
    {
        "content": "<p>well I guess it doesn't matter any more since it re-executes itself</p>",
        "id": 221998688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052566
    },
    {
        "content": "<p><code>py -2 x.py</code>. My default execution runs it as 3.X</p>",
        "id": 221998702,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052578
    },
    {
        "content": "<p>what's launching the windows store? that's such an awful thing to do</p>",
        "id": 221998705,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052579
    },
    {
        "content": "<p>Technically, when it re-executes, it just prints out a message telling me to go to the store, when I run <code>python3</code> myself it actually opens it</p>",
        "id": 221998793,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052612
    },
    {
        "content": "<p>wtf</p>",
        "id": 221998809,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052623
    },
    {
        "content": "<p>It seems to be an 'execution alias' defined (automatically?) by windows</p>",
        "id": 221998823,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052636
    },
    {
        "content": "<p>Overriden by something of the same name being in the path, thus why it doesn't happen if I run <code>python</code>, only <code>python3</code></p>",
        "id": 221998874,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052665
    },
    {
        "content": "<p>ugh</p>",
        "id": 221998903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052682
    },
    {
        "content": "<p>maybe I should check if <code>python3</code> is executable after all</p>",
        "id": 221998916,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052689
    },
    {
        "content": "<p>that seems liable to break on windows though</p>",
        "id": 221998925,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052697
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\"><pre><span></span><code>if sys.platform == &quot;win32&quot;:\n    sys.execvp(...)\nelse:\n    sys.execvp(...)\n</code></pre></div>\n<p>Is your best bet</p>",
        "id": 221999019,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052730
    },
    {
        "content": "<p>well it's even worse, you could really have python3 installed on windows and it would work fine</p>",
        "id": 221999063,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052757
    },
    {
        "content": "<p>it's only when you don't have it installed that it breaks</p>",
        "id": 221999076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052764
    },
    {
        "content": "<p>True</p>",
        "id": 221999085,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052768
    },
    {
        "content": "<p>I mean, I have python 3.7-3.9 all installed, they don't come with a <code>python3.exe</code> with the windows installer</p>",
        "id": 221999132,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052796
    },
    {
        "content": "<p>I'll try <code>py -3</code> first and fall back to python3 otherwise maybe</p>",
        "id": 221999256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> would you be interested in writing that up? you'll be able to test more quickly than I can</p>",
        "id": 221999297,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052862
    },
    {
        "content": "<p>That might work. Cross-platform pain, yay</p>",
        "id": 221999305,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052867
    },
    {
        "content": "<p>And yeah, just swap the position of the execvp calls basically?</p>",
        "id": 221999359,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052887
    },
    {
        "content": "<p><del>this would work fine if windows weren't cursed</del></p>",
        "id": 221999371,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052894
    },
    {
        "content": "<p>yeah</p>",
        "id": 221999378,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610052895
    },
    {
        "content": "<p><del>Every time I touch windows-specific stuff, I take psychic damage</del></p>",
        "id": 221999512,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610052959
    },
    {
        "content": "<p>Swapping the positions of the execs seems to have worked. Retry code runs, succeeds, we get a python 3 instance, it runs and works</p>",
        "id": 221999906,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610053158
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 221999934,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610053175
    },
    {
        "content": "<p>let me give you push access to my fork</p>",
        "id": 221999951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610053188
    },
    {
        "content": "<p>you should have gotten an invite</p>",
        "id": 222000215,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610053302
    },
    {
        "content": "<p>Pushed changes + comment on why <code>py -3</code> is done first</p>",
        "id": 222000989,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610053676
    },
    {
        "content": "<p>Out of curiosity, what does the windows version return for something like <code>python3 --version</code> if the alias is present?</p>",
        "id": 222030463,
        "sender_full_name": "Aru Sahni",
        "timestamp": 1610076253
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/9wkYuH7Y6gLai5w11943VlLs/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9wkYuH7Y6gLai5w11943VlLs/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/9wkYuH7Y6gLai5w11943VlLs/image.png\"></a></div>",
        "id": 222030954,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610076950
    },
    {
        "content": "<p>The same message is given no matter what flags, except for no flags which opens the store. I suspect its logic is just 'has any arguments'</p>",
        "id": 222031180,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610077266
    },
    {
        "content": "<p>It is possible to tell if the alias points to a real <code>python.exe</code> or to the store but doing so is probably more involved then is necessary if a simpler workaround is sufficient.</p>\n<p>This would be less of a problem if the official Python installer methods were more consistent with each other. Currently the official Installer doesn't set a <code>python3.exe</code> alias and instead has a custom <code>py.exe</code> to find the right binary. Whereas the official Store application does set a <code>python3.exe</code> alias but doesn't have <code>py.exe</code>.</p>\n<p>I'd guess the root problem is that Python itself only has <code>python.exe</code> so it's up to whoever creates the distributable packages to come up with their own way of doing things.</p>",
        "id": 222032335,
        "sender_full_name": "Chris Denton",
        "timestamp": 1610078840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">Rune Tynan</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20.2B.20download-ci-llvm.20-.3E.20explicit.20python3.20needed.3F/near/222031180\">said</a>:</p>\n<blockquote>\n<p>The same message is given no matter what flags, except for no flags which opens the store. I suspect its logic is just 'has any arguments'</p>\n</blockquote>\n<p>what's the exit code for this case?</p>",
        "id": 222055083,
        "sender_full_name": "RalfJ",
        "timestamp": 1610100485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> it doesn't matter - any exit code could be a normal exit code from rustbuild, x.py can't tell the difference</p>",
        "id": 222070838,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610111972
    },
    {
        "content": "<p>I meant for <code>python3 --version</code> -- we could consider python3 to be installed only if that exits with 0? this is assuming that the windows store shim exits with non-0</p>",
        "id": 222071555,
        "sender_full_name": "RalfJ",
        "timestamp": 1610112441
    },
    {
        "content": "<p>so I imagine <code>x.py</code> doing <code>python3 --version</code> to detect python 3 (instead of just trying to re-exec as <code>python3 x.py</code>)</p>",
        "id": 222071647,
        "sender_full_name": "RalfJ",
        "timestamp": 1610112496
    },
    {
        "content": "<p>Hmm, I see, that could work</p>",
        "id": 222071663,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610112513
    },
    {
        "content": "<p>I think I'd prefer to see if anyone actually hits this in practice though</p>",
        "id": 222071677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610112527
    },
    {
        "content": "<p>sure, I guess \"make sure you use python 3\" (so the re-exec path isn't it) will work for basically everyone</p>",
        "id": 222071729,
        "sender_full_name": "RalfJ",
        "timestamp": 1610112562
    },
    {
        "content": "<p>also, FWIW, the download-ci-llvm error only appears once -- after doing <code>python3 x.py ...</code> once, future <code>x.py</code> invocations work fine with python 2 (presumably because the archive got already extracted)</p>",
        "id": 222071772,
        "sender_full_name": "RalfJ",
        "timestamp": 1610112598
    },
    {
        "content": "<p>That sounds right, yeah. It will break again the next time LLVM is updated but it should work with python2 until that point</p>",
        "id": 222071872,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610112653
    }
]