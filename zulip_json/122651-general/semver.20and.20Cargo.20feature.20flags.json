[
    {
        "content": "<p>If I have a function that is <em>only</em> exposed when a Cargo feature is enabled and I change the API of that function, what version number bump would you do?</p>",
        "id": 161581499,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553437430
    },
    {
        "content": "<p>/poll</p>",
        "id": 161581501,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553437432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  Any API change should be major, should it not? I'd delay the API change in another major release along with lots of other API changes to make it meaningful, but I don't think you should break API compatibility just like that.</p>",
        "id": 161586277,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553445293
    },
    {
        "content": "<p>It feels a bit painful to increment the major version number for such (smaller) things but I guess major still would be the best. After all: Code could break when upgrading</p>",
        "id": 161618486,
        "sender_full_name": "DevQps",
        "timestamp": 1553495952
    },
    {
        "content": "<p>You could feature-gate the new API with a new feature and bump minor as yet another alternative.</p>",
        "id": 161639521,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1553518362
    },
    {
        "content": "<p>That leads nicely to my actual but related question...</p>\n<p>If I have a function that is only exposed when a Cargo feature is enabled, <em>I've specifically stated that that feature flag is for unstable features</em>, and I change the API of that function, what version number bump would you do?</p>",
        "id": 161665362,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553534158
    },
    {
        "content": "<p>/poll</p>",
        "id": 161665405,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553534163
    },
    {
        "content": "<p>Mmm, good questions :). My first gut feeling says that a minor increment is appropriate here. Since the main stable API doesn't change.</p>\n<p>But at a second thought I believe a different approach might be better. It's just a suggestion but I think I would dp it like this:</p>\n<p>Semver states thst you can do whatever you want when at the 0 major version. So in case you feel like your project in general hasn't reached a stable API I would just increment the minor number.</p>\n<p>If your project has however reached at least major 1, I think the best way to tackle this is to only publish new stable features of crates. On publishing new (backwards compatible) changes, even if its in a feature, you change the minor, and for non-backwards compatible changes you'd change major (even for features)</p>\n<p>When a feature contains unstable functionality and you've already reached a major version, I would allow users to use/test it via a direct repository tag/branch:</p>\n<p><code>project = { git = \"https://github.com/userhere/myproj\", tag = \"1.32.5-beta\" }</code></p>\n<p>Or something like this. If you'd specify this in the README people would still have access to unstable features whereas they can rely upon a stable API when using <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>. When the unstable features are merged they would be published as well!</p>\n<p>A bit of a long story, but it's just a though :)</p>",
        "id": 161833251,
        "sender_full_name": "DevQps",
        "timestamp": 1553668479
    },
    {
        "content": "<blockquote>\n<p>Semver states thst you can do whatever you want when at the 0 major version. So in case you feel like your project in general hasn't reached a stable API I would just increment the minor number.</p>\n</blockquote>\n<p>FWIW, what Cargo implements is a slight twist on this. 0.2 is considered a breaking change to 0.1, and 0.0.2 is a breaking change to 0.0.1. 0.1.0 to 0.1.1 is not expected to be a breaking change.</p>",
        "id": 161851980,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553688000
    },
    {
        "content": "<p>My thoughts are that unstable features don’t contribute to semver at all</p>",
        "id": 161854244,
        "sender_full_name": "Nemo157",
        "timestamp": 1553690011
    },
    {
        "content": "<p>If you were able to release the changes to the same version that would be fine</p>",
        "id": 161854265,
        "sender_full_name": "Nemo157",
        "timestamp": 1553690032
    },
    {
        "content": "<p>But since you can’t doing a patch update to be able to release a new version is all that’s needed</p>",
        "id": 161854325,
        "sender_full_name": "Nemo157",
        "timestamp": 1553690071
    }
]