[
    {
        "content": "<p>I compile a Rust library that exposes a C API using <code>x86_64-unknown-linux-musl</code> and <code>+crt-static</code>. Everything seems to work fine, except when it comes to exceptions. Whenever a C++ program links to my library, all the C++ exception handling fails. I don't even need to call anything from my library, just linking to it makes a simple program like the following to abort, segfault, or other weird behaviours.</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdexcept&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Hello!\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">try</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">invalid_argument</span><span class=\"p\">(</span><span class=\"s\">\"test throwing and catching\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">&amp;</span> <span class=\"n\">ex</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"exception: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ex</span><span class=\"p\">.</span><span class=\"n\">what</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Does anybody have an idea what's causing this and how I could solve it?</p>\n<p>Thanks!</p>",
        "id": 227448410,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1614094128
    },
    {
        "content": "<p>Are you also compiling the C++ program using <code>musl</code>? Having multiple copies of the standard C library in a program sounds iffy.</p>",
        "id": 227448590,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614094205
    },
    {
        "content": "<p>Yes I am building the C++ with musl, in an Alpine VM.</p>",
        "id": 227449347,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1614094518
    },
    {
        "content": "<p>Doesn't Alpine use a dynamically linked musl?</p>",
        "id": 227449389,
        "sender_full_name": "bjorn3",
        "timestamp": 1614094542
    },
    {
        "content": "<p>What does <code>ldd</code> say if you run it on the program?</p>",
        "id": 227449550,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614094604
    },
    {
        "content": "<p>It gives me <code>/lib/ld-musl-x86_64.so.1</code></p>",
        "id": 227450384,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1614094907
    },
    {
        "content": "<p>Okay, so you have a dynamic musl and a static one in the same program</p>",
        "id": 227450489,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614094937
    },
    {
        "content": "<p>If I compile the C++ program with <code>-static</code>, should it statically link the musl lib?</p>",
        "id": 227450641,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1614094992
    },
    {
        "content": "<p>I think so</p>",
        "id": 227450820,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614095058
    },
    {
        "content": "<p>Oh wait, I mixed up the output. If I compile <em>without</em> the static flags, ldd returns</p>\n<div class=\"codehilite\"><pre><span></span><code>        /lib/ld-musl-x86_64.so.1 (0x7f205183f000)\n        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x7f2050f84000)\n        libc.musl-x86_64.so.1 =&gt; /lib/ld-musl-x86_64.so.1 (0x7f205183f000)\n        libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1\n</code></pre></div>\n<p>If I compile <em>with</em> <code>-static-libgcc -static-libstdc++ -static</code>, I only get <code>/lib/ld-musl-x86_64.so.1</code></p>",
        "id": 227451136,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1614095176
    },
    {
        "content": "<p>What if you dynamically link both the library and the program to musl?</p>",
        "id": 227471595,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614102037
    },
    {
        "content": "<p>It does work without <code>+crt-static</code>. So the conclusion is mixing static/non-static is a big no-no</p>",
        "id": 227486695,
        "sender_full_name": "Émile Grégoire",
        "timestamp": 1614107488
    }
]