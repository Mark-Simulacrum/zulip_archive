[
    {
        "content": "<p>Hello there, I work on guix and nix. I have been thinking for some time that functional package managers and rust ought to collaborate. Rustc and cargo have similar goals: reproducible builds, integration with existing systems and more. There have been some previous discussions about how to get cargo and rustc working more smoothly in nix and guix (around reusing rlibs, for instance). I am hoping to start a more formal collaboration. I am also willing to put in some work to accomplish it. Where would we start?</p>",
        "id": 225833525,
        "sender_full_name": "John Soo",
        "timestamp": 1612962902
    },
    {
        "content": "<p>Probably a list of issues that need to be solved would help. I had good success with crate2nix and nix in terms of achieving reproducibility and debugging instances where crates introduce non-reproducibility via <a href=\"http://build.rs\">build.rs</a> scripts, so I'm curious what the problems are right now that need solving.</p>",
        "id": 225835654,
        "sender_full_name": "nagisa",
        "timestamp": 1612963987
    },
    {
        "content": "<p>I am thinking something longer term and more amenable to the functional package management paradigm. Shared rlibs that can be used as system libraries would be a huge step</p>",
        "id": 225840353,
        "sender_full_name": "John Soo",
        "timestamp": 1612966176
    },
    {
        "content": "<p>Another big win would be using file hashes instead of mtime to determine file changes</p>",
        "id": 225840676,
        "sender_full_name": "John Soo",
        "timestamp": 1612966305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316408\">John Soo</span> <a href=\"#narrow/stream/122651-general/topic/Collaboration.20with.20functional.20package.20managers/near/225840353\">said</a>:</p>\n<blockquote>\n<p>I am thinking something longer term and more amenable to the functional package management paradigm. Shared rlibs that can be used as system libraries would be a huge step</p>\n</blockquote>\n<p>that requires a stable ABI</p>",
        "id": 225841883,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612966763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316408\">John Soo</span> <a href=\"#narrow/stream/122651-general/topic/Collaboration.20with.20functional.20package.20managers/near/225840676\">said</a>:</p>\n<blockquote>\n<p>Another big win would be using file hashes instead of mtime to determine file changes</p>\n</blockquote>\n<p>big +1 to this, though</p>",
        "id": 225841909,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612966772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Collaboration.20with.20functional.20package.20managers/near/225841883\">said</a>:</p>\n<blockquote>\n<p>that requires a stable ABI</p>\n</blockquote>\n<p>Not if the rlibs are keyed by the rustc version used to build them</p>",
        "id": 225842148,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612966851
    },
    {
        "content": "<p>ah yeah fair enough, if you only need them to be shared for a single toolchain it should work</p>",
        "id": 225842545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612967018
    },
    {
        "content": "<p>hmm, I would expect shared rlibs to work today then</p>",
        "id": 225842592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612967036
    },
    {
        "content": "<p>Oh that would be cool! Functional package managers already guarantee a fixed toolchain so that could be no problem</p>",
        "id": 225845309,
        "sender_full_name": "John Soo",
        "timestamp": 1612968021
    },
    {
        "content": "<p>Toolchain management is one of the big gains I see for rustaceans.</p>",
        "id": 225845424,
        "sender_full_name": "John Soo",
        "timestamp": 1612968076
    },
    {
        "content": "<p>rustc already encodes the version of the compiler in the meetadata and will refuse to use libraries compiled with other versions.</p>",
        "id": 225848379,
        "sender_full_name": "nagisa",
        "timestamp": 1612969279
    },
    {
        "content": "<p>to me its not super clear what's meant by \"shared\" rlib here. If its just building an rlib and then using it as an <code>--extern</code> dep in another invocation of rustc, then that's not exactly \"shared\" per se, its just the regular rust compilation model, using what are more resembling of static libraries.</p>",
        "id": 225848525,
        "sender_full_name": "nagisa",
        "timestamp": 1612969333
    },
    {
        "content": "<p>Hm. Could those rlibs be installed in a well defined system location and reused in different projects?</p>",
        "id": 225860614,
        "sender_full_name": "John Soo",
        "timestamp": 1612973483
    },
    {
        "content": "<p>Is that what $RUST_HOME already does?</p>",
        "id": 225860791,
        "sender_full_name": "John Soo",
        "timestamp": 1612973525
    },
    {
        "content": "<p>Cargo doesn't have any support for globally installed rlibs. Rustc does have a sysroot containing for example libstd, but the directory layout is unstable. $RUST_HOME is for the source caches and the default executable installation dir of cargo.</p>",
        "id": 225871850,
        "sender_full_name": "bjorn3",
        "timestamp": 1612976584
    },
    {
        "content": "<p>there's the sysroot.</p>",
        "id": 225871962,
        "sender_full_name": "nagisa",
        "timestamp": 1612976631
    },
    {
        "content": "<p>Is <a href=\"https://github.com/mozilla/sccache\"><code>sccache</code></a> relevant here? (I don't know much about it, but I thought it might be somewhat relevant.)</p>",
        "id": 225946068,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613015761
    }
]