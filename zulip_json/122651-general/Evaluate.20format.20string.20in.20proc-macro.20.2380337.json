[
    {
        "content": "<p>So I know this is cursed, but I don't see another approach :( Queries in the compiler have a <a href=\"https://github.com/rust-lang/rust/blob/3ffea60dd5a2260004cc4f487401ae7c7db1aa0e/compiler/rustc_middle/src/query/mod.rs#L40\"><code>desc</code>ription</a> of what the query does:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rustc_queries</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Other</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">trigger_delay_span_bug</span><span class=\"p\">(</span><span class=\"n\">key</span>: <span class=\"nc\">DefId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">desc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"trigger a delay span bug\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is processed by the <a href=\"https://github.com/rust-lang/rust/blob/3ffea60dd5a2260004cc4f487401ae7c7db1aa0e/compiler/rustc_macros/src/query.rs#L65\"><code>rustc_queries</code></a> proc-macro.</p>\n<p>What I want to do is use that description as a doc-comment if the query doesn't already have one. I have this code so far:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"p\">.</span><span class=\"n\">doc_comments</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// FIXME: replace `{}` with `_` somehow</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">format_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse_quote</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"cp\">#[doc = #format_str]</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">query</span><span class=\"p\">.</span><span class=\"n\">doc_comments</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The problem is that this renders format strings directly, without substituting any of the <code>{}</code> specifiers. The data to do that usefully isn't available at compile time, so I'm fine with just replacing them with <code>_</code> instead. But I'm not sure how to do that :/ is there a way to introspect format strings so I don't have to parse them myself? Or do I need to do a blanket <code>str.replace(\"{}\", \"_\")</code> (however that works with <code>syn</code>)?</p>",
        "id": 220804105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741302
    },
    {
        "content": "<p>ideally this would even replace <code>{}</code> with the stringified expr, but that's a stretch</p>",
        "id": 220804178,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741347
    },
    {
        "content": "<p>(so for <code>desc { |tcx| \"finding projection type inside predicates of `{}`\", tcx.def_path_str(key.0) }</code> it would display <code>finding projection type inside predicates of `tcx.def_path_str(key.0)` </code>)</p>",
        "id": 220804253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"158561\">@Daniel Henry-Mantilla</span> do you happen to have ideas? ;)</p>",
        "id": 220804357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741472
    },
    {
        "content": "<p>I think there is a library out there which does it for you, but you could also just leave {} in, right?</p>",
        "id": 220804704,
        "sender_full_name": "simulacrum",
        "timestamp": 1608741694
    },
    {
        "content": "<p>yeah, it just looks ugly</p>",
        "id": 220804720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741712
    },
    {
        "content": "<p>(by which I mean a library implementing rustc/std's formatting machinery at runtime rather than compile time)</p>",
        "id": 220804729,
        "sender_full_name": "simulacrum",
        "timestamp": 1608741720
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/q_ZtHNxDZczhz-SMhJY7UXgR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/q_ZtHNxDZczhz-SMhJY7UXgR/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/q_ZtHNxDZczhz-SMhJY7UXgR/image.png\"></a></div>",
        "id": 220804769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741725
    },
    {
        "content": "<p>and for some queries it's much less clear than the format string<br>\n<a href=\"/user_uploads/4715/PBCZhQZN7Q2qhsE46yi9sBHr/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/PBCZhQZN7Q2qhsE46yi9sBHr/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/PBCZhQZN7Q2qhsE46yi9sBHr/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">desc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"n\">tcx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"processing {}`{}`\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">const_param_did</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"the const argument \"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220804841,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741809
    },
    {
        "content": "<p>let me try runtime_fmt</p>",
        "id": 220804972,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608741904
    },
    {
        "content": "<p>follow-up question: how do I stringify an arbitrary <code>Expr</code>?</p>",
        "id": 220805464,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742223
    },
    {
        "content": "<p><code>TokenStream::Display</code> looks about right</p>",
        "id": 220805536,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742271
    },
    {
        "content": "<p>hmm runtime_fmt doesn't work because it takes a variable number of arguments instead of a slice :(</p>",
        "id": 220805971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742573
    },
    {
        "content": "<p>ok it does actually allow this, just not using the macro which is fine</p>",
        "id": 220806454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742882
    },
    {
        "content": "<p>how do I turn a <code>String</code> into a <code>syn::Expr</code>?</p>",
        "id": 220806465,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742890
    },
    {
        "content": "<p>I don't want to parse the string, just use it as a string literal</p>",
        "id": 220806482,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742902
    },
    {
        "content": "<p>oh booo runtime_fmt doesn't actually work with current nightly :(</p>",
        "id": 220806617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742983
    },
    {
        "content": "<p>ok I'm giving up on this for now</p>",
        "id": 220806625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608742987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Evaluate.20format.20string.20in.20proc-macro/near/220804178\">said</a>:</p>\n<blockquote>\n<p>ideally this would even replace <code>{}</code> with the stringified expr, but that's a stretch</p>\n</blockquote>\n<p>I like this idea a lot!</p>\n<p>Give me a reference to the PR / branch, and I'll see what I can do <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220806875,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608743143
    },
    {
        "content": "<p><a href=\"https://github.com/jyn514/rust/compare/proc-macro-fmt\">https://github.com/jyn514/rust/compare/proc-macro-fmt</a></p>",
        "id": 220807043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608743241
    },
    {
        "content": "<p>the build process for testing this is kind of awful:</p>\n<ol>\n<li>build the docs (<code>x.py doc --stage 1 compiler/rustc</code>) with a commit that works, such as <a href=\"https://github.com/jyn514/rust/commit/f2e1f34552513b3703d6193cfd470f899850368c\">https://github.com/jyn514/rust/commit/f2e1f34552513b3703d6193cfd470f899850368c</a>. You'll need to set <code>compiler-docs = true</code> in config.toml.</li>\n<li>check out the broken commit</li>\n<li><code>x.py doc --stage 1 compiler/rustc --keep-stage 0 --keep-stage 1</code></li>\n</ol>",
        "id": 220807198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608743319
    },
    {
        "content": "<p>it may be easier to get this working out of tree first, I don't think anything depends on rustc specifically</p>",
        "id": 220807218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608743333
    },
    {
        "content": "<p>and the simple version that doesn't replace <code>{}</code> is <a href=\"https://github.com/rust-lang/rust/pull/80337\">https://github.com/rust-lang/rust/pull/80337</a></p>",
        "id": 220807754,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608743656
    },
    {
        "content": "<p>Hmm actually this would be a lot easier if I only handle <code>{}</code> and not the full format_args syntax - I can just write that myself without a library</p>",
        "id": 220808243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608743956
    },
    {
        "content": "<p>These show up in cycle errors so none of them should be using {:?}</p>",
        "id": 220808280,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608743986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Evaluate.20format.20string.20in.20proc-macro/near/220808243\">said</a>:</p>\n<blockquote>\n<p>Hmm actually this would be a lot easier if I only handle <code>{}</code> and not the full format_args syntax - I can just write that myself without a library</p>\n</blockquote>\n<p>I was thinking of that too, I don't think exotic formatting will be encountered</p>",
        "id": 220809322,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608744655
    },
    {
        "content": "<p>nice, I'll try that after lunch :)</p>",
        "id": 220809455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608744738
    },
    {
        "content": "<p>Managed to get the following: <a href=\"/user_uploads/4715/SW2YahCkAGZZ5-gcRollMoMV/Screen-Shot-2020-12-24-at-17.44.12.png\">Screen-Shot-2020-12-24-at-17.44.12.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/SW2YahCkAGZZ5-gcRollMoMV/Screen-Shot-2020-12-24-at-17.44.12.png\" title=\"Screen-Shot-2020-12-24-at-17.44.12.png\"><img src=\"/user_uploads/4715/SW2YahCkAGZZ5-gcRollMoMV/Screen-Shot-2020-12-24-at-17.44.12.png\"></a></div>",
        "id": 220879622,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608828284
    },
    {
        "content": "<p>oooh that's nice :D</p>",
        "id": 220879731,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608828439
    },
    {
        "content": "<p>the whitespace is a little funky but that's probably because you have token trees and not the actual code to work with</p>",
        "id": 220879740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608828464
    },
    {
        "content": "<p>Yep, that was expected. I'm trying a basic <code>\" . \" -&gt; \".\"</code> replacement: empirically it provides great improvements at minor cost <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 220879800,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608828515
    },
    {
        "content": "<p>Looking pretty good; the one at the bottom is one of the weirdest ones I have encountered:</p>\n<p><a href=\"/user_uploads/4715/oU4roS2n-_6xFkWolnem0lZq/Screen-Shot-2020-12-24-at-18.00.33.png\">Screen-Shot-2020-12-24-at-18.00.33.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/oU4roS2n-_6xFkWolnem0lZq/Screen-Shot-2020-12-24-at-18.00.33.png\" title=\"Screen-Shot-2020-12-24-at-18.00.33.png\"><img src=\"/user_uploads/4715/oU4roS2n-_6xFkWolnem0lZq/Screen-Shot-2020-12-24-at-18.00.33.png\"></a></div>",
        "id": 220880447,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608829268
    },
    {
        "content": "<p>that's awesome!</p>",
        "id": 220880545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608829364
    },
    {
        "content": "<p>wow, that looks really good :D</p>",
        "id": 220880549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608829371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what do you think? about <code>mir_promoted</code></p>",
        "id": 220880587,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608829407
    },
    {
        "content": "<p>I'm a bit lazy to make a PR to your PR based off the right commit; here are the changes I applied to (<code>f2e1f3…</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_macros/src/query.rs b/compiler/rustc_macros/src/query.rs</span>\n<span class=\"gh\">index 6f9b79a0465..901ea261794 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_macros/src/query.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_macros/src/query.rs</span>\n<span class=\"gu\">@@ -273,10 +273,32 @@ fn process_modifiers(query: &amp;mut Query) -&gt; QueryModifiers {</span>\n                     panic!(\"duplicate modifier `desc` for query `{}`\", query.name);\n                 }\n                 if query.doc_comments.is_empty() {\n<span class=\"gd\">-                    // FIXME: replace `{}` with `_` somehow</span>\n<span class=\"gd\">-                    let format_str = list.first().unwrap();</span>\n<span class=\"gi\">+                    use ::syn::*;</span>\n<span class=\"gi\">+                    let mut list = list.iter();</span>\n<span class=\"gi\">+                    let format_str: String = match list.next() {</span>\n<span class=\"gi\">+                        Some(&amp;Expr::Lit(ExprLit { lit: Lit::Str(ref lit_str), .. })) =&gt; {</span>\n<span class=\"gi\">+                            lit_str</span>\n<span class=\"gi\">+                                .value()</span>\n<span class=\"gi\">+                                .replace(\"`{}`\", \"{}\") // We add them later anyways for consistency</span>\n<span class=\"gi\">+                        },</span>\n<span class=\"gi\">+                        _ =&gt; panic!(\"Expected a string literal\"),</span>\n<span class=\"gi\">+                    };</span>\n<span class=\"gi\">+                    let mut fmt_fragments = format_str.split(\"{}\");</span>\n<span class=\"gi\">+                    let mut doc_string = fmt_fragments.next().unwrap().to_string();</span>\n<span class=\"gi\">+                    list.map(::quote::ToTokens::to_token_stream)</span>\n<span class=\"gi\">+                        .zip(fmt_fragments)</span>\n<span class=\"gi\">+                        .for_each(|(tts, next_fmt_fragment)| {</span>\n<span class=\"gi\">+                            use ::core::fmt::Write;</span>\n<span class=\"gi\">+                            write!(</span>\n<span class=\"gi\">+                                &amp;mut doc_string,</span>\n<span class=\"gi\">+                                \" `{}` {}\",</span>\n<span class=\"gi\">+                                tts.to_string().replace(\" . \", \".\"),</span>\n<span class=\"gi\">+                                next_fmt_fragment,</span>\n<span class=\"gi\">+                            ).unwrap();</span>\n<span class=\"gi\">+                        })</span>\n<span class=\"gi\">+                    ;</span>\n                     let comment = parse_quote! {\n<span class=\"gd\">-                        #[doc = #format_str]</span>\n<span class=\"gi\">+                        #[doc = #doc_string]</span>\n                     };\n                     query.doc_comments.push(comment);\n                 }\n</code></pre></div>\n<p>It needs to be formatted, and feel free to \"rewrite\" the more hacky / ugly parts <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 220881502,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608830508
    },
    {
        "content": "<p>I like it. We can micro optimize later</p>",
        "id": 220889772,
        "sender_full_name": "oli",
        "timestamp": 1608842731
    }
]