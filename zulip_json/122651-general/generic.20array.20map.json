[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_fn)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(untagged_unions)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_fn_union)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Copy,Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bool</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bool_to_Bool</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">u8_to_u8</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Input</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bool_to_Bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u8_to_u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MAX_ELEMS</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">union</span> <span class=\"nc\">U</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">elements</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">MAX_ELEMS</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">other</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">splat</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">U</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">elements</span>: <span class=\"p\">[</span><span class=\"n\">T</span>::<span class=\"n\">M</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">MAX_ELEMS</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">U8x4</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B8x4</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 175899999,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568722871
    },
    {
        "content": "<p>A couple of issues: </p>\n<ul>\n<li>one error I get is that pointers are not allowed</li>\n</ul>",
        "id": 175900093,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568722941
    },
    {
        "content": "<blockquote>\n<p>error: function pointers are not allowed in const fn</p>\n</blockquote>",
        "id": 175900105,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568722961
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=24a31b93faa5a1b39e24100d0bb83758\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=24a31b93faa5a1b39e24100d0bb83758\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=24a31b93faa5a1b39e24100d0bb83758</a></p>",
        "id": 175900116,
        "sender_full_name": "oli",
        "timestamp": 1568722971
    },
    {
        "content": "<ul>\n<li>then I get an ICE:</li>\n</ul>\n<blockquote>\n<p>error: internal compiler error: src/librustc/ich/impls_ty.rs:209: ty::TyKind::hash_stable() - can't hash a TyVid _#1t.</p>\n</blockquote>",
        "id": 175900119,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568722976
    },
    {
        "content": "<p>that error will disappear with <code>-Zunleash-the-miri-inside-of-you</code></p>",
        "id": 175900140,
        "sender_full_name": "oli",
        "timestamp": 1568722986
    },
    {
        "content": "<p>O_o</p>",
        "id": 175900144,
        "sender_full_name": "oli",
        "timestamp": 1568722993
    },
    {
        "content": "<p>And if I don't do the weird union transmute thing, but instead try to create an array directly, I get another error saying that I can't create an array using const parameters</p>",
        "id": 175900156,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723010
    },
    {
        "content": "<p>the ICE I have no idea about, probably const generics</p>",
        "id": 175900158,
        "sender_full_name": "oli",
        "timestamp": 1568723012
    },
    {
        "content": "<p>I'm using <code>-Zunleash-the-miri-inside-of-you</code>, the error with function pointers appears :/</p>",
        "id": 175900235,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723058
    },
    {
        "content": "<p>Am I writing the option correctly?</p>",
        "id": 175900245,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723067
    },
    {
        "content": "<p>I see the \"skipping const checks warnings\"</p>",
        "id": 175900252,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723075
    },
    {
        "content": "<p>did you use <code>#[feature(const_fn)]</code>?</p>",
        "id": 175900253,
        "sender_full_name": "oli",
        "timestamp": 1568723076
    },
    {
        "content": "<p>yes, at the top</p>",
        "id": 175900259,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723082
    },
    {
        "content": "<p>ok, odd</p>",
        "id": 175900263,
        "sender_full_name": "oli",
        "timestamp": 1568723087
    },
    {
        "content": "<p>(first feature)</p>",
        "id": 175900266,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723089
    },
    {
        "content": "<p>not sure what's going on then</p>",
        "id": 175900270,
        "sender_full_name": "oli",
        "timestamp": 1568723098
    },
    {
        "content": "<p>const generics are not implemented all the way</p>",
        "id": 175900279,
        "sender_full_name": "oli",
        "timestamp": 1568723115
    },
    {
        "content": "<p>I'm assuming that's the problem</p>",
        "id": 175900282,
        "sender_full_name": "oli",
        "timestamp": 1568723120
    },
    {
        "content": "<p>I'd like this to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_fn)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(untagged_unions)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_fn_union)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Copy,Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bool</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bool_to_Bool</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">u8_to_u8</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Input</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bool_to_Bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u8_to_u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">splat</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">A</span><span class=\"p\">([</span><span class=\"n\">T</span>::<span class=\"n\">M</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"p\">}])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">U8x4</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B8x4</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 175900306,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723148
    },
    {
        "content": "<p>(that is, without the weird union transmute thing)</p>",
        "id": 175900312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723159
    },
    {
        "content": "<p>All my other APIs work, but I essentially need to create a [T; MAX_LEN] externally, and use an union to access the [T; N] sub-array..</p>",
        "id": 175900370,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723186
    },
    {
        "content": "<p>for some reason that works, but creating the [T; N] array directly does not :D</p>",
        "id": 175900381,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568723196
    },
    {
        "content": "<p>Huh, I thought that was supposed to work, or is it only for types not for repeat expressions?</p>",
        "id": 175900688,
        "sender_full_name": "oli",
        "timestamp": 1568723480
    },
    {
        "content": "<p>hmm, apparently not: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c21ec1c19653beee9444c0e0426a4e23\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c21ec1c19653beee9444c0e0426a4e23\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c21ec1c19653beee9444c0e0426a4e23</a></p>",
        "id": 175900818,
        "sender_full_name": "oli",
        "timestamp": 1568723570
    },
    {
        "content": "<p>It would be good to have nightly features that allow using these in array lengths</p>",
        "id": 175902960,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725131
    },
    {
        "content": "<p>and also one that allows using function pointers in const fn</p>",
        "id": 175902971,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725140
    },
    {
        "content": "<p>That would allow playing with these</p>",
        "id": 175902997,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725156
    },
    {
        "content": "<blockquote>\n<p>It would be good to have nightly features that allow using these in array lengths</p>\n</blockquote>\n<p>that's like saying it would be good to have a nightly feature for $insert_your_favourite_unimplemented_feature</p>",
        "id": 175903039,
        "sender_full_name": "oli",
        "timestamp": 1568725197
    },
    {
        "content": "<p>it's not implemented</p>",
        "id": 175903044,
        "sender_full_name": "oli",
        "timestamp": 1568725200
    },
    {
        "content": "<p>the nice error message is just there to prevent ICEs</p>",
        "id": 175903087,
        "sender_full_name": "oli",
        "timestamp": 1568725205
    },
    {
        "content": "<p>you can't play with it ;)</p>",
        "id": 175903108,
        "sender_full_name": "oli",
        "timestamp": 1568725213
    },
    {
        "content": "<p>there's no implemented feature to play with</p>",
        "id": 175903127,
        "sender_full_name": "oli",
        "timestamp": 1568725232
    },
    {
        "content": "<p>I see, I thought miri supported function pointer calls</p>",
        "id": 175903136,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725236
    },
    {
        "content": "<p>and that this was just a check preventing them</p>",
        "id": 175903151,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725245
    },
    {
        "content": "<p>not that such support for function pointer calls would need to be implemented</p>",
        "id": 175903169,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725259
    },
    {
        "content": "<p>(there are workarounds for the array stuff)</p>",
        "id": 175903207,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725286
    },
    {
        "content": "<p>oh... -Zunleash-the-miri-inside-of-you actually is that support</p>",
        "id": 175903222,
        "sender_full_name": "oli",
        "timestamp": 1568725295
    },
    {
        "content": "<p>it's just not working right :D</p>",
        "id": 175903234,
        "sender_full_name": "oli",
        "timestamp": 1568725304
    },
    {
        "content": "<p>feel free to fix it</p>",
        "id": 175903237,
        "sender_full_name": "oli",
        "timestamp": 1568725307
    },
    {
        "content": "<p>follow the error message and wrap that in the appropriate check as seen elsewhere in the file</p>",
        "id": 175903251,
        "sender_full_name": "oli",
        "timestamp": 1568725320
    },
    {
        "content": "<p>also this works: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cfdb78fc16f375e8fb013c29aa299c25\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cfdb78fc16f375e8fb013c29aa299c25\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cfdb78fc16f375e8fb013c29aa299c25</a></p>",
        "id": 175903375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725394
    },
    {
        "content": "<p>I'm not really sure how that works, but the other code does not :D</p>",
        "id": 175903401,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725417
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">union</span> <span class=\"nc\">ConstFnArray</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">max_value</span><span class=\"p\">()],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output</span>: <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 175903519,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725481
    },
    {
        "content": "<p>Now you can create arrays inside <code>const fn</code> as follows <code>ConstFnArray { input [val; _] }.output }</code></p>",
        "id": 175903559,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725511
    },
    {
        "content": "<p>The type and length of <code>ConstFnArray::output</code> are properly deduced, so that must already work somehow :D</p>",
        "id": 175903645,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568725564
    },
    {
        "content": "<p>it works for types</p>",
        "id": 175903857,
        "sender_full_name": "oli",
        "timestamp": 1568725707
    },
    {
        "content": "<p>just not for the repeat expression</p>",
        "id": 175903871,
        "sender_full_name": "oli",
        "timestamp": 1568725714
    },
    {
        "content": "<p>ah I see</p>",
        "id": 175904388,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568726045
    },
    {
        "content": "<p>I'll try to find out what's special about repeat expressions there, and see if I can add a feature gate to enable that</p>",
        "id": 175904516,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568726150
    }
]