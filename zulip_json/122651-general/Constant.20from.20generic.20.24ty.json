[
    {
        "content": "<p>Is there a way to get the constant generic for a given type, assuming you pass a type to a macro. Eg, macro!(Foo&lt;32&gt;), and do something like <code>$foo::N</code> in the macro, if <code>const N: usize</code> for the generic</p>",
        "id": 254389482,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632325652
    },
    {
        "content": "<p>Macros only work at the token level, even when you pass a type (e.g. match a <code>$foo:ty</code>) it only try to match the syntax of a type but it won't know if that type exists or not, and if it does what fields/constants/ecc ecc it has.</p>",
        "id": 254397111,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1632328453
    },
    {
        "content": "<p>Is it a <code>macro_rules</code> macro? Try <code>$foo: path</code> instead of <code>$foo: ty</code>, then <code>$foo::N</code> should expand to a new path like <code>Foo::&lt;32&gt;::N</code> in your example</p>",
        "id": 254403720,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1632330848
    },
    {
        "content": "<p>… I think, hopefully</p>",
        "id": 254403760,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1632330860
    },
    {
        "content": "<p>I think <code>&lt;$foo&gt;::N</code> would also work.</p>",
        "id": 254403810,
        "sender_full_name": "bjorn3",
        "timestamp": 1632330879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/122651-general/topic/Constant.20from.20generic.20.24ty/near/254403760\">said</a>:</p>\n<blockquote>\n<p>… I think, hopefully</p>\n</blockquote>\n<p>That won't work, AFAIK, since the path grammar does not have a <code>Path &lt;-&gt; Path :: AnotherSegment</code> \"rule\", and <code>macro_rules!</code> \"high-level\" captures (such as <code>:ty</code> and <code>:path</code> (and <code>:expr</code>, <em>etc.</em>)) make it so the capture is seen as the corresponding non-terminals (So a <code>$foo:path</code> which captures <code>Foo&lt;32&gt;</code> does not expand to a path segment but to a path).</p>\n<p>So, while keeping a higher-order metavariable capture, the only solution is to find a way in the grammar which operates of that full node, such as <code>&lt; $_:ty &gt; :: $_:ident</code>, leading to <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>'s solution here.</p>\n<p>Another option is to avoid using high-level captures, and stick to <code>$($_:tt)*</code>, which you can just re-emit <em>verbatim</em>.</p>\n<p>A final option is to \"unwrap\" that invisible group thanks to a proc-macro, or through a <a href=\"https://docs.rs/defile\">proc-macro helper</a></p>",
        "id": 254523044,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1632398652
    }
]