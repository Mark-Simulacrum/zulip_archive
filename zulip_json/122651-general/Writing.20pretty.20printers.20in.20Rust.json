[
    {
        "content": "<p>What's the 'best' way to write pretty printers in Rust? Is it really by combining calls to <code>write!</code>?  The format string approach seems to fail if you want to make each substitution a sub-printer itself. Also, what about handling things like line wrapping? In haskell there are packages like <code>prettyprinter</code> which allow you to print to an AST which is then rendered to a specific line width. This approach allows you to easily compose printers and separate concerns about output formats from the printer shape. Are there any crates like this in Rust?</p>",
        "id": 219707040,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607776817
    },
    {
        "content": "<p>I used the <a href=\"https://crates.io/crates/pretty\"><code>pretty</code></a> crate when porting some pretty printing code from haskell fairly recently</p>",
        "id": 219707307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777225
    },
    {
        "content": "<p>I saw that crate, I'm thinking of using it, I'm just surprised I haven't found a more 'blessed' pattern</p>",
        "id": 219707314,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777267
    },
    {
        "content": "<p>surely this is a common problem? Or does everyone 'just deal with it'?</p>",
        "id": 219707361,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777290
    },
    {
        "content": "<p>You can use Display for pretty printing, you just need a wrapper struct that contains a pointer to your pretty printing context</p>",
        "id": 219707375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777334
    },
    {
        "content": "<p>but for wadler style pretty printing you basically have to first preallocate and measure the groups you intend to print, so it can't be done in a very streaming way</p>",
        "id": 219707395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777395
    },
    {
        "content": "<p>yea but my point is that Display is done by manually writing to a Formatter</p>",
        "id": 219707437,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777406
    },
    {
        "content": "<p>Fair point wrt streaming, but with dispaly printers it becomes hard to do something as simple as \"indent this sub-value by 2 spaces\"</p>",
        "id": 219707468,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777497
    },
    {
        "content": "<p>That's what the wrapper struct is for</p>",
        "id": 219707475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777510
    },
    {
        "content": "<p>yea even then, it doesn't help much</p>",
        "id": 219707516,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777532
    },
    {
        "content": "<p>unless you have entirely custom printing macros</p>",
        "id": 219707518,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777539
    },
    {
        "content": "<p>which i guess.. wouldn't be that hard</p>",
        "id": 219707528,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777553
    },
    {
        "content": "<p>I'm just surprised since usually there's a great crate for things in Rust</p>",
        "id": 219707540,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607777587
    },
    {
        "content": "<p>Here's an example from my project: <a href=\"https://github.com/digama0/mm0/blob/master/mm0-rs/src/elab/lisp/print.rs\">https://github.com/digama0/mm0/blob/master/mm0-rs/src/elab/lisp/print.rs</a></p>",
        "id": 219707546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777604
    },
    {
        "content": "<p>It doesn't use custom macros, instead you use regular <code>write!</code> to a formatter but it uses the <code>Print</code> wrapper struct to provide additional context that is not provided by <code>format</code></p>",
        "id": 219707603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777671
    },
    {
        "content": "<p>and in recursive calls you just wrap subobjects in the wrapper and use them in <code>write!</code> like normal</p>",
        "id": 219707621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777712
    },
    {
        "content": "<p>This is sort of the low tech solution, which is enough for tracking indentation, but for proper pretty printing, where you want to use line breaks only when necessary, something like the pretty crate is more appropriate</p>",
        "id": 219707674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777793
    },
    {
        "content": "<p>I don't know if there is a more 'blessed' solution, but this one worked well for me. I would be curious to hear if others have had their own pretty printing experiences</p>",
        "id": 219707739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777893
    },
    {
        "content": "<p>ok i see how your setup works</p>",
        "id": 219707794,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778001
    },
    {
        "content": "<p>I was messing around with a more rudimentary version of that by wrapping a <code>Formatter</code> before but it didn't work well</p>",
        "id": 219707845,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778023
    },
    {
        "content": "<p>because if I had something like <code>write!(f, \"my cool \\n string\")</code> I wanted both liens to have the same indentation</p>",
        "id": 219707863,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778054
    },
    {
        "content": "<p>if you want that to work out of the box you would have to analyze the string for newlines, right? I think the pretty crate bans newlines in text nodes and just requires that you construct them separately</p>",
        "id": 219707932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607778129
    },
    {
        "content": "<p>though I had a different approach, rather than wrapping objects I had a method that took a closure</p>",
        "id": 219707934,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778131
    },
    {
        "content": "<p>yea that makes sense</p>",
        "id": 219707944,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778166
    },
    {
        "content": "<p>of course you could probably do that at compile time with a fancy enough macro</p>",
        "id": 219707960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607778189
    },
    {
        "content": "<p>hmm well I'll try to fix up my indentation aware printer,  see how far I get with that</p>",
        "id": 219708038,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778285
    },
    {
        "content": "<p>I'm still surprised that there isn't a more elegant rusty solution though</p>",
        "id": 219708046,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778303
    },
    {
        "content": "<p>maybe I'll write a crazy printer macro :P</p>",
        "id": 219708059,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607778328
    },
    {
        "content": "<p>oh right! I just remembered the _real_ reason I struggled, using <code>write</code> means that often you break up what is one line of output into multiple calls to <code>write!</code> (for example to loop over a list of things)</p>",
        "id": 219708615,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779174
    },
    {
        "content": "<p>which means the printer needs to know when an _output_ line starts</p>",
        "id": 219708624,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779193
    },
    {
        "content": "<p>eh... I'll have to figure someting out</p>",
        "id": 219708677,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779216
    },
    {
        "content": "<p>you can just have a function <code>write_line()</code>, right?</p>",
        "id": 219708681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779236
    },
    {
        "content": "<p>yea, of course, I'd just like to have the least error-prone version :P</p>",
        "id": 219708698,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779271
    },
    {
        "content": "<p>or if you are being fancy and parsing the input, you can just look for newlines in the string and use <code>writeln!</code></p>",
        "id": 219708703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779286
    },
    {
        "content": "<p>rn I'm actually thinking of replacing <code>writeln!</code> so it outputs the correct indentation after the newline</p>",
        "id": 219708712,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779309
    },
    {
        "content": "<p>that works as long as your last line has indentation 0</p>",
        "id": 219708763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779348
    },
    {
        "content": "<p>yea</p>",
        "id": 219708768,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779359
    },
    {
        "content": "<p>for reference the problem is code like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    write!(p, &quot;let cfg {} &quot;, func.name)?;\n    for (nm, ty) in &amp;func.args {\n        write!(p, &quot;(o_{} : {})&quot;, nm, ty)?;\n    }\n</code></pre></div>\n<p>where they are all the same line (or should be)</p>",
        "id": 219708797,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779416
    },
    {
        "content": "<p>where are the newlines?</p>",
        "id": 219708806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779439
    },
    {
        "content": "<p>none there, that's the whole point</p>",
        "id": 219708846,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779449
    },
    {
        "content": "<p>here's a more complete example:</p>\n<div class=\"codehilite\"><pre><span></span><code>   write!(p, &quot;let cfg {} &quot;, func.name)?;\n\n    for (nm, ty) in &amp;func.args {\n        write!(p, &quot;(o_{} : {})&quot;, nm, ty)?;\n    }\n\n    writeln!(p, &quot; : {}&quot;, func.retty)?;\n\n    for req in &amp;func.preconds {\n        writeln!(p, &quot;requires {{ {} }}&quot;, req)?;\n    }\n    for req in &amp;func.postconds {\n        writeln!(p, &quot;ensures {{ {} }}&quot;, req)?;\n    }\n</code></pre></div>",
        "id": 219708849,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779464
    },
    {
        "content": "<p>so you want that to break once the line gets long enough, with indentation?</p>",
        "id": 219708851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779469
    },
    {
        "content": "<p>oh no, right now I'm just going to do indentation</p>",
        "id": 219708854,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779480
    },
    {
        "content": "<p>idc about line length, for that I'd need <code>pretty</code> or something alogn those lines</p>",
        "id": 219708858,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779494
    },
    {
        "content": "<p>I thought I had a clever hack by implementing <code>write_fmt</code> to prefix lines with indentation</p>",
        "id": 219708866,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779512
    },
    {
        "content": "<p>I'm currently thinking I'll just check if the last <code>Arguments</code> is a newline and use that</p>",
        "id": 219708888,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779560
    },
    {
        "content": "<p>it'll be good enough for now and definitely better than the current code</p>",
        "id": 219708927,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779572
    },
    {
        "content": "<p>is that how <code>writeln!</code> works? I could imagine it either editing the format literal to add a <code>\"\\n\"</code> or interpolating one in</p>",
        "id": 219708944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779626
    },
    {
        "content": "<p>It just adds the string literal <code>\"\\n\"</code> to the list of expressions to print</p>",
        "id": 219708954,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779673
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/src/core/macros/mod.rs.html#454\">https://doc.rust-lang.org/src/core/macros/mod.rs.html#454</a></p>",
        "id": 219708996,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779696
    },
    {
        "content": "<p>maybe <code>format_args!</code> does some magic to it after</p>",
        "id": 219709011,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779725
    },
    {
        "content": "<p>ooh, <code>format_args_nl</code> looks like some more magic</p>",
        "id": 219709030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>macro_rules! format_args {\n        ($fmt:expr) =&gt; {{ /* compiler built-in */ }};\n        ($fmt:expr, $($args:tt)*) =&gt; {{ /* compiler built-in */ }};\n    }\n</code></pre></div>\n<p>ah nice</p>",
        "id": 219709035,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779790
    },
    {
        "content": "<p>the version that adds <code>\"\\n\"</code> only triggers if you aren't interpolating</p>",
        "id": 219709036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607779793
    },
    {
        "content": "<p>yea</p>",
        "id": 219709079,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779817
    },
    {
        "content": "<p>time to pull up rustc :)))))</p>",
        "id": 219709081,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779824
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> Ok(mut fmt) if append_newline =&gt; {\n            fmt.0 = Symbol::intern(&amp;format!(&quot;{}\\n&quot;, fmt.0));\n            fmt\n        }\n</code></pre></div>",
        "id": 219709097,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779890
    },
    {
        "content": "<p>the relevant bit in <code>rustc</code></p>",
        "id": 219709098,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779896
    },
    {
        "content": "<p>so seems like it should suffice to check if the last format string has a <code>\\n</code></p>",
        "id": 219709172,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607779992
    },
    {
        "content": "<p>ah its all private :(</p>",
        "id": 219709232,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607780064
    },
    {
        "content": "<p><code>Arguments</code> you mean?</p>",
        "id": 219709235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607780080
    },
    {
        "content": "<p>yea</p>",
        "id": 219709240,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607780093
    },
    {
        "content": "<p>I'll find another awful hack :)</p>",
        "id": 219709305,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1607780172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> Do you already know about the debug helpers like debug_map? Those seem close to what you're doing, and they handle indented pretty-printing.</p>",
        "id": 220011122,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608052476
    },
    {
        "content": "<p>Yea that might be a good idea for inspiration on the api</p>",
        "id": 220011330,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1608052567
    },
    {
        "content": "<p>though i'm not formatting a map (but rather expressions in a language)</p>",
        "id": 220011362,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1608052580
    },
    {
        "content": "<p>I ended up going with the wrapping-struct idea of Mario though I'm not super happy about it, it still feels verbose</p>",
        "id": 220011435,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1608052616
    },
    {
        "content": "<p>its definitely better than what I had before</p>",
        "id": 220011458,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1608052625
    }
]