[
    {
        "content": "<p>Anyone has design ideas for Atomic+NonZero types?<br>\nRight now I do this by converting back and forth from NonZeroUsize and AtomicUsize example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">NonZeroUsizeAtomic</span><span class=\"p\">(</span><span class=\"n\">NonZeroUsize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">NonZeroUsizeAtomic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">NonZeroUsizeAtomic</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">NonZeroUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">NonZeroUsizeAtomic</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new_unchecked</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">NonZeroUsizeAtomic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"n\">NonZeroUsize</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">into_inner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">NonZeroUsize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">order</span>: <span class=\"nc\">Ordering</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">NonZeroUsize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: We never let the user store a raw usize, so it cannot be zero</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">NonZeroUsize</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">get</span><span class=\"p\">()).</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">store</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">NonZeroUsize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">order</span>: <span class=\"nc\">Ordering</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">get</span><span class=\"p\">()).</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b0ffb323b36bf869d0d4eec998e5f4f5\">https://play.rust-lang.org/?gist=b0ffb323b36bf869d0d4eec998e5f4f5</a></p>",
        "id": 211194126,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1600984293
    },
    {
        "content": "<p>That is not allowed. Atomic operations must use an <code>UnsafeCell</code> to avoid violating aliasing rules. <code>UnsafeCell</code> hides the niche to prevent aliasing issues when matching on something like <code>Option&lt;UnsafeCell&lt;NonZeroUsize&gt;&gt;</code> and at the same time modifying the immer <code>NonZeroUsize</code>.</p>",
        "id": 211220239,
        "sender_full_name": "bjorn3",
        "timestamp": 1601011998
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68206\">https://github.com/rust-lang/rust/issues/68206</a></p>",
        "id": 211220306,
        "sender_full_name": "bjorn3",
        "timestamp": 1601012107
    },
    {
        "content": "<p>We could have <code>AtomicOptionNonZeroUsize</code>, but that can be put in some 3rd party crate easy enough.</p>",
        "id": 211222001,
        "sender_full_name": "Lokathor",
        "timestamp": 1601014672
    },
    {
        "content": "<p>Yeah, basically mixing enum layout optimization and atomics ops is not a a good idea. Maybe with a future <code>#[repr(atomic)]</code> annotation to require the discriminant be determined using atomic loads it could be fine, but even then it's just better to hand-roll the layout optimization using your own newtype wrapper, as <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> suggested</p>",
        "id": 211242779,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601031114
    },
    {
        "content": "<p>I'm trying to decide if my example also inhibit unsoundness under <code>Option</code> I don't think it should? writing into an outer Option here would require holding a unique reference, (and there is no unsafe here)</p>",
        "id": 211249559,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1601035962
    },
    {
        "content": "<p>The problem is not <em>writing</em>, but <em>reading</em> the discriminant:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">AtomicNonZero</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n::<span class=\"n\">crossbeam</span>::<span class=\"n\">thread</span>::<span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">scope</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- non-atomic read to check against 0 =&gt; data race =&gt; UB</span>\n<span class=\"p\">}).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211278385,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601050081
    },
    {
        "content": "<p>In case no one else noticed my example makes 0 sense and doesn't do anything LOL<br>\nI shouldn't be allowed to post on Zulip at 1AM</p>",
        "id": 211351498,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1601112488
    }
]