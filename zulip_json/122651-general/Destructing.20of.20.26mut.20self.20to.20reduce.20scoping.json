[
    {
        "content": "<p>Is there any way to destructure something along the lines of <code>fn foo(&amp;mut self) { self.values.push(0) }</code> where you can destructure <code>self</code> in way that the compiler would know that not all of <code>self</code> needs to be borrowed, but only <code>self.values</code>?</p>\n<p>I've tried doing <code>fn(Self { ref mut values, .. }: &amp;mut Self)</code> although the compiler doesn't know that the function only needs access to <code>values</code>, also it's considered an associated function which is a bit annoying</p>",
        "id": 247523823,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1627510445
    },
    {
        "content": "<p>Ideally this would be automated as it is done in closures in 2021 Rust, but I don't know how hard that would be</p>",
        "id": 247524125,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1627510660
    },
    {
        "content": "<p>Unfortunately, no</p>",
        "id": 247524682,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627511021
    },
    {
        "content": "<p>See this blog post for a discussion of the topic: <a href=\"https://smallcultfollowing.com/babysteps/blog/2018/11/01/after-nll-interprocedural-conflicts/\">https://smallcultfollowing.com/babysteps/blog/2018/11/01/after-nll-interprocedural-conflicts/</a></p>",
        "id": 247524750,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627511048
    }
]