[
    {
        "content": "<p>This code <strong>compiles</strong> in Rust 1.53:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">returns_closure</span><span class=\"p\">(</span><span class=\"n\">maybe</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">maybe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We had expected that it would not, because we are dynamically selecting which closure to return.</p>\n<p>Looking at the MIR, the closures have been promoted to functions and the <code>impl Trait</code> becomes a function pointer:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn returns_closure(_1: bool) -&gt; fn(i32) -&gt; i32 {\n</code></pre></div>\n<p>Is this deliberate or a leaky optimization or something?</p>",
        "id": 244942979,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625495501
    },
    {
        "content": "<p>Because this automatically creates dynamic dispatch, which feels surprising</p>",
        "id": 244943278,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625495639
    },
    {
        "content": "<p>Isn't this the same as (with some knowledge of the actual signature)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">maybe</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>if statements trigger coercions to unify the type produced in each case.</p>",
        "id": 244943418,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625495689
    },
    {
        "content": "<p>(I've used this to trigger decay from fn-item to fn-pointer because the whole fn-item design is absolutely brilliant and has no flaws whatsoever)</p>",
        "id": 244943623,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625495808
    },
    {
        "content": "<p>That seems the same, but it's still new(ish). e.g. Rust 1.34:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: if and else have incompatible types\n --&gt; src/main.rs:5:9\n  |\n2 | /     if maybe {\n3 | |         |x| x + 1\n  | |         --------- expected because of this\n4 | |     } else {\n5 | |         |y| y + 2\n  | |         ^^^^^^^^^ expected closure, found a different closure\n6 | |     }\n  | |_____- if and else have incompatible types\n  |\n  = note: expected type `[closure@src/main.rs:3:9: 3:18]`\n             found type `[closure@src/main.rs:5:9: 5:18]`\n</code></pre></div>",
        "id": 244943751,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625495877
    },
    {
        "content": "<p>Ditto 1.40</p>",
        "id": 244943935,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625495961
    },
    {
        "content": "<p>Ok, this started working in 1.45</p>",
        "id": 244944133,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625496079
    },
    {
        "content": "<p>I don't see anything obvious in RELEASES.md</p>",
        "id": 244944331,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625496167
    },
    {
        "content": "<p>Probably inference related.</p>",
        "id": 244944586,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625496308
    },
    {
        "content": "<p>I stand by this statement though:</p>\n<blockquote>\n<p>Because this automatically creates dynamic dispatch, which feels surprising</p>\n</blockquote>",
        "id": 244944636,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625496342
    },
    {
        "content": "<p>Yeah. I think it's a good feature though, as it's the only way I know of to force a coercion in a generic context (which I have needed to validate functions used to initialize a type-erased syscall array).</p>",
        "id": 244945076,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625496603
    },
    {
        "content": "<p>I'm pretty sure this is unintentional; I don't recall T-lang FCPs to this effect on this time frame. <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> could you file an issue about this?</p>",
        "id": 244946398,
        "sender_full_name": "simulacrum",
        "timestamp": 1625497374
    },
    {
        "content": "<p>Can do. Pinging t-lang?</p>",
        "id": 244946450,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625497402
    },
    {
        "content": "<p>hmm, I recall this feature being added</p>",
        "id": 244947192,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625497808
    },
    {
        "content": "<p>it seems a bit sketchy though, coercions normally require a known target type, but this looks like it does some sort of pseudo-subtyping by computing a common coercion target?</p>",
        "id": 244947249,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625497856
    },
    {
        "content": "<p>that's <a href=\"https://github.com/rust-lang/rust/issues/71599\">#71599</a></p>",
        "id": 244947326,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625497917
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71599\">https://github.com/rust-lang/rust/pull/71599</a></p>",
        "id": 244947373,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625497933
    },
    {
        "content": "<p>ah, yes</p>",
        "id": 244947387,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625497949
    },
    {
        "content": "<p>I don't think the discussion at the time considered the impl trait relationship with function pointers, though I suppose it is sort of \"obvious\" in hindsight.</p>",
        "id": 244947432,
        "sender_full_name": "simulacrum",
        "timestamp": 1625497983
    },
    {
        "content": "<p>I think it's a good point that this was already happening for function references before</p>",
        "id": 244947441,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625497986
    },
    {
        "content": "<p>this just extended that a bit</p>",
        "id": 244947474,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1625498016
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/rust/issues/86885\">https://github.com/rust-lang/rust/issues/86885</a>, FWIW.</p>",
        "id": 244947567,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625498065
    },
    {
        "content": "<p>This doesn't really look like dynamic dispatch, because it's a function pointer not a trait object (ex. not <code>&amp;dyn Fn(i32) -&gt; i32</code>). There's no vtable AFAIK.</p>",
        "id": 245267693,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1625713544
    },
    {
        "content": "<p>A vtable, while adding another layer of memory indirection, is mainly just a bunch of function pointers.</p>",
        "id": 245340247,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1625763173
    },
    {
        "content": "<p>So how much better can you get than a raw function pointer? At some point you need to jump to the function's address, and a raw function pointer seems like the fastest way to provide that functionality.</p>",
        "id": 245344479,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1625765185
    },
    {
        "content": "<p>Not performing dynamic dispatch at all is usually faster</p>",
        "id": 245344880,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625765397
    },
    {
        "content": "<p>a direct call is still faster than an indirect call on many platforms</p>",
        "id": 245345269,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625765561
    },
    {
        "content": "<p>Not to mention that direct calls can be optimized better by LLVM</p>",
        "id": 245421169,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1625823027
    },
    {
        "content": "<p>I'm also unusual in that I classify <em>enums</em> as dynamic dispatch. I've gotten weird looks from that in the past, but I stand by it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 245497504,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625864499
    },
    {
        "content": "<p>Switching over an enum's discriminant is definitely dynamic, and if used to dispatch the kind of logic to use afterwards, then it does qualify as dynamic dispatch <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> just not a function pointer / virtual method-based one <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 245634079,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626048018
    },
    {
        "content": "<p>okay, but then so is <em>any</em> data-dependent control flow</p>",
        "id": 245634338,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626048407
    },
    {
        "content": "<p>Makes sense to me... the code is dispatched dynamically. <em>I</em> don't see a problem with that, but it's not an area where I'm often interacting with other people.</p>",
        "id": 245676555,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626091492
    },
    {
        "content": "<p>I think it's valuable to not automatically go \"dynamic dispatch is bad\" (which I think is unfortunately prevalent in Rust world), but rather to evaluate it in comparison to what other choices are possible.</p>",
        "id": 245676653,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626091549
    },
    {
        "content": "<p>And in comparison to the performance characteristics of any alternatives.</p>",
        "id": 245676725,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626091575
    }
]