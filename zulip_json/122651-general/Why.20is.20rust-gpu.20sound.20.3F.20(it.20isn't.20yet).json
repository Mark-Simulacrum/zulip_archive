[
    {
        "content": "<blockquote>\n<p>discord requires a email, it doesn't have to be your real main email.</p>\n</blockquote>\n<p>Zulip supports <a href=\"http://temp-mail.org\">temp-mail.org</a> and other temporary email providers. Discord bans those.</p>",
        "id": 238966827,
        "sender_full_name": "hannahE2",
        "timestamp": 1621160884
    },
    {
        "content": "<blockquote>\n<p>the non-atomic synchronization would require specialized wrapper types that control the kinds of indices you can use to read/write, IIRC. </p>\n</blockquote>\n<p>Is that explained somewhere ? (where are you recalling this from?)</p>",
        "id": 238966898,
        "sender_full_name": "hannahE2",
        "timestamp": 1621160966
    },
    {
        "content": "<blockquote>\n<p>ight now you have to use &amp;mut [u32] or w/e anyway</p>\n</blockquote>\n<p>I think this code ought to at least be using <code>*mut [u32]</code> to avoid instant UB due to the multiple <code>&amp;mut</code> issue.</p>",
        "id": 238966974,
        "sender_full_name": "hannahE2",
        "timestamp": 1621161030
    },
    {
        "content": "<p>This all seems very tricky, so its hard to blame this code for it.</p>",
        "id": 238967012,
        "sender_full_name": "hannahE2",
        "timestamp": 1621161105
    },
    {
        "content": "<p>It would be much better if the compiler just rejects <code>&amp;mut</code> in compute shader signatures that can use more than one \"thread\". IIUC we are all in agreement that this is and will always be unsound, so better start rejecting that kind of code now.</p>",
        "id": 238967076,
        "sender_full_name": "hannahE2",
        "timestamp": 1621161160
    },
    {
        "content": "<p>Going through the Rust threads about compute shaders, it seems that people are unaware of this. Is there an issue on Rust GPU on github tracking this?</p>",
        "id": 238967541,
        "sender_full_name": "hannahE2",
        "timestamp": 1621161614
    },
    {
        "content": "<p><a href=\"https://github.com/EmbarkStudios/rust-gpu/issues/249\">https://github.com/EmbarkStudios/rust-gpu/issues/249</a><br>\nThis one seems to go in the direction of using something else instead of mut references.</p>",
        "id": 239011920,
        "sender_full_name": "Alex Mobius",
        "timestamp": 1621204942
    },
    {
        "content": "<p>What's the difference between that and just using <code>NonNull&lt;[T]&gt;</code> ?</p>",
        "id": 239115030,
        "sender_full_name": "hannahE2",
        "timestamp": 1621267091
    },
    {
        "content": "<p>I guess I don't understand why one has to wait for a <code>Buffer</code> type to be introduced.</p>\n<p>You can use <code>usize</code> or <code>*mut [T]</code> or <code>NonNull&lt;[T]&gt;</code> today and that would be sound.</p>\n<p>But there is no <code>T</code> for which using <code>&amp;mut T</code> isn't instant undefined behavior (unless the compute shader only has 1 thread).</p>",
        "id": 239115317,
        "sender_full_name": "hannahE2",
        "timestamp": 1621267195
    },
    {
        "content": "<blockquote>\n<p>The programmer is responsible, by using unsafe, to ensure no aliasing within the shader.</p>\n</blockquote>\n<p>This should be just \" The programmer is responsible, by using unsafe, to ensure no aliasing\". Not only can the data be aliased by threads in other shaders, but also threads in the CPU could be writing to the date while the GPU shader is reading it.</p>",
        "id": 239115868,
        "sender_full_name": "hannahE2",
        "timestamp": 1621267354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409057\">hannahE2</span> <a href=\"#narrow/stream/122651-general/topic/Why.20is.20rust-gpu.20sound.20.3F.20.28it.20isn't.20yet.29/near/239115317\">said</a>:</p>\n<blockquote>\n<p>I guess I don't understand why one has to wait for a <code>Buffer</code> type to be introduced.</p>\n<p>You can use <code>usize</code> or <code>*mut [T]</code> or <code>NonNull&lt;[T]&gt;</code> today and that would be sound.</p>\n<p>But there is no <code>T</code> for which using <code>&amp;mut T</code> isn't instant undefined behavior (unless the compute shader only has 1 thread).</p>\n</blockquote>\n<p>Work is being done on introducing synchronization primitives to rust-gpu, I have to imagine that's the rationale for the Buffer type.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"409057\">hannahE2</span> <a href=\"#narrow/stream/122651-general/topic/Why.20is.20rust-gpu.20sound.20.3F.20.28it.20isn't.20yet.29/near/239115868\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The programmer is responsible, by using unsafe, to ensure no aliasing within the shader.</p>\n</blockquote>\n<p>This should be just \" The programmer is responsible, by using unsafe, to ensure no aliasing\". Not only can the data be aliased by threads in other shaders, but also threads in the CPU could be writing to the date while the GPU shader is reading it.</p>\n</blockquote>\n<p>Arguably, keeping a memory range mapped while it's in use by the compute shader is unsound in and of itself - not sure if that's a valid use case.</p>",
        "id": 239138039,
        "sender_full_name": "Alex Mobius",
        "timestamp": 1621276168
    },
    {
        "content": "<blockquote>\n<p>I have to imagine that's the rationale for the Buffer type.</p>\n</blockquote>\n<p>Do they want to expose a different buffer for every synchronization pattern in existance ? <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>  </p>\n<blockquote>\n<p>keeping a memory range mapped while it's in use by the compute shader is unsound in and of itself </p>\n</blockquote>\n<p>Why? A thread is a thread is a thread. Hardware support for GPU-CPU atomics was introduced a decade ago, and a lot of hardware today has coherent CPU-GPU fabrics.</p>\n<blockquote>\n<p>not sure if that's a valid use case.</p>\n</blockquote>\n<p>There are many apps doing this. For example, a compute kernel that processes a stream of data, using CPU-GPU atomics to pull data from a work queue (e.g. CPU copies data to GPU, signals it as ready, and copies output out, but the shader never stops working).</p>",
        "id": 239165528,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288262
    },
    {
        "content": "<p>Another simple example is... reading a file from the GPU. The CPU can mmap it, and the GPU can just read it.</p>",
        "id": 239165565,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288294
    },
    {
        "content": "<p>Another example would be doing network communication from a compute shader. The shader can pack/unpack data very quickly, and either directly write to the memory of another GPU (e.g. via a global address space), or signal the CPU to initiate a network transfer of that data (via a task queue).</p>",
        "id": 239165694,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288365
    },
    {
        "content": "<p>Lots of examples, but maybe even more generally, every app for which the latency of launching a shader is not acceptable just solves the problem by keeping the shader running, and that means that threads within the shader need to communicate with threads outside the shader using atomics.</p>",
        "id": 239165866,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409057\">hannahE2</span> <a href=\"#narrow/stream/122651-general/topic/Why.20is.20rust-gpu.20sound.20.3F.20.28it.20isn't.20yet.29/near/239165528\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I have to imagine that's the rationale for the Buffer type.</p>\n</blockquote>\n<p>Do they want to expose a different buffer for every synchronization pattern in existance ? <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>  </p>\n</blockquote>\n<p>Hm? I mean, being able to safely express <em>some</em> synchronization patterns is better than <em>none</em> - Rust cannot safely express any memory management pattern safely, for example, but it covers common use-cases.</p>",
        "id": 239166105,
        "sender_full_name": "Alex Mobius",
        "timestamp": 1621288607
    },
    {
        "content": "<blockquote>\n<p>keeping a memory range mapped while it's in use by the compute shader is unsound in and of itself </p>\n</blockquote>\n<p>You can actually prove this is sound in a couple of memory models.</p>",
        "id": 239166108,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288612
    },
    {
        "content": "<blockquote>\n<p>Hm? I mean, being able to safely express some synchronization patterns is better than none - Rust cannot safely express any memory management pattern safely, for example, but it covers common use-cases.</p>\n</blockquote>\n<p>Right, but there are thousands of different patterns on GPUs, pretty much every app uses a different pattern.</p>",
        "id": 239166146,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288655
    },
    {
        "content": "<p>Just look at classical parallel algorithms on GPUs (scan, histograms, sort, etc.). You find a dozen different patterns in each.</p>",
        "id": 239166283,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288737
    },
    {
        "content": "<p>If they want to wait for having types for \"the basic\" patterns before starting to consider rust-gpu sound... they are going to be waiting for a long time...</p>",
        "id": 239166547,
        "sender_full_name": "hannahE2",
        "timestamp": 1621288879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409057\">hannahE2</span> <a href=\"#narrow/stream/122651-general/topic/Why.20is.20rust-gpu.20sound.20.3F.20.28it.20isn't.20yet.29/near/239165565\">said</a>:</p>\n<blockquote>\n<p>Another simple example is... reading a file from the GPU. The CPU can mmap it, and the GPU can just read it.</p>\n</blockquote>\n<p>Not quite that simple - the GPU needs to be mindful of the IOMMU, so the kernel needs to mark the memory as accessible to the GPU too.</p>",
        "id": 239835232,
        "sender_full_name": "riking",
        "timestamp": 1621649019
    },
    {
        "content": "<p>For something like <code>rust-gpu</code>, I imagine the best approach is to use an opaque buffer type that doesn’t allow obtaining references to the inside of the buffer.  Fuschia has something similar, but IMO it belongs in the standard library so that we can expose <code>mmap</code>.</p>",
        "id": 241672584,
        "sender_full_name": "Demi Obenour",
        "timestamp": 1622954768
    }
]