[
    {
        "content": "<p>Its claimed that making use of TraitObjects reduces code bloat since the compiler no longer knows what implementation to use. <br>\nFor e.g. </p>\n<p>trait DisplayMe { <br>\n    fn display(&amp;self) -&gt; String<br>\n }</p>\n<p>impl DisplayMe for u32{<br>\n     fn display(&amp;self) -&gt; String{<br>\n          format!(\"u32 here {}\", *self)<br>\n     }<br>\n} </p>\n<p>impl DisplayMe for String{<br>\n     fn display(&amp;self) -&gt; String{<br>\n          format!(\"String here {}\", *self)<br>\n     }<br>\n} </p>\n<p>// use case<br>\nfn display_something(x: &amp;DisplayMe){<br>\n     println!( \"{}\", x.display() );<br>\n}</p>\n<p>fn main(){<br>\n     let x: &amp;DisplayMe = &34;<br>\n     let y: &amp;DisplayMe = &amp;\"Hello\".to_string();</p>\n<div class=\"codehilite\"><pre><span></span><code> display_something(x);\n display_something(y);\n</code></pre></div>\n\n<p>}</p>\n<p>The question is why cant the compiler infer the types(as it usually does by scanning the source) and expand the code? Or is the types inference deliberately skipped to allow dynamic dispatch during runtime ?</p>",
        "id": 236282843,
        "sender_full_name": "Supi Mon",
        "timestamp": 1619498713
    },
    {
        "content": "<p>Yes, in examples like yours, the compiler could optimize to remove the dynamic dispatch. (This is an optimization known as devirtualization, for reasons having to do with c++)</p>",
        "id": 236284387,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619500289
    },
    {
        "content": "<p>In general though, after a certain point the compiler becomes unable to track the flow</p>",
        "id": 236284391,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619500304
    },
    {
        "content": "<p>For example, you could have an array of trait objects, and sample from it at random</p>",
        "id": 236284442,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619500336
    },
    {
        "content": "<p>or create different ones in different conditional branches</p>",
        "id": 236284461,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619500361
    },
    {
        "content": "<p>These things would be forbidden for static dispatch, however are allowed for dynamic dispatch</p>",
        "id": 236284475,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619500381
    },
    {
        "content": "<p>The reason why the code bloat is less is a bit more subtle though</p>",
        "id": 236284487,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619500399
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">does_lots_of_things_to1</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Imagine this is a several hundred line function or something</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">does_lots_of_things_to2</span><span class=\"o\">&lt;</span><span class=\"n\">X</span>: <span class=\"nc\">MyTrait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">X</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Also a several hundred line function or something</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In the 2nd one, the compiler is <em>forced</em> to emit one version of it for each type, whereas in the first it <em>could</em> do it if it can work out the types and its heuristics say it's a good call (if its very large, they likely will not)</p>",
        "id": 236284604,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619500508
    },
    {
        "content": "<p>Thanks Thom, makes sense.</p>",
        "id": 236285022,
        "sender_full_name": "Supi Mon",
        "timestamp": 1619500909
    },
    {
        "content": "<p>Hmm I don't know if forced is the right word, I wish the compiler would do more outlining<br>\n<a href=\"https://github.com/rust-lang/rust/issues/77960\">https://github.com/rust-lang/rust/issues/77960</a></p>",
        "id": 236330639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619528081
    }
]