[
    {
        "content": "<p>why is <code>std::ffi::CStr</code> not in <code>core</code> ?</p>",
        "id": 146877369,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541522955
    },
    {
        "content": "<p>or in libc ?</p>",
        "id": 146877456,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523014
    },
    {
        "content": "<p>it might not make sense for <code>core</code> because it would require <code>libc</code> for <code>c_char</code>, but it could be exposed in <code>libc</code> so that one does not need <code>libstd</code> to use it</p>",
        "id": 146877479,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> because right now, CStr is not really ffi safe</p>",
        "id": 146877813,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523368
    },
    {
        "content": "<p>if it were a thin pointer, maybe</p>",
        "id": 146877833,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523392
    },
    {
        "content": "<p>although maybe there's an argument for core</p>",
        "id": 146877838,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523407
    },
    {
        "content": "<p>we could put it in <code>core</code> if we require <code>char</code> to be 1 byte in the UCG</p>",
        "id": 146877861,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523445
    },
    {
        "content": "<p>but otherwise, <code>core</code> does not know <code>c_char</code></p>",
        "id": 146877877,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> why isn't CStr just a *[const,mut] c_char ?</p>",
        "id": 146877947,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523518
    },
    {
        "content": "<p>is there a way to make a type be \"unsized\" ?</p>",
        "id": 146877969,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523544
    },
    {
        "content": "<p>e.g. <code>struct CStr(*mut c_char);  impl !Sized for CStr {}</code></p>",
        "id": 146877998,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523584
    },
    {
        "content": "<p>nope</p>",
        "id": 146878020,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523602
    },
    {
        "content": "<p>not as of yet</p>",
        "id": 146878057,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523605
    },
    {
        "content": "<p>it's a <code>struct CStr([c_char]);</code> right now</p>",
        "id": 146878081,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523621
    },
    {
        "content": "<p>which means it's unsized, but not thin</p>",
        "id": 146878096,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523645
    },
    {
        "content": "<p>is there an unsized type that's one pointer wide ?</p>",
        "id": 146878135,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523678
    },
    {
        "content": "<p>no</p>",
        "id": 146878213,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523752
    },
    {
        "content": "<p>not right now</p>",
        "id": 146878215,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523755
    },
    {
        "content": "<p>we need custom DSTs</p>",
        "id": 146878221,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523769
    },
    {
        "content": "<p>lol, even trait objects of traits without methods are 16 bytes wide</p>",
        "id": 146878347,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523898
    },
    {
        "content": "<p>why ?</p>",
        "id": 146878378,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541523937
    },
    {
        "content": "<p>because nobody has put in the work to do this yet</p>",
        "id": 146878390,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523955
    },
    {
        "content": "<p>and for that, because you still need size, align, and drop</p>",
        "id": 146878433,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541523968
    },
    {
        "content": "<p><code>trait Bar {} struct CStr(dyn Bar);</code> could work iff <code>dyn Bar</code> would be pointer sized because there is no need for a <code>vtable</code> pointer</p>",
        "id": 146878477,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> also even if the trait has no method you need a vtable for size, alignment and <code>drop</code></p>",
        "id": 146878481,
        "sender_full_name": "RalfJ",
        "timestamp": 1541524020
    },
    {
        "content": "<p>oh</p>",
        "id": 146878497,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524033
    },
    {
        "content": "<p>there is <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s trick with <code>extern type</code></p>",
        "id": 146878514,
        "sender_full_name": "RalfJ",
        "timestamp": 1541524057
    },
    {
        "content": "<p>but then you lose size_of_val</p>",
        "id": 146878523,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524076
    },
    {
        "content": "<p>because it turns out that with <code>extern { type Foo; }</code>, <code>Foo</code> <em>is</em> DST and thin</p>",
        "id": 146878524,
        "sender_full_name": "RalfJ",
        "timestamp": 1541524078
    },
    {
        "content": "<p>which is a breaking change</p>",
        "id": 146878569,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524083
    },
    {
        "content": "<p>but yeah there are lots of unanswered questions around that</p>",
        "id": 146878576,
        "sender_full_name": "RalfJ",
        "timestamp": 1541524087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span>  I suppose <code>CStr</code> wants to be a custom DST where <code>size_of_val</code> does <code>strlen</code>?</p>",
        "id": 146878600,
        "sender_full_name": "RalfJ",
        "timestamp": 1541524122
    },
    {
        "content": "<p>yes</p>",
        "id": 146878611,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524130
    },
    {
        "content": "<p>yes</p>",
        "id": 146878614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524133
    },
    {
        "content": "<p>I mean, its in <code>std::ffi::CStr</code>, and its not FFI safe</p>",
        "id": 146878642,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524160
    },
    {
        "content": "<p>yeah</p>",
        "id": 146878652,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524172
    },
    {
        "content": "<p>it's quite ridiculous</p>",
        "id": 146878654,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524177
    },
    {
        "content": "<p>we don't need full DST for this, some rustc_ magic to allow implementing it would suffice</p>",
        "id": 146878714,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524206
    },
    {
        "content": "<p>that seems... unfortunate</p>",
        "id": 146878751,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524246
    },
    {
        "content": "<p>i mean, full DSTs would be cool but i wouldn't block fixing CStr on it</p>",
        "id": 146878795,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524298
    },
    {
        "content": "<p>it also seems like a lot of work for that</p>",
        "id": 146878806,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524316
    },
    {
        "content": "<p>*just that</p>",
        "id": 146878809,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524321
    },
    {
        "content": "<p>frankly, we should just fix DSTs now</p>",
        "id": 146878857,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524331
    },
    {
        "content": "<p>as opposed to inventing a solution for exactly one type</p>",
        "id": 146878867,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524340
    },
    {
        "content": "<p>re-open the RFC ?</p>",
        "id": 146878874,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524350
    },
    {
        "content": "<p>yeah</p>",
        "id": 146878881,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524358
    },
    {
        "content": "<p>alright</p>",
        "id": 146878882,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524362
    },
    {
        "content": "<p>ping me in 10 hours?</p>",
        "id": 146878888,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524375
    },
    {
        "content": "<p>I'll put in the work to get it up to snuff</p>",
        "id": 146878896,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524384
    },
    {
        "content": "<p>i'll be sleeping in 10 hours probably</p>",
        "id": 146878914,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524405
    },
    {
        "content": "<p>fair</p>",
        "id": 146878917,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524410
    },
    {
        "content": "<p>will be 2 am over here :D</p>",
        "id": 146878927,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524417
    },
    {
        "content": "<p>well, no promises, but if I remember lol</p>",
        "id": 146878928,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524421
    },
    {
        "content": "<p>where are you?</p>",
        "id": 146878932,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524426
    },
    {
        "content": "<p>germany</p>",
        "id": 146878937,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524431
    },
    {
        "content": "<p>ah, cool</p>",
        "id": 146878945,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541524437
    },
    {
        "content": "<p>:D</p>",
        "id": 146879003,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541524460
    },
    {
        "content": "<p>Frankly we could add an unstable <code>DynSized</code> trait that overloads the <code>size_of_val</code> that you'd get for a DST</p>",
        "id": 146880448,
        "sender_full_name": "eddyb",
        "timestamp": 1541525953
    },
    {
        "content": "<p>that would solve the problem for CStr at least, and we can punt figuring out custom DST until later</p>",
        "id": 146880469,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541525988
    },
    {
        "content": "<p>I'm not sure it would even be that hard, you just treat the compiler-provided one as a <code>default fn</code> method</p>",
        "id": 146880527,
        "sender_full_name": "eddyb",
        "timestamp": 1541526012
    },
    {
        "content": "<p>but I'd also clue in <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> first</p>",
        "id": 146880544,
        "sender_full_name": "eddyb",
        "timestamp": 1541526032
    },
    {
        "content": "<p>from a miri perspective I am actively scared of <code>size_and_align_of_mplace</code> executing arbitrary code</p>",
        "id": 146881006,
        "sender_full_name": "RalfJ",
        "timestamp": 1541526441
    },
    {
        "content": "<p>what if we require the overridden <code>size_of_val</code>/<code>align_of_val</code> to be <code>const</code></p>",
        "id": 146881123,
        "sender_full_name": "kennytm",
        "timestamp": 1541526531
    },
    {
        "content": "<p>(assuming <code>strlen</code> can be <code>const</code>)</p>",
        "id": 146881144,
        "sender_full_name": "kennytm",
        "timestamp": 1541526553
    },
    {
        "content": "<p>uh that is an interesting idea</p>",
        "id": 146881235,
        "sender_full_name": "RalfJ",
        "timestamp": 1541526611
    },
    {
        "content": "<p>doesnt make me less scared TBH but still interesting^^</p>",
        "id": 146881243,
        "sender_full_name": "RalfJ",
        "timestamp": 1541526619
    },
    {
        "content": "<p><code>strlen</code> can be a <code>const fn</code>, but we will want to call C's <code>strlen</code> when it is not executed at compile-time</p>",
        "id": 146881246,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541526620
    },
    {
        "content": "<p>I think we should be calling our own TBH</p>",
        "id": 146881284,
        "sender_full_name": "RalfJ",
        "timestamp": 1541526652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that might be a big performance regression at run-time</p>",
        "id": 146881327,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541526687
    },
    {
        "content": "<p>i suppose the runtime <code>strlen</code> would involve SIMD and maybe read slightly beyond the allocated region</p>",
        "id": 146881362,
        "sender_full_name": "kennytm",
        "timestamp": 1541526723
    },
    {
        "content": "<p>the one in the C library might do run-time feature detection for large strings, use SSE, AVX, ... intrinsics, inline assembly, or even be fully written in assembly</p>",
        "id": 146881406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541526732
    },
    {
        "content": "<p>i forgot the trick of reading out of bounds</p>",
        "id": 146881446,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541526770
    },
    {
        "content": "<p>we could always turn <code>strlen</code> into an intrinsic <span class=\"emoji emoji-1f643\" title=\"upside down\">:upside_down:</span></p>",
        "id": 146881486,
        "sender_full_name": "kennytm",
        "timestamp": 1541526800
    },
    {
        "content": "<p>yeah, the goalt here isn't evolving custom DST or const fn, but fixing CStr</p>",
        "id": 146881575,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541526848
    },
    {
        "content": "<p>do we need a thin CStr <em>today</em>? <code>core::ffi::CStr</code> only needs a <code>core::ffi::c_char</code>. if you need to pass the CStr into FFI functions you could still use <code>.as_ptr()</code></p>",
        "id": 146881873,
        "sender_full_name": "kennytm",
        "timestamp": 1541527100
    },
    {
        "content": "<p>no, but it's confusing and frustrating to do that</p>",
        "id": 146882317,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541527537
    },
    {
        "content": "<p>it would make working with C FFI so much better, working with <code>*mut c_char</code> sucks and is very error prone (forgot to check the <code>\\0</code> terminator ? etc. )</p>",
        "id": 146882600,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541527803
    },
    {
        "content": "<p>C strings and element-pointer+length arrays are the only thing in Rust's FFI to LLVM that are not safe types right now</p>",
        "id": 146883338,
        "sender_full_name": "eddyb",
        "timestamp": 1541528527
    },
    {
        "content": "<p>since @irinagpopa made all of the LLVM classes be used by reference (relying on <code>extern type</code> ofc)</p>",
        "id": 146883375,
        "sender_full_name": "eddyb",
        "timestamp": 1541528559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <a href=\"https://internals.rust-lang.org/t/pre-rfc-custom-dsts/8777\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-custom-dsts/8777\">https://internals.rust-lang.org/t/pre-rfc-custom-dsts/8777</a></p>",
        "id": 146886270,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541531355
    },
    {
        "content": "<p>re miri: even with const fn this requires machine steps to execute for determining the size. that's just scary^^</p>",
        "id": 146893651,
        "sender_full_name": "RalfJ",
        "timestamp": 1541537697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> uh I dont think reading beyond the allocated region is something LLVM allows you to do^^</p>",
        "id": 146893674,
        "sender_full_name": "RalfJ",
        "timestamp": 1541537716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> thanks!</p>",
        "id": 146928245,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541582262
    }
]