[
    {
        "content": "<p>claim: IIRC impl Trait is always an existential type, but in argument position it is isomorphic to a similar universally quantified type</p>\n<p>problem:  when you start nesting things, like <code>fn foo(fn(impl Trait) -&gt; impl Trait)</code>, the \"proper\" thing you'd expect is that the existentials are like <code>fn foo(fn(exists T: Trait, T) -&gt; (exists T: Trait, T))</code>.</p>\n<p>@Centril said this would be isomorphic to <code>exists A: Trait. forall B: Trait. fn foo(fn(A) -&gt; B)</code> but I don't see how, this is totally different? In my function above, the closure can be called with any <code>T</code>!</p>",
        "id": 166704979,
        "sender_full_name": "RalfJ",
        "timestamp": 1559041621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  if you have <code>fn foo(fn(exists T: Trait, T) -&gt; (exists T: Trait, T))</code> then the return type seems to me like <code>dyn Trait</code></p>",
        "id": 166705267,
        "sender_full_name": "centril",
        "timestamp": 1559041912
    },
    {
        "content": "<p>i.e. it can vary dynamically</p>",
        "id": 166705322,
        "sender_full_name": "centril",
        "timestamp": 1559041926
    },
    {
        "content": "<p>when you write something like <code>fn foo() -&gt; impl Alpha</code>, the scoping is <code>exists&lt;A: Alpha&gt; fn foo() -&gt; A</code></p>",
        "id": 166705347,
        "sender_full_name": "centril",
        "timestamp": 1559041971
    },
    {
        "content": "<p>that's isomorphic to <code>fn foo() -&gt; exists A: Alpha, A</code>.</p>",
        "id": 166705381,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042019
    },
    {
        "content": "<p>well okay here this relies on <code>foo</code> having no arguments, in general it'd rely on a restriction for types not to depend on values</p>",
        "id": 166705396,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042038
    },
    {
        "content": "<p>but either way I don't see how the thing you suggested has anything to do with the type I wrote^^</p>",
        "id": 166705455,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042065
    },
    {
        "content": "<p>what does your comma notation mean here? is it a sigma type?</p>",
        "id": 166705467,
        "sender_full_name": "centril",
        "timestamp": 1559042079
    },
    {
        "content": "<p>yeah this is basically Coq syntax</p>",
        "id": 166705476,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042091
    },
    {
        "content": "<p>except I am ignoring propositional existential vs sigma^^</p>",
        "id": 166705481,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042101
    },
    {
        "content": "<p>(Coq syntax is so weird ^^)</p>",
        "id": 166705492,
        "sender_full_name": "centril",
        "timestamp": 1559042104
    },
    {
        "content": "<p>(your syntax is even weirder :P )</p>",
        "id": 166705504,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042112
    },
    {
        "content": "<p><code>,</code> just terminates the list of binders. nothing weird. ;)</p>",
        "id": 166705519,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042131
    },
    {
        "content": "<p>(Idris does <code>a: B *** P(a)</code> -- very nice!)</p>",
        "id": 166705534,
        "sender_full_name": "centril",
        "timestamp": 1559042149
    },
    {
        "content": "<p>wtf</p>",
        "id": 166705537,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042157
    },
    {
        "content": "<p>looks like separating conjunction on steroids or so^^</p>",
        "id": 166705589,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042166
    },
    {
        "content": "<p>or maybe it's the good ol' \"<code>**</code> is <code>pow</code>\", so this is actually an exponential, as in a product type? :P</p>",
        "id": 166705611,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042195
    },
    {
        "content": "<p>it's 3 *s</p>",
        "id": 166705620,
        "sender_full_name": "centril",
        "timestamp": 1559042212
    },
    {
        "content": "<p>even more powerful than <code>pow</code> then^^</p>",
        "id": 166705635,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042223
    },
    {
        "content": "<p>but I have no idea; you'd have to ask Brady</p>",
        "id": 166705641,
        "sender_full_name": "centril",
        "timestamp": 1559042227
    },
    {
        "content": "<p>not sure how that's nice, has nothing to do with any syntax I've ever seen. But also <em>shrug</em> whatever.</p>",
        "id": 166705652,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042240
    },
    {
        "content": "<p>anyway, in <code>exists A: Trait. forall B: Trait. fn foo(fn(A) -&gt; B)</code>, <code>foo</code> can call the closure with only one type, namely the witness it took for <code>A</code>. In the one I wrote, interpreted in type theory, you can call the closure with a different argument type each time.</p>",
        "id": 166705673,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042262
    },
    {
        "content": "<p>well <code>fn foo() -&gt; exists A: Alpha, A</code> seems the same as <code>fn foo() -&gt; dyn Alpha</code></p>",
        "id": 166705683,
        "sender_full_name": "centril",
        "timestamp": 1559042275
    },
    {
        "content": "<p>that's like saying <code>fn foo() -&gt; impl Alpha</code> is isomorphic to <code>fn foo() -&gt; dyn Alpha</code></p>",
        "id": 166705741,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042297
    },
    {
        "content": "<p>the difference exists only because we have this dynamic-static dichotomy</p>",
        "id": 166705751,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042308
    },
    {
        "content": "<p>(on the level of abstraction that I am thinking at right now)</p>",
        "id": 166705767,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042330
    },
    {
        "content": "<p>I think overall it's best to think of <code>impl Trait</code> in terms of type inference + opacity</p>",
        "id": 166705774,
        "sender_full_name": "centril",
        "timestamp": 1559042339
    },
    {
        "content": "<p>you started mentioning type theory in the other thread, you dont get to change goalposts now^^</p>",
        "id": 166705799,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042363
    },
    {
        "content": "<p>I was just making a remark where <code>impl Trait</code> is not an existential</p>",
        "id": 166705901,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042449
    },
    {
        "content": "<p>I didn't say which type theory :P</p>",
        "id": 166705902,
        "sender_full_name": "centril",
        "timestamp": 1559042450
    },
    {
        "content": "<p>but we don't actually accept <code>impl Trait</code> in nested fn types or traits so I guess this discussion is moot :)</p>",
        "id": 166705919,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042465
    },
    {
        "content": "<p>it seems like everywhere that we accept <code>impl Trait</code>, it <em>is</em> (isomorphic to) an existential. So beauty is restored. :)</p>",
        "id": 166705936,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042507
    },
    {
        "content": "<p>when I think of <code>fn foo() -&gt; impl Bar</code> in terms of existentials, the existential binder is at the module level</p>",
        "id": 166705941,
        "sender_full_name": "centril",
        "timestamp": 1559042516
    },
    {
        "content": "<p>hm. interesting. not how I think about them.^^</p>",
        "id": 166706008,
        "sender_full_name": "RalfJ",
        "timestamp": 1559042540
    },
    {
        "content": "<p>if we do have something akin to <code>fn foo(_: impl Fn() -&gt; impl Bar)</code> it does get tricky tho... if we put the existential for <code>Bar</code> at the module level it is very surprising</p>",
        "id": 166706072,
        "sender_full_name": "centril",
        "timestamp": 1559042624
    },
    {
        "content": "<p>instead: <code>fn foo(_: exists&lt;F: Fn() -&gt; impl Bar&gt; F)</code> -- but we haven't made much progress</p>",
        "id": 166706145,
        "sender_full_name": "centril",
        "timestamp": 1559042664
    },
    {
        "content": "<p>presumably, what the user is trying to say is: <code>fn foo(_: exists&lt;F: Fn&lt;(), Output: Bar&gt;&gt; F)</code></p>",
        "id": 166706200,
        "sender_full_name": "centril",
        "timestamp": 1559042740
    },
    {
        "content": "<p>which is representable. but I'm also not sure if that's what it should mean</p>",
        "id": 166706281,
        "sender_full_name": "centril",
        "timestamp": 1559042798
    }
]