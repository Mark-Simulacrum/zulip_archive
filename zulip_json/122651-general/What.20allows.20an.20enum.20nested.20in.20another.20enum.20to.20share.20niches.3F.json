[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Reference</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Hex</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Named</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Token</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AttributeLiteral</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">AttributeReference</span><span class=\"p\">(</span><span class=\"n\">Reference</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// AttributeReference2(Reference&lt;T&gt;),</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Token</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If you uncomment the variant the size goes from 1 to 2 — why is that? Why isn't it always 1 and 1 or 2 and 2?</p>\n<p>Is it something like, when there's only one usage of <code>Reference</code> (or any nested enum), then the discriminants of <code>Token</code> are adjusted so that they are exclusive to <code>Reference</code>? Then once we get two usages of <code>Reference</code>, then you can't rely on that trick?</p>",
        "id": 232807497,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617303566
    },
    {
        "content": "<p>I think that's true, yeah</p>",
        "id": 232807801,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617303684
    },
    {
        "content": "<p>FWIW, your example with <code>Token&lt;bool&gt;</code> is 3 bytes either way</p>",
        "id": 232808174,
        "sender_full_name": "cuviper",
        "timestamp": 1617303833
    },
    {
        "content": "<p>so any layout tricks only seem to work for ZSTs in this case</p>",
        "id": 232808307,
        "sender_full_name": "cuviper",
        "timestamp": 1617303880
    },
    {
        "content": "<p>Oh, that’s unfortunate</p>",
        "id": 232808624,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304001
    },
    {
        "content": "<p>Or fortunate, I suppose.</p>",
        "id": 232808657,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304015
    },
    {
        "content": "<p>I think it's possible in theory that the single-ref version could be <code>(tag, bool)</code></p>",
        "id": 232808700,
        "sender_full_name": "cuviper",
        "timestamp": 1617304031
    },
    {
        "content": "<p>It means that there’s no space saving for manually flattening out an enum tree that has actual data in it</p>",
        "id": 232808792,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304076
    },
    {
        "content": "<p>I want that weird feature where a value can’t actually be referenced itself so it doesn’t need to be able to stand alone</p>",
        "id": 232809030,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304180
    },
    {
        "content": "<p>has that been seriously proposed? a bit like <code>packed</code>, I suppose.</p>",
        "id": 232809608,
        "sender_full_name": "cuviper",
        "timestamp": 1617304401
    },
    {
        "content": "<p>In various forms. The closest (but different) I can reference quickly is <a href=\"https://github.com/rust-lang/rfcs/pull/2593\">https://github.com/rust-lang/rfcs/pull/2593</a></p>",
        "id": 232810356,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304718
    },
    {
        "content": "<p>And yeah packed is related</p>",
        "id": 232810375,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304733
    },
    {
        "content": "<p>My thinking is that because the value inside the enum needs to be valid in its own, it can’t be aggressively compacted. So, what would it look like to remove that limitation?</p>",
        "id": 232810626,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304831
    },
    {
        "content": "<p>Another way of thinking of it would be like extreme monomorphization where we get a new (incompatible) type</p>",
        "id": 232810984,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617304972
    },
    {
        "content": "<p>Or a way of “overlapping” enum discriminants, but that touches on unsafe/UB things I believe.</p>",
        "id": 232811497,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617305191
    },
    {
        "content": "<blockquote>\n<p>It means that there’s no space saving for manually flattening out an enum tree that has actual data in it</p>\n</blockquote>\n<p>it might still be able to shuffle around variant fields to create a better niche. it can't do that for nested ones</p>",
        "id": 232828363,
        "sender_full_name": "The 8472",
        "timestamp": 1617312878
    },
    {
        "content": "<p>Ah yes; I think what I meant to say is that embedding one enum isn’t practically better than embedding two, even though the ZST example suggests it might be.</p>",
        "id": 232839137,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617319503
    }
]