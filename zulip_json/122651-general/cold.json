[
    {
        "content": "<p>does anyone know where <code>#[cold]</code> has any effect?</p>",
        "id": 148369007,
        "sender_full_name": "centril",
        "timestamp": 1543241415
    },
    {
        "content": "<p>e.g. does it have any effect on match arms?</p>",
        "id": 148369015,
        "sender_full_name": "centril",
        "timestamp": 1543241424
    },
    {
        "content": "<p>I bet <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> has ideas.</p>",
        "id": 148369605,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543242049
    },
    {
        "content": "<p>/me shoulda just stayed on Discord ;)</p>",
        "id": 148369697,
        "sender_full_name": "centril",
        "timestamp": 1543242155
    },
    {
        "content": "<p>There's a lot of scattered info in <a href=\"https://github.com/rust-lang/rust/issues/26179\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/26179\">https://github.com/rust-lang/rust/issues/26179</a></p>",
        "id": 148369707,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543242169
    },
    {
        "content": "<p>e.g.</p>\n<blockquote>\n<p>We could perhaps just allow <code>#[cold]</code> and/or <code>#[inline(never)]</code> on blocks/statements instead of just functions:</p>\n</blockquote>",
        "id": 148369739,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543242196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> reading that issue I think the conclusion is \"no\"</p>",
        "id": 148370531,
        "sender_full_name": "centril",
        "timestamp": 1543242843
    },
    {
        "content": "<p>I'm thinking about writing an RFC re. allowing arbitrary attributes on patterns</p>",
        "id": 148370581,
        "sender_full_name": "centril",
        "timestamp": 1543242878
    },
    {
        "content": "<p>cold is a function attribute that makes the function use llvm cold calling convention IIRC</p>",
        "id": 148375139,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543246735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@Mazdak Farrokhzad</span> you might want to check in the LangRef about what exactly that means</p>",
        "id": 148375140,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543246735
    },
    {
        "content": "<p><a href=\"https://llvm.org/docs/LangRef.html#calling-conventions\" target=\"_blank\" title=\"https://llvm.org/docs/LangRef.html#calling-conventions\">https://llvm.org/docs/LangRef.html#calling-conventions</a></p>\n<blockquote>\n<p>“coldcc” - The cold calling convention<br>\nThis calling convention attempts to make code in the caller as efficient as possible under the assumption that the call is not commonly executed. As such, these calls often preserve all registers so that the call does not break any live ranges in the caller side. This calling convention does not support varargs and requires the prototype of all callees to exactly match the prototype of the function definition. Furthermore the inliner doesn’t consider such function calls for inlining.</p>\n</blockquote>",
        "id": 148375141,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543246735
    },
    {
        "content": "<blockquote>\n<p>e.g. does it have any effect on match arms? </p>\n</blockquote>\n<p>AFAIK its a function attribute, so you can't use it anywhere else</p>",
        "id": 148375142,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543246735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> it is syntactically accepted atm on match arms</p>",
        "id": 148375266,
        "sender_full_name": "centril",
        "timestamp": 1543246820
    },
    {
        "content": "<p>weird, that's probably a bug, have you checked what it does ? it might just do nothing. . .</p>",
        "id": 148375334,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543246886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> nope; I also think it does nothing but I didnt check</p>",
        "id": 148375368,
        "sender_full_name": "centril",
        "timestamp": 1543246912
    },
    {
        "content": "<p>just check then :P some of the old attributes are implemented as \"if this is a function then do something else do nothing\"</p>",
        "id": 148375458,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543246968
    },
    {
        "content": "<blockquote>\n<p>syntactically accepted </p>\n</blockquote>\n<p>See also <a href=\"https://github.com/rust-lang/rust/issues/54044\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54044\">https://github.com/rust-lang/rust/issues/54044</a>:</p>\n<blockquote>\n<p>A lot of attributes (most of them?) are not validated in any way, neither locations, nor syntax.</p>\n</blockquote>",
        "id": 148375489,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543247005
    },
    {
        "content": "<p>there have been some issues with attributes error messages in the past because they don't check whether they can be used or not</p>",
        "id": 148375510,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247022
    },
    {
        "content": "<p>as in, many attributes could only be used in structs or fns or top level, and back then, those were the only place were you could use attributes so checking wasn't \"super\" necessary</p>",
        "id": 148375575,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247069
    },
    {
        "content": "<p>now that you can use attributes on expressions, blocks, etc..</p>",
        "id": 148375584,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247082
    },
    {
        "content": "<p>a lot of attributes could be better</p>",
        "id": 148375629,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  you cant use attrs on exprs</p>",
        "id": 148375645,
        "sender_full_name": "centril",
        "timestamp": 1543247134
    },
    {
        "content": "<p>not arbitrary ones at least</p>",
        "id": 148375651,
        "sender_full_name": "centril",
        "timestamp": 1543247140
    },
    {
        "content": "<p>on nightly you can</p>",
        "id": 148375658,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247147
    },
    {
        "content": "<p>IIRC</p>",
        "id": 148375668,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247158
    },
    {
        "content": "<p>ye, sure, <code>stmt_expr_attributes</code></p>",
        "id": 148375715,
        "sender_full_name": "centril",
        "timestamp": 1543247165
    },
    {
        "content": "<p>or on statements ?</p>",
        "id": 148375718,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247167
    },
    {
        "content": "<p>on stable you can on stmts</p>",
        "id": 148375729,
        "sender_full_name": "centril",
        "timestamp": 1543247178
    },
    {
        "content": "<p>ah yes that one is the one I meant</p>",
        "id": 148375738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247184
    },
    {
        "content": "<p>if <code>#[cold]</code> works on stable on match arms, that's probably an accidental stabilization, and can be fixed</p>",
        "id": 148375777,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543247227
    },
    {
        "content": "<blockquote>\n<p>if #[cold] works on stable on match arms, that's probably an accidental stabilization</p>\n</blockquote>\n<p>For most built-in attributes neither location, nor passed tokens are validated, so if you put an arbitrary built-in attribute in a completely nonsensical location it will likely be accepted on stable.</p>",
        "id": 148383623,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1543253933
    },
    {
        "content": "<p>See also \"Implement attributes for branch weight\" <a href=\"https://github.com/rust-lang/rust/issues/11092\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/11092\">#11092</a></p>",
        "id": 148636549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  saw that one; seems like a nice thing to allow?</p>",
        "id": 148636692,
        "sender_full_name": "centril",
        "timestamp": 1543324449
    },
    {
        "content": "<p>maybe; I guess we should look at whether the UI offered by the <code>likely</code>/<code>unlikely</code> intrinsics (<a href=\"https://github.com/rust-lang/rust/issues/36181\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/36181\">#36181</a>) is insufficient?</p>",
        "id": 148636746,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324528
    },
    {
        "content": "<p>At least, their addition was the justification for closing issue <a href=\"https://github.com/rust-lang/rust/issues/11092\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/11092\">#11092</a></p>",
        "id": 148636775,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> It's so far out of my area of expertise that I hope \"we\" doesn't include me ;)</p>",
        "id": 148636841,
        "sender_full_name": "centril",
        "timestamp": 1543324596
    },
    {
        "content": "<p>heh; doesn't participating in discussion of color of a bikeshed immediately qualify one for participation in the actual painting of said bikeshed? <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 148636878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  hihi ;) I was really mostly interested in the notion of extending attributes to patterns, i.e. <code>A(x) | #[foo] B(x)</code></p>",
        "id": 148636995,
        "sender_full_name": "centril",
        "timestamp": 1543324744
    },
    {
        "content": "<p>i see, and <code>#[cold]</code> was one of the hypothetical justifications you were considering?</p>",
        "id": 148637025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324776
    },
    {
        "content": "<p>yeah</p>",
        "id": 148637034,
        "sender_full_name": "centril",
        "timestamp": 1543324793
    },
    {
        "content": "<p>I would imagine <code>#[cfg(...)]</code> alone would suffice as justification, no?</p>",
        "id": 148637035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324794
    },
    {
        "content": "<p>or is the counter-argument somehow that one should always put <code>#[cfg(..)]</code> on arms, not patterns? (seems like a silly claim to me...)</p>",
        "id": 148637093,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> with the semantics that <code>A(x) | #[cfg(foo)] B(x)</code>  would remove <code>B(x)</code> if <code>foo</code> wasn't active?</p>",
        "id": 148637098,
        "sender_full_name": "centril",
        "timestamp": 1543324845
    },
    {
        "content": "<p>Right</p>",
        "id": 148637101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324850
    },
    {
        "content": "<p>(do we allow a trailing <code>|</code> ? think it was proposed but I forget the conclusion. We probably don't.)</p>",
        "id": 148637130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324883
    },
    {
        "content": "<p>yeah that makes sense even if the motivation is perhaps not as robust as I'd like</p>",
        "id": 148637142,
        "sender_full_name": "centril",
        "timestamp": 1543324890
    },
    {
        "content": "<p>we allow leading |</p>",
        "id": 148637146,
        "sender_full_name": "centril",
        "timestamp": 1543324895
    },
    {
        "content": "<p>right but that's not the interesting case here.</p>",
        "id": 148637161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324912
    },
    {
        "content": "<p>I mean, its no problem even if we <em>don't</em> allow trailing <code>|</code></p>",
        "id": 148637206,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324923
    },
    {
        "content": "<p>the parser can deal with it.</p>",
        "id": 148637213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543324929
    },
    {
        "content": "<p>I have wanted trailing <code>|</code> sometimes... seems to work better with our usual style to have the <code>|</code> at the end of the line</p>",
        "id": 148637214,
        "sender_full_name": "RalfJ",
        "timestamp": 1543324931
    },
    {
        "content": "<p><code>#[cfg(foo) A(x) | B(x) =&gt;</code> already attaches to the arm, so you need to write <code>(#[cfg(foo) A(x)) | B(x) =&gt;</code> for the other interpretation</p>",
        "id": 148637248,
        "sender_full_name": "centril",
        "timestamp": 1543324969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I wouldn't be against trailing | personally</p>",
        "id": 148637263,
        "sender_full_name": "centril",
        "timestamp": 1543324997
    },
    {
        "content": "<p>it was tangentially discussed on <a href=\"https://github.com/rust-lang/rfcs/pull/1925\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/1925\">https://github.com/rust-lang/rfcs/pull/1925</a></p>",
        "id": 148637271,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325010
    },
    {
        "content": "<p>yeah; that wasn't a very fun RFC experience so a redo might not be great for social reasons</p>",
        "id": 148637334,
        "sender_full_name": "centril",
        "timestamp": 1543325049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  I'm of the general opinion that almost all syntactic categories should permit attributes on them so the match-arm-only argument is silly to me as well</p>",
        "id": 148637403,
        "sender_full_name": "centril",
        "timestamp": 1543325105
    },
    {
        "content": "<p>lordy I'm even the one who posted <a href=\"https://github.com/rust-lang/rfcs/pull/1925#issuecomment-297851933\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/1925#issuecomment-297851933\"><code>@rfcbot concern trailing-vert</code></a></p>",
        "id": 148637422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325133
    },
    {
        "content": "<p>Ha.</p>",
        "id": 148637425,
        "sender_full_name": "centril",
        "timestamp": 1543325142
    },
    {
        "content": "<p>I should have just kept my mouth shut</p>",
        "id": 148637489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325171
    },
    {
        "content": "<p>(I posted my concern in the name of keeping everyone aware of what was going on, while I personally had no problem with trailing vert... I think...)</p>",
        "id": 148637507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325200
    },
    {
        "content": "<p>hehe; well, that's a sorta nice thing to do</p>",
        "id": 148637628,
        "sender_full_name": "centril",
        "timestamp": 1543325317
    },
    {
        "content": "<p>I'm being somewhat facetious when I say \"I should have kept my mouth shut\"</p>",
        "id": 148637641,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325345
    },
    {
        "content": "<p>I wouldn't want to \"win\" via such suberfuge</p>",
        "id": 148637645,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325359
    },
    {
        "content": "<p>at least not on a minor point like this <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 148637651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325364
    },
    {
        "content": "<p>(I've really derailed this thread; that's enough about trailing vert)</p>",
        "id": 148637660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543325395
    },
    {
        "content": "<blockquote>\n<p>at least not on a minor point like this </p>\n</blockquote>\n<p>Save it for the big occasions ^.^</p>",
        "id": 148637661,
        "sender_full_name": "centril",
        "timestamp": 1543325395
    },
    {
        "content": "<p>intrinsics are definitely not an insufficient API</p>",
        "id": 148640434,
        "sender_full_name": "nagisa",
        "timestamp": 1543328453
    },
    {
        "content": "<p>for starters, binary weights are not binary</p>",
        "id": 148640437,
        "sender_full_name": "nagisa",
        "timestamp": 1543328462
    },
    {
        "content": "<p>and for matches you are likely to want almost arbitrary weight distributions</p>",
        "id": 148640462,
        "sender_full_name": "nagisa",
        "timestamp": 1543328505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[likely = 3]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pat</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pat</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[likely = 2]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pat</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>does seem like an ergonomic way to deal with this</p>",
        "id": 148640571,
        "sender_full_name": "centril",
        "timestamp": 1543328599
    },
    {
        "content": "<p>where you have <code>#[likely = &lt;const_context&gt;]</code></p>",
        "id": 148640656,
        "sender_full_name": "centril",
        "timestamp": 1543328645
    },
    {
        "content": "<p>the only \"UI\" that I think works for this is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">#![weight=alot]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">pattern2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">#![weight=nottoomuch]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">somecondition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">#![weight=alot]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">othercondition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"cp\">#![weight=slightlyless]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"cp\">#![weight=howaboutnegative]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with exact format of attribute being a colour of your favourite shed.</p>",
        "id": 148640665,
        "sender_full_name": "nagisa",
        "timestamp": 1543328654
    },
    {
        "content": "<p>Note that branch weights are applicable to all sorts of control flow.</p>",
        "id": 148640699,
        "sender_full_name": "nagisa",
        "timestamp": 1543328692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  that seems the same thing as I wrote? (just with a renamed attribute)</p>",
        "id": 148640713,
        "sender_full_name": "centril",
        "timestamp": 1543328704
    },
    {
        "content": "<p>No, your attributes are applied to a match branch, while in my case they are applied to expression itself.</p>",
        "id": 148640748,
        "sender_full_name": "nagisa",
        "timestamp": 1543328734
    },
    {
        "content": "<p>oh</p>",
        "id": 148640760,
        "sender_full_name": "centril",
        "timestamp": 1543328750
    },
    {
        "content": "<p>not even match branch, its pattern.</p>",
        "id": 148640766,
        "sender_full_name": "nagisa",
        "timestamp": 1543328756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  it's applied to the match arm</p>",
        "id": 148640816,
        "sender_full_name": "centril",
        "timestamp": 1543328776
    },
    {
        "content": "<p>not the pattern</p>",
        "id": 148640819,
        "sender_full_name": "centril",
        "timestamp": 1543328782
    },
    {
        "content": "<p>hmmm...</p>",
        "id": 148640859,
        "sender_full_name": "nagisa",
        "timestamp": 1543328837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  so why apply the attribute to the expression rather than the pattern?</p>",
        "id": 148640868,
        "sender_full_name": "centril",
        "timestamp": 1543328845
    },
    {
        "content": "<p>because consistency with other control flow structures.</p>",
        "id": 148640877,
        "sender_full_name": "nagisa",
        "timestamp": 1543328857
    },
    {
        "content": "<p>with <code>if let</code> your example would end up being <code>if let #[likely] pat = expr { }</code> which is super different compared to <code>if expr {}</code>… where’d you even put an attribute on an <code>if</code>?</p>",
        "id": 148640945,
        "sender_full_name": "nagisa",
        "timestamp": 1543328907
    },
    {
        "content": "<p>when I think about this intuitively I want to say what the likelihood of the pattern being a match is</p>",
        "id": 148640954,
        "sender_full_name": "centril",
        "timestamp": 1543328919
    },
    {
        "content": "<p>it has no pattern/match arm</p>",
        "id": 148640956,
        "sender_full_name": "nagisa",
        "timestamp": 1543328922
    },
    {
        "content": "<p>ostensibly <code>if #[likely] expr { .. } else { ... }</code> annotates that the <code>if</code> branch is likely as opposed to the <code>else</code> branch</p>",
        "id": 148641066,
        "sender_full_name": "centril",
        "timestamp": 1543329021
    },
    {
        "content": "<p>but muh consistency…</p>",
        "id": 148641100,
        "sender_full_name": "nagisa",
        "timestamp": 1543329078
    },
    {
        "content": "<p>also you cannot annotate <code>else</code> anymore <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 148641120,
        "sender_full_name": "nagisa",
        "timestamp": 1543329104
    },
    {
        "content": "<p>i think the highest order bits I'm taking away from this conversation are that 1. <em>neither</em> <code>#[cold]</code> attribute <em>nor</em> the current <code>likely(EXPR)</code>/<code>unlikely(EXPR)</code> intrinistics are sufficiently general-purpose, and 2. an attribute <em>is</em> likely the be the right answer here, rather than some (new) intrinstic?</p>",
        "id": 148641122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329105
    },
    {
        "content": "<p>yeah it's not great consistency; but I do find <code>#[likely] pat =&gt; expr,</code> more intuitive personally</p>",
        "id": 148641126,
        "sender_full_name": "centril",
        "timestamp": 1543329112
    },
    {
        "content": "<p>I wouldn’t mind allowing that as a sugar for <code>pat =&gt; #[likely] expr</code> <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 148641178,
        "sender_full_name": "nagisa",
        "timestamp": 1543329137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> oh, we do have <code>#[likely]</code>?</p>",
        "id": 148641184,
        "sender_full_name": "centril",
        "timestamp": 1543329144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  fine by me <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 148641190,
        "sender_full_name": "centril",
        "timestamp": 1543329158
    },
    {
        "content": "<p>we do have a <code>#[cold]</code>for functions, IIRC</p>",
        "id": 148641192,
        "sender_full_name": "nagisa",
        "timestamp": 1543329165
    },
    {
        "content": "<p>not for branches.</p>",
        "id": 148641194,
        "sender_full_name": "nagisa",
        "timestamp": 1543329168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@Mazdak Farrokhzad</span> no, but we have <code>likely(..)</code>, right? That's  <a href=\"https://github.com/rust-lang/rust/issues/36181\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/36181\">#36181</a></p>",
        "id": 148641198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  ye it just works syntactically on branches at least but that's probably a bug per above discussion</p>",
        "id": 148641208,
        "sender_full_name": "centril",
        "timestamp": 1543329187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  oh... right; you said intrinsics :P -- I think your 1-2 points are good</p>",
        "id": 148641228,
        "sender_full_name": "centril",
        "timestamp": 1543329216
    },
    {
        "content": "<blockquote>\n<p>2. an attribute <em>is</em> likely the be the right answer here, rather than some (new) intrinstic?</p>\n</blockquote>\n<p>I firmly believe that some sort of an attribute is the right design here.</p>",
        "id": 148641240,
        "sender_full_name": "nagisa",
        "timestamp": 1543329229
    },
    {
        "content": "<p>I think that's the most important takeaway for <span class=\"user-mention\" data-user-id=\"126931\">@Mazdak Farrokhzad</span> , right?</p>",
        "id": 148641298,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329269
    },
    {
        "content": "<p>yes</p>",
        "id": 148641307,
        "sender_full_name": "centril",
        "timestamp": 1543329282
    },
    {
        "content": "<p>(though I guess <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> may or may not agree with the subsequent claim that this motivates attributes on patterns)</p>",
        "id": 148641332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I was sorta quietly complaining about unstable expr_stmt_attributes so that this feature could get unblocked <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 148641403,
        "sender_full_name": "nagisa",
        "timestamp": 1543329364
    },
    {
        "content": "<p>I don’t mind attributes on patterns/arms/etc.</p>",
        "id": 148641428,
        "sender_full_name": "nagisa",
        "timestamp": 1543329395
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 148641447,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329419
    },
    {
        "content": "<p>I can’t immediately think of any syntax ambiguities there.</p>",
        "id": 148641448,
        "sender_full_name": "nagisa",
        "timestamp": 1543329420
    },
    {
        "content": "<p>they probably don't motivate that as <code>#[likely = weight]</code> being sugar on an arm is not the same as on a pattern</p>",
        "id": 148641453,
        "sender_full_name": "centril",
        "timestamp": 1543329424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> iirc <code>stmt_expr_attributes</code> were blocked on precedence disagreements</p>",
        "id": 148641472,
        "sender_full_name": "centril",
        "timestamp": 1543329446
    },
    {
        "content": "<blockquote>\n<p>I can’t immediately think of any syntax ambiguities there.</p>\n</blockquote>\n<p>well apart from the obvious <code>#[attr] pat =&gt; expr</code></p>",
        "id": 148641473,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329447
    },
    {
        "content": "<p>I think that ambiguity is easily motivated (and also stable... =P )</p>",
        "id": 148641489,
        "sender_full_name": "centril",
        "timestamp": 1543329467
    },
    {
        "content": "<p>I personally prefer the precedence in Huon's original RFC</p>",
        "id": 148641555,
        "sender_full_name": "centril",
        "timestamp": 1543329500
    },
    {
        "content": "<p>i.e. <code>#[attr] a + b</code> associates as <code>(#[attr] a) + b</code></p>",
        "id": 148641566,
        "sender_full_name": "centril",
        "timestamp": 1543329519
    },
    {
        "content": "<p>In any case I agree with <span class=\"user-mention\" data-user-id=\"126931\">@Mazdak Farrokhzad</span> 's earlier point of just saying that you'd disambiguate via <code>(#[attr_on_pat] pat) =&gt; expr</code></p>",
        "id": 148641583,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329538
    },
    {
        "content": "<p>...but <code>#[attr] x.f(y)</code> associates as <code>#[attr] (x.f(y))</code></p>",
        "id": 148641605,
        "sender_full_name": "centril",
        "timestamp": 1543329565
    },
    {
        "content": "<p>(or maybe that should be <code>(#![attr_on_pat] pat) =&gt; expr</code>)</p>",
        "id": 148641609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329577
    },
    {
        "content": "<p>I don’t see a difference. There’s no semantic difference between applying attribute to a whole arm of a match or just its pattern (provided the implementation is appropriately adjusted)</p>",
        "id": 148641613,
        "sender_full_name": "nagisa",
        "timestamp": 1543329586
    },
    {
        "content": "<p>I… think.</p>",
        "id": 148641618,
        "sender_full_name": "nagisa",
        "timestamp": 1543329591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  seems equivalent?</p>",
        "id": 148641621,
        "sender_full_name": "centril",
        "timestamp": 1543329595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@Mazdak Farrokhzad</span> depends on how significant the parens are or could be</p>",
        "id": 148641670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  well for arbitrary proc macros they get different inputs</p>",
        "id": 148641672,
        "sender_full_name": "centril",
        "timestamp": 1543329614
    },
    {
        "content": "<p>Ah… okay.</p>",
        "id": 148641683,
        "sender_full_name": "nagisa",
        "timestamp": 1543329629
    },
    {
        "content": "<p>i.e. <code>(#![attr] foo)</code> == <code>#[attr] (foo)</code>, right?</p>",
        "id": 148641713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329650
    },
    {
        "content": "<blockquote>\n<p>i.e. <code>(#![attr] foo)</code> == <code>#[attr] (foo)</code>, right?</p>\n</blockquote>\n<p>yes.</p>",
        "id": 148641734,
        "sender_full_name": "nagisa",
        "timestamp": 1543329671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  oh, right; yes, that seems correct</p>",
        "id": 148641736,
        "sender_full_name": "centril",
        "timestamp": 1543329672
    },
    {
        "content": "<p>I've proposed extending attributes to types and such for now, &lt;<a href=\"https://github.com/rust-lang/rfcs/pull/2602\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2602\">https://github.com/rust-lang/rfcs/pull/2602</a>&gt;</p>",
        "id": 148641844,
        "sender_full_name": "centril",
        "timestamp": 1543329747
    },
    {
        "content": "<p>you mean type (formal) params I assume?</p>",
        "id": 148641861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329775
    },
    {
        "content": "<p>oh and actual args I see</p>",
        "id": 148641873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329796
    },
    {
        "content": "<p>(and components of where clauses et cetera ad infinitum)</p>",
        "id": 148641954,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  we already permit attrs on type variables</p>",
        "id": 148641957,
        "sender_full_name": "centril",
        "timestamp": 1543329855
    },
    {
        "content": "<p>yeah I know, I added it</p>",
        "id": 148641967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329864
    },
    {
        "content": "<p>and lifetime variables</p>",
        "id": 148641968,
        "sender_full_name": "centril",
        "timestamp": 1543329864
    },
    {
        "content": "<p>for <code>#[may_dangle]</code></p>",
        "id": 148641973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329872
    },
    {
        "content": "<p>(may it never rest in peace)</p>",
        "id": 148641984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ;) I recall asking about why it was unstable and then you stabilized it?</p>",
        "id": 148641999,
        "sender_full_name": "centril",
        "timestamp": 1543329896
    },
    {
        "content": "<p>I don't remember at this point the stabilization step</p>",
        "id": 148642023,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329921
    },
    {
        "content": "<p>certainly <code>#[may_dangle]</code> should not be stable</p>",
        "id": 148642027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1543329928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> not may_dangle, but arbitrary attrs on generic params</p>",
        "id": 148642036,
        "sender_full_name": "centril",
        "timestamp": 1543329947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Interesting from ghc-proposals: <a href=\"https://github.com/ghc-proposals/ghc-proposals/pull/182\" target=\"_blank\" title=\"https://github.com/ghc-proposals/ghc-proposals/pull/182\">https://github.com/ghc-proposals/ghc-proposals/pull/182</a></p>",
        "id": 152450631,
        "sender_full_name": "centril",
        "timestamp": 1545619187
    },
    {
        "content": "<p>This is fairly close to what I’m thinking for our attributes</p>",
        "id": 152467438,
        "sender_full_name": "nagisa",
        "timestamp": 1545653520
    },
    {
        "content": "<p>only their proposal centers around annotating the constructors rather than branches</p>",
        "id": 152467482,
        "sender_full_name": "nagisa",
        "timestamp": 1545653539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> if we use a weight API, where each weight is in range <code>[0.0, 1.0]</code>, and we require that all weights add to <code>1.0</code>, and require using it on all branches, then this API would basically be expressing the probability that a branch has of being taken.</p>",
        "id": 159072378,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760094
    },
    {
        "content": "<p>We can even not require adding it on al branches, by adding the provided probabilities into sum, and splitting <code>(1.0 - sum)</code> over the remaining branches (meaning they are all equally probable of being taken). If <code>sum == 0.0</code>, we can warn that those branches are dead code (they have a zero probability of being taken).</p>",
        "id": 159072478,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760162
    },
    {
        "content": "<p>That feels like a manual way of providing PGO-information on branches</p>",
        "id": 159072549,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760217
    },
    {
        "content": "<p>we can also not require them summing up to 1 and just normalize ourselves, for the programmer's convenience</p>",
        "id": 159072934,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760495
    },
    {
        "content": "<p>If we go that way, I think that having all branches have a weight of <code>1.0</code> and then higher than 1.0 would mean \"more likely to be taken\" and less = “less likely”. Easy to normalise and easy to figure out what to do in the default case, for branches that have no metadata provided.</p>",
        "id": 159083044,
        "sender_full_name": "nagisa",
        "timestamp": 1550767147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  I think that's a good idea, <code>#[likely = 3]</code> seems much more easy to deal with and it is what e.g. <code>proptest_derive</code> does, <a href=\"https://altsysrq.github.io/proptest-book/proptest-derive/modifiers.html#weight\" target=\"_blank\" title=\"https://altsysrq.github.io/proptest-book/proptest-derive/modifiers.html#weight\">https://altsysrq.github.io/proptest-book/proptest-derive/modifiers.html#weight</a></p>",
        "id": 159090462,
        "sender_full_name": "centril",
        "timestamp": 1550772778
    }
]