[
    {
        "content": "<p>Hi,</p>\n<p>Is there a correct way,  given a <code>*const c_char</code>, for Rust to take ownership of a string (char array) allocated on the heap by C?</p>\n<p>I was about to reach for <code>CString::from_raw()</code>, but the docs warn against this kind of usage:</p>\n<blockquote>\n<p>This should only ever be called with a pointer that was earlier obtained by calling CString::into_raw. Other usage (e.g., trying to take ownership of a string that was allocated by foreign code) is likely to lead to undefined behavior or allocator corruption.</p>\n</blockquote>\n<p>As I understand it, <code>CStr::from_ptr()</code> would be a borrow, whereas I'd like Rust to take ownership and deallocate the buffer when it is dropped.</p>\n<p>Can it be done? Thanks.</p>",
        "id": 239219356,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1621327946
    },
    {
        "content": "<p>as I understand it, any attempt at taking something allocated by C and deallocating it from Rust would be UB, so there is fundamentally no way to do this</p>",
        "id": 239220574,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621328570
    },
    {
        "content": "<p>you could write a custom owning wrapper that calls the correct C function to deallocate it on drop, though</p>",
        "id": 239220852,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1621328699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/122651-general/topic/Taking.20ownership.20of.20heap.20allocated.20C.20string.3F/near/239220852\">said</a>:</p>\n<blockquote>\n<p>you could write a custom owning wrapper that calls the correct C function to deallocate it on drop, though</p>\n</blockquote>\n<p>You can also implement <code>Deref</code> for this wrapper.</p>",
        "id": 241680406,
        "sender_full_name": "Demi Obenour",
        "timestamp": 1622968076
    },
    {
        "content": "<p>Also, if you know that the string was allocated by the same allocator that Rust is using, it's perfectly safe to deallocate it in Rust.</p>",
        "id": 241698678,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622996177
    }
]