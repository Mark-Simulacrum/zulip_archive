[
    {
        "content": "<p>I was working on an FFI interface that takes a raw pointer and moves it to another thread. I was surprised that (what I thought was) the usual wrapper with an <code>unsafe impl</code> didn't work as I thought it would if I then unpacked the fields of the wrapper. This appears to have changed between 2018 and 2021 (<code>ffi_example_2</code> compiles in 2018 but not 2021), but it feels... off.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// `*const u8` cannot be shared between threads safely</span>\n<span class=\"c1\">// This is expected</span>\n<span class=\"k\">fn</span> <span class=\"nf\">ffi_example_1</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thing</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: Not the point here</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `*const u8` cannot be shared between threads safely</span>\n<span class=\"c1\">// This is NOT expected</span>\n<span class=\"c1\">// Adding `move` does not help</span>\n<span class=\"k\">fn</span> <span class=\"nf\">ffi_example_2</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ItsCool</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thing</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: Not the point here</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// This works</span>\n<span class=\"k\">fn</span> <span class=\"nf\">ffi_example_3</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ItsCool</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thing</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: Not the point here</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">get_it</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ItsCool</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ItsCool</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ItsCool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_it</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">thing</span><span class=\"p\">(</span><span class=\"n\">_f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275033542,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647032666
    },
    {
        "content": "<p>I don't think there is anything special about <code>Send</code> here.  The closure essentially ends up capturing the <code>*const u8</code>, not the wrapper.  The workaround is to add <code>let foo = foo;</code> inside the closure.</p>",
        "id": 275036664,
        "sender_full_name": "Eric Huss",
        "timestamp": 1647034460
    },
    {
        "content": "<p>This was discussed a bit in <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/29\">https://github.com/rust-lang/project-rfc-2229/issues/29</a> and other places.</p>",
        "id": 275036951,
        "sender_full_name": "Eric Huss",
        "timestamp": 1647034667
    },
    {
        "content": "<p>I thought there was some discussion somewhere about improving the errors when compiling in 2021.  There was a lot of work done for the <code>rust_2021_incompatible_closure_captures</code> to detect all sorts of scenarios (like this), but it seems like there isn't as much support once you are writing code in 2021.</p>",
        "id": 275037151,
        "sender_full_name": "Eric Huss",
        "timestamp": 1647034779
    },
    {
        "content": "<p>Oh, <a href=\"https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html#trait-implementations\">https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html#trait-implementations</a> discusses this very case, but only in the sense of \"how to migrate 2018 to 2021\".</p>",
        "id": 275037663,
        "sender_full_name": "Eric Huss",
        "timestamp": 1647035107
    }
]