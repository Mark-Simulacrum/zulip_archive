[
    {
        "content": "<p>The documentation for <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\"><code>catch_unwind</code></a> says</p>\n<blockquote>\n<p>It is currently undefined behavior to unwind from Rust code into foreign code,</p>\n</blockquote>\n<p>In the latest update, issue <a href=\"https://github.com/rust-lang/rust/issues/52652\">#52652</a> says that with <a href=\"https://github.com/rust-lang/rust/pull/76570\">#76570</a> merged, panics through an <code>extern \"C\"</code> function defined in Rust should abort (also see <a href=\"https://github.com/rust-lang/rust/issues/52652#issuecomment-798920235\">this comment</a> at the bottom of <a href=\"https://github.com/rust-lang/rust/issues/52652\">#52652</a>). Otherwise it would be possible to have UB with only safe code</p>\n<p>I tried to test it: <a href=\"https://rust.godbolt.org/z/4xvqrqdoh\">Godbolt link</a>, but it doesn't match my understanding. In the assembly, <code>main</code> does call <code>foo</code> (not inlined as far as I can tell), which is defined as <code>extern \"C\"</code>. <code>foo</code> fails an assert in the execution, which I thought should abort the process when it tries to unwind past itself. But the drop message for the <code>_d: Dropper</code> in <code>main</code> still gets printed, presumably meaning <code>main</code> got unwound</p>\n<p>What's going on here?</p>",
        "id": 275803060,
        "sender_full_name": "Raekye",
        "timestamp": 1647610666
    },
    {
        "content": "<p>This is technically undefined behaviour. I asked about it <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/.60extern.22C.22.60.20and.20unwinding\">in project-ffi-unwind</a>. And yes, this is a case of fundamental (language) unsoundness.</p>",
        "id": 275804685,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647611371
    },
    {
        "content": "<p>I don't believe rustc does much of anything to unwinding <code>extern \"C\"</code> functions, though.</p>",
        "id": 275804821,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647611428
    },
    {
        "content": "<p>Starting with PR <a href=\"https://github.com/rust-lang/rust/pull/86155\">https://github.com/rust-lang/rust/pull/86155</a>, the \"C\" Abi is temporarily equivalent to the \"C-unwind\" Abi until the \"C-unwind\" is stabilized. See this <a href=\"https://github.com/rust-lang/rust/pull/86155#issuecomment-893498147\">comment</a> for more informations.</p>",
        "id": 275806162,
        "sender_full_name": "Urgau",
        "timestamp": 1647612015
    },
    {
        "content": "<p>Oh that was implemented already? Nice.</p>",
        "id": 275807613,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647612696
    },
    {
        "content": "<p>So what actually <em>happens</em> when you unwind through an <code>extern \"C\"</code> nowadays?</p>",
        "id": 275846158,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647629066
    },
    {
        "content": "<p>With the c unwind feature gate disabled, it won't prevent unwinding but allows UB I believe. This is to avoid breaking existing crates that need it. With the c unwind feature gate enabled it aborts AFAIK.</p>",
        "id": 275846495,
        "sender_full_name": "bjorn3",
        "timestamp": 1647629251
    },
    {
        "content": "<p>Then I don't understand the linked PR. </p>\n<blockquote>\n<p>Before this PR Rust has been unsound</p>\n</blockquote>\n<p>So, that's the UB. Presumably <em>after</em> the PR the soundness issue is fixed.</p>\n<blockquote>\n<p>The fix in this PR is somewhat nuanced. The blunt explanation is that rustc assumes that <code>extern \"C\"</code> can unwind for now, unlike before. This means that the <code>nounwind</code> attribute is not applied to the <code>foo</code> function above <strong>which means it works correctly</strong>. [emphasis mine]</p>\n</blockquote>",
        "id": 275861261,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647636804
    },
    {
        "content": "<p>I read that as \"today's compiler won't cause UB\" for </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275861326,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647636843
    }
]