[
    {
        "content": "<p>I'm working on wiring up some bazel build rules and as part of that I'm trying to figure out how rustc finds libcore, and if I can influence that. Can anyone give me a kick in the right direction? (even if it's just to a more appropriate venue to ask an obscure question like this.)</p>",
        "id": 203541466,
        "sender_full_name": "durin42",
        "timestamp": 1594405438
    },
    {
        "content": "<p><code>(rustc --print sysroot)/lib/rustlib/$TARGET/lib/</code></p>",
        "id": 203545223,
        "sender_full_name": "nagisa",
        "timestamp": 1594407487
    },
    {
        "content": "<p>Rustc looks at <code>$(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib</code> for sysroot crates. On nightly you can influence the sysroot location using <code>rustc --sysroot /path/to/sysroot</code>. On stable I think you can only use the default of  the parent dir of the <code>bin</code> dir that contains <code>rustc</code>.</p>",
        "id": 203545249,
        "sender_full_name": "bjorn3",
        "timestamp": 1594407499
    },
    {
        "content": "<p>is there any specific naming required, or if i name it libcore.rlib will it be found?</p>",
        "id": 203546558,
        "sender_full_name": "durin42",
        "timestamp": 1594408129
    },
    {
        "content": "<p>No specific name required I think. Why do you need this by the way? The default sysroot should work fine, right?</p>",
        "id": 203546718,
        "sender_full_name": "bjorn3",
        "timestamp": 1594408198
    },
    {
        "content": "<p>It's complicated. There's an extant hackish system that's doing bazel in a one-off way that builds libcore et al from source as part of the design, and I'm trying to modify things as little as possible. Worst-case I can build from source and then check that in, but the long-term requirement is that we build everything from source (even rustc), so we'll see where that takes me. I'm still figuring out the lay of the land as I go on this though.</p>",
        "id": 203547725,
        "sender_full_name": "durin42",
        "timestamp": 1594408632
    },
    {
        "content": "<p>hermetic compiler builds would require you to go to the last version supported by mrustc or even back to the original erlang rustc and bootstrap the whole chain.</p>",
        "id": 203548260,
        "sender_full_name": "nagisa",
        "timestamp": 1594408971
    },
    {
        "content": "<p>There was an erlang rustc?</p>",
        "id": 203548535,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594409171
    },
    {
        "content": "<p>s/erlang/ocaml probably</p>",
        "id": 203548573,
        "sender_full_name": "bjorn3",
        "timestamp": 1594409196
    },
    {
        "content": "<p>Yes (ocaml, not erlang) I'm aware of that, so I managed to talk our security folk off that ledge and down to \"download once, but build new ones from source\"</p>",
        "id": 203548609,
        "sender_full_name": "durin42",
        "timestamp": 1594409226
    },
    {
        "content": "<p>eeeh, my brain is fried ^^</p>",
        "id": 203548650,
        "sender_full_name": "nagisa",
        "timestamp": 1594409267
    },
    {
        "content": "<p>no worries :)</p>",
        "id": 203548700,
        "sender_full_name": "durin42",
        "timestamp": 1594409284
    },
    {
        "content": "<p>mrustc will save a lot of time</p>",
        "id": 203548789,
        "sender_full_name": "bjorn3",
        "timestamp": 1594409347
    },
    {
        "content": "<p>We're not building from source back to banging rocks together, we can use the currently-checked-in-rustc to build the next rustc</p>",
        "id": 203548934,
        "sender_full_name": "durin42",
        "timestamp": 1594409429
    },
    {
        "content": "<p>By the way maybe somebody at google could help <span class=\"user-mention\" data-user-id=\"295514\">@John Hodge (Mutabah)</span> with 1.39 support in mrustc? :)</p>",
        "id": 203549060,
        "sender_full_name": "bjorn3",
        "timestamp": 1594409514
    },
    {
        "content": "<p>While I'm (obviously?) not opposed to that, it's also largely moot because we've got 1.43 (I think) today, so once other yaks are shaven I'll easily upgrade to 1.44 using the 1.43 I already have</p>",
        "id": 203549568,
        "sender_full_name": "durin42",
        "timestamp": 1594409808
    },
    {
        "content": "<p>(this is largely equivalent to how we manage llvm/clang/etc, so that was an easy sell)</p>",
        "id": 203549869,
        "sender_full_name": "durin42",
        "timestamp": 1594409992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316805\">@durin42</span> I have some example code if you want to see it, for locally building libstd for a nightly (it does, however, require an existing libstd, because of the build scripts. so it's not really \"from scratch\" but rather done to remove sources of performance variance in the compiler's behavior)</p>",
        "id": 203577273,
        "sender_full_name": "eddyb",
        "timestamp": 1594436547
    },
    {
        "content": "<p>it's here: <a href=\"https://github.com/rust-lang/rustc-perf/blob/master/collector/src/bin/rustc-perf-collector/sysroot.rs#L53-L148\">https://github.com/rust-lang/rustc-perf/blob/master/collector/src/bin/rustc-perf-collector/sysroot.rs#L53-L148</a></p>",
        "id": 203577287,
        "sender_full_name": "eddyb",
        "timestamp": 1594436616
    },
    {
        "content": "<p>oh it's kind of hacky, I just move all the <code>rlib</code> files into the right directory, I forgot about that</p>",
        "id": 203577330,
        "sender_full_name": "eddyb",
        "timestamp": 1594436660
    }
]