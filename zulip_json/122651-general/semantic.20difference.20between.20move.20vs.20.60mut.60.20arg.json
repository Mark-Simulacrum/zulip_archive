[
    {
        "content": "<p>Is there any semantic difference between this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">new</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>and this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>? I can't think of any difference, but I wanted to check :)</p>",
        "id": 213738241,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603075015
    },
    {
        "content": "<p>You move <code>self</code> into <code>foo</code> when you call it. So no, there should not be a difference.</p>",
        "id": 213743156,
        "sender_full_name": "isHavvy",
        "timestamp": 1603082998
    },
    {
        "content": "<p>And note that the mut won’t show up in rustdoc either.</p>",
        "id": 213775526,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603109407
    },
    {
        "content": "<p>What are the rules for what shows up in the rustdoc? I know that pattern matching in parameters shows up, which I always thought was a little weird</p>",
        "id": 213775642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603109496
    },
    {
        "content": "<p>That seems like a bug if that's true... I would expect the public signature of the function to be what's shown in rustdoc and nothing more</p>",
        "id": 213775762,
        "sender_full_name": "Diggsey",
        "timestamp": 1603109554
    },
    {
        "content": "<p>well it makes a tiny bit of sense because what parameter name should it show?</p>",
        "id": 213775828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603109595
    },
    {
        "content": "<p>true</p>",
        "id": 213775860,
        "sender_full_name": "Diggsey",
        "timestamp": 1603109625
    },
    {
        "content": "<p>the parameter name is of course some (desirable) leakage of information beyond just the signature</p>",
        "id": 213775872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603109634
    },
    {
        "content": "<p>FWIW I would be open to removing the <code>mut</code> in rustdoc for this</p>",
        "id": 213776250,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603109880
    },
    {
        "content": "<p>It doesn't seem very useful to document</p>",
        "id": 213776302,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603109892
    },
    {
        "content": "<p>Jake is saying it isn't in rustdoc now though</p>",
        "id": 213776340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603109927
    },
    {
        "content": "<p>there isn't really a workaround for pattern matching in parameters though and still getting nice docs except for just not matching in parameters</p>",
        "id": 213776415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603109983
    },
    {
        "content": "<p>which sucks because it's a nice feature</p>",
        "id": 213776436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603110000
    },
    {
        "content": "<blockquote>\n<p>And note that the mut won’t show up in rustdoc either.</p>\n</blockquote>",
        "id": 213776507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603110028
    },
    {
        "content": "<p>Ah yup you're right</p>",
        "id": 213776523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603110042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/semantic.20difference.20between.20move.20vs.20.60mut.60.20arg/near/213776415\">said</a>:</p>\n<blockquote>\n<p>there isn't really a workaround for pattern matching in parameters though and still getting nice docs except for just not matching in parameters</p>\n</blockquote>\n<p>I've sometimes wondered if <code>foo @ pattern</code> would work as a way to give a name.</p>",
        "id": 213868064,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603159032
    },
    {
        "content": "<p>That seems like the leading contender in terms of syntax, but that's going to cause a problem for the borrow checker unless you can somehow indicate that the <code>foo</code> part isn't going to get used in the function</p>",
        "id": 213869876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603161530
    },
    {
        "content": "<p>In that regard , <code>foo @ pattern</code>, ought to treated as binding to <code>foo</code> first, and then immediately destructuring it as a <code>pattern</code>. So, if the <code>pattern</code> has moved then <code>foo</code> is unusable; else if some part is exclusively borrowed, then <code>foo</code> is unusable for the duration of the borrow; and if only shared borrows remain, <code>foo</code> can still be inspected through shared accesses. <br>\nThe only confusing part when the semantics of pattern-matching are not 100% clear would be that <code>mut copyable @ foo</code> would lead to <code>copyable</code> still being usable, with <code>foo</code> being a <code>Copy</code> of it.<br>\nA proc-macro would already be able to express this behavior, for instance.</p>",
        "id": 213895024,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603186759
    }
]