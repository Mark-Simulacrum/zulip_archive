[
    {
        "content": "<p>Does anyone know what's happening here? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=eba73e8a76bd62dee8c7d0c5bce35efa\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=eba73e8a76bd62dee8c7d0c5bce35efa</a></p>",
        "id": 264822915,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1639468861
    },
    {
        "content": "<p>Code since the Playground is down:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// works</span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// error: &amp;s used after assignment</span>\n<span class=\"w\">        </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264823088,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1639469038
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>works fine.<br>\nThe closure seems to be effectively pulling the String out of the loop.</p>",
        "id": 264823830,
        "sender_full_name": "Jubilee",
        "timestamp": 1639469645
    },
    {
        "content": "<p>note that specifying</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>also works</p>",
        "id": 264824318,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1639470067
    },
    {
        "content": "<p>I can't find an issue for it, I'll try to file one</p>",
        "id": 264824796,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1639470436
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/rust-lang/rust/issues/76627\">https://github.com/rust-lang/rust/issues/76627</a></p>",
        "id": 264825249,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1639470724
    },
    {
        "content": "<p>Yep; any lifetime parameter discovered through type inference is, itself, inferred rather than higher-order. And there is no single lifetime that can fit both <code>f</code> invocations</p>",
        "id": 264879456,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639497696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"o\">&lt;'</span><span class=\"na\">turbofishable</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">turbofishable</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">turbofishable</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g</span>::<span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Let's call this inferred and FIXED lifetime `'i`</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// -&gt;-'i must span at least until-&gt;-+</span>\n<span class=\"w\">                                                </span><span class=\"c1\">// |</span>\n<span class=\"w\">        </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// -&gt;- requires &amp;mut -&gt;-üí•------------</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">                                           </span><span class=\"c1\">// |</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\">                                           </span><span class=\"c1\">// v</span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// &lt;---------------------------------+</span>\n<span class=\"w\">        </span><span class=\"c1\">// s = String::new();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=36d8a7cb5b1505e0895058e7b74fc17d\">Playground</a></li>\n</ul>",
        "id": 264881506,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639498402
    },
    {
        "content": "<p>As to why</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// works</span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// error: &amp;s used after assignment</span>\n<span class=\"w\">        </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>leads to <code>f</code> having an inferred-and-thus-fixed lifetime parameter, consider the following <code>f</code> definition:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"cm\">/*: &amp;'inferred str */</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// let it be inferred that `s` is a `&amp;str`</span>\n<span class=\"w\">    </span><span class=\"cm\">/* free implementation here */</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it must have the same signature as yours (where <code>/* free implementation here */</code>, in your case, would be empty), and thus also the same as with <code>/* free implementation here */</code> being something that stores/reads <code>s</code>, as in:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span>::<span class=\"o\">&lt;&amp;</span><span class=\"w\"> </span><span class=\"cm\">/* 'inferred */</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"cm\">/*: &amp;'inferred str */</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{prev}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// error: &amp;s used after assignment</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 264883995,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639499345
    },
    {
        "content": "<p>So why does specifying <code>let f = |s: &amp;_| {};</code> make it work? Does this force the compiler to use a higher order lifetime instead for some reason?</p>",
        "id": 264887790,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1639500796
    },
    {
        "content": "<p>Specifying a closure that way <em>does</em> essentially desugar to <code>let f = for&lt;'anon&gt; |s: &amp;'anon _| {};</code></p>",
        "id": 264888236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639500958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> <a href=\"#narrow/stream/122651-general/topic/Borrow.20error.20on.20closure.20argument.20in.20loop/near/264887790\">said</a>:</p>\n<blockquote>\n<p>So why does specifying <code>let f = |s: &amp;_| {};</code> make it work? Does this force the compiler to use a higher order lifetime instead for some reason?</p>\n</blockquote>\n<p>In that case the lifetime parameter is not \"discovered through type inference\", but rather, known beforehand, so that, indeed, Rust is able to <em>promote</em> the function / closure to be higher-order, in which case each invocation of <code>f</code> gets to pick its own new/fresh/free lifetime (parameter), thus acting kind of similarly to <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span>'s example (which instanced a (lifetime-)distinct <code>f</code> per iteration).</p>\n<p>As an example of this important change of signature, if we take the latest \"evil\" example with that <code>out</code> capture:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"kt\">str</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{prev}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=4193b05619ca0b8804e33c60113ae890\">we get:</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">error[E0521]: borrowed data escapes outside of closure</span>\n<span class=\"go\"> --&gt; src/main.rs:7:29</span>\n<span class=\"go\">  |</span>\n<span class=\"go\">3 |     let out = ::core::cell::Cell::new(</span>\n<span class=\"go\">  |         --- `out` declared here, outside of the closure body</span>\n<span class=\"go\">...</span>\n<span class=\"go\">6 |     let f = |s: &amp;'_ str| {</span>\n<span class=\"go\">  |              - `s` is a reference that is only valid in the closure body</span>\n<span class=\"go\">7 |         if let Some(prev) = out.replace(Some(s)) {</span>\n<span class=\"go\">  |                             ^^^^^^^^^^^^^^^^^^^^ `s` escapes the closure body here</span>\n</code></pre></div>\n<blockquote>\n<p>that is only valid in the closure body</p>\n</blockquote>\n<p>is the user-friendly way of saying \"its lifetime is higher-order\"</p>",
        "id": 264894883,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639503228
    }
]