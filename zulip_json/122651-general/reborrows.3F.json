[
    {
        "content": "<p>it seems difficult to find definitive descriptions of reborrow rules. like reborrows seem privileged with respect to exclusivity of <code>&amp;mut</code> references. and also assignments to existing variables are considered coercion sites, and coercing <code>&amp;mut T</code> to <code>&amp;T</code> counts as a reborrow?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ra</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ra</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">ma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ra</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// reborrow?</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ra</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244348754,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625001299
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/reference/type-coercions.html#coercion-sites\">https://doc.rust-lang.org/nightly/reference/type-coercions.html#coercion-sites</a> doesn't list assignment expressions as coercion sites, but maybe that list isn't meant to be exhaustive?</p>",
        "id": 244349186,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625001478
    },
    {
        "content": "<p>I think coercion sites are only about typechecking. I think the borrow checker is allowed to assume every use of a reference is a reborrow; the typechecker doesn't have to concern itself with these reborrows because they don't change the type (if you ignore lifetimes, which AFAIK aren't involved in type inference)</p>",
        "id": 244349511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625001628
    },
    {
        "content": "<p>does the type checker care about <code>&amp;T</code> vs <code>&amp;mut T</code>?</p>",
        "id": 244349621,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625001679
    },
    {
        "content": "<p>yes</p>",
        "id": 244349629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625001683
    },
    {
        "content": "<p>I guess in that sense it is a coercion</p>",
        "id": 244349661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625001709
    },
    {
        "content": "<p>so <code>ra = ma</code> is assigning a <code>&amp;mut i32</code> to a <code>&amp;i32</code> variable, which is a coercion as i understand it, right?</p>",
        "id": 244349765,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625001764
    },
    {
        "content": "<p>looking at the examples in the reference, it seems to be sites where the target type is known, and I think an assignment to a variable of known type would also count there</p>",
        "id": 244349838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625001813
    },
    {
        "content": "<p>(ok, maybe it's a <code>&amp;{integer}</code>; dunno if the <code>i32</code> fallback has occurred at that point in type checking)</p>",
        "id": 244349866,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625001833
    },
    {
        "content": "<p>here's an example showing that you can do other kinds of coercion there too:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_x</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- documented as a coercion site</span>\n<span class=\"w\">    </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- not documented as a coercion site</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244350099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625001958
    },
    {
        "content": "<p>thanks. this is looking like an omission in the Reference, then?</p>",
        "id": 244350496,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625002135
    },
    {
        "content": "<p>yeah I think so</p>",
        "id": 244350502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002142
    },
    {
        "content": "<p>the type of <code>ra</code> might not be fully inferred in my example, but i guess it doesn't have to be if the only coercion involves the <code>mut</code> vs non-<code>mut</code> properties of the reference</p>",
        "id": 244350562,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625002187
    },
    {
        "content": "<p>By the way, that page also has this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// For closure with multiple return statements</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">clo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">clo</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"c1\">// For type checking of function with multiple return statements</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>There are no multiple <code>return</code>s in these examples. I am guessing someone ran rustfmt or clippy and deleted them</p>",
        "id": 244350575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411291\">Taylor Yu [they/she]</span> <a href=\"#narrow/stream/122651-general/topic/reborrows.3F/near/244350562\">said</a>:</p>\n<blockquote>\n<p>the type of <code>ra</code> might not be fully inferred in my example, but i guess it doesn't have to be if the only coercion involves the <code>mut</code> vs non-<code>mut</code> properties of the reference</p>\n</blockquote>\n<p>Yeah, type inference will definitely see through that, it does the <code>&amp;?T -&gt; *const ?T</code> coercion and solves for <code>?T = u8</code></p>",
        "id": 244350789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002311
    },
    {
        "content": "<p>in your example nothing pins down <code>?T</code> but you have a numeral so it does <code>i32</code> defaulting</p>",
        "id": 244350856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002338
    },
    {
        "content": "<blockquote>\n<p>There are no multiple returns in these examples. I am guessing someone ran rustup or clippy and deleted them</p>\n</blockquote>\n<p>yeah, because if there aren't <code>return</code> expressions, then the examples are equivalent to the earlier ones involving multiple <code>if</code> branches or <code>match</code> arms</p>",
        "id": 244350928,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625002390
    },
    {
        "content": "<p>maybe the rule is \"places where the compiler has inferred enough type information about the target type to validate whether the coercion is allowed\"?</p>",
        "id": 244351199,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625002559
    },
    {
        "content": "<p>I think you'll have to dive into the rustc source code to get more info about how reborrows work, for example here: <a href=\"https://github.com/rust-lang/rust/blob/6e0b554619a3bb7e75b3334e97f191af20ef5d76/compiler/rustc_typeck/src/check/coercion.rs#L9-L17\">https://github.com/rust-lang/rust/blob/6e0b554619a3bb7e75b3334e97f191af20ef5d76/compiler/rustc_typeck/src/check/coercion.rs#L9-L17</a></p>",
        "id": 244351327,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002638
    },
    {
        "content": "<p>I think the introductory line is the most correct and future proof version of the rule:</p>\n<blockquote>\n<p>A coercion can only occur at certain coercion sites in a program; these are typically places where the desired type is explicit or can be derived by propagation from explicit types (without type inference).</p>\n</blockquote>",
        "id": 244351463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002714
    },
    {
        "content": "<p>it seems a bit weird to me to try to enumerate all the places where the type is known. Type inference is complicated</p>",
        "id": 244351534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002758
    },
    {
        "content": "<p>it's unclear whether that would need to be part of a future rust spec</p>",
        "id": 244351560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002793
    },
    {
        "content": "<p>it would</p>",
        "id": 244351621,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002808
    },
    {
        "content": "<p>if you want a usable spec at least</p>",
        "id": 244351632,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002817
    },
    {
        "content": "<p>so you basically have to specify the whole type inference algorithm?</p>",
        "id": 244351672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002858
    },
    {
        "content": "<p>yeah, absolutely</p>",
        "id": 244351696,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002871
    },
    {
        "content": "<p>yeah, it would probably have to describe type inference in enough detail to specify the rules, too. the existing text says \"without type inference\", which seems to contradict observation, though</p>",
        "id": 244351709,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625002881
    },
    {
        "content": "<p>otherwise you'd have to way to know if a program is supposed to type check or not</p>",
        "id": 244351711,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002884
    },
    {
        "content": "<p>this is also the part I'm most afraid of because it's so full of subtle details</p>",
        "id": 244351737,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002909
    },
    {
        "content": "<p>what if you overapproximate it and say that the compiler is allowed to spuriously fail?</p>",
        "id": 244351797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002937
    },
    {
        "content": "<p>ah, I think the \"without type inference\" means that coercions happen only once, in program order, and are not reapplied once all types have been inferred</p>",
        "id": 244351823,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002961
    },
    {
        "content": "<p>there is a simple overapproximation of type inference which is \"there exists a typing of the program that refines all given type information\"</p>",
        "id": 244351869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625002983
    },
    {
        "content": "<p>there might be some exceptions to this though</p>",
        "id": 244351874,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625002986
    },
    {
        "content": "<p>aren't there already programs where the compiler fails to infer types, but a human could solve the constraints by inspection?</p>",
        "id": 244351880,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625002989
    },
    {
        "content": "<p>yeah, there should be</p>",
        "id": 244351908,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625003009
    },
    {
        "content": "<p>I think higher-ranked inference is undecidable, which would mean there <em>must</em> be</p>",
        "id": 244351930,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625003028
    },
    {
        "content": "<p>unsure about the details there though</p>",
        "id": 244351993,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625003046
    },
    {
        "content": "<p>i've been frustrated by the apparent inability of type inference to see through the <code>?</code> operator on occasion</p>",
        "id": 244352001,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625003054
    },
    {
        "content": "<p>that's because of <code>Into</code> I think</p>",
        "id": 244352022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625003068
    },
    {
        "content": "<p>there seem to be repeated claims that Rust's type system is Turing-complete, and this is one purported demonstration<br>\n<a href=\"https://sdleffler.github.io/RustTypeSystemTuringComplete/\">https://sdleffler.github.io/RustTypeSystemTuringComplete/</a></p>",
        "id": 244353912,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625004108
    },
    {
        "content": "<p>with traits it is, yeah</p>",
        "id": 244354047,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625004169
    },
    {
        "content": "<p>whether inference itself is, I'm not sure</p>",
        "id": 244354065,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625004180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411291\">Taylor Yu [they/she]</span> <a href=\"#narrow/stream/122651-general/topic/reborrows.3F/near/244352001\">said</a>:</p>\n<blockquote>\n<p>i've been frustrated by the apparent inability of type inference to see through the <code>?</code> operator on occasion</p>\n</blockquote>\n<p>This is slightly better now in beta+newer, but the <code>From</code> conversion for the error part of results is fundamental to things being underconstrained in things like closures where the return type isn't specified.  There's generally just not a good way for inference to fix this.</p>",
        "id": 244355796,
        "sender_full_name": "scottmcm",
        "timestamp": 1625005209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/reborrows.3F/near/244351534\">said</a>:</p>\n<blockquote>\n<p>it seems a bit weird to me to try to enumerate all the places where the type is known. Type inference is complicated</p>\n</blockquote>\n<p>The problem is that coercion and inference just fundamentally don't play nice together, because the search space explodes if you add in all the possible coercions.</p>\n<p>This is why it's pretty common that you have to explicitly <code>.as_slice()</code> if passing a vec to something that takes a generic, rather than a specific type</p>",
        "id": 244356050,
        "sender_full_name": "scottmcm",
        "timestamp": 1625005388
    },
    {
        "content": "<p>That part makes perfect sense to me. What is surprising is that the reference is trying to precisely document when it happens rather than giving a heuristic explanation, because type inference seems like the sort of thing we don't want to specify very precisely in order to leave room for the implementation to change</p>",
        "id": 244359813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625007931
    },
    {
        "content": "<p>But we <em>do</em> want to specify it well enough that different implementations will infer the same types.  And because of traits and things like RPIT, that requires a very precise specification of where coercions apply.</p>",
        "id": 244360281,
        "sender_full_name": "scottmcm",
        "timestamp": 1625008212
    },
    {
        "content": "<p>The <code>!</code> stabilization problems can show some examples -- like whether <code>Box::new(x)</code> does the unsizing coercion before or after the <code>new</code> call.</p>",
        "id": 244360376,
        "sender_full_name": "scottmcm",
        "timestamp": 1625008309
    }
]