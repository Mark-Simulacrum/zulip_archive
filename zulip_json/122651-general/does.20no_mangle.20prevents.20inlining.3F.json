[
    {
        "content": "<p>Hi, I know that <code>#[no_mangle]</code> does more than just name-mangling (e.g. exporting a symbol and marking it as used), but it seems to prevent calls from being inlined. Is this intentional? and if so, is there an alternative that still allows the optimiser to inline calls to no_mangled functions?</p>",
        "id": 223976077,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611616140
    },
    {
        "content": "<p>It doesn't prevent inlining</p>",
        "id": 223976236,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611616234
    },
    {
        "content": "<p>That does not appear to be the case: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=9d8cb87771f017fb2f8136745516c2aa\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=9d8cb87771f017fb2f8136745516c2aa</a></p>",
        "id": 223976266,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1611616253
    },
    {
        "content": "<p>It does export the function though, so that can affect inlining decisions</p>",
        "id": 223976303,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611616305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> your example does appear inlined, no?</p>",
        "id": 223976313,
        "sender_full_name": "cuviper",
        "timestamp": 1611616316
    },
    {
        "content": "<p>as well as the exported version</p>",
        "id": 223976320,
        "sender_full_name": "cuviper",
        "timestamp": 1611616321
    },
    {
        "content": "<p>right yeah</p>",
        "id": 223976358,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1611616327
    },
    {
        "content": "<p>by \"case\" I meant \"prevents calls from being inlined\"</p>",
        "id": 223976365,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1611616341
    },
    {
        "content": "<p>This is a case of two people responding at the same time making the reference refer to the wrong thing.</p>",
        "id": 223976393,
        "sender_full_name": "isHavvy",
        "timestamp": 1611616384
    },
    {
        "content": "<p>even Rust forums don't prevent thread races</p>",
        "id": 223976433,
        "sender_full_name": "cuviper",
        "timestamp": 1611616439
    },
    {
        "content": "<p>you're right. something is preventing inlining in my example but it seems i jumped to the conclusion that it was no_mangle, i should have checked this in playground first. sorry for the noise</p>",
        "id": 223976667,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611616575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/does.20no_mangle.20prevents.20inlining.3F/near/223976303\">said</a>:</p>\n<blockquote>\n<p>It does export the function though, so that can affect inlining decisions</p>\n</blockquote>\n<p>Ah, and this is  heuristic based, where theoretically an exported symbol could be the final straw that tipped it over into the no territory?</p>",
        "id": 223976942,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611616799
    },
    {
        "content": "<p>yeah</p>",
        "id": 223976994,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611616811
    },
    {
        "content": "<p>thanks, that gives me something to work with :)</p>",
        "id": 223977069,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611616878
    }
]