[
    {
        "content": "<p>What is preferred for \"mutating\" <code>Copy</code> types?</p>\n<ul>\n<li><code>fn(&amp;mut self)</code>, or</li>\n<li><code>fn(self) -&gt; Self</code></li>\n</ul>",
        "id": 235399953,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1618946416
    },
    {
        "content": "<p>Maybe with a <code>#[must_use]</code> for the latter one.</p>",
        "id": 235400123,
        "sender_full_name": "Luis Wirth",
        "timestamp": 1618946472
    },
    {
        "content": "<p>depends on the context. For builder type like things it can depend on how you want builds to happen as either has drawbacks. for regular types in algorithms it is a tradeoff between optimizability and copies of the bytes (e.g. if type is smaller than a pointer, there's no value in the reference)</p>",
        "id": 235411178,
        "sender_full_name": "nagisa",
        "timestamp": 1618951195
    },
    {
        "content": "<p>It looks like <code>u32</code> and <code>f32</code> don't have a single <code>&amp;mut self</code> method between them in <code>std</code>, so I'd definitely suggest sticking with <code>self</code> most of the time.  (With exceptions if, say, you're implementing keccak over a <code>Copy</code>-but-you-probably-want-<code>&amp;mut</code>-anyway thing like <code>[u64; 25]</code>.)</p>",
        "id": 235425245,
        "sender_full_name": "scottmcm",
        "timestamp": 1618957253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/.60Copy.60.20type.20mutation/near/235425245\">said</a>:</p>\n<blockquote>\n<p>It looks like <code>u32</code> and <code>f32</code> don't have a single <code>&amp;mut self</code> method between them in <code>std</code>, so I'd definitely suggest sticking with <code>self</code> most of the time.  (With exceptions if, say, you're implementing keccak over a <code>Copy</code>-but-you-probably-want-<code>&amp;mut</code>-anyway thing like <code>[u64; 25]</code>.)</p>\n</blockquote>\n<p>They do have trait methods that take <code>&amp;mut self</code> though, like <code>add_assign</code>. For these primitives they are really small so there probably any need that requires them to be modified in place, but not all <code>Copy</code> types have that property.</p>",
        "id": 235433239,
        "sender_full_name": "Gary Guo",
        "timestamp": 1618962327
    },
    {
        "content": "<p>I offer both, using <code>set_</code> for <code>(&amp;mut self)</code> things and <code>with_</code> for <code>(self)-&gt;Self</code> things.</p>",
        "id": 235691411,
        "sender_full_name": "Lokathor",
        "timestamp": 1619103034
    }
]