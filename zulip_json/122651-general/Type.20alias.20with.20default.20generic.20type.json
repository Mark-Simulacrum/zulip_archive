[
    {
        "content": "<p>I was about to reopen an issue about type aliases, but I'm not sure if this is actually an issue or expected.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">MyOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyOption</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\">   </span><span class=\"c1\">// Compile error, must specify T</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Isn't this code supposed to compile? <code>_foo</code> should be typed as <code>MyOption&lt;i32&gt;</code></p>",
        "id": 249503396,
        "sender_full_name": "João M. Bezerra",
        "timestamp": 1629020719
    },
    {
        "content": "<p>This compiles</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyOption</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249503450,
        "sender_full_name": "João M. Bezerra",
        "timestamp": 1629020777
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    type MyOption&lt;T = i32&gt; = Option&lt;T&gt;;\n    let _foo:MyOption = Default::default();\n}\n</code></pre></div>",
        "id": 249503517,
        "sender_full_name": "lengyijun",
        "timestamp": 1629020896
    },
    {
        "content": "<p>I do not comprehend why this works, but that doesn't, is it a limitation?</p>",
        "id": 249503854,
        "sender_full_name": "João M. Bezerra",
        "timestamp": 1629021335
    },
    {
        "content": "<p>defaults are only used in type position; if you leave out type args in expressions, they'll just be inferred (or not, as in this case)</p>",
        "id": 249504706,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629022565
    },
    {
        "content": "<p>so... yes, it's a limitation</p>",
        "id": 249504722,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629022591
    },
    {
        "content": "<p>I think there were some ideas/discussions about using defaults in inference fallback, but it's probably pretty hard to change backwards compatibly</p>",
        "id": 249504725,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629022621
    },
    {
        "content": "<p>Thanks for the explanation, this one seems to be very specific to Default</p>",
        "id": 249504927,
        "sender_full_name": "João M. Bezerra",
        "timestamp": 1629022930
    },
    {
        "content": "<p>Is there a similar reason for <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=72600559c9f56c6ad6921d7434a97530\">this</a> to not compile?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">MyOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyOption</span>::<span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It happened to me, and I gave up on using type aliases with enums for public types in my crate <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> .</p>",
        "id": 249505070,
        "sender_full_name": "João M. Bezerra",
        "timestamp": 1629023191
    },
    {
        "content": "<p>it's the same reason, there's nothing specific to Default in the first case</p>",
        "id": 249505157,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629023363
    },
    {
        "content": "<p><code>let _: MyOption = MyOption::None</code> would work</p>",
        "id": 249505158,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629023377
    },
    {
        "content": "<p>Oh, by \"defaults\" you mean T = i32, and not the trait <code>Default</code>, right?</p>",
        "id": 249505163,
        "sender_full_name": "João M. Bezerra",
        "timestamp": 1629023398
    },
    {
        "content": "<p>aah right yeah</p>",
        "id": 249505202,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629023407
    },
    {
        "content": "<p>This also doesn't compile, even through I kinda specified the generics</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">MyOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyOption</span>::<span class=\"o\">&lt;&gt;</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\">   </span><span class=\"c1\">// Compile error, must specify T</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249506553,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629025553
    },
    {
        "content": "<p><code> &lt;MyOption&gt;::default()</code> seems to work</p>",
        "id": 249507283,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629026627
    },
    {
        "content": "<p>yes, the first one doesn't really make a difference to the compiler; in the second one <code>MyOption</code> is in type position, so the defaults apply</p>",
        "id": 249508360,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629028164
    },
    {
        "content": "<p>I was trying to make the first one work and a test failed. Looks like if I have a type like <code>S&lt;'a, T&gt;</code> it is legal to do <code>S::&lt;'static&gt;::foo()</code> and doing so will result in the concrete type for <code>T</code> to be inferred.</p>",
        "id": 249509700,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629030028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338379\">Giacomo Stevanato</span> <a href=\"#narrow/stream/122651-general/topic/Type.20alias.20with.20default.20generic.20type/near/249506553\">said</a>:</p>\n<blockquote>\n<p>This also doesn't compile, even through I kinda specified the generics</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">MyOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyOption</span>::<span class=\"o\">&lt;&gt;</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\">   </span><span class=\"c1\">// Compile error, must specify T</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That one is because <code>::&lt;&gt;</code>is treated like not being written at all, meaning that they're still inferred.<br>\nI think it should be treated like passing zero generic arguments, allowing them to take their default values, but it's too late to change that in this or 2021 edition.</p>",
        "id": 249526713,
        "sender_full_name": "matt1992",
        "timestamp": 1629055178
    },
    {
        "content": "<p>See also: <a href=\"https://users.rust-lang.org/t/what-does-assignment-in-a-generic-mean/63482/3?u=yandros\">https://users.rust-lang.org/t/what-does-assignment-in-a-generic-mean/63482/3?u=yandros</a></p>",
        "id": 249970355,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1629371583
    }
]