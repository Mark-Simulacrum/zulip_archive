[
    {
        "content": "<p>I've been playing with loom lately, and I found it surprising that it seems like<br>\nRMW and load operations have different semantics, even for seemingly trivial<br>\nprograms:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_load</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">loom</span>::<span class=\"n\">model</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">SeqCst</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_rmw</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">loom</span>::<span class=\"n\">model</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">fetch_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>These two tests produce different results; the load operation has 4 possible<br>\noutcomes according to loom, while the rmw test has just 3. In particular, the<br>\nload has the following possible path:</p>\n<div class=\"codehilite\"><pre><span></span><code>~~~~~~~~ THREAD 1 ~~~~~~~~\nv1.store(1, SeqCst) = ()\n~~~~~~~~ THREAD 0 ~~~~~~~~\nv2.load(SeqCst) = 0\n</code></pre></div>\n\n\n<p>whereas the rmw write operation has no such case; it always sees the 1 stored by<br>\nthread 1. Note that I definitely <em>expect</em> that a single load may not see the 1<br>\nstored in the other thread. But I find it unexpected that the rmw operation does<br>\nnot encounter this case at all.</p>\n<p>I am trying to understand whether this is a limitation of loom or if there's<br>\nsomething in Rust's memory model (or, I guess, C11 or whatever) that I could<br>\nread to better understand this case.</p>\n<p>Maybe to clarify a bit more, before finding this, I think I more or less<br>\nexpected that a program like the following would eventually terminate (modulo<br>\njust never scheduling the first thread or something like that). But, AFAICT, at<br>\nleast a cursory reading of the documentation I was able to find seems to suggest<br>\nthis is not the case, i.e., there is no guarantee that the load will ever see a<br>\nstore issued on another thread. Is that true? Is there some way to say \"no<br>\nplease synchronize with the other thread\"?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 208005845,
        "sender_full_name": "simulacrum",
        "timestamp": 1598381437
    },
    {
        "content": "<p>I would also expect that <code>test_rmw</code> could see 0</p>",
        "id": 208006192,
        "sender_full_name": "cuviper",
        "timestamp": 1598381591
    },
    {
        "content": "<p>There is this snippet in loom which is explicitly noting the difference between rmw and load operations (<a href=\"https://github.com/tokio-rs/loom/blob/master/src/rt/atomic.rs#L724-L725\">https://github.com/tokio-rs/loom/blob/master/src/rt/atomic.rs#L724-L725</a>) but it was introduced in a huge refactor and I don't see any commentary beyond that.</p>",
        "id": 208008016,
        "sender_full_name": "simulacrum",
        "timestamp": 1598382297
    },
    {
        "content": "<p>Looking more carefully at the results:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cm\">/* T2 */</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">fetch_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"cm\">/* T1 */</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* T1 */</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"cm\">/* T2 */</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">fetch_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* T2 */</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">fetch_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"cm\">/* T1 */</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cm\">/* T2 */</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"cm\">/* T1 */</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* T1 */</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"cm\">/* T2 */</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"c1\">// &lt;-- bad</span>\n\n<span class=\"cm\">/* T1 */</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"cm\">/* T2 */</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* T2 */</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"cm\">/* T1 */</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I don't know much about how loom works but I would guess that the order of printing matches the seqcst order, in which case it is the rmw that is correct and not the load: a load should not read 0 after 1 has been written earlier in seqcst order</p>",
        "id": 208023871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598389742
    },
    {
        "content": "<p>the result where the RMW reads 0 and is executed first is already represented (twice) in the other two cases</p>",
        "id": 208023991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598389804
    },
    {
        "content": "<p>It is unclear whether the (as yet not fully defined) weak memory model supports the progress guarantees necessary to claim that a basic message passing spinlock will eventually terminate. As far as I can tell, C11 seems to both promise progress in the abstract but also not provide any concurrent progress guarantees. I don't think that sequential consistency implies starvation freedom</p>",
        "id": 208025062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598390339
    },
    {
        "content": "<p>However the code you wrote will certainly terminate on all real architectures (unless they choose not to run the thread at all; that might be up to the OS to some extent)</p>",
        "id": 208025325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598390461
    },
    {
        "content": "<p>In fact, I think they might want to not guarantee this, since such a promise would invalidate sequentialization - the code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SeqCst</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>on one thread will diverge while the original program must not, assuming an eventual progress guarantee in the semantics. In general I think a lot of compiler transformations can possibly add synchronizations leading to deadlock</p>",
        "id": 208026075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598390825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> do you know if there is a standard-guaranteed way to implement this sort of message passing type of atomics to work, not just \"in practice\"? It seems like a fundamental abstraction that should have some way of implementing it.</p>\n<p>To be clear, ideally, this wouldn't necessarily be a spinlock in the parent/main thread, it might be something like a select() call that checks an atomic variable after receiving a readiness notification (e.g., a vector length). My current understanding says that C11 does not guarantee that such a program will ever observe that the other thread incremented the length of said vector. This sort of lack of \"concurrent progress\" seems painful to write correct code against, if you want to avoid hand-waving and saying \"But in reality progress <em>is</em> guaranteed\".</p>",
        "id": 208031426,
        "sender_full_name": "simulacrum",
        "timestamp": 1598393979
    },
    {
        "content": "<p>What you have written is definitely the \"approved\" way to do it, if anything works then that should</p>",
        "id": 208031518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394018
    },
    {
        "content": "<p>I'm just not sure if there are <em>any</em> liveness guarantees along these lines in the standard</p>",
        "id": 208031536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394037
    },
    {
        "content": "<p>Is that a known limitation? I feel like I can't be the first one to stumble across this, but have not seen anything to that effect anywhere.</p>",
        "id": 208031566,
        "sender_full_name": "simulacrum",
        "timestamp": 1598394064
    },
    {
        "content": "<p>There are a couple things under the name \"progress\" in the C++ standard but I'm not sure how much of that applies in a concurrent setting</p>",
        "id": 208031584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394073
    },
    {
        "content": "<p>I know that this has historically been not the focus in research on weak memory models</p>",
        "id": 208031616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394100
    },
    {
        "content": "<p>which are generally more concerned with safety than liveness</p>",
        "id": 208031686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394127
    },
    {
        "content": "<p>That seems... surprising to me, in some sense.</p>\n<p>Are you aware of good places to ask this sort of question? I guess I should file a bug at loom at least</p>",
        "id": 208031724,
        "sender_full_name": "simulacrum",
        "timestamp": 1598394175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> knows more about this research than me, maybe he can help</p>",
        "id": 208031765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394206
    },
    {
        "content": "<p>Aha, I think this will do the job - <a href=\"https://timsong-cpp.github.io/cppwp/n4659/intro.progress#18\">https://timsong-cpp.github.io/cppwp/n4659/intro.progress#18</a></p>",
        "id": 208032451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394708
    },
    {
        "content": "<p>Aha! I guess that's ... C++17?</p>",
        "id": 208032542,
        "sender_full_name": "simulacrum",
        "timestamp": 1598394766
    },
    {
        "content": "<p>Not that it matters much, I suppose.</p>",
        "id": 208032558,
        "sender_full_name": "simulacrum",
        "timestamp": 1598394784
    },
    {
        "content": "<p>C++11 too, it is 1.10.25 at <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf</a></p>",
        "id": 208032699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598394919
    },
    {
        "content": "<p>This does seem helpful, thank you.</p>",
        "id": 208033105,
        "sender_full_name": "simulacrum",
        "timestamp": 1598395163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> you agree that I should likely file a bug with upstream loom, right?</p>",
        "id": 208033168,
        "sender_full_name": "simulacrum",
        "timestamp": 1598395202
    },
    {
        "content": "<p>I think so. I don't know where the issue is but it's clearly not internally consistent</p>",
        "id": 208033324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598395293
    },
    {
        "content": "<p><a href=\"https://github.com/tokio-rs/loom/blob/master/src/rt/atomic.rs#L705\">This line</a> seems to say that a seqcst load should only load the latest seqcst write if that is all that is available</p>",
        "id": 208033610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598395467
    },
    {
        "content": "<p>RMWs have much stronger ordering guarantees, so this does not sound surprising to me. I haven't looked into all the details though.</p>",
        "id": 208060090,
        "sender_full_name": "RalfJ",
        "timestamp": 1598426801
    },
    {
        "content": "<p>oh, these are all SeqCst accesses? sorry I thought it would be release-acquire as that makes most sense most of the time^^</p>",
        "id": 208060147,
        "sender_full_name": "RalfJ",
        "timestamp": 1598426868
    },
    {
        "content": "<blockquote>\n<p>whereas the rmw write operation has no such case; it always sees the 1 stored by<br>\nthread 1. Note that I definitely expect that a single load may not see the 1<br>\nstored in the other thread. But I find it unexpected that the rmw operation does<br>\nnot encounter this case at all.</p>\n</blockquote>\n<p>not sure what that path means... the usual way to ask about possible behaviors in a weak memory program is to look at all the reads and see which values they can see. You seem to also look at the \"order\" here which is meaningless in general. Also you are doing printing and I have no idea how that might affect ordering, certainly you should not rely on the printing in the <code>spawned</code> thread happening atomically at the same time as the actual store... some time later it'll print, but that means nothing.</p>\n<p>So let's ignore the <code>dbg!</code> in the spawned thread. But I agree that the other <code>dbg!</code> can print either 0 or 1 in both programs. This is uncorrelated with the order of the two prints for the reasons laid out above.</p>",
        "id": 208060449,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427097
    },
    {
        "content": "<p>well loom is a model, so it's probably controlling the order in which atomic operations succeed. So the printing order could well be relevant</p>",
        "id": 208060592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598427201
    },
    {
        "content": "<p>my presumption is that it represents the SeqCst order</p>",
        "id": 208060627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598427239
    },
    {
        "content": "<blockquote>\n<p>Maybe to clarify a bit more, before finding this, I think I more or less<br>\nexpected that a program like the following would eventually terminate (modulo<br>\njust never scheduling the first thread or something like that).</p>\n</blockquote>\n<p>Oh my... now you are talking about liveness. In a concurrency setting. The C++ standard indeed says some things there as <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> mentioned, though I don't know what it says. AFAIK there is hardly any research on actually underpinning that wording with anything formal. Researchers are still busy figuring out safety in a weak memory setting; liveness is years off I think.^^</p>\n<p>But it is certainly the <em>intention</em> of the C++ model that such a program will eventually terminate, and in practice this is something you should be able to rely on.</p>",
        "id": 208060679,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/atomic.20load.20vs.20rmw/near/208060592\">said</a>:</p>\n<blockquote>\n<p>well loom is a model, so it's probably controlling the order in which atomic operations succeed. So the printing order could well be relevant</p>\n</blockquote>\n<p>I dont know how loom works, but I dont see why it would make the printing atomic with the store. It might as well execute the store in the spanwed thread, then go on with the main thread, and at the end do the printing in the spawned thread.</p>",
        "id": 208060731,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/atomic.20load.20vs.20rmw/near/208060627\">said</a>:</p>\n<blockquote>\n<p>my presumption is that it represents the SeqCst order</p>\n</blockquote>\n<p>loom supports weak memory, where most operations are not part of the SeqCst order. so this cannot be the case in general.</p>",
        "id": 208060759,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427325
    },
    {
        "content": "<p>FWIW the printing order does not change when I run the test many times</p>",
        "id": 208060872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598427405
    },
    {
        "content": "<p>which shows nothing as this is non-determinism, you might as well get the same execution each time</p>",
        "id": 208060909,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427440
    },
    {
        "content": "<p>right...</p>",
        "id": 208060929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598427458
    },
    {
        "content": "<p>it is impossible to figure out the order of the store and the load directly (except maybe with a debugger, but that will completely wreck havok with any possible weak behaviors). the only way to observe their order is indirectly, by checking if the load got a 0 or a 1.</p>",
        "id": 208060992,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427493
    },
    {
        "content": "<p>that's why in every single weak memory paper, \"litmus tests\" are written as programs with a bunch of stores, RMW, and loads, and then specified by \"what are the possible sets of values that those loads might see\"</p>",
        "id": 208061021,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427527
    },
    {
        "content": "<p>Still, it is an exhaustive enumeration of all possible behaviors. I assume it's doing a prolog like backtracking thing; it would be pretty weird if it were nondeterministic</p>",
        "id": 208061107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598427602
    },
    {
        "content": "<p>that is the only meaningful way to talk about the possible behaviors of weak memory programs. no total order exists for all operations, and for the special few operations that are subject to a total order (SeqCst, and also the order of writes <em>on a single location</em>), the order is not observable except by checking what values a load can see.</p>",
        "id": 208061131,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427611
    },
    {
        "content": "<p>does loom really enumerate all possible interleavings of printing? AFAIK it is focused on producing all possible values for all loads, and that's it.</p>",
        "id": 208061181,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427664
    },
    {
        "content": "<p>printing itself forces another total order onto the program which heavily interferes with whatever the memory model does</p>",
        "id": 208061202,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427691
    },
    {
        "content": "<p>so trying to measure things by printing in the middle of a weak memory execution is like trying to measure wildlife by putting spotlights into the forest. sure, you might see something, but it has nothing to do with the thing you want to actually measure.</p>",
        "id": 208061281,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427737
    },
    {
        "content": "<p>to measure memory models, you have to first collect all the data (do all the loads and stores you are interested in), and only at the end start printing them out. that is the only way to be sure that the printing does not interfere with your measurement.</p>",
        "id": 208061322,
        "sender_full_name": "RalfJ",
        "timestamp": 1598427781
    },
    {
        "content": "<p>loom single-threads the program so printing should be fine I think</p>",
        "id": 208080541,
        "sender_full_name": "simulacrum",
        "timestamp": 1598442224
    },
    {
        "content": "<p>eh... but it has to explore all interleavings, right?</p>",
        "id": 208184826,
        "sender_full_name": "RalfJ",
        "timestamp": 1598512778
    },
    {
        "content": "<p>like, Miri also \"single-threads\" the program. but that's in the same sense that all programs are single-threaded when you only have 1 physical core.</p>",
        "id": 208184850,
        "sender_full_name": "RalfJ",
        "timestamp": 1598512796
    },
    {
        "content": "<p>it changes nothing about what I said above. the print is still not atomic with the store.</p>",
        "id": 208184903,
        "sender_full_name": "RalfJ",
        "timestamp": 1598512812
    },
    {
        "content": "<p>also no idea if loom models the synchronization implicit in printing; if it does that would also still be a problem</p>",
        "id": 208184915,
        "sender_full_name": "RalfJ",
        "timestamp": 1598512834
    }
]