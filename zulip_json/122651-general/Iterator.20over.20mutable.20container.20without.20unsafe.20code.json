[
    {
        "content": "<p>Hello!<br>\nI am trying to implement an iterator over a mutable container without using unsafe code.<br>\nFor the sake of this example, I tried to re-implement <code>slice::IterMut</code>: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8dbb7ff77d9dfc3dd89c8501d29c561a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8dbb7ff77d9dfc3dd89c8501d29c561a</a><br>\nBut I always end up being stopped by the borrow checker because of lifetime constraints.<br>\nI think I understand why the borrow checker is complaining, but I cannot seem to find a way to overcome this limitation without going through raw pointer ... And even by doing it, I am not exactly sure how to implement something that is sound.</p>",
        "id": 214811835,
        "sender_full_name": "marmeladema",
        "timestamp": 1603877440
    },
    {
        "content": "<p>Indeed, I find that that exercise in particular teaches a lot, so good choice <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p>So, the idea here is that in the signature of <code>next</code>, the input is a <code>&amp;'next mut Iter&lt;'iter&gt;</code>, so \"basically\", a <code>&amp;'next mut &amp;'iter mut [T]</code>. And the returned type needs to have a lifetime of <code>'iter</code> (this is what allows having the values yielded by multiple <code>.next()</code> calls co-exist and be collected), but the issue is that when \"collapsing\" borrows / indirection like in this case, the direct mechanism available is \"reborrowing\", which yields <code>&amp;'next mut [T]</code>, so we end up with the shorter lifetime and fail (for the <em>shared</em> references case, since <code>&amp;_</code> is <code>Copy</code>-able, instead of reborrowing  one can copy the inner reference, and obtain the desired <code>&amp;'iter [T]</code> out of  a <code>&amp;'next &amp;'iter [T]</code>).</p>\n<p>In the <em>exclusive</em> (<code>&amp;mut</code>) case, the \"equivalent\" of \"copying\" the inner reference is to <em>take</em> it, <em>i.e.</em>, to <em>replace</em> it with a dummy one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">IterMut</span><span class=\"o\">&lt;'</span><span class=\"na\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">iter</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">IterMut</span><span class=\"o\">&lt;'</span><span class=\"na\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"o\">&lt;'</span><span class=\"na\">next</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">next</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">IterMut</span><span class=\"o\">&lt;'</span><span class=\"na\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">at_slice</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">next</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">slice</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Take the slice by putting a temporary dummy in its stead.</span>\n<span class=\"w\">        </span><span class=\"c1\">// This way we do get something with the `'iter` lifetime.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">iter</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">at_slice</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">split_at_mut</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">at_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">first</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<ul>\n<li>(Note that this implementation will panic when reaching the end of the slice, since the length check at <code>get_mut()</code> happens too late: it needs to be done before the <code>.split_at_mut()</code>, but that issue is not <code>IterMut</code>-specific)</li>\n</ul>",
        "id": 214816291,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603880154
    },
    {
        "content": "<p>Very nice! Thank you! I will digest this and maybe come back with more questions :D</p>",
        "id": 214820678,
        "sender_full_name": "marmeladema",
        "timestamp": 1603882785
    },
    {
        "content": "<p>Is there a \"generic\" way of doing this? Like I tried with a HashMap: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4e008b94c8834d0fdfffe806b2e02a0e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4e008b94c8834d0fdfffe806b2e02a0e</a> but I don't know what trick to use in this case</p>",
        "id": 214824178,
        "sender_full_name": "marmeladema",
        "timestamp": 1603885034
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/25730586/155423\">https://stackoverflow.com/q/25730586/155423</a></p>",
        "id": 214825914,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603886210
    },
    {
        "content": "<p>Use the collections mutable iterator instead.</p>",
        "id": 214825956,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603886249
    },
    {
        "content": "<p>I am designing my own collection :/ and also I would like to learn what my option for safe rust are.</p>",
        "id": 214826395,
        "sender_full_name": "marmeladema",
        "timestamp": 1603886538
    },
    {
        "content": "<p>Bascally I have encoded a linked list in a vector, each element in the vector is a {T, prev,next} and I want to iterate in order of the elements and not in order of the slice/vec itself</p>",
        "id": 214826828,
        "sender_full_name": "marmeladema",
        "timestamp": 1603886836
    },
    {
        "content": "<p>For now I am using a raw pointer + a PantomData&lt;&amp;mut&gt;</p>",
        "id": 214827219,
        "sender_full_name": "marmeladema",
        "timestamp": 1603887092
    },
    {
        "content": "<blockquote>\n<p>I tried with a HashMap</p>\n</blockquote>\n<p>Which is why I said to use <code>HashMap</code>'s iterator <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 214834336,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891242
    },
    {
        "content": "<p>In pure safe Rust, there's not much of an option</p>",
        "id": 214834378,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891265
    },
    {
        "content": "<p>You have to look at what functions are provided by the underlying thing. In the code above, there's <code>split_at_mut</code></p>",
        "id": 214834447,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891299
    },
    {
        "content": "<p>The larger ideas from above are explored in <a href=\"https://stackoverflow.com/q/34384089/155423\">https://stackoverflow.com/q/34384089/155423</a></p>",
        "id": 214834537,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891328
    },
    {
        "content": "<blockquote>\n<p>each element in the vector is a {T, prev,next}</p>\n</blockquote>\n<p>What are the types of <code>prev</code> and <code>next</code>? That's rather important.</p>",
        "id": 214834613,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891369
    },
    {
        "content": "<p>If they are indices in the vector, it should be straight forward</p>",
        "id": 214834690,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891409
    },
    {
        "content": "<p>But it will still need unsafe because there's no guarantee that all of your <code>next</code> indices are distinct</p>",
        "id": 214835864,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891948
    },
    {
        "content": "<p>E.g. <code>{next: 1}, {next: 1}</code> would return the same mutable reference twice</p>",
        "id": 214835900,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603891969
    },
    {
        "content": "<p>Which would violate the rules of references</p>",
        "id": 214835974,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603892012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Iterator.20over.20mutable.20container.20without.20unsafe.20code/near/214834690\">said</a>:</p>\n<blockquote>\n<p>If they are indices in the vector, it should be straight forward</p>\n</blockquote>\n<p>They are indeed indexes <code>usize</code></p>",
        "id": 214841600,
        "sender_full_name": "marmeladema",
        "timestamp": 1603894374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Iterator.20over.20mutable.20container.20without.20unsafe.20code/near/214835900\">said</a>:</p>\n<blockquote>\n<p>E.g. <code>{next: 1}, {next: 1}</code> would return the same mutable reference twice</p>\n</blockquote>\n<p>Why returning two times the same element twice would be bad according to borrow checking logic? I understand it's wrong from an iterator behavior point of view but you can call <code>slice.get_mut(index)</code> two times in a row without any problem, I believe. How is that different?</p>",
        "id": 214842150,
        "sender_full_name": "marmeladema",
        "timestamp": 1603894620
    },
    {
        "content": "<p>Is it because one could do:</p>\n<div class=\"codehilite\"><pre><span></span><code>let a = iter.next().unwrap();\nlet b = iter.next().unwrap();\n</code></pre></div>\n\n\n<p>And potentially you get two times the same element?</p>",
        "id": 214842358,
        "sender_full_name": "marmeladema",
        "timestamp": 1603894718
    },
    {
        "content": "<p>the two borrows can exist simultaneously iff the indexes are distinct</p>",
        "id": 214842396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603894733
    },
    {
        "content": "<p>and that would indeed break the rules! Thank you</p>",
        "id": 214842410,
        "sender_full_name": "marmeladema",
        "timestamp": 1603894736
    },
    {
        "content": "<p>but rust can't reason about that so it makes the conservative assumption that they are not necessarily distinct and disallows concurrent borrows altogether, and you need a primitive like <code>split_at_mut</code> in order to express this in the type system</p>",
        "id": 214842577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603894807
    },
    {
        "content": "<blockquote>\n<p>And potentially you get two times the same element?</p>\n</blockquote>\n<p>Yes. Or, easier, <code>iter.collect::&lt;Vec&lt;&gt;&gt;()</code></p>",
        "id": 214847431,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603896950
    },
    {
        "content": "<p>All of this make perfect sense! Thank you very much!<br>\nI guess in order to not have to use unsafe, I would need to \"re-order\" the element in my vec and use the standard slice itermut implementation</p>",
        "id": 214848104,
        "sender_full_name": "marmeladema",
        "timestamp": 1603897212
    },
    {
        "content": "<p>Which, under the hood, uses unsafe because it knows its own invariants</p>",
        "id": 214848600,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603897394
    },
    {
        "content": "<p>Yes of course, but I would always trust more the usage of unsafe code in the standard library rather than my own. Would miri help detect such bugs like reference aliasing etc?</p>",
        "id": 214850361,
        "sender_full_name": "marmeladema",
        "timestamp": 1603898055
    },
    {
        "content": "<p>That should be one of the big things, yes.</p>",
        "id": 214869662,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603905685
    },
    {
        "content": "<p>But you have to actually execute code that violates it</p>",
        "id": 214869695,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603905695
    },
    {
        "content": "<p>So, if you just looped over the collection and used the reference then threw it away, it wouldn't complain</p>",
        "id": 214869769,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603905724
    },
    {
        "content": "<p>But if you <code>collect</code>ed, then it'd error.</p>",
        "id": 214869811,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603905734
    },
    {
        "content": "<p>Interesting! Thanks i'll improve my tests then :)</p>",
        "id": 214872316,
        "sender_full_name": "marmeladema",
        "timestamp": 1603906743
    },
    {
        "content": "<p>(You might also have to <em>use</em> two mutable reference after collecting them, for MIRI to check the stack borrow annotations on them.  I don't remember for sure.)</p>",
        "id": 214873397,
        "sender_full_name": "scottmcm",
        "timestamp": 1603907233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> could you explain what you mean by \"reborrowing\"?</p>",
        "id": 215241695,
        "sender_full_name": "ambiso",
        "timestamp": 1604232812
    },
    {
        "content": "<p>The idea is that when you have nested reference types (in a quite broad sense, I am not talking about <code>&amp;</code> and<code>&amp;mut</code> exclusively), there are some situations where you can unflatten those: if somebody already had some borrow during some <code>'lifetime</code>, then you can borrow the borrow itself during a <code>'shorter</code> lifetime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"o\">&lt;'</span><span class=\"na\">lifetime</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">someone</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">lifetime</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Pointee</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nested_borrow</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">lifetime</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Pointee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">someone</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then, the interesting part is, that for the duration of your <code>'shorter</code> (sub)-borrow, you can access the pointee.<br>\nAnd practically speaking, the current double indirection of <code>&amp;mut &amp;mut</code> is an inefficient way to do so. So you can <strong>flatten the indirection</strong>, and obtain a direct borrow of the <code>Pointee</code>, <em>as long as it keeps the limitations the nested borrow would have had</em> (<em>e.g.</em>, lifetime of the outer borrow, <code>mut</code> if an only if all the borrow chain is <code>mut</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>  fn example&lt;'lifetime&gt;(mut someone: &amp;'lifetime mut Pointee) -&gt; ...\n  {\n      let nested_borrow: &amp;'_ mut &amp;'lifetime mut Pointee = &amp;mut someone;\n<span class=\"gi\">+     let reborrow: &amp;'_ mut Pointee = &amp;mut** nested_borrow;</span>\n  }\n</code></pre></div>\n<p>So, in summary, reborrowing is a mechanism to keep indirections flat / simple (instead of nested), but with the \"tied to the sorter (outer) lifetime\" nature than the natural nested borrow would have had.<br>\nIn practice, it is a way to avoid <em>moving</em> (and thus consuming and rendering unusable) a reference type that is not <code>Copy</code>, such as <code>&amp;'lifetime mut Pointee</code> in the example, by having implicitly <em>borrowed</em> it during the reborrow:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"o\">&lt;'</span><span class=\"na\">lifetime</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">someone</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">lifetime</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Pointee</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_reborrow</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Pointee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cm\">/* &amp;mut* */</span><span class=\"w\"> </span><span class=\"n\">someone</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stuff</span><span class=\"p\">(</span><span class=\"n\">someone</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// OK.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=75c0aea4f4c78b967e09e3ec75a052f7\">Playground</a></li>\n</ul>\n<hr>\n<p>In the case of <code>IterMut</code>, we had a case of nested borrows <code>fn next&lt;'next&gt;(&amp;'next mut &amp;'iter mut [u8])</code> and thus a reborrow being the natural / spontaneous way to flatten such indirection. But we thus get an unflattend borrow that yet carries the lifetime of the outer borrow, <code>'next</code>, instead of the needed / desired <code>'iter</code> one.</p>",
        "id": 215252881,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604250654
    },
    {
        "content": "<p>Thanks a lot for taking the time (out of your lifetime <em>ba dum ts</em>)</p>",
        "id": 215337917,
        "sender_full_name": "ambiso",
        "timestamp": 1604332764
    },
    {
        "content": "<p><a href=\"https://github.com/Soveu/safer-std/blob/master/src/slice_iter_mut.rs\">i have done this before :)</a></p>",
        "id": 215571529,
        "sender_full_name": "Soveu",
        "timestamp": 1604491487
    }
]