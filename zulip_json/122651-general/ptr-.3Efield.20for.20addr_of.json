[
    {
        "content": "<p>We could make <code>addr_of</code> accept <code>ptr-&gt;field</code> syntax, it just <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f552a8169ce1b1bb54b072ceaf4c6b49\">looks neat</a></p>",
        "id": 233448515,
        "sender_full_name": "Soveu",
        "timestamp": 1617782783
    },
    {
        "content": "<p>Is there a benefit to this other than your aesthetics?</p>",
        "id": 233452666,
        "sender_full_name": "isHavvy",
        "timestamp": 1617785106
    },
    {
        "content": "<p>that would make it harder to transition if <code>&amp;raw const</code> ever stabilizes</p>",
        "id": 233491070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617803612
    },
    {
        "content": "<p>you already can't perfectly transition because the syntax is already incompatible</p>",
        "id": 233541239,
        "sender_full_name": "Lokathor",
        "timestamp": 1617821074
    },
    {
        "content": "<p>yeah fair enough</p>",
        "id": 233541377,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617821150
    },
    {
        "content": "<p>I'd prefer if <code>ptr-&gt;field</code> syntax inhibited dereference coercions(that create intermediate references).</p>\n<p>So this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">boxed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">boxed</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ptr</span>-&gt;<span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But this would not work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">boxed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">new</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)));</span><span class=\"w\"></span>\n\n<span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">boxed</span>-&gt;<span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>because it creates intermediate references to call <code>Deref::deref</code></p>\n<p>I was surprised that there can be deref coercions inside <code>addr_of</code>,since the docs describe <code>addr_of</code> like this:</p>\n<blockquote>\n<p>Create a <code>const</code> raw pointer to a place, without creating an intermediate reference.</p>\n</blockquote>",
        "id": 233574470,
        "sender_full_name": "matt1992",
        "timestamp": 1617835361
    },
    {
        "content": "<p>How does <code>addr_of</code> cause a deref coercion in those examples?</p>",
        "id": 233616017,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617868782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400735\">@Pointerbender</span> <br>\nBoth of the uses of <code>addr_of</code> here cause a deref coercion:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=efdbe58dfc0753723b8adfe9bd903812\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=efdbe58dfc0753723b8adfe9bd903812</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hello from Deref::deref\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wrapper</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"kt\">u128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">wrapper</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233618106,
        "sender_full_name": "matt1992",
        "timestamp": 1617870095
    },
    {
        "content": "<p>Oh that is very surprising indeed! Is this a bug in the implementation of <code>addr_of</code> or a bug in its documentation?</p>",
        "id": 233618423,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617870295
    },
    {
        "content": "<p>yeah, it needs documentation and possibly some compiler warnings</p>",
        "id": 233618604,
        "sender_full_name": "Soveu",
        "timestamp": 1617870405
    },
    {
        "content": "<p>It does nicely warn about unsafe in this line though: <code>unsafe{ std::ptr::addr_of!((*ptr).2) };</code></p>",
        "id": 233618664,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617870452
    },
    {
        "content": "<p>and if you try to call <code>std::ptr::addr_of!(wrapper.2);</code> when there is a live mutable reference, you will also get a compile error</p>",
        "id": 233618753,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617870497
    },
    {
        "content": "<p>I don't know of a way where you could safely call <code>addr_of</code>  where <code>wrapper</code> is unaligned though (that is possible on <code>*ptr</code> if <code>*ptr</code> is unaligned, hence the <code>unsafe</code>), so it still seems sound luckily. I heard of some intentions to allow <code>addr_of</code> to be called on unaligned <code>*ptr</code> in the future, too. These examples that implicitly call <code>Deref::deref</code> seem relevant to that, but right now it's not possible yet.</p>",
        "id": 233620067,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617871299
    },
    {
        "content": "<p>addr_of can go from pointer to pointer, so both the address and the fields can be unaligned</p>",
        "id": 233620588,
        "sender_full_name": "Soveu",
        "timestamp": 1617871595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328907\">Soveu</span> <a href=\"#narrow/stream/122651-general/topic/ptr-.3Efield.20for.20addr_of/near/233620588\">said</a>:</p>\n<blockquote>\n<p>addr_of can go from pointer to pointer, so both the address and the fields can be unaligned</p>\n</blockquote>\n<p>Currently that's not the case yet, there is another interesting Zulip stream about that currently: <a href=\"#narrow/stream/213817-t-lang/topic/Alignment.20and.20raw.20pointer.20deref/near/232012526\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Alignment.20and.20raw.20pointer.20deref/near/232012526</a></p>",
        "id": 233621253,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617871979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400735\">@Pointerbender</span> it has to be aligned right now: <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/raw.20ref.20semantics/near/232644870\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/raw.20ref.20semantics/near/232644870</a></p>",
        "id": 233646754,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1617886435
    },
    {
        "content": "<p>Ooo I missed that one, thanks! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 233652559,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617888813
    },
    {
        "content": "<p>So it still works with <code>repr(packed)</code></p>",
        "id": 233705214,
        "sender_full_name": "Soveu",
        "timestamp": 1617906589
    },
    {
        "content": "<p>Seems like that's about the address of the struct, not the field.<br>\nSo if it's <code>#[repr(packed(2))]</code> the pointer has to be aligned to a multiple of 2 for the struct, but it doesn't have to be aligned for the field you get inside.</p>",
        "id": 233716865,
        "sender_full_name": "matt1992",
        "timestamp": 1617911265
    }
]