[
    {
        "content": "<p>I am super excited about <a href=\"https://lore.kernel.org/lkml/20210704202756.29107-1-ojeda@kernel.org/\">https://lore.kernel.org/lkml/20210704202756.29107-1-ojeda@kernel.org/</a> ! However, this part of the announcement is somewhat concerning</p>\n<blockquote>\n<p>However, the kernel can now be compiled with beta and stable <code>rustc</code><br>\nreleases. At the moment, we are using the 1.54-beta1 version as our<br>\nreference compiler. At the end of this month, <code>rustc</code> 1.54 will be<br>\nreleased, and we will move to that version as our reference.</p>\n<p>Note that the kernel still requires unstable features, even if it is<br>\ncompiled with a stable <code>rustc</code> release, thus we cannot guarantee that<br>\nfuture <code>rustc</code> versions will work without changes to the kernel tree.</p>\n</blockquote>\n<p>so looks like we might soon have a major user heavily relying on the <code>RUSTC_BOOTSTRAP</code> hack? that seems bad. :( I am worried this might impact how we experiment with unstable features on nightly.</p>\n<p>(I was not sure where to bring this up so this seemed like the least wrong place.^^)</p>",
        "id": 245010148,
        "sender_full_name": "RalfJ",
        "timestamp": 1625560841
    },
    {
        "content": "<p>Imo that should be treated as if they were using nightly.</p>",
        "id": 245011731,
        "sender_full_name": "The 8472",
        "timestamp": 1625561858
    },
    {
        "content": "<p>That's what Firefox does or used to do, right?</p>",
        "id": 245011917,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625561977
    },
    {
        "content": "<p>I feel like one conclusion we could draw all this is that we're leaving features unstable for too long. There are features that stay unstable for years and years, and that's not really healthy.</p>",
        "id": 245012963,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625562631
    },
    {
        "content": "<p>There needs to be a more coordinated effort to work out the remaining details and stabilize (or remove) these features.</p>",
        "id": 245013035,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625562683
    },
    {
        "content": "<p>Of course, easier said than done.</p>",
        "id": 245013050,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625562696
    },
    {
        "content": "<p>I wonder if there's anything people can do to help features move towards stabilization...</p>",
        "id": 245013421,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625562942
    },
    {
        "content": "<p>I think it also shows there's a need for a version of rust that does not come with stability guarantees (e.g. allows library features that might still be renamed or redesigned a bit), but is not the not-much-tested-yet nightly version of a few hours old.</p>",
        "id": 245013428,
        "sender_full_name": "Mara",
        "timestamp": 1625562952
    },
    {
        "content": "<p>just like how we use the beta/bootstrap compiler ourselves for rustc. a somewhat proven version of the compiler of a few weeks old, but still with unstable features enabled.</p>",
        "id": 245013548,
        "sender_full_name": "Mara",
        "timestamp": 1625563015
    },
    {
        "content": "<p>That sounds exactly like <code>stable</code> with <code>RUSTC_BOOTSTRAP=1</code>.</p>",
        "id": 245013574,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625563036
    },
    {
        "content": "<p>yeah. except that that gets a lot of negative responses because it wasn't meant for that.</p>",
        "id": 245013600,
        "sender_full_name": "Mara",
        "timestamp": 1625563064
    },
    {
        "content": "<p>rename it to RUSTC_UNSTABLE ?</p>",
        "id": 245013668,
        "sender_full_name": "The 8472",
        "timestamp": 1625563089
    },
    {
        "content": "<p><code>RUSTC_PREVIEW_OPTIN</code>?</p>",
        "id": 245013750,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625563144
    },
    {
        "content": "<p>What would be the advantage of a separate build instead of using the env?</p>",
        "id": 245013752,
        "sender_full_name": "The 8472",
        "timestamp": 1625563145
    },
    {
        "content": "<p>well, it's been moving towards getting rid of the environment variable, or at least making it harder to enable.</p>",
        "id": 245013760,
        "sender_full_name": "Mara",
        "timestamp": 1625563149
    },
    {
        "content": "<p>it might be nice to have a difference between 'unstable and untested your code might explode' and 'unstable, but we use it internally a lot we just haven't decided on the name yet'.</p>",
        "id": 245013972,
        "sender_full_name": "Mara",
        "timestamp": 1625563307
    },
    {
        "content": "<p>You still need feature flags in your code and there's incomplete_features. The bootstrap flag itself doesn't buy you that much instability.</p>",
        "id": 245014085,
        "sender_full_name": "The 8472",
        "timestamp": 1625563369
    },
    {
        "content": "<p>because sometimes i'm working on a project where i need some nightly feature and i'm perfectly fine with it requiring some rename/changes in a future rust version, but i rather not use nightly rust with potential bugs.</p>",
        "id": 245014113,
        "sender_full_name": "Mara",
        "timestamp": 1625563389
    },
    {
        "content": "<p>yeah i know we have incomplete_features, but there's a lot of features that are still at the point where we would really like people to not use them yet because we haven't figured out what it means for soundness or whether the implementation is fully correct, which aren't marked as incomplete_features.</p>",
        "id": 245014223,
        "sender_full_name": "Mara",
        "timestamp": 1625563451
    },
    {
        "content": "<p>That still doesn't explain the difference between using stable + env vs. separate build from the same source as stable.</p>\n<p>Do you mean it would only allow a subset of unstable features?</p>",
        "id": 245014260,
        "sender_full_name": "The 8472",
        "timestamp": 1625563483
    },
    {
        "content": "<p>the compiler team wanted a carrot to get people to use beta. maybe allowing some features (opt-in still required of course) there would be it.</p>",
        "id": 245014464,
        "sender_full_name": "The 8472",
        "timestamp": 1625563589
    },
    {
        "content": "<p>yeah, maybe. just enable the \"we won't promise the api stays the same\" features, but not enable \"we won't guarantee this works or there's no big footguns\" features.</p>",
        "id": 245014475,
        "sender_full_name": "Mara",
        "timestamp": 1625563598
    },
    {
        "content": "<p>semistable features!</p>",
        "id": 245014670,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625563721
    },
    {
        "content": "<p>Bikeshed: I'd avoid \"unstable\" because it tends to attract a lot of low-effort commentary in the lines of \"why would you use an unstable language?\"</p>",
        "id": 245014741,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625563772
    },
    {
        "content": "<p>I think that negative aura is useful so people are aware that extra maintenance burden comes with using that. It's not like the language is unstable, just certain features you opt into.</p>",
        "id": 245014836,
        "sender_full_name": "The 8472",
        "timestamp": 1625563816
    },
    {
        "content": "<p>I'm not sure if it would help the kernel project though, they're upstreaming experimental stuff. Would that immediately be allowed on beta? Otherwise they'd still have to wait or use the bootstrap hack.</p>",
        "id": 245014939,
        "sender_full_name": "The 8472",
        "timestamp": 1625563893
    },
    {
        "content": "<p>would be interesting to know which features they need</p>",
        "id": 245014986,
        "sender_full_name": "Mara",
        "timestamp": 1625563924
    },
    {
        "content": "<p><a href=\"https://github.com/Rust-for-Linux/linux/issues/2\">https://github.com/Rust-for-Linux/linux/issues/2</a></p>",
        "id": 245015246,
        "sender_full_name": "The 8472",
        "timestamp": 1625564091
    },
    {
        "content": "<p>They have such list: <a href=\"https://github.com/Rust-for-Linux/linux/issues/355\">rustc</a> - <a href=\"https://github.com/Rust-for-Linux/linux/issues/408\">alloc</a> - <a href=\"https://github.com/Rust-for-Linux/linux/issues/353\">bindgen</a> and <a href=\"https://github.com/Rust-for-Linux/linux/issues/350\">rustdoc</a></p>",
        "id": 245015313,
        "sender_full_name": "Urgau",
        "timestamp": 1625564141
    },
    {
        "content": "<p>nice</p>",
        "id": 245015353,
        "sender_full_name": "Mara",
        "timestamp": 1625564163
    },
    {
        "content": "<p>seems incomplete though?</p>",
        "id": 245015510,
        "sender_full_name": "Mara",
        "timestamp": 1625564253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> posted the link to the <a href=\"https://github.com/Rust-for-Linux/linux/issues/2\">language features they want</a></p>",
        "id": 245015677,
        "sender_full_name": "Urgau",
        "timestamp": 1625564375
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>alloc_error_handler\nallocator_api\nassociated_type_defaults\ncompiler_builtins\nconst_fn_trait_bound\nconst_mut_refs\nconst_panic\nconst_raw_ptr_deref\nconst_unreachable_unchecked\ncore_panic\nglobal_asm\nreceiver_trait\ntry_reserve\n</code></pre></div>\n<p>by my count in those patches.</p>",
        "id": 245015812,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625564457
    },
    {
        "content": "<p>Your list doesn't cover unstable rustc and cargo flags. and the falliable alloc or no-float-parsing configs in core/alloc.</p>",
        "id": 245016127,
        "sender_full_name": "The 8472",
        "timestamp": 1625564657
    },
    {
        "content": "<p><a href=\"https://github.com/Rust-for-Linux/linux/issues/416\">Rust-for-Linux/linux#416</a> uses <code>-Zunstable-features</code> to limit the features usable by driver code to just those that are necessary:</p>\n<ul>\n<li>allocator_api</li>\n<li>bench_black_box</li>\n<li>concat_idents</li>\n<li>global_asm</li>\n<li>try_reserve</li>\n</ul>\n<p>In <a href=\"https://github.com/Rust-for-Linux/linux/issues/404\">Rust-for-Linux/linux#404</a> I suggested to use <code>RUSTC_BOOTSTRAP=\"crate list\"</code> to completely prevent unstable features in all crates except for those that need it.</p>",
        "id": 245016302,
        "sender_full_name": "bjorn3",
        "timestamp": 1625564773
    },
    {
        "content": "<p>Currently a manual allocator shim is created by rust-for-linux. This is an implementation detail that is only generated when you let rustc do the linking. <a href=\"https://github.com/Rust-for-Linux/linux/issues/426\">Rust-for-Linux/linux#426</a> removed a part that isn't necessary anymore due to aborting on oom being disabled in liballoc by rust-for-linux. <a href=\"https://github.com/rust-lang/rust/issues/86844\">#86844</a> will remove the need for the rest of the allocator shim when using <code>#[global_allocator]</code> instead of libstd's default allocator.</p>",
        "id": 245016564,
        "sender_full_name": "bjorn3",
        "timestamp": 1625564996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Rust-for-linux.20and.20unstable.20features.20on.20beta.3F/near/245015812\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>alloc_error_handler\nallocator_api\nassociated_type_defaults\ncompiler_builtins\nconst_fn_trait_bound\nconst_mut_refs\nconst_panic\nconst_raw_ptr_deref\nconst_unreachable_unchecked\ncore_panic\nglobal_asm\nreceiver_trait\ntry_reserve\n</code></pre></div>\n<p>by my count in those patches.</p>\n</blockquote>\n<p><code>alloc_error_handler</code> is no longer necessary. I will open an issue. Edit: <a href=\"https://github.com/Rust-for-Linux/linux/issues/431\">Rust-for-Linux/linux#431</a></p>",
        "id": 245016871,
        "sender_full_name": "bjorn3",
        "timestamp": 1625565181
    },
    {
        "content": "<p><code>receiver_trait</code> is used for <code>impl&lt;T: ?Sized&gt; Receiver for Ref&lt;T&gt; {}</code>.</p>",
        "id": 245017364,
        "sender_full_name": "bjorn3",
        "timestamp": 1625565484
    },
    {
        "content": "<p><code>try_reserve</code> and <code>allocator_api</code> are used because many <code>try_*</code> methods aren't stabilized yet.</p>",
        "id": 245017411,
        "sender_full_name": "bjorn3",
        "timestamp": 1625565522
    },
    {
        "content": "<p><code>global_asm!</code> is used in the <code>module!()</code> macro to define kernel modules. It needs it for builtin-modules to extend the initcall section:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">+</span><span class=\"w\">            </span><span class=\"cp\">#[cfg(not(MODULE))]</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"cp\">#[cfg(CONFIG_HAVE_ARCH_PREL32_RELOCATIONS)]</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"fm\">global_asm!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"n\">r</span>#<span class=\"err\">\\</span><span class=\"s\">\".section </span><span class=\"se\">\\\"</span><span class=\"s\">{initcall_section}</span><span class=\"se\">\\\"</span><span class=\"s\">, </span><span class=\"se\">\\\"</span><span class=\"s\">a</span><span class=\"se\">\\\"</span><span class=\"s\"></span>\n<span class=\"s\">+                __{name}_initcall:</span>\n<span class=\"s\">+                    .long   __{name}_init - .</span>\n<span class=\"s\">+                    .previous</span>\n<span class=\"s\">+                </span><span class=\"se\">\\\"</span><span class=\"s\">#</span>\n<span class=\"s\">+            );</span>\n</code></pre></div>",
        "id": 245017743,
        "sender_full_name": "bjorn3",
        "timestamp": 1625565726
    },
    {
        "content": "<p><code>compiler_builtins</code> is required as every crate depends on compiler-builtins unless <code>#![no_builtins]</code> is used. rust-for-linux uses a dummy compiler-builtins that panics for all operations. To make rustc treat it as \"the\" compiler-builtins, it needs to be marked with <code>compiler_builtins</code>.</p>\n<p>Now that I think of it, maybe <code>#![no_builtins]</code> would just work.</p>",
        "id": 245018116,
        "sender_full_name": "bjorn3",
        "timestamp": 1625565964
    },
    {
        "content": "<p>No, that would require liballoc to be <code>#![no_builtins]</code> too.</p>",
        "id": 245018270,
        "sender_full_name": "bjorn3",
        "timestamp": 1625566072
    },
    {
        "content": "<p><code>core_panic</code> is used since <a href=\"https://github.com/Rust-for-Linux/linux/issues/257\">Rust-for-Linux/linux#257</a> because <code>const_panic</code> doesn't work in the 2018 edition, which I believe is also the reason <code>const_panic</code> isn't stabilized yet.</p>",
        "id": 245018877,
        "sender_full_name": "bjorn3",
        "timestamp": 1625566499
    },
    {
        "content": "<p><code>const_unreachable_unchecked</code> will likely be stabilized at the same time as <code>const_panic</code>.</p>",
        "id": 245018916,
        "sender_full_name": "bjorn3",
        "timestamp": 1625566534
    },
    {
        "content": "<p><code>bench_black_box</code> is only used in the <code>rust_stack_probing</code> module to ensure that there is no linker error when stack probing would normally be used.</p>",
        "id": 245019017,
        "sender_full_name": "bjorn3",
        "timestamp": 1625566619
    },
    {
        "content": "<p><code>associated_type_defaults</code> may be removable at the cost of ergonomics, but the rest of the <code>const_*</code> features will hopefully be stabilized soonish.</p>",
        "id": 245019288,
        "sender_full_name": "bjorn3",
        "timestamp": 1625566807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Rust-for-linux.20and.20unstable.20features.20on.20beta.3F/near/245018877\">said</a>:</p>\n<blockquote>\n<p><code>core_panic</code> is used since <a href=\"https://github.com/Rust-for-Linux/linux/issues/257\">Rust-for-Linux/linux#257</a> because <code>const_panic</code> doesn't work in the 2018 edition, which I believe is also the reason <code>const_panic</code> isn't stabilized yet.</p>\n</blockquote>\n<p>2021 edition right?</p>",
        "id": 245030602,
        "sender_full_name": "marmeladema",
        "timestamp": 1625574375
    },
    {
        "content": "<p>yeah, my bad.</p>",
        "id": 245035245,
        "sender_full_name": "bjorn3",
        "timestamp": 1625576665
    },
    {
        "content": "<p>No worries, I just wanted to be sure because I am looking forward for this feature to be stabilized :)</p>",
        "id": 245035731,
        "sender_full_name": "marmeladema",
        "timestamp": 1625576919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/122651-general/topic/Rust-for-linux.20and.20unstable.20features.20on.20beta.3F/near/245013548\">said</a>:</p>\n<blockquote>\n<p>just like how we use the beta/bootstrap compiler ourselves for rustc. a somewhat proven version of the compiler of a few weeks old, but still with unstable features enabled.</p>\n</blockquote>\n<p>I wouldnt say that's how we use it.<br>\nwe use bootstraping to make sure the current stable compiler builds with the previous stable compiler, so that e.g. distros can reasonably follow the bootstrap chain.</p>",
        "id": 245063769,
        "sender_full_name": "RalfJ",
        "timestamp": 1625588722
    }
]