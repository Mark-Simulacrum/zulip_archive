[
    {
        "content": "<p>Hi all! I'm going to publish my first public crate soon and was wondering about the current best practices for using <code>#[inline]</code>.<br>\nMy crate implements a few iterators, with some calling inner iterators, some having optimized <code>count</code>, <code>last</code>, <code>nth</code>, <code>size_hint</code> functions, etc.<br>\nThis makes up a lot of short functions, which I hope to see inlined during release builds.</p>\n<p>Is it still considered best practice to put <code>#[inline]</code> everywhere I see fit or can I rely on LLVM to do \"the right thing\" today, even for default (non-LTO) release builds?</p>\n<p>And if this still needs manual work:<br>\nShould I better add <code>#[inline]</code> to the short <code>next</code> function of the public iterator - or rather to the long <code>next</code> function of my crate-internal iterator that is called by the public iterator?</p>",
        "id": 225395925,
        "sender_full_name": "Colin Finck",
        "timestamp": 1612597482
    },
    {
        "content": "<p><code>#[inline]</code> is sometimes required for LLVM to be able to inline cross-crate calls at all without LTO. Only generic and <code>#[inline]</code> functions get the MIR encoded that is necessary to codegen LLVM ir in the target crate as necessary for LLVM to inline functions.</p>",
        "id": 225405582,
        "sender_full_name": "bjorn3",
        "timestamp": 1612610775
    },
    {
        "content": "<p>inlining shorter functions is more likely going to lead to faster builds.</p>",
        "id": 225411571,
        "sender_full_name": "nagisa",
        "timestamp": 1612617626
    },
    {
        "content": "<p>IMO the rule of thumb would be to not <code>#[inline]</code> anything unless machine code inspection and/or benchmarks show an improvement in metrics you care about.</p>",
        "id": 225411595,
        "sender_full_name": "nagisa",
        "timestamp": 1612617714
    },
    {
        "content": "<p>@nagisa On the other hand, one can't really claim to provide zero-cost abstractions, when adding another layer of indirection that is surely not inlined away</p>",
        "id": 225412811,
        "sender_full_name": "Colin Finck",
        "timestamp": 1612619295
    },
    {
        "content": "<p>Just tell people to turn on thin LTO in release builds and never think about it again.</p>",
        "id": 225418018,
        "sender_full_name": "Lokathor",
        "timestamp": 1612627048
    },
    {
        "content": "<p>I tend to inline things that are small, or where I expect it to have a meaningful difference for the optimizer (often constructors get inlined, iterator next impls, etc), but these take some time to develop intuition. I basically never use #[inline(always)].</p>",
        "id": 225422123,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612632992
    },
    {
        "content": "<p>That means you also put an <code>#[inline]</code> around every trait impl? (e.g. <code>eq</code> of PartialEq or <code>partial_cmp</code> of PartialOrd are usually one-liners for me)</p>",
        "id": 225422303,
        "sender_full_name": "Colin Finck",
        "timestamp": 1612633212
    },
    {
        "content": "<p>I think I have some intuition where it would make sense to inline. It's just that it would be very tedious to add <code>#[inline]</code> to each and every short function, and I would assume LLVM to already do that for me at a moderate optimization level</p>",
        "id": 225422666,
        "sender_full_name": "Colin Finck",
        "timestamp": 1612633721
    },
    {
        "content": "<p>But looks like LLVM actually needs to be told considering what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> says</p>",
        "id": 225422688,
        "sender_full_name": "Colin Finck",
        "timestamp": 1612633767
    },
    {
        "content": "<p>The problem is in rustc, not LLVM here. <a href=\"https://github.com/rust-lang/rust/issues/78120\">https://github.com/rust-lang/rust/issues/78120</a> could fix having to put <code>#[inline]</code> on everything.</p>",
        "id": 225422866,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612634027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350190\">Colin Finck</span> <a href=\"#narrow/stream/122651-general/topic/Best.20practice.20for.20.23.5Binline.5D.20in.20a.20public.20crate/near/225422666\">said</a>:</p>\n<blockquote>\n<p>I think I have some intuition where it would make sense to inline. It's just that it would be very tedious to add <code>#[inline]</code> to each and every short function, and I would assume LLVM to already do that for me at a moderate optimization level</p>\n</blockquote>\n<p>LLVM will always inline small-enough functions when optimizing -- even when size optimizing -- when the definition is available to it (and it's not marked <code>inline(never)</code>).</p>",
        "id": 225429233,
        "sender_full_name": "scottmcm",
        "timestamp": 1612644043
    },
    {
        "content": "<p>To add to what scott said: small, non-generic functions won't inline across crate bounds without <code>#[inline]</code>. Unfortunately, tagging every single such function is, indeed, exactly as boring as it sounds.</p>\n<p>Which is why I suggested telling people to just activate thin LTO. It will allow cross-crate inlining in all code within the build.</p>",
        "id": 225436170,
        "sender_full_name": "Lokathor",
        "timestamp": 1612655691
    },
    {
        "content": "<p>(And do so without the cargo-pipelining-blocking and other implications of having <code>[inline]</code> and thus forcing them to be emitted into MIR and CGU-repeated and such)</p>",
        "id": 225436231,
        "sender_full_name": "scottmcm",
        "timestamp": 1612655853
    },
    {
        "content": "<p>Do we currently repeat <code>#[inline]</code> functions in multiple CGUs even if LTO is enabled? Would it make sense to avoid doing that?</p>",
        "id": 225436328,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1612656027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Yeah, thinking more about that, I'll remove all #[inline]s and just refer people to ThinLTO now. After all, this is something a compiler should be able to do better than any human</p>",
        "id": 225453266,
        "sender_full_name": "Colin Finck",
        "timestamp": 1612688012
    },
    {
        "content": "<p>As someone who is myself the purveyor of thin glue crates full of hundreds of functions, you have my sympathies</p>",
        "id": 225453323,
        "sender_full_name": "Lokathor",
        "timestamp": 1612688110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350190\">Colin Finck</span> <a href=\"#narrow/stream/122651-general/topic/Best.20practice.20for.20.23.5Binline.5D.20in.20a.20public.20crate/near/225422303\">said</a>:</p>\n<blockquote>\n<p>That means you also put an <code>#[inline]</code> around every trait impl? (e.g. <code>eq</code> of PartialEq or <code>partial_cmp</code> of PartialOrd are usually one-liners for me)</p>\n</blockquote>\n<p>Often, sure. But small also generally means in terms of code size. I also dont generally inline if the implementation just calls another non-inline function. It's mostly about giving the compiler useful info to work with. I'd definitely go for partialeq/partialord tho if the types are small</p>",
        "id": 225463056,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612702773
    }
]