[
    {
        "content": "<p>I have this type:</p>\n<div class=\"codehilite\"><pre><span></span>pub struct PanicOutput&lt;W: Write&gt;(pub Option&lt;fn() -&gt; io::Result&lt;W&gt;&gt;);\n</pre></div>",
        "id": 148120551,
        "sender_full_name": "Jethro",
        "timestamp": 1542817146
    },
    {
        "content": "<p>when I try to store it in a const or static, I get this error:</p>\n<div class=\"codehilite\"><pre><span></span>80 | pub static PANIC_OUTPUT: PanicOutput&lt;Stderr&gt; =  PanicOutput(Some(Stderr::new));\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly be outside the (wrapping) range 1..=0\n   |\n   = note: The rules on what exactly is undefined behavior aren&#39;t clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n</pre></div>",
        "id": 148120579,
        "sender_full_name": "Jethro",
        "timestamp": 1542817171
    },
    {
        "content": "<p>I'm not sure I understand what's going on. can you not store fn pointers in a static?</p>",
        "id": 148120589,
        "sender_full_name": "Jethro",
        "timestamp": 1542817194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> which rustc version? have you tried nightly?</p>",
        "id": 148120736,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817348
    },
    {
        "content": "<p>I recall fixing something similar recently</p>",
        "id": 148120741,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817357
    },
    {
        "content": "<p>how can I have x.py output the compiler version it's using?</p>",
        "id": 148120753,
        "sender_full_name": "Jethro",
        "timestamp": 1542817375
    },
    {
        "content": "<p>oh you are doing this in rustc?</p>",
        "id": 148120778,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817397
    },
    {
        "content": "<p>then it is using the bootstrap compiler, which is a beta</p>",
        "id": 148120787,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817414
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>build/x86_64-unknown-linux-gnu/stage0/bin/rustc --version\n</pre></div>\n\n\n<p>would show the version</p>",
        "id": 148120804,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817439
    },
    {
        "content": "<p>but yeah, possible that the fix didn't make it into beta yet</p>",
        "id": 148120848,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817450
    },
    {
        "content": "<p>ah yeah it's rustc 1.31.0-beta.1 (2824a67b0 2018-10-29)</p>",
        "id": 148120862,
        "sender_full_name": "Jethro",
        "timestamp": 1542817466
    },
    {
        "content": "<p>how critical is this? I guess we could try to get it backported</p>",
        "id": 148120872,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817481
    },
    {
        "content": "<p>so um.. if I want to do this in std, what are my options? wait until bootstrap is fixed?</p>",
        "id": 148120875,
        "sender_full_name": "Jethro",
        "timestamp": 1542817484
    },
    {
        "content": "<p>you can also use <code>#[cfg(not(stage0))]</code></p>",
        "id": 148120892,
        "sender_full_name": "oli",
        "timestamp": 1542817501
    },
    {
        "content": "<p>except I'm changing existing code</p>",
        "id": 148120916,
        "sender_full_name": "Jethro",
        "timestamp": 1542817530
    },
    {
        "content": "<p>but all uses of the static will also need the cfg</p>",
        "id": 148120922,
        "sender_full_name": "oli",
        "timestamp": 1542817534
    },
    {
        "content": "<p>yea, you'd need to keep the old code around, too</p>",
        "id": 148120925,
        "sender_full_name": "oli",
        "timestamp": 1542817542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> hm why does <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1840f8bef870ba3faa6085455f3a882c\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1840f8bef870ba3faa6085455f3a882c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1840f8bef870ba3faa6085455f3a882c</a> work?</p>",
        "id": 148120937,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817551
    },
    {
        "content": "<p>why should it not work?</p>",
        "id": 148121000,
        "sender_full_name": "oli",
        "timestamp": 1542817573
    },
    {
        "content": "<p>function pointers in constants are fine</p>",
        "id": 148121009,
        "sender_full_name": "oli",
        "timestamp": 1542817579
    },
    {
        "content": "<p>and have been since 1.0</p>",
        "id": 148121012,
        "sender_full_name": "oli",
        "timestamp": 1542817585
    },
    {
        "content": "<p>right but this is the bug where we dont know that fn pointers are non-NULL</p>",
        "id": 148121018,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817598
    },
    {
        "content": "<p>isn't <code>fn()</code> a function <em>reference</em>?</p>",
        "id": 148121039,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817626
    },
    {
        "content": "<p>although we always say \"pointer\"</p>",
        "id": 148121045,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817635
    },
    {
        "content": "<p><em>shrug</em> I use these terms rather interchangeably</p>",
        "id": 148121058,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817649
    },
    {
        "content": "<p>right, as do I, but Rust makes a difference between the two ;-)</p>",
        "id": 148121067,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817663
    },
    {
        "content": "<p>uh... maybe it's related to the newtype around the option?</p>",
        "id": 148121076,
        "sender_full_name": "oli",
        "timestamp": 1542817673
    },
    {
        "content": "<p>I don't know if it makes sense to distinguish for fn ptrs</p>",
        "id": 148121077,
        "sender_full_name": "Jethro",
        "timestamp": 1542817674
    },
    {
        "content": "<p>there is no meaningful semantic difference (except if you want to say non-NULL is the difference)</p>",
        "id": 148121126,
        "sender_full_name": "Jethro",
        "timestamp": 1542817695
    },
    {
        "content": "<p>a function pointer cannot be null</p>",
        "id": 148121134,
        "sender_full_name": "oli",
        "timestamp": 1542817707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> I feel like that... is a huge semantic difference...</p>",
        "id": 148121140,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> this also works on playground:</p>\n<div class=\"codehilite\"><pre><span></span>fn a() {} struct A&lt;T&gt;(Option&lt;fn() -&gt; T&gt;); const X: A&lt;()&gt; = A(Some(a));\n</pre></div>",
        "id": 148121142,
        "sender_full_name": "Jethro",
        "timestamp": 1542817719
    },
    {
        "content": "<p>I guess you need a more pathological case to trigger the UB warning</p>",
        "id": 148121151,
        "sender_full_name": "Jethro",
        "timestamp": 1542817741
    },
    {
        "content": "<p>I think it was just broken in a few rustc versions</p>",
        "id": 148121161,
        "sender_full_name": "oli",
        "timestamp": 1542817751
    },
    {
        "content": "<p>oh play is using a much newer beta than bootstrap</p>",
        "id": 148121168,
        "sender_full_name": "Jethro",
        "timestamp": 1542817766
    },
    {
        "content": "<p>but apparently one that made it into a specific beta, but not the nightly beta?</p>",
        "id": 148121169,
        "sender_full_name": "oli",
        "timestamp": 1542817766
    },
    {
        "content": "<p>we probably backported it ;)</p>",
        "id": 148121178,
        "sender_full_name": "oli",
        "timestamp": 1542817778
    },
    {
        "content": "<p>maybe you can get away with bumping the bootstrap compiler</p>",
        "id": 148121190,
        "sender_full_name": "oli",
        "timestamp": 1542817789
    },
    {
        "content": "<p>1.31.0-beta.1 vs 1.31.0-beta.15</p>",
        "id": 148121191,
        "sender_full_name": "Jethro",
        "timestamp": 1542817789
    },
    {
        "content": "<p>you could probably upgrade the beta release without much objection</p>",
        "id": 148121253,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817817
    },
    {
        "content": "<p>any pointers for this?</p>",
        "id": 148121273,
        "sender_full_name": "Jethro",
        "timestamp": 1542817844
    },
    {
        "content": "<p>err, the bootstrap beta. I'm a little surprised it doesn't happen \"automatically\", but it's probably only when needed</p>",
        "id": 148121276,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817848
    },
    {
        "content": "<p>I'd skim <a href=\"https://forge.rust-lang.org/release-process.html\" target=\"_blank\" title=\"https://forge.rust-lang.org/release-process.html\">https://forge.rust-lang.org/release-process.html</a></p>",
        "id": 148121303,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> just to be sure, could you try compiling this with <code>build/x86_64-unknown-linux-gnu/stage0/bin/rustc</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">TEST</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148121317,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817898
    },
    {
        "content": "<p>Maybe just</p>\n<blockquote>\n<p>Send a PR to the master branch to:</p>\n<ul>\n<li>modify src/stage0.txt to bootstrap from yesterday’s beta</li>\n<li>modify src/bootstrap/channel.rs with the new version number</li>\n</ul>\n</blockquote>",
        "id": 148121395,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542817939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that works, but the example I just posted doesn't (it produces the same error I was seeing)</p>\n<div class=\"codehilite\"><pre><span></span>fn a() {} struct A&lt;T&gt;(Option&lt;fn() -&gt; T&gt;); const X: A&lt;()&gt; = A(Some(a));\n</pre></div>",
        "id": 148121402,
        "sender_full_name": "Jethro",
        "timestamp": 1542817942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yeah that looks good</p>",
        "id": 148121404,
        "sender_full_name": "Jethro",
        "timestamp": 1542817946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span>  <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  do you know which PR fixed this? I can't quite identify it in the beta commit log</p>",
        "id": 148121589,
        "sender_full_name": "Jethro",
        "timestamp": 1542818159
    },
    {
        "content": "<p>maybe <a href=\"https://github.com/rust-lang/rust/pull/55474\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55474\">https://github.com/rust-lang/rust/pull/55474</a> ?</p>",
        "id": 148121763,
        "sender_full_name": "Jethro",
        "timestamp": 1542818286
    },
    {
        "content": "<p>looks like the one</p>",
        "id": 148121841,
        "sender_full_name": "oli",
        "timestamp": 1542818375
    },
    {
        "content": "<p>oh, so it wasn't even about fn pointers</p>",
        "id": 148122618,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819019
    },
    {
        "content": "<p>that explains it</p>",
        "id": 148122621,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819021
    },
    {
        "content": "<p>yeah then <span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> try getting the bootstrap compiler updated. I am afraid I have no idea how to do that.<br>\nCc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 148122653,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819057
    },
    {
        "content": "<p>I already found out!</p>",
        "id": 148122662,
        "sender_full_name": "Jethro",
        "timestamp": 1542819069
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/56139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56139\">https://github.com/rust-lang/rust/pull/56139</a></p>",
        "id": 148122669,
        "sender_full_name": "Jethro",
        "timestamp": 1542819077
    },
    {
        "content": "<p>awesome :)</p>",
        "id": 148123049,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819390
    }
]