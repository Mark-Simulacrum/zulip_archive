[
    {
        "content": "<p>You can't \"spread\" a HRTB across two trait bounds:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FooFut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">FooFut</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FooFut</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I found some comments from <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>  that suggest the current best solution is a trait object:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What language features does the eventual non-allocating solution need?</p>",
        "id": 271884703,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644870929
    },
    {
        "content": "<p>None, technically (although it's slightly inconvenient):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">AsyncCallback</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsyncCallback</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">AsyncCallback</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Future</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Future</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AsyncCallback</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fut</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>demo to prove that it works: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=b10ba3ca7027bb74ce3e2b23c0411ffb\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=b10ba3ca7027bb74ce3e2b23c0411ffb</a></p>\n<p>Now that there is potential for HRTB syntax to be added to closures, it's _possible_ that it would enable this pattern to work with async closures. I long for the day.</p>",
        "id": 271889923,
        "sender_full_name": "Kestrer",
        "timestamp": 1644873536
    },
    {
        "content": "<p>Hmm, I tried the helper trait solution and couldn't get it to work. I wonder what's different here and my real code.</p>",
        "id": 271889994,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644873574
    },
    {
        "content": "<p>Oh, maybe the \"due to some arcane issue with how rustc produces HRTB impls\" in the playground link</p>",
        "id": 271890105,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644873615
    },
    {
        "content": "<p>But then you can't have a <em>closure</em>, is that correct?</p>",
        "id": 271890231,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644873680
    },
    {
        "content": "<p>Yeah, unfortunately</p>",
        "id": 271890412,
        "sender_full_name": "Kestrer",
        "timestamp": 1644873758
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>, I advocate for <code>BoxFuture</code> in practice, even though helper traits can express the right semantics (btw <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> wrote a nifty crate to make it more lightweight: <a href=\"https://docs.rs/async_fn_traits\">https://docs.rs/async_fn_traits</a>), because only <code>async fn</code> get to feature that signature / meet the necessary higher-order property</p>",
        "id": 271894585,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644875554
    },
    {
        "content": "<p>A closure yielding an <code>async</code> block won't be able to be imbued with the right higher-order signature, for reasons similar to the justification of <a href=\"https://docs.rs/higher-order-closure\">https://docs.rs/higher-order-closure</a></p>",
        "id": 271894697,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644875628
    },
    {
        "content": "<p>oh dear <a href=\"/user_uploads/4715/rS9B_WOS6ua0mw40ZjbMgFhJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rS9B_WOS6ua0mw40ZjbMgFhJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/rS9B_WOS6ua0mw40ZjbMgFhJ/image.png\"></a></div>",
        "id": 271894709,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644875635
    },
    {
        "content": "<p>But with TAIT, <code>higher_order_closure!</code> can be made to support this</p>",
        "id": 271894805,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644875671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> sure, from a practical POV it makes sense to use <code>BoxFuture</code> today. What I'm curious about is how we make it better.</p>",
        "id": 271894864,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644875708
    },
    {
        "content": "<p>I'm planning on featuring that as a crate soon, using <code>BoxFuture</code> as a current stable polyfill / fallback, and letting a feature-gate use taits to avoid the heap allocation</p>",
        "id": 271894932,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644875744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/HRTB.20and.20closures.20returning.20futures/near/271894709\">said</a>:</p>\n<blockquote>\n<p>oh dear <a href=\"/user_uploads/4715/rS9B_WOS6ua0mw40ZjbMgFhJ/image.png\">image.png</a></p>\n</blockquote>\n<p>it's macro generated though. Feel free to peek at the source code ^^</p>",
        "id": 271895065,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1644875799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> oh, sure. It's just a big wall when you open the docs though.</p>",
        "id": 271895102,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644875823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> make sure you peek at <a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/HRTB.20and.20dyn\">#general &gt; HRTB and dyn</a>; relevant to your sphere of knowledge.</p>",
        "id": 271895180,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644875874
    },
    {
        "content": "<p>... as you post in there <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 271895255,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644875890
    }
]