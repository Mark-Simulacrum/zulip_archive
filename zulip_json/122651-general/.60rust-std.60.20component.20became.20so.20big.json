[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> Forgive my ignorance, but why does <code>rust-std</code> component include <code>librustc-&lt;hash&gt;.rlib</code>? I mean, when will this library be linked?</p>",
        "id": 169892450,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562609995
    },
    {
        "content": "<p>Never on stable/beta, for custom compiler frontends on nightly</p>",
        "id": 169894045,
        "sender_full_name": "Zoxc",
        "timestamp": 1562611278
    },
    {
        "content": "<p>Thanks for the reply! so maybe it makes sense to package those into a separate component, and only those using custom compiler frontends needs to download them :) that will save more than 100MB space, i think~</p>",
        "id": 169894456,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562611593
    },
    {
        "content": "<p>Yes. I've suggested doing that before.</p>",
        "id": 169894977,
        "sender_full_name": "Zoxc",
        "timestamp": 1562612029
    },
    {
        "content": "<p>I have another question: the <code>rustc_driver-&lt;hash&gt;.dll.lib</code> is almost 6MB, and it's only a import library...  Using tool i can see that <code>rustc_driver-&lt;hash&gt;.dll</code> is exporting all kinds of functions...almost 9k functions. Is that expected?</p>",
        "id": 169895046,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562612053
    },
    {
        "content": "<p>there are functions defined within <code>serde_json</code>, <code>termcolor</code>, <code>parking_lot</code>, <code>syntax</code>, ...</p>",
        "id": 169895216,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562612179
    },
    {
        "content": "<p>That's expected. It basically has all the compiler code and the code of its dependencies.</p>",
        "id": 169895395,
        "sender_full_name": "Zoxc",
        "timestamp": 1562612336
    },
    {
        "content": "<p>Yes. Though I wouldn't stake my life on <em>all</em> of these being strictly necessary, by nature it will export a ton of symbols. It's a dylib, not a C dylib, so it exposes a Rust ABI interface: anything that was already compile to machine code in any of the upstream crates is put there and exposed for downstream crates to reference so they don't have to duplicate that machine code. It's literally the dynamically linked equivalent of an rlib (well, all of the rlibs that make up rustc_driver aggregated into one library).</p>",
        "id": 169895409,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1562612352
    },
    {
        "content": "<p>i see. thanks~</p>",
        "id": 169895660,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562612574
    },
    {
        "content": "<p>I'd like us to ship a single binary containing rustc, clippy and rls, and only use static linking / rlibs. In which case there would be no lib files and less duplication of code.</p>",
        "id": 169895707,
        "sender_full_name": "Zoxc",
        "timestamp": 1562612620
    },
    {
        "content": "<p>We could then use LTO and export no symbols for faster load times (possibly)</p>",
        "id": 169895796,
        "sender_full_name": "Zoxc",
        "timestamp": 1562612679
    },
    {
        "content": "<p>i'm also thinking about something else. In the wild quite a few people want to build dylib-based plugin systems. However from what i learnt just now, the common dependency part, as a dylib will export everything in every crate, and dead code elimination is impossible. This is a little... suboptimal?</p>",
        "id": 169896299,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562613178
    },
    {
        "content": "<p>I can't recommend strongly enough against building anything, plugin system or otherwise, on top of dylibs. Everything that needs dynamic linking should use cdylibs.</p>",
        "id": 169896470,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1562613318
    },
    {
        "content": "<p>But in <code>cdylib</code>s, passing rust values through the dll boundaries are so inconvenient...</p>",
        "id": 169896564,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562613390
    },
    {
        "content": "<p>If it's convenient enough, <code>rustc_driver.dll</code> can also be a cdylib, right?</p>",
        "id": 169896629,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562613445
    },
    {
        "content": "<p>maybe we're just one very-smart-proc-macro away from doing the necessary data marshaling, i don't know, but we're just not there.</p>",
        "id": 169896929,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562613670
    },
    {
        "content": "<p>I know the downsides and pains of Rust-Rust interfaces channeled through the C ABI very well, but dylibs are just so much worse in every other respect.</p>",
        "id": 169897094,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1562613825
    },
    {
        "content": "<p>yeah, i agree</p>",
        "id": 169897165,
        "sender_full_name": "Charles Lew",
        "timestamp": 1562613869
    },
    {
        "content": "<p>oh so I didnt just imagine that rust-std grew in size enormously? given it is a mandatory component, seems like an odd choice to put things in there that only experimental alternative backends need</p>",
        "id": 170643662,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858732
    },
    {
        "content": "<p>there's definitely some truth to us probably not wanting to do that</p>",
        "id": 170643735,
        "sender_full_name": "simulacrum",
        "timestamp": 1562858770
    },
    {
        "content": "<p>otoh, we didn't actually change what's in the component -- just the encoding of said things</p>",
        "id": 170643750,
        "sender_full_name": "simulacrum",
        "timestamp": 1562858784
    },
    {
        "content": "<p>but it <em>did</em> regress a lot recently? I've seen <a href=\"https://github.com/rust-lang/rust/pull/59800\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59800\">https://github.com/rust-lang/rust/pull/59800</a> being mentioned</p>",
        "id": 170643855,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858879
    },
    {
        "content": "<p>is there a bug for that particular regression? I just found a very general \"things are too big\" at <a href=\"https://github.com/rust-lang/rust/issues/61978\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61978\">https://github.com/rust-lang/rust/issues/61978</a></p>",
        "id": 170643919,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858906
    },
    {
        "content": "<p>yes, it did by around ~50 MB I think? It's really noticeable primarily because we used to be around ~80 MB download and are now above 100</p>",
        "id": 170643925,
        "sender_full_name": "simulacrum",
        "timestamp": 1562858910
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/62486\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62486\">https://github.com/rust-lang/rust/issues/62486</a></p>",
        "id": 170643970,
        "sender_full_name": "simulacrum",
        "timestamp": 1562858949
    },
    {
        "content": "<p>I remember rustc and rust-std being about the same size usually, now rust-std is three times the size</p>",
        "id": 170643995,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858972
    },
    {
        "content": "<p>looks more like a 100MB regression to me, rust-std has 170MB</p>",
        "id": 170644012,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858982
    },
    {
        "content": "<p>ah, I think that's installed size</p>",
        "id": 170644025,
        "sender_full_name": "simulacrum",
        "timestamp": 1562858995
    },
    {
        "content": "<p>the \"downloading\" status shows <em>installed</em> size...?</p>",
        "id": 170644085,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859016
    },
    {
        "content": "<p>(of rustup)</p>",
        "id": 170644102,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859031
    },
    {
        "content": "<p>I think no? but then you get another progress meter thingy for the installation</p>",
        "id": 170644120,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859045
    },
    {
        "content": "<p>they show the same size</p>",
        "id": 170644132,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859054
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>info: syncing channel updates for &#39;stable-x86_64-unknown-linux-gnu&#39;\ninfo: syncing channel updates for &#39;nightly-x86_64-unknown-linux-gnu&#39;\ninfo: latest update on 2019-07-11, rust version 1.38.0-nightly (cd2cd4c96 2019-07-10)\ninfo: downloading component &#39;rustc&#39;\n 65.6 MiB /  65.6 MiB (100 %)  21.0 MiB/s in  3s ETA:  0s\ninfo: downloading component &#39;rust-std&#39;\n171.1 MiB / 171.1 MiB (100 %)  22.2 MiB/s in  8s ETA:  0s\ninfo: downloading component &#39;cargo&#39;\ninfo: downloading component &#39;rust-docs&#39;\ninfo: downloading component &#39;rust-src&#39;\ninfo: downloading component &#39;rust-analysis&#39;\ninfo: removing component &#39;rustc&#39;\ninfo: removing component &#39;rust-std&#39;\ninfo: removing component &#39;cargo&#39;\ninfo: removing component &#39;rust-docs&#39;\ninfo: removing component &#39;rust-src&#39;\ninfo: removing component &#39;rust-analysis&#39;\ninfo: installing component &#39;rustc&#39;\n 65.6 MiB /  65.6 MiB (100 %)  11.6 MiB/s in  5s ETA:  0s\ninfo: installing component &#39;rust-std&#39;\n171.1 MiB / 171.1 MiB (100 %)  27.4 MiB/s in  6s ETA:  0s\ninfo: installing component &#39;cargo&#39;\ninfo: installing component &#39;rust-docs&#39;\n 11.6 MiB /  11.6 MiB (100 %)   8.4 MiB/s in  1s ETA:  0s\ninfo: installing component &#39;rust-src&#39;\ninfo: installing component &#39;rust-analysis&#39;\ninfo: checking for self-updates\n</pre></div>",
        "id": 170644154,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859070
    },
    {
        "content": "<p>yeah that's what I see locally</p>",
        "id": 170644171,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859086
    },
    {
        "content": "<p>I think I misread -- I saw rust-src and was really concerned when you said that was 170MB now</p>",
        "id": 170644207,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859113
    },
    {
        "content": "<p>but you typo'd it looks like from std</p>",
        "id": 170644219,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859121
    },
    {
        "content": "<p>installed size on disk appears to have gone up by ~200 MB</p>",
        "id": 170644292,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859154
    },
    {
        "content": "<p>I think it's because we're now including some things twice, but not sure</p>",
        "id": 170644386,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859221
    },
    {
        "content": "<p>i.e., we before had a lot of common code in librustc...so but now that's duplicated across rlibs</p>",
        "id": 170644423,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859240
    },
    {
        "content": "<p>but I could be wrong, I'm not terribly familiar with how we link things</p>",
        "id": 170644475,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859249
    },
    {
        "content": "<p>yeah sorry I wrote rust-src accidentally. we dont have 170MB of source code yet. :P</p>",
        "id": 170644493,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859262
    },
    {
        "content": "<p>nightly: </p>\n<div class=\"codehilite\"><pre><span></span>   83.7 MiB [ 15.9%]  librustc-0a6217d7d74c7abb.rlib\n   76.8 MiB [ 14.6%]  libLLVM-8-rust-1.38.0-nightly.so\n   56.2 MiB [ 10.7%]  librustc_driver-28b978599ed51f4d.so\n   41.0 MiB [  7.8%]  librustc_mir-7a92cf707c2a230b.rlib\n   24.6 MiB [  4.7%]  libcore-c4f58d8b9ed1ef3b.rlib\n   20.5 MiB [  3.9%]  librustc_typeck-904f9abd82bc8c39.rlib\n   19.5 MiB [  3.7%]  libsyntax-c413d5cb9dc5c44f.rlib\n   14.8 MiB [  2.8%]  librustc_metadata-227115a80841d294.rlib\n   10.6 MiB [  2.0%]  librustc_interface-890a457e8a5c59b9.rlib\n</pre></div>\n\n\n<p>stable:</p>\n<div class=\"codehilite\"><pre><span></span>   76.8 MiB [ 27.1%]  libLLVM-8-rust-1.36.0-stable.so\n   25.7 MiB [  9.1%]  libcore-5594cb4f559bc761.rlib\n   25.1 MiB [  8.8%]  librustc-d6e5ab7261915b59.so\n   11.8 MiB [  4.2%]  librustc_mir-5c472af620e2968c.so\n    9.4 MiB [  3.3%]  libstd-9895e8982b0a79e7.rlib\n    8.1 MiB [  2.8%]  librustc_macros-e6df7be6834ec89b.so\n    6.3 MiB [  2.2%]  librustc_typeck-575efaf425292d9e.so\n    6.2 MiB [  2.2%]  libsyntax-aa56a60c3365997c.so\n    6.0 MiB [  2.1%]  libjemalloc_sys-4dfe88c31e2f050c.rlib\n</pre></div>",
        "id": 170644614,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859350
    },
    {
        "content": "<blockquote>\n<p>there are functions defined within <code>serde_json</code>, <code>termcolor</code>, <code>parking_lot</code>, <code>syntax</code>, ...</p>\n</blockquote>\n<p>Is libtest in there or how did termcolor Land there?</p>",
        "id": 171119614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563399329
    },
    {
        "content": "<p>1. no, <code>libtest</code> is not in there 2. i did a <code>cargo tree</code> and it seems there's  rustc_driver =&gt; env_logger =&gt; termcolor &amp; rustc_driver =&gt; rustc_interface  =&gt; rustc_errors =&gt; termcolor</p>",
        "id": 171192091,
        "sender_full_name": "Charles Lew",
        "timestamp": 1563471437
    }
]