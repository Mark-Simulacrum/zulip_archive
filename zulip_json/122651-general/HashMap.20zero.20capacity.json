[
    {
        "content": "<p>Does anyone else think it's surprising that HashMaps can report a capacity of zero even when they haven't freed their backing memory?</p>",
        "id": 217200961,
        "sender_full_name": "Diggsey",
        "timestamp": 1605735980
    },
    {
        "content": "<p>Do you have an example ?</p>",
        "id": 217201586,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1605736345
    },
    {
        "content": "<p>Because I'm <em>very</em> surprised</p>",
        "id": 217201608,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1605736360
    },
    {
        "content": "<p>I think that might be possible if it's at full capacity and then you remove everything, leaving <code>DELETED</code> markers</p>",
        "id": 217202895,
        "sender_full_name": "cuviper",
        "timestamp": 1605737112
    },
    {
        "content": "<p>hashbrown reports capacity as a lower bound, <code>self.items + self.growth_left</code></p>",
        "id": 217202918,
        "sender_full_name": "cuviper",
        "timestamp": 1605737133
    },
    {
        "content": "<p>it's hard to reproduce, but I opened an issue and put instructions there: <a href=\"https://github.com/rust-lang/rust/issues/79178\">https://github.com/rust-lang/rust/issues/79178</a></p>",
        "id": 217203011,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737176
    },
    {
        "content": "<p>the main difficulty is that there's no way to tell when it happens because no methods on HashMap let you distinguish between allocation/no-allocation</p>",
        "id": 217203108,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737239
    },
    {
        "content": "<p>but yeah it appears to be due to a combination of hash collisions and tombstones</p>",
        "id": 217203155,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737270
    },
    {
        "content": "<p>I spent a great deal of time tracking down a supposed memory leak :P</p>",
        "id": 217203539,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737479
    },
    {
        "content": "<p>for your code, would it be okay to add <code>if map.is_empty() { map.shrink_to_fit(); }</code>? (a no-op if it was already freed)</p>",
        "id": 217203809,
        "sender_full_name": "cuviper",
        "timestamp": 1605737577
    },
    {
        "content": "<p>Yeah I can use that as a workaround, but it does mean that the shrinking code doesn't work if hashbrown is unable to remove tombstones when you call <code>remove()</code></p>",
        "id": 217204004,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737674
    },
    {
        "content": "<p>I guess that happens if there was previously a collision?</p>",
        "id": 217204023,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737692
    },
    {
        "content": "<p>it's unclear exactly what conditions cause the capacity to deviate</p>",
        "id": 217204088,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737727
    },
    {
        "content": "<p>I'm worried about cases where the deviation becomes very large</p>",
        "id": 217204215,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737796
    },
    {
        "content": "<p>but the map doesn't become completely empty</p>",
        "id": 217204231,
        "sender_full_name": "Diggsey",
        "timestamp": 1605737806
    },
    {
        "content": "<p>I know that when you're growing, it does account for dead space in <code>reserve_rehash</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">full_capacity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bucket_mask_to_capacity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bucket_mask</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">new_items</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">full_capacity</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Rehash in-place without re-allocating if we have plenty of spare</span>\n<span class=\"w\">            </span><span class=\"c1\">// capacity that is locked up due to DELETED entries.</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rehash_in_place</span><span class=\"p\">(</span><span class=\"n\">hasher</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217207615,
        "sender_full_name": "cuviper",
        "timestamp": 1605739755
    }
]