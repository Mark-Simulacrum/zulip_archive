[
    {
        "content": "<p>What is the reason that the book uses <code>#[cfg(test)] mod test</code>? <a href=\"https://github.com/bytecodealliance/cap-std/pull/240\">https://github.com/bytecodealliance/cap-std/pull/240</a></p>",
        "id": 277407698,
        "sender_full_name": "Colin Walters",
        "timestamp": 1648815398
    },
    {
        "content": "<p>I think it's a convenient way to put <code>#[cfg(test)]</code> on multiple things.</p>",
        "id": 277408809,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648815911
    },
    {
        "content": "<p><code>std</code> puts the test mods into separate files for some performance reasons (incremental compilation I think)</p>",
        "id": 277410951,
        "sender_full_name": "The 8472",
        "timestamp": 1648816889
    },
    {
        "content": "<p>Hmm...like if you wanted to factor out a helper function used only by the tests?  But it seems equally easy at early scale to just slap a <code>#[cfg(test)]</code> on that one helper</p>",
        "id": 277411798,
        "sender_full_name": "Colin Walters",
        "timestamp": 1648817325
    },
    {
        "content": "<p>re separate files, sure; that makes sense, but that's a different case than what we're talking about here</p>",
        "id": 277411913,
        "sender_full_name": "Colin Walters",
        "timestamp": 1648817386
    },
    {
        "content": "<p>you usually have more than one test for a module, so you don't have to cfg() each individual function you cfg() the whole submodule once</p>",
        "id": 277412813,
        "sender_full_name": "The 8472",
        "timestamp": 1648817746
    },
    {
        "content": "<p>But that's just it - <code>#[test]</code> already seems to imply <code>#[cfg(test)]</code> - just try it, add <code>#[test] fn foo() { some_function_that_does_not_exist(); }</code></p>",
        "id": 277413325,
        "sender_full_name": "Colin Walters",
        "timestamp": 1648817979
    },
    {
        "content": "<p><code>cargo b</code> works just fine</p>",
        "id": 277413367,
        "sender_full_name": "Colin Walters",
        "timestamp": 1648817998
    },
    {
        "content": "<p>makes  a difference for test-only imports too</p>",
        "id": 277414864,
        "sender_full_name": "The 8472",
        "timestamp": 1648818594
    },
    {
        "content": "<blockquote>\n<p><code>std</code> puts the test mods into separate files for some performance reasons (incremental compilation I think)</p>\n</blockquote>\n<p>My understanding is that Cargo can’t track that only tests changed when it’s one file and thus rebuilds the library more than is strictly needed. Not quite incremental, but similar areas.</p>",
        "id": 277416490,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648819354
    },
    {
        "content": "<p>Test only imports and test only definitions, etc.</p>",
        "id": 277416598,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648819396
    },
    {
        "content": "<p>I guess I don’t see a strong reason for <code>mod test</code> any more…</p>",
        "id": 277416605,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648819399
    },
    {
        "content": "<p>Ah, yes, imports definitely</p>",
        "id": 277416628,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648819409
    },
    {
        "content": "<p>Those would be very annoying to cfg out</p>",
        "id": 277416658,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648819428
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/sxd/blob/46ae7480056dd6217a080ed8bdc190b7f2bf5b52/pull-parser/src/lib.rs#L1925\">https://github.com/shepmaster/sxd/blob/46ae7480056dd6217a080ed8bdc190b7f2bf5b52/pull-parser/src/lib.rs#L1925</a></p>",
        "id": 277416775,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648819462
    },
    {
        "content": "<p>See all the things not marked <code>#[test]</code></p>",
        "id": 277416827,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648819485
    },
    {
        "content": "<p>I also sometimes add new test-only impl blocks to existing structs</p>",
        "id": 277418341,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648820107
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">test</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_mock</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277418433,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648820149
    },
    {
        "content": "<p>If people want to see an example of that, it’s also in my link above.</p>",
        "id": 277419426,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648820505
    },
    {
        "content": "<p>Joshua, I guess you don’t need <code>mod test</code> for that either</p>",
        "id": 277419521,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648820534
    },
    {
        "content": "<p>You <strong>never</strong> <em>need</em> <code>mod test</code></p>",
        "id": 277420085,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648820773
    },
    {
        "content": "<p>Or probably any modules (e.g. C doesn’t have them and has quite a lot of usage in the real world)</p>",
        "id": 277420209,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648820828
    },
    {
        "content": "<p>Well, C has a very different compilation model - in particular it has forward declarations, which rust doesn't have. Without those you have to declare struct fields inline, which means either <em>everything</em> is public or you have to add privacy to the language itself</p>",
        "id": 277420710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648821017
    },
    {
        "content": "<p>C also treats each file as a separate compilation unit, which helps with not making privacy part of the language itself</p>",
        "id": 277421018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648821123
    },
    {
        "content": "<p>So <code>#[cfg(test)] mod test { … }</code> doesn't really add much, but for a factored out <code>cfg</code> on all the items defined therein, such as imports, extra types, extra impls, as well as a <code>test::</code> prefix on the testing functions (so that they oughtn't need a <code>test_</code> prefix in their name). It's already kind of nice, but nothing super important.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">test</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>on the other hand, not only achieves \"all of the above\", but it does also <strong>improve compilation time of <code>cargo test</code></strong>, as mentioned in this thread, and I cannot stress it enough: it's such a simple way to get a dev-siding QoL improvement, that it would be a pity to miss it.</p>",
        "id": 277421242,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648821209
    },
    {
        "content": "<p>Sure, I don’t mean to say that the languages are the same. My point is that you could make working software without modules or privacy or memory safety or a consistent naming style or human readable identifiers. Yet we still do because it makes the code easier to reason about.</p>",
        "id": 277421300,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821239
    },
    {
        "content": "<p>My point is that C does have privacy, just by a different mechanism :P but I agree with your larger point</p>",
        "id": 277421458,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648821293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> you mean specifically with putting tests in a separate file, right?</p>",
        "id": 277421607,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821357
    },
    {
        "content": "<p>Not just a module.</p>",
        "id": 277421669,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821367
    },
    {
        "content": "<p>Yes, the <code>;</code> in there was the important thing I wanted to highlight <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 277421761,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648821405
    },
    {
        "content": "<p>So it’s akin to my previous comment (“My understanding is that Cargo can’t track that only tests changed…”)?</p>",
        "id": 277421915,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821466
    },
    {
        "content": "<p>Or is it broader in a way I don’t understand?</p>",
        "id": 277422027,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821506
    },
    {
        "content": "<p>Yep, I was just \"stressing\" that point, since even when mentioned I've noticed people overlook it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 277422029,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648821508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/why.20mod.20test.3F/near/277421458\">said</a>:</p>\n<blockquote>\n<p>My point is that C does have privacy</p>\n</blockquote>\n<p>Name a more overloaded word than <code>static</code> in C <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 277422366,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648821633
    },
    {
        "content": "<p>I don’t know how useful it is to most users though. Would need a breakdown of how long the library takes to build vs the tests, how often people make test-only changes, etc.</p>",
        "id": 277422404,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821653
    },
    {
        "content": "<p>True (I ought to make that change where I work, and benchmark the difference, to have more factual visibility on this point)</p>",
        "id": 277422462,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648821678
    },
    {
        "content": "<p>The standard library is a special ish case because of the stages.</p>",
        "id": 277422509,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821699
    },
    {
        "content": "<p>It’s definitely a benefit though.</p>\n<p>Oh, and you’d have to factor in the annoyance of all the <code>test.rs</code> files. Like we got away from all the <code>mod.rs</code></p>",
        "id": 277422729,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821783
    },
    {
        "content": "<p>Yeah, not all IDEs will lay out <code>foo.rs</code> next to <code>foo/tests.rs</code>, and <em>that</em> can be incredibly annoying. <del>Almost to the point of being tempted to use <code>#[path = \"foo_tests.rs\"] mod tests;</code> instead <span aria-label=\"speak no evil\" class=\"emoji emoji-1f64a\" role=\"img\" title=\"speak no evil\">:speak_no_evil:</span> </del></p>",
        "id": 277423099,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648821937
    },
    {
        "content": "<blockquote>\n<p>benchmark the difference</p>\n</blockquote>\n<p>Please do! I’d be interested. Capture both the time to build the tests and run them. I bet the run time dwarfs the build times.</p>",
        "id": 277423253,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648821989
    },
    {
        "content": "<p>I thought about mentioning the path attribute, but the less we talk about it the better for everyone</p>",
        "id": 277423406,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648822053
    },
    {
        "content": "<p>I wonder if rust analyzer or Cargo check benefit from the separate file.</p>",
        "id": 277423927,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648822300
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/10530\">https://github.com/rust-lang/cargo/pull/10530</a></p>",
        "id": 277424586,
        "sender_full_name": "Colin Walters",
        "timestamp": 1648822577
    }
]