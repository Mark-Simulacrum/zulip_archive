[
    {
        "content": "<p>Is it possible for this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cross_crate</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"sd\">/// Some docs</span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to define <code>S</code> in a different crate and re-export it at the callsite of the macro? I don't know if spans can affect the crate or only the edition.</p>\n<p>Context: a version of <a href=\"https://github.com/rust-lang/rust/pull/82295\">https://github.com/rust-lang/rust/pull/82295</a> only checks things in the current crate, and I have a really bad feeling some enterprising library author (<em>cough</em> <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> <em>cough</em>) will write a library to exploit the loophole</p>",
        "id": 226988402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613751852
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 226988449,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613751859
    },
    {
        "content": "<p>I'm not sure I follow the question.</p>",
        "id": 226988538,
        "sender_full_name": "simulacrum",
        "timestamp": 1613751890
    },
    {
        "content": "<p>No macro can define a crate.</p>",
        "id": 226988557,
        "sender_full_name": "simulacrum",
        "timestamp": 1613751898
    },
    {
        "content": "<p>that was my question, thanks :)</p>",
        "id": 226988599,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613751912
    },
    {
        "content": "<p>(like, crates are not a concept within the language)</p>",
        "id": 226988612,
        "sender_full_name": "simulacrum",
        "timestamp": 1613751916
    },
    {
        "content": "<p>they're the compilation unit, macros expand to rust code</p>",
        "id": 226988649,
        "sender_full_name": "simulacrum",
        "timestamp": 1613751927
    },
    {
        "content": "<p>you can't define crates \"within\" rust code</p>",
        "id": 226988676,
        "sender_full_name": "simulacrum",
        "timestamp": 1613751939
    },
    {
        "content": "<p>and I'm not sure what you mean by defining S in a different crate and re-exporting it at the callsite of the macro; what do you mean by \"defining it\"?</p>",
        "id": 226988783,
        "sender_full_name": "simulacrum",
        "timestamp": 1613751974
    },
    {
        "content": "<p>you can certainly assign a span from some other crate (including edition, and other relevant details)</p>",
        "id": 226988816,
        "sender_full_name": "simulacrum",
        "timestamp": 1613751992
    },
    {
        "content": "<p>You could write out crate contents, build them transparently, and expand to <code>extern crate</code>?</p>",
        "id": 226988897,
        "sender_full_name": "nagisa",
        "timestamp": 1613752024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Can.20proc-macros.20define.20new.20crates.3F/near/226988783\">said</a>:</p>\n<blockquote>\n<p>and I'm not sure what you mean by defining S in a different crate and re-exporting it at the callsite of the macro; what do you mean by \"defining it\"?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crate1</span>\n<span class=\"sd\">/// [*const::to_raw_parts]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// crate2</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">crate1</span>::<span class=\"n\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226988935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/Can.20proc-macros.20define.20new.20crates.3F/near/226988897\">said</a>:</p>\n<blockquote>\n<p>You could write out crate contents, build them transparently, and expand to <code>extern crate</code>?</p>\n</blockquote>\n<p>yeah this sort of evil genius is exactly what I'm talking about <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 226988959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752052
    },
    {
        "content": "<p>I mean you <em>can</em></p>",
        "id": 226988973,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752057
    },
    {
        "content": "<p>I sort of \"don't care\" personally, if folks want to break stability they'll likely find a way</p>",
        "id": 226989019,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752075
    },
    {
        "content": "<p>you could also rustc_bootstrap that compilation if you wanted to</p>",
        "id": 226989073,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Can.20proc-macros.20define.20new.20crates.3F/near/226989019\">said</a>:</p>\n<blockquote>\n<p>I sort of \"don't care\" personally, if folks want to break stability they'll likely find a way</p>\n</blockquote>\n<p>I do really care though :/ this feature is <em>broken</em>, that's why it's feature gated in the first place</p>",
        "id": 226989129,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752110
    },
    {
        "content": "<p>and the feature being broken hasn't stopped people from using it in the past</p>",
        "id": 226989149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752123
    },
    {
        "content": "<p>for <a href=\"https://github.com/rust-lang/rust/issues/82295\">#82295</a> specifically it doesn't seem worth the complexity to try to re-check features on used re-exports</p>",
        "id": 226989166,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752131
    },
    {
        "content": "<p>I'm not arguing against it being feature gated? that seems good; I'm just saying that re-exports don't seem like the place to attack that</p>",
        "id": 226989265,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752178
    },
    {
        "content": "<p>my principle is that we should keep feature gates to local checks</p>",
        "id": 226989485,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752262
    },
    {
        "content": "<p>it's just been my experience that any time people can exploit the implementation, they do :/</p>",
        "id": 226989521,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752275
    },
    {
        "content": "<p>ok? I guess I don't see that as a problem</p>",
        "id": 226989540,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752287
    },
    {
        "content": "<p>i.e., they can exploit it, we can also break those exploits arbitrarily</p>",
        "id": 226989569,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752299
    },
    {
        "content": "<p>they're not going to do so accidentally in a way where they get broken most likely</p>",
        "id": 226989589,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752309
    },
    {
        "content": "<p>since presumably few people write docs without rendering them locally (or without ci running rustdoc)</p>",
        "id": 226989721,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Can.20proc-macros.20define.20new.20crates.3F/near/226989721\">said</a>:</p>\n<blockquote>\n<p>since presumably few people write docs without rendering them locally (or without ci running rustdoc)</p>\n</blockquote>\n<p>you'd be surprised <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> a lot of people show up in #docs-rs wanting us to publish a \"doc only\" change because they haven't ever tried to document their crate before</p>",
        "id": 226989838,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752397
    },
    {
        "content": "<p>interesting; but still, those people aren't directly exposed to instability in some sense</p>",
        "id": 226989963,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752444
    },
    {
        "content": "<p>I mean, I don't really have the energy to keep arguing about it so I can revert, but I still don't like it :/</p>",
        "id": 226990084,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752501
    },
    {
        "content": "<p>I guess I'm not sure I understand</p>",
        "id": 226990256,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752561
    },
    {
        "content": "<p>I'm saying we shouldn't check <em>at all</em> on the local crate, when it's using a re-export</p>",
        "id": 226990363,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752593
    },
    {
        "content": "<p>that seems like it solves the issue and is to some extent compatible with your suggestion?</p>",
        "id": 226990400,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752609
    },
    {
        "content": "<p>it still allows bypassing the feature gate by putting the item in another crate, though</p>",
        "id": 226990471,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752638
    },
    {
        "content": "<p>i.e., we could extend later to feature checking the upstream crate as well, but I'd prefer that we do so in a less ad-hoc manner, e.g., store features in metadata rather than iterating attributes</p>",
        "id": 226990497,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Can.20proc-macros.20define.20new.20crates.3F/near/226990497\">said</a>:</p>\n<blockquote>\n<p>i.e., we could extend later to feature checking the upstream crate as well, but I'd prefer that we do so in a less ad-hoc manner, e.g., store features in metadata rather than iterating attributes</p>\n</blockquote>\n<p>ok, I would like that :)</p>",
        "id": 226990547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752667
    },
    {
        "content": "<p>and revert this just for now</p>",
        "id": 226990565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613752676
    },
    {
        "content": "<p>I'm primarily against the ad-hoc feature checking in the PR as-is</p>",
        "id": 226990644,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752695
    },
    {
        "content": "<p>I think the <em>principle</em> of double checking our work in some sense also feels flawed</p>",
        "id": 226990685,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752711
    },
    {
        "content": "<p>in some sense I'd say that either a) we should \"trust\" upstream or b) we should ask for the feature gate locally</p>",
        "id": 226990731,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752731
    },
    {
        "content": "<p>I'm worried in particular that checking upstream is going to be a never-ending battle</p>",
        "id": 226990807,
        "sender_full_name": "simulacrum",
        "timestamp": 1613752772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> the most cursed thing I have seen in this fashion is <a href=\"https://lib.rs/crates/inline-proc\">https://lib.rs/crates/inline-proc</a>; and I believe that crate does not truly bring an external crate into the current compilation; instead, it does compile that other thing within the fs, and then a proc-macro comes and loads and executes that compiled code #scary. If there was a way for a macro to inject an external crate within the compilation process I believe that crate would be using that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 226996967,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613755184
    },
    {
        "content": "<p>yeah i write docs constantly and rarely render them locally</p>",
        "id": 227011358,
        "sender_full_name": "Lokathor",
        "timestamp": 1613761407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/Can.20proc-macros.20define.20new.20crates.3F/near/227011358\">said</a>:</p>\n<blockquote>\n<p>yeah i write docs constantly and rarely render them locally</p>\n</blockquote>\n<p>This seems \"normal\" to me; writing docs with the intent to not render them at all for the local crate seems not normal though :)</p>",
        "id": 227011729,
        "sender_full_name": "simulacrum",
        "timestamp": 1613761564
    },
    {
        "content": "<p>well notably i write docs so that RA tooltips work, and where it differs from how rustdoc works i have to go with ra style</p>",
        "id": 227012769,
        "sender_full_name": "Lokathor",
        "timestamp": 1613761969
    },
    {
        "content": "<p>Conversely, I wish that docs had hot-reloading sometimes. Then I'd open it on one monitor and edit on the other.</p>",
        "id": 227032227,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613770665
    },
    {
        "content": "<p>You could set that up with <code>cargo watch</code> I think</p>",
        "id": 227032411,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613770757
    },
    {
        "content": "<p><code>cargo watch -c -x doc</code></p>",
        "id": 227038055,
        "sender_full_name": "Lokathor",
        "timestamp": 1613772856
    },
    {
        "content": "<p>I'm not sure y'all have used hot reloading before, as that doesn't solve what I mean :-)</p>",
        "id": 227051113,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613781221
    },
    {
        "content": "<p>I've done live code hotloading before</p>",
        "id": 227051939,
        "sender_full_name": "Lokathor",
        "timestamp": 1613781895
    },
    {
        "content": "<p>but in the context of rustdoc i can't imagine it meaning anything other than \"run rustdoc again when the files on disk change\"</p>",
        "id": 227051972,
        "sender_full_name": "Lokathor",
        "timestamp": 1613781910
    },
    {
        "content": "<p>i mean the browser doesn't also referesh, but eh</p>",
        "id": 227052019,
        "sender_full_name": "Lokathor",
        "timestamp": 1613781955
    },
    {
        "content": "<p><code>mdbook</code> actually can also have the browser refresh, which is nifty</p>",
        "id": 227052068,
        "sender_full_name": "Lokathor",
        "timestamp": 1613781966
    },
    {
        "content": "<p>teach rustdoc a thing</p>",
        "id": 227052087,
        "sender_full_name": "Lokathor",
        "timestamp": 1613781973
    },
    {
        "content": "<p>Yes, the browser refresh is the meaningful part for me. Staying at the same (rough) location.</p>",
        "id": 227052125,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613782018
    },
    {
        "content": "<p>eh, just tapping F5 usually works :P</p>",
        "id": 227052407,
        "sender_full_name": "Lokathor",
        "timestamp": 1613782234
    },
    {
        "content": "<p>As does typing each letter of <code>cargo doc</code>, but you suggest <code>cargo watch</code> instead...</p>",
        "id": 227054110,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613783746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> you can probably hack it with <code>--html-after-content</code> somehow</p>",
        "id": 227054356,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613783965
    },
    {
        "content": "<p>I think this would be better as some sort of plugin than in rustdoc itself</p>",
        "id": 227054366,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613783985
    },
    {
        "content": "<p>That does seem plausible. For all I know, someone has done it already; I've not searched at all.</p>",
        "id": 227054414,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613784005
    },
    {
        "content": "<p>the suggested <code>cargo watch</code>+ <a href=\"https://github.com/tapio/live-server\">https://github.com/tapio/live-server</a> might work?</p>",
        "id": 227058901,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613788695
    },
    {
        "content": "<p>interesting; I usually just serve it from the filesystem, but a smartererer webserver could also do the trick!</p>",
        "id": 227059341,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613789241
    },
    {
        "content": "<p>It's funny because the cargo watch part I'm :meh: about — I've keyboard commands for generating the docs when I get to a part where I want to see it</p>",
        "id": 227059357,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1613789281
    },
    {
        "content": "<p>as long as the file changes, that should pick it up</p>",
        "id": 227059812,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613789720
    },
    {
        "content": "<p>so you should be able to do your keyboard command and then have live-server pick it up and reload the page</p>",
        "id": 227059826,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613789750
    }
]