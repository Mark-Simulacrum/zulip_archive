[
    {
        "content": "<p>If I prefix a closure with <code>move</code>, it'll move <em>everything</em> it references. Is there any way to make a closure move <em>one</em> thing and continue to handle the rest by reference?</p>",
        "id": 213001248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483461
    },
    {
        "content": "<p>For instance, if I write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">peer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>then rust will complain that <code>peer</code> might outlive that closure. Changing the closure to <code>move</code>, however, will cause it to move <em>other</em> things that it references, which need to be used repeatedly in iterations of the loop.</p>",
        "id": 213001340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483567
    },
    {
        "content": "<p>I'd like to tell the closure to take ownership of <code>peer</code>, without telling it to take ownership of anything <em>else</em>.</p>",
        "id": 213001346,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483591
    },
    {
        "content": "<p><code>let other_things = &amp;other_things;</code> just before the closure usually works for me</p>",
        "id": 213001350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602483595
    },
    {
        "content": "<p>you can make all the references you need ahead of time.</p>",
        "id": 213001354,
        "sender_full_name": "Lokathor",
        "timestamp": 1602483599
    },
    {
        "content": "<p>sniped</p>",
        "id": 213001388,
        "sender_full_name": "Lokathor",
        "timestamp": 1602483602
    },
    {
        "content": "<p>Unfortunately you have to do it for each reference at a time</p>",
        "id": 213001403,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602483622
    },
    {
        "content": "<p>i wonder if a member of T-lang could get annoyed enough by this to get some motion towards an improvement in this area</p>",
        "id": 213001433,
        "sender_full_name": "Lokathor",
        "timestamp": 1602483657
    },
    {
        "content": "<p>Ah. I'd been thinking about how I express the <em>move</em> of one thing explicitly, and it hadn't occurred to me to use <code>move</code> and then <em>un</em>-<code>move</code> all the other things by making them references.</p>",
        "id": 213001461,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/In.20a.20closure.2C.20how.20do.20I.20move.20some.20things.20but.20not.20others.3F/near/213001433\">said</a>:</p>\n<blockquote>\n<p>i wonder if a member of T-lang could get annoyed enough by this to get some motion towards an improvement in this area</p>\n</blockquote>\n<p>Open to suggestion. :)</p>",
        "id": 213001475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483712
    },
    {
        "content": "<p>initial \"obvious\" fix, <code>move(ident, ident..) || { ... }</code> will move <em>just</em> the idents listed</p>",
        "id": 213001530,
        "sender_full_name": "Lokathor",
        "timestamp": 1602483747
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213001539,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483769
    },
    {
        "content": "<p>That sounds pretty reasonable.</p>",
        "id": 213001545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483776
    },
    {
        "content": "<p>I wonder if one of the people who regularly discusses things with the lang team would be willing to propose this? :)</p>",
        "id": 213001566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483798
    },
    {
        "content": "<p>oh no XD</p>",
        "id": 213001581,
        "sender_full_name": "Lokathor",
        "timestamp": 1602483819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/In.20a.20closure.2C.20how.20do.20I.20move.20some.20things.20but.20not.20others.3F/near/213001350\">said</a>:</p>\n<blockquote>\n<p><code>let other_things = &amp;other_things;</code> just before the closure usually works for me</p>\n</blockquote>\n<p>Sure enough, that works perfectly, thank you.</p>",
        "id": 213001584,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> This is definitely one of those cases of \"don't know the pattern yet\".</p>",
        "id": 213001633,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483846
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 213001636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602483849
    },
    {
        "content": "<p>Yeah this could be documented better</p>",
        "id": 213001645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602483862
    },
    {
        "content": "<p>I'm currently 1) using crossbeam::scope in production for the first time, and 2) attempting to use flume in production for the first time.</p>",
        "id": 213001647,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483863
    },
    {
        "content": "<p>This and splitting structs so the closure doesn't capture all of them fit in with my 'discoverability' blog post really well</p>",
        "id": 213001665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602483888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/In.20a.20closure.2C.20how.20do.20I.20move.20some.20things.20but.20not.20others.3F/near/213001665\">said</a>:</p>\n<blockquote>\n<p>This and splitting structs so the closure doesn't capture all of them fit in with my 'discoverability' blog post really well</p>\n</blockquote>\n<p>I'm incredibly excited about RFC 2229 on that front.</p>",
        "id": 213001679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483909
    },
    {
        "content": "<p>Maybe I should make a 'rust tips and tricks' post <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213001687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602483920
    },
    {
        "content": "<p>TWiR is calling you.</p>",
        "id": 213001695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483940
    },
    {
        "content": "<p>I'm looking to have self-contained threads that act as \"server thread factories\": send them a message with server configuration details, they make a new thread listening on a port and send you the port number.</p>",
        "id": 213001736,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483963
    },
    {
        "content": "<p>(And the \"server thread factory\" thread, in addition to handling those messages, caches things shared between the server threads.)</p>",
        "id": 213001760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602483998
    },
    {
        "content": "<p>TWIR has a tendency to ignore prs IME :/</p>",
        "id": 213001765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602484013
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/this-week-in-rust/pull/1434\">https://github.com/rust-lang/this-week-in-rust/pull/1434</a></p>",
        "id": 213001802,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602484069
    },
    {
        "content": "<p>Interesting bit of history: RFC 2229 may help solve the <em>very first</em> borrow checker issue I ever ran into when I was learning Rust.</p>",
        "id": 213002127,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602484430
    },
    {
        "content": "<p>As a test program, I tried to use the git2 crate and a fuse crate to build the obvious \"mount a git tree as a directory\" filesystem.</p>",
        "id": 213002187,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602484466
    },
    {
        "content": "<p>Which worked perfectly, until I tried to put the git2 tree and the fuse connection into the same struct.</p>",
        "id": 213002206,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602484494
    },
    {
        "content": "<p>At which point I ran into lifetime issues trying to write methods, because the methods borrowed all of <code>&amp;self</code>.</p>",
        "id": 213002230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602484521
    },
    {
        "content": "<p>my biggest initial issues with rust were matching and auto-ref / auto-deref related. coming from Haskell at the time, which essentially doesn't have reference types at all similar to how rust has them, i was always lost with what types my numbers were.</p>",
        "id": 213002395,
        "sender_full_name": "Lokathor",
        "timestamp": 1602484736
    },
    {
        "content": "<p>I don't actually remember the first errors I ran into</p>",
        "id": 213002753,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602485239
    },
    {
        "content": "<p>I remember being really confused by <code>if let</code></p>",
        "id": 213002759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602485251
    },
    {
        "content": "<p>And the module system, I didn't realize <code>mod</code> and <code>use</code> did different things</p>",
        "id": 213002773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602485269
    },
    {
        "content": "<p>obligatory plug of Niko's post about this <a href=\"https://smallcultfollowing.com/babysteps/blog/2018/04/24/rust-pattern-precise-closure-capture-clauses/\">https://smallcultfollowing.com/babysteps/blog/2018/04/24/rust-pattern-precise-closure-capture-clauses/</a></p>",
        "id": 213013224,
        "sender_full_name": "lqd",
        "timestamp": 1602493165
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>  for the <code>move(ident)</code> capture idea above -- another reason why the postfix <code>expr.move</code> idea is better than <code>move(expr)</code> for avoiding ambiguity.</p>",
        "id": 213051586,
        "sender_full_name": "cuviper",
        "timestamp": 1602515878
    },
    {
        "content": "<p>Interesting.  Definitely reminding me of C++'s <code>[=foo, &amp;bar]</code>.</p>",
        "id": 213066191,
        "sender_full_name": "scottmcm",
        "timestamp": 1602523982
    },
    {
        "content": "<p>I think there's another way to possibly take this -- to say that the <a href=\"#narrow/stream/213817-t-lang/topic/Spitballing.3A.20a.20.60move(x).60.20expression.3F\"><code>place.move</code> conversation</a> could be a way to address Josh's \"how I express the move of one thing explicitly\" request: rather than <code>move ||</code>ing the whole closure, you could opt-in to place-wise <code>move</code> capture by using <code>.move</code> inside the closure.</p>",
        "id": 213066379,
        "sender_full_name": "scottmcm",
        "timestamp": 1602524116
    },
    {
        "content": "<p>(I haven't thought through the implications of that -- probably can't work for things moved into the closure but then used by-ref inside the closure)</p>",
        "id": 213066455,
        "sender_full_name": "scottmcm",
        "timestamp": 1602524164
    },
    {
        "content": "<p><del>Oh, yeah, Josh's example in this thread needs it in a loop, so <code>listener.move.accept()?;</code> wouldn't be ok.  And something like</del></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">listener</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"k\">move</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">peer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><del>doesn't seem much better than the existing options of local shadows for some bindings.</del></p>\n<p>EDIT: Uh, no, that's all outside the closure.  Unclear then.</p>",
        "id": 213066635,
        "sender_full_name": "scottmcm",
        "timestamp": 1602524305
    },
    {
        "content": "<p><code>.move</code> could force a closure to be just <code>FnOnce</code> though, in situations where the captures would otherwise allow reuse</p>",
        "id": 213067081,
        "sender_full_name": "cuviper",
        "timestamp": 1602524597
    },
    {
        "content": "<p>I just want to point out that <code>.move</code> has gained a lot of meanings in this thread. I would hate to teach this</p>",
        "id": 213067195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602524664
    },
    {
        "content": "<p>additionally, the use of <code>.move</code> to move a variable from inside a closure seems like a really non-local mechanism</p>",
        "id": 213067292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602524732
    },
    {
        "content": "<p>(er, I actually meant <a href=\"#narrow/stream/213817-t-lang/topic/Spitballing.3A.20a.20.60move(x).60.20expression.3F\">this thread</a>, which is apparently continued here)</p>",
        "id": 213067809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602525015
    },
    {
        "content": "<p>They seem consistent to me, even if subtle</p>",
        "id": 213068016,
        "sender_full_name": "cuviper",
        "timestamp": 1602525142
    },
    {
        "content": "<p>'consistent' and 'lots of meanings' are not mutually exclusive</p>",
        "id": 213068105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602525226
    },
    {
        "content": "<p>Yeah, what closures do with idents they mention is already extremely non-local.  You can't look at <code>|| x.foo()</code> and know whether it's <code>Fn</code>, <code>FnMut</code>, or <code>FnOnce</code>.  If anything, I think <code>|| x.move.foo()</code> would be far clearer than the existing cases, since moving like that makes it locally obvious that it <em>has</em> to be <code>FnOnce</code>.</p>",
        "id": 213068369,
        "sender_full_name": "scottmcm",
        "timestamp": 1602525375
    },
    {
        "content": "<p>if an identifier is used by value in the closure, value referenced by it will get moved even without the <code>move</code> keyword.</p>",
        "id": 213096246,
        "sender_full_name": "nagisa",
        "timestamp": 1602545540
    },
    {
        "content": "<p>so <code>let thing = identity(thing);</code> can be a good way to force a move of the specific <code>thing</code>.</p>",
        "id": 213096273,
        "sender_full_name": "nagisa",
        "timestamp": 1602545583
    },
    {
        "content": "<p>Yeah, as discussed in the lang thread, most of the things this could do work with <code>{x}</code> instead of <code>x.move</code>.</p>",
        "id": 213097936,
        "sender_full_name": "scottmcm",
        "timestamp": 1602547332
    },
    {
        "content": "<p>But <code>let x = x.move;</code> and identity / <code>{}</code> variants lead to an FnOnce closure (or if the thing is <code>Copy</code>, it won't suffice to make it capture it by move). Sometimes you want to <code>move</code> for lifetime reasons,.while still wanting an <code>Fn{,Mut}</code>.<br>\nAlthough for the non-<code>Copy</code> case, maybe wrapping that in an <code>if false</code> can do the trick <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213121171,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602575492
    }
]