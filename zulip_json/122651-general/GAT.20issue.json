[
    {
        "content": "<p>If possible, could you guys please tell me if it is currently feasible to build <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=bc147b90d3dabf64376479895b16f735\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=bc147b90d3dabf64376479895b16f735</a>? I tried placing <code>'bar</code> in the trait declaration but the compiler ends up telling that <code>BAR</code> is unconstrained <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 276801222,
        "sender_full_name": "Caio",
        "timestamp": 1648406034
    },
    {
        "content": "<p>By saying that <code>A : for&lt;'bar&gt; Foo&lt;Bar&lt;'bar&gt; = BAR&gt;</code>, since <code>BAR</code> is a fixed type, you are requiring that the associated type not depend on <code>'bar</code>. But for <code>i32</code>, this is not the case: it does depend on <code>'bar</code>, since it's the <code>&amp;'bar ()</code>type.</p>\n<p>You wanted to, instead, have used:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"cm\">/*, BAR */</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// for&lt;'bar&gt; Foo&lt;Bar&lt;'bar&gt; = BAR&gt;,</span>\n<span class=\"w\">    </span><span class=\"n\">B</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">bar</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">bar</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=efebd789c9cb76db9286e841b8e8ece9\">which does work: Playground</a></li>\n</ul>",
        "id": 276802290,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648407405
    },
    {
        "content": "<p>Oh... The second parameter refers to the first</p>",
        "id": 276803535,
        "sender_full_name": "Caio",
        "timestamp": 1648409177
    },
    {
        "content": "<p>Very clever, thanks <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> !</p>",
        "id": 276803538,
        "sender_full_name": "Caio",
        "timestamp": 1648409187
    }
]