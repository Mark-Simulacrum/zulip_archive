[
    {
        "content": "<p>#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]<br>\npub struct SourceScopeData {<br>\n    pub span: Span,<br>\n    pub parent_scope: Option&lt;SourceScope&gt;,</p>\n<div class=\"codehilite\"><pre><span></span><code>/// Crate-local information for this source scope, that can&#39;t (and\n/// needn&#39;t) be tracked across crates.\npub local_data: ClearCrossCrate&lt;SourceScopeLocalData&gt;,\n</code></pre></div>\n\n<p>}</p>\n<p>Can I ask why SourceScopeData only cares about local_data? Does it mean we can not tell if a MIR statement (from other crate) is unsafe or not?</p>",
        "id": 227553312,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614147384
    },
    {
        "content": "<blockquote>\n<p>Does it mean we can not tell if a MIR statement (from other crate) is unsafe or not?</p>\n</blockquote>\n<p>Correct. <code>local_data</code> needs to be cleared cross-crate as it contains <code>HirId</code>'s, which are only valid within the current crate as HIR is not serialized into the metadata. Not clearing it would cause an ICE.</p>",
        "id": 227568845,
        "sender_full_name": "bjorn3",
        "timestamp": 1614158014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382085\">@Shihao Xia</span></p>",
        "id": 227569154,
        "sender_full_name": "bjorn3",
        "timestamp": 1614158164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Thank you for the confirmation.</p>",
        "id": 227698216,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614212082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Could you enlighten me, in the MIR to LLVM IR step, if I want to obtain a MIR statement's source scope data(local data's safety) from external crate, how can I do that ?</p>",
        "id": 227698436,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614212222
    },
    {
        "content": "<p>You can't. The crate metadata simply doesn't contain any knowledge about source scope safety.</p>",
        "id": 227726449,
        "sender_full_name": "bjorn3",
        "timestamp": 1614236626
    },
    {
        "content": "<p>Why do you need it?</p>",
        "id": 227726456,
        "sender_full_name": "bjorn3",
        "timestamp": 1614236638
    },
    {
        "content": "<p>I want to do some analysis during MIR, however knowing MIR statement is from safe block or not is one of requirements..</p>",
        "id": 227777587,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614264276
    },
    {
        "content": "<p>If you're working on a tool that operates outside of rustc itself, I imagine that your best shot (or at least most straightforward approach) would be to try to correlate between the span locations associated with the MIR statement and AST/HIR produced out-of-band…?</p>",
        "id": 227778157,
        "sender_full_name": "nagisa",
        "timestamp": 1614264483
    },
    {
        "content": "<p>that is workable. My thought is I can output source scope data per rlib same like .rmeta</p>",
        "id": 227781439,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614265721
    },
    {
        "content": "<p>When codegen a specific MIR statement, looking for this MIR statement belongs to which crate? And then find if MIR statement from a safe block or not?</p>",
        "id": 227781604,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614265788
    },
    {
        "content": "<p>Well, codegen doesn't particularly care about safety of statements, but conceptually if it needed to, I would approach this in a manner like this. I would grab HIR and check against that… That said, you may be interested in <code>rustc_mir/src/transform/check_unsafety.rs</code></p>",
        "id": 227786570,
        "sender_full_name": "nagisa",
        "timestamp": 1614267502
    },
    {
        "content": "<p>Yes that would work...but still, the problem is when compiling the a crate(local crate), extern crate's safety information is still inaccessible since .rmeta doesn't have that, please correct me if I am wrong</p>",
        "id": 227793637,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614270000
    },
    {
        "content": "<p>Yeah, that's correct, you would have to collect the information yourself while the crate graph is built/analyzed.</p>",
        "id": 227793836,
        "sender_full_name": "nagisa",
        "timestamp": 1614270067
    },
    {
        "content": "<p>Could you enlighten me how rustc load MIR or HIR from .rmeta?</p>",
        "id": 227793887,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614270083
    },
    {
        "content": "<p>[INFO  rustc_metadata::locator] lib candidate: /home/xsh/code/rust-compiler/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-df6bb7d1baae24d3.rlib<br>\n[INFO  rustc_metadata::locator] lib candidate: /home/xsh/code/rust-compiler/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-df6bb7d1baae24d3.so<br>\n[INFO  rustc_metadata::locator] rlib reading metadata from: /home/xsh/code/rust-compiler/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-df6bb7d1baae24d3.rlib<br>\n[INFO  rustc_metadata::locator] reading \"libstd-df6bb7d1baae24d3.rlib\" =&gt; 54.8µs<br>\n[INFO  rustc_metadata::creader] register crate <code>std</code> (private_dep = false)</p>",
        "id": 227794064,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614270137
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_metadata\">https://github.com/rust-lang/rust/tree/master/compiler/rustc_metadata</a> is the relevant crate.</p>",
        "id": 227794101,
        "sender_full_name": "nagisa",
        "timestamp": 1614270143
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_metadata/src/rmeta/decoder.rs#L1147\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_metadata/src/rmeta/decoder.rs#L1147</a> seems like a relevant entrypoint, but I'm guessing here.</p>",
        "id": 227794424,
        "sender_full_name": "nagisa",
        "timestamp": 1614270205
    },
    {
        "content": "<p>Thanks I will take a look</p>",
        "id": 227794500,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614270220
    },
    {
        "content": "<p>Seems like this is it! <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Thanks a lot, huge help</p>",
        "id": 227794997,
        "sender_full_name": "Shihao Xia",
        "timestamp": 1614270384
    }
]