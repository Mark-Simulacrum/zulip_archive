[
    {
        "content": "<p>I've been trying to optimize some code that has proven to be sensitive to aliasing pessimizations. I'm finding that the compiler is more pessimistic than I would have thought (i.e. thinks things can alias which cannot). But I'm new to this, so I'm not sure how much of that is faulty reasoning on my part.</p>\n<p>I was trying to see just how pessimistic it was, and wrote some test code which I thought the compiler would not possibly think contained aliasing.</p>\n<div class=\"codehilite\"><pre><span></span><code>// Context omitted for brevity.\n\nfn bar(s: &amp;mut S) {\n    let y = s.y;\n\n    if y &lt; 10 {\n        s.x = foo();\n    }\n\n    if y &lt; 5 {\n        s.x = foo();\n    }\n}\n\nfn baz(s: &amp;mut S) {\n    if s.y &lt; 10 {\n        s.x = foo();\n    }\n\n    if s.y &lt; 5 {\n        s.x = foo();\n    }\n}\n</code></pre></div>\n\n\n<p>The assembly generated for <code>bar</code> and <code>baz</code> at opt-level=3:</p>\n<div class=\"codehilite\"><pre><span></span><code>0000000000007440 &lt;main::bar&gt;:\n    7440:       pushq  %r14\n    7442:       pushq  %rbx\n    7443:       pushq  %rax\n    7444:       movb   0x1(%rdi),%bl            // bl &lt;- s.y\n    7447:       cmpb   $0x9,%bl                 // cmp with bl\n    744a:   /-- ja     7464 &lt;main::bar+0x24&gt;\n    744c:   |   movq   %rdi,%r14\n    744f:   |   callq  73b0 &lt;main::foo&gt;\n    7454:   |   movb   %al,(%r14)\n    7457:   |   cmpb   $0x4,%bl                 // cmp with bl\n    745a:   +-- ja     7464 &lt;main::bar+0x24&gt;\n    745c:   |   callq  73b0 &lt;main::foo&gt;\n    7461:   |   movb   %al,(%r14)\n    7464:   \\-&gt; addq   $0x8,%rsp\n    7468:       popq   %rbx\n    7469:       popq   %r14\n    746b:       retq\n    746c:       nopl   0x0(%rax)\n\n0000000000007470 &lt;main::baz&gt;:\n    7470:       pushq  %rbx\n    7471:       cmpb   $0x9,0x1(%rdi)           // cmp with s.y in memory...\n    7475:   /-- ja     748e &lt;main::baz+0x1e&gt;\n    7477:   |   movq   %rdi,%rbx\n    747a:   |   callq  73b0 &lt;main::foo&gt;\n    747f:   |   movb   %al,(%rbx)\n    7481:   |   cmpb   $0x4,0x1(%rbx)           //  cmp with s.y in memory...\n    7485:   +-- ja     748e &lt;main::baz+0x1e&gt;\n    7487:   |   callq  73b0 &lt;main::foo&gt;\n    748c:   |   movb   %al,(%rbx)\n    748e:   \\-&gt; popq   %rbx\n    748f:       retq\n</code></pre></div>\n\n\n<p>The assembly differs--<code>baz</code> does <code>cmp</code> against a memory operand twice instead of keeping it in a register as in <code>bar</code>. The only reason I can imagine for this is that the compiler thinks that the write to <code>s.x</code> could have changed <code>s.y</code>. But that can't be, right? I mean, it knows that the fields are at different locations and knows they don't overlap--it calculates the pointers to access them.</p>\n<p>Is there a massive pessimization going on or am I missing something?</p>",
        "id": 209905173,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599954393
    },
    {
        "content": "<p>Might be <a href=\"https://github.com/rust-lang/rust/issues/54878\">https://github.com/rust-lang/rust/issues/54878</a></p>",
        "id": 209905537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599955030
    },
    {
        "content": "<p>If you add <code>-Z mutable-noalias=yes</code> does it help?</p>",
        "id": 209905611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599955154
    },
    {
        "content": "<p>It does. But oof... I'm surprised at how conservative it is without that option.</p>",
        "id": 209905854,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599955497
    },
    {
        "content": "<p>Kind of a bummer. Does rustc build without that?</p>",
        "id": 209905863,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599955521
    },
    {
        "content": "<p>I mean, is it configured to build with that flag or without? I assume without?</p>",
        "id": 209905913,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599955574
    },
    {
        "content": "<p>I'm seeing the ambiguity of that question now. I meant, \"is the compiler compiled using that option\".  Looks like not, from what I can tell.</p>",
        "id": 209906040,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599955815
    },
    {
        "content": "<p>Do you mean, can you patch rustc so that option is on by default? Sure, but I wouldn't recommend it - it was turned on to fix unsoundness</p>",
        "id": 209906075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599955906
    },
    {
        "content": "<p>I meant does <code>x.py</code> supply that option to rustc to build the next stage. But I realize it was a silly question, on account of the unsoundness.</p>",
        "id": 209906193,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599956087
    },
    {
        "content": "<p>FWIW, it looks like not all interleaved field reads/writes through <code>&amp;mut</code> cause this issue to occur. Not sure what's going on in this example.</p>",
        "id": 209911867,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1599968346
    }
]