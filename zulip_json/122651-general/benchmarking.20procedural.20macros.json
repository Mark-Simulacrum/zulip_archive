[
    {
        "content": "<p>Over in SNAFU, we were blindly micro-optimizing our procedural macro for fun (I think this is the Rust curse). If we really wanted to optimize, I'd want to have some kind of performance test, but I couldn't think how I might do such a thing. Is it possible somehow?</p>",
        "id": 172676702,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565183933
    },
    {
        "content": "<p>We don't really provide an easy way to do it, but presumably you could run the compiler in total (cargo check or such) and measure differences in that. It's not great since there will be very high variance but ... well, it's a start</p>",
        "id": 172678697,
        "sender_full_name": "simulacrum",
        "timestamp": 1565185318
    },
    {
        "content": "<p>Maybe can get away with something like -Zexpand-only (I forget the flag) which'll hopefully reduce some of the variance</p>",
        "id": 172678769,
        "sender_full_name": "simulacrum",
        "timestamp": 1565185346
    },
    {
        "content": "<p>I guess at some level, it's \"just\" calling <code>fn my_derive(input: TokenStream) -&gt; TokenStream</code>, so I \"just\" need to build a <code>TokenStream</code>.</p>",
        "id": 172679447,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565185817
    },
    {
        "content": "<p>Right, which is technically possible (rustc has no direct knowledge, in theory, and the interface is ABI stable I think)</p>",
        "id": 172680474,
        "sender_full_name": "simulacrum",
        "timestamp": 1565186564
    },
    {
        "content": "<p>C ABI IIRC</p>",
        "id": 172680513,
        "sender_full_name": "simulacrum",
        "timestamp": 1565186585
    },
    {
        "content": "<p>I mean it more basic than that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span>::<span class=\"n\">TokenStream</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">snafu_derive</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;My macro goes here&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#&quot;struct Foo;&quot;#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">snafu_derive</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172682687,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565188211
    },
    {
        "content": "<p>Unfortunately:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;procedural macro API is used outside of a procedural macro&#39;, src/libproc_macro/bridge/client.rs:315:17\n</pre></div>",
        "id": 172682719,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565188231
    },
    {
        "content": "<p>Right, yeah, you can't create tokenstreams outside of a given proc macro invocation (or indeed pass across proc macro boundaries)</p>",
        "id": 172682781,
        "sender_full_name": "simulacrum",
        "timestamp": 1565188280
    },
    {
        "content": "<p>You could presumably expand recursively and time the innards of the proc_macro function, storing that off into some global though</p>",
        "id": 172682801,
        "sender_full_name": "simulacrum",
        "timestamp": 1565188302
    },
    {
        "content": "<blockquote>\n<p>you can't create tokenstreams outside of a given proc macro invocation</p>\n</blockquote>\n<p>Is there a fundamental reason for this, or is it just \"we haven't thought through this yet\"?</p>",
        "id": 172682899,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565188365
    },
    {
        "content": "<p>Well, it's tied to compiler internals</p>",
        "id": 172683116,
        "sender_full_name": "simulacrum",
        "timestamp": 1565188528
    },
    {
        "content": "<p>And we want to expand in arbitrary order and such</p>",
        "id": 172683126,
        "sender_full_name": "simulacrum",
        "timestamp": 1565188534
    },
    {
        "content": "<p>we basically want the compiler to be in control and not a proc macro crate starting to call the compiler (unexpectedly for the compiler)</p>",
        "id": 172683141,
        "sender_full_name": "simulacrum",
        "timestamp": 1565188553
    },
    {
        "content": "<p>proc macro crates also don't _link_ to the compiler AFAIK, they just know about the C structs that are passed into them</p>",
        "id": 172683190,
        "sender_full_name": "simulacrum",
        "timestamp": 1565188577
    },
    {
        "content": "<p>so they can't actually make a tokenstream if that makes sense (only the compiler knows how)</p>",
        "id": 172683243,
        "sender_full_name": "simulacrum",
        "timestamp": 1565188625
    },
    {
        "content": "<p>I guess I could swap to a <code>proc_macro2::TokenStream</code> immediately, and test against that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span>::<span class=\"n\">TokenStream</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">snafu_derive</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">snafu_derive_inner</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()).</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">snafu_derive_inner</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">proc_macro2</span>::<span class=\"n\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">proc_macro2</span>::<span class=\"n\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;My macro goes here&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#&quot;struct Foo;&quot;#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">snafu_derive_inner</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172683375,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565188732
    },
    {
        "content": "<p>Which might have its own bit of overhead in the conversion, but I think I'm already doing this anyway...</p>",
        "id": 172683481,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565188803
    },
    {
        "content": "<p>well, the main function won't work</p>",
        "id": 172683903,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189138
    },
    {
        "content": "<p>you _cannot_ create a tokenstream without the compiler (or another implementor of proc_macro bridge, of which none exist)</p>",
        "id": 172683923,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189161
    },
    {
        "content": "<p>proc_macro2::Tokenstream is just a (somewhat thin) wrapper around proc_macro::Tokenstream</p>",
        "id": 172683985,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189181
    },
    {
        "content": "<blockquote>\n<p>well, the main function won't work</p>\n</blockquote>\n<p>Can you expand on that? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span>::<span class=\"n\">TokenStream</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">snafu_derive</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">snafu_derive_inner</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()).</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">snafu_derive_inner</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">proc_macro2</span>::<span class=\"n\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">proc_macro2</span>::<span class=\"n\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">syn</span>::<span class=\"n\">parse2</span>::<span class=\"o\">&lt;</span><span class=\"n\">syn</span>::<span class=\"n\">ItemStruct</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to parse&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Parsed it: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#&quot;struct Foo;&quot;#</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">snafu_derive_inner</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Parsed it: ItemStruct { attrs: [], vis: Inherited, struct_token: Struct, ident: Ident(Foo), generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, fields: Unit, semi_token: Some(Semi) }\n</pre></div>\n\n\n<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9f21c79dbd4d6779ba03dc4fcc1b9122\" target=\"_blank\" title=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9f21c79dbd4d6779ba03dc4fcc1b9122\">Playground</a></p>",
        "id": 172684253,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565189393
    },
    {
        "content": "<p>Hm, that's surprising to me</p>",
        "id": 172684343,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189432
    },
    {
        "content": "<p>I would expect that to return the 'could not parse' error</p>",
        "id": 172684354,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189448
    },
    {
        "content": "<p>er, could not create w/o proc macro expansion</p>",
        "id": 172684372,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189459
    },
    {
        "content": "<p>Maybe I misunderstood how proc_macro2 works though</p>",
        "id": 172684399,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189475
    },
    {
        "content": "<p>I don't believe it's a thin wrapper. I think it basically reparses everything</p>",
        "id": 172684405,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565189478
    },
    {
        "content": "<p>Oh interesting</p>",
        "id": 172684429,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189499
    },
    {
        "content": "<p>I did not know that was the case</p>",
        "id": 172684441,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189505
    },
    {
        "content": "<p>I haven't looked at the code, so I'm just guessing, mostly.</p>",
        "id": 172684507,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1565189527
    },
    {
        "content": "<p>Yeah, that's what it looks like based on the API docs</p>",
        "id": 172684530,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189547
    },
    {
        "content": "<p>It makes sense, I guess</p>",
        "id": 172684536,
        "sender_full_name": "simulacrum",
        "timestamp": 1565189552
    }
]