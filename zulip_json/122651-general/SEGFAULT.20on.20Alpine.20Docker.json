[
    {
        "content": "<p>I have a strange issue where I could use some help. I have a rust CLI tool that is SEGFAULTING when running in an Alpine Docker image. Running it as part of a Ubunut Docker Image seem to be fine. I've compiled it with the <code>rust:alpine</code> base image and then use <code>alpine:latest</code> as runtime image. Any idea what the cause could be. I've tried running valgrand against the release binary and it shows:</p>\n<div class=\"codehilite\"><pre><span></span><code>==29== Jump to the invalid address stated on the next line\n==29==    at 0x0: ???\n==29==    by 0x2C52CA: &lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (in /usr/local/bin/rust-release)\n==29==    by 0x2C2A92: std::sys_common::backtrace::__rust_begin_short_backtrace (in /usr/local/bin/rust-release)\n==29==    by 0x2C198B: core::ops::function::FnOnce::call_once{{vtable-shim}} (in /usr/local/bin/rust-release)\n==29==    by 0x303CC9: call_once&lt;(),FnOnce&lt;()&gt;&gt; (boxed.rs:1042)\n==29==    by 0x303CC9: call_once&lt;(),alloc::boxed::Box&lt;FnOnce&lt;()&gt;&gt;&gt; (boxed.rs:1042)\n==29==    by 0x303CC9: std::sys::unix::thread::Thread::new::thread_start (thread.rs:87)\n==29==    by 0x34250D: start (in /usr/local/bin/rust-release)\n==29==  Address 0x0 is not stack&#39;d, malloc&#39;d or (recently) free&#39;d\n</code></pre></div>",
        "id": 220828944,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608758923
    },
    {
        "content": "<p>it would help to compile with debug symbols, that backtrace isn't super useful</p>",
        "id": 220828986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608758975
    },
    {
        "content": "<p>And that stack... is in a future... without showing any frames for the corresponding executor. Odd.</p>",
        "id": 220829521,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608759413
    },
    {
        "content": "<p>yeah, I've found the backtraces available without debug info are really awful</p>",
        "id": 220829569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608759445
    },
    {
        "content": "<p>the compiler has the same issue, it will just skip 10 stack frames here and there lol</p>",
        "id": 220829585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608759461
    },
    {
        "content": "<p>I think it has something to do with inlining</p>",
        "id": 220829589,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608759466
    },
    {
        "content": "<p>Like I said the strange thing is the same code runs fine on MacOS. And when I compile a Linux binary on Debian jessie and running inside a Ubuntu image. But let me try creating a debug binary on alpine and run that</p>",
        "id": 220829810,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608759629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/SEGFAULT.20on.20Alpine.20Docker/near/220829589\">said</a>:</p>\n<blockquote>\n<p>I think it has something to do with inlining</p>\n</blockquote>\n<p>most likely. without debuginfo, inlined functions don't show up at all.</p>",
        "id": 220829843,
        "sender_full_name": "bjorn3",
        "timestamp": 1608759664
    },
    {
        "content": "<p>Ah ok now I get this with valgrind</p>\n<div class=\"codehilite\"><pre><span></span><code>==12== 2 errors in context 1 of 1:\n==12== Jump to the invalid address stated on the next line\n==12==    at 0x0: ???\n==12==    by 0x44AFF9: openssl::ssl::SslMethod::tls (mod.rs:314)\n==12==    by 0x43FF55: native_tls::imp::TlsConnector::new (openssl.rs:257)\n==12==    by 0x4410D7: native_tls::TlsConnectorBuilder::build (lib.rs:423)\n==12==    by 0x2A0237: reqwest::connect::Connector::new_default_tls (connect.rs:167)\n==12==    by 0x2992BC: reqwest::async_impl::client::ClientBuilder::build (client.rs:226)\n==12==    by 0x2DFBB4: reqwest::blocking::client::ClientHandle::new::{{closure}}::{{closure}} (client.rs:778)\n==12==    by 0x2BE329: &lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (mod.rs:80)\n==12==    by 0x3B4A94: tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::{{closure}}::{{closure}} (basic_scheduler.rs:131)\n==12==    by 0x387EEA: tokio::coop::with_budget::{{closure}} (coop.rs:127)\n==12==    by 0x21CA04: std::thread::local::LocalKey&lt;T&gt;::try_with (local.rs:272)\n==12==    by 0x21C5AD: std::thread::local::LocalKey&lt;T&gt;::with (local.rs:248)\n==12==  Address 0x0 is not stack&#39;d, malloc&#39;d or (recently) free&#39;d\n</code></pre></div>",
        "id": 220829932,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608759728
    },
    {
        "content": "<p>weird that all the file paths have been stripped</p>",
        "id": 220829963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608759780
    },
    {
        "content": "<p>hmm do you have the openssl C library installed on alpine?</p>",
        "id": 220829976,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608759811
    },
    {
        "content": "<p>Should be. I run <code> apk --no-cache add openssl</code> just to be sure but the segfault is the same</p>",
        "id": 220830080,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608759887
    },
    {
        "content": "<p>And wouldn't it throw me an error when starting the application in case openssl would be missing?</p>",
        "id": 220830112,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608759906
    },
    {
        "content": "<p>well I don't trust anything with dynamic linking to give useful errors :P</p>",
        "id": 220830144,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608759930
    },
    {
        "content": "<p>how did you build this binary? was it cross compiled?</p>",
        "id": 220830159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608759948
    },
    {
        "content": "<p>This is the Dockerfile that builds and runs it:</p>\n<div class=\"codehilite\"><pre><span></span><code>FROM rust:alpine as builder\n\nRUN apk add --no-cache \\\n    openssl-dev \\\n    libc-dev\n\nENV USER=root\nRUN cargo new --bin rust-release\nWORKDIR ./rust-release\nCOPY Cargo.toml Cargo.lock ./\n\nRUN cargo build --release\n\nRUN rm -Rf ./target/release/deps/rust_release*\nCOPY ./src/ ./src/\nRUN cargo build --release\nRUN cargo build\n\nFROM alpine:latest\nCOPY --from=builder /rust-release/target/debug/rust-release /usr/local/bin\nCMD [&quot;rust-release&quot;, &quot;-h&quot;]\n</code></pre></div>",
        "id": 220830214,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608759968
    },
    {
        "content": "<p>you have openssl on the builder but not the final image</p>",
        "id": 220830263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760023
    },
    {
        "content": "<p>openssl is dynamically linked, you need it in the final image as well</p>",
        "id": 220830271,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760033
    },
    {
        "content": "<p>(I think? not sure how openssl-sys does it)</p>",
        "id": 220830279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760043
    },
    {
        "content": "<p>So in theory in both cases it should use an alpine based OS. I did install it manually<br>\nand rerun the command.</p>",
        "id": 220830290,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608760058
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 220830306,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760082
    },
    {
        "content": "<p>not sure then, I'd ask the openssl maintainers</p>",
        "id": 220830349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760094
    },
    {
        "content": "<p>I also checked rust:alpine should be based on alpine <code>3.12</code> and alpine latest is <code>3.12</code> so that should be fine as well.</p>",
        "id": 220830418,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608760192
    },
    {
        "content": "<p>but I suspect it's related to having two different images</p>",
        "id": 220830422,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760197
    },
    {
        "content": "<p>does it work with only a single image?</p>",
        "id": 220830442,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760202
    },
    {
        "content": "<p>hmm I can try it (even though its not considered best practice)</p>",
        "id": 220830485,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608760221
    },
    {
        "content": "<p>tried it and no. Same segfault.</p>",
        "id": 220830536,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608760284
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 220830553,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760303
    },
    {
        "content": "<p>that's really strange then</p>",
        "id": 220830554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760306
    },
    {
        "content": "<p>but it's definitely related to FFI somehow, this is the line going wrong: <a href=\"https://docs.rs/openssl/0.10.31/src/openssl/ssl/mod.rs.html#313-315\">https://docs.rs/openssl/0.10.31/src/openssl/ssl/mod.rs.html#313-315</a></p>",
        "id": 220830636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760371
    },
    {
        "content": "<p>I am gonna try using the debian image instead. Lets see if its alpine related or not (even though given that its officially provided I would assume it should work)</p>",
        "id": 220830786,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608760495
    },
    {
        "content": "<p>if it works on ubuntu I would expect it to work on debian</p>",
        "id": 220830857,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608760560
    },
    {
        "content": "<p>Alpine is weird like that</p>",
        "id": 220831212,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608760845
    },
    {
        "content": "<p>MUSL doesn't support loading libraries dynamically unless you statically link to MUSL</p>",
        "id": 220831272,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608760903
    },
    {
        "content": "<p>But Rust links the C library by default, so you won't be able to call dlopen</p>",
        "id": 220831343,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608760943
    },
    {
        "content": "<p>Yeah debian is working after installing openssl. But it also shows an error initially: ```rust-release: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory</p>\n<div class=\"codehilite\"><pre><span></span><code>Before I installed openssl\n</code></pre></div>",
        "id": 220831415,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608761033
    },
    {
        "content": "<p>I think there's a flag to change that, but I would avoid Alpine for anything with C FFI or where performance matters.</p>",
        "id": 220831421,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761038
    },
    {
        "content": "<p>You probably need libssl-dev, that's normal</p>",
        "id": 220831472,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761068
    },
    {
        "content": "<p>Interesting. So you recommend not to use alpine for rust as a runtime?</p>",
        "id": 220831495,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608761091
    },
    {
        "content": "<p>For anything, not only Rust</p>",
        "id": 220831521,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761115
    },
    {
        "content": "<p>Oh, look: <a href=\"https://users.rust-lang.org/t/sigsegv-with-program-linked-against-openssl-in-an-alpine-container/52172/3\">https://users.rust-lang.org/t/sigsegv-with-program-linked-against-openssl-in-an-alpine-container/52172/3</a></p>",
        "id": 220831527,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761127
    },
    {
        "content": "<p>E.g. <a href=\"https://pythonspeed.com/articles/alpine-docker-python/\">https://pythonspeed.com/articles/alpine-docker-python/</a></p>",
        "id": 220831602,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761168
    },
    {
        "content": "<p>Interesting. I must have missed that when I was looking around.</p>",
        "id": 220831629,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608761203
    },
    {
        "content": "<p>Or <a href=\"https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image\">https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image</a></p>",
        "id": 220831656,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761239
    },
    {
        "content": "<p>I think more recent MUSL versions have a faster memory allocator, but I'm not sure it's worth the tradeoffs</p>",
        "id": 220831753,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761326
    },
    {
        "content": "<p>(unless it's something non-perf sensitive which doesn't call into C libraries, that's probably fine)</p>",
        "id": 220831818,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608761395
    },
    {
        "content": "<p>Hmm makes sense. Guess I keep with with debian-slim for now. Not that this tool is in any way performance critical in itself.</p>",
        "id": 220832417,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608761840
    },
    {
        "content": "<p>Alpine is a dynamically linked distro using MUSL, while Rust uses MUSL to fully statically link by default. Tying to mix those two things (by using a dynamically linked libssl-dev) causes things to blow up.</p>",
        "id": 220832584,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1608762031
    },
    {
        "content": "<p>If you want a fully static binary you shouldn't use the distro-provided libssl-dev, and probably shouldn't use the Alpine distro at all.</p>",
        "id": 220832602,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1608762077
    },
    {
        "content": "<p>if you are okay linking to musl dynamically then switch off the crt-static target feature iirc</p>",
        "id": 220832696,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1608762178
    },
    {
        "content": "<p>Interesting. I wonder if this shouldn't be the default mode when using the official rust alpine image for building a binary? Like my expectation as a new user would be if I use rust-alpine and then run <code>cargo build --release</code> that the binary can be just executed inside the build container as well as any other alpine container.</p>",
        "id": 220832900,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608762380
    },
    {
        "content": "<p>It runs if it's pure Rust. If the app callls an unimplemented dlopen() or loads conflicting versions of a C library, that's not something the compiler can control</p>",
        "id": 220833009,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608762517
    },
    {
        "content": "<p>I would argue that openssl / networking is a very common task. And its so common that it should ether work out of the box by the base image or it should be documented to keep an eye out for issues like this.</p>",
        "id": 220833164,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608762704
    },
    {
        "content": "<p>If you make it work, <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span>  might acccept a documentation  PR</p>",
        "id": 220833308,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608762843
    },
    {
        "content": "<p>I would be worried that changing that default in the image would break the workflows of people that are using the alpine image to produce a fully static binary</p>",
        "id": 220833327,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1608762883
    },
    {
        "content": "<p>The openssl crate already has setup instructions for various platforms in the docs</p>",
        "id": 220833338,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608762916
    },
    {
        "content": "<p>Hmm I'll look into it. I guess I never seen the openssl docs as I am only interacting with <code>reqwest</code> and to my knowledge they don't mention anything about openssl/alpine in there docs. But thanks for all the help here.</p>",
        "id": 220834630,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1608764309
    }
]