[
    {
        "content": "<p>I looked through <code>config.toml.example</code> and <code>Cargo.toml</code> to try to find where I can configure LTO for a rustc build, but couldn't find anything besides the LLVM LTO setting.</p>\n<p>So two questions:</p>\n<ol>\n<li>How can I compile rustc with LTO (thin or fat)?</li>\n<li>Is compiling rustc with LTO (thin or fat) even advisable? Are the crates structured in such a way that LTO likely wouldn't provide that much benefit?</li>\n</ol>",
        "id": 276419739,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648081112
    },
    {
        "content": "<p>not sure the answer to either question, but I see this comment in <a href=\"http://compile.rs\">compile.rs</a> which makes me think it's possible:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// By default, rustc uses `-Cembed-bitcode=yes`, and Cargo overrides that</span>\n<span class=\"w\">    </span><span class=\"c1\">// with `-Cembed-bitcode=no` for non-LTO builds. However, libstd must be</span>\n<span class=\"w\">    </span><span class=\"c1\">// built with bitcode so that the produced rlibs can be used for both LTO</span>\n<span class=\"w\">    </span><span class=\"c1\">// builds (which use bitcode) and non-LTO builds (which use object code).</span>\n<span class=\"w\">    </span><span class=\"c1\">// So we override the override here!</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// But we don't bother for the stage 0 compiler because it's never used</span>\n<span class=\"w\">    </span><span class=\"c1\">// with LTO.</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">stage</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cargo</span><span class=\"p\">.</span><span class=\"n\">rustflag</span><span class=\"p\">(</span><span class=\"s\">\"-Cembed-bitcode=yes\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276420587,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648081972
    },
    {
        "content": "<p>I am curious as to why you want to do this, as the rustc that is shipped via rustup is already compiled with extensive tuning re: LTO and PGO.</p>",
        "id": 276420889,
        "sender_full_name": "Jubilee",
        "timestamp": 1648082358
    },
    {
        "content": "<p>I'm trying to think of ways to squeeze every last bit of performance out of rustc.</p>\n<blockquote>\n<p>rustc is already compiled with extensive tuning re: LTO and PGO</p>\n</blockquote>\n<p>Can you point me to where I can learn more about this? I know a tiny bit about the PGO that is done in CI, but nothing about \"tuning\" for LTO</p>",
        "id": 276420989,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648082424
    },
    {
        "content": "<p>I am referring to that activity itself as tuning.</p>",
        "id": 276421018,
        "sender_full_name": "Jubilee",
        "timestamp": 1648082483
    },
    {
        "content": "<p>which activity exactly? i don't follow</p>",
        "id": 276421075,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648082523
    },
    {
        "content": "<blockquote>\n<p>I'm trying to think of ways to squeeze every last bit of performance out of rustc.</p>\n</blockquote>",
        "id": 276421119,
        "sender_full_name": "Jubilee",
        "timestamp": 1648082588
    },
    {
        "content": "<p>We compile rustc from source at work so I'd like to at least achieve the same performance as the rustc from rustup</p>",
        "id": 276421430,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648082917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276420989\">said</a>:</p>\n<blockquote>\n<p>I'm trying to think of ways to squeeze every last bit of performance out of rustc.</p>\n<blockquote>\n<p>rustc is already compiled with extensive tuning re: LTO and PGO</p>\n</blockquote>\n<p>Can you point me to where I can learn more about this? I know a tiny bit about the PGO that is done in CI, but nothing about \"tuning\" for LTO</p>\n</blockquote>\n<p>don't know if it's documented anywhere, but the code is in <a href=\"https://github.com/rust-lang/rust/blob/master/src/ci/pgo.sh\">https://github.com/rust-lang/rust/blob/master/src/ci/pgo.sh</a></p>",
        "id": 276421454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648082952
    },
    {
        "content": "<p>Cool, that covers the PGO side of things, but still leaves me wondering what is done regarding LTO for rustup builds</p>",
        "id": 276421591,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648083045
    },
    {
        "content": "<p>Or maybe there's some lapse in my understanding, like LTO automatically happens when you're compiling with PGO data or something</p>",
        "id": 276421636,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648083097
    },
    {
        "content": "<p>yeah, not sure. maybe LTO is unconditionally on?</p>",
        "id": 276421638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648083102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> would know for sure - we're trying to figure how to enable LTO / under what conditions it's enabled</p>",
        "id": 276421718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648083153
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/beb480d908f091e7c42c866e13641f26b2ee230b/src/bootstrap/compile.rs#L656\">https://github.com/rust-lang/rust/blob/beb480d908f091e7c42c866e13641f26b2ee230b/src/bootstrap/compile.rs#L656</a> looks relevant</p>",
        "id": 276421759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648083207
    },
    {
        "content": "<p>don't see LTO mentioned there though</p>",
        "id": 276421779,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648083234
    },
    {
        "content": "<p>I believe thinlto is default enabled (per crate) and we don't do anything beyond that for rustup distributed builds.</p>",
        "id": 276422258,
        "sender_full_name": "simulacrum",
        "timestamp": 1648083674
    },
    {
        "content": "<p>But we don't do whole crate graph lto (thin or fat) in CI today.</p>",
        "id": 276422287,
        "sender_full_name": "simulacrum",
        "timestamp": 1648083712
    },
    {
        "content": "<p>Do you alter the thread count for building the distributed rustc?</p>",
        "id": 276422353,
        "sender_full_name": "Jubilee",
        "timestamp": 1648083764
    },
    {
        "content": "<p>might be nice to add eventually :)</p>",
        "id": 276422356,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648083765
    },
    {
        "content": "<p>(note that \"distributed rustc\" is exactly the same as \"rustc built in CI\" - the release process just uplifts the most recent build to nightly)</p>",
        "id": 276422385,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648083809
    },
    {
        "content": "<p>I don't know what you mean by altering thread count.</p>",
        "id": 276422388,
        "sender_full_name": "simulacrum",
        "timestamp": 1648083810
    },
    {
        "content": "<p>Cool, thanks for chiming in Mark. Can you clarify how \"thinlto per crate\" would differ from \"whole crate graph thinlto\"? I guess what I don't understand is how any LTO happens in a single crate</p>",
        "id": 276422393,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648083820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276422388\">said</a>:</p>\n<blockquote>\n<p>I don't know what you mean by altering thread count.</p>\n</blockquote>\n<p>Err, I mean whether it's built with multiple jobs or not, since that tends to affect things.</p>",
        "id": 276422461,
        "sender_full_name": "Jubilee",
        "timestamp": 1648083868
    },
    {
        "content": "<p>rustc defaults to splitting up a crate's codegen into 16 units, and those each are optimized independently by LLVM; we then merge them with ThinLTO. But that means that there's no intercrate lto.</p>",
        "id": 276422478,
        "sender_full_name": "simulacrum",
        "timestamp": 1648083892
    },
    {
        "content": "<p>ahhh.</p>",
        "id": 276422483,
        "sender_full_name": "Jubilee",
        "timestamp": 1648083897
    },
    {
        "content": "<p>Parallelism shouldn't matter; the CGU count will. We build std/core etc in CI with just one CGU.</p>",
        "id": 276422509,
        "sender_full_name": "simulacrum",
        "timestamp": 1648083929
    },
    {
        "content": "<p>Ohh okay.</p>",
        "id": 276422514,
        "sender_full_name": "Jubilee",
        "timestamp": 1648083939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276422509\">said</a>:</p>\n<blockquote>\n<p>Parallelism shouldn't matter; the CGU count will. We build std/core etc in CI with just one CGU.</p>\n</blockquote>\n<p>Should I be doing this too then? I'm starting to feel like there's quite a few \"perf polish\" things done in CI that aren't well communicated to from-source users.</p>",
        "id": 276422575,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648083978
    },
    {
        "content": "<p>In practice compile times are dominated by linking, so if you want to cut compile times, uhhh a lot of people like using mold?</p>",
        "id": 276422578,
        "sender_full_name": "Jubilee",
        "timestamp": 1648083981
    },
    {
        "content": "<p>that is a <em>very</em> broad statement lol</p>",
        "id": 276422592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084000
    },
    {
        "content": "<p>We compile all crates as dylibs for debug builds, so actual compile time should be our bottleneck for edit-build-debug loops.</p>",
        "id": 276422632,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084047
    },
    {
        "content": "<p>oh okay.</p>",
        "id": 276422639,
        "sender_full_name": "Jubilee",
        "timestamp": 1648084059
    },
    {
        "content": "<p>You can try just setting <code>lto='thin'</code> in the root <code>Cargo.toml</code> profile.  Give it a shot and see what happens.  I'd be impressed if it works.</p>",
        "id": 276422640,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648084059
    },
    {
        "content": "<p>I'm curious if anybody has any \"gut feel\" for whether whole crate graph LTO (thin or fat) would yield decent benefit.</p>",
        "id": 276422654,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084073
    },
    {
        "content": "<p>I would expect it to have an impact, yeah. Shouldn't be terribly hard to test Eric's idea though</p>",
        "id": 276422707,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084090
    },
    {
        "content": "<p>on it</p>",
        "id": 276422724,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084110
    },
    {
        "content": "<p>src/CI/run.sh, src/CI/pgo.sh, and src/CI/docker/host-x86_64/dist-x86_64-linux are the three files you most likely need to read to get a sense of what we configure, though it requires a bit of undocumented (though somewhat obvious imo) knowledge to know what specifically is being run from <a href=\"http://run.sh\">run.sh</a></p>",
        "id": 276422729,
        "sender_full_name": "simulacrum",
        "timestamp": 1648084125
    },
    {
        "content": "<p>(I may have slightly mangled paths: on mobile).</p>",
        "id": 276422732,
        "sender_full_name": "simulacrum",
        "timestamp": 1648084140
    },
    {
        "content": "<p>Yeah, I think so.<br>\nYou can't build all the rustc bits and statically link them together in practice, but the bits you can't statically link are ones you generally don't want to try to statically link anyways.</p>",
        "id": 276422749,
        "sender_full_name": "Jubilee",
        "timestamp": 1648084165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276422640\">said</a>:</p>\n<blockquote>\n<p>You can try just setting <code>lto='thin'</code> in the root <code>Cargo.toml</code> profile.  Give it a shot and see what happens.  I'd be impressed if it works.</p>\n</blockquote>\n<p>Under <code>[profile.dev]</code>?</p>",
        "id": 276422755,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084177
    },
    {
        "content": "<p>whichever you want to have LTO :) probably <code>profile.release</code></p>",
        "id": 276422766,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084191
    },
    {
        "content": "<p>Yea, <code>[profile.release]</code></p>",
        "id": 276422857,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648084305
    },
    {
        "content": "<p>i actually have never compiled release using <code>x.py</code>. <code>build --help</code> doesn't seem to reveal how to do that</p>",
        "id": 276422937,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084387
    },
    {
        "content": "<p>release is the default</p>",
        "id": 276422942,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084401
    },
    {
        "content": "<p>swag</p>",
        "id": 276422944,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084406
    },
    {
        "content": "<p>Oh, I forgot dylibs don't support LTO. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 276422945,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648084406
    },
    {
        "content": "<p>cargo's dev profile is <code>optimize = false</code> I think, which isn't really supported</p>",
        "id": 276422957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276422945\">said</a>:</p>\n<blockquote>\n<p>Oh, I forgot dylibs don't support LTO. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>\n</blockquote>\n<p>oh oof :( why is that? couldn't LLVM do LTO on the dylib itself, even if it doesn't have access to other libraries it will be linked with?</p>",
        "id": 276423005,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084454
    },
    {
        "content": "<p>well lto is inherently incompatible with dynamic linking.. no?</p>\n<p>ah sorry u said within the dylib itself</p>",
        "id": 276423035,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084496
    },
    {
        "content": "<p>I'm suggesting you could optimize <em>just</em> <a href=\"http://rustc_driver.so\">rustc_driver.so</a> on its own - that would still get you more optimizations that looking at individual .rlibs</p>",
        "id": 276423052,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084535
    },
    {
        "content": "<p>oh i didn't realize rustc_driver got compiled to a dylib</p>",
        "id": 276423066,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084558
    },
    {
        "content": "<p>I'm not sure how feasible that would be.  I don't remember why that limitation is there.</p>",
        "id": 276423127,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648084594
    },
    {
        "content": "<p>Is rustc not statically linked in the end?</p>",
        "id": 276423142,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084637
    },
    {
        "content": "<p>no</p>",
        "id": 276423144,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084642
    },
    {
        "content": "<p>rustc_driver is dynamically linked, for <code>rustc_private</code> and also to avoid duplicating it between rustdoc / clippy / rustfmt</p>",
        "id": 276423152,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084658
    },
    {
        "content": "<p>(also maybe proc macros are related? don't remember)</p>",
        "id": 276423159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084670
    },
    {
        "content": "<p>Yes, proc macros are dylibs.</p>",
        "id": 276423210,
        "sender_full_name": "Jubilee",
        "timestamp": 1648084709
    },
    {
        "content": "<p>Ok. So I suppose it makes sense why no whole-program LTO is performed on rustc today.</p>",
        "id": 276423220,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084723
    },
    {
        "content": "<p>Seems like looking into the idea of \"LTO within the big chunky dylib\" is the best next step</p>",
        "id": 276423239,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084757
    },
    {
        "content": "<p>the first thing I would try is <code>lto = true</code> in rustc_driver/Cargo.toml, which does fat LTO instead of thin, see if that has any impact at all</p>",
        "id": 276423260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648084800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276422724\">said</a>:</p>\n<blockquote>\n<p>on it</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">rustc_interface</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">ben</span><span class=\"o\">/</span><span class=\"n\">Documents</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">lang</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_interface</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">rustc_driver</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">ben</span><span class=\"o\">/</span><span class=\"n\">Documents</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">lang</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">ben</span><span class=\"o\">/</span><span class=\"n\">Documents</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">lang</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">prefer</span><span class=\"w\"> </span><span class=\"n\">dynamic</span><span class=\"w\"> </span><span class=\"n\">linking</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">performing</span><span class=\"w\"> </span><span class=\"n\">LTO</span><span class=\"w\"></span>\n\n<span class=\"n\">note</span>: <span class=\"nc\">only</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"na\">lib</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">bin</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">cdylib</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">outputs</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">supported</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">LTO</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276423322,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084842
    },
    {
        "content": "<p>That was on root Cargo.toml, I can try on rustc_driver</p>",
        "id": 276423337,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276423260\">said</a>:</p>\n<blockquote>\n<p>the first thing I would try is <code>lto = true</code> in rustc_driver/Cargo.toml, which does fat LTO instead of thin, see if that has any impact at all</p>\n</blockquote>\n<p>Is <code>lto = \"fat\"</code> not a thing? Seems more explicit <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 276423362,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648084921
    },
    {
        "content": "<p>oh. build succeeded with rustc_driver being <code>lto = \"fat\"</code> <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 276423539,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648085117
    },
    {
        "content": "<p>seems to.. contradict the wording of the above error?</p>",
        "id": 276423542,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648085127
    },
    {
        "content": "<p>wait.. is this even doing anything? I changed it to <code>lto = \"unknown\"</code> and it didn't recompile anything</p>",
        "id": 276423605,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648085175
    },
    {
        "content": "<p>uhh can you paste your diff?</p>",
        "id": 276423613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648085193
    },
    {
        "content": "<p>also are you seeing any warnings?</p>",
        "id": 276423621,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648085203
    },
    {
        "content": "<p>ah<br>\n<code>warning: profiles for the non root package will be ignored, specify profiles at the workspace root:</code></p>",
        "id": 276423640,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648085233
    },
    {
        "content": "<p>Do I need to do something like <code>[profile.release.package.rustc_driver]</code> in the workspace Cargo.toml?</p>",
        "id": 276423703,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648085287
    },
    {
        "content": "<p>hm that doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Building</span><span class=\"w\"> </span><span class=\"n\">rustbuild</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">manifest</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">ben</span><span class=\"o\">/</span><span class=\"n\">Documents</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">lang</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n  <span class=\"err\">`</span><span class=\"n\">lto</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">specified</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">package</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"></span>\n</code></pre></div>\n<p>my cargo-fu isn't up to snuff</p>",
        "id": 276423816,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648085429
    },
    {
        "content": "<p>oh oof cargo might just not have a button for \"optimize this dynamic library\"</p>",
        "id": 276423941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648085571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> would know for sure</p>",
        "id": 276423948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648085580
    },
    {
        "content": "<p>hehe <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 276423949,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648085582
    },
    {
        "content": "<p>btw, would compile with <code>native-cpu</code> helps? I think this is something public distributed rustc not able to do.</p>",
        "id": 276428943,
        "sender_full_name": "Shuo Li",
        "timestamp": 1648092292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"484782\">Shuo Li</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276428943\">said</a>:</p>\n<blockquote>\n<p>btw, would compile with <code>native-cpu</code> helps? I think this is something public distributed rustc not able to do.</p>\n</blockquote>\n<p>Ooh, good thinking, though I don't know if that will work for us either. We compile rustc once and distribute it to all developer machines in our office. I'm not confident that all the machines are built with the same cpus.</p>",
        "id": 276431971,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648096935
    },
    {
        "content": "<p>You might still be able to pick a higher baseline than the default, e.g. <code>x86_64_v2</code></p>",
        "id": 276442946,
        "sender_full_name": "The 8472",
        "timestamp": 1648109791
    },
    {
        "content": "<p>It was not a large win historically - I think if you look there's some PRs trying it out.</p>",
        "id": 276486430,
        "sender_full_name": "simulacrum",
        "timestamp": 1648133392
    },
    {
        "content": "<p>I tried it in <a href=\"https://github.com/rust-lang/rust/issues/90440\">#90440</a> - <a href=\"https://perf.rust-lang.org/compare.html?start=dca3f1b786efd27be3b325ed1e01e247aa589c3b&amp;end=039f38df1e7d4ce1f8eb3115af67107239b9173d\">results</a></p>",
        "id": 276505957,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1648140801
    },
    {
        "content": "<p>I dunno, that looks pretty good honestly.</p>",
        "id": 276519425,
        "sender_full_name": "Jubilee",
        "timestamp": 1648145972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435059\">Ben Reeves</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276431971\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"484782\">Shuo Li</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276428943\">said</a>:</p>\n<blockquote>\n<p>btw, would compile with <code>native-cpu</code> helps? I think this is something public distributed rustc not able to do.</p>\n</blockquote>\n<p>Ooh, good thinking, though I don't know if that will work for us either. We compile rustc once and distribute it to all developer machines in our office. I'm not confident that all the machines are built with the same cpus.</p>\n</blockquote>\n<p>They almost certainly don't, but they probably all are x86 machines bought within the past 10 years. If so, then <code>-Ctarget-cpu=x86_64_v3</code> is an option (roughly equivalent to <code>-Ctarget-cpu=Haswell</code>).</p>",
        "id": 276521738,
        "sender_full_name": "Jubilee",
        "timestamp": 1648146998
    },
    {
        "content": "<p>It's not <em>bad</em>, but IMO not worth us shipping 2-3x the number of binaries and targets and managing the complexity of appropriate CPU feature detection and either using a not-v3 std or otherwise complicating that.</p>",
        "id": 276750537,
        "sender_full_name": "simulacrum",
        "timestamp": 1648335467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276750537\">said</a>:</p>\n<blockquote>\n<p>It's not <em>bad</em>, but IMO not worth us shipping 2-3x the number of binaries and targets and managing the complexity of appropriate CPU feature detection and either using a not-v3 std or otherwise complicating that.</p>\n</blockquote>\n<p>oh, I can agree with that while also implicitly suggesting that it's actually entirely fine for a source user to do it. :3</p>",
        "id": 276755194,
        "sender_full_name": "Jubilee",
        "timestamp": 1648342228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/compiling.20rustc.20with.20LTO/near/276442946\">said</a>:</p>\n<blockquote>\n<p>You might still be able to pick a higher baseline than the default, e.g. <code>x86_64_v2</code></p>\n</blockquote>\n<p>btw I tried v2 in <a href=\"https://github.com/rust-lang/rust/issues/95302\">#95302</a> if someone wants to take a look at the results (and took the opportunity to have more recent results for v3 in that PR), it's understandably less interesting than v3, but you never know.</p>",
        "id": 277052766,
        "sender_full_name": "lqd",
        "timestamp": 1648581430
    }
]