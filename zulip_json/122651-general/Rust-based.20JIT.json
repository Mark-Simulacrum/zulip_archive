[
    {
        "content": "<p>I know Rust as a language has decided not to have a runtime, but I'm stuck between a rock and a hard place where I have \"infinite types\" due to generics, so generating them at runtime is absolutely essential. I could refactor to do runtime dispatch, but then the performance of the code will absolutely die due to the overhead (some of them will just be adding an element to a <code>Vec</code>). Does Rust or any crate have a way to do something like this in an idiomatic manner?</p>",
        "id": 211004513,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600868674
    },
    {
        "content": "<blockquote>\n<p>I have \"infinite types\" due to generics</p>\n</blockquote>\n<p>What do you mean with this. What is exactly what you want to do.</p>",
        "id": 211008072,
        "sender_full_name": "bjorn3",
        "timestamp": 1600870033
    },
    {
        "content": "<p>So, I want to have a type that is generic over a <code>Tuple&lt;_,  ...&gt;</code> where all of the <code>_</code>s possess some trait. In addition, some of the methods in that trait will be as simple as <code>vec.push(...)</code> or <code>hash_map.insert(...)</code>. As you can imagine, there will be a lot of these types.</p>\n<p>What I could do to work around this is use <code>dyn Trait</code> but this will kill the performance if it's something like a simple vector access or similar.</p>\n<p>I could point you to the research paper I'm trying to implement if you're interested.</p>",
        "id": 211009441,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600870539
    },
    {
        "content": "<p>take a look at <a href=\"https://docs.rs/frunk/0.3.1/frunk/\">https://docs.rs/frunk/0.3.1/frunk/</a> maybe</p>",
        "id": 211009513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600870562
    },
    {
        "content": "<p>especially <a href=\"https://docs.rs/frunk/0.3.1/frunk/hlist/index.html\">https://docs.rs/frunk/0.3.1/frunk/hlist/index.html</a></p>",
        "id": 211009602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600870605
    },
    {
        "content": "<p>I see. I'll have to bench the perf against something native. :) But I have the feeling it'll be substantially worse.</p>",
        "id": 211010716,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600871119
    },
    {
        "content": "<p>note that dyn trait can actually be pretty fast in practice, and can even be <em>faster</em> than generics</p>",
        "id": 211010851,
        "sender_full_name": "simulacrum",
        "timestamp": 1600871169
    },
    {
        "content": "<p>so definitely benchmark</p>",
        "id": 211010858,
        "sender_full_name": "simulacrum",
        "timestamp": 1600871173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Looking.20for.20a.20Rust-based.20JIT/near/211010851\">said</a>:</p>\n<blockquote>\n<p>note that dyn trait can actually be pretty fast in practice, and can even be <em>faster</em> than generics</p>\n</blockquote>\n<p><a href=\"https://gankra.github.io/blah/swift-abi/\">https://gankra.github.io/blah/swift-abi/</a></p>",
        "id": 211011257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600871362
    },
    {
        "content": "<p>at some point I want to test the perf difference of making <em>all</em> traits <code>dyn</code></p>",
        "id": 211011340,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600871399
    },
    {
        "content": "<p>not sure how or if it's feasible though</p>",
        "id": 211011393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600871407
    },
    {
        "content": "<p>It is not feasible to make traits with associated types generic. You would need to run the full layout code at runtime for that.</p>",
        "id": 211011743,
        "sender_full_name": "bjorn3",
        "timestamp": 1600871548
    },
    {
        "content": "<p>sure, or anything taking <code>Self</code> by value</p>",
        "id": 211011815,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600871581
    },
    {
        "content": "<p>but most everything else could be turned into <code>dyn</code> under the hood I think</p>",
        "id": 211011850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600871599
    },
    {
        "content": "<p>does rust guarentee <code>fn f&lt;T&gt;(t: &amp;T)</code> is monomorphized at the language level btw? or is that just how it's implemented?</p>",
        "id": 211012301,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600871780
    },
    {
        "content": "<p>I don't think that is guaranteed. We guarantee nothing about function pointer comparisons at least. LLVM is told that it is fine to merge or duplicate functions using <code>unnamed_addr</code>.</p>",
        "id": 211012730,
        "sender_full_name": "bjorn3",
        "timestamp": 1600871964
    },
    {
        "content": "<p>Yeah, so it's slower but not massively. About 26%. I can send over the full code for someone that needs it. This is for a simple dispatched <code>vec.push</code>. Generics are probably inlined so they're exactly the same as a <code>vec.push</code>.</p>",
        "id": 211025942,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600877580
    },
    {
        "content": "<blockquote>\n<p>I know Rust as a language has decided not to have a runtime</p>\n</blockquote>\n<p>Just to be precise, it <em>does</em> <a href=\"https://doc.rust-lang.org/reference/runtime.html\">have a runtime</a>, it's just small and embedded in your binary</p>",
        "id": 211075012,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600904434
    },
    {
        "content": "<p>in the same sense that C has a runtime, yeah</p>",
        "id": 211075867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600905318
    },
    {
        "content": "<p>Yeah, when I said \"runtime\" I meant non-embedded.</p>\n<p>Also, for a vector access, the results are bad. 179% slowdown.</p>",
        "id": 211103034,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600936802
    }
]