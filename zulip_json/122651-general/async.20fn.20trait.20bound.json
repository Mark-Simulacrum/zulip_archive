[
    {
        "content": "<p>How can I write the corresponding <code>FnOnce</code> trait bound to accept functions like <code>async fn test(x: &amp;mut i32)</code>?</p>",
        "id": 198833403,
        "sender_full_name": "Diggsey",
        "timestamp": 1590534986
    },
    {
        "content": "<p>I'm having trouble tying the anonymous lifetime of the argument <code>x</code> to the lifetime of the returned Future</p>",
        "id": 198833439,
        "sender_full_name": "Diggsey",
        "timestamp": 1590535029
    },
    {
        "content": "<p>does this express what you want? <code>type X = for&lt;'a&gt; FnOnce(&amp;'a mut i32) -&gt; (dyn std::future::Future&lt;Output = ()&gt; + 'a)</code></p>",
        "id": 198852003,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590559104
    },
    {
        "content": "<p>or (more towards using in <code>where</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>type X&lt;&#39;a, F: Future&lt;Output = ()&gt; + &#39;a&gt; = FnOnce(&amp;&#39;a mut i32) -&gt; F;\n</code></pre></div>",
        "id": 198859899,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1590565986
    },
    {
        "content": "<p>That's not quite what I'm after. I managed to find a solution using an extra trait that works for standalone async functions, but I can't get it to work for closures with an async block:</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c0e8210afc5a1c7271064b7607c584b6\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c0e8210afc5a1c7271064b7607c584b6</a></p>\n<p>Could anyone explain what limitation of the compiler is resulting in this error?</p>",
        "id": 199279166,
        "sender_full_name": "Diggsey",
        "timestamp": 1590878117
    }
]