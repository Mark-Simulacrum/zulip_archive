[
    {
        "content": "<p>Hi folks. Sorry if this isn't the right spot, but it's where I know folks are.</p>\n<p>I have a <code>serde</code> question, trying to get zero-copy deserialization up and running. I've whipped together </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">CommandVec</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;de</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buffer</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Command</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;de</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Command</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;de</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Null</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Number</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;de</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ArrayStart</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ArrayEnd</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MapStart</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MapEnd</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and would very much like to deserialize a <code>CommandVec&lt;'de&gt;</code>. However, it seems like the <code>Visitor</code> trait needs to return owned instances of the deserializing type, and I can't think of a way to stash a <code>&amp;mut CommandVec&lt;'de&gt;</code> anywhere (the <code>deserialize</code> method returns <code>Self</code> and is repeatedly invoked to deserialize an element from scratch). </p>\n<p>Is anyone familiar with having done this before? I'm delighted to not have to copy strings around, but an allocation for each node in the parse tree is not ideal.</p>",
        "id": 199095732,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706171
    },
    {
        "content": "<p>I don't quite follow the setup; is CommandVec the input or the output of the deserialization step?</p>",
        "id": 199096137,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706458
    },
    {
        "content": "<p>Sorry. It's intended to be the output, for example something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">CommandVec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"n\">from_str</span>::<span class=\"o\">&lt;</span><span class=\"n\">CommandVec</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;???&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199096172,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706491
    },
    {
        "content": "<p>The goal would be to only ever have one allocation, ideally something I could provide actually, and populate it with a sequence of <code>Command&lt;'de&gt;</code> just by having the visitor traverse the parse tree.</p>",
        "id": 199096207,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706523
    },
    {
        "content": "<p>Maybe I'm barking up the wrong tree and some <code>serde-json</code> internals are what I want to use, but I did want to avoid re-implementing JSON parsing if I can.</p>",
        "id": 199096231,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706559
    },
    {
        "content": "<p>this is something you would do by writing a Deserialize&lt;'de&gt; impl for CommandVec&lt;'de&gt;</p>",
        "id": 199096341,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706625
    },
    {
        "content": "<p>there shouldn't need to be serde_json internals involved</p>",
        "id": 199096358,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706639
    },
    {
        "content": "<p>do you have a playground of what you tried?</p>",
        "id": 199096368,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706651
    },
    {
        "content": "<p>I'll slap it up. I did write a <code>Deserialize&lt;'de&gt;</code> but .. it does more allocations than I would like.</p>",
        "id": 199096389,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706679
    },
    {
        "content": "<p><a href=\"https://gist.github.com/frankmcsherry/40af1f932f15cc738cebd90d622a6fec\">https://gist.github.com/frankmcsherry/40af1f932f15cc738cebd90d622a6fec</a></p>",
        "id": 199096452,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706702
    },
    {
        "content": "<p>I would expect that the Deserialize impl for CommandVec would create a Vec&lt;Command&gt; and create a Visitor containing a mut reference to that Vec</p>",
        "id": 199096490,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706735
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a16971c3d235a4542c5effbe3eeec67c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a16971c3d235a4542c5effbe3eeec67c</a></p>",
        "id": 199096503,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706745
    },
    {
        "content": "<p>then when the visitor finishes the mut borrow on the vec ends and the original vec can be moved into the field of the returned CommandVec</p>",
        "id": 199096534,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706769
    },
    {
        "content": "<p>Right, but afaict each recursive call invokes <code>&lt;CommandVec as Deserialize&gt;::deserialize(...)</code> from scratch.</p>",
        "id": 199096624,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706805
    },
    {
        "content": "<p>which line?</p>",
        "id": 199096647,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706826
    },
    {
        "content": "<p>The recursive calls <code>serde</code> implements. If you put a </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;heya&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">deserializer</span><span class=\"p\">.</span><span class=\"n\">deserialize_any</span><span class=\"p\">(</span><span class=\"n\">ValueVisitor</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>in to see what gets called, you get large numbers of <code>heya</code> in the output.</p>",
        "id": 199096693,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706880
    },
    {
        "content": "<p>Sorry, I apologize if this sounds a bit random; I have a bunch of built up context and should go slower and try to be clearer.</p>",
        "id": 199096774,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706927
    },
    {
        "content": "<p>oh the visit_seq is calling visitor.next_element::&lt;CommandVec&gt;()</p>",
        "id": 199096800,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706955
    },
    {
        "content": "<p>which is the Deserialize impl for CommandVec</p>",
        "id": 199096808,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706962
    },
    {
        "content": "<p>Does it have a better option?</p>",
        "id": 199096839,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706983
    },
    {
        "content": "<p>what I would expect to see is <code>visitor.next_element_seed(CommandVecCollector { vec: self.vec })</code></p>",
        "id": 199096844,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590706985
    },
    {
        "content": "<p>eek, ok that is good information.</p>",
        "id": 199096860,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590706995
    },
    {
        "content": "<p>where CommandVecCollector is your type that implements Visitor</p>",
        "id": 199096865,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590707000
    },
    {
        "content": "<p>basically <code>struct CommandVecCollector&lt;'a, 'de&gt; { vec: &amp;'a mut Vec&lt;Command&lt;'de&gt;&gt; }</code></p>",
        "id": 199096883,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590707019
    },
    {
        "content": "<p>Gotcha. That is super-helpful. I'll be back to report success or failure!</p>",
        "id": 199096973,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590707065
    },
    {
        "content": "<p>with <code>impl&lt;'a, 'de&gt; Visitor&lt;'de&gt; for CommandVecCollector&lt;'a, 'de&gt;</code> being the Visitor impl you write</p>",
        "id": 199096975,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590707067
    },
    {
        "content": "<blockquote>\n<p>DeserializeSeed is the stateful form of the Deserialize trait. If you ever find yourself looking for a way to pass data into a Deserialize impl, this trait is the way to do it.</p>\n</blockquote>\n<p>Ah yes, this is almost surely what I want.</p>",
        "id": 199097167,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590707228
    },
    {
        "content": "<p>that's not clear to me, unless you want to reuse the same vec across multiple different CommandVec deserializations</p>",
        "id": 199097289,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590707321
    },
    {
        "content": "<p>if each time you deserialize a CommandVec you make a new Vec then there is no data going into that deserialize impl</p>",
        "id": 199097306,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590707339
    },
    {
        "content": "<p>I do feel like I want to inject state in to the recursive calls. And <code>next_element_seed</code> requires an implementor of <code>DeserializeSeed</code>.</p>",
        "id": 199097395,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590707415
    },
    {
        "content": "<p>Though you probably know better than I do (I've been looking at this for an hour) and the traits have me tied up in knots.</p>",
        "id": 199097568,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590707592
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ece0a083058c394e435f8d087117267\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ece0a083058c394e435f8d087117267</a></p>",
        "id": 199097756,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590707792
    },
    {
        "content": "<p>what i had in mind</p>",
        "id": 199097762,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590707800
    },
    {
        "content": "<p>Ok, that looks very sane!</p>",
        "id": 199097842,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590707896
    },
    {
        "content": "<p>Do you know if it is easily done to trigger <code>DeserializeSeed</code> from something like <code>serde_json::from_str</code>? ( as in, if I do have a <code>&amp;mut Vec&lt;Command&lt;'de&gt;&gt;</code> already)</p>",
        "id": 199097876,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590707961
    },
    {
        "content": "<p>(( thank you very much, by the way! ))</p>",
        "id": 199097882,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590707970
    },
    {
        "content": "<p>for what purpose? to skip the CommandVec wrapper type?</p>",
        "id": 199097953,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708051
    },
    {
        "content": "<p>ah i see your edit</p>",
        "id": 199097968,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708078
    },
    {
        "content": "<p>yes you can call it directly</p>",
        "id": 199097989,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708106
    },
    {
        "content": "<p>Sorry, was trying to be less spammy, not sneaky. :)</p>",
        "id": 199097993,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590708109
    },
    {
        "content": "<p>the arguments to DeserializeSeed::deserialize are the input object and the deserializer</p>",
        "id": 199097999,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708121
    },
    {
        "content": "<p>so e.g.:</p>",
        "id": 199098038,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708124
    },
    {
        "content": "<p><code>some_state.deserialize(&amp;mut serde_json::Deserializer::from_str(json_str))?;</code></p>",
        "id": 199098058,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708149
    },
    {
        "content": "<p>!!! neat, thanks!</p>",
        "id": 199098079,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590708180
    },
    {
        "content": "<p>(( looks like about a 7x speed-up over <code>serde_json::from_str::&lt;Value&gt;()</code>, fwiw ))</p>",
        "id": 199098377,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590708531
    },
    {
        "content": "<p>good stuff</p>",
        "id": 199098593,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708761
    },
    {
        "content": "<p>be aware that if the input has a string with escape sequences you won't be able to deserialize it to &amp;'de str</p>",
        "id": 199098597,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708777
    },
    {
        "content": "<p>if you care about that, either add another variant for String, or see if you can get <a href=\"https://github.com/pickfire/json\">https://github.com/pickfire/json</a> working</p>",
        "id": 199098694,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708861
    },
    {
        "content": "<p>that fork has an entry point that takes &amp;mut str for the input json</p>",
        "id": 199098697,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708873
    },
    {
        "content": "<p>and rewrites escape sequences in place</p>",
        "id": 199098702,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590708879
    },
    {
        "content": "<p>Oh wait can you say that part again? If there is a string with escape sequences, ... how does it present in the visitor? As <code>bytes</code> or as <code>String</code> or what?</p>",
        "id": 199098810,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590708972
    },
    {
        "content": "<p>i think serde_json uses visit_str</p>",
        "id": 199098862,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590709057
    },
    {
        "content": "<p>not 100% sure</p>",
        "id": 199098865,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590709059
    },
    {
        "content": "<p>Ok, I'll make a note to check it out though, thanks!</p>",
        "id": 199098960,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1590709139
    },
    {
        "content": "<p>heya, im a decent rustacean, been at it for about half a year now with plenty of projects finished. is there a place for me to start when it comes to contributing to <code>rust-analyzer</code>?</p>",
        "id": 199199156,
        "sender_full_name": "Odd-Harald Myhren",
        "timestamp": 1590779776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307504\">@Odd-Harald Myhren</span> see <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0</a> for <code>rust-analyzer</code> questions. You could start by looking at <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-has-instructions\">https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-has-instructions</a>.</p>",
        "id": 199244123,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590824437
    }
]