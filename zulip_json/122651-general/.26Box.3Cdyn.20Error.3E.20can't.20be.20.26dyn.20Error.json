[
    {
        "content": "<p>I'm missing something obvious here. Why can't a <code>&amp;Box&lt;dyn Error&gt;</code> be treated as <code>&amp;dyn Error</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;dummy&quot;</span><span class=\"p\">.</span><span class=\"n\">fmt</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0277]: the size for values of type `(dyn std::error::Error + &#39;static)` cannot be known at compilation time\n  --&gt; src/lib.rs:14:14\n   |\n14 |         Some(&amp;self.0)\n   |              ^^^^^^^ doesn&#39;t have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::error::Error + &#39;static)`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: required because of the requirements on the impl of `std::error::Error` for `std::boxed::Box&lt;(dyn std::error::Error + &#39;static)&gt;`\n   = note: required for the cast to the object type `dyn std::error::Error`\n</pre></div>",
        "id": 156996167,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548638233
    },
    {
        "content": "<p>I can get it to work by doing <code>Some(&amp;*self.0)</code>, but that doesn't generalize to cases where my error isn't boxed (e.g <code>std::io::Error</code>)</p>",
        "id": 156996225,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548638319
    },
    {
        "content": "<p>Here's the slightly broader case where I'd like the <code>match</code> arms to be source-identical:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;dummy&quot;</span><span class=\"p\">.</span><span class=\"n\">fmt</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">source</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Error</span>::<span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Error</span>::<span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156997231,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548640284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> The first one compiles with <code>&amp;*self.0</code></p>",
        "id": 157001470,
        "sender_full_name": "simulacrum",
        "timestamp": 1548648584
    },
    {
        "content": "<p>I suspect the problem you're running into is that when the compiler attempts to unsize Box&lt;dyn Error&gt; into dyn Error (in order to get &amp;dyn Error), that fails, as you can't unsize an unsized type</p>",
        "id": 157001517,
        "sender_full_name": "simulacrum",
        "timestamp": 1548648622
    },
    {
        "content": "<p>but if we deref the box first, then we have dyn Error and we can <code>&amp;</code> that to then return it as <code>&amp;dyn Error</code></p>",
        "id": 157001518,
        "sender_full_name": "simulacrum",
        "timestamp": 1548648642
    },
    {
        "content": "<p>For the second we want <code>Error::A(x) =&gt; Some(&amp;**x),</code> because match bindings make <code>x</code> have <code>&amp;Box&lt;dyn Error&gt;</code> type so the first <code>*</code> gets rid of the reference, and the second removes the Box</p>",
        "id": 157001575,
        "sender_full_name": "simulacrum",
        "timestamp": 1548648738
    },
    {
        "content": "<p>Friends over in SO chat pointed out I can call <code>Borrow::borrow</code> on both to get it to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Error</span>::<span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>::<span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">()),</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157027579,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548684848
    },
    {
        "content": "<blockquote>\n<p>I suspect the problem you're running into is that when the compiler attempts to unsize Box&lt;dyn Error&gt; into dyn Error (in order to get &amp;dyn Error), that fails, as you can't unsize an unsized type</p>\n</blockquote>\n<p>Maybe this is what feels weird; by sprinkling some <code>*</code> in, it works. Thus it feels like the compiler should be able to do the same. I know that's not always the case...</p>",
        "id": 157027703,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548684965
    },
    {
        "content": "<p>Unfortunately in this case the compiler wants to strictly auto-coerce and that doesn't involve deref coercions</p>",
        "id": 157035564,
        "sender_full_name": "simulacrum",
        "timestamp": 1548691330
    },
    {
        "content": "<p>the borrow call is essentially the same as &amp;** in my suggestion (invokes implicit auto-deref)</p>",
        "id": 157035588,
        "sender_full_name": "simulacrum",
        "timestamp": 1548691359
    },
    {
        "content": "<p>except that it's \"generic\" enough to handle <code>&amp;Box&lt;dyn Error&gt;</code> and <code>&amp;io::Error</code></p>",
        "id": 157038445,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548693654
    },
    {
        "content": "<p>well, Borrow itself isn't but the method coercion is more lax than the unsizing coercion</p>",
        "id": 157056453,
        "sender_full_name": "simulacrum",
        "timestamp": 1548708767
    },
    {
        "content": "<p>because it'll insert an arbitrary amount of <code>*</code></p>",
        "id": 157056468,
        "sender_full_name": "simulacrum",
        "timestamp": 1548708776
    },
    {
        "content": "<p>Does <code>Box&lt;dyn Error&gt;</code> implement <code>Error</code>? If it does, then shouldn't you be able to unsize it to <code>dyn Error</code> itself?</p>",
        "id": 157289503,
        "sender_full_name": "mikeyhew",
        "timestamp": 1548956184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> I think that's my intuition as well. There's an <code>impl&lt;T: Error&gt; Error for Box&lt;T&gt;</code>, but not for <code>Box&lt;dyn Error&gt;</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">is</span><span class=\"o\">&lt;</span><span class=\"n\">E</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">is</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time\n --&gt; src/main.rs:6:5\n  |\n6 |     is::&lt;Box&lt;Error&gt;&gt;();\n  |     ^^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `dyn std::error::Error`\n  = note: to learn more, visit &lt;https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n  = note: required because of the requirements on the impl of `std::error::Error` for `std::boxed::Box&lt;dyn std::error::Error&gt;`\nnote: required by `is`\n --&gt; src/main.rs:3:1\n  |\n3 | fn is&lt;E: Error + ?Sized&gt;() {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n</pre></div>",
        "id": 157299231,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548963452
    },
    {
        "content": "<p>Oh I see, it makes sense then that the error message is about <code>dyn Error</code> not being <code>Sized</code></p>",
        "id": 157299638,
        "sender_full_name": "mikeyhew",
        "timestamp": 1548963702
    },
    {
        "content": "<p>That's weird though, why doesn't the impl of <code>Error</code> for <code>Box&lt;T&gt;</code> use <code>T: ?Sized</code>? Isn't that the whole point of impls on <code>Box</code>? To make <code>Box&lt;dyn Trait&gt;</code> implement <code>Trait</code>?</p>",
        "id": 157300271,
        "sender_full_name": "mikeyhew",
        "timestamp": 1548964123
    },
    {
        "content": "<p>that does seem odd...</p>",
        "id": 157321100,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548982572
    },
    {
        "content": "<p>You cannot unsize things that are already unsized -- if something currently takes up two words then the compiler currently doesn't support any sort of double-unsizing</p>",
        "id": 157325882,
        "sender_full_name": "simulacrum",
        "timestamp": 1548989290
    },
    {
        "content": "<p>two words being a fat ptr, to be exact</p>",
        "id": 157325887,
        "sender_full_name": "simulacrum",
        "timestamp": 1548989309
    },
    {
        "content": "<p>I'm not sure if this is an underlying limitation though</p>",
        "id": 157325889,
        "sender_full_name": "simulacrum",
        "timestamp": 1548989318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I don't think you got my meaning. This is what I meant:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bx</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157368778,
        "sender_full_name": "mikeyhew",
        "timestamp": 1549041694
    },
    {
        "content": "<p>Also, unsizing a <code>Box&lt;dyn Trait&gt;</code> to a  <code>Box&lt;dyn Trait&gt;</code> <em>does</em> work, it's just a no-op</p>",
        "id": 157368901,
        "sender_full_name": "mikeyhew",
        "timestamp": 1549041790
    },
    {
        "content": "<p>Not sure if I'm being very clear. The code example I just posted is something that compiles and runs just fine. It works because <code>Box&lt;dyn Trait&gt;</code> is a <code>Sized</code> type that implements <code>Trait</code>, and therefore can itself be unsized to <code>dyn Trait</code>. <code>&amp;Box&lt;dyn Error&gt; -&gt; &amp;dyn Error</code> would work too, except <code>Box&lt;dyn Error&gt;</code> doesn't implement <code>Error</code> (and it seems like it should).</p>",
        "id": 157369341,
        "sender_full_name": "mikeyhew",
        "timestamp": 1549042168
    },
    {
        "content": "<p>Now, I doubt you would really want to do this, if you can avoid it. Unsizing <code>&amp;Box&lt;dyn Trait&gt;</code> to <code>&amp;dyn Trait</code> adds an extra layer of indirection that you can avoid just by doing <code>&amp;*bx</code>, which is what <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> was suggesting <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> should do instead.</p>",
        "id": 157369858,
        "sender_full_name": "mikeyhew",
        "timestamp": 1549042599
    },
    {
        "content": "<p>\"you can't unsize an unsized type\" is true in other cases - for example, you can't turn an <code>&amp;str</code> into an <code>&amp;dyn Trait</code>. But it doesn't apply here.</p>",
        "id": 157370026,
        "sender_full_name": "mikeyhew",
        "timestamp": 1549042757
    },
    {
        "content": "<blockquote>\n<p>except Box&lt;dyn Error&gt; doesn't implement Error (and it seems like it should).</p>\n</blockquote>\n<p>and that's likely just because a <code>T: ?Sized</code> was forgotten when writing that <code>impl</code>, right?</p>",
        "id": 157370200,
        "sender_full_name": "RalfJ",
        "timestamp": 1549042915
    },
    {
        "content": "<p>hm, yeah, probably?</p>",
        "id": 157383357,
        "sender_full_name": "simulacrum",
        "timestamp": 1549053081
    },
    {
        "content": "<p>Not the error I expected:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0119]: conflicting implementations of trait `core::convert::From&lt;alloc_crate::boxed::Box&lt;dyn error::Error&gt;&gt;` for type `alloc_crate::boxed::Box&lt;dyn error::Error&gt;`:\n   --&gt; src/libstd/error.rs:207:1\n    |\n207 | impl&lt;&#39;a, E: Error + &#39;a&gt; From&lt;E&gt; for Box&lt;dyn Error + &#39;a&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl&lt;T&gt; core::convert::From&lt;T&gt; for T;\n\nerror[E0119]: conflicting implementations of trait `core::convert::From&lt;alloc_crate::boxed::Box&lt;dyn error::Error + core::marker::Send + core::marker::Sync&gt;&gt;` for type `alloc_crate::boxed::Box&lt;dyn error::Error + core::marker::Send + core::marker::Sync&gt;`:\n   --&gt; src/libstd/error.rs:243:1\n    |\n243 | impl&lt;&#39;a, E: Error + Send + Sync + &#39;a&gt; From&lt;E&gt; for Box&lt;dyn Error + Send + Sync + &#39;a&gt; {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl&lt;T&gt; core::convert::From&lt;T&gt; for T;\n</pre></div>",
        "id": 157446315,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549156594
    }
]