[
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;code=use%20std%3A%3Aio%3A%3A%7BError%2C%20ErrorKind%7D%3B%0Ause%20std%3A%3Anet%3A%3ATcpListener%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20listener%20%3D%20TcpListener%3A%3Abind(%22127.0.0.1%3A2300%22).unwrap()%3B%0A%20%20%20%20listener.set_nonblocking(true).unwrap()%3B%0A%20%20%20%20let%20_block%20%3D%20Error%3A%3Afrom(ErrorKind%3A%3AWouldBlock)%3B%0A%20%20%20%20if%20let%20Err(_block)%20%3D%20listener.accept()%20%7B%7D%0A%7D\">Is line 8 valid Rust?</a></p>",
        "id": 258113599,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1634597278
    },
    {
        "content": "<p>Because it compiles no problem and it just seems weird to me.</p>",
        "id": 258113708,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1634597317
    },
    {
        "content": "<p>Yeah, it's valid. What's weird about it to you?</p>",
        "id": 258113724,
        "sender_full_name": "eholk",
        "timestamp": 1634597328
    },
    {
        "content": "<p>Yes, that is how you import multiple items from a namespace in a single line.</p>",
        "id": 258114127,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1634597554
    },
    {
        "content": "<p>line 8 is an example of <code>if let</code> -- <a href=\"https://doc.rust-lang.org/book/ch06-03-if-let.html\">https://doc.rust-lang.org/book/ch06-03-if-let.html</a></p>",
        "id": 258115285,
        "sender_full_name": "cuviper",
        "timestamp": 1634598135
    },
    {
        "content": "<p>While it's <em>valid</em> (and should be), I don't think it's <em>good</em>.</p>\n<p>Want to file a bug that it should be linted?  With that empty then block, the <code>if let</code> is pointless -- it'd be the same with just</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-    if let Err(_block) = listener.accept() {}</span>\n<span class=\"gi\">+    listener.accept();</span>\n</code></pre></div>\n<p>(Or maybe <code>let _ = listener.accept();</code> because of <code>must_use</code>, but I wouldn't change it to that directly because that line wasn't <em>really</em> using it before either.)</p>",
        "id": 258124767,
        "sender_full_name": "scottmcm",
        "timestamp": 1634604579
    },
    {
        "content": "<p>I'll note that the <code>_block</code> in the <code>if let Err(_block)</code> pattern doesn't pattern match against the value in the previously declared <code>_block</code> variable, it <em>shadows</em> the variable.<br>\nUsing clippy to detect it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![deny(clippy::shadow_unrelated)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorKind</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">net</span>::<span class=\"n\">TcpListener</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">listener</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TcpListener</span>::<span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1:2300\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">set_nonblocking</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">ErrorKind</span>::<span class=\"n\">WouldBlock</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_block</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error: `_block` shadows a previous, unrelated binding\n  --&gt; src/main.rs:10:16\n   |\n10 |     if let Err(_block) = listener.accept() {}\n   |                ^^^^^^\n   |\nnote: the lint level is defined here\n  --&gt; src/main.rs:1:9\n   |\n1  | #![deny(clippy::shadow_unrelated)]\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\nnote: previous binding is here\n  --&gt; src/main.rs:9:9\n   |\n9  |     let _block = Error::from(ErrorKind::WouldBlock);\n   |         ^^^^^^\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\n</code></pre></div>",
        "id": 258132694,
        "sender_full_name": "matt1992",
        "timestamp": 1634611315
    },
    {
        "content": "<p>good catch <span class=\"user-mention\" data-user-id=\"138909\">@matt1992</span>! it also would have warned \"unused\" in both places if it didn't start with an underscore...</p>",
        "id": 258135356,
        "sender_full_name": "cuviper",
        "timestamp": 1634613630
    }
]