[
    {
        "content": "<p>Coming from a background in C, I was hoping to be able to write something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or even this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But it looks like those don't work because of the following:</p>\n<ul>\n<li><code>ShrAssign</code> doesn't return the resulting value. It returns <code>()</code> instead.</li>\n<li>Integer types are not implicitly coerced to bool (this is a fine compromise).</li>\n</ul>\n<p>Wanted to make sure I'm not missing out on any other nice ways to do write this in rust. This alternative is kinda clunky:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240508507,
        "sender_full_name": "miles",
        "timestamp": 1622139097
    },
    {
        "content": "<p>well, you could</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240509358,
        "sender_full_name": "The 8472",
        "timestamp": 1622139518
    },
    {
        "content": "<p>Ah, very nice. Thanks.</p>",
        "id": 240509441,
        "sender_full_name": "miles",
        "timestamp": 1622139559
    },
    {
        "content": "<p>You could also use an iterator to generate the values you want: <a href=\"https://doc.rust-lang.org/std/iter/fn.successors.html\">https://doc.rust-lang.org/std/iter/fn.successors.html</a></p>",
        "id": 240510259,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622139924
    },
    {
        "content": "<p>Something like <code>for v in successors(Some(v), |v| v &gt;&gt; 7).take_while(|n| n != 0)</code></p>",
        "id": 240510611,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622140086
    },
    {
        "content": "<p>(that could be written many other ways, and in particular could be written with just successors and a condition inside the closure)</p>",
        "id": 240510719,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622140136
    },
    {
        "content": "<p>Note that clippy is not happy about mutation only within the <code>while</code> condition. This has been fixed recently, but not available in the latest release yet. <a href=\"https://github.com/rust-lang/rust-clippy/issues/6689\">https://github.com/rust-lang/rust-clippy/issues/6689</a></p>",
        "id": 240511558,
        "sender_full_name": "miles",
        "timestamp": 1622140564
    }
]