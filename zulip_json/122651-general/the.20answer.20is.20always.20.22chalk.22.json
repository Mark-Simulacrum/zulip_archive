[
    {
        "content": "<p>I have a supertrait with associated types. I have a subtrait that wants to add bounds to those associated types. The bounds are not honored. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Parent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Name</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Name</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Child</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nc\">Parent</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">Name</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Child</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{name}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: `&lt;impl Child as Parent&gt;::Name` doesn&#39;t implement `std::fmt::Display`\n  --&gt; src/lib.rs:13:17\n   |\n13 | fn demo(c: impl Child) {\n   |                 ^^^^^ `&lt;impl Child as Parent&gt;::Name` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `&lt;impl Child as Parent&gt;::Name`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `Child`\n  --&gt; src/lib.rs:9:17\n   |\n6  | trait Child\n   |       ----- required by a bound in this\n...\n9  |     Self::Name: std::fmt::Display,\n   |                 ^^^^^^^^^^^^^^^^^ required by this bound in `Child`\nhelp: introduce a type parameter with a trait bound instead of using `impl Trait`\n   |\n13 | fn demo&lt;C: Child&gt;(c: C) where &lt;C as Parent&gt;::Name: std::fmt::Display {\n   |        ++++++++++    ~  ++++++++++++++++++++++++++++++++++++++++++++\n</code></pre></div>",
        "id": 274261005,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646508945
    },
    {
        "content": "<p>There are workarounds, such as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Child</span>: <span class=\"nc\">Parent</span><span class=\"o\">&lt;</span><span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Name2</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Name2</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(associated_type_bounds)]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Child</span>: <span class=\"nc\">Parent</span><span class=\"o\">&lt;</span><span class=\"n\">Name</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274261057,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646509005
    },
    {
        "content": "<p>Other than waiting for chalk, is there a better solution?</p>",
        "id": 274261073,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646509031
    },
    {
        "content": "<p>I mean, this is just a bug I think</p>",
        "id": 274261179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646509174
    },
    {
        "content": "<p>We talking a BIG <span aria-label=\"bug\" class=\"emoji emoji-1f41b\" role=\"img\" title=\"bug\">:bug:</span> or a teeny <span aria-label=\"bug\" class=\"emoji emoji-1f41b\" role=\"img\" title=\"bug\">:bug:</span>? Like, small enough for someone who hasn't touched that code to fix? Or small enough that a random compiler-dev that knows traits could fix in a few minutes while onlookers watched with big puppy-dog eyes?</p>",
        "id": 274261323,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646509386
    },
    {
        "content": "<p>Uh, not quite sure</p>",
        "id": 274262583,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646511100
    },
    {
        "content": "<p>Likely the problem here is that we aren't elaborating the bounds for <code>impl Child</code></p>",
        "id": 274262635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646511148
    },
    {
        "content": "<p>puppy-dog-eyes.png</p>",
        "id": 274262640,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646511156
    },
    {
        "content": "<p>If this is instead <code>T: Child</code>, does it work?</p>",
        "id": 274262645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646511162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/the.20answer.20is.20always.20.22chalk.22/near/274262645\">said</a>:</p>\n<blockquote>\n<p>If this is instead <code>T: Child</code>, does it work?</p>\n</blockquote>\n<p>It does not:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: `&lt;C as Parent&gt;::Name` doesn&#39;t implement `std::fmt::Display`\n  --&gt; src/lib.rs:16:8\n   |\n16 |     C: Child,\n   |        ^^^^^ `&lt;C as Parent&gt;::Name` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `&lt;C as Parent&gt;::Name`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `Child`\n  --&gt; src/lib.rs:10:17\n   |\n8  | trait Child: Parent\n   |       ----- required by a bound in this\n9  | where\n10 |     Self::Name: std::fmt::Display,\n   |                 ^^^^^^^^^^^^^^^^^ required by this bound in `Child`\nhelp: consider further restricting the associated type\n   |\n16 |     C: Child, &lt;C as Parent&gt;::Name: std::fmt::Display\n   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre></div>",
        "id": 274262755,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646511312
    },
    {
        "content": "<p>Hmm</p>",
        "id": 274262820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646511380
    },
    {
        "content": "<p>not sure, would have to look at a <code>RUSTC_LOG=rustc_trait_selection -Z verbose</code> log to really figure out what's going on</p>",
        "id": 274262835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646511409
    },
    {
        "content": "<p>This looks like <a href=\"https://github.com/rust-lang/rust/issues/20671\">https://github.com/rust-lang/rust/issues/20671</a></p>",
        "id": 274265177,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1646514528
    },
    {
        "content": "<p>Yeah itâ€™s certainly not a new issue.</p>",
        "id": 274265694,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646515303
    },
    {
        "content": "<p>The fact that associated type bounds compiled gave me hope something had changed.</p>",
        "id": 274265777,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646515431
    },
    {
        "content": "<p>Ah no, I think I fixed those during the binder refactor</p>",
        "id": 274266113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646515895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/the.20answer.20is.20always.20.22chalk.22/near/274266113\">said</a>:</p>\n<blockquote>\n<p>Ah no, I think I fixed those during the binder refactor</p>\n</blockquote>\n<p>Should that issue (<a href=\"https://github.com/rust-lang/rust/issues/20671\">#20671</a>) be closed then?</p>",
        "id": 274274727,
        "sender_full_name": "Noah Lev",
        "timestamp": 1646527312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/the.20answer.20is.20always.20.22chalk.22/near/274274727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/the.20answer.20is.20always.20.22chalk.22/near/274266113\">said</a>:</p>\n<blockquote>\n<p>Ah no, I think I fixed those during the binder refactor</p>\n</blockquote>\n<p>Should that issue (<a href=\"https://github.com/rust-lang/rust/issues/20671\">#20671</a>) be closed then?</p>\n</blockquote>\n<p>I think he only meant associated type bounds, that issue has a much broader scope.</p>",
        "id": 274292837,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1646554757
    }
]