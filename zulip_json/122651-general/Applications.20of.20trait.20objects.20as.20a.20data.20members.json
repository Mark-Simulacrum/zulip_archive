[
    {
        "content": "<p>Hey everyone, I was wondering something...</p>\n<p>Right now, Rust lets you write something such as:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait X {}\n\nstruct Tester {\n    x: dyn X,\n}\n</code></pre></div>\n<p>and this makes <code>Tester</code> a dynamically-sized type.</p>\n<p>My question is, are there any practical applications for a pattern like this?</p>\n<p>Why does Rust allow us to treat trait objects as values even though they're impossible to use in most scenarios?</p>",
        "id": 232444830,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1617117869
    },
    {
        "content": "<p>This usually makes sense if <code>Tester</code> was generic, that way you can downcast a reference to it to <code>&amp;Tester&lt;dyn Trait&gt;</code></p>",
        "id": 232446935,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617118676
    },
    {
        "content": "<p>Better seen with an example (also note that your question also applies to slices <em>vs.</em> arrays):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Tester</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tester</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Tester</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Tester</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"c1\">// above line is actually:</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tester</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Tester</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Tester</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// : &amp;Tester&lt;Foo&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Tester</span><span class=\"w\"> </span><span class=\"cm\">/* &lt;dyn X &gt; */</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232449918,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617119776
    },
    {
        "content": "<p>Hmm, that looks like you're still just storing a concrete instance though. Can you implement this without it being a generic param?</p>",
        "id": 232459009,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1617123124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399737\">Christian Mazakas</span> <a href=\"#narrow/stream/122651-general/topic/Applications.20of.20trait.20objects.20as.20a.20data.20members/near/232444830\">said</a>:</p>\n<blockquote>\n<p>Why does Rust allow us to treat trait objects as values even though they're impossible to use in most scenarios?</p>\n</blockquote>\n<p>They're like <code>str</code> -- you can use them, but usually behind indirection.  So you'll have <code>x: Box&lt;dyn X&gt;</code>, like you can have <code>Box&lt;str&gt;</code> or <code>&amp;str</code> or ...</p>",
        "id": 232469058,
        "sender_full_name": "scottmcm",
        "timestamp": 1617126987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399737\">Christian Mazakas</span> <a href=\"#narrow/stream/122651-general/topic/Applications.20of.20trait.20objects.20as.20a.20data.20members/near/232459009\">said</a>:</p>\n<blockquote>\n<p>Hmm, that looks like you're still just storing a concrete instance though.</p>\n</blockquote>\n<p>You start by storing a concrete instance somewhere, and then coerce it to get the desired type-erasure (in my examples, I was having a a <code>&amp;Tester&lt;dyn X&gt;</code>), thanks to the (implicit on the first line, explicit on the second line) coercion:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">testers</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Tester</span><span class=\"w\"> </span><span class=\"cm\">/* &lt;dyn X&gt; */</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tester</span><span class=\"w\"> </span><span class=\"cm\">/* ::&lt;Foo&gt; */</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"n\">testers</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"w\"> </span><span class=\"cm\">/* as &amp;mut Tester&lt;dyn X&gt; */</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tester</span><span class=\"w\"> </span><span class=\"cm\">/* ::&lt;Bar&gt; */</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}};</span><span class=\"w\"></span>\n<span class=\"n\">testers</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">storage</span><span class=\"w\"> </span><span class=\"cm\">/* as &amp;mut Tester&lt;dyn X&gt; */</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// OK.</span>\n\n<span class=\"n\">testers</span><span class=\"p\">.</span><span class=\"n\">test_all</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// hypothetical API</span>\n</code></pre></div>",
        "id": 232475329,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617129453
    },
    {
        "content": "<p>Oh, I'm so silly!</p>\n<p>I know why I was confused now lol. I didn't realize the <code>as &amp;Tester</code> cast used the default generic value, <code>dyn X</code></p>\n<p>Duh!</p>\n<p>Yeah, this <a href=\"https://godbolt.org/z/GPx9dqaP5\">compiles fine</a></p>",
        "id": 232501354,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1617139895
    },
    {
        "content": "<p>Thank you, everyone, for the help!</p>",
        "id": 232501788,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1617140132
    }
]