[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> maybe this fixed the issue you mention: <a href=\"https://bugs.llvm.org/show_bug.cgi?id=31362\" target=\"_blank\" title=\"https://bugs.llvm.org/show_bug.cgi?id=31362\">https://bugs.llvm.org/show_bug.cgi?id=31362</a> it specifically covers:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">ms_abi</span><span class=\"p\">,</span> <span class=\"n\">noinline</span><span class=\"p\">))</span> <span class=\"n\">__int128</span> <span class=\"n\">passthrough_a</span><span class=\"p\">(</span><span class=\"n\">__int128</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 172929326,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565451775
    },
    {
        "content": "<p>but that was fixed in clang 6.0</p>",
        "id": 172929329,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565451782
    },
    {
        "content": "<p>if you have seen a mismatching ABI since, then it is probably worth filling a bug for that</p>",
        "id": 172929347,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565451824
    },
    {
        "content": "<p>Well the resulting codegen may match gcc now, but both are still incorrect according to the documentation so /me shrugs.</p>",
        "id": 172933293,
        "sender_full_name": "nagisa",
        "timestamp": 1565459138
    },
    {
        "content": "<p>I guess your point still stands that if we only intend to ever interoperate with gcc and clang, then we can match their behaviour</p>",
        "id": 172933356,
        "sender_full_name": "nagisa",
        "timestamp": 1565459240
    },
    {
        "content": "<p>But we do have explicitly MSVC-compatible targets. And I don't want to end up with an <code>extern \"C\"</code> ABI break on those targets if MSVC adds __int128 support in a way incompatible with gcc/llvm.</p>",
        "id": 172933540,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565459542
    },
    {
        "content": "<p>There's still other targets without <em>any</em> __int128 support, so we need a way for the FFI-safety of i128 to be target-dependent anyway. The same mechanism should be used to make it not-FFI-safe on the *-msvc targets.</p>",
        "id": 172933563,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565459639
    },
    {
        "content": "<p>The issue with making ffi-safety conditional is that people only ever test their code on x86_64 <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 172934551,
        "sender_full_name": "nagisa",
        "timestamp": 1565461332
    },
    {
        "content": "<p>I'm not saying it's a great solution, but it's the only possibility if we want to make it ffi-safe at all¯\\_(ツ)_/¯</p>",
        "id": 172934856,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565461898
    },
    {
        "content": "<p>I build test on x86/x86_64/wasm32, and also build on arm6t, arm7, and aarch64</p>",
        "id": 172943332,
        "sender_full_name": "Lokathor",
        "timestamp": 1565477464
    },
    {
        "content": "<p>but I'm not sure that any of that assures that an ABI incompatibility is caught</p>",
        "id": 172943334,
        "sender_full_name": "Lokathor",
        "timestamp": 1565477489
    },
    {
        "content": "<p>Retep once described ABI mismatch as \"a link error, if you're lucky\"</p>",
        "id": 172943380,
        "sender_full_name": "Lokathor",
        "timestamp": 1565477573
    },
    {
        "content": "<p>WindowsBunny forgot to add a few “very” in between of “you’re” and \"lucky”.</p>",
        "id": 172943621,
        "sender_full_name": "nagisa",
        "timestamp": 1565478120
    },
    {
        "content": "<p>Link error will only happen if you have a function that is defined using calling convention A, and try to refer to it with a declaration that uses calling convention B. And that applies to very limited list of calling convention pairs.</p>",
        "id": 172943670,
        "sender_full_name": "nagisa",
        "timestamp": 1565478205
    },
    {
        "content": "<blockquote>\n<p>And I don't want to end up with an extern \"C\" ABI break on those targets if MSVC adds __int128 support in a way incompatible with gcc/llvm.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> why not? I think this is fine.</p>",
        "id": 172964959,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522612
    },
    {
        "content": "<p>No existing code would break, because there is no existing code interfacing with MSVC code, because that can't be done.</p>",
        "id": 172965001,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522648
    },
    {
        "content": "<p>Once gcc &amp; clang update to match that ABI, we can do the same, offering some kind of backward compat flag, if that turns out to be necessary.</p>",
        "id": 172965005,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522679
    },
    {
        "content": "<p>Chances are, MSVC will never support <code>__int128</code>, and if they do, they could do so in a way that is compatible with all other code on their platform that's already using <code>__int128</code>.</p>",
        "id": 172965017,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522751
    },
    {
        "content": "<p>If they decide not to do that, then well, that's actually no difference at all than when they decide to break their ABI on every new MSVC release anyways.</p>",
        "id": 172965058,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522779
    },
    {
        "content": "<p>It's not true no existing code would break, e.g. every Rust project using cdylib with a C ABI interface (as we recommend for plugin-like usage) would be affected by the ABI break</p>",
        "id": 172965063,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565522804
    },
    {
        "content": "<p>How ? That code is not interfacing with MSVC compiled code.</p>",
        "id": 172965070,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522830
    },
    {
        "content": "<p>That code only breaks when we upgrade our ABI</p>",
        "id": 172965072,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522842
    },
    {
        "content": "<p>and we can offer a backward compatibility flag to choose an ABI, like all other compilers do on ABI changes</p>",
        "id": 172965074,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522858
    },
    {
        "content": "<p>The ABI break we're talking about is <em>us</em> changing <em>our</em> implementation of extern \"C\" on msvc compatible targets to be actually msvc compatible</p>",
        "id": 172965076,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565522880
    },
    {
        "content": "<p><code>-C abi-compat=1.X.Y</code></p>",
        "id": 172965077,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522880
    },
    {
        "content": "<p>Sure. If MSVC changes their ABI, we have to do a backward breaking change</p>",
        "id": 172965120,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522908
    },
    {
        "content": "<p>This is always a shitty solution and I would MUCH rather avoid the ABI break to begin with</p>",
        "id": 172965121,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565522908
    },
    {
        "content": "<p>currently, we do this things all the time</p>",
        "id": 172965123,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522918
    },
    {
        "content": "<p>without a flag</p>",
        "id": 172965125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522920
    },
    {
        "content": "<p>C ABI breaks are very rare and always cause a lot of pain</p>",
        "id": 172965126,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565522924
    },
    {
        "content": "<p>because we can't support different versions of a platform</p>",
        "id": 172965127,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522927
    },
    {
        "content": "<p>clang and gcc also do this on pretty much every release</p>",
        "id": 172965129,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565522937
    },
    {
        "content": "<p>Nonsense</p>",
        "id": 172965134,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565522946
    },
    {
        "content": "<p>C++ Abis change, the rust abi changes, but C ABI changes are exceedingly rare</p>",
        "id": 172965136,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565522979
    },
    {
        "content": "<p><a href=\"https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fclang-abi-compat\" target=\"_blank\" title=\"https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fclang-abi-compat\">https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fclang-abi-compat</a></p>",
        "id": 172965179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523008
    },
    {
        "content": "<p>they do happen for C as well</p>",
        "id": 172965185,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523023
    },
    {
        "content": "<p>Yes but extremely rarely and usually only for obscure corner cases or bug fixes</p>",
        "id": 172965191,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523044
    },
    {
        "content": "<p>sure</p>",
        "id": 172965192,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523054
    },
    {
        "content": "<p>the MSVC ABI has a bug, because compilers for the target use a <code>__int128</code> type, yet the ABI  spec does not document it</p>",
        "id": 172965202,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523071
    },
    {
        "content": "<p>that would be a bug fix</p>",
        "id": 172965203,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523079
    },
    {
        "content": "<p>ABI specs aren't a document that compilers implement, ABI specs are a document that attempt to document what some compiler on a platform does, so that other compilers can work with it</p>",
        "id": 172965244,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523124
    },
    {
        "content": "<p>C ABI breaks are done when you ended up in a shitty situation by accident, not something to willingly walk into as \"fine\"</p>",
        "id": 172965251,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523158
    },
    {
        "content": "<p>clang and gcc on the target do the sane thing</p>",
        "id": 172965252,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523172
    },
    {
        "content": "<p>msvc doesn't support the use case at all, doing what clang and gcc do is fine</p>",
        "id": 172965255,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523183
    },
    {
        "content": "<p>that's the only ABI that exist for <code>__int128</code> on the target</p>",
        "id": 172965262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523193
    },
    {
        "content": "<p>Microsoft documenting and implementing a different ABI for it would be doing the shitty thing</p>",
        "id": 172965265,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523205
    },
    {
        "content": "<p>is their target, if they want to break it, then we can't do anything about that</p>",
        "id": 172965269,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523216
    },
    {
        "content": "<p>clang and gcc would need a breaking change there as well, such is life</p>",
        "id": 172965273,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523229
    },
    {
        "content": "<p>That is a good point I guess</p>",
        "id": 172965314,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523248
    },
    {
        "content": "<p>its an unfortunate situation to be in, we should open a microsoft bug, and instead of asking for msvc to implement __int128, just ask them to document the ABI of the type</p>",
        "id": 172965325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523298
    },
    {
        "content": "<p>if the spec doesn't mention it, the spec has a bug, it doesn't matter that msvc doesn't support it</p>",
        "id": 172965338,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523315
    },
    {
        "content": "<p>other compilers for the target do, and they should be able to agree on the ABI</p>",
        "id": 172965342,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523335
    },
    {
        "content": "<p>all other sane ABI documents for 64-bit targets document this as well</p>",
        "id": 172965343,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523347
    },
    {
        "content": "<p>But backtracking a little, why do we want i128 ffi safety on the msvc targets anyway when it can't be used with msvc code? Why not treat the windows-msvc triples as not having __int128 (which is mostly true)? Does any user ask for compatibility with gcc/clang ms_abi compatibility for this type?</p>",
        "id": 172965344,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523361
    },
    {
        "content": "<blockquote>\n<p>But backtracking a little, why do we want i128 ffi safety on the msvc targets anyway when it can't be used with msvc code?</p>\n</blockquote>\n<p>To use it with clang or gcc.</p>",
        "id": 172965435,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523533
    },
    {
        "content": "<p>you can use clang via clang-cl.exe to compile for msvc targets, and you can use <code>__int128</code> there</p>",
        "id": 172965442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523549
    },
    {
        "content": "<p>Also, to use it with other Rust code that uses <code>i128</code>, like plugins, dlls, etc.</p>",
        "id": 172965454,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523578
    },
    {
        "content": "<p>I know that is possible. But does anyone ask for that?</p>",
        "id": 172965457,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523585
    },
    {
        "content": "<p>For that target specifically</p>",
        "id": 172965501,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523618
    },
    {
        "content": "<p>Most bugs are about \"why can't i use <code>i128</code> on FFI\", we haven't surveyed what people wanted to do with it</p>",
        "id": 172965502,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523626
    },
    {
        "content": "<p>There are obviously no libraries compiled with <code>msvc</code> that use <code>i128</code></p>",
        "id": 172965515,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523679
    },
    {
        "content": "<p>but it is trivial to use gcc or clang from visual studio nowadays, and a lot of people prefer that, so I wouldn't assume anything without doing a survey of usecases</p>",
        "id": 172965531,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523711
    },
    {
        "content": "<p>Right but there will always be many targets where i128 can't be ffi safe because there's no C ABI for it in any compiler for the platform, so \"I want to use i128 in cross platform rust-rust C-ABI communication\" can't be supported anyway</p>",
        "id": 172965573,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523727
    },
    {
        "content": "<p>i128 in ffi is unfortunately going to be a platform specific affair</p>",
        "id": 172965576,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523756
    },
    {
        "content": "<p>For me, personally, I think that \"FFI-safety\" means we provide the type an ABI that can be used to interface with other C code compiled for the platform</p>",
        "id": 172965580,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523760
    },
    {
        "content": "<p>that doesn't mean that all compilers for a platform support everything, or that they support the same thing in the same way</p>",
        "id": 172965589,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523788
    },
    {
        "content": "<p>it just means that it is possible to write code that relies on the ABI of the type</p>",
        "id": 172965592,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523801
    },
    {
        "content": "<p>if you are writing msvc code that needs to interface with rust i128, you might be able to match its ABI by using a <code>struct __int128 { int64_ hi, lo; };</code> to interface with it.</p>",
        "id": 172965638,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523855
    },
    {
        "content": "<p>If multiple compilers implement the corresponding C type differently, we have a problem in that we need to pick which one we're compatible with. Which may mean refusing to choose, as we do so far re: the interaction of repr(align) and repr(packed)</p>",
        "id": 172965640,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523863
    },
    {
        "content": "<p>yep, there we have multiple compilers doing it all in different ways</p>",
        "id": 172965648,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523896
    },
    {
        "content": "<p>IIRC msvc supports it, gcc does something different, and clang does what gcc does</p>",
        "id": 172965661,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523918
    },
    {
        "content": "<p>that's imo a gcc and clang bug that should be fixed</p>",
        "id": 172965663,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523930
    },
    {
        "content": "<p>i don't know if we actually opened the bugs</p>",
        "id": 172965667,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523939
    },
    {
        "content": "<p>And that's also a risk that we'll end up in that situation with __int128</p>",
        "id": 172965668,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523939
    },
    {
        "content": "<p>the situation is slightly different as argued above</p>",
        "id": 172965675,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523961
    },
    {
        "content": "<p>But if we rush ahead now and claim i128 is ffi safe on that platform we won't have the option of refusing to choose</p>",
        "id": 172965715,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565523967
    },
    {
        "content": "<p>if we want to make <code>i128</code> ffi-safe on the platform, we only have one option, as opposed to 2</p>",
        "id": 172965720,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565523991
    },
    {
        "content": "<p>for all we know, microsoft might never support it, so it might never be an issue</p>",
        "id": 172965724,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524003
    },
    {
        "content": "<p>we can open a microsoft documentation bug for their abi</p>",
        "id": 172965734,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524025
    },
    {
        "content": "<p>they support clang-cl, and clang-cl supports <code>__in128</code></p>",
        "id": 172965737,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524035
    },
    {
        "content": "<p>Once again I am talking about the <em>possibility</em> that msvc adds support incompatible with gcc</p>",
        "id": 172965740,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524042
    },
    {
        "content": "<p>sure, that's a posibility</p>",
        "id": 172965746,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524061
    },
    {
        "content": "<p>we can provide a <code>x86_64-pc-windows-msvc2020</code> target for that posibility</p>",
        "id": 172965748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524077
    },
    {
        "content": "<p>or a flag, or nothing</p>",
        "id": 172965788,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524086
    },
    {
        "content": "<p>I'm repeating myself but that would really fucking suck!!</p>",
        "id": 172965792,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524101
    },
    {
        "content": "<p>Let's please not risk that</p>",
        "id": 172965794,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524113
    },
    {
        "content": "<p>with my libc maintainer hat on, all platforms break their ABI all the time</p>",
        "id": 172965798,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524125
    },
    {
        "content": "<p>we just do nothing and hope for the best</p>",
        "id": 172965799,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524137
    },
    {
        "content": "<p>is that bad? sure, the right solution is platform ABI versioning</p>",
        "id": 172965806,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524146
    },
    {
        "content": "<p>And it's bad enough every time, so let's not risk even more breaks</p>",
        "id": 172965807,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524147
    },
    {
        "content": "<p>we can not provide FFI-safety for the type for windows msvc targets</p>",
        "id": 172965820,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524177
    },
    {
        "content": "<p>but that has its downsides too</p>",
        "id": 172965824,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524187
    },
    {
        "content": "<p>Once again let's check if any living person is actually affected by those hypothetical downsides</p>",
        "id": 172965874,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524215
    },
    {
        "content": "<p>Every person reading its docs would need to read the line \"<strong>warning</strong>: this type is not FFI safe for targets x,y,z,w,\"</p>",
        "id": 172965877,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524251
    },
    {
        "content": "<p>We need that <em>anyway</em>, we're just talking about adding one more entry to that list</p>",
        "id": 172965888,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524283
    },
    {
        "content": "<p>i would provide FFI safety for all targets</p>",
        "id": 172965891,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524298
    },
    {
        "content": "<p>i128 can't reasonably be ffi safe on most (all?) 32 bit targets</p>",
        "id": 172965893,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524302
    },
    {
        "content": "<p>including 32-bit targets</p>",
        "id": 172965895,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524303
    },
    {
        "content": "<p>Even by your definition above</p>",
        "id": 172965899,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524311
    },
    {
        "content": "<p>no C compiler for the target supports it, so we can do whatever we want</p>",
        "id": 172965941,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524326
    },
    {
        "content": "<p>if a C compiler wants to allow it, we can ask them to be compatible with what we are already doing</p>",
        "id": 172965945,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524344
    },
    {
        "content": "<p>if we start doing it, we can just add what we are doing to the 32-bit abi specs of the platforms</p>",
        "id": 172965949,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524378
    },
    {
        "content": "<p>FFI safety = improper_ctypes = a lint to prevent people from shooting themselves in the foot with C level interop</p>",
        "id": 172965952,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524384
    },
    {
        "content": "<p>It's not a catch all for things whose ABI rustc guarantees!</p>",
        "id": 172965957,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524397
    },
    {
        "content": "<p>We may want that too but it's different</p>",
        "id": 172965960,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524411
    },
    {
        "content": "<p>then the lint should only apply to <code>extern \"C\"</code></p>",
        "id": 172965961,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524413
    },
    {
        "content": "<p>but it currently applies to all <code>extern _</code>s</p>",
        "id": 172965965,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524422
    },
    {
        "content": "<p>I don't see your point</p>",
        "id": 172966008,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524443
    },
    {
        "content": "<p>All the stable ABIs the lint applies to are C ABIs</p>",
        "id": 172966015,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524460
    },
    {
        "content": "<p>In any case all the people who've filed bugs asking why i128 is not ffi safe were using it with extern \"C\"</p>",
        "id": 172966029,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524523
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=315d5078916980d2389e8c317983f4e4\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=315d5078916980d2389e8c317983f4e4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=315d5078916980d2389e8c317983f4e4</a></p>",
        "id": 172966077,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524595
    },
    {
        "content": "<p>lol</p>",
        "id": 172966085,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524618
    },
    {
        "content": "<p>I've never used an <code>extern \"ABI\"</code> for which the improper_ctypes lint has not triggered, ever</p>",
        "id": 172966093,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524625
    },
    {
        "content": "<p>anyways, this is another discussion</p>",
        "id": 172966099,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524638
    },
    {
        "content": "<p>extern \"Rust\" blocks are practically impossible to use safely anyway</p>",
        "id": 172966103,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524650
    },
    {
        "content": "<p>I think that if an ABI spec does not mention a type, and its a primitive type that's reasonable to use on FFI, like a 128-bit integer, and no compilers on the target support it, we can ask the ABI spec to define an ABI for the type, and implement it</p>",
        "id": 172966136,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524683
    },
    {
        "content": "<p>for 32-bit linux that's as easy as sending a PR to the spec and starting a discussion about the semantics</p>",
        "id": 172966156,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524709
    },
    {
        "content": "<p>even if C doesn't have a type, it should be possible to write a C struct that interfaces with the type</p>",
        "id": 172966168,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524750
    },
    {
        "content": "<p>we have done this for things like <code>repr(C)</code> enums</p>",
        "id": 172966170,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524759
    },
    {
        "content": "<p>where C doesn't have enums</p>",
        "id": 172966172,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524768
    },
    {
        "content": "<p>You're welcome to ask ABI authors who mostly only care about C to add non-C feature but I am not holding my breath for it to happen everywhere</p>",
        "id": 172966177,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524777
    },
    {
        "content": "<blockquote>\n<p>even if C doesn't have a type, it should be possible to write a C struct that interfaces with the type</p>\n</blockquote>\n<p>This is not always obviously possible depending on how you defined the i128 ABI and what the ABI for aggregates looks like</p>",
        "id": 172966232,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524825
    },
    {
        "content": "<p>why not? if the abi doesn't have an ABI for <code>__int128</code>, we can define our <code>i128</code> as some C struct, allowing this</p>",
        "id": 172966253,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565524894
    },
    {
        "content": "<p>Sure you can define the ABI of i128 accordingly but you have to explicitly take care to ensure it</p>",
        "id": 172966267,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524922
    },
    {
        "content": "<p>In any case</p>",
        "id": 172966293,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524929
    },
    {
        "content": "<p>This idea (lobbying all ABI specs) is a huge amount of work and won't get us coverage of all platforms any time soon (if ever) so IMO the only sensible thing is to either make peace with platform dependent ffi safety or not make it ffi safe anywhere</p>",
        "id": 172966307,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565524991
    },
    {
        "content": "<p>By the way: if we go with \"ffi safe on a subset of platforms\" then a great way to find out if anyone needs it to be ffi safe on 64b msvc is to not include it in the list at first and wait for an issue requesting it. Then we can make a much more informed decision than right now.</p>",
        "id": 172966503,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565525371
    },
    {
        "content": "<p>that's a good point</p>",
        "id": 172966868,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565526056
    },
    {
        "content": "<p>The lobbying idea is an active way to make sure it works everywhere</p>",
        "id": 172966949,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565526235
    },
    {
        "content": "<p>but at the end of the day is up to the platform to decide what to do</p>",
        "id": 172966990,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565526260
    },
    {
        "content": "<p>we can have the warning for <code>i128</code> say that the platform abi doesn't specify what to do, and document what Rust does</p>",
        "id": 172966993,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565526297
    },
    {
        "content": "<p>on windows that would be doing what clang and gcc do</p>",
        "id": 172967001,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565526310
    },
    {
        "content": "<p>that is, the warning is orthogonal to the implementation that we provide</p>",
        "id": 172967007,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565526351
    },
    {
        "content": "<p>we can warn that the abi we provide for the type isn't stable, but implement the type in a sane and documented way</p>",
        "id": 172967048,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565526370
    },
    {
        "content": "<p>This is RFC material.</p>",
        "id": 172967899,
        "sender_full_name": "nagisa",
        "timestamp": 1565527983
    },
    {
        "content": "<p>Just sayin'.</p>",
        "id": 172967907,
        "sender_full_name": "nagisa",
        "timestamp": 1565528000
    },
    {
        "content": "<p>The fact that you have a 100 comment back and forth shoul’ve made it pretty obvious.</p>",
        "id": 172967911,
        "sender_full_name": "nagisa",
        "timestamp": 1565528026
    }
]