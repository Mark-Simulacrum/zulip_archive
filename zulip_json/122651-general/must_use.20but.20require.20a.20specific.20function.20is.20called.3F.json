[
    {
        "content": "<p>I have an API sort of similar to <code>File</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">do_things</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// This function must be called; `drop()` panics.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">end</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Is there a way to get a compiler warning if <code>end()</code> isn't called? I tried <code>must_use</code>, but the warning goes away if you call <code>.do_things()</code> which isn't what I want.</p>",
        "id": 213683468,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602988002
    },
    {
        "content": "<p>this is not quite the same as <a href=\"#narrow/stream/122651-general/topic/Opt-in.20guaranteed.20destructors\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Opt-in.20guaranteed.20destructors</a> because I don't need it to be enforced by the compiler, I just want a lint</p>",
        "id": 213683542,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602988150
    },
    {
        "content": "<p>(also this isn't Drop)</p>",
        "id": 213683546,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602988158
    },
    {
        "content": "<p>If you can make all <code>S</code> methods take <code>self</code> and return <code>Self</code>, you can get <code>must_use</code> effects everywhere.</p>",
        "id": 213684716,
        "sender_full_name": "cuviper",
        "timestamp": 1602990346
    },
    {
        "content": "<p>oh that's clever</p>",
        "id": 213684769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602990417
    },
    {
        "content": "<p>this is not actually <em>my</em> API so I'm not sure if the owner wants that change, but clever</p>",
        "id": 213684776,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602990437
    },
    {
        "content": "<p>Could be <code>#[does_not_use]</code></p>",
        "id": 213697568,
        "sender_full_name": "isHavvy",
        "timestamp": 1603012773
    },
    {
        "content": "<p>How come <em>this isn't <code>Drop</code></em> and yet <em><code>drop()</code> panics</em>?</p>\n<p>One option, but is rather to <em>force</em> the user into calling specific closing functions, is to use a callback pattern with a return type that proves the <code>end</code> method was called:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">CalledEnd</span><span class=\"p\">(());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// private</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">with_new</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">CalledEnd</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">end</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">CalledEnd</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...;</span>\n<span class=\"w\">        </span><span class=\"n\">CalledEnd</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>It is not <em>guaranteed</em> the right <code>end()</code> is called (unless you start using generative lifetimes), but as a \"strong lint\" this pattern can be quite powerful</p>",
        "id": 213701878,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603019685
    },
    {
        "content": "<p>Yeah, I found your internals post from a while back <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> it works but it's a little invasive.</p>\n<blockquote>\n<p>How come this isn't drop</p>\n</blockquote>\n<p>It returns an error that has to be handled.</p>",
        "id": 213704418,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603024351
    }
]