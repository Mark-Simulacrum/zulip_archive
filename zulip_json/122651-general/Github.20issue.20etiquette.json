[
    {
        "content": "<p>Hi everyone, I'm curious about the status of a particular feature called <code>slice_ptr_len</code> (<a href=\"https://github.com/rust-lang/rust/issues/71146\">https://github.com/rust-lang/rust/issues/71146</a>). It's been implemented on nightly, but currently a stabilization PR is blocked by another open issue. Its last update regarding this topic was in July 2020. What is the best way for me to reach out to the people involved in the github issue? I'm curious to learn if I could help in some way, if that is possible. Is the github tracking issue the right place for that or is there a better place for these inquiries? Thank you!</p>",
        "id": 231949839,
        "sender_full_name": "Pointerbender",
        "timestamp": 1616758499
    },
    {
        "content": "<p>Depends on the question! Github is usually fine. Personally, I would ask in</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/71146\">#71146</a> to discuss whether the stabilization really needs to be blocked by <a href=\"https://github.com/rust-lang/rust/issues/73987\">#73987</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/73987\">#73987</a> if we want to come to a conclusion regarding that ticket, thus solving the potential blocker</li>\n</ul>\n<p>And I think I'll do the latter right now, as I implemented that feature.</p>",
        "id": 231983789,
        "sender_full_name": "NeoRaider",
        "timestamp": 1616772407
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"294290\">@NeoRaider</span> ! And also thank you for implementing this feature, I'm very excited about it! :D</p>",
        "id": 231992602,
        "sender_full_name": "Pointerbender",
        "timestamp": 1616775592
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 232002863,
        "sender_full_name": "marmeladema",
        "timestamp": 1616779404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400735\">@WonderConstant</span> I think in the case of this feature, the ball is with the libs team. I am concerned that stabilizing things as-is could be confusing, but it is up to t-libs to decide about the trade-off here.</p>",
        "id": 232110596,
        "sender_full_name": "RalfJ",
        "timestamp": 1616871732
    },
    {
        "content": "<p>hence paging <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs</span></p>",
        "id": 232110618,
        "sender_full_name": "RalfJ",
        "timestamp": 1616871767
    },
    {
        "content": "<p>Interesting issue. I'm not very concerned about ptr::len() here though. Someone doing <code>(*p).data</code> on a pointer that can't safely be used as a <code>&amp;</code> is probably very careful already, and it's clear enough that in <code>(*p).data.len()</code>, <code>.len()</code> is called on <code>data</code>, not a raw pointer to <code>data</code>.</p>",
        "id": 232112044,
        "sender_full_name": "Mara",
        "timestamp": 1616873087
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> or am i missing some other more subtle issue here?)</p>",
        "id": 232112263,
        "sender_full_name": "Mara",
        "timestamp": 1616873330
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> .  I'm curious to how this plays out and very much like the way you think and explain about this topic (especially the part about places vs values I found very insightful). In case more time is needed for more careful consideration for <code>*const T</code> and <code>*mut T</code>, just stabilizing <code>NonNull::&lt;T&gt;::len()</code> would also be helpful  for my use case (this indirectly makes length for all pointers available through <code>NonNull::new_unchecked(ptr).len()</code>, as long as these aren't null pointers, which covers a lot of use cases already).</p>",
        "id": 232116049,
        "sender_full_name": "Pointerbender",
        "timestamp": 1616876764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/122651-general/topic/Github.20issue.20etiquette/near/232112044\">said</a>:</p>\n<blockquote>\n<p>Interesting issue. I'm not very concerned about ptr::len() here though. Someone doing <code>(*p).data</code> on a pointer that can't safely be used as a <code>&amp;</code> is probably very careful already, and it's clear enough that in <code>(*p).data.len()</code>, <code>.len()</code> is called on <code>data</code>, not a raw pointer to <code>data</code>.</p>\n</blockquote>\n<p>To me this makes little sense, you cannot call <code>.len</code> on <code>data</code> as <code>data</code> has type <code>[_]</code>, not <code>&amp;[_]</code></p>",
        "id": 232116531,
        "sender_full_name": "RalfJ",
        "timestamp": 1616877279
    },
    {
        "content": "<p>so the compiler is inserting an <code>&amp;</code> here and thereby introducing assumptions the programmer did not make explicit and might not intend</p>",
        "id": 232116554,
        "sender_full_name": "RalfJ",
        "timestamp": 1616877306
    },
    {
        "content": "<p>and of course there's a back-compat concern -- if we want to change method resolution in the future to use the raw ptr method here, could this break programs or change their behavior?</p>",
        "id": 232116589,
        "sender_full_name": "RalfJ",
        "timestamp": 1616877332
    },
    {
        "content": "<p>I don't think I'd ever want to implicitly use raw ptr methods, raw ptrs are too special. Autoref should always use references.</p>\n<p>This would be another point for making place rules as strict as ref rules, as I suggested in <a href=\"#narrow/stream/213817-t-lang/topic/Alignment.20and.20raw.20pointer.20deref\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Alignment.20and.20raw.20pointer.20deref</a> : So autoref is always valid.</p>",
        "id": 232164923,
        "sender_full_name": "NeoRaider",
        "timestamp": 1616935776
    },
    {
        "content": "<blockquote>\n<p>This would be another point for making place rules as strict as ref rules, as I suggested in <a href=\"#narrow/stream/213817-t-lang/topic/Alignment.20and.20raw.20pointer.20deref\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Alignment.20and.20raw.20pointer.20deref</a> : So autoref is always valid.</p>\n</blockquote>\n<p>I don't see how that helps. The entire problem here is that it's not even clear that a place is being created!</p>",
        "id": 232166625,
        "sender_full_name": "RalfJ",
        "timestamp": 1616937562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Github.20issue.20etiquette/near/232116554\">said</a>:</p>\n<blockquote>\n<p>so the compiler is inserting an <code>&amp;</code> here and thereby introducing assumptions the programmer did not make explicit and might not intend</p>\n</blockquote>\n<p>how is that related to stabilizing ptr::len()? that's an entirely separate language/compiler issue, right?</p>",
        "id": 232176058,
        "sender_full_name": "Mara",
        "timestamp": 1616947905
    },
    {
        "content": "<p>it's related in that <code>ptr::len</code> makes it more likely that would would write this code, trying to call the raw ptr method</p>",
        "id": 232179851,
        "sender_full_name": "RalfJ",
        "timestamp": 1616951724
    },
    {
        "content": "<p>(In case this causes confusion, I changed my username from WonderConstant to Pointerbender. Someone else already registered my previous username on Reddit, so I chose a new one to be consistent through social media, just FYI :) )</p>",
        "id": 232586596,
        "sender_full_name": "Pointerbender",
        "timestamp": 1617195899
    }
]