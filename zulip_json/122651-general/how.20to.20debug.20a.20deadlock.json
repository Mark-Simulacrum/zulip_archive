[
    {
        "content": "<p>Hi, I have a multithreded server which receives binary data from some clients, parse them in a dedicated thread per client then sends them to the main thread using <code>flume</code> for aggregation. </p>\n<p>The server works fine under small load but seems to deadlock under heavy load.</p>\n<p>I think it deadlocks as some client handling threads are stuck at 100% CPU, there is no activity on those threads visible in strace, the kernel reports bytes accumulating on the Rx side of the sockets and no change on the processed bytes if I disable the communication to the server.</p>\n<p>How can I investigate where id deadlocks?</p>\n<p>I tried gdb and perf but don't really understand how to interpret the data. </p>\n<p>Thank you</p>",
        "id": 235220322,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618854234
    },
    {
        "content": "<p>It doesn't always help, but if you attach <code>gdb</code> to the process you can see what each thread is doing. So if some threads are stuck waiting for something else, it would show up in the stack trace. But it sounds like some threads are busy processing incoming data and they never check in with the waiting threads, so it's not exactly a deadlock.</p>",
        "id": 235221042,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618854573
    },
    {
        "content": "<p>the thing is that there is no incoming data anylonger, the communication from the clients is disabled. The socket Rx bytes do not decrease so there is data to process but the thread does not read it it seems</p>",
        "id": 235223979,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618855794
    },
    {
        "content": "<p>gdb backtrace looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#0  0x000055906827d41d in ebmd::server::handle_ebm_stream_connection (stream=..., spec=..., tx=..., l=..., log_raw_events=false, _iias=...) at /home/bla/projects/ic/ebmd/src/server.rs:122\n#1  0x000055906829d31c in ebmd::server::start_ebm_stream_instance::{{closure}} () at /home/bla/projects/ic/ebmd/src/server.rs:75\n#2  std::sys_common::backtrace::__rust_begin_short_backtrace (f=...) at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:125\n#3  0x00005590682b99b1 in std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} () at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:474\n#4  &lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (self=..., _args=&lt;optimized out&gt;) at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:344\n#5  std::panicking::try::do_call (data=&lt;optimized out&gt;) at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:379\n#6  std::panicking::try (f=...) at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:343\n#7  std::panic::catch_unwind (f=...) at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:431\n#8  std::thread::Builder::spawn_unchecked::{{closure}} () at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:473\n#9  core::ops::function::FnOnce::call_once{{vtable-shim}} () at /home/bla/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227\n#10 0x00005590684a0b1a in &lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once () at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0/library/alloc/src/boxed.rs:1521\n#11 &lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once () at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0/library/alloc/src/boxed.rs:1521\n#12 std::sys::unix::thread::Thread::new::thread_start () at /rustc/2fd73fabe469357a12c2c974c140f67e7cdd76d0//library/std/src/sys/unix/thread.rs:71\n#13 0x00007f23a2288609 in start_thread (arg=&lt;optimized out&gt;) at pthread_create.c:477\n#14 0x00007f23a205a293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\n</code></pre></div>",
        "id": 235224200,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618855874
    },
    {
        "content": "<p>That means the thread that should process it is either:</p>\n<ul>\n<li>waiting on something else (and you can look at its stack trace to hopefully see on what)</li>\n<li>busy doing something (and you can see in the stack trace what is it doing)</li>\n</ul>",
        "id": 235224203,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618855877
    },
    {
        "content": "<p>the code looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    loop {\n        match reader.fill_buf() {\n            Ok(buffer) =&gt; {\n                if log_raw_events {\n                    info!(l, &quot;{} bytes received&quot;, buffer.len(); &quot;bytes&quot; =&gt; ?&amp;buffer[..]);\n                }\n                if buffer.len() == 0 {\n                    info!(l, &quot;peer disconnected&quot;);\n                    break;\n                }\n                let (n, records) = parser.parse(&amp;buffer[..]);\n                consumed = n;\n...\n</code></pre></div>\n<p>Line 122 is where the parse is called (<code> let (n, records) = parser.parse(&amp;buffer[..]);</code>)</p>",
        "id": 235224676,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618856057
    },
    {
        "content": "<p>so from the stack trace it looks like it's processing data but what data?</p>",
        "id": 235225345,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618856363
    },
    {
        "content": "<p>Is that one of the 100% CPU threads? And I guess you're also calling <code>reader.consume(consumed)</code> below?</p>",
        "id": 235225762,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618856536
    },
    {
        "content": "<p>yes, and yes</p>",
        "id": 235225937,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618856627
    },
    {
        "content": "<p>I guess a bug could be if I return 0 as consumed from the parser</p>",
        "id": 235226628,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618856920
    },
    {
        "content": "<p>then the same data would be sent to the parser again I guess</p>",
        "id": 235226654,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618856937
    },
    {
        "content": "<p>Yeah, you could add an <code>assert</code></p>",
        "id": 235227043,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618857089
    },
    {
        "content": "<p>Actually, that might not be so unlikely</p>",
        "id": 235227065,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618857101
    },
    {
        "content": "<p>I will add a printout</p>",
        "id": 235227324,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618857203
    },
    {
        "content": "<p>In general that doesn't sound like a dead-lock unless you have an unbounded spinlock somewhere, normally threads would sleep in a deadlock and wouldn't generate any load on the CPU. My bet is that in the loop bit you've provided, some case isn't handled or some branch entered that makes it loop around without doing any progress. It's probably a rare case if you only can catch it under heavy load.</p>",
        "id": 235227326,
        "sender_full_name": "destroycomputers",
        "timestamp": 1618857204
    },
    {
        "content": "<p>there is definitely something fishy in that loop, I added a printout and most of the time the parse gets incomplete data and returns 0. Looks like one of the clients is misbehaving. I need to dig into it more</p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span> and  <span class=\"user-mention\" data-user-id=\"406525\">@destroycomputers</span> for the help</p>",
        "id": 235231712,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618858994
    },
    {
        "content": "<p>I might have misunderstood how fill_buf works. I though that if I don't consume all the bytes then it will fill it up again so it will return the previously unconsumed bytes plus additional bytes read from the socket</p>\n<p>But reading the docs again I am not sure if that is the case: <code>Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty.</code></p>\n<p>then I wonder what is the purpose of fill_buf and consume if I need to implement additional buffering in the application </p>\n<p>Any clues?</p>",
        "id": 235237314,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618861440
    },
    {
        "content": "<p>I think you're only suppose to use it if you consume everything, but I might be wrong</p>",
        "id": 235237928,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618861705
    },
    {
        "content": "<p>BufReader's purpose is not to buffer an arbitrarily large number of bytes. It is to lessen the cost of many small reads.</p>",
        "id": 235237942,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1618861714
    },
    {
        "content": "<p>Yeah, if you don't make progress (don't call <code>.consume()</code>), then <code>.fill_buf()</code> may not make any new progress. Among other things, you have to take into account that the <code>ReadBuf</code> API wants to support fixed-size buffers: if you are able to handle infinitely-sized buffers (<em>e.g.</em>, by reallocating, such as when using a <code>Vec</code> or a <code>String</code>) then you need to pull stuff out of the inner buffer and mark it as <code>.consume()</code>d, so that the <code>ReadBuf</code> knows it can overwrite that area of memory.</p>",
        "id": 235237950,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618861716
    },
    {
        "content": "<p>The main reason for this whole design is that the one place where unbounded buffering makes sense is for the downstream user (that is, <em>you</em>); it would be quite inefficient if the intermediate layer also performed that level of heap-allocated-and-unbounded buffering for you to potentially still have to do the same</p>",
        "id": 235238275,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618861869
    },
    {
        "content": "<p>thanks everyone, now I know exactly where the problem is and how to solve it! I really appreciate the help!</p>",
        "id": 235240811,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1618862910
    },
    {
        "content": "<p>That being said, I could envision a <em>convenience</em> API being offered to help for cases such as yours. A generalization of <a href=\"https://doc.rust-lang.org/src/std/io/mod.rs.html#1758\">https://doc.rust-lang.org/src/std/io/mod.rs.html#1758</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">io</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Status</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Consumed</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Done</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">collect_with</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">BufRead</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Status</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r_buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">fill_buf</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">ErrorKind</span>::<span class=\"n\">Interrupted</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">continue</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r_buf_len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r_buf</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// try to avoid heap-allocation if caller never returns `Consumed(0)`</span>\n<span class=\"w\">            </span><span class=\"n\">r_buf</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">acc</span><span class=\"p\">.</span><span class=\"n\">extend_from_slice</span><span class=\"p\">(</span><span class=\"n\">r_buf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">acc</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Status</span>::<span class=\"n\">Done</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Status</span>::<span class=\"n\">Consumed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Buffer the data inside the Vec, so as to be able to `.consume()`</span>\n<span class=\"w\">                </span><span class=\"c1\">// from the inner buffer.</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">acc</span><span class=\"p\">.</span><span class=\"n\">extend_from_slice</span><span class=\"p\">(</span><span class=\"n\">r_buf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">r_buf_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Status</span>::<span class=\"n\">Consumed</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">r_buf_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">acc</span><span class=\"p\">.</span><span class=\"n\">drain</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7e11752e96d9fc9483670b5b2688d8c8\">Playground</a></li>\n</ul>",
        "id": 235240844,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618862928
    },
    {
        "content": "<p>There is something funny about that <code>loop</code>: it can be rewritten as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inner_consumed</span>: <span class=\"nc\">NonZeroUsize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* the whole `loop` body, kind of */</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">inner_consumed</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>By rewriting it as such, we have a \"proof\" that progress is made. And in order to write it, we need to prove that <code>r_buf</code> is non-empty (thus forcing us to consider that branch, which I had forgotten to do in my first suggestion), while also necessarily forcing us to branch on the value inside <code>Consumed</code>. Pretty slick <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=871009fedc7e693b42157c6c84eb52cc\">Playground</a></li>\n</ul>",
        "id": 235245646,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618865072
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> It also makes me realize that <code>r.consume()</code> should have been made to take a <code>NonZeroUsize</code> parameter too; it would have made that part of the API clearer (cc <span class=\"user-mention\" data-user-id=\"363601\">@Maximilian Hristache</span>)</p>",
        "id": 235246578,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618865493
    }
]