[
    {
        "content": "<p>Hello! How stable is the <code>Arc::as_ptr</code> method? As long as the strong_count is &gt;= than one (ie: there is still at least one Arc alive), the ptr value will be the same for all Arc's cloned? I was considering getting the pointer of the Arc, coercing to usize and using that value as an id to index in a <code>HashMap</code>, I would never actually de-reference that pointer, just it as an usize id. </p>\n<p>I've been reading about <code>Pin</code> but I am not sure I understand if that helps me or not.</p>",
        "id": 208101432,
        "sender_full_name": "marmeladema",
        "timestamp": 1598453320
    },
    {
        "content": "<p>Why do you want to do that? (It seems like it would work to me, but I am no expert.)</p>",
        "id": 208104508,
        "sender_full_name": "Eh2406",
        "timestamp": 1598454520
    },
    {
        "content": "<p>Agree with the \"why\". It sounds like you should just have an <code>AtomicUsize</code> or a thread-local usize. See <a href=\"https://stackoverflow.com/q/32935808/155423\">Generate sequential IDs for each instance of a struct</a></p>",
        "id": 208105217,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598454830
    },
    {
        "content": "<p>But AFAIK, it wouldn't be possible for the pointer to change because the Arc information is stored alongside it.</p>",
        "id": 208105481,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598454881
    },
    {
        "content": "<p>For a long lived program, how do you make sure id's are not re-used?</p>",
        "id": 208106593,
        "sender_full_name": "marmeladema",
        "timestamp": 1598455349
    },
    {
        "content": "<p>If you are worried about reuse, I'd think your example is less complete. If you allocate the Arc, deallocate it, then allocate another, it's possible that the memory allocator gives you the same address.</p>",
        "id": 208106994,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598455508
    },
    {
        "content": "<p>If I did my math right, on 64-bit, you could generate a new ID every nanosecond for 584.6 years.</p>",
        "id": 208107271,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598455614
    },
    {
        "content": "<p>on 32-bit, that's only 4 seconds. (man, exponents)</p>",
        "id": 208107624,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598455754
    },
    {
        "content": "<p>but</p>",
        "id": 208107700,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598455797
    },
    {
        "content": "<p>if this were keys to a hashmap, then you'd have things in the hashmap, presumably</p>",
        "id": 208107798,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598455820
    },
    {
        "content": "<p>and you'd run out of memory / address space well before you hit the end of the keys</p>",
        "id": 208107842,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598455841
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 208108462,
        "sender_full_name": "marmeladema",
        "timestamp": 1598456148
    },
    {
        "content": "<p>I'm using arc pointers into a hashmap in my own codebase for exactly this purpose, and I had issues with clashing keys due to deallocation, so now my hashmap stores <code>HashMap&lt;*const K, (Arc&lt;K&gt;, V)&gt;</code> where the <code>Arc&lt;K&gt;</code> is a clone of the pointer that was derived for the key. That keeps it alive (and pinned) as long as the key exists in the hashmap</p>",
        "id": 208125669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598464706
    },
    {
        "content": "<p>It would be nicer to store <code>HashMap&lt;Arc&lt;K&gt;, V&gt;</code> but this requires a special wrapper around the arc so that it gets the <code>Hash + Eq</code> implementation from the pointer instead of the underlying key type</p>",
        "id": 208125778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598464782
    },
    {
        "content": "<p>I'd follow <a href=\"https://stackoverflow.com/q/41035869/155423\">How to use a struct's member as its own key when inserting the struct into a map without duplicating it?</a></p>",
        "id": 208128463,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598466136
    },
    {
        "content": "<p>which, yes, means you need to implement <code>Hash</code> and <code>Eq</code> by delegating to the pointer</p>",
        "id": 208128524,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598466163
    }
]