[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I've just started using NixOS. I'd tried it one or two times before but didn't have the time to sink into working it all out. Do you have a <code>shell.nix</code> you use w/ rustc? I've thrown together something basic but it's probably solving things in less-than-idiomatic ways.</p>\n<p>For example, I found that unless I set <code>LD_LIBRARY_PATH=\"./build/x86_64-unknown-linux-gnu/stage1/lib\";</code> then running (a stage1) rustc manually wouldn't find the standard library.</p>",
        "id": 163890567,
        "sender_full_name": "davidtwco",
        "timestamp": 1555920643
    },
    {
        "content": "<p>For me <code>python x.py</code> \"just\" works, I don’t really fiddle with manually launching <code>stage1</code> any more</p>",
        "id": 163893612,
        "sender_full_name": "nagisa",
        "timestamp": 1555925232
    },
    {
        "content": "<p>for general rust development I just use the rust overlay <a href=\"https://github.com/mozilla/nixpkgs-mozilla/blob/master/rust-overlay.nix\" target=\"_blank\" title=\"https://github.com/mozilla/nixpkgs-mozilla/blob/master/rust-overlay.nix\">https://github.com/mozilla/nixpkgs-mozilla/blob/master/rust-overlay.nix</a></p>",
        "id": 163893618,
        "sender_full_name": "nagisa",
        "timestamp": 1555925255
    },
    {
        "content": "<p>Thanks, I'd seen that but hadn't had to use it yet.</p>",
        "id": 163893709,
        "sender_full_name": "davidtwco",
        "timestamp": 1555925376
    },
    {
        "content": "<p>Here is my <code>default.nix</code> I use for rustc: <a href=\"https://gist.github.com/rasendubi/2f5e6fc9f74295d518556c34c2f995b2\" target=\"_blank\" title=\"https://gist.github.com/rasendubi/2f5e6fc9f74295d518556c34c2f995b2\">https://gist.github.com/rasendubi/2f5e6fc9f74295d518556c34c2f995b2</a></p>",
        "id": 163923305,
        "sender_full_name": "Alexey Shmalko",
        "timestamp": 1555955986
    },
    {
        "content": "<p><code>env NIX_AFFINITY_HACK=0 SSL_CERT_FILE=/etc/ssl/certs/ca-bundle.crt nix-shell -E 'with import&lt;nixpkgs&gt;{};clangStdenv.mkDerivation{name=\"name\";hardeningDisable=[\"all\"];buildInputs=[ccache cmake fish file gdb libedit libxml2 ncurses ninja python27 ripgrep swig which];}' --run fish</code></p>",
        "id": 164237753,
        "sender_full_name": "eddyb",
        "timestamp": 1556261724
    },
    {
        "content": "<p>this is what I use</p>",
        "id": 164237754,
        "sender_full_name": "eddyb",
        "timestamp": 1556261730
    },
    {
        "content": "<p>this allows building even <code>lldb</code></p>",
        "id": 164237757,
        "sender_full_name": "eddyb",
        "timestamp": 1556261742
    },
    {
        "content": "<p>the <code>-E</code> string you can put in a <code>default.nix</code> file, if you want it to be nicer than my lazy setup</p>",
        "id": 164237810,
        "sender_full_name": "eddyb",
        "timestamp": 1556261766
    },
    {
        "content": "<p>whoa, I didn't realize <code>pkgs.mkShell</code> was a thing o_O</p>",
        "id": 164237823,
        "sender_full_name": "eddyb",
        "timestamp": 1556261807
    },
    {
        "content": "<p>oh yeah and my variant builds LLVM with <code>clang</code>, specifically</p>",
        "id": 164237901,
        "sender_full_name": "eddyb",
        "timestamp": 1556261890
    },
    {
        "content": "<p>I don't think I managed to ever get GCC to work, lol</p>",
        "id": 164237904,
        "sender_full_name": "eddyb",
        "timestamp": 1556261901
    },
    {
        "content": "<p>the <code>LD_LIBRARY_PATH</code> problem is not specific to NixOS AFAIK</p>",
        "id": 164237915,
        "sender_full_name": "eddyb",
        "timestamp": 1556261939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> you can install <code>rustup</code>, which 1. does automatic patching of downloaded binaries for you 2. works great for using a locally-built toolchain</p>",
        "id": 164237944,
        "sender_full_name": "eddyb",
        "timestamp": 1556261988
    },
    {
        "content": "<p>I never bothered to set up using rustup toolchains for my local builds, maybe I should.</p>",
        "id": 164238063,
        "sender_full_name": "davidtwco",
        "timestamp": 1556262122
    },
    {
        "content": "<p>yeah it's trivial nowadays :D</p>",
        "id": 164238097,
        "sender_full_name": "eddyb",
        "timestamp": 1556262133
    },
    {
        "content": "<p><code>nix-env -i rustup</code> followed by <code>rustup toolchain link rust-1-stage1 /home/eddy/Projects/rust-1/build/x86_64-unknown-linux-gnu/stage1</code></p>",
        "id": 164238105,
        "sender_full_name": "eddyb",
        "timestamp": 1556262162
    },
    {
        "content": "<blockquote>\n<p>oh yeah and my variant builds LLVM with <code>clang</code>, specifically</p>\n</blockquote>\n<p>I’ve been experimenting with this recently and had to go through a lot of effort to make the clang that was built could find the standard library headers (since the locally built clang wouldn’t have been wrapped).</p>",
        "id": 164238137,
        "sender_full_name": "davidtwco",
        "timestamp": 1556262234
    },
    {
        "content": "<p>What does <code>NIX_AFFINITY_HACK</code> do?</p>",
        "id": 164238192,
        "sender_full_name": "davidtwco",
        "timestamp": 1556262280
    },
    {
        "content": "<p>I’ve also been having a single spurious run-pass failure (I forget the test name off-hand) since switching my build server to NixOS. I’ve been able to safely ignore it so far since none of my changes have affected that test. It fails with a stack overflow I believe.</p>",
        "id": 164238260,
        "sender_full_name": "davidtwco",
        "timestamp": 1556262363
    },
    {
        "content": "<p>I have no failures over here</p>",
        "id": 164238287,
        "sender_full_name": "eddyb",
        "timestamp": 1556262385
    },
    {
        "content": "<p>it could be an <code>ulimit</code> thing</p>",
        "id": 164238291,
        "sender_full_name": "eddyb",
        "timestamp": 1556262393
    },
    {
        "content": "<p><code>NIX_AFFINITY_HACK</code>... works around... something</p>",
        "id": 164238297,
        "sender_full_name": "eddyb",
        "timestamp": 1556262403
    },
    {
        "content": "<p><a href=\"https://github.com/NixOS/nix/issues/2359\" target=\"_blank\" title=\"https://github.com/NixOS/nix/issues/2359\">https://github.com/NixOS/nix/issues/2359</a></p>",
        "id": 164238316,
        "sender_full_name": "eddyb",
        "timestamp": 1556262436
    },
    {
        "content": "<p>oh</p>",
        "id": 164238317,
        "sender_full_name": "eddyb",
        "timestamp": 1556262440
    },
    {
        "content": "<p>can I just remove it?</p>",
        "id": 164238318,
        "sender_full_name": "eddyb",
        "timestamp": 1556262443
    },
    {
        "content": "<p>I'm not using <code>nix run</code> lol</p>",
        "id": 164238322,
        "sender_full_name": "eddyb",
        "timestamp": 1556262455
    },
    {
        "content": "<p>I’ve been using <a href=\"https://github.com/target/lorri\" target=\"_blank\" title=\"https://github.com/target/lorri\">lorri</a> instead of <code>nix-shell</code> because that integrates with direnv and lets me avoid needing to manually add <code>zsh</code> to the <code>shell.nix</code> but also makes the project a gc root so I can run the garbage collection regularly without worrying about removing my development environment packages if I ever need to work offline and can’t download them.</p>",
        "id": 164238399,
        "sender_full_name": "davidtwco",
        "timestamp": 1556262545
    },
    {
        "content": "<p>I wasn’t aware of <code>nix run</code>.</p>",
        "id": 164238410,
        "sender_full_name": "davidtwco",
        "timestamp": 1556262576
    },
    {
        "content": "<p>lorri is written in Rust which is also nice.</p>",
        "id": 164238419,
        "sender_full_name": "davidtwco",
        "timestamp": 1556262596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I think you don't need <code>SSL_CERT_FILE</code> hack either.<br>\n<a href=\"https://github.com/NixOS/nixpkgs/issues/13744\" target=\"_blank\" title=\"https://github.com/NixOS/nixpkgs/issues/13744\">https://github.com/NixOS/nixpkgs/issues/13744</a></p>",
        "id": 164302471,
        "sender_full_name": "Alexey Shmalko",
        "timestamp": 1556317123
    },
    {
        "content": "<p>huh</p>",
        "id": 164334690,
        "sender_full_name": "eddyb",
        "timestamp": 1556370042
    },
    {
        "content": "<p>I can try removing it, I guess</p>",
        "id": 164334694,
        "sender_full_name": "eddyb",
        "timestamp": 1556370053
    },
    {
        "content": "<p>that would make it possible to use mostly just a <code>default.nix</code> with <code>nix-shell</code></p>",
        "id": 164334711,
        "sender_full_name": "eddyb",
        "timestamp": 1556370067
    }
]