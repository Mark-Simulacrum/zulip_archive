[
    {
        "content": "<p>Is the behavior of transmute when it comes to structs containing DSTs documented somewhere? Because I find the current behavior rather unintuitive, as demonstrated in this playground: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=17c9086a8ec0cac77fcedc5cee57f108\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=17c9086a8ec0cac77fcedc5cee57f108</a></p>",
        "id": 223778374,
        "sender_full_name": "Mahmoud Al-Qudsi",
        "timestamp": 1611438205
    },
    {
        "content": "<p>What happens here is that both <code>array</code> and <code>bytes</code> share the same metadata (slice length in this case) but for <code>array</code> there is an extra field that needs to be added to get the length of the pointed to object.</p>",
        "id": 223782372,
        "sender_full_name": "bjorn3",
        "timestamp": 1611442146
    },
    {
        "content": "<p>That's what I assumed, but my question is if it even makes sense for the result of transmute to differ from the original in size. Shouldn't the size of the non-dst fields in the array be subtracted from the reserved space rather than added to it?</p>",
        "id": 223784994,
        "sender_full_name": "Mahmoud Al-Qudsi",
        "timestamp": 1611445744
    },
    {
        "content": "<p>No, the metadata is just for the slice. If you were to use a trait object in both cases it wouldn't even be possible to change the size as you can't create a new vtable with a smaller size field.</p>",
        "id": 223799737,
        "sender_full_name": "bjorn3",
        "timestamp": 1611470654
    },
    {
        "content": "<p>Btw, you should try to add a <code>#[repr(C)]</code> annotation on your type: while a DST field technically has to be the trailing field, so in your case there is no issue in that regard, it will help if you make the type of that trailing field be generic. This is very useful to create stack-allocated defs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">DstArray</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">len</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nc\">Data</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DstArray</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Hack to circumvent the lack of `&lt;const N: u8&gt; â€¦ [_; N as usize]`</span>\n<span class=\"w\">    </span><span class=\"n\">__</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nc\">FitsInto</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"nc\">N</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So that, someone outside the module can write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DstArray</span>::<span class=\"n\">from</span><span class=\"p\">([</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst_arr</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">DstArray</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0ded1866511e8fa4a7fde37464e2d1a3\">Playground</a></li>\n</ul>\n<hr>\n<p>Finally, rather than transmuting pointers to DSTs, whose layout is not guaranteed, you should try to favor <code>as</code> casts:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>    pub\n    unsafe\n    fn from_ptr (ptr: *const u8)\n      -&gt; &amp;'static DstArray\n    {\n        let len = *ptr as usize;\n        // len may be zero, but we always have the length field itself\n<span class=\"gd\">-       let bytes: &amp;'_ [u8] = ::core::slice::from_raw_parts(ptr, len as usize + 1);</span>\n<span class=\"gd\">-       let array: &amp;'static DstArray = ::core::mem::transmute(bytes);</span>\n<span class=\"gi\">+       let bytes: *const [u8] = ::core::ptr::slice_from_raw_parts(ptr, len as usize);</span>\n<span class=\"gi\">+       let array: &amp;'_ DstArray = &amp;*(bytes as *const DstArray);</span>\n</code></pre></div>\n<ul>\n<li>(Regarding that cast, the idea is that <code>PtrTo&lt; [DstArray&lt;u8&gt;] &gt;</code> can be casted back and forth to/from <code>PtrTo&lt; DstArray&lt;[u8]&gt; &gt;</code> (and in that snippet I am abusing that <code>PtrTo&lt; [DstArray&lt;u8&gt;] &gt;</code> is the same as <code>PtrTo&lt; [u8] &gt;</code>), preserving the <code>ptr</code> and <code>len</code> fields. It's hacky, but it's the most guaranteed thing so far).</li>\n</ul>\n<p>And by doing it that way, we do notice that you were off by one in the length field of that fat pointer.</p>",
        "id": 223824774,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1611509214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> thanks for the detailed reply - especially for including that <code>FitsInto&lt;&gt;</code> magic, which I can find much use for (I was previously calling a const function and using <code>const_panic</code> to include an assert in there based off the length of the <code>const N: usize</code> parameter).</p>",
        "id": 223846616,
        "sender_full_name": "Mahmoud Al-Qudsi",
        "timestamp": 1611536823
    }
]