[
    {
        "content": "<p>Hello everyone!<br>\nJust tried this small code snippet <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f5501d69b691435bbdcf9c758de6111b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f5501d69b691435bbdcf9c758de6111b</a><br>\nand it made the playground segfault.<br>\nWhere / how such problems should be reported?</p>",
        "id": 230231355,
        "sender_full_name": "marmeladema",
        "timestamp": 1615720254
    },
    {
        "content": "<p>Oh but its rustc generating an invalid program here.<br>\nI tried locally with 1.50.0 and the generated binary segfault when executed :/</p>",
        "id": 230231494,
        "sender_full_name": "marmeladema",
        "timestamp": 1615720404
    },
    {
        "content": "<p>rust-lang/rust issue tracker in that case</p>",
        "id": 230231596,
        "sender_full_name": "nagisa",
        "timestamp": 1615720521
    },
    {
        "content": "<p>Yeah sorry, I originally thought it was a playground specific issue</p>",
        "id": 230231621,
        "sender_full_name": "marmeladema",
        "timestamp": 1615720558
    },
    {
        "content": "<p>I am pretty sure that this is caused by the <code>#[no_mangle] fn free()</code> overwriting the <code>free</code> function exported by the memory allocator and then interpreting the argument as <code>Option&lt;Box&lt;usize&gt;&gt;</code> which is dropped, thus causing <code>Box</code> to call <code>free</code> again recursively.</p>",
        "id": 230236812,
        "sender_full_name": "bjorn3",
        "timestamp": 1615726639
    },
    {
        "content": "<p>yeah, no_mangle is sadly a silent unsafe...</p>",
        "id": 230236897,
        "sender_full_name": "nagisa",
        "timestamp": 1615726770
    },
    {
        "content": "<p>Yeah I figured that out when I looked at the gdb backtrace :D</p>",
        "id": 230265569,
        "sender_full_name": "marmeladema",
        "timestamp": 1615753509
    },
    {
        "content": "<p>perhaps we should lint against \"safe\" <code>#[no_mangle] fn</code>? (allowing <code>unsafe fn</code>)</p>",
        "id": 230280291,
        "sender_full_name": "cuviper",
        "timestamp": 1615766703
    },
    {
        "content": "<p>I think it's a pending PR</p>",
        "id": 230280483,
        "sender_full_name": "simulacrum",
        "timestamp": 1615766885
    },
    {
        "content": "<p>hmm, although <code>#[no_mangle] static</code> exists too -- extra safety points for masking a function that way...</p>",
        "id": 230280499,
        "sender_full_name": "cuviper",
        "timestamp": 1615766920
    },
    {
        "content": "<p>Could llvm detect function symbol clashes?</p>",
        "id": 230281167,
        "sender_full_name": "marmeladema",
        "timestamp": 1615767719
    },
    {
        "content": "<p>it's more the linker's domain</p>",
        "id": 230282711,
        "sender_full_name": "cuviper",
        "timestamp": 1615769525
    },
    {
        "content": "<p>LLVM probably would notice if you declared and defined conflicting functions in the same compilation unit, but in this case I expect the use of the normal <code>free</code> is out of sight in std</p>",
        "id": 230282841,
        "sender_full_name": "cuviper",
        "timestamp": 1615769747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Playground.20segfault/near/230280483\">said</a>:</p>\n<blockquote>\n<p>I think it's a pending PR</p>\n</blockquote>\n<p>do you mean <a href=\"https://github.com/rust-lang/rust/pull/72209\">https://github.com/rust-lang/rust/pull/72209</a> ? that adds the lint to <code>unsafe_code</code>, but it's not on by default</p>",
        "id": 230282916,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615769830
    },
    {
        "content": "<p>We attempt to detect conflicting symbols to the point where its feasible to do so in rustc for a long long time now.</p>",
        "id": 230283215,
        "sender_full_name": "nagisa",
        "timestamp": 1615770185
    },
    {
        "content": "<p><code>unsafe_code</code> is sounding like a lint I want to enable pretty much everywhere ^^</p>",
        "id": 230283290,
        "sender_full_name": "nagisa",
        "timestamp": 1615770264
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/83111\">#83111</a></p>",
        "id": 230323456,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615804759
    },
    {
        "content": "<p>It's interesting that Miri can't catch anything in that code.</p>",
        "id": 230323629,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615804865
    },
    {
        "content": "<p>Miri doesn't run libc. It merely emulates it. It also intercepts <code>#[global_allocator]</code>. Combined this means that <code>free</code> is simply never called by miri.</p>",
        "id": 230323880,
        "sender_full_name": "bjorn3",
        "timestamp": 1615805009
    },
    {
        "content": "<p>Miri can't catch anything in this code either:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello World!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Even though, IIUC, Miri does emulate <code>write</code>: <a href=\"https://github.com/rust-lang/miri/blob/0788188c7b586289edb878f1f5b4e23700671978/src/shims/posix/fs.rs#L640\">https://github.com/rust-lang/miri/blob/0788188c7b586289edb878f1f5b4e23700671978/src/shims/posix/fs.rs#L640</a></p>",
        "id": 230326223,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615806148
    },
    {
        "content": "<p>Exactly, it emulates <code>write</code>, meaning that your <code>write</code> impl is never used.</p>",
        "id": 230326515,
        "sender_full_name": "bjorn3",
        "timestamp": 1615806303
    },
    {
        "content": "<p>Sadly, in practice, my <code>write</code> will take priority, otherwise it won't segfault. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 230327019,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615806558
    },
    {
        "content": "<p>The dynamic linker prefers symbols from the executable over symbols from dynamic libraries as the executable is loaded first.</p>",
        "id": 230327273,
        "sender_full_name": "bjorn3",
        "timestamp": 1615806654
    },
    {
        "content": "<p><code>LD_PRELOAD</code> is loaded even before the executable. This is what allows interposition using <code>LD_PRELOAD</code>.</p>",
        "id": 230327336,
        "sender_full_name": "bjorn3",
        "timestamp": 1615806687
    }
]