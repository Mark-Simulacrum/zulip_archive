[
    {
        "content": "<p>Hello, I'm trying to understand what's going on under the hood here (and how to fix it):</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n\n    let states: Vec&lt;&amp;str&gt; = vec![&quot;Alaska&quot;, &quot;Alabama&quot;, &quot;Arkansas&quot;];\n    for state in states {\n        println!(&quot;State: {}&quot;, state);\n    }\n\n    println!(&quot;Number of States: {}&quot;, states.len())\n}\n</code></pre></div>\n<p>The compiler complains with some of the following message:</p>\n<div class=\"codehilite\"><pre><span></span><code>move occurs because `states` has type `Vec&lt;&amp;str&gt;`, which does not implement the `Copy` trait\n[...]\nvalue borrowed here after move\n</code></pre></div>\n<p>I'm guessing I need to keep a reference to <code>states</code> but am not sure how, or how it's getting clobbered when I iterate.</p>",
        "id": 270306963,
        "sender_full_name": "Kurtis Mullins",
        "timestamp": 1643758290
    },
    {
        "content": "<p><code>for state in states</code> moves the <code>states</code> vec.</p>",
        "id": 270307182,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643758419
    },
    {
        "content": "<p>If you want to iterate over the <code>states</code> vec in a way that doesn't move/consume the container, you can try <code>for state in &amp;states</code>, which borrows instead of moves <code>states</code>.</p>",
        "id": 270307189,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643758424
    },
    {
        "content": "<p>Thank you! I did see that working when I gave it a shot. <br>\nWhat docs would I look at to understand why <code>for state in states</code> is actually modifying the variable <code>states</code>? (I assume the reference, not the actual vector/value)</p>",
        "id": 270307504,
        "sender_full_name": "Kurtis Mullins",
        "timestamp": 1643758584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476039\">Kurtis Mullins</span> has marked this topic as resolved.</p>",
        "id": 270308436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643759096
    },
    {
        "content": "<blockquote>\n<p>why <code>for state in states</code> is actually modifying the variable</p>\n</blockquote>\n<p>That's not really what's happening here.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is \"sugar\" for (approximately):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span>::<span class=\"n\">into_iter</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is \"sugar\" for (approximately):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span>::<span class=\"n\">into_iter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">states</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is <a href=\"https://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator\">documented under <code>std::iter</code></a>.</p>\n<p><code>::into_iter(value)</code> moves <code>value</code>: it takes ownership of it. You can see that in its definition: <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html#tymethod.into_iter\"><code>fn into_iter(self) -&gt; Self::IntoIter</code></a>. \"The variable <code>states</code>\" (very roughly) doesn't exist anymore in your scope once it's moved. On the other hand, <code>::into_iter(&amp;value)</code> moves the immediately-created reference to <code>value</code> (\"borrows <code>value</code>\" in common parlance), thus the <code>value</code> binding still exists in your current scope and can be used later for <code>.len()</code> (which is defined as <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.len\"><code>fn len(&amp;self) -&gt; usize</code></a> so it \"borrows <code>self</code>\").</p>\n<p>A different way to solve your issue would be to move the length computation before the move, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"s\">\"Northland\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Southland\"</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">states</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// borrows states</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// moves states</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"State: {state}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// states isn't usable anymore</span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Number of states: {len}\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// but len, which was pre-computed, is</span>\n</code></pre></div>",
        "id": 270312922,
        "sender_full_name": "FÃ©lix Saparelli",
        "timestamp": 1643761615
    }
]