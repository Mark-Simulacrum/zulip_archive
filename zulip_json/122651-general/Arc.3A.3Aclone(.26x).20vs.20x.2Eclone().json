[
    {
        "content": "<p>Is there some official (or unofficial) position on using <code>Arc::clone(&amp;x)</code> vs <code>x.clone()</code> ? I would like to ensure the std docs are consistent about that</p>",
        "id": 208499990,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1598815181
    },
    {
        "content": "<p>My understanding is that <code>Arc::clone(&amp;x)</code> is preferred so that it's clear that you're just cloning the reference and not the backing data.</p>",
        "id": 208500047,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598815238
    },
    {
        "content": "<p>I just looked at the <code>Arc</code> docs and it looks like nearly every example uses <code>Arc::clone(&amp;x)</code>.</p>",
        "id": 208500086,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598815319
    },
    {
        "content": "<p>Also see the <code>Rc</code> docs:</p>\n<blockquote>\n<p>The inherent methods of <code>Rc</code> are all associated functions, which means that you have to call them as e.g., <code>Rc::get_mut(&amp;mut value)</code> instead of <code>value.get_mut()</code>. This avoids conflicts with methods of the inner type <code>T</code>.</p>\n</blockquote>\n<p>And the <code>Rc</code> example for <code>Clone</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">five</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Rc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Rc</span>::<span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">five</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 208500145,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598815422
    },
    {
        "content": "<p>it's also mentioned somewhere on why all Arc methods are \"free\" (Arc::...)</p>",
        "id": 208502619,
        "sender_full_name": "DPC",
        "timestamp": 1598818928
    },
    {
        "content": "<p>not free but associative? or whatever you call them <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 208502626,
        "sender_full_name": "DPC",
        "timestamp": 1598818943
    },
    {
        "content": "<p>It looks like it's \"associated\":</p>\n<blockquote>\n<p>Arc&lt;T&gt; automatically dereferences to T (via the Deref trait), so you can call T's methods on a value of type Arc&lt;T&gt;. To avoid name clashes with T's methods, the methods of Arc&lt;T&gt; itself are associated functions, called using function-like syntax:</p>\n</blockquote>",
        "id": 208505880,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598824288
    },
    {
        "content": "<p>In this case, I think you mean <a href=\"https://doc.rust-lang.org/stable/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\">“fully qualified syntax”</a></p>",
        "id": 208508125,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598828125
    },
    {
        "content": "<p>Since <code>Clone::clone</code> is a method (and all methods are associated functions)</p>",
        "id": 208508171,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598828186
    },
    {
        "content": "<p>Perhaps that section of the docs should be changed to this then?</p>\n<blockquote>\n<p>To avoid name clashes with <code>T</code>'s methods, the methods of <code>Arc&lt;T&gt;</code> itself are associated functions, called using <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\">fully-qualified syntax</a>:</p>\n</blockquote>",
        "id": 208512312,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598835557
    },
    {
        "content": "<p>This doesn't really explain the situation with <code>x.clone()</code> though, since it is a trait implementation, not an associated function</p>",
        "id": 208512616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598836102
    },
    {
        "content": "<p>I don't think there is a reasonable argument that this can conflict with methods on the underlying type (unlike <code>Arc::get_mut()</code> for example), since it would be pathological to have a method called clone which is not a <code>Clone</code> implementation</p>",
        "id": 208512649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598836190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I've opened <a href=\"https://github.com/rust-lang/rust/issues/76138\">#76138</a></p>",
        "id": 208513908,
        "sender_full_name": "Noah Lev",
        "timestamp": 1598838451
    },
    {
        "content": "<p>Its actually desired that it clash and that it supersedes the usual clone. That way you get the lighter clone.</p>",
        "id": 208514680,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598839965
    },
    {
        "content": "<p>The reason I’ve always heard the explicit syntax recommended is so that you can easily visually audit that the light clone is being used</p>",
        "id": 208514689,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598840010
    },
    {
        "content": "<p>IIRC, it's also possible to do <code>Vec::clone(...)</code> on an <code>&amp;Arc&lt;Vec&lt;T&gt;&gt;</code>, in case you want to have the expensive clone.</p>",
        "id": 208514739,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598840090
    },
    {
        "content": "<p>Too bad the latter \"feature\" makes refactors more difficult.</p>",
        "id": 208515640,
        "sender_full_name": "nagisa",
        "timestamp": 1598841828
    },
    {
        "content": "<p>and so that's why you'd use <code>.clone()</code> for expensive things (so they automagically become cheap whenever possible) and <code>Arc::clone</code> so that they don’t accidentally become expensive</p>",
        "id": 208515718,
        "sender_full_name": "nagisa",
        "timestamp": 1598841877
    },
    {
        "content": "<p>but my remembering of the situation is similar to Jake's – its just a convention, not something that's strictly necessary.</p>",
        "id": 208515727,
        "sender_full_name": "nagisa",
        "timestamp": 1598841908
    },
    {
        "content": "<p>Static associated functions. For <code>Arc</code> and <code>Box</code> and other smart pointer friends, it's to not shadow the methods on their inner types.</p>",
        "id": 208519367,
        "sender_full_name": "isHavvy",
        "timestamp": 1598847694
    },
    {
        "content": "<p>Rust doesn't use the term \"static\" for them (that's more a legacy of other languages). All methods are also associated functions, but not all associated functions are methods. However, most people treat methods and associated functions as disjoint sets.</p>\n<p>Clone is a method (and thus also an associated function). It <strong>does</strong> shadow the inner method, so that's not why it's encouraged to be called like this.</p>",
        "id": 208554614,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598879734
    },
    {
        "content": "<p>I opened a PR to update the docs with x.clone() -&gt; (Arc|Rc)::clone(&amp;x) whenever possible to be more consistent with what’s used in the Arc/Rc docs</p>",
        "id": 208556202,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1598880646
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/api-guidelines/issues/200\">https://github.com/rust-lang/api-guidelines/issues/200</a></p>",
        "id": 208556783,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598880995
    }
]