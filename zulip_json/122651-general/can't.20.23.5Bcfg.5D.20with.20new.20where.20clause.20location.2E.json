[
    {
        "content": "<p>There's a fun issue with the new <code>where</code> clause location on GATs: you can't use something like <code>#[cfg(feature=\"nightly\")]</code> anymore to gate code to nightly-only because stable still tries to parse it and fails.</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=01c1cc5b8ea9db7c249e05d67f825540\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=01c1cc5b8ea9db7c249e05d67f825540</a></p>",
        "id": 274908401,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646953307
    },
    {
        "content": "<p>which I guess will persist until the code for the location change lands, so in 1.61?</p>",
        "id": 274909455,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646953988
    },
    {
        "content": "<p>could we make 1.60 not error on that case?</p>",
        "id": 274909481,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646954012
    },
    {
        "content": "<p>it's going to be very painful otherwise...</p>",
        "id": 274909510,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646954033
    },
    {
        "content": "<p>seems worth bringing up in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a></p>",
        "id": 274912424,
        "sender_full_name": "bstrie",
        "timestamp": 1646956041
    },
    {
        "content": "<p>as a workaround, you can put the impl in a cfg'ed macro, and an empty macro for the <code>cfg(not(...))</code> case</p>",
        "id": 274919009,
        "sender_full_name": "cuviper",
        "timestamp": 1646960587
    },
    {
        "content": "<p>it also seems to work if you move that into a new module file, and cfg your <code>mod foobar;</code></p>",
        "id": 274919253,
        "sender_full_name": "cuviper",
        "timestamp": 1646960766
    },
    {
        "content": "<p>(whereas inline <code>mod foobar { ... }</code> still gets parsed)</p>",
        "id": 274919285,
        "sender_full_name": "cuviper",
        "timestamp": 1646960810
    },
    {
        "content": "<p>Even shorter: have an identity macro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"> </span><span class=\"cp\">$($tt</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"cp\">$($tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">)}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(/* … */)]</span><span class=\"w\"> </span><span class=\"n\">emit</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"c1\">// …</span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"c1\">// …</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274988696,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1647011877
    },
    {
        "content": "<p>That's pretty neat! I tried to do something similar but I didn't think it could get simpler than <code>cfg_if!</code></p>",
        "id": 275143591,
        "sender_full_name": "fee1-dead",
        "timestamp": 1647163401
    }
]