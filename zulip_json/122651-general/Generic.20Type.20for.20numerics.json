[
    {
        "content": "<p>Hi, I am trying to use </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>:<span class=\"nb\">Copy</span>\n    <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">AddAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Div</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">DivAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Mul</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MulAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Rem</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">RemAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">SubAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"nb\">PartialOrd</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(one also without <code>Neg</code> for u* numbers)<br>\nas well as: (Vector &lt;T&gt;)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>:<span class=\"nb\">Copy</span>\n    <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">AddAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Div</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">DivAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Mul</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MulAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Rem</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">RemAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">SubAssign</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"nb\">PartialOrd</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is this possible?  Is there a numerics trait that ensures it is a number?</p>",
        "id": 262003542,
        "sender_full_name": "Israel",
        "timestamp": 1637276126
    },
    {
        "content": "<p>To be clear the error message from the Vec&lt;T&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>= note: upstream crates may add a new impl of trait `std::ops::$whatever` for type `std::vec::Vec&lt;_&gt;` in future versions\n</code></pre></div>",
        "id": 262003666,
        "sender_full_name": "Israel",
        "timestamp": 1637276177
    },
    {
        "content": "<p>The usual solution is to make your own marker trait and implement it for the types you want to allow.</p>",
        "id": 262003877,
        "sender_full_name": "nagisa",
        "timestamp": 1637276291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> can you point me to the docs, or give me the <strong>specific</strong> word to search for please!</p>",
        "id": 262003999,
        "sender_full_name": "Israel",
        "timestamp": 1637276381
    },
    {
        "content": "<p>The reason why this fails is because if all of these traits are implemented for <code>T = Vec&lt;_&gt;</code> then the first implementation would already be triggered, and your crate cannot assert that they won't be implemented in the future. An option is to use <code>specialization</code>, but that isn't a stable feature.</p>",
        "id": 262004194,
        "sender_full_name": "nagisa",
        "timestamp": 1637276445
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/50266085/is-there-a-trait-for-only-primitive-types-that-i-can-use-in-a-generic-function\">https://stackoverflow.com/questions/50266085/is-there-a-trait-for-only-primitive-types-that-i-can-use-in-a-generic-function</a> is also relevant for you.</p>",
        "id": 262004249,
        "sender_full_name": "nagisa",
        "timestamp": 1637276477
    },
    {
        "content": "<p>Thanks for the explanation!  I will try the num crate <code>Num</code> that may be what I am looking for</p>",
        "id": 262004544,
        "sender_full_name": "Israel",
        "timestamp": 1637276626
    },
    {
        "content": "<p>nope... same issue (well &amp;str counts as Num).  This may not be possible.</p>",
        "id": 262004969,
        "sender_full_name": "Israel",
        "timestamp": 1637276877
    },
    {
        "content": "<blockquote>\n<p>because if all of these traits are implemented for <code>T = Vec&lt;_&gt;</code></p>\n</blockquote>\n<p>... which will never happen because one of those traits is <code>Copy</code>, but that might need an explicit <code>impl !Copy</code> to be realized, despite the compiler knowing <code>Copy</code> ⊕ <code>Drop</code></p>",
        "id": 262005457,
        "sender_full_name": "cuviper",
        "timestamp": 1637277146
    },
    {
        "content": "<p>Or to generalize further just put !Copy on Drop?</p>",
        "id": 262005690,
        "sender_full_name": "The 8472",
        "timestamp": 1637277269
    },
    {
        "content": "<p>ooh</p>",
        "id": 262005712,
        "sender_full_name": "cuviper",
        "timestamp": 1637277284
    },
    {
        "content": "<p>like a negative supertrait?</p>",
        "id": 262005730,
        "sender_full_name": "cuviper",
        "timestamp": 1637277301
    },
    {
        "content": "<p>So <code>!Copy</code> should work?</p>",
        "id": 262005799,
        "sender_full_name": "Israel",
        "timestamp": 1637277342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>  uhh, something. I guess <code>impl !Copy for T where T: Drop</code> wouldn't be legal?</p>\n<p><span class=\"user-mention\" data-user-id=\"458644\">@Israel</span> negative trait bounds currently aren't allowed.</p>",
        "id": 262005900,
        "sender_full_name": "The 8472",
        "timestamp": 1637277390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"458644\">Israel</span> <a href=\"#narrow/stream/122651-general/topic/Generic.20Type.20for.20numerics/near/262004969\">said</a>:</p>\n<blockquote>\n<p>nope... same issue (well &amp;str counts as Num).  This may not be possible.</p>\n</blockquote>\n<p><code>&amp;str</code> doesn't <code>impl Num</code>, but I suppose the coherence error is that it could be added (in theory)</p>",
        "id": 262005964,
        "sender_full_name": "cuviper",
        "timestamp": 1637277437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> then if a type removed <code>Drop</code>, it would be a breaking change<br>\n(it's vaguely breaking already, but that's weird)</p>",
        "id": 262006123,
        "sender_full_name": "cuviper",
        "timestamp": 1637277560
    },
    {
        "content": "<p>Ahh... the compiler thinks it is.  So no <code>!Copy</code><br>\n<span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> is this something that cannot be done currently?</p>",
        "id": 262006131,
        "sender_full_name": "Israel",
        "timestamp": 1637277564
    },
    {
        "content": "<p>My goal was to use serde + my generics + fltk-form to read in a config file and build a UI.  I guess I will have to manually program more... boo.  Maybe this will work in the future!</p>",
        "id": 262006325,
        "sender_full_name": "Israel",
        "timestamp": 1637277669
    },
    {
        "content": "<p>hey, I just noticed <code>Iterator</code> in your trait list too -- what kind of numbers are these?!?</p>",
        "id": 262006338,
        "sender_full_name": "cuviper",
        "timestamp": 1637277678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Sorry copy paste error... I was trying to see if I could get a Vec by adding that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 262006404,
        "sender_full_name": "Israel",
        "timestamp": 1637277718
    },
    {
        "content": "<p>Is there something in std::cmp that only vectors use?<br>\nThere has to be something that makes Vectors unique</p>",
        "id": 262006602,
        "sender_full_name": "Israel",
        "timestamp": 1637277826
    },
    {
        "content": "<p>The current implementation of coherence won't allow you to do this no matter what kind of bounds you use, I believe.</p>",
        "id": 262006942,
        "sender_full_name": "nagisa",
        "timestamp": 1637277986
    },
    {
        "content": "<p>I think you need it the other way, something in your <code>impl&lt;T: ...&gt; Thing for T</code> that doesn't include <code>Vec&lt;_&gt;</code></p>",
        "id": 262006978,
        "sender_full_name": "cuviper",
        "timestamp": 1637278014
    },
    {
        "content": "<p>maybe a local trait would do?</p>",
        "id": 262006989,
        "sender_full_name": "cuviper",
        "timestamp": 1637278019
    },
    {
        "content": "<p>but then you might as well just <code>impl Thing for i8</code> etc anyway</p>",
        "id": 262007017,
        "sender_full_name": "cuviper",
        "timestamp": 1637278041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458644\">@Israel</span> FWIW, another approach to handle this \"would otherwise need specialization\" error is by having an extra parameter on the trait that distinguishes between the two impls. You'd just let it be inferred in practice, and in the impossible case of an overlap, you'd have type inference errors. Otherwise everything just works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_VEC</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// The extra `IS_VEC` param is the only non-pretty part</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_VEC</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thing</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"o\">&lt;</span><span class=\"n\">IS_VEC</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">]);</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n</code></pre></div>",
        "id": 262007127,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637278093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Good to know!<br>\n<span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> A local trait I make only for numbers?  Just a kind of stub/hacky/workaround?  I am wiling to try it if it will work</p>",
        "id": 262007152,
        "sender_full_name": "Israel",
        "timestamp": 1637278108
    },
    {
        "content": "<p>I'm not sure it will work</p>",
        "id": 262007222,
        "sender_full_name": "cuviper",
        "timestamp": 1637278154
    },
    {
        "content": "<p>You can use local traits that way, yes. They are treated specially.</p>",
        "id": 262007245,
        "sender_full_name": "nagisa",
        "timestamp": 1637278170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> That seems like what <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> is getting at<br>\n<span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> what do you suggest?</p>",
        "id": 262007268,
        "sender_full_name": "Israel",
        "timestamp": 1637278191
    },
    {
        "content": "<p>well I was saying if you manually <code>impl MyNum for i8</code> etc., and then use that for <code>impl&lt;T: MyNum&gt; Thing for T</code>, why not just do each <code>Thing</code> separately instead</p>",
        "id": 262007439,
        "sender_full_name": "cuviper",
        "timestamp": 1637278267
    },
    {
        "content": "<p>Kinda like this: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=6b5f7048aafef551eee1e1d1a9054ebe\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=6b5f7048aafef551eee1e1d1a9054ebe</a></p>",
        "id": 262007450,
        "sender_full_name": "nagisa",
        "timestamp": 1637278276
    },
    {
        "content": "<p>That's what I was saying in the first response ^^</p>",
        "id": 262007480,
        "sender_full_name": "nagisa",
        "timestamp": 1637278307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> That actually looks nice!  That seems reasonable.  I will try this</p>",
        "id": 262007552,
        "sender_full_name": "Israel",
        "timestamp": 1637278336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> is there a nice way to derive Debug to <code>Primitive</code>,  &lt;T:Primative + std::fmt::Debug&gt; causes the same issue.</p>",
        "id": 262008232,
        "sender_full_name": "Israel",
        "timestamp": 1637278827
    },
    {
        "content": "<p>Add it as a supertrait of <code>Primitive</code>.</p>",
        "id": 262008756,
        "sender_full_name": "nagisa",
        "timestamp": 1637279233
    },
    {
        "content": "<p>Wait a minute!  I think I got it.</p>",
        "id": 262008765,
        "sender_full_name": "Israel",
        "timestamp": 1637279242
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 262008772,
        "sender_full_name": "Israel",
        "timestamp": 1637279254
    },
    {
        "content": "<p>This mostly works, I will play with it for a while, I might be able to wrangle it to what I want.  I appreciate the time and help</p>",
        "id": 262009745,
        "sender_full_name": "Israel",
        "timestamp": 1637279949
    },
    {
        "content": "<p>Yeah, I think this will do what I need it to.  Thanks again</p>",
        "id": 262011422,
        "sender_full_name": "Israel",
        "timestamp": 1637281128
    },
    {
        "content": "<p>It is still picking up Vectors... <span aria-label=\"half frown\" class=\"emoji emoji-1f615\" role=\"img\" title=\"half frown\">:half_frown:</span></p>",
        "id": 262012378,
        "sender_full_name": "Israel",
        "timestamp": 1637281813
    },
    {
        "content": "<p>I continue to get unsatisfied trait bounds for Vec.  It was worth trying, though...</p>",
        "id": 262012919,
        "sender_full_name": "Israel",
        "timestamp": 1637282254
    }
]