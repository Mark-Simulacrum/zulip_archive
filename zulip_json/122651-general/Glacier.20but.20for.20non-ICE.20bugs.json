[
    {
        "content": "<p>Is there something like Glacier for bugs that aren't ICEs?</p>",
        "id": 266081697,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640477031
    },
    {
        "content": "<p>Wouldn't that just be a normal regression test?</p>",
        "id": 266087505,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640487120
    },
    {
        "content": "<p>No, I mean more like unfixed bugs that are run through to check if they're ever inadvertantly fixed</p>",
        "id": 266089034,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640490109
    },
    {
        "content": "<p>This would be very cool</p>",
        "id": 266089771,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1640491368
    },
    {
        "content": "<p>ui-tests already test compile error messages, i.e. failures to compile. there could be a subdirectory or marker comment for fix-me-this-should-actually-pass-one-day tests.</p>",
        "id": 266105957,
        "sender_full_name": "The 8472",
        "timestamp": 1640519031
    },
    {
        "content": "<p>\"known failure\" tests</p>",
        "id": 266116538,
        "sender_full_name": "cuviper",
        "timestamp": 1640536198
    },
    {
        "content": "<p>Would it be acceptable if I were to have these tests run behind a compiler flag, or should it be a separate project like Glacier?</p>",
        "id": 266118816,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640540031
    },
    {
        "content": "<p>Idk. What's the goal? Catch issues that can be closed or lucky incidental fixes? Or help compiler devs working on the issue.. or?</p>",
        "id": 266121598,
        "sender_full_name": "The 8472",
        "timestamp": 1640544005
    },
    {
        "content": "<p>I brought this up before a couple months ago and was going to play with it a bit</p>",
        "id": 266123430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640545675
    },
    {
        "content": "<p>I think they would be most helpful to catch incidental fixes</p>",
        "id": 266123478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640545736
    },
    {
        "content": "<p>but I can imagine that they could also better help even like \"error to ICE\" cases</p>",
        "id": 266123498,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640545763
    },
    {
        "content": "<p>or when diagnostics for bugs improve a bit</p>",
        "id": 266123502,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640545778
    },
    {
        "content": "<p>link to thread: <a href=\"#narrow/stream/122651-general/topic/Tests.20from.20open.20issues/near/260826162\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Tests.20from.20open.20issues/near/260826162</a></p>",
        "id": 266123692,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640546088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Agreed. The general purpose would be to find solved tickets and close them, while at the same time added whatever edge case triggered the bug to the test suite. This would allow us to get some really good edge-case testing for free. The only downside is that there should be some review of the test cases being added so that it doesn't restrict us to solutions that technically fix the problem, but add a considerable amount of tech debt to the codebase.</p>",
        "id": 266124679,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640547752
    },
    {
        "content": "<p>eh, imo, adding tests like these should be \"free\"; there should be minimal work beyond the actual test minimization to most encourage adding tests</p>",
        "id": 266124760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640547892
    },
    {
        "content": "<p>The review of \"is the solution added to fix a particular test actually a good one\" is better left elsewhere</p>",
        "id": 266124772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640547928
    },
    {
        "content": "<p>Fair enough, I guess the review of the solution should be in another part of the process</p>",
        "id": 266124780,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640547952
    },
    {
        "content": "<p>Yes</p>",
        "id": 266124781,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640547956
    },
    {
        "content": "<p>I mean, it's not like an important part of the review process <em>now</em> isn't \"it this really the best solution\"</p>",
        "id": 266124857,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640548059
    },
    {
        "content": "<p>I do still think this could be a useful idea to implement and experiment with</p>",
        "id": 266124916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640548179
    },
    {
        "content": "<p>I would second an MCP if someone else made one</p>",
        "id": 266124920,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640548195
    },
    {
        "content": "<p>implementation-wise, it would be negligible</p>",
        "id": 266124970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640548233
    },
    {
        "content": "<p>Really though, the different part of this is actually getting existing issue repros as tests</p>",
        "id": 266124977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640548277
    },
    {
        "content": "<p>I've been collecting a few since this morning, and essentially making compilable code except for the noted problem, and then just running rustc on each separate file. If one compiles it gives an .exe, and so the code checks for that generation</p>",
        "id": 266125246,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640548756
    },
    {
        "content": "<p>Wait, what?</p>",
        "id": 266126293,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640550418
    },
    {
        "content": "<p>Should just be able to add a new folder to <code>src/test</code> (or maybe in <code>src/test/ui</code>). And then just add tests to that with a <code>// check-fail</code> at the top (or <code>build-fail</code> if needed)</p>",
        "id": 266126301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640550478
    },
    {
        "content": "<p>Then will also need to add the right <code>//~ ERROR</code> annotations</p>",
        "id": 266126342,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640550494
    },
    {
        "content": "<p>I'm just collecting code snippets in a separate repo at the moment. Also how does one close an issue, since <a href=\"https://github.com/rust-lang/rust/issues/26186\">#26186</a> is resolved</p>",
        "id": 266126360,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640550573
    },
    {
        "content": "<p>Just make a PR with the test case</p>",
        "id": 266126753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640551277
    },
    {
        "content": "<p>It needs to be clear that the test is something that <strong>should</strong> pass, so it's treated as a good thing if it ever does. (As opposed to tests where we make sure they should fail.)</p>",
        "id": 266132945,
        "sender_full_name": "cuviper",
        "timestamp": 1640560979
    },
    {
        "content": "<p>Right</p>",
        "id": 266135559,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640564766
    },
    {
        "content": "<p>Tests with \"// FIXME: This should pass, but X, Y, Z, see issue #NNNN\" are very much appreciated.</p>",
        "id": 266160426,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640599016
    },
    {
        "content": "<p>I'm pretty sure we already have some of those, or at least had in the past.<br>\nI'm just not aware of any people volunteering to add them in a larger amount in the past.</p>",
        "id": 266160518,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1640599115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/Glacier.20but.20for.20non-ICE.20bugs/near/266123478\">said</a>:</p>\n<blockquote>\n<p>I think they would be most helpful to catch incidental fixes</p>\n</blockquote>\n<p>yeah, I just had one of these this morning, it was a welcome surprise: <a href=\"https://github.com/rust-lang/rust/issues/45939\">https://github.com/rust-lang/rust/issues/45939</a></p>",
        "id": 266183508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640621448
    },
    {
        "content": "<p>I feel like it hasn't been clear at all that \"FIXME\" tests are accepted/desired</p>",
        "id": 266191918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640627874
    },
    {
        "content": "<p>would be great to add that to the dev guide somewhere :)</p>",
        "id": 266195392,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640630811
    },
    {
        "content": "<p>I also feel like it would be best to make a dedicated directory for them</p>",
        "id": 266198999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640633791
    },
    {
        "content": "<p>What are the advantages/disadvantages of doing something external like glacier, vs. integrating it directly into the codebase and having it be optionally tested for?</p>",
        "id": 266199563,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640634256
    },
    {
        "content": "<p>If it's external, it's \"easier\" to add tests. If it's integrated, we can reusing the existing testing infra, there's more immediate feedback for contributors (e.g.: oh, this makes this other test pass - why is that), and it's easy to move a test to the proper place in the same PR that fixes it</p>",
        "id": 266200134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640634697
    },
    {
        "content": "<p>Also, tests run externally would probably only run nightly whereas integrated run every build</p>",
        "id": 266200223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640634756
    },
    {
        "content": "<p>(one question this does open up: should ICE issues also get integrated? probably)</p>",
        "id": 266200255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640634786
    },
    {
        "content": "<p>I think we get the best of both worlds if we have some git-ignored folder that gets run at the start of the testing suite. This would allow for people to have a working version of the repo with custom \"maybe this gets fixed\" scripts for a series of bugs they're working on, and would also then allow for an external script to dump a bunch more tests in there, where having those tests run all the time would be costly. (e.g. if we get 5000 scripts that have a 0.01% chance of getting incidentally fixed, they're probably not worth running all the time)</p>",
        "id": 266200828,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640635337
    },
    {
        "content": "<p>Currently anything git-ignored gets skipped, but a folder whose purpose is to be an exception  to that rule could always be made.</p>",
        "id": 266200852,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640635367
    },
    {
        "content": "<p>I don't think purposefully having a \"folder that gets tested locally, but doesn't get checked in\" is the right approach</p>",
        "id": 266201734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640636222
    },
    {
        "content": "<p>But you do bring up another good point: how often do we expect these tests will get incidentally fixed? If not often, maybe it's not worth the CI time to run them alongside regular tests</p>",
        "id": 266201766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640636260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/Glacier.20but.20for.20non-ICE.20bugs/near/266201766\">said</a>:</p>\n<blockquote>\n<p>But you do bring up another good point: how often do we expect these tests will get incidentally fixed? If not often, maybe it's not worth the CI time to run them alongside regular tests</p>\n</blockquote>\n<p>I still would find these super useful, it's not <em>that</em> uncommon for rustdoc bugs to get fixed by accident, and the CI time is very small compared to the time of actually building the compiler.</p>",
        "id": 266220006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640652408
    },
    {
        "content": "<p>yeah, considering what they're doing UI tests run damn fast. ~130 CPU-milliseconds  per test.</p>",
        "id": 266222116,
        "sender_full_name": "The 8472",
        "timestamp": 1640654772
    },
    {
        "content": "<p>I agree. I just wanted to explicitly state it, because it is something to consider</p>",
        "id": 266226884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640661132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451171\">@Patrick Poitras</span> would be interested in writing up a compiler MCP for this? (and maybe submitting some tests?) It would be nice to have someone push on this a bit, since it does seem like people would want this.</p>",
        "id": 266226912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640661185
    },
    {
        "content": "<p>I've wanted something like this for a while too. It helps with closing duplicate issues as well (once they're fixed).</p>",
        "id": 266227308,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640661773
    },
    {
        "content": "<p>E.g., <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> recently noticed some rustdoc issues (the oldest is <a href=\"https://github.com/rust-lang/rust/issues/45939\">#45939</a>) that were open but had been fixed months ago, and I in turn found one more. Having \"status quo tests\" (the form of tests proposed in this thread) would help with situations like that.</p>",
        "id": 266227464,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640662007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>  I'll get something up in the next few days</p>",
        "id": 266231795,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640668216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Glacier.20but.20for.20non-ICE.20bugs/near/266222116\">said</a>:</p>\n<blockquote>\n<p>yeah, considering what they're doing UI tests run damn fast. ~130 CPU-milliseconds  per test.</p>\n</blockquote>\n<p>rustdoc UI tests are like 10x slower than this for some reason, it would be nice to track down why</p>",
        "id": 266263171,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640701316
    },
    {
        "content": "<p>it's not because rustdoc is slower, or at least not just that, rustdoc takes between the time of a <code>check</code> and <code>debug</code> build</p>",
        "id": 266263229,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640701345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/Glacier.20but.20for.20non-ICE.20bugs/near/266200255\">said</a>:</p>\n<blockquote>\n<p>(one question this does open up: should ICE issues also get integrated? probably)</p>\n</blockquote>\n<p>Glacier perspective: bringing it into the main repo could be good, it would show what gets fixed (incidentally or otherwise) in the PR that fixes them rather than catching it in the next nightly</p>\n<p>It would generate some extra noise though</p>\n<p>There's a fair amount of PRs to glacier excluding autofix, perhaps me &amp; <span class=\"user-mention\" data-user-id=\"217081\">@Yuki Okushi</span> would still be able to field those but I don't know how permissions would work for that<br>\nIn glacier they're not strictly UI tests as the messages can change a fair bit before they're fixed, similarly it's a lot of nightly features so feature gates and such change occasionally. May not be a huge deal since there's likely other UI tests that will need to be modified in those cases, but it's still some extra work on contributors</p>",
        "id": 266264084,
        "sender_full_name": "Alex Macleod",
        "timestamp": 1640702082
    },
    {
        "content": "<p>If the glacier tests don't test the error messages then a directive could be added to UI tests to only check success/failure without checking specific errors?</p>",
        "id": 266264323,
        "sender_full_name": "The 8472",
        "timestamp": 1640702321
    },
    {
        "content": "<p>I'm not super familiar, but could the tests be integrated into the compiler via submodules? It would maintain separation, while also having the ability for it to be run at the same time as regular tests.</p>",
        "id": 266286985,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640721021
    },
    {
        "content": "<p>That would require updating the submodule on the rust side every time the tests repo is modified.</p>",
        "id": 266292418,
        "sender_full_name": "bjorn3",
        "timestamp": 1640725545
    },
    {
        "content": "<p>Not just that. If a main repo PR fixes an issue tested in the submodule, the repo for the submodule needs to be updated modifying or removing the test first. Only then can the module update be merged as part of the main repo PR. This causes a lot more effort and wait time for the PR contributor.</p>",
        "id": 266294185,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1640727038
    },
    {
        "content": "<p>Yeah, that sounds like an absolute pain. Sounds like submodules work in a completely different way than what I had assumed</p>",
        "id": 266294226,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640727094
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/476\">https://github.com/rust-lang/compiler-team/issues/476</a></p>\n<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>  I have drafted an MCP on the subject, linked above</p>",
        "id": 266376127,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1640809854
    },
    {
        "content": "<p>Happened to run into <a href=\"https://github.com/rust-lang/rust/issues/41261\">#41261</a> which seems to have been incidentally fixed. Should it be closed?</p>",
        "id": 266390646,
        "sender_full_name": "Jake",
        "timestamp": 1640823299
    },
    {
        "content": "<p>Just needs a test</p>",
        "id": 266393870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640827081
    },
    {
        "content": "<p><span aria-label=\"raised hand\" class=\"emoji emoji-270b\" role=\"img\" title=\"raised hand\">:raised_hand:</span> <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> what does MCP stand for?</p>",
        "id": 266396259,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1640830632
    },
    {
        "content": "<p>major change proposal</p>",
        "id": 266396418,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640830908
    },
    {
        "content": "<p>Currently the compiler and lang teams use them. The idea being that they're for things that are \"not quite big enough for an RFC, but important enough that there should be some visibility\"</p>",
        "id": 266396472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640830995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/Glacier.20but.20for.20non-ICE.20bugs/near/266396472\">said</a>:</p>\n<blockquote>\n<p>Currently the compiler and lang teams use them. The idea being that they're for things that are \"not quite big enough for an RFC, but important enough that there should be some visibility\"</p>\n</blockquote>\n<p>Or, things that <em>are</em> potentially big enough for one or more RFCs, but which would benefit from some degree of exploration and experimentation before an RFC.</p>",
        "id": 266397786,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640833107
    },
    {
        "content": "<p>(e.g. \"let's solve problem X, there are a few potential solutions, let's try one of them in nightly and see if it works, and shake out issues before writing an RFC\".)</p>",
        "id": 266397791,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640833134
    },
    {
        "content": "<p>my two cents: I really like glacier and I would like it to persist independently of the MCP.<br>\nGlacier is a nice tool to run some smoke testing on \"weird code\" and find new ICEs quickly; for me, checking glacier for new rustc crashes is a matter of ~3 minutes, in case of the rust repo it is a matter of hours</p>",
        "id": 266436664,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1640878459
    },
    {
        "content": "<p>I guess ICEs are interesting, in that they are \"always wrong\"</p>",
        "id": 266438159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640879879
    },
    {
        "content": "<p>Where for other bugs, the error output actually needs to be thought about</p>",
        "id": 266438210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640879901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Glacier.20but.20for.20non-ICE.20bugs/near/266121598\">said</a>:</p>\n<blockquote>\n<p>Idk. What's the goal? Catch issues that can be closed or lucky incidental fixes? Or help compiler devs working on the issue.. or?</p>\n</blockquote>\n<p>One place I did it was an issue that couldn't be repo'd on just play/godbolt: &lt;<a href=\"https://github.com/rust-lang/rust/pull/91281\">https://github.com/rust-lang/rust/pull/91281</a>&gt;</p>",
        "id": 267630825,
        "sender_full_name": "scottmcm",
        "timestamp": 1641928397
    }
]