[
    {
        "content": "<p>So I find myself occasionally wanting staged compilation -- does anyone know of a system that provides that for Rust?</p>",
        "id": 148190936,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1542913305
    },
    {
        "content": "<p>Can you describe what that is in broad strokes?</p>",
        "id": 148196211,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542922936
    },
    {
        "content": "<p>Sorry, I should have filled in. Staged compilation, aka <a href=\"https://en.wikipedia.org/wiki/Multi-stage_programming\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Multi-stage_programming\">https://en.wikipedia.org/wiki/Multi-stage_programming</a>, is a technique where some part of the code is itself generated by code. In this case, I'm actually hoping for the \"partial evaluation\" aspect of it, where you can have expensive computations with relatively compact outputs be computed at compile-time and then inserted into the final executable. May have overlaps with <a class=\"stream\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval\">#t-compiler/const-eval</a>.</p>",
        "id": 148196751,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1542924061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 148212686,
        "sender_full_name": "centril",
        "timestamp": 1542956866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137157\">@JP Sugarbroad</span> There's an ongoing effort to making const eval more powerful. What kind of things do you have in mind?</p>",
        "id": 148219057,
        "sender_full_name": "oli",
        "timestamp": 1542966649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I don't think const eval, with the current approach, can ever be as good as staged compilation. See <a href=\"https://anydsl.github.io/Impala.html\" target=\"_blank\" title=\"https://anydsl.github.io/Impala.html\">https://anydsl.github.io/Impala.html</a> for a nice example of what staged compilation can do (even with a Rust-inspired syntax^^)</p>",
        "id": 148219297,
        "sender_full_name": "RalfJ",
        "timestamp": 1542966981
    },
    {
        "content": "<p>oh... I misunderstood what was desired</p>",
        "id": 148228696,
        "sender_full_name": "oli",
        "timestamp": 1542979178
    },
    {
        "content": "<p>staged compilation seems trivial as a MirPass</p>",
        "id": 148228748,
        "sender_full_name": "oli",
        "timestamp": 1542979208
    },
    {
        "content": "<p>it's essentially just const propagation</p>",
        "id": 148228773,
        "sender_full_name": "oli",
        "timestamp": 1542979242
    },
    {
        "content": "<p>I thought const stuff couldn't allocate?</p>",
        "id": 148239738,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1542992002
    },
    {
        "content": "<p>just like the compiler cannot do partial evaluation, it cannot allocate inside constants. That's not an inherent show stopper though. <a href=\"https://github.com/solson/miri\" target=\"_blank\" title=\"https://github.com/solson/miri\">https://github.com/solson/miri</a> can do heap allocations just fine</p>",
        "id": 148239864,
        "sender_full_name": "oli",
        "timestamp": 1542992162
    },
    {
        "content": "<p>once we have figured out <a href=\"https://github.com/rust-rfcs/const-eval/pull/8\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/pull/8\">https://github.com/rust-rfcs/const-eval/pull/8</a> (which will allow writing <code>const</code> <code>Drop</code> impls), we can think about allocations in constants</p>",
        "id": 148239911,
        "sender_full_name": "oli",
        "timestamp": 1542992233
    },
    {
        "content": "<p>we could technically do so even before that, but it seems needlessly complex to do so</p>",
        "id": 148239919,
        "sender_full_name": "oli",
        "timestamp": 1542992255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> Nice! Okay, I'll keep an eye out for that. Full staged compilation does require the ability to execute pretty much arbitrary code, though, and then reconstruct the resulting value in the final object.</p>",
        "id": 148244952,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1542999925
    },
    {
        "content": "<p>The other thing to note is that staged compilation usually doesn't require tagging like const eval does. Is there any plan to infer const-ness?</p>",
        "id": 148245038,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1543000004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I have no idea how you think staged compilation can be trivial^^</p>",
        "id": 148251167,
        "sender_full_name": "RalfJ",
        "timestamp": 1543010317
    },
    {
        "content": "<p>its const propagation on steroids</p>",
        "id": 148251170,
        "sender_full_name": "RalfJ",
        "timestamp": 1543010338
    },
    {
        "content": "<p>needs symbolic miri <em>at the least</em></p>",
        "id": 148251178,
        "sender_full_name": "RalfJ",
        "timestamp": 1543010345
    },
    {
        "content": "<p>or rather, something symbolic.</p>",
        "id": 148251241,
        "sender_full_name": "RalfJ",
        "timestamp": 1543010421
    },
    {
        "content": "<p>it doesnt need tons of other stuff miri does</p>",
        "id": 148251248,
        "sender_full_name": "RalfJ",
        "timestamp": 1543010431
    },
    {
        "content": "<p>I don't understand... why can't you just copy the MIR of a function, remove an argument, and initialize the corresponding variable with the constant?</p>",
        "id": 148272354,
        "sender_full_name": "oli",
        "timestamp": 1543055927
    },
    {
        "content": "<p>staged compilation is about <em>guaranteed</em> compile-time unrolling</p>",
        "id": 148272697,
        "sender_full_name": "RalfJ",
        "timestamp": 1543056606
    },
    {
        "content": "<p>like, if you have a staged loop, if it is annotated as such, it should be guaranteed to be unrolled</p>",
        "id": 148272698,
        "sender_full_name": "RalfJ",
        "timestamp": 1543056606
    },
    {
        "content": "<p>oh, guarantees, well yea :D that's a different story</p>",
        "id": 148273222,
        "sender_full_name": "oli",
        "timestamp": 1543057578
    }
]