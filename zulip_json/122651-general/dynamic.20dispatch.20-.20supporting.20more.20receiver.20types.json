[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<p>So I thought we should talk again about making dynamic dispatch on trait objects more general, supporting receiver types with arbitrary extra fields instead of just newtyped pointers. I'm going to try to summarize the problem as I understand it so far, please correct me if I got anything wrong.</p>\n<p>One of the things we need to do during dynamic dispatch is coerce the \"fat\" receiver, where <code>Self = dyn Trait</code>, to the \"thin\" version without the vtable, so it can be passed as an argument to the function that we looked up in the vtable. The tricky thing is, we don't know what the type of <code>Self</code> is, and part of doing the coercion and passing the coerced receiver to the function call is that we need to compute the layout of that type. We need the layout so that we can tell llvm the FnType of the function we're calling, and the layout (and abi) of the function's argument; not to mention it would probably be useful to know the layout when implementing the actual coercion. But to compute the layout of a type, we need an actual type to use.</p>\n<p>So the question is, what type do we use for <code>Self</code> once we've removed the vtable? This is what we need to talk about. A couple ideas have been thrown around:<br>\n- using <code>()</code><br>\n- adding a new variant to <code>TyVariants</code>. One thing I was thinking of was a companion to <code>Dynamic</code>, which takes the same arguments (existential predicates and a lifetime), and implements all the same traits, plus <code>Sized</code>. Except it doesn't <em>really</em> implement those traits, because you couldn't actually call any methods or functions on it. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span><br>\n- you mentioned something about using the type parameter from the <code>DispatchFromDyn</code> impl. Feel free to expand on that if you think it's something worth pursuing</p>",
        "id": 164212800,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556228731
    },
    {
        "content": "<p>so, <code>()</code> is outright incorrect (because the type might have bounds on that) and a new variant of <code>Ty</code> is <em>not</em> necessary</p>",
        "id": 164237661,
        "sender_full_name": "eddyb",
        "timestamp": 1556261554
    },
    {
        "content": "<p>my idea with the <code>DispatchFromDyn</code> impl was that we could \"run it in reverse\", to get the e.g. <code>Rc&lt;T&gt;</code>, but we keep the <code>T</code> <em>unsubstituted</em></p>",
        "id": 164237681,
        "sender_full_name": "eddyb",
        "timestamp": 1556261603
    },
    {
        "content": "<p>so it's as if we're doing polymorphic compilation w/o monomorphization</p>",
        "id": 164237685,
        "sender_full_name": "eddyb",
        "timestamp": 1556261616
    },
    {
        "content": "<p>alternatively, we could use some of the Chalk infra</p>",
        "id": 164237689,
        "sender_full_name": "eddyb",
        "timestamp": 1556261630
    },
    {
        "content": "<p>\"canonicalization\"</p>",
        "id": 164237690,
        "sender_full_name": "eddyb",
        "timestamp": 1556261637
    },
    {
        "content": "<p>I don't think <code>general</code> is the correct place for this though, but cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 164237736,
        "sender_full_name": "eddyb",
        "timestamp": 1556261674
    },
    {
        "content": "<p>no matter what you end up doing, I'd appreciate help realizing this not just in the LLVM backend but also in Miri :D</p>",
        "id": 164242875,
        "sender_full_name": "RalfJ",
        "timestamp": 1556267715
    },
    {
        "content": "<p>getting \"by-value\" receivers to work was already lots of guesswork, no idea if I did that right</p>",
        "id": 164242882,
        "sender_full_name": "RalfJ",
        "timestamp": 1556267735
    },
    {
        "content": "<p>it might be simpler than the hack we do right now</p>",
        "id": 164242955,
        "sender_full_name": "eddyb",
        "timestamp": 1556267785
    },
    {
        "content": "<p>I just didn't think we could get it to work, because I think we came up with it <em>before</em> <code>DispatchFromDyn</code> was settled</p>",
        "id": 164242971,
        "sender_full_name": "eddyb",
        "timestamp": 1556267811
    },
    {
        "content": "<p>(FWIW, the current thing is at <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/terminator.rs#L409\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/terminator.rs#L409\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/terminator.rs#L409</a> )</p>",
        "id": 164243069,
        "sender_full_name": "RalfJ",
        "timestamp": 1556267886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> ugh, <code>ty::Param</code> is suboptimal because you could have <code>Foo&lt;T, X&gt;</code> and <code>X</code> could be unmonomorphized or w/e (maybe in miri, or maybe in codegen, in the future)</p>",
        "id": 164243105,
        "sender_full_name": "eddyb",
        "timestamp": 1556267933
    },
    {
        "content": "<p>so we'll probably have to use <code>ty::Bound</code></p>",
        "id": 164243132,
        "sender_full_name": "eddyb",
        "timestamp": 1556267967
    },
    {
        "content": "<p>which is an universal/existential (not sure) bound variable  from Chalk</p>",
        "id": 164243146,
        "sender_full_name": "eddyb",
        "timestamp": 1556267983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> what would using <code>ty::Bound</code> look like?</p>",
        "id": 164243660,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556268449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> you substitute the <code>T</code> in the <code>DispatchFromDyn</code> impl with a <code>ty::Bound</code></p>",
        "id": 164243730,
        "sender_full_name": "eddyb",
        "timestamp": 1556268509
    },
    {
        "content": "<p>well, hmpf. we'd need more analyses on the <code>DispatchFromDyn</code> impl to determine what the type should even look like</p>",
        "id": 164243770,
        "sender_full_name": "eddyb",
        "timestamp": 1556268546
    },
    {
        "content": "<p>it's, like,</p>",
        "id": 164243771,
        "sender_full_name": "eddyb",
        "timestamp": 1556268550
    },
    {
        "content": "<p>we have <code>impl&lt;...&gt; DispatchFromDyn&lt;Foo&lt;A, B&gt;&gt; for Foo&lt;X, Y&gt;</code></p>",
        "id": 164243791,
        "sender_full_name": "eddyb",
        "timestamp": 1556268586
    },
    {
        "content": "<p>OK, so let's say we have</p>\n<div class=\"codehilite\"><pre><span></span>impl&lt;T: ?Sized, U: ?Sized, A&gt; DispatchFromDyn&lt;Box&lt;U, A&gt;&gt; for Box&lt;T, A&gt;\nwhere\n    T: Unsize&lt;U&gt;\n{}\n</pre></div>",
        "id": 164243849,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556268611
    },
    {
        "content": "<p>the <code>impl</code> type parameters used in <code>Self</code> (so in <code>Foo&lt;X, Y&gt;</code>), but not in the trait's parameter (<code>Foo&lt;A, B&gt;</code>)</p>",
        "id": 164243860,
        "sender_full_name": "eddyb",
        "timestamp": 1556268625
    },
    {
        "content": "<p>are the ones you need to \"instantiate\" when you want to dispatch</p>",
        "id": 164243865,
        "sender_full_name": "eddyb",
        "timestamp": 1556268638
    },
    {
        "content": "<p>uhmmm</p>",
        "id": 164243868,
        "sender_full_name": "eddyb",
        "timestamp": 1556268646
    },
    {
        "content": "<p><code>T: ?Sized</code> is wrong</p>",
        "id": 164243869,
        "sender_full_name": "eddyb",
        "timestamp": 1556268650
    },
    {
        "content": "<p>if you allow that today, something is broken somewhere</p>",
        "id": 164243873,
        "sender_full_name": "eddyb",
        "timestamp": 1556268655
    },
    {
        "content": "<p>details</p>",
        "id": 164243890,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556268668
    },
    {
        "content": "<p>the reason <code>Unsize</code> allows it is <code>Box&lt;dyn Trait+Send&gt;</code> -&gt; <code>Box&lt;dyn Trait&gt;</code> is a coercion</p>",
        "id": 164243899,
        "sender_full_name": "eddyb",
        "timestamp": 1556268683
    },
    {
        "content": "<p>nope!</p>",
        "id": 164243902,
        "sender_full_name": "eddyb",
        "timestamp": 1556268685
    },
    {
        "content": "<p>without the <code>Sized</code> bound on <code>T</code> in the <code>ParamEnv</code>, none of this can ever work!</p>",
        "id": 164243909,
        "sender_full_name": "eddyb",
        "timestamp": 1556268698
    },
    {
        "content": "<p>Ok, you're right</p>",
        "id": 164243922,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556268716
    },
    {
        "content": "<p>a <code>Sized</code> bound \"in scope\" means <code>*mut T</code> has a known layout without knowing <code>T</code></p>",
        "id": 164243925,
        "sender_full_name": "eddyb",
        "timestamp": 1556268718
    },
    {
        "content": "<p>So anyway, assuming we can figure out that <code>T/U</code> is type that changes...</p>",
        "id": 164244002,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556268768
    },
    {
        "content": "<p>and I think we can instantiate all the parameters I was talking about (i.e. <code>T</code> in this case) with <code>ty::Bound</code> (talk to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe? not sure how those work, but they could be like type parameters, just simpler)</p>",
        "id": 164244007,
        "sender_full_name": "eddyb",
        "timestamp": 1556268773
    },
    {
        "content": "<p>you don't need to know anything about the <code>U</code>, just be able to find that <code>impl</code> and get a <code>Box&lt;T, MyAlloc&gt;</code> from a <code>Box&lt;Whatever, MyAlloc&gt;</code></p>",
        "id": 164244128,
        "sender_full_name": "eddyb",
        "timestamp": 1556268871
    },
    {
        "content": "<p>I guess by using the trait system and asking for <code>X</code> and <code>Y</code> in <code>Box&lt;X, Y&gt;</code> where <code>Box&lt;X, Y&gt;: DispatchFromDyn&lt;Box&lt;Whatever, MyAlloc&gt;&gt;</code></p>",
        "id": 164244243,
        "sender_full_name": "eddyb",
        "timestamp": 1556268966
    },
    {
        "content": "<p>wait</p>",
        "id": 164244245,
        "sender_full_name": "eddyb",
        "timestamp": 1556268967
    },
    {
        "content": "<p>\"replace it with <code>ty::Bound</code>\" sounds nice, but I have no idea what that really means - can you elaborate on how to do that? <code>ty::Bound</code> has arguments</p>",
        "id": 164244255,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556268979
    },
    {
        "content": "<p>ugh, the direction of this might be hard to do trait dispatch with</p>",
        "id": 164244259,
        "sender_full_name": "eddyb",
        "timestamp": 1556268982
    },
    {
        "content": "<p>oh, you'd just use whatever works for those :P</p>",
        "id": 164244269,
        "sender_full_name": "eddyb",
        "timestamp": 1556268996
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/// Bound type variable, used only when preparing a trait query.\n    Bound(ty::DebruijnIndex, BoundTy),\n</pre></div>",
        "id": 164244318,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556269051
    },
    {
        "content": "<p>maybe <code>Bound</code> is wrong and I mean <code>Placeholder</code>?</p>",
        "id": 164244328,
        "sender_full_name": "eddyb",
        "timestamp": 1556269064
    },
    {
        "content": "<p>some of this is a bit weird</p>",
        "id": 164244331,
        "sender_full_name": "eddyb",
        "timestamp": 1556269071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/// A placeholder type - universally quantified higher-ranked type.\n    Placeholder(ty::PlaceholderType),\n</pre></div>",
        "id": 164244388,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556269095
    },
    {
        "content": "<p>but you can just use debruijin index 0 and <code>BoundVar</code> index 0</p>",
        "id": 164244389,
        "sender_full_name": "eddyb",
        "timestamp": 1556269097
    },
    {
        "content": "<p>and <code>BoundTyKind::Anon</code></p>",
        "id": 164244399,
        "sender_full_name": "eddyb",
        "timestamp": 1556269108
    },
    {
        "content": "<p>it really doesn't matter, beyond two very important things:</p>\n<ul>\n<li>have a version of the <code>ParamEnv</code> of the <code>impl</code>, with that special type in the position</li>\n<li>be able to grab the layout for the smart pointer, with that special type used in the strategical position, such that it's \"obviously a thin pointer\"</li>\n</ul>",
        "id": 164244454,
        "sender_full_name": "eddyb",
        "timestamp": 1556269195
    },
    {
        "content": "<p>(if you need multiple, you can use further <code>BoundVar</code> indices)</p>",
        "id": 164244532,
        "sender_full_name": "eddyb",
        "timestamp": 1556269259
    },
    {
        "content": "<p>Grepping through the rust-lang/rust source, I don't see <code>ty::Bound</code> being used in a way that I can learn from. If there's a solution involving it, I'd love to hear about it, but I'd need someone to explain to me how it works before I can implement anything with it</p>",
        "id": 164245078,
        "sender_full_name": "mikeyhew",
        "timestamp": 1556269720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> you just use it like you might use, idk, <code>ty::Err</code></p>",
        "id": 164245709,
        "sender_full_name": "eddyb",
        "timestamp": 1556270277
    },
    {
        "content": "<p>you just put it where the unknown is</p>",
        "id": 164245762,
        "sender_full_name": "eddyb",
        "timestamp": 1556270295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> I guess a better analogy is an inference variable, but this sort of thing is not restricted from appearing in a global tcx</p>",
        "id": 164245787,
        "sender_full_name": "eddyb",
        "timestamp": 1556270338
    },
    {
        "content": "<p>and it seems reasonable to allow layout to handle it</p>",
        "id": 164245806,
        "sender_full_name": "eddyb",
        "timestamp": 1556270350
    },
    {
        "content": "<p>you could use <code>ty::Param</code> directly, from the <code>impl</code>, I'm just worried about bad interactions in the future</p>",
        "id": 164245836,
        "sender_full_name": "eddyb",
        "timestamp": 1556270395
    },
    {
        "content": "<p>again, it doesn't matter what you use, but you need something like <code>Rc&lt;StrangeThing&gt;</code>, where if you have <code>StrangeThing: Trait</code> in <code>ParamEnv</code>, the trait system will actually consider that</p>",
        "id": 164246003,
        "sender_full_name": "eddyb",
        "timestamp": 1556270523
    },
    {
        "content": "<p>because the <code>impl</code> has a <code>T: Sized</code> bound in its <code>ParamEnv</code> so when you substitute <code>[T -&gt; StrangeThing]</code>, you'll get <code>StrangeThing: Sized</code>, which is important for ensuring <code>*mut RcBox&lt;StrangeThing&gt;</code> is actually a thin pointer</p>",
        "id": 164246073,
        "sender_full_name": "eddyb",
        "timestamp": 1556270593
    }
]