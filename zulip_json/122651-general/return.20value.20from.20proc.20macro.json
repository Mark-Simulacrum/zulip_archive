[
    {
        "content": "<p>I'm learning about proc macros, and I want to write one that essentially takes in a string at compile time, calls a function on it, and returns the result of the function to the calling code (so it's like calling the function at compile-time). Is there a way to do that with proc macros?</p>",
        "id": 205310682,
        "sender_full_name": "Noah Lev",
        "timestamp": 1595987797
    },
    {
        "content": "<p>Emit the tokens that create a literal of the return value.</p>",
        "id": 205321021,
        "sender_full_name": "isHavvy",
        "timestamp": 1596002366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296643\">@isHavvy</span> Is there a way to get <code>proc_macro</code> to convert a struct (or enum) to its literal token representation?</p>",
        "id": 205546277,
        "sender_full_name": "Noah Lev",
        "timestamp": 1596153848
    },
    {
        "content": "<p>Nothing I know of personally, but you can always make a trait for it.</p>",
        "id": 205570526,
        "sender_full_name": "isHavvy",
        "timestamp": 1596185608
    },
    {
        "content": "<p>How would you go about making a trait for it? (I'm pretty new to proc macros)</p>",
        "id": 205617930,
        "sender_full_name": "Noah Lev",
        "timestamp": 1596216540
    },
    {
        "content": "<p>If you have lots and lots of these structs, you'd probably want to implement a derive macro that generates a <code>ToTokens</code> implementation. Otherwise, you're likely better off writing out the structure yourself using <code>quote</code>.</p>",
        "id": 205672927,
        "sender_full_name": "Sergio",
        "timestamp": 1596273033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326186\">@Sergio Benitez</span> Thanks for your help! I actually have just one struct (<code>regex::Regex</code>) that I need to generate at compile time. I'll try out <code>quote</code>!</p>",
        "id": 205690935,
        "sender_full_name": "Noah Lev",
        "timestamp": 1596303552
    },
    {
        "content": "<p>Although it looks like I might not be able to do it because the field in <code>regex::Regex</code> is private.</p>",
        "id": 205691565,
        "sender_full_name": "Noah Lev",
        "timestamp": 1596304457
    },
    {
        "content": "<p>If you're trying to compile regex at compile-time, look at <a href=\"https://github.com/rust-lang/regex/issues/607\">https://github.com/rust-lang/regex/issues/607</a></p>",
        "id": 205695948,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1596311934
    }
]