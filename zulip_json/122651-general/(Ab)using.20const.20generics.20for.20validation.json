[
    {
        "content": "<p>I've been thinking about data validation in the context of webapps a bunch recently. Combined with const generics, we can get some code like this for validating the length of a value:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">LenString</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MAX</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MAX</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LenString</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Self</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LenString</span>::<span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// None</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LenString</span>::<span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;hell&quot;</span><span class=\"p\">));</span><span class=\"w\">  </span><span class=\"c1\">// Some</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 170814555,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1563071440
    },
    {
        "content": "<p>I'm trying to think if there's some way of doing the same for a more complicated validation, such as matching a regex. I'm not seeing anything obvious, but maybe smarter folk than me might have an inkling.</p>",
        "id": 170814608,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1563071547
    },
    {
        "content": "<p>At least, not until <code>Regex::new</code> is <code>const fn</code> ;-)</p>",
        "id": 170814614,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1563071577
    }
]