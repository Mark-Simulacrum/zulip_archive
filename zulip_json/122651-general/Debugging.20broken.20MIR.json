[
    {
        "content": "<p>I'm trying to make a change to how we generate closure capture information for RFC 2229 and am running into errors. </p>\n<p>Build log: <a href=\"http://csclub.uwaterloo.ca/~a52arora//rust-builds/log_357f4669-6a4a-43c7-817b-b54ae1131868\">http://csclub.uwaterloo.ca/~a52arora//rust-builds/log_357f4669-6a4a-43c7-817b-b54ae1131868</a><br>\nCan someone point me to some way of debugging the issue? </p>\n<p>At a high level our changes are to add a new field in TypeCk Tables and use it to build the fields that currently store capture information and don't touch MIR (well directly)<br>\nIf we add something to TypecheckTables do we need to make changes anywhere else other than making initializing and making sure it's hash-stable? </p>\n<p>diff if that helps: <a href=\"https://github.com/rust-lang/rust/compare/44c9ace...sexxi-goose:use_places\">https://github.com/rust-lang/rust/compare/44c9ace...sexxi-goose:use_places</a></p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"282522\">@azhng</span></p>",
        "id": 204178630,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594971764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> hmm</p>",
        "id": 204232176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595005592
    },
    {
        "content": "<p>so the first thing I would do is to run the compiler with <code>-Ztreat-err-as-bug</code> and <code>RUST_BACKTRACE=1</code></p>",
        "id": 204232188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595005606
    },
    {
        "content": "<p>this should cause the \"delayed error\" to flag as a bug and give you a backtrace with more information</p>",
        "id": 204232209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595005619
    },
    {
        "content": "<p>you can also use <code>-Zdump-mir='DefId(0:5988 '</code> to dump out all the MIR as you go so you can see the MIR that is failing. The string there is just some unique-looking part of the fn name</p>",
        "id": 204232405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595005724
    },
    {
        "content": "<p>it'd be helpful to see the MIR that is being generated</p>",
        "id": 204232442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595005749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204232405\">said</a>:</p>\n<blockquote>\n<p>you can also use <code>-Zdump-mir='DefId(0:5988 '</code> to dump out all the MIR as you go so you can see the MIR that is failing. The string there is just some unique-looking part of the fn name</p>\n</blockquote>\n<p>Will DefId stay the same between two builds?</p>",
        "id": 204234055,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595006643
    },
    {
        "content": "<p>They should be</p>",
        "id": 204234305,
        "sender_full_name": "lcnr",
        "timestamp": 1595006802
    },
    {
        "content": "<p>This might be a stupid question but how do I pass the compiler flags using x.py? Is it using the RUSTFLAGS env variable ?</p>",
        "id": 204234412,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595006864
    },
    {
        "content": "<p><code>./x.py cmd --rustc-args ...</code></p>",
        "id": 204234567,
        "sender_full_name": "lcnr",
        "timestamp": 1595006943
    },
    {
        "content": "<p>wait, that's a thing?</p>",
        "id": 204234632,
        "sender_full_name": "simulacrum",
        "timestamp": 1595006974
    },
    {
        "content": "<p>I do not recall that being added</p>",
        "id": 204234647,
        "sender_full_name": "simulacrum",
        "timestamp": 1595006981
    },
    {
        "content": "<p>I am fairly sure it is, considering how often I use it <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 204234705,
        "sender_full_name": "lcnr",
        "timestamp": 1595007002
    },
    {
        "content": "<p>The documentation said that is only for running tests</p>\n<div class=\"codehilite\"><pre><span></span><code>--rustc-args ARGS\n                        extra options to pass the compiler when running tests\n</code></pre></div>",
        "id": 204234799,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595007051
    },
    {
        "content": "<p>I'll give this a shot, thank you</p>",
        "id": 204234842,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595007068
    },
    {
        "content": "<p>Personally I use <code>rustup toolchain link</code> so I don't have to mess with bootstrap more than I have to lol</p>",
        "id": 204235341,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595007346
    },
    {
        "content": "<p>So my workflow is something like <code>x.py build --stage 1 src/librustdoc &amp;&amp; rustdoc +stage1 my_test.rs -Z my_args</code></p>",
        "id": 204235406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595007381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204235341\">said</a>:</p>\n<blockquote>\n<p>Personally I use <code>rustup toolchain link</code> so I don't have to mess with bootstrap more than I have to lol</p>\n</blockquote>\n<p>I'm trying to get the compiler to compile with the flags rn, haha</p>",
        "id": 204236281,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595007849
    },
    {
        "content": "<p>So using <code>./x.py ... --rustc-args=\"-...\"</code> didn't do anything</p>\n<p>I used RUSTFLAGS enivroment variable, here is the log<br>\n<a href=\"http://csclub.uwaterloo.ca/~a52arora/rust-builds/log_fa134c64-4d37-415b-9e51-40e66ffabfb4\">http://csclub.uwaterloo.ca/~a52arora/rust-builds/log_fa134c64-4d37-415b-9e51-40e66ffabfb4</a></p>\n<p>I wasn't able to set the def if to all of <code>DefId(0:5988 ~ core[de9c]::fmt[0]::builders[0]::{{impl}}[1]::wrap[0]::{{closure}}[0])</code>, tried escaping all the single quotes, spaces etc. as well but it diddn't work</p>\n<p>If <code>DefId(0:5988</code> is enough where would the mir output be? Nothing particular in the build directory caught my eye</p>",
        "id": 204258617,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595019713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>  do you have any tips on how I can proceed?</p>",
        "id": 204369374,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595190279
    },
    {
        "content": "<p>not really <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I don't have too much experience with debugging mir</p>",
        "id": 204369489,
        "sender_full_name": "lcnr",
        "timestamp": 1595190504
    },
    {
        "content": "<p>apart from the default debugging experience of looking at the backtrace I don't think I can be of much help here</p>",
        "id": 204369493,
        "sender_full_name": "lcnr",
        "timestamp": 1595190539
    },
    {
        "content": "<p>what happens with <code>./x.py ... --rustc-args -Zdump-mir='DefId(0'</code>?</p>",
        "id": 204369504,
        "sender_full_name": "lcnr",
        "timestamp": 1595190589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204369504\">said</a>:</p>\n<blockquote>\n<p>what happens with <code>./x.py ... --rustc-args -Zdump-mir='DefId(0'</code>?</p>\n</blockquote>\n<p>that didn't change the output for me. It was same as without the args. Like when I provide -Ztreat-err-as-bug in RUSTFLAGS it quits early with the message saying quiting early because of the flag&gt;</p>\n<p>When I use -rustc-args i don't get the message</p>",
        "id": 204369648,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595190762
    },
    {
        "content": "<p>Based on the help from bootstap <br>\n--rustc-args ARGS<br>\n                        extra options to pass the compiler when running tests</p>\n<p>I think that is expected because currently it fails to build the stage1 compiler i.e. it is not running tests</p>",
        "id": 204369658,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595190798
    },
    {
        "content": "<p>is it failing in stage 1 libs or stage 2 compiler?</p>",
        "id": 204369790,
        "sender_full_name": "lcnr",
        "timestamp": 1595191007
    },
    {
        "content": "<p>stage 1</p>",
        "id": 204369806,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595191064
    },
    {
        "content": "<p>stage 1 libs, yeah... looked at the logs</p>",
        "id": 204369810,
        "sender_full_name": "lcnr",
        "timestamp": 1595191078
    },
    {
        "content": "<p>hmm, maybe <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> or <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> have an idea on how to debug mir if it fails to compile stage 1 libs <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 204369870,
        "sender_full_name": "lcnr",
        "timestamp": 1595191154
    },
    {
        "content": "<p>You can try running bootstrap with <code>RUSTC_LOG=rustc_mir::transform</code> to see the MIR but if you don't know what's going wrong, that's probably going to be too much data to be helpful.</p>",
        "id": 204370651,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595192559
    },
    {
        "content": "<p>Can you only run your changes if a <code>-Z</code> flag is passed or something? That would let you complete the bootstrap and then you can run the test suite with the flag enabled to find a smaller repro.</p>",
        "id": 204370661,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595192600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204370661\">said</a>:</p>\n<blockquote>\n<p>Can you only run your changes if a <code>-Z</code> flag is passed or something? That would let you complete the bootstrap and then you can run the test suite with the flag enabled to find a smaller repro.</p>\n</blockquote>\n<p>I like this idea, are there any code examples where I can see how -Z flags are added to the compiler?</p>",
        "id": 204370853,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595192963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204370651\">said</a>:</p>\n<blockquote>\n<p>You can try running bootstrap with <code>RUSTC_LOG=rustc_mir::transform</code> to see the MIR but if you don't know what's going wrong, that's probably going to be too much data to be helpful.</p>\n</blockquote>\n<p>Yeah, I'm not familiar with MIR at all, so I'd only be making guesses</p>",
        "id": 204370861,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595192999
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/69749\">#69749</a> adds a new feature flag, though the pr is quite big</p>",
        "id": 204370905,
        "sender_full_name": "lcnr",
        "timestamp": 1595193014
    },
    {
        "content": "<p>there is probably a smaller pr to reference here</p>",
        "id": 204370907,
        "sender_full_name": "lcnr",
        "timestamp": 1595193026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204370853\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204370661\">said</a>:</p>\n<blockquote>\n<p>Can you only run your changes if a <code>-Z</code> flag is passed or something? That would let you complete the bootstrap and then you can run the test suite with the flag enabled to find a smaller repro.</p>\n</blockquote>\n<p>I like this idea, are there any code examples where I can see how -Z flags are added to the compiler?</p>\n</blockquote>\n<p>Take a look at this commit <a href=\"https://github.com/rust-lang/rust/pull/74275/commits/2acd1495200d58b5a3b44365268c17b973e0e8d3\">https://github.com/rust-lang/rust/pull/74275/commits/2acd1495200d58b5a3b44365268c17b973e0e8d3</a></p>",
        "id": 204370918,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595193091
    },
    {
        "content": "<p>If I understand this properly</p>\n<div class=\"codehilite\"><pre><span></span><code>    cgu_partitioning_strategy: Option&lt;String&gt; = (None, parse_opt_string, [TRACKED],\n        &quot;the codegen unit partitioning strategy to use&quot;),\n</code></pre></div>\n\n\n<p>the name of the field <code>cgu_partitioning_strategy</code> becomes the -Zcgu_partitioning_strategy flag, </p>\n<ul>\n<li>the first element in the tuple is default argument,</li>\n<li>next one suggests that this might be called with an optional string paramter,</li>\n<li>Not sure what is being [TRACKED]  here though? Is it just for build logs?  </li>\n<li>Last field is just the descripton</li>\n</ul>",
        "id": 204371153,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595193481
    },
    {
        "content": "<p>For pure hackery, you could maybe skip the code in question unless an environment variable is set.</p>",
        "id": 204373432,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595197510
    },
    {
        "content": "<p>May be easier than plumbing in the option</p>",
        "id": 204373563,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595197766
    },
    {
        "content": "<p>Okay that works too, thank you</p>",
        "id": 204373745,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595198125
    },
    {
        "content": "<p>just a slight note</p>\n<div class=\"codehilite\"><pre><span></span><code>the name of the field `cgu_partitioning_strategy` becomes the -Zcgu_partitioning_strategy flag,\n</code></pre></div>\n\n\n<p>it's going to become <code>-Z cgu-partitioning-strategy</code></p>",
        "id": 204406990,
        "sender_full_name": "lqd",
        "timestamp": 1595241311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/204406990\">said</a>:</p>\n<blockquote>\n<p>just a slight note</p>\n<div class=\"codehilite\"><pre><span></span><code>the name of the field `cgu_partitioning_strategy` becomes the -Zcgu_partitioning_strategy flag,\n</code></pre></div>\n\n\n<p>it's going to become <code>-Z cgu-partitioning-strategy</code></p>\n</blockquote>\n<p>Thank you, I think right now we might just go with the env variable mostly because we don't exect this part of the code to be controlled by flag once we are done debugging</p>",
        "id": 204616891,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595375773
    },
    {
        "content": "<p>def good to know for the future tho</p>",
        "id": 204616917,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595375824
    },
    {
        "content": "<p>Thanks the environment variable method worked. If anyone is interested the issues were:</p>\n<ul>\n<li>We weren't handling ByValue captures in a part of the analysis</li>\n<li>We have two structures today that store capture information, one that is generated before typechk and one after typechk. mir_build uses a mix of both. Today the order of captures within both the structures is the same and our change broke that order. Fix was just to the post typechl structure.<br>\nHaven't looked at the code yet, so just speculating but ExprUseVisitor in typeck seems might be iterating in a different order than hir::intravisitor</li>\n</ul>",
        "id": 205158453,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595878201
    }
]