[
    {
        "content": "<p>Right okay so an implementation of Trait for Wrapper&lt;&amp;'a T&gt; is not actually a different implementation to Wrapper&lt;T&gt;?</p>",
        "id": 262807362,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637939490
    },
    {
        "content": "<p>And the trait bound Wrapper&lt;T&gt;: Trait is just recursive in general?</p>",
        "id": 262807393,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637939517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/122651-general/topic/Recursive.20Trait.20bound.20confusion/near/262805623\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if it is relevant, but note that in <code>impl&lt;Thing&gt; Trait for Wrapper&lt;Thing&gt; {}</code> you are declaring a new type variable named <code>Thing</code>, not referencing the <code>Thing</code> struct, i.e., it is equivalent to <code>impl&lt;U&gt; Trait for Wrapper&lt;U&gt; {}</code></p>\n</blockquote>\n<p>Ahhh okay so I'm basically just implementing the Wrapper&lt;T&gt; trait bound but with T called Thing</p>",
        "id": 262807514,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637939581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280891\">Frank Steffahn</span> <a href=\"#narrow/stream/122651-general/topic/Recursive.20Trait.20bound.20confusion/near/262805788\">said</a>:</p>\n<blockquote>\n<p>The overflow error is just a bad diagnostic. The main issue here is that the two implementations of <code>Trait</code> are overlapping. The implementation</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Thing</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">Thing</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is <em>generic</em> and overlaps with the other implementation e.g. for <code>Thing == &amp;'static () == &amp;'a T</code>. Your intention might have been a concrete non-generic implementation</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">Thing</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which doesn't produce any errors either.</p>\n</blockquote>\n<p>Ahh of course I've gotten my syntax wrong and introduced a new type variable Thing instead of implementing it for the concrete type Thing</p>",
        "id": 262807704,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637939707
    },
    {
        "content": "<p>Thanks both - that makes it more clear as to what I'm missing here</p>",
        "id": 262807754,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637939736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448036\">Tom Farmer</span> has marked this topic as resolved.</p>",
        "id": 262807961,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637939874
    },
    {
        "content": "<p>The compiler should really be giving you an 'overlapping impl' error there, but it appears to be getting confused by the 'where' clause</p>",
        "id": 262808446,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1637940166
    },
    {
        "content": "<p>I'll see if I can improve the diagnostic</p>",
        "id": 262808455,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1637940171
    },
    {
        "content": "<p>Yeah so I've actually been working on this myself - it's due to the fact that we always output recursion errors as soon as we hit the overflow limit during type checking <a href=\"https://github.com/rust-lang/rust/pull/91238\">this PR</a> has a fix for a fix to prevent that happening when we're trying to provide a suggestion for a method to turn one type into another - however the minimal repro I posted above was ICEing because it comes at the recursion check from a different path during fulfilment</p>",
        "id": 262808701,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637940354
    },
    {
        "content": "<p>So it's likely that we need to either stop emitting infinite recursion errors as soon as we hit them or figure out a way to check when it's actually useful to emit it</p>",
        "id": 262808791,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637940420
    },
    {
        "content": "<p>But the problem I've got is I don't actually understand the type inference engine well enough to be able to check if we're recursing for no reason - just enough to fix annoyances via backtraces</p>",
        "id": 262808851,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637940471
    },
    {
        "content": "<p>But now I know it's the where clause causing &amp; what the correct error should be (considering we already output one if we don't have a where clause) it I might be able to give a go of fixing it myself</p>",
        "id": 262808973,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637940559
    },
    {
        "content": "<p>The minimal repro is actually slightly different &amp; has no shadowing it just recurses because there's no implementation of Trait for Thing and Thing isn't defined but we output the missing definition so I think we're okay there</p>",
        "id": 262809549,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1637940791
    }
]