[
    {
        "content": "<p>With this example, I'd expect that <code>chunk</code> would be moved into the innermost closure because the <code>for</code> loop should take ownership of it (via the call to <code>IntoIterator</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">adder</span><span class=\"p\">(</span><span class=\"n\">values</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">i64</span><span class=\"p\">])</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">crossbeam</span>::<span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">scope</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">chunk</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">i64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// type assertion</span>\n<span class=\"w\">            </span><span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"w\"> </span><span class=\"p\">{});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, the compiler only borrows <code>chunk</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0373]: closure may outlive the current function, but it borrows `chunk`, which is owned by the current function\n --&gt; src/lib.rs:5:25\n  |\n2 |     crossbeam::scope(|scope| {\n  |                       ----- has type `&amp;Scope&lt;&#39;1&gt;`\n...\n5 |             scope.spawn(|_| for _ in chunk {});\n  |                         ^^^          ----- `chunk` is borrowed here\n  |                         |\n  |                         may outlive borrowed value `chunk`\n  |\nnote: function requires argument type to outlive `&#39;1`\n --&gt; src/lib.rs:5:13\n  |\n5 |             scope.spawn(|_| for _ in chunk {});\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: to force the closure to take ownership of `chunk` (and any other referenced variables), use the `move` keyword\n  |\n5 |             scope.spawn(move |_| for _ in chunk {});\n  |                         ^^^^^^^^\n</code></pre></div>\n<p>The <code>move</code> suggestion works, but I'm surprised that it's needed.</p>",
        "id": 231254242,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616376944
    },
    {
        "content": "<p>The <code>chunks</code> call takes the slice by ref, so the closure doesn't require ownership of the slice</p>",
        "id": 231255103,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616378123
    },
    {
        "content": "<p>But the <em>inner</em> closure is the one that needs <code>move</code> applied, not the outer one.</p>",
        "id": 231255802,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616378807
    },
    {
        "content": "<p>e.g. <code>chunk</code> needs to be moved, not <code>values</code></p>",
        "id": 231255825,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616378842
    },
    {
        "content": "<p>Oh I missed the <code>innermost</code>, sorry</p>",
        "id": 231256098,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1616379164
    },
    {
        "content": "<p>Do non move closures ever take ownership of values? I would not expect this to work without move</p>",
        "id": 231261062,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616385601
    },
    {
        "content": "<p>Reading the reference now, TIL they can</p>",
        "id": 231261444,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616386039
    },
    {
        "content": "<blockquote>\n<p>The compiler prefers to capture a closed-over variable by immutable borrow, followed by unique immutable borrow (see below), by mutable borrow, and finally by move. It will pick the first choice of these that allows the closure to compile. <strong>The choice is made only with regards to the contents of the closure expression; the compiler does not take into account surrounding code, such as the lifetimes of involved variables.</strong></p>\n</blockquote>",
        "id": 231261664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616386283
    },
    {
        "content": "<p>I'm guessing this is because the pass where the compiler assumes a reference will work happens before borrowck</p>",
        "id": 231261675,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616386316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> what happens if you move that type assertion into the closure? Or some similar method to make it so the compiler knows it can only make it work by taking ownership of chunk</p>",
        "id": 231261780,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616386423
    },
    {
        "content": "<p><code>&amp;[u64]</code> is <code>Copy</code>, so there's no need for a move.</p>",
        "id": 231279293,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1616403754
    },
    {
        "content": "<p>Haha, this is the same thing that came up in the last training in a different form. <a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/When.20is.20Copy.20applied.20to.20captured.20values.3F\">#general &gt; When is Copy applied to captured values?</a></p>",
        "id": 231304440,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616417621
    }
]