[
    {
        "content": "<p>I have a type that <em>probably</em> needs to specify <code>#[repr(align(…))]</code>, based on a bug report I got. This type is inside another type. How can I write some code that pushes this type around in memory to attempt to reproduce the error?</p>",
        "id": 169226637,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561730272
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">XxCore</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">XxHash64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">total_len</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">seed</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">core</span>: <span class=\"nc\">XxCore</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buffer</span>: <span class=\"nc\">Buffer</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Buffer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">CHUNK_SIZE</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169226735,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561730359
    },
    {
        "content": "<p>Namely, I’m pretty sure that <code>Buffer</code> needs to be aligned for a <code>u64</code></p>",
        "id": 169226758,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561730388
    },
    {
        "content": "<p>on a 32-bit machine, the <code>usize</code> is a <code>u32</code> and I don’t get it “for free”</p>",
        "id": 169226835,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561730417
    },
    {
        "content": "<p>When testing similar things, I’ve just allocated a big buffer of u8 and added byte-by-byte offsets. Can I do a similar thing  here? Except I need to control where a field is inside of another type, and <code>XxHash64</code> is presumably already aligned to a bigger value.</p>",
        "id": 169226995,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561730528
    },
    {
        "content": "<p>I don't understand what you are trying to do. Do you want to test the alignment by casting the pointer to int at run-time and doing <code>% 8</code>? What are \"byte-by-byte offsets\"?</p>\n<p>You <em>can</em> run it in Miri though, it will check alignment on every access... ;)</p>",
        "id": 169229150,
        "sender_full_name": "RalfJ",
        "timestamp": 1561731998
    },
    {
        "content": "<p>the problem is that I treat <code>Buffer::data</code> as a <code>&amp;[u64]</code> and assume that there will never be unaligned data at the beginning. This <em>should</em> be fine once I add <code>repr[align(…)]</code> to <code>Buffer</code>, however it hasn’t tripped up any of my test assertions yet.</p>",
        "id": 169229833,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561732560
    },
    {
        "content": "<p>I want to write a test</p>",
        "id": 169229873,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561732565
    },
    {
        "content": "<p>I have <a href=\"https://github.com/shepmaster/twox-hash/blob/master/comparison/src/lib.rs#L59-L66\" target=\"_blank\" title=\"https://github.com/shepmaster/twox-hash/blob/master/comparison/src/lib.rs#L59-L66\">similar tests for <code>&amp;[u8]</code></a>, where I make up a random <code>Vec&lt;u8&gt;</code> and a <code>usize</code> and index into it, producing a variety of starting offsets</p>",
        "id": 169229953,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561732631
    },
    {
        "content": "<p>My “ideal” case would be to somehow perturbate the layout created for <code>XxHash</code> so that the <code>buffer</code> field sometimes is placed on a non-64-bit point.</p>",
        "id": 169230086,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561732725
    },
    {
        "content": "<p>I think my practical workaround will be to make a <code>Vec&lt;u8&gt;</code> that is much larger than <code>Buffer</code>,  then <code>ptr::write</code> a Buffer into the vec at multiples of <code>align_of::Buffer</code>, ensuring my debug assertions don’t get tripped</p>",
        "id": 169230318,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561732888
    },
    {
        "content": "<p><code>#[repr(Rust)]</code> will reorder fields to ensure that there is as little padding left inside as possible</p>",
        "id": 169230971,
        "sender_full_name": "nagisa",
        "timestamp": 1561733326
    },
    {
        "content": "<p>but the alignment of XxCore will still stay 64-bits in this case regardless, so you cannot just place it on non-64-bit boundary</p>",
        "id": 169231041,
        "sender_full_name": "nagisa",
        "timestamp": 1561733385
    },
    {
        "content": "<p>/me decides they don’t get what the intention here is either</p>",
        "id": 169231153,
        "sender_full_name": "nagisa",
        "timestamp": 1561733444
    },
    {
        "content": "<p>I apologize for my poor description. This seems “obvious” to me so I’m having trouble figuring how to say it differently</p>",
        "id": 169231404,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561733634
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/twox-hash/blob/master/src/sixty_four.rs#L188-L191\" target=\"_blank\" title=\"https://github.com/shepmaster/twox-hash/blob/master/src/sixty_four.rs#L188-L191\">This assertion</a> is being hit by a user of my crate who is running on 32-bit x86</p>",
        "id": 169231478,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561733684
    },
    {
        "content": "<p>which makes perfect sense: the <code>Buffer</code> struct will be aligned to 32-bit (due to the <code>usize</code>), which means it <em>might</em> not be aligned to 64-bit</p>",
        "id": 169231545,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561733746
    },
    {
        "content": "<p>I want to write a test that will fail (cause the assertion to be triggered)</p>",
        "id": 169231623,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561733783
    },
    {
        "content": "<p>So that I can see the assertion failure and then see it go away when I add the right <code>repr(align)</code></p>",
        "id": 169231810,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561733904
    },
    {
        "content": "<p>My current attempt is something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">mem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"p\">{</span><span class=\"n\">Buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CHUNK_SIZE</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Buffer</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer_align</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Buffer</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Make it big enough that we don&#39;t need to worry</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">scratch</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">buffer_size</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alignment_steps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer_size</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">buffer_align</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer_align</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"o\">=</span><span class=\"n\">alignment_steps</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Buffer must be plain data, no `Drop` implementation</span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">().</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">buffer_align</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Buffer</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ptr</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Buffer</span>::<span class=\"n\">default</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">start</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CHUNK_SIZE</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// Exercise assertions in method</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">as_u64_arrays</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169231881,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561733947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> the only thing you can do is to compare <code>align_of</code> .</p>",
        "id": 169235871,
        "sender_full_name": "nagisa",
        "timestamp": 1561736680
    },
    {
        "content": "<p>I think.</p>",
        "id": 169235875,
        "sender_full_name": "nagisa",
        "timestamp": 1561736685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> you mean <code>assert_eq(align_of::&lt;u64&gt;(), align_of::&lt;Buffer&gt;())</code>?</p>",
        "id": 169235993,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561736779
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 169236041,
        "sender_full_name": "nagisa",
        "timestamp": 1561736827
    },
    {
        "content": "<p>fwiw you need your <code>align(64)</code> to be on <code>Buffer::data</code>, not the <code>Buffer</code> itself</p>",
        "id": 169236089,
        "sender_full_name": "nagisa",
        "timestamp": 1561736871
    },
    {
        "content": "<p>you can put it on members? All the docs imply it needs to go on types</p>",
        "id": 169236177,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561736907
    },
    {
        "content": "<p>You’ll need to wrap your array into another struct.</p>",
        "id": 169236212,
        "sender_full_name": "nagisa",
        "timestamp": 1561736934
    },
    {
        "content": "<p><code>align(64)</code> or <code>align(8)</code>? I haven’t yet found a definitive unit listed anywhere</p>",
        "id": 169236233,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561736949
    },
    {
        "content": "<p>don’t remember either.</p>",
        "id": 169236238,
        "sender_full_name": "nagisa",
        "timestamp": 1561736958
    },
    {
        "content": "<p>if you have multiple fields in your struct, those fields can still be re-ordered, reducing the effective alignment of your array to a lower value</p>",
        "id": 169236277,
        "sender_full_name": "nagisa",
        "timestamp": 1561736989
    },
    {
        "content": "<p>Another good test you can do is to assert that your field has offset that matches your alignment requirements</p>",
        "id": 169236364,
        "sender_full_name": "nagisa",
        "timestamp": 1561737038
    },
    {
        "content": "<p>The trouble I’m having with the last one is that ultimately I can’t test the offset effectively because the compiler can do whatever it wants</p>",
        "id": 169236797,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561737312
    },
    {
        "content": "<p>For example, in the “real” case, there’s a huge stack of types: <code>hashbrown::HashMap&lt;String, InnerStmt, BuildHasherDefault&lt;XxHash64&gt;&gt;</code></p>",
        "id": 169236923,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561737392
    },
    {
        "content": "<p>And I think that’s the one and only use of it in the program, so the compiler can do whatever fun optimization it wants to</p>",
        "id": 169236979,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561737429
    },
    {
        "content": "<p>trying to rephrase what you are doing with your \"testing at offsets\", you basically have a closure <code>fn test_me(x: &amp;mut Buffer)</code> that you want to call with <code>Buffer</code> being as unaligned as possible?</p>",
        "id": 169239345,
        "sender_full_name": "RalfJ",
        "timestamp": 1561738817
    },
    {
        "content": "<p>or maybe more like <code>fn test_me(place_for_buf: *mut Buffer)</code> because you need to initialize yourself or so</p>",
        "id": 169239427,
        "sender_full_name": "RalfJ",
        "timestamp": 1561738864
    },
    {
        "content": "<p>that sounds reasonable, if you get a memory area of size <code>size_of&lt;Buffer&gt;() + 32</code> and then try all offsets less than <code>32</code> such that that you actually get a sufficiently aligned pointer, you should cover all your cases</p>",
        "id": 169239576,
        "sender_full_name": "RalfJ",
        "timestamp": 1561738987
    },
    {
        "content": "<p>why would that not find such a problem? of course this only works if you can control allocation</p>",
        "id": 169239590,
        "sender_full_name": "RalfJ",
        "timestamp": 1561738999
    },
    {
        "content": "<p>Yes, I think it’s accurate to say “I want to test placing my <code>Buffer</code> at every alignment it is valid for”, but as <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> points out, that’s not even enough.</p>",
        "id": 169255649,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561750666
    },
    {
        "content": "<p>Because what I really need to ensure is that a specific <em>field</em> of my <code>Buffer</code> will always be aligned correctly; I don’t care about the alignment of <code>Buffer</code> itself.</p>",
        "id": 169255729,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561750710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yeah, that involves just checking that <code>align_of::&lt;Buffer&gt;() &gt;= whatyouwant</code> and <code>field_offset!(Buffer, data) % WHATYOUWANT == 0</code>.</p>",
        "id": 169255810,
        "sender_full_name": "nagisa",
        "timestamp": 1561750774
    },
    {
        "content": "<p>The problem is that there’s no test I can write that says “for every possible way that <code>repr(Rust)</code> <em>might</em> organize this struct”</p>",
        "id": 169255829,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561750800
    },
    {
        "content": "<p>(<code>field_offset!</code> is not a built-in, you’ll need to figure out the incantation yourself or find a crate that does this)</p>",
        "id": 169255831,
        "sender_full_name": "nagisa",
        "timestamp": 1561750801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> this is where <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> tells me that no implementation of <code>offsetof</code> is non-UB because we can’t get raw pointers to fields without making references <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 169255900,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561750836
    },
    {
        "content": "<p>well, yeah, you cannot do <em>that</em>.</p>",
        "id": 169255902,
        "sender_full_name": "nagisa",
        "timestamp": 1561750838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> well… I don’t see how <code>let x = Buffer { ... }; let fieldptr = &amp;x.data as *const _</code> is gonna be bad.</p>",
        "id": 169255978,
        "sender_full_name": "nagisa",
        "timestamp": 1561750918
    },
    {
        "content": "<p>that is, you don’t <em>really</em> need <code>offsetof</code>, you just need to get an offset of a field in some instantiation of type, which should be fine.</p>",
        "id": 169256048,
        "sender_full_name": "nagisa",
        "timestamp": 1561750952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> which means I cannot directly write a test that triggers the same problem as my user; I can only test indirect things. At this point, wrapping it in a <code>#[repr(align(8)] struct AlignToU64&lt;T&gt;(T)</code> is equally as descriptive as this second-class of test.</p>",
        "id": 169256080,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561750972
    },
    {
        "content": "<p>That’s what really annoys me here; I cannot reproduce their bug, even though I have really strong suspicions.</p>",
        "id": 169256198,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561751053
    },
    {
        "content": "<blockquote>\n<p>The problem is that there’s no test I can write that says “for every possible way that <code>repr(Rust)</code> <em>might</em> organize this struct”</p>\n</blockquote>\n<p>yeah that you cannot do :/</p>",
        "id": 169257830,
        "sender_full_name": "RalfJ",
        "timestamp": 1561752214
    },
    {
        "content": "<p>and Miri cannot, either</p>",
        "id": 169257850,
        "sender_full_name": "RalfJ",
        "timestamp": 1561752230
    },
    {
        "content": "<p>though given that your user ran into this, it seems like Rust actually <em>does</em> lay out out to your disadvantage, so running miri with <code>--target &lt;32bit target&gt;</code> should run into the problem?</p>",
        "id": 169257942,
        "sender_full_name": "RalfJ",
        "timestamp": 1561752284
    },
    {
        "content": "<p>(We wanted to introduce randomization of field ordering as an option IIRC to weed out assumptions about order fields are laid out)</p>",
        "id": 169258149,
        "sender_full_name": "nagisa",
        "timestamp": 1561752448
    },
    {
        "content": "<p>Is it likely that Linux and Windows would lay out a struct differently (both 32-bit x86 and the same version of the compiler)</p>",
        "id": 169258284,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561752541
    },
    {
        "content": "<p>They see this in multiple x86 Windows builds, but I cant see it in Linux</p>",
        "id": 169258393,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561752608
    },
    {
        "content": "<p>It is possible, Windows' ABI mandates different alignments and stuff for various things.</p>",
        "id": 169259695,
        "sender_full_name": "nagisa",
        "timestamp": 1561753838
    },
    {
        "content": "<p>ah dang... cross-miri is a thing on my list but currently it is hard due to <a href=\"https://github.com/rust-lang/rust/issues/56443\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56443\">https://github.com/rust-lang/rust/issues/56443</a></p>",
        "id": 169259748,
        "sender_full_name": "RalfJ",
        "timestamp": 1561753910
    },
    {
        "content": "<p>in principle miri is entirely cross-capable, there's just some silly build system stuff in the way</p>",
        "id": 169259799,
        "sender_full_name": "RalfJ",
        "timestamp": 1561753931
    },
    {
        "content": "<p>for the libstd</p>",
        "id": 169259802,
        "sender_full_name": "RalfJ",
        "timestamp": 1561753935
    },
    {
        "content": "<p>it insists on building an artifact we dont want nor need, and needs a target toolchain just for that :(</p>",
        "id": 169259809,
        "sender_full_name": "RalfJ",
        "timestamp": 1561753951
    },
    {
        "content": "<p>For those interested, I <em>can</em> reproduce, but so far only by running on a 32-bit Windows machine, running their full test suite which requires MySQL</p>",
        "id": 169296837,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561813989
    }
]