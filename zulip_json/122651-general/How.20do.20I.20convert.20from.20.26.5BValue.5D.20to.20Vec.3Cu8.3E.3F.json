[
    {
        "content": "<p>Hi,</p>\n<p>I have a rust process on one host that uses Faktory queues (via Faktory-rs).  The data on the Producer has data passed in as Vec&lt;u8&gt;, but when the data is processed through the Consumer, I end up with data as &amp;[Value].    I'm trying to convert back to Vec&lt;u8&gt; but nothing has worked thus far.  I've been trying to use serde_json::from_value by iterating over the data, but that isn't working either.  I suspect there is probably an easier way to do this.  Anyone have any ideas?</p>",
        "id": 261782243,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637155097
    },
    {
        "content": "<p>well, what's the binary data supposed to look like? you mention json... but is it a json array or newline separated json objects or ...?</p>",
        "id": 261782465,
        "sender_full_name": "The 8472",
        "timestamp": 1637155257
    },
    {
        "content": "<p>Example, if I'm trying to send [1,2,3,4], I'll receive [Number(1), Number(2), Number(3), Number(4)].</p>",
        "id": 261783247,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637155650
    },
    {
        "content": "<p>If I send [\"t\"], I'll receive [String(\"t\")]</p>",
        "id": 261783374,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637155714
    },
    {
        "content": "<p>tried <code>serde_json::to_vec</code>?</p>",
        "id": 261784072,
        "sender_full_name": "The 8472",
        "timestamp": 1637156099
    },
    {
        "content": "<p>Yeah, I had tried that.  I  thought it looked like the solution, but it ended up mangling things even worse.  I'll get you the results in a moment.</p>",
        "id": 261787871,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637157921
    },
    {
        "content": "<p>I'm submitting vec![1,2,3,4].<br>\nI receive [Number(1), Number(2), Number(3), Number(4)]</p>\n<p>If I then use serde_json::to_vec, I get:  [91, 49, 44, 50, 44, 51, 44, 52, 93]</p>",
        "id": 261790551,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637159076
    },
    {
        "content": "<p>Which appears to be an array of \"[ 1 comma 2 comma 3 comma 4 ]\"</p>",
        "id": 261790923,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637159203
    },
    {
        "content": "<p>You might need <code>to_vec(Value::Array(values))</code> or a custom struct with derived <code>Serialize</code> containing that slice (saves the allocation for converting to vec).</p>",
        "id": 261794086,
        "sender_full_name": "The 8472",
        "timestamp": 1637160579
    },
    {
        "content": "<p>I did resolve this.  On the producer, I used <code>serde_json::to_value(array).unwrap()</code> and on the consumer <code>serde_json::from_value(job).unwrap()</code></p>",
        "id": 261843699,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637180802
    },
    {
        "content": "<p>Thanks for all your help, btw.</p>",
        "id": 261843742,
        "sender_full_name": "Mark Windrim",
        "timestamp": 1637180819
    }
]