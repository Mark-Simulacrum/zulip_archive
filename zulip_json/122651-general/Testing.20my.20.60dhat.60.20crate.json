[
    {
        "content": "<p>Hi. I have a crate for heap profiilng: <a href=\"https://crates.io/crates/dhat\">https://crates.io/crates/dhat</a>. You add a special global allocator from the crate to your Rust program, which tracks lots of information about allocations, and when the program terminates it dumps that information to a file, which can then be viewed with a viewer.</p>\n<p>I want to improve the testing. Because it uses a global allocator and prints stuff to file, normal unit and integration tests cannot exercise everything. I want to test by running actual binaries that use this library. I have a couple of example binaries in the <code>examples/</code> directory, but I don't think these can be tested within <code>cargo test</code>?</p>\n<p>My current best idea is to create a <code>src/main.rs</code> that will serve as a test binary. I can execute that binary within an integration test by using the <code>assert_cmd</code> crate. To allow it to serve as multiple test binaries I would just pass an argument that specifies which \"sub-binary\" to execute. This is a hack and I wonder if there's a better option.</p>",
        "id": 261334541,
        "sender_full_name": "nnethercote",
        "timestamp": 1636771231
    },
    {
        "content": "<p>Or maybe I could use <code>[[bin]]</code> to define multiple test binaries.</p>",
        "id": 261334570,
        "sender_full_name": "nnethercote",
        "timestamp": 1636771308
    },
    {
        "content": "<p>It's definitely non-standard for the main binary or binaries produced by a crate to be only there for testing purposes...</p>",
        "id": 261334626,
        "sender_full_name": "nnethercote",
        "timestamp": 1636771336
    },
    {
        "content": "<p>Or maybe <code>assert_cmd</code> is able to run example binaries?</p>",
        "id": 261334655,
        "sender_full_name": "nnethercote",
        "timestamp": 1636771424
    },
    {
        "content": "<p>Feels like I'm going to have to abuse some testing facility, one way or another <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261334714,
        "sender_full_name": "nnethercote",
        "timestamp": 1636771491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> why not use integration tests? Each of those run in a separate binary</p>",
        "id": 261336524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636774063
    },
    {
        "content": "<p>Oh, interesting. I don't suppose you can get ahold of <code>stdout</code> output from with the integration test?</p>",
        "id": 261341843,
        "sender_full_name": "nnethercote",
        "timestamp": 1636781928
    },
    {
        "content": "<p>Stdout of what? You could have the integration test recursively call cargo if you like</p>",
        "id": 261342015,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636782127
    },
    {
        "content": "<p>Another option is to ask <code>cargo</code> to not use the built-in test harness, at which point the test becomes a regular binary that invokes the <code>main</code> function. I have found recently that this works a ton better than trying to coerce the built-in test harness do things it isn't built to do.</p>",
        "id": 261351859,
        "sender_full_name": "nagisa",
        "timestamp": 1636797306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> How do I do that? Is there documentation? thanks</p>",
        "id": 261352032,
        "sender_full_name": "nnethercote",
        "timestamp": 1636797463
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/reference/cargo-targets.html?highlight=harness#the-harness-field\">https://doc.rust-lang.org/cargo/reference/cargo-targets.html?highlight=harness#the-harness-field</a></p>",
        "id": 261352090,
        "sender_full_name": "nagisa",
        "timestamp": 1636797518
    },
    {
        "content": "<p>Compared to the integration tetsts this has a benefit in that you don't need to make APIs you want to test public for this to work.</p>",
        "id": 261352109,
        "sender_full_name": "nagisa",
        "timestamp": 1636797566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Do you have an example? From reading that reference I feel like I only half understand...</p>",
        "id": 261352424,
        "sender_full_name": "nnethercote",
        "timestamp": 1636797935
    },
    {
        "content": "<p>Um… I used this in some of the crates I worked on, let me find an example…</p>",
        "id": 261352470,
        "sender_full_name": "nagisa",
        "timestamp": 1636797964
    },
    {
        "content": "<p>So, in <code>Cargo.toml</code> you put <a href=\"https://github.com/standard-ai/tracing-gstreamer/blob/2be4f770e55b47d011fc1abd641731770fe0276e/Cargo.toml#L14-L15\">this</a> in, and then add a <code>fn main(){}</code> with your tests to your <a href=\"http://lib.rs\">lib.rs</a> <a href=\"https://github.com/standard-ai/tracing-gstreamer/blob/2be4f770e55b47d011fc1abd641731770fe0276e/src/lib.rs#L163-L168\">as such</a>.</p>",
        "id": 261352501,
        "sender_full_name": "nagisa",
        "timestamp": 1636798033
    },
    {
        "content": "<p>In particular I needed to do <a href=\"https://github.com/standard-ai/tracing-gstreamer/blob/2be4f770e55b47d011fc1abd641731770fe0276e/src/tests.rs#L460-L475\">some global setup for the tests</a>, so this seemed like an appropriate approach to me</p>",
        "id": 261352555,
        "sender_full_name": "nagisa",
        "timestamp": 1636798085
    },
    {
        "content": "<p>I feel what you really want is something resembling compiletest in its <code>ui</code> <code>run-pass</code> mode though… <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 261353906,
        "sender_full_name": "nagisa",
        "timestamp": 1636800124
    },
    {
        "content": "<p>That's helpful, thank you</p>",
        "id": 261355121,
        "sender_full_name": "nnethercote",
        "timestamp": 1636802055
    }
]