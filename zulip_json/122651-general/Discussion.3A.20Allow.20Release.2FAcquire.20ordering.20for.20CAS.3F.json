[
    {
        "content": "<p>This is meant for discussion of the (now closed due to inactivity) PR <a href=\"https://github.com/rust-lang/rust/pull/74583\">#74583</a>. The primary arguments for whether this ordering combination should be allowed are pretty exhaustively linked in the PR itself I believe. However, given that LLVM compiles this incorrectly on some platforms (relevant issue links can also be found in the PR) I would like to discuss how best to proceed with this PR. <br>\nNote, that the PR consists of two parts: For one, it adds the necessary intrinsics and codegen code for generating the appropriate LLVM constructs for a CAS with release/acquire ordering, which is a purely internal change.<br>\nTwo, it amends the implementations in libcore for the <code>compare_exchange</code> and <code>compare_exchange_weak</code> methods on all atomic types. This is basically a <code>match (success, failure)</code> with a number of different combinations, which currently panics if release/acquire is used. This change is obviously outward-facing.<br>\nFrom my perspective, there are 4 different alternatives:</p>\n<ul>\n<li>a) merge the additions as-is, meaning it will be possible to write code that, when compiled, does not respect the acquire ordering on success on ARM</li>\n<li>b) refactor and merge only the internal intrinsics for now, and include the libcore changes at a later point (when and if LLVM fixes the codegen)</li>\n<li>c) keep the PR closed and re-open/merge everything when and if LLVM codegen is fixed</li>\n<li>d) do not merge at all and keep designating this combination as illegal (which would be an incorrect choice  in my estimation)</li>\n</ul>",
        "id": 216122341,
        "sender_full_name": "Oliver Giersch",
        "timestamp": 1604945265
    },
    {
        "content": "<p>Definitely not (a).</p>",
        "id": 216123048,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604945625
    },
    {
        "content": "<p>I would say c or d, depending on if we want to allow that ordering.</p>",
        "id": 216123125,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604945645
    },
    {
        "content": "<p>That's just me, though.</p>",
        "id": 216123162,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604945658
    }
]