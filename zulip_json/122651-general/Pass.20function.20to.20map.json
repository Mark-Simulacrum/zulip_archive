[
    {
        "content": "<p>Is it possible to pass a function to an iterator adapter (e.g. <code>map</code>)?<br>\nFor example, what am I doing wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">add_ones</span><span class=\"p\">(</span><span class=\"n\">xs</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Works:</span>\n<span class=\"w\">    </span><span class=\"c1\">// xs.iter().map(|x| x + 1).collect()</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Will not compile:</span>\n<span class=\"w\">    </span><span class=\"n\">xs</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">add_one</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240111727,
        "sender_full_name": "miles",
        "timestamp": 1621890239
    },
    {
        "content": "<p><code>iter()</code> will give you <code>&amp;u32</code>s while <code>add_one</code> accepts <code>u32</code>s.  it will work if you use <code>into_iter()</code> for example</p>",
        "id": 240112104,
        "sender_full_name": "lqd",
        "timestamp": 1621890456
    },
    {
        "content": "<p>Another option would be adding a <code>.copied()</code> before the <code>.map(add_one)</code></p>",
        "id": 240112216,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1621890508
    },
    {
        "content": "<p>Thanks. So now I'm pretty confused about this next example. Seems like <code>do_thing</code> should have the same signature as <code>|x| do_thing(x)</code>. Is there a way to ask the compiler what it thinks the type signatures should be (similar to typed-holes in haskell)?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">do_thing</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">do_things</span><span class=\"p\">(</span><span class=\"n\">words</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Works:</span>\n<span class=\"w\">    </span><span class=\"c1\">// words.iter().map(|x| do_thing(x)).collect()</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Will not compile</span>\n<span class=\"w\">    </span><span class=\"n\">words</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">do_thing</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I was originally going to cite <code>xs.iter().map(|x| add_one(x)).collect()</code> as a counter example, but this fails to compile (as expected based on your recent explanations).</p>",
        "id": 240113415,
        "sender_full_name": "miles",
        "timestamp": 1621891101
    },
    {
        "content": "<p>The best way I know to get the compiler to tell you the type of an expression is to put an <code>as ()</code> somewhere -- that puts the type right in the first line of the error.</p>\n<p>The usual closure weirdness is with methods, because of autoderef.  Where <code>.map(|x| x.foo())</code> works (because it's <code>.map(|x| (*x).foo())</code> or something) but <code>.map(TheType::foo)</code> doesn't.</p>",
        "id": 240118641,
        "sender_full_name": "scottmcm",
        "timestamp": 1621893881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I do <code>let () = </code> all the time to get the compiler to tell me types. Never thought about doing <code>as ()</code>; that's handy.</p>",
        "id": 240127232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621899835
    },
    {
        "content": "<p>It's an old trick from IRC -- the bot there only showed the first line of an error, and <code>let _: () = 4_i32</code> is just <code>error[E0308]: mismatched types</code>, but <code>4_i32 as ()</code> gives <code> error[E0605]: non-primitive cast: `i32` as `()` </code></p>",
        "id": 240129678,
        "sender_full_name": "scottmcm",
        "timestamp": 1621902101
    },
    {
        "content": "<p>Of course, even shorter is just <code>4_i32()</code>: <code> error[E0618]: expected function, found `i32` </code></p>",
        "id": 240130516,
        "sender_full_name": "scottmcm",
        "timestamp": 1621902934
    }
]