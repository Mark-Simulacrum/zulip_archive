[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> <a href=\"http://lists.llvm.org/pipermail/llvm-dev/2015-November/091968.html\" target=\"_blank\" title=\"http://lists.llvm.org/pipermail/llvm-dev/2015-November/091968.html\">http://lists.llvm.org/pipermail/llvm-dev/2015-November/091968.html</a></p>",
        "id": 158394793,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550011428
    },
    {
        "content": "<p>i just found that, not sure if you have seen it</p>",
        "id": 158394844,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550011446
    },
    {
        "content": "<p>Oh gods I recognize that name</p>",
        "id": 158394853,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550011452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> after reading all that, i have some thoughts</p>",
        "id": 158395426,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550011963
    },
    {
        "content": "<p>first, we don't want to say which optimizations <code>black_box</code> inhibits</p>",
        "id": 158395444,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550011985
    },
    {
        "content": "<p>that would tie <code>black_box</code> definition to some optimization pipeline</p>",
        "id": 158395461,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550011999
    },
    {
        "content": "<p>second, it feels like we want <code>black_box</code> to \"inhibit optimizations\" but while still generating optimized code, this is a problem</p>",
        "id": 158395569,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012085
    },
    {
        "content": "<p>third, the identity function is not what we want, because we don't want <code>back_box(T) -&gt; T</code> to return the same <code>T</code> that it takes as an argument</p>",
        "id": 158395674,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012168
    },
    {
        "content": "<p>i think that what we want is for the code around <code>black_box(T) -&gt; T</code> to be optimized as if <code>black_box</code> performs a volatile write of its argument to global memory, and then performs a volatile read of global memory, returning that result</p>",
        "id": 158395709,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012231
    },
    {
        "content": "<p>at the same time, we don't want any machine code to be generated to perform those reads and writes</p>",
        "id": 158395721,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012249
    },
    {
        "content": "<p>so that's basically what the <code>asm!</code> macros do</p>",
        "id": 158395862,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012393
    },
    {
        "content": "<p>I am very wary of defining an operation as \"pretend it does these operations, but don't actually codegen it that way\". For starters, that doesn't indicate what the right <em>semantics</em> are, and the semantics are ultimately what drives development of optimizations (and lots of other stuff!). I also do not know how to implement that other than carrying this operation not just through all of IR but also practically all of the backend. That's a lot of real estate.</p>",
        "id": 158395975,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550012446
    },
    {
        "content": "<p>right now we implement it with <code>asm!</code> telling LLVM that we read some memory with side-effects, but emitting no instructions within the assembly block, generating no machine code</p>",
        "id": 158396150,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012555
    },
    {
        "content": "<p>that might well be the right way to implement these semantics in LLVM</p>",
        "id": 158396187,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012606
    },
    {
        "content": "<p>I may be misunderstanding what you're targeting here. Is this wording supposed to go into the user facing docs? Is that supposed to provide any tangible guarantees to users?</p>",
        "id": 158396268,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550012667
    },
    {
        "content": "<p>The thing is that the guarantees that we provide to users cannot be used for optimizations</p>",
        "id": 158396522,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012926
    },
    {
        "content": "<p>To users we want to say <code>black_box</code> returns its argument and has no effects (it is a <code>nop</code>).<br>\nTo the optimizer we want to say: <code>black_box</code> performs a volatile write of its argument to global memory, and a volatile read of some other value from global memory, and returns that.</p>",
        "id": 158396585,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550012988
    },
    {
        "content": "<p>I don't know how a specification could specify both, they sound incompatible to me.</p>",
        "id": 158396647,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013015
    },
    {
        "content": "<p>It's true that this kind of function is inherently self-contradicting to a degree, but I don't see the actual problem with what is the status quo implementation and in the RFC text right now?</p>",
        "id": 158396773,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550013129
    },
    {
        "content": "<p>The RFC says that <code>black_box</code> is a <code>nop</code>, and that it might inhebit some optimizations as a quality of implementation issue.</p>",
        "id": 158396791,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013165
    },
    {
        "content": "<p>Yes. And in practice we implement it as inline asm, which as you said seems to do something roughly sensible. What more is needed?</p>",
        "id": 158396819,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550013200
    },
    {
        "content": "<p>Remove the quality of implementation.</p>",
        "id": 158396828,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013214
    },
    {
        "content": "<p>I see no remotely reasonable way to do that, for many reasons some of which you stated earlier. Nor do I see any need for that for the benchmarking use case.</p>",
        "id": 158396893,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550013266
    },
    {
        "content": "<p>We have to say that <code>black_box</code> is a <code>nop</code>, but for the purposes of code generation, it is treated as an unknown function that performs a volatile write of its argument to global memory, and returns some value that is volatile read from global memory, except that when all optimizations are over, it is replaced by a nop.</p>",
        "id": 158396895,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013269
    },
    {
        "content": "<p>Why do we \"have to say\" that?</p>",
        "id": 158396907,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550013288
    },
    {
        "content": "<p>We'd have to say something like that if we wanted to more precisely guarantee how optimizations are inhibited by the function</p>",
        "id": 158396958,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013348
    },
    {
        "content": "<p>That would be a way of doing that.</p>",
        "id": 158397013,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013372
    },
    {
        "content": "<p>I'd guess the question is whether we want people to be able to rely on black_box being optimized in a certain way or not.</p>",
        "id": 158397051,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013427
    },
    {
        "content": "<p>the RFC says that this is not what we want</p>",
        "id": 158397057,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013443
    },
    {
        "content": "<p>but some want this</p>",
        "id": 158397063,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013452
    },
    {
        "content": "<p>not necessary for benchmarks, but would be nice to have</p>",
        "id": 158397070,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013470
    },
    {
        "content": "<p>I think a lot of people have some idea in their head that they could do a certain thing if they could just shut up the pesky optimizer, but I think a lot of these fall under the category as &lt;<a href=\"https://twitter.com/johnregehr/status/1074712581749657600\" target=\"_blank\" title=\"https://twitter.com/johnregehr/status/1074712581749657600\">https://twitter.com/johnregehr/status/1074712581749657600</a>&gt; and the ones that can be salvaged would be <em>far</em> better served by understanding what it is they actually want in terms of the language semantics (not the optimizer) and finding or adding a way to express that.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/johnregehr/status/1074712581749657600\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/983125761522417665/rK8etQKP_normal.jpg\"></a><p>true fact: if you leave a comment explaining that you understand you're doing something undefined, the compiler has to do what you mean <a href=\"https://t.co/or73tx8dOY\" target=\"_blank\" title=\"https://t.co/or73tx8dOY\">https://twitter.com/volatile_void/status/1074710332722069504</a></p><span>- John Regehr (@johnregehr)</span></div></div>",
        "id": 158397290,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550013709
    },
    {
        "content": "<p>See also Ralf's excellent comment on the RFC PR</p>",
        "id": 158397351,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550013733
    },
    {
        "content": "<p>To take a particular example, I do not think anything in the vicinity of \"constant time code\" will ever be achievable by any compilation pipeline that involves LLVM in any way.</p>",
        "id": 158397400,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550013800
    },
    {
        "content": "<p>Not constant time code, but having some mental model of how LLVM sees <code>black_box</code> in  term of Rust operations (volatile reads/writes) would be useful when using it in benchmarks</p>",
        "id": 158397490,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550013890
    },
    {
        "content": "<p><em>Possibly</em>, but I doubt I personally would get much value from that, and I eat and breathe LLVM IR and LLVM passes. But more importantly, this can be a rustc-specific note, not \"the spec\".</p>",
        "id": 158397583,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550014008
    },
    {
        "content": "<p>I wonder if we could try playing some trick, such as saying the Rust abstract machine has a \"magic global\" or so, and <code>black_box</code> writes a pointer there. Then, if stuff gets written to that global with atomic instructions, there could be another thread (or so?) that takes the data and manipulates it. We also have a simple syntactic condition making sure the \"magic global\" is never read by real Rust code, meaning we don't have to actually compile the instructions that manipulate this global to real code. But when considering whether an optimization is correct, we <em>do</em> allow the context (the unknown code surrounding the code we are optimizing) to read from this magic global.<br>\nThe concurrency part about this seems \"wrong\" somehow, though. maybe signal handlers are a better model? not sure.</p>",
        "id": 158423470,
        "sender_full_name": "RalfJ",
        "timestamp": 1550048139
    },
    {
        "content": "<p>For the shared memory thing cramertj described, something like that seems fine. But for benchmarks, generally the \"real\" accesses to the data will be neither atomic nor volatile, so other threads or signal handlers accessing the data would be UB and that possibility will be rightly disregarded by optimizations. (Plus, there's also the question of how to map whatever semantics we choose to LLVM IR.)</p>",
        "id": 158428374,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550052978
    },
    {
        "content": "<p>I can't tell, was this thread before my \"two primitives\" comment?</p>",
        "id": 158687906,
        "sender_full_name": "eddyb",
        "timestamp": 1550311721
    },
    {
        "content": "<p>yeah</p>",
        "id": 158687916,
        "sender_full_name": "RalfJ",
        "timestamp": 1550311763
    },
    {
        "content": "<p>though I dont see that fundamentally changing anything, TBH^^ it's still \"magic\", isn't it?</p>",
        "id": 158687918,
        "sender_full_name": "RalfJ",
        "timestamp": 1550311776
    },
    {
        "content": "<p>IMO the nice thing is we can require the values to still be valid</p>",
        "id": 158687964,
        "sender_full_name": "eddyb",
        "timestamp": 1550311818
    },
    {
        "content": "<p>i.e. it should affect performance but we guarantee 0 UB avoidance</p>",
        "id": 158687966,
        "sender_full_name": "eddyb",
        "timestamp": 1550311834
    },
    {
        "content": "<p>could even noop them out if --test is not passed or something silly like that</p>",
        "id": 158687971,
        "sender_full_name": "eddyb",
        "timestamp": 1550311861
    },
    {
        "content": "<p>I guess it's still dubious in terms of accidentally supporting constant-time stuff?</p>",
        "id": 158687983,
        "sender_full_name": "eddyb",
        "timestamp": 1550311916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I guess my point was that it's tamer if <code>bench_input(mem::uninitialized())</code> will always error in miri</p>",
        "id": 158688084,
        "sender_full_name": "eddyb",
        "timestamp": 1550312074
    },
    {
        "content": "<p>and <code>bench_output</code> couldn't accidentally be used to assume a pointer may escape</p>",
        "id": 158688101,
        "sender_full_name": "eddyb",
        "timestamp": 1550312117
    },
    {
        "content": "<p>(not sure if we can tell LLVM about the latter limitation)</p>",
        "id": 158688105,
        "sender_full_name": "eddyb",
        "timestamp": 1550312147
    },
    {
        "content": "<p>I kind of like the closure form but idk if we can spec it any better</p>",
        "id": 158688150,
        "sender_full_name": "eddyb",
        "timestamp": 1550312194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> now I am tempted to do something silly like <code>x ^ bench_obscured_zero()</code> to replace <code>bench_input(x)</code>, especially since I suspect it's almost always integers, but I don't want to actually generate the <code>xor</code> instruction. if <code>x</code> is undef/poison I suspect this will propagate to the <code>xor</code></p>",
        "id": 158688328,
        "sender_full_name": "eddyb",
        "timestamp": 1550312553
    },
    {
        "content": "<p>defining the semantics of these functions is frustrating since they're \"just\" optimizer hints</p>",
        "id": 158688338,
        "sender_full_name": "eddyb",
        "timestamp": 1550312604
    },
    {
        "content": "<p>uhhhh</p>",
        "id": 158688383,
        "sender_full_name": "nagisa",
        "timestamp": 1550312651
    },
    {
        "content": "<p>you could just as well have an attribute on the bench closure to make its args obscured and return preserved, while allowing inlining</p>",
        "id": 158688386,
        "sender_full_name": "eddyb",
        "timestamp": 1550312660
    },
    {
        "content": "<p>if you want constant time code you write assembly, there’s currently no other way around it</p>",
        "id": 158688425,
        "sender_full_name": "nagisa",
        "timestamp": 1550312669
    },
    {
        "content": "<p>and definitely no way around it if your code goes through llvm</p>",
        "id": 158688431,
        "sender_full_name": "nagisa",
        "timestamp": 1550312681
    },
    {
        "content": "<p>yeah my point is I don't want to mix bench stuff with freeze or ct-time</p>",
        "id": 158688434,
        "sender_full_name": "eddyb",
        "timestamp": 1550312686
    },
    {
        "content": "<p>the bench stuff should be implementable as noops</p>",
        "id": 158688436,
        "sender_full_name": "eddyb",
        "timestamp": 1550312698
    },
    {
        "content": "<p>+</p>",
        "id": 158688442,
        "sender_full_name": "nagisa",
        "timestamp": 1550312704
    },
    {
        "content": "<p><code>#[inline(bench)]</code> lol</p>",
        "id": 158688447,
        "sender_full_name": "eddyb",
        "timestamp": 1550312736
    },
    {
        "content": "<p><code>#[inline(obscure)]</code> might be better, idk. basically <code>#[inline(always)]</code> plus obscured args and used return value</p>",
        "id": 158688495,
        "sender_full_name": "eddyb",
        "timestamp": 1550312794
    },
    {
        "content": "<blockquote>\n<p>i.e. it should affect performance but we guarantee 0 UB avoidance</p>\n</blockquote>\n<p>wait but that's what the RFC already says, right?</p>",
        "id": 158688935,
        "sender_full_name": "RalfJ",
        "timestamp": 1550313683
    },
    {
        "content": "<p>as far as I am concerned, specifying the \"bench\" part is pretty much solved, the RFC seems to do that fine</p>",
        "id": 158688979,
        "sender_full_name": "RalfJ",
        "timestamp": 1550313730
    },
    {
        "content": "<p>some people don't like the name, is all</p>",
        "id": 158688980,
        "sender_full_name": "RalfJ",
        "timestamp": 1550313736
    },
    {
        "content": "<p>but then the hard open question is how to specify the \"UB-avoidance\" stuff</p>",
        "id": 158688994,
        "sender_full_name": "RalfJ",
        "timestamp": 1550313750
    },
    {
        "content": "<p>yeah it's just that some people have suggested renaming to <code>bench_used</code> but that only makes sense for bench outputs, not inputs</p>",
        "id": 158689109,
        "sender_full_name": "eddyb",
        "timestamp": 1550313965
    },
    {
        "content": "<p>if anyone thinks avoiding UB might be part of what a <code>black_box</code> is and will abuse it without reading the docs, we should probably use a different name</p>",
        "id": 158689123,
        "sender_full_name": "eddyb",
        "timestamp": 1550314027
    },
    {
        "content": "<p><code>black_box</code> is not a particularly helpful name anyway</p>",
        "id": 158689127,
        "sender_full_name": "eddyb",
        "timestamp": 1550314059
    },
    {
        "content": "<p><code>bench_obfuscate</code> :P</p>",
        "id": 158690360,
        "sender_full_name": "RalfJ",
        "timestamp": 1550316108
    },
    {
        "content": "<p>that's good for inputs (and not far off my \"obscure\")</p>",
        "id": 158690510,
        "sender_full_name": "eddyb",
        "timestamp": 1550316289
    },
    {
        "content": "<p>I really want the input one to not keep the computation alive if it's unused and the output one to <em>only</em> do that keeping it alive thing</p>",
        "id": 158690533,
        "sender_full_name": "eddyb",
        "timestamp": 1550316321
    },
    {
        "content": "<p>but it seems hard to do in LLVM exactly like that</p>",
        "id": 158690539,
        "sender_full_name": "eddyb",
        "timestamp": 1550316331
    },
    {
        "content": "<p>I agree it makes sense to distinguish these two from a \"spec\" perspective (\"spec\" as in \"compiler hint spec\", not language spec)</p>",
        "id": 158690907,
        "sender_full_name": "RalfJ",
        "timestamp": 1550316799
    },
    {
        "content": "<p>and I agree the bench harness should incorporate that:</p>\n<div class=\"codehilite\"><pre><span></span>bench::iter(inputs, |inputs| {\n  let out = do_something_with(inputs);\n  out\n})\n</pre></div>\n\n\n<p>should pass inputs and outputs through <code>black_box</code> (or through the two separate operations you suggested)</p>",
        "id": 158690987,
        "sender_full_name": "RalfJ",
        "timestamp": 1550316883
    },
    {
        "content": "<p>Is <code>pretend_use</code> far off?</p>",
        "id": 158691301,
        "sender_full_name": "maksimsco",
        "timestamp": 1550317236
    },
    {
        "content": "<p>sounds okay for the output half</p>",
        "id": 158691414,
        "sender_full_name": "eddyb",
        "timestamp": 1550317407
    },
    {
        "content": "<p>but the current <code>black_box</code> is a weird \"pretend the value escapes and can also be modified\" all-in-one thing hence me suggesting to split it up</p>",
        "id": 158691476,
        "sender_full_name": "eddyb",
        "timestamp": 1550317460
    },
    {
        "content": "<p>that might also make finding less contentious names easier</p>",
        "id": 158692014,
        "sender_full_name": "RalfJ",
        "timestamp": 1550318289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202336\">@maksimsco</span>  <code>pretend_use</code> seems pretty good actually</p>",
        "id": 158704390,
        "sender_full_name": "centril",
        "timestamp": 1550337768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> In my humble opinion anything other than <code>black_box</code> would be a path in a right direction, <code>black_box</code> is very misleading name IMO until you look in the code</p>",
        "id": 158705414,
        "sender_full_name": "maksimsco",
        "timestamp": 1550339584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202336\">@maksimsco</span>  I mostly just want to ship the thing :P</p>",
        "id": 158705469,
        "sender_full_name": "centril",
        "timestamp": 1550339685
    },
    {
        "content": "<p>It's a good thing :)</p>",
        "id": 158705485,
        "sender_full_name": "maksimsco",
        "timestamp": 1550339710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> when using <code>asm!</code> you can either say, this reads this register and uses it, or you can also say this reads the memory behind this pointer</p>",
        "id": 159188179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867293
    },
    {
        "content": "<p><code>\"*m\"(&amp;x)</code> states that this reads the memory behind the pointer <code>&amp;x</code>, which is just x</p>",
        "id": 159188216,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867323
    },
    {
        "content": "<p>if you want to state that the block also reads other memory, either you manually pass that as inputs to the block, or you can say <code>clobber \"memory\"</code></p>",
        "id": 159188249,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867358
    },
    {
        "content": "<p>which means that all memory is read by the assembly block, and/or written to</p>",
        "id": 159188273,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867384
    },
    {
        "content": "<p>that's globals, memory reachable by pointers, etc. private locals that the block cannot know anything about, aren't affected by it</p>",
        "id": 159188335,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867409
    },
    {
        "content": "<p>and that's pretty much all the tools we have with <code>asm!</code></p>",
        "id": 159188351,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867421
    },
    {
        "content": "<p>if you wanted to say, reads the memory behind some pointer, and all the memory behind all the pointers that might be there, you basically have to write <code>asm!(\"\" : : \"*m\"(&amp;x), \"*m(x.0)\", ....)</code> somehow (where <code>x.0</code> is a ptr)</p>",
        "id": 159188422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867486
    },
    {
        "content": "<p>for the Vec case, the pointer is of type <code>*mut T</code> and there are <code>len</code> elements behind it, so we somehow would need to generate a block that reads the memory of each of those <code>T</code>, from the knowledge that this is encoded in <code>len</code></p>",
        "id": 159188541,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867569
    },
    {
        "content": "<p>so iff we had a way to finding all memory reachable from a pointer, then we could do this with <code>asm!</code> or other tools, but AFAICT we do not have a way of finding that out</p>",
        "id": 159188673,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550867677
    },
    {
        "content": "<p>hm okay, they are more limited than I thought then</p>",
        "id": 159189131,
        "sender_full_name": "RalfJ",
        "timestamp": 1550868096
    },
    {
        "content": "<p>I'd have expected something like a \"read-only <code>clobber</code>\" -- can read anything, but write nothing</p>",
        "id": 159189143,
        "sender_full_name": "RalfJ",
        "timestamp": 1550868116
    },
    {
        "content": "<p>(well, write whatever registers it gets assigned as writeable, but not anything else)</p>",
        "id": 159189191,
        "sender_full_name": "RalfJ",
        "timestamp": 1550868129
    },
    {
        "content": "<p>yeah, that would be cool</p>",
        "id": 159193771,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550871765
    },
    {
        "content": "<p>we could use that in both bench_input and bench_output</p>",
        "id": 159193790,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550871781
    },
    {
        "content": "<p>i'm tending to think that the best is to propose black_box as is, and that we can implement bench_input and bench_output behind a feature gate, and maybe some day stabilize those and implement black_box on top of them</p>",
        "id": 159193834,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550871822
    },
    {
        "content": "<p>black_box still addresses the use case of \"please don't remove my benchmark\", and if someone needs something more finer grained than that, while bench_input / _output might be enough, chances are that they won't</p>",
        "id": 159193907,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550871864
    },
    {
        "content": "<p>like, playing with all the asm! options, LLVM accepts many of them and documents their semantics, but everything is full of disclaimers stating things like \"LLVM will assume the worst and clobber everything\"</p>",
        "id": 159193953,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550871929
    },
    {
        "content": "<p>reading the lang refs sounds more like things are barely implemented to make clang correct, but that all code around asm! blocks is unnecessarily pessimized atm</p>",
        "id": 159194040,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550871996
    }
]