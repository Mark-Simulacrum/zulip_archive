[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I think a sync chat might be helpful -- I'm trying to understand your viewpoint on what exactly we should document.</p>\n<p>You say: \"In the context of this discussion, the question that needs to be properly answered somewhere in the reference is: If a call to Drop::drop fails, was the value dropped? If the answer is \"no\", then calling Drop::drop again isn't a \"double-drop\" because the value has not been dropped.\"</p>\n<p>To me that's not really something we need to clarify, since <em>any</em> function which takes ownership can only be called once, even if it panics, right?</p>",
        "id": 184101929,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105388
    },
    {
        "content": "<p>Like, there's nothing specific to Drop here.</p>",
        "id": 184101931,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105394
    },
    {
        "content": "<p>Would you expect us to clarify this for all functions? Essentially we'd be saying \"panic does not undo transfers of ownership\"</p>",
        "id": 184101989,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105435
    },
    {
        "content": "<p>but that seems like an odd statement to make (at least to me) because that seems somewhat... obvious, I guess?</p>",
        "id": 184101994,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105451
    },
    {
        "content": "<p>Notice that <code>drop_in_place</code> drops without taking ownership</p>",
        "id": 184102001,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105466
    },
    {
        "content": "<p>no, that's not true</p>",
        "id": 184102002,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105472
    },
    {
        "content": "<p>drop_in_place explicitly notes: \"using the pointed-to value after calling drop_in_place can cause undefined behavior\"</p>\n<p>any Drop is a transfer of ownership</p>",
        "id": 184102083,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105537
    },
    {
        "content": "<p>\"Can\"</p>",
        "id": 184102088,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105550
    },
    {
        "content": "<p>any Drop that succeeds, is definetely a transfer of ownership</p>",
        "id": 184102094,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105569
    },
    {
        "content": "<p>but we are talking about, e.g., a call to <code>ptr::drop_in_place</code> that fails</p>",
        "id": 184102102,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105581
    },
    {
        "content": "<p>You would agree that <code>std::mem::drop</code> cannot be called more than once, even if it panics, right?</p>",
        "id": 184102114,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105606
    },
    {
        "content": "<p>(i.e., there's nothing to clarify there)</p>",
        "id": 184102116,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105612
    },
    {
        "content": "<p>I'm not sure how you would be able to do that</p>",
        "id": 184102119,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105619
    },
    {
        "content": "<p>well, I mean, obviously it's possible</p>",
        "id": 184102120,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105629
    },
    {
        "content": "<p>the only way to run into these issues, is using <code>ptr::drop_in_place</code></p>",
        "id": 184102121,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105631
    },
    {
        "content": "<p>the borrow checker doesn't let you call <code>mem::drop</code> twice</p>",
        "id": 184102159,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105643
    },
    {
        "content": "<p>not even in unsafe code</p>",
        "id": 184102171,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105647
    },
    {
        "content": "<p>That's just because it's easier to misuse</p>",
        "id": 184102172,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105653
    },
    {
        "content": "<p>i.e., it only semantically takes ownership</p>",
        "id": 184102175,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105661
    },
    {
        "content": "<p>no, i mean that it is literally impossible to call <code>mem::drop</code> on a value twice in Rust</p>",
        "id": 184102182,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105678
    },
    {
        "content": "<p>Its docs even say \"This is semantically equivalent to calling ptr::read and discarding the result\"</p>",
        "id": 184102184,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105679
    },
    {
        "content": "<p>okay, sure</p>",
        "id": 184102188,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105687
    },
    {
        "content": "<p>but you can obviously resynthesize the value and re-pass it in if you wanted to</p>",
        "id": 184102196,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105698
    },
    {
        "content": "<p>e.g., by <code>ptr::read</code>ing again</p>",
        "id": 184102207,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105705
    },
    {
        "content": "<p>sure, but a <code>ptr::read</code> + <code>forget</code> doesn't do anything</p>",
        "id": 184102218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105720
    },
    {
        "content": "<p>as in, if I have some memory on the heap, and I call <code>ptr::read</code> and <code>forget</code> the result, the value on the heap \"is still alive\"</p>",
        "id": 184102235,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105740
    },
    {
        "content": "<p>Okay, so I see that \"discarding\" as \"std::mem::drop\"</p>",
        "id": 184102239,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105751
    },
    {
        "content": "<p>yes</p>",
        "id": 184102243,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105757
    },
    {
        "content": "<p>i.e., drop_in_place is conceptually <code>std::mem::drop(ptr::read(ptr))</code></p>",
        "id": 184102285,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105765
    },
    {
        "content": "<p>for me the clarification that should happen somewhere, is that when you try to drop something, it doesn't matter whether that succeeds or fails, that drops the value</p>",
        "id": 184102297,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105785
    },
    {
        "content": "<p>and with that definition it of course can't be called twice, for the same reason that std::mem::drop can't be</p>",
        "id": 184102299,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105788
    },
    {
        "content": "<p>but how is that different from <code>std::mem::drop(ptr::read(ptr))</code> panicking?</p>",
        "id": 184102305,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105809
    },
    {
        "content": "<p>well, you are assuming that the <code>mem::drop</code> succeeds</p>",
        "id": 184102308,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105813
    },
    {
        "content": "<blockquote>\n<p>i.e., drop_in_place is conceptually <code>std::mem::drop(ptr::read(ptr))</code></p>\n</blockquote>\n<p>Except that <code>drop_in_place</code> doesn't move the value. (Important for pinning)</p>",
        "id": 184102318,
        "sender_full_name": "bjorn3",
        "timestamp": 1577105822
    },
    {
        "content": "<p>we don't say that <code>mem::drop</code> can't be called twice</p>",
        "id": 184102325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105829
    },
    {
        "content": "<p>we say that a value cannot be dropped twice</p>",
        "id": 184102331,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105835
    },
    {
        "content": "<p>that double-drops are UB</p>",
        "id": 184102337,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105841
    },
    {
        "content": "<p>the question is whether a <code>drop</code> that fails still drops or not</p>",
        "id": 184102339,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105851
    },
    {
        "content": "<p>if a drop that fails does not drop, then <code>mem::drop(ptr::read(ptr)</code> did not drop anything</p>",
        "id": 184102347,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105871
    },
    {
        "content": "<p>okay</p>",
        "id": 184102420,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105932
    },
    {
        "content": "<p>So maybe what we need to clarify is whether \"drop\" is the act of actually running <code>Drop::drop</code> to \"success\", or the act of trying to run <code>Drop::drop</code></p>",
        "id": 184102432,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105947
    },
    {
        "content": "<p>Right, to me it's \"obviously\" the latter</p>",
        "id": 184102442,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105960
    },
    {
        "content": "<p>yeah, i think that's the consensus</p>",
        "id": 184102447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577105968
    },
    {
        "content": "<p>But I guess that's not true for you, so we should document it somewhere</p>",
        "id": 184102450,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105971
    },
    {
        "content": "<p>Since the confusion seems to center around drop_in_place, maybe adding a section there makes sense?</p>",
        "id": 184102463,
        "sender_full_name": "simulacrum",
        "timestamp": 1577105996
    },
    {
        "content": "<p>I was just wondering if we actually had written that somewhere, when I filled that issue, is because I actually wrote code that caught whether dropping a value failed, and if so, tried to re-drop again</p>",
        "id": 184102514,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106011
    },
    {
        "content": "<p>I think it would be better to add this to wherever we define what \"drop\" is, e.g., maybe to <code>Drop::drop</code></p>",
        "id": 184102531,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106039
    },
    {
        "content": "<p>or the <code>Drop</code> trait docs</p>",
        "id": 184102532,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106044
    },
    {
        "content": "<p>hm, okay, I could see that I guess</p>",
        "id": 184102539,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106064
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">VecWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">VecWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>would be unsound if <code>Vec&lt;u8&gt;::drop</code> could panic.</p>",
        "id": 184102566,
        "sender_full_name": "bjorn3",
        "timestamp": 1577106099
    },
    {
        "content": "<p>er, no, that's definitely sound?</p>",
        "id": 184102615,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106125
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://doc.rust-lang.org/std/ops/trait.Drop.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/ops/trait.Drop.html\">https://doc.rust-lang.org/std/ops/trait.Drop.html</a></p>\n</blockquote>",
        "id": 184102621,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106130
    },
    {
        "content": "<p>I'm confused how that's unsound if it can panic</p>",
        "id": 184102631,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106138
    },
    {
        "content": "<p>So there, maybe add a section explaining what happens when <code>Drop::drop</code> panics</p>",
        "id": 184102635,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106145
    },
    {
        "content": "<p>that kind of ties to the issue in the rust-lang/reference about documenting that as well</p>",
        "id": 184102644,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106158
    },
    {
        "content": "<p>It is unsound if dropping after a panic is allowed.</p>",
        "id": 184102648,
        "sender_full_name": "bjorn3",
        "timestamp": 1577106164
    },
    {
        "content": "<p>Should have been more clear</p>",
        "id": 184102656,
        "sender_full_name": "bjorn3",
        "timestamp": 1577106182
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 184102667,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106187
    },
    {
        "content": "<p>I don't follow either</p>",
        "id": 184102681,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106202
    },
    {
        "content": "<p>Dropping <code>T</code> after <code>Drop::drop(&amp;mut T)</code> fails or succeeds is not allowed.</p>",
        "id": 184102699,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106237
    },
    {
        "content": "<p>But that code looks safe in all cases?</p>",
        "id": 184102743,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106245
    },
    {
        "content": "<p>Yes, it looks good to me as well</p>",
        "id": 184102747,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106252
    },
    {
        "content": "<p>If dropping the vector panics, the fields of <code>VecWrapper</code> will still be dropped</p>",
        "id": 184102751,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106264
    },
    {
        "content": "<p>but the <code>ManuallyDrop</code> field doesn't impl Drop</p>",
        "id": 184102752,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106273
    },
    {
        "content": "<p>i.e., is no different than this safe code:</p>\n<div class=\"codehilite\"><pre><span></span>struct VecWrapper {\n    x: Vec&lt;u8&gt;,\n}\n</pre></div>",
        "id": 184102754,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106275
    },
    {
        "content": "<p>Better example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">VecWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">VecWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">rand_bool</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>If <code>VecWrapper</code> panics after the drop of <code>Vec&lt;u8&gt;</code>, then allowing redropping it would be unsound, as <code>Vec&lt;u8&gt;</code> would be dropped again.</p>",
        "id": 184102773,
        "sender_full_name": "bjorn3",
        "timestamp": 1577106314
    },
    {
        "content": "<p>Sure, yes, I think that's what we've agreed upon</p>",
        "id": 184102797,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106350
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">VecWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">VecWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">drop_in_place</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// mem::forget(mem::swap(self.x, Vec::new()));</span>\n<span class=\"w\">         </span><span class=\"n\">ptr</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is unsound.</p>",
        "id": 184102848,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106365
    },
    {
        "content": "<p>That tries to drop the <code>Vec&lt;u8&gt;</code>, which can panic, and if it does, then the <code>x</code> field will be dropped again, which is a double drop.</p>",
        "id": 184102885,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106415
    },
    {
        "content": "<p>Most likely yes, though you can do <code>ptr::write(&amp;mut self.x, Vec::new())</code>.</p>",
        "id": 184102887,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106417
    },
    {
        "content": "<p>Ah yes, you can do that as well</p>",
        "id": 184102904,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106429
    },
    {
        "content": "<p>though actually, no, that's still unsound</p>",
        "id": 184102918,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106447
    },
    {
        "content": "<p>you can't ptr::drop_in_place inside a Drop impl ~ever pretty much</p>",
        "id": 184102922,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106457
    },
    {
        "content": "<p>(on a field, at least)</p>",
        "id": 184102926,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106461
    },
    {
        "content": "<p>oh, why not ?</p>",
        "id": 184102930,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106471
    },
    {
        "content": "<p>Since Drop impls can't drop their fields</p>",
        "id": 184102976,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106498
    },
    {
        "content": "<p>since they will be dropped after the drop impl</p>",
        "id": 184102981,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106504
    },
    {
        "content": "<p>i.e., you need to \"move out\" of the field if you're going to drop it</p>",
        "id": 184102989,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106515
    },
    {
        "content": "<p>otherwise every drop impl would need to drop all fields, even if you're e.g. closing a file or something</p>",
        "id": 184102997,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106529
    },
    {
        "content": "<p>i'm not sure I follow, are you saying that this is not possible, because the compiler errors ?</p>",
        "id": 184103006,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106550
    },
    {
        "content": "<p>no, I'm saying that the <code>ptr::drop_in_place</code> as written is not sound</p>",
        "id": 184103010,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106568
    },
    {
        "content": "<p><em>even</em> if it doesn't panic</p>",
        "id": 184103017,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106576
    },
    {
        "content": "<p>or that it is not possible, because it is unsound ? (e.g. because there is a live <code>&amp;mut self</code> reference, which implies there is a live <code>self</code>, and dropping the fields \"invalidate\" that</p>",
        "id": 184103019,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106579
    },
    {
        "content": "<p>since you have a reference to a dropped value</p>",
        "id": 184103022,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106588
    },
    {
        "content": "<p>not quite</p>",
        "id": 184103023,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106591
    },
    {
        "content": "<p>that too</p>",
        "id": 184103024,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106596
    },
    {
        "content": "<p>that's I guess the reasoning you can use</p>",
        "id": 184103062,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106603
    },
    {
        "content": "<p>but also we'll essentially call drop_in_place again</p>",
        "id": 184103075,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106610
    },
    {
        "content": "<p>i.e., the fields will be dropped after Drop::drop for some struct executes</p>",
        "id": 184103083,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106622
    },
    {
        "content": "<p>sure, but when you do, after the <code>ptr::write</code> there will be a <code>Vec::new()</code> in that place, which can be dropped</p>",
        "id": 184103091,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106630
    },
    {
        "content": "<p>and you cannot stop that</p>",
        "id": 184103093,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106632
    },
    {
        "content": "<p>right, but if ptr::drop_in_place panics then you have a problem because it'll be dropped on the unwind edge I suspect</p>",
        "id": 184103108,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106653
    },
    {
        "content": "<p>yes, that's the point i was trying to illustrate</p>",
        "id": 184103120,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106664
    },
    {
        "content": "<p>(and per earlier, that's UB)</p>",
        "id": 184103121,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106664
    },
    {
        "content": "<p>we do guarantee that the fields are dropped even if something within the <code>Drop::drop</code> panics</p>",
        "id": 184103134,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106677
    },
    {
        "content": "<p>so there's ~no situation in which <code>ptr::drop_in_place(&amp;mut self.foo)</code> is safe in Drop</p>",
        "id": 184103137,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106687
    },
    {
        "content": "<p>since it's guaranteed to be called twice</p>",
        "id": 184103146,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106701
    },
    {
        "content": "<p>well, if you use ManuallyDrop, then you can</p>",
        "id": 184103148,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106706
    },
    {
        "content": "<p>I think we agree and are just talking past each other</p>",
        "id": 184103161,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106714
    },
    {
        "content": "<p>sure, but then it's not self.foo :)</p>",
        "id": 184103166,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> example \"works\"</p>",
        "id": 184103193,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106722
    },
    {
        "content": "<p>my example is one that would be unsound, precisely because <code>drop_in_place</code> can panic, and that means that some field will be dropped twice</p>",
        "id": 184103227,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106740
    },
    {
        "content": "<p>sure, yes</p>",
        "id": 184103258,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106787
    },
    {
        "content": "<p>it might also be unsound because we might invalidate the <code>&amp;mut self</code> , that's probably worth asking in the UCGs as well</p>",
        "id": 184103282,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106815
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/67559\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67559\">https://github.com/rust-lang/rust/pull/67559</a></p>",
        "id": 184103364,
        "sender_full_name": "simulacrum",
        "timestamp": 1577106866
    },
    {
        "content": "<p><a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/invalidate.20through.20drop/near/184103427\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/invalidate.20through.20drop/near/184103427\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/invalidate.20through.20drop/near/184103427</a></p>",
        "id": 184103481,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577106967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> that LGTM, let's wait to see what the others say, but this is already how things work, so I'm pretty sure we can't document this in any other way.</p>",
        "id": 184103619,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577107148
    }
]