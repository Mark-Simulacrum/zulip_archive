[
    {
        "content": "<p>Hey, I just hit an incremental compilation error while trying to hack rustc. I figured out that it was easily reproducible (i.e. I knew exactly what I had changed) which is semi-rare with these kinds of issues, I'm wondering whether this one is already well-known or worth reporting, then minimizing, and so on...; also if anyone would like to confirm that this is <em>indeed</em> reproducible following the instructions below, that would be great!</p>\n<p>reproduction:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># in any fork of rust-lang/rust</span>\n\n<span class=\"c1\"># configuration</span>\ncp config.toml config.toml.safe\nrm config.toml\n<span class=\"nb\">echo</span> <span class=\"s2\">\"changelog-seen = 2\\n[llvm]\\ndownload-ci-llvm = true\\n[build]\\ncompiler-docs = true\\n[rust]\\ndebug = true\\nincremental = true\\nchannel = \\\"nightly\\\"\\n\"</span> &gt; config.toml\n\n<span class=\"c1\"># execution</span>\n./x.py clean\ngit fetch origin 83967a86c39fb77c7f4190b6d18ec265b23ab228 bafe92b4e5a2f7261ef72d18db7d6573a9678047\ngit checkout 83967a86c39fb77c7f4190b6d18ec265b23ab228\ngit submodule update\n./x.py check compiler/rustc <span class=\"c1\"># expected compilation error</span>\ngit checkout bafe92b4e5a2f7261ef72d18db7d6573a9678047\ngit reset --soft 83967a86c39fb77c7f4190b6d18ec265b23ab228\n./x.py check compiler/rustc <span class=\"c1\"># ICEs</span>\n\n<span class=\"c1\"># restore config</span>\nrm config.toml\nmv config.toml.safe config.toml\n\n<span class=\"c1\"># (optional) restore working directory</span>\ngit reset --hard\ngit checkout master <span class=\"c1\"># or your favorite branch</span>\n</code></pre></div>",
        "id": 270601823,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1643915486
    },
    {
        "content": "<p>error message</p>\n<div class=\"codehilite\"><pre><span></span><code>Checking stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Checking rustc_middle v0.0.0 (/home/frank/forks/rust/compiler/rustc_middle)\n    Checking rustc_infer v0.0.0 (/home/frank/forks/rust/compiler/rustc_infer)\n    Checking rustc_metadata v0.0.0 (/home/frank/forks/rust/compiler/rustc_metadata)\n    Checking rustc_mir_dataflow v0.0.0 (/home/frank/forks/rust/compiler/rustc_mir_dataflow)\n    Checking rustc_symbol_mangling v0.0.0 (/home/frank/forks/rust/compiler/rustc_symbol_mangling)\n    Checking rustc_incremental v0.0.0 (/home/frank/forks/rust/compiler/rustc_incremental)\n    Checking rustc_query_impl v0.0.0 (/home/frank/forks/rust/compiler/rustc_query_impl)\n    Checking rustc_passes v0.0.0 (/home/frank/forks/rust/compiler/rustc_passes)\n    Checking rustc_monomorphize v0.0.0 (/home/frank/forks/rust/compiler/rustc_monomorphize)\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:1617:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-beta.5 (28c8a34e1 2022-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=v0 -C link-args=-Wl,-z,origin -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [type_of] computing type of `framework::cursor::ResultsCursor::reachable_blocks`\n#1 [inferred_outlives_crate] computing the inferred outlives predicates for items in this crate\nend of query stack\nerror: could not compile `rustc_mir_dataflow`\nwarning: build failed, waiting for other jobs to finish...\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:1617:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-beta.5 (28c8a34e1 2022-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=v0 -C link-args=-Wl,-z,origin -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [typeck] type-checking `v0::&lt;impl at compiler/rustc_symbol_mangling/src/v0.rs:254:1: 846:2&gt;::print_const::{closure#0}`\n#1 [mir_built] building MIR for `v0::&lt;impl at compiler/rustc_symbol_mangling/src/v0.rs:254:1: 846:2&gt;::print_const::{closure#0}`\nend of query stack\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:1617:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-beta.5 (28c8a34e1 2022-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=v0 -C link-args=-Wl,-z,origin -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [type_of] computing type of `rmeta::LazyTables::promoted_mir`\n#1 [inferred_outlives_crate] computing the inferred outlives predicates for items in this crate\nend of query stack\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:1617:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-beta.5 (28c8a34e1 2022-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=v0 -C link-args=-Wl,-z,origin -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [typeck] type-checking `collector::&lt;impl at compiler/rustc_monomorphize/src/collector.rs:627:1: 880:2&gt;::visit_local`\n#1 [check_mod_liveness] checking liveness of variables in module `collector`\nend of query stack\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:1617:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-beta.5 (28c8a34e1 2022-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=v0 -C link-args=-Wl,-z,origin -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [type_of] computing type of `on_disk_cache::&lt;impl at compiler/rustc_query_impl/src/on_disk_cache.rs:765:1: 771:2&gt;`\n#1 [trait_impls_of] trait impls of `rustc_serialize::serialize::Decodable`\nend of query stack\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:1617:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-beta.5 (28c8a34e1 2022-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=v0 -C link-args=-Wl,-z,origin -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [typeck] type-checking `check_attr::provide`\n#1 [mir_built] building MIR for `check_attr::provide`\nend of query stack\nthread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:1617:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-beta.5 (28c8a34e1 2022-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z macro-backtrace -Z tls-model=initial-exec -Z unstable-options -Z binary-dep-depinfo -Z force-unstable-if-unmarked -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C incremental -C symbol-mangling-version=v0 -C link-args=-Wl,-z,origin -C link-args=-Wl,-rpath,$ORIGIN/../lib -C prefer-dynamic -C llvm-args=-import-instr-limit=10 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [typeck] type-checking `infer::error_reporting::need_type_info::&lt;impl at compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs:366:1: 919:2&gt;::extract_inference_diagnostics_data::{closure#0}`\n#1 [mir_built] building MIR for `infer::error_reporting::need_type_info::&lt;impl at compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs:366:1: 919:2&gt;::extract_inference_diagnostics_data::{closure#0}`\nend of query stack\nerror: build failed\n</code></pre></div>",
        "id": 270601835,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1643915490
    },
    {
        "content": "<p>(for context, this is on linux)</p>",
        "id": 270602069,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1643915591
    }
]