[
    {
        "content": "<p>i was thinking if this code is sound</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">u64</span>::<span class=\"n\">from_ne_bytes</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>pretty simple, but it generates this assembly</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">f:</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">rax</span><span class=\"p\">,</span> <span class=\"no\">qword</span> <span class=\"no\">ptr</span> <span class=\"p\">[</span><span class=\"no\">rdi</span><span class=\"p\">]</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>\n<p>it is possible for OS to turn on the alignment check bit on x86, making this code crash</p>",
        "id": 229217346,
        "sender_full_name": "Soveu",
        "timestamp": 1615150775
    },
    {
        "content": "<p>References are guaranteed to be aligned and non-null.</p>",
        "id": 229217662,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615151043
    },
    {
        "content": "<p>but this is a reference to u8 array, so alignment of the value is 1.</p>",
        "id": 229217721,
        "sender_full_name": "nagisa",
        "timestamp": 1615151082
    },
    {
        "content": "<p>Oh <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> yeah this looks troublesome then</p>",
        "id": 229217733,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615151104
    },
    {
        "content": "<p>Don't most compilers ban the use of the AC bit on x86?</p>",
        "id": 229217773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615151147
    },
    {
        "content": "<p>I don't think it is troublesome. If this was something people needed, this would be a target property settable for the target that does for some reason utilize the align check.</p>",
        "id": 229217822,
        "sender_full_name": "nagisa",
        "timestamp": 1615151168
    },
    {
        "content": "<p>that's on par with messing with FP flags</p>",
        "id": 229217825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615151168
    },
    {
        "content": "<p>I mean that the compiler is going to assume that the AC bit is off most of the time, and you can turn it on in assembly blocks but only if you turn it off again before handing off to the compiler</p>",
        "id": 229217884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615151267
    },
    {
        "content": "<p>Also, at the LLVM level that's an unaligned read.  So one could presumably pass a flag to LLVM telling it not to use normal <code>mov</code>s for unaligned reads if you're going to turn on the AC bit for the code.</p>",
        "id": 229218175,
        "sender_full_name": "scottmcm",
        "timestamp": 1615151489
    },
    {
        "content": "<p>Curiously neither gcc nor llvm/clang appear to expose a flag to change this behaviour.</p>",
        "id": 229218501,
        "sender_full_name": "nagisa",
        "timestamp": 1615151771
    },
    {
        "content": "<p>which likely means nobody ever wanted AC-compatible behaviour.</p>",
        "id": 229218517,
        "sender_full_name": "nagisa",
        "timestamp": 1615151797
    },
    {
        "content": "<p>Also glibc will <del>segfault</del> #AC fault if you leave the AC bit on in those functions, they are not at all hardened against it</p>",
        "id": 229218563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615151856
    },
    {
        "content": "<p>I do think it'd be entirely reasonable to consider \"x86 with alignment checks turned on\" as an entirely different target (that for the most part nobody wants).</p>",
        "id": 229228928,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615161756
    },
    {
        "content": "<p>These days, if you want to detect alignment issues, you'd use performance counters to detect unaligned accesses.</p>",
        "id": 229229174,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615161962
    },
    {
        "content": "<p>On ARM targets you specifically have to enable the <code>+strict-align</code> LLVM feature otherwise LLVM assumes that normal load/store instructions work with unaligned addresses.</p>",
        "id": 229241184,
        "sender_full_name": "Amanieu",
        "timestamp": 1615173213
    },
    {
        "content": "<p>In fact, we do this for some of the embedded Thumb targets which don't support unaligned accesses in hardware.</p>",
        "id": 229241193,
        "sender_full_name": "Amanieu",
        "timestamp": 1615173239
    },
    {
        "content": "<p><code>+strict-align</code> is not a target feature on x86 though :/</p>",
        "id": 229264244,
        "sender_full_name": "Soveu",
        "timestamp": 1615192566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328907\">@Soveu</span> Do you have a specific use case for x86-with-alignment-check-enabled?</p>",
        "id": 229371865,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615236884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/Possible.20UB.20on.20x86.3F/near/229371865\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"328907\">Soveu</span> Do you have a specific use case for x86-with-alignment-check-enabled?</p>\n</blockquote>\n<p>Not really, just curiosity</p>",
        "id": 229379516,
        "sender_full_name": "Soveu",
        "timestamp": 1615239909
    },
    {
        "content": "<p>Then I think ideally we should avoid introducing such a feature.</p>",
        "id": 229384007,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615241354
    },
    {
        "content": "<p>It's sufficiently unused that current x86 actually repurposes the bit in supervisor mode. (OSes have to opt in, but you can't use both features at the same time, and the assumption is that nobody cared about using alignment check.)</p>",
        "id": 229384178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615241402
    }
]