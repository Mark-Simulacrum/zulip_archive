[
    {
        "content": "<p>Hello, I'm looking into adding a feature to the flatbuffers library here - <a href=\"https://github.com/google/flatbuffers\">https://github.com/google/flatbuffers</a>. </p>\n<p>I'm trying to make it so you can (via cfg features) add support for the <code>bytes</code> crate. This means taking many implementations that currently specify lifetimes and creating very similar ones without said lifetimes.</p>\n<p>Does anyone know of some macro / technique that could be used to shorten this process / keep the code a bit cleaner and maintainable?</p>\n<p>For context: flatbuffers currently passes around <code>u8</code> arrays with lifetimes specified, I'd like to add a feature that would allow a user to use <code>Bytes</code> / <code>BytesMut</code> instead (which have no explicit lifetimes).</p>",
        "id": 224946225,
        "sender_full_name": "Colin Kirkpatrick",
        "timestamp": 1612304710
    },
    {
        "content": "<p>As rather a hack, <code>type Foo&lt;'a&gt; = i32;</code> is legal, so you might be able to just keep the lifetimes in the code you write and have users not care.</p>",
        "id": 224949255,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306486
    },
    {
        "content": "<p>But also, features are supposed to be additive, so I'm not sure what you're looking for here.</p>",
        "id": 224949305,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306521
    },
    {
        "content": "<p>Maybe you can just deal in <code>impl Foo&lt;'a&gt;</code>, where the <code>Bytes</code> versions don't use the lifetime in their associated types?</p>",
        "id": 224949356,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306547
    },
    {
        "content": "<p>The problem there is you'll still have compilation issues when trying to send flexbuffers across channels. I suppose you could just put a <code>'static</code> lifetime in though... still not sure. I'll have to ask what the maintainers are comfortable with. </p>\n<p>Personally I'd rather just stick with a pure bytes implementation, particularly with how my current research is going. Would be a breaking change though :/.</p>",
        "id": 224950875,
        "sender_full_name": "Colin Kirkpatrick",
        "timestamp": 1612307438
    },
    {
        "content": "<p>So after a bit of tinkering I've found a solution that'll work. </p>\n<p>So I've figured out a way to do the generic approach. Basically there'll be a trait bound on a generic type and I can just add different types of buffer implementations by implementing the overall <code>Buffer</code> interface. </p>\n<p>Not sure why I didn't think of that before lol. Thanks for the help though!</p>",
        "id": 225098200,
        "sender_full_name": "Colin Kirkpatrick",
        "timestamp": 1612394523
    }
]