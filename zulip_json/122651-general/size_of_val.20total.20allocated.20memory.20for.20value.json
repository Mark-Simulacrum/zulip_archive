[
    {
        "content": "<p>Is there an equivalent of <code>size_of_val</code> that includes the size of allocated buffers? E.g., this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"s\">\"one\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"two\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"three\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>prints <code>24</code>, but I would like it to print <code>96</code> (<code>24 + 3 * 24</code>), or whatever the total allocated memory size is. Is this even possible?</p>",
        "id": 225489931,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612740276
    },
    {
        "content": "<p>I use a modification of the <a href=\"https://docs.rs/deepsize/0.2.0/deepsize/\"><code>deepsize</code></a> crate for this in my project</p>",
        "id": 225490155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612740625
    },
    {
        "content": "<p>Unfortunately, all relevant data structures have to implement this trait, which means that if any data structures you use don't have an implementation in the deepsize crate, you are stuck because of the orphan rule. That's why I had to copy it into my project</p>",
        "id": 225490274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612740804
    },
    {
        "content": "<p>Also, in order to implement this on third party data structures you have to have access to all the allocations, which is a problem because of privacy. For example if you want to know how many allocations are in your hashmap, you need access to the underlying bucket array</p>",
        "id": 225490459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612741024
    },
    {
        "content": "<p>Yeah, I just want to know because I'm curious how much space my type takes up in memory (the <code>{:#?}</code> output is 800 lines long...). I wonder if having an intrinsic for this purpose would work better...</p>",
        "id": 225495016,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612747382
    },
    {
        "content": "<p>I don't think there's a good way for the compiler or language to do this; the most we could do is provide a deepsize/heap_size_of/etc trait in core.</p>",
        "id": 225495266,
        "sender_full_name": "simulacrum",
        "timestamp": 1612747803
    },
    {
        "content": "<p>Another option would be a tracking allocator; this is easiest if the goal is to count up <em>all</em> allocated memory in the program, since we don't really have scoped allocators rn</p>",
        "id": 225495413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612747986
    },
    {
        "content": "<p>I'm using the allocator path to provide localized memory benchmarks for my crate</p>",
        "id": 225542136,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1612790246
    },
    {
        "content": "<p>I think jemalock has some useful api's but I am on windows so have never tested.<br>\n<a href=\"https://github.com/nnethercote/dhat-rs\">https://github.com/nnethercote/dhat-rs</a> is amazing, at what it does, so I'd start there.</p>",
        "id": 225551100,
        "sender_full_name": "Eh2406",
        "timestamp": 1612794431
    }
]