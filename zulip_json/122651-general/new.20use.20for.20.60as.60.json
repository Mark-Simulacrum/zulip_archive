[
    {
        "content": "<p>As was mentioned in the Float to int conversions thread. Once there are more rustic versions for the all the primitive conversions that are currently covered by <code>as</code> it might make sense to remove/deprecate <code>as</code>. However, I was wondering if it would not be better to move to using <code>as</code> for calling the <code>Into</code> trait.</p>",
        "id": 195077908,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587655656
    },
    {
        "content": "<p>That would be rather disruptive and break a great deal of existing code. It's theoretically possible in an edition, but I'm not sure we'd want to.</p>",
        "id": 195092083,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587661946
    },
    {
        "content": "<p>It would also break people's mental parsers.</p>",
        "id": 195092127,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587661974
    },
    {
        "content": "<p>I think that <strong>if</strong> we were going to do that, it would probably take a whole edition of warning on <code>as</code>, then another full edition of erroring on <code>as</code>.  So any potential re-use of <code>as</code> would be 7+ years away, and thus probably not worth discussing in detail at this point.</p>\n<p>(That said, I fully support the library having dedicated-purpose versions of all the things that <code>as</code> can do, such as <code>wrapping_from</code> or similar.)</p>",
        "id": 195128551,
        "sender_full_name": "scottmcm",
        "timestamp": 1587681840
    },
    {
        "content": "<p>The biggest thing i need <code>as</code> for right now is usize</p>",
        "id": 195129461,
        "sender_full_name": "Lokathor",
        "timestamp": 1587682548
    },
    {
        "content": "<p>In indexing, or other places too?</p>",
        "id": 195130758,
        "sender_full_name": "scottmcm",
        "timestamp": 1587683655
    },
    {
        "content": "<p>I run into issues with <code>usize</code> in three places: indexing, creating slices with <code>[0; some_calculation]</code>, and the use of <code>size_of</code>.</p>",
        "id": 195130836,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587683749
    },
    {
        "content": "<p>In the former two cases I need to cast to <code>usize</code>, and in the third case I need to cast <em>from</em> <code>usize</code>.</p>",
        "id": 195130886,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587683764
    },
    {
        "content": "<p>I was amused in <a href=\"https://github.com/rust-lang/rust/pull/70835#discussion_r411076438\" title=\"https://github.com/rust-lang/rust/pull/70835#discussion_r411076438\">https://github.com/rust-lang/rust/pull/70835#discussion_r411076438</a> that it was nicer to use <code>ctlz(1)</code> (the intrinsic) over <code>size_of</code> because it meant no casting</p>",
        "id": 195131306,
        "sender_full_name": "scottmcm",
        "timestamp": 1587684127
    },
    {
        "content": "<p>Mostly indexing related stuff. <code>u32</code> / <code>usize</code> mixing is a mess, we need that portability lint system and the \"let me tell cargo and rustc i'm assuming that pointers are at least 32 bits\" system.</p>",
        "id": 195132210,
        "sender_full_name": "Lokathor",
        "timestamp": 1587685076
    },
    {
        "content": "<p>Hmm, <code>[0; some_calculation]</code> would be even easier to have work with any length than <code>a[i]</code>, I think, since it's a const context.  </p>\n<p><code>[0; u128::MAX]</code> isn't any more incorrect than <code>[0; usize::MAX]</code> already is, so too-big is fine.  Something like <code>[0; my_u8]</code> is of course fine.  And even the complaints about signed don't really apply here, since it's a const so you just get a compiler error for <code>[0; -1]</code>.  (And if anything, <code>[0; 0_i32 - 1]</code> is probably more correct than <code>[0; 0_usize - 1]</code>.)</p>",
        "id": 195133505,
        "sender_full_name": "scottmcm",
        "timestamp": 1587686099
    },
    {
        "content": "<p>One day it'd be nice if that worked for non-const. But as long as it remains const, yes, anything seems reasonable.</p>",
        "id": 195133678,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587686280
    },
    {
        "content": "<p>confoundingly, you can't easily make indexing impls for u32 because of how literals seem to work, you get missing trait errors when you write <code>thing[1]</code> instead of <code>thing[1_u32]</code></p>",
        "id": 195133679,
        "sender_full_name": "Lokathor",
        "timestamp": 1587686280
    },
    {
        "content": "<p>You can just solve that by also allowing indexing by <code>i32</code>.  Which doesn't even have a speed penalty (for non-ZSTs, but I don't care about slices of ZSTs) compared to indexing by <code>u32</code> -- it's just a <code>sext</code> instead of a <code>zext</code>.</p>",
        "id": 195133770,
        "sender_full_name": "scottmcm",
        "timestamp": 1587686360
    },
    {
        "content": "<p>But people seem to hate the thought of indexing by a signed number whenever I bring it up</p>",
        "id": 195133865,
        "sender_full_name": "scottmcm",
        "timestamp": 1587686415
    },
    {
        "content": "<p>i think the fix there is to do <code>signed as unsigned</code> and then redispatch to the unsigned version, then the bounds check will catch it</p>",
        "id": 195137784,
        "sender_full_name": "Lokathor",
        "timestamp": 1587690622
    },
    {
        "content": "<p>(you'd get bad panic messages i guess, but whatever)</p>",
        "id": 195137790,
        "sender_full_name": "Lokathor",
        "timestamp": 1587690638
    },
    {
        "content": "<p>Right, that's what I mean by just needing to sign-extend, since the limit of <code>u31::MAX</code> on indexing means you only need one check.  (You could still have a different panic message that shows the index as negative, but the checks aren't harder than the unsigned case.)</p>",
        "id": 195169229,
        "sender_full_name": "scottmcm",
        "timestamp": 1587723599
    },
    {
        "content": "<p>Wait, why would there be a limit of <code>u31::MAX</code>?</p>",
        "id": 195231037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587754959
    },
    {
        "content": "<p>sorry, that should have been <a href=\"https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html#safety\" title=\"https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html#safety\"><code>usize::MAX/2</code></a>.  You're of course correct that there's no 31-bit limit on 64-bit platforms.</p>",
        "id": 195257994,
        "sender_full_name": "scottmcm",
        "timestamp": 1587773069
    },
    {
        "content": "<p><code>isize::MAX</code>, then :D</p>",
        "id": 195277641,
        "sender_full_name": "RalfJ",
        "timestamp": 1587808481
    },
    {
        "content": "<p>For PNG specifically, the limit is locked at 31 bits. A PNG's dimensions are positive and not to exceed i32::MAX \"because some languages have trouble with unsigned 32-bit values\". That's the actual reason written into the spec.</p>",
        "id": 195301802,
        "sender_full_name": "Lokathor",
        "timestamp": 1587846936
    }
]