[
    {
        "content": "<p>so in my <a href=\"http://lib.rs\">lib.rs</a>, i can override libc functions and whatnot by simply declaring no_mangle pub extern c functions with the same names, and that works great. they can also be overridden by declaring a no_mangle pub extern c function in a dependency, and then pub using that function. so my question is this: can the override happen without the person who uses my library explicitly having to type <code>pub use the_lib::__ugly_libc_stuff</code></p>",
        "id": 221598237,
        "sender_full_name": "devsnek",
        "timestamp": 1609805326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> after reading <a href=\"https://github.com/rust-lang/rust/issues/54135\">https://github.com/rust-lang/rust/issues/54135</a> it seems like <code>#[no_mangle]</code> is supposed to imply this behavior? i'm not observing that though.</p>",
        "id": 221599256,
        "sender_full_name": "devsnek",
        "timestamp": 1609806051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219805\">@devsnek</span> this isn't really intended behavior per-se and it's not really related to that issue, it's jsut sort of how linkers work</p>",
        "id": 221599804,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806499
    },
    {
        "content": "<p>if an object file with the symbol is pulled in it will override</p>",
        "id": 221599816,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806510
    },
    {
        "content": "<p>to understand when/where this happens you'll need to understand how linkers works</p>",
        "id": 221599831,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806523
    },
    {
        "content": "<p>at a basic level at least</p>",
        "id": 221599834,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> i'm not entirely sure what you're saying. i'd like the symbol to always make it to linking, but rust seems to eliminate it.</p>",
        "id": 221600025,
        "sender_full_name": "devsnek",
        "timestamp": 1609806687
    },
    {
        "content": "<p>what I'm saying is you need to understand how linking works to understand why it is or isn't included</p>",
        "id": 221600042,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806707
    },
    {
        "content": "<p>there's lots of caveats and fiddly bits</p>",
        "id": 221600094,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806724
    },
    {
        "content": "<p>well i know how the linker works, the problem is that the function is never given to the linker</p>",
        "id": 221600180,
        "sender_full_name": "devsnek",
        "timestamp": 1609806811
    },
    {
        "content": "<p>have you confirmed it's not present in the rlib? or any object file?</p>",
        "id": 221600300,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806893
    },
    {
        "content": "<p>how do you read a wasm-targeted rlib file</p>",
        "id": 221600355,
        "sender_full_name": "devsnek",
        "timestamp": 1609806942
    },
    {
        "content": "<p>you'd either inspect IR or use <code>llvm-nm</code></p>",
        "id": 221600375,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1609806956
    },
    {
        "content": "<p>well it appears to be in the rlib</p>",
        "id": 221600736,
        "sender_full_name": "devsnek",
        "timestamp": 1609807260
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 221600748,
        "sender_full_name": "devsnek",
        "timestamp": 1609807274
    },
    {
        "content": "<p>aha it wasn't being linked because the entire library wasn't being linked. as long as <em>something</em> in the library is used, it works</p>",
        "id": 221601084,
        "sender_full_name": "devsnek",
        "timestamp": 1609807567
    }
]