[
    {
        "content": "<p>Is this expected behavior?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">One</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">one_as_usize</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">One</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// works</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Two</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">two_as_usize</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Two</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// works</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Zero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">zero_as_usize</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Zero</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// fails, non-primitive cast</span>\n</code></pre></div>",
        "id": 201712715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592911076
    },
    {
        "content": "<p>this edge case broke some macro code of mine</p>",
        "id": 201712812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592911134
    },
    {
        "content": "<p>is the problem that empty enums don't count as \"C-style\"?</p>",
        "id": 201712846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592911176
    },
    {
        "content": "<p>Empty enum in C are not zero sized IIRC, where they are in Rust</p>",
        "id": 201712940,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1592911220
    },
    {
        "content": "<p>I get that, but it seems a bit weird for this aspect of the semantics to be affecting <code>as usize</code> casts</p>",
        "id": 201712963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592911255
    },
    {
        "content": "<p>With repr(C) does it work ? (Pure supposition, untested)</p>",
        "id": 201713066,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1592911344
    },
    {
        "content": "<p>the <code>repr(C)</code> itself fails: <code>unsupported representation for zero-variant enum</code></p>",
        "id": 201713108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592911380
    },
    {
        "content": "<p>That’s logical at least ^^ then I don’t think there is an automatic way to do it</p>",
        "id": 201713192,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1592911447
    },
    {
        "content": "<p>You’ll probably have to return 0 directly or something like that</p>",
        "id": 201713218,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1592911473
    },
    {
        "content": "<p>I think so</p>",
        "id": 201713351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592911576
    },
    {
        "content": "<p><code>x</code> is uninhabited, it is UB to ever execute that code</p>",
        "id": 201754171,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932146
    },
    {
        "content": "<p>so it would actually make sense to allow a cast, as it is dead code anyway^^</p>",
        "id": 201754187,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932157
    },
    {
        "content": "<p>I guess nobody ever considered it worthwhile, but macros are a good argument</p>",
        "id": 201754206,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932167
    },
    {
        "content": "<p>so I'd say that yes, currently it is expected behavior, but it seems like a reasonable thing to make this more consistent</p>",
        "id": 201754277,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> feel free to open an issue for this; Cc <code>@RalfJung</code> so I can tag some people in it</p>",
        "id": 201754329,
        "sender_full_name": "RalfJ",
        "timestamp": 1592932218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Do you know if the implementation should be <code>0</code> vs <code>match x {}</code>? The discussions about <code>&amp;!</code> have left me at a loss about how uninhabited void really is</p>",
        "id": 201758948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592934615
    },
    {
        "content": "<p>Afaict you are casting <code>Zero</code>, not <code>&amp;Zero</code> (which would cast the pointer). So you should be able to just <code>match x {}</code></p>",
        "id": 201759213,
        "sender_full_name": "lcnr",
        "timestamp": 1592934768
    },
    {
        "content": "<p>sure, I mean both expressions are well typed</p>",
        "id": 201759303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592934825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/void.20as.20usize/near/201758948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> Do you know if the implementation should be <code>0</code> vs <code>match x {}</code>? The discussions about <code>&amp;!</code> have left me at a loss about how uninhabited void really is</p>\n</blockquote>\n<p>lol^^ it's as uninhabited as it gets ;)</p>",
        "id": 201759369,
        "sender_full_name": "RalfJ",
        "timestamp": 1592934845
    },
    {
        "content": "<p>but it's possible that they have a different semantic effect, since one \"examines\" x and the other doesn't</p>",
        "id": 201759384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592934853
    },
    {
        "content": "<p>the implementation should be <code>Unreachable</code>, IMO</p>",
        "id": 201759417,
        "sender_full_name": "RalfJ",
        "timestamp": 1592934872
    },
    {
        "content": "<p>which I guess is the same as <code>match x {}</code></p>",
        "id": 201759437,
        "sender_full_name": "RalfJ",
        "timestamp": 1592934884
    },
    {
        "content": "<p><code>0</code> seems... rather arbitrary^^</p>",
        "id": 201759458,
        "sender_full_name": "RalfJ",
        "timestamp": 1592934899
    },
    {
        "content": "<p>it's also actual code</p>",
        "id": 201759487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592934916
    },
    {
        "content": "<p>I think that if you codegen them with <code>match x {}</code> you won't even get a return</p>",
        "id": 201759527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592934938
    },
    {
        "content": "<p>It seems like you might even be able to delete the entire function in codegen</p>",
        "id": 201759723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592935026
    },
    {
        "content": "<p>I'm not really sure how aggressively <code>Unreachable</code> gets optimized</p>",
        "id": 201759774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592935054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/void.20as.20usize/near/201759723\">said</a>:</p>\n<blockquote>\n<p>It seems like you might even be able to delete the entire function in codegen</p>\n</blockquote>\n<p>yeah that is certainly the plan</p>",
        "id": 201761939,
        "sender_full_name": "RalfJ",
        "timestamp": 1592936081
    },
    {
        "content": "<p>in fact even functions taking <code>&amp;!</code> we want to entirely delete. that is one of the things that makes the discussion in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a> so complicated.^^</p>",
        "id": 201761996,
        "sender_full_name": "RalfJ",
        "timestamp": 1592936106
    }
]