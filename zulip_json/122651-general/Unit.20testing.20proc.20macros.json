[
    {
        "content": "<p>Hello! I'm working on a proc macro, and I'm writing unit tests for it (yay for proc_macro2). I'm writing tests for my error cases, so I'm trying to scan through a TokenStream and find all invocations of <code>compile_error!{...}</code>. Is there any easy way to do that?</p>\n<p>To be more specific, my proc macro tries to check as many conditions as it can in a single invocation, so it returns a TokenStream that contains numerous syn::Error objects, which get translated to <code>compile_error!{...}</code> invocations. This way, the developer sees all of the errors for their code at once, rather than fixing one error, recompiling, then finding the next error, etc.</p>\n<p>So in my unit tests, I have a bunch of known-bad inputs, I run them through my macro code, and now I need to find the <code>compile_error!</code> invocations. I'm a bit stuck at finding an easy / attractive way to scan through a TokenStream, looking for a particular sequence of tokens, though. All of the parsing APIs are structured around matching and consuming tokens, not skipping through a TokenStream looking for a pattern.</p>\n<p>This sounds like something someone has probably already done, so I thought I would ask.</p>",
        "id": 196688891,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1588795221
    },
    {
        "content": "<p>I am not sure about the specific details of what you said, but when the question is \"testing errors of proc macros\" my first thought is <a href=\"https://crates.io/crates/trybuild\" title=\"https://crates.io/crates/trybuild\">https://crates.io/crates/trybuild</a></p>",
        "id": 196692323,
        "sender_full_name": "RalfJ",
        "timestamp": 1588796792
    },
    {
        "content": "<p>I haven't used that crate myself (not a proc macro author) but it looks pretty cool, and it's by dtolnay so I'm sure it's going to work very well</p>",
        "id": 196692380,
        "sender_full_name": "RalfJ",
        "timestamp": 1588796823
    },
    {
        "content": "<p>Interesting. I'll take a look.</p>",
        "id": 196692409,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1588796840
    },
    {
        "content": "<p>Yes this is what I do. <a href=\"https://github.com/shepmaster/snafu/tree/master/compatibility-tests/compile-fail\" title=\"https://github.com/shepmaster/snafu/tree/master/compatibility-tests/compile-fail\">https://github.com/shepmaster/snafu/tree/master/compatibility-tests/compile-fail</a></p>",
        "id": 196705304,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1588803307
    },
    {
        "content": "<p>So itâ€™s definitely not unit tests.</p>",
        "id": 196705334,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1588803327
    },
    {
        "content": "<p>I found that to be too heavy-weight: writing files to disk, spinning up the entire compiler. I found a way to quickly find the compile_error!(...) invocations in my token stream, which, for my purposes, is all I need.</p>",
        "id": 196705382,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1588803362
    },
    {
        "content": "<p>You might want to check <code>proc-macro-error</code> crate. It is great instead of directly using <code>compile_error</code></p>",
        "id": 196744032,
        "sender_full_name": "pksunkara",
        "timestamp": 1588842397
    },
    {
        "content": "<p>We are using it in <code>clap</code> and <code>structopt</code></p>",
        "id": 196744037,
        "sender_full_name": "pksunkara",
        "timestamp": 1588842401
    }
]