[
    {
        "content": "<p>I'm compiling the std unit tests for my target and a particular static ends up twice in the resulting binary, which is... bad</p>",
        "id": 158103423,
        "sender_full_name": "Jethro",
        "timestamp": 1549963131
    },
    {
        "content": "<p>from gdb:</p>\n<div class=\"codehilite\"><pre><span></span>File src/libstd/sys/sgx/abi/tls.rs:\nstatic struct SyncBitset std::sys::sgx::abi::tls::TLS_KEY_IN_USE::h0f340495a814d6d4;\nstatic struct SyncBitset std::sys::sgx::abi::tls::TLS_KEY_IN_USE::hddca68d75da9bb5c;\n</pre></div>",
        "id": 158103439,
        "sender_full_name": "Jethro",
        "timestamp": 1549963148
    },
    {
        "content": "<p>how does this happen?</p>",
        "id": 158103451,
        "sender_full_name": "Jethro",
        "timestamp": 1549963173
    },
    {
        "content": "<p>IIRC libstd unit tests are the one case where you might end up with two versions of libstd, the normal one and the <code>cfg(test)</code> one, linked together</p>",
        "id": 158103746,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1549963522
    },
    {
        "content": "<p>std unit tests are not actually normal unit tests</p>",
        "id": 158103777,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963562
    },
    {
        "content": "<p>they are a separate crate</p>",
        "id": 158103802,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963565
    },
    {
        "content": "<p>with its root in <code>libstd/tests/lib.rs</code></p>",
        "id": 158103812,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963584
    },
    {
        "content": "<p>oh, hm, that's true for liballoc and libcore, anyway</p>",
        "id": 158103830,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963629
    },
    {
        "content": "<p>that file doesn't exist...</p>",
        "id": 158103838,
        "sender_full_name": "Jethro",
        "timestamp": 1549963636
    },
    {
        "content": "<p>seems like libstd also has tests \"inside\" the lib?</p>",
        "id": 158103840,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963640
    },
    {
        "content": "<p>weird, I thought these libs would all be organized the same way.</p>",
        "id": 158103846,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963652
    },
    {
        "content": "<p>so yeah seems like there is some really crazy magic at work here, and it doesn't seem unlikely that that can duplicate statics</p>",
        "id": 158103910,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963711
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// During testing, this crate is not actually the &quot;real&quot; std library, but rather\n// it links to the real std library, which was compiled from this same source\n// code. So any lang items std defines are conditionally excluded (or else they\n// would generate duplicate lang item errors), and any globals it defines are\n// _not_ the globals used by &quot;real&quot; std. So this import, defined only during\n// testing gives test-std access to real-std lang items and globals. See #2912\n#[cfg(test)] extern crate std as realstd;\n</pre></div>",
        "id": 158103917,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963738
    },
    {
        "content": "<p>ok... so shouldn't there be a macro_use on that extern crate as well?</p>",
        "id": 158103943,
        "sender_full_name": "Jethro",
        "timestamp": 1549963783
    },
    {
        "content": "<p>(I'm testing a build now with <code>#[cfg(not(test))] macro_rules! thread_local { ... }</code>)</p>",
        "id": 158104001,
        "sender_full_name": "Jethro",
        "timestamp": 1549963816
    },
    {
        "content": "<p>hm, maybe? no idea^^</p>",
        "id": 158104016,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963856
    },
    {
        "content": "<p>I dont think it matters which of the two macros you use though</p>",
        "id": 158104030,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963866
    },
    {
        "content": "<p>so I dont think that'll help</p>",
        "id": 158104032,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963869
    },
    {
        "content": "<p>not adding the static at all to the test build seems better, like what you did</p>",
        "id": 158104040,
        "sender_full_name": "RalfJ",
        "timestamp": 1549963887
    },
    {
        "content": "<p>this appears to work actually</p>",
        "id": 158108572,
        "sender_full_name": "Jethro",
        "timestamp": 1549968750
    }
]