[
    {
        "content": "<p>Whats the correct way to make <code>cargo test</code> compile+run the C tests for ffi crates?</p>\n<ol>\n<li>how do you optionally build the C test code in <a href=\"http://build.rs\">build.rs</a></li>\n<li>what exactly should execute those tests with <code>cargo test</code>, should I add a <code>#[test]</code> that calls <code>std::process::Command</code> on those test files?</li>\n</ol>",
        "id": 213259097,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602664105
    },
    {
        "content": "<p>There isn’t a standard way of writing tests in C, so I think you’d have to describe that to start with.</p>",
        "id": 213273926,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602674355
    },
    {
        "content": "<p>You're right, \"usually\" there's some build system stuff and then you get somesort of <code>test</code> binary that you execute</p>",
        "id": 213278103,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602677073
    },
    {
        "content": "<p>Does the cc crate even offer a way to produce executables?</p>",
        "id": 213279483,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602677862
    },
    {
        "content": "<p>Why do you want to rerun tests that presumably are run by whoever created the C library?</p>",
        "id": 213279596,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602677909
    },
    {
        "content": "<p>How do you run the Rust tests for a Rust dependency as part of your build?</p>",
        "id": 213279678,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602677955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Running.20C.20tests.20for.20ffi.20crate/near/213279483\">said</a>:</p>\n<blockquote>\n<p>Does the cc crate even offer a way to produce executables?</p>\n</blockquote>\n<p>I don't know.</p>",
        "id": 213280226,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602678295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Running.20C.20tests.20for.20ffi.20crate/near/213279596\">said</a>:</p>\n<blockquote>\n<p>Why do you want to rerun tests that presumably are run by whoever created the C library?</p>\n</blockquote>\n<p>Because some sensitive libraries you'd want to run the tests on the target machine</p>",
        "id": 213280268,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602678318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Running.20C.20tests.20for.20ffi.20crate/near/213279678\">said</a>:</p>\n<blockquote>\n<p>How do you run the Rust tests for a Rust dependency as part of your build?</p>\n</blockquote>\n<p>That's a great question, Ideally the end executable will vendor all the deps and run their tests? (just like <code>make check</code> usually runs all the deps <code>make check</code>'s)</p>\n<p>otherwise, what if a user uses an arch/flags we never tested before?</p>",
        "id": 213280379,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602678368
    },
    {
        "content": "<p>I think there are <em>two</em> possible different things going on: a <code>-sys</code>-like crate that wants to make sure the C library it depends on works correctly, and thus wants to run its test suite. Imagining some magic invocation <em>à la</em> <code>make test</code>, then an integration test that ran <code>Command::new(\"make\")...</code> would be, imho, the way to go.</p>\n<p>The other option is, for an \"FFI crate\", to actually be providing some functionality for a C / FFI downstream user, by exporting FFI functions. In that case, since the <code>cargo</code> interaction with such <code>FFI</code> crate is mainly to build the C library, I don't think it would make sense to have the C / FFI downstream user tests of your implementation be run within <code>cargo test</code>. The \"sensible\" thing would be to have an outside command (<em>e.g.</em>, a script, a <code>make</code> / <code>just</code> / <code>cargo xtask</code> invocation) that would <code>cargo build</code> your crate, put the generated library file in the right place, and then run the C / FFI downstream user with it.</p>",
        "id": 213280883,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602678638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/122651-general/topic/Running.20C.20tests.20for.20ffi.20crate/near/213280268\">said</a>:</p>\n<blockquote>\n<p>Because some sensitive libraries you'd want to run the tests on the target machine</p>\n</blockquote>\n<p>Ah, so this is code that will only ever be run on the machine it is compiled on and never copied to another computer. That's a pretty small subset of programs, so I can see why this isn't a trivial thing to achieve.</p>",
        "id": 213282061,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602679297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/122651-general/topic/Running.20C.20tests.20for.20ffi.20crate/near/213280379\">said</a>:</p>\n<blockquote>\n<p>just like <code>make check</code> usually runs all the deps <code>make check</code>'s</p>\n</blockquote>\n<p>That's news to me! I didn't think there <em>was</em> a \"usual\" when it came to C build systems. That sounds incredibly painful /time-consuming as every new layer will re-run the tests from the previous layer.</p>",
        "id": 213282358,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602679463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/122651-general/topic/Running.20C.20tests.20for.20ffi.20crate/near/213280379\">said</a>:</p>\n<blockquote>\n<p>otherwise, what if a user uses an arch/flags we never tested before?</p>\n</blockquote>\n<p>I'd spend my time running the tests in their \"natural habitat\" instead. Check out the C library and build and test it, completely distinct from Rust / Cargo.</p>",
        "id": 213282505,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602679563
    },
    {
        "content": "<p>Perhaps you need to follow the pattern of the <a href=\"https://crates.io/crates/openssl-src\">openssl-src</a> crate, which is a whole crate which only exists to be able to build openssl.</p>",
        "id": 213282700,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602679686
    },
    {
        "content": "<p>It's like a build script extracted into it's own crate, effectively.</p>",
        "id": 213282744,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602679708
    },
    {
        "content": "<p>Then you could have your main project build the library and a separate project build and run the executable</p>",
        "id": 213283400,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602680059
    },
    {
        "content": "<p>Last I looked into it, a build script doesn't know things like \"release vs debug\" or \"build vs check vs test\"</p>",
        "id": 213283438,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1602680084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Running.20C.20tests.20for.20ffi.20crate/near/213282358\">said</a>:</p>\n<blockquote>\n<p>That's news to me! I didn't think there <em>was</em> a \"usual\" when it came to C build systems. That sounds incredibly painful /time-consuming as every new layer will re-run the tests from the previous layer.</p>\n</blockquote>\n<p>Obviously there's no \"standard\" in C build systems, but this is what I've personally seen in a lot of C/C++ systems either that I work on, or OSS stuff(although other people might have different experience)</p>",
        "id": 213291496,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1602683782
    }
]