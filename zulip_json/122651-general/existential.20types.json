[
    {
        "content": "<p>What's the one-sentence primary reason for why we can't stabilize  existential types today? I'm giving an overview of compiler stuff coming \"soon\" and want to give a high-level reason why certain things aren't there yet.</p>",
        "id": 164352977,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556398128
    },
    {
        "content": "<p>Needs syntax agreement.</p>",
        "id": 164353300,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556398678
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> knows if there are implementation bugs that are blocking as well</p>",
        "id": 164353355,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1556398731
    },
    {
        "content": "<p>That seems encouraging!</p>",
        "id": 164357010,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556404990
    },
    {
        "content": "<p>I'm on board with the <code>type Foo = impl Bar</code> syntax personally, but I've spent zero time considering rationale. It just \"feels\" right</p>",
        "id": 164357012,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556405041
    },
    {
        "content": "<p>there are some bugs, and loads of diagnostics that need improvement</p>",
        "id": 164380090,
        "sender_full_name": "oli",
        "timestamp": 1556446509
    },
    {
        "content": "<blockquote>\n<p>I'm on board with the <code>type Foo = impl Bar</code> syntax personally, but I've spent zero time considering rationale. It just \"feels\" right</p>\n</blockquote>\n<p>It \"feels\" right but if we want <code>existential type Foo;</code> to be valid, there is no way to express this with the <code>impl Trait</code> syntax.</p>",
        "id": 164537207,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556629761
    },
    {
        "content": "<p>There was just a PR forbidding <code>existential type Foo: 'static;</code> and telling you that you need a trait bound just like the diagnostic for <code>impl 'static</code></p>",
        "id": 164537695,
        "sender_full_name": "oli",
        "timestamp": 1556630203
    },
    {
        "content": "<p><code>impl 'static</code> could be valid if we wanted it to but it's a rather boring thing to say</p>",
        "id": 164538311,
        "sender_full_name": "centril",
        "timestamp": 1556630676
    },
    {
        "content": "<p>it's possibly useful in APIT</p>",
        "id": 164538321,
        "sender_full_name": "centril",
        "timestamp": 1556630692
    },
    {
        "content": "<p>APIT?</p>",
        "id": 164538334,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556630703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span>  <code>arg: impl Trait</code></p>",
        "id": 164538348,
        "sender_full_name": "centril",
        "timestamp": 1556630713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> blame varkor for the initialisms ;)</p>",
        "id": 164538379,
        "sender_full_name": "centril",
        "timestamp": 1556630744
    },
    {
        "content": "<p>I'll do :D</p>",
        "id": 164538386,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556630758
    },
    {
        "content": "<p>However, I don't see, why we don't possibly want <code>existential type Foo;</code> without bound to be valid at some point (not necessarily now).</p>",
        "id": 164538526,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556630869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span>  it's also a rather boring thing to say; you cannot extract any info out of it</p>",
        "id": 164538599,
        "sender_full_name": "centril",
        "timestamp": 1556630920
    },
    {
        "content": "<p>it's like saying <code>impl Sized</code></p>",
        "id": 164538606,
        "sender_full_name": "centril",
        "timestamp": 1556630932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> It's useful for an opaque type returned by any function and to be passed to another function of the same interface</p>",
        "id": 164538646,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556630971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> that's not possible right now. There's no way to reveal the opaque type</p>",
        "id": 164538673,
        "sender_full_name": "oli",
        "timestamp": 1556631000
    },
    {
        "content": "<p>but that's just an implementation detail I guess</p>",
        "id": 164538748,
        "sender_full_name": "oli",
        "timestamp": 1556631021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> it seems to me that the very essence of an opaque type is that you cannot reveal it :D</p>",
        "id": 164538797,
        "sender_full_name": "centril",
        "timestamp": 1556631065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216785\">@Tim Diekmann</span> if you truly want to do that, just use <code>existential type Foo: Sized;</code></p>",
        "id": 164538812,
        "sender_full_name": "centril",
        "timestamp": 1556631079
    },
    {
        "content": "<p>the RFC thinks otherwise</p>",
        "id": 164538819,
        "sender_full_name": "oli",
        "timestamp": 1556631085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> hmm, reveal in the same module?</p>",
        "id": 164538835,
        "sender_full_name": "centril",
        "timestamp": 1556631105
    },
    {
        "content": "<p>jop</p>",
        "id": 164538838,
        "sender_full_name": "oli",
        "timestamp": 1556631111
    },
    {
        "content": "<p>oh yeah, that's true</p>",
        "id": 164538849,
        "sender_full_name": "centril",
        "timestamp": 1556631121
    },
    {
        "content": "<p>\"opaque\" has a scope</p>",
        "id": 164538900,
        "sender_full_name": "centril",
        "timestamp": 1556631131
    },
    {
        "content": "<p>I mean I personally would prefer all reveals to have to go through an explicit function</p>",
        "id": 164538914,
        "sender_full_name": "oli",
        "timestamp": 1556631153
    },
    {
        "content": "<p>just to make it clear where the users actually wants to reveal sth</p>",
        "id": 164538938,
        "sender_full_name": "oli",
        "timestamp": 1556631184
    },
    {
        "content": "<p>To make this code work?</p>\n<div class=\"codehilite\"><pre><span></span>mod public_api {\n    pub existential type Foo: Sized;\n\n    pub fn give_type() -&gt; Foo {\n        return 10_u32;\n    }\n    pub fn take_type(f: Foo) {\n        println!(&quot;{}&quot;,f)\n    }\n}\n</pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8f4579857e021e208e14713480d1602d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8f4579857e021e208e14713480d1602d\">Playground</a></p>",
        "id": 164538947,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556631192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'd just make it work inside the whole module</p>",
        "id": 164538974,
        "sender_full_name": "centril",
        "timestamp": 1556631218
    },
    {
        "content": "<p>and allow partially defining uses</p>",
        "id": 164538985,
        "sender_full_name": "centril",
        "timestamp": 1556631233
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216785\">Tim Diekmann</span> if you truly want to do that, just use <code>existential type Foo: Sized;</code></p>\n</blockquote>\n<p>Heh, good point</p>",
        "id": 164538987,
        "sender_full_name": "Tim Diekmann",
        "timestamp": 1556631234
    }
]