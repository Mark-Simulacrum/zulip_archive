[
    {
        "content": "<p>Does anyone know why cargo-miri would be using outdated versions of rust-core, from a custom build?</p>\n<p>Detailed install instructions, FYI: from a  custom version of rust, from the directory, I first build the package, and then copy the binaries over, and then link the toolchain.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./x.py build\ncp -a build/x86_64-unknown-linux-gnu/stage2/* ~/cargo_dev/stage2\ncp -a build/x86_64-unknown-linux-gnu/stage2-tools-bin/* ~/cargo_dev/stage2/bin/\nrustup toolchain link stage2 ~/cargo_dev/stage2\n</code></pre></div>\n<p>I think clone stock Miri, build and install it, and then test with a trivial package, using my new rust version:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rustup default stage2\nrustc --version <span class=\"c1\"># rustc 1.55.0-dev</span>\ncargo --version <span class=\"c1\"># cargo 1.55.0-dev</span>\ngit clone https://github.com/rust-lang/miri\n<span class=\"nb\">cd</span> miri\n./miri build\n./miri install\n</code></pre></div>\n<p>Finally, I think create a dummy package, build, and test to see if it works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">tests</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">it_works</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"k\">u8</span><span class=\"p\">.</span><span class=\"n\">wrapping_sub</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"k\">u8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"k\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">many_digits</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">375</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"sc\">'3'</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// there's an older version that has an arithmetic overflow, which is expected, but didn't use wrapping_sub.</span>\n<span class=\"w\">       </span><span class=\"c1\">// this therefore fails on the old library/core, but not on the new one.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">parse</span>::<span class=\"o\">&lt;</span><span class=\"kt\">f64</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[should_panic]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(arithmetic_overflow)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fails</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"k\">u8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"k\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"k\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Running <code>cargo miri test</code> fails no matter how many times I try to rebuild rust, miri. I've also tried doing clean uninstalls of the toolchain by rebuilding the toolchain, deleting <code>~/cargo_dev/stage2</code>, deleting the <code>miri</code> directory, re-cloning, and rebuilding.</p>",
        "id": 244872964,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625425831
    },
    {
        "content": "<p>Attempting to change the actual code in libcore to say, not have a wrapping sub (and using an i8, rather than u8, with then a cast back, as a hack), doesn't do anything... I'm very much lost.</p>",
        "id": 244872997,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625425909
    },
    {
        "content": "<p>Attempting to do <code>./x.py install</code> fails, due to errors in <code>docs</code> (cannot find a library, since it uses nightly and not beta), and then removing that I have failures in <code>rustfmt</code>.</p>",
        "id": 244873049,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625425987
    },
    {
        "content": "<p>wrong thread?</p>",
        "id": 244873051,
        "sender_full_name": "The 8472",
        "timestamp": 1625426002
    },
    {
        "content": "<p>Maybe, I'm asking in general because I'm not sure if it's a bug, t-compiler, or etc.</p>",
        "id": 244873059,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625426031
    },
    {
        "content": "<p>It's fine to ask in General, but you posted in an existing thread. Don't worry, though, it happens quite often</p>",
        "id": 244873132,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625426126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Search.20PRs.20for.20a.20file/near/244873132\">said</a>:</p>\n<blockquote>\n<p>It's fine to ask in General, but you posted in an existing thread. Don't worry, though, it happens quite often</p>\n</blockquote>\n<p>My mistake, I thought I had just clicked in general.</p>",
        "id": 244873149,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625426152
    },
    {
        "content": "<p>There's a \"New topic\" button that shows up sometimes</p>",
        "id": 244873206,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625426222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153718\">@Alexander Huszagh (He/Him)</span> The miri repository has a <code>rust-toolchain</code> file which overrides which toolchain is used.   <code>rustup default</code> won't override that.  Perhaps that is causing it to use the wrong toolchain?</p>",
        "id": 244876368,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625430987
    },
    {
        "content": "<p><code>./x.py</code> should use the bootstrap cargo and the right rustc instead of the rustup shims in <code>PATH</code>.</p>",
        "id": 244877109,
        "sender_full_name": "bjorn3",
        "timestamp": 1625432089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/building.20cargo-miri/near/244876368\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"153718\">Alexander Huszagh (He/Him)</span> The miri repository has a <code>rust-toolchain</code> file which overrides which toolchain is used.   <code>rustup default</code> won't override that.  Perhaps that is causing it to use the wrong toolchain?</p>\n</blockquote>\n<p>It's possible, everything started working as expected when I  deleted <code>~/.cache/miri/HOST</code> and ran miri again.</p>",
        "id": 244877110,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625432089
    },
    {
        "content": "<p>So, I think it's just something where the miri cache wasn't being updated. Manually deleting it and then running it (first via <a href=\"https://github.com/rust-lang/miri-test-libstd\">https://github.com/rust-lang/miri-test-libstd</a>) worked like a charm.</p>",
        "id": 244877136,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625432154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/building.20cargo-miri/near/244876368\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"153718\">Alexander Huszagh (He/Him)</span> The miri repository has a <code>rust-toolchain</code> file which overrides which toolchain is used.   <code>rustup default</code> won't override that.  Perhaps that is causing it to use the wrong toolchain?</p>\n</blockquote>\n<p>The repository doesn't have a <code>rust-toolchain</code> file. It just has a <a href=\"https://github.com/rust-lang/miri/blob/15e81a94b1aff99f7c38151d6976757ee0ed0097/rustup-toolchain\">shell script</a> that runs <code>rustup toolchain override</code>.</p>",
        "id": 244912572,
        "sender_full_name": "hyd-dev",
        "timestamp": 1625476834
    },
    {
        "content": "<p>FWIW you shouldnt need <code>x.py</code> at all here :)</p>",
        "id": 245009833,
        "sender_full_name": "RalfJ",
        "timestamp": 1625560659
    },
    {
        "content": "<p>just tell Miri where the stdlib sources are, it'll go and build them</p>",
        "id": 245009847,
        "sender_full_name": "RalfJ",
        "timestamp": 1625560669
    },
    {
        "content": "<p>(but indeed it doesnt always notice when they change so it can be required to clear the cache)</p>",
        "id": 245009872,
        "sender_full_name": "RalfJ",
        "timestamp": 1625560683
    }
]