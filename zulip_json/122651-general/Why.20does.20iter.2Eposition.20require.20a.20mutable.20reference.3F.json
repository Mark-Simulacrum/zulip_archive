[
    {
        "content": "<p>Hi All, I am wondering why this method: <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position\">https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position</a> requires &amp;mut self and not just &amp;self? is the iterator storing some state or something like that while finding the index?</p>",
        "id": 230826330,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1616055027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390743\">@Oliver E. Anderson</span> position consumes elements from <br>\nthe iterator until it finds an item for which the predicate is true. This requires &amp;mut.</p>",
        "id": 230830480,
        "sender_full_name": "bjorn3",
        "timestamp": 1616057723
    },
    {
        "content": "<p>If you don't want mutable access, you can either first clone the iterator, or use an iterator generating method on the underlying <code>IntoIterator</code> type like <code>Vec::iter()</code></p>",
        "id": 230830853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616057946
    },
    {
        "content": "<p>One needs at least <code>&amp;mut</code> access to actually iterate / move forward: all the <code>Iterator</code> APIs (but for \"known\" / guessed in advance stuff, like <code>.len()</code>) are <code>&amp;mut</code>-based (or, equivalently, ownership-based) since its keystone method, <code>fn next</code>, is <code>&amp;mut</code>-based.</p>",
        "id": 230867817,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616076039
    },
    {
        "content": "<p>But do note that you can get a mutable iterator out of shared access to a collection, <code>.iter()</code> being the canonical example.</p>",
        "id": 230867952,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616076093
    }
]