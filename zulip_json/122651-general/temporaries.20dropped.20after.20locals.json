[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">DropsA</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">DropsA</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_unit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DropsA</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"Hey\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DropsA</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">as_unit</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>errors with</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0597]: `x` does not live long enough\n  --&gt; src/main.rs:13:12\n   |\n13 |     DropsA(&amp;x).as_unit()\n   |     -------^^-\n   |     |      |\n   |     |      borrowed value does not live long enough\n   |     a temporary with access to the borrow is created here ...\n14 | }\n   | -\n   | |\n   | `x` dropped here while still borrowed\n   | ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `DropsA`\n   |\nhelp: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n   |\n13 |     DropsA(&amp;x).as_unit();\n   |                         +\n</code></pre></div>",
        "id": 272110230,
        "sender_full_name": "lcnr",
        "timestamp": 1645015297
    },
    {
        "content": "<p>my trivial approach to desugaring temporaries would be  the following, which compiles</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"Hey\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">temp1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DropsA</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">temp1</span><span class=\"p\">.</span><span class=\"n\">as_unit</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272110310,
        "sender_full_name": "lcnr",
        "timestamp": 1645015327
    },
    {
        "content": "<p>does there exist any code which compiles when first dropping locals and then temporaries, which stops to compile if we were to first drop temporaries and then locals?</p>",
        "id": 272110385,
        "sender_full_name": "lcnr",
        "timestamp": 1645015365
    },
    {
        "content": "<p>Always?<br>\nTrivially:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DropsA</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272112242,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645016484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/temporaries.20dropped.20after.20locals/near/272110385\">said</a>:</p>\n<blockquote>\n<p>does there exist any code which compiles when first dropping locals and then temporaries, which stops to compile if we were to first drop temporaries and then locals?</p>\n</blockquote>\n<p>So, there is \"fail to compile\" and there is behavior change (<em>e.g.</em>, <code>lock()s</code>).</p>\n<p>In both cases, <em>even if we were to only handle block-trailing expressions</em>, something like the following would break (you can check that by adding a <code>;</code> after the <code>drop</code>, which emulates your desired behavior):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">DropsA</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"Hey\"</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272116661,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645018961
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">DropsA</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"Hey\"</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yeah, that feels pretty artificial but it would break xx</p>",
        "id": 272392773,
        "sender_full_name": "lcnr",
        "timestamp": 1645185513
    },
    {
        "content": "<p>idk, it's probably a bit too late to change any drop ordering in rust now anyways <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272392858,
        "sender_full_name": "lcnr",
        "timestamp": 1645185592
    }
]