[
    {
        "content": "<p>Has there been any discussion on having error/panic output from <code>#[tests]</code> always include the last invoked line from the function which actually has the <code>#[test]</code> attribute? Would this even be possible? This information is in backtraces but it's often buried, and is not approachable for new rust users. This means all test helpers that could cause assertions need to be macros to get immediately usable source line info, which is not always practical. (Sorry don't know where else to ask!)</p>",
        "id": 240858932,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1622484200
    },
    {
        "content": "<p>if backtraces bury this information then perhaps that should be fixed</p>",
        "id": 240859037,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622484297
    },
    {
        "content": "<p>When you mention error/panic information, do you mean things like <code>Err</code>s from <code>?</code> too?</p>",
        "id": 240859098,
        "sender_full_name": "scottmcm",
        "timestamp": 1622484357
    },
    {
        "content": "<blockquote>\n<p>do you mean things like Errs from ? too?</p>\n</blockquote>\n<p>this seems like the kind of thing that would be great honestly, although it also seems quite hard. this is why i tell people to prefer <code>unwrap()</code> to <code>?</code> in test code</p>",
        "id": 240859558,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622484739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/122651-general/topic/test.20error.20location.20output/near/240859558\">said</a>:</p>\n<blockquote>\n<p>although it also seems quite hard</p>\n</blockquote>\n<p>There're a few possibilities.  Check out this little experiment: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=8ca138947ac046ea4d0bfb0e4cb8c261\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=8ca138947ac046ea4d0bfb0e4cb8c261</a></p>",
        "id": 240860380,
        "sender_full_name": "scottmcm",
        "timestamp": 1622485489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/122651-general/topic/test.20error.20location.20output/near/240859558\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>do you mean things like Errs from ? too?</p>\n</blockquote>\n<p>this seems like the kind of thing that would be great honestly, although it also seems quite hard. this is why i tell people to prefer <code>unwrap()</code> to <code>?</code> in test code</p>\n</blockquote>\n<p>At my employer we moved to <code>unwrap()</code> but now we're moving back to <code>?</code> because the difference isn't actually that much according to my tests this morning. The big problem for us seems to be indirection from helper functions that could cause errors / assertions.</p>",
        "id": 240861541,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1622486472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/test.20error.20location.20output/near/240859098\">said</a>:</p>\n<blockquote>\n<p>When you mention error/panic information, do you mean things like <code>Err</code>s from <code>?</code> too?</p>\n</blockquote>\n<p>By panics I mean <code>panic!</code> / <code>assert!</code>, and by errors I mean <code>Result&lt;&gt;</code>.</p>",
        "id": 240861582,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1622486516
    }
]