[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n   --&gt; library/std/src/time.rs:30:5\n    |\n30  | use super::is_x86_feature_detected;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(macro_expanded_macro_exports_accessed_by_absolute_paths)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #52234 &lt;https://github.com/rust-lang/rust/issues/52234&gt;\nnote: the macro is defined here\n   --&gt; library/std/src/../../stdarch/crates/std_detect/src/detect/macros.rs:14:9\n</code></pre></div>",
        "id": 230101546,
        "sender_full_name": "The 8472",
        "timestamp": 1615584913
    },
    {
        "content": "<p>What's the correct way to <code>use</code> the macro inside std?</p>",
        "id": 230101598,
        "sender_full_name": "The 8472",
        "timestamp": 1615584941
    },
    {
        "content": "<blockquote>\n<p>#[macro_export] macro_rules items are collected from the whole crate and are planted into the root module as items, so the external view of the crate is symmetric with its internal view and something like $crate::my_macro where my_macro is #[macro_export] macro_rules works both locally and from other crates.</p>\n</blockquote>\n<p>I think you want <code>use crate::is_feature_detected</code> (not <code>super::</code>)</p>",
        "id": 230101753,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615584993
    },
    {
        "content": "<p>You mean <code>use crate::is_x86_feature_detected;</code>? tried that, same error.</p>",
        "id": 230102035,
        "sender_full_name": "The 8472",
        "timestamp": 1615585113
    },
    {
        "content": "<p>what happens if you use it without importing it?</p>",
        "id": 230102079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615585134
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: cannot find macro `is_x86_feature_detected` in this scope\n   --&gt; library/std/src/time.rs:306:65\n    |\n306 |             if crate::mem::size_of::&lt;time::Instant&gt;() == 128 &amp;&amp; is_x86_feature_detected!(&quot;cmpxchg16b&quot;) {\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: consider importing this macro:\n            crate::is_x86_feature_detected\n    = help: have you added the `#[macro_use]` on the module/import?\n</code></pre></div>",
        "id": 230102143,
        "sender_full_name": "The 8472",
        "timestamp": 1615585166
    },
    {
        "content": "<p><code>::is_x86_feature_detected!()</code>?</p>",
        "id": 230103683,
        "sender_full_name": "nagisa",
        "timestamp": 1615585913
    },
    {
        "content": "<p>But yes, you want to refer to the macro without involving <code>use</code>, I think,</p>",
        "id": 230103857,
        "sender_full_name": "nagisa",
        "timestamp": 1615586007
    },
    {
        "content": "<p><code>::is_x86_feature_detected!()</code> doesn't resolve. invoking <code>crate::...</code> or <code>super::...</code> directly without <code>use</code> returns the same macro_expanded_macro_exports_accessed_by_absolute_paths warning/error.</p>",
        "id": 230107226,
        "sender_full_name": "The 8472",
        "timestamp": 1615587044
    },
    {
        "content": "<p>That's quite a puzzle.  The only solution I can think of is to sprinkle <code>#[macro_use]</code> on the std_detect modules, but then the macro will only be visible textually after <code>std_detect</code>, so it will be very difficult to use.</p>",
        "id": 230111878,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615589102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> may be able to suggest something.</p>",
        "id": 230112144,
        "sender_full_name": "nagisa",
        "timestamp": 1615589244
    },
    {
        "content": "<p>hm, is this for optimizing <code>std::time::Instant</code>? you'd probably be better by explicitly doing this either in the way the (darwin/windows) std::time modules cache their timebase, and on non-darwin unix synchronizing on an acq/rel of the <code>seconds</code> field of the struct timespec.</p>",
        "id": 230128371,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1615602818
    },
    {
        "content": "<p>It's for backslide protection which currently uses a lock.  I don't think this can be achieved with atomic ops on just one of the fields.</p>",
        "id": 230153466,
        "sender_full_name": "The 8472",
        "timestamp": 1615630990
    },
    {
        "content": "<p>Does adding a <code>pub use is_x86_feature_detected</code> <em>right after its definition point</em> and then using a full path pointing there work?</p>",
        "id": 230156527,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615634865
    },
    {
        "content": "<p>What I mean is that something like this works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">macros</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">mk_m</span><span class=\"w\"> </span><span class=\"p\">{()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">()}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mk_m</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">super</span>::<span class=\"n\">macros</span>::<span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230156688,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615635048
    },
    {
        "content": "<p>Why does the definition of <code>is_x86_feature_detected</code> come from a macro?</p>",
        "id": 230163360,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1615642688
    },
    {
        "content": "<p>The least hacky and unobvious fix for this issue is to not generate <code>#[macro_export]</code> items with macros.</p>",
        "id": 230163399,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1615642753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> the inner macro's name depends on an argument passed to the outer macro. <code>std_detect</code> generates <code>is_{arch}_feature_detected</code> that way.</p>",
        "id": 230166147,
        "sender_full_name": "The 8472",
        "timestamp": 1615645713
    },
    {
        "content": "<p>What I mean is that</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>  }\n<span class=\"gi\">+ pub use $macro_name;</span>\n</code></pre></div>\n<p>could be applied to <a href=\"https://github.com/rust-lang/stdarch/blob/9c732a56f67f54d12a0b4fd99993154906c95ea6/crates/std_detect/src/detect/macros.rs#L44\">https://github.com/rust-lang/stdarch/blob/9c732a56f67f54d12a0b4fd99993154906c95ea6/crates/std_detect/src/detect/macros.rs#L44</a> (should the macro need to be <code>#[macro_export]</code>ed), and from there you'd have a \"usable\" (modulo privacy, but that's easy to fix with another re-export) absolute path.</p>\n<p>The other option would be to improve a bit the duck typing of that <code>mod.rs</code> file inside <code>std_detect</code>: you could use a <code>cfg(standalone_std_detect)</code> to apply the attributes necessary for that code to operate as a standalone crate (<em>e.g.</em>, <code>#[cfg_attr(standalone_std_detect, macro_export)]</code>, which would be possible by having the <code>build.rs</code> of that crate emit that cfg. That way, when <code>::std</code> does that <code>#[path = \"â€¦\"] mod std_detect;</code> hack, the cfg wouldn't be enabled, and you wouldn't have to worry about misinteractions between a private user (<code>::std</code> code) and a no-longer-happening export of macros.</p>",
        "id": 230167353,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615647061
    },
    {
        "content": "<p>Ah, yes, that seems to work. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 230172670,
        "sender_full_name": "The 8472",
        "timestamp": 1615652007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/122651-general/topic/using.20is_x86_feature_detected.20in.20std/near/230128371\">said</a>:</p>\n<blockquote>\n<p>hm, is this for optimizing <code>std::time::Instant</code>? you'd probably be better by explicitly doing this either in the way the (darwin/windows) std::time modules cache their timebase, and on non-darwin unix synchronizing on an acq/rel of the <code>seconds</code> field of the struct timespec.</p>\n</blockquote>\n<p>Having looked through the platform implementations you might be right after all, it looks like some are deriving their Instant from 64bit values but convert them to 128bit ones fairly early. Wouldn't help the BSDs though which do the same as linux and aren't <code>actually_monotonic()</code>. So we'd need the 64 and 128bit atomics. Ugh.</p>",
        "id": 230938873,
        "sender_full_name": "The 8472",
        "timestamp": 1616102064
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83278\">#83278</a> will change <code>std_detect</code> to be a separate crate, which should solve this issue.</p>",
        "id": 230944803,
        "sender_full_name": "Amanieu",
        "timestamp": 1616105103
    }
]