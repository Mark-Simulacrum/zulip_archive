[
    {
        "content": "<p>Hi, I've been experimenting with writing a specific loop and looking at the generated assembly. I've noticed that <a href=\"https://godbolt.org/z/Wxenh7qTM\">the loop does not always get vectorized</a> (on x86-64-v4) depending on how it is written. I was just wondering if it was possible for some kind of MIR optimization pass or something to transform the loop so that it does get vectorized?</p>",
        "id": 248448999,
        "sender_full_name": "Redzic",
        "timestamp": 1628150645
    },
    {
        "content": "<p>But it does get vectorized if you remove <code>f3</code> or even <code>f2</code></p>",
        "id": 248449353,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1628150935
    },
    {
        "content": "<p>That seems to be quite CPU-arch dependent. On znver3 it doesn't generate any vector instructions at all. So I guess even minor changes could perturb the optimizer?</p>",
        "id": 248450962,
        "sender_full_name": "The 8472",
        "timestamp": 1628152318
    },
    {
        "content": "<p>I guess it doesn't like that the struct size isn't a power of two</p>",
        "id": 248451104,
        "sender_full_name": "The 8472",
        "timestamp": 1628152424
    },
    {
        "content": "<p>It still generates different vector instructions though if you extend/shrink it</p>",
        "id": 248451249,
        "sender_full_name": "The 8472",
        "timestamp": 1628152547
    },
    {
        "content": "<p>I suspect it fails to unify the 3 separate loop variables for the <code>collect</code> implementation. one for the range, one for the write pointer and one for the length.</p>",
        "id": 248453118,
        "sender_full_name": "The 8472",
        "timestamp": 1628154026
    },
    {
        "content": "<p>minor changes can often perturb the auto-vectorizer. You really can't rely on it happening.</p>",
        "id": 248474938,
        "sender_full_name": "Lokathor",
        "timestamp": 1628169264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Inconsistent.20autovectorization.20with.20AVX-512/near/248450962\">said</a>:</p>\n<blockquote>\n<p>That seems to be quite CPU-arch dependent. On znver3 it doesn't generate any vector instructions at all. So I guess even minor changes could perturb the optimizer?</p>\n</blockquote>\n<p>I think the reason it doesn't autovectorize on znver3 is because znver3 doesn't support AVX-512, which seems to be needed to vectorize this specific loop. I wrote the same code in C++, and gcc and clang were also only able to vectorize it if AVX-512 instructions were enabled.</p>",
        "id": 248513860,
        "sender_full_name": "Redzic",
        "timestamp": 1628186772
    },
    {
        "content": "<p>Well, if you change it to 4 fields and target znver3 then it is flipped. The collect loop uses vector instructions while the other two just use a bunch of movs.</p>",
        "id": 248525015,
        "sender_full_name": "The 8472",
        "timestamp": 1628191999
    }
]