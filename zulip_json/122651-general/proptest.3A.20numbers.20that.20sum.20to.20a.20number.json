[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I’d like to write a proptest that takes as input a <code>Vec&lt;u8&gt;</code> and a <code>Vec&lt;usize&gt;</code> such that the sum of the latter equals the length of the former. This is for testing that processing a blob of bytes in arbitrary chunks does not affect my algorithm. Any suggestions on how to create that?</p>",
        "id": 168814934,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561337705
    },
    {
        "content": "<p>hmm; well avoid filtering <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 168814992,
        "sender_full_name": "centril",
        "timestamp": 1561337813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> So if I understand the test correctly, I would generate the <code>vu: Vec&lt;usize&gt;</code>, fetch the length, and then generate a random <code>Vec&lt;u8&gt;</code> from that</p>",
        "id": 168815045,
        "sender_full_name": "centril",
        "timestamp": 1561337917
    },
    {
        "content": "<p>hmm, do it backwards. Interesting.</p>",
        "id": 168815054,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561337942
    },
    {
        "content": "<p>Yeah because constructing a sum from a length seems... harder?</p>",
        "id": 168815059,
        "sender_full_name": "centril",
        "timestamp": 1561337984
    },
    {
        "content": "<p>Tho possibly cheaper</p>",
        "id": 168815062,
        "sender_full_name": "centril",
        "timestamp": 1561337999
    },
    {
        "content": "<p>Naively, constructing a sum from a length sounds like iteratively and randomly generating numbers that is within the interval of the length and then  adding them up until the sum is zero</p>",
        "id": 168815138,
        "sender_full_name": "centril",
        "timestamp": 1561338122
    },
    {
        "content": "<p>Maybe proptest has something for that but I don't remember ^^</p>",
        "id": 168815177,
        "sender_full_name": "centril",
        "timestamp": 1561338172
    },
    {
        "content": "<p>yeah, it felt like an iterative/recursive concept to me: pick a random number 0..len, repeat until 0, but I couldn’t figure out how to bend the recursive functionality</p>",
        "id": 168815305,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561338421
    },
    {
        "content": "<p>I would do some searching in the docs to find what you want :D</p>",
        "id": 168815365,
        "sender_full_name": "centril",
        "timestamp": 1561338535
    },
    {
        "content": "<p>or make a PR if you didn't find it</p>",
        "id": 168815371,
        "sender_full_name": "centril",
        "timestamp": 1561338546
    },
    {
        "content": "<p>you mean an issue? Hard to PR if I don’t know what the code is :-)</p>",
        "id": 168815428,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561338686
    },
    {
        "content": "<p>Amusingly, this “write it backwards” advice was something I read recently in a protesting article. Too bad I didn’t connect the dots</p>",
        "id": 168815542,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561338871
    },
    {
        "content": "<blockquote>\n<p>thread 'same_results_as_c_for_64_bit_with_varying_chunks' panicked at 'capacity overflow', src/liballoc/raw_vec.rs:748:5</p>\n</blockquote>\n<p>Stupid property-based testing… testing all the properties</p>",
        "id": 168815607,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561338969
    },
    {
        "content": "<p>Yea figure out the code first :D</p>",
        "id": 168815842,
        "sender_full_name": "centril",
        "timestamp": 1561339468
    },
    {
        "content": "<p>Well, that was because I was creating a <code>Vec&lt;u8&gt;</code> with a Very Large Capacity via the props</p>",
        "id": 168815861,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561339521
    },
    {
        "content": "<p>In case you are interested, this article calls this technique an “oracle generator”</p>\n<p><a href=\"https://wickstrom.tech/programming/2019/04/17/property-based-testing-in-a-screencast-editor-case-study-2.html\" target=\"_blank\" title=\"https://wickstrom.tech/programming/2019/04/17/property-based-testing-in-a-screencast-editor-case-study-2.html\">https://wickstrom.tech/programming/2019/04/17/property-based-testing-in-a-screencast-editor-case-study-2.html</a></p>",
        "id": 168816279,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561340375
    }
]