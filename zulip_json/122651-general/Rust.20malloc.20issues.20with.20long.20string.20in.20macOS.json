[
    {
        "content": "<p>Hello all.  New to zulip, I don't know how to resolve this issue, sure, I come here. In my situation, I had a Rust app and it will pass String pointer to C part. </p>\n<p>In the short string, it works perfect. But once it's a long string,  It will cause issues. I had do some research like in <a href=\"https://notes.iveselov.info/programming/allocation-api-and-allocators\">https://notes.iveselov.info/programming/allocation-api-and-allocators</a>, it seems a <strong>RT Allocated</strong> issues. </p>\n<p>here is my code: <a href=\"https://github.com/phodal/rust-malloc-issues-test\">https://github.com/phodal/rust-malloc-issues-test</a></p>",
        "id": 210828930,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1600751850
    },
    {
        "content": "<p>Sorry,  I'm not good at this chat tool, here is the code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">libc</span>::<span class=\"n\">malloc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">NormalString</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kt\">str</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">NormalString</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"kt\">str</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">NormalString</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">str</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">long_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Boolean\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">utf_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NormalString</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">long_str</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">utf_string</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\">                  </span><span class=\"c1\">// B</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// o</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// o</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// l</span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// e</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">long_str2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\\\</span><span class=\"s\">b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)</span><span class=\"se\">\\\\</span><span class=\"s\">b\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">utf_string2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NormalString</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">long_str2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">utf_string2</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>it will return those in my macOS</p>\n<div class=\"codehilite\"><pre><span></span><code>66\n0\n</code></pre></div>\n\n\n<p>but it return 0 0 in  the Rust Playgroud: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=240078be1a848cca4f3a0627882a0aa4\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=240078be1a848cca4f3a0627882a0aa4</a></p>\n<p>I just try to figure out how to resolve this, and pass String pointer to C part.  But don't have a good point. Does any one have some ideas about to do it?</p>",
        "id": 210829042,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1600752020
    },
    {
        "content": "<p>It looks like you're using <code>malloc</code> and then not actually writing anything to the pointer. When you first get the pointer back it points to uninitialized memory, so reading the pointer will be UB.</p>",
        "id": 210829059,
        "sender_full_name": "Lokathor",
        "timestamp": 1600752081
    },
    {
        "content": "<p>It seems so, but I still wonder why in Rust playground, will have different results. According the article in the mention, in different OS will had different RT allocated:</p>\n<table>\n<thead>\n<tr>\n<th>OS</th>\n<th>RT Allocated, bytes</th>\n<th>Remaining in use, bytes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>macOS</td>\n<td>241</td>\n<td>237</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>441</td>\n<td>173</td>\n</tr>\n<tr>\n<td>Linux</td>\n<td>177</td>\n<td>173</td>\n</tr>\n</tbody>\n</table>\n<p>In my system, it's 241. Once strings length &gt; 241, will return 0. But in the playground, it's 0 even length great then 700</p>",
        "id": 210829249,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1600752394
    },
    {
        "content": "<p>Well, once UB happens you can't reliably say what will occur. That's why you shouldn't ever perform UB, after all.</p>\n<p>Honestly, i'm surprised that there's any consistency to begin with.</p>",
        "id": 210829321,
        "sender_full_name": "Lokathor",
        "timestamp": 1600752524
    },
    {
        "content": "<p>So, in my situation,  the better idea is rewrite the NormalString part in C, and pass parameters to it?</p>",
        "id": 210829413,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1600752687
    },
    {
        "content": "<p>it's UB in C too</p>",
        "id": 210829570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600752960
    },
    {
        "content": "<p>why are you reading from freshly allocated memory?</p>",
        "id": 210829614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600752992
    },
    {
        "content": "<p>I try to rewrite VSCode-oniguruma with Rust <a href=\"https://github.com/microsoft/vscode-oniguruma/blob/2381c655be380c16b7045106fa2acb9610016922/src/index.ts#L250\">https://github.com/microsoft/vscode-oniguruma/blob/2381c655be380c16b7045106fa2acb9610016922/src/index.ts#L250</a> . It read it works. And in my cases,  it works in short strings. I think it don't make senses, but it works..., So I try to figure out why it happens in Rust too ?</p>",
        "id": 210829767,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1600753217
    },
    {
        "content": "<p>In your example, you seem to be indicating that reading bytes out of <code>x</code>, which yields <code>B,o,o,l,e</code> (which are in fact the characters of a completely separate variable <code>long_str</code>), is the desired behavior. If so, why don't you just take the address of <code>long_str</code>'s data instead, as a <code>*mut u8</code>? That can be done safely as long as you don't change the length of the string</p>",
        "id": 210830199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600753905
    },
    {
        "content": "<p>If you want to create a C string from a rust <code>&amp;str</code> or <code>String</code>, you should use <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html\">https://doc.rust-lang.org/std/ffi/struct.CString.html</a></p>",
        "id": 210830340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600754137
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> , it's awesome.</p>",
        "id": 210830646,
        "sender_full_name": "Phodal Huang",
        "timestamp": 1600754497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/Rust.20malloc.20issues.20with.20long.20string.20in.20macOS/near/210829321\">said</a>:</p>\n<blockquote>\n<p>Well, once UB happens you can't reliably say what will occur. That's why you shouldn't ever perform UB, after all.</p>\n<p>Honestly, i'm surprised that there's any consistency to begin with.</p>\n</blockquote>\n<p>Funnily enough, the useless <code>.clone()</code> that is performed beforehand, coupled with the fact the allocator was also using <code>malloc</code> as its backend, is what lead to this \"fortunate\" random-bytes-from-allocator-do-actually-match-those-wanted. It seems two wrongs can make a right, in UB-land <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 210853183,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600771399
    }
]