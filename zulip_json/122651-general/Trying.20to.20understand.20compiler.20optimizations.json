[
    {
        "content": "<p>This is just to satisfy my ciriousity, why when I write the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The compiler generates x86 code that reads the fields one by one and compare, instead of reading the whole value as a dword and comparing with 460033?<br>\nI can even write portable code in rust that does this more efficiently (altough it makes the assumption that all <code>(u8,u8,u16)</code> have the same layout) <a href=\"https://godbolt.org/z/eMK49dzeb\">https://godbolt.org/z/eMK49dzeb</a></p>\n<p>After writing this, I realized that if I remvoe the reference from the <code>s</code> input in <code>test</code> the generated code is as I expected! why is that?<br>\nThanks :)</p>",
        "id": 244253651,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1624958592
    },
    {
        "content": "<p>The problem there is that it needs a 4-byte read with align 2, and historically LLVM is bad at combining reads like that.</p>\n<p>The reason it works without the <code>&amp;</code> is that rust will currently (not guaranteed) pass it as an <code>i32</code>: <code>define zeroext i1 @_ZN10playground4test17h6c2e85b2367424b9E(i32 %0) unnamed_addr #0 {</code></p>\n<p>Vs the reference version is <code>define zeroext i1 @_ZN10playground4test17hf56b90057253de0bE({ [0 x i8], i8, [0 x i8], i8, [0 x i8], i16, [0 x i16] }* noalias nocapture readonly align 2 dereferenceable(4) %s) unnamed_addr #0 {</code></p>",
        "id": 244316836,
        "sender_full_name": "scottmcm",
        "timestamp": 1624987437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/Trying.20to.20understand.20compiler.20optimizations/near/244316836\">said</a>:</p>\n<blockquote>\n<p>The problem there is that it needs a 4-byte read with align 2, and historically LLVM is bad at combining reads like that.</p>\n<p>The reason it works without the <code>&amp;</code> is that rust will currently (not guaranteed) pass it as an <code>i32</code>: <code>define zeroext i1 @_ZN10playground4test17h6c2e85b2367424b9E(i32 %0) unnamed_addr #0 {</code></p>\n<p>Vs the reference version is <code>define zeroext i1 @_ZN10playground4test17hf56b90057253de0bE({ [0 x i8], i8, [0 x i8], i8, [0 x i8], i16, [0 x i16] }* noalias nocapture readonly align 2 dereferenceable(4) %s) unnamed_addr #0 {</code></p>\n</blockquote>\n<p>Ohh interesting, so rust does the combination when passed by value, but LLVM isn't great at combining objects with different alignment.<br>\nNext time I'll try to read the LLVM IR before posting here :)<br>\nThanks!</p>",
        "id": 244393546,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625042895
    },
    {
        "content": "<p>I think in both cases it's LLVM merging the equality calls.  But it's more willing to do that on subsets of something it already has in a register -- because of what <code>extern \"Rust\"</code>'s ABI happened to pick -- than on things that are the result of loads.</p>\n<p>(I wonder, also, if it's less willing to remove the short circuiting because of the <code>load</code>s.  <code>dereferencable(4)</code> should be enough for it to not worry about the loads being potentially UB, but maybe the passes don't look at that.)</p>",
        "id": 244456777,
        "sender_full_name": "scottmcm",
        "timestamp": 1625072935
    }
]