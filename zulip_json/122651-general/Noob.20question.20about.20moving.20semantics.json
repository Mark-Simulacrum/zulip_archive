[
    {
        "content": "<p>Just wondering if there is an issue or PR related to the following situation -&gt; <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a88d2630a3c914460a4bed80bb77b7ce\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a88d2630a3c914460a4bed80bb77b7ce</a></p>",
        "id": 257855836,
        "sender_full_name": "Caio",
        "timestamp": 1634413385
    },
    {
        "content": "<p>Hmm, aside from the reborrowing, it's surprising to me that</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">foo_mut</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">foo_mut</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>works, but</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">foo_mut</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">foo_mut</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>does not.</p>",
        "id": 257859172,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634416313
    },
    {
        "content": "<p>Hmm, but it does work with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">foo_mut</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257864585,
        "sender_full_name": "cuviper",
        "timestamp": 1634421400
    },
    {
        "content": "<p>Like the initial ambiguity of <em>which</em> <code>From&lt;_&gt; for ()</code> somehow prevents reborrowing</p>",
        "id": 257864688,
        "sender_full_name": "cuviper",
        "timestamp": 1634421490
    },
    {
        "content": "<p>That's really bizarre. It looks like <code>&lt;() as From&lt;&amp;mut Foo&gt;&gt;::from(from_mut)</code> triggers a reborrow of <code>from_mut</code>? Here's a code diff and then a diff of the resulting MIR.</p>\n<h3>Code</h3>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/unqual.rs b/fqs.rs</span>\n<span class=\"gh\">index 819833a..11dafb8 100644</span>\n<span class=\"gd\">--- a/unqual.rs</span>\n<span class=\"gi\">+++ b/fqs.rs</span>\n<span class=\"gu\">@@ -10,6 +10,6 @@ fn main() {</span>\n     let mut foo = Foo;\n     let foo_mut = &amp;mut foo;\n\n<span class=\"gd\">-    &lt;()&gt;::from(foo_mut);</span>\n<span class=\"gi\">+    &lt;() as From&lt;&amp;mut Foo&gt;&gt;::from(foo_mut);</span>\n     &lt;()&gt;::from(foo_mut);\n }\n</code></pre></div>\n<h3>MIR</h3>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/mir_dump-unqual/unqual.main.-------.mir_map.0.mir b/mir_dump-fqs/fqs.main.-------.mir_map.0.mir</span>\n<span class=\"gh\">index 6a55834..379a7f1 100644</span>\n<span class=\"gd\">--- a/mir_dump-unqual/unqual.main.-------.mir_map.0.mir</span>\n<span class=\"gi\">+++ b/mir_dump-fqs/fqs.main.-------.mir_map.0.mir</span>\n<span class=\"gu\">@@ -1,64 +1,64 @@</span>\n // MIR for `main` 0 mir_map\n\n | User Type Annotations\n<span class=\"gd\">-| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), ^0], user_self_ty: None }) } at unqual.rs:13:5: 13:15</span>\n<span class=\"gd\">-| 1: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), ^0], user_self_ty: None }) } at unqual.rs:14:5: 14:15</span>\n<span class=\"gi\">+| 0: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), &amp;mut Foo], user_self_ty: None }) } at fqs.rs:13:5: 13:33</span>\n<span class=\"gi\">+| 1: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(2:2912 ~ core[f488]::convert::From::from), UserSubsts { substs: [(), ^0], user_self_ty: None }) } at fqs.rs:14:5: 14:15</span>\n |\n fn main() -&gt; () {\n<span class=\"gd\">-    let mut _0: ();                      // return place in scope 0 at unqual.rs:9:11: 9:11</span>\n<span class=\"gd\">-    let mut _1: Foo;                     // in scope 0 at unqual.rs:10:9: 10:16</span>\n<span class=\"gd\">-    let _3: ();                          // in scope 0 at unqual.rs:13:5: 13:24</span>\n<span class=\"gd\">-    let mut _4: &amp;mut Foo;                // in scope 0 at unqual.rs:13:16: 13:23</span>\n<span class=\"gd\">-    let _5: ();                          // in scope 0 at unqual.rs:14:5: 14:24</span>\n<span class=\"gd\">-    let mut _6: &amp;mut Foo;                // in scope 0 at unqual.rs:14:16: 14:23</span>\n<span class=\"gi\">+    let mut _0: ();                      // return place in scope 0 at fqs.rs:9:11: 9:11</span>\n<span class=\"gi\">+    let mut _1: Foo;                     // in scope 0 at fqs.rs:10:9: 10:16</span>\n<span class=\"gi\">+    let _3: ();                          // in scope 0 at fqs.rs:13:5: 13:42</span>\n<span class=\"gi\">+    let mut _4: &amp;mut Foo;                // in scope 0 at fqs.rs:13:34: 13:41</span>\n<span class=\"gi\">+    let _5: ();                          // in scope 0 at fqs.rs:14:5: 14:24</span>\n<span class=\"gi\">+    let mut _6: &amp;mut Foo;                // in scope 0 at fqs.rs:14:16: 14:23</span>\n     scope 1 {\n<span class=\"gd\">-        debug foo =&gt; _1;                 // in scope 1 at unqual.rs:10:9: 10:16</span>\n<span class=\"gd\">-        let _2: &amp;mut Foo;                // in scope 1 at unqual.rs:11:9: 11:16</span>\n<span class=\"gi\">+        debug foo =&gt; _1;                 // in scope 1 at fqs.rs:10:9: 10:16</span>\n<span class=\"gi\">+        let _2: &amp;mut Foo;                // in scope 1 at fqs.rs:11:9: 11:16</span>\n         scope 2 {\n<span class=\"gd\">-            debug foo_mut =&gt; _2;         // in scope 2 at unqual.rs:11:9: 11:16</span>\n<span class=\"gi\">+            debug foo_mut =&gt; _2;         // in scope 2 at fqs.rs:11:9: 11:16</span>\n         }\n     }\n\n     bb0: {\n<span class=\"gd\">-        StorageLive(_1);                 // scope 0 at unqual.rs:10:9: 10:16</span>\n<span class=\"gd\">-        _1 = Foo;                        // scope 0 at unqual.rs:10:19: 10:22</span>\n<span class=\"gd\">-        FakeRead(ForLet(None), _1);      // scope 0 at unqual.rs:10:9: 10:16</span>\n<span class=\"gd\">-        StorageLive(_2);                 // scope 1 at unqual.rs:11:9: 11:16</span>\n<span class=\"gd\">-        _2 = &amp;mut _1;                    // scope 1 at unqual.rs:11:19: 11:27</span>\n<span class=\"gd\">-        FakeRead(ForLet(None), _2);      // scope 1 at unqual.rs:11:9: 11:16</span>\n<span class=\"gd\">-        StorageLive(_3);                 // scope 2 at unqual.rs:13:5: 13:24</span>\n<span class=\"gd\">-        StorageLive(_4);                 // scope 2 at unqual.rs:13:16: 13:23</span>\n<span class=\"gd\">-        _4 = move _2;                    // scope 2 at unqual.rs:13:16: 13:23</span>\n<span class=\"gd\">-        _3 = &lt;() as From&lt;&amp;mut Foo&gt;&gt;::from(move _4) -&gt; [return: bb1, unwind: bb3]; // scope 2 at unqual.rs:13:5: 13:24</span>\n<span class=\"gi\">+        StorageLive(_1);                 // scope 0 at fqs.rs:10:9: 10:16</span>\n<span class=\"gi\">+        _1 = Foo;                        // scope 0 at fqs.rs:10:19: 10:22</span>\n<span class=\"gi\">+        FakeRead(ForLet(None), _1);      // scope 0 at fqs.rs:10:9: 10:16</span>\n<span class=\"gi\">+        StorageLive(_2);                 // scope 1 at fqs.rs:11:9: 11:16</span>\n<span class=\"gi\">+        _2 = &amp;mut _1;                    // scope 1 at fqs.rs:11:19: 11:27</span>\n<span class=\"gi\">+        FakeRead(ForLet(None), _2);      // scope 1 at fqs.rs:11:9: 11:16</span>\n<span class=\"gi\">+        StorageLive(_3);                 // scope 2 at fqs.rs:13:5: 13:42</span>\n<span class=\"gi\">+        StorageLive(_4);                 // scope 2 at fqs.rs:13:34: 13:41</span>\n<span class=\"gi\">+        _4 = &amp;mut (*_2);                 // scope 2 at fqs.rs:13:34: 13:41</span>\n<span class=\"gi\">+        _3 = &lt;() as From&lt;&amp;mut Foo&gt;&gt;::from(move _4) -&gt; [return: bb1, unwind: bb3]; // scope 2 at fqs.rs:13:5: 13:42</span>\n                                          // mir::Constant\n<span class=\"gd\">-                                         // + span: unqual.rs:13:5: 13:15</span>\n<span class=\"gi\">+                                         // + span: fqs.rs:13:5: 13:33</span>\n                                          // + user_ty: UserType(0)\n                                          // + literal: Const { ty: fn(&amp;mut Foo) {&lt;() as std::convert::From&lt;&amp;mut Foo&gt;&gt;::from}, val: Value(Scalar(&lt;ZST&gt;)) }\n     }\n\n     bb1: {\n<span class=\"gd\">-        StorageDead(_4);                 // scope 2 at unqual.rs:13:23: 13:24</span>\n<span class=\"gd\">-        StorageDead(_3);                 // scope 2 at unqual.rs:13:24: 13:25</span>\n<span class=\"gd\">-        StorageLive(_5);                 // scope 2 at unqual.rs:14:5: 14:24</span>\n<span class=\"gd\">-        StorageLive(_6);                 // scope 2 at unqual.rs:14:16: 14:23</span>\n<span class=\"gd\">-        _6 = move _2;                    // scope 2 at unqual.rs:14:16: 14:23</span>\n<span class=\"gd\">-        _5 = &lt;() as From&lt;&amp;mut Foo&gt;&gt;::from(move _6) -&gt; [return: bb2, unwind: bb3]; // scope 2 at unqual.rs:14:5: 14:24</span>\n<span class=\"gi\">+        StorageDead(_4);                 // scope 2 at fqs.rs:13:41: 13:42</span>\n<span class=\"gi\">+        StorageDead(_3);                 // scope 2 at fqs.rs:13:42: 13:43</span>\n<span class=\"gi\">+        StorageLive(_5);                 // scope 2 at fqs.rs:14:5: 14:24</span>\n<span class=\"gi\">+        StorageLive(_6);                 // scope 2 at fqs.rs:14:16: 14:23</span>\n<span class=\"gi\">+        _6 = move _2;                    // scope 2 at fqs.rs:14:16: 14:23</span>\n<span class=\"gi\">+        _5 = &lt;() as From&lt;&amp;mut Foo&gt;&gt;::from(move _6) -&gt; [return: bb2, unwind: bb3]; // scope 2 at fqs.rs:14:5: 14:24</span>\n                                          // mir::Constant\n<span class=\"gd\">-                                         // + span: unqual.rs:14:5: 14:15</span>\n<span class=\"gi\">+                                         // + span: fqs.rs:14:5: 14:15</span>\n                                          // + user_ty: UserType(1)\n                                          // + literal: Const { ty: fn(&amp;mut Foo) {&lt;() as std::convert::From&lt;&amp;mut Foo&gt;&gt;::from}, val: Value(Scalar(&lt;ZST&gt;)) }\n     }\n\n     bb2: {\n<span class=\"gd\">-        StorageDead(_6);                 // scope 2 at unqual.rs:14:23: 14:24</span>\n<span class=\"gd\">-        StorageDead(_5);                 // scope 2 at unqual.rs:14:24: 14:25</span>\n<span class=\"gd\">-        _0 = const ();                   // scope 0 at unqual.rs:9:11: 15:2</span>\n<span class=\"gd\">-        StorageDead(_2);                 // scope 1 at unqual.rs:15:1: 15:2</span>\n<span class=\"gd\">-        StorageDead(_1);                 // scope 0 at unqual.rs:15:1: 15:2</span>\n<span class=\"gd\">-        return;                          // scope 0 at unqual.rs:15:2: 15:2</span>\n<span class=\"gi\">+        StorageDead(_6);                 // scope 2 at fqs.rs:14:23: 14:24</span>\n<span class=\"gi\">+        StorageDead(_5);                 // scope 2 at fqs.rs:14:24: 14:25</span>\n<span class=\"gi\">+        _0 = const ();                   // scope 0 at fqs.rs:9:11: 15:2</span>\n<span class=\"gi\">+        StorageDead(_2);                 // scope 1 at fqs.rs:15:1: 15:2</span>\n<span class=\"gi\">+        StorageDead(_1);                 // scope 0 at fqs.rs:15:1: 15:2</span>\n<span class=\"gi\">+        return;                          // scope 0 at fqs.rs:15:2: 15:2</span>\n     }\n\n     bb3 (cleanup): {\n<span class=\"gd\">-        resume;                          // scope 0 at unqual.rs:9:1: 15:2</span>\n<span class=\"gi\">+        resume;                          // scope 0 at fqs.rs:9:1: 15:2</span>\n     }\n }\n</code></pre></div>",
        "id": 257865382,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634422161
    },
    {
        "content": "<p>Maybe it is worth creating an issue</p>",
        "id": 257865477,
        "sender_full_name": "Caio",
        "timestamp": 1634422233
    },
    {
        "content": "<p>Yeah, I think that'd be a good idea, at least to be able to discuss this more easily. Do you want to open one?</p>",
        "id": 257865607,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634422339
    },
    {
        "content": "<p>I can if no-one is willing to do so :P</p>",
        "id": 257865643,
        "sender_full_name": "Caio",
        "timestamp": 1634422393
    },
    {
        "content": "<p>I can do it, but you first noticed this, so I thought you might want to :)</p>",
        "id": 257865670,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634422417
    },
    {
        "content": "<p>Nah... I am fine... FWICT, this issue will be hanging forever until someone steps up to solve it</p>",
        "id": 257865773,
        "sender_full_name": "Caio",
        "timestamp": 1634422497
    },
    {
        "content": "<p>Perhaps, but it's still worth tracking :)</p>\n<p>I'll open an issue then.</p>",
        "id": 257865805,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634422525
    },
    {
        "content": "<p>Well, type inference inhibits coercion</p>",
        "id": 257866265,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634422925
    },
    {
        "content": "<p>And reborrowing is one kind of coercion</p>",
        "id": 257866289,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634422943
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/89966\">#89966</a>.</p>",
        "id": 257866420,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634423063
    }
]