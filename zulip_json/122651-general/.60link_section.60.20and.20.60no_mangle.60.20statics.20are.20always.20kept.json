[
    {
        "content": "<p>When using both <code>link_section</code> and <code>no_mangle</code> on a static, the value is always kept in the final binary no matter if it's used or not. It even survives LTO. This also happens with <code>link_section</code> and <code>export_name</code>. Using these attributes individually works fine, it's only when together they become un-removable.</p>\n<p>Is this expected behaviour? Or a known bug?</p>",
        "id": 217897543,
        "sender_full_name": "Chris Denton",
        "timestamp": 1606317518
    },
    {
        "content": "<p><del>Does it get removed without <code>link_section</code> in your particular case?</del> nvmd</p>",
        "id": 217929158,
        "sender_full_name": "nagisa",
        "timestamp": 1606332811
    },
    {
        "content": "<p>Yeah, sorry if that wasn't clear. English can be a bit ambiguous sometimes. And titles have a word limit.</p>",
        "id": 217932541,
        "sender_full_name": "Chris Denton",
        "timestamp": 1606334597
    },
    {
        "content": "<p>My thinking so far is:</p>\n<p><code>no_mangle</code> stops Rust from removing a symbol. That's not so bad because the linker can clean up unused symbols.</p>\n<p><code>link_section</code> will stop the linker from removing it. That's not so bad because Rust can notice when something is never actually used before giving anything to the linker.</p>\n<p>But when you add both attributes then both Rust and the linker are prevented from removing it. </p>\n<p>Does this sound about right to anyone or am I talking nonsense here?</p>",
        "id": 217932559,
        "sender_full_name": "Chris Denton",
        "timestamp": 1606334604
    },
    {
        "content": "<p>The linker has a <code>--gc-sections</code> flag,  which should delete unused sections</p>",
        "id": 217937243,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606337174
    },
    {
        "content": "<p>I'm not sure if rust passes that by default</p>",
        "id": 217937286,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606337189
    },
    {
        "content": "<p>or if the linker is still considering that section used</p>",
        "id": 217937298,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606337199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/.60link_section.60.20and.20.60no_mangle.60.20statics.20are.20always.20kept/near/217937286\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if rust passes that by default</p>\n</blockquote>\n<p>it does.</p>",
        "id": 217950355,
        "sender_full_name": "nagisa",
        "timestamp": 1606346383
    },
    {
        "content": "<p>The reason I asked about <code>no_mangle</code> is because at some point there was a bunch of chatter about <code>#[no_mangle]</code> and <code>#[export_name]</code> implying that the symbol becomes public despite its visibility at crate root (through traditional Rust visibility control means).</p>",
        "id": 217950473,
        "sender_full_name": "nagisa",
        "timestamp": 1606346470
    },
    {
        "content": "<p>If that were to happen, then adding <code>#[no_mangle]</code> symbols couldn't be removed ever, except when its being exported from a binary output (rather than a library)</p>",
        "id": 217950498,
        "sender_full_name": "nagisa",
        "timestamp": 1606346519
    }
]