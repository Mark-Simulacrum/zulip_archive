[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> design doc drafted. :-)</p>",
        "id": 178305385,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571243314
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@alexreg/rustc-repl-modifications-design-doc\" target=\"_blank\" title=\"https://hackmd.io/@alexreg/rustc-repl-modifications-design-doc\">https://hackmd.io/@alexreg/rustc-repl-modifications-design-doc</a></p>",
        "id": 178305386,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571243314
    },
    {
        "content": "<p>written it in the first person, because I thought that made sense.</p>",
        "id": 178305402,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571243331
    },
    {
        "content": "<p>hopefully it has a lot of the sort of stuff you wanted anyway.</p>",
        "id": 178305410,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571243341
    },
    {
        "content": "<p>(you should be able to comment or edit BTW)</p>",
        "id": 178305711,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571243548
    },
    {
        "content": "<p>Perhaps submit this as a <a href=\"https://rust-lang.github.io/compiler-team/procedures/steering-meeting/#adding-a-proposal\" target=\"_blank\" title=\"https://rust-lang.github.io/compiler-team/procedures/steering-meeting/#adding-a-proposal\">design meeting proposal</a> for discussion?</p>",
        "id": 178306212,
        "sender_full_name": "davidtwco",
        "timestamp": 1571243964
    },
    {
        "content": "<p>Fair point, which we considered, though <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> and I chatted last week, and the current idea is to basically FCP this and only do a design meeting if there are substantial issues. :-)</p>",
        "id": 178319103,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571252685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'll create a \"to do\" item to review this in more depth -- first person seems fine though!</p>",
        "id": 178319350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252880
    },
    {
        "content": "<p>hmm, skimmed briefly</p>",
        "id": 178319420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252920
    },
    {
        "content": "<p>whta I think I'd like to see a bit of is</p>",
        "id": 178319421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252923
    },
    {
        "content": "<p>what you think the \"big picture\" is</p>",
        "id": 178319430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252930
    },
    {
        "content": "<p>like, maybe walk through how the repl would work ?</p>",
        "id": 178319434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252936
    },
    {
        "content": "<p>I am imagining something like this:</p>",
        "id": 178319451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252956
    },
    {
        "content": "<ul>\n<li>the repl can create a Session -- this same Session will be used repeatedly (true? I don't know)</li>\n</ul>",
        "id": 178319466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252972
    },
    {
        "content": "<ul>\n<li>user types first bit of code. we compile it and run it (or something)</li>\n</ul>",
        "id": 178319477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252981
    },
    {
        "content": "<ul>\n<li>user types more code -- what do we do now? we need to use these pre-parsed user body options and other things, but I don't quite know how that is meant to fit together</li>\n</ul>",
        "id": 178319539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571253006
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 178319554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571253028
    },
    {
        "content": "<p>ah right</p>",
        "id": 178319566,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571253057
    },
    {
        "content": "<p>so you want more about the mechanics of the actual REPL (even if that's outside rustc), eh? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 178319584,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571253077
    },
    {
        "content": "<p>yeah -- I mean I don't want to know too many details, but I want to get the \"forest\" and not just the \"trees\"</p>",
        "id": 178319812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571253275
    },
    {
        "content": "<p>that would help to understand <em>why</em> the changes are needed, not just <em>what</em> they are</p>",
        "id": 178319860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571253333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well the second section talks about the actual changes and why they're needed, to be fair.</p>",
        "id": 178320329,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571253686
    },
    {
        "content": "<p>but I can definitely appreciate wanting a higher-level picture too</p>",
        "id": 178320335,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571253694
    },
    {
        "content": "<p>so I'll add a section before that, and ping you again when it's done</p>",
        "id": 178320345,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571253705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (and others)... updated the doc with a general overview of how the REPL works. hope that helps.</p>",
        "id": 178336651,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571268537
    },
    {
        "content": "<p>feel free to edit it or leave notes now!</p>",
        "id": 178336653,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571268542
    },
    {
        "content": "<p>or just ask me questions, and we can update it together.</p>",
        "id": 178336662,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571268552
    },
    {
        "content": "<p>Maybe it's a stupid question, but how will external crates fit in the story?</p>",
        "id": 178356442,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571296611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> Not stupid at all. Basically because it’s built on miri, the capabilities will be there to use external crates without much extra work... but I haven’t explicitly added support for it yet.</p>",
        "id": 178401425,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571332313
    },
    {
        "content": "<p>But you mention a fs cache for incremental compilation. Would that be used for external crates too? I wish we had a per-user build cache (: (in cargo, not only for the REPL)</p>",
        "id": 178401511,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571332363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> Incr. comp. already uses the FS right now. I'm providing an alternative for REPL use (at least mainly).</p>",
        "id": 178404640,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571334646
    },
    {
        "content": "<p>Got it, but is it a good idea? What if I <code>extern crate serde;</code> in the REPL, will all of it get cached to RAM? Or is extern crate support in the REPL very far away?</p>",
        "id": 178404817,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571334748
    },
    {
        "content": "<p>It's not there yet, but not super far away. It would get cached in RAM though at present, yes.</p>",
        "id": 178404855,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571334792
    },
    {
        "content": "<p>a per-user build cache would be useful yes. have you talked with others about it?</p>",
        "id": 178404907,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571334829
    },
    {
        "content": "<p>No, but it's a long-standing request, I think, e.g. <a href=\"https://github.com/rust-lang/cargo/issues/5931\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/issues/5931\">https://github.com/rust-lang/cargo/issues/5931</a></p>",
        "id": 178404984,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571334862
    },
    {
        "content": "<p>it kind-of already exists for things that are cargo-installed</p>",
        "id": 178405072,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571334924
    },
    {
        "content": "<p>so that would \"just\" need to be extended</p>",
        "id": 178405086,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571334935
    },
    {
        "content": "<p>also, ideally when it comes to incr. comp., we could allow for separate \"backends\" (on-disk vs. in-memory) for the local crate and extern crates.</p>",
        "id": 178405223,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571335024
    },
    {
        "content": "<p>but that's not a big concern right now</p>",
        "id": 178405231,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571335031
    },
    {
        "content": "<p>Oh course, it's just something to think about before shipping it</p>",
        "id": 178405284,
        "sender_full_name": "Laurențiu",
        "timestamp": 1571335081
    },
    {
        "content": "<p>it's very much a WIP</p>",
        "id": 178406562,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571335960
    },
    {
        "content": "<p>so there's no \"shipping\" per se. only an alpha release.</p>",
        "id": 178406583,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571335974
    },
    {
        "content": "<p>which will hopefully come in the next month</p>",
        "id": 178406589,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571335981
    },
    {
        "content": "<p>just needs the rustc bits integrated now</p>",
        "id": 178406599,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571335989
    },
    {
        "content": "<p>I can't wait to try it out :)</p>",
        "id": 178453281,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571386889
    },
    {
        "content": "<p>is this thread the discussion for PR <a href=\"https://github.com/rust-lang/rust/issues/64648\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64648\">#64648</a>?</p>",
        "id": 178455922,
        "sender_full_name": "DPC",
        "timestamp": 1571389432
    },
    {
        "content": "<p>Side note regarding REPLs: based on some discussions at a past RustConf, I think there are ways to improve type inference specifically for a REPL, to handle cases that would otherwise require early type signatures.</p>",
        "id": 178458410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1571391490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> yep and future PRs too, which I can create when everything gets approved.</p>",
        "id": 178482107,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571410869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Quite possibly yes. I suspect we’ll get around discuss this after the initial release.</p>",
        "id": 178482227,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571410937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Let me know when you’ve had time to review things.</p>",
        "id": 178669955,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571673861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> btw, I'm skimming the doc now in between making breakfast :) the new section helps a lot, thanks</p>",
        "id": 178938574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571912763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Cool, glad to hear.</p>",
        "id": 178956844,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571926921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> got one point I want to discuss about that design doc, but apart from that, would like to FCP it soon really</p>",
        "id": 179058398,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572016335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry to bother you again... got a few mins today?</p>",
        "id": 179254142,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572283523
    },
    {
        "content": "<p>There's an issue on the compiler-team repo now, for anyone following: <a href=\"https://github.com/rust-lang/compiler-team/issues/213\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/213\">https://github.com/rust-lang/compiler-team/issues/213</a></p>",
        "id": 179699106,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572694924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> Hm, so I expected a few more of the bullets to be non-essential</p>",
        "id": 180162012,
        "sender_full_name": "simulacrum",
        "timestamp": 1573152586
    },
    {
        "content": "<p>in particular e.g. \"Added an interface for injecting a pre-parsed “user body” into the parsing pipeline. \"</p>",
        "id": 180162026,
        "sender_full_name": "simulacrum",
        "timestamp": 1573152592
    },
    {
        "content": "<p>since that's presumably nothing more than a performance optimization?</p>",
        "id": 180162063,
        "sender_full_name": "simulacrum",
        "timestamp": 1573152606
    },
    {
        "content": "<p>I can't imagine parsing being that slow...</p>",
        "id": 180162106,
        "sender_full_name": "simulacrum",
        "timestamp": 1573152613
    },
    {
        "content": "<p>No, it’s necessary.</p>",
        "id": 180170274,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573157221
    },
    {
        "content": "<p>So that the user body be injected at the right point.</p>",
        "id": 180170295,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573157242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 180174851,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573160087
    },
    {
        "content": "<p>Hm</p>",
        "id": 180175270,
        "sender_full_name": "simulacrum",
        "timestamp": 1573160394
    },
    {
        "content": "<p>But you don't need the preparsing logic</p>",
        "id": 180175345,
        "sender_full_name": "simulacrum",
        "timestamp": 1573160408
    },
    {
        "content": "<p>Right?</p>",
        "id": 180175372,
        "sender_full_name": "simulacrum",
        "timestamp": 1573160414
    },
    {
        "content": "<p>Like, you are already modifying the AST to insert the attribute</p>",
        "id": 180175399,
        "sender_full_name": "simulacrum",
        "timestamp": 1573160439
    },
    {
        "content": "<p>Why can't you... insert the body instead?</p>",
        "id": 180175429,
        "sender_full_name": "simulacrum",
        "timestamp": 1573160462
    },
    {
        "content": "<p>Or, I guess, to clarify, you'd still perhaps pre parse - but the compiler wouldn't need to know</p>",
        "id": 180176228,
        "sender_full_name": "simulacrum",
        "timestamp": 1573160967
    },
    {
        "content": "<p>Huh?</p>",
        "id": 180181435,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164316
    },
    {
        "content": "<p>Well...</p>",
        "id": 180181446,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164326
    },
    {
        "content": "<p>well, possibly</p>",
        "id": 180181467,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164348
    },
    {
        "content": "<p>there would still need to be some sort of small change to the parser though</p>",
        "id": 180181518,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164365
    },
    {
        "content": "<p>to allow 'hooks'</p>",
        "id": 180181523,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164368
    },
    {
        "content": "<p>Hm, I would expect you could grab the ast::Crate (I assume you have a custom driver?) and modify that</p>",
        "id": 180181559,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164393
    },
    {
        "content": "<p>yes I used to do that</p>",
        "id": 180181566,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164400
    },
    {
        "content": "<p>but it's ugly as hell. you have to effectively \"hard code\" the path in the AST to the user fn body</p>",
        "id": 180181590,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164422
    },
    {
        "content": "<p>you can't use a <code>Visitor</code>, because that's non-mutable</p>",
        "id": 180181609,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164435
    },
    {
        "content": "<p>hm, we definitely have a way to modify the AST</p>",
        "id": 180181617,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164442
    },
    {
        "content": "<p><a href=\"https://github.com/Mark-Simulacrum/rust/blob/stage0-step/src/libsyntax/mut_visit.rs\" target=\"_blank\" title=\"https://github.com/Mark-Simulacrum/rust/blob/stage0-step/src/libsyntax/mut_visit.rs\">https://github.com/Mark-Simulacrum/rust/blob/stage0-step/src/libsyntax/mut_visit.rs</a></p>",
        "id": 180181660,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164482
    },
    {
        "content": "<p>yes but it's either a) in a local fashion, b) via <code>MutVisitor</code> which can't be used here (I tried and it just doesn't fit the bill)</p>",
        "id": 180181701,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164486
    },
    {
        "content": "<p>er, ignore the branch</p>",
        "id": 180181702,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164487
    },
    {
        "content": "<p>yeah that has a weird API, that works around \"mapping\"</p>",
        "id": 180181730,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164503
    },
    {
        "content": "<p>rather than in-place modification</p>",
        "id": 180181738,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164507
    },
    {
        "content": "<p>not quite what we want</p>",
        "id": 180181748,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164516
    },
    {
        "content": "<p>well, you don't really care, in theory?</p>",
        "id": 180181758,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164522
    },
    {
        "content": "<p>maybe I should take a look at your repo or something</p>",
        "id": 180181773,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164538
    },
    {
        "content": "<p>I feel like I'm surprised by decisions you've made and there's probably good reasons I'm just not seeing :)</p>",
        "id": 180181805,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> basically I played around with a lot of these things, and the obvious choices were just not feasible (or had a major performance hit).</p>",
        "id": 180181948,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164633
    },
    {
        "content": "<p>so that's pretty surprising to me, to be honest, just because e.g. Serde does this \"item insertion\" and such all the time</p>",
        "id": 180182030,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the best I could envisage here is pre-parsing the whole thing, but adding a <code>macro_hook</code> fn field to the <code>Parser</code> struct or such, so that when pre-parsing is done, this hook is used (but rustc itself doesn't use any hooks).</p>",
        "id": 180182031,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573164678
    },
    {
        "content": "<p>anyway, would you be opposed to me trying to put up a PR or two or so?</p>",
        "id": 180182053,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164696
    },
    {
        "content": "<p>ah, I guess you've not published it yet</p>",
        "id": 180182147,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164736
    },
    {
        "content": "<p>I'd be happy to spend some time trying to realize my thoughts are not going to work, plus I'd love to play around with it a bit :)</p>",
        "id": 180182199,
        "sender_full_name": "simulacrum",
        "timestamp": 1573164778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> of course not :-)</p>",
        "id": 180185740,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573167115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> not put up the REPL yet, no, though my rustc fork is up (see the PR you reviewed, initial comment)</p>",
        "id": 180185805,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573167144
    },
    {
        "content": "<p>yeah I suspect the REPL repo would be more helpful</p>",
        "id": 180185819,
        "sender_full_name": "simulacrum",
        "timestamp": 1573167166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I haven't compiled it against my rustc build for a while now... it should still work in theory. have a start whenever you like, and I'll see what I can sort out with that soon.</p>",
        "id": 180186558,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573167767
    },
    {
        "content": "<p>(feel free to ping/remind me)</p>",
        "id": 180186561,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573167771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> Can you share the repo with me in some way? I don't think I see anything in email</p>",
        "id": 180187546,
        "sender_full_name": "simulacrum",
        "timestamp": 1573168646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Okay, pushed to GH and invited you.</p>",
        "id": 180187777,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573168833
    },
    {
        "content": "<p>Thanks! Will take a look soon.</p>",
        "id": 180187796,
        "sender_full_name": "simulacrum",
        "timestamp": 1573168850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Note that it's missing the UI still (just has some dummy input \"lines\" or eval sessions, but it should be very straightforward)</p>",
        "id": 180187813,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573168866
    },
    {
        "content": "<p>adding the UI on top of this is a routine job, though will take a bit of time. :-) nothing to worry about regardlss.</p>",
        "id": 180187833,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573168896
    },
    {
        "content": "<p>sure</p>",
        "id": 180187836,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573168897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Let me know if you have any questions BTW</p>",
        "id": 180242419,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573228441
    },
    {
        "content": "<p>Okay -- I spent some time trying to figure out what all is going on, though wasn't able to get super far as compiling either of the two isn't quite easy (i.e., the rustc branch seems to not be quite in sync with the repl repo) -- and neither seems to be up to date with \"latest rustc.\"</p>\n<p>From what I can tell without compiling, though, I think I'm better understanding the primitives that you want to add, though I'm not yet quite clear on how they all fit together....</p>\n<p>It does feel like before we move forward on review into landing PRs into the compiler it'd be good to make sure what we land is actually good enough to support the REPL. But I personally feel somewhat more on board to make this happen then I did before looking at the components.</p>",
        "id": 180369181,
        "sender_full_name": "simulacrum",
        "timestamp": 1573402213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> one other thought I had -- it'd be great to put up all the modifications you want to land (basically what's necessary to compile the repl) and <code>bors try</code> it such that at least people developing on linux can avoid the rustc rebuild to try and hack on the REPL</p>",
        "id": 180375881,
        "sender_full_name": "simulacrum",
        "timestamp": 1573413628
    },
    {
        "content": "<p>It also looks like the REPL repository is a \"fork\" of miri right now -- is that actually necessary? Or could we use miri as a library successfully as well?</p>",
        "id": 180375888,
        "sender_full_name": "simulacrum",
        "timestamp": 1573413663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> it should be in sync I believe with the REPL repo, unless I made some very minor edits... I forget. It's trivial to remedy in any case I think.</p>",
        "id": 180384939,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426498
    },
    {
        "content": "<p>Anyway glad you understand it better.</p>",
        "id": 180384940,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426502
    },
    {
        "content": "<p>hm, maybe I started fixing before I compiled or something, I'll try and take another look (rebasing would be good anyway, I presume)</p>",
        "id": 180384953,
        "sender_full_name": "simulacrum",
        "timestamp": 1573426534
    },
    {
        "content": "<p>Already rebased the rustc changes several times though, only going to do it again to open new PRs when we're ready :-P</p>",
        "id": 180384954,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426538
    },
    {
        "content": "<p>and yes it's a fork of miri right now</p>",
        "id": 180384956,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426554
    },
    {
        "content": "<p>can't quite be used as a library unfortunately</p>",
        "id": 180384958,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426559
    },
    {
        "content": "<p>because I change the Miri \"machine\" usd.</p>",
        "id": 180384998,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426567
    },
    {
        "content": "<p>also, I add a new intrinsic</p>",
        "id": 180384999,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426571
    },
    {
        "content": "<p>but modulo those two things, I think it's basically the same base</p>",
        "id": 180385002,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426581
    },
    {
        "content": "<p>eventually it would be nice to add support to miri for those extensions</p>",
        "id": 180385005,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426591
    },
    {
        "content": "<p>should be relatively minor</p>",
        "id": 180385007,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426594
    },
    {
        "content": "<p>but no need to do it right now</p>",
        "id": 180385008,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426597
    },
    {
        "content": "<p>makes sense -- was hopeful that miri'd be flexible enough to allow that as a library, but makes sense :)</p>",
        "id": 180385010,
        "sender_full_name": "simulacrum",
        "timestamp": 1573426601
    },
    {
        "content": "<p>yep, it's not far away at least</p>",
        "id": 180385080,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426743
    },
    {
        "content": "<p>and I think Ralf &amp; Oli would be okay with these minor changes to make it usable as a lib once they see a RPEL released</p>",
        "id": 180385089,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426763
    },
    {
        "content": "<p>REPL, even</p>",
        "id": 180385090,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573426767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway I hope you can appreciate the design and implementation 80% or 90% without building (as it seems you can), but if you want to try getting it built, go for it... shouldn't be hard at all like I said, but if you're unsure about anything, ask me here.</p>",
        "id": 180385273,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573427070
    },
    {
        "content": "<p>sure, thanks!</p>",
        "id": 180385281,
        "sender_full_name": "simulacrum",
        "timestamp": 1573427108
    },
    {
        "content": "<p>it does still feel like it goes a bit too far (e.g., I find the integration into incremental unexpected, it seems like a more ad-hoc system would be fine) but it doesn't seem like a wrong approach either</p>",
        "id": 180385330,
        "sender_full_name": "simulacrum",
        "timestamp": 1573427168
    },
    {
        "content": "<p>It's a neater, cleaner approach, and I think the one we want medium-term at the very least. :-)</p>",
        "id": 180385628,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573427790
    },
    {
        "content": "<p>Without it, I think we'd be creating more work for ourselves (especially me) in the long-run.</p>",
        "id": 180385629,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573427806
    },
    {
        "content": "<p>Miri has to serialise all its memory anyway, which uses something very similar to incr. comp. (or crate metadata to a lesser extent). The same mechanisms.</p>",
        "id": 180385688,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573427954
    },
    {
        "content": "<p>s/Miri[/the REPL</p>",
        "id": 180471923,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573518895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Any update? :-)</p>",
        "id": 180624252,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573651145
    },
    {
        "content": "<p>I have not spent any more time this week I'm afraid</p>",
        "id": 180624270,
        "sender_full_name": "simulacrum",
        "timestamp": 1573651165
    },
    {
        "content": "<p>have been pretty busy</p>",
        "id": 180624276,
        "sender_full_name": "simulacrum",
        "timestamp": 1573651169
    },
    {
        "content": "<p>To be honest I'm not sure that I have much work left either, so not sure that there's anything necessarily waiting on me</p>",
        "id": 180624534,
        "sender_full_name": "simulacrum",
        "timestamp": 1573651377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> no prob. And yes, sounds fair. I can update the bit in the design dic about the parsing infrastructure... but then hopefully we can just FCP?</p>",
        "id": 180633156,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573656680
    },
    {
        "content": "<p>Uh, okay. I'm not sure - probably makes sense to get buy-in from e.g. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> or <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and only then FCP..</p>",
        "id": 180633659,
        "sender_full_name": "simulacrum",
        "timestamp": 1573656975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yes, from one of them, ideally Niko. we can't launch FCPs anyway, as just contributors...</p>",
        "id": 180673416,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573679625
    },
    {
        "content": "<p>But I appreciate your thoughts &amp; informal reviewing!</p>",
        "id": 180673489,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573679648
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> -- haven't forgotten about this, but I have only limited bandwidth available for technical review on the compiler. This is definitely part of the reason that the design meetings exist, to try and parcel that bandwidth out in a structured way. Right now I'm trying to prioritize looking at the trait upcasting branch, for example, and other traits work. But I'll take another look at your revised proposal and try to share some thoughts.</p>",
        "id": 180833834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573826279
    },
    {
        "content": "<p>PS, if <a href=\"https://github.com/rust-lang/compiler-team/issues/213\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/213\">https://github.com/rust-lang/compiler-team/issues/213</a> is meant to be a meeting proposal, is there a reason you didn't use the template?</p>",
        "id": 180833911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573826308
    },
    {
        "content": "<p>I guess it doesn't matter, but it doesn't have the appropriate label, at minimum :)</p>",
        "id": 180833917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573826317
    },
    {
        "content": "<p>let me fix that</p>",
        "id": 180833921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573826319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ah no, it wasn't. I thought the idea was just to do a design doc and FCP that, and only have a meeting if there are major objections? So as not to delay it (even)more. :-)</p>",
        "id": 180847987,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573835194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Anyway fair enough. I appreciate the time you've given me on trait upcasting, and yes, let's prioritise this! If you can give me any thoughts, that  would be great, thanks.</p>",
        "id": 180848018,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573835236
    },
    {
        "content": "<p>And while my personal time bandwidth is greater, I need to be honest that my mental exhaustion from having this drag on so long (let me emphasise, I'm definitely <em>not</em> blaming you or anyone else for this!) means this is getting a bit difficult for me now. But I'll see what I can do.</p>",
        "id": 180848118,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573835318
    }
]