[
    {
        "content": "<p>Is there any way to get docs that include a token from a <code>macro_rules!</code> input?</p>\n<p>Essentially I want something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[doc = </span><span class=\"s\">\"See [`Diagnostic::\"</span><span class=\"cp\"> + stringify!($n) + </span><span class=\"s\">\"()`].\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that gives the syntax error:</p>\n<div class=\"codehilite\"><pre><span></span><code> error: expected `]`, found `+`\n   --&gt; compiler/rustc_errors/src/diagnostic_builder.rs:79:38\n    |\n41  | / macro_rules! forward {\n42  | |     // Forward pattern for &amp;self -&gt; &amp;Self\n43  | |     (\n44  | |         $(#[$attrs:meta])*\n...   |\n79  | |         #[doc = &quot;See [`Diagnostic::&quot; + stringify!($n) + &quot;()`].&quot;]\n    | |                                      ^ expected `]`\n...   |\n84  | |     };\n85  | | }\n    | |_- in this expansion of `forward!`\n</code></pre></div>\n<p>I also tried:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![doc = concat!(</span><span class=\"s\">\"See [`Diagnostic::\"</span><span class=\"cp\">, stringify!(foo), </span><span class=\"s\">\"()`].\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>on the playground, but that gives:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: unexpected token: `concat`\n --&gt; src/lib.rs:1:10\n  |\n1 | #![doc = concat!(&quot;See [`Diagnostic::&quot;, stringify!(foo), &quot;()`].&quot;)]\n  |          ^^^^^^\n</code></pre></div>",
        "id": 220038628,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608064563
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/80046\">#80046</a></p>",
        "id": 220038638,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608064568
    },
    {
        "content": "<p>Something like this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[doc = $e]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"See [`Diagnostic::\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stringify</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"()`].\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220040309,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608065340
    },
    {
        "content": "<p>Hmm, so I have to create another macro inside my macro?</p>",
        "id": 220041056,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608065702
    },
    {
        "content": "<p>Actually I don't think that will solve my problem.</p>",
        "id": 220041242,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608065794
    },
    {
        "content": "<p>The macro I'm working with is from <code>compiler/rustc_errors</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">forward</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Forward pattern for &amp;self -&gt; &amp;Self</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(#[$attrs:meta]</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"cp\">$n</span>:<span class=\"nc\">ident</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($name</span>:<span class=\"nc\">ident</span>: <span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(#[$attrs]</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[doc = </span><span class=\"s\">\"See [`Diagnostic::\"</span><span class=\"cp\"> + stringify!($n) + </span><span class=\"s\">\"()`].\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"cp\">$n</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($name</span>: <span class=\"cp\">$ty</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">diagnostic</span><span class=\"p\">.</span><span class=\"cp\">$n</span><span class=\"p\">(</span><span class=\"cp\">$($name</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Forward pattern for &amp;mut self -&gt; &amp;mut Self</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(#[$attrs:meta]</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"cp\">$n</span>:<span class=\"nc\">ident</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($name</span>:<span class=\"nc\">ident</span>: <span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(#[$attrs]</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[doc = </span><span class=\"s\">\"See [`Diagnostic::\"</span><span class=\"cp\"> + stringify!($n) + </span><span class=\"s\">\"()`].\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"cp\">$n</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($name</span>: <span class=\"cp\">$ty</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">diagnostic</span><span class=\"p\">.</span><span class=\"cp\">$n</span><span class=\"p\">(</span><span class=\"cp\">$($name</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Forward pattern for &amp;mut self -&gt; &amp;mut Self, with S: Into&lt;MultiSpan&gt;</span>\n<span class=\"w\">    </span><span class=\"c1\">// type parameter. No obvious way to make this more generic.</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(#[$attrs:meta]</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"cp\">$n</span>:<span class=\"nc\">ident</span><span class=\"o\">&lt;</span><span class=\"n\">S</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">MultiSpan</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$($name</span>:<span class=\"nc\">ident</span>: <span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(#[$attrs]</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[doc = </span><span class=\"s\">\"See [`Diagnostic::\"</span><span class=\"cp\"> + stringify!($n) + </span><span class=\"s\">\"()`].\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"cp\">$n</span><span class=\"o\">&lt;</span><span class=\"n\">S</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">MultiSpan</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($name</span>: <span class=\"cp\">$ty</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">diagnostic</span><span class=\"p\">.</span><span class=\"cp\">$n</span><span class=\"p\">(</span><span class=\"cp\">$($name</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220041369,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608065871
    },
    {
        "content": "<p>And I want it to automatically add that documentation based on the function name. Is there no way to do it automatically?</p>",
        "id": 220041435,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608065896
    },
    {
        "content": "<p>You can't pass it through this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cp\">$i</span>:<span class=\"nc\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[doc = $e]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$i</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220041999,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608066185
    },
    {
        "content": "<p>Hmm, maybe that <em>will</em> work! I'll try it and let you know.</p>",
        "id": 220042221,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608066293
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 220046032,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1608068120
    },
    {
        "content": "<p>I tried it, and rustdoc succeeded, but the docs didn't show up in the output.</p>",
        "id": 220047878,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608069150
    },
    {
        "content": "<p>Actually those docs might have been stale...</p>",
        "id": 220048007,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608069229
    },
    {
        "content": "<blockquote>\n<p>#![doc = concat!(\"See [<code>Diagnostic::\", stringify!(foo), \"()</code>].\")]</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> I would expect that to work unchanged on the next beta bump: <a href=\"https://github.com/rust-lang/rust/issues/78835\">https://github.com/rust-lang/rust/issues/78835</a></p>",
        "id": 220051691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608071055
    },
    {
        "content": "<p>try on nightly instead of beta?</p>",
        "id": 220051716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608071069
    },
    {
        "content": "<p>This is for compiler docs and it failed on CI so I guess it'll have to wait for the beta bump. For now I'm using <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span>'s macro hack to make it work.</p>",
        "id": 220053427,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608071903
    }
]