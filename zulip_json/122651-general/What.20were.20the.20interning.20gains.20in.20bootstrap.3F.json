[
    {
        "content": "<p>The bootstrap tool makes heavy use of string interning and has a global string pool. What kinds of benefits did we get from going from non-interning to interning for this specific tool?</p>\n<p>/cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 203655823,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594579886
    },
    {
        "content": "<p>Another way to put that question would be: Does the bootstrap tool do enough work that optimizations are worth it?</p>",
        "id": 203656209,
        "sender_full_name": "bjorn3",
        "timestamp": 1594580486
    },
    {
        "content": "<p>It's not about optimization, just ease of use of Copy vs cloning things. But I would hope that there's more details in the commit introducing it - I forget if I wrote that up.</p>",
        "id": 203656429,
        "sender_full_name": "simulacrum",
        "timestamp": 1594580764
    },
    {
        "content": "<p>We don't even compile bootstrap with optimizations enabled IIRC</p>",
        "id": 203656434,
        "sender_full_name": "simulacrum",
        "timestamp": 1594580782
    },
    {
        "content": "<p>heh I've done similar things, although not globally (always with contexts)</p>",
        "id": 203660537,
        "sender_full_name": "eddyb",
        "timestamp": 1594587207
    },
    {
        "content": "<p>kind of wish interning arbitrary data was easier, it's <em>so</em> useful, and IMO higher-level languages should do it by default (possibly in a way in which they can do GC? so like a <code>WeakMap</code> of sorts?)</p>",
        "id": 203660598,
        "sender_full_name": "eddyb",
        "timestamp": 1594587267
    },
    {
        "content": "<p>(really getting off-topic here, but has anyone heard of any language, even a toy one, that interns everything?)</p>",
        "id": 203660615,
        "sender_full_name": "eddyb",
        "timestamp": 1594587304
    },
    {
        "content": "<p>/me has had ideas around those lines for very domain-specific designs but hasn't had the time to implement any</p>",
        "id": 203660626,
        "sender_full_name": "eddyb",
        "timestamp": 1594587335
    },
    {
        "content": "<p>Yeah I think contexts make sense for anything that has a possiblity of caring about memory usage - bootstrap interns usually like 10 things per run I suspect so really not worth the hassle of pulling a context around (mostly into e.g. serde deserialization)</p>",
        "id": 203661099,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588023
    },
    {
        "content": "<blockquote>\n<p>It's not about optimization, just ease of use of Copy </p>\n</blockquote>\n<p>I had a feeling, which is why I used the broadly-applicable \"gains\" ;-)</p>",
        "id": 203661111,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588051
    },
    {
        "content": "<p>Why not just <code>String::leak</code> everything?</p>",
        "id": 203661161,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588085
    },
    {
        "content": "<p>And why doesn't <code>String::leak</code> actually exist.</p>",
        "id": 203661169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588104
    },
    {
        "content": "<p>We could, yeah, that'd be fine by me personally if someone wanted to post a PR doing so, though we'd still want to retain the HashMaps that track what we've already interned I suspect</p>",
        "id": 203661240,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588208
    },
    {
        "content": "<p>(it's also somewhat true that &amp;'static str is a pain to write)</p>",
        "id": 203661247,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588239
    },
    {
        "content": "<p>The current solution is of course not better in that respect</p>",
        "id": 203661257,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588274
    },
    {
        "content": "<blockquote>\n<p>track what we've already interned I suspect</p>\n</blockquote>\n<p>for bootstrap; why?</p>",
        "id": 203661319,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I'm not sure -- we'd have to look -- if we call the interner in too many places it could begin to start using more memory than I'm comfortable with</p>",
        "id": 203661385,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588444
    },
    {
        "content": "<p><code>String::leak</code> goes through <code>Box</code>: <code>String -&gt; Box&lt;str&gt; -&gt; &amp;'static mut str</code></p>",
        "id": 203661388,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1594588459
    },
    {
        "content": "<p>but realistically probably doesn't matter</p>",
        "id": 203661389,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588463
    },
    {
        "content": "<p>we currently have an unstable <code>fn Vec::leak</code>, so it's probably just that noone cared enough to open a PR yet</p>",
        "id": 203661482,
        "sender_full_name": "lcnr",
        "timestamp": 1594588564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I was just going by \"bootstrap interns usually like 10 things per run\" ;-)</p>",
        "id": 203661511,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> too long wouldn't type</p>",
        "id": 203661520,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> well 10 things but maybe 10,000 times, I don't know :)</p>",
        "id": 203661770,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589031
    },
    {
        "content": "<p>I wonder how well e.g. the <code>string_cache</code> crate would work here (I don't actually know how each and all of the crates work etc.)</p>",
        "id": 203661843,
        "sender_full_name": "eddyb",
        "timestamp": 1594589133
    },
    {
        "content": "<p>That wasn't actually supposed to be against it, more an endorsement since it's already possible :)</p>",
        "id": 203661911,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1594589192
    },
    {
        "content": "<p>we probably don't want another dependency</p>",
        "id": 203662031,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589384
    },
    {
        "content": "<p>heh</p>",
        "id": 203662973,
        "sender_full_name": "eddyb",
        "timestamp": 1594590920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does <code>bootstrap</code> have threads? is the interner truly global, or just thread-local? and if it's not thread-local, have you tried it? I guess it can't change much heh</p>",
        "id": 203663029,
        "sender_full_name": "eddyb",
        "timestamp": 1594590966
    },
    {
        "content": "<p>global has the advantage that you can use <code>&amp;'static str</code> inside your interned string and deref to str</p>",
        "id": 203663042,
        "sender_full_name": "eddyb",
        "timestamp": 1594590998
    },
    {
        "content": "<p>no threads</p>",
        "id": 203663043,
        "sender_full_name": "simulacrum",
        "timestamp": 1594591002
    },
    {
        "content": "<p>I think we do just deref to that</p>",
        "id": 203663044,
        "sender_full_name": "simulacrum",
        "timestamp": 1594591008
    },
    {
        "content": "<p>fair</p>",
        "id": 203663046,
        "sender_full_name": "eddyb",
        "timestamp": 1594591012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does <code>bootstrap</code> need to compile without nightly features?</p>",
        "id": 203665973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594596071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(drain_filter)]</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I guess not</p>",
        "id": 203665976,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594596088
    },
    {
        "content": "<p>I would like it to, generally speaking</p>",
        "id": 203666038,
        "sender_full_name": "simulacrum",
        "timestamp": 1594596162
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(hash_raw_entry)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">once_cell</span>::<span class=\"n\">sync</span>::<span class=\"n\">Lazy</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 1.4.0</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sync</span>::<span class=\"n\">Mutex</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">STRINGS</span>: <span class=\"nc\">Lazy</span><span class=\"o\">&lt;</span><span class=\"n\">Mutex</span><span class=\"o\">&lt;</span><span class=\"n\">HashMap</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Lazy</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">intern</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nc\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">S</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">STRINGS</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;Pool poisoned&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">raw_entry_mut</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">from_key</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">or_insert_with</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">leak</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">().</span><span class=\"n\">into_boxed_str</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">k</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203666187,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594596422
    },
    {
        "content": "<p>But it's so pretty</p>",
        "id": 203666193,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594596427
    },
    {
        "content": "<p>But we always compile it with beta so it shouldn't be a problem in theory for it to be built with nightly features</p>",
        "id": 203666201,
        "sender_full_name": "simulacrum",
        "timestamp": 1594596445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> sadly you lose O(1) comparison - but maybe that's not needed here</p>",
        "id": 203667543,
        "sender_full_name": "eddyb",
        "timestamp": 1594598854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> why is it lost? (<a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7c6e8954128c003cd827adfc68379d9c\">Playground if you want to demo something</a>)</p>",
        "id": 203667594,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594598914
    },
    {
        "content": "<p>because you're not wrapping it in a type that compares e.g. address instead of contents</p>",
        "id": 203667598,
        "sender_full_name": "eddyb",
        "timestamp": 1594598936
    },
    {
        "content": "<p>Doesn't <code>PartialEq</code> for str / slice start with an address comparison?</p>",
        "id": 203667608,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594598961
    },
    {
        "content": "<p>even if it does, it can't assume that address != implies contents !=</p>",
        "id": 203667618,
        "sender_full_name": "eddyb",
        "timestamp": 1594598982
    },
    {
        "content": "<p>which the main reason compilers use interning (for strings, anyway, other things have less useful implications from !=)</p>",
        "id": 203667619,
        "sender_full_name": "eddyb",
        "timestamp": 1594598992
    },
    {
        "content": "<p>I'm pretty sure it starts with <code>if (my.len == other.len &amp;&amp; my.data == other.data)</code></p>",
        "id": 203667666,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599045
    },
    {
        "content": "<p>that's == not !=</p>",
        "id": 203667668,
        "sender_full_name": "eddyb",
        "timestamp": 1594599052
    },
    {
        "content": "<p>if the address differs, it has to look at the contents</p>",
        "id": 203667670,
        "sender_full_name": "eddyb",
        "timestamp": 1594599060
    },
    {
        "content": "<p>if you used a wrapper, you need 0 data accesses to the contents</p>",
        "id": 203667677,
        "sender_full_name": "eddyb",
        "timestamp": 1594599069
    },
    {
        "content": "<p>ever</p>",
        "id": 203667678,
        "sender_full_name": "eddyb",
        "timestamp": 1594599072
    },
    {
        "content": "<p>it would <em>only</em> compare the address</p>",
        "id": 203667679,
        "sender_full_name": "eddyb",
        "timestamp": 1594599086
    },
    {
        "content": "<p>Oh, you are saying losing O(1) when they aren't equal</p>",
        "id": 203667680,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599090
    },
    {
        "content": "<p>(not even the length, really :P)</p>",
        "id": 203667681,
        "sender_full_name": "eddyb",
        "timestamp": 1594599092
    },
    {
        "content": "<p>cause it's still O(1) when they are equal</p>",
        "id": 203667684,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599106
    },
    {
        "content": "<p>well, yeah, sometimes you'll compare things which aren't equal :P</p>",
        "id": 203667685,
        "sender_full_name": "eddyb",
        "timestamp": 1594599107
    },
    {
        "content": "<p>well, you just said \"lose\"</p>",
        "id": 203667718,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599123
    },
    {
        "content": "<p>comparison is not O(1) unless it's <em>always</em> O(1)</p>",
        "id": 203667727,
        "sender_full_name": "eddyb",
        "timestamp": 1594599139
    },
    {
        "content": "<p>having a fast path is not related to O(1) outside of amortization</p>",
        "id": 203667729,
        "sender_full_name": "eddyb",
        "timestamp": 1594599154
    },
    {
        "content": "<p>similarly, empty strings are O(1) to compare, but that doesn't really say anything about comparing strings in general, it's just an edge case</p>",
        "id": 203667742,
        "sender_full_name": "eddyb",
        "timestamp": 1594599193
    },
    {
        "content": "<p>yes yes</p>",
        "id": 203667753,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599228
    },
    {
        "content": "<p>You are correct. I apologize.</p>",
        "id": 203667792,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599245
    },
    {
        "content": "<p>I should apologize for the random pedantry :P</p>",
        "id": 203667795,
        "sender_full_name": "eddyb",
        "timestamp": 1594599260
    },
    {
        "content": "<p>No, it's very important to be correct when discussing things.</p>",
        "id": 203667800,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599277
    },
    {
        "content": "<p>anyway I wanted to say that it probably doesn't matter for bootstrap, and being able to combine string literals and interning matters more</p>",
        "id": 203667801,
        "sender_full_name": "eddyb",
        "timestamp": 1594599281
    },
    {
        "content": "<p>concept: <code>iformat!(...)</code> that expands to <code>intern(format!(...))</code></p>",
        "id": 203667808,
        "sender_full_name": "eddyb",
        "timestamp": 1594599301
    },
    {
        "content": "<p>or <code>intern!(...)</code></p>",
        "id": 203667819,
        "sender_full_name": "eddyb",
        "timestamp": 1594599314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> oh a neat trick for interning, which <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I believe added to rustc a while back, is to use something like a \"small vec\" to collect an iterator into (or in this case, a \"small str\" to format into), avoiding needing to do any heap allocations in the common case, before hitting the cache</p>",
        "id": 203667888,
        "sender_full_name": "eddyb",
        "timestamp": 1594599434
    },
    {
        "content": "<p>if you get a cache miss, you then arena-allocate/leak the contents whichever way you prefer, but for cache hits, it's kind of \"free\"</p>",
        "id": 203667944,
        "sender_full_name": "eddyb",
        "timestamp": 1594599489
    },
    {
        "content": "<p>(not really because of various overheads, but it tends to be cheaper than having to allocate)</p>",
        "id": 203667950,
        "sender_full_name": "eddyb",
        "timestamp": 1594599507
    },
    {
        "content": "<p>I'm not following where the iterator is coming from; is this specifically in relation to the combined interning / formatting?</p>",
        "id": 203668019,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594599611
    },
    {
        "content": "<p>yeah the iterator is specifically from the interned equivalent of a <code>Vec&lt;T&gt;</code></p>",
        "id": 203668029,
        "sender_full_name": "eddyb",
        "timestamp": 1594599635
    },
    {
        "content": "<p>whereas here you have a <code>String</code></p>",
        "id": 203668031,
        "sender_full_name": "eddyb",
        "timestamp": 1594599642
    },
    {
        "content": "<p>also applies if you have a constant (e.g. a string literal), but if you're not wrapping it, there's no reason to intern constants</p>",
        "id": 203668048,
        "sender_full_name": "eddyb",
        "timestamp": 1594599680
    }
]