[
    {
        "content": "<p>I am going to do research on HIR and MIR, but I can't find any direct syntax description on these languages, like the datatype or function definition.  <br>\nDoes  anyone got some documents about the syntax of HIR and MIR?</p>",
        "id": 222967614,
        "sender_full_name": "jilin",
        "timestamp": 1610783462
    },
    {
        "content": "<p>HIR and MIR don't have an actual syntax. They are just internal datatstructures. For HIR you should take a look at <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Crate.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Crate.html</a>. For MIR you should take a look at <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html</a>. Note that HIR is only for the current crate and not for dependencies. MIR is only for function bodies; potentially from other crates.</p>",
        "id": 222971171,
        "sender_full_name": "bjorn3",
        "timestamp": 1610788851
    },
    {
        "content": "<p>HIR and MIR might not have <em>concrete</em> syntax, but they are certainly descriptions of a syntax that could be described by an abstract data structure like an AST. I too am curious about this question; something like an on-paper description of the syntax in abstracted style would be ideal, but somehow I doubt that such a thing currently exists</p>",
        "id": 222971545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610789454
    },
    {
        "content": "<p>Unfortunately the rustc data structures are not exactly optimized for readability, and the dev guide mostly just tells you that HIR is a thing and points to the docs</p>",
        "id": 222971606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610789558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> what do you mean by \"descriptions of a syntax\"? Like they describe an theoretical subset of Rust, sort of like Core in Haskell?</p>",
        "id": 222984964,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610808310
    },
    {
        "content": "<p>Yes</p>",
        "id": 222984976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610808328
    },
    {
        "content": "<p>I think this would be a great project btw, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> has wanted something like this for a while</p>",
        "id": 222984978,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610808331
    },
    {
        "content": "<p>Like I can imagine the rules being written in a paper somewhere, except that it would probably bust the page limit of most venues</p>",
        "id": 222984994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610808361
    },
    {
        "content": "<p>-Z unpretty=hir is sort of close but not general and not formal</p>",
        "id": 222985040,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610808374
    },
    {
        "content": "<p>Is it even a subset? My impression was that it's just a more elaborated version of rust concrete syntax</p>",
        "id": 222985148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610808490
    },
    {
        "content": "<p>It doesn't include things like <code>async</code> and <code>if</code> I think, those are removed in rustc_hir_lowering</p>",
        "id": 222985178,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610808543
    },
    {
        "content": "<p>But also it is not <em>exactly</em> an AST because I think it uses indexes a lot, so you can get into cycles if you try hard enough</p>",
        "id": 222985211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610808598
    },
    {
        "content": "<p>I've seen Haskell talks by Simon Peyton-Jones before where he makes a big deal about how surprisingly small the Core language is. I guess the \"minimal core\" analogue in Rust is MIR, but what makes haskell different in that it can desugar down to a small subset before typechecking?</p>",
        "id": 222985281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610808648
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I don't think anyone has done a comparison</p>",
        "id": 222985311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610808696
    },
    {
        "content": "<p>I thought haskell desugars after typechecking and does typechecking on the full user facing syntax.</p>",
        "id": 222987730,
        "sender_full_name": "bjorn3",
        "timestamp": 1610811179
    },
    {
        "content": "<p>That's right, GHC type checks on the front-end AST, not Core.</p>",
        "id": 222994357,
        "sender_full_name": "osa1",
        "timestamp": 1610818409
    },
    {
        "content": "<p>And MIR is also not a subset of Rust because it has constructs that don't exist in Rust, e.g. <code>goto</code>.</p>",
        "id": 223002839,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610827509
    }
]