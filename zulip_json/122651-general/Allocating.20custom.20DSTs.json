[
    {
        "content": "<p>What's the current recommended way of allocating DSTs like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">a</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">b</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">c</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">make_foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">]})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Last I checked, there was basically no way to do this without unsafe code, and even with unsafe code you had to guess at offsets and so on. Has this changed at all since custom DSTs were introduced? I'm porting some C code that uses these kinds of trailing arrays and I'm not sure what the most robust Rust analogue is.</p>",
        "id": 224214244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611767695
    },
    {
        "content": "<p>We don't have custom DSTs yet.</p>",
        "id": 224214436,
        "sender_full_name": "bjorn3",
        "timestamp": 1611767764
    },
    {
        "content": "<p>You can to it safely via coercion if you have <code>struct Foo&lt;T: ?Sized&gt;</code> instead of a fixed <code>[u32]</code> field</p>",
        "id": 224214438,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611767765
    },
    {
        "content": "<p>That coercion requires a certain unstable trait to be implemented. (<code>CoerceUnsized</code>?)</p>",
        "id": 224214519,
        "sender_full_name": "bjorn3",
        "timestamp": 1611767804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> That only works if <code>n</code> is a constant, right?</p>",
        "id": 224214530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611767807
    },
    {
        "content": "<p>or at least is a constant in all uses</p>",
        "id": 224214549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611767818
    },
    {
        "content": "<p>I think so</p>",
        "id": 224214612,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611767851
    },
    {
        "content": "<p>I don't mind using unsafe code here, I just want to not use footgunny code</p>",
        "id": 224214670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611767878
    },
    {
        "content": "<p>I suspect there is a way to use <code>Layout</code> to achieve this, not sure if the relevant tools are stable though</p>",
        "id": 224214786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611767921
    },
    {
        "content": "<p>In particular, how do I set up all the other fields, <code>a</code> and <code>b</code> here? I guess I need a layout for the header, then <code>layout.pad_to_align()?.extend(Layout::array::&lt;T&gt;(n)?)?</code> should do the trick, but I'm not sure how to get the header layout safely</p>",
        "id": 224215285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611768141
    },
    {
        "content": "<p>Unless you use <code>#[repr]</code>, you cannot rely on the precise field layout</p>",
        "id": 224215375,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611768181
    },
    {
        "content": "<p>I thought there would be a chapter in the nomicon or something for this but docs seem to be scant</p>",
        "id": 224215403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611768194
    },
    {
        "content": "<p>Right <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> , that's the footgunny part. I'm hoping that <code>Layout</code> will let me do this even for <code>repr(Rust)</code></p>",
        "id": 224215626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611768287
    },
    {
        "content": "<p>Is it really that unusable? I thought there was <em>some</em> point in adding the syntax</p>",
        "id": 224216105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611768465
    },
    {
        "content": "<p>DSTs will always be the last field, so there's some math you can do. Iirc if you like at some custom smart pointer crates you'll probably see it.</p>",
        "id": 224246466,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1611781211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I wrote a lengthy post about it in the forums, showcasing both the pattern to support coercions and thus stack allocations, and how to do it with a manual heap allocation: <a href=\"https://users.rust-lang.org/t/rust-wrapper-around-c-flexible-array/52605/2?u=yandros\">https://users.rust-lang.org/t/rust-wrapper-around-c-flexible-array/52605/2?u=yandros</a></p>",
        "id": 224382790,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1611863296
    },
    {
        "content": "<blockquote>\n<p>I'm hoping that Layout will let me do this even for repr(Rust)</p>\n</blockquote>\n<p>Probably not since each generic instantiation could in principle have a different order for the other fields, even if the dynamic part always comes last.</p>",
        "id": 224545539,
        "sender_full_name": "The 8472",
        "timestamp": 1611959933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> In theory, if we have native support for custom DSTs, they don't <em>have</em> to be the last field, as long as you don't mind it being more expensive to get at later fields.</p>",
        "id": 224904119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612286236
    },
    {
        "content": "<p>And as long as you can compute the length of each field using only the fields before it.</p>",
        "id": 224904210,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612286273
    },
    {
        "content": "<p>That would make <code>offset_of!</code> impossible for such type.</p>",
        "id": 224905646,
        "sender_full_name": "bjorn3",
        "timestamp": 1612286796
    }
]