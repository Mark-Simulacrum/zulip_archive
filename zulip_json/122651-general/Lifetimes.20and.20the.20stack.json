[
    {
        "content": "<p>Is it possible to make the following work?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Empty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">d</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hi {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"bye {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">recurse</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"bye {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Empty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">recurse</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214675584,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1603790280
    },
    {
        "content": "<p>You can remove all the <code>mut</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Empty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">d</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hi {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"bye {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">recurse</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"bye {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Empty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">recurse</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>since this makes <code>Node</code> covariant</p>",
        "id": 214676280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603790709
    },
    {
        "content": "<p>using <code>mut</code> your example does not work because <code>let mut list = Node::Cons(1, n);</code> means that <code>list</code> does not live for <code>'a</code></p>",
        "id": 214676322,
        "sender_full_name": "lcnr",
        "timestamp": 1603790742
    },
    {
        "content": "<p>Here's a version that compiles, using <a href=\"https://crates.io/crates/typed-arena\"><code>typed-arena</code></a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">typed_arena</span>::<span class=\"n\">Arena</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Empty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arena</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Arena</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hi {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"bye {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">Node</span>::<span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">recurse</span><span class=\"p\">(</span><span class=\"n\">arena</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"bye {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arena</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"n\">Empty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">Node</span>::<span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">recurse</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arena</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214677384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603791439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/Lifetimes.20and.20the.20stack/near/214676322\">said</a>:</p>\n<blockquote>\n<p>using <code>mut</code> your example does not work because <code>let mut list = Node::Cons(1, n);</code> means that <code>list</code> does not live for <code>'a</code></p>\n</blockquote>\n<p>Why is that?</p>",
        "id": 214682518,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1603794940
    },
    {
        "content": "<p>so recurse expects <code>n</code> to be a mutable reference with lt <code>'a</code> to a <code>Node</code> which contains an <code>'a</code>. These two <code>'a</code> have to be the same</p>",
        "id": 214694493,
        "sender_full_name": "lcnr",
        "timestamp": 1603803236
    },
    {
        "content": "<p>as you however create the <code>list</code> on the stack is has only lives for some <code>'0</code></p>",
        "id": 214694617,
        "sender_full_name": "lcnr",
        "timestamp": 1603803307
    },
    {
        "content": "<p>this <code>'0</code> is not equal to <code>'a</code> however, as <code>'a</code> comes from outside of the function</p>",
        "id": 214694637,
        "sender_full_name": "lcnr",
        "timestamp": 1603803324
    },
    {
        "content": "<p>so you then try to call <code>recurse</code> with <code>&amp;'0 mut Node&lt;'a&gt;</code> which is results in an error as <code>'0 != 'a</code></p>",
        "id": 214694731,
        "sender_full_name": "lcnr",
        "timestamp": 1603803375
    },
    {
        "content": "<p>Ok, though I guess it just seems weird that it works for shared references, since those would have a similar issue?</p>",
        "id": 214746222,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1603824527
    },
    {
        "content": "<p>I think it has something to do with variance?</p>",
        "id": 214747598,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603825152
    },
    {
        "content": "<p>personally I never really understood that section <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\">https://doc.rust-lang.org/nomicon/subtyping.html#variance</a></p>",
        "id": 214747650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603825175
    },
    {
        "content": "<p>It's not too hard to see why the original version is actually unsound: the variable <code>n</code> in <code>recurse</code> refers to a bunch of nodes up the stack, so you could traverse down the list, replace a node in the middle with something in the current stack frame, and then when you exit the scope this gets dropped and your node has a dangling reference in it</p>",
        "id": 214748961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603825715
    },
    {
        "content": "<p>For shared references, you have read-only access, so it's safe to shrink the lifetime, but when you have mutable references a shorter lifetime means you can also put shorter lifetime things in the reference</p>",
        "id": 214749452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603825918
    },
    {
        "content": "<p>^ what <span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> said.</p>\n<p>it is fine to shrink the lifetime of immutable references, so you can use <code>&amp;'static T</code> where <code>&amp;'a T</code> is expected.<br>\nFor mutable references this is however not possible, as you could otherwise do the following: <code>&amp;'static mut T -&gt; &amp;'a mut T</code>,  replace <code>T</code> with a <code>T</code> which only lives for <code>'a</code>. When you now access the original <code>&amp;'static mut T</code> afterwards you access freed memory</p>",
        "id": 214750353,
        "sender_full_name": "lcnr",
        "timestamp": 1603826371
    },
    {
        "content": "<p>I think <code>&amp;'static mut T -&gt; &amp;'a mut T</code> is fine by variance, but <code>&amp;'static mut T&lt;'static&gt; -&gt; &amp;'a mut T&lt;'a&gt;</code> is not</p>",
        "id": 214761736,
        "sender_full_name": "cuviper",
        "timestamp": 1603831481
    },
    {
        "content": "<p><code>&amp;'a mut T</code> is covariant in <code>'a</code> but invariant in <code>T</code></p>",
        "id": 214761775,
        "sender_full_name": "cuviper",
        "timestamp": 1603831500
    },
    {
        "content": "<p>so where that gets in trouble is having a double reference, like <code>&amp;mut &amp;mut T</code>, and you try to change what the caller's reference is pointing to</p>",
        "id": 214762207,
        "sender_full_name": "cuviper",
        "timestamp": 1603831697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Lifetimes.20and.20the.20stack/near/214747650\">said</a>:</p>\n<blockquote>\n<p>personally I never really understood that section <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\">https://doc.rust-lang.org/nomicon/subtyping.html#variance</a></p>\n</blockquote>\n<p>I've written several posts on URLO to try and \"teach\" that notion, feel free to tell me which one is the most useful one to you:</p>\n<ul>\n<li>Shortest one: <a href=\"https://users.rust-lang.org/t/totally-confused-by-the-rule-of-lifetime-and-variance/36984/5\">https://users.rust-lang.org/t/totally-confused-by-the-rule-of-lifetime-and-variance/36984/5</a></li>\n<li>A bit longer: <a href=\"https://users.rust-lang.org/t/refcell-confuses-the-compiler-well-mostly-me/46078/3\">https://users.rust-lang.org/t/refcell-confuses-the-compiler-well-mostly-me/46078/3</a></li>\n<li>A counter-example: <a href=\"https://users.rust-lang.org/t/what-a-phantom-do/36655/11\">https://users.rust-lang.org/t/what-a-phantom-do/36655/11</a></li>\n<li>Another explanation, more contravariance focused: <a href=\"https://users.rust-lang.org/t/function-with-a-generic-type-as-a-callback/34867/6\">https://users.rust-lang.org/t/function-with-a-generic-type-as-a-callback/34867/6</a></li>\n<li>And the main one: <code>PhantomData</code> usages, including variance: <a href=\"https://users.rust-lang.org/t/looking-for-a-deeper-understanding-of-phantomdata/32477/4\">https://users.rust-lang.org/t/looking-for-a-deeper-understanding-of-phantomdata/32477/4</a></li>\n</ul>\n<hr>\n<p>The super TL,DR, being that:</p>\n<ul>\n<li>covariance represents the capacity to shrink the lifetime parameters inside a generic type (and contravariance is the \"inverse\", the capacity of growing it, which basically only happens if the lifetime parameter was appearing as the input parameter of a function).</li>\n</ul>\n<p>And the practical rules that follow, which are surprisingly simple:</p>\n<ul>\n<li>\n<p>When in doubt, be invariant: this conservative choice is always sound;</p>\n</li>\n<li>\n<p>If something is immutable, then it can be covariant. \"That's why\" type <code>f&lt;X&gt; = &amp;'_ X</code> is covariant.</p>\n</li>\n<li>\n<p>If the thing is owned, then covariance is fine too, even if immutability is no longer guaranteed (<code>X</code>, <code>Box&lt;X&gt;</code>, <code>ARc&lt;X&gt;</code>, etc.).</p>\n</li>\n<li>\n<p>When something is mutable but not owned (such as <code>&amp;'_ mut X</code>), then it is invariant (covariance would be unsound).</p>\n</li>\n<li>\n<p>This leads to the awkward situation of the shared mutability wrappers, such as <code>UnsafeCell</code>, <code>Cell</code>, <code>RefCell</code>, <code>Mutex</code>, <code>RwLock</code>. These, by value, are owned, so covariance would be fine.</p>\n<p>But if they were covariant and <code>&amp;'_ X</code> was covariant too, by composition <code>&amp;'_ Cell&lt;X&gt;</code>, etc. would be covariant too, which is unsound, since these are mutable non-owning types.</p>\n<p>So the choice was made that mutability wrappers be invariant, even when owned.</p>\n</li>\n</ul>",
        "id": 214770169,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603836154
    },
    {
        "content": "<p>Without reading through all these, is there any reason this elaboration shouldn't be partially \"upstreamed\" into the nomicon?</p>",
        "id": 214774162,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603838698
    },
    {
        "content": "<p>Thanks, this makes sense.</p>",
        "id": 214799523,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1603866072
    }
]