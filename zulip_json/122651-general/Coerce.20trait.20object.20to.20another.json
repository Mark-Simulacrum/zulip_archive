[
    {
        "content": "<p>Is there a simple way to coerce one trait object to another? e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">];</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 182343314,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575292504
    },
    {
        "content": "<p>you only have one trait object here?</p>",
        "id": 182343456,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292606
    },
    {
        "content": "<p>yes</p>",
        "id": 182343522,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575292675
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>works</p>",
        "id": 182343571,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575292695
    },
    {
        "content": "<p>so I don't really understand what you're asking</p>",
        "id": 182343572,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292695
    },
    {
        "content": "<p>the <code>as &amp;[_]</code> isn't doing anything there</p>",
        "id": 182343583,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292709
    },
    {
        "content": "<p>(indeed I'm somewhat surprised that compiles)</p>",
        "id": 182343592,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292723
    },
    {
        "content": "<p><code>let v: &amp;dyn std::fmt::Debug = &amp;[0, 2, 3];</code> just works</p>",
        "id": 182343596,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292727
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=15d52f7f88a06a34c752da1a55fbbae8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=15d52f7f88a06a34c752da1a55fbbae8\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=15d52f7f88a06a34c752da1a55fbbae8</a></p>",
        "id": 182343735,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575292813
    },
    {
        "content": "<p>The <code>&amp;[_]</code> coerces a <code>&amp;[T; N]</code> into a <code>&amp;[T]</code></p>",
        "id": 182343766,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575292835
    },
    {
        "content": "<p>hm, right</p>",
        "id": 182343857,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292885
    },
    {
        "content": "<p>yeah, you can't do this</p>",
        "id": 182343864,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292890
    },
    {
        "content": "<p>since we can't inherit from a vtable</p>",
        "id": 182343871,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292896
    },
    {
        "content": "<p>what do you mean with \"inherit\" ?</p>",
        "id": 182343899,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575292920
    },
    {
        "content": "<p>Slices do implement <code>Debug</code> right ?</p>",
        "id": 182343952,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575292932
    },
    {
        "content": "<p>well, okay, I should say that differently</p>",
        "id": 182343961,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292940
    },
    {
        "content": "<p>basically <code>&amp;[T]</code> is not sized, so <code>&amp;dyn fmt::Debug</code> has nowhere to 'put' the pointer to <code>self</code></p>",
        "id": 182344006,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292968
    },
    {
        "content": "<p>(since trait objects are always 2 ptrs today)</p>",
        "id": 182344023,
        "sender_full_name": "simulacrum",
        "timestamp": 1575292983
    },
    {
        "content": "<p>where is the vtable of <code>&lt;&amp;[T] as Debug&gt;</code> ?</p>",
        "id": 182344067,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293026
    },
    {
        "content": "<p>ahh i think i see the problem</p>",
        "id": 182344153,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293073
    },
    {
        "content": "<p>where? The vtable exists and you can do that</p>",
        "id": 182344160,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293076
    },
    {
        "content": "<p>but you can't \"fit\" it into <code>&amp;dyn fmt::Debug</code></p>",
        "id": 182344171,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293087
    },
    {
        "content": "<p>So we can point the vtable pointer of <code>dyn fm::Debug</code> to the vtable</p>",
        "id": 182344179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293097
    },
    {
        "content": "<p>yes, that works (and is indeed always the case)</p>",
        "id": 182344206,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293112
    },
    {
        "content": "<p>the problem is the self pointer</p>",
        "id": 182344209,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293117
    },
    {
        "content": "<p>damn,</p>",
        "id": 182344218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293122
    },
    {
        "content": "<p>but then you only have one pointer left for the self pointer, and you need two</p>",
        "id": 182344222,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293124
    },
    {
        "content": "<p>but if you need to do this and the lifetimes work out, <code>let _x: &amp;dyn std::fmt::Debug = &a;</code> would work</p>",
        "id": 182344237,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293133
    },
    {
        "content": "<p>one needs two because &amp;[T] is a fat pointer, not a thin one</p>",
        "id": 182344250,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293149
    },
    {
        "content": "<p>e.g. if <code>&amp;[T]</code> was a thin pointer to <code>[len, padding, [elements: T, T, T, ...]]</code></p>",
        "id": 182344309,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293172
    },
    {
        "content": "<p>it would work</p>",
        "id": 182344321,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293179
    },
    {
        "content": "<p>but then you can't have subslices</p>",
        "id": 182344329,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293186
    },
    {
        "content": "<p>correct</p>",
        "id": 182344387,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293209
    },
    {
        "content": "<p>damn</p>",
        "id": 182344399,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293220
    },
    {
        "content": "<p>there is no good solution to this</p>",
        "id": 182344417,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293234
    },
    {
        "content": "<p>well, I mean, it depends on your use case</p>",
        "id": 182344424,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293244
    },
    {
        "content": "<p>you can manually make the bigger vtable</p>",
        "id": 182344432,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293255
    },
    {
        "content": "<p>So I have a big array, that doesn't have a Debug impl</p>",
        "id": 182344440,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293263
    },
    {
        "content": "<p>I need to pass it to an API that takes <code>&amp;dyn Debug</code></p>",
        "id": 182344447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293271
    },
    {
        "content": "<p>and I thought I could be smarter by just coercing it to a slice</p>",
        "id": 182344459,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293280
    },
    {
        "content": "<p>oh that you can definitely do</p>",
        "id": 182344499,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293284
    },
    {
        "content": "<p>just do &amp;&amp;[...]`</p>",
        "id": 182344511,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293289
    },
    {
        "content": "<p>because <code>&amp;&amp;[u32]</code> is not fat</p>",
        "id": 182344525,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> does that work for you?</p>",
        "id": 182344604,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293388
    },
    {
        "content": "<p>yeah</p>",
        "id": 182344611,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293398
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"p\">[..];</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182344697,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293422
    },
    {
        "content": "<p>that works</p>",
        "id": 182344699,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293423
    },
    {
        "content": "<p>note that the type there is <code>&amp;'a (dyn Debug + 'b)</code> I believe, not <code>+ 'static</code> like normally</p>",
        "id": 182344719,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293446
    },
    {
        "content": "<p>but for the most part you probably don't care</p>",
        "id": 182344771,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293472
    },
    {
        "content": "<p>Is there an impl of Debug for &amp;T where T: Debug ?</p>",
        "id": 182344788,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293483
    },
    {
        "content": "<p>or how does that work internally ?</p>",
        "id": 182344797,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293491
    },
    {
        "content": "<p>hm, perhaps?</p>",
        "id": 182344800,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293493
    },
    {
        "content": "<p>rustdoc says yes</p>",
        "id": 182344817,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293512
    },
    {
        "content": "<p>and for &amp;mut T</p>",
        "id": 182344822,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293514
    },
    {
        "content": "<p>so that makes sense</p>",
        "id": 182344829,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293519
    },
    {
        "content": "<p>thanks</p>",
        "id": 182344855,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293522
    },
    {
        "content": "<p>so i wonder if this works, why can't the initial coercion work ?</p>",
        "id": 182344905,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293541
    },
    {
        "content": "<p>like the pointer to self would be a pointer to the slice object</p>",
        "id": 182344929,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293553
    },
    {
        "content": "<p>because we don't double coerce or so</p>",
        "id": 182344991,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293587
    },
    {
        "content": "<p>i.e., you've not given that pointer, so we won't make it ourselves</p>",
        "id": 182345011,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293606
    },
    {
        "content": "<p>but we do that when creating a slice</p>",
        "id": 182345023,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293615
    },
    {
        "content": "<p>hm, how so?</p>",
        "id": 182345111,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293647
    },
    {
        "content": "<p>e.g. when doing <code>&amp;[T; N] as &amp;[T]</code> we create the slice trait object, with a pointer, and a length - notice that the length did not exist in memory anywhere, since is part of the type</p>",
        "id": 182345133,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293667
    },
    {
        "content": "<p>the length is the vtable bit though</p>",
        "id": 182345153,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293679
    },
    {
        "content": "<p>which is always synthesized out of \"nowhere\"</p>",
        "id": 182345170,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293689
    },
    {
        "content": "<p>the pointer is \"constant\"</p>",
        "id": 182345181,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293698
    },
    {
        "content": "<p>ah, wait, by double-coerce you mean that we don't create pointers out of nowhere ?</p>",
        "id": 182345257,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293741
    },
    {
        "content": "<p>e.g. for <code>&amp;[T; N] as &amp;[T] as &amp;dyn Debug</code> we'd need to create a pointer to the <code>&amp;[T]</code> and coerce that pointer to <code>&amp;dyn Debug</code></p>",
        "id": 182345325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293772
    },
    {
        "content": "<p>yes</p>",
        "id": 182345356,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293800
    },
    {
        "content": "<p>so this works: <code>&amp;(&amp;[T; N] as &amp;[T]) as &amp;dyn Debug</code> because we don't have to create any pointers for that</p>",
        "id": 182345359,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293801
    },
    {
        "content": "<p>(the user created it)</p>",
        "id": 182345373,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293807
    },
    {
        "content": "<p>that's my understanding, yeah</p>",
        "id": 182345378,
        "sender_full_name": "simulacrum",
        "timestamp": 1575293811
    },
    {
        "content": "<p>thanks, i think i've got this</p>",
        "id": 182345389,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575293822
    },
    {
        "content": "<blockquote>\n<p>basically <code>&amp;[T]</code> is not sized, so <code>&amp;dyn fmt::Debug</code> has nowhere to 'put' the pointer to <code>self</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> did you mean <code>[T]</code> is not sized? I used to think <code>&amp;[T]</code>is sized, am I wrong? <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 182377424,
        "sender_full_name": "csmoe",
        "timestamp": 1575313147
    },
    {
        "content": "<p>er, s/sized/thin</p>",
        "id": 182377448,
        "sender_full_name": "simulacrum",
        "timestamp": 1575313162
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>works</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  I was very surprised that it should work and when <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=192b9de62b5db577a762b5d3cc4994a5\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=192b9de62b5db577a762b5d3cc4994a5\">I tried it didn't</a>... is there a typo here?</p>",
        "id": 182460664,
        "sender_full_name": "RalfJ",
        "timestamp": 1575387432
    },
    {
        "content": "<p>I think so</p>",
        "id": 182460866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575387521
    },
    {
        "content": "<p>I might have had a typo in my playground, this works: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e830ca21ef05fcccba30958d2da231bb\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e830ca21ef05fcccba30958d2da231bb\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e830ca21ef05fcccba30958d2da231bb</a></p>",
        "id": 182460913,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575387548
    },
    {
        "content": "<p>but that works due to the <code>Debug</code> impl for small arrays</p>",
        "id": 182460968,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575387590
    },
    {
        "content": "<p>this doesn't work: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fa83c860d4092b312eb0e2af615cc1b1\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fa83c860d4092b312eb0e2af615cc1b1\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fa83c860d4092b312eb0e2af615cc1b1</a></p>",
        "id": 182461052,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575387614
    }
]