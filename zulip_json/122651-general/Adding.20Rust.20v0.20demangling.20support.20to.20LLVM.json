[
    {
        "content": "<p>Hi! <span class=\"user-mention\" data-user-id=\"130111\">@anp</span> and I work on Rust and Fuchsia. We're hoping to get the much better Rust v0 symbol mangling format enabled, but most of the LLVM tooling only demangles C++/Itanium. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> have contributed v0 demangling to gcc/gdb, and maybe we could follow a similar procedure for upstreaming to LLVM?<br>\nOne of our LLVM contributors mentioned they'll be happy to help refactor the code to match LLVM style. Would like to hear your thoughts.</p>",
        "id": 201804436,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1592963025
    },
    {
        "content": "<p>(not sure how i didn't get pinged, alas)</p>",
        "id": 201804956,
        "sender_full_name": "anp",
        "timestamp": 1592963752
    },
    {
        "content": "<p>Oh, did the libiberty patches land? Cool. Would be great to see some movement on this indeed :)</p>",
        "id": 201831229,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592993827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> no, they did not</p>",
        "id": 202039509,
        "sender_full_name": "eddyb",
        "timestamp": 1593129601
    },
    {
        "content": "<p>and that's the main reason I haven't contributed it to anywhere else yet</p>",
        "id": 202039572,
        "sender_full_name": "eddyb",
        "timestamp": 1593129623
    },
    {
        "content": "<p>aww :(</p>",
        "id": 202039656,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593129712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> not sure the style matters, it's sort of designed to plug in as a 1-file mostly-C89 library. there's probably a lot of things that can be cleaned up going from that to e.g. LLVM C++, but it's probably in  the interest of future maintainability to leave it alone</p>",
        "id": 202039726,
        "sender_full_name": "eddyb",
        "timestamp": 1593129756
    },
    {
        "content": "<p>to get the GNU formatting style I used <code>clang-format</code>, and so we could just repeat that for a different style, that should work fine</p>",
        "id": 202039766,
        "sender_full_name": "eddyb",
        "timestamp": 1593129807
    },
    {
        "content": "<p>Hi Eddy, thanks for getting back! Sorry I should've said coding style in the more general sense, besides the parts that could be fixed by a formatter.</p>",
        "id": 202039829,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593129886
    },
    {
        "content": "<p>I'm curious what you have in mind, because, again, I'd rather not have more than 1 C implementation of this</p>",
        "id": 202039857,
        "sender_full_name": "eddyb",
        "timestamp": 1593129918
    },
    {
        "content": "<p>Would you be okay with uploading a patch to the LLVM Phabricator? I can put you into contact with the LLVM devs on our team.</p>",
        "id": 202039935,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593129952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> <span class=\"user-mention\" data-user-id=\"130111\">@anp</span> oh the other thing is the copyright. while I wrote all of the new code, in order to incorporate the \"legacy\" support, I technically refactored the preexisting implementation, which is <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span>'s. not sure what the procedure is for dealing with that</p>",
        "id": 202040006,
        "sender_full_name": "eddyb",
        "timestamp": 1593129972
    },
    {
        "content": "<p>I see, so there's value in keeping it unchanged for ease of future modifications</p>",
        "id": 202040009,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593129975
    },
    {
        "content": "<p>yeah the goal is to mostly copy-paste it, the same way the legacy implementation is pretty much verbatim found in libiberty, linux-perf, valgrind, etc.</p>",
        "id": 202040043,
        "sender_full_name": "eddyb",
        "timestamp": 1593130031
    },
    {
        "content": "<p>as for phabricator: I hate using it, and I don't really have the time to do the integration/testing work right now</p>",
        "id": 202040062,
        "sender_full_name": "eddyb",
        "timestamp": 1593130051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> anyway, what would be great if someone who hacks on LLVM more than I do, would try to hook up my code (<a href=\"https://gist.github.com/eddyb/c41a69378750a433767cf53fe2316768\">https://gist.github.com/eddyb/c41a69378750a433767cf53fe2316768</a>) to LLVM, and talk to me about it (either here or PM)</p>",
        "id": 202040278,
        "sender_full_name": "eddyb",
        "timestamp": 1593130213
    },
    {
        "content": "<p>I wonder if it could be made into a dedicated library, that could be imported into LLVM as a third-party dependency. This way we could avoid all the work to align to the LLVM style/testing IIUC</p>",
        "id": 202040318,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593130267
    },
    {
        "content": "<p>what is a \"library\" in C :)?</p>",
        "id": 202040331,
        "sender_full_name": "eddyb",
        "timestamp": 1593130284
    },
    {
        "content": "<p>if you have an easy way to add a <code>.c</code> + <code>.h</code> pair as a \"contrib\" thing then this could be something offered in multiple licenses that LLVM can just use. but the way it was designed was \"everyone copies from <code>libiberty</code>\" and <code>libiberty</code> can't have \"contrib\" stuff AFAIK so I'm not entirely sure what the best way to do this is</p>",
        "id": 202040478,
        "sender_full_name": "eddyb",
        "timestamp": 1593130433
    },
    {
        "content": "<p>Sure :) it would not be a library library, but as an example, Fuchsia imported musl which is a C library, and basically hooked it into the build system, without refactoring its code</p>",
        "id": 202040481,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593130438
    },
    {
        "content": "<p>I see. Yes, a .c + .h was what I was imagining</p>",
        "id": 202040527,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593130456
    },
    {
        "content": "<p>in case you haven't looked: this is the entire thing <a href=\"https://gist.github.com/eddyb/c41a69378750a433767cf53fe2316768\">https://gist.github.com/eddyb/c41a69378750a433767cf53fe2316768</a></p>",
        "id": 202040541,
        "sender_full_name": "eddyb",
        "timestamp": 1593130477
    },
    {
        "content": "<p><code>test.rs</code> can link against the C code and cross-compare its result with <code>rustc-demangle</code> (the Rust demangler implemented in Rust), for which I have a dataset of about 1 million symbols collected a while ago (from building rustc+Cargo)</p>",
        "id": 202040620,
        "sender_full_name": "eddyb",
        "timestamp": 1593130562
    },
    {
        "content": "<p>I'd hazard a guess that getting dtolnay to agree to relicense it would be easier than figuring out whether you can put LGPL code into LLVM.</p>",
        "id": 202040660,
        "sender_full_name": "alercah",
        "timestamp": 1593130582
    },
    {
        "content": "<p>oh that's definitely what I had in mind</p>",
        "id": 202040673,
        "sender_full_name": "eddyb",
        "timestamp": 1593130595
    },
    {
        "content": "<p>I just don't know if it's as simple as asking <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> or if someone has to dig into the history of the file in libiberty etc.</p>",
        "id": 202040688,
        "sender_full_name": "eddyb",
        "timestamp": 1593130616
    },
    {
        "content": "<p>oh that's just a question of how much risk you're willing to take :P</p>",
        "id": 202040715,
        "sender_full_name": "alercah",
        "timestamp": 1593130669
    },
    {
        "content": "<p>where \"you\" isn't even me, is it :P?</p>",
        "id": 202040769,
        "sender_full_name": "eddyb",
        "timestamp": 1593130699
    },
    {
        "content": "<p>I hope it isn't</p>",
        "id": 202040785,
        "sender_full_name": "alercah",
        "timestamp": 1593130718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> anyway, yeah, if you can find someone to figure out the licensing situation and/or try to use it from LLVM, it'd be great :D</p>",
        "id": 202040996,
        "sender_full_name": "eddyb",
        "timestamp": 1593130889
    },
    {
        "content": "<p>pretty sure Google can figure that out :P</p>",
        "id": 202041072,
        "sender_full_name": "alercah",
        "timestamp": 1593130942
    },
    {
        "content": "<p>I mean in their team or w/e</p>",
        "id": 202041088,
        "sender_full_name": "eddyb",
        "timestamp": 1593130956
    },
    {
        "content": "<p>yeah there's a whole department for stuff like this</p>",
        "id": 202041106,
        "sender_full_name": "alercah",
        "timestamp": 1593130969
    },
    {
        "content": "<p>there's two APIs, <code>const char* -&gt; char*</code> and a callback based one. the callback one could probably be hooked up to anything stream-like (so you could demangle to an ostream, for example). but I don't know off the top of my head what LLVM (or parts of LLVM, I guess) want here</p>",
        "id": 202041131,
        "sender_full_name": "eddyb",
        "timestamp": 1593130997
    },
    {
        "content": "<p>LLVM uses something similar to const char* -&gt; char*, IIUC, and has another mechanism to extract symbols from a stream</p>",
        "id": 202041407,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593131239
    },
    {
        "content": "<p>the latter doesn't seem to be too relevant. to be clear, the callback API is for \"printing on the fly\" - the <code>const char* -&gt; char*</code> API uses the callback API where the callback is string concatenation</p>",
        "id": 202041537,
        "sender_full_name": "eddyb",
        "timestamp": 1593131387
    },
    {
        "content": "<p>(although I guess LLVM might want some kind of predicate for what looks like a Rust symbol name. that's one thing we could provide, I guess)</p>",
        "id": 202041595,
        "sender_full_name": "eddyb",
        "timestamp": 1593131421
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"199555\">@Petr Hosek</span>  who has done lots of LLVM licensing</p>",
        "id": 202041988,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1593131791
    },
    {
        "content": "<p>I can check with relevant people on the LLVM side and find out exactly what's needed.</p>",
        "id": 202042099,
        "sender_full_name": "Petr Hosek",
        "timestamp": 1593131895
    },
    {
        "content": "<p>I got the official response, what we need from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> is to send an email to llvm-dev with the patch and make it clear that you expressly want to relicense it under LLVM license.</p>",
        "id": 202154810,
        "sender_full_name": "Petr Hosek",
        "timestamp": 1593213871
    },
    {
        "content": "<p>Here's an example from the recent history which did the same: <a href=\"http://lists.llvm.org/pipermail/cfe-dev/2020-May/065487.html\">http://lists.llvm.org/pipermail/cfe-dev/2020-May/065487.html</a></p>",
        "id": 202154825,
        "sender_full_name": "Petr Hosek",
        "timestamp": 1593213889
    },
    {
        "content": "<p>ah, great!</p>",
        "id": 202154875,
        "sender_full_name": "eddyb",
        "timestamp": 1593213931
    },
    {
        "content": "<p>Once you do that, we can take the patch and handle the rest.</p>",
        "id": 202154891,
        "sender_full_name": "Petr Hosek",
        "timestamp": 1593213946
    },
    {
        "content": "<p>it kinda sounds like it would be great if the code was already upstream somewhere :P</p>",
        "id": 202154972,
        "sender_full_name": "eddyb",
        "timestamp": 1593213988
    },
    {
        "content": "<p>not gonna lie, I really hate contributing to GCC. and it's only GCC because they keep libiberty's main copy there...</p>",
        "id": 202155002,
        "sender_full_name": "eddyb",
        "timestamp": 1593214014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"199555\">@Petr Hosek</span> btw, something else that would be useful is knowing if this API fits in readily, and if there are parts of the implementation that would not work inside LLVM <a href=\"https://gist.github.com/eddyb/c41a69378750a433767cf53fe2316768#file-demangle-h-L7-L9\">https://gist.github.com/eddyb/c41a69378750a433767cf53fe2316768#file-demangle-h-L7-L9</a></p>",
        "id": 202155140,
        "sender_full_name": "eddyb",
        "timestamp": 1593214125
    },
    {
        "content": "<p>presumably all but two functions being <code>static</code> should absolve them of any requirement of namespacing, right?</p>",
        "id": 202155167,
        "sender_full_name": "eddyb",
        "timestamp": 1593214149
    },
    {
        "content": "<p>and namespacing just those two under <code>llvm::</code> or w/e should also be possible. something I haven't tried is compiling this as C++. I suspect it should work but I could be wrong</p>",
        "id": 202155244,
        "sender_full_name": "eddyb",
        "timestamp": 1593214208
    },
    {
        "content": "<p>I think we'll have to make some changes to  use idiomatic C++, follow LLVM conventions, fit into existing conventions, etc. but I wouldn't worry about that, it's something we can handle.</p>",
        "id": 202155551,
        "sender_full_name": "Petr Hosek",
        "timestamp": 1593214493
    },
    {
        "content": "<p>I'm definitely curious how automated the process is (like I said, I don't have it in me to do GNU style by hand, I was using <code>clang-format</code> for that part), and how big the changes are</p>",
        "id": 202155618,
        "sender_full_name": "eddyb",
        "timestamp": 1593214551
    },
    {
        "content": "<p>if there are significant (but not C++ specific) API changes I'd rather have them propagate everywhere than deal with a second wave of patches</p>",
        "id": 202155705,
        "sender_full_name": "eddyb",
        "timestamp": 1593214594
    },
    {
        "content": "<p>To follow up on this, I cannot promise that future patches can be directly applied  because the changes needed to integrate this functionality cleanly into LLVM can't be done purely by reformatting the code, we'd really want to turn it into an idiomatic C++ and use LLVM's support libraries where possible.</p>",
        "id": 205314358,
        "sender_full_name": "Petr Hosek",
        "timestamp": 1595992388
    },
    {
        "content": "<p>However, I don't expect you to be on the hook for future updates, that's going to be our responsibility.</p>",
        "id": 205314382,
        "sender_full_name": "Petr Hosek",
        "timestamp": 1595992441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  just a friendly follow up, it sounds like the C demangling library would have to be turned into C++/LLVM standard in order to upstream into LLVM, which is probably not exactly a trivial change. But the good news is the LLVM team should be able to take on that and implementing similar future changes you make to the library.</p>\n<p>Would you be okay with emailing a patch to llvm-dev (referring Petr's message above) as-is? I think once discussion starts there the various interface and technical issues could be sorted out. Appreciate it very much :)</p>",
        "id": 207111888,
        "sender_full_name": "Yifei Teng",
        "timestamp": 1597647481
    },
    {
        "content": "<p>ugh I'm not really comfortable with all of that. what is the point? why couldn't LLVM just treat it as an opaque dependency</p>",
        "id": 207119768,
        "sender_full_name": "eddyb",
        "timestamp": 1597654160
    },
    {
        "content": "<p>if you want a C++ version, you're better off converting the Rust implementation instead of the C one</p>",
        "id": 207119797,
        "sender_full_name": "eddyb",
        "timestamp": 1597654191
    },
    {
        "content": "<p>(since the C one works within the limitations of C and libiberty)</p>",
        "id": 207119866,
        "sender_full_name": "eddyb",
        "timestamp": 1597654214
    },
    {
        "content": "<p>although we should figure out the const encoding stuff first :/</p>",
        "id": 207119913,
        "sender_full_name": "eddyb",
        "timestamp": 1597654271
    },
    {
        "content": "<p>not sure if <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and/or I should spend time on that <em>now</em> to avoid dealing with more work later</p>",
        "id": 207119959,
        "sender_full_name": "eddyb",
        "timestamp": 1597654316
    },
    {
        "content": "<p>and also polymorphization might introduce some unforeseen consequences (cc <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>) wrt some assumptions we made with impls</p>",
        "id": 207120026,
        "sender_full_name": "eddyb",
        "timestamp": 1597654339
    },
    {
        "content": "<p>I am spending time on it</p>",
        "id": 207129996,
        "sender_full_name": "oli",
        "timestamp": 1597662276
    },
    {
        "content": "<p>it's just not a trivial conversion to do</p>",
        "id": 207130001,
        "sender_full_name": "oli",
        "timestamp": 1597662288
    },
    {
        "content": "<p>I guess lmk what I should look at/help with</p>",
        "id": 207131420,
        "sender_full_name": "eddyb",
        "timestamp": 1597663298
    },
    {
        "content": "<p>like we have to decide on an encoding and whatnot</p>",
        "id": 207131435,
        "sender_full_name": "eddyb",
        "timestamp": 1597663315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"199555\">@Petr Hosek</span> <span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> if you want a C++ version, can you look at this and let me know what API you want? <a href=\"https://github.com/alexcrichton/rustc-demangle/blob/master/src/v0.rs\">https://github.com/alexcrichton/rustc-demangle/blob/master/src/v0.rs</a></p>",
        "id": 207131642,
        "sender_full_name": "eddyb",
        "timestamp": 1597663451
    },
    {
        "content": "<p>this is similar to an output stream <a href=\"https://github.com/alexcrichton/rustc-demangle/blob/master/src/v0.rs#L552\">https://github.com/alexcrichton/rustc-demangle/blob/master/src/v0.rs#L552</a></p>",
        "id": 207131666,
        "sender_full_name": "eddyb",
        "timestamp": 1597663480
    },
    {
        "content": "<p>so presumably we can do something similar. <em>however</em>, note that this doesn't allow building an AST of any kind</p>",
        "id": 207131679,
        "sender_full_name": "eddyb",
        "timestamp": 1597663496
    },
    {
        "content": "<p>if you want introspection, I need some direction on what that should look like</p>",
        "id": 207131693,
        "sender_full_name": "eddyb",
        "timestamp": 1597663509
    },
    {
        "content": "<p>also, what style of error handling is preferred: the Rust code uses <code>?</code> which could be a macro in C++, while the C code does something cruder with an error flag in the state struct which is checked at the start of functions to skip them</p>",
        "id": 207131803,
        "sender_full_name": "eddyb",
        "timestamp": 1597663598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"199555\">@Petr Hosek</span> <span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> I'll note that it took me less than a day to convert the Rust version into the C one so that's not as much of a problem as the cost of getting the API wrong and having to redo it, or maintaining it, but hopefully the C++ version can be at least as easy as the C one to backport features to, and hopefully it's portable enough for non-LLVM C++ users to be able to reuse it. but maybe not, and AFAIK all other upstreaming targets use C and currently have an old copy of the legacy demangler from libiberty</p>",
        "id": 207131944,
        "sender_full_name": "eddyb",
        "timestamp": 1597663736
    },
    {
        "content": "<p>oh and presumably you'd need a C++ version of this too <a href=\"https://github.com/alexcrichton/rustc-demangle/blob/master/src/legacy.rs\">https://github.com/alexcrichton/rustc-demangle/blob/master/src/legacy.rs</a></p>",
        "id": 207131971,
        "sender_full_name": "eddyb",
        "timestamp": 1597663775
    },
    {
        "content": "<p>but thankfully that's tiny by comparison</p>",
        "id": 207131979,
        "sender_full_name": "eddyb",
        "timestamp": 1597663784
    },
    {
        "content": "<p>good UTF-8 support helps, I had to handcraft codepoint -&gt; UTF-8 encoding in the C version. punycode already somewhere in the codebase would also be neat (but I guess less portable)</p>",
        "id": 207132063,
        "sender_full_name": "eddyb",
        "timestamp": 1597663844
    },
    {
        "content": "<p>oh and make sure this works for you <a href=\"https://github.com/alexcrichton/rustc-demangle#license\">https://github.com/alexcrichton/rustc-demangle#license</a></p>",
        "id": 207132102,
        "sender_full_name": "eddyb",
        "timestamp": 1597663892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"199555\">@Petr Hosek</span> <span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> sorry for not coming to this conclusion earlier, I had no idea C++ was non-negotiable (in which case a conversion from C would be the worse path to take <em>no matter who does it</em> - and you're overestimating the importance of you doing it instead of me). also, please PM me if I don't see a reply here. and I <em>really</em> don't have the bandwidth for using a mailing list, I can barely keep up with all of the other stuff that's ten times easier, so please do not insist on me writing emails</p>",
        "id": 207132291,
        "sender_full_name": "eddyb",
        "timestamp": 1597664060
    },
    {
        "content": "<p>I hope I listed out everything that should be relevant above</p>",
        "id": 207132328,
        "sender_full_name": "eddyb",
        "timestamp": 1597664085
    },
    {
        "content": "<p>although it might not matter until we better figure what we do with constants</p>",
        "id": 207132336,
        "sender_full_name": "eddyb",
        "timestamp": 1597664100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> my plan was to get the pattern PR merged, then extract a const -&gt; valtree conversion from the const -&gt; pat conversion by creating a trivial valtree -&gt; pat conversion. In parallel to that I'm refactoring to split ty::Const and mir::Const</p>",
        "id": 207144798,
        "sender_full_name": "oli",
        "timestamp": 1597671599
    },
    {
        "content": "<p>okay I guess we can block on that</p>",
        "id": 207144934,
        "sender_full_name": "eddyb",
        "timestamp": 1597671650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"199555\">@Petr Hosek</span> <span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span> sorry for not checking in sooner, any updates on the requirements of the C++ version? I would like to be able to tackle that if I get some downtime from other things</p>",
        "id": 207997938,
        "sender_full_name": "eddyb",
        "timestamp": 1598378278
    },
    {
        "content": "<p>the const stuff can be added in later without much effort, so there's not much of a strong dependency there</p>",
        "id": 207998020,
        "sender_full_name": "eddyb",
        "timestamp": 1598378301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I can ping one of  them on this, but I'm not sure what needs to be cleared up.. it sounds like someone needs to write a pure C++ version using LLVM standards</p>",
        "id": 221327344,
        "sender_full_name": "tmandry",
        "timestamp": 1609461837
    },
    {
        "content": "<p>There's a C implementation bundled with perf in the linux source tree that dtolnay wrote a while ago</p>",
        "id": 221327736,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1609462487
    },
    {
        "content": "<p>The problem is, it doesn't sound like LLVM wants a C version</p>",
        "id": 221327803,
        "sender_full_name": "tmandry",
        "timestamp": 1609462567
    },
    {
        "content": "<p>or at least, they'd want to rewrite it as idiomatic C++ at some point</p>",
        "id": 221327822,
        "sender_full_name": "tmandry",
        "timestamp": 1609462622
    },
    {
        "content": "<p>but I'm not sure if it's a hard requirement or not. maybe an email to llvm-dev could clear some things up.</p>",
        "id": 221327915,
        "sender_full_name": "tmandry",
        "timestamp": 1609462780
    },
    {
        "content": "<p>I wrote <a href=\"https://reviews.llvm.org/D99981\">https://reviews.llvm.org/D99981</a>, and have a follow up patch to lldb.</p>",
        "id": 233539617,
        "sender_full_name": "tm",
        "timestamp": 1617820398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/122651-general/topic/Adding.20Rust.20v0.20demangling.20support.20to.20LLVM/near/221327736\">said</a>:</p>\n<blockquote>\n<p>There's a C implementation bundled with perf in the linux source tree that dtolnay wrote a while ago</p>\n</blockquote>\n<p>That one doesn't actually get called: it will first try the libiberty demangler which has v0 Rust demangling support.</p>",
        "id": 233541309,
        "sender_full_name": "Amanieu",
        "timestamp": 1617821108
    }
]