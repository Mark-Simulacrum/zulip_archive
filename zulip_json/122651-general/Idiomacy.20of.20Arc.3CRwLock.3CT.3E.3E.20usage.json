[
    {
        "content": "<p>This may be a little bit of a subjective topic but I still have to ask. Out of these two options, which one do you think is the more idiomatic?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">parking_lot</span>::<span class=\"n\">RwLock</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Client</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">config</span>: <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">RwLock</span><span class=\"o\">&lt;</span><span class=\"n\">Config</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Client</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">config</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Config</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">deref</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">update</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">config</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">deref_mut</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">somewhere</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">cfg</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">some_field</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"new_value\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">somewhere_else</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">some_field</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">cfg</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">some_field</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">parking_lot</span>::<span class=\"n\">RwLock</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Client</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">config</span>: <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">RwLock</span><span class=\"o\">&lt;</span><span class=\"n\">Config</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Client</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">somewhere</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">some_field</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"new_value\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">somewhere_else</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">some_field</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">some_field_in_config</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I reckon the second approach has a higher chance of introducing deadlocks, but all the clones and closures in the first one bother me a little. And I guess it's also a little more readable?. Would you argue that any of those two is more idiomatic or preferred over the other?</p>",
        "id": 218476584,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606854372
    },
    {
        "content": "<p>The <code>somewhere_else</code> fn shouldn't be legal, since you take a borrow to <code>some_field_in_config</code> for longer than <code>self.config.read()</code> lives.</p>\n<p>I also would say the <code>update()</code> fn in the first option seems more likely to cause a deadlock, since that function needs to know that it takes the <code>config</code> lock, which is kind of implicit. Calling a function while holding a lock if that function isn't aware of it is an easy way to have a dead lock, since you could easily end up with taking locks in different orders.</p>",
        "id": 218477193,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606854671
    },
    {
        "content": "<p>The first one isn't syntactically valid, so that's easy to rule out as a choice :-)</p>",
        "id": 218477456,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606854781
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\"><pre><span></span><code>no method named `deref` found for struct `parking_lot::lock_api::RwLockReadGuard&lt;&#39;_, parking_lot::RawRwLock, Config&gt;` in the current scope\n</code></pre></div>",
        "id": 218477547,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606854825
    },
    {
        "content": "<p>I don't see how the second example would be more likely to introduce deadlocks.</p>",
        "id": 218477748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606854921
    },
    {
        "content": "<p>nothing of complexity occurs while the reader / writer locks are held.</p>",
        "id": 218477808,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606854953
    },
    {
        "content": "<p>isn't that just needing the <code>use std::ops::Deref</code> ? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nI'm confused about your comment <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> , it seems to be valid code for me <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4db16f76503be0634094d43710a1489b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4db16f76503be0634094d43710a1489b</a></p>",
        "id": 218478671,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606855438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246514\">Martin Asquino</span> <a href=\"#narrow/stream/122651-general/topic/Idiomacy.20of.20Arc.3CRwLock.3CT.3E.3E.20usage/near/218478671\">said</a>:</p>\n<blockquote>\n<p>isn't that just needing the <code>use std::ops::Deref</code> ? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nI'm confused about your comment <span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> , it seems to be valid code for me <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4db16f76503be0634094d43710a1489b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4db16f76503be0634094d43710a1489b</a></p>\n</blockquote>\n<p>Perhaps! My tolerance for spending my time guessing the missing parts of code from people asking for help is notably lower than other peoples.</p>",
        "id": 218478810,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606855499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  what I mean by more likely to introduce deadlocks I mean more likely to be overlooked by the dev</p>",
        "id": 218478817,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606855502
    },
    {
        "content": "<p>ah fair enough, yeah I should have made that a playground from the get go <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 218478873,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606855536
    },
    {
        "content": "<p>Ah, I didn't realize the read lock guard's lifetime would be extended by the existence of the borrow. Huh.</p>",
        "id": 218479047,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606855617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246514\">Martin Asquino</span> <a href=\"#narrow/stream/122651-general/topic/Idiomacy.20of.20Arc.3CRwLock.3CT.3E.3E.20usage/near/218478817\">said</a>:</p>\n<blockquote>\n<p>by more likely to introduce deadlocks I mean more likely to be overlooked by the dev</p>\n</blockquote>\n<p>How would that lead to a deadlock in this case?</p>",
        "id": 218479297,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606855728
    },
    {
        "content": "<p>deadlocks can only happen when two threads are waiting for each other</p>",
        "id": 218479338,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606855750
    },
    {
        "content": "<p>but the second case nothing can happen while the lock is held</p>",
        "id": 218479395,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606855784
    },
    {
        "content": "<p>now, the first case seems more deadlock possible since you allow arbitrary functions to run while the lock is held</p>",
        "id": 218479629,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606855898
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">somewhere</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">cfg</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">somewhere_else</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">some_field</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"new_value\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218479950,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606856045
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f5a989de93fbc7a52956a974fefa58b0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f5a989de93fbc7a52956a974fefa58b0</a></p>",
        "id": 218479982,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606856061
    },
    {
        "content": "<p>I've added the two options there, mixed in the same snippet though. And a deadlock function which deadlocks</p>",
        "id": 218480035,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606856085
    },
    {
        "content": "<p>I reckon it's not extremely likely to happen, and that it should be easy enough to spot once you notice the deadlock, but I still wonder</p>",
        "id": 218480093,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606856115
    },
    {
        "content": "<p>Save yourself some typing as well:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Config</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218480131,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606856133
    },
    {
        "content": "<p>fwiw, the first option is on an open source project I'm contributing to, the second option is the one I use in some code I intend to merge, and I think it would do wonders for readability to change the other bits of code that use the first approach. But I wasn't sure if that was a common approach and I'm just being overly annoyed by the closures for no good reason <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> (which I kinda am)</p>",
        "id": 218480614,
        "sender_full_name": "Martin Asquino",
        "timestamp": 1606856338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/122651-general/topic/Idiomacy.20of.20Arc.3CRwLock.3CT.3E.3E.20usage/near/218479047\">said</a>:</p>\n<blockquote>\n<p>Ah, I didn't realize the read lock guard's lifetime would be extended by the existence of the borrow. Huh.</p>\n</blockquote>\n<p>Same here; which is a reason I personally prefer the callback pattern, provided it is named in a way that conveys locking: <code>.with_shared_lock(|it| …)</code> <code>.with_unique_lock(|it| …)</code>.</p>",
        "id": 218580061,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606925902
    },
    {
        "content": "<p><em>wrong topic</em></p>",
        "id": 218583587,
        "sender_full_name": "lcnr",
        "timestamp": 1606927317
    }
]