[
    {
        "content": "<p>Hi, I'm working on a compiler written in Rust that interfaces with LLVM's C API. I'm using the llvm-sys crate, but I'm getting a segfault when I try to get the target from the target triple. Someone in the Rust Matrix room pointed me to the Rust Zulip and I just joined, so if this is the wrong place to post this, by all means let me know!</p>",
        "id": 199223013,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590793788
    },
    {
        "content": "<p>The type that I'm trying to pass to LLVM is <code>LLVMTarget</code> from <a href=\"http://docs.rs/llvm-sys\">llvm-sys</a>. However, it seems to be an empty enum, which the folks at the Rust Matrix room thought meant that it couldn't be instantiated. But, the other types also seem to be empty enums, and that code works fine. Is an empty enum the way to represent an opaque FFI type?</p>",
        "id": 199223361,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590794134
    },
    {
        "content": "<p>what confuses me is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">LLVMTarget</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">LLVMTargetRef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">LLVMTarget</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Is that allowed?</p>",
        "id": 199223375,
        "sender_full_name": "Sebastian Köln",
        "timestamp": 1590794154
    },
    {
        "content": "<p>looks suspiciously like the never type…</p>",
        "id": 199223424,
        "sender_full_name": "Sebastian Köln",
        "timestamp": 1590794177
    },
    {
        "content": "<p>that's allowed if you don't deref it</p>",
        "id": 199228051,
        "sender_full_name": "Lokathor",
        "timestamp": 1590798433
    },
    {
        "content": "<p>that's basically how c_void works</p>",
        "id": 199228057,
        "sender_full_name": "Lokathor",
        "timestamp": 1590798440
    },
    {
        "content": "<p>I figured out how to get my code working! I'm still not quite sure what the issue was though. I think I'll have to read more of the Nomicon etc</p>",
        "id": 199228262,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590798650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> \"can't be instantiated\" just means you can't allocate one yourself; you could call external code and ask it for a pointer to one.</p>",
        "id": 199228605,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590799061
    },
    {
        "content": "<p>In C, consider an opaque struct like <code>struct foo;</code>. You can't create one on the stack (not least of which because you don't know how big it is), but you can do <code>struct foo *foop = foo_new();</code>.</p>",
        "id": 199228662,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590799106
    },
    {
        "content": "<p>Oh, I think I just realized what the issue was: I was trying to pass a pointer to a target to LLVM, but it wanted a pointer <em>to a pointer</em> to a target</p>",
        "id": 199230659,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590801754
    },
    {
        "content": "<p>Ah, that would do it, yeah.</p>",
        "id": 199232032,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590803854
    },
    {
        "content": "<p>Functions that create an object sometimes return a pointer, and sometimes take a double-pointer so they can fill your pointer.</p>",
        "id": 199232044,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590803874
    },
    {
        "content": "<p>I wish I could find an in-depth tutorial for LLVM's C API, but it seems they're more focused on the C++</p>",
        "id": 199232226,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590804102
    },
    {
        "content": "<p>Related question: can unsafe code cause safe code to have UB? I think the answer is yes, but I still don't fully understand how unsafe and safe interact</p>",
        "id": 199232413,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590804303
    },
    {
        "content": "<p>Yes. As a general example unsafe code could turn an invalid raw pointer into a reference and pass that to safe code.</p>",
        "id": 199233568,
        "sender_full_name": "Amanieu",
        "timestamp": 1590806046
    },
    {
        "content": "<p>improper unsafe code that lets safe code UB has the special name \"unsound code\"</p>",
        "id": 199233643,
        "sender_full_name": "Lokathor",
        "timestamp": 1590806232
    },
    {
        "content": "<p>Thanks for the term! I couldn't think of how to describe it...</p>",
        "id": 199235886,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590809569
    }
]