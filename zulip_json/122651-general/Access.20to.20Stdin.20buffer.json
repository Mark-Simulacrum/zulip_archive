[
    {
        "content": "<p>Hello, I would like to have an access to the standard input buffer. The <code>StdinLock</code> uses <code>BufReader</code>, so the buffer could be accessed. If the buffer is empty <code>fill_buf</code> will block while I would like a non-blocking access. Is it possible?</p>",
        "id": 242461681,
        "sender_full_name": "notoria",
        "timestamp": 1623518317
    },
    {
        "content": "<p>I think you will have to use an OS api for that. (on unix I guess dup the stdin fd, set it to non-blocking and then use the read syscall)</p>",
        "id": 242461902,
        "sender_full_name": "bjorn3",
        "timestamp": 1623518655
    },
    {
        "content": "<p>It doesn't seem to be required to use the OS API since <code>StdinLock</code> have a buffer. The only way to access the buffer is <code>fill_buf</code> which will block for input if the buffer is empty. I would like to access the buffer without requesting for more input, just like <code>BufReader</code>.</p>",
        "id": 242462192,
        "sender_full_name": "notoria",
        "timestamp": 1623519239
    },
    {
        "content": "<p>What if the buffer is empty, but the user did provide input?</p>",
        "id": 242462240,
        "sender_full_name": "bjorn3",
        "timestamp": 1623519290
    },
    {
        "content": "<p>I'm abstracting the input, if the buffer is empty then I can read some default data.</p>",
        "id": 242462305,
        "sender_full_name": "notoria",
        "timestamp": 1623519443
    },
    {
        "content": "<p>You mean you want <code>StdinLock</code> to return fake data? For testing purposes?</p>",
        "id": 242462371,
        "sender_full_name": "bjorn3",
        "timestamp": 1623519546
    },
    {
        "content": "<p>No.</p>",
        "id": 242462455,
        "sender_full_name": "notoria",
        "timestamp": 1623519672
    },
    {
        "content": "<p>If the input isn't in the buffer then where could it be?</p>",
        "id": 242462466,
        "sender_full_name": "notoria",
        "timestamp": 1623519710
    },
    {
        "content": "<p>In the OS buffer.</p>",
        "id": 242462472,
        "sender_full_name": "bjorn3",
        "timestamp": 1623519722
    },
    {
        "content": "<p>A pipe has a buffer associated with it in the kernel. When you write to a pipe, you won't block until this buffer is completely filled. When you read from it, you won't block until it is completely empty.</p>",
        "id": 242462542,
        "sender_full_name": "bjorn3",
        "timestamp": 1623519778
    },
    {
        "content": "<p>The buffer in <code>StdinLock</code> is a completely separate buffer to reduce the amount of slow syscalls.</p>",
        "id": 242462619,
        "sender_full_name": "bjorn3",
        "timestamp": 1623519844
    },
    {
        "content": "<p>I understand, even if the input is in OS buffer. I can still decide to retrieve (possible blocking) or read something else.</p>",
        "id": 242462630,
        "sender_full_name": "notoria",
        "timestamp": 1623519862
    },
    {
        "content": "<p>Correct, but you need to set the fd you read from to non-blocking mode and use the os read api to not block on any attempt to read from stdin.</p>",
        "id": 242462648,
        "sender_full_name": "bjorn3",
        "timestamp": 1623519914
    }
]