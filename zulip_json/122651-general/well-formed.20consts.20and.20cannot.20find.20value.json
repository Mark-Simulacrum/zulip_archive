[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> while I have you... I'm also seeing this. I swear I saw someone mentioning the same problem recently, but can't find it now.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ArrayExt</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">xsplit_at</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"p\">}]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayExt</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">xsplit_at</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">}])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=33c45e376d4c263e2cd6e34acb9f4efb\">playground</a></p>\n<div class=\"codehilite\" data-code-language=\"none\"><pre><span></span><code>error[E0412]: cannot find type `T` in this scope\n --&gt; src/lib.rs:4:56\n  |\n4 |     fn xsplit_at&lt;const M: usize&gt;(&amp;self) -&gt; (&amp;[T; M], &amp;[T; { N - M }]);\n  |                                                        ^ not found in this scope\n\nerror[E0425]: cannot find value `N` in this scope\n --&gt; src/lib.rs:4:61\n  |\n4 |     fn xsplit_at&lt;const M: usize&gt;(&amp;self) -&gt; (&amp;[T; M], &amp;[T; { N - M }]);\n  |                        -                                    ^\n  |                        |\n  |                        similarly named const parameter `M` defined here\n</code></pre></div>",
        "id": 212182909,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748274
    },
    {
        "content": "<p>isn*t this simply that inner functions can't mention generic parameters of outer functions?</p>",
        "id": 212182933,
        "sender_full_name": "lcnr",
        "timestamp": 1601748319
    },
    {
        "content": "<p>what's the outer function?</p>",
        "id": 212182943,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748337
    },
    {
        "content": "<p>????</p>",
        "id": 212182952,
        "sender_full_name": "lcnr",
        "timestamp": 1601748359
    },
    {
        "content": "<p>what</p>",
        "id": 212182953,
        "sender_full_name": "lcnr",
        "timestamp": 1601748361
    },
    {
        "content": "<p>looks like my brain broke for a few seconds here</p>",
        "id": 212183006,
        "sender_full_name": "lcnr",
        "timestamp": 1601748381
    },
    {
        "content": "<p>I mean, I only have one function at all, as far as I can see.</p>",
        "id": 212183007,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748383
    },
    {
        "content": "<p>You do have to declare <code>T</code> and <code>N</code> when using them in the trait def</p>",
        "id": 212183015,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601748401
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 212183022,
        "sender_full_name": "lcnr",
        "timestamp": 1601748420
    },
    {
        "content": "<p>ArrayExt doesn't define <code>T</code></p>",
        "id": 212183029,
        "sender_full_name": "lcnr",
        "timestamp": 1601748429
    },
    {
        "content": "<p>this works <a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d1270b675f48680c3c299ac9bb13428c\">https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d1270b675f48680c3c299ac9bb13428c</a></p>",
        "id": 212183030,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601748429
    },
    {
        "content": "<p>you probably want to use <code>Self</code> there</p>",
        "id": 212183033,
        "sender_full_name": "lcnr",
        "timestamp": 1601748435
    },
    {
        "content": "<p>Where would I use <code>Self</code>?</p>",
        "id": 212183054,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748482
    },
    {
        "content": "<p>gimme a sec</p>",
        "id": 212183099,
        "sender_full_name": "lcnr",
        "timestamp": 1601748506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> That makes sense. Now to figure out why I didn't reason that out based on the error messages.</p>",
        "id": 212183104,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748518
    },
    {
        "content": "<p>do we need GATs here?</p>",
        "id": 212183122,
        "sender_full_name": "lcnr",
        "timestamp": 1601748563
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ArrayExt</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Head</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Tail</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">xsplit_at</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">Self</span>::<span class=\"n\">Head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">Self</span>::<span class=\"n\">Tail</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ArrayExt</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">xsplit_at</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">}])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">head</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">tail</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212183127,
        "sender_full_name": "lcnr",
        "timestamp": 1601748573
    },
    {
        "content": "<p>would be my idea, but we only define <code>A</code> in <code>xsplit_at</code> so we can't reference it in associated types</p>",
        "id": 212183181,
        "sender_full_name": "lcnr",
        "timestamp": 1601748609
    },
    {
        "content": "<p>I don't see why GATs would be needed. as we wouldn't be parameterizing over lifetimes.</p>",
        "id": 212183190,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748628
    },
    {
        "content": "<p>Or do you mean The Real GATs</p>",
        "id": 212183200,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748638
    },
    {
        "content": "<p>even with types.</p>",
        "id": 212183202,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748645
    },
    {
        "content": "<p>yeah</p>",
        "id": 212183205,
        "sender_full_name": "lcnr",
        "timestamp": 1601748649
    },
    {
        "content": "<p><code>type Tail&lt;const A: usize&gt; = [T; N - A]</code></p>",
        "id": 212183217,
        "sender_full_name": "lcnr",
        "timestamp": 1601748666
    },
    {
        "content": "<p>Why would you go that path instead of the generics in the trait?</p>",
        "id": 212183225,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601748683
    },
    {
        "content": "<p>because with generics on the trait you cant write <code>arr.xsplit_at::&lt;3&gt;()</code></p>",
        "id": 212183247,
        "sender_full_name": "lcnr",
        "timestamp": 1601748713
    },
    {
        "content": "<p>afaict</p>",
        "id": 212183251,
        "sender_full_name": "lcnr",
        "timestamp": 1601748719
    },
    {
        "content": "<p><a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=125c0d8141209c74f8993fc861d680dc\">Seems to compile fine</a></p>",
        "id": 212183523,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601749002
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 212183634,
        "sender_full_name": "lcnr",
        "timestamp": 1601749154
    },
    {
        "content": "<p>not sure what I was thinking here. That seems good to me! Even if it's somewhat unfortunate that this is needed</p>",
        "id": 212183704,
        "sender_full_name": "lcnr",
        "timestamp": 1601749246
    },
    {
        "content": "<p>That was my idea <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ad2585bd751942c55b32be60ffe280ef\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ad2585bd751942c55b32be60ffe280ef</a></p>",
        "id": 212183731,
        "sender_full_name": "lcnr",
        "timestamp": 1601749299
    },
    {
        "content": "<p>which instead duplicates the generic param of the function itself</p>",
        "id": 212183777,
        "sender_full_name": "lcnr",
        "timestamp": 1601749329
    },
    {
        "content": "<p>which might make this slightly more usable in generic contexts, but I don't think this matters here</p>",
        "id": 212183787,
        "sender_full_name": "lcnr",
        "timestamp": 1601749359
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: any use of this value will cause an error\n  --&gt; src/main.rs:29:5\n   |\n29 |     const N2: usize;\n   |     ^^^^^^^^^^^^^^^^ no MIR body is available for DefId(0:24 ~ playground[a78a]::FromBytesLittleEndian::N2)\n   |\n   = note: `#[deny(const_err)]` on by default\n</code></pre></div>\n\n\n<p>Nice.</p>",
        "id": 212183809,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601749400
    },
    {
        "content": "<p>but it also is kind of weird to implement a trait for a method where the method is sometimes not available</p>",
        "id": 212183816,
        "sender_full_name": "lcnr",
        "timestamp": 1601749417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/well-formed.20consts.20and.20cannot.20find.20value/near/212183809\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>error: any use of this value will cause an error\n  --&gt; src/main.rs:29:5\n   |\n29 |     const N2: usize;\n   |     ^^^^^^^^^^^^^^^^ no MIR body is available for DefId(0:24 ~ playground[a78a]::FromBytesLittleEndian::N2)\n   |\n   = note: `#[deny(const_err)]` on by default\n</code></pre></div>\n\n\n<p>Nice.</p>\n</blockquote>\n<p>nice</p>",
        "id": 212183818,
        "sender_full_name": "lcnr",
        "timestamp": 1601749423
    },
    {
        "content": "<p>what's the complete code here?</p>",
        "id": 212183823,
        "sender_full_name": "lcnr",
        "timestamp": 1601749439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e2d3ed857a2c5fff24d7243329c096c7\">https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e2d3ed857a2c5fff24d7243329c096c7</a></p>",
        "id": 212183939,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601749568
    },
    {
        "content": "<p>And <a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7543d05321e448620de12648fb7c713a\">now</a> I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: Encountered error `Unimplemented` selecting `Binder(&lt;^0 as FromBytesLittleEndian&gt;)` during codegen\n  |\n  = note: delayed at compiler/rustc_trait_selection/src/traits/codegen/mod.rs:65:32\n\nerror: internal compiler error: ty::ConstKind::Error constructed but no error reported.\n  |\n  = note: delayed at /rustc/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler/rustc_middle/src/ty/consts.rs:183:43\n\nerror: internal compiler error: `ErrorReported` without an error\n  --&gt; src/main.rs:78:53\n   |\n78 |             a: FromBytesLittleEndian::from_bytes_le(a),\n   |                                                     ^\n   |\n   = note: delayed at compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:754:31\n\nerror: internal compiler error: `ErrorReported` without an error\n  --&gt; src/main.rs:79:53\n   |\n79 |             b: FromBytesLittleEndian::from_bytes_le(b),\n   |                                                     ^\n   |\n   = note: delayed at compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:754:31\n\nerror: internal compiler error: `ErrorReported` without an error\n  --&gt; src/main.rs:80:53\n   |\n80 |             c: FromBytesLittleEndian::from_bytes_le(c),\n   |                                                     ^\n   |\n   = note: delayed at compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:754:31\n</code></pre></div>",
        "id": 212183982,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601749663
    },
    {
        "content": "<p>It's almost as if this feature isn't finished.</p>",
        "id": 212184029,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601749690
    },
    {
        "content": "<p>~surprising~</p>",
        "id": 212184033,
        "sender_full_name": "lcnr",
        "timestamp": 1601749701
    },
    {
        "content": "<p>but thanks for finding these <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 212184042,
        "sender_full_name": "lcnr",
        "timestamp": 1601749716
    },
    {
        "content": "<p>Here's what I really want to be able to write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, /* FromBytesLittleEndian */)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Header</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FromBytesLittleEndian</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Header</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">FromBytesLittleEndian</span><span class=\"o\">&gt;</span>::<span class=\"n\">N</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">FromBytesLittleEndian</span><span class=\"o\">&gt;</span>::<span class=\"n\">N</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">FromBytesLittleEndian</span><span class=\"o\">&gt;</span>::<span class=\"n\">N</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_bytes_le</span><span class=\"p\">(</span><span class=\"n\">rest</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">.</span><span class=\"n\">xsplit_at</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">FromBytesLittleEndian</span><span class=\"o\">&gt;</span>::<span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">.</span><span class=\"n\">xsplit_at</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">FromBytesLittleEndian</span><span class=\"o\">&gt;</span>::<span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">.</span><span class=\"n\">xsplit_at</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">FromBytesLittleEndian</span><span class=\"o\">&gt;</span>::<span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_assert_consumed_all_bytes</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">a</span>: <span class=\"nc\">FromBytesLittleEndian</span>::<span class=\"n\">from_bytes_le</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">b</span>: <span class=\"nc\">FromBytesLittleEndian</span>::<span class=\"n\">from_bytes_le</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">c</span>: <span class=\"nc\">FromBytesLittleEndian</span>::<span class=\"n\">from_bytes_le</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212184214,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601749964
    },
    {
        "content": "<p>And <a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=235d58d9d986de1900376987a31f8269\">reordering it a bit</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:74:54\n   |\n74 |         let a = FromBytesLittleEndian::from_bytes_le(a);\n   |                                                      ^ expected `Self::N`, found `Self::N`\n   |\n   = note: expected reference `&amp;[u8; _]`\n              found reference `&amp;[u8; _]`\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:76:25\n   |\n76 |         let (b, rest) = rest.xsplit_at();\n   |                         ^^^^^^^^^^^^^^^^ expected `{ N - M }`, found `{ N - M }`\n   |\n   = note: expected type `_`\n             found tuple `(&amp;[u8; _], &amp;[u8; _])`\n</code></pre></div>",
        "id": 212184716,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601750755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> is it worth me doing anything with these various errors?</p>",
        "id": 212184757,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601750770
    },
    {
        "content": "<p>ping me when you find them, I currently add them to a list in the tracking issue <a href=\"https://github.com/rust-lang/rust/issues/76560\">#76560</a></p>",
        "id": 212184796,
        "sender_full_name": "lcnr",
        "timestamp": 1601750875
    },
    {
        "content": "<p>I don't think we should open a new issue in the rust repo for them, as there are a lot of them and they aren't really relevant for anyone but me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p><em>edit: or maybe we should, not completely sure about this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></em></p>",
        "id": 212184846,
        "sender_full_name": "lcnr",
        "timestamp": 1601750939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'm not immediately seeing a bullet point for the \"mismatched types\" one</p>",
        "id": 212185219,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601751522
    },
    {
        "content": "<p><a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c127bb01b6641153113969305256af10\">current example</a></p>",
        "id": 212185232,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601751577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/well-formed.20consts.20and.20cannot.20find.20value/near/212185219\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> I'm not immediately seeing a bullet point for the \"mismatched types\" one</p>\n</blockquote>\n<p>just added that one</p>",
        "id": 212185326,
        "sender_full_name": "lcnr",
        "timestamp": 1601751684
    },
    {
        "content": "<p>added three additional - still broken - tests thanks to you <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 212185333,
        "sender_full_name": "lcnr",
        "timestamp": 1601751710
    },
    {
        "content": "<p>the current example looks sufficiently similar to the previous version so I don't think it makes sense to track that one too for now</p>",
        "id": 212185401,
        "sender_full_name": "lcnr",
        "timestamp": 1601751793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/well-formed.20consts.20and.20cannot.20find.20value/near/212185333\">said</a>:</p>\n<blockquote>\n<p>added three additional - still broken - tests thanks to you <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>\n</blockquote>\n<div class=\"message_inline_image\"><a href=\"https://i.imgflip.com/1pk2po.jpg\"><img src=\"https://i.imgflip.com/1pk2po.jpg\"></a></div>",
        "id": 212186113,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601752982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/well-formed.20consts.20and.20cannot.20find.20value/near/212185401\">said</a>:</p>\n<blockquote>\n<p>the current example looks sufficiently similar to the previous version so I don't think it makes sense to track that one too for now</p>\n</blockquote>\n<p>yes, I was just providing it again so you didn't have to scroll back :-)</p>",
        "id": 212186141,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601753043
    }
]