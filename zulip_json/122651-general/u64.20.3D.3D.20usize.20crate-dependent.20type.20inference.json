[
    {
        "content": "<p>I have a crate <code>foo</code> which is a dependency of <code>bar</code>. In <code>foo</code> there is a function like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Compiling <code>foo</code> shows no errors, and I can even build and <code>cargo test</code> it. However, when compiling <code>bar</code> with cargo, <code>foo</code> is compiled and during the compilation this line is flagged like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Checking foo v0.1.0 (bar/components/foo)\nerror[E0283]: type annotations needed\n   --&gt; components/foo/lib.rs:2:18\n    |\n2   |     let _ = 0u64 == 0usize.try_into().unwrap();\n    |                  ^^ ----------------- this method call resolves to `Result&lt;T, &lt;Self as TryInto&lt;T&gt;&gt;::Error&gt;`\n    |                  |\n    |                  cannot infer type\n    |\n    = note: cannot satisfy `u64: PartialEq&lt;_&gt;`\n\nFor more information about this error, try `rustc --explain E0283`.\nerror: could not compile `mmcc` due to previous error\n</code></pre></div>\n<p>Does anyone know how this can happen? Is being in a different crate affecting the trait resolution rules somehow so as to make this <code>PartialEq</code> implementation ambiguous?</p>",
        "id": 259490991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635492596
    },
    {
        "content": "<p>The only thing I can think of is there being an <code>impl std::cmp::PartialEq&lt;Baz&gt; for u64</code> in <code>bar</code><br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=dbbe359f52c11ad81c6531bff3e76b13\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=dbbe359f52c11ad81c6531bff3e76b13</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Baz</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cmp</span>::<span class=\"nb\">PartialEq</span><span class=\"o\">&lt;</span><span class=\"n\">Baz</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">eq</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Baz</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this compiles if you remove the <code>PartialEq</code> impl.</p>",
        "id": 259494598,
        "sender_full_name": "matt1992",
        "timestamp": 1635495336
    },
    {
        "content": "<p>It reminds me of this wonderful crate of yours, <span class=\"user-mention\" data-user-id=\"138909\">@matt1992</span>: <a href=\"https://docs.rs/break_array\">https://docs.rs/break_array</a></p>",
        "id": 259506663,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1635503633
    },
    {
        "content": "<p>This makes sense if the code of <code>foo()</code> was replicated or macro-inserted in <code>bar</code>, but the weird thing is that it's actually erroring before it even gets to <code>bar</code>, it's the exact same line of code in <code>foo()</code> which is a regular non-generic function. The only difference is that in one case I'm compiling <code>foo</code> directly and in the other case cargo is compiling <code>foo</code> as a dependency of <code>bar</code> (so e.g. <code>--cap-lints</code> is on)</p>",
        "id": 259522013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635513295
    },
    {
        "content": "<p>I will see if I can make a self contained example</p>",
        "id": 259522078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635513341
    },
    {
        "content": "<p>Maybe a mutual dependency has a feature that's only enabled via <code>bar</code>?</p>",
        "id": 259541227,
        "sender_full_name": "cuviper",
        "timestamp": 1635521521
    },
    {
        "content": "<p>Yes, I just managed to track it down, and indeed the reason it compiles differently is because of a feature in a mutual dependency. However, I think there is a genuine rust bug underneath; I've managed to minimize it to the following:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[dependencies]</span>\n<span class=\"n\">lsp-types</span> <span class=\"o\">=</span> <span class=\"s\">\"0.91\"</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"2.0.0\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">lsp_types</span>::<span class=\"n\">Url</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// comment this out and it works</span>\n<span class=\"c1\">// impl Foo for url::Url {} // replacing it with this line also works</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u64</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">.</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259543714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635522577
    },
    {
        "content": "<p>Aha: <a href=\"https://github.com/serde-rs/json/blob/master/src/value/partial_eq.rs#L69-L73\">https://github.com/serde-rs/json/blob/master/src/value/partial_eq.rs#L69-L73</a></p>",
        "id": 259549399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635524769
    },
    {
        "content": "<p>Hm, is this something that should be fixed in serde-json? It was certainly surprising to find something like that so deep in a transitive dependency when I'm not even dealing with anything to do with json and have no serde or json related traits open</p>",
        "id": 259549727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635524917
    },
    {
        "content": "<p>I think there's an issue about it on rust-lang/rust (at least seeking better diagnostics)</p>",
        "id": 259552750,
        "sender_full_name": "simulacrum",
        "timestamp": 1635526379
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/46257\">https://github.com/rust-lang/rust/issues/46257</a></p>",
        "id": 259557894,
        "sender_full_name": "cuviper",
        "timestamp": 1635528788
    },
    {
        "content": "<p>I would be nice if the compiler said \"I think this could be X, Y, or T:Foo ...\"</p>",
        "id": 259558211,
        "sender_full_name": "cuviper",
        "timestamp": 1635528940
    },
    {
        "content": "<p>also related: <a href=\"https://github.com/rust-lang/rust/issues/71538\">https://github.com/rust-lang/rust/issues/71538</a></p>",
        "id": 259560567,
        "sender_full_name": "cuviper",
        "timestamp": 1635530005
    },
    {
        "content": "<p>yikes, I always get worried about those 2.0 wishlist issues because I know that 2.0 is about as likely for these crates as rust 2.0</p>",
        "id": 259561291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635530320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/u64.20.3D.3D.20usize.20crate-dependent.20type.20inference/near/259506663\">said</a>:</p>\n<blockquote>\n<p>It reminds me of this wonderful crate of yours, <span class=\"user-mention silent\" data-user-id=\"138909\">matt1992</span>: <a href=\"https://docs.rs/break_array\">https://docs.rs/break_array</a></p>\n</blockquote>\n<p>FWIW, this was fixed in 1.50 by <a href=\"https://github.com/rust-lang/rust/pull/74989\">https://github.com/rust-lang/rust/pull/74989</a></p>",
        "id": 259564198,
        "sender_full_name": "cuviper",
        "timestamp": 1635531595
    }
]