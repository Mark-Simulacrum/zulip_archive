[
    {
        "content": "<blockquote>\n<p>doing this \"right\" is blocked on <code>&amp;mut</code>-in-const</p>\n</blockquote>\n<p>cc <span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> fun coincidence</p>",
        "id": 180954619,
        "sender_full_name": "oli",
        "timestamp": 1573991392
    },
    {
        "content": "<p>I'll get this done ASAP</p>",
        "id": 180957401,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1573996492
    },
    {
        "content": "<p>There's no rush! I just found it funny</p>",
        "id": 180958094,
        "sender_full_name": "oli",
        "timestamp": 1573997876
    },
    {
        "content": "<p>Also I forgot to link to the post: <a href=\"#narrow/stream/122651-general/topic/const.20fn.20wishlist/near/180904827\" title=\"#narrow/stream/122651-general/topic/const.20fn.20wishlist/near/180904827\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/const.20fn.20wishlist/near/180904827</a></p>",
        "id": 180958136,
        "sender_full_name": "oli",
        "timestamp": 1573997916
    },
    {
        "content": "<p>does this feature has an RFC or something?</p>",
        "id": 180959834,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574001488
    },
    {
        "content": "<p>to give it a proper name</p>",
        "id": 180959836,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574001496
    },
    {
        "content": "<p>nope</p>",
        "id": 180961336,
        "sender_full_name": "oli",
        "timestamp": 1574004398
    },
    {
        "content": "<p><code>const_mut_refs</code> or sth</p>",
        "id": 180961337,
        "sender_full_name": "oli",
        "timestamp": 1574004408
    },
    {
        "content": "<p>idk, be creative :D</p>",
        "id": 180961341,
        "sender_full_name": "oli",
        "timestamp": 1574004415
    },
    {
        "content": "<p>unleash-the-const-mut-ref-inside-you?</p>",
        "id": 180963352,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574008366
    },
    {
        "content": "<p>:P</p>",
        "id": 180963353,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574008370
    },
    {
        "content": "<p>heh</p>",
        "id": 180996723,
        "sender_full_name": "oli",
        "timestamp": 1574066543
    },
    {
        "content": "<p>I'll submit a PR later today</p>",
        "id": 181007558,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574076689
    },
    {
        "content": "<p>where should the tests go?</p>",
        "id": 181013144,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574081963
    },
    {
        "content": "<p>mir-opt</p>",
        "id": 181017195,
        "sender_full_name": "oli",
        "timestamp": 1574085520
    },
    {
        "content": "<p>I'd wager some mir opt tests will be affected even without you adding a test</p>",
        "id": 181017209,
        "sender_full_name": "oli",
        "timestamp": 1574085539
    },
    {
        "content": "<p>if that is the case... just don't add a test</p>",
        "id": 181017221,
        "sender_full_name": "oli",
        "timestamp": 1574085545
    },
    {
        "content": "<p>the other tests are covering you</p>",
        "id": 181017230,
        "sender_full_name": "oli",
        "timestamp": 1574085551
    },
    {
        "content": "<p>unfortunately these tests don't know about <code>--bless</code></p>",
        "id": 181017238,
        "sender_full_name": "oli",
        "timestamp": 1574085563
    },
    {
        "content": "<p>so they are a pain to adjust</p>",
        "id": 181017243,
        "sender_full_name": "oli",
        "timestamp": 1574085568
    },
    {
        "content": "<p>also using the <code>const_fn</code> feature allows to use <code>&amp;mut</code> in const fns. So currently the error indicates that the user should enable the<code>const_fn</code>feature</p>",
        "id": 181022445,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574089158
    },
    {
        "content": "<p>should I change it so it suggests to enable the new feature?</p>",
        "id": 181022464,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574089172
    },
    {
        "content": "<blockquote>\n<p>I'd wager some mir opt tests will be affected even without you adding a test</p>\n</blockquote>\n<p>none of the tests in <code>./x.py test --stage 1 src/test/mir-opt/</code> failed</p>",
        "id": 181025143,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574090838
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> oh, sorry I didn't read the thread topic, yea you should add some tests in <code>src/test/ui/consts</code></p>",
        "id": 181097159,
        "sender_full_name": "oli",
        "timestamp": 1574158184
    },
    {
        "content": "<p>(in a subdirectory please, not immediately in the <code>ui/consts/</code>)</p>",
        "id": 181102898,
        "sender_full_name": "centril",
        "timestamp": 1574163092
    },
    {
        "content": "<p>and those should be the tests checking that the feature works right?</p>",
        "id": 181123303,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574178142
    },
    {
        "content": "<p>(not the test checking that using this is forbidden without the gate)</p>",
        "id": 181123333,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574178155
    },
    {
        "content": "<p>yes</p>",
        "id": 181199164,
        "sender_full_name": "oli",
        "timestamp": 1574249839
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/66556\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66556\">https://github.com/rust-lang/rust/issues/66556</a></p>",
        "id": 181305806,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574344404
    },
    {
        "content": "<p>Oh shoo, I forgot about tidy</p>",
        "id": 181305832,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574344425
    },
    {
        "content": "<p>does this have an open issue?</p>",
        "id": 181305847,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574344434
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>tidy check\n* 588 error codes\n* highest error code: E0744\ntidy error: /home/christian/Workspace/contrib/rust/src/libsyntax/feature_gate/active.rs:533: no tracking issue for feature const_fn_mut_refs\nChecking which error codes lack tests...\nFound 441 error codes\nFound 0 error codes with no tests\nDone!\nsome tidy checks failed\n</pre></div>",
        "id": 181305912,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574344457
    },
    {
        "content": "<p>idk, check the const fn meta issue, and if there's no issue for mutable references, you can open one and point to it from the meta issue</p>",
        "id": 181307095,
        "sender_full_name": "oli",
        "timestamp": 1574345282
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/57349\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57349\">https://github.com/rust-lang/rust/issues/57349</a></p>",
        "id": 181307328,
        "sender_full_name": "centril",
        "timestamp": 1574345456
    },
    {
        "content": "<p>Hmm now I'm a little confused about what to do with assignments like <code>*x = y</code>. Not allowing them restricts a lot what can be done with mutable references but I'm not sure about all the implications of allowing them.</p>",
        "id": 181603900,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574387619
    },
    {
        "content": "<p>I mean, without them we can still do stuff like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181603986,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574387732
    },
    {
        "content": "<p>yea, <code>*x = y</code> should be under the same feature gate</p>",
        "id": 181636351,
        "sender_full_name": "oli",
        "timestamp": 1574428775
    },
    {
        "content": "<p>Ok</p>",
        "id": 181641367,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574432232
    },
    {
        "content": "<p>what should I do with the broken <code>unleash-the-miri-inside-of-you</code> tests?</p>",
        "id": 181654062,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574440343
    },
    {
        "content": "<blockquote>\n<p>yea, <code>*x = y</code> should be under the same feature gate</p>\n</blockquote>\n<p>Also, I'm thorn about how mutable borrows should behave outside constant contexts. So for example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"kt\">usize</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">})]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Will work after enabling mutable dereferences. But at the same time stuff like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">FOO</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>will succeed because mutation only happens inside constants. Is that OK?</p>",
        "id": 181686303,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574464364
    },
    {
        "content": "<p>The second <code>fn main</code> example looks correct. The final value of a constant is frozen/immutable - it would be unsound if you could actually make the value <code>FOO.x == 1</code></p>",
        "id": 181687110,
        "sender_full_name": "centril",
        "timestamp": 1574465197
    },
    {
        "content": "<p>ok then, I'll push the changes.</p>",
        "id": 181692076,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1574470740
    }
]