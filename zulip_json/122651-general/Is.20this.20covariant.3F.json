[
    {
        "content": "<p>Could someone that understands the variance system explain why the <code>Foo</code> type here is coming out invariant instead of covariant? I am using <code>transmute</code> in my codebase to make it covariant anyway, but maybe the compiler has a point here and if so I would like to know what the reasoning is.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Nil</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fun</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">NIL</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Nil</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_covariance</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">NIL</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// error</span>\n</code></pre></div>",
        "id": 206726173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597253954
    },
    {
        "content": "<p>I'm not sure, but I reduced it to this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Nil</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fun</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206730556,
        "sender_full_name": "cuviper",
        "timestamp": 1597256068
    },
    {
        "content": "<p>changing the <code>dyn Fn</code> to <code>fn</code> works</p>",
        "id": 206730613,
        "sender_full_name": "cuviper",
        "timestamp": 1597256101
    },
    {
        "content": "<p>AFAICS, the nomicon doesn't discuss trait object variance yet<br>\n<a href=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\">https://doc.rust-lang.org/nomicon/subtyping.html#variance</a></p>",
        "id": 206730838,
        "sender_full_name": "cuviper",
        "timestamp": 1597256208
    },
    {
        "content": "<p>It seems like Rust doesn't allow</p>\n<div class=\"codehilite\"><pre><span></span><code>fn func&lt;&#39;a&gt;(f: Box&lt;dyn Fn() -&gt; &amp;&#39;static u32&gt;) -&gt; Box&lt;dyn Fn() -&gt; &amp;&#39;a u32&gt; {\n    f\n}\n</code></pre></div>",
        "id": 206730907,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597256240
    },
    {
        "content": "<p>Replacing <code>f</code> with <code>Box::new(move || f())</code> works</p>",
        "id": 206732140,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597256824
    },
    {
        "content": "<p>Trait objects are invariant iirc because the 'a could be used in an invariant position</p>",
        "id": 206733088,
        "sender_full_name": "simulacrum",
        "timestamp": 1597257319
    },
    {
        "content": "<p>Hm reference says covariant...</p>",
        "id": 206733220,
        "sender_full_name": "simulacrum",
        "timestamp": 1597257381
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/blob/96b5dee9ab3b4b0c8f5086011b7a15b7c4aed48c/src/librustc_typeck/variance/constraints.rs#L330\">this</a> is the relevant bit from rustc</p>",
        "id": 206733512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597257559
    },
    {
        "content": "<p>If I'm reading it right, it is covariant wrt <code>'a</code> in <code>dyn T + 'a</code>, but invariant wrt \"projection bounds\" in <code>T</code></p>",
        "id": 206733604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597257607
    },
    {
        "content": "<p>which I think means things like the <code>'a</code> in <code>T = Fn() -&gt; &amp;'a U</code></p>",
        "id": 206733632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597257626
    },
    {
        "content": "<p>There is this <a href=\"https://github.com/rust-lang/reference/pull/186#discussion_r161630407\">https://github.com/rust-lang/reference/pull/186#discussion_r161630407</a></p>",
        "id": 206733774,
        "sender_full_name": "simulacrum",
        "timestamp": 1597257709
    },
    {
        "content": "<p>Hm so that example compiles on stable, which reminds me of <a href=\"https://github.com/rust-lang/rust/issues/71550\">https://github.com/rust-lang/rust/issues/71550</a></p>",
        "id": 206734466,
        "sender_full_name": "simulacrum",
        "timestamp": 1597258025
    },
    {
        "content": "<p>You could ask in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a> or <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> but I suspect that for the function traits this is indeed fine; because like Iterator they're associated type is only an output</p>",
        "id": 206734746,
        "sender_full_name": "simulacrum",
        "timestamp": 1597258174
    },
    {
        "content": "<p>But as Niko notes here <a href=\"https://github.com/rust-lang/rust/issues/71550#issuecomment-626722766\">https://github.com/rust-lang/rust/issues/71550#issuecomment-626722766</a> that's not 100% clear and not currently implemented</p>",
        "id": 206734830,
        "sender_full_name": "simulacrum",
        "timestamp": 1597258205
    },
    {
        "content": "<p>aside, I didn't realize the reference discussed variance, and that looks newer than the nomicon chapter -- maybe it should be removed/redirected from the nomicon?</p>",
        "id": 206734977,
        "sender_full_name": "cuviper",
        "timestamp": 1597258292
    },
    {
        "content": "<p>Okay so it sounds like this is actually fine, and rustc just isn't smart enough to know it</p>",
        "id": 206735303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597258473
    },
    {
        "content": "<p>although it does make things awkward since there is AFAIK no way to manually / unsafely override the variance on a publicly exported type</p>",
        "id": 206735416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597258536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I think that's true, but I would check with someone in wg-traits or t-lang, and we should perhaps document it in the nomicon. Submitting those docs would be a great way to check!</p>",
        "id": 206735816,
        "sender_full_name": "simulacrum",
        "timestamp": 1597258716
    },
    {
        "content": "<p>AFAIK associated types are invariant, and return types of the <code>Fn*</code> traits are associated types</p>",
        "id": 206797015,
        "sender_full_name": "RalfJ",
        "timestamp": 1597312181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yes but my impression is that associated types <em>could</em> be made not invariant in all cases, e.g., in this case where they're only used as an output (rather than an input to functions in the trait)</p>",
        "id": 206809584,
        "sender_full_name": "simulacrum",
        "timestamp": 1597322470
    },
    {
        "content": "<p>but I'm not personally confident in that assessment</p>",
        "id": 206809597,
        "sender_full_name": "simulacrum",
        "timestamp": 1597322479
    },
    {
        "content": "<p>ah I see. yes those are subtle questions.</p>",
        "id": 206809795,
        "sender_full_name": "RalfJ",
        "timestamp": 1597322596
    },
    {
        "content": "<blockquote>\n<p>yes but my impression is that associated types could be made not invariant in all cases</p>\n</blockquote>\n<p>in some cases they can, but it's hard to do this without accidentally causing unsoundness imo. <code>mem::Discriminant</code> is currently invariant because it has <code>&lt;T as DiscriminantKind&gt;::Discriminant</code> as a field. Theoretically <code>mem::Discriminant</code> could be bivariant but that's not possible rn</p>",
        "id": 206815171,
        "sender_full_name": "lcnr",
        "timestamp": 1597325797
    },
    {
        "content": "<p>yeah, associated types were made invariant in <a href=\"https://github.com/rust-lang/rust/pull/71896\">https://github.com/rust-lang/rust/pull/71896</a></p>",
        "id": 206821565,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1597329013
    }
]