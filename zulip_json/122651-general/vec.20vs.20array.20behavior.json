[
    {
        "content": "<p>Hi, can someone please help me understand why the linked code borrow checks when using an array but fails when using a Vec? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d07c282391eefa537135952a85d7db2f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d07c282391eefa537135952a85d7db2f</a></p>\n<p>Thank you</p>",
        "id": 217993640,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1606392244
    },
    {
        "content": "<p>Is it because the vec can be mutated in a way that the entries can be removed which is not the case for the array?</p>",
        "id": 217994045,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1606392550
    },
    {
        "content": "<p>But if that is the case, shouldn't the compiler realize that I am just updating the existing entries, I am not mutating the vec in a way that can cause memory safety?</p>",
        "id": 217994191,
        "sender_full_name": "Maximilian Hristache",
        "timestamp": 1606392663
    },
    {
        "content": "<p>The array indexing for arrays is built into the compiler. For <code>Vec</code> it calls the <code>index</code>/<code>index_mut</code> methods, which borrow the whole <code>Vec</code>.</p>",
        "id": 217997273,
        "sender_full_name": "bjorn3",
        "timestamp": 1606394779
    },
    {
        "content": "<p>You can use <code>let slice = &amp;mut *store</code> to get back to built-in indexing.</p>",
        "id": 218021507,
        "sender_full_name": "cuviper",
        "timestamp": 1606409350
    }
]