[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> Now I am curious... what would you rank highest on that list?</p>",
        "id": 160999314,
        "sender_full_name": "centril",
        "timestamp": 1552830141
    },
    {
        "content": "<p>Hmm... now I need to make up a list. Probably build times, that took the longest for me to get used to when I started. </p>\n<p>There were other things I recall like when I added my first test and would get the annotations incorrect (<code>// ~</code> instead of <code>//~</code>) and there'd be no indication that was what was wrong. </p>\n<p>I'm not sure though, I guess I went into contributing expecting there to be friction as I got used to how things were done - things like rebasing I've always just thought of as the price you pay for using Git. I tend to think that if someone goes into contributing to anything with an expectation of a frictionless process, they're going to end up frustrated, there's always something.</p>",
        "id": 160999454,
        "sender_full_name": "davidtwco",
        "timestamp": 1552830436
    },
    {
        "content": "<p>oh yeah, those two are definitely up there</p>",
        "id": 161000030,
        "sender_full_name": "centril",
        "timestamp": 1552831448
    },
    {
        "content": "<p>For maximum frictionless contributing, the author of the patch could send it into an email list (or post via a web form) and then an expert could just fix all the nits, grammar, etc for them.</p>",
        "id": 161000226,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552831834
    },
    {
        "content": "<p>I don't think that's frictionless (for everyone), it just shifts the friction entirely onto the experts.</p>",
        "id": 161000238,
        "sender_full_name": "davidtwco",
        "timestamp": 1552831877
    },
    {
        "content": "<blockquote>\n<p>For maximum frictionless contributing, the author of the patch could send it into an email list (or post via a web form) and then an expert could just fix all the nits, grammar, etc for them.</p>\n</blockquote>\n<p>Just for the record, such a contribution system would have meant I would not be a rustc contributor today. I literally have no idea how to contribute in such a way and it scares me to even think about it. There are reasons I never upstreamed my llvm experiments</p>",
        "id": 161000593,
        "sender_full_name": "oli",
        "timestamp": 1552832639
    },
    {
        "content": "<p>Yeah that's more of a linux kernel vibe than I care to go through; not my idea of frictionless.</p>",
        "id": 161001086,
        "sender_full_name": "centril",
        "timestamp": 1552833564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how could you not \"know\" how to do it? It's literally paste code into a webform and someone else does it for you. Zero burden on the contributor.</p>",
        "id": 161001156,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552833713
    },
    {
        "content": "<p>If you could type the code, can copy &amp; paste, and can click thee submit button, you are good to go.</p>",
        "id": 161001204,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552833744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I agree. Is the assertion that changing from rebasing to merging results in a net negative reduction of friction across every participant? The code author, the reviewer(s), the people that look at the git history, etc.</p>",
        "id": 161001265,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552833850
    },
    {
        "content": "<p>Personally, I'm ok with requiring a basic proficiency in git and GitHub, but I also already meet those requirements so I'm not unbiased.</p>",
        "id": 161001343,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552833970
    },
    {
        "content": "<p>I don't consider dealing with rebasing and submodules to be basic git proficiency</p>",
        "id": 161001492,
        "sender_full_name": "centril",
        "timestamp": 1552834227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Do you know how much of a burden it is to me to fill out a trivial form? I have a document on my desk that I got mailed via a phyiscal letter telling me to send an email to an address on it to make an appointment with my company's health check system. I have not touched it since more than a month</p>",
        "id": 161001493,
        "sender_full_name": "oli",
        "timestamp": 1552834229
    },
    {
        "content": "<p>I just want to do the stuff, not have 3 steps in between</p>",
        "id": 161001497,
        "sender_full_name": "oli",
        "timestamp": 1552834242
    },
    {
        "content": "<p>copy paste is literally the thing I never want to see anywhere. If I can't automate it down to a single command, it's not worth doing more than once a year</p>",
        "id": 161001514,
        "sender_full_name": "oli",
        "timestamp": 1552834292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> The process I'm describing is less work than a current PR, really. You already submit a form to open the PR.</p>",
        "id": 161001570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552834362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> maybe if the form was an IDE?</p>",
        "id": 161001572,
        "sender_full_name": "centril",
        "timestamp": 1552834377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Yea, I click on the link in the command line and get the form prefilled and press \"Open Pull Request\"</p>",
        "id": 161001581,
        "sender_full_name": "oli",
        "timestamp": 1552834407
    },
    {
        "content": "<p>Anyway, to be clear (as I'm worried this isn't coming through), I don't think such a solution is a good one. It's just simply attempting to maximize the ease of contributing (evidently for the majority of people and not @oli)</p>",
        "id": 161001583,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552834431
    },
    {
        "content": "<p>Filling in an explanation or a \"fixes <a href=\"https://github.com/rust-lang/rust/issues/123592349823\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/123592349823\">#123592349823</a>\" is not a problem, but not even necessary</p>",
        "id": 161001585,
        "sender_full_name": "oli",
        "timestamp": 1552834440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  In none of the git-101 sessions I helped teach at uni was rebasing even a subject ^^</p>",
        "id": 161001627,
        "sender_full_name": "centril",
        "timestamp": 1552834461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I'd personally file that as an issue with the sessions, but again, I have bias</p>",
        "id": 161001636,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552834490
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> how could you not \"know\" how to do it? It's literally paste code into a webform and someone else does it for you. Zero burden on the contributor.</p>\n</blockquote>\n<p>There's a perceived friction vs actual friction difference at play too. If I think making a contribution will be hard (\"wait, so I need to email my patches to somewhere? what format should they be in? how do I get them in that format? what address do I email? does the subject matter?\") then even if the process is really trivial, I won't find out.</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> I agree. Is the assertion that changing from rebasing to merging results in a net negative reduction of friction across every participant? The code author, the reviewer(s), the people that look at the git history, etc.</p>\n</blockquote>\n<p>I personally don't find rebasing all that much more challenging than merging. It can just take longer. What you had suggested, having a form that you fill out and then experts do everything, reduces the friction (to some extent) on the side of the person filling the form, but that friction still exists - the person who's at the other end still needs to handle rebasing and all that - you're just putting all the friction on the lap of the experts.</p>\n<p>As I see it, the not-rocket-science rule is a good rule and that in order to do it, a patch needs to be able to be merged cleanly by a bot into master - therefore when it can't be merged cleanly, a rebase needs to happen. I think having the author perform that rebase amortizes the pain of rebasing over the most people, which is desirable.</p>",
        "id": 161001646,
        "sender_full_name": "davidtwco",
        "timestamp": 1552834514
    },
    {
        "content": "<p>\"here's a technique that is prevalent in industry, but we aren't going to teach you about it\"</p>",
        "id": 161001648,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552834522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  not really, it's more a \"and we only had time to go through this\"</p>",
        "id": 161001650,
        "sender_full_name": "centril",
        "timestamp": 1552834542
    },
    {
        "content": "<p>i.e. the things that are more basic</p>",
        "id": 161001652,
        "sender_full_name": "centril",
        "timestamp": 1552834556
    },
    {
        "content": "<p>Regardless, there is a middle ground. If contributors are incapable of rebasing, have someone do it for them. I've done it for rust-lang/rust once or twice when someone botched something.</p>",
        "id": 161001713,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552834649
    },
    {
        "content": "<p>Yes, introducing steps can reduce the absolute number of contributions; I believe that. I'm not always sure that a reduced number of contributions is a loss in the end though. This may be my elitism showing through.</p>",
        "id": 161001779,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552834763
    },
    {
        "content": "<p>Fixing a botched rebase for someone is perfectly fine, but expecting all rebasing to happen on the reviewer side would slow down reviewing even more</p>",
        "id": 161001782,
        "sender_full_name": "oli",
        "timestamp": 1552834784
    },
    {
        "content": "<p>Oh, I certainly agree. Again, I'm putting out options on how to make it possible to get <em>more contributions coming in</em>, which seemed to be the thrust of the original comments.</p>",
        "id": 161001849,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552834889
    },
    {
        "content": "<p>For me, the most interesting part of this discussion is trying to understand why rebasing is a friction point. I understand that it isn't always trivial but it's a necessary part of what we do, just as necessary as writing the code itself (which is way more complicated), so I've never really got why there's an aversion to learning and getting experience with rebasing, while there isn't with learning and getting experience with a codebase.</p>",
        "id": 161001856,
        "sender_full_name": "davidtwco",
        "timestamp": 1552834906
    },
    {
        "content": "<blockquote>\n<p>an aversion to learning and getting experience with rebasing</p>\n</blockquote>\n<p>Especially considering that rebasing is a technique that applies across code bases and languages (although only in git and not other VCS)</p>",
        "id": 161001914,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835023
    },
    {
        "content": "<blockquote>\n<p>why rebasing is a friction point</p>\n</blockquote>\n<p>Also how/why is it more friction compared to merging?</p>",
        "id": 161001967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835097
    },
    {
        "content": "<p>I think merging is more familiar; most of the pain I think involves having go back edit history + force pushing things as opposed to merge commits</p>",
        "id": 161002054,
        "sender_full_name": "centril",
        "timestamp": 1552835221
    },
    {
        "content": "<p>Pain can be acceptable but it should have a justification, that's all</p>",
        "id": 161002067,
        "sender_full_name": "centril",
        "timestamp": 1552835265
    },
    {
        "content": "<p>The best example I can think of is a test failure - if a test fails, I need to learn why that failed, there was probably a good reason, so I'll just knuckle down and get on with that. If I need to rebase, then there's a good reason for it (be that \"version control is worth it\" or \"they go by the not-rocket-science principle\"), so I just knuckle down and get on with that too. I don't understand why the reaction isn't the same for some people (that isn't to say they're wrong, I just don't have experience with it).</p>",
        "id": 161002070,
        "sender_full_name": "davidtwco",
        "timestamp": 1552835272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  I'm not in their heads so I cannot really answer that ^^, it's just something I've seen</p>",
        "id": 161002120,
        "sender_full_name": "centril",
        "timestamp": 1552835320
    }
]