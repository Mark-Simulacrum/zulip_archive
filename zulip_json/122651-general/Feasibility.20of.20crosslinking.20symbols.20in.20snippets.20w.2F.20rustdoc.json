[
    {
        "content": "<p>Hello!  I'm new to the rust-lang Zulip, so let me know if there's a better \"stream\" for this to go on of which I'm unawares.</p>\n<p>The more I use Rust documentation, the more I wish I could just click on symbols in code snippets.  To that end, I've started digging around in <code>librustdoc</code> myself.</p>\n<p>Before I get too deep into it, though, it seemed a good idea to ask <strong>how feasible would this be?</strong>  (And is anyone already working on this.)  Would this be as simple as wiring up the existing markdown-associated symbol linking functionality or are there some hidden gotchas to which I'm still naive?</p>\n<p>To the end of helping further digging on my part: is there some way to run <code>cargo doc</code> on <code>librustdoc</code>?  AFAICT <code>librustdoc</code> <em>must</em> be built from the root workspace for the <code>rust</code> repo (a number of dependencies aren't actually referenced from within the <code>librustdoc</code> <code>Cargo.toml</code>) and I've yet to craft the appropriate runic arrangement when incanting <code>cargo doc</code>.  Is there some build documentation for <code>librustdoc</code> that I've overlooked?</p>\n<p>Thank you :).</p>",
        "id": 220890457,
        "sender_full_name": "akesling",
        "timestamp": 1608843889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373624\">@akesling</span> you can see documentation for rustdoc itself at either <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/\">https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/</a> (generated) or <a href=\"https://rustc-dev-guide.rust-lang.org/rustdoc.html\">https://rustc-dev-guide.rust-lang.org/rustdoc.html</a> (guide)</p>",
        "id": 220890554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844059
    },
    {
        "content": "<p>I doubt there is anyone already working on this. It seems useful and in scope, although I'd expect it to be a fairly large project.</p>",
        "id": 220890596,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844086
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"266220\" href=\"/#narrow/stream/266220-rustdoc\">#rustdoc</a> is a better stream but I'd rather keep the discussion in one place</p>",
        "id": 220890606,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844117
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/html/format.rs#L480\">https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/html/format.rs#L480</a> is the function you want</p>",
        "id": 220890620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844167
    },
    {
        "content": "<p>this is <a href=\"https://github.com/rust-lang/rust/issues/62986#issuecomment-515274928\">https://github.com/rust-lang/rust/issues/62986#issuecomment-515274928</a> I think</p>",
        "id": 220890692,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844294
    },
    {
        "content": "<p>by code snippets, you mean source view, right?</p>",
        "id": 220890752,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844358
    },
    {
        "content": "<p>doing it in doc tests would be trickier I think</p>",
        "id": 220890756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I was specifically thinking for the snippets in the docs themselves as those are the more common things I can <em>see</em>, but general source view linking would be fabulous as well.</p>",
        "id": 220890898,
        "sender_full_name": "akesling",
        "timestamp": 1608844619
    },
    {
        "content": "<p>oof. the snippets in the docs will be a lot harder because right now rustdoc doesn't analyze them at all, just pass them through to the rust compiler for syntax highlighting</p>",
        "id": 220890904,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844656
    },
    {
        "content": "<p>and in general, not all links will be available because some symbols will only be defined in teh example itself</p>",
        "id": 220890910,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844672
    },
    {
        "content": "<p>see also <span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span>'s work on going the other way and linking from the methods to the examples: <a href=\"https://github.com/willcrichton/example-analyzer\">https://github.com/willcrichton/example-analyzer</a></p>",
        "id": 220890958,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844718
    },
    {
        "content": "<p>that has its own issues with cyclic dependencies</p>",
        "id": 220890959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608844733
    },
    {
        "content": "<p>TBH, as a user, I'd be alright with only a subset of symbols being linked.  It would still be a marked improvement over _none_.</p>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  Aren't snippets compiled at some point to test that they work?  Is the issue that the \"doc tests\" pass is just unrelated to the formatting/linking one?</p>",
        "id": 220891162,
        "sender_full_name": "akesling",
        "timestamp": 1608845022
    },
    {
        "content": "<p>correct, rustdoc doesn't <em>quite</em> run rustc as an external process on doctests, but it's pretty close</p>",
        "id": 220891214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845053
    },
    {
        "content": "<p>none of the type information is currently available</p>",
        "id": 220891216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845058
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/doctest.rs#L104\">https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/doctest.rs#L104</a></p>",
        "id": 220891226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845090
    },
    {
        "content": "<p>now you can get the information, but you'd definitely be paving new paths <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220891233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845121
    },
    {
        "content": "<p>Thank you for the info :).  Perhaps I'll start by naively rewriting <code>use</code> statements and feeding those directly into the symbol linker...  see how far that gets me to a better understanding of the larger scope of the issue :P.</p>",
        "id": 220891381,
        "sender_full_name": "akesling",
        "timestamp": 1608845310
    },
    {
        "content": "<p>'the symbol linker' takes DefIds, not strings</p>",
        "id": 220891406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845350
    },
    {
        "content": "<p>it's <code>fn href</code> that I pointed to in <a href=\"#narrow/stream/122651-general/topic/Feasibility.20of.20crosslinking.20symbols.20in.20snippets.20w.2F.20rustdoc/near/220890620\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Feasibility.20of.20crosslinking.20symbols.20in.20snippets.20w.2F.20rustdoc/near/220890620</a></p>",
        "id": 220891410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845362
    },
    {
        "content": "<p>Right, but there's <em>something</em> that goes from \"[<code>SymbolFoo</code>]\" in the markdown to that DefId, no?</p>",
        "id": 220891451,
        "sender_full_name": "akesling",
        "timestamp": 1608845402
    },
    {
        "content": "<p>if you do want to work on this, I'd suggest changing <code>HirCollector</code> to use <code>fn href</code> and finding a way to link that into <code>render</code> <a href=\"https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/doctest.rs#L946\">https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/doctest.rs#L946</a></p>",
        "id": 220891485,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373624\">akesling</span> <a href=\"#narrow/stream/122651-general/topic/Feasibility.20of.20crosslinking.20symbols.20in.20snippets.20w.2F.20rustdoc/near/220891451\">said</a>:</p>\n<blockquote>\n<p>Right, but there's <em>something</em> that goes from \"[<code>SymbolFoo</code>]\" in the markdown to that DefId, no?</p>\n</blockquote>\n<p>that requires scope information, which you don't have for strings</p>",
        "id": 220891486,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845449
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/passes/collect_intra_doc_links.rs#L767\">https://github.com/rust-lang/rust/blob/0edce6f4bbb4514482537f569f0b8ef48e71e0a0/src/librustdoc/passes/collect_intra_doc_links.rs#L767</a></p>",
        "id": 220891497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Feasibility.20of.20crosslinking.20symbols.20in.20snippets.20w.2F.20rustdoc/near/220891486\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"373624\">akesling</span> <a href=\"#narrow/stream/122651-general/topic/Feasibility.20of.20crosslinking.20symbols.20in.20snippets.20w.2F.20rustdoc/near/220891451\">said</a>:</p>\n<blockquote>\n<p>Right, but there's <em>something</em> that goes from \"[<code>SymbolFoo</code>]\" in the markdown to that DefId, no?</p>\n</blockquote>\n<p>that requires scope information, which you don't have for strings</p>\n</blockquote>\n<p>for example <code>::warp</code> won't resolve inside the crate itself, crates don't know their own names</p>",
        "id": 220891602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608845593
    },
    {
        "content": "<p>You've definitely given me plenty to chew on.  I'll continue poking around and will let you know if I have any more questions. Thank you!</p>",
        "id": 220891787,
        "sender_full_name": "akesling",
        "timestamp": 1608845845
    }
]