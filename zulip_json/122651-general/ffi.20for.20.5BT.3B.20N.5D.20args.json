[
    {
        "content": "<p>Recently we had this <a href=\"https://github.com/rust-av/av-metrics/pull/94\">PR</a> that produced something faulty, I reduced it to <a href=\"https://github.com/lu-zero/capi-testcase\">this</a>, is it a cbindgen problem or something that should be addressed in rustc ?</p>",
        "id": 198171106,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589965375
    },
    {
        "content": "<blockquote>\n<p>it's kinda ugly, but such is C interop</p>\n</blockquote>\n<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 198171686,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589965762
    },
    {
        "content": "<p>I have few ideas on how to fix it on the cbindgen side (not accepting [T; 3] arguments when generating bindings), but now I'm wondering if there is something broken on the rustc side.</p>",
        "id": 198171962,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589965927
    },
    {
        "content": "<p>Incidentally <code>f(a: *const [T; N])</code> on the rust side called as <code>T foo[N] = ...; f(foo)</code> on the C side, seems working ...</p>",
        "id": 198172083,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589966039
    },
    {
        "content": "<p>I think you'll be more likely to find an answer by asking cbindgen folks what's the expected behaviour in cbindgen. I might be wrong though, I never did C bindings in rust <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 198172331,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589966211
    },
    {
        "content": "<p>the code generated by cbindgen is faulty. That's sure.</p>",
        "id": 198172363,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589966250
    },
    {
        "content": "<p>But then, what <code>extern \"C\" fn foo(my_array: [T; N])</code> is supposed to produce ^^; ?</p>",
        "id": 198172697,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589966456
    },
    {
        "content": "<p>I think this is a bug in the improper_ctypes lint: passing arrays by value has no C equivalent, so we should warn about it when an array is used as \"top level\" type. Similar to how passing PhantomData directly is considered \"improper\", but having PhantomData occur in repr(C) structs isn't.</p>",
        "id": 198174021,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589967249
    },
    {
        "content": "<p>I vaguely recall discussing this before</p>",
        "id": 198174046,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589967269
    },
    {
        "content": "<p>you can by having this map <code>[T; N]</code> -&gt; <code>typedef struct TN { T a[N] } TN;</code></p>",
        "id": 198174127,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589967336
    },
    {
        "content": "<p>Oh, I found it and it turns out someone fixed the bug I was thinking of and the lint <em>does</em> complain nowadays: <a href=\"https://github.com/rust-lang/rust/issues/66305\">#66305</a></p>",
        "id": 198174145,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589967350
    },
    {
        "content": "<p>but not by default, I guess ^^</p>",
        "id": 198174213,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589967375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"131070\">Luca Barbato</span> <a href=\"#narrow/stream/122651-general/topic/ffi.20for.20.5BT.3B.20N.5D.20args/near/198174127\">said</a>:</p>\n<blockquote>\n<p>you can by having this map <code>[T; N]</code> -&gt; <code>typedef struct TN { T a[N] } TN;</code></p>\n</blockquote>\n<p>This is not passing an array by value, it's passing a struct by value. The Rust equivalent for that is a repr(C) struct containing an array.</p>",
        "id": 198174337,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589967445
    },
    {
        "content": "<p>C does not have arrays :P</p>",
        "id": 198174382,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589967469
    },
    {
        "content": "<p>array notation as argument is just sugar for the pointer notation ^^</p>",
        "id": 198174449,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589967490
    },
    {
        "content": "<p>I don't know what point you're trying to make.</p>",
        "id": 198174488,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589967508
    },
    {
        "content": "<p>that it should be probably either an hard error or a default on lint</p>",
        "id": 198174522,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589967535
    },
    {
        "content": "<p>Oh, right. The improper_ctypes lint <em>in general</em> (not just for by-value arrays) doesn't currently run on C-ABI functions <em>defined</em> in Rust, only in declarations from <code>extern {}</code> blocks. This is <a href=\"https://github.com/rust-lang/rust/issues/66220\">https://github.com/rust-lang/rust/issues/66220</a></p>",
        "id": 198175078,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589967858
    },
    {
        "content": "<p>I see</p>",
        "id": 198175440,
        "sender_full_name": "Luca Barbato",
        "timestamp": 1589968161
    },
    {
        "content": "<blockquote>\n<p>C does not have arrays</p>\n</blockquote>\n<p>That's an incorrect statement. C does have arrays, but it \"decays\" when it is used as a rvalue, and that's what happened in function parameters.</p>",
        "id": 198269065,
        "sender_full_name": "Gary Guo",
        "timestamp": 1590016460
    },
    {
        "content": "<p>This is likely a cbindgen bug.</p>",
        "id": 198269092,
        "sender_full_name": "Gary Guo",
        "timestamp": 1590016492
    },
    {
        "content": "<p>Right, you can tell if something is an array or pointer via typeof.</p>",
        "id": 198294751,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590047369
    },
    {
        "content": "<p>There's a macro in the Linux kernel that checks for arrayness.</p>",
        "id": 198294772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590047392
    },
    {
        "content": "<p>typeof? What is this gnu extension nonsense. sizeof however does work.</p>",
        "id": 198709491,
        "sender_full_name": "Connor Horman",
        "timestamp": 1590450673
    }
]