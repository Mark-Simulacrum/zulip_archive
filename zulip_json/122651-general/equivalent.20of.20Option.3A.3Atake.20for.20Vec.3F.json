[
    {
        "content": "<p>Given a <code>v: &amp;mut Vec&lt;T&gt;</code>, it should be possible to obtain a <code>Vec&lt;T&gt;</code> that owns the allocation of <code>v</code>, and replace <code>v</code> with an empty vector, without doing any copying or allocating. is that possible somehow?</p>",
        "id": 277658257,
        "sender_full_name": "RalfJ",
        "timestamp": 1649016198
    },
    {
        "content": "<p><code>v.drain().collect()</code> has the right type signature (with enough annotations) but would require some specialization magic to avoid copying things into a new allocation</p>",
        "id": 277658266,
        "sender_full_name": "RalfJ",
        "timestamp": 1649016225
    },
    {
        "content": "<p>Does this works for you?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// owns the allocation of v</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// now is Vec::default(), which is empty and not allocated</span>\n<span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277658418,
        "sender_full_name": "Jo√£o Marcos Bezerra",
        "timestamp": 1649016418
    },
    {
        "content": "<p>oh good point, this actually doesnt even require support from <code>Vec</code> :)</p>",
        "id": 277658803,
        "sender_full_name": "RalfJ",
        "timestamp": 1649016927
    }
]