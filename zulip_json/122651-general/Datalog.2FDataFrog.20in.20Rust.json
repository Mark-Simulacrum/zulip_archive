[
    {
        "content": "<p>I'm trying to build a Datalog-based query system in Rust. I found the <code>rust-lang/datafrog</code> crate, but I'm not sure if that's the right fit, since I want users to be able to type in custom Datalog code. Am I correct that it's not meant for users to directly interact with, or if I provide a parser will I be able to get it working? Thanks!</p>",
        "id": 228461593,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614710062
    },
    {
        "content": "<p>you might want to talk to <span class=\"user-mention\" data-user-id=\"270600\">@Chase Wilson</span>, I think he works on datalog</p>",
        "id": 228461863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614710165
    },
    {
        "content": "<p>I know <em>WG-polonius</em> uses DataFrog, so they might know too, but I don't want to ping them unnecessarily :)</p>",
        "id": 228462052,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614710247
    },
    {
        "content": "<p>AFAIK datafrog is an implementation that was put together specifically in the context of polonius. That's not to say it is bad or you shouldn't use it, just as context and idk how \"complete\" it is w.r.t. to the underlying theory. <br>\nRegarding alternative options, it depends a bit on how low- or high-level you want to go. There is <a href=\"https://docs.rs/timely/0.11.1/timely/\">https://docs.rs/timely/0.11.1/timely/</a>, which is what a lot of the other implementations build on and which you could use directly. Or you could use <a href=\"https://docs.rs/differential-dataflow/0.11.0/differential_dataflow/\">https://docs.rs/differential-dataflow/0.11.0/differential_dataflow/</a>, which is one of the things built on top. On the declarative side for actual datalog there is <a href=\"https://github.com/vmware/differential-datalog\">https://github.com/vmware/differential-datalog</a>, which has its own compiler that generates Rust code, and <a href=\"https://docs.rs/crepe/0.1.5/crepe/\">https://docs.rs/crepe/0.1.5/crepe/</a> that I know of. The latter is a macro that lets you embed Datalog rules in Rust.</p>",
        "id": 228463844,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1614710884
    },
    {
        "content": "<p>Chase will probably be able to tell you more about how those relate and what could be most helpful to you when he gets here if you give some more context on what you're trying to achieve</p>",
        "id": 228464084,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1614710966
    },
    {
        "content": "<p>I have only dipped my toes so far :D</p>",
        "id": 228464150,
        "sender_full_name": "Domenic Quirl",
        "timestamp": 1614710993
    },
    {
        "content": "<p>I wonder why Datalog engines are named after French food: you mentioned <code>crepe</code> and I've heard of one called Soufflé.</p>",
        "id": 228478225,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614716309
    },
    {
        "content": "<p>Hello! You said you're wanting to make a query system, could you elaborate on that? If you mean queries in the way that datalog has been traditionally used, I don't think any of the mentioned crates will suit your needs, as they're all targeted at computation instead of being query DSLs.</p>\n<p>In regards to options, <code>datafrog</code> probably isn't something you want to choose as it's not actively maintained (its last commit was on Mar 31, 2020) and is probably not going to be geared as a general-purpose library since it's used almost exclusively for polonius (and Frank is pretty busy with his startup). <code>crepe</code> is a good lib but I don't believe it allows dynamic compilation and it also isn't incremental, which may or may not matter to your use case. <code>ddlog</code> doesn't <em>currently</em> support dynamic compilation but the framework for it actually exists if you brought your own parser (if you choose this route I'd love to collaborate on adding it to the real deal too). DDlog is built off of <code>timely</code>/<code>differential-dataflow</code> which are libraries for data-parallel computation, they're heavily incremental and ddlog inherits that power from them. DDlog is very akin to Soufflé if you're familiar with it, however it does have the advantage of being able to use normal rust code from it. I can give more details on ddlog, timely and differential if you'd like and/or have specific questions.</p>\n<p>A more specific description of what you'd like to actually achieve would be really helpful though for pointing you in the right direction</p>",
        "id": 228491400,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1614721420
    }
]