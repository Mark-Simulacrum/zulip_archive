[
    {
        "content": "<p>Hey, I was wondering if there was an easy way to say \"use iterator A if it has items, else use iterator B\"?  I'd also like to ideally do some different maps and filters on each iterator, so using <code>Option::or_else</code> won't work without dynamic dispatch since iterator A will have  a different type than iterator B.</p>",
        "id": 238258263,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620714757
    },
    {
        "content": "<p>there isn't even a simple \"does the iterator have any items\" boolean check, so probably no trivial way.</p>",
        "id": 238259223,
        "sender_full_name": "scottmcm",
        "timestamp": 1620715484
    },
    {
        "content": "<p>The usual way to do different maps and filters is the <code>either</code> crate, since that implements <code>Iterator</code> if both implement <code>Iterator</code>.</p>",
        "id": 238259285,
        "sender_full_name": "scottmcm",
        "timestamp": 1620715533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> How is <code>either</code> supposed to work though if you use <code>map</code>? AFAICT it can't pull out the type from the <code>Map</code>?</p>",
        "id": 238263666,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620718343
    },
    {
        "content": "<p>Nevermind, it does work, it just does not give an intuitive error message if the <code>Item</code> is slightly mismatched between them.</p>",
        "id": 238265264,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620719248
    },
    {
        "content": "<blockquote>\n<p>there isn't even a simple \"does the iterator have any items\" boolean check, so probably no trivial way.</p>\n</blockquote>\n<p>It could if you add a <code>I: ExactSizeIterator</code> bound</p>",
        "id": 238287098,
        "sender_full_name": "The 8472",
        "timestamp": 1620730613
    },
    {
        "content": "<p>In some cases, you can cheat with using <code>Iterator::chain</code>, if you know that exactly one of the iterators has items. </p>\n<p>In other cases, you can use <code>Peekable</code>.</p>",
        "id": 238298202,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620736270
    },
    {
        "content": "<p>Oh, <code>Peekable</code> is a good answer, even though I went with <code>either</code> because it's pretty clean with less rightward drift.</p>",
        "id": 238599685,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620897992
    }
]