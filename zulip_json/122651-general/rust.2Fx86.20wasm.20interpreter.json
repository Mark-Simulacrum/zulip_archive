[
    {
        "content": "<p>On Rust/x86, what is the fastest interpreter? (mostly for doing a bunch of f32 tensor ops)</p>",
        "id": 198603896,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1590360726
    },
    {
        "content": "<p>Fastest interpreter, or fastest wasm runtime period? Do you need something that interprets, or can it JIT or AOT?</p>",
        "id": 198687797,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590426535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  : Great clarification. It does not need to be interpreted. Fastest period. AOT / JJIT is fine.</p>",
        "id": 198692121,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1590430873
    },
    {
        "content": "<p>Then I would suggest lucet.</p>",
        "id": 198692139,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590430903
    },
    {
        "content": "<p>It's an AOT compiler.</p>",
        "id": 198692147,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590430912
    },
    {
        "content": "<p>If you're fine with a JIT, wasmtime is easy to embed, and it's going to get an AOT mode eventually.</p>",
        "id": 198692211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590430954
    },
    {
        "content": "<p>Thanks; wasmtime / bytecodealliance seems to show up alot lately.</p>",
        "id": 198693365,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1590432007
    },
    {
        "content": "<p>:)</p>",
        "id": 198695393,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590433905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> : When using wasmtime on x86, is there a way to pass a &amp;mut [f32] from Rust to wasmtime, or does wasmtime's linear memory model (and pointers being relative offsets) require we constantly company data back &amp; forth between wasmtime 's heap memory &amp; Rust's heap memory ?</p>",
        "id": 199833968,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1591329721
    },
    {
        "content": "<p>You definitely don't need to constantly copy data, and it's possible to access data in place.</p>",
        "id": 199836918,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591334189
    },
    {
        "content": "<p>I don't remember the API for doing so offhand.</p>",
        "id": 199836927,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591334227
    },
    {
        "content": "<p>Can you give me a pointer on what to search for / where to look? Here is my current reasoning:</p>\n<ol>\n<li>This can no be done via a WAT/WASM instruction, due to the memory model / sandboxing of wasm.</li>\n<li>In \"rust crate compiled to wasm\", we can do a trick where the rust/wasm32 code and the dynamically geneerated wasm32 code \"share a heap\" by having the same offsets.</li>\n<li>It's not clear how to do this on x86.</li>\n</ol>\n<p>Is this: (1) some wasmtime api? (2) some way of getting rust/x86 and wasm32/wasmtime/x86 to 'have heap that happen to overlap' or (3) via breaking the 'liner memory model'?</p>\n<p>(Because, if the rust Vec&lt;f32&gt; is in arbitrary rust managed memory, and wasm32 code running underwasmtime can only access wasmtime managed heaps, and thsoe heaps are reuiqred to be a linear block, then the only logical consequences seem to be:</p>\n<p>(1) we have to copy from rust managed heap to wasmtime managed heap or<br>\n(2) we have to expose all of Rust's heap to wasm32 running on wasmtime or<br>\n(3) there is some way to break the 'linear memory' constraint</p>",
        "id": 199856854,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1591351809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> : ^ forgot to mention you in last msg</p>",
        "id": 199856890,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1591351847
    },
    {
        "content": "<p>First, I should point you to the Zulip chat for wasmtime and other wasm-outside-the-browser projects: <a href=\"https://bytecodealliance.zulipchat.com/\">https://bytecodealliance.zulipchat.com/</a></p>",
        "id": 199887362,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591368674
    },
    {
        "content": "<p>That would be the best place to ask this question.</p>",
        "id": 199887412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591368701
    },
    {
        "content": "<p>You definitely can't expose all of the Rust heap.</p>",
        "id": 199887570,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591368766
    },
    {
        "content": "<p>It's relatively easy to build an interface that expects to copy a slice or string into or out of linear memory.</p>",
        "id": 199888056,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591368961
    },
    {
        "content": "<p>It's harder to <em>not</em> copy, but that is a goal.</p>",
        "id": 199888161,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591368992
    },
    {
        "content": "<p>Another thing you can do is pass an opaque reference, either an <code>anyref</code> or a typed reference using reference types.</p>",
        "id": 199888491,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591369108
    },
    {
        "content": "<p>And that reference can have functions that operate on it.</p>",
        "id": 199888542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591369124
    },
    {
        "content": "<p>Those functions can then get the actual object back from the opaque reference and operate on that.</p>",
        "id": 199888709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591369197
    },
    {
        "content": "<p>So if you want a slice of floats on the Rust side, and you want wasm to pass it around without copying it, it can then pass it back to a Rust function that can recover the slice object and use it.</p>",
        "id": 199888895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591369261
    },
    {
        "content": "<p>Would that work for you, or do you want the wasm code to directly access the floats in the slice?</p>",
        "id": 199889546,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1591369543
    }
]