[
    {
        "content": "<p>Hey! Just tried to ask on IRC and got redirected to here. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , I just read your post on async-await stabilization, and wonder: how would you be able to stabilize async-await without the futures API RFC being even merged?</p>",
        "id": 159814729,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551560724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210615\">@Léo Gaspard</span> Here is a new \"topic\" for you to have this discussion on.</p>",
        "id": 159814820,
        "sender_full_name": "nagisa",
        "timestamp": 1551560878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Thanks! I don't get zulip's UI yet, guess I'll just wait for somewhere on the screen to display an answer, then try to reply, and then happily go back to IRC :°</p>",
        "id": 159814956,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551561105
    },
    {
        "content": "<p>Zulip is very good!</p>\n<p>To answer your question, ~technically~ <code>?</code> exists without the <code>Try</code> the related machinery being stable as well</p>",
        "id": 159815091,
        "sender_full_name": "nagisa",
        "timestamp": 1551561273
    },
    {
        "content": "<p>So I would imagine it being possible to do the same for <code>await</code>.</p>",
        "id": 159815094,
        "sender_full_name": "nagisa",
        "timestamp": 1551561298
    },
    {
        "content": "<p>Implementing something useful that could use the keyword would still involve nightly code, the same way implementing a <code>?</code> does.</p>",
        "id": 159815242,
        "sender_full_name": "nagisa",
        "timestamp": 1551561536
    },
    {
        "content": "<p>I guess zulip is very good, but it's a system none of the groups I'm active in uses, it's a brand new UI with brand new concepts, and I don't particularly love the UI or idea at first sight, so it's an effort I'm not willing to make for now :)<br>\n(edit: oh and it looks like threads aren't nest-able, tried to answer just your “Zulip is very good!” comment and failed to)</p>",
        "id": 159815549,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551561970
    },
    {
        "content": "<blockquote>\n<p>it's an effort I'm not willing to make for now <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>fair.</p>",
        "id": 159815574,
        "sender_full_name": "nagisa",
        "timestamp": 1551562066
    },
    {
        "content": "<p>Now… weeeell, <code>?</code> exists because there's a useful implementer of <code>Try</code> in libstd: <code>Result</code>. AFAICT there'd be no useful implementer of <code>Futures</code> in <code>std</code>, and writing stable code that's forced to use nightly-only libraries isn't really interesting, is it?</p>",
        "id": 159815576,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551562069
    },
    {
        "content": "<p>I don't really get what stabilizing it right now gets us compared to just keeping the feature gate for now, if the code has to be nightly anyway</p>",
        "id": 159815621,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551562110
    },
    {
        "content": "<p>Perhaps stabilising indeed does not provide anything much at the moment, as you cannot do anything with the <a href=\"https://doc.rust-lang.org/nightly/std/future/trait.Future.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/future/trait.Future.html\"><code>Future</code></a> that’s in the stdlib without a nightly compiler.</p>",
        "id": 159815653,
        "sender_full_name": "nagisa",
        "timestamp": 1551562192
    },
    {
        "content": "<p>However, do keep in mind that <code>async fn</code> does not necessarily expose to the end user that the function has the return type of <code>Future</code>, or that exposition can stay unstable without interfering with the basic <code>await that_fn(...)</code> use-scenario.</p>",
        "id": 159815802,
        "sender_full_name": "nagisa",
        "timestamp": 1551562381
    },
    {
        "content": "<p>In general my personal feeling is that <code>await</code> won’t be stabilised any time soon either way</p>",
        "id": 159815823,
        "sender_full_name": "nagisa",
        "timestamp": 1551562430
    },
    {
        "content": "<p>This could be seen as very similar to <code>fn foo&lt;F: Fn(...) -&gt; T&gt;</code> being stable but <code>fn foo&lt;F: Fn&lt;(...), Output=T&gt;</code> being unstable <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 159815881,
        "sender_full_name": "nagisa",
        "timestamp": 1551562518
    },
    {
        "content": "<p><a href=\"http://smallcultfollowing.com/babysteps/blog/2019/03/01/async-await-status-report/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2019/03/01/async-await-status-report/\">http://smallcultfollowing.com/babysteps/blog/2019/03/01/async-await-status-report/</a> appeared to point out that <code>await</code> was going to be stabilized soon, actually, which is exactly what triggered my inquiry</p>",
        "id": 159815941,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551562605
    },
    {
        "content": "<p>Heh, we haven’t even decided if <code>await</code> should go in prefix or postfix the expression, to the best of my knowledge.</p>",
        "id": 159816001,
        "sender_full_name": "nagisa",
        "timestamp": 1551562689
    },
    {
        "content": "<p>Heh, if I read correctly, the point of this article is “just let's do like <code>try!</code>and have a regular <code>await!()</code> macro and see later”, which… given I seem to understand that it wouldn't even be possible to actually use it stably yet, sounds to me like a bad idea to have stabilized. Now, maybe I have missed <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> 's point :)</p>",
        "id": 159816094,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551562807
    },
    {
        "content": "<p>Yeah, as the post points out there are multiple unresolved questions which is why a workgroup specifically for that has been created.</p>",
        "id": 159816130,
        "sender_full_name": "nagisa",
        "timestamp": 1551562896
    },
    {
        "content": "<p>I could see <code>async!()</code> being stabilised sooner.</p>",
        "id": 159816131,
        "sender_full_name": "nagisa",
        "timestamp": 1551562905
    },
    {
        "content": "<p>(FYI: I've moved the original question to this topic)</p>",
        "id": 159816261,
        "sender_full_name": "davidtwco",
        "timestamp": 1551563128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> black magic!</p>",
        "id": 159816396,
        "sender_full_name": "nagisa",
        "timestamp": 1551563348
    },
    {
        "content": "<p>If we can stabilize a usable subset of async that would be a great upgrade from where things are today. Personally I'm ok with async! macro format as it hints there's magic under the covers. The biggest question I have is what can I do to help... Ah I see I should be reading here:<a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await\">https://rust-lang.zulipchat.com/#narrow/stream/187312-t-compiler.2Fwg-async-await</a></p>",
        "id": 159832880,
        "sender_full_name": "Giles Cope",
        "timestamp": 1551591300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> The question is what exactly would be stabilized: if the <code>Futures</code> API RFC is not stabilized (and as it's not even merged yet it can't be stabilized), then a stable subset of async wouldn't be useful for anything that I know of</p>",
        "id": 159857731,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1551635424
    },
    {
        "content": "<p>I see your point, they are pretty intertwined. I was assuming that this push would be to get futures into a mvp shippable state as well as async. Async without futures would have no future? ;-)</p>",
        "id": 159858376,
        "sender_full_name": "Giles Cope",
        "timestamp": 1551636433
    }
]