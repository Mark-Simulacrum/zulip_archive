[
    {
        "content": "<p>More work on mrustc lifetime checking. Found the following code in 1.54's liballoc and couldn't find reference in the reference or the book as to how this is inferred to capture <code>'b</code>. I'm guessing that it just captures any lifetime mentioned in the ATYs, but would like confirmation.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">PairSlices</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">remainder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273320365,
        "sender_full_name": "John Hodge (Mutabah)",
        "timestamp": 1645854444
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/1951-expand-impl-trait.html#scoping-for-type-and-lifetime-parameters\">https://rust-lang.github.io/rfcs/1951-expand-impl-trait.html#scoping-for-type-and-lifetime-parameters</a></p>",
        "id": 273329705,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645867773
    },
    {
        "content": "<p>So basically, all generic type parameters captured unconditionally, but lifetime parameters only when they're mentioned.</p>",
        "id": 273329911,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645867890
    },
    {
        "content": "<p>Neat, thanks. Will read the link and integrate</p>",
        "id": 273330045,
        "sender_full_name": "John Hodge (Mutabah)",
        "timestamp": 1645868085
    }
]