[
    {
        "content": "<p>What's the right way to apply a patch to a vendored dependency in the rustc source tarball?<br>\nIf I directly modify it, I have to update the checksum file, which is fragile and will break every version.<br>\nIf I use a [patch] entry in Cargo.toml, it needs to regenerate the lockfile, and so frozen breaks it.</p>\n<p>(The context is <a href=\"https://android.googlesource.com/toolchain/android_rust/+/refs/heads/master/patches/rustc-0005-Remove-special-cased-darwin-compiler-rt-support.patch\" title=\"https://android.googlesource.com/toolchain/android_rust/+/refs/heads/master/patches/rustc-0005-Remove-special-cased-darwin-compiler-rt-support.patch\">https://android.googlesource.com/toolchain/android_rust/+/refs/heads/master/patches/rustc-0005-Remove-special-cased-darwin-compiler-rt-support.patch</a> which probably doesn't make sense to actually upstream, since it is only needed due to a quirk of our build environment)</p>",
        "id": 192300188,
        "sender_full_name": "Matthew Maurer",
        "timestamp": 1585593962
    },
    {
        "content": "<p>If you add a <code>[patch]</code> entry in <code>Cargo.toml</code>, you can run <code>cargo fetch</code>. It is meant to download all dependencies from the internet when necessary, but it has the side effect of updating <code>Cargo.lock</code> for changes to <code>Cargo.toml</code>. It is a bit of a hack, but it should work.</p>",
        "id": 192303249,
        "sender_full_name": "bjorn3",
        "timestamp": 1585595285
    },
    {
        "content": "<p>Ah yeah, so I can have a patch which adds a <code>[patch]</code> entry to <code>Cargo.toml</code>, then run <code>cargo fetch --offline</code> to fixup. This seems to almost work, but the <code>.cargo/config</code> that replaces crates-io with a vendored copy only appears during the execution of <code>bootstrap.py</code>, and without it cargo fetch will attempt to actually fetch sources and fail.</p>\n<p>I can work around this in my build script by running <code>x.py --help</code>, <em>expecting</em> failure, and then running <code>cargo fetch --offline</code>, but this does seem a little icky. I don't see any user facing way to trigger the <code>.cargo/config</code> generation otherwise though</p>",
        "id": 192317853,
        "sender_full_name": "Matthew Maurer",
        "timestamp": 1585602652
    },
    {
        "content": "<p>In Fedora, I just clear the files list in <code>.cargo-checksum.json</code>. An empty list always passes validation. :)</p>",
        "id": 192320616,
        "sender_full_name": "cuviper",
        "timestamp": 1585604260
    },
    {
        "content": "<p>e.g. <a href=\"https://src.fedoraproject.org/rpms/rust/blob/3d7a297b89c75d8f59c13af52f6cdaf26785172f/f/rust.spec#_457\" title=\"https://src.fedoraproject.org/rpms/rust/blob/3d7a297b89c75d8f59c13af52f6cdaf26785172f/f/rust.spec#_457\">https://src.fedoraproject.org/rpms/rust/blob/3d7a297b89c75d8f59c13af52f6cdaf26785172f/f/rust.spec#_457</a></p>",
        "id": 192320621,
        "sender_full_name": "cuviper",
        "timestamp": 1585604266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> I think I like the patch approach a little better anyways, since it might allow us to add incremental support to our presubmit checks for this project someday, but I'll keep it in mind, thanks.</p>",
        "id": 192321345,
        "sender_full_name": "Matthew Maurer",
        "timestamp": 1585604710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> Debian nukes the checksum file as well, for the same reason.</p>",
        "id": 192400106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585666376
    }
]