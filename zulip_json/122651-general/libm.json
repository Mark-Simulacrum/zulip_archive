[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I'm not sure which problem your libm PR solves. You mention that:</p>",
        "id": 172750790,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256666
    },
    {
        "content": "<blockquote>\n<p>ah, but that's not stable. this code is. that's why i did not also add a neon version, I'm only out to help out stable rust today.</p>\n</blockquote>",
        "id": 172750795,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256677
    },
    {
        "content": "<p>But stable Rust code can just call <code>f64::sqrt(x)</code></p>",
        "id": 172750798,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256684
    },
    {
        "content": "<p>That will do the right thing, be it calling the C math library of the target, if it has one, or calling the <code>libm::sqrt</code> function if the target doesn't have one</p>",
        "id": 172750805,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256713
    },
    {
        "content": "<p>in which case <code>libm::sqrt</code> gets pulled via compiler-builtins into libstd</p>",
        "id": 172750847,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256724
    },
    {
        "content": "<p>and compiler-builtins can be compiled using nightly Rust</p>",
        "id": 172750855,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256733
    },
    {
        "content": "<p>it is even linked to libcore</p>",
        "id": 172750866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256767
    },
    {
        "content": "<p>stable, core only code cannot</p>",
        "id": 172750952,
        "sender_full_name": "Lokathor",
        "timestamp": 1565256859
    },
    {
        "content": "<p>have you tried ?</p>",
        "id": 172750990,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565256929
    },
    {
        "content": "<p>.......yes?</p>",
        "id": 172751001,
        "sender_full_name": "Lokathor",
        "timestamp": 1565256957
    },
    {
        "content": "<p>how ?</p>",
        "id": 172751090,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257029
    },
    {
        "content": "<p>fn do_it(f: f32) -&gt; f32 {<br>\n  f.sqrt()<br>\n}</p>",
        "id": 172751092,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257032
    },
    {
        "content": "<p>you need to write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172751096,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257044
    },
    {
        "content": "<p>sqrt(x)</p>",
        "id": 172751099,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257048
    },
    {
        "content": "<p>(I think, I'm not sure of the symbol name)</p>",
        "id": 172751108,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257063
    },
    {
        "content": "<p>should be the same name as the one in the libm crate</p>",
        "id": 172751115,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257073
    },
    {
        "content": "<p>well that's pretty nifty but also _who would ever guess that_ :P</p>",
        "id": 172751157,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257089
    },
    {
        "content": "<p>nobody</p>",
        "id": 172751168,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257099
    },
    {
        "content": "<p>i was just pointing out that these are available for core only targets</p>",
        "id": 172751175,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257114
    },
    {
        "content": "<p>because compiler-builtins is linked to those, and we expose the libm functions there using <code>#[no_mangle]</code></p>",
        "id": 172751190,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257132
    },
    {
        "content": "<p>if some function isn't exposed for a target, you might want to send a PR to compiler-builtins to do that</p>",
        "id": 172751206,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257148
    },
    {
        "content": "<p>if you want to allow <code>(x: f64).sqrt()</code> in libcore, you probably will need a PR to rust-lang/rust, putting that behind a feature gate, an RFC, etc.</p>",
        "id": 172751219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257190
    },
    {
        "content": "<p>well document everything you just said way better because me and everyone I know just literally puts libm as a dependency and then calls it manually</p>",
        "id": 172751221,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257193
    },
    {
        "content": "<p>that's probably very bad</p>",
        "id": 172751274,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257216
    },
    {
        "content": "<p>if you do that, llvm cannot optimize any math you do</p>",
        "id": 172751275,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257224
    },
    {
        "content": "<p>I don't care specifically if it's a method or not</p>",
        "id": 172751278,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257232
    },
    {
        "content": "<p>e.g. sqrt(0.0) is optimized by LLVM to 0.0</p>",
        "id": 172751279,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257233
    },
    {
        "content": "<p>and yes, _now you see why i wanted the sse PR_</p>",
        "id": 172751282,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257246
    },
    {
        "content": "<p>but if you call a libm::sqrt function, it won't optimize that away</p>",
        "id": 172751283,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257247
    },
    {
        "content": "<p>(unless you use the core::intrinsic)</p>",
        "id": 172751293,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257268
    },
    {
        "content": "<p>so using libm directly \"can be done\", but I don't know any good reason to actually do that in practice</p>",
        "id": 172751302,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257296
    },
    {
        "content": "<p>well it's 340am, so I'll handle this another time</p>",
        "id": 172751303,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257297
    },
    {
        "content": "<p>but this was illuminating</p>",
        "id": 172751306,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257312
    },
    {
        "content": "<p>i think this might have been the way to do this, before libm was pulled into compiler-builtins</p>",
        "id": 172751344,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257323
    },
    {
        "content": "<p>to support wasm32 math</p>",
        "id": 172751348,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257327
    },
    {
        "content": "<p>in libstd</p>",
        "id": 172751350,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257329
    },
    {
        "content": "<p>we should probably expose the f32 and 64 math methods from libcore, and tell people to just use that</p>",
        "id": 172751355,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257357
    },
    {
        "content": "<p>yeah, yall should</p>",
        "id": 172751625,
        "sender_full_name": "Lokathor",
        "timestamp": 1565257692
    },
    {
        "content": "<p>PRs welcome I think</p>",
        "id": 172751662,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257802
    },
    {
        "content": "<p>most of the work would probably be in removing the hacks that we currently use in libstd to add inherent methods to the f32 and f64 types, which are defined in libcore <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 172751731,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257862
    },
    {
        "content": "<blockquote>\n<p>because compiler-builtins is linked to those, and we expose the libm functions there using <code>#[no_mangle]</code></p>\n</blockquote>\n<p>ah that's why <code>extern \"C\" { fn ldexp(...) }</code> works?</p>",
        "id": 172751739,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257874
    },
    {
        "content": "<p>yes, the functions exist in the binary</p>",
        "id": 172751749,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257914
    },
    {
        "content": "<p>they are just not exposed in any form</p>",
        "id": 172751752,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257920
    },
    {
        "content": "<p>if you link libstd, they are available on all targets</p>",
        "id": 172751794,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257933
    },
    {
        "content": "<p>is that a stable guarantee?</p>",
        "id": 172751798,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257948
    },
    {
        "content": "<p>either because the C library is linked, which has symbols for them, or because we provide symbols for them in compiler-builtins</p>",
        "id": 172751802,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257956
    },
    {
        "content": "<p>no, otherwise we would expose the methods in libcore already</p>",
        "id": 172751806,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257966
    },
    {
        "content": "<p>i don't think we'll ever guarantee anything about the symbol names</p>",
        "id": 172751811,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257976
    },
    {
        "content": "<p>okay. in Miri we currently implement <code>ldexp</code> using <code>pow</code> to avoid having to rely on this...</p>",
        "id": 172751821,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257988
    },
    {
        "content": "<p>we'll probably just expose the methods in libcore, and these should do the right thing</p>",
        "id": 172751822,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257988
    },
    {
        "content": "<p>why?</p>",
        "id": 172751827,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565257999
    },
    {
        "content": "<p>to avoid having to rely on this</p>",
        "id": 172751831,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258008
    },
    {
        "content": "<p>wait, do we have a ldexp method for f64 in libstd ?</p>",
        "id": 172751833,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258013
    },
    {
        "content": "<p>if not, you can just add one I think</p>",
        "id": 172751836,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258019
    },
    {
        "content": "<p>I mean all we saw was libcore tests using this <code>extern \"C\"</code> thing for <code>ldexp</code> and we were like \"huh okay I guess that works but not sure if we should rely on it\"</p>",
        "id": 172751887,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258044
    },
    {
        "content": "<p>ah what ?</p>",
        "id": 172751892,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258054
    },
    {
        "content": "<blockquote>\n<p>wait, do we have a ldexp method for f64 in libstd ?</p>\n</blockquote>\n<p>no. it was removed, I think, when also a bunch of other more fancy math methods got nixed.</p>",
        "id": 172751895,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258062
    },
    {
        "content": "<p>where are those tests lol</p>",
        "id": 172751896,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258063
    },
    {
        "content": "<p><code>float_extra</code> or so</p>",
        "id": 172751899,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258067
    },
    {
        "content": "<p>haha</p>",
        "id": 172751903,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258075
    },
    {
        "content": "<blockquote>\n<p>where are those tests lol</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/04523404bcae5904fe29a54122040a7101f5c652/src/libcore/tests/num/flt2dec/mod.rs#L88\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/04523404bcae5904fe29a54122040a7101f5c652/src/libcore/tests/num/flt2dec/mod.rs#L88\">https://github.com/rust-lang/rust/blob/04523404bcae5904fe29a54122040a7101f5c652/src/libcore/tests/num/flt2dec/mod.rs#L88</a></p>",
        "id": 172751921,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258115
    },
    {
        "content": "<p>yeah</p>",
        "id": 172751974,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258167
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/miri/issues/821\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/821\">https://github.com/rust-lang/miri/issues/821</a> for the Miri side</p>",
        "id": 172751979,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258172
    },
    {
        "content": "<p>i don't know if these are available for all targets that Rust currently supports</p>",
        "id": 172751982,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258182
    },
    {
        "content": "<p>we don't run these tests for all of them</p>",
        "id": 172751984,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258187
    },
    {
        "content": "<p>they are definetely available for a lot of targets</p>",
        "id": 172751986,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258194
    },
    {
        "content": "<p>that link a C library</p>",
        "id": 172751987,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258200
    },
    {
        "content": "<p>making this play nice with no_std binaries might need some massaging</p>",
        "id": 172751997,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258224
    },
    {
        "content": "<p>(we only want to expose symbols in compiler-builtins ifff no C library is linked, or the C library linked does not have symbols for these)</p>",
        "id": 172752011,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258276
    },
    {
        "content": "<p>well if you notice them ever becoming available in a stable fashion (whether in libcore or libstd I don't care) please ping me ;)</p>",
        "id": 172752060,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258300
    },
    {
        "content": "<p>this might mean that to support everything we might need to handle libm separately from the rest of compiler builtins</p>",
        "id": 172752061,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> If miri requires libstd I think it is reasonable to assume that they are available</p>",
        "id": 172752076,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258337
    },
    {
        "content": "<p>yeah it does, it requires librustc_mir^^</p>",
        "id": 172752094,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258366
    },
    {
        "content": "<p>So I would only worry about them not being available if a user complains.</p>",
        "id": 172752154,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258419
    },
    {
        "content": "<p>And then, it is probably worth it to fix this at the rust-lang/rust level</p>",
        "id": 172752169,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565258458
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 172752244,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258533
    },
    {
        "content": "<p>thanks</p>",
        "id": 172752247,
        "sender_full_name": "RalfJ",
        "timestamp": 1565258534
    },
    {
        "content": "<p><code>ldexp</code> is a bit-manipulation function</p>",
        "id": 172779532,
        "sender_full_name": "nagisa",
        "timestamp": 1565281307
    },
    {
        "content": "<p>(<a href=\"https://github.com/nagisa/math.rs/blob/master/src/scalbln.rs\" target=\"_blank\" title=\"https://github.com/nagisa/math.rs/blob/master/src/scalbln.rs\">https://github.com/nagisa/math.rs/blob/master/src/scalbln.rs</a> here’s a pure-rust implementation of the thing for you)</p>",
        "id": 172779644,
        "sender_full_name": "nagisa",
        "timestamp": 1565281398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> does that mean we could reasonably have it host-independent in apfloat? :D</p>",
        "id": 172831591,
        "sender_full_name": "RalfJ",
        "timestamp": 1565336028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> we already have it though?</p>",
        "id": 172866962,
        "sender_full_name": "eddyb",
        "timestamp": 1565369225
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566\">https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566</a></p>",
        "id": 172866986,
        "sender_full_name": "eddyb",
        "timestamp": 1565369251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <a href=\"https://travis-ci.org/Lokathor/lokacore/builds/569914277\" target=\"_blank\" title=\"https://travis-ci.org/Lokathor/lokacore/builds/569914277\">https://travis-ci.org/Lokathor/lokacore/builds/569914277</a> we're down to just one build error this time.</p>\n<p>Looks like the wasm32-unknown-unknown still misbehaves</p>",
        "id": 172868751,
        "sender_full_name": "Lokathor",
        "timestamp": 1565370440
    },
    {
        "content": "<p>yep: <a href=\"https://github.com/rust-lang-nursery/compiler-builtins/blob/master/src/math.rs#L25\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/compiler-builtins/blob/master/src/math.rs#L25\">https://github.com/rust-lang-nursery/compiler-builtins/blob/master/src/math.rs#L25</a></p>",
        "id": 172869098,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370695
    },
    {
        "content": "<p>note that for wasm32 we only link <code>libm</code> if the <code>target_os = wasi</code></p>",
        "id": 172869106,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370705
    },
    {
        "content": "<p>you can just use the <code>libm</code> crate for that target, but if you have checked what it does</p>",
        "id": 172869179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370737
    },
    {
        "content": "<p>you are going to need nightly to properly compile it</p>",
        "id": 172869192,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370750
    },
    {
        "content": "<p>otherwise <code>sqrtf32</code> won't lower to a <code>f32.sqrt</code> wasm instruction</p>",
        "id": 172869208,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370765
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/libm/blob/master/src/math/sqrtf.rs#L28\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/libm/blob/master/src/math/sqrtf.rs#L28\">https://github.com/rust-lang-nursery/libm/blob/master/src/math/sqrtf.rs#L28</a></p>",
        "id": 172869251,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370803
    },
    {
        "content": "<p>so that does the right thing, but only if you compile libm with nightly Rust and enable the unstable feature I think</p>",
        "id": 172869280,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370831
    },
    {
        "content": "<p>the proper fix here is probably to link libm in compiler-builtins for the wasm32-unknown-unknown target</p>",
        "id": 172869553,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370884
    },
    {
        "content": "<p>so that the symbols are available, but you are going to have to open an issue to discuss that first I think</p>",
        "id": 172869626,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370933
    },
    {
        "content": "<p>or at least talk with alex and see if they think doing that would be ok</p>",
        "id": 172869637,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370942
    },
    {
        "content": "<p>calling the stable libm functions on wasm32 is just horrible</p>",
        "id": 172869649,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565370957
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566\">https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566</a></p>\n</blockquote>\n<p>so <code>scalb</code> is <code>ldexp</code>? Or <code>frexp</code> is?</p>",
        "id": 172870573,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  how on Earth should one know that it's the same thing if it has a different name and isn't even documented to be the same thing?^^</p>",
        "id": 172870603,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371599
    },
    {
        "content": "<p>I'm actually not sure lol</p>",
        "id": 172870650,
        "sender_full_name": "eddyb",
        "timestamp": 1565371637
    },
    {
        "content": "<p>I just saw <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s link having <code>scalbn</code> in it</p>",
        "id": 172870667,
        "sender_full_name": "eddyb",
        "timestamp": 1565371649
    },
    {
        "content": "<p>okay <code>frexp</code> is something else, there's a C thing with the same name</p>",
        "id": 172870690,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371664
    },
    {
        "content": "<p>I should've made that range shorter, frexp is not relevant (it basically lets you read the exponent)</p>",
        "id": 172870700,
        "sender_full_name": "eddyb",
        "timestamp": 1565371671
    },
    {
        "content": "<p>so that leaves \"are <code>ldexp</code> and <code>scalbn</code> the same thing?\"</p>",
        "id": 172870708,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371675
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566\">https://github.com/rust-lang/rust/blob/master/src/librustc_apfloat/lib.rs#L553-L566</a></p>\n</blockquote>\n<p>so <code>scalb</code> is <code>ldexp</code>? Or <code>frexp</code> is?</p>\n</blockquote>\n<p>ldexp is scalbn</p>",
        "id": 172870712,
        "sender_full_name": "nagisa",
        "timestamp": 1565371679
    },
    {
        "content": "<p>okay</p>",
        "id": 172870773,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371703
    },
    {
        "content": "<p>well good thing that both names are just letter soup for me ;)</p>",
        "id": 172870780,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371711
    },
    {
        "content": "<p><a href=\"https://github.com/nagisa/math.rs/blob/master/src/ldexp.rs#L6\" target=\"_blank\" title=\"https://github.com/nagisa/math.rs/blob/master/src/ldexp.rs#L6\">https://github.com/nagisa/math.rs/blob/master/src/ldexp.rs#L6</a></p>",
        "id": 172870792,
        "sender_full_name": "nagisa",
        "timestamp": 1565371718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I saw that. It doesn't really <em>explain</em> anything though.^^</p>",
        "id": 172870999,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371843
    },
    {
        "content": "<p>other than saying the two are the same, okay</p>",
        "id": 172871002,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371847
    },
    {
        "content": "<p>Well, you could look at the source for muslc or something</p>",
        "id": 172871026,
        "sender_full_name": "nagisa",
        "timestamp": 1565371863
    },
    {
        "content": "<p>(but it's not like I would have had any chance of finding that when I wonder about <code>ldexp</code> in apfloat)</p>",
        "id": 172871048,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371875
    },
    {
        "content": "<p><a href=\"https://git.musl-libc.org/cgit/musl/tree/src/math/ldexp.c\" target=\"_blank\" title=\"https://git.musl-libc.org/cgit/musl/tree/src/math/ldexp.c\">https://git.musl-libc.org/cgit/musl/tree/src/math/ldexp.c</a></p>",
        "id": 172871061,
        "sender_full_name": "nagisa",
        "timestamp": 1565371884
    },
    {
        "content": "<p>uh, I dont usually start reading my libc source when I want to figure out if apfloat has some operation^^</p>",
        "id": 172871065,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371889
    },
    {
        "content": "<p>I assumed <code>ldexp</code> was the canonical name everyone used for this. I think that's a reasonable assumption because it's not like most math functions have 2 entirely unrelated names. I was wrong though and you told me when I asked, so all is good. :D</p>",
        "id": 172871157,
        "sender_full_name": "RalfJ",
        "timestamp": 1565371939
    },
    {
        "content": "<p>Cruft is real.</p>",
        "id": 172871191,
        "sender_full_name": "nagisa",
        "timestamp": 1565371966
    },
    {
        "content": "<p>and here's the docs PR: <a href=\"https://github.com/rust-lang/rust/pull/63416\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63416\">https://github.com/rust-lang/rust/pull/63416</a></p>",
        "id": 172871240,
        "sender_full_name": "RalfJ",
        "timestamp": 1565372004
    },
    {
        "content": "<p>nah <a href=\"https://en.cppreference.com/w/c/numeric/math/scalbn\" target=\"_blank\" title=\"https://en.cppreference.com/w/c/numeric/math/scalbn\">https://en.cppreference.com/w/c/numeric/math/scalbn</a></p>",
        "id": 172871369,
        "sender_full_name": "eddyb",
        "timestamp": 1565372083
    },
    {
        "content": "<p>both exist in C</p>",
        "id": 172871375,
        "sender_full_name": "eddyb",
        "timestamp": 1565372085
    },
    {
        "content": "<p>also, I'd suggest getting docs into LLVM and backporting to Rust</p>",
        "id": 172871402,
        "sender_full_name": "eddyb",
        "timestamp": 1565372100
    },
    {
        "content": "<p>for... complicated reasons</p>",
        "id": 172871413,
        "sender_full_name": "eddyb",
        "timestamp": 1565372107
    },
    {
        "content": "<blockquote>\n<p>On binary systems (where FLT_RADIX is 2), scalbn is equivalent to ldexp.</p>\n</blockquote>",
        "id": 172871423,
        "sender_full_name": "RalfJ",
        "timestamp": 1565372114
    },
    {
        "content": "<blockquote>\n<p>On binary systems (where FLT_RADIX is 2), scalbn is equivalent to ldexp.</p>\n</blockquote>",
        "id": 172871430,
        "sender_full_name": "eddyb",
        "timestamp": 1565372118
    },
    {
        "content": "<p>OMG</p>",
        "id": 172871431,
        "sender_full_name": "RalfJ",
        "timestamp": 1565372118
    },
    {
        "content": "<p>ah that is why they may differ</p>",
        "id": 172871438,
        "sender_full_name": "eddyb",
        "timestamp": 1565372125
    },
    {
        "content": "<p>right</p>",
        "id": 172871440,
        "sender_full_name": "eddyb",
        "timestamp": 1565372126
    },
    {
        "content": "<p>ldexp does something else on decimal</p>",
        "id": 172871450,
        "sender_full_name": "eddyb",
        "timestamp": 1565372131
    },
    {
        "content": "<p>whereas the b(n?) in scalbn is binary</p>",
        "id": 172871459,
        "sender_full_name": "eddyb",
        "timestamp": 1565372139
    },
    {
        "content": "<p>okay</p>",
        "id": 172871553,
        "sender_full_name": "RalfJ",
        "timestamp": 1565372186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> so I should open an issue in the <code>compiler-builtins</code> repo about the missing sqrt?</p>",
        "id": 172871555,
        "sender_full_name": "Lokathor",
        "timestamp": 1565372189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> more like, in general, whether all of them should be exposed for the target, or why are they only exposed for wasi ?</p>",
        "id": 172871623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565372245
    },
    {
        "content": "<p>On <strong>binary systems</strong> (where FLT_RADIX is 2), scalbn is equivalent to ldexp.</p>",
        "id": 172871792,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565372338
    },
    {
        "content": "<p>so...</p>",
        "id": 172872046,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565372500
    },
    {
        "content": "<p>we do support s390x-unknown-linux-gnu</p>",
        "id": 172872075,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565372519
    },
    {
        "content": "<p>is FLT_RADIX == 16 there ?</p>",
        "id": 172872127,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565372527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> ^^^</p>",
        "id": 172872213,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565372597
    },
    {
        "content": "<p><a href=\"https://github.com/llvm-mirror/clang/blob/master/test/Preprocessor/init.c#L7831\" target=\"_blank\" title=\"https://github.com/llvm-mirror/clang/blob/master/test/Preprocessor/init.c#L7831\">https://github.com/llvm-mirror/clang/blob/master/test/Preprocessor/init.c#L7831</a> says it's 2</p>",
        "id": 172872339,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565372668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> so should I change the comment in <a href=\"https://github.com/rust-lang/rust/pull/63416\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63416\">https://github.com/rust-lang/rust/pull/63416</a> ? What should it say? I doubt we support non-binary systems...</p>",
        "id": 172872736,
        "sender_full_name": "RalfJ",
        "timestamp": 1565372919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <a href=\"https://github.com/rust-lang-nursery/compiler-builtins/issues/308\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/compiler-builtins/issues/308\">https://github.com/rust-lang-nursery/compiler-builtins/issues/308</a></p>",
        "id": 172873716,
        "sender_full_name": "Lokathor",
        "timestamp": 1565373525
    },
    {
        "content": "<p>Does IEEE-754 not specify float radix?</p>",
        "id": 172874753,
        "sender_full_name": "nagisa",
        "timestamp": 1565374252
    },
    {
        "content": "<p>I’m pretty sure it does specify the binary representation of f32 and f64 at the very least.</p>",
        "id": 172874793,
        "sender_full_name": "nagisa",
        "timestamp": 1565374284
    },
    {
        "content": "<p>though again, I don’t have the whole spec in my head</p>",
        "id": 172874810,
        "sender_full_name": "nagisa",
        "timestamp": 1565374299
    },
    {
        "content": "<p>The binary rep is specified, yes</p>",
        "id": 172875873,
        "sender_full_name": "Lokathor",
        "timestamp": 1565375094
    },
    {
        "content": "<p>IEEE 754 does specify only binary (and decimal) floats, but the world isn't (or at least hasn't always been) entirely composed of IEEE 754 implementations</p>",
        "id": 172875933,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565375128
    },
    {
        "content": "<p>The base-16 radix used in the IBM 360/370, which was done for implementation compatibility with radix-10 decimal floating point, was a disaster for accurate computation. Numerical analysts demonstrated massive problems, including non-convergence of classical algorithms that <strong>always</strong> converge for any system approximating the rules of arithmetic. Thus non-decimal IEEE floating point uses radix 2.</p>",
        "id": 172876011,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1565375177
    },
    {
        "content": "<p>what does radix-16 FP do different than radix-2? I mean I guess the radix is somehow represented in base 16, but given that has to be mapped to binary eventually, what difference does that make?</p>",
        "id": 172876220,
        "sender_full_name": "RalfJ",
        "timestamp": 1565375327
    },
    {
        "content": "<p>Radix-16 means that alignment shifts are in 4-bit nibbles rather than single bit. The easiest way to understand radix-16 is to consider decimal arithmetic with a 4-bit BCD representation for every digit and special coding (e.g., <code>0xA</code>, <code>0xB</code>) for sign bits. The operations are those you learned in school, shifting by 4-bit groups to maintain alignment. IIRC, even Newton-Raphson iteration of <code>sqrt</code> can fail to converge in the IBM 360/370 radix-16 floating point.</p>",
        "id": 172879990,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1565377558
    },
    {
        "content": "<blockquote>\n<p>IEEE 754 does specify only binary (and decimal) floats, but the world isn't (or at least hasn't always been) entirely composed of IEEE 754 implementations</p>\n</blockquote>\n<p>I’m pretty sure we only support IEEE 754 floats in Rust, much like we only support two’s complement.</p>",
        "id": 172880545,
        "sender_full_name": "nagisa",
        "timestamp": 1565377988
    },
    {
        "content": "<blockquote>\n<p>@gnzlbg <a href=\"https://github.com/rust-lang-nursery/compiler-builtins/issues/308\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/compiler-builtins/issues/308\">https://github.com/rust-lang-nursery/compiler-builtins/issues/308</a></p>\n</blockquote>\n<p>yep, for wasm32 there is never a symbol, so one never needs to add anything to compiler-builtins</p>",
        "id": 172929316,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565451741
    }
]