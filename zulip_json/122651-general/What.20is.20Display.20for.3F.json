[
    {
        "content": "<p>It has been said that <code>Display</code> is for showing output to users. This confuses me. The trait is very inflexible, you're stuck with whatever the library author decided. This can lead to inconsistent output if you pull in many different crates with different ideas for their display strings. It also doesn't allow for adjusting the output for the context.</p>\n<p>In general it doesn't allow for translations (in both the sense of formatting and in the sense of language and locale). To me this suggests it's more for quick 'n dirty output or for when there's very obviously only one string representation of the type.</p>\n<p>Have I misunderstood this trait?</p>",
        "id": 211103929,
        "sender_full_name": "Chris Denton",
        "timestamp": 1600937455
    },
    {
        "content": "<p>yeah, it's true that Display trait not support localization. <br>\nHowever, Display do what crate author decided for their types is good, since if the members of that type is private,<br>\nhow can you access it to do your own Display ?</p>",
        "id": 211104334,
        "sender_full_name": "lzutao",
        "timestamp": 1600937711
    },
    {
        "content": "<p>I think that's a problem I have with it. If the <code>Display</code> string includes details not otherwise accessible then if you want to do any customization or localization you end up having to parse the string... which is far from ideal.</p>",
        "id": 211104547,
        "sender_full_name": "Chris Denton",
        "timestamp": 1600937852
    },
    {
        "content": "<p>You're not wrong, the design of <code>Display</code> is mostly \"not that good\"</p>",
        "id": 211147169,
        "sender_full_name": "Lokathor",
        "timestamp": 1600960973
    },
    {
        "content": "<p>well it makes sense that the crate which defines the type should define how the type is displayed. Besides that orphan rules might be another problem you'll encounter</p>",
        "id": 211150334,
        "sender_full_name": "DPC",
        "timestamp": 1600962396
    },
    {
        "content": "<p>IMHO read <code>Display</code> as \"a human readable representation more close to natural language then debug\".</p>\n<p>I.e. it's not at all build to be used for a user interface. Through it might work for a cli. </p>\n<p>I think it's mainly useful for logging or (not end-user facing) error messages for e.g. error reports.</p>\n<p>I.e. anything facing IT people.</p>\n<p>Btw. there should not be be any runtime information only available through Display formatting, I would treat that as a bug. (Through one which can happen very easy).</p>",
        "id": 211319991,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601069286
    },
    {
        "content": "<blockquote>\n<p>Btw. there should not be be any runtime information only available through Display formatting, I would treat that as a bug. (Through one which can happen very easy).</p>\n</blockquote>\n<p><a href=\"https://github.com/launchbadge/sqlx/pull/701\">https://github.com/launchbadge/sqlx/pull/701</a></p>",
        "id": 211320613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601069653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209646\">Philipp Korber</span> <a href=\"#narrow/stream/122651-general/topic/What.20is.20Display.20for.3F/near/211319991\">said</a>:</p>\n<blockquote>\n<p>I think it's mainly useful for logging or (not end-user facing) error messages for e.g. error reports.</p>\n</blockquote>\n<p>Thanks! So perhaps a better slogan is \"Display is for logs\"? While this isn't the full extent of what it's used for, it is perhaps a better mindset than the vague \"for users\".</p>",
        "id": 211351982,
        "sender_full_name": "Chris Denton",
        "timestamp": 1601113241
    },
    {
        "content": "<p>I feel like that's confusing because Debug is also sometimes used for logs :/</p>",
        "id": 211358803,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601124922
    },
    {
        "content": "<p>It is, I think the important takeaway is that display isn't designed for being used for a end user facing UI as it's basically debug but more human readable. But end user facing UI need much more than that (like localization, potential contextual changes like short and long info, potential non utf-8 encoding, potential non-string output (e.g. multiple UI elements), potential interactive components, ..) and I'sure having a single trait which tried to cover all of this is a bad idea.</p>\n<p>In a certain way Display is the <em>most</em> minimal viable common dominator, but in turn also only useable in very limited use-cases.</p>",
        "id": 211360324,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601127270
    },
    {
        "content": "<p>\"Display is for English, utf-8, textual logs aimed at non-Rustaceans\"</p>",
        "id": 211363267,
        "sender_full_name": "Lokathor",
        "timestamp": 1601131525
    },
    {
        "content": "<p><code>Display</code> is also used in the blanket <code>ToString</code>, and ideally should mirror <code>FromStr</code></p>",
        "id": 211364008,
        "sender_full_name": "cuviper",
        "timestamp": 1601132460
    },
    {
        "content": "<p>and <code>FromStr</code> is also used by <code>str::parse</code>, so together this is like human-readable serialization</p>",
        "id": 211364292,
        "sender_full_name": "cuviper",
        "timestamp": 1601132764
    },
    {
        "content": "<p>I think that, unfortunately, Display probably doesn't have the info to re-parse the value you started with (though Debug might)</p>",
        "id": 211364955,
        "sender_full_name": "Lokathor",
        "timestamp": 1601133652
    },
    {
        "content": "<p>So <code>Display</code> is pulling double duty? This may explain some of my frustrations with it because it sounds like it's used for very different things depending on the author.</p>",
        "id": 211368476,
        "sender_full_name": "Chris Denton",
        "timestamp": 1601138292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260325\">Chris Denton</span> <a href=\"#narrow/stream/122651-general/topic/What.20is.20Display.20for.3F/near/211104547\">said</a>:</p>\n<blockquote>\n<p>I think that's a problem I have with it. If the <code>Display</code> string includes details not otherwise accessible then if you want to do any customization or localization you end up having to parse the string... which is far from ideal.</p>\n</blockquote>\n<p>Maybe I'm wrong, but would you ever want to expose those private details to the user through a  <code>Display</code>ed string?</p>",
        "id": 211368617,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601138515
    },
    {
        "content": "<p>(Not saying you're wrong of course, just thinking that those details should maybe be public if they'd need to be displayed to the user)</p>",
        "id": 211368706,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601138632
    },
    {
        "content": "<p>Yeah <code>Display</code> is very under specified, so it means many things to many people.</p>",
        "id": 211369520,
        "sender_full_name": "Lokathor",
        "timestamp": 1601139841
    },
    {
        "content": "<p>The way I originally heard it described was that <code>Debug</code> should look exactly like code to the extent possible, while <code>Display</code> is allowed to make it somewhat more readable.</p>",
        "id": 211373304,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601145559
    },
    {
        "content": "<p>plausible, but then <em>maybe</em> FromStr and parse and friends should key off of the Debug formatting instead.</p>",
        "id": 211385849,
        "sender_full_name": "Lokathor",
        "timestamp": 1601160112
    },
    {
        "content": "<p>In that case, it seems that rust's Debug = haskell's Show?</p>",
        "id": 211388573,
        "sender_full_name": "Karel Kubat",
        "timestamp": 1601164804
    },
    {
        "content": "<p>for derived instances of <code>Show</code>, yes. <code>Show</code> itself does not specify conceptual requirements or properties of its output the way Rust does.</p>",
        "id": 211388668,
        "sender_full_name": "nagisa",
        "timestamp": 1601164980
    },
    {
        "content": "<p>I'm only aware of derived instances, but I assumed Show is always supposed to produce valid Haskell.</p>",
        "id": 211388737,
        "sender_full_name": "Karel Kubat",
        "timestamp": 1601165107
    },
    {
        "content": "<p>Show should produce whatever Read accepts, if you have Read for your type, and otherwise it's still probably a valid Haskell literal for the type if possible just to make putting it back into ghci easier.</p>\n<p>Myself, usually if I do Display at all it just shows the Debug anyway. I'm a menace to crates everywhere.</p>",
        "id": 211390285,
        "sender_full_name": "Lokathor",
        "timestamp": 1601167969
    },
    {
        "content": "<p>perhaps the most prominent instance where I ever implement Display is for <code>Error</code> impls.</p>",
        "id": 211390804,
        "sender_full_name": "nagisa",
        "timestamp": 1601168949
    },
    {
        "content": "<p>I do it for number types, and also yes if you want to impl Error.</p>\n<p>Honestly, if the <code>{}</code> formatter would just use the hekkin Debug impl when Display isn't available on the type I would never again have a strong opinion about Display.</p>",
        "id": 211391508,
        "sender_full_name": "Lokathor",
        "timestamp": 1601170200
    },
    {
        "content": "<p>I had a solver for minesweeper. I actually have Display to show a colored grid representing the board, mines, and flags, with line and column index on the edge</p>",
        "id": 211391847,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601170709
    },
    {
        "content": "<p>Display is very versatile and up to the developer to decide what to show</p>",
        "id": 211391851,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601170739
    },
    {
        "content": "<p>Well ultimately the real problem is that we can't define our own formatters</p>",
        "id": 211392725,
        "sender_full_name": "Lokathor",
        "timestamp": 1601172137
    },
    {
        "content": "<p>It's such a pain because some common things like Vec don't  implement Display. I really wish Rust had better newtypes where DebugAsDisplay&lt;T&gt; or something would just work :(</p>",
        "id": 211396877,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1601179140
    },
    {
        "content": "<p>what's the scenario that you can't use \"{:?}\"?</p>",
        "id": 211399132,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601183317
    },
    {
        "content": "<p>You always can, but every time i want to quickly print \"the thingy is {}\" and have it <em>just work</em>, nope, gotta go back and add the extra <code>:?</code> in the middle. every time.</p>",
        "id": 211399625,
        "sender_full_name": "Lokathor",
        "timestamp": 1601184285
    },
    {
        "content": "<p>maybe add a {:??}, use Display if implemented, otherwise Debug</p>",
        "id": 211403281,
        "sender_full_name": "Lucius Hu",
        "timestamp": 1601191683
    },
    {
        "content": "<p>With (generalized) auto-ref based specialization it is well possible to have a proc-macro implementation of println and friends that make <code>\"{}\"</code> behave as <code>\"{:?}\"</code> for non-displayables</p>",
        "id": 211404394,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601193824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/122651-general/topic/What.20is.20Display.20for.3F/near/211396877\">said</a>:</p>\n<blockquote>\n<p>I really wish Rust had better newtypes where DebugAsDisplay&lt;T&gt; or something would just work :(</p>\n</blockquote>\n<p>The <a href=\"https://docs.rs/fmt_adapter/0.2.1/fmt_adapter/\"><code>fmt_adapter</code></a> crate that I made serves this specific purpose</p>",
        "id": 211406204,
        "sender_full_name": "Goat",
        "timestamp": 1601196894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346097\">@Lucius Hu</span> that is literally the opposite of what I want XD</p>",
        "id": 211421603,
        "sender_full_name": "Lokathor",
        "timestamp": 1601221113
    },
    {
        "content": "<p>if you want to quickly print something esp for debugging use, use should be using Debug in the first place  <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 211427948,
        "sender_full_name": "DPC",
        "timestamp": 1601230846
    },
    {
        "content": "<p>I think you're misunderstanding the scenario I'm going for. When I say \"quickly\" I mean \"typing less\". So anything that requires typing more isn't as good. What I want  is for<code>{}</code> to just \"always work somehow\", and use Display if it's there, and Debug if it's not, and heck just print the type name and nothing else if there's no Debug for whatever reason. Particularly, I want to be able to not have to remember \"oh <code>x</code> is an i32 and so it's Display but <code>pos</code> is a [i32;2] and so it's not Display and i have to write the stupid extra <code>:?</code> in there\".</p>",
        "id": 211428412,
        "sender_full_name": "Lokathor",
        "timestamp": 1601231639
    },
    {
        "content": "<p>IMHO typing slightly less should never be a motivation for a feature.</p>\n<p>The only place where I thing \"{}\" always magically working is really helpful  is for println debugging. But for that we have <code>dbg!</code>.</p>\n<p>At least I would prefer <code>{}</code> not working if there is no explicit <code>Display</code> implementation. (Through I belive every public type should have a <code>Debug</code> implementation.)</p>\n<p>Anyway just my personal preferences  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 211430869,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601235330
    },
    {
        "content": "<p><code>dbg!</code> is unfortunately quite poor for println debugging because it uses the alternate formatting flag.</p>",
        "id": 211430927,
        "sender_full_name": "Lokathor",
        "timestamp": 1601235395
    },
    {
        "content": "<p>Is leaving <code>#[derive(Debug)]</code> in production code bad practice?</p>",
        "id": 211432585,
        "sender_full_name": "oliver",
        "timestamp": 1601237687
    },
    {
        "content": "<p>Not at all.</p>",
        "id": 211432618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237720
    },
    {
        "content": "<p>If nothing calls it, it'll generate no code.</p>",
        "id": 211432621,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237729
    },
    {
        "content": "<p>And it's helpful for things like <code>assert_eq!</code>, or <code>dbg!</code>, or other such things you might need in your code when debugging it.</p>",
        "id": 211432628,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237748
    },
    {
        "content": "<p>On the contrary, in general if a structure <em>can</em> have <code>Debug</code> derived, I'd generally do so unless there's some specific reason not to.</p>",
        "id": 211432683,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237795
    },
    {
        "content": "<p>Yeah i consider it a bug to <em>not</em> have Debug.</p>",
        "id": 211432697,
        "sender_full_name": "Lokathor",
        "timestamp": 1601237816
    },
    {
        "content": "<p>I think <code>winapi</code> tried having <code>Debug</code> on everything by default but it destroyed compile times? Really big crate though.</p>",
        "id": 211433174,
        "sender_full_name": "Chris Denton",
        "timestamp": 1601238566
    },
    {
        "content": "<p>correct</p>",
        "id": 211433708,
        "sender_full_name": "Lokathor",
        "timestamp": 1601239380
    },
    {
        "content": "<p>Yeah, those types are concrete so not only is it the cost of the macro to generate all that code and the cost to parse it all, but it'd actually codegen all those impls too.  (Almost all of which the linker would then throw out when you actually use the thing.)</p>",
        "id": 211434011,
        "sender_full_name": "scottmcm",
        "timestamp": 1601239866
    },
    {
        "content": "<p>winapi is generally an <em>exception</em>  in various cases</p>",
        "id": 211440330,
        "sender_full_name": "DPC",
        "timestamp": 1601250106
    },
    {
        "content": "<p>I think <code>Display</code> is what you implement when you want to pass a type to <code>format_args!</code> but you don't like what the <code>#[derive(Debug)]</code> looks like for that type.</p>",
        "id": 211450393,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1601266553
    },
    {
        "content": "<p>I think it's amusing in that I've never written a <code>Display</code> impl proactively and what it looks like when I do write it is always motivated by the location where I'm calling <code>format_args!</code>.</p>",
        "id": 211450613,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1601266828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> <a href=\"#narrow/stream/122651-general/topic/What.20is.20Display.20for.3F/near/211432585\">said</a>:</p>\n<blockquote>\n<p>Is leaving <code>#[derive(Debug)]</code> in production code bad practice?</p>\n</blockquote>\n<p>A reasonable compromise is to put it on public types.</p>",
        "id": 211452718,
        "sender_full_name": "Laurențiu",
        "timestamp": 1601270166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260325\">Chris Denton</span> <a href=\"#narrow/stream/122651-general/topic/What.20is.20Display.20for.3F/near/211433174\">said</a>:</p>\n<blockquote>\n<p>I think <code>winapi</code> tried having <code>Debug</code> on everything by default but it destroyed compile times? Really big crate though.</p>\n</blockquote>\n<p>In that (rare) case, the solution is to feature-gate the <code>Debug</code> impls, so that downstream users can opt into longer compile-times but  with provided <code>Debug</code> impls, like <a href=\"https://docs.rs/syn/1.0.42/syn/#optional-features\"><code>::syn</code> does</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"209646\">Philipp Korber</span> <a href=\"#narrow/stream/122651-general/topic/What.20is.20Display.20for.3F/near/211430869\">said</a>:</p>\n<blockquote>\n<p>(Through I belive every public type should have a <code>Debug</code> implementation.)</p>\n<p>Anyway just my personal preferences  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>FWIW, there is <a href=\"https://doc.rust-lang.org/beta/rustc/lints/listing/allowed-by-default.html#missing-debug-implementations\"><code>#![warn(missing_debug_implementations)]</code></a> to help spot that (sadly it does not take into account privacy). With this lint, you instead explicitly opt out of having <code>Debug</code> when it doesn't make sense to do so (with <code>#[allow(missing_debug_implementations)]</code>), which helps prevent oversights <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211480847,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601293381
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211481551,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601293864
    }
]