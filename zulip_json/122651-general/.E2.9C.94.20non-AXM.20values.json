[
    {
        "content": "<p>Hi all. I have questions related to the aliasing XOR mutability (AXM) discipline.</p>\n<p>AXM is the key to the Safe Rust. It requires each value to be either aliased (via <code>&amp;</code>) or mutable (via <code>&amp;mut</code>), but not both at the same time. If we want to write a program that does not follow AXM, we can use Unsafe Rust. The most common way to circumvent AXM is to use interior mutability, provided by <code>UnsafeCell</code>. It allows mutation through shared references. However, it seems not every non-AXM things need interior mutability. The following example from the Stacked Borrows paper uses only raw pointers, not <code>UnsafeCell</code>, to make <code>x</code> aliased and mutable at the same time.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr2</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So here come my questions:</p>\n<ol>\n<li>Is there a term that denotes the opposite of AXM? Aliasing AND mutability would be a natural description, but I'm wondering whether there is a commonly agreed term in the Rust community.</li>\n<li>If I'm not wrong, we can classify non-AXM things into those w/ interior mutability and those w/o interior mutability. For the former, we can use the term interior mutability. For the latter, what should we call them? Is there a well-established notion for the second concept?</li>\n</ol>\n<p>If it's not the place to ask the questions, please let me know. Thank you!</p>",
        "id": 247175319,
        "sender_full_name": "Jaemin Hong",
        "timestamp": 1627288141
    },
    {
        "content": "<blockquote>\n<p>For the latter, what should we call them? Is there a well-established notion for the second concept?</p>\n</blockquote>\n<p>\"static mut\" <a href=\"https://github.com/rust-lang/rust/issues/53639\">https://github.com/rust-lang/rust/issues/53639</a></p>",
        "id": 247194430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627302055
    },
    {
        "content": "<p>and no, there's no term for both <code>static mut</code> and interior mutability</p>",
        "id": 247194456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627302084
    },
    {
        "content": "<p>shared-writable memory?</p>",
        "id": 247199710,
        "sender_full_name": "The 8472",
        "timestamp": 1627305136
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 247415483,
        "sender_full_name": "Jaemin Hong",
        "timestamp": 1627439042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"428582\">Jaemin Hong</span> has marked this topic as resolved.</p>",
        "id": 247709034,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627652406
    }
]