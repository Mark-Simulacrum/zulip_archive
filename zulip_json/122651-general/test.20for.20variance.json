[
    {
        "content": "<p>Is there an easy way to test for the variance of a struct over one of its type or lifetime params?</p>",
        "id": 275874584,
        "sender_full_name": "Ali MJ Al-Nasrawy",
        "timestamp": 1647646029
    },
    {
        "content": "<p>You could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Invariant</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Covariant</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Contravariant</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// invariant</span>\n<span class=\"w\">    </span><span class=\"c1\">// let _: Invariant&lt;'short&gt; = Invariant::&lt;'static&gt;(PhantomData);</span>\n<span class=\"w\">    </span><span class=\"c1\">// let _: Invariant&lt;'static&gt; = Invariant::&lt;'short&gt;(PhantomData);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Invariant</span><span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Invariant</span>::<span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Invariant</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Invariant</span>::<span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// covariant</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Covariant</span><span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Covariant</span>::<span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let _: Covariant&lt;'static&gt; = Covariant::&lt;'short&gt;(PhantomData);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Covariant</span><span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Covariant</span>::<span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Covariant</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Covariant</span>::<span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// contravariant</span>\n<span class=\"w\">    </span><span class=\"c1\">// let _: Contravariant&lt;'short&gt; = Contravariant::&lt;'static&gt;(PhantomData);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Contravariant</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Contravariant</span>::<span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Contravariant</span><span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Contravariant</span>::<span class=\"o\">&lt;'</span><span class=\"na\">short</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Contravariant</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Contravariant</span>::<span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And change the type inside phantomdata to something else</p>",
        "id": 275880814,
        "sender_full_name": "fee1-dead",
        "timestamp": 1647652661
    },
    {
        "content": "<p>the invariant tests dont really test anything since those would work no matter what</p>",
        "id": 275881061,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647652991
    },
    {
        "content": "<p>yeah</p>",
        "id": 275883307,
        "sender_full_name": "fee1-dead",
        "timestamp": 1647656010
    },
    {
        "content": "<p>perhaps something like an ui test that passes when compilation fails would work</p>",
        "id": 275883321,
        "sender_full_name": "fee1-dead",
        "timestamp": 1647656041
    },
    {
        "content": "<p>but that wouldn't be easy without using libraries</p>",
        "id": 275883372,
        "sender_full_name": "fee1-dead",
        "timestamp": 1647656066
    },
    {
        "content": "<p>Thanks! I also got some response on <a href=\"https://discord.com/channels/273534239310479360/274215136414400513/954528374263517275\">discord</a>.</p>\n<p>but both can't test for invariance. I'm curious if it is even possible?</p>",
        "id": 275902117,
        "sender_full_name": "Ali MJ Al-Nasrawy",
        "timestamp": 1647684565
    },
    {
        "content": "<p>Would a compile fail test for the coercions that should fail work?</p>",
        "id": 275902191,
        "sender_full_name": "bjorn3",
        "timestamp": 1647684656
    },
    {
        "content": "<p>I'm looking into somethting doable with libtest.</p>",
        "id": 275902487,
        "sender_full_name": "Ali MJ Al-Nasrawy",
        "timestamp": 1647685111
    },
    {
        "content": "<p>Libtest is not meant for testing if something compiles or not. Rustc uses compiletest for that. Compiletest internally uses libtest for the test harness, but it also contains all code to invoke rustc and run resulting programs if applicable.</p>",
        "id": 275902576,
        "sender_full_name": "bjorn3",
        "timestamp": 1647685243
    },
    {
        "content": "<p>Good to know! so, is compiletest is accessible outside rustc?</p>",
        "id": 275902710,
        "sender_full_name": "Ali MJ Al-Nasrawy",
        "timestamp": 1647685446
    },
    {
        "content": "<p>Nevermind, I think should do it <a href=\"https://docs.rs/crate/compiletest_rs/0.2.4\">https://docs.rs/crate/compiletest_rs/0.2.4</a></p>",
        "id": 275902815,
        "sender_full_name": "Ali MJ Al-Nasrawy",
        "timestamp": 1647685654
    },
    {
        "content": "<p>You can also do it in a doctest marked <code>compile_fail</code></p>",
        "id": 275915542,
        "sender_full_name": "cuviper",
        "timestamp": 1647703847
    }
]