[
    {
        "content": "<p>Hello everyone.<br>\nToday I was trying to implement an extremely simple executor for futures, when I stumbled upon a confusing compiler error.<br>\nCargo was telling me that my <code>F: Future</code> type wasn't implementing <code>poll</code>, or that I should import <code>std::future::Future</code>, as seen here: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c3e73222132e8f6a58330ae926ec055c\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c3e73222132e8f6a58330ae926ec055c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c3e73222132e8f6a58330ae926ec055c</a></p>\n<p>The problem is that the error is instead due to the fact that <code>poll</code> expects a <code>Pin</code>, as seen here: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=51fa7ab7533890fb8190525d973fcc10\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=51fa7ab7533890fb8190525d973fcc10\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=51fa7ab7533890fb8190525d973fcc10</a><br>\nSince, after putting my future inside a <code>Pin</code>, it compiled (and run) succesfully.</p>",
        "id": 170903432,
        "sender_full_name": "Francesco Dainese",
        "timestamp": 1563204442
    },
    {
        "content": "<p>I wanted to get this under the team eyes, both to get some clarification if that's intended or not and how (if) to proceed in making this error clearer. It's been a week now and I haven't heard from anyone...</p>",
        "id": 171439322,
        "sender_full_name": "Francesco Dainese",
        "timestamp": 1563808677
    },
    {
        "content": "<p>I agree that the error message isn't maximally useful. The actual implementation of <em>how</em> I can't help with. Conceptually, it seems like you might want to search through the possible self receivers and see if any of them implement the trait. However, this seems like a large space to search through.</p>",
        "id": 171439709,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1563808912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230304\">@Francesco Dainese</span> since you did not get a response here, creating an issue on the tracker seems reasonable. that does not guarantee anything but it is at least less ephemeral than Zulip.<br>\nCc <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span></p>",
        "id": 171440031,
        "sender_full_name": "RalfJ",
        "timestamp": 1563809101
    },
    {
        "content": "<p>And <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span></p>",
        "id": 171440408,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1563809371
    },
    {
        "content": "<p>Misleading diagnostics are certainly treated as bugs. Feel free to file a ticket as advised above.</p>",
        "id": 172783903,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1565284677
    }
]