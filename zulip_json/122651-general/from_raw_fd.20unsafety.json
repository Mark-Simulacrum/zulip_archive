[
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/os/unix/io/trait.FromRawFd.html#tymethod.from_raw_fd\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/os/unix/io/trait.FromRawFd.html#tymethod.from_raw_fd\"><code>FromRawFd::from_raw_fd</code></a></p>\n<blockquote>\n<p>This function is also unsafe as the primitives currently returned have the contract that they are the sole owner of the file descriptor they are wrapping. Usage of this function could accidentally allow violating this contract which can cause memory unsafety in code that relies on it being true.</p>\n</blockquote>\n<p>I'm having trouble constructing an example where misuse of this function can create memory unsafety — any ideas?</p>",
        "id": 167975885,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560365352
    },
    {
        "content": "<p>I could imagine a library that has internal invariants on some file-descriptor-accessible data</p>",
        "id": 167977701,
        "sender_full_name": "RalfJ",
        "timestamp": 1560366370
    },
    {
        "content": "<p>and that library could rely on those invariants for safety</p>",
        "id": 167977712,
        "sender_full_name": "RalfJ",
        "timestamp": 1560366381
    },
    {
        "content": "<p>at that point, messing with that FD can cause unsafety</p>",
        "id": 167977721,
        "sender_full_name": "RalfJ",
        "timestamp": 1560366395
    },
    {
        "content": "<p>I think that's a hint too abstract for me to grok; what would \"internal invariants on some file-descriptor-accessible data\" look like?</p>",
        "id": 167978180,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560366743
    },
    {
        "content": "<p>presumably something like sqlite keeping a file open and validating it once that it's \"correct\" and after that transmuting from file bytes to structs and such</p>",
        "id": 167978224,
        "sender_full_name": "simulacrum",
        "timestamp": 1560366789
    },
    {
        "content": "<p>(this is very abstract and maybe not realistic but something like that is the best I can come up with quickly)</p>",
        "id": 167978240,
        "sender_full_name": "simulacrum",
        "timestamp": 1560366807
    },
    {
        "content": "<p>presumably this might be a file created via some OS-temporary file abstraction where the \"path\" to it doesn't exist, too, so the invariant can only be bypassed via synthesis of a file descriptor</p>",
        "id": 167978316,
        "sender_full_name": "simulacrum",
        "timestamp": 1560366856
    },
    {
        "content": "<blockquote>\n<p>transmuting from file bytes to structs</p>\n</blockquote>\n<p>Hmm, but a file descriptor itself doesn't have any of this; so would this imply using something like mmap on the file descriptor, adding an extra layer in the middle?</p>",
        "id": 167978689,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560367186
    },
    {
        "content": "<p>sure, or just <code>read_to_end</code> and transmute</p>",
        "id": 167979602,
        "sender_full_name": "simulacrum",
        "timestamp": 1560367838
    },
    {
        "content": "<p>on a <code>File</code> created from the raw fd</p>",
        "id": 167979610,
        "sender_full_name": "simulacrum",
        "timestamp": 1560367847
    },
    {
        "content": "<p>yeah, private mmap'ed memory would be one thing. I once contorted this example for another case:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/39575#issuecomment-437658766\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/39575#issuecomment-437658766\">https://github.com/rust-lang/rust/issues/39575#issuecomment-437658766</a></p>",
        "id": 167981642,
        "sender_full_name": "RalfJ",
        "timestamp": 1560369338
    },
    {
        "content": "<p>pipes are another example of a private resource that can be \"de-privatized\" with <code>from_raw_fd</code></p>",
        "id": 167981684,
        "sender_full_name": "RalfJ",
        "timestamp": 1560369363
    },
    {
        "content": "<p>So, I can see how your break encapsulation and visibility with it, but I can't see the unsafety. \"stealing\" someones <code>File</code> by picking the same fd and then calling <code>read_to_end</code> on it will make it so that there's no data left in the file, but... so what?</p>",
        "id": 168054822,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560439131
    },
    {
        "content": "<p>(gonna read Ralf's code example now)</p>",
        "id": 168054898,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560439169
    },
    {
        "content": "<p>So, that example creates an anonymous pipe and relies on the fact that no one but the creator of the pipe can write to it. It then says that some unsafe behavior can be predicated on the result of reading from the pipe. If someone else gets the ability to write to the pipe, then the encapsulation of the unsafety is broken and the code might cause UB.</p>",
        "id": 168056372,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560440081
    },
    {
        "content": "<p>However, that's already trivially broken, AFAIK, because I can just write to <code>/proc/&lt;rust pid&gt;/fd/&lt;whatever pipe is&gt;</code></p>",
        "id": 168056766,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560440366
    },
    {
        "content": "<p>The encapsulation was false to start with (similar to how mmap cannot be contained inside of a Rust program)</p>",
        "id": 168056800,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560440392
    },
    {
        "content": "<p>If you involve <code>/proc/&lt;pid&gt;</code> then you can just as well write to <code>/proc/&lt;pid&gt;/mem</code> and all memory safety guarantees go out the window anyway</p>",
        "id": 168057327,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1560440694
    },
    {
        "content": "<p>hmm.</p>",
        "id": 168057608,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560440882
    },
    {
        "content": "<p>What's the difference between that and mmap then?</p>",
        "id": 168057663,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560440910
    },
    {
        "content": "<p>I think the claim is that (at least in theory) here you can have complete control (other than proc) over the file descriptor vs. mmap'ing a file where it's \"public\"</p>",
        "id": 168058279,
        "sender_full_name": "simulacrum",
        "timestamp": 1560441360
    },
    {
        "content": "<blockquote>\n<p>So, I can see how your break encapsulation and visibility with it, but I can't see the unsafety. \"stealing\" someones <code>File</code> by picking the same fd and then calling <code>read_to_end</code> on it will make it so that there's no data left in the file, but... so what?</p>\n</blockquote>\n<p>Rust's safety entirely relies on proper enforcment of encapsulation and visibility! Just imagine <code>Vec::len</code> would be public...</p>",
        "id": 168058451,
        "sender_full_name": "RalfJ",
        "timestamp": 1560441466
    },
    {
        "content": "<p>hm good point about <code>/proc/&lt;pid&gt;/fd</code>, I had forgotten about that. Though <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span>'s point also stands.</p>",
        "id": 168058607,
        "sender_full_name": "RalfJ",
        "timestamp": 1560441583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> do you mean mmap of a file on the file system? Good question. I guess one difference is whether the \"attacker\" is in the same process or not.</p>",
        "id": 168058699,
        "sender_full_name": "RalfJ",
        "timestamp": 1560441627
    },
    {
        "content": "<p>But it's a fuzzy distinction indeed.</p>",
        "id": 168058708,
        "sender_full_name": "RalfJ",
        "timestamp": 1560441633
    },
    {
        "content": "<p>I think the loose conclusion right now that is that mmap is inherently UB pretty much if anyone touches the file other than the Rust mmap'd process (or you always use atomic single-byte raw ptr reads maybe? not sure)</p>",
        "id": 168059040,
        "sender_full_name": "simulacrum",
        "timestamp": 1560441870
    },
    {
        "content": "<p>no you are fine if you consider the mmap'd file as <code>&amp;[AtomicU8]</code> I think</p>",
        "id": 168059102,
        "sender_full_name": "RalfJ",
        "timestamp": 1560441912
    },
    {
        "content": "<p>(and larger-sized atomic types also work)</p>",
        "id": 168059115,
        "sender_full_name": "RalfJ",
        "timestamp": 1560441923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> a trivial example of unsafety is in <code>from_raw_fd(file.as_raw_fd())</code> – which then (if you forgot to forgot one of the <code>File</code>s) ends up being a double free of a resource.</p>",
        "id": 168059949,
        "sender_full_name": "nagisa",
        "timestamp": 1560442473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> now imagine if <code>file</code> was actually a wrapper over a memory map + a backing memfd file.</p>",
        "id": 168059965,
        "sender_full_name": "nagisa",
        "timestamp": 1560442493
    },
    {
        "content": "<p>your memory map would then get released and you would begin accessing freed memory from your wrapper which still thinks that the file is \"open\" and the memory map is valid.</p>",
        "id": 168060000,
        "sender_full_name": "nagisa",
        "timestamp": 1560442526
    },
    {
        "content": "<p>So in code:</p>",
        "id": 168060005,
        "sender_full_name": "nagisa",
        "timestamp": 1560442531
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">MemfdWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">file</span>: <span class=\"nc\">File</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">map</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"nc\">MemfdWrapper</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arbitrary_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">from_raw_fd</span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">as_raw_fd</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// The backing OS resource for `memory.file` is `close`d, and by extension the memory map which is backed by this file is also (implicitly) released.</span>\n\n<span class=\"c1\">// MemfdWrapper may be exposing safe API here to access contents of `map` with an assumption that `map` is always valid if `file` resource is held alive.</span>\n</pre></div>",
        "id": 168060262,
        "sender_full_name": "nagisa",
        "timestamp": 1560442700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I think a key thing I was forgetting that I see from your example is the point that these are <em>traits</em>, which means anything can implement them.</p>",
        "id": 168076908,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560453630
    },
    {
        "content": "<p>It may be entirely impossible to get unsafety from <code>File::{into_raw_fd,from_raw_fd}</code>, but that doesn't mean that the trait's method is always safe</p>",
        "id": 168076965,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560453682
    },
    {
        "content": "<p>Presuming nothing else exists, perhaps, but because file descriptors are a global resource I could see that being not quite true</p>",
        "id": 168079813,
        "sender_full_name": "simulacrum",
        "timestamp": 1560455758
    }
]