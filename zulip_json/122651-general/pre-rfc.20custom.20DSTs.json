[
    {
        "content": "<ul>\n<li>\n<p>indexing and slicing 2-d arrays -&gt; multi-dimensional arrays in general ? e.g. array views, etc. Also, there is interest in a \"growable\" mutable slice view into vector-like data-structures (<code>Vec</code>, <code>ArrayVec</code>, <code>SmallVec</code>) up to a maximum capacity, it would be cool if such a &amp;mut VecView could be a DST</p>\n</li>\n<li>\n<p>Flexible Array Members -&gt; might link here to the C++ paper, and might want to mention C VLAs since that's the term that people might know (note: I see you mention this below, might be worth mentioning in the introduction as well)</p>\n</li>\n<li>\n<p>we will also introduce four functions into the standard library, in std::raw,  =&gt; why not in <code>libcore</code> ? </p>\n</li>\n<li>\n<p>How should these thick pointers be passed, if they are larger than two pointers? =&gt; Passed to where? Why not as Aggregates ? This can be resolved in the UCG independently of the rest of the feature. </p>\n</li>\n<li>\n<p>Are std::raw::ptr and std::raw::ptr_mut necessary? You can get this behavior with as. =&gt; You just said they are not necessary, so kill them, and add an example of using <code>as</code>, which is what people are using already.</p>\n</li>\n</ul>",
        "id": 146929321,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541583673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span>  ^^^</p>",
        "id": 146929334,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541583693
    },
    {
        "content": "<ul>\n<li>In the <code>Foo</code> example, <code>size_of_val(&amp;foo)</code> result is incorrect, =&gt; you can work out this example fully</li>\n</ul>",
        "id": 146929492,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541583897
    },
    {
        "content": "<p>VLAs are not FAMs, to be clear</p>",
        "id": 146968145,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541606537
    },
    {
        "content": "<p>they are in fact incredibly distinct features</p>",
        "id": 146968159,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541606555
    },
    {
        "content": "<p>one of them is very good</p>",
        "id": 146968162,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541606561
    },
    {
        "content": "<p>the other is a massive security risk</p>",
        "id": 146968168,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541606575
    },
    {
        "content": "<p>VLA = Variable Length Array, but FAM? Must be the Flexible Array Members you mentioned. Got to google that one^^</p>",
        "id": 146969030,
        "sender_full_name": "RalfJ",
        "timestamp": 1541607299
    },
    {
        "content": "<p>still would be interesting which of the two you consider good vs a risk</p>",
        "id": 146969176,
        "sender_full_name": "RalfJ",
        "timestamp": 1541607439
    },
    {
        "content": "<p>FAM is the good one</p>",
        "id": 146969304,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607564
    },
    {
        "content": "<p>VLAs are widely considered to be a bad idea</p>",
        "id": 146969310,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607573
    },
    {
        "content": "<p>there's a reason they never got into C++, and that they were made optional in C11</p>",
        "id": 146969372,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607605
    },
    {
        "content": "<p>ah I heard about the Linux kernel banning VLAs</p>",
        "id": 146969427,
        "sender_full_name": "RalfJ",
        "timestamp": 1541607684
    },
    {
        "content": "<p>though FAMs also seem risky because the length is not given anywhere in the type? But that is normal game in C I guess</p>",
        "id": 146969448,
        "sender_full_name": "RalfJ",
        "timestamp": 1541607718
    },
    {
        "content": "<p>?</p>",
        "id": 146969519,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607748
    },
    {
        "content": "<p>the length is given in the type tho</p>",
        "id": 146969527,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607756
    },
    {
        "content": "<p>looking at <a href=\"https://en.wikipedia.org/wiki/Flexible_array_member\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Flexible_array_member\">https://en.wikipedia.org/wiki/Flexible_array_member</a></p>",
        "id": 146969542,
        "sender_full_name": "RalfJ",
        "timestamp": 1541607773
    },
    {
        "content": "<p>just not in the array type</p>",
        "id": 146969547,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607778
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">pascal_string</span> <span class=\"p\">{</span>\n  <span class=\"kt\">size_t</span> <span class=\"n\">length</span><span class=\"p\">;</span> <span class=\"c1\">// length given here</span>\n  <span class=\"kt\">char</span> <span class=\"n\">buffer</span><span class=\"p\">[];</span>\n<span class=\"p\">};</span>\n</pre></div>",
        "id": 146969583,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607808
    },
    {
        "content": "<p>well that's the progrmmer writing a comment</p>",
        "id": 146969593,
        "sender_full_name": "RalfJ",
        "timestamp": 1541607816
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">example</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"kt\">double</span> <span class=\"n\">arr</span><span class=\"p\">[];</span> <span class=\"c1\">// the flexible array member must be last</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>is just as legal, isn't it?</p>",
        "id": 146969666,
        "sender_full_name": "RalfJ",
        "timestamp": 1541607848
    },
    {
        "content": "<p>sure</p>",
        "id": 146969699,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607881
    },
    {
        "content": "<p>the C++ version is quite a bit better, imo</p>",
        "id": 146969732,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607907
    },
    {
        "content": "<p>but that's just C</p>",
        "id": 146969765,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541607954
    },
    {
        "content": "<p>(although the C++ version is not yet published)</p>",
        "id": 146969983,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608115
    },
    {
        "content": "<p>was just googling it and didnt find anything yet^^</p>",
        "id": 146969992,
        "sender_full_name": "RalfJ",
        "timestamp": 1541608125
    },
    {
        "content": "<p>I'm trying to find a good way to show you the formatted paper, as opposed to raw html</p>",
        "id": 146970015,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608156
    },
    {
        "content": "<p><a href=\"https://htmlpreview.github.io/?https://github.com/ThePhD/future_cxx/blob/master/papers/d1039.html\" target=\"_blank\" title=\"https://htmlpreview.github.io/?https://github.com/ThePhD/future_cxx/blob/master/papers/d1039.html\">https://htmlpreview.github.io/?https://github.com/ThePhD/future_cxx/blob/master/papers/d1039.html</a></p>",
        "id": 146970104,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608205
    },
    {
        "content": "<p>^^</p>",
        "id": 146970410,
        "sender_full_name": "RalfJ",
        "timestamp": 1541608457
    },
    {
        "content": "<p>what makes it better in your opinion?</p>",
        "id": 146970534,
        "sender_full_name": "RalfJ",
        "timestamp": 1541608573
    },
    {
        "content": "<p>they're just completely distinct features.</p>",
        "id": 146970587,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608651
    },
    {
        "content": "<p>oh, C++ rather than C?</p>",
        "id": 146970598,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608669
    },
    {
        "content": "<p>it puts the size in the type</p>",
        "id": 146970603,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608675
    },
    {
        "content": "<p>ah just saw the trait stuff there</p>",
        "id": 146970659,
        "sender_full_name": "RalfJ",
        "timestamp": 1541608707
    },
    {
        "content": "<p>intersting</p>",
        "id": 146970661,
        "sender_full_name": "RalfJ",
        "timestamp": 1541608708
    },
    {
        "content": "<p>also, it works with dtors, which is important for C++, even if it doesn't matter in C.</p>",
        "id": 146970685,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608737
    },
    {
        "content": "<p>and which explains why they need to get the size stuff right :D</p>",
        "id": 146970784,
        "sender_full_name": "RalfJ",
        "timestamp": 1541608805
    },
    {
        "content": "<p>and then they make it overloadable. quite neat, yeah.</p>",
        "id": 146970806,
        "sender_full_name": "RalfJ",
        "timestamp": 1541608822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> do you have links to other RFCs? I found one (mine)</p>",
        "id": 146970940,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608949
    },
    {
        "content": "<p>oh, nope, I apparently linked to others</p>",
        "id": 146970961,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541608984
    },
    {
        "content": "<p>There is one RFC with open PR by Simon Sapin that addresses a tangential problem that might be worth citing</p>",
        "id": 146970991,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541609023
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/issues/813\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/813\">https://github.com/rust-lang/rfcs/issues/813</a> mentions CStr</p>",
        "id": 146971064,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541609066
    },
    {
        "content": "<p>There are also some RFCs about unsized rvalues, alloca etc.</p>",
        "id": 146971223,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541609176
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2580\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2580\">https://github.com/rust-lang/rfcs/pull/2580</a> that's the one by Simon</p>",
        "id": 146971277,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541609225
    },
    {
        "content": "<p><a href=\"http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/\">http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/</a> series by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nand the RFC that changed the DST trait bound syntax: <a href=\"https://github.com/rust-lang/rfcs/pull/490\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/490\">https://github.com/rust-lang/rfcs/pull/490</a></p>",
        "id": 146971372,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541609283
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2310\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2310\">https://github.com/rust-lang/rfcs/pull/2310</a> is the original <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> RFC, but I think there is a rework in the works</p>",
        "id": 146971583,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541609480
    },
    {
        "content": "<p>thanks!</p>",
        "id": 146971813,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541609663
    },
    {
        "content": "<p>there was a Custom DST draft (predating ubsan's RFC 1524 IIRC) <a href=\"https://github.com/japaric/rfcs/blob/unsized2/text/0000-unsized-types.md\" target=\"_blank\" title=\"https://github.com/japaric/rfcs/blob/unsized2/text/0000-unsized-types.md\">https://github.com/japaric/rfcs/blob/unsized2/text/0000-unsized-types.md</a></p>",
        "id": 146971843,
        "sender_full_name": "kennytm",
        "timestamp": 1541609694
    },
    {
        "content": "<p>(and also mikeyhew's <a href=\"https://internals.rust-lang.org/t/pre-erfc-lets-fix-dsts/6663\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-erfc-lets-fix-dsts/6663\">https://internals.rust-lang.org/t/pre-erfc-lets-fix-dsts/6663</a> for sure)</p>",
        "id": 146971993,
        "sender_full_name": "kennytm",
        "timestamp": 1541609806
    },
    {
        "content": "<p>there is also <a href=\"https://github.com/rust-lang/rfcs/pull/9/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/9/files\">https://github.com/rust-lang/rfcs/pull/9/files</a> which links to the old mailing list for background..</p>",
        "id": 146972095,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541609892
    },
    {
        "content": "<p>Sorry to necro such an old thread, but I was looking at custom array indices again and wondering if there was any notable changes since postponement of kennytm’s RFC.</p>",
        "id": 193891999,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1586869066
    }
]