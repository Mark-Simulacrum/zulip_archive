[
    {
        "content": "<p>In reasoning about my <a href=\"https://github.com/willcrichton/rust-slicer\">program slicer</a>, I've tried to prove the following theorem.</p>\n<blockquote>\n<p>If <code>x : &amp;'a T</code> and <code>y : &amp;'b T</code> and it is possible that <code>x = y</code>, then <code>'a : 'b</code> or <code>'b : 'a</code></p>\n</blockquote>\n<p>I intuitively believe that this statement is true given how the borrow checker generates and resolves outlives constraints, but I'm struggling to come up with a formal argument. Does anyone have a better reason why? Or is there a counterexample? (note: only considering safe rust, no interior mutability)</p>",
        "id": 232687414,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617237700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span> I'm assuming both are live at some common point?</p>",
        "id": 232687560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237786
    },
    {
        "content": "<p>I suppose, if that's a necessary condition?</p>",
        "id": 232687603,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617237824
    },
    {
        "content": "<p>it seems like one :)</p>",
        "id": 232687619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237838
    },
    {
        "content": "<p>otherwise, you could have</p>",
        "id": 232687628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237842
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232687665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237854
    },
    {
        "content": "<p>What kind of equality is this? If it is just equality of values, you only need the statement <code>x == y</code> to typecheck, which means that <code>'a</code> and <code>'b</code> have a nonempty intersection</p>",
        "id": 232687666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617237854
    },
    {
        "content": "<p>that doesn't imply that one outlives the other per se</p>",
        "id": 232687683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237872
    },
    {
        "content": "<p>Pointer equality, ie x and y are aliases.</p>",
        "id": 232687685,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617237873
    },
    {
        "content": "<p>I don't think it's true</p>",
        "id": 232687713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237893
    },
    {
        "content": "<p>example:</p>",
        "id": 232687718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237900
    },
    {
        "content": "<p>well, hmm</p>",
        "id": 232687755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237931
    },
    {
        "content": "<p>I was thinking that maybe you can have an if/then/else where they both start on different branches</p>",
        "id": 232687776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617237947
    },
    {
        "content": "<p>The claim is a bit weird because lifetimes are a property of the type system while equality of values is a dynamic property of the operational semantics</p>",
        "id": 232687913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617238040
    },
    {
        "content": "<p>Maybe I can give the more general context. In implementing the program slicer, I'm trying to take the output of the borrow checker and compute points-to / alias information. The trouble is that the <code>BorrowSet</code> only contains information about where references are created and dropped, and not about aliases in between. </p>\n<p>So my strategy is to compute aliases by with the following strategy. Given the <code>constraint_sccs</code> from the <code>RegionInferenceContext</code>, if a pointer has a lifetime <code>'a</code>, then that pointer aliases any parent in the constraint_sccs graph.</p>",
        "id": 232687938,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238049
    },
    {
        "content": "<p>it seems like you need to use some dynamic version of borrows, like the stacked borrow object lifetimes</p>",
        "id": 232687962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617238068
    },
    {
        "content": "<p>I _think_ this strategy is sound, but I'm trying to figure out if that's the case, and if so then what's the argument why. And it has to do with whether the outlives information computed by the borrow checker is a sufficient condition for determining the possibility of an alias.</p>",
        "id": 232688026,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238103
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// P1</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// P2</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// P3</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// P4</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nb\">drop</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// P5</span>\n</code></pre></div>\n<ul>\n<li>lifetime of x is {P1, P2, P4, P5}</li>\n<li>lifetime of y is {P2, P3, P4, P5}</li>\n<li>but <code>ptr::eq(x, y)</code></li>\n</ul>",
        "id": 232688052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238128
    },
    {
        "content": "<p>that said, <span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span>, have you seen my talk on polonius?</p>",
        "id": 232688066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238140
    },
    {
        "content": "<p>it presents an alternative view of lifetimes</p>",
        "id": 232688101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238171
    },
    {
        "content": "<p>as \"origins\"</p>",
        "id": 232688104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238173
    },
    {
        "content": "<p>and I wonder if it might be of interest to you</p>",
        "id": 232688111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238183
    },
    {
        "content": "<p><a href=\"https://nikomatsakis.github.io/rust-belt-rust-2019/#1\">https://nikomatsakis.github.io/rust-belt-rust-2019/#1</a></p>",
        "id": 232688182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238216
    },
    {
        "content": "<p>I don't see how <code>ptr::eq(x, y)</code> in that example?</p>",
        "id": 232688188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617238224
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=_agDeiWek8w\">https://www.youtube.com/watch?v=_agDeiWek8w</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"_agDeiWek8w\" href=\"https://www.youtube.com/watch?v=_agDeiWek8w\"><img src=\"https://i.ytimg.com/vi/_agDeiWek8w/default.jpg\"></a></div>",
        "id": 232688226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/Relationship.20between.20lifetimes.20and.20aliasing/near/232688188\">said</a>:</p>\n<blockquote>\n<p>I don't see how <code>ptr::eq(x, y)</code> in that example?</p>\n</blockquote>\n<p>oh, I guess that's true, lol</p>",
        "id": 232688230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238259
    },
    {
        "content": "<p>but you can make it trivially true</p>",
        "id": 232688234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238268
    },
    {
        "content": "<p>(fixed)</p>",
        "id": 232688244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238283
    },
    {
        "content": "<p>also I think x should be {P1, P4, P5} and y is {P2, P3, P5}</p>",
        "id": 232688331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617238356
    },
    {
        "content": "<p>Niko I haven't seen the talk, I will check it out. And yes that's a good counter example, I agree that rejects the theorem. I think I need a different theorem then. What I really care about is whether aliases generated from _the same borrow_ satisfy that theorem.</p>",
        "id": 232688367,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238409
    },
    {
        "content": "<p>eg</p>",
        "id": 232688369,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232688384,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238428
    },
    {
        "content": "<p>cause as I mentioned in the post above, all I'm trying to do is figure out for each pointer in the MIR, which borrow it could refer to</p>",
        "id": 232688456,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238474
    },
    {
        "content": "<p>Because of reborrows, I don't think it makes a difference:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// P1</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// P2</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// P3</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// P4</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nb\">drop</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// P5</span>\n</code></pre></div>",
        "id": 232688485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617238504
    },
    {
        "content": "<p>the four <code>= a</code> lines are basically <code>x = &amp;*a</code></p>",
        "id": 232688520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617238536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> also a good point. I was just looking at the region SCCs for these two programs. It seems like the key fact is that <code>x</code> and <code>y</code> share <code>a</code> as a common ancestor in the SCC graph, so perhaps that's the more relevant statement.</p>",
        "id": 232688721,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238752
    },
    {
        "content": "<p>Maybe a better question is whether adding the constraint that the two lifetimes are the same or in an ordering relation would cause some programs not to typecheck. (In this example you can extend the lifetimes of <code>x</code> and <code>y</code> to match <code>a</code>.) But I would guess the answer is yes, because polonius style origins are strictly more powerful than NLL regions</p>",
        "id": 232688723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617238755
    },
    {
        "content": "<p>Yes that's part of why I'm interested in proving this theorem true with respect to some notion of the \"true\" (or minimal) lifetimes of each pointers, as distinct from the lifetimes inferred by NLL or polonius. But I'm not sure how to precisely specify the true lifetime.</p>",
        "id": 232688899,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265377\">Will Crichton</span> <a href=\"#narrow/stream/122651-general/topic/Relationship.20between.20lifetimes.20and.20aliasing/near/232688456\">said</a>:</p>\n<blockquote>\n<p>cause as I mentioned in the post above, all I'm trying to do is figure out for each pointer in the MIR, which borrow it could refer to</p>\n</blockquote>\n<p>this is basically <em>directly</em> what polonius computes, <span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span></p>",
        "id": 232688916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238904
    },
    {
        "content": "<p>you may want to ask questions in <a class=\"stream\" data-stream-id=\"186049\" href=\"/#narrow/stream/186049-t-compiler.2Fwg-polonius\">#t-compiler/wg-polonius</a></p>",
        "id": 232688924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238910
    },
    {
        "content": "<p>I also have some blog posts writing up the core ideas</p>",
        "id": 232688972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238925
    },
    {
        "content": "<p>: O wow! good good</p>",
        "id": 232688985,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238932
    },
    {
        "content": "<p>and there's even a thesis on it :)</p>",
        "id": 232688987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238932
    },
    {
        "content": "<p>well I'm trying to write an OOPSLA paper about this slicer, so I better get to it...</p>",
        "id": 232689009,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617238947
    },
    {
        "content": "<p>written by <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span> (though her name was different then, so if you go searching for it, I'm not sure how it's listed)</p>",
        "id": 232689035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617238976
    },
    {
        "content": "<p>I can't find a link... <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> may know</p>",
        "id": 232689172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617239062
    },
    {
        "content": "<p>there was this late draft version but I can’t quite remember if there was a later final one <a href=\"user_uploads/4715/ufu5BGNrkzVbV8FtkK3Tco6M/Albins-Thesis-draft-version.pdf\">https://rust-lang.zulipchat.com/user_uploads/4715/ufu5BGNrkzVbV8FtkK3Tco6M/Albins-Thesis-draft-version.pdf</a></p>",
        "id": 232689589,
        "sender_full_name": "lqd",
        "timestamp": 1617239420
    },
    {
        "content": "<p>(the link may be stale now :/)</p>",
        "id": 232689629,
        "sender_full_name": "lqd",
        "timestamp": 1617239454
    },
    {
        "content": "<p>I’m not sure there are other public links so we may need to ask <span class=\"user-mention\" data-user-id=\"204115\">@Amanda Stjerna</span></p>",
        "id": 232690749,
        "sender_full_name": "lqd",
        "timestamp": 1617240470
    },
    {
        "content": "<blockquote>\n<p>all I'm trying to do is figure out for each pointer in the MIR, which borrow it could refer to</p>\n</blockquote>\n<p>Oh, is <em>that</em> all? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> If you get that figured out over the weekend, that'd be a big help <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 232691843,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1617241544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> trying to do it conservatively! And the strategy I suggested actually seems to be working quite well: <a href=\"https://github.com/willcrichton/rust-slicer/blob/master/src/analysis/aliases.rs#L205\">https://github.com/willcrichton/rust-slicer/blob/master/src/analysis/aliases.rs#L205</a></p>",
        "id": 232693253,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617242684
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the talk was helpful! The concept of a loan helps clarify my struggles. For example, I was trying to reason about this program:</p>",
        "id": 232693731,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617243086
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>At first, I was thinking about this as a counterexample to my original theorem. But I noticed that Rust computes the lifetime of <code>a</code> to actually outlive <code>b</code> (presumably because <code>b = a</code> introduces such a constraint). And this broke my original mental model of \"the lifetime of a reference is the live range of the pointer\", and I was struggling to form a new mental model for what a lifetime really means.</p>",
        "id": 232693859,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617243219
    },
    {
        "content": "<p>Also, for any such kind of property to hold, you'll need <code>T</code> to be non-ZST; since references to unrelated ZSTs can very well compare <code>ptr</code>-equal</p>",
        "id": 232741317,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617276509
    },
    {
        "content": "<p>Moving subsequent discussion on this thread to <a class=\"stream-topic\" data-stream-id=\"186049\" href=\"/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Understanding.20the.20Polonius.20model\">#t-compiler/wg-polonius &gt; Understanding the Polonius model</a></p>",
        "id": 232761579,
        "sender_full_name": "Will Crichton",
        "timestamp": 1617285884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/122651-general/topic/Relationship.20between.20lifetimes.20and.20aliasing/near/232690749\">said</a>:</p>\n<blockquote>\n<p>I’m not sure there are other public links so we may need to ask <span class=\"user-mention silent\" data-user-id=\"204115\">Amanda Stjerna</span></p>\n</blockquote>\n<p>There _should be_ but for whatever reason my university never published the final thesis. I have no idea why.</p>",
        "id": 234342239,
        "sender_full_name": "Amanda Stjerna",
        "timestamp": 1618326142
    }
]