[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span></p>",
        "id": 229122096,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058639
    },
    {
        "content": "<p>So, the background as I understand it:<br>\nsysroots predate Rust, and come from the C world originally. They're the mechanism compilers use to supply libraries and matching headers. They're particularly common when cross-compiling, so that you can point to a set of headers and libraries that aren't your system headers and libraries. (For instance, \"here's the C library for arm64, and here are the matching glibc headers for arm64, which don't match my system's x86-64 library and headers\".)</p>",
        "id": 229122282,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058779
    },
    {
        "content": "<p>In the Rust context, the sysroot contains the crates that ship with the compiler and aren't ever fetched from <a href=\"http://crates.io\">crates.io</a>.</p>",
        "id": 229122298,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058799
    },
    {
        "content": "<p>That includes <code>proc_macro</code>, <code>std</code>, <code>core</code>, <code>alloc</code>, and a handful of others.</p>",
        "id": 229122346,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615058866
    },
    {
        "content": "<p>A rustc installation \"knows\" where to find its sysroot for a given target, though you can override it.</p>",
        "id": 229122536,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059031
    },
    {
        "content": "<p>The goal here would be to use the same mechanism or a similar mechanism to reference a packaged copy of the source of std/alloc/core/etc that came from the same Rust distribution as the compiler. rustup could distribute that. (We already provide a <code>rust-src</code> component, and in theory we could just use that; it's just larger than it would need to be, so by the time this becomes stable we may want to have a pared-down component that just has the bits needed for build-std.)</p>",
        "id": 229122607,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059122
    },
    {
        "content": "<p>Either that component would form part of the default Rust install, or you'd have to install that component to use build-std.</p>",
        "id": 229122649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059149
    },
    {
        "content": "<p>Solving that is partly a logistical issue (coordinate with rustup), and partly a technical one (\"which bits do we need to have to successfully build-std\").</p>",
        "id": 229122690,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059190
    },
    {
        "content": "<p>That's one hurdle. Another would be to then make sure that build-std works as expected and passes tests. And once those work reliably, we'd need to finish the cargo integration.</p>",
        "id": 229122825,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059299
    },
    {
        "content": "<p>There's a group working on this, that's tracking the issues involved: <a href=\"https://github.com/rust-lang/wg-cargo-std-aware\">https://github.com/rust-lang/wg-cargo-std-aware</a></p>",
        "id": 229122844,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059310
    },
    {
        "content": "<p>Does that help?</p>",
        "id": 229123041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615059485
    },
    {
        "content": "<p>Yes</p>",
        "id": 229123139,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615059578
    },
    {
        "content": "<p>Tyty</p>",
        "id": 229123145,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615059590
    }
]