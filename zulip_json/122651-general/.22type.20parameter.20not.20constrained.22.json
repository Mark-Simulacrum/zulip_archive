[
    {
        "content": "<p>Can someone explain why the following is rejected by rustc? It compiles something to be \"not constrained\", but it's as constrained as I can make it...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FooTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">U</span>: <span class=\"nc\">FooTrait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">FooTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">compute</span><span class=\"p\">()).</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=570ce190846a109b12f8c12ab4c3427a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=570ce190846a109b12f8c12ab4c3427a\">Playground link</a></p>",
        "id": 177901039,
        "sender_full_name": "RalfJ",
        "timestamp": 1570795975
    },
    {
        "content": "<p>This is related to <a href=\"https://github.com/rust-lang/rust/issues/56209\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56209\">https://github.com/rust-lang/rust/issues/56209</a> which unfortunately also did not attract any expert that could explain what is happening why</p>",
        "id": 177901066,
        "sender_full_name": "RalfJ",
        "timestamp": 1570795992
    },
    {
        "content": "<p>is the problem that there could be e.g. <code>AsRef&lt;i32&gt;</code> and <code>AsRef&lt;String&gt;</code> impls for <code>T</code>, so calling <code>AsRef</code> becomes useless because you'd still be generic?</p>",
        "id": 177901185,
        "sender_full_name": "oli",
        "timestamp": 1570796121
    },
    {
        "content": "<p>My intuition is that the problem is the query posed to the trait system that would be answered using this impl (e.g., <code>Vec&lt;?0&gt; : FooTrait</code>, solving for <code>?0</code>) gives no hint as to what <code>U</code> should be but the choice of <code>U</code> affects which code runs.</p>",
        "id": 177901288,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570796198
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span> I think this error could benefit from a bit more explanation</p>",
        "id": 177901835,
        "sender_full_name": "oli",
        "timestamp": 1570796754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  Couldn't you remove U and constrain T like this: T: AsRef&lt;dyn FooTrait&gt; ? You're only telling that T can be converted to a reference to a FooTrait object, aren't you?</p>",
        "id": 177907965,
        "sender_full_name": "pachi",
        "timestamp": 1570801645
    },
    {
        "content": "<p>So you would have: impl&lt;T: AsRef&lt;dyn FooTrait&gt;&gt; FooTrait for Vec&lt;T&gt;</p>",
        "id": 177908002,
        "sender_full_name": "pachi",
        "timestamp": 1570801679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125416\">@pachi</span> that impl however would not be useful if you have a <code>Vec&lt;Foo&gt;</code> where <code>Foo: FooTrait</code></p>",
        "id": 177989861,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888713
    },
    {
        "content": "<p>as we do not have anything like <code>Foo: AsRef&lt;dyn FooTrait&gt;</code></p>",
        "id": 177989866,
        "sender_full_name": "RalfJ",
        "timestamp": 1570888724
    }
]