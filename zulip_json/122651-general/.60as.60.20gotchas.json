[
    {
        "content": "<p>I don't feel like I understand the keyword <code>as</code>. Its primary purpose seems to be for casting between primitive types, but it will happily truncate without letting you know, which I find very confusing. I also don't feel like I know whether and when I should use <code>as</code> or <code>try_into</code>.</p>\n<p>I've been meaning to ask about this for a while, but <a href=\"https://github.com/rust-lang/rust/issues/79447\">#79447</a> is what got me to do it now.</p>",
        "id": 218040065,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606426595
    },
    {
        "content": "<p>you should use <code>as</code> if you just want to truncate. use <code>try_into</code> if you want to handle the case that the source does not fit in the dest.</p>",
        "id": 218040712,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606427384
    },
    {
        "content": "<p>Yeah, try_into is when you need custom overflow handling. Often it's just used as <code>.try_into().unwrap()</code> to panic on overflow.</p>",
        "id": 218040814,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606427522
    },
    {
        "content": "<p>Ah, so <code>as</code> should not be used if I'm, say, casting a <code>usize</code> to a <code>u32</code>?</p>",
        "id": 218043256,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606430679
    },
    {
        "content": "<p>I feel like the <code>as</code> keyword doesn't have the best design: I wouldn't immediately think that it can change the underlying value.</p>",
        "id": 218043276,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606430738
    },
    {
        "content": "<p>We probably can't/shouldn't change it at this point though <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 218043282,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606430749
    },
    {
        "content": "<p>The docs are being improved to help with this: <a href=\"https://github.com/rust-lang/rust/pull/78086\">https://github.com/rust-lang/rust/pull/78086</a></p>",
        "id": 218043925,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606431637
    },
    {
        "content": "<p>Oh, you reviewed this so you obviously know <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 218043931,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606431662
    },
    {
        "content": "<p>Yeah, the problem for me is that it's not apparent from the code that it truncates. Rust is generally very safe (that's one of the primary selling points, after all!), so <code>as</code> potentially truncating feels surprising to me.</p>",
        "id": 218044072,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606431846
    },
    {
        "content": "<p>I find it apparent: there is an <code>as &lt;something&gt;</code></p>",
        "id": 218044083,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606431880
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 218044089,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606431897
    },
    {
        "content": "<p>The issue for me is I would assume that <code>as</code> won't lose any data. I think <code>300.truncate_into::&lt;u8&gt;()</code> would be much clearer</p>",
        "id": 218044114,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606431955
    },
    {
        "content": "<p>cc <a href=\"#narrow/stream/122651-general/topic/Alternative.20to.20.60as.60.20for.20truncation.3F\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Alternative.20to.20.60as.60.20for.20truncation.3F</a></p>",
        "id": 218044155,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606431970
    },
    {
        "content": "<p><code>as</code> is one of those things that you write \"don't use it unless you are absolutely sure you want it\" in your style guidelines ^^</p>",
        "id": 218044168,
        "sender_full_name": "nagisa",
        "timestamp": 1606432002
    },
    {
        "content": "<p><code>my_variable as u8</code> is (to me) something <code>unsafe</code> so I always review it more thoroughly (I view it a little like a cast in C)</p>",
        "id": 218044169,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606432012
    },
    {
        "content": "<p>That's what I'm saying: I think <code>as</code> should be either unsafe or shouldn't exist and be replaced by a clearer operation/function</p>",
        "id": 218044188,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606432040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218044168\">said</a>:</p>\n<blockquote>\n<p><code>as</code> is one of those things that you write \"don't use it unless you are absolutely sure you want it\" in your style guidelines ^^</p>\n</blockquote>\n<p>Yeah, I just wish it were apparent in the code :)</p>",
        "id": 218044199,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606432060
    },
    {
        "content": "<p>Too late though I think</p>",
        "id": 218044207,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606432069
    },
    {
        "content": "<p>or at least without an edition</p>",
        "id": 218044212,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606432078
    },
    {
        "content": "<blockquote>\n<p>I think as should be either unsafe </p>\n</blockquote>\n<p>I've heard this before and as someone who writes a lot of unsafe please no. Harmless unsafe is the enemy of easy reviews.</p>",
        "id": 218044287,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606432160
    },
    {
        "content": "<p>cf. <a href=\"https://doc.rust-lang.org/reference/behavior-not-considered-unsafe.html\">behaviour considered not unsafe</a>.</p>",
        "id": 218044449,
        "sender_full_name": "nagisa",
        "timestamp": 1606432394
    },
    {
        "content": "<p>I'm sure that I would suspect <code>as</code> to lose data</p>",
        "id": 218059099,
        "sender_full_name": "oliver",
        "timestamp": 1606456979
    },
    {
        "content": "<p>like the way <code>bstr</code> handles invalid UTF-8</p>",
        "id": 218066116,
        "sender_full_name": "oliver",
        "timestamp": 1606465350
    },
    {
        "content": "<p>Agreed<br>\n<a href=\"https://github.com/rust-lang/rfcs/issues/2784\">https://github.com/rust-lang/rfcs/issues/2784</a></p>",
        "id": 218080136,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1606475416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307289\">Poliorcetics</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218044169\">said</a>:</p>\n<blockquote>\n<p><code>my_variable as u8</code> is (to me) something <code>unsafe</code> so I always review it more thoroughly (I view it a little like a cast in C)</p>\n</blockquote>\n<p>Rather than marking it as UB-inducing memory-<code>unsafe</code>, which it is not (on its own),  you can <code>#![deny(…)]</code> <a href=\"https://rust-lang.github.io/rust-clippy/master/#cast\">the associated <code>clippy</code> lints</a>, and if an <code>as</code> cast is direly needed, then an <em>ad-hoc</em> <code>#[allow(…)] { … }</code> block can be used instead of <code>unsafe</code>. Similar amount of \"code noise\" to capture the reviewer eye, while not diluting the meaning of <code>unsafe</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 218084462,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606478639
    },
    {
        "content": "<p>I know this would require an edition change ,but I see no problem with upcasting (eg u8 -&gt; u32), but any case that potentially loses data or changes the meaning should not compile, or require unsafe.  There could also be a truncate_into (if it doesn't already exist) that would just perform the downcast.</p>\n<p>u8 as u32 -&gt; compiles<br>\nu32 as u8 -&gt; does not compile, suggests try_into<br>\ni32 as u32 -&gt; does not compile ,suggests try_into</p>",
        "id": 218085387,
        "sender_full_name": "Þórhallur Sverrisson",
        "timestamp": 1606479411
    },
    {
        "content": "<p>this should not be <code>unsafe</code>, <code>unsafe</code> means something very different</p>",
        "id": 218085493,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606479508
    },
    {
        "content": "<p>True, I would rather it just does not compile.  If you want a downcast that potentially loses data, be explicit.</p>",
        "id": 218085799,
        "sender_full_name": "Þórhallur Sverrisson",
        "timestamp": 1606479750
    },
    {
        "content": "<p><code>try_into</code> does not easily allow replicating the old behavior, so that is not a reasonable suggestion for existing code</p>",
        "id": 218085942,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606479866
    },
    {
        "content": "<blockquote>\n<p>Rather than marking it as UB-inducing memory-<code>unsafe</code>, which it is not (on its own),  you can <code>#[deny(…)]</code> <a href=\"https://rust-lang.github.io/rust-clippy/master/#cast\">the associated <code>clippy</code> lints</a>, and if an <code>as</code> cast is direly needed, then an <em>ad-hoc</em> <code>#[allow(…)] { … }</code> block can be used instead of <code>unsafe</code>. Similar amount of \"code noise\" to capture the reviewer eye, while not diluting the meaning of <code>unsafe</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>I wasn’t advocating for <code>unsafe</code> around <code>as</code>, just for the need to review it a little more closely than normal safe rust <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. I didn’t know the solution of deny+allow blocks, I’ll use it in the future !</p>",
        "id": 218085997,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606479900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218085942\">said</a>:</p>\n<blockquote>\n<p><code>try_into</code> does not easily allow replicating the old behavior, so that is not a reasonable suggestion for existing code</p>\n</blockquote>\n<p>but truncate_into could, while being more explicit.  Don't get me wrong, I come from a C background so losing data on downcasting is nothing new but has bitten me quite a bit in the past, especially when refactoring and changing data types.  'as' could also be changed to generate a warning on possible data loss, not sure if that would require a new edition.</p>",
        "id": 218086942,
        "sender_full_name": "Þórhallur Sverrisson",
        "timestamp": 1606480526
    },
    {
        "content": "<p>Yeah, I'd be in favor of adding explicit truncation methods too, but we can only suggest them once they exist (and are stable)</p>",
        "id": 218087278,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606480778
    },
    {
        "content": "<p>Writing a proposal right now</p>",
        "id": 218126587,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606508442
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/79477\">#79477</a></p>",
        "id": 218127249,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606509131
    },
    {
        "content": "<p>I think this needs to be an RFC tbh, not just an issue. There's already one <a href=\"https://github.com/rust-lang/rfcs/pull/2484\">https://github.com/rust-lang/rfcs/pull/2484</a>, even</p>",
        "id": 218131627,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606513920
    },
    {
        "content": "<p>I didn't realize there was an RFC and I don't feel like I'm ready to do an RFC yet though</p>",
        "id": 218134109,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606516728
    },
    {
        "content": "<p>Probably will just merge the conversation into the other RFC or something</p>",
        "id": 218134112,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606516739
    },
    {
        "content": "<p>Using <code>as</code> is plenty explicit. And you can already get a warning on possible data loss if you just use clippy.</p>\n<p>So just uplift that one clippy lint (allow by default please) and you should be good</p>",
        "id": 218151036,
        "sender_full_name": "Lokathor",
        "timestamp": 1606545194
    },
    {
        "content": "<p>I think the myriad uses of <code>as</code> all thrown into a single operator was a bad decision, and having its myriad uses all covered by specific functions (that can just be <code>x as y</code> in implementation would be better for readability and also easier to document.</p>",
        "id": 218154958,
        "sender_full_name": "isHavvy",
        "timestamp": 1606553137
    },
    {
        "content": "<p>I would definitely like the short thing -- <code>as</code> -- to eventually stop doing some of the weirder things, like <code>*const</code> to <code>*mut</code> casts.</p>",
        "id": 218183057,
        "sender_full_name": "scottmcm",
        "timestamp": 1606600624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> I think I prefer the <code>WrappingInto</code> from &lt;<a href=\"https://github.com/rust-lang/rfcs/pull/2484\">https://github.com/rust-lang/rfcs/pull/2484</a>&gt; because it also works for sign conversions.  (<code>i16</code> &lt;-&gt; <code>u8</code> isn't quite truncation, to me, but works fine as wrapping.)</p>",
        "id": 218183096,
        "sender_full_name": "scottmcm",
        "timestamp": 1606600682
    },
    {
        "content": "<p>Would be great to pull the non-floating-point parts of that out and hopefully make progress on it.</p>",
        "id": 218183146,
        "sender_full_name": "scottmcm",
        "timestamp": 1606600733
    },
    {
        "content": "<p>Since <code>as</code> definitely can't change without the alternatives having been around for ages.</p>",
        "id": 218183171,
        "sender_full_name": "scottmcm",
        "timestamp": 1606600785
    },
    {
        "content": "<p>Question: If you use <code>mem::transmute::&lt;&amp;T, &amp;U&gt;(x)</code>, clippy's <code>transmute_ptr_to_ptr</code> lint will suggest something involving an <code>as</code> cast, namely <code>&amp;*(x as *const T as *const U)</code>. Is this actually better? Do we have an alternative that doesn't use <code>as</code>?</p>",
        "id": 218196937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606627176
    },
    {
        "content": "<p>Again, just my opinion, but instead of changing <code>as</code>, just make all of its operations functions, document how they work without mentioning <code>as</code>, and then de-emphasize <code>as</code> in all documentation (except the reference unfortunately; though we can point at the functions there too). It'd be mentioned only for completeness. Maybe even make it a contextual keyword so we could made <code>as</code> a method if we've determined one of the use cases is better suited with such a short name.</p>\n<p>Of course, at that point, you could add a lint with a machine fix and maybe someday just remove the operator (like a decade from now) in favor of intrinsics,</p>",
        "id": 218197148,
        "sender_full_name": "isHavvy",
        "timestamp": 1606627618
    },
    {
        "content": "<p>Is it an option to stabilize <code>u16::truncate_u8</code>, <code>u32::truncate_i8</code> and so on without stabilizing the traits yet (which are open ended and so need additional design work beyond just the functionality itself)? That seems easier, although perhaps people will object that it's polluting the namespace of the type with lots and lots of functions (which I don't think is a real problem). You can't use <code>as</code> generically anyway so it's no loss.</p>",
        "id": 218198451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606630187
    },
    {
        "content": "<p>Even if we don't remove <code>as</code>, once we have replacement functions for all of its uses we can have various compiler lints (note: I think compiler lints are better than clippy for <code>as</code>) that 'soft-deprecate' it (warn on usage) and then we can 'hard-deprecate' (error on usage, but it will be a lint so deps don't break) it. I'm not sure if we can ever remove it completely (maybe in Rust 2.0 if that ever happens?)</p>",
        "id": 218233148,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687606
    },
    {
        "content": "<p>Ugh, stability is so hard!</p>",
        "id": 218233150,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687615
    },
    {
        "content": "<blockquote>\n<p>we can 'hard-deprecate' (error on usage, but it will be a lint so deps don't break) it</p>\n</blockquote>\n<p>(the term for this is 'deny-by-default')</p>",
        "id": 218233165,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687641
    },
    {
        "content": "<p>Yeah, I forgot about that term :)</p>",
        "id": 218233167,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687652
    },
    {
        "content": "<p><code>as</code> itself is not just used for numeric conversions</p>",
        "id": 218233205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687687
    },
    {
        "content": "<p>I think we can have warn-by-default without a new edition, but deny-by-default would require one – perhaps in Rust 2023 (or whatever comes after 2021)</p>",
        "id": 218233207,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687692
    },
    {
        "content": "<p>I know</p>",
        "id": 218233208,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687695
    },
    {
        "content": "<p><code>Box::new(vec![]) as Box&lt;dyn Debug&gt;</code> should not ever be a warning IMO</p>",
        "id": 218233213,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687712
    },
    {
        "content": "<p>even if there is a new way to do it</p>",
        "id": 218233214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687719
    },
    {
        "content": "<p>and I think warn-by-default for numeric conversions is still very aggressive considering the number of codebases using it</p>",
        "id": 218233224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687753
    },
    {
        "content": "<p>That's the problem; it's so overloaded:</p>\n<ul>\n<li>Exact numeric conversions</li>\n<li>Lossy numeric conversions</li>\n<li><code>*const</code> to <code>*mut</code> -- this one is scary!</li>\n<li>etc.</li>\n</ul>",
        "id": 218233225,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687753
    },
    {
        "content": "<p>Perhaps only warn-by-default for lossy conversions?</p>",
        "id": 218233232,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233232\">said</a>:</p>\n<blockquote>\n<p>Perhaps only warn-by-default for lossy conversions?</p>\n</blockquote>\n<p>sure, but I still think that's better as a clippy lint</p>",
        "id": 218233237,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687793
    },
    {
        "content": "<p>You can only warn against something if there's an alternative way of doing it</p>",
        "id": 218233240,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606687799
    },
    {
        "content": "<p>it's not <em>incorrect</em> code, it's code that could be written bettter</p>",
        "id": 218233258,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233213\">said</a>:</p>\n<blockquote>\n<p><code>Box::new(vec![]) as Box&lt;dyn Debug&gt;</code> should not ever be a warning IMO</p>\n</blockquote>\n<p>I didn't even know that was a thing! I agree, since that's a purely type-based cast.</p>",
        "id": 218233287,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233240\">said</a>:</p>\n<blockquote>\n<p>You can only warn against something if there's an alternative way of doing it</p>\n</blockquote>\n<p>Yes, this would be <em>after</em> alternatives have been around for a while</p>",
        "id": 218233295,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687831
    },
    {
        "content": "<blockquote>\n<p>*const to *mut -- this one is scary!</p>\n</blockquote>\n<p>FWIW I don't find this particularly scary, <code>cast()</code> is <em>better</em> but that's still a clippy sort of lint</p>",
        "id": 218233298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687837
    },
    {
        "content": "<p>When I first started doing Rust, I was doing some FFI stuff and didn't understand that <code>const</code> and <code>mut</code> are just annotations for pointers -- they don't actually enforce anything, unlike <code>&amp;</code> vs <code>&amp;mut</code></p>",
        "id": 218233313,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687878
    },
    {
        "content": "<p>So it's very confusing when you can suddenly treat something that's const as mut without <code>unsafe</code> and without something explicit</p>",
        "id": 218233320,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687899
    },
    {
        "content": "<p>that seems like a reason to make const/mut conversions <em>less</em> scary and document this better</p>",
        "id": 218233329,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687922
    },
    {
        "content": "<p>Likewise, only recently did I realize that <code>300 as u8</code> will truncate</p>",
        "id": 218233346,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233329\">said</a>:</p>\n<blockquote>\n<p>that seems like a reason to make const/mut conversions <em>less</em> scary and document this better</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 218233368,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606687935
    },
    {
        "content": "<p><code>&amp;x as *const as *mut</code> is not unreasonable code, I've written it</p>",
        "id": 218233373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687959
    },
    {
        "content": "<p>it happens a lot when you use C libraries that don't use <code>const</code> annotations</p>",
        "id": 218233375,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606687971
    },
    {
        "content": "<p>I'm not saying it should be barred, just that it should be more explicit</p>",
        "id": 218233388,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688003
    },
    {
        "content": "<p>it's already unsafe to pass it to the function or dereference it, I don't htink we need to make the cast itself another layer of warnings</p>",
        "id": 218233393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688004
    },
    {
        "content": "<p>it seems pretty explicit to me</p>",
        "id": 218233398,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688022
    },
    {
        "content": "<p>I don't feel that documentation is a good solution -- I only look at docs if I don't think I understand something. Generally Rust guarantees that the compiler will tell you if something is wrong, so it's surprising when a truncating cast is not explicit</p>",
        "id": 218233445,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688058
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/not-explicit/6430\">https://internals.rust-lang.org/t/not-explicit/6430</a></p>",
        "id": 218233457,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233398\">said</a>:</p>\n<blockquote>\n<p>it seems pretty explicit to me</p>\n</blockquote>\n<p>It's explicit in the case you said, but if the <code>*const</code> is coming from somewhere far away in the code, it may not be immediately apparent that you're changing a const to a mut</p>",
        "id": 218233463,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688105
    },
    {
        "content": "<p>that's any property of unsafe code, though</p>",
        "id": 218233468,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688128
    },
    {
        "content": "<p>why should this one be singled out?</p>",
        "id": 218233471,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688132
    },
    {
        "content": "<p>I would think that casting const to mut is unsafe -- but I don't write much unsafe code, so maybe this is not an issue in practice</p>",
        "id": 218233520,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688183
    },
    {
        "content": "<p>no, casting *const to *mut can never cause UB</p>",
        "id": 218233536,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688220
    },
    {
        "content": "<p>it's only dereferencing the pointer that's an issue, and that's already unsafe</p>",
        "id": 218233548,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688235
    },
    {
        "content": "<p>What's the point of const and mut on pointers then?</p>",
        "id": 218233553,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688247
    },
    {
        "content": "<p>not much really - they're annotations to the reader more than anything else</p>",
        "id": 218233560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688261
    },
    {
        "content": "<p><code>*const T</code> is covariant, <code>*mut T</code> is invariant</p>",
        "id": 218233561,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606688262
    },
    {
        "content": "<p>This mirrors <code>&amp;T</code> vs. <code>&amp;mut T</code></p>",
        "id": 218233604,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606688286
    },
    {
        "content": "<p>But other than that it's mostly a lint</p>",
        "id": 218233607,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606688298
    },
    {
        "content": "<p>What does variance mean in practice?</p>",
        "id": 218233616,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688323
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\">https://doc.rust-lang.org/nomicon/subtyping.html#variance</a></p>",
        "id": 218233620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606688333
    },
    {
        "content": "<p>I'm looking at that</p>",
        "id": 218233654,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688403
    },
    {
        "content": "<p>I think I'll have to read that section in-depth before I truly understand *const vs *mut. Anyway, it seems that (at least for now) keeping <code>*const as *mut</code> is okay</p>",
        "id": 218233746,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688543
    },
    {
        "content": "<p>The main thing I would like to discourage use of is <code>300 as u8</code> (once we have a suitable alternative)</p>",
        "id": 218233753,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606688569
    },
    {
        "content": "<p>Yeah that just needs a scheme for generic truncation</p>",
        "id": 218233817,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606688681
    },
    {
        "content": "<p>I’ve read explanations on variance I think at least once a month since I use Rust and I still have trouble remembering the differences. It just doesn’t matter to me the vast majority of the time, it’s either my code compiled and the tests showed it worked or not ^^</p>",
        "id": 218235859,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1606692199
    },
    {
        "content": "<p>The problem with as being overloaded is that you can convert a const to a mut when you just want to do type punning, and now that's a potential vector of UB that's pretty difficult to audit.</p>",
        "id": 218241897,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1606701530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307289\">Poliorcetics</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218235859\">said</a>:</p>\n<blockquote>\n<p>It just doesn’t matter to me the vast majority of the time, it’s either my code compiled and the tests showed it worked or not ^^</p>\n</blockquote>\n<p>It basically only matters for structs with lifetimes or references in them. e.g. <code>Vec&lt;Foo&lt;'a&gt;&gt;</code> would be more annoying to use if <code>Vec&lt;T&gt;</code> had gotten the wrong variance on <code>T</code>. Ditto for <code>Vec&lt;&amp;Foo&gt;</code>.</p>",
        "id": 218242866,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606703356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233287\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233213\">said</a>:</p>\n<blockquote>\n<p><code>Box::new(vec![]) as Box&lt;dyn Debug&gt;</code> should not ever be a warning IMO</p>\n</blockquote>\n<p>I didn't even know that was a thing! I agree, since that's a purely type-based cast.</p>\n</blockquote>\n<p>We should have type ascription for that</p>",
        "id": 218245562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606707527
    },
    {
        "content": "<p>I really don't care what the syntax is, but it's a travesty that rust doesn't have type ascription</p>",
        "id": 218245592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606707565
    },
    {
        "content": "<p>is there a macro for this? It probably can't be done outside the compiler with all the details of lvalues etc</p>",
        "id": 218245613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606707600
    },
    {
        "content": "<p>That's not type ascription. That is actually a cast. I'd also like a function for that.</p>",
        "id": 218246150,
        "sender_full_name": "isHavvy",
        "timestamp": 1606708256
    },
    {
        "content": "<p>Oh, I thought the cast happens inside the argument to <code>Box::new</code></p>",
        "id": 218247093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606709514
    },
    {
        "content": "<p>i.e. that is really <code>Box::&lt;dyn Debug&gt;::new(vec![])</code></p>",
        "id": 218247142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606709536
    },
    {
        "content": "<p>TBH unsizing casts are a bit magic to me</p>",
        "id": 218247152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606709563
    },
    {
        "content": "<p>Actually, a function wouldn't work since you can't pass in a trait as a parameter.</p>",
        "id": 218250145,
        "sender_full_name": "isHavvy",
        "timestamp": 1606714042
    },
    {
        "content": "<p>The main thing that would eliminate the vast majority of calls to <code>as</code> for me is a way to assert \"no, really, I'm on a platform where usize is 64-bit, let me convert losslessly between usize and u64 without any possibility of error\".</p>",
        "id": 218260932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606726387
    },
    {
        "content": "<p>you could write a function to do that</p>",
        "id": 218261972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606727120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218196937\">said</a>:</p>\n<blockquote>\n<p>Question: If you use <code>mem::transmute::&lt;&amp;T, &amp;U&gt;(x)</code>, clippy's <code>transmute_ptr_to_ptr</code> lint will suggest something involving an <code>as</code> cast, namely <code>&amp;*(x as *const T as *const U)</code>. Is this actually better? Do we have an alternative that doesn't use <code>as</code>?</p>\n</blockquote>\n<p>There's <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.cast\">https://doc.rust-lang.org/std/primitive.pointer.html#method.cast</a>, at least.  Though really it's safe-transmute that will be the solution eventually, in many cases.</p>",
        "id": 218342320,
        "sender_full_name": "scottmcm",
        "timestamp": 1606768586
    },
    {
        "content": "<blockquote>\n<p>If you use mem::transmute::&lt;&amp;T, &amp;U&gt;(x), clippy's transmute_ptr_to_ptr lint will suggest something involving an as cast, namely &amp;*(x as *const T as *const U). Is this actually better?</p>\n</blockquote>\n<p>this is what transmute always does, no?</p>",
        "id": 218342434,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606768640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233536\">said</a>:</p>\n<blockquote>\n<p>no, casting *const to *mut can never cause UB</p>\n</blockquote>\n<p>While that's true, it's also a really, really easy footgun -- see this soundness mistake in <code>core</code> that a warning about this would have helped catch: <a href=\"https://blog.rust-lang.org/2017/02/09/Rust-1.15.1.html#whats-in-1151-stable\">https://blog.rust-lang.org/2017/02/09/Rust-1.15.1.html#whats-in-1151-stable</a></p>",
        "id": 218342459,
        "sender_full_name": "scottmcm",
        "timestamp": 1606768646
    },
    {
        "content": "<p>oh I see you don't take a reference to <code>x</code> inside the parentheses</p>",
        "id": 218342483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606768659
    },
    {
        "content": "<p>the 1.15.1 issue wasn't a *const to *mut cast, it was an *mut accessed through a &amp;self</p>",
        "id": 218342650,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1606768729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> <code>self.ptr</code> is a <code>*const</code>, no?</p>",
        "id": 218342694,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606768753
    },
    {
        "content": "<p>oh yeah I guess that's right</p>",
        "id": 218342720,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1606768768
    },
    {
        "content": "<p><code>as</code> casts on raw ptrs are pretty dangerous IMO -- when the surrounding code changes, what is being cast can change drastically</p>",
        "id": 218342778,
        "sender_full_name": "RalfJ",
        "timestamp": 1606768797
    },
    {
        "content": "<p>also this can silently cast immutable to mutable pointers, accidentally</p>",
        "id": 218342846,
        "sender_full_name": "RalfJ",
        "timestamp": 1606768807
    },
    {
        "content": "<p>so I agree with the general stanza voiced above -- <code>as</code> should be avoided</p>",
        "id": 218342966,
        "sender_full_name": "RalfJ",
        "timestamp": 1606768870
    },
    {
        "content": "<p>it seems like we should add <code>cast_mut</code> and <code>cast_const</code> methods to <code>*mut</code> and <code>*const</code> to help with that</p>",
        "id": 218343039,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1606768911
    },
    {
        "content": "<p>that, and <code>cast</code> that does <em>not</em> change mutability</p>",
        "id": 218343160,
        "sender_full_name": "RalfJ",
        "timestamp": 1606768955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/.60as.60.20gotchas/near/218233213\">said</a>:</p>\n<blockquote>\n<p><code>Box::new(vec![]) as Box&lt;dyn Debug&gt;</code> should not ever be a warning IMO</p>\n</blockquote>\n<p>Agreed.  If we eventually do start warning on specific <code>as</code> instances, it would be for the sketchier ones, not the ones that are also coercions.</p>",
        "id": 218343393,
        "sender_full_name": "scottmcm",
        "timestamp": 1606769068
    }
]