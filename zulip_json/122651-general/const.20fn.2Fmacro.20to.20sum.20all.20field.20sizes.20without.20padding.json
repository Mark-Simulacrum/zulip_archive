[
    {
        "content": "<p>Say I have the following structure and I want to read it with <code>binread</code> (which just reads and deserializes one field after another):</p>\n<div class=\"codehilite\"><pre><span></span><code>struct StandardInformationData {\n    creation_time: u64,\n    last_data_change_time: u64,\n    last_mft_change_time: u64,\n    last_access_time: u64,\n    file_attributes: u32,\n}\n</code></pre></div>\n<p>Is there a const fn/macro to get the sum of all field sizes (here 36), without any padding introduced for alignment?</p>\n<p><code>core::mem::size_of</code> would output 40 if the structure fields happen to be 8-byte aligned. I could of course add <code>#[repr(packed(4))]</code>, but it feels wrong to change the in-memory representation of the structure just to get that information (and it can easily be forgotten..)</p>",
        "id": 234050510,
        "sender_full_name": "Colin Finck",
        "timestamp": 1618152396
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SumOfFieldSizes</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">SumOfFieldSizes_</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">#[$attr:meta]</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$pub</span>:<span class=\"nc\">vis</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"cp\">$StructName</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"o\">&lt;</span><span class=\"cp\">$($lt</span>:<span class=\"nc\">lifetime</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"cp\">$($T</span>:<span class=\"nc\">ident</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?&gt;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"cp\">$(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">#[$field_attr:meta]</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$field_pub</span>:<span class=\"nc\">vis</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$field_name</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span>: <span class=\"cp\">$FieldTy</span>:<span class=\"nc\">ty</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"cp\">$(</span><span class=\"o\">&lt;</span><span class=\"cp\">$($lt</span><span class=\"w\"> </span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$($T</span><span class=\"w\"> </span><span class=\"p\">,)</span><span class=\"o\">*&gt;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">path</span>:<span class=\"nc\">to</span>::<span class=\"n\">SumOfFieldSizes</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$StructName</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"o\">&lt;</span><span class=\"cp\">$($lt</span><span class=\"w\"> </span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"cp\">$($T</span><span class=\"w\"> </span><span class=\"p\">,)</span><span class=\"o\">*&gt;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"o\">+</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"cp\">$FieldTy</span><span class=\"o\">&gt;</span><span class=\"p\">())</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">)}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">SumOfFieldSizes_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">SumOfFieldSizes</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[macro_rules_derive(SumOfFieldSizes!)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">StandardInformationData</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">creation_time</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">last_data_change_time</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">last_mft_change_time</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">last_access_time</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">file_attributes</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">StandardInformationData</span>::<span class=\"n\">size</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234056232,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618156323
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4fb498d8a68db4cd1f216a4d76d4e4f3\">Playground</a></p>",
        "id": 234056419,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618156470
    },
    {
        "content": "<p><code>const SIZE: usize</code> would be better here, as it is a const</p>",
        "id": 234057502,
        "sender_full_name": "Soveu",
        "timestamp": 1618157536
    },
    {
        "content": "<p>I wasn't sure about being able to use <code>size_of::&lt;T&gt;()</code> in an associated constant if generic type parameters were involved, but yes, provided this associated constant is not fed to generic const parameters, all is fine</p>",
        "id": 234064065,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618164047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Yes, they can refer to generic parameters in scope, that's been possible since 1.20.0 (when associated constants were stabilized)<br>\n<a href=\"https://rust.godbolt.org/z/P9YzMcxc4\">https://rust.godbolt.org/z/P9YzMcxc4</a><br>\nI wrote a macro to emulate generic constants using them.</p>",
        "id": 234068596,
        "sender_full_name": "matt1992",
        "timestamp": 1618168484
    }
]