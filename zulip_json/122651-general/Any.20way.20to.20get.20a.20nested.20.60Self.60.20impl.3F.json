[
    {
        "content": "<p>Hi! In the context of a procedural macro, I'm trying to generate a nested method with a <code>self</code> receiver: essentially I'd like to generate code somewhat like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Test</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">omg</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here, I'd like to generate the bit that says <code>impl Self {...}</code>, but I get an error saying <code>cycle detected when computing type of </code>&lt;impl at src/lib.rs:3:1: 9:2&gt;::my_function::&lt;impl at src/lib.rs:5:9: 7:10&gt;`.<br>\nIs there any trick I could use to work around this? </p>\n<hr>\n<p>Further context: </p>\n<p>I have a proc macro (attribute) which needs to generate a bunch of methods with the same parameters as the method it is attached to. I can't just have it generate a top level method because we might be inside of a trait impl block, so I figured that nested functions could do the trick, but then I can't use <code>&amp;self</code>.</p>",
        "id": 258738653,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1634921158
    },
    {
        "content": "<p>(aside: even if this is not allowed, that error message could really use some work)</p>",
        "id": 258741003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634922112
    },
    {
        "content": "<p>The <code>Self</code> here refers to the SelfTy of <code>impl Self</code></p>",
        "id": 258769654,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634934430
    },
    {
        "content": "<p>Which is not known, so is a cycle.</p>",
        "id": 258769681,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634934438
    },
    {
        "content": "<p>You can write <code>impl Self {}</code> without wrapping block, and it produces the same error.</p>",
        "id": 258769740,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634934472
    },
    {
        "content": "<p>It might seems weird that <code>Self</code> refers to the SelfTy of the impl block instead of the outer scope, but for trait impl it's legal to use <code>Self</code>, e.g. <code>impl&lt;T&gt; Trait&lt;Self&gt; for T {}</code>, so I think it's good to have the consistency in inherent impl blocks as well.</p>",
        "id": 258770151,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634934664
    },
    {
        "content": "<p>ah, and you can't for example use <code>super::Self</code> either</p>",
        "id": 258817087,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1634986412
    },
    {
        "content": "<p>Nor any other type parameters of the surrounding scope.</p>",
        "id": 258827689,
        "sender_full_name": "cuviper",
        "timestamp": 1635001021
    }
]