[
    {
        "content": "<p>yeah my bad, i need ceil(log_8(x))</p>",
        "id": 272017717,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644949872
    },
    {
        "content": "<p>Do you mean <code>ceil(log8(x))</code> or <code>floor(log8(x)) + 1</code>? The two differ when <code>x</code> is a power of 8, and the latter is the usual expression for the number of digits in a value.</p>",
        "id": 272018730,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644950323
    },
    {
        "content": "<p>If <code>x</code> does not yield a whole number it should be the \"rounded up\" result, i.e. <code>16</code> =&gt; <code>2</code> and <code>512</code> =&gt; <code>3</code></p>",
        "id": 272018834,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644950370
    },
    {
        "content": "<p>Although maybe <code>floor(log8(x)) + 1</code> works, because i need <code>0</code> =&gt; <code>1</code></p>",
        "id": 272019007,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644950440
    },
    {
        "content": "<p>But then <code>512</code> yields <code>4</code> :/</p>",
        "id": 272019069,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644950475
    },
    {
        "content": "<p>ceil(log8(x)): <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2021&amp;gist=f56dff7ed78a5b0c4972f072ec0e79b9\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2021&amp;gist=f56dff7ed78a5b0c4972f072ec0e79b9</a></p>",
        "id": 272019103,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644950490
    },
    {
        "content": "<p>if you need 0 -&gt; 1, add a special case</p>",
        "id": 272019230,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644950541
    },
    {
        "content": "<p>Yeah</p>",
        "id": 272019242,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644950547
    },
    {
        "content": "<p>Yup that seems to work, thanks :)</p>",
        "id": 272019283,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644950579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> has marked this topic as resolved.</p>",
        "id": 272019288,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644950582
    },
    {
        "content": "<p>Or without the comparison:<br>\n<code>(1u64.leading_bits() - (v * 8 - 1).leading_bits()) / 3</code></p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2021&amp;gist=23356d99b777d2a5505e635cd2a20058\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2021&amp;gist=23356d99b777d2a5505e635cd2a20058</a></p>",
        "id": 272021243,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1644951478
    },
    {
        "content": "<p>Oh awesome</p>",
        "id": 272021998,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644951722
    },
    {
        "content": "<p>Minor thing to add, <span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span>: if you do need a special case for <code>0</code>, then you can go via &lt;<a href=\"https://doc.rust-lang.org/std/num/struct.NonZeroU64.html#method.leading_zeros\">https://doc.rust-lang.org/std/num/struct.NonZeroU64.html#method.leading_zeros</a>&gt; to get slightly better codegen on the default x64 target.</p>",
        "id": 272033473,
        "sender_full_name": "scottmcm",
        "timestamp": 1644956992
    },
    {
        "content": "<p>oh cool</p>",
        "id": 272033562,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644957016
    },
    {
        "content": "<p>(if you want to get <code>64</code> for <code>0.leading_zeros()</code>, then the codegen is better when you do it on <code>u64</code> directly, but if you want something else when calling it on <code>0</code>, or if it's not possible for it to be <code>0</code>, then <code>NonZeroU64</code> will be a slight improvement.)</p>\n<p>One other thing: you might want to consider what you want this to do on overflow in that multiplication.  It's probably not worth making it UB, but you could consider <code>v.checked_mul(8).expect(\"won't actually get this big\")</code> so that LLVM automatically knows the overflow is unlikely.  (Like it does for all conditions that lead to a panic.)</p>",
        "id": 272034259,
        "sender_full_name": "scottmcm",
        "timestamp": 1644957381
    }
]