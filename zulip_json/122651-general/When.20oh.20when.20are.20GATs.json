[
    {
        "content": "<p>I know this is the hardest question, but... when we gonna see stable GATs?</p>\n<blockquote>\n<p>we have high hopes we can stabilize this feature within the next couple months (<a href=\"https://blog.rust-lang.org/2021/08/03/GATs-stabilization-push.html\">Aug. 3, 2021</a>)</p>\n</blockquote>\n<p>I have a library that could make use of GATs. It's still in local-only development, so I don't mind using a nightly feature for now, especially if I can help with the feature, but I don't particularly want to be stuck in nightly-only purgatory for \"a long time\".</p>",
        "id": 273361512,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645907637
    },
    {
        "content": "<p>Seconding this. It seems its just waiting for a decision about where clause location + enough time to verify no bugs. But theres some internal libraries we use at work that are going to look so clean with GATs</p>",
        "id": 273361593,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1645907751
    },
    {
        "content": "<p>I am not sure if that would be speed up things a bit but why not stabilize a minimal version of gat? Maybe with just one lifetime or something. It feels like we are waiting for fully fledged GAT with all corner cases taking care of whereas a lot of use cases could be unlocked with \"minimal GAT\"</p>",
        "id": 273362439,
        "sender_full_name": "marmeladema",
        "timestamp": 1645908885
    },
    {
        "content": "<p>I think that the where clause location has been decided on</p>",
        "id": 273362982,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645909467
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/90076#issuecomment-1020949582\">https://github.com/rust-lang/rust/pull/90076#issuecomment-1020949582</a> yeah a month ago</p>",
        "id": 273363058,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645909595
    },
    {
        "content": "<p>afaict its just actually _implementing_ the change</p>",
        "id": 273363063,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645909609
    },
    {
        "content": "<p>the <code>GATS-blocking</code> label only lists rustdoc as the other blocker</p>",
        "id": 273363072,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645909628
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/92341\">#92341</a></p>",
        "id": 273363073,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645909639
    },
    {
        "content": "<p>(no idea how up to date that label is)</p>",
        "id": 273363074,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645909645
    },
    {
        "content": "<p>I think that if GATs are as close as they are that splitting them up is actually not going to make them come faster (there is a certain amount of overhead in splitting features up).</p>",
        "id": 273363189,
        "sender_full_name": "Jubilee",
        "timestamp": 1645909813
    },
    {
        "content": "<p>Sure sounds like people are saying “soon“￼</p>",
        "id": 273364169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645911231
    },
    {
        "content": "<p>A more \"official\" summary/update will be coming soon, but here's a brief one:</p>\n<ul>\n<li>There are a couple blockers that are \"unresolved\" fully, but only in that the PRs to resolve them just haven't been merged. (<a href=\"https://github.com/rust-lang/rust/issues/90076\">#90076</a> to change the location of where clauses, <a href=\"https://github.com/rust-lang/rust/issues/94009\">#94009</a> to add GATs functionality to rustdoc). These are just waiting on final review.</li>\n<li>There are a number of issues that haven't been fully triaged for whether they rise to the level of <em>blocking</em>. Likely, the answer is <em>no</em> for probably all of them. A blocking issue at this point would be either 1) A major ergonomics issue (I don't think any of these are that) or 2) A bug that poses a backwards-compatibility hazard if stabilized as-is (more likely, but not a bit chance; it's more so just making sure we/I know the root cause of each of these issues).</li>\n<li>There are some API design thoughts (<a href=\"https://github.com/rust-lang/generic-associated-types-initiative/issues/1\">generic-associated-types-initiative#1</a>, <a href=\"https://github.com/rust-lang/generic-associated-types-initiative/issues/2\">generic-associated-types-initiative#2</a>) that I personally think we really should spell out before stabilization. I don't think we should necessarily require them to be implemented or even require them <em>to be able to be implemented</em> (I think there might be some HRTB implied bounds issues to work through, for example), but I think we should know if there are any design choices that we are committing to <em>now</em> that would cause better ergonomics <em>later</em> (like, e.g., making <code>Iterator::Item</code> a GAT) to be impossible. Arguably, a lot of the things I foresee us wanting to do <em>someday</em> probably deserves an RFC.</li>\n<li>Finally, we/I need to write a stabilization report. As part of this, we should should be thinking 1) What kind of patterns do we expect to work \"perfectly\"; what kind of patterns do we expect will work, but might run into problems (I imagine some HRTB-related things in this category); and what kind of patterns do we just don't expect to work at all yet (object safety, <code>LendingIterator</code> <code>for_each</code> and <code>filter</code>, <code>for&lt;T&gt;</code> all come to mind) 2) What is the current test coverage and how well represented are the patterns from (1) represented 3) Future work - much of this from the previous point, but I expect to touch on the second category from (1) a bit too.</li>\n</ul>",
        "id": 273371249,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645920571
    },
    {
        "content": "<p>All this to say: very soon.</p>",
        "id": 273371318,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645920676
    },
    {
        "content": "<p>Please note: I still would love to see concrete/different use cases for GATs. Particularly, I'd love to see things like \"I wanted to do this weird thing and it worked\" and \"I wanted to do this weird thing and it didn't work\" and \"This was a very simple thing, but it didn't work\"</p>",
        "id": 273371372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645920760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273362439\">said</a>:</p>\n<blockquote>\n<p>I am not sure if that would be speed up things a bit but why not stabilize a minimal version of gat? Maybe with just one lifetime or something. It feels like we are waiting for fully fledged GAT with all corner cases taking care of whereas a lot of use cases could be unlocked with \"minimal GAT\"</p>\n</blockquote>\n<p>Note that lifetime-only GATs can already be fully \"emulated\" using traits with lifetime arguments and HRTBs. Compare e.g. <a href=\"https://users.rust-lang.org/t/lifetime-conflicting-requirements/64070/4\">this example</a>.</p>",
        "id": 273371382,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645920784
    },
    {
        "content": "<p>oh the <code>_Outlives</code> generic is a neat trick</p>",
        "id": 273371440,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645920844
    },
    {
        "content": "<p>i'd not come across that before, cool</p>",
        "id": 273371443,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645920852
    },
    {
        "content": "<p>The often-cited <code>LendingIterator</code> is also a case of a lifetime-only GAT, so technically people could develop and experiment with its API already, even on stable.</p>",
        "id": 273371446,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645920861
    },
    {
        "content": "<p>AFAICT most requests for GATs are for cases with lifetimes only, so I don't even fully understand the huge demand for getting GAT support ASAP. I couldn't immediately - of the top of my head - name a good use-case that involves actual type parameters, not lifetimes. I guess a lot of it is that existing stable workarounds are largely unknown.</p>",
        "id": 273371533,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645921029
    },
    {
        "content": "<p>I _really_ want GATs and ive spent a lot of time using the intermediate <code>trait</code> hack and  honestly the main reason I want  GATs is because it is so incredibly bad boilerplate wise trying to use the workarounds lol</p>",
        "id": 273371544,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645921075
    },
    {
        "content": "<p>but maybe the even more main reason is just that im hoping that as gats get developed more HRTB will become less buggy..</p>",
        "id": 273371585,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645921095
    },
    {
        "content": "<p>I feel like the workarounds are currently even more capable than the actual thing, still. With a <code>MyTrait: for&lt;'a&gt; HasGenericType&lt;'a&gt;</code> supertrait thing, you can at least write bounds such as <code>T: MyTrait + for&lt;'a&gt; HasGenericType&lt;'a, GenericType = FooBar&lt;'a&gt;&gt;</code>. Try doing this with a GAT... there's no syntax for it. No way to write something like<code>T: MyTrait&lt;for&lt;'a&gt; GenericType&lt;'a&gt; = FooBar&lt;'a&gt;&gt;</code> or whatever else would be a reasonable syntax. These limitations almost feel like a blocker to me.</p>",
        "id": 273371671,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645921243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280891\">Frank Steffahn</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273371671\">said</a>:</p>\n<blockquote>\n<p>Try doing this with a GAT... there's no syntax for it. No way to say <code>T: MyTrait&lt;for&lt;'a&gt; GenericType &lt;'a&gt; = FooBar&lt;'a&gt;&gt;</code> or something like that.</p>\n</blockquote>\n<p>That would be <code>T: for&lt;'a&gt; MyTrait&lt;GenericType&lt;'a&gt; = FooBar&lt;'a&gt;&gt;</code></p>",
        "id": 273371749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921389
    },
    {
        "content": "<p>Oh... that's a thing?</p>",
        "id": 273371806,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645921477
    },
    {
        "content": "<p>That's a thing</p>",
        "id": 273371898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273371372\">said</a>:</p>\n<blockquote>\n<p>Please note: I still would love to see concrete/different use cases for GATs. Particularly, I'd love to see things like \"I wanted to do this weird thing and it worked\" and \"I wanted to do this weird thing and it didn't work\" and \"This was a very simple thing, but it didn't work\"</p>\n</blockquote>\n<p>Is there a specific place you're wanting people to give that feedback?</p>",
        "id": 273371975,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645921748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273371898\">said</a>:</p>\n<blockquote>\n<p>That's a thing</p>\n</blockquote>\n<p>Impressive. For some reason, I've never seen that before. And the compiler doesn't really help with suggestions either.</p>",
        "id": 273371979,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645921763
    },
    {
        "content": "<p>It's a little weird, because that really <em>should</em> mean <code>for&lt;'a where 'a is WF&gt;</code> (meaning that the <code>'a</code> you pick results in everything to be WF)</p>",
        "id": 273371994,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921793
    },
    {
        "content": "<p>So, like if you have a <code>type Item&lt;'a&gt; where Self: 'a</code>, that would be <code>I: for&lt;'a where I: 'a&gt; Iterator&lt;Item&lt;'a&gt; = ...&gt;</code></p>",
        "id": 273372155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921839
    },
    {
        "content": "<p>which is a big hurdle for making <code>Iterator::Item</code> a GAT</p>",
        "id": 273372163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273371975\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273371372\">said</a>:</p>\n<blockquote>\n<p>Please note: I still would love to see concrete/different use cases for GATs. Particularly, I'd love to see things like \"I wanted to do this weird thing and it worked\" and \"I wanted to do this weird thing and it didn't work\" and \"This was a very simple thing, but it didn't work\"</p>\n</blockquote>\n<p>Is there a specific place you're wanting people to give that feedback?</p>\n</blockquote>\n<p>the GATS initiative repo</p>",
        "id": 273372170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921874
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/generic-associated-types-initiative/issues/new/choose\">https://github.com/rust-lang/generic-associated-types-initiative/issues/new/choose</a></p>",
        "id": 273372184,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921920
    },
    {
        "content": "<p>oh thats pretty neat :)</p>",
        "id": 273372226,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645921939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> </p>\n<p>I played around with this syntax for a moment,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// the parameter type `T` may not live long enough</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>doesn't work, while the workaround does work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasTy</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_Outlives</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasTy</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasTy</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasTy</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasTy</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273372567,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645922522
    },
    {
        "content": "<p>This looks like <a href=\"https://github.com/rust-lang/rust/issues/93262\">#93262</a></p>",
        "id": 273372842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645922894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273371994\">said</a>:</p>\n<blockquote>\n<p>It's a little weird, because that really <em>should</em> mean <code>for&lt;'a where 'a is WF&gt;</code> (meaning that the <code>'a</code> you pick results in everything to be WF)</p>\n</blockquote>\n<p>and likely because of this</p>",
        "id": 273372860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645922940
    },
    {
        "content": "<p>I have some rambling <a href=\"#narrow/stream/144729-wg-traits/topic/Considering.20a.20GATified.20Iterator/near/272134734\">here</a> where I've tried to think about this a bit. Thoughts would definitely be appreciated if you have any :)</p>",
        "id": 273372922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645923023
    },
    {
        "content": "<p>rustdoc PR for GAT has been merged 🥳</p>",
        "id": 274100689,
        "sender_full_name": "marmeladema",
        "timestamp": 1646385472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/When.20oh.20when.20are.20GATs/near/273371372\">said</a>:</p>\n<blockquote>\n<p>Please note: I still would love to see concrete/different use cases for GATs. Particularly, I'd love to see things like \"I wanted to do this weird thing and it worked\" and \"I wanted to do this weird thing and it didn't work\" and \"This was a very simple thing, but it didn't work\"</p>\n</blockquote>\n<p>I had a idea for implementing my dependency injection library (<a href=\"https://github.com/AzureMarker/shaku\">shaku</a>) which was blocked on GATs, and would primarily use types instead of lifetimes. However, it's been so long since I thought about it that I forget the details <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>.</p>",
        "id": 274274698,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1646527234
    },
    {
        "content": "<p>The where clause location change PR has been merged 🥳<br>\nIt was the last GAT blocking  issue right?</p>",
        "id": 274296581,
        "sender_full_name": "marmeladema",
        "timestamp": 1646560254
    },
    {
        "content": "<p>Correct. Just need to triage remaining untriaged issues, do a bit of std API design, and write stabilization report</p>",
        "id": 274308425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646576596
    }
]