[
    {
        "content": "<p>Dear all, It seems like doing something like iter::once(2).chain(other) yields an iterator that only returns one element</p>\n<p>If this is not the case as it should not be, then why does the following test fail? : </p>\n<p><a href=\"/user_uploads/4715/wVTO3S92akNWVPMWm0oPwrdE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/wVTO3S92akNWVPMWm0oPwrdE/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/wVTO3S92akNWVPMWm0oPwrdE/image.png\"></a></div>",
        "id": 236665106,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619699707
    },
    {
        "content": "<p>Please don't post code as image, that breaks copy paste</p>",
        "id": 236665259,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1619699775
    },
    {
        "content": "<p>use std::iter;<br>\nuse std::u128;</p>\n<p>pub fn is_square_free(n: u128) -&gt; bool {<br>\n    !iter::once(2_u128)<br>\n        .chain((3_128..n).into_iter().step_by(2))<br>\n        .map(|i| i.pow(2))<br>\n        .take_while(|i| i &lt;= &amp;n)<br>\n        .any(|i| (n % i) == 0)<br>\n}</p>\n<p>#[cfg(test)]<br>\nmod tests {<br>\n    use super::*;<br>\n    #[test]<br>\n    fn not_square_free() {<br>\n        assert!(!is_square_free(9));<br>\n    }<br>\n}</p>",
        "id": 236665350,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619699827
    },
    {
        "content": "<p>What if you do <code>n % dbg!(i) == 0</code>?</p>",
        "id": 236665373,
        "sender_full_name": "Laurențiu",
        "timestamp": 1619699837
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dd874fdf2dd070601e0d160b75d462fe\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dd874fdf2dd070601e0d160b75d462fe</a></p>",
        "id": 236665436,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619699879
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b2126d660a18e059955395ca5b163da9\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b2126d660a18e059955395ca5b163da9</a></p>",
        "id": 236665576,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619699946
    },
    {
        "content": "<p>It looks like only 4 is produced and it stops after that</p>",
        "id": 236665631,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619699984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span>  did I manage to find a bug in Rust itself? Or am I misunderstanding something fundamental here (I hope it is the latter)</p>",
        "id": 236666075,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619700181
    },
    {
        "content": "<p>No, you have a typo</p>",
        "id": 236666223,
        "sender_full_name": "Laurențiu",
        "timestamp": 1619700251
    },
    {
        "content": "<p>You want <code>3_u128</code>, not <code>3_128</code> (just <code>3</code> is fine though)</p>",
        "id": 236666242,
        "sender_full_name": "Laurențiu",
        "timestamp": 1619700263
    },
    {
        "content": "<p>Ah. What does 3_128 do?</p>",
        "id": 236666326,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619700311
    },
    {
        "content": "<p>It's like <code>3128</code></p>",
        "id": 236666360,
        "sender_full_name": "Laurențiu",
        "timestamp": 1619700323
    },
    {
        "content": "<p>Ah, Ok thanks :) I love the Rust community!</p>",
        "id": 236666405,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1619700348
    },
    {
        "content": "<p>Oh, you got unlucky in that you're using <code>u128</code>.  For any other width of integer, clippy will help out this this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: mistyped literal suffix\n --&gt; src/main.rs:2:13\n  |\n2 |     let x = 3_32;\n  |             ^^^^ help: did you mean to write: `3_i32`\n  |\n  = note: `#[deny(clippy::mistyped_literal_suffixes)]` on by default\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n</code></pre></div>",
        "id": 236704436,
        "sender_full_name": "scottmcm",
        "timestamp": 1619713797
    },
    {
        "content": "<p>Clippy should probably lint for u128 too, no?</p>",
        "id": 236705070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619714025
    },
    {
        "content": "<p>Oh well I guess it could also not be a typo hmm</p>",
        "id": 236705107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619714041
    },
    {
        "content": "<p>Yeah, that's the problem.  When we looked it seemed like it was very uncommon to have <code>x_xx</code> -- there are some locales with <code>xx_xx_xxx</code>, but nothing I found that does <code>xx_xx_xx</code> -- but of course <code>3_789_128</code> is just as plausibly not a typo.</p>",
        "id": 236705389,
        "sender_full_name": "scottmcm",
        "timestamp": 1619714151
    },
    {
        "content": "<p>does clippy have enough type information to apply that contextually? that is, only warn about <code>..._128</code> if you use that in a context that is otherwise known to be <code>i128</code>/<code>u128</code> already</p>",
        "id": 236707778,
        "sender_full_name": "cuviper",
        "timestamp": 1619715099
    },
    {
        "content": "<p>but I don't know what the remedy would be if you really wanted the value, not a suffix</p>",
        "id": 236707801,
        "sender_full_name": "cuviper",
        "timestamp": 1619715114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/confusion.20over.20chaining.20iter.3A.3Aonce.20with.20another.20iterator/near/236707801\">said</a>:</p>\n<blockquote>\n<p>but I don't know what the remedy would be if you really wanted the value, not a suffix</p>\n</blockquote>\n<p>Force the usage of the suffix anyway: <code>9_128_u32</code></p>",
        "id": 236713405,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619717348
    },
    {
        "content": "<p>or <code>9_128_</code> if you don't want to specify the type</p>",
        "id": 236714836,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1619717912
    },
    {
        "content": "<p>that seems ugly though</p>",
        "id": 236714873,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619717935
    }
]