[
    {
        "content": "<p>I noticed that on <a href=\"https://github.com/rust-lang/rust/blob/41b315a470d583f6446599984ff9ad3bd61012b2/compiler/rustc_target/src/spec/windows_msvc_base.rs#L19\">Windows</a> and <a href=\"https://github.com/rust-lang/rust/blob/41b315a470d583f6446599984ff9ad3bd61012b2/compiler/rustc_target/src/spec/android_base.rs#L15\">Android</a>, unwind tables are <em><a href=\"https://github.com/rust-lang/rust/pull/69984#discussion_r392411195\">strictly</a></em> required, and <a href=\"https://github.com/rust-lang/rust/blob/41b315a470d583f6446599984ff9ad3bd61012b2/src/test/ui/panic-runtime/unwind-tables-target-required.rs#L8\">it's not possible not to force LLVM generating them via <code>-C force-unwind-tables=no</code></a>. However, the only reason I found that makes them required is because <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\">Breakpad</a> and <a href=\"https://github.com/rust-lang/rust/issues/49867\">Gecko profiler</a> are using unwind tables on Windows and Android repesctively, as mentioned in <a href=\"https://github.com/rust-lang/rust/issues/50093\">#50093</a> and <a href=\"https://github.com/rust-lang/rust/issues/40549\">#40549</a>.<br>\nIt seems that if I don't use libraries/programs that depends on unwind tables, don't need to set up an asynchronous exception handler, and use <code>panic = \"abort\"</code> (of course) on Windows, they are not really required. Is there a reason that they are <em>strictly</em> required? (They may also even not required to be generated by default when <code>panic = \"abort\"</code>, as now <a href=\"https://github.com/rust-lang/rust/pull/69984\"><code>-C force-unwind-tables</code></a> exists, maybe <a href=\"https://github.com/rust-lang/rust/issues/49867#issuecomment-380485548\">using that for custom unwind tables usages</a> is preferable.)</p>",
        "id": 231167016,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616269203
    },
    {
        "content": "<p>On windows unwinding is baked into the standard library and OS (caveats in wording precision)</p>",
        "id": 231169199,
        "sender_full_name": "nagisa",
        "timestamp": 1616271666
    },
    {
        "content": "<p>So even if your app does not rely on it windows itself does</p>",
        "id": 231169212,
        "sender_full_name": "nagisa",
        "timestamp": 1616271681
    },
    {
        "content": "<p>But what could happen if there's no unwind table? How does it <em>rely</em> on it?</p>",
        "id": 231169445,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616271961
    },
    {
        "content": "<p>For hardware exception (SIGILL,SIGFPE,SIGSEGV,... on Unix), unlike on Unix with it's signal handlers, Windows uses SEH to unwind your code until it hits a function that catches the hardware exception.</p>",
        "id": 231170185,
        "sender_full_name": "bjorn3",
        "timestamp": 1616272833
    },
    {
        "content": "<p>SEH is also baked into the kernel, unlike unwinding on Unix, as on Windows the kernel may call into user code. This requires an unwinding aware kernel to be able to unwind through the kernel.</p>",
        "id": 231170215,
        "sender_full_name": "bjorn3",
        "timestamp": 1616272896
    },
    {
        "content": "<p>^</p>",
        "id": 231170488,
        "sender_full_name": "nagisa",
        "timestamp": 1616273188
    },
    {
        "content": "<p>IIRC processes can send an exception to other processes too (via TerminateProcess) I believe. Which then in turn also kicks off such a SEH exception.</p>",
        "id": 231170609,
        "sender_full_name": "nagisa",
        "timestamp": 1616273298
    },
    {
        "content": "<p>If a hardware exception is raised, I'm happy to let it crash my program <em>directly</em>, just like the default behaviour on Unix. I don't need \"a function that catches the hardware exception\"?</p>",
        "id": 231170623,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616273327
    },
    {
        "content": "<p>Its not just hardware faults.</p>",
        "id": 231170723,
        "sender_full_name": "nagisa",
        "timestamp": 1616273436
    },
    {
        "content": "<p>Even if the exception is triggered programmatically, I still don't want to handle it and am happy to let it crash my program.</p>",
        "id": 231170839,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616273590
    },
    {
        "content": "<p>IIRC programs might just not work at all without correct uwtables in the first place â€“ as in not launch. I did try to set up uwtables for segmented stacks in <code>psm</code> (against all the advices to not do so) and had gotten it to a working degree on my local machine, only to witness my tests immediately faulting on a CI machine.</p>",
        "id": 231170901,
        "sender_full_name": "nagisa",
        "timestamp": 1616273651
    },
    {
        "content": "<p>And so LLVM does not support (AFAIK) not emitting precise uwtables on Windows because its a maintenance burden for an use-case that almost nobody has.</p>",
        "id": 231170956,
        "sender_full_name": "nagisa",
        "timestamp": 1616273735
    },
    {
        "content": "<p>Much like with many other things LLVM, people with rare use-cases are expected to implement code to support them by themselves.</p>",
        "id": 231171026,
        "sender_full_name": "nagisa",
        "timestamp": 1616273798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/Unwind.20tables.20are.20strictly.20required.20on.20Windows.20and.20Android/near/231170956\">said</a>:</p>\n<blockquote>\n<p>And so LLVM does not support (AFAIK) not emitting precise uwtables</p>\n</blockquote>\n<p>Then what did <a href=\"https://github.com/rust-lang/rust/issues/40549\">#40549</a> do and why it had effects on Gecko?</p>",
        "id": 231171161,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616273971
    },
    {
        "content": "<p>Or before <a href=\"https://github.com/rust-lang/rust/issues/40549\">#40549</a> Windows targets were broken with <code>panic = \"abort\"</code>? (If so, that's surprising and scary to me.)</p>",
        "id": 231171292,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616274077
    },
    {
        "content": "<p>Hm, I might be wrong then about LLVM not having the support for this, I could've sworn that I've seen emission of SEH directives without checking if uwtable is enabled, but looking at it again, it seems that they are all inside ifs.</p>",
        "id": 231173657,
        "sender_full_name": "nagisa",
        "timestamp": 1616276816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/Unwind.20tables.20are.20strictly.20required.20on.20Windows.20and.20Android/near/231173657\">said</a>:</p>\n<blockquote>\n<p>Hm, I might be wrong then about LLVM not having the support for this, I could've sworn that I've seen emission of SEH directives without checking if uwtable is enabled, but looking at it again, it seems that they are all inside ifs.</p>\n</blockquote>\n<p>Interesting. Could you point me to where did you look at? Maybe <code>git blame</code> could provide some useful informations.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/Unwind.20tables.20are.20strictly.20required.20on.20Windows.20and.20Android/near/231170723\">said</a>:</p>\n<blockquote>\n<p>Its not just hardware faults.</p>\n</blockquote>\n<p>I don't feel like doing something other than aborting the program or displaying a bug report window when an exception occurs would be a good idea, per the \"Important\" section in <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model?view=msvc-160#structured-and-standard-c-exception-handling\">https://docs.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model?view=msvc-160#structured-and-standard-c-exception-handling</a>:</p>\n<blockquote>\n<p>In most cases, asynchronous exceptions are unrecoverable and should be considered fatal. Catching them and proceeding can cause process corruption and lead to bugs that are hard to find and fix.</p>\n</blockquote>\n<p>(That's why I'm happy to let any exception crash my program, if I don't use something like Breakpad.)</p>",
        "id": 231204472,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616318508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/122651-general/topic/Unwind.20tables.20are.20strictly.20required.20on.20Windows.20and.20Android/near/231204472\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/Unwind.20tables.20are.20strictly.20required.20on.20Windows.20and.20Android/near/231173657\">said</a>:</p>\n<blockquote>\n<p>Hm, I might be wrong then about LLVM not having the support for this, I could've sworn that I've seen emission of SEH directives without checking if uwtable is enabled, but looking at it again, it seems that they are all inside ifs.</p>\n</blockquote>\n<p>Interesting. Could you point me to where did you look at? Maybe <code>git blame</code> could provide some useful informations.</p>\n</blockquote>\n<p>Is it <a href=\"https://github.com/llvm/llvm-project/blob/d11d5d1c5f5a8bafc28be98f43c15a3452abb98b/llvm/lib/Target/X86/X86FrameLowering.cpp#L1313\">https://github.com/llvm/llvm-project/blob/d11d5d1c5f5a8bafc28be98f43c15a3452abb98b/llvm/lib/Target/X86/X86FrameLowering.cpp#L1313</a>?</p>",
        "id": 231233142,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616351788
    },
    {
        "content": "<p>Looks like those <code>.seh</code>s are gated behind <code>if</code>s since <a href=\"https://reviews.llvm.org/D4081\">https://reviews.llvm.org/D4081</a>, which looks like the initial implementation of SEH unwind info, if I'm not looking at the wrong place...</p>",
        "id": 231233845,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616352609
    },
    {
        "content": "<p>/me decides to create a PR to stop enforcing unwind tables on those targets, and will welcome feedback there.</p>",
        "id": 231281874,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616405227
    },
    {
        "content": "<p>I want to test after my change, <code>uwtable</code> is still emitted by default on Windows and Android, in order not to break things like Gecko. I think I should add a  test in <code>src/test/codegen</code>, but how do I make it only run on Windows and Android? (Is <code>// only-windows // only-android</code> correct or it will make the test always ignored? Or do I need to write a bunch of <code>// ignore-...</code>s?)</p>",
        "id": 231320114,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616423753
    },
    {
        "content": "<p><code>// only-windows</code> sounds correct</p>",
        "id": 231320484,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616423883
    },
    {
        "content": "<p>But what about Android?</p>",
        "id": 231320526,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616423901
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/tests/adding.html?highlight=Ui%20test#ignoring-tests\">https://rustc-dev-guide.rust-lang.org/tests/adding.html?highlight=Ui%20test#ignoring-tests</a></p>",
        "id": 231320675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616423972
    },
    {
        "content": "<p><code>// only-windows</code> and <code>// only-android</code> can be put in the <em>same</em> file at the same time?</p>",
        "id": 231322157,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616424511
    },
    {
        "content": "<p>A bunch of ignores or multiple tests is unfortunately the only option, unless you have some time to reimplement <code>only-*</code> directives properly.</p>",
        "id": 231322808,
        "sender_full_name": "tm",
        "timestamp": 1616424728
    },
    {
        "content": "<p>Oh... <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> Thanks!</p>",
        "id": 231323555,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616424968
    },
    {
        "content": "<p>if your tests are <code>#[no_core]</code> you can use revisions.</p>",
        "id": 231323771,
        "sender_full_name": "nagisa",
        "timestamp": 1616425050
    },
    {
        "content": "<p>with <code>--target=anything</code> for each revision you're testing and <code>// needs-llvm-components</code> for the architectures you're using in the test.</p>",
        "id": 231323974,
        "sender_full_name": "nagisa",
        "timestamp": 1616425113
    },
    {
        "content": "<p>I'll have a try. Thanks!</p>",
        "id": 231324060,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616425152
    },
    {
        "content": "<p>src/test/codegen/target-feature-overrides.rs is a close example of this.</p>",
        "id": 231324079,
        "sender_full_name": "nagisa",
        "timestamp": 1616425160
    },
    {
        "content": "<p>Wait... Maybe Windows really requires unwind tables: <a href=\"https://github.com/rust-lang/rust/pull/69984#issuecomment-609448581\">https://github.com/rust-lang/rust/pull/69984#issuecomment-609448581</a> (In particular, <a href=\"https://stackoverflow.com/questions/45333326/under-what-conditions-do-i-need-to-set-up-seh-unwind-info-for-an-x86-64-assembly/45333553#comment-77629593\">this comment</a> in the linked Stack Overflow question:)</p>\n<blockquote>\n<p>The results are now undefined because you are operating with garbage data. </p>\n</blockquote>\n<p>It's scary that before  <a href=\"https://github.com/rust-lang/rust/issues/40549\">#40549</a> Windows targets with <code>panic = \"abort\"</code> seems really broken (and it's strange that LLVM supports not emitting them / initially does not support emitting them).<br>\nI'll defer the Windows change, but it should be safe to skip emitting <code>uwtable</code> on Android?</p>",
        "id": 231350247,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616433649
    },
    {
        "content": "<p>If android walks the stacks for the same purposes as windows, then it'll face all the same issues.</p>",
        "id": 231350587,
        "sender_full_name": "nagisa",
        "timestamp": 1616433771
    },
    {
        "content": "<p>Worth noting that the stack overflow answer did not really say anything new â€“ you may get exceptions thrown at any time by anybody and the stack unwinding algorithm can't work without data that it requires to operate.</p>",
        "id": 231350851,
        "sender_full_name": "nagisa",
        "timestamp": 1616433882
    },
    {
        "content": "<p>this is true on plain gnu linux too, if there is no unwinding information somewhere in the call stack, of if its incorrect, you can see almost anything happening.</p>",
        "id": 231350937,
        "sender_full_name": "nagisa",
        "timestamp": 1616433926
    },
    {
        "content": "<p>Yes, I understand and agree with that, thanks for your explanation. But neither GNU/Linux nor Android unwind the stack \"at any time\" if I don't explicit (call another function to) throw an exception?</p>",
        "id": 231351295,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616434063
    },
    {
        "content": "<p>The Android one was added for a profiler. It seems off by default in other compilers as well? <a href=\"https://github.com/rust-lang/rust/issues/49867#issuecomment-380485548\">https://github.com/rust-lang/rust/issues/49867#issuecomment-380485548</a></p>",
        "id": 231351860,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616434252
    },
    {
        "content": "<p>Right, that's mostly correct, if you don't care about use of debuggers/<code>Backtrace</code> or similar utilities with your library or program.</p>",
        "id": 231352094,
        "sender_full_name": "nagisa",
        "timestamp": 1616434339
    },
    {
        "content": "<p>Ultimately the kernels or OSs outside of Windows (AFAIK) doesn't really care about missing uwtables otherwise and can operate fine without them.</p>",
        "id": 231352220,
        "sender_full_name": "nagisa",
        "timestamp": 1616434391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/122651-general/topic/Unwind.20tables.20are.20strictly.20required.20on.20Windows.20and.20Android/near/231350247\">said</a>:</p>\n<blockquote>\n<p>Wait... Maybe Windows really requires unwind tables: <a href=\"https://github.com/rust-lang/rust/pull/69984#issuecomment-609448581\">https://github.com/rust-lang/rust/pull/69984#issuecomment-609448581</a> (In particular, <a href=\"https://stackoverflow.com/questions/45333326/under-what-conditions-do-i-need-to-set-up-seh-unwind-info-for-an-x86-64-assembly/45333553#comment-77629593\">this comment</a> in the linked Stack Overflow question:)</p>\n<blockquote>\n<p>The results are now undefined because you are operating with garbage data. </p>\n</blockquote>\n<p>It's scary that before  <a href=\"https://github.com/rust-lang/rust/issues/40549\">#40549</a> Windows targets with <code>panic = \"abort\"</code> seems really broken (and it's strange that LLVM supports not emitting them / initially does not support emitting them).<br>\nI'll defer the Windows change, but it should be safe to skip emitting <code>uwtable</code> on Android?</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/questions/45333326/under-what-conditions-do-i-need-to-set-up-seh-unwind-info-for-an-x86-64-assembly/45333553#comment77641422_45337258\">https://stackoverflow.com/questions/45333326/under-what-conditions-do-i-need-to-set-up-seh-unwind-info-for-an-x86-64-assembly/45333553#comment77641422_45337258</a> is also interesting:</p>\n<blockquote>\n<p>There are various types of exceptions that are handled and continued by the default top-level exception filter, such as stack guard page exceptions and Win32 resource copy-on-write. Clients likely would not be happy if they blew up when the stack was too close to a 4KB boundary, or when they passed a pointer to copy-on-write resources or to a memory-mapped file that encounters an I/O error.</p>\n</blockquote>",
        "id": 231352888,
        "sender_full_name": "bjorn3",
        "timestamp": 1616434637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/122651-general/topic/Unwind.20tables.20are.20strictly.20required.20on.20Windows.20and.20Android/near/231352220\">said</a>:</p>\n<blockquote>\n<p>Ultimately the kernels or OSs outside of Windows (AFAIK) doesn't really care about missing uwtables otherwise and can operate fine without them.</p>\n</blockquote>\n<p>Alright. I'll go ahead with a PR, but for Android only. (If that is wrong, I hope an Android expert can come and stop me!)</p>",
        "id": 231354053,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616435090
    },
    {
        "content": "<p>Should I change <code>requires_uwtable</code> to <code>false</code> for Android directly or implement a \"default\" <code>uwtable</code> setting? Setting it to <code>false</code> directly is consistent with other targets, but could be (?) breaking if someone is using a debugger/profiler or trying to get a backtrace from unwind tables.</p>",
        "id": 231356030,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616435840
    },
    {
        "content": "<p>the behaviour without any flags should remain the same, probably the only thing that should happen is that you can specify the <code>-Cforce-unwind-tables=no</code> or something.</p>",
        "id": 231356214,
        "sender_full_name": "nagisa",
        "timestamp": 1616435907
    },
    {
        "content": "<p>(which makes me think, this flag should really be <code>-Cforce-unwind-tables=yes/no (default)/off</code></p>",
        "id": 231356255,
        "sender_full_name": "nagisa",
        "timestamp": 1616435928
    },
    {
        "content": "<p>If nothing else keeping the same default behaviour will make landing your change significantly easier.</p>",
        "id": 231356331,
        "sender_full_name": "nagisa",
        "timestamp": 1616435967
    },
    {
        "content": "<p>/me opened a PR for Android just now: <a href=\"https://github.com/rust-lang/rust/issues/83391\">#83391</a></p>",
        "id": 231375358,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616443193
    },
    {
        "content": "<p>Also I have a related question: why <code>-C force-unwind-tables=no</code> is not allowed with <code>-C panic=unwind</code>? To my understanding, LLVM will <em>still</em> generate unwind tables even the function does not have <code>uwtable</code> unless the function is <code>nounwind</code>: <a href=\"https://github.com/llvm/llvm-project/blob/c21016715f0ee4a36affdf7150ac135ca98b0eae/llvm/include/llvm/IR/Function.h#L666\">https://github.com/llvm/llvm-project/blob/c21016715f0ee4a36affdf7150ac135ca98b0eae/llvm/include/llvm/IR/Function.h#L666</a></p>",
        "id": 231377429,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616444063
    }
]