[
    {
        "content": "<p>I wrote a 2021 blog post: <a href=\"https://jyn514.github.io/2020/09/05/Rust-in-2021.html\">https://jyn514.github.io/2020/09/05/Rust-in-2021.html</a></p>",
        "id": 209253305,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599447958
    },
    {
        "content": "<p>cross posted to reddit as well: <a href=\"https://www.reddit.com/r/rust/comments/inxwka/rust_in_2021_discoverability/\">https://www.reddit.com/r/rust/comments/inxwka/rust_in_2021_discoverability/</a></p>",
        "id": 209253361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599448017
    },
    {
        "content": "<p>the bit about 'discoverability in the community' appears to have hit a nerve which is not what I expected <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 209253698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599448633
    },
    {
        "content": "<p>To your points about library errors: it would be really cool to find some categories of clippy lints (or similar kinds of trouble that people hit) that we could move to language attributes somehow to let libraries report such things too without needing to make a whole lint.</p>\n<p>A simple case would be for things like <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\">https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero</a> -- there could be an attribute where you set constants that are disallowed as arguments, say.</p>\n<p>I think the <code>impl !Ord for MyThingThatIsIntentionallyOnlyPartial</code> as a way to give docs could go under this heading too...</p>",
        "id": 209255144,
        "sender_full_name": "scottmcm",
        "timestamp": 1599451276
    },
    {
        "content": "<p>Hmm, that idea sounds interesting but not very flexible. It wouldn't have helped with either of the two error I gave as examples in the post, for instance</p>",
        "id": 209255303,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599451532
    },
    {
        "content": "<p>Both of those were properties of <em>types</em>, not of values</p>",
        "id": 209255310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599451559
    },
    {
        "content": "<p>It would be nice to have 'clippy lints for libraries' though</p>",
        "id": 209255425,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599451692
    },
    {
        "content": "<p>In particular I want to make these available <em>outside</em> the standard library, because other libraries don't have access to rustc internals and clippy can't write lints for them</p>",
        "id": 209255438,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599451749
    },
    {
        "content": "<p>Yeah, that's just the simplest explanation of the idea.  Someone would need to do the legwork to find things that are simple enough to express non-horribly in macros, but also complicated enough to be worth doing.</p>\n<p>I wonder if the second example could just be something like <code>macro_rules arg_enum { {$x:tt*} =&gt; { compile_error!(\"use a derive instead: `#[clap::arg_enum]`\") } };</code>...</p>",
        "id": 209255970,
        "sender_full_name": "scottmcm",
        "timestamp": 1599452533
    },
    {
        "content": "<p>wouldn't that be a duplicate definition, because both are in the same namespace?</p>",
        "id": 209255975,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599452561
    },
    {
        "content": "<p>not sure how derive macros work though</p>",
        "id": 209255977,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599452571
    },
    {
        "content": "<p>Oh, wow, by brain didn't even notice that the new one has the same name <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>  In that case I'm surprised the compiler isn't giving an error like \"that's a derive macro, so you can't use it here\" which would get 80% of the way there...</p>",
        "id": 209256067,
        "sender_full_name": "scottmcm",
        "timestamp": 1599452682
    },
    {
        "content": "<p>yeah in general the error messages around macros could be improved</p>",
        "id": 209256119,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599452784
    },
    {
        "content": "<p>that wouldn't need language changes either</p>",
        "id": 209256121,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599452803
    },
    {
        "content": "<p>yup, just 'not in scope': <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=81691f8ee3b6f001133682563604ced5\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=81691f8ee3b6f001133682563604ced5</a></p>",
        "id": 209256188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599452903
    },
    {
        "content": "<p>let me open an issue for that</p>",
        "id": 209256267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599453046
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76429\">https://github.com/rust-lang/rust/issues/76429</a></p>",
        "id": 209256435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599453300
    }
]