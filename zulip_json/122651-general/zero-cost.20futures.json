[
    {
        "content": "<p>Are futures really zero-cost ? I can't seem to figure out how to use them without adding overhead, or unsafety :/</p>",
        "id": 151523262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544620197
    },
    {
        "content": "<p>Like, is there a project using them to map to hardware network I/O ?</p>",
        "id": 151523328,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544620233
    },
    {
        "content": "<p>We're using them on embedded for all I/O, even network, but it's not quite finished yet</p>",
        "id": 151523436,
        "sender_full_name": "oli",
        "timestamp": 1544620358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> so I find it impossible to use with DMA without pushing the responsibility of pinning, which is unsafe, onto the user</p>",
        "id": 151524344,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621281
    },
    {
        "content": "<p>The only way I've found of making this safe is to heap allocate the future</p>",
        "id": 151524412,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621333
    },
    {
        "content": "<p>I also found the LocalWaker API extremely weird - if you are doing DMA then there is no LocalWaker</p>",
        "id": 151524432,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621372
    },
    {
        "content": "<p>This makes Poll very weird too: Poll::Pending means \"don't poll me again until the LocalWaker is awoken\", but since there is no way for that to happen, futures will never get polled</p>",
        "id": 151524549,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621469
    },
    {
        "content": "<blockquote>\n<p>the responsibility of pinning, which is unsafe, onto the user</p>\n</blockquote>\n<p>hu? no, you can create <code>Pin</code> in safe code. or do you mean specifically pinning on the stack? AFAIK there's a safe stack pinning macro in some crate</p>",
        "id": 151524573,
        "sender_full_name": "RalfJ",
        "timestamp": 1544621511
    },
    {
        "content": "<p>One could emulate a LocalWaker using a second thread, but... that's definetely not zero-cost.</p>",
        "id": 151524621,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> there is <code>pin_mut!</code> in <code>pin_utils</code>, is that what you mean? Take a look at the macro implementation. . .</p>",
        "id": 151524631,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621552
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/pin-utils/blob/master/src/stack_pin.rs\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/pin-utils/blob/master/src/stack_pin.rs\">https://github.com/rust-lang-nursery/pin-utils/blob/master/src/stack_pin.rs</a></p>",
        "id": 151524647,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621584
    },
    {
        "content": "<p>you aren't asking for <em>transitively</em> safe code, are you? you're not going to get far with that^^ (anywhere in Rust)</p>",
        "id": 151524650,
        "sender_full_name": "RalfJ",
        "timestamp": 1544621587
    },
    {
        "content": "<p>no, i'm just saying that this is very limiting</p>",
        "id": 151524718,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621674
    },
    {
        "content": "<p>if you want to pin within a method, and store the pin as an struct field, then this macro won't help</p>",
        "id": 151524737,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621707
    },
    {
        "content": "<p>fair. but what you said above was basically \"pinning requires the user to use unsafe\", and that's definitely wrong</p>",
        "id": 151524753,
        "sender_full_name": "RalfJ",
        "timestamp": 1544621736
    },
    {
        "content": "<p>let me rephrase: the responsibility of pinning properly is pushed down to the user</p>",
        "id": 151524765,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621755
    },
    {
        "content": "<p>sure. you asked for zero-cost yourself, that's the only way to get zero-cost :D</p>",
        "id": 151524826,
        "sender_full_name": "RalfJ",
        "timestamp": 1544621773
    },
    {
        "content": "<p>I think that's bad, as in, there is no real way to abstract over pinning</p>",
        "id": 151524849,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621820
    },
    {
        "content": "<p>if I want to create a type that takes ownership of a future, and pins it, that cannot be done at zero-cost</p>",
        "id": 151524866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621839
    },
    {
        "content": "<p>The type cannot be !Move, the type cannot \"pin itself\", etc.</p>",
        "id": 151524876,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621858
    },
    {
        "content": "<p>Pushing the responsibility of pinning to the user is the only thing that my code can do, that's good for my code, but bad for its users</p>",
        "id": 151524950,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544621925
    },
    {
        "content": "<p>it's no less and no more bad than pushing the responsibility of safe mutation out to the user using <code>&amp;mut self</code></p>",
        "id": 151524990,
        "sender_full_name": "RalfJ",
        "timestamp": 1544621976
    },
    {
        "content": "<p>and it's just as compositional</p>",
        "id": 151525000,
        "sender_full_name": "RalfJ",
        "timestamp": 1544621987
    },
    {
        "content": "<blockquote>\n<p>if I want to create a type that takes ownership of a future, and pins it, that cannot be done at zero-cost</p>\n</blockquote>\n<p>your type then needs to expose that it requires pinning, just like existing code exposes that it requires mutation</p>",
        "id": 151525084,
        "sender_full_name": "RalfJ",
        "timestamp": 1544622029
    },
    {
        "content": "<p>is it possible to express that? I have literally 1 day of experience with async / futures, on Discord nobody suggested that it was doable.</p>",
        "id": 151525103,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544622062
    },
    {
        "content": "<p>you need \"recursive\" or \"structural\" pinning, which (bad for you but not for your users) is not very ergonomic to do currently. and then your methods take <code>Pin&lt;&amp;mut self&gt;</code>, propagating the requirements outwards.</p>",
        "id": 151525219,
        "sender_full_name": "RalfJ",
        "timestamp": 1544622193
    },
    {
        "content": "<p>see <a href=\"https://docs.rs/pin-utils/0.1.0-alpha.3/pin_utils/macro.unsafe_pinned.html\" target=\"_blank\" title=\"https://docs.rs/pin-utils/0.1.0-alpha.3/pin_utils/macro.unsafe_pinned.html\">https://docs.rs/pin-utils/0.1.0-alpha.3/pin_utils/macro.unsafe_pinned.html</a></p>",
        "id": 151525236,
        "sender_full_name": "RalfJ",
        "timestamp": 1544622220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> but then my users still need to pin my type right?</p>",
        "id": 151525755,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544622917
    },
    {
        "content": "<p>yes they do :/ its unclear to me whether the difference between pinning my type or pinning the future matters</p>",
        "id": 151525995,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544623186
    },
    {
        "content": "<p>Do you know how to implement Futures for which LocalWaker makes no sense?</p>",
        "id": 151526275,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544623425
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> but then my users still need to pin my type right?</p>\n</blockquote>\n<p>of course. if you mutate anything, you propagate the <code>&amp;mut</code> outwards. if you access pinned data that you cann promise yourself is pinned (because you boxed it or so), you propagate the <code>Pin</code> outwards</p>",
        "id": 151526766,
        "sender_full_name": "RalfJ",
        "timestamp": 1544623907
    },
    {
        "content": "<p>you cannot magically disappear the fact that data needs to be pinned</p>",
        "id": 151526779,
        "sender_full_name": "RalfJ",
        "timestamp": 1544623918
    },
    {
        "content": "<blockquote>\n<p>Do you know how to implement Futures for which LocalWaker makes no sense?</p>\n</blockquote>\n<p>I'm afraid not -- I don't know anything about futures.<br>\nI was just commenting on the pinning aspect as that's something I studied in some depth :)</p>",
        "id": 151526845,
        "sender_full_name": "RalfJ",
        "timestamp": 1544623945
    },
    {
        "content": "<p>it took a bit to grok the most important pieces of pinning, but I don't think i groked them all</p>",
        "id": 151526889,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544624009
    },
    {
        "content": "<p>it is quite an interesting abstraction</p>",
        "id": 151526910,
        "sender_full_name": "RalfJ",
        "timestamp": 1544624034
    },
    {
        "content": "<p>I ended up wishing !Move a couple of times while playing with it, but now I think its more flexible than !Move</p>",
        "id": 151526983,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544624073
    },
    {
        "content": "<p>it lets you make objects any type !Move when you need it</p>",
        "id": 151527022,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544624106
    },
    {
        "content": "<p>anyways, now I still need to figure out how to make the futures actually work with other people executors expecting a LocalWaker that does something</p>",
        "id": 151527208,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544624272
    },
    {
        "content": "<p>Also, remember that \"zero-cost\" means \"the abstraction has no more runtime overhead than the non-abstracted version\"</p>",
        "id": 151531300,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1544627584
    },
    {
        "content": "<p>But not \"I don't like the abstraction\" or \"it's not a very abstract abstraction\" or \"it's a leaky abstraction\"</p>",
        "id": 151531412,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1544627646
    },
    {
        "content": "<p>The non-abstraction version does not require spawning threads nor allocating memory.</p>",
        "id": 151536389,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544631979
    },
    {
        "content": "<p>With respect to LocalWaker, the non-abstracted version works, the abstracted version \"doesn't\"</p>",
        "id": 151536391,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544631983
    },
    {
        "content": "<p>One can make it work by not using the abstraction how it is intended to be used.</p>",
        "id": 151536468,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544632044
    },
    {
        "content": "<p>But then one might arguable be better off with a different abstraction</p>",
        "id": 151536478,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544632062
    },
    {
        "content": "<p>Sadly, that's not allowed, because Rust <code>async fn</code> requires using <code>Future</code></p>",
        "id": 151536503,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544632080
    },
    {
        "content": "<p>I plan to avoid the <code>Future</code> trait with <code>#[async]</code> proc macros, which was originally the plan for them</p>",
        "id": 151579329,
        "sender_full_name": "Zoxc",
        "timestamp": 1544666773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> does that mean that I can use <code>async fn</code> that return <code>-&gt; impl MyFutureTrait</code>  ?</p>",
        "id": 151601453,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544701127
    },
    {
        "content": "<p>It would be <code>#[async] fn</code>, but yes</p>",
        "id": 151616919,
        "sender_full_name": "Zoxc",
        "timestamp": 1544716293
    }
]