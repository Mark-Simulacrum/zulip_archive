[
    {
        "content": "<p>Hi,</p>\n<p>I was wondering if there is a way to query the ABI of (for example) structs from the user Rust program? In addition to what I can already get from <code>std::mem::align_of</code>, I'm specifically interested in the offsets of fields and the order they've been codegenned.</p>\n<p>So far I'm using this home-grown solution:<br>\n<a href=\"https://gist.github.com/vext01/536123426f8c1141c158bdf49c4efff7\">https://gist.github.com/vext01/536123426f8c1141c158bdf49c4efff7</a></p>\n<p>Is there a better way? Perhaps without requiring instantiation of the type in question?</p>\n<p>Thanks.</p>",
        "id": 211274266,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601048141
    },
    {
        "content": "<p>I remember the Rust ABI being explicitly unstable to allow for optimisations</p>",
        "id": 211274603,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1601048306
    },
    {
        "content": "<p>There's built-in nightly attribute, on phone now so I can't check but its name maybe rustc_layout.</p>",
        "id": 211274625,
        "sender_full_name": "lzutao",
        "timestamp": 1601048319
    },
    {
        "content": "<p>You can also try to use <a href=\"https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html\">https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html</a> but thatâ€™s not its intended use at all I believe</p>",
        "id": 211274765,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1601048399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span>  <a href=\"https://www.ralfj.de/blog/2020/04/04/layout-debugging.html\">https://www.ralfj.de/blog/2020/04/04/layout-debugging.html</a> -- thanks!</p>\n<p><span class=\"user-mention\" data-user-id=\"307289\">@Poliorcetics</span> I'm aware of that one. It only exposes size and alignment, not field offsets or field order.</p>\n<p>The one <span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> posted looks good.</p>",
        "id": 211275022,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1601048509
    },
    {
        "content": "<p>Layout.extend can  to get the layout of <strong>repr(C)</strong>  structs by \"recreating it\" (e.g. automatically using a custom derive).</p>\n<p>But for the rust ABI there is currently no way to get the layout (on stable, besides size+ alignment).</p>",
        "id": 211314896,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601066177
    },
    {
        "content": "<p>TIL <code>Layout::extend</code> is a thing (and it's even stable!)</p>",
        "id": 211315048,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601066278
    },
    {
        "content": "<p>(but repr(C) only)</p>\n<p>For non repr(C) Best you can probably could do is crate a instance of the struct, crate field references to pointer arithmetic and store that in a lazy static. Furthermore autogenerated that using a custom derive or similar.</p>\n<p>In both cases you can only do so for structs where you (as a person) or a custom derive know of the structs fields.</p>",
        "id": 211315490,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601066485
    },
    {
        "content": "<p>Also preferably only do unsafe magic with <code>repr(C)</code> types for now.</p>",
        "id": 211315618,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601066560
    },
    {
        "content": "<p>Oh and be aware that composed DST structs (structs which last field is a DST) the padding between the last non-DST field and the tailing DST field does depend on the pointer metadata if the DST is based on <code>dyn Trait</code>. It's not a problem if it's based on <code>[T]</code> or <code>str</code>. </p>\n<p>Through that doesn't matter if you only work with sized types for whatever you want to do.</p>",
        "id": 211316403,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601067021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223288\">@Edd Barrett</span>  it is good timing that you ask this because this weekend i started working on a #[derive(Reflect)] that does exactly what <span class=\"user-mention\" data-user-id=\"209646\">@Philipp Korber</span> describes</p>",
        "id": 221567136,
        "sender_full_name": "ember arlynx",
        "timestamp": 1609787672
    },
    {
        "content": "<p>oh, i can't read, the google search result that showed me this msg was indexed a day ago or something, this thread is old af.</p>",
        "id": 221567223,
        "sender_full_name": "ember arlynx",
        "timestamp": 1609787712
    },
    {
        "content": "<p>I'm still interested :) is there an RFC?</p>",
        "id": 221572306,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1609790100
    }
]