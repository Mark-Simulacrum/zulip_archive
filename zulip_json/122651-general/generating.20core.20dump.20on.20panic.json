[
    {
        "content": "<p>In training, someone asked if there was a way to generate a core dump when a panic occurs. I don't <em>think</em> there is, other than overriding the panic handler. Are there any other solutions?</p>",
        "id": 271286298,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644417204
    },
    {
        "content": "<p><code>-C panic=abort</code> will do it since it exits with <code>abort()</code> instead of <code>exit(101)</code>.</p>",
        "id": 271287477,
        "sender_full_name": "Amanieu",
        "timestamp": 1644417628
    },
    {
        "content": "<p>In fact, I wonder if we shouldn't change that <code>exit(101)</code> to <code>abort()</code> so we always get a core dump on panic.</p>",
        "id": 271287572,
        "sender_full_name": "Amanieu",
        "timestamp": 1644417675
    },
    {
        "content": "<p>+1 from me! There is a crate called <a href=\"https://crates.io/crates/coredump\">coredump</a> which can do this but it's GPL 3 which is hard no-go for a lot of people.</p>",
        "id": 271291749,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644419378
    },
    {
        "content": "<p>Switching between unwind / abort means recompiling the entire dependency graph, right?</p>",
        "id": 271310120,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644425965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/122651-general/topic/generating.20core.20dump.20on.20panic/near/271287572\">said</a>:</p>\n<blockquote>\n<p>In fact, I wonder if we shouldn't change that <code>exit(101)</code> to <code>abort()</code> so we always get a core dump on panic.</p>\n</blockquote>\n<p>Wouldn't this cause the core dump to occur at a not-useful location? Like, it's unwound all the way to <code>rust_main</code> or whatever and then generates the core?</p>",
        "id": 271310438,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644426049
    },
    {
        "content": "<p>Yep</p>",
        "id": 271313221,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644427076
    },
    {
        "content": "<p>It's a LLVM limitation that we don't have a way to terminate early upon unwinding, so there's nothing better that we can do.</p>",
        "id": 271313403,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644427145
    },
    {
        "content": "<p>A hacky thing would be to fork and have the child abort <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 271316119,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644428047
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/panic/fn.set_hook.html\">https://doc.rust-lang.org/std/panic/fn.set_hook.html</a> sigquit in a panic hook?</p>",
        "id": 271316165,
        "sender_full_name": "The 8472",
        "timestamp": 1644428062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/generating.20core.20dump.20on.20panic/near/271316165\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/std/panic/fn.set_hook.html\">https://doc.rust-lang.org/std/panic/fn.set_hook.html</a> sigquit in a panic hook?</p>\n</blockquote>\n<p>Is that similar to my \"other than overriding the panic handler\" ?</p>",
        "id": 271316794,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644428267
    },
    {
        "content": "<p>Ah well, I thought you meant <code>#[panic_handler]</code>.</p>",
        "id": 271316991,
        "sender_full_name": "The 8472",
        "timestamp": 1644428319
    },
    {
        "content": "<p>Since you're doing a core dump before even attempting unwinding, you might as well just use <code>-C panic=abort</code>.</p>",
        "id": 271317041,
        "sender_full_name": "Amanieu",
        "timestamp": 1644428331
    },
    {
        "content": "<p>Setting the hook doesn't need recompiling</p>",
        "id": 271317145,
        "sender_full_name": "The 8472",
        "timestamp": 1644428363
    },
    {
        "content": "<p><a href=\"https://man7.org/linux/man-pages/man1/gcore.1.html\">https://man7.org/linux/man-pages/man1/gcore.1.html</a></p>",
        "id": 271317392,
        "sender_full_name": "The 8472",
        "timestamp": 1644428434
    },
    {
        "content": "<p><code>gcore</code> generates a coredump for a running program the moment you run <code>gcore</code>, right? It doesn't generate one at the precise moment you panic.</p>",
        "id": 271318533,
        "sender_full_name": "bjorn3",
        "timestamp": 1644428774
    },
    {
        "content": "<p>It doesn't include a time machine, you'd need rr for that.</p>",
        "id": 271319074,
        "sender_full_name": "The 8472",
        "timestamp": 1644428963
    },
    {
        "content": "<p>If the constraints are not touching the existing panic machinery and not recompiling then attaching a debugger and setting a break point on something panic-related seems like the next best option.</p>",
        "id": 271326777,
        "sender_full_name": "The 8472",
        "timestamp": 1644431796
    },
    {
        "content": "<p>Oh, I don't know that recompiling is right out for them or not, just making sure I frame the potential solutions appropriately.</p>",
        "id": 271336164,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644435821
    },
    {
        "content": "<p>I did mention attaching a debugger or sending the appropriate signal by hand (if that makes sense for their case)</p>",
        "id": 271336368,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1644435888
    }
]