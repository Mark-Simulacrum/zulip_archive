[
    {
        "content": "<p>Is there a way to cast a <code>for&lt;'a&gt; fn(&amp;'a i32)</code> into a <code>fn(*const i32)</code> ?</p>",
        "id": 179701758,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572700110
    },
    {
        "content": "<p><code>transmute</code></p>",
        "id": 179701849,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572700296
    },
    {
        "content": "<p>It's definitely dubious whether the resulting function pointer can be called without UB.</p>",
        "id": 179701997,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572700548
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 179703189,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572702555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> can you show an example? That cannot work if the <code>for&lt;'a&gt; fn(&amp;'a i32)</code> is a zero-sized type and the <code>fn(*const i32)</code> is not</p>",
        "id": 179703249,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572702634
    },
    {
        "content": "<p><code>fn(&amp;'a i32)</code> is always a fn-ptr and not zero-sized, right?</p>",
        "id": 179703409,
        "sender_full_name": "simulacrum",
        "timestamp": 1572702907
    },
    {
        "content": "<p>it seems like that should always be a valid cast, so long as you call the latter with valid ptrs (i.e., essentially references)</p>",
        "id": 179703415,
        "sender_full_name": "simulacrum",
        "timestamp": 1572702928
    },
    {
        "content": "<p>that type yes, but a function with that type not necessarily</p>",
        "id": 179703422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572702942
    },
    {
        "content": "<p>I would expect that you can cast the function to that function ptr type</p>",
        "id": 179703463,
        "sender_full_name": "simulacrum",
        "timestamp": 1572702964
    },
    {
        "content": "<p>I fixed this by doing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179703470,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572702990
    },
    {
        "content": "<p>If you have a function item then use a closure:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179703474,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572703009
    },
    {
        "content": "<p>I did not knew that one can already use <code>for&lt;'a&gt;</code> in patterns</p>",
        "id": 179703475,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572703010
    },
    {
        "content": "<p>I did not have a function item, I had a <code>F: Fn</code></p>",
        "id": 179703493,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572703054
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=a8c261019d44a11af4969e46b390a10d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=a8c261019d44a11af4969e46b390a10d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=a8c261019d44a11af4969e46b390a10d</a><br>\n^^^ is what I ended up doing</p>",
        "id": 179703498,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572703067
    },
    {
        "content": "<p>miri says that's fine</p>",
        "id": 179703545,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572703108
    },
    {
        "content": "<p>That link's broken</p>",
        "id": 179703546,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572703113
    },
    {
        "content": "<p>fixed</p>",
        "id": 179703623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572703245
    },
    {
        "content": "<p>You could also have done something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">callback</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c_fn</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179703699,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572703362
    },
    {
        "content": "<p>you, you don't need anything like fn-traits for that</p>",
        "id": 179703714,
        "sender_full_name": "simulacrum",
        "timestamp": 1572703392
    },
    {
        "content": "<p>you can do this on stable, I think</p>",
        "id": 179703716,
        "sender_full_name": "simulacrum",
        "timestamp": 1572703396
    },
    {
        "content": "<p>what is the point of the unit tuple second argument?</p>",
        "id": 179703727,
        "sender_full_name": "simulacrum",
        "timestamp": 1572703438
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=dbc943c2702a8fc3c8765b15cf238851\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=dbc943c2702a8fc3c8765b15cf238851\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=dbc943c2702a8fc3c8765b15cf238851</a></p>",
        "id": 179703786,
        "sender_full_name": "simulacrum",
        "timestamp": 1572703532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">callback</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c_fn</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">))()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179703790,
        "sender_full_name": "simulacrum",
        "timestamp": 1572703547
    },
    {
        "content": "<blockquote>\n<p>what is the point of the unit tuple second argument?</p>\n</blockquote>\n<p>I got a type error if I did not use it</p>",
        "id": 179704132,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572704155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> so what's going on there ?</p>",
        "id": 179704422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572704695
    },
    {
        "content": "<p>The closure is being safely implicitly coerced</p>",
        "id": 179704430,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572704707
    },
    {
        "content": "<p>but there is no way to spell out the coercions ?</p>",
        "id": 179704444,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572704725
    },
    {
        "content": "<p>Uh, you can just cast the closure to the fn ptr type</p>",
        "id": 179704452,
        "sender_full_name": "simulacrum",
        "timestamp": 1572704753
    },
    {
        "content": "<p>But there's really no point</p>",
        "id": 179704494,
        "sender_full_name": "simulacrum",
        "timestamp": 1572704763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can I cast the callback to the fn ptr type ?</p>",
        "id": 179704532,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572704867
    },
    {
        "content": "<p>I guess that's how I approached the problem</p>",
        "id": 179704571,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572704884
    },
    {
        "content": "<p>(i.e. I wanted to pass <code>callback</code> to <code>c_fn</code> in <code>foo</code>, but instead of creating a closure, i tried to do that directly)</p>",
        "id": 179704587,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572704972
    },
    {
        "content": "<p>should be able to, yeah</p>",
        "id": 179714312,
        "sender_full_name": "simulacrum",
        "timestamp": 1572721296
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> can you show an example? That cannot work if the <code>for&lt;'a&gt; fn(&amp;'a i32)</code> is a zero-sized type and the <code>fn(*const i32)</code> is not</p>\n</blockquote>\n<p>that fn type is never a ZST, I think you are getting confused by the zero-sized anonymous singleton types we have for each function?</p>",
        "id": 179746772,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786719
    },
    {
        "content": "<p>these are <em>not</em> <code>fn</code> types</p>",
        "id": 179746816,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786766
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html#variant.FnDef\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html#variant.FnDef\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html#variant.FnDef</a> is a ZST that doesnt have surface syntax, it is the type of <code>foo</code> when <code>foo</code> is the name of a fn item;<br>\n<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html#variant.FnPtr\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html#variant.FnPtr\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html#variant.FnPtr</a> is the thing that the <code>fn</code> type syntax compiles to</p>",
        "id": 179746830,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786813
    },
    {
        "content": "<p><code>FnDef</code> coerces to <code>FnPtr</code>, but that is an effectful coercion, not just a transmute (similar to e.g. coercing <code>&amp;[T; N]</code> to <code>&amp;[T]</code>)</p>",
        "id": 179746876,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786860
    },
    {
        "content": "<blockquote>\n<p>should be able to, yeah</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can you show how ?</p>",
        "id": 179818248,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572860636
    },
    {
        "content": "<p>My original link was an attempt at that, and required two unstable features.</p>",
        "id": 179818299,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572860650
    },
    {
        "content": "<p>oh, I remembered wrong -- you can't cast closures to extern C, you need a shim. This, though, should work: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=902329e977c8e1467f7b15fd10549cec\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=902329e977c8e1467f7b15fd10549cec\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=902329e977c8e1467f7b15fd10549cec</a> -- the insight is that you can have a extern \"C\" function that's generic; it's not something that's in your public interface (mangling is still a thing, since it's generic), but you can pass it's address just fine</p>",
        "id": 179830419,
        "sender_full_name": "simulacrum",
        "timestamp": 1572872167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> ^</p>",
        "id": 179830422,
        "sender_full_name": "simulacrum",
        "timestamp": 1572872171
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/44291\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44291\">https://github.com/rust-lang/rust/issues/44291</a> for more</p>",
        "id": 179830433,
        "sender_full_name": "simulacrum",
        "timestamp": 1572872180
    },
    {
        "content": "<p>Thanks, I guess what I was missing from my original approach is the <code>*(data as *const F)()</code> part</p>",
        "id": 179830578,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572872299
    },
    {
        "content": "<p>I was trying to cast the <code>F</code> directly somehow</p>",
        "id": 179830593,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572872318
    },
    {
        "content": "<p>right, yeah, you can't do that</p>",
        "id": 179831184,
        "sender_full_name": "simulacrum",
        "timestamp": 1572872910
    },
    {
        "content": "<p>since it has \"metadata\"</p>",
        "id": 179831187,
        "sender_full_name": "simulacrum",
        "timestamp": 1572872915
    },
    {
        "content": "<p>well, associated data, not really meta</p>",
        "id": 179831193,
        "sender_full_name": "simulacrum",
        "timestamp": 1572872921
    }
]