[
    {
        "content": "<p>I'm playing around with a little string interning code, but Miri complains about <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=264adecd7e7ae976e714f6e5ad77d214\">this code</a>. The error is only reported when dropping the value:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: Undefined Behavior: trying to reborrow for SharedReadOnly at alloc1848, but parent tag &lt;4135&gt; does not have an appropriate item in the borrow stack\n   --&gt; /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/unique.rs:118:18\n    |\n118 |         unsafe { &amp;*self.as_ptr() }\n    |                  ^^^^^^^^^^^^^^^ trying to reborrow for SharedReadOnly at alloc1848, but parent tag &lt;4135&gt; does not have an appropriate item in the borrow stack\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n</code></pre></div>\n<p>I'm not seeing where I'd be causing the problem.</p>\n<p>(I'll be on and off the computer for the next bit, so no hurry in replying)</p>",
        "id": 223754384,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611415038
    },
    {
        "content": "<p>The borrow gets invalidated when you add <code>ll</code> to the linked list. Borrowing from the linked list seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ll</span><span class=\"p\">.</span><span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RawStr</span><span class=\"p\">(</span><span class=\"n\">ll</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223755185,
        "sender_full_name": "bjorn3",
        "timestamp": 1611416155
    },
    {
        "content": "<p>You mean when <code>piece</code> gets added to <code>ll</code>. I feel like I've seen this kind of code in the wild before - is there a way to keep pointers to the <code>T</code> in <code>Box&lt;T&gt;</code> alive when you move the <code>Box</code>?</p>",
        "id": 223755446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611416444
    },
    {
        "content": "<p>Hmm <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>. But the memory itself should be off in the heap at a stable address (via <code>Box</code>), yeah?</p>",
        "id": 223755451,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611416450
    },
    {
        "content": "<p>In hindsight it makes sense - when you move the box you are re-asserting unique access and all old pointers become invalidated (even though the data is still at that location)</p>",
        "id": 223755483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611416509
    },
    {
        "content": "<p><code>Box</code> is special. A <code>Box</code> counts as a unique borrow as far as I know.</p>",
        "id": 223755486,
        "sender_full_name": "bjorn3",
        "timestamp": 1611416511
    },
    {
        "content": "<p>You are saying “pointer“, but don’t you mean reference? That’s why I am using raw pointers here.</p>",
        "id": 223755644,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611416737
    },
    {
        "content": "<p>This is part of the reason I’m confused; when the linked list is dropped it should be the unique owner of the data</p>",
        "id": 223755724,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611416845
    },
    {
        "content": "<p>Not sure if this is UB, but ll gets dropped before set, so set can contain a pointer to freed memory</p>",
        "id": 223755736,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611416868
    },
    {
        "content": "<p>The moment you move the <code>Box</code> into the linked list, all raw pointers to it get invalidated.</p>",
        "id": 223755799,
        "sender_full_name": "bjorn3",
        "timestamp": 1611416932
    },
    {
        "content": "<p>The only difference between pointers and references here is that one of them is checked by the compiler and the other is checked by miri</p>",
        "id": 223755820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611416959
    },
    {
        "content": "<p>they aren't a get out of jail free card for the borrow checker rules</p>",
        "id": 223755831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611416980
    },
    {
        "content": "<p>Pointers do also allow aliasing, but if the reference from which it is derived gets invalidated or used, all raw pointers get invalidated.</p>",
        "id": 223755882,
        "sender_full_name": "bjorn3",
        "timestamp": 1611417029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334260\">@Dániel Buga</span>  Ugh, you are right. I copied from a struct where the drop order is the other way, so that shouldn’t be a problem in my original location.</p>",
        "id": 223755883,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611417030
    },
    {
        "content": "<p>Actually, miri points at the drop of ll, so I'm not sure if this is the actual UB, but still something wrong</p>",
        "id": 223755899,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611417072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I don't want a pointer to the box though, I want the data inside the box￼</p>",
        "id": 223755967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611417133
    },
    {
        "content": "<p>You can use <code>Box::into_raw</code> and <code>Box::from_raw</code> when you want to drop it again.</p>",
        "id": 223755975,
        "sender_full_name": "bjorn3",
        "timestamp": 1611417154
    },
    {
        "content": "<blockquote>\n<p>Box::from_raw when you want to drop it again</p>\n</blockquote>\n<p><del>or ptr::drop_in_place, I think?</del> ugh, no</p>",
        "id": 223756007,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611417200
    },
    {
        "content": "<p>When you create the pointer here</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RawStr</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the pointer has a lifetime that is tied to the borrow of <code>piece</code>. When you later move <code>piece</code> here</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">ll</span><span class=\"p\">.</span><span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the pointer becomes invalidated, but that's not immediately an issue, it's just a dangling pointer that you returned. It's not actually a stack discipline violation yet, because you might never use the mut pointer you passed to the linked list. So you use the \"dangling\" pointer and it invalidates the pointer in the linked list instead, and then when the linked list is dropped we definitely have an XYXY usage pattern and miri declares UB</p>",
        "id": 223756070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417279
    },
    {
        "content": "<p>Creating dangling pointers (not references) is fine, as long as you never use them while they are dangling</p>",
        "id": 223756159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417412
    },
    {
        "content": "<p>Perhaps that explains why removing the usage of the unsafe code via the hashmap calling <code>Hash</code> causes Miri to be OK￼ — that's the \"Y\" usage.</p>",
        "id": 223756235,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611417492
    },
    {
        "content": "<p>I see a dotted boxed [OBJ] around your last two comments jake but it looks apropos to the topic <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 223756264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417567
    },
    {
        "content": "<p>unless it's unintended heap allocation <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 223756320,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611417620
    },
    {
        "content": "<p>Does switching to a raw pointer instead of box fix the problem because it won’t assume that it’s a unique pointer￼￼?</p>",
        "id": 223756326,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611417636
    },
    {
        "content": "<p>and thus Miri won’t see conflicting usages of it during its time in existence. ￼</p>",
        "id": 223756351,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611417672
    },
    {
        "content": "<p>Ah yeah that should work, just make it a mut pointer</p>",
        "id": 223756356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417676
    },
    {
        "content": "<p>just imagine it's a refcell</p>",
        "id": 223756370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417711
    },
    {
        "content": "<p>or use bjorn's suggestion, which you can also write as first pushing the vector into the linked list, getting the head and using that to form the pointer</p>",
        "id": 223756444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417784
    },
    {
        "content": "<p>like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">set</span><span class=\"p\">.</span><span class=\"n\">get_or_insert_with</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ll</span><span class=\"p\">.</span><span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">].</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">piece</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ll</span><span class=\"p\">.</span><span class=\"n\">front_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">piece</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">RawStr</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223756557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417903
    },
    {
        "content": "<p>That has the annoying panic that can never happen though</p>",
        "id": 223756581,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611417959
    },
    {
        "content": "<p>That actually seems like an API hole in vec and linked list</p>",
        "id": 223756625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611417987
    },
    {
        "content": "<p>those push methods could totally return <code>&amp;mut T</code></p>",
        "id": 223756638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418005
    },
    {
        "content": "<p>if you're lucky the panic will get optimized out, if not there's always <code>std::hint::unreachable_unchecked()</code></p>",
        "id": 223756677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418077
    },
    {
        "content": "<p>always a great way to tell the reader you mean business <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 223756737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418119
    },
    {
        "content": "<p>I’m on mobile right now, but I’d be worried about what would happen if I were to push one chunk into the link list then get the pointer then push another chunk and get its pointer</p>",
        "id": 223756767,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611418175
    },
    {
        "content": "<p>Seems like that would trigger the same problem as the first chunk would get moved again</p>",
        "id": 223756846,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611418302
    },
    {
        "content": "<p>Ah yeah that's going to be a problem with <code>LinkedList&lt;Box&lt;T&gt;&gt;</code>. Not always, it depends on exactly what the linked list does, but most likely you'll get the same issue: if there is a reallocation it will move the box and that will assert ownership of the T and break your pointers</p>",
        "id": 223756902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418340
    },
    {
        "content": "<p>which I think is an argument for using <code>LinkedList&lt;*mut T&gt;</code></p>",
        "id": 223756907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418356
    },
    {
        "content": "<p>because that way the linked list can't break your pointers even if it moves stuff around</p>",
        "id": 223756916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418376
    },
    {
        "content": "<p>(and to clarify, by \"move the box\" I mean do a move operation on a variable of type <code>Box&lt;T&gt;</code>, not move the <code>T</code> data which has your pointers)</p>",
        "id": 223757010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418502
    },
    {
        "content": "<p>This appears to pass miri, even with the original out-of-order access pattern, just using <code>*mut</code> instead of <code>Box</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashSet</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ll</span>: <span class=\"nc\">LinkedList</span><span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LinkedList</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"p\">.</span><span class=\"n\">get_or_insert_with</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">piece</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">].</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">piece</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RawStr</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">ll</span><span class=\"p\">.</span><span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">raw_str</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">piece</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ll</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223757359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611418999
    },
    {
        "content": "<p>the manual destructor bit isn't great but I guess you can encapsulate that</p>",
        "id": 223757374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611419033
    },
    {
        "content": "<p>I like that you thought I’d have a linked list that I only ever pushed one value into 😂</p>",
        "id": 223757445,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611419127
    },
    {
        "content": "<p>I mean, this is your real application, right?</p>",
        "id": 223757504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611419197
    },
    {
        "content": "<p>it seems a little complicated but hey, maybe storing \"hello\" is really important to you</p>",
        "id": 223757523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611419237
    },
    {
        "content": "<p>Ok, cool. I’m not scared of using a raw pointer. And the fact that box has <code>Unique</code> within it and I was not treating it as unique does clarify the root of my misunderstanding</p>",
        "id": 223757539,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611419266
    },
    {
        "content": "<p>Thanks all! I’ll try applying these lessons back to the real code and see how I fare.</p>",
        "id": 223757599,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611419336
    }
]