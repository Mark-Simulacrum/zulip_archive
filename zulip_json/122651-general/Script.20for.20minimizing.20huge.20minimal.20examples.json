[
    {
        "content": "<p>Hello all,</p>\n<p>After doing some minimizing of an entire codebase on issue <a href=\"https://github.com/rust-lang/rust/issues/92537\">#92537</a> to get a minimal example of an ice, I've actually found a strategy that works pretty well for removing large swaths of code without losing the bug-behavior. Would there be any interest in me making a script that could generate minimal examples when someone comes in with a bug and just dumps an entire repo as the example?</p>",
        "id": 266972944,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1641407850
    },
    {
        "content": "<p>Also IDK of a better place to put this, if there's a workgroup for this kind of thing please let me know</p>",
        "id": 266972982,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1641407873
    },
    {
        "content": "<p>automatic minimization would be extremely difficult to get working in a general case, it would likely need compiler feedback</p>",
        "id": 266973793,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1641408218
    },
    {
        "content": "<p>See also:</p>\n<ul>\n<li><a href=\"http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\">http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/</a></li>\n<li><a href=\"https://github.com/jethrogb/rust-reduce\">https://github.com/jethrogb/rust-reduce</a> </li>\n<li><a href=\"https://github.com/csmith-project/creduce\">https://github.com/csmith-project/creduce</a></li>\n</ul>",
        "id": 266973992,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1641408301
    },
    {
        "content": "<p>What is your strategy, by the way?</p>",
        "id": 266974357,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1641408454
    },
    {
        "content": "<p>would <em>love</em> to have this!</p>",
        "id": 266974734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1641408604
    },
    {
        "content": "<p>The strategy is nothing fancy. I stumbled across it without thinking, so I'm definitely not the first to think of this. Compared to the others linked above, it seems a lot more aggressive. It's essentially a bull in a China shop approach to deal with very large amounts of code. It's also only applicable to bugs that fail to compile, like the ICE in the previous issue.</p>\n<p>The approach is (substitution) -&gt; (test), with substitutions like: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">return_a_number</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">bunch</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\">  </span><span class=\"n\">things</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">something_else</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">return_a_number</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>replaced with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">something_else</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Functions that return () can be outright deleted and the calls to them are removed entirely. I essentially did that a bunch of times for the easy types, then checked for anything unused, removed that. </p>\n<p>Then, the fun starts. I randomly removed entire methods from random structures, fixed up where they were still being called, and then if the test still showed the specific error, I continued with removing a lot of random codes. </p>\n<p>I figured that everything before \"the fun starts\" could be automated easily, and then some more careful approach could be used for the rest. In practice, the large majority of the codebase I did the other day was reduced to around 300 LOC by step 1, and the rest was a lot easier to do.</p>\n<p>Being that my method has an sample size of 1, I should probably get on testing it some other very large dumps of code before writing something.</p>",
        "id": 266977406,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1641409925
    },
    {
        "content": "<p>I'll try out rust-reduce to see if it yields better results. It probably does, considering my approach is essentially smashing things with a hammer until something breaks.</p>",
        "id": 266977786,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1641410121
    },
    {
        "content": "<p>I've also seen folks mention <a href=\"https://github.com/perses-project/perses\">https://github.com/perses-project/perses</a> in issues</p>",
        "id": 266979670,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1641411031
    },
    {
        "content": "<p>And my list: <a href=\"https://github.com/shepmaster/rust-mre\">https://github.com/shepmaster/rust-mre</a></p>",
        "id": 266981134,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1641411821
    },
    {
        "content": "<p>I often find the act of minimizing therapeutic â€” it can be pleasingly manual and not need much brainpower. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 266983970,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1641413098
    },
    {
        "content": "<p>A small problem with that approach of removing functions is that there are cases where even a trivial function needs to exist because lifetimes, even if the function is stubbed with <code>loop{}</code> or <code>todo!()</code> or similar.  I would consider adding some way to have the functions also be checked if they can be replaced with a trivial body if they can't be outright removed.</p>",
        "id": 266984046,
        "sender_full_name": "asquared31415",
        "timestamp": 1641413142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I likewise found it fairly enjoyable, which is why I'm trying to find ways to do more of the fun bits, lol.</p>",
        "id": 267004221,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1641423703
    },
    {
        "content": "<p>Have you considered something like <a href=\"https://github.com/csmith-project/creduce\">https://github.com/csmith-project/creduce</a> ?</p>",
        "id": 267019746,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1641437197
    },
    {
        "content": "<p>I am currently working on a rust rewrite for <a href=\"https://github.com/perses-project/perses\">https://github.com/perses-project/perses</a>. I plan to support using it as a subcommand and it would just work</p>",
        "id": 267185650,
        "sender_full_name": "fee1-dead",
        "timestamp": 1641560312
    }
]