[
    {
        "content": "<p>I have two crates, <code>foo</code> and <code>foo_derive</code>, where the latter defines a <code>derive(Foo)</code> handler which produces an implementation of <code>impl ::foo::Foo for T { ... }</code>. This works great for crate <code>bar</code> that imports both crates, but what if I want to use the derive handler inside crate <code>foo</code> as well? I'm getting an error that <code>::foo::Foo</code> can't be resolved (although <code>crate::Foo</code> or just <code>Foo</code> would work).</p>",
        "id": 227561068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614153424
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bb4cd9089d801422a6b58f26359ad55b\"><code>extern crate self as foo</code></a>?</p>",
        "id": 227566255,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614156582
    },
    {
        "content": "<p>ooh, mind bending</p>",
        "id": 227567169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614157093
    },
    {
        "content": "<p>is it extern or not? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 227567179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614157101
    },
    {
        "content": "<p>In SNAFU, I have <code>#[snafu(crate_root(...))]</code> that can be applied in addition. This allows for people to rename my crates and still use the derive.</p>",
        "id": 227603917,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614176076
    },
    {
        "content": "<p>When I use the derive (<code>foo_derive</code>) in the crate (<code>foo</code>), it looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Snafu)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[snafu(crate_root(crate))]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227604036,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614176129
    },
    {
        "content": "<p>And if someone else decides to rename the <code>snafu</code> crate for whatever reason (maybe to have both <code>snafu_06</code> and <code>snafu_07</code>), they can use the same mechanism.</p>",
        "id": 227604328,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614176254
    },
    {
        "content": "<p><a href=\"https://docs.rs/proc-macro-crate\">https://docs.rs/proc-macro-crate</a> can also help when crates are renamed, but it won't work in \"self\" crates or macro re-exports.</p>",
        "id": 227645519,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614190328
    },
    {
        "content": "<p>I knew of that crate, but I never looked to see how it worked:</p>\n<blockquote>\n<p>CARGO_MANIFEST_DIR will be used to find the current active Cargo.toml and this Cargo.toml is searched for the desired crate.</p>\n</blockquote>\n<p>Now I'm sad.</p>",
        "id": 227663286,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614197354
    }
]