[
    {
        "content": "<p>Hey, is there a way on stable to create a always positive signed integer type such that <code>Option&lt;T&gt;</code> is a single byte? Similar to <code>Option&lt;File&gt;</code> on Unix, but ideally cross platform.</p>",
        "id": 239871645,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621688696
    },
    {
        "content": "<p>Maybe <a href=\"https://doc.rust-lang.org/std/num/struct.NonZeroI8.html\">std::num::NonZeroI8</a> ?</p>\n<blockquote>\n<p>This enables some memory layout optimization. For example, Option&lt;NonZeroI8&gt; is the same size as i8:<br>\n    assert_eq!(size_of::&lt;Option&lt;core::num::NonZeroI8&gt;&gt;(), size_of::&lt;i8&gt;());</p>\n</blockquote>",
        "id": 239871802,
        "sender_full_name": "Urgau",
        "timestamp": 1621688883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> in general the mechanism NonZero* uses is unstable, so you can't create your own custom valid ranges except on nightly</p>",
        "id": 239872194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621689321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> That does achieve the same size, but I am actually interested in 0, not just the size.</p>",
        "id": 239872295,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621689456
    },
    {
        "content": "<p>Basically I want an index into an array where<code>Option&lt;Index&gt;</code> is a single byte.</p>",
        "id": 239872399,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621689599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I know the mechanism is unstable, but I was wondering if someone had a type hack (like a life hack but for types) that achieves it somehow.</p>",
        "id": 239872592,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621689757
    },
    {
        "content": "<p>you could use the nonzerou8 and then add an offset? 1 means 0 etc.</p>",
        "id": 239872762,
        "sender_full_name": "The 8472",
        "timestamp": 1621689952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> You can already use this <code>Option&lt;core::num::NonZeroI8&gt;</code> where <code>0</code> is <code>Option::None</code>.</p>",
        "id": 239872818,
        "sender_full_name": "Urgau",
        "timestamp": 1621689983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> I want <code>-1</code> to be <code>None</code>.</p>",
        "id": 239872859,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621690055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> Yeah, but that would add and <code>add</code> instruction to every index which would be a lot.</p>",
        "id": 239872923,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621690120
    },
    {
        "content": "<p>Oh, that's tricky.</p>",
        "id": 239872940,
        "sender_full_name": "Urgau",
        "timestamp": 1621690161
    },
    {
        "content": "<p>Perhaps a C-style enum could work on stable? you'd have to generate 255 variants</p>",
        "id": 239873028,
        "sender_full_name": "The 8472",
        "timestamp": 1621690242
    },
    {
        "content": "<p>Well not a lot relatively, but by having the niche, Iâ€™m trying to have as minimal overhead as possible.</p>",
        "id": 239873038,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621690255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Are those attributes documented anywhere by the way?</p>",
        "id": 239873068,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621690307
    },
    {
        "content": "<p><code>rustc_</code> attributes rarely are AFAIK as they're an implementation detail.</p>",
        "id": 239876209,
        "sender_full_name": "nagisa",
        "timestamp": 1621693461
    },
    {
        "content": "<p>seems unlikely to be documented, but it's <code>rustc_layout_scalar_valid_range_start</code> and <code>rustc_layout_scalar_valid_range_end</code> (with some details in the PR <a href=\"https://github.com/rust-lang/rust/pull/74699\">https://github.com/rust-lang/rust/pull/74699</a> about the -1 niche for file descriptors like your use-case)</p>",
        "id": 239878809,
        "sender_full_name": "lqd",
        "timestamp": 1621695820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Thanks for the link! That will help.</p>",
        "id": 239886543,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621703282
    },
    {
        "content": "<p>So what you actually want instead of i32 is u31, I guess?</p>",
        "id": 239886666,
        "sender_full_name": "Lokathor",
        "timestamp": 1621703385
    },
    {
        "content": "<p>niches don't have to consume entire bits. they only need a single value.</p>",
        "id": 239889133,
        "sender_full_name": "The 8472",
        "timestamp": 1621706126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Exactly, or an i64 that is really u63.</p>",
        "id": 239889141,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621706137
    },
    {
        "content": "<p>I would love to have an \"isize but only the non-negative parts\" (aka \"usize but without the top bit set\") type.</p>\n<p>That's all that can be used for (non-ZST) indexing anyway, and it keeps coming up as people wanting it for data structures.  <code>rustc_datastructures</code> wanted it for <code>Id</code>s at one point, and the Bevy game engine is currently experimenting with using the \"use a <code>NonZeroUSize</code> that stores the ones complement\" hack to do this same thing.</p>",
        "id": 239889883,
        "sender_full_name": "scottmcm",
        "timestamp": 1621706842
    },
    {
        "content": "<p>on many platforms references to non-ZSTs could have their top bit available for niches too. but last time I tried to naively hack that into the layouts it triggered LLVM asserts because some canonicalizations(?) didn't work out as it expected</p>",
        "id": 239893456,
        "sender_full_name": "The 8472",
        "timestamp": 1621710465
    },
    {
        "content": "<p>that's tricky because it's not really guaranteed. stuff like 5-level page tables, or aarch64 pointer authentication break it</p>",
        "id": 239898059,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621715396
    },
    {
        "content": "<p>For more reference niches, I think I'd start with making 0..align a niche instead of the current situation where only 0..1 is the niche.  That would give slightly more space, can't break anything since it's already clearly UB, and doesn't need discontiguous niche support in the compiler.</p>",
        "id": 239899443,
        "sender_full_name": "scottmcm",
        "timestamp": 1621716810
    },
    {
        "content": "<p><a href=\"https://users.rust-lang.org/t/how-to-get-the-output-file-path-in-env/60155\">https://users.rust-lang.org/t/how-to-get-the-output-file-path-in-env/60155</a></p>",
        "id": 239902022,
        "sender_full_name": "somewheve",
        "timestamp": 1621719567
    },
    {
        "content": "<p>feel confused about how the get the dir path of <code>exe</code></p>",
        "id": 239902121,
        "sender_full_name": "somewheve",
        "timestamp": 1621719655
    },
    {
        "content": "<p>anyone can help me ?  i want  to  copy some to  the  dir  in <a href=\"http://build.rs\">build.rs</a></p>",
        "id": 239902149,
        "sender_full_name": "somewheve",
        "timestamp": 1621719714
    },
    {
        "content": "<p>I think you should make a new thread for your question, or perhaps someone can move this to a new thread</p>",
        "id": 239902875,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621720464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span>  at least on linux in userspace the upper half should belong to the kernel so allocators will never return a pointer to it. Only applies to non-0 types of course.</p>",
        "id": 239903125,
        "sender_full_name": "The 8472",
        "timestamp": 1621720740
    },
    {
        "content": "<p>The upper half gives you 1 bit tho. Also rust has to work in the kernel.</p>",
        "id": 239903151,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621720782
    },
    {
        "content": "<p>1 bit = 2^63 niches.</p>",
        "id": 239903181,
        "sender_full_name": "The 8472",
        "timestamp": 1621720803
    },
    {
        "content": "<p>and rust-in-the-kernel is a different platform. this would be a platform-specific optimization.</p>",
        "id": 239903248,
        "sender_full_name": "The 8472",
        "timestamp": 1621720824
    },
    {
        "content": "<p>fair enough. I think low alignment bits are more fruitful tbh, it's already expected that they're used, and work everywhere</p>",
        "id": 239903259,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621720832
    },
    {
        "content": "<p>I have recently tried to implement that and it causes loads of problems</p>",
        "id": 239903305,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621720866
    },
    {
        "content": "<p>I thought initially you meant the ~16 bits available at the top of pointers on most 64 bit platforms</p>",
        "id": 239903309,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621720869
    },
    {
        "content": "<p>it probably requires a significant refactoring of the type layout code, splitting it into multiple queries, somehow without losing performance</p>",
        "id": 239903377,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621720928
    },
    {
        "content": "<p>conservatively checking whether a type is ZST might be easier to determine than getting its alignment which might depend on generics.</p>",
        "id": 239903491,
        "sender_full_name": "The 8472",
        "timestamp": 1621721026
    },
    {
        "content": "<p>niches should only matter in layout, where it's always working on concrete types anyway, though, no?</p>\n<p>(In the way that <code>size_of::&lt;T&gt;()</code> already doesn't really work normally in const generics, and I don't think this one would make fixing that any harder)</p>",
        "id": 239907508,
        "sender_full_name": "scottmcm",
        "timestamp": 1621725524
    },
    {
        "content": "<p>It is actually possible to have 0 be a valid address on embedded devices!</p>",
        "id": 241673103,
        "sender_full_name": "Demi Obenour",
        "timestamp": 1622955657
    },
    {
        "content": "<p>and wasm</p>",
        "id": 241674909,
        "sender_full_name": "bjorn3",
        "timestamp": 1622958614
    },
    {
        "content": "<p>Like I said, niches-in-references would be a platform-dependent optimization.</p>",
        "id": 241684472,
        "sender_full_name": "The 8472",
        "timestamp": 1622974601
    },
    {
        "content": "<p>0 is an invalid reference on any platform, even if the address is accessible</p>",
        "id": 241685771,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622976681
    },
    {
        "content": "<p>one step farther, &lt;<code>align_of::&lt;T&gt;()</code> is a niche for references on all platforms, as is all other non-aligned values, so you can always use the lowest X-many bits worth of niches.</p>",
        "id": 241696783,
        "sender_full_name": "Lokathor",
        "timestamp": 1622993261
    },
    {
        "content": "<p>it's UB to set those bits, but they're not used as a niche for layout optimizations at the moment</p>",
        "id": 241696891,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622993418
    },
    {
        "content": "<p>Ah, right, i should say they <em>could be</em> a niche.</p>",
        "id": 241697259,
        "sender_full_name": "Lokathor",
        "timestamp": 1622994050
    }
]