[
    {
        "content": "<p>Is there an incantation that allows the concept of <code>FnMut(&amp;'a T) -&gt; K&lt;'a&gt;</code>, or does that require changing the <code>Fn*</code> traits?</p>",
        "id": 273693169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646161306
    },
    {
        "content": "<p>Wouldn't that be <code>for&lt;'a&gt; dyn FnMut(&amp;'a T) -&gt; K&lt;'a&gt;</code>?</p>",
        "id": 273694791,
        "sender_full_name": "bjorn3",
        "timestamp": 1646161946
    },
    {
        "content": "<p>Sorry, my example wasn't fleshed out enough. I want <code>K</code> to be a generic type chosen by the caller. </p>\n<p>The broader context is \"what would it take to fix <a href=\"https://github.com/rust-lang/rust/issues/34162\">slice::sort_by_key has more restrictions than slice::sort_by</a> in the contexts of GATs?\". Super TL;DR:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vec</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">sort_by_key</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">k</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273695071,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646162078
    },
    {
        "content": "<p>I think that will need a new trait.</p>",
        "id": 273695183,
        "sender_full_name": "bjorn3",
        "timestamp": 1646162133
    },
    {
        "content": "<p>I <em>think</em> this thread goes into more details about this limitation: <a href=\"#narrow/stream/187312-wg-async/topic/async.20closures.3F/near/272461157\">https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async/topic/async.20closures.3F/near/272461157</a></p>",
        "id": 273695567,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1646162298
    },
    {
        "content": "<p>Do you think I should add this on to <a href=\"https://github.com/rust-lang/generic-associated-types-initiative/issues/2\">https://github.com/rust-lang/generic-associated-types-initiative/issues/2</a> ?</p>",
        "id": 273696831,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646162853
    },
    {
        "content": "<p>I think these are slightly orthogonal issues? but I need to read that issue closer</p>",
        "id": 273698340,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1646163481
    },
    {
        "content": "<p>it's vaguely in the same realm: existing wide-spread trait could benefit from being GAT</p>",
        "id": 273702929,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646165362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/GAT-ified.20closures/near/273695071\">said</a>:</p>\n<blockquote>\n<p>Sorry, my example wasn't fleshed out enough. I want <code>K</code> to be a generic type chosen by the caller. </p>\n</blockquote>\n<p>then you are asking for a HKT, which can be emulated with GATs, albeit quite cumbersomely:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LifetimeGeneric</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"o\">&lt;'</span><span class=\"na\">lt</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">K</span><span class=\"w\"> </span>: <span class=\"nc\">LifetimeGeneric</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">K</span>::<span class=\"n\">T</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And the cumbersome part is that the caller needs to spell out a lot of stuff. <em>e.g.</em>, imagining <code>type K&lt;'_&gt; = &amp;'_ str;</code>, they'd have to write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LifetimeGeneric</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"o\">&lt;'</span><span class=\"na\">lt</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">lt</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so that they can turbofish <code>&amp;str</code> for <code>K</code>. This, in a way, is hacky, since this <em>higher-order</em> type happens to take the same form as its image; the more proper way would be to use a separate type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">StrRef</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LifetimeGeneric</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">StrRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"o\">&lt;'</span><span class=\"na\">lt</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">lt</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273703463,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646165609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> I know you like the pontificating â€” how would you fix \"sort a slice by an item's key that contains a reference\"?</p>",
        "id": 273703635,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646165709
    },
    {
        "content": "<p>Something like: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=689f4ae92438d1892f94a9ee7d52ead0\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=689f4ae92438d1892f94a9ee7d52ead0</a></p>",
        "id": 273704323,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646166082
    },
    {
        "content": "<p>Note that a similar \"override generic parameter\" kind of trick is featured in, for instance, <a href=\"https://doc.rust-lang.org/1.59.0/std/array/fn.try_from_fn.html\"><code>core::array::try_from_fn()</code></a> notice that</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&lt;&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Residual</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">TryType</span><span class=\"w\"></span>\n</code></pre></div>\n<p>return type, which is basically a way to say:</p>\n<ul>\n<li><code>Result&lt;T&gt;</code> becomes <code>Result&lt;[T; N]&gt;</code></li>\n<li><code>Option&lt;T&gt;</code> becomes <code>Option&lt;[T; N]&gt;</code></li>\n</ul>\n<p>That operation is thus kind of \"replace <code>T</code> with <code>[T; N]</code>\". You could then see the impl of the <code>LifetimeGeneric</code> helper trait for <code>&amp;'static str</code>. As a \"<code>'static</code> can be replaced with any given lifetime\", thus kind of expressing the <code>&amp;'_ str</code> type with a \"placeholder lifetime\".</p>",
        "id": 273795595,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646222355
    },
    {
        "content": "<p>Maybe with some macros we can hide the pope under the rug <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 273795618,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646222384
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[hkt]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">sort_by_key</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span>: <span class=\"nc\">hkt</span>::<span class=\"n\">Generic</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">K</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">H</span><span class=\"w\"> </span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">K</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">sort_by</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">T</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">K</span>::<span class=\"n\">T</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">define_hkt</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Str</span><span class=\"o\">&lt;'</span><span class=\"na\">lt</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">lt</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">sort_by_key</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"cm\">/* â€¦ */</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273796341,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646222704
    }
]