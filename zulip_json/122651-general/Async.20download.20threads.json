[
    {
        "content": "<p>Async question here: I'm trying to download a very large number of files from a remote server. I've already got async/await setup, but spawning a new tokio task clearly won't work because I'll run out of file handles (already confirmed this).</p>\n<p>If I wasn't using async/await, I'd just spawn a dedicated number of download threads and use mpsc to send the downloads to the threads with a cycling index and have the threads process their downloads sequentially.</p>\n<p>With tokio and async/await, it's not clear how to use their existing thread pool to do something similar.</p>",
        "id": 174162393,
        "sender_full_name": "Paul Faria",
        "timestamp": 1566841981
    },
    {
        "content": "<p>Do I need to run a runtime in each thread or is there a way to leverage the existing thread pool in a clean way?</p>",
        "id": 174162428,
        "sender_full_name": "Paul Faria",
        "timestamp": 1566842025
    },
    {
        "content": "<p>To clarify, you're trying to limit the number of files that are downloaded at the same time?</p>",
        "id": 174163553,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1566842866
    },
    {
        "content": "<p>Yes (sorry for the really slow response)</p>",
        "id": 174171096,
        "sender_full_name": "Paul Faria",
        "timestamp": 1566848780
    },
    {
        "content": "<p>no problem!</p>",
        "id": 174175138,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1566852015
    },
    {
        "content": "<p>You might consider using the <code>.buffered</code> combinator on streams or the limit to <code>for_each_concurrent</code> to limit the number of running futures actively pulling things from the remote server</p>",
        "id": 174175163,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1566852061
    },
    {
        "content": "<p>something like <code>stream::iter(vec![thing1, thing2, thing3]).for_each_concurrent(MAX_CONCURRENT_FILES, |thing| async move {... /* get your file info here *' ... })</code></p>",
        "id": 174175246,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1566852149
    },
    {
        "content": "<p>Ok, I was also looking at ThreadPool in futures while waiting for your response, but I guess that's not the right idea. I saw on <a href=\"http://vorner.guthub.io/async-bench.html\" target=\"_blank\" title=\"http://vorner.guthub.io/async-bench.html\">vorner.guthub.io/async-bench.html</a> that futures-cpupool could process multiple requests while limiting IO polling to the main thread (I should have looked at the actual impl). I wasn't sure if ThreadPool was the same idea. I'll code up the <code>for_each_concurrent</code> now. Thanks!</p>",
        "id": 174175510,
        "sender_full_name": "Paul Faria",
        "timestamp": 1566852450
    }
]