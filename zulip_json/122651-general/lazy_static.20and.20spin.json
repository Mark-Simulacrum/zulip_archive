[
    {
        "content": "<p>After doing <code>cargo update</code> of a tiny test project, I noticed that lazy_static now depends on <code>spin</code>. Looking at the Cargo.toml, seems that's a non-default feature, but something must be enabling that feature. (I can't find out what though, there are only two reverse dependencies according to <code>cargo tree</code> and neither of them seems to be the one...)<br>\nIsn't that a problem? This will mean that when a lazy_static takes a bit to initialize, everyone waiting will wait by spinning instead of properly putting the thread to sleep. Spinlocks make sense when you know exactly that nobody will be in the critical section for too long, but doing this <em>for all lazy_static in the entire program</em> seems a bit too much?</p>",
        "id": 169312177,
        "sender_full_name": "RalfJ",
        "timestamp": 1561842456
    },
    {
        "content": "<p>the reverse tree is:</p>\n<div class=\"codehilite\"><pre><span></span>lazy_static v1.3.0\n├── c2-chacha v0.2.2\n│   └── rand_chacha v0.2.0\n│       └── rand v0.7.0\n│           [dev-dependencies]\n│           └── cargo-miri-test v0.1.0 (/home/r/src/rust/miri/test-cargo-miri)\n└── getrandom v0.1.5\n    ├── rand v0.7.0 (*)\n    └── rand_core v0.5.0\n        ├── rand v0.7.0 (*)\n        ├── rand_chacha v0.2.0 (*)\n        ├── rand_hc v0.2.0\n        │   [dev-dependencies]\n        │   └── rand v0.7.0 (*)\n        └── rand_pcg v0.2.0\n            └── rand v0.7.0 (*)\n            [dev-dependencies]\n            └── rand v0.7.0 (*)\n</pre></div>\n\n\n<p>but the \"forwards\" tree shows that spin is definitely imported:</p>\n<div class=\"codehilite\"><pre><span></span>lazy_static v1.3.0\n└── spin v0.5.0\n</pre></div>",
        "id": 169312221,
        "sender_full_name": "RalfJ",
        "timestamp": 1561842532
    },
    {
        "content": "<p>there's no way to ask cargo why a feature got enabled, is there? :/</p>",
        "id": 169312344,
        "sender_full_name": "RalfJ",
        "timestamp": 1561842835
    },
    {
        "content": "<p>There isn’t, no.</p>",
        "id": 169312977,
        "sender_full_name": "nagisa",
        "timestamp": 1561843993
    },
    {
        "content": "<p>what you want to see is the reverse tree of <code>spin</code>, not <code>lazy_static</code></p>",
        "id": 169312980,
        "sender_full_name": "nagisa",
        "timestamp": 1561844015
    },
    {
        "content": "<p>good point</p>",
        "id": 169313099,
        "sender_full_name": "RalfJ",
        "timestamp": 1561844278
    },
    {
        "content": "<p>well, that doesnt bring up anything else though:</p>\n<div class=\"codehilite\"><pre><span></span>spin v0.5.0\n└── lazy_static v1.3.0\n    ├── c2-chacha v0.2.2\n    │   └── rand_chacha v0.2.0\n    │       └── rand v0.7.0\n    │           [dev-dependencies]\n    │           └── cargo-miri-test v0.1.0 (/home/r/src/rust/miri/test-cargo-miri)\n    └── getrandom v0.1.5\n        ├── rand v0.7.0 (*)\n        └── rand_core v0.5.0\n            ├── rand v0.7.0 (*)\n            ├── rand_chacha v0.2.0 (*)\n            ├── rand_hc v0.2.0\n            │   [dev-dependencies]\n            │   └── rand v0.7.0 (*)\n            └── rand_pcg v0.2.0\n                └── rand v0.7.0 (*)\n                [dev-dependencies]\n                └── rand v0.7.0 (*)\n</pre></div>",
        "id": 169313140,
        "sender_full_name": "RalfJ",
        "timestamp": 1561844317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I <em>think</em> getrandom is at fault</p>",
        "id": 169313314,
        "sender_full_name": "simulacrum",
        "timestamp": 1561844672
    },
    {
        "content": "<p><a href=\"https://github.com/rust-random/getrandom/blob/master/Cargo.toml#L32\" target=\"_blank\" title=\"https://github.com/rust-random/getrandom/blob/master/Cargo.toml#L32\">https://github.com/rust-random/getrandom/blob/master/Cargo.toml#L32</a></p>",
        "id": 169313316,
        "sender_full_name": "simulacrum",
        "timestamp": 1561844693
    },
    {
        "content": "<p>Cargo IIRC doesn't actually respect cfg flags for feature resolution</p>",
        "id": 169313324,
        "sender_full_name": "simulacrum",
        "timestamp": 1561844713
    },
    {
        "content": "<p>but I might be wrong, so take that with a grain of salt</p>",
        "id": 169313327,
        "sender_full_name": "simulacrum",
        "timestamp": 1561844720
    },
    {
        "content": "<p>oh, well that would explain it</p>",
        "id": 169313658,
        "sender_full_name": "RalfJ",
        "timestamp": 1561845433
    },
    {
        "content": "<p>though arguably lazy_static is at fault for letting any crate opt-in to do this, globally.</p>",
        "id": 169313659,
        "sender_full_name": "RalfJ",
        "timestamp": 1561845452
    },
    {
        "content": "<p>or am I unnecessarily worried about spinlocks being used here?</p>",
        "id": 169313661,
        "sender_full_name": "RalfJ",
        "timestamp": 1561845470
    }
]