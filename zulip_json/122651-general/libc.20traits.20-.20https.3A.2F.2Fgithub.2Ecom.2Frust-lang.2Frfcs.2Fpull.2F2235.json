[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> why do you think the libc traits have to be behind a feature at all ? I don't really follow the rationale.</p>",
        "id": 148719438,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419227
    },
    {
        "content": "<p>I mean, during the RFC it was argued that this should depend on what impact these features would have, and @Susurrus went out of its way to actually implement this, and measure the effect of these features on compile-times. </p>\n<p>The effect is negligible, ~1 extra second of compile time in @Susurrus benchmarks. I think that having this as an off by default single feature like @SimonSapin suggests could be \"ok\" (don't pay for what you don't use), but I am not sure if its worth it because it's something else in the matrix that we have to test, gets less use if not everybody has it enabled, all code would be full of <code>cfg_attr</code>s, etc. and all of this just to shave 1 second in compile times \"once\".</p>",
        "id": 148719535,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419301
    },
    {
        "content": "<p>And even then, <code>libc</code> is probably compiled in parallel with other crates, so that ~1 extra second might turn out to be even less than that in practice.</p>",
        "id": 148719636,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> for me it's just being conservative, we can always turn it on by default later</p>",
        "id": 148719676,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419420
    },
    {
        "content": "<p><code>libc</code> is just so tricky to change</p>",
        "id": 148719688,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419429
    },
    {
        "content": "<p>I agree there's no technical known reason to not turn on by default</p>",
        "id": 148719711,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419446
    },
    {
        "content": "<p>I figure we can see what the experience is if they're turned off</p>",
        "id": 148719728,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419458
    },
    {
        "content": "<p>yeah, i would prefer to say that this has to be implemented behind a single feature first, but than then we should decide whether we keep it that way, or not</p>",
        "id": 148719731,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419462
    },
    {
        "content": "<p>the moment the cargo feature is \"stable\", we have to keep it around forever</p>",
        "id": 148719747,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419475
    },
    {
        "content": "<p>I think w/e we publish to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> must be considered insta-stable though</p>",
        "id": 148719822,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419512
    },
    {
        "content": "<p>implementing this behind one cargo feature per-trait as <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> suggests feels a bit overkill TBH</p>",
        "id": 148719828,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419517
    },
    {
        "content": "<p>I don't think we have much of an out to avoiding that</p>",
        "id": 148719832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419519
    },
    {
        "content": "<p>it doesn't matter too much though?</p>",
        "id": 148719846,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419532
    },
    {
        "content": "<p>they're small names and small features</p>",
        "id": 148719854,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419541
    },
    {
        "content": "<p>I think @Susurrus wanted to send a single PR implementing this for the whole library at once</p>",
        "id": 148719856,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419541
    },
    {
        "content": "<p>sure? but that's still fine to have a feature-per-trait</p>",
        "id": 148719874,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419560
    },
    {
        "content": "<p>Its one <code>cfg_attr</code> per trait per type, I mean, can be done, but looks like too much work for too little win</p>",
        "id": 148719905,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419601
    },
    {
        "content": "<p>(FWIW, it'd be nice if there was link to context here, because without this discussion is rather meaningless to observers^^)</p>",
        "id": 148719988,
        "sender_full_name": "RalfJ",
        "timestamp": 1543419632
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2235\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2235\">https://github.com/rust-lang/rfcs/pull/2235</a></p>",
        "id": 148720011,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419658
    },
    {
        "content": "<p>thanks!</p>",
        "id": 148720020,
        "sender_full_name": "RalfJ",
        "timestamp": 1543419667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> there's just one location this is being done though? in one macro?</p>",
        "id": 148720128,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419736
    },
    {
        "content": "<p>I mean: <code>#[cfg_attr(feature = \"trait-eq\", derive(Eq))] #[cfg_attr(feature = \"trait-...\"), derive(...)] ...</code> we can put it all behind macros, but we would be having all these features to shave a fraction of that 1 extra second</p>",
        "id": 148720133,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419741
    },
    {
        "content": "<p>I'm not necessarily worried about the exact time today</p>",
        "id": 148720166,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419761
    },
    {
        "content": "<p>but moreso about the long-term-future of libc</p>",
        "id": 148720172,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419765
    },
    {
        "content": "<p>yes, i think that would all go in the <code>s</code> macro</p>",
        "id": 148720181,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419770
    },
    {
        "content": "<p>as we continue to add more and more types</p>",
        "id": 148720182,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419770
    },
    {
        "content": "<p>like this was a clear win in winapi</p>",
        "id": 148720199,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419783
    },
    {
        "content": "<p>i mean, <code>winapi</code> is huge</p>",
        "id": 148720214,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419799
    },
    {
        "content": "<p>if libc turns into <code>winapi</code>, then everybody will be paying for a lot of stuff they don't use anyways, just check <code>winapi</code> feature flags</p>",
        "id": 148720420,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419828
    },
    {
        "content": "<p>they have dozens and dozens of features</p>",
        "id": 148720481,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419849
    },
    {
        "content": "<p>I guess I just don't understand why there's pushback here</p>",
        "id": 148720484,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419854
    },
    {
        "content": "<p>it shoudl be very easy to implement this</p>",
        "id": 148720492,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419862
    },
    {
        "content": "<p>and we can change it in the future</p>",
        "id": 148720494,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419865
    },
    {
        "content": "<p>what's the downside?</p>",
        "id": 148720497,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419867
    },
    {
        "content": "<p>the downside is that's just more features to test in the matrix for little win</p>",
        "id": 148720580,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543419911
    },
    {
        "content": "<p>we definitely don't need to test this on all platforms, that's just overkill</p>",
        "id": 148720599,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419931
    },
    {
        "content": "<p>it'd just be like one extra entry in one place</p>",
        "id": 148720605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543419938
    },
    {
        "content": "<p>we have to build with this on all platforms at least</p>",
        "id": 148720733,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543420003
    },
    {
        "content": "<p>not run the libc-tests (that's pointless I think), but check that we build properly</p>",
        "id": 148720748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543420021
    },
    {
        "content": "<p>some of the <code>repr</code> attributes interact poorly with deriving some traits</p>",
        "id": 148720767,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543420036
    },
    {
        "content": "<p>e.g. the <code>packed</code> <code>structs</code> cannot derive <code>Debug</code></p>",
        "id": 148720798,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543420073
    },
    {
        "content": "<p>Ok? Can you take these arguments to the RFC? I'm not convinced but others might</p>",
        "id": 148720871,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1543420104
    },
    {
        "content": "<p>in any case, I'm fine with putting all these traits behind a single feature, but one per trait feels overkill to me</p>",
        "id": 148720899,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543420119
    },
    {
        "content": "<p>i didn't consider your argument that this allow us to not offer this \"by default\" in the future if <code>libc</code> grows enough that this would become a problem</p>",
        "id": 148720915,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543420142
    }
]