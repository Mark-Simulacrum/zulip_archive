[
    {
        "content": "<p>Does a Rust's Hashmap own the actual value and when I <code>remove</code> it from the HashMap I get an Option&lt;V&gt; because the ownership is getting transferred?</p>",
        "id": 167929933,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1560332202
    },
    {
        "content": "<p>yes</p>",
        "id": 167930366,
        "sender_full_name": "oli",
        "timestamp": 1560332547
    },
    {
        "content": "<p>Same thing with a <code>Vec</code>. When you <code>pop</code> the last elemen, you get ownership back</p>",
        "id": 167930388,
        "sender_full_name": "oli",
        "timestamp": 1560332579
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 167933177,
        "sender_full_name": "Daniel Papp",
        "timestamp": 1560335111
    },
    {
        "content": "<p>speaking of which, does someone know a nice and readable way to assert that we got a <code>None</code> back?<br>\nI dislike <code>assert!(foo.remove(...).is_none());</code> because usually one expects the body of an <code>assert!</code> to not have important side-effects.</p>",
        "id": 167935315,
        "sender_full_name": "RalfJ",
        "timestamp": 1560337242
    },
    {
        "content": "<p>The dumb answer is to move the side-effect out of the assert; is that good enough?</p>\n<p>I've been bitten by putting important-to-the-functionality code in asserts in C and wondering why the production code fails, but at least in Rust you have to do out of your way to do that with <code>debug_assert</code></p>",
        "id": 167955560,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560351841
    },
    {
        "content": "<p>Depending on what you are testing, you could just do <code>assert(foo.is_empty())</code></p>",
        "id": 167955641,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560351870
    },
    {
        "content": "<p>And I think the context is relevant. I have no problems with side effects in an assert in a test.</p>",
        "id": 167955693,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560351910
    },
    {
        "content": "<p>I don't understand why one would write <code>assert!(foo.remove(...).is_none())</code>. If it returns None and the assertion passes, then the map didn't contain the key to begin with and nothing was removed, so why can't this be written as <code>assert!(!foo.contains(...));</code>?</p>",
        "id": 167957096,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1560352731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I think the original example was meant to be <code>HashMap::insert</code></p>",
        "id": 167957318,
        "sender_full_name": "oli",
        "timestamp": 1560352851
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 167957343,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1560352865
    },
    {
        "content": "<p>heh, you could do <code>assert!(map.insert(the_key_again).is_some())</code> to be really confusing</p>",
        "id": 167957953,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560353225
    },
    {
        "content": "<p>Now I want a clippy lint against that because I've never seen it used and thus have concluded via anecdotal evidence that the pattern is probably a bug and the user meant <code>.is_none()</code></p>",
        "id": 167958486,
        "sender_full_name": "oli",
        "timestamp": 1560353531
    },
    {
        "content": "<p>actually</p>",
        "id": 167958550,
        "sender_full_name": "oli",
        "timestamp": 1560353560
    },
    {
        "content": "<p>the user should just have done <code>map[key] = value;</code> instead</p>",
        "id": 167958564,
        "sender_full_name": "oli",
        "timestamp": 1560353571
    },
    {
        "content": "<p>You can't do that :-)</p>",
        "id": 167958602,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560353600
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/30414450/155423\" target=\"_blank\" title=\"https://stackoverflow.com/a/30414450/155423\">How can I update a value in a mutable HashMap?</a></p>",
        "id": 167958626,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560353616
    },
    {
        "content": "<p>damn</p>",
        "id": 167958726,
        "sender_full_name": "oli",
        "timestamp": 1560353652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> tangentially, I saw some SO comments from you recently back when you started Rust. It's really fun seeing the delta to today :-)</p>",
        "id": 167958734,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560353659
    },
    {
        "content": "<p>hahah</p>",
        "id": 167958764,
        "sender_full_name": "oli",
        "timestamp": 1560353682
    },
    {
        "content": "<p>yea</p>",
        "id": 167958766,
        "sender_full_name": "oli",
        "timestamp": 1560353683
    },
    {
        "content": "<p>it's probably visible just in my year of SO</p>",
        "id": 167958815,
        "sender_full_name": "oli",
        "timestamp": 1560353709
    },
    {
        "content": "<p>yeah sorry I meant <code>insert</code>. and I meant in real code, not tests, so side-effects in the <code>assert!</code> are bad.</p>",
        "id": 167961736,
        "sender_full_name": "RalfJ",
        "timestamp": 1560355363
    },
    {
        "content": "<p>I also dont want to spend two lines on this</p>",
        "id": 167961743,
        "sender_full_name": "RalfJ",
        "timestamp": 1560355370
    },
    {
        "content": "<p>for the other case (\"assert <code>is_some</code>\"), we have <code>unwrap</code>. So what is missing is a method that panics on <code>some</code> that can be nicely chained.</p>",
        "id": 167961789,
        "sender_full_name": "RalfJ",
        "timestamp": 1560355402
    },
    {
        "content": "<p>or alternatively, a method on <code>bool</code> to assert it is <code>true</code> or so...<br>\n<code>map.insert(...).is_none().assert()</code> ;)</p>",
        "id": 167961920,
        "sender_full_name": "RalfJ",
        "timestamp": 1560355431
    },
    {
        "content": "<p>ahem <code>map.insert(...).is_none().assert!()</code></p>",
        "id": 167965926,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1560358193
    },
    {
        "content": "<p>Gonna drag the postfix macros bikeshed into this faffing about, eh</p>",
        "id": 167966241,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560358434
    },
    {
        "content": "<p>So you want <code>Option::unwrap_none</code>; in parallel to <code>Result::unwrap_err</code>, almost.</p>",
        "id": 167966323,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560358492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> who puts <code>assert</code>s in the production code? Don't you trust yourself <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 167966660,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560358801
    },
    {
        "content": "<p>\"Beware of bugs in my code. I have only proven it correct, not tested it.\"</p>",
        "id": 167966905,
        "sender_full_name": "RalfJ",
        "timestamp": 1560358974
    },
    {
        "content": "<blockquote>\n<p>So you want <code>Option::unwrap_none</code>; in parallel to <code>Result::unwrap_err</code>, almost.</p>\n</blockquote>\n<p>yes</p>",
        "id": 167966909,
        "sender_full_name": "RalfJ",
        "timestamp": 1560358977
    }
]