[
    {
        "content": "<p>Is there any Rust crate that makes it possible to (inside a Rust compiled to wasm application) to generate wasm and execute it on the fly?</p>",
        "id": 197800056,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589641877
    },
    {
        "content": "<p>WebAssembly doesn't allow dynamic code generation like that. There has occasionally been discussion of the ability to do so, to support things like JITs, but currently the standard doesn't allow it.</p>",
        "id": 197801763,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589644243
    },
    {
        "content": "<p>What goal do you have, that doing so would have helped with? Perhaps there's another way to accomplish it?</p>",
        "id": 197801784,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589644295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  : Thanks. This is really helpful. Can you point me to the wasm standard discussions on dynamic code generation + execution vs no ?</p>\n<p>My particular use case involves an APL/J/K interpreter. There are some operations where one can do 'stream fusion' type operations to reduce the amount of memory bandwidth one uses (but at the cost of more complicated 'kernels' running per 'cell'). Right now, in these 'kernels', there is a giant switch statement that is executed 'per instruction' ... whereas I would prefer to just run through the giant switch once, convert it to wasm/wast, and then execute it without the overhead of \"one switch statement per instruction\"</p>",
        "id": 197804054,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589647572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299970\">@zeroexcuses</span> I don't know, offhand, of a reference to point you to. However, if you're interested in adding such capabilities, you might talk to the Bytecode Alliance (disclaimer: I'm a member), which works on software and interfaces for WebAssembly in various environments (including non-browser environments). I could imagine pursuing, through there, an interface for providing \"dynamically generated WASM modules\" and being able to link them in on the fly, the equivalent of <code>dlopen</code>. That might help.</p>",
        "id": 197806842,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589651477
    },
    {
        "content": "<p>This is a very interesting discussion! I’m also interested in exploring my own small language for data transformations, which in the end shall be executed from native Rust code (no WASM) with good efficiency. Bundling rustc and using <code>dlopen</code> is a possibility, but this thread made me wonder whether there are more light-weight alternatives.</p>",
        "id": 197834112,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1589697891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302838\">@Roland Kuhn</span>  : Are you able to get around the issue of \"one match per instruction executed\" ? This is the problem I am running into with a pure rust solution:</p>\n<ol>\n<li>I need to define some \"pub enum VMInstr { ... }\" , which is the set of 'primitive instructions'</li>\n<li>whatever higher level ops gets 'compiled down' to VMInstr</li>\n<li>the problem is taht when executing a <code>Vec&lt;VMInstr&gt;</code>, we have to do a match on evern VMInstr, per instruction executed. I have not benchmarked this, but this seems horribly inefficient.</li>\n</ol>",
        "id": 197878182,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589762944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299970\">@zeroexcuses</span> I should have been a bit clearer: I’m not yet actively pursuing this, in part because other things need to get done first and in part because I have not yet been able to think of a suitable design. A long time ago I wrote an expression evaluator in Pascal, which had the same issue you described; the solution back then was to include one assembler-written function that can just call a raw function pointer. With all the Rust infrastructure, maybe this can be simplified to compiling to a <code>Vec&lt;Box&lt;dyn VMInstr&gt;&gt;</code> (i.e. going from an enum to a trait), trading the huge switch for one memory indirection, which should improve performance in the “huge enough switch” case.</p>\n<p>My question was aimed at whether there is some other tooling we could use to not only get rid of either overhead, but also apply optimizations suitable for the hardware that executes all this — where running rustc is a (very heavy) solution AFAICS.</p>",
        "id": 197892384,
        "sender_full_name": "Roland Kuhn",
        "timestamp": 1589782245
    },
    {
        "content": "<p>\"Computed goto\" can help with that, but I don't think it's possible in Rust. Anyway, a big switch is what most interpreted languages do and it works fine for them. If you want better performance, you can add more primitives to it (e.g. array/vectorized operations).</p>",
        "id": 197893042,
        "sender_full_name": "Laurențiu",
        "timestamp": 1589782889
    }
]