[
    {
        "content": "<p>I havent built rustc in a few weeks, and noticed an odd change in the output today when I did <code>x.py check compiler/rustc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Building [=======================&gt; ] 301/307: rustc_interface, rustc_interface\n</code></pre></div>\n<p>every crate seems to be shown twice like this. any idea what that is happening?</p>",
        "id": 252920053,
        "sender_full_name": "RalfJ",
        "timestamp": 1631377639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> It is probably <a href=\"https://github.com/rust-lang/rust/issues/88011\">#88011</a>.  It now uses <code>--all-targets</code> which means it is checking both the normal library, and the library-as-unittests.</p>",
        "id": 252922514,
        "sender_full_name": "Eric Huss",
        "timestamp": 1631380074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> do you think cargo could show <code>rustc_interface (test)</code> for the second case?</p>",
        "id": 252922561,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631380092
    },
    {
        "content": "<p>I think it already shows <code>(doc)</code> in some cases</p>",
        "id": 252922570,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631380104
    },
    {
        "content": "<p>Yea, that sounds reasonable to me.  It can be a little tricky since there is very limited space.  The code is <a href=\"https://github.com/rust-lang/cargo/blob/2274489833256a979d98bc56633c8011c60df154/src/cargo/core/compiler/job_queue.rs#L999-L1016\">here</a> if anyone is interested.</p>",
        "id": 252922682,
        "sender_full_name": "Eric Huss",
        "timestamp": 1631380222
    },
    {
        "content": "<p>hmm, I would expect that to already be hit here? is there a special kind of <code>Lib</code> for tests? <a href=\"https://github.com/rust-lang/cargo/blob/2274489833256a979d98bc56633c8011c60df154/src/cargo/core/compiler/job_queue.rs#L1009\">https://github.com/rust-lang/cargo/blob/2274489833256a979d98bc56633c8011c60df154/src/cargo/core/compiler/job_queue.rs#L1009</a></p>",
        "id": 252922727,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631380296
    },
    {
        "content": "<p>also, does cargo have its internal docs published somewhere? like what you would get from <code>cargo doc -p cargo --document-private-items</code></p>",
        "id": 252922842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631380437
    },
    {
        "content": "<p>Yea, there are two variables here.  The <code>Target</code> is roughly equivalent to the root source file (<code>TargetKind::Test</code> here means an integration test).  The <code>CompileMode</code> is the mode the target is being built in (build, check, test, bench, doc, etc.).</p>",
        "id": 252923966,
        "sender_full_name": "Eric Huss",
        "timestamp": 1631381675
    },
    {
        "content": "<p>I don't think the private docs are published anywhere.</p>",
        "id": 252923970,
        "sender_full_name": "Eric Huss",
        "timestamp": 1631381685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20check.3A.20each.20crate.20shown.20twice.20in.20progress.20bar/near/252923970\">said</a>:</p>\n<blockquote>\n<p>I don't think the private docs are published anywhere.</p>\n</blockquote>\n<p>would you be ok with me adding them to nightly-rustc?</p>",
        "id": 252923990,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631381713
    },
    {
        "content": "<p>rustfmt is already there, I guess we may as well add clippy too while we're at it</p>",
        "id": 252923998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631381727
    },
    {
        "content": "<p>If you'd like.  I'm not sure how much that'll pollute the search index, though.  I don't use those docs myself, so I'm probably the wrong person to ask.</p>",
        "id": 252924060,
        "sender_full_name": "Eric Huss",
        "timestamp": 1631381774
    },
    {
        "content": "<p>hmm, ok. I wouldn't expect a _ton_ of noise from cargo, most of the functions are probably named differently since it doesn't deal with parsing at all</p>",
        "id": 252924109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631381861
    },
    {
        "content": "<p>I don't think we should be adding them to nightly-rustc; that's likely to be confusing. I would not personally object to new /cargo/ with cargo docs, though (technically it need not be nightly-cargo, given that cargo is published to <a href=\"http://crates.io\">crates.io</a>... but that's a separate conversation, in some sense).</p>",
        "id": 252925090,
        "sender_full_name": "simulacrum",
        "timestamp": 1631382955
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/88866\">https://github.com/rust-lang/rust/issues/88866</a> (don't have time to work on it right now)</p>",
        "id": 252925427,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631383291
    },
    {
        "content": "<p>oh wait, /cargo/ already exists and has the cargo book: <a href=\"https://doc.rust-lang.org/cargo/\">https://doc.rust-lang.org/cargo/</a></p>",
        "id": 252925487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631383326
    },
    {
        "content": "<p>so maybe nightly-cargo is better after all?</p>",
        "id": 252925493,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631383333
    },
    {
        "content": "<p>or <code>cargo-internals</code>?</p>",
        "id": 252925500,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631383346
    },
    {
        "content": "<p>Hm. Well, it may also be worth considering that documenting cargo is pretty fast and not too hard for people to just locally do</p>",
        "id": 252925631,
        "sender_full_name": "simulacrum",
        "timestamp": 1631383518
    },
    {
        "content": "<p>Even with all the deps <code>cargo doc -p cargo --document-private-items</code> takes ~25 seconds for me</p>",
        "id": 252925657,
        "sender_full_name": "simulacrum",
        "timestamp": 1631383561
    },
    {
        "content": "<p>So it's not clear that we should be publishing them (and in the long run, if we do, we're likely to start considering publishing these docs for all the other crates in rust-lang/rust, which seems a bit much)</p>",
        "id": 252925718,
        "sender_full_name": "simulacrum",
        "timestamp": 1631383609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20check.3A.20each.20crate.20shown.20twice.20in.20progress.20bar/near/252922514\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> It is probably <a href=\"https://github.com/rust-lang/rust/issues/88011\">#88011</a>.  It now uses <code>--all-targets</code> which means it is checking both the normal library, and the library-as-unittests.</p>\n</blockquote>\n<p>Is it possible to opt-out? I don't have enough RAM to afford checking rustc_middle twice at a time.</p>",
        "id": 252932939,
        "sender_full_name": "cjgillot",
        "timestamp": 1631391876
    },
    {
        "content": "<p>Not currently, I didn't realize that was a strong impediment -- we should add an opt-out then.</p>",
        "id": 252933270,
        "sender_full_name": "simulacrum",
        "timestamp": 1631392184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> can you share how much memory you have available? It looks like rustc_middle uses ~900 MB RSS right now for x.py check</p>",
        "id": 252989815,
        "sender_full_name": "simulacrum",
        "timestamp": 1631456353
    },
    {
        "content": "<p>I have 3.5 GB installed. I used to be able to run <code>x.py check</code> on two workspaces at a time.</p>",
        "id": 252990300,
        "sender_full_name": "cjgillot",
        "timestamp": 1631456873
    },
    {
        "content": "<p>Interesting, well, I do think the opt-out still makes sense</p>",
        "id": 252990833,
        "sender_full_name": "simulacrum",
        "timestamp": 1631457338
    },
    {
        "content": "<p>Are you running with incremental enabled by chance?</p>",
        "id": 252990842,
        "sender_full_name": "simulacrum",
        "timestamp": 1631457348
    },
    {
        "content": "<p>Yes.</p>",
        "id": 252990895,
        "sender_full_name": "cjgillot",
        "timestamp": 1631457369
    },
    {
        "content": "<p>Hm. I'm a little surprised a concurrent x.py check in two workspaces didn't hit the same problem for you, but regardless, we should add an opt-out as I said -- I was expecting much higher memory usage for rustc_middle compilation, tbh</p>",
        "id": 252991077,
        "sender_full_name": "simulacrum",
        "timestamp": 1631457576
    },
    {
        "content": "<p>looks like incremental uses ~955 MB, so only a little more.</p>",
        "id": 252991092,
        "sender_full_name": "simulacrum",
        "timestamp": 1631457593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/x.2Epy.20check.3A.20each.20crate.20shown.20twice.20in.20progress.20bar/near/252991077\">said</a>:</p>\n<blockquote>\n<p>Hm. I'm a little surprised a concurrent x.py check in two workspaces didn't hit the same problem for you, but regardless, we should add an opt-out as I said -- I was expecting much higher memory usage for rustc_middle compilation, tbh</p>\n</blockquote>\n<p>I'm going from 2 rustc_middle (1 on each workspace) to 4 rustc_middle (2 on each).</p>",
        "id": 252991210,
        "sender_full_name": "cjgillot",
        "timestamp": 1631457705
    },
    {
        "content": "<p>Ah, I see, yeah, ok, that makes sense</p>",
        "id": 252991534,
        "sender_full_name": "simulacrum",
        "timestamp": 1631458011
    }
]