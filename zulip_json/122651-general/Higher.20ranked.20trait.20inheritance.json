[
    {
        "content": "<p>Hi, I want to make a trait that \"ineritance\" from another trait but require that other trait to be implemented both on Self and on &amp;Self</p>\n<p>More concretely,<br>\nI want to be able to uncomment <code>add3</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Add</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BigInt</span>: <span class=\"nc\">Add</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nc\">Add</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//for&lt;'a&gt; &amp;'a Self: Add&lt;Self, Output=Self&gt;</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">BigInt</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">add2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">BigInt</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// fn add3&lt;T: BigInt&gt;(a: &amp;T, b: T) -&gt; T {</span>\n<span class=\"c1\">//     a+b</span>\n<span class=\"c1\">// }</span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?gist=bf5743791966d8cb8f9c97690a8c6953\">https://play.rust-lang.org/?gist=bf5743791966d8cb8f9c97690a8c6953</a></p>\n<p>Is this possible? or do I have to make a wrapper type and implement the ops traits manually on that type?</p>",
        "id": 245337362,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625761617
    },
    {
        "content": "<p>I think you can only do this by duplicating the where-clause to <code>add3</code> (<code>where for&lt;'a&gt; &amp;'a T: Add&lt;T, Output=T&gt;</code>)</p>",
        "id": 245337620,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625761740
    },
    {
        "content": "<p>Only trait bounds of the form <code>Self: $supertrait</code> are propagated to users of the trait</p>",
        "id": 245337670,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625761774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> the first <code>for</code> bound did work though, if you uncomment it <code>add2</code> will no longer compile.</p>",
        "id": 245337755,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625761813
    },
    {
        "content": "<p>Yeah, the propagation works even behind <code>for&lt;'a&gt;</code> quantifiers</p>",
        "id": 245337776,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625761834
    },
    {
        "content": "<p>This is <a href=\"https://github.com/rust-lang/rust/issues/20671\">https://github.com/rust-lang/rust/issues/20671</a>, I believe</p>",
        "id": 245337823,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1625761867
    },
    {
        "content": "<p>This also looks like <a href=\"https://github.com/rust-lang/rust/issues/86635\">#86635</a></p>",
        "id": 245337999,
        "sender_full_name": "CraftSpider",
        "timestamp": 1625761956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/122651-general/topic/Higher.20ranked.20trait.20inheritance/near/245337823\">said</a>:</p>\n<blockquote>\n<p>This is <a href=\"https://github.com/rust-lang/rust/issues/20671\">https://github.com/rust-lang/rust/issues/20671</a>, I believe</p>\n</blockquote>\n<p>So if I want a single \"thing\" to encapsulate this ability I must use a new <em>type</em>(wrapping a generic) and not a trait?</p>",
        "id": 245338030,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625761978
    },
    {
        "content": "<p>Even trying to use a new type doesn't help much, because it means I need to add the <code>where</code> clauses to the all the functions using that type: <a href=\"https://play.rust-lang.org/?gist=4220b736529bb91f15034fc0ec4b01f5\">https://play.rust-lang.org/?gist=4220b736529bb91f15034fc0ec4b01f5</a></p>",
        "id": 245541157,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625910854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> I see you asked this in the forum before, did you find any solution to this? <br>\n(<a href=\"https://users.rust-lang.org/t/traits-with-self-bounds/4033\">https://users.rust-lang.org/t/traits-with-self-bounds/4033</a>)</p>",
        "id": 245541856,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625911958
    },
    {
        "content": "<p>AFAIK the situation is still the same with <a href=\"https://github.com/rust-lang/rust/issues/20671\">#20671</a></p>",
        "id": 245553352,
        "sender_full_name": "cuviper",
        "timestamp": 1625927497
    }
]