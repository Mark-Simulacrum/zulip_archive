[
    {
        "content": "<p>SO question for context: <a href=\"https://stackoverflow.com/q/65222827/155423\">How can I use multiple cores for compiling a single crate?</a></p>\n<p>parallel-rustc is on-by-default now, right?</p>",
        "id": 219379092,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539195
    },
    {
        "content": "<p>No, parallel-rustc is not enabled by default. You will have to recompile rustc to enable it.</p>",
        "id": 219379196,
        "sender_full_name": "bjorn3",
        "timestamp": 1607539240
    },
    {
        "content": "<p>Oh, it's not even a -Z flag?</p>",
        "id": 219379220,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539253
    },
    {
        "content": "<p>Now I see why \"fearless concurrency\" was removed from the web page <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 219379322,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539299
    },
    {
        "content": "<p>No, it requires replacing a lot of <code>RefCell</code> with <code>Mutex</code> and <code>Rc</code> with <code>Arc</code>. In addition it drastically changes the query system to handle multiple threads. This is still a regression in the single thread case. See <a href=\"https://github.com/rust-lang/rust/issues/79706\">#79706</a> for the latest benchmarks. The first perf run is with <code>-Zthreads=12</code> as default. The second with <code>-Zthreads=1</code> as default.</p>",
        "id": 219379493,
        "sender_full_name": "bjorn3",
        "timestamp": 1607539371
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/config.toml.example#L437\">https://github.com/rust-lang/rust/blob/master/config.toml.example#L437</a> if you want to have a go</p>",
        "id": 219379495,
        "sender_full_name": "lqd",
        "timestamp": 1607539373
    },
    {
        "content": "<p>The comments on that PR seem cautiously optimistic.</p>",
        "id": 219379836,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539534
    },
    {
        "content": "<p>Too bad we don't have statistics on \"number of cores available to use when rustc was invoked somewhere\"</p>",
        "id": 219379955,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539580
    },
    {
        "content": "<p>the bootstrap measurements are still somewhat unexpected</p>",
        "id": 219379977,
        "sender_full_name": "lqd",
        "timestamp": 1607539593
    },
    {
        "content": "<p>E.g if 90% of builds had idle cores and only a small percentage was restricted to a single core, then we'd be able to say that the single-digit regression was \"OK\".</p>",
        "id": 219380087,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539647
    },
    {
        "content": "<p>could be interesting to try on the M1 :)</p>",
        "id": 219380180,
        "sender_full_name": "lqd",
        "timestamp": 1607539698
    },
    {
        "content": "<p>what kind of try? I don't have the M1, but do have the DTK. It's just idling there.</p>",
        "id": 219380224,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539724
    },
    {
        "content": "<p>just a random thought, a bootstrap with parallel queries on M1 could have interesting numbers</p>",
        "id": 219380472,
        "sender_full_name": "lqd",
        "timestamp": 1607539841
    },
    {
        "content": "<p>to compare with my 2010 macbook air <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 219380543,
        "sender_full_name": "lqd",
        "timestamp": 1607539879
    },
    {
        "content": "<p>So, do <code>x.py clean</code> and then what should I run?</p>",
        "id": 219380611,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607539914
    },
    {
        "content": "<p>Toggle <a href=\"https://github.com/rust-lang/rust/blob/master/config.toml.example#L437\">https://github.com/rust-lang/rust/blob/master/config.toml.example#L437</a> and then build</p>",
        "id": 219380726,
        "sender_full_name": "bjorn3",
        "timestamp": 1607539946
    },
    {
        "content": "<p>what kind of cpu does the DTK have ? wasn't that mostly to check the aarch64 target ?</p>",
        "id": 219380839,
        "sender_full_name": "lqd",
        "timestamp": 1607540016
    },
    {
        "content": "<p>So I'm going to type <code>x.py build</code> and wait 50 minutes and then that will tell you everything you want to know?</p>",
        "id": 219381169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607540150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> it's more-or-less an A14X</p>",
        "id": 219381376,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607540230
    },
    {
        "content": "<p>if one had a way to compare to the regular bootstrap times</p>",
        "id": 219381465,
        "sender_full_name": "lqd",
        "timestamp": 1607540268
    },
    {
        "content": "<p>but yeah it's probably too annoying to do that don't bother ^^</p>",
        "id": 219381545,
        "sender_full_name": "lqd",
        "timestamp": 1607540290
    },
    {
        "content": "<p>like trying to run the perf.rlo collector and so on</p>",
        "id": 219381576,
        "sender_full_name": "lqd",
        "timestamp": 1607540306
    },
    {
        "content": "<p>I mean, the machine is literally sitting there doing nothing at the moment. I'm doing a build because I haven't in a while.</p>",
        "id": 219381644,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607540342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Is.20parallel-rustc.20enabled.20by.20default.3F/near/219381169\">said</a>:</p>\n<blockquote>\n<p>So I'm going to type <code>x.py build</code> and wait 50 minutes and then that will tell you everything you want to know?</p>\n</blockquote>\n<p>make sure to set <code>parallel-compiler = true</code> first</p>",
        "id": 219384579,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607541617
    },
    {
        "content": "<p>otherwise you'll have to recompile</p>",
        "id": 219384584,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607541621
    },
    {
        "content": "<p>Yes, I gathered that from the <a href=\"#narrow/stream/122651-general/topic/Is.20parallel-rustc.20enabled.20by.20default.3F/near/219380726\">1</a> <a href=\"#narrow/stream/122651-general/topic/Is.20parallel-rustc.20enabled.20by.20default.3F/near/219379495\">2</a> previous suggestions <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 219385193,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607541914
    },
    {
        "content": "<p>ok you should be fine then, the line you're looking for is 'Building stage 2 artifacts' and then the time cargo outputs when that finishes</p>",
        "id": 219385337,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607541968
    },
    {
        "content": "<p>the difference between that and the time for stage1 artifacts is roughly the improvement from the parallel compiler (modulo improvements since the beta bump)</p>",
        "id": 219385400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607541997
    },
    {
        "content": "<p>hmmph</p>\n<div class=\"codehilite\"><pre><span></span><code>  thread &#39;main&#39; panicked at &#39;command did not execute successfully: &quot;/Users/shepmaster/Projects/rust/full/build/aarch64-apple-darwin/llvm/build/bin/llvm-config&quot; &quot;--version&quot;\n  expected success, got: signal: 9&#39;, src/build_helper/lib.rs:139:9\n</code></pre></div>",
        "id": 219386938,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607542602
    },
    {
        "content": "<p>9 is SIGKILL, right?</p>",
        "id": 219387061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542662
    },
    {
        "content": "<p>maybe you ran out of ram or something? what does <code>llvm-config --verrsion</code> say?</p>",
        "id": 219387094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542677
    },
    {
        "content": "<p>Nah, this is a \"known issue\" on macOS/arm. It means that something ran in x86_64 mode and improperly code signed that executable.</p>",
        "id": 219387398,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607542794
    },
    {
        "content": "<p>The quick hack is </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cp program<span class=\"o\">{</span>,2<span class=\"o\">}</span>\ncodesign -s - program2\nmv program<span class=\"o\">{</span><span class=\"m\">2</span>,<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219387675,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607542916
    },
    {
        "content": "<p>In this case, \"something\" is most likely ninja</p>",
        "id": 219387793,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607542959
    },
    {
        "content": "<p>See also <a href=\"https://stackoverflow.com/q/64830671/155423\">Why does my native arm64 application built using an x86_64 build system fail to be code signed unless I remove the previous executable?</a></p>",
        "id": 219387839,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607542987
    },
    {
        "content": "<p>ninja can be disabled in config.toml if you really want to</p>",
        "id": 219387854,
        "sender_full_name": "lqd",
        "timestamp": 1607542996
    },
    {
        "content": "<p>Disabled in favor of make, right?</p>",
        "id": 219387883,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607543016
    },
    {
        "content": "<p>probably cmake but yeah one of those</p>",
        "id": 219387908,
        "sender_full_name": "lqd",
        "timestamp": 1607543029
    },
    {
        "content": "<p>well, cmake would also be bad ;-)</p>",
        "id": 219387925,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607543041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% file $(which make)\n/usr/bin/make: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\n/usr/bin/make (for architecture x86_64):        Mach-O 64-bit executable x86_64\n/usr/bin/make (for architecture arm64e):        Mach-O 64-bit executable arm64e\n\n% file $(which cmake)\n/Users/shepmaster/bin/cmake: Mach-O 64-bit executable x86_64\n</code></pre></div>",
        "id": 219388069,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607543083
    },
    {
        "content": "<p>I can also work around it by specifying a shim <code>cc</code> that switches back to the arm64 <code>cc</code></p>",
        "id": 219388136,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607543118
    },
    {
        "content": "<p>But I'm guessing that llvm-config is the only LLVM binary created / we care about.</p>",
        "id": 219388203,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607543153
    },
    {
        "content": "<p>Until I try to use bugpoint or llc in a week or two.</p>",
        "id": 219388259,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607543165
    },
    {
        "content": "<p>So, as requested:</p>\n<div class=\"codehilite\"><pre><span></span><code>% ../x.py build\nBuild completed successfully in 0:10:54\n</code></pre></div>",
        "id": 219396486,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607547403
    },
    {
        "content": "<p>that is a <em>fast</em> computer, wow <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219396982,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607547627
    },
    {
        "content": "<p>That doesn't count LLVM, FWIW.</p>",
        "id": 219397035,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607547652
    },
    {
        "content": "<blockquote>\n<p>the line you're looking for is 'Building stage 2 artifacts'</p>\n</blockquote>\n<p>This line does not occur in the build command I was instructed to run.</p>",
        "id": 219397352,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607547787
    },
    {
        "content": "<p>oh I probably got the numbering wrong lol</p>",
        "id": 219398045,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607548100
    },
    {
        "content": "<p>do you see 'building stage 0 artifacts' and 'building stage 1 artifacts'?</p>",
        "id": 219398068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607548112
    },
    {
        "content": "<p>Not exactly, no.</p>\n<div class=\"codehilite\"><pre><span></span><code>Building stage0 std artifacts (aarch64-apple-darwin -&gt; aarch64-apple-darwin)\n    Finished release [optimized] target(s) in 29.90s\n\nBuilding stage0 compiler artifacts (aarch64-apple-darwin -&gt; aarch64-apple-darwin)\n    Finished release [optimized] target(s) in 8m 33s\n\nBuilding stage1 std artifacts (aarch64-apple-darwin -&gt; aarch64-apple-darwin)\n    Finished release [optimized] target(s) in 32.76s\n</code></pre></div>",
        "id": 219399720,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607548868
    },
    {
        "content": "<p>well that explains why it didn't take very long - try <code>x.py build --stage 2</code></p>",
        "id": 219401150,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607549505
    },
    {
        "content": "<p>default stages strike again <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 219401208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607549522
    },
    {
        "content": "<p>8 minutes is still really fast though</p>",
        "id": 219401257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607549531
    },
    {
        "content": "<p>Is <code>x.py clean</code> the right way to get things reset between runs?  Now I'm tempted to try it.</p>",
        "id": 219404469,
        "sender_full_name": "scottmcm",
        "timestamp": 1607550944
    },
    {
        "content": "<p>you shouldn't need to run clean at all, x.py knows it needs to invalidate the cache when you change the config</p>",
        "id": 219404541,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607550974
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Building stage1 compiler artifacts (aarch64-apple-darwin -&gt; aarch64-apple-darwin)\n    Finished release [optimized] target(s) in 9m 05s\n</code></pre></div>",
        "id": 219404692,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607551069
    },
    {
        "content": "<p>no go fast :-(</p>",
        "id": 219404717,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607551081
    },
    {
        "content": "<p>right, now try with <code>RUSTFLAGS_NOT_BOOTSTRAP=-Zthreads=16</code></p>",
        "id": 219404792,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607551104
    },
    {
        "content": "<p>or however many cores you have</p>",
        "id": 219404799,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607551109
    },
    {
        "content": "<p>(physical core or hyperthreads?)</p>",
        "id": 219404829,
        "sender_full_name": "scottmcm",
        "timestamp": 1607551130
    },
    {
        "content": "<p>That's a tricky question for big.LITTLE machines :-)</p>",
        "id": 219404833,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607551130
    },
    {
        "content": "<p>not sure, however many you normally run <code>-j</code> with</p>",
        "id": 219404853,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607551142
    },
    {
        "content": "<p>probably hyperthreads?</p>",
        "id": 219404913,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607551176
    },
    {
        "content": "<p>You almost always want to treat hyperthreads as CPUs, yeah.</p>",
        "id": 219408894,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607553047
    },
    {
        "content": "<p>For parallel compilation you definitely do.</p>",
        "id": 219408912,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607553057
    },
    {
        "content": "<p>Oh, right, because they'll so often be waiting on hashtable memory or whatever anyway</p>",
        "id": 219408952,
        "sender_full_name": "scottmcm",
        "timestamp": 1607553077
    },
    {
        "content": "<p>Hmm, my \"stage1 compiler artifacts\" time was only 0.1 Np faster with upping the -Zthreads :(</p>",
        "id": 219409742,
        "sender_full_name": "scottmcm",
        "timestamp": 1607553517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> are you sure you set parallel-compiler = true? how many threads was it set to before?</p>",
        "id": 219410070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607553695
    },
    {
        "content": "<p>Whatever the default is.  parallel-compiler=true is definitely set, since it got slower when I set that.</p>\n<p>Hmm, I might be setting it wrong.  16 vs 32 didn't make a material difference; I'll try 1, which ought to matter.</p>",
        "id": 219410186,
        "sender_full_name": "scottmcm",
        "timestamp": 1607553760
    },
    {
        "content": "<p>if you have 16 cores I would expect bumping the threads past that not to have much effect</p>",
        "id": 219410358,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607553867
    },
    {
        "content": "<p>think that I remember that last time this was tested -Zthreads set to more then 4 did not give that good results, sometimes even longer compile time then default</p>",
        "id": 219411364,
        "sender_full_name": "andjo403",
        "timestamp": 1607554384
    },
    {
        "content": "<p>4m 10s vs 3m 42s between 1 and 16 threads, assuming I set things properly <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n<p>EDIT: And about the same for 4.  Maybe I'm just setting it wrong -- I'm on windows so something might be weird.</p>",
        "id": 219411611,
        "sender_full_name": "scottmcm",
        "timestamp": 1607554480
    },
    {
        "content": "<p>You might try some intermediate points like 4 or 8. But there may be a scaling issue still.</p>",
        "id": 219411681,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607554524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS_NOT_BOOTSTRAP=-Zthreads=8 ../x.py build --stage 2\n\nBuilding stage1 std artifacts (aarch64-apple-darwin -&gt; aarch64-apple-darwin)\n    Finished release [optimized] target(s) in 26.74s\n\nBuilding stage1 compiler artifacts (aarch64-apple-darwin -&gt; aarch64-apple-darwin)\n    Finished release [optimized] target(s) in 9m 04s\n</code></pre></div>",
        "id": 219422975,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607563761
    }
]