[
    {
        "content": "<p>I'm focusing on an OSX dylib: I'm trying to embed the SVH into the library as a symbol as OSX dylibs have to have specific file names (so you can't just pop the SVH in the dylib name as you might be able to on other platforms). But at the moment my symbol is getting stripped out :-(</p>\n<p>Apparently I problaby need to set S_ATTR_NO_DEAD_STRIP somehow in LLVM. I tried .section __DATA,.rust_svh_hash,no_dead_strip but no juice. This is my last stumbling block for my PR so any additonal hints are greatfully recieved!</p>",
        "id": 214804763,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603872164
    },
    {
        "content": "<p>It looks like cdylib might be hard mode: <a href=\"https://github.com/rust-lang/rfcs/issues/2771\">https://github.com/rust-lang/rfcs/issues/2771</a> but I'd be happy today if I can get the symbol to stay in a dylib.</p>",
        "id": 214804914,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603872274
    },
    {
        "content": "<p>Hmm, a cdylib with panic=abort seems to have just two symbols in it: _rust_eh_personality and dyld_stub_binder. Let me have a snoop about as to how those are set up in rustc...</p>",
        "id": 214805483,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603872750
    },
    {
        "content": "<p>Hmm, for dylib it's not even coming out in the .ll - at least that's still rust code :-)</p>",
        "id": 214807869,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603874619
    },
    {
        "content": "<p>Got past dylib - got a symbol coming out now. Now for hard mode; somehow I need to get a symbol coming out for a cdylib so I'm covering all bases...</p>",
        "id": 214854227,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603899524
    },
    {
        "content": "<p>Responded on the PR. The problem is likely that the metadata module is unused when compiling a cdylib.</p>",
        "id": 214854346,
        "sender_full_name": "bjorn3",
        "timestamp": 1603899578
    },
    {
        "content": "<p>Hmm, \"proc-macro crates are mostly cdylibs, but we also need metadata.\"</p>",
        "id": 214864084,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603903357
    },
    {
        "content": "<p>Ideally I could just define it as an extern pub symbol and it would come out of the cdylib...</p>",
        "id": 214868939,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603905406
    },
    {
        "content": "<p>Idk, maybe with rmeta, bin and dylibs having svh hashes in that's enough bin things with hashes in to focus on the cargo reading of the hashes side. I've got a lot further than I was expecting to so it's all good. (I worry slightly about introducing a whole metadata section into cdylibs just to sneak in a hash).</p>",
        "id": 214870147,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603905870
    },
    {
        "content": "<p>I think it is fine to add a metadata section to cdylibs for as long as you ensure that the symbol will never cause a conflict and the amount of data in the section is very small.</p>",
        "id": 214879107,
        "sender_full_name": "bjorn3",
        "timestamp": 1603909706
    },
    {
        "content": "<p>At least I don't think I have to worry about embedding a svh in a staticlib as that would be unlikely to be a dependency to any rust code so not intresting from an incremental compilation viewpoint. That said it might come out with the changes to support cdylib I guess...</p>",
        "id": 214937262,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603959846
    },
    {
        "content": "<p>ok well got metadata coming out for cdylibs which is great - lots of symbols - in fact everything but my svh symbol. lol. Still it's progress!</p>",
        "id": 214938079,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603960477
    },
    {
        "content": "<p>It's proving quite puzzling: encode_exported_symbols explicitly excludes the rust_metadata symbol and yet it still comes out in the dylib. I'm missing something and pretty sure now that that filtering isn't where it's coming out. Not lease because if I prevent it filtering out those symbols there the linker complains it can't export hidden symbols.</p>",
        "id": 214944605,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603964583
    },
    {
        "content": "<p>It seems that the metadata symbol isn't actually exported from dylibs. Only the <code>.rustc</code> section is preserved in addition to two references to the origin object file.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ bingrep ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/libstd-6e0e72ef3f331f94.so --color | rg &quot;\\.rustc&quot;\n  28    .rustc                 SHT_PROGBITS                      0xab60c0     0x0         0x2ebc44                  0x0       0x10\n                 0    LOCAL      SECTION                                                                                                                                                                                                                                                                                                  0x0         .rustc(28)              0x0\n                 0    GLOBAL     OBJECT      rust_metadata_std_4bb2e180944fd52bcd19320b64ef9850                                                                                                                                                                                                                                           0x2ebc44    .rustc(28)              0x0\n                 0    GLOBAL     OBJECT      rust_metadata_std_4bb2e180944fd52bcd19320b64ef9850                                                                                                                                                                                                                                           0x2ebc44    .rustc(28)         0x0\n          cb4380 X86_64_GLOB_DAT .rustc+0\n</code></pre></div>",
        "id": 214945327,
        "sender_full_name": "bjorn3",
        "timestamp": 1603964988
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/f141acf0678139ac31375d02feebcc2be220715b\">https://github.com/rust-lang/rust/commit/f141acf0678139ac31375d02feebcc2be220715b</a> - <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> ,  is it ok if I still keep the crate hash in the codegenResults as I haven't access to the type context to get it? I need to get the hash here: rustc_codegen_ssa/src/back/link.rs:381</p>",
        "id": 214996977,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603990926
    },
    {
        "content": "<p>Is it possible to just keep the file with the correct prefix? If not, then re-adding the crate hash is fine.</p>",
        "id": 214997526,
        "sender_full_name": "bjorn3",
        "timestamp": 1603991166
    },
    {
        "content": "<p>I just wanted the input to the linker code to be as small as possible.</p>",
        "id": 214997568,
        "sender_full_name": "bjorn3",
        "timestamp": 1603991190
    },
    {
        "content": "<p>I'll re-add for now to get me back to a working state, and will revisit once I've proved that bin hashes work ok with cargo.</p>",
        "id": 215001745,
        "sender_full_name": "Giles Cope",
        "timestamp": 1603992894
    },
    {
        "content": "<p>ah rlibs are ar rather than tars. that helps.</p>",
        "id": 215100835,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604067756
    },
    {
        "content": "<p>Ok, I think I've got to the debug it until it works stage. All the pieces (aside from cdylibs) are there. It's gonna be a fun one to write reliable tests for...</p>",
        "id": 215129357,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604080593
    },
    {
        "content": "<p>Thinking about it a bit more, why do you need an svh for staticlibs, cdylibs and executables? They can't be used as dependency of other crates.</p>",
        "id": 215189136,
        "sender_full_name": "bjorn3",
        "timestamp": 1604146819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> ^</p>",
        "id": 215189138,
        "sender_full_name": "bjorn3",
        "timestamp": 1604146824
    },
    {
        "content": "<p>They can't? I hope executables will be able to be dylibs one day... but I take your point about staticlibs and cdylibs - rust code should not depend on them. Ok, well that makes things a little simpler. One thing I do think I need to sort out is I need to add svh into stand alone .rmeta files as those seem to be half of the dependencies along with .rlibs.</p>",
        "id": 215241751,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604232865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> When executables get usable as dylibs, we must start to include the crate metadata in executables. When doing so, adding the SVH can be done at the same time.</p>",
        "id": 215242354,
        "sender_full_name": "bjorn3",
        "timestamp": 1604233869
    },
    {
        "content": "<p>Thanks - just pondering how to pop svh into a .rmeta file now.</p>",
        "id": 215242408,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604233926
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/8623#discussion_r515216749\">https://github.com/rust-lang/cargo/pull/8623#discussion_r515216749</a></p>\n<blockquote>\n<p>This by the way gives me the idea of putting the svh at a stable location in the crate metadata. [...] (the rustc version is already included in a stable location for better error reporting when mixing rustc versions)</p>\n</blockquote>\n<p>Which is about the same as you suggested in <a href=\"https://github.com/rust-lang/rust/pull/75594#issuecomment-720081182\">https://github.com/rust-lang/rust/pull/75594#issuecomment-720081182</a> just now.</p>",
        "id": 215242413,
        "sender_full_name": "bjorn3",
        "timestamp": 1604233971
    },
    {
        "content": "<p>Sorry - it takes me a while for the penny to drop sometimes! That makes perfect sense - now to find out where the rustc version is included into the metadata. (I have one day left before I have to go back to work - really want to get this all working)</p>",
        "id": 215242701,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604234523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> It can be found at</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/1e37ba76d47280fa867c3863aa6d22376535637a/compiler/rustc_metadata/src/rmeta/mod.rs#L40-L54\">https://github.com/rust-lang/rust/blob/1e37ba76d47280fa867c3863aa6d22376535637a/compiler/rustc_metadata/src/rmeta/mod.rs#L40-L54</a></p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/1e37ba76d47280fa867c3863aa6d22376535637a/compiler/rustc_metadata/src/rmeta/encoder.rs#L2038-L2042\">https://github.com/rust-lang/rust/blob/1e37ba76d47280fa867c3863aa6d22376535637a/compiler/rustc_metadata/src/rmeta/encoder.rs#L2038-L2042</a></p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/1e37ba76d47280fa867c3863aa6d22376535637a/compiler/rustc_metadata/src/rmeta/encoder.rs#L2066-L2067\">https://github.com/rust-lang/rust/blob/1e37ba76d47280fa867c3863aa6d22376535637a/compiler/rustc_metadata/src/rmeta/encoder.rs#L2066-L2067</a></p>",
        "id": 215242794,
        "sender_full_name": "bjorn3",
        "timestamp": 1604234666
    },
    {
        "content": "<p>Golddust - many thanks!</p>",
        "id": 215242808,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604234707
    },
    {
        "content": "<p>Given it's a fixed size I think putting it after the metadata version and before the rust version makes sense.</p>",
        "id": 215243629,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604236100
    },
    {
        "content": "<p>Hmm, but that wouldn't be good for backward compatibility. Maybe after is better given that version is in a predictable location.</p>",
        "id": 215243656,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604236184
    },
    {
        "content": "<p>You could keep supporting the error path for the current metadata version though.</p>",
        "id": 215243699,
        "sender_full_name": "bjorn3",
        "timestamp": 1604236210
    },
    {
        "content": "<p>That would only give a bad error when trying to use crates compiled with a newer rustc version, but keeps the nice error when doing it the opposite way.</p>",
        "id": 215243715,
        "sender_full_name": "bjorn3",
        "timestamp": 1604236290
    },
    {
        "content": "<p>It isn't common to mix both as cargo includes the rustc version in the <code>-Cextra-filename</code>.</p>",
        "id": 215243752,
        "sender_full_name": "bjorn3",
        "timestamp": 1604236324
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ffe52882ed79be67344dd6085559e308241e7f60/compiler/rustc_metadata/src/locator.rs#L789\">https://github.com/rust-lang/rust/blob/ffe52882ed79be67344dd6085559e308241e7f60/compiler/rustc_metadata/src/locator.rs#L789</a></p>\n<p>It still gives a reasonable error when the metadata version is different.</p>",
        "id": 215243784,
        "sender_full_name": "bjorn3",
        "timestamp": 1604236426
    },
    {
        "content": "<p>Adding it in after the rust version turned out to be pretty neat. Now .rlib and .rmeta all seem to be up to data when I move the target dir away and copy it back, but while that's nessisary it's not sufficient to figure out that there's no work to do. Those mtimes are used elsewhere...</p>",
        "id": 215254323,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604252997
    },
    {
        "content": "<p>\"old local fingerprints deps\" and \"dependency on <code>nom</code> is newer than we are\" both seem like they're triggering the cascade of rebuilds...</p>",
        "id": 215254445,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604253173
    },
    {
        "content": "<p>ok so first bit is for <a href=\"http://build.rs\">build.rs</a> files. We knew that was going to take a little work to add in.</p>",
        "id": 215254672,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604253518
    },
    {
        "content": "<p>\"is newer than we are\" is going to take a bit more thinking about - it's looking at an .rmeta file also. I'm going to sleep on this.</p>",
        "id": 215255694,
        "sender_full_name": "Giles Cope",
        "timestamp": 1604255189
    }
]