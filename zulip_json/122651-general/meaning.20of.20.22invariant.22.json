[
    {
        "content": "<blockquote>\n<p>not clear what this method's invariants are - i.e. when is the unsafe code actually not UB</p>\n</blockquote>\n<p>I feel like this isn't a proper <em>English</em> use of the word \"invariant\", but it seems consistent in the compiler circles. What does \"invariant\" mean when it doesn't mean \"something that doesn't change\"? </p>\n<p>/cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 148053515,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542733817
    },
    {
        "content": "<p><del>it means precondition</del>. it's always true (in the absence of UB), making it an invariant :P</p>",
        "id": 148053555,
        "sender_full_name": "eddyb",
        "timestamp": 1542733884
    },
    {
        "content": "<p>maybe a stretch but I think it makes sense on some level</p>",
        "id": 148053560,
        "sender_full_name": "eddyb",
        "timestamp": 1542733895
    },
    {
        "content": "<p>sometimes in computing an \"invariant\" is something you can assume to be true at all times, or at least throughout a given function/module/scope/etc</p>",
        "id": 148053628,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1542733962
    },
    {
        "content": "<p>that's more eloquent than what I said, but I agree, that's how I see it as well :D</p>",
        "id": 148053687,
        "sender_full_name": "eddyb",
        "timestamp": 1542734020
    },
    {
        "content": "<p>invariant != precondition</p>",
        "id": 148053851,
        "sender_full_name": "RalfJ",
        "timestamp": 1542734165
    },
    {
        "content": "<p>so I think \"method's precondition\" would be a better term here</p>",
        "id": 148053864,
        "sender_full_name": "RalfJ",
        "timestamp": 1542734177
    },
    {
        "content": "<p>words are hard :(</p>",
        "id": 148053874,
        "sender_full_name": "eddyb",
        "timestamp": 1542734202
    },
    {
        "content": "<p>true^^</p>",
        "id": 148053898,
        "sender_full_name": "RalfJ",
        "timestamp": 1542734235
    },
    {
        "content": "<p>to call it an invariant, you should <em>at least</em> have it both as pre- and postcondition</p>",
        "id": 148053904,
        "sender_full_name": "RalfJ",
        "timestamp": 1542734251
    },
    {
        "content": "<p>that's still stretching the term IMO, I assoicate invariants with something that several threads can rely on and that can be shared because it is true forever, but that may be just my niche^^</p>",
        "id": 148053960,
        "sender_full_name": "RalfJ",
        "timestamp": 1542734286
    },
    {
        "content": "<p>I think the combination of all this was useful, thank you.</p>",
        "id": 148054238,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542734594
    },
    {
        "content": "<p>It feels like if something is an invariant, you wouldn't actually perform a check for it, whereas I feel like pre/post conditions are actual checks in the code</p>",
        "id": 148054315,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542734664
    },
    {
        "content": "<p>e.g. an invariant of <code>&amp;str</code> is that it's UTF-8. I might use a pre/post condition to enforce that at some boundary</p>",
        "id": 148054342,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542734715
    },
    {
        "content": "<p>and if I fail to enforce an invariant, then I might open myself up to UB</p>",
        "id": 148054353,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542734747
    },
    {
        "content": "<p>yeah, violation of invariants is where you start getting into awkward bugs, UB, etc</p>",
        "id": 148054767,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1542735143
    },
    {
        "content": "<p>There is <em>one</em> particular invariant violating which is instantenous UB, the \"validity invariant\" as I call it</p>",
        "id": 148057537,
        "sender_full_name": "RalfJ",
        "timestamp": 1542738396
    },
    {
        "content": "<p>that's because the compiler knows about it</p>",
        "id": 148057549,
        "sender_full_name": "RalfJ",
        "timestamp": 1542738411
    },
    {
        "content": "<p>violating, for example, the loop invariant of your quicksort won't give you UB. So I wouldnt connect invariants and UB directly at all</p>",
        "id": 148057572,
        "sender_full_name": "RalfJ",
        "timestamp": 1542738438
    },
    {
        "content": "<p>invariants are just both useful for specification and for verification of programs</p>",
        "id": 148057575,
        "sender_full_name": "RalfJ",
        "timestamp": 1542738449
    },
    {
        "content": "<p>right, which is why I said \"<em>might</em> open myself up to UB\"</p>",
        "id": 148057780,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542738656
    },
    {
        "content": "<p>one thing to keep in mind is that all invariants, preconditions, postconditions, proof obligations, etc. are in service of a particular goal. e.g. the quicksort loop invariant is for the functional correctness of the sorting, while in rust development we typically implicitly refer to memory safety (or a particular aspect of it) as the goal. mixing these unstated contexts tends to cause confusion</p>",
        "id": 148058274,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542739119
    },
    {
        "content": "<blockquote>\n<p>unstated contexts tends to cause confusion</p>\n</blockquote>\n<p>Sounds true in every case <span class=\"emoji emoji-1f638\" title=\"smile cat\">:smile_cat:</span></p>",
        "id": 148058607,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542739460
    },
    {
        "content": "<p>we also often rely on functional correctness for memory safety, so these contexts aren't even all that separate^^</p>",
        "id": 148059020,
        "sender_full_name": "RalfJ",
        "timestamp": 1542739911
    }
]