[
    {
        "content": "<p>My crate SNAFU works by creating structs based on the name of enum variants. In the next semver incompatible release, I plan on changing the exact formulation of this. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// 0.6 creates</span>\n<span class=\"n\">Foo</span><span class=\"w\"></span>\n\n<span class=\"c1\">// 0.7 creates</span>\n<span class=\"n\">FooSuffix</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I’d like to help out the 150+ crates that depend on me upgrade to the new version, and I’m looking for suggestions on how to do so. </p>\n<p>I already have a script that downloads these dependencies, patches in my local version of the crate and attempts to build it. I can easily add in more steps, but not sure what would be most effective.</p>",
        "id": 236087643,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619379091
    },
    {
        "content": "<p>Once I have something that gets all/most of the changes to get a crate to compile, then there’s also the best way of getting it to the downstream maintainers.</p>",
        "id": 236087881,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619379322
    },
    {
        "content": "<p>What about a <code>0.6.n+1</code> release which emits <code>FooSuffix</code> and then a <code>#[deprecated(...)] use FooSuffix as Foo;</code>? That way all they'd have to do is follow the deprecation warnings (and in an ideal world, a <code>#[deprecated]</code> <code>use</code> alias would be understood by <code>rustc</code> to emit an appropriate fix, that a tool could then even parse and automatically apply).</p>",
        "id": 236090115,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619381591
    },
    {
        "content": "<blockquote>\n<p>in an ideal world, a #[deprecated] use alias would be understood by rustc to emit an appropriate fix</p>\n</blockquote>\n<p>if rustc doesn't do this already, can you open an issue for it?</p>",
        "id": 236090831,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619382433
    },
    {
        "content": "<blockquote>\n<p>all they'd have to do is</p>\n</blockquote>\n<p>The downside here is, without a very automated process, any friction can result in loss of users. That’s ultimately a motivation behind my efforts. </p>\n<p>If rustfix can handle auto fixing a deprecation notice, that could be a great way for me to automate that part of the process though.</p>",
        "id": 236095095,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619386051
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/the-compiler/an-attribute-for-deprecation.html\">https://doc.rust-lang.org/edition-guide/rust-2018/the-compiler/an-attribute-for-deprecation.html</a></p>",
        "id": 236095425,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619386438
    },
    {
        "content": "<p>Doesn’t look like it’s conducive to machine fixing. Just a free form string</p>",
        "id": 236095518,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619386501
    },
    {
        "content": "<p>And it doesn’t warn about use statements it seems <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=62d0b59a713f200a39a7773268b7fbf1\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=62d0b59a713f200a39a7773268b7fbf1</a></p>",
        "id": 236095745,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619386730
    },
    {
        "content": "<p>Which is fine; I can hack my macro to generate both structs at the same time.</p>",
        "id": 236095783,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619386802
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustfix/issues/151\">https://github.com/rust-lang/rustfix/issues/151</a></p>",
        "id": 236096248,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619387301
    },
    {
        "content": "<p>it would be really nice if <code>#[deprecated(renamed = ...)]</code> or something were a thing</p>",
        "id": 236113639,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619405800
    },
    {
        "content": "<p>and it would work with rustfix</p>",
        "id": 236113640,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619405805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/122651-general/topic/Updating.20reverse.20dependencies.20using.20code.20modification/near/236113639\">said</a>:</p>\n<blockquote>\n<p>it would be really nice if <code>#[deprecated(renamed = ...)]</code> or something were a thing</p>\n</blockquote>\n<p>Yeah <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> – If crate maintainers prefer to define and offer their own migration rather than the <code>#[deprecated]</code> official mechanism, then it means such mechanism does not fulfill its role.</p>\n<hr>\n<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/Updating.20reverse.20dependencies.20using.20code.20modification/near/236095745\">said</a>:</p>\n<blockquote>\n<p>And it doesn’t warn about use statements it seems <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=62d0b59a713f200a39a7773268b7fbf1\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=62d0b59a713f200a39a7773268b7fbf1</a></p>\n</blockquote>\n<p>That's so disappointing; <code>#[deprecate]</code>-ing a <code>use</code> statement would in and of itself already allow Rust to understand that a (deprecated) <em>renaming</em> was taking place <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>\n<p>The issue with re-emitting the definition is that the copy-pasted type will be incompatible with the original one. I suggest using a <code>type</code> (and a <code>const</code> if unit struct) to emulate the <code>use</code>: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ac1e0d070ba838247ac3587ca23bbaed\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ac1e0d070ba838247ac3587ca23bbaed</a></p>\n<hr>\n<p>I suggest the following: let's use <code>#[deprecated]</code> with a special hard-coded syntax, and define a general-purpose tool that will parse it and perform the transformations based on that. That could serve as a PoC / polyfill while suggesting the actual <code>#[deprecated(renamed…)]</code> feature be implemented and while waiting for that.</p>",
        "id": 236159262,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619437679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Updating.20reverse.20dependencies.20using.20code.20modification/near/236090831\">said</a>:</p>\n<blockquote>\n<p>if rustc doesn't [emit an appropriate fix for deprecated <code>use</code>s] already, can you open an issue for it?</p>\n</blockquote>\n<p>Yeah, good idea, let's go with a gh issue to begin with <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/84584\">https://github.com/rust-lang/rust/issues/84584</a></li>\n</ul>",
        "id": 236159443,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619437770
    },
    {
        "content": "<blockquote>\n<p>and define a general-purpose tool </p>\n</blockquote>\n<p>Well, I've got a highly-special-purpose tool that's hooking on the \"type not found\" error messages and then doing some MaGiC string manipulation, so it's not blocking me yet :-)</p>",
        "id": 236175458,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1619444380
    }
]