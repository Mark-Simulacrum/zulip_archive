[
    {
        "content": "<p>So a thought has crossed my mind a few times for a while now, and figured I'd finally open a thread about it.</p>\n<p>So, for ICEs, there's <a href=\"https://github.com/rust-lang/glacier\">glacier</a>, which will automatically detect when they no longer ICE. But what about a more generalized collection of tests, to better detect/track changes to behavior. I'm just thinking of all the times where I've fixed a bug and then later tests just get marked as <code>needs-test</code> because they were fixed (sometimes a while after).</p>",
        "id": 260826162,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636477140
    },
    {
        "content": "<p>It is a bit more difficult. For ICEs, it's easy to track ICE -&gt; no ICE. For tests, we might expect a fail -&gt; pass, a diagnostic change, or maybe even just a fail -&gt; fail (not necessarily a fix, but just a change in why things fail)</p>",
        "id": 260826356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636477239
    },
    {
        "content": "<p>one option is to write the test before fixing the bug - that seems pretty easy for anyone to do even if they don't have a lot of knowledge about the compiler</p>",
        "id": 260826666,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636477377
    },
    {
        "content": "<p>not sure how to track that in the issue though</p>",
        "id": 260826706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636477394
    },
    {
        "content": "<p>adding <code>ignore-test</code> seems prone to failure</p>",
        "id": 260826736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636477405
    },
    {
        "content": "<p>Yeah, that's one option I considered</p>",
        "id": 260828948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636478295
    },
    {
        "content": "<p>Ideally we <em>don't</em> ignore the test, but actually track the changes there</p>",
        "id": 260829003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636478319
    },
    {
        "content": "<p>I mean, I guess theoretically, the tests could just go in a folder and be marked <code>// check-fail</code> or such</p>",
        "id": 260829108,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636478384
    },
    {
        "content": "<p>and commented that \"This test should pass\" or \"This test should fail with X error\"</p>",
        "id": 260829196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636478410
    },
    {
        "content": "<p>etc.</p>",
        "id": 260829201,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636478412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/122651-general/topic/Tests.20from.20open.20issues/near/260829108\">said</a>:</p>\n<blockquote>\n<p>I mean, I guess theoretically, the tests could just go in a folder and be marked <code>// check-fail</code> or such</p>\n</blockquote>\n<p>ooh I like this idea</p>",
        "id": 260830384,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636478972
    },
    {
        "content": "<p>and that makes it impossible to forget to update it; at very least you wouldn't end up with duplicate tests</p>",
        "id": 260830415,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636478988
    },
    {
        "content": "<p>I think we can do this even without changes to compile-test, just add ERROR annotations like normal and a comment at the top that it can be changed to <code>// check-pass</code> eventually</p>",
        "id": 260830556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636479032
    },
    {
        "content": "<p>I think it might be nice(r) to make things kinds of tests most \"drop-in\", at least in the sense of not having to add the ERROR annotations. My reasoning is that it lowers the \"barrier of entry\" to adding these tests and the maintenance burden of the tests in general, which is especially important if the intent is more accurately track them.</p>",
        "id": 260831229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636479365
    },
    {
        "content": "<p>hmm, do you find you have to update the annotations a lot? I haven't found that to be a giant burden, but that might just be because I mostly work on rustdoc</p>",
        "id": 260831365,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636479458
    },
    {
        "content": "<p>I don't think the annotations are a ton of work compared to actually writing the test and making sure it's valid</p>",
        "id": 260831395,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636479478
    },
    {
        "content": "<p>(and it makes it less likely someone will <code>--bless</code> it without actually looking at the changes)</p>",
        "id": 260831493,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636479525
    },
    {
        "content": "<p>Not a terrible point. I suppose it's always possible to later add an annotation or logic to exclude these types of tests</p>",
        "id": 260858708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636491022
    },
    {
        "content": "<p>err, exclude requiring ERROR annotations</p>",
        "id": 260858744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636491041
    },
    {
        "content": "<p>If I get some time anytime soon, I might write a draft implementation and a MCP. I do think this could be useful.</p>",
        "id": 260859592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636491449
    },
    {
        "content": "<p>I do think the question of \"Do these tests live in the rustc test suite or elsewhere?\" is a valid question</p>",
        "id": 260859770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636491521
    }
]