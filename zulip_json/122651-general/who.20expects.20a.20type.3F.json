[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> for the \"expected type foo found bar\" style messages, who is \"expecting\"? Can we change that to explicitly say what expects it?</p>",
        "id": 197313129,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589305841
    },
    {
        "content": "<p>Updating</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:10\n  |\n4 |     demo(&quot;hi&quot;);\n  |          ^^^^ expected `i32`, found `&amp;str`\n</code></pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:10\n  |\n4 |     demo(&quot;hi&quot;);\n  |          ^^^^ the function `demo` expected `i32`, found `&amp;str`\n</code></pre></div>\n\n\n<p>maybe even </p>\n<blockquote>\n<p><code> expected this argument to be a `i32`, but it is `&amp;str` </code></p>\n</blockquote>",
        "id": 197313369,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589305954
    },
    {
        "content": "<p>I guess this does occur sometimes:</p>\n<div class=\"codehilite\"><pre><span></span><code>--- expected `f64` because of return type\n</code></pre></div>",
        "id": 197316350,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589307289
    },
    {
        "content": "<p>some cases do highlight the site of expectation like</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:5:18\n  |\n5 |     let b: i32 = &quot;123&quot;;\n  |            ---   ^^^^^ expected `i32`, found `&amp;str`\n  |            |\n  |            expected due to this\n</code></pre></div>",
        "id": 197317030,
        "sender_full_name": "kennytm",
        "timestamp": 1589307612
    },
    {
        "content": "<p>though most of the time i do find E0308 confusing because it is not very clear whether the marked expression is the \"expected\" or the \"found\"</p>",
        "id": 197317185,
        "sender_full_name": "kennytm",
        "timestamp": 1589307695
    },
    {
        "content": "<p>My gut tells me that if we say what / why it's expected (more frequently, perhaps), then it would be more quickly digested. I'm pretty sure I've trained my brain to just ignore the \"expected\" / \"found\" text.</p>",
        "id": 197317271,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589307726
    },
    {
        "content": "<p>The pointed element should always be the found one</p>",
        "id": 197322464,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1589310087
    },
    {
        "content": "<p>The problem we have is that these cases usually come from obligations</p>",
        "id": 197322509,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1589310103
    },
    {
        "content": "<p>I've been working in this but the cases that are left are becoming harder and harder</p>",
        "id": 197322601,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1589310132
    },
    {
        "content": "<p>And sadly I'm many cases all I can do is reconstruct what went wrong because we drop a lot of info during typeck</p>",
        "id": 197322668,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1589310162
    },
    {
        "content": "<p>Keeping that info around would balloon mem usage, which is a no-no</p>",
        "id": 197322699,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1589310179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> I wonder if we've explored e.g. re-running typeck in \"collection\" mode if it detects an error at first to gather better explanations</p>",
        "id": 197326339,
        "sender_full_name": "simulacrum",
        "timestamp": 1589311729
    },
    {
        "content": "<p>I'd guess it'd be pretty hard to make that work well? But I don't think I've seen PRs in that direction at all</p>",
        "id": 197326391,
        "sender_full_name": "simulacrum",
        "timestamp": 1589311753
    },
    {
        "content": "<p>I've looked into it, but I doubt well ever get good at global analysis as things stand. Anything inside a given FnCtxt has potential</p>",
        "id": 197327412,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1589312250
    }
]