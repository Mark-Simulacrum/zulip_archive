[
    {
        "content": "<p>Hello. This is my first time in building the rust codebase, I'm trying to work on <a href=\"https://github.com/rust-lang/rust/issues/75080\">this #75080</a> issue, I'm using the command <br>\n<code>python x.py test src/tools/linkchecker library/core</code><br>\nwhich would just need to generate documentation for <code>core</code>, but it would compile the whole <code>rustc_*</code> libraries which takes a lot of time.</p>\n<p>Is there anyway through <code>config.toml</code> to fix it?<br>\nSorry if its a small issue, and thanks for the help</p>",
        "id": 208050950,
        "sender_full_name": "Amjad Alsharafi",
        "timestamp": 1598414454
    },
    {
        "content": "<p>Historically I did that by using <code>--keep-stage 0</code> after the first build -- that way it kept using the existing compiler but recompiled the libraries (core+std+etc) that I'd changed.</p>\n<p>Not sure if there's a better way these days, <span class=\"user-mention\" data-user-id=\"333789\">@Amjad Alsharafi</span>.</p>",
        "id": 208052402,
        "sender_full_name": "scottmcm",
        "timestamp": 1598416809
    },
    {
        "content": "<p>Actually stage 0 is not being compiled again, just stage 1, I used <code>--keep-stage 1</code> but it did not change anything in terms of speed. <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 208053539,
        "sender_full_name": "Amjad Alsharafi",
        "timestamp": 1598418757
    },
    {
        "content": "<p>you are just changing doc, use <code>./x.py doc</code> instead.</p>",
        "id": 208053572,
        "sender_full_name": "lzutao",
        "timestamp": 1598418839
    },
    {
        "content": "<p>And use <code>x.py test src/tools/linkchecker</code> after the doc command succeeded.</p>",
        "id": 208053623,
        "sender_full_name": "lzutao",
        "timestamp": 1598418876
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> , actually <code>./x.py doc</code> also tell the errors as if I ran <code>./x.py test src/tools/linkchecker</code>. So its not needed maybe?</p>",
        "id": 208053906,
        "sender_full_name": "Amjad Alsharafi",
        "timestamp": 1598419366
    },
    {
        "content": "<p>sometimes rustdoc generates broken links, linkchecker will find them.</p>",
        "id": 208053977,
        "sender_full_name": "lzutao",
        "timestamp": 1598419500
    },
    {
        "content": "<p><code>./x.py doc library/std</code> should only take a few seconds to run with small changes, and should report intra-doc link errors.  <code>./x.py test src/tools/linkchecker</code> has to do substantially more work (it has to build <em>all</em> documentation, plus building the compiler twice), and I would recommend only running it as the last step. If you need to run it multiple times (such as after making a small doc change), then on subsequent runs you can run <code>./x.py test src/tools/linkchecker --keep-stage=0 --keep-stage=1</code>, and that should only take a few seconds.</p>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> , was there a particular reason the instructions for updating intra-doc links recommend running <code>x.py test library/std</code> (instead of <code>x.py doc</code>)? <code>x.py test</code> doesn't build docs, so it won't catch any documentation issues or intra-doc link errors. For documentation, <code>x.py test --doc library/std</code> should only be necessary if modifying examples.</p>",
        "id": 208061199,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598427684
    },
    {
        "content": "<p>It was probably a typo, I meant to say run the linkchecker</p>",
        "id": 208080415,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598442118
    },
    {
        "content": "<p>The instructions are <code>./x.py test src/tools/linkchecker library/std</code> which seems right to me</p>",
        "id": 208080516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598442196
    },
    {
        "content": "<p>I could mention <code>--keep-stage</code> but there are a lot of new contributors on the issue and they were getting confused because it doesn't work the very first time you build</p>",
        "id": 208080554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598442233
    },
    {
        "content": "<p>saying to use <code>x.py doc library/std</code> first sounds useful though, I'll add that</p>",
        "id": 208084180,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598444726
    },
    {
        "content": "<p>how does this look?</p>\n<blockquote>\n<p>Run <code>x.py doc library/std</code>. This should <code>warn(broken_intra_doc_links)</code> by default. You can set those warnings to a hard error in <code>config.toml</code> with <code>[rust] deny-warnings = true</code>. If you are modifying links in <code>core</code> or <code>alloc</code>, use <code>library/core</code> or <code>library/alloc</code> instead. Fix any warnings that appear. Once you are ready to make a PR, run <code>./x.py test src/tools/linkchecker library/std</code>, which will make sure there are no broken links. This will compile all of rustc from source, so you may want to run it in the background while working on the links.</p>\n</blockquote>",
        "id": 208084351,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598444853
    },
    {
        "content": "<p>LGTM</p>",
        "id": 208094051,
        "sender_full_name": "Amjad Alsharafi",
        "timestamp": 1598450244
    },
    {
        "content": "<p>Looks better.  I'm not sure I would really recommend running <code>test library/std</code> for just doc updates, but I guess it's not a bad thing (it just takes a little extra time, maybe 1 to 2 minutes).</p>\n<p>I would suggest running tidy, just to check for things like trailing whitespace or whatnot. </p>\n<p>BTW, thanks for working on all this! It's quite the flood of changes, so I imagine it's taking a fair bit of time.  I imagine a lot of people will be very happy when intra-doc links are stable.</p>",
        "id": 208115994,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598459855
    },
    {
        "content": "<p>ooh tidy is a good idea</p>",
        "id": 208117640,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598460684
    },
    {
        "content": "<p>no problem! it's actually gone really quickly, there's been lots of people working on it <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 208117681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598460701
    },
    {
        "content": "<p>if you look at the tracking issue the only file unclaimed is blocked on being split up :)</p>",
        "id": 208117710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598460712
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/75080\">https://github.com/rust-lang/rust/issues/75080</a></p>",
        "id": 208117728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598460722
    },
    {
        "content": "<p>and a lot of the ones currently open will be unblocked by the beta bump which fixes lots and lots of bugs</p>",
        "id": 208117844,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598460756
    },
    {
        "content": "<blockquote>\n<p>Looks better. I'm not sure I would really recommend running test library/std for just doc updates, but I guess it's not a bad thing (it just takes a little extra time, maybe 1 to 2 minutes).</p>\n</blockquote>\n<p>hmm and it does require building the stage 1 compiler ... maybe I'll just recommend letting CI catch those edge cases</p>",
        "id": 208118096,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598460883
    },
    {
        "content": "<p>ok new draft:</p>\n<blockquote>\n<p>Run <code>x.py doc library/std</code>. This should <code>warn(broken_intra_doc_links)</code> by default. Fix any warnings that appear. Once you are ready to make a PR, run <code>./x.py tidy</code>, which will run <code>rustfmt</code>.<br>\nIn case of rustdoc bugs, there may be broken links that didn't show up when you ran <code>x.py doc</code>. However, these will be caught by the test suite, so you don't have to check them locally.</p>\n</blockquote>",
        "id": 208118529,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598461083
    }
]