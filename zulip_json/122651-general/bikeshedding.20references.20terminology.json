[
    {
        "content": "<p>Currently in rust we call <code>let ptr = &amp;mut T</code> a <code>mutable reference to T</code>. the reason AFAIK is mostly because that reference is unique, the reference is the \"special\" part here.<br>\nbut in C it would be <code>a const pointer to a mutable T</code>.<br>\nthis is all fine and good until we get  to <code>let mut ptr = &amp;b</code> and <code>foo(mut ptr: &amp;T)</code>.<br>\nhow is that called? again in C that'll be a <code>mutable pointer to a const T</code> <br>\nin rust will this be called a <code>mutable reference holding a T</code>? something else?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> (guessed you might be interested in this, otherwise please ignore)</p>",
        "id": 182326508,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1575278013
    },
    {
        "content": "<p>My solution is to clearly separate the place from the type. So I don't call <code>let mut x: i32;</code> a mutable integer, it's just an i32, if the mutability needs to be pointed out then I say it's a mutable variable. Likewise &amp;T is just always a (shared) reference, and if I need to point out that a place of that type is mut, I word it so that the \"mutable\" is not adjacent to the type description but associated with the place that's mutable.</p>",
        "id": 182333944,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575284013
    },
    {
        "content": "<p>I think similarly. Above <code>ptr</code> is just a place, containing an exclusive reference to a <code>T</code>. Whether the place is read-only or read-write is orthogonal to what it contains.</p>",
        "id": 182334204,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575284249
    }
]