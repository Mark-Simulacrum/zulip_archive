[
    {
        "content": "<p>The crt is normally responsible for fixing up the GOT. You probably want to use the PIE relocation model instead of the PIC relocation model by the way. You may also need ti disable relro. When compiling the object files, the compiler doesn't know if non-hidden symbols are defined in other dynamic shared objects (dsos, either dynamic librarys or the executable). For this reason it has to introduce some kind of indirection. This can either be a PLT or GOT. In case of a PLT a relative call to a PLT entry is emitted. The linker may be able to replace this with a direct relative call for PIE executables. With a GOT, the address of of the function is loaded from the GOT entry and then an indirect call is performed. The linker can't remove the GOT load. When relro is enabled, the GOT is used as the main advantage of the PLT (lazy resolving of symbols) isn't possible as the GOT becomes read-only after the dynamic linker is done. For this reason the PLT would only slow things down with relro.</p>",
        "id": 272174915,
        "sender_full_name": "bjorn3",
        "timestamp": 1645043898
    },
    {
        "content": "<p>this is the code musl uses for resolving the GOT by the way: <a href=\"https://git.musl-libc.org/cgit/musl/tree/ldso/dlstart.c#n128\">https://git.musl-libc.org/cgit/musl/tree/ldso/dlstart.c#n128</a></p>",
        "id": 272175278,
        "sender_full_name": "bjorn3",
        "timestamp": 1645044097
    },
    {
        "content": "<p>First of all, thank you for your response and for your time. I will take a look in depth at what you wrote tomorrow. My end goal is to  eliminate the GOT/PLT in my static PIE binary/payload. I will try to disable relro when I get back to it (:</p>",
        "id": 272187185,
        "sender_full_name": "AF",
        "timestamp": 1645049779
    },
    {
        "content": "<p>Hi it seems that I was already compiling PIE... And yet it puts a layer of indirection in my binary.... <br>\nHere is an example of an indirect call that happens from my rust code. <br>\nHere is how I build:<br>\n<a href=\"/user_uploads/4715/rF5ZjzvTo6fuZ2ExI4OWFKIk/image.png\">image.png</a><br>\nHere is the code that crashes:<br>\n<a href=\"/user_uploads/4715/q6Fp9lbAmQG2DAH6fi2-SiPp/image.png\">image.png</a><br>\nHere is the assembly: (As you can see on address 3d8a it makes an indirect call to memcpy due to <code>ptr::copy</code> which is already statically in the binary so there is not need for indirect call but relative call)<br>\n<a href=\"/user_uploads/4715/-4anhfPVWc2ptH03iP1YenPy/image.png\">ASSEMBLY</a> <br>\nHere is the decompilation (It shows a call to an absolute address... WTF?):<br>\n<a href=\"/user_uploads/4715/g4bU8m8o_n9aQUrPjIsoV3kj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rF5ZjzvTo6fuZ2ExI4OWFKIk/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/rF5ZjzvTo6fuZ2ExI4OWFKIk/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/q6Fp9lbAmQG2DAH6fi2-SiPp/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/q6Fp9lbAmQG2DAH6fi2-SiPp/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-4anhfPVWc2ptH03iP1YenPy/image.png\" title=\"ASSEMBLY\"><img src=\"/user_uploads/4715/-4anhfPVWc2ptH03iP1YenPy/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/g4bU8m8o_n9aQUrPjIsoV3kj/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/g4bU8m8o_n9aQUrPjIsoV3kj/image.png\"></a></div>",
        "id": 273331216,
        "sender_full_name": "AF",
        "timestamp": 1645869744
    },
    {
        "content": "<p>Could you try adding <code>-Zbuild-std=core</code> (or <code>-Zbuild-std=std</code> if you need libstd) to ensure the standard library is also compiled with PIE?</p>",
        "id": 273331694,
        "sender_full_name": "bjorn3",
        "timestamp": 1645870472
    },
    {
        "content": "<p>But its not the standard library... The problem is in the compiler builtin</p>",
        "id": 273331728,
        "sender_full_name": "AF",
        "timestamp": 1645870557
    },
    {
        "content": "<p>Here is ptr::read<br>\n<a href=\"/user_uploads/4715/8XxXCE_qafPkLCnE1XLe64QP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/8XxXCE_qafPkLCnE1XLe64QP/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/8XxXCE_qafPkLCnE1XLe64QP/image.png\"></a></div>",
        "id": 273331783,
        "sender_full_name": "AF",
        "timestamp": 1645870612
    },
    {
        "content": "<p>How can I make the call to memcpy be called in a relative way?</p>",
        "id": 273331793,
        "sender_full_name": "AF",
        "timestamp": 1645870639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/GOT.20in.20static.20pic.20binary/near/273331694\">said</a>:</p>\n<blockquote>\n<p>Could you try adding <code>-Zbuild-std=core</code> (or <code>-Zbuild-std=std</code> if you need libstd) to ensure the standard library is also compiled with PIE?</p>\n</blockquote>\n<p>Would this work:?</p>",
        "id": 273331803,
        "sender_full_name": "AF",
        "timestamp": 1645870672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455787\">AF</span> <a href=\"#narrow/stream/122651-general/topic/GOT.20in.20static.20pic.20binary/near/273331728\">said</a>:</p>\n<blockquote>\n<p>But its not the standard library... The problem is in the compiler builtin</p>\n</blockquote>\n<p>The call is part of the standard library.</p>",
        "id": 273332122,
        "sender_full_name": "bjorn3",
        "timestamp": 1645871161
    },
    {
        "content": "<p>So if I build this with link-arg=-nostartfiles -C link-arg=-nostdlib â€” it will work?</p>",
        "id": 273333142,
        "sender_full_name": "AF",
        "timestamp": 1645872477
    },
    {
        "content": "<p>The <code>-Clink-arg</code>s don't matter. The <code>-Crelocation-model=pie</code> may matter.</p>",
        "id": 273333556,
        "sender_full_name": "bjorn3",
        "timestamp": 1645873062
    },
    {
        "content": "<p>I get <code>duplicate lang item in crate `core` (which `alloc` depends on): `mul_assign`.</code><br>\nAny many other like this one when I try to compile core</p>",
        "id": 273339729,
        "sender_full_name": "AF",
        "timestamp": 1645880813
    },
    {
        "content": "<p>Did you use <code>-Zbuild-std=core</code> when compiling your project to compile libcore?</p>",
        "id": 273339801,
        "sender_full_name": "bjorn3",
        "timestamp": 1645880906
    },
    {
        "content": "<p>Yes</p>",
        "id": 273339820,
        "sender_full_name": "AF",
        "timestamp": 1645880987
    },
    {
        "content": "<p>So you did</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'RUSTFLAGS'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'-C relocation-model=pie -C link-arg=-nostartfiles -C link-arg=-nostdlib -C link-arg=-static -C link-arg=-T./shellcode.ld'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'cargo +nightly build -Zbuild-std=core --bin shellcode --release --verbose --target </span><span class=\"si\">{</span><span class=\"n\">host_target</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>  <span class=\"c1\">#</span>\n</code></pre></div>\n<p>?</p>",
        "id": 273339869,
        "sender_full_name": "bjorn3",
        "timestamp": 1645881012
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'RUSTFLAGS'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'-C relocation-model=pie -C link-arg=-nostartfiles -C link-arg=-nostdlib -C link-arg=-static -C link-arg=-T./shellcode.ld'</span> <span class=\"c1\"># Used to be pie -C target-feature=+crt-static -L/usr/lib/x86_64-linux-musl</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'cargo +nightly build --bin shellcode --release --verbose -Zbuild-std=core --target </span><span class=\"si\">{</span><span class=\"n\">host_target</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 273339872,
        "sender_full_name": "AF",
        "timestamp": 1645881020
    },
    {
        "content": "<p>Huh</p>",
        "id": 273339878,
        "sender_full_name": "bjorn3",
        "timestamp": 1645881034
    },
    {
        "content": "<p>One sec let me send a gist</p>",
        "id": 273339948,
        "sender_full_name": "AF",
        "timestamp": 1645881135
    },
    {
        "content": "<p><a href=\"https://gist.github.com/AsafFisher/61d0bd57a167c96572701421a31a1fcc\">https://gist.github.com/AsafFisher/61d0bd57a167c96572701421a31a1fcc</a></p>",
        "id": 273340155,
        "sender_full_name": "AF",
        "timestamp": 1645881454
    },
    {
        "content": "<p>Managed to solve it by compiling build-std=core,alloc</p>",
        "id": 273340296,
        "sender_full_name": "AF",
        "timestamp": 1645881643
    },
    {
        "content": "<p>Now it tells me multiple rmeta candidates for <code>compiler_builtins</code> found</p>",
        "id": 273340302,
        "sender_full_name": "AF",
        "timestamp": 1645881659
    },
    {
        "content": "<p>Oh managed to compile it when I removed the explicit requirement in the cargo toml for compiler_builtins... Now it compiles... I will check the final binary and see if it contains absolute calls (:</p>",
        "id": 273340449,
        "sender_full_name": "AF",
        "timestamp": 1645881854
    },
    {
        "content": "<p>Something weird is happning<br>\n<a href=\"/user_uploads/4715/HFxcxl5uPLZSEkTwPI4JWu7r/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/HFxcxl5uPLZSEkTwPI4JWu7r/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/HFxcxl5uPLZSEkTwPI4JWu7r/image.png\"></a></div>",
        "id": 273340925,
        "sender_full_name": "AF",
        "timestamp": 1645882409
    },
    {
        "content": "<p>And the worst part is that it does not lead to the memmove function even if the binary is loaded on the correct fixed position...<br>\nMeaning,  <code>_memmove</code> does not contain the address of the <code>memmove</code> function! that has to be a bug</p>",
        "id": 273341341,
        "sender_full_name": "AF",
        "timestamp": 1645882972
    },
    {
        "content": "<p>Hi I am going to bump it (:</p>",
        "id": 273363815,
        "sender_full_name": "AF",
        "timestamp": 1645910872
    },
    {
        "content": "<p>If there is no answer Iâ€™ll dive into it my self but I donâ€™t want to do so yet</p>",
        "id": 273363861,
        "sender_full_name": "AF",
        "timestamp": 1645910908
    },
    {
        "content": "<p>I don't know what the issue is unfortunately.</p>",
        "id": 273366270,
        "sender_full_name": "bjorn3",
        "timestamp": 1645913963
    },
    {
        "content": "<p>Btw I looked at the elf again and it seems like when I compile it it does not include memcpy statically<br>\n<a href=\"/user_uploads/4715/yRcepzpEuPnUexG56dUHl6uB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/yRcepzpEuPnUexG56dUHl6uB/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/yRcepzpEuPnUexG56dUHl6uB/image.png\"></a></div>",
        "id": 273415452,
        "sender_full_name": "AF",
        "timestamp": 1645983236
    }
]