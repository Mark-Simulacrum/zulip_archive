[
    {
        "content": "<p>So I'm looking at <a href=\"https://github.com/rust-lang/rust/issues/62397\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62397\">https://github.com/rust-lang/rust/issues/62397</a></p>",
        "id": 169717970,
        "sender_full_name": "Jethro",
        "timestamp": 1562341173
    },
    {
        "content": "<p>I believe the only remaining use of <code>uninitialized</code> in the SGX target is this:</p>\n<div class=\"codehilite\"><pre><span></span>fn rdrand64() -&gt; u64 {\n    unsafe {\n        let mut ret: u64 = crate::mem::uninitialized();\n        for _ in 0..10 {\n            if crate::arch::x86_64::_rdrand64_step(&amp;mut ret) == 1 {\n                return ret;\n            }\n        }\n        rtabort!(&quot;Failed to obtain random data&quot;);\n    }\n}\n</pre></div>",
        "id": 169717983,
        "sender_full_name": "Jethro",
        "timestamp": 1562341199
    },
    {
        "content": "<p>now this is interesting because if I understand correctly, just having a <code>&amp;mut</code> to uninitialized memory is UB</p>",
        "id": 169718051,
        "sender_full_name": "Jethro",
        "timestamp": 1562341224
    },
    {
        "content": "<p>but the intrinsic requires a <code>&amp;mut</code></p>",
        "id": 169718059,
        "sender_full_name": "Jethro",
        "timestamp": 1562341240
    },
    {
        "content": "<blockquote>\n<p>just having a &amp;mut to uninitialized memory is UB</p>\n</blockquote>\n<p>correct</p>",
        "id": 169718060,
        "sender_full_name": "centril",
        "timestamp": 1562341241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span></p>",
        "id": 169718062,
        "sender_full_name": "Jethro",
        "timestamp": 1562341250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>src/libstd/sys/sgx/mutex.rs\n71:    pub const fn uninitialized() -&gt; ReentrantMutex {\n\nsrc/libstd/sys/sgx/mod.rs\n145:            let mut ret: u64 = crate::mem::uninitialized();\n\nsrc/libstd/sys/sgx/abi/usercalls/mod.rs\n19:        let mut userbuf = alloc::User::&lt;[u8]&gt;::uninitialized(total_len);\n55:        let mut userbuf = alloc::User::&lt;[u8]&gt;::uninitialized(total_len);\n92:        let mut local = alloc::User::&lt;ByteBuffer&gt;::uninitialized();\n107:        let mut bufs = alloc::User::&lt;[ByteBuffer; 2]&gt;::uninitialized();\n127:        let mut bufs = alloc::User::&lt;[ByteBuffer; 2]&gt;::uninitialized();\n\nsrc/libstd/sys/sgx/abi/usercalls/alloc.rs\n187:    // This function returns memory that is practically uninitialized, but is\n249:    pub fn uninitialized() -&gt; Self {\n257:    pub fn uninitialized(n: usize) -&gt; Self {\n</pre></div>",
        "id": 169718085,
        "sender_full_name": "simulacrum",
        "timestamp": 1562341280
    },
    {
        "content": "<blockquote>\n<p>correct</p>\n</blockquote>\n<p>not necessarily</p>",
        "id": 169718091,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341287
    },
    {
        "content": "<p>It hasn't been decided yet.</p>",
        "id": 169718097,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  it is UB <em>until decided otherwise</em>.</p>",
        "id": 169718109,
        "sender_full_name": "centril",
        "timestamp": 1562341307
    },
    {
        "content": "<p>or \"unspecified\"; in any case it means \"don't do it\".</p>",
        "id": 169718123,
        "sender_full_name": "centril",
        "timestamp": 1562341320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> only one of those is <code>std::mem::uninitialized</code></p>",
        "id": 169718184,
        "sender_full_name": "Jethro",
        "timestamp": 1562341361
    },
    {
        "content": "<p>Yeah, looking at it the other bits are \"interesting\" and I want to know more but I don't have the time right now :)</p>",
        "id": 169718194,
        "sender_full_name": "simulacrum",
        "timestamp": 1562341378
    },
    {
        "content": "<p>I don't know if churning from u64 to MaybeUninit&lt;u64&gt; is worth it until its decided</p>",
        "id": 169718203,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341383
    },
    {
        "content": "<p>like in <span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> they are creating a reference and coercing it to a raw pointer directly</p>",
        "id": 169718293,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341448
    },
    {
        "content": "<p>so depending on what happens with <code>&amp;raw</code>, their code might not be creating a reference at all</p>",
        "id": 169718317,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> ah but am I? because as I said the intrinsic takes a <code>&amp;mut</code>, not a <code>*mut</code></p>",
        "id": 169718319,
        "sender_full_name": "Jethro",
        "timestamp": 1562341469
    },
    {
        "content": "<p>that intrinsic takes a &amp;mut ?</p>",
        "id": 169718334,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341488
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/core/arch/x86_64/fn._rdrand64_step.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/core/arch/x86_64/fn._rdrand64_step.html\">https://doc.rust-lang.org/core/arch/x86_64/fn._rdrand64_step.html</a></p>",
        "id": 169718341,
        "sender_full_name": "Jethro",
        "timestamp": 1562341496
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/src/core/up/stdsimd/crates/core_arch/src/x86_64/rdrand.rs.html#26-30\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/src/core/up/stdsimd/crates/core_arch/src/x86_64/rdrand.rs.html#26-30\">https://doc.rust-lang.org/nightly/src/core/up/stdsimd/crates/core_arch/src/x86_64/rdrand.rs.html#26-30</a></p>",
        "id": 169718352,
        "sender_full_name": "centril",
        "timestamp": 1562341508
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">_rdrand64_step</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flag</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x86_rdrand64_step</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">flag</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169718363,
        "sender_full_name": "centril",
        "timestamp": 1562341529
    },
    {
        "content": "<p>yup, you are right</p>",
        "id": 169718375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341550
    },
    {
        "content": "<p>so the question is whether the reference is invalid, which depends on whether the u64 is invalid, which we don't know</p>",
        "id": 169718428,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341573
    },
    {
        "content": "<p>the reference is dereferenceable, aligned, noalias, etc.</p>",
        "id": 169718442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> would there be any problem with doing <code>let mut ret: u64 = 0;</code> ?</p>",
        "id": 169718453,
        "sender_full_name": "centril",
        "timestamp": 1562341609
    },
    {
        "content": "<p>independently of whether the u64 is uninitialized or not, so all of that is ok from LLVM's pov</p>",
        "id": 169718455,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> not really, you're just relying on the optimizer to get rid of it then</p>",
        "id": 169718465,
        "sender_full_name": "Jethro",
        "timestamp": 1562341625
    },
    {
        "content": "<p>that's what I'd do then</p>",
        "id": 169718471,
        "sender_full_name": "centril",
        "timestamp": 1562341633
    },
    {
        "content": "<p>and possibly change the signature of that intrinsic to take a raw pointer if feasible</p>",
        "id": 169718577,
        "sender_full_name": "centril",
        "timestamp": 1562341750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  Why doesn't <code>_rdrand64_step</code> just return <code>-&gt; (u64, i32)</code>?</p>",
        "id": 169718646,
        "sender_full_name": "centril",
        "timestamp": 1562341811
    },
    {
        "content": "<p>because C doesn't have multiple return arguments</p>",
        "id": 169718662,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341838
    },
    {
        "content": "<p>because it needs to match the Intel-defined intrinsic</p>",
        "id": 169718666,
        "sender_full_name": "Jethro",
        "timestamp": 1562341841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> because it follows the C signature.</p>",
        "id": 169718668,
        "sender_full_name": "nagisa",
        "timestamp": 1562341842
    },
    {
        "content": "<p>but this function is to be called from Rust, not C... so why do we need to follow C's poor design here?</p>",
        "id": 169718717,
        "sender_full_name": "centril",
        "timestamp": 1562341890
    },
    {
        "content": "<p>Because you didn't offered to write an RFC designing 10k intrinsics, with rationale for each, etc.</p>",
        "id": 169718769,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341925
    },
    {
        "content": "<p>;)</p>",
        "id": 169718775,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341933
    },
    {
        "content": "<p>all arch intrinsics match C</p>",
        "id": 169718779,
        "sender_full_name": "simulacrum",
        "timestamp": 1562341938
    },
    {
        "content": "<p>I know they do; but to me this feels like \"reasons\"</p>",
        "id": 169718789,
        "sender_full_name": "centril",
        "timestamp": 1562341955
    },
    {
        "content": "<p>the only reason is the one i mentioned, 10k intrinsics</p>",
        "id": 169718801,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341976
    },
    {
        "content": "<p>proposing an API for a single std lib function takes months, do the math</p>",
        "id": 169718813,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562341990
    },
    {
        "content": "<p>I think over time we can definitely expose APIs over them that are better for widely used functions</p>",
        "id": 169718824,
        "sender_full_name": "simulacrum",
        "timestamp": 1562342004
    },
    {
        "content": "<p>it was either do them the Rust way, and never have any intrinsics, or shipping what C does, two years ago</p>",
        "id": 169718829,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342014
    },
    {
        "content": "<p>(and there may already be work doing that, not sure)</p>",
        "id": 169718830,
        "sender_full_name": "simulacrum",
        "timestamp": 1562342015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  but the code for this intrinsic was not machine generated?</p>",
        "id": 169718835,
        "sender_full_name": "centril",
        "timestamp": 1562342027
    },
    {
        "content": "<p>the signature is machine-verified to match the C version</p>",
        "id": 169718839,
        "sender_full_name": "Jethro",
        "timestamp": 1562342037
    },
    {
        "content": "<p>none of them are</p>",
        "id": 169718880,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342044
    },
    {
        "content": "<p>too many corner cases for machine generation</p>",
        "id": 169718891,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342057
    },
    {
        "content": "<p>we used to do that, it didn't work</p>",
        "id": 169718903,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342073
    },
    {
        "content": "<p>aha; seems strange for <code>&amp;mut</code> to be acceptable in the eyes of the machine verifier</p>",
        "id": 169718912,
        "sender_full_name": "centril",
        "timestamp": 1562342089
    },
    {
        "content": "<p>anyway, the C version here uses a pointer (obviously)</p>",
        "id": 169718928,
        "sender_full_name": "Jethro",
        "timestamp": 1562342102
    },
    {
        "content": "<p>its accepted on FFI where pointers are</p>",
        "id": 169718932,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342104
    },
    {
        "content": "<p>its ABi compatible with C</p>",
        "id": 169718938,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342112
    },
    {
        "content": "<p>so I agree it seems strange that this takes a reference</p>",
        "id": 169718939,
        "sender_full_name": "Jethro",
        "timestamp": 1562342112
    },
    {
        "content": "<p>a pointer can be null, a reference can't</p>",
        "id": 169718950,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342127
    },
    {
        "content": "<p>you can't pass this API a null pointer</p>",
        "id": 169718961,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342133
    },
    {
        "content": "<p>Maybe we didn't have <code>NonNull&lt;T&gt;</code> back then</p>",
        "id": 169718986,
        "sender_full_name": "centril",
        "timestamp": 1562342157
    },
    {
        "content": "<p>AFAICT, &amp;mut u64 is ok even if u64 is uninitialized</p>",
        "id": 169719045,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342190
    },
    {
        "content": "<p>captain hindsight: should MaybeUninit::as_mut_ptr have returned NonNull&lt;T&gt;?</p>",
        "id": 169719046,
        "sender_full_name": "Jethro",
        "timestamp": 1562342190
    },
    {
        "content": "<p>that's another wrapper you need to unwrap, what's the win ?</p>",
        "id": 169719081,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342253
    },
    {
        "content": "<p>you can always put it in a NonNull&lt;T&gt; yourself, if you need to store it somewhere where you need a niche</p>",
        "id": 169719085,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342277
    },
    {
        "content": "<p>well say the rdrand intrinsic would've taken NonNull&lt;u64&gt;, then you have to jump through hoops to call it on uninitialized memory</p>",
        "id": 169719145,
        "sender_full_name": "Jethro",
        "timestamp": 1562342312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> not if references require that the referent is allocated and valid?</p>",
        "id": 169719149,
        "sender_full_name": "centril",
        "timestamp": 1562342321
    },
    {
        "content": "<p>even if referefent is allocated and valid</p>",
        "id": 169719160,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342342
    },
    {
        "content": "<p>unwrapping NonNull is easy, creating one is \"hard\"</p>",
        "id": 169719167,
        "sender_full_name": "Jethro",
        "timestamp": 1562342354
    },
    {
        "content": "<p>depends on what it means for u64 to be valid</p>",
        "id": 169719168,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> so you are assuming instead that integers may be uninit?</p>",
        "id": 169719184,
        "sender_full_name": "centril",
        "timestamp": 1562342388
    },
    {
        "content": "<p>its an assumption a lot of code, like the above, relies on</p>",
        "id": 169719246,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342407
    },
    {
        "content": "<p>otherwise all that code would be UB</p>",
        "id": 169719252,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342417
    },
    {
        "content": "<p>we could do that, but nobody has managed to find a good argument for doing that</p>",
        "id": 169719259,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342432
    },
    {
        "content": "<p>we don't gain any optmization potential from doing so</p>",
        "id": 169719270,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342445
    },
    {
        "content": "<p>and we don't get any better tools for checking UB</p>",
        "id": 169719281,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562342461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> I have confirmed that <code>tmp = 0</code> has no negative effect on generated code.</p>",
        "id": 169719300,
        "sender_full_name": "nagisa",
        "timestamp": 1562342472
    },
    {
        "content": "<p>Even at opt-level=0</p>",
        "id": 169719370,
        "sender_full_name": "nagisa",
        "timestamp": 1562342527
    },
    {
        "content": "<blockquote>\n<p>we could do that, but nobody has managed to find a good argument for doing that</p>\n</blockquote>\n<p>wait, wasn't it you who <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71#issuecomment-460632499\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71#issuecomment-460632499\">argued *against* uninitialized integers</a>...?</p>",
        "id": 169725424,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I am very surprised to see you on <em>that</em> side of the fence now^^</p>",
        "id": 169725427,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349201
    },
    {
        "content": "<p>also notice that for the SGX snippet above, the reference question is irrelevant. it starts by creating an uninitialized integer. if that's okay by-value, it's certainly okay by-ref.</p>",
        "id": 169725442,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349233
    },
    {
        "content": "<p>but indeed I am irritated by the use of <code>&amp;mut</code> as an out-pointer here</p>",
        "id": 169725505,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349286
    },
    {
        "content": "<blockquote>\n<p>also notice that for the SGX snippet above, the reference question is irrelevant. it starts by creating an uninitialized integer. if that's okay by-value, it's certainly okay by-ref.</p>\n</blockquote>\n<p>but it doesn't need to be by value</p>",
        "id": 169725532,
        "sender_full_name": "Jethro",
        "timestamp": 1562349327
    },
    {
        "content": "<p>generally in Rust <code>fn(x: &amp;mut T)</code> is basically the same as <code>fn(x: T) -&gt; T</code> but more efficient -- in-place modification instead of pass-through. So from that perspective, the intrinsic definitely should take a raw pointer.</p>",
        "id": 169725543,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349341
    },
    {
        "content": "<p>I can use MaybeUninit</p>",
        "id": 169725544,
        "sender_full_name": "Jethro",
        "timestamp": 1562349342
    },
    {
        "content": "<p>but not without creating a ref</p>",
        "id": 169725549,
        "sender_full_name": "Jethro",
        "timestamp": 1562349352
    },
    {
        "content": "<blockquote>\n<p>I can use MaybeUninit</p>\n</blockquote>\n<p>sure</p>",
        "id": 169725550,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349352
    },
    {
        "content": "<blockquote>\n<p>but not without creating a ref</p>\n</blockquote>\n<p>because of the type of the intrinsic. gotcha.<br>\nI thought you were discussing the original code. if unintiialized integers are okay, that code is okay.</p>",
        "id": 169725599,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349378
    },
    {
        "content": "<p>no that's not my issue</p>",
        "id": 169725609,
        "sender_full_name": "Jethro",
        "timestamp": 1562349391
    },
    {
        "content": "<p>someone else in this thread might have been discussing that issue, but not me ;)</p>",
        "id": 169725617,
        "sender_full_name": "Jethro",
        "timestamp": 1562349404
    },
    {
        "content": "<blockquote>\n<p>generally in Rust fn(x: &amp;mut T) is basically the same as fn(x: T) -&gt; T but more efficient -- in-place modification instead of pass-through. So from that perspective, the intrinsic definitely should take a raw pointer.</p>\n</blockquote>\n<p>in general it isn't more efficient - LLVM is better at optimizing values, than pointer accesses across functions</p>",
        "id": 169740425,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367615
    },
    {
        "content": "<p>in rust just always prefer fn(T) -&gt; T over fn(&amp;mut T)</p>",
        "id": 169740440,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367660
    },
    {
        "content": "<p>its not only simpler,  it helps with optimizations</p>",
        "id": 169740452,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367677
    },
    {
        "content": "<p>(and readability often, IMO)</p>",
        "id": 169740462,
        "sender_full_name": "simulacrum",
        "timestamp": 1562367708
    },
    {
        "content": "<p>for the intrinsics, being able to use them to initialize invalid memory might have been useful when they were introduced to C in the early 90s</p>",
        "id": 169740464,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367713
    },
    {
        "content": "<p>right now, it kind of doesn't really matter, LLVM lowers it all to the same thing</p>",
        "id": 169740509,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367739
    },
    {
        "content": "<p>if the intrinsic can't be used to initialize invalid memory, then we'd need to change its signature</p>",
        "id": 169740517,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367766
    },
    {
        "content": "<p>ideally we'd like something in between pointer and reference</p>",
        "id": 169740534,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367831
    },
    {
        "content": "<p>not requiring validity, but guaranteeing alignment, and dereferenceable</p>",
        "id": 169740577,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367858
    },
    {
        "content": "<blockquote>\n<p>(and readability often, IMO)</p>\n</blockquote>\n<p>so you are saying a version of <code>push</code> that passes ownership through would be mroe readable? or is that one of the exceptions?</p>",
        "id": 170643508,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858614
    },
    {
        "content": "<p>I would actually say that <code>&amp;mut T</code> is frequently a more readable version of <code>T -&gt; T</code> ;)</p>",
        "id": 170643535,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858639
    },
    {
        "content": "<p>hm, you mean <code>Vec::push</code> being defined as <code>Vec::push(Self, T) -&gt; Self</code> basically?</p>",
        "id": 170643622,
        "sender_full_name": "simulacrum",
        "timestamp": 1562858697
    },
    {
        "content": "<p>that's what you basically said is more readable</p>",
        "id": 170644531,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859288
    },
    {
        "content": "<p><code>fn(T) -&gt; T</code> instead of <code>fn(&amp;mut T)</code></p>",
        "id": 170644546,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859298
    },
    {
        "content": "<p>hm, so I disagree a little</p>",
        "id": 170644665,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859368
    },
    {
        "content": "<p>I guess it depends</p>",
        "id": 170644731,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859420
    },
    {
        "content": "<p>you disagree with yourself? ;)<br>\nOr you disagree with my statement that this is a consequence of your statement?</p>",
        "id": 170645007,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859598
    },
    {
        "content": "<p>I don't know about readable, but having a <code>&amp;mut</code> to a value is more common than ownership</p>",
        "id": 170645073,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1562859621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think I sort of feel that it's different -- <code>fn(A, B) -&gt; A</code> vs. <code>fn(&amp;mut A, B)</code> and <code>fn(A) -&gt; A</code> vs. <code>fn(&amp;mut A)</code></p>",
        "id": 170645150,
        "sender_full_name": "simulacrum",
        "timestamp": 1562859687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> interesting</p>",
        "id": 170645230,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859725
    },
    {
        "content": "<p>I do feel <code>vec.push(0).push(1)</code> is more readable personally</p>",
        "id": 170646434,
        "sender_full_name": "centril",
        "timestamp": 1562860678
    },
    {
        "content": "<p>I really fancy the fluent APIs; sadly <code>push</code> doesn't return <code>&amp;mut Self</code></p>",
        "id": 170646510,
        "sender_full_name": "centril",
        "timestamp": 1562860711
    },
    {
        "content": "<p>I think things change when you \"builder\" pattern (not quite the right name)</p>",
        "id": 170646513,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860713
    },
    {
        "content": "<p>The session types idiom is particularly nice</p>",
        "id": 170646537,
        "sender_full_name": "centril",
        "timestamp": 1562860738
    },
    {
        "content": "<p>sure -- &amp;mut T is in some sense less powerful in that way</p>",
        "id": 170646599,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860781
    },
    {
        "content": "<p>well, for some T anyway</p>",
        "id": 170646607,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860791
    },
    {
        "content": "<p>I guess A -&gt; A is equivalent but A&lt;T&gt; -&gt; A&lt;U&gt; feels where T, U are zero-sized session types feels very similar</p>",
        "id": 170646680,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860820
    },
    {
        "content": "<p>(though very different from a type perspective)</p>",
        "id": 170646695,
        "sender_full_name": "simulacrum",
        "timestamp": 1562860836
    }
]