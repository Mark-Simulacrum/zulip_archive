[
    {
        "content": "<p>what I don't understand is why we think merge commits are so bad</p>",
        "id": 161002065,
        "sender_full_name": "centril",
        "timestamp": 1552835238
    },
    {
        "content": "<blockquote>\n<p>is why we think merge commits are so bad</p>\n</blockquote>\n<p>There are many blog posts comparing the two strategies. Which of them apply to the Rust project I'm not sure.</p>",
        "id": 161002201,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835496
    },
    {
        "content": "<blockquote>\n<p>what I don't understand is why we think merge commits are so bad</p>\n</blockquote>\n<p>I don't think merge commits are bad. bors does merging even when the base commit of a branch isn't the same as master and so we have merge commits in tree. But when that fails, isn't a rebase the only option? If we decided to instead merge your changes with the new master, then I don't think it could then be automatically merged into master when it changes again (but doesn't cause a conflict this time), or could it? I'm struggling to work it out in my head.</p>",
        "id": 161002207,
        "sender_full_name": "davidtwco",
        "timestamp": 1552835503
    },
    {
        "content": "<p><del>Or does it always do fast-forward merging?</del> It doesn't.</p>",
        "id": 161002252,
        "sender_full_name": "davidtwco",
        "timestamp": 1552835532
    },
    {
        "content": "<p>I think I've thoroughly confused myself.</p>",
        "id": 161002258,
        "sender_full_name": "davidtwco",
        "timestamp": 1552835553
    },
    {
        "content": "<p>Let's have eternaleye write up a document wrt. why we do the things we do ^^</p>",
        "id": 161002260,
        "sender_full_name": "centril",
        "timestamp": 1552835564
    },
    {
        "content": "<p>I do know that merge commits exists in the history which are not due to bors but in the PRs themselves</p>",
        "id": 161002276,
        "sender_full_name": "centril",
        "timestamp": 1552835622
    },
    {
        "content": "<p>For my own projects, I prefer rebasing for a cleaner (more linear) git history. I also tend to perform an interactive rebase and then execute the linter / tests <em>for every commit</em>, so the fact that I've rewritten history is moot.</p>",
        "id": 161002357,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> does that mean that all your commits can be built?</p>",
        "id": 161002426,
        "sender_full_name": "centril",
        "timestamp": 1552835850
    },
    {
        "content": "<p>In some technical sense, merge commits are better because they preserve the original history, as most people don't ensure that tests pass (or even that code compiles) for every commit, much less after rebasing</p>",
        "id": 161002429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835859
    },
    {
        "content": "<p>(I find that encourages large commits myself)</p>",
        "id": 161002433,
        "sender_full_name": "centril",
        "timestamp": 1552835880
    },
    {
        "content": "<p>Yes, in the vast majority of cases. This greatly aids with the ability to bisect.</p>",
        "id": 161002479,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835896
    },
    {
        "content": "<p>I do not, but do think it takes effort. It's like writing; editing is as equally important as the content generation.</p>",
        "id": 161002486,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835942
    },
    {
        "content": "<p>Ah; true. <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> but one could ostensibly mark commits with \"this is test-worthy\"</p>",
        "id": 161002500,
        "sender_full_name": "centril",
        "timestamp": 1552835954
    },
    {
        "content": "<p>I don't think such is applicable because you have to have knowledge of the future to do the marking.</p>",
        "id": 161002508,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552835986
    },
    {
        "content": "<p>That's <del>essentially</del> what we do now with the merge commits from bors.</p>",
        "id": 161002551,
        "sender_full_name": "davidtwco",
        "timestamp": 1552836003
    },
    {
        "content": "<p>Yep; and again that's a valid position to take. But, that's effectively the same as \"giant commits\" as now instead of \"it's in this 1000 line commit\" you have \"it's in this 1000 line merge with 3 commits, none of which compile/pass tests except the last\"</p>",
        "id": 161002576,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836070
    },
    {
        "content": "<p>Yea, was thinking of that...</p>\n<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> hmm... why not... you do a few commits that are small and then eventually you run the tests and it works, and then you do a special bisectable commit</p>",
        "id": 161002577,
        "sender_full_name": "centril",
        "timestamp": 1552836071
    },
    {
        "content": "<blockquote>\n<p>Yep; and again that's a valid position to take. But, that's effectively the same as \"giant commits\" as now instead of \"it's in this 1000 line commit\" you have \"it's in this 1000 line merge with 3 commits, none of which compile\"</p>\n</blockquote>\n<p>Those three commits can make it easier to review though. You can logically segment a 1000 line diff into three changes, each with their own messages and rationale.</p>",
        "id": 161002629,
        "sender_full_name": "davidtwco",
        "timestamp": 1552836137
    },
    {
        "content": "<blockquote>\n<p>easier to review</p>\n</blockquote>\n<p>Except that you often have to have some knowledge of the three commits forward and back because they don't stand on their own.</p>",
        "id": 161002656,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836206
    },
    {
        "content": "<p>Another thing I like about it is that taking \"snapshots\" becomes easier with many commits; less need for big amounts of ctrl+z</p>",
        "id": 161002710,
        "sender_full_name": "centril",
        "timestamp": 1552836270
    },
    {
        "content": "<blockquote>\n<p>few commits that are small and then eventually you run the tests and it works, and then you <del>do a special bisectable commit</del></p>\n</blockquote>\n<p>And then squash them to have a single commit ;-)</p>",
        "id": 161002715,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836291
    },
    {
        "content": "<p>^^</p>",
        "id": 161002725,
        "sender_full_name": "centril",
        "timestamp": 1552836319
    },
    {
        "content": "<p>Again, this fits into the editing analogy. To be clear, I do 10s of commits all the time for local development</p>",
        "id": 161002726,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I should do this more often, it could seriously improve my rust workflow</p>",
        "id": 161002729,
        "sender_full_name": "centril",
        "timestamp": 1552836360
    },
    {
        "content": "<p>I reorder, tweak, fix, etc. When I'm \"done\", I organize, squash, split into multiple PRs, etc. I switch from a mindset of good for me to \"good for the reviewer\". I'll even identify a potential reviewer and show them the unedited branch and ask how they might <strong>like</strong> to review it.</p>",
        "id": 161002774,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> sshhh :P you make me look too bad :D</p>",
        "id": 161002785,
        "sender_full_name": "centril",
        "timestamp": 1552836464
    },
    {
        "content": "<p>I do find that starting with \"too small\" commits is easier than \"too large\", but I've learned to handle both cases.</p>",
        "id": 161002786,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836479
    },
    {
        "content": "<p>Ah, nah. It's not like I do this all the time. A typo does not require such. ;-)</p>",
        "id": 161002828,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836501
    },
    {
        "content": "<p>I like that approach. It's what I try to do, I'm mostly playing devil's advocate w/r/t merge commits.</p>",
        "id": 161002829,
        "sender_full_name": "davidtwco",
        "timestamp": 1552836502
    },
    {
        "content": "<p>I'm going to split this off into a topic or two since it's pretty unrelated to the original policy discussion.</p>",
        "id": 161002832,
        "sender_full_name": "davidtwco",
        "timestamp": 1552836536
    },
    {
        "content": "<p>I'm a big fan of editing {Stack Overflow, Zulip chats, git commit history} to help future people <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 161002894,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836606
    },
    {
        "content": "<p>I'd like it if Zulip said \"this was forked from ...\" so there's more context to the initial messages though.</p>",
        "id": 161002907,
        "sender_full_name": "davidtwco",
        "timestamp": 1552836659
    },
    {
        "content": "<p>oh it doesn't? (PS: time for a new topic)</p>",
        "id": 161002918,
        "sender_full_name": "centril",
        "timestamp": 1552836679
    },
    {
        "content": "<p>(in <code>zulip</code>)</p>",
        "id": 161002920,
        "sender_full_name": "centril",
        "timestamp": 1552836690
    },
    {
        "content": "<blockquote>\n<p>(in <code>zulip</code>)</p>\n</blockquote>\n<p>Can't move between streams. This discussion about forking discussions does make sense to fork, but then it'll start with a message that says \"I'm going to fork this\", which is even more confusing.</p>",
        "id": 161002967,
        "sender_full_name": "davidtwco",
        "timestamp": 1552836727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> how many levels of meta is that?</p>",
        "id": 161002983,
        "sender_full_name": "centril",
        "timestamp": 1552836789
    },
    {
        "content": "<p>Way too many.</p>",
        "id": 161002985,
        "sender_full_name": "davidtwco",
        "timestamp": 1552836797
    },
    {
        "content": "<p>btw backporting merge commits is way more painful than it needs to be</p>",
        "id": 161002987,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1552836809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> even the bors merge commits?</p>",
        "id": 161003086,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836928
    },
    {
        "content": "<p>we don't usually backport those :P</p>",
        "id": 161003093,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1552836949
    },
    {
        "content": "<p>most of the beta branch is just cherry-picked commits</p>",
        "id": 161003145,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1552836981
    },
    {
        "content": "<p>It's just the original authors commit(s) then?</p>",
        "id": 161003153,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552836989
    },
    {
        "content": "<p>yep</p>",
        "id": 161003154,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1552836994
    },
    {
        "content": "<p>for example <a href=\"https://github.com/rust-lang/rust/pull/59235\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59235\">https://github.com/rust-lang/rust/pull/59235</a></p>",
        "id": 161003160,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1552837015
    },
    {
        "content": "<p>and sometimes a standalone commit made by me that fixes differences between master and beta</p>",
        "id": 161003186,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1552837074
    },
    {
        "content": "<p>but if I cherry-pick a merge commit I might pull in unwanted changes</p>",
        "id": 161003238,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1552837104
    },
    {
        "content": "<p>I worked with rebase-based workflows not only in rust, but also on all jobs I had.<br>\nSo I'm not actually sure how you can live with merge alone.</p>",
        "id": 161009328,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1552846952
    },
    {
        "content": "<p>Suppose you have some local work and master went ahead, and you need to sync, and there is some conflict, and you make merge and have to create a merge commit.</p>",
        "id": 161009348,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1552847012
    },
    {
        "content": "<p>If you continue the work for some time you need multiple syncs (e.g. daily), and you have to have multiple merge commits in the history? That's awful!</p>",
        "id": 161009404,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1552847090
    },
    {
        "content": "<p>So, the result of the work when you submit it is not an \"incapsulated unit\" (a sequence of commits representing the work), but something else.<br>\nI'm not actually sure how you can cherry-pick it (or parts of it) somewhere else if necessary in this case, or perform a similar operation.</p>",
        "id": 161009611,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1552847458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I'm also a fan of rebase, but I can still point out that the merge-based result (yes, with all of those \"extra\" merge commits) is more technically accurate to what the developer did (see my point above about running the tests at each step of history after a rebase)</p>",
        "id": 161010240,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552848677
    },
    {
        "content": "<p>Cherry-picking should have more-or-less the same problems as a rebase strategy — in both cases you are trying to transplant code that assumes some state of the universe into a different universe.</p>",
        "id": 161010498,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552849154
    },
    {
        "content": "<p>Having a accurate history of what a developer did is often just not that useful if you, for example, try to figure out why a piece of code came to be, because blame and log will give you a bunch of commits that show you that the developer had intermediate bugs here and there, and typos and what not, but you'll still have to figure out the big picture yourself, which is something that the original developer (hopefully) already did back then, but didn't care to make available to others in form of a clean history with well written commit messages.</p>",
        "id": 161133379,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1552987208
    },
    {
        "content": "<p>I still remember hunting down a bug (not I. Rust), where blame only led me to a commit that had nothing but a poop emoji as its commit message, and the changed line went from buggy to buggy there. The PR was littered with such commits, no fun at all.</p>",
        "id": 161133508,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1552987332
    },
    {
        "content": "<p>yes: history crafting is as much an documentation-art as comment authoring is</p>",
        "id": 161138416,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552991933
    },
    {
        "content": "<blockquote>\n<p>I still remember hunting down a bug (not I. Rust)</p>\n</blockquote>\n<p>I meant \"not in Rust\" there.</p>",
        "id": 161141686,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1552995189
    }
]