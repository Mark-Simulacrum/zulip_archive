[
    {
        "content": "<p>We're often encouraged to break big crates into smaller crates and spread around the build parallelism as much as we can. However, it's not always possible to just break up a crate like that.</p>\n<p>Are there any tips to increase build speed when the crate is 70,000 lines and not getting any smaller? Does it help to have more modules? Less modules? <code>cfg</code> things out? Cut down on <code>cfg</code> and just build it all? Sacrifice a chicken?</p>",
        "id": 203906801,
        "sender_full_name": "Lokathor",
        "timestamp": 1594774846
    },
    {
        "content": "<p>modules shouldn't matter (<em>grumbles at CGUs</em>), you could run <code>cargo rustc -- -Z self-profile</code> and see what it says</p>",
        "id": 203906937,
        "sender_full_name": "eddyb",
        "timestamp": 1594775019
    },
    {
        "content": "<p>(\"see what it says\" requiring <code>cargo install --git https://github.com/rust-lang/measureme summarize crox</code> - <code>summarize</code> gives you a basic report, <code>crox</code> gives you a file you can load into Chrome DevTools for a detailed view)</p>",
        "id": 203906995,
        "sender_full_name": "eddyb",
        "timestamp": 1594775059
    },
    {
        "content": "<p>the answer is quite dependent on what the compiler is doing</p>",
        "id": 203907010,
        "sender_full_name": "eddyb",
        "timestamp": 1594775086
    },
    {
        "content": "<p>oh and if you're willing to play around, there's a way to make the <code>crox</code> output even more tailed, referring to the relevant parts of your crate (but this is mostly useful when there's an outlier that takes 10x-100x more than the average etc.)</p>",
        "id": 203907124,
        "sender_full_name": "eddyb",
        "timestamp": 1594775194
    },
    {
        "content": "<p>Well it's for GL binding. There's two ways of loading ~600 functions, and then all the eums. It adds up to 2.45mb of source. <a href=\"https://raw.githubusercontent.com/Lokathor/gl46/main/src/lib.rs\">https://raw.githubusercontent.com/Lokathor/gl46/main/src/lib.rs</a> if you want to look, but don't open it on your phone it'll probably crash your phone's browser, they don't handle multi-megabyte files that well.</p>",
        "id": 203907153,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775254
    },
    {
        "content": "<p>600 independent things shouldn't be too slow</p>",
        "id": 203907208,
        "sender_full_name": "eddyb",
        "timestamp": 1594775293
    },
    {
        "content": "<p>the reason I bring up <code>-Z self-profile</code> is that while some things can be eyeballed, you can't know for sure until you check</p>",
        "id": 203907222,
        "sender_full_name": "eddyb",
        "timestamp": 1594775320
    },
    {
        "content": "<p>for all we know you could've hit some edge case we never considered</p>",
        "id": 203907231,
        "sender_full_name": "eddyb",
        "timestamp": 1594775338
    },
    {
        "content": "<p>i will tackle the current GL generator bug and then do that check, one moment.</p>",
        "id": 203907247,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775356
    },
    {
        "content": "<p>although looking at the code, there's a  lot of macro-generated code</p>",
        "id": 203907252,
        "sender_full_name": "eddyb",
        "timestamp": 1594775364
    },
    {
        "content": "<p>which is always a trade-off</p>",
        "id": 203907258,
        "sender_full_name": "eddyb",
        "timestamp": 1594775375
    },
    {
        "content": "<p>if possible you might want to wrap common parts in generics</p>",
        "id": 203907260,
        "sender_full_name": "eddyb",
        "timestamp": 1594775383
    },
    {
        "content": "<p>I had thought that i'd compacted it down about as much as i could</p>",
        "id": 203907319,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775419
    },
    {
        "content": "<p>relying on monomorphization can be a a big speedup since while the LLVM IR generated is more or less the same, all the high-level type-checking and whatnot is done only once</p>",
        "id": 203907320,
        "sender_full_name": "eddyb",
        "timestamp": 1594775421
    },
    {
        "content": "<p>I'm seeing a lot of repetitions between functions, <code>trace!</code> looks pretty suspicious for example, but maybe that's off by default</p>",
        "id": 203907328,
        "sender_full_name": "eddyb",
        "timestamp": 1594775447
    },
    {
        "content": "<p>ah, yes, well that is off by default, or it can expand to println, or it can expand all the way to log::trace</p>",
        "id": 203907342,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775493
    },
    {
        "content": "<p>the <code>match f(x) { Some(y) =&gt; ..., None =&gt; ...  }</code> could probably be moved into a wrapper for <code>f</code></p>",
        "id": 203907402,
        "sender_full_name": "eddyb",
        "timestamp": 1594775527
    },
    {
        "content": "<p>one neat trick is that while Rust doesn't have VG, you are generating this, so you could just have one wrapper per argument count</p>",
        "id": 203907419,
        "sender_full_name": "eddyb",
        "timestamp": 1594775557
    },
    {
        "content": "<p>so that even parsing the initial code, pre-expansion, is really fast</p>",
        "id": 203907421,
        "sender_full_name": "eddyb",
        "timestamp": 1594775577
    },
    {
        "content": "<p>apropos of nothing, <code>inline</code> and <code>inline_always</code> look like they'd conflict, you probably want to pick the stronger of the two if they're both on</p>",
        "id": 203907439,
        "sender_full_name": "eddyb",
        "timestamp": 1594775620
    },
    {
        "content": "<p>there's stuff like <code>if \"glObjectPtrLabel\" != \"glGetError\" {</code> which looks like it could be pre-evaluated in the generator</p>",
        "id": 203907501,
        "sender_full_name": "eddyb",
        "timestamp": 1594775652
    },
    {
        "content": "<p>i checked and they don't conflict, but also the reference doesn't even say what happens, you probably get the always</p>",
        "id": 203907503,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775655
    },
    {
        "content": "<p>haha oops</p>",
        "id": 203907508,
        "sender_full_name": "eddyb",
        "timestamp": 1594775661
    },
    {
        "content": "<p>I should've checked before saying anything</p>",
        "id": 203907511,
        "sender_full_name": "eddyb",
        "timestamp": 1594775668
    },
    {
        "content": "<p>and yes, suppose that i could eval that bit within the generator :(</p>",
        "id": 203907521,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775688
    },
    {
        "content": "<p>anyway I doubt most of my suggestions will make a huge dent</p>",
        "id": 203907527,
        "sender_full_name": "eddyb",
        "timestamp": 1594775702
    },
    {
        "content": "<p>I'm really curious what the timings look like on this</p>",
        "id": 203907536,
        "sender_full_name": "eddyb",
        "timestamp": 1594775709
    },
    {
        "content": "<p>okay i made some timings info</p>",
        "id": 203907537,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775716
    },
    {
        "content": "<p>how long does <code>cargo check</code> take?</p>",
        "id": 203907540,
        "sender_full_name": "eddyb",
        "timestamp": 1594775717
    },
    {
        "content": "<p>6.27s, with all features on.</p>",
        "id": 203907553,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775760
    },
    {
        "content": "<p>and without?</p>",
        "id": 203907596,
        "sender_full_name": "eddyb",
        "timestamp": 1594775766
    },
    {
        "content": "<p>if we turn it to just the struct loader, 2.17s</p>",
        "id": 203907617,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775791
    },
    {
        "content": "<p>so now the question is whether you want to bring down the 2s or the delta of 4s</p>",
        "id": 203907662,
        "sender_full_name": "eddyb",
        "timestamp": 1594775850
    },
    {
        "content": "<p>uh, how the heck do i use any of this self profile data &gt;_&gt; it seems to have made 3 binary files that VS Code doesn't have the slightest idea about</p>",
        "id": 203907665,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/203906995\">said</a>:</p>\n<blockquote>\n<p>(\"see what it says\" requiring <code>cargo install --git https://github.com/rust-lang/measureme summarize crox</code> - <code>summarize</code> gives you a basic report, <code>crox</code> gives you a file you can load into Chrome DevTools for a detailed view)</p>\n</blockquote>\n<p>^^</p>",
        "id": 203907677,
        "sender_full_name": "eddyb",
        "timestamp": 1594775870
    },
    {
        "content": "<p>oh that's the file reader<br>\ni thought that was a secondary way to get timings.</p>",
        "id": 203907726,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775889
    },
    {
        "content": "<p>we could have <code>rustc</code> autogenerate a basic report, but there was opposition to it :(</p>",
        "id": 203907727,
        "sender_full_name": "eddyb",
        "timestamp": 1594775893
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 203907735,
        "sender_full_name": "eddyb",
        "timestamp": 1594775902
    },
    {
        "content": "<p>(the reason it's a compact binary format is that we want as low overhead as possible)</p>",
        "id": 203907743,
        "sender_full_name": "eddyb",
        "timestamp": 1594775935
    },
    {
        "content": "<p>hey, only 81 deps! this is pretty slim for something via cargo install!</p>",
        "id": 203907748,
        "sender_full_name": "Lokathor",
        "timestamp": 1594775949
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rust-play/5b353916e89d3d90ae5926d2a28d1c1f\">https://gist.github.com/rust-play/5b353916e89d3d90ae5926d2a28d1c1f</a></p>",
        "id": 203907835,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776093
    },
    {
        "content": "<p>wow, self-contained self time</p>",
        "id": 203907899,
        "sender_full_name": "eddyb",
        "timestamp": 1594776162
    },
    {
        "content": "<p>how do you end up with 6k things to typeck, didn't you say it's 600?</p>",
        "id": 203907912,
        "sender_full_name": "eddyb",
        "timestamp": 1594776190
    },
    {
        "content": "<p>~600 <em>functions</em>, and then two loaders, so that's like 1200 to 1300 functions, and then there's a bazillion enumerations (<code>const</code> in rust terms).</p>",
        "id": 203907962,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776243
    },
    {
        "content": "<p>I guess it's 600*3 just to start</p>",
        "id": 203907969,
        "sender_full_name": "eddyb",
        "timestamp": 1594776251
    },
    {
        "content": "<p>3? where's 3 from?</p>",
        "id": 203907975,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776273
    },
    {
        "content": "<p>(there's also <code>_is_loaded</code>)</p>",
        "id": 203907977,
        "sender_full_name": "eddyb",
        "timestamp": 1594776276
    },
    {
        "content": "<p>oh, yes, and well there's also the loader function too, so 6 functions per command and over 600 commands, i guess that adds up fast</p>",
        "id": 203907998,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776308
    },
    {
        "content": "<p>anyway, you have a lot of things that are like eachother - so you ideally want to lower the factor (of cost per each of those things)</p>",
        "id": 203908011,
        "sender_full_name": "eddyb",
        "timestamp": 1594776337
    },
    {
        "content": "<p>my suggestion would be to bin them into arity and then use generics as much as possible</p>",
        "id": 203908020,
        "sender_full_name": "eddyb",
        "timestamp": 1594776352
    },
    {
        "content": "<p>and that would make compile time go <em>down</em>? I thought the expansion time would go up because of the monomorphization time? Also, not only arity but fn arg type matters here</p>",
        "id": 203908083,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776417
    },
    {
        "content": "<p>monomorphization is cheaper than type-checking</p>",
        "id": 203908089,
        "sender_full_name": "eddyb",
        "timestamp": 1594776429
    },
    {
        "content": "<p>idk who's saying otherwise</p>",
        "id": 203908090,
        "sender_full_name": "eddyb",
        "timestamp": 1594776432
    },
    {
        "content": "<p>no one said otherwise, but people do talk about monomorph time and no one talks about type check time :P</p>",
        "id": 203908096,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776457
    },
    {
        "content": "<p>monomorphization is basically free, the total cost is in the number of instances, which would remain unchanged</p>",
        "id": 203908098,
        "sender_full_name": "eddyb",
        "timestamp": 1594776458
    },
    {
        "content": "<p>type-checking similar code, is not</p>",
        "id": 203908101,
        "sender_full_name": "eddyb",
        "timestamp": 1594776469
    },
    {
        "content": "<p>(since we have no way of knowing it's similar)</p>",
        "id": 203908103,
        "sender_full_name": "eddyb",
        "timestamp": 1594776475
    },
    {
        "content": "<p>and there is no \"expansion time\"</p>",
        "id": 203908142,
        "sender_full_name": "eddyb",
        "timestamp": 1594776485
    },
    {
        "content": "<p><code>expand_crate</code> is macro expansion</p>",
        "id": 203908144,
        "sender_full_name": "eddyb",
        "timestamp": 1594776494
    },
    {
        "content": "<p>basically it's always cheaper to instantiate one generic function N times than have N functions</p>",
        "id": 203908150,
        "sender_full_name": "eddyb",
        "timestamp": 1594776510
    },
    {
        "content": "<p>huh, well okay</p>",
        "id": 203908158,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776523
    },
    {
        "content": "<p>the instantiation is \"free\" because it's part of MIR -&gt; LLVM IR</p>",
        "id": 203908160,
        "sender_full_name": "eddyb",
        "timestamp": 1594776527
    },
    {
        "content": "<p>most of the other front-end stuff doesn't get deduplicated (trait system stuff like searching for matching impls being an exception, but that's arguably pretty deep in the compiler)</p>",
        "id": 203908175,
        "sender_full_name": "eddyb",
        "timestamp": 1594776567
    },
    {
        "content": "<p>this makes me feel like we're not messaging things too well :(</p>",
        "id": 203908224,
        "sender_full_name": "eddyb",
        "timestamp": 1594776604
    },
    {
        "content": "<p>with respect, i'd say that you're not messaging things at all. There's only one main thing about compile times that I can recall anyone posting, and it's by Icefox, who I know doesn't work on any part of the compiler at all</p>",
        "id": 203908242,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776649
    },
    {
        "content": "<p>also, abstractions can be \"free\" if the data types involved are integers/floats/pointers (or pairs thereof), including anything that's just structs around those, LLVM only really has to come in and optimize stuff away once you have larger data being moved/copied around</p>",
        "id": 203908254,
        "sender_full_name": "eddyb",
        "timestamp": 1594776668
    },
    {
        "content": "<p>sure, I'm pretty deep in my corner and don't even get to interact with a lot of the community nowadays, so it wouldn't be me specifically (and I probably wouldn't even know about it)</p>",
        "id": 203908268,
        "sender_full_name": "eddyb",
        "timestamp": 1594776706
    },
    {
        "content": "<p>just saying that it's more thing to be sad about</p>",
        "id": 203908294,
        "sender_full_name": "eddyb",
        "timestamp": 1594776723
    },
    {
        "content": "<p>anyway there's an extreme solution and I want to sketch it out (it might not be hard to test, and if it's a big enough win you might get away with using it)</p>",
        "id": 203908328,
        "sender_full_name": "eddyb",
        "timestamp": 1594776762
    },
    {
        "content": "<p>I will await that, and in the async time i will edit the generator to eliminate that if that compares two string literals</p>",
        "id": 203908343,
        "sender_full_name": "Lokathor",
        "timestamp": 1594776821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">glAttachShader</span>: <span class=\"nc\">Fn2</span><span class=\"o\">&lt;</span><span class=\"n\">GLuint</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GLuint</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fn2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">&quot;glAttachShader&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c_name</span>: <span class=\"nc\">b</span><span class=\"s\">&quot;glAttachShader</span><span class=\"se\">\\0</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203908344,
        "sender_full_name": "eddyb",
        "timestamp": 1594776822
    },
    {
        "content": "<p>and then all of the functionality is on the <code>struct</code></p>",
        "id": 203908393,
        "sender_full_name": "eddyb",
        "timestamp": 1594776858
    },
    {
        "content": "<p>to expand a bit on what I was saying earlier: typeck and borrowck are roughly proportional in the source code (after macro expansion), whereas codegen/LLVM optimizations is somewhat similar but anything generic is multiplied by the number of instances</p>",
        "id": 203908415,
        "sender_full_name": "eddyb",
        "timestamp": 1594776924
    },
    {
        "content": "<p>so if you want to reduce <code>cargo check</code> time, you want to compact your code (but not with macros, since those offer no work deduplication opportunities)</p>",
        "id": 203908426,
        "sender_full_name": "eddyb",
        "timestamp": 1594776948
    },
    {
        "content": "<p>one downside with that approach is AFAIK there's no way to make call operators work (as you can't implement the <code>Fn</code> traits yourself), so you might still need a wrapper that calls a method on the value which actually does the work</p>",
        "id": 203908500,
        "sender_full_name": "eddyb",
        "timestamp": 1594777001
    },
    {
        "content": "<p>there might be a way to use <code>Deref</code>, but it seems iffy, as you would need to be storing the pointer at a memory address, and it would... oh no it wouldn't</p>",
        "id": 203908534,
        "sender_full_name": "eddyb",
        "timestamp": 1594777054
    },
    {
        "content": "<p>'sec, lemme do a demo,  this might be a novel call operator hack</p>",
        "id": 203908544,
        "sender_full_name": "eddyb",
        "timestamp": 1594777066
    },
    {
        "content": "<p>so one thing i perhaps should mention: The two loaders: one stores each fn pointer in a static AtomicPtr and the other stores them in fields of a struct, but also as AtomicPtr just for consistency sake.</p>",
        "id": 203908638,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777156
    },
    {
        "content": "<p>if that <em>somehow</em> affects your plan</p>",
        "id": 203908645,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777163
    },
    {
        "content": "<p>they're not the function that you'd want to run when you go <code>glAttachShader(...)</code> so I don't think it makes a difference</p>",
        "id": 203908660,
        "sender_full_name": "eddyb",
        "timestamp": 1594777192
    },
    {
        "content": "<p>oh nevermind my <code>Deref</code> idea doesn't work unless you can pass the name of the function as a generic parameter (const generics, or just an associated const on a type)</p>",
        "id": 203908727,
        "sender_full_name": "eddyb",
        "timestamp": 1594777246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> this is the hack btw <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=89b79cafcbf699bf03efcf1a1af35b2c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=89b79cafcbf699bf03efcf1a1af35b2c</a></p>",
        "id": 203908917,
        "sender_full_name": "eddyb",
        "timestamp": 1594777463
    },
    {
        "content": "<p>I see that it works, but i'm not sure how it helps</p>",
        "id": 203908947,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777524
    },
    {
        "content": "<p>it would be implemented on <code>Fn1</code>, <code>Fn2</code>, ... (all the arity wrappers for the <code>const</code>s), but it can't really work since like I said the name would have to be passed through generics</p>",
        "id": 203909012,
        "sender_full_name": "eddyb",
        "timestamp": 1594777591
    },
    {
        "content": "<p>(probably more than the name, now that I think about it, I should gist your code so I can read it, it's hard w/o syntax highlighting)</p>",
        "id": 203909039,
        "sender_full_name": "eddyb",
        "timestamp": 1594777626
    },
    {
        "content": "<p>the <code>Deref</code> trick is more of a novelty than useful tbh</p>",
        "id": 203909057,
        "sender_full_name": "eddyb",
        "timestamp": 1594777653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> anyway the more immediately useful stuff is to put the e.g. tracing in generic functions, one per arity</p>",
        "id": 203909075,
        "sender_full_name": "eddyb",
        "timestamp": 1594777681
    },
    {
        "content": "<p>so that you don't end up with a lot of code times 600, just one function call</p>",
        "id": 203909120,
        "sender_full_name": "eddyb",
        "timestamp": 1594777708
    },
    {
        "content": "<p>i had thought to do that but there's different formatting used per arg depending on the arg type, which i'd hate to lose. The tracing is rarely used so if that's a little slower it's probably okay, but when you do turn it on then it should probably be as helpful as possible</p>",
        "id": 203909137,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777754
    },
    {
        "content": "<p>hmm fair</p>",
        "id": 203909140,
        "sender_full_name": "eddyb",
        "timestamp": 1594777776
    },
    {
        "content": "<p>which is also why <code>report_error_as_necessary_from</code> is a single function, because it just says if there's an error or not</p>",
        "id": 203909144,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777787
    },
    {
        "content": "<p>there's some stuff like when you explicitly specify the type parameter of <code>_t</code>, you could try to shorten that and rely on inference</p>",
        "id": 203909193,
        "sender_full_name": "eddyb",
        "timestamp": 1594777813
    },
    {
        "content": "<p>like when converting the <code>*mut c_void</code> to the correct system fn type?</p>",
        "id": 203909216,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777845
    },
    {
        "content": "<p>is <code>_t</code> transmute?</p>",
        "id": 203909221,
        "sender_full_name": "eddyb",
        "timestamp": 1594777856
    },
    {
        "content": "<p>yes</p>",
        "id": 203909222,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777859
    },
    {
        "content": "<p>well that explains my confusion lol</p>",
        "id": 203909228,
        "sender_full_name": "eddyb",
        "timestamp": 1594777867
    },
    {
        "content": "<p>yeah i should take that out, we were having fun on the discord with making things terser to save space on the output</p>",
        "id": 203909242,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777909
    },
    {
        "content": "<p>but transmute at least should probably stay as itself</p>",
        "id": 203909247,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777921
    },
    {
        "content": "<p>presumably you can remove the argument types</p>",
        "id": 203909294,
        "sender_full_name": "eddyb",
        "timestamp": 1594777937
    },
    {
        "content": "<p>and make it e.g. <code>extern \"system\" fn(_, _)</code></p>",
        "id": 203909296,
        "sender_full_name": "eddyb",
        "timestamp": 1594777951
    },
    {
        "content": "<p>I wonder if that saves any time</p>",
        "id": 203909301,
        "sender_full_name": "eddyb",
        "timestamp": 1594777958
    },
    {
        "content": "<p>that sounds <em>dangerous</em></p>",
        "id": 203909303,
        "sender_full_name": "Lokathor",
        "timestamp": 1594777969
    },
    {
        "content": "<p>I mean you're calling it on the next line :P</p>",
        "id": 203909312,
        "sender_full_name": "eddyb",
        "timestamp": 1594777984
    },
    {
        "content": "<p>uhhh, well, okay so it seems to infer the right type i guess</p>",
        "id": 203909322,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778017
    },
    {
        "content": "<p>anyway I think you can combine the <code>.load(RELAX)</code>, the <code>transmute</code>, and the entire <code>match</code> (with the call/panic), into one generic function per arity</p>",
        "id": 203909372,
        "sender_full_name": "eddyb",
        "timestamp": 1594778049
    },
    {
        "content": "<p>maybe that helps</p>",
        "id": 203909384,
        "sender_full_name": "eddyb",
        "timestamp": 1594778093
    },
    {
        "content": "<p>hmm, what would that look like while also keeping the transmute coorect?</p>",
        "id": 203909394,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778113
    },
    {
        "content": "<p>you rely on the fact that it's per-arity. so e.g. arity 4 would have 4 input types and 1 output type, as type parameters</p>",
        "id": 203909403,
        "sender_full_name": "eddyb",
        "timestamp": 1594778144
    },
    {
        "content": "<p>which you could specify in the same way you do for the transmute today</p>",
        "id": 203909412,
        "sender_full_name": "eddyb",
        "timestamp": 1594778157
    },
    {
        "content": "<p>e.g. instead of <code>extern \"system\" fn(GLsync, GLbitfield, GLuint64)</code>, you'd give <code>GLsync, GLbitfield, GLuint64, ()</code> as parameters</p>",
        "id": 203909461,
        "sender_full_name": "eddyb",
        "timestamp": 1594778189
    },
    {
        "content": "<p>although at this point I'm starting to wonder why it takes so long in typeck</p>",
        "id": 203909479,
        "sender_full_name": "eddyb",
        "timestamp": 1594778222
    },
    {
        "content": "<p>none of this seems egregious</p>",
        "id": 203909484,
        "sender_full_name": "eddyb",
        "timestamp": 1594778231
    },
    {
        "content": "<p>On monomorphization: its a \"cost\" when you do have generics and then start instantiating a ton of stuff through a chain of various generics.</p>",
        "id": 203909533,
        "sender_full_name": "nagisa",
        "timestamp": 1594778288
    },
    {
        "content": "<p>right, but that's reflected in the number of total instances</p>",
        "id": 203909540,
        "sender_full_name": "eddyb",
        "timestamp": 1594778300
    },
    {
        "content": "<p>but overall if your eventual code will end up with same number of instances in the end, then monomorphization is actually the best way to save on costs elsewhere in the pipeline.</p>",
        "id": 203909547,
        "sender_full_name": "nagisa",
        "timestamp": 1594778320
    },
    {
        "content": "<p>when accounting for that, it doesn't look nearly as bad</p>",
        "id": 203909548,
        "sender_full_name": "eddyb",
        "timestamp": 1594778321
    },
    {
        "content": "<p>(for now, until we get generic LLVM ^^)</p>",
        "id": 203909553,
        "sender_full_name": "nagisa",
        "timestamp": 1594778336
    },
    {
        "content": "<p><em>in today's installment of \"two-word terms to get eddyb hyperventilating\"...</em></p>",
        "id": 203909573,
        "sender_full_name": "eddyb",
        "timestamp": 1594778372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> oh, a fun idea: have you considered using your <code>struct</code> code for the static stuff, and just make a <code>static</code> that holds one of those <code>struct</code>s?</p>",
        "id": 203909660,
        "sender_full_name": "eddyb",
        "timestamp": 1594778433
    },
    {
        "content": "<p>a <code>static GL_FNS: GlFns = ...;</code></p>",
        "id": 203909670,
        "sender_full_name": "eddyb",
        "timestamp": 1594778462
    },
    {
        "content": "<p>and call methods on that instead of duplicating the code (I missed that it's what you meant earlier by \"two\")</p>",
        "id": 203909687,
        "sender_full_name": "eddyb",
        "timestamp": 1594778491
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">call_atomic_ptr_2arg</span><span class=\"o\">&lt;</span><span class=\"n\">Ret</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">AtomicPtr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ret</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// we trace and check errors in whatever fn calls to this</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">RELAX</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">transmite</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"o\">&lt;</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;system&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">)</span>-&gt;<span class=\"nc\">Ret</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fn_p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">fn_p</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">go_panic_because_fn_not_loaded</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">out</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203909701,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778520
    },
    {
        "content": "<p>so like this?</p>",
        "id": 203909744,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778527
    },
    {
        "content": "<p>yeah, probably needs to be <code>unsafe</code> because the atomic ptr is unconstrained but otherwise seems fine</p>",
        "id": 203909759,
        "sender_full_name": "eddyb",
        "timestamp": 1594778556
    },
    {
        "content": "<p>oh, right, yeah and it's transmuting and stuff</p>",
        "id": 203909769,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778581
    },
    {
        "content": "<p>(the number of accounted-for bodies is 600*7, 3+3 which are duplicates, plus the static. I wonder if the <code>trace!</code> introduces any bodies)</p>",
        "id": 203909782,
        "sender_full_name": "eddyb",
        "timestamp": 1594778608
    },
    {
        "content": "<p>oh and there's 1369 constants. so okay I think we mostly found all the things being type-checked (and we can kinda ignore the consts, they're really simple)</p>",
        "id": 203909838,
        "sender_full_name": "eddyb",
        "timestamp": 1594778679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> btw, if you run <code>crox</code>, how big is the resulting <code>chrome_profile.json</code>?</p>",
        "id": 203909988,
        "sender_full_name": "eddyb",
        "timestamp": 1594778892
    },
    {
        "content": "<p>sometimes we can see anomalies in it</p>",
        "id": 203910000,
        "sender_full_name": "eddyb",
        "timestamp": 1594778920
    },
    {
        "content": "<p>27.4MB</p>",
        "id": 203910007,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778937
    },
    {
        "content": "<p>that's a bit big to send :( maybe if you compress it first?</p>",
        "id": 203910020,
        "sender_full_name": "eddyb",
        "timestamp": 1594778958
    },
    {
        "content": "<p>1.2mb when zipped</p>",
        "id": 203910035,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778987
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/GBIU9hTkN4Cq99dm9gL0WPpH/chrome_profiler.zip\">chrome_profiler.zip</a></p>",
        "id": 203910038,
        "sender_full_name": "Lokathor",
        "timestamp": 1594778996
    },
    {
        "content": "<p>thanks!</p>",
        "id": 203910103,
        "sender_full_name": "eddyb",
        "timestamp": 1594779033
    },
    {
        "content": "<p>heh I can see a pattern where one <code>typeck_tables_of</code> every 5 or so takes ~1.5ms (while the rest are smaller)</p>",
        "id": 203910206,
        "sender_full_name": "eddyb",
        "timestamp": 1594779191
    },
    {
        "content": "<p>even at 1ms, 2*600 would be 1.2s, spent type-checking just big functions/methods (the unsuffixed ones)</p>",
        "id": 203910288,
        "sender_full_name": "eddyb",
        "timestamp": 1594779251
    },
    {
        "content": "<p>there's two big <code>typeck_tables_of</code>, I assume those are, like, the one that loads all of the functions, and some other one that's similarly big</p>",
        "id": 203910317,
        "sender_full_name": "eddyb",
        "timestamp": 1594779317
    },
    {
        "content": "<p>one for global loader and one for struct loader?</p>",
        "id": 203910334,
        "sender_full_name": "Lokathor",
        "timestamp": 1594779351
    },
    {
        "content": "<p>oh I guess so</p>",
        "id": 203910339,
        "sender_full_name": "eddyb",
        "timestamp": 1594779358
    },
    {
        "content": "<p>overall this looks pretty boring. the most important thing I'm gathering is that the helper functions don't hurt much</p>",
        "id": 203910392,
        "sender_full_name": "eddyb",
        "timestamp": 1594779389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> anyway if you want to play around, and happen to have chrom{e,ium} around, should be easy to load it up: <a href=\"/user_uploads/4715/6Ugk0Q17IbwSzqC_0mzW00gy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6Ugk0Q17IbwSzqC_0mzW00gy/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/6Ugk0Q17IbwSzqC_0mzW00gy/image.png\"></a></div>",
        "id": 203910472,
        "sender_full_name": "eddyb",
        "timestamp": 1594779500
    },
    {
        "content": "<p>i'm still back on making it generate the arity functions! :ferrisSweat:</p>",
        "id": 203910482,
        "sender_full_name": "Lokathor",
        "timestamp": 1594779524
    },
    {
        "content": "<p>heh</p>",
        "id": 203910484,
        "sender_full_name": "eddyb",
        "timestamp": 1594779529
    },
    {
        "content": "<p>I hope you have a copy of the old code (in git or something)</p>",
        "id": 203910498,
        "sender_full_name": "eddyb",
        "timestamp": 1594779545
    },
    {
        "content": "<p>oh and if you want to see what actual function it's working on and whatnot, you need to add <code>-Zself-profile-events=default,query-keys</code></p>",
        "id": 203910531,
        "sender_full_name": "eddyb",
        "timestamp": 1594779561
    },
    {
        "content": "<p>should've mentioned this earlier (but presumably it makes the <code>chrome_profile.json</code> much bigger)</p>",
        "id": 203910539,
        "sender_full_name": "eddyb",
        "timestamp": 1594779579
    },
    {
        "content": "<p>you mean before and after the arity change?</p>",
        "id": 203910540,
        "sender_full_name": "Lokathor",
        "timestamp": 1594779583
    },
    {
        "content": "<p>whichever you want to look at more</p>",
        "id": 203910552,
        "sender_full_name": "eddyb",
        "timestamp": 1594779600
    },
    {
        "content": "<p>Alright here we go, <a href=\"https://gist.github.com/rust-play/97d5bec735eb12af3bda78efec55d2e4\">https://gist.github.com/rust-play/97d5bec735eb12af3bda78efec55d2e4</a></p>",
        "id": 203910981,
        "sender_full_name": "Lokathor",
        "timestamp": 1594780189
    },
    {
        "content": "<p>i guess we'll give it the inline(always) bump too, though i'm told that a small private generic function will effectively always be inlined anyway</p>",
        "id": 203911065,
        "sender_full_name": "Lokathor",
        "timestamp": 1594780288
    },
    {
        "content": "<p>beautiful,,,</p>",
        "id": 203911126,
        "sender_full_name": "eddyb",
        "timestamp": 1594780349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> btw if you want a more advanced version of that <code>Deref</code> trick, <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> linked me <a href=\"https://docs.rs/hackfn/\">https://docs.rs/hackfn/</a> on twitter</p>",
        "id": 203911196,
        "sender_full_name": "eddyb",
        "timestamp": 1594780443
    },
    {
        "content": "<p>oof</p>",
        "id": 203911220,
        "sender_full_name": "Lokathor",
        "timestamp": 1594780501
    },
    {
        "content": "<p>(you would only need to use it once per arity, not once per each function - although none of that makes any sense for the struct loader, so you can ignore it)</p>",
        "id": 203911223,
        "sender_full_name": "eddyb",
        "timestamp": 1594780506
    },
    {
        "content": "<p>also don't look at the implementation, you'll regret it :P</p>",
        "id": 203911227,
        "sender_full_name": "eddyb",
        "timestamp": 1594780513
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">  </span><span class=\"sd\">/// [glEnablei](http://docs.gl/gl4/glEnablei)(target, index)</span>\n<span class=\"w\">  </span><span class=\"sd\">/// * `target` group: EnableCap</span>\n<span class=\"w\">  </span><span class=\"cp\">#[cfg_attr(feature = </span><span class=\"s\">&quot;inline&quot;</span><span class=\"cp\">, inline)]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[cfg_attr(feature = </span><span class=\"s\">&quot;inline_always&quot;</span><span class=\"cp\">, inline(always))]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">glEnablei</span><span class=\"p\">(</span><span class=\"n\">target</span>: <span class=\"nc\">GLenum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"nc\">GLuint</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(all(debug_assertions, feature = </span><span class=\"s\">&quot;debug_trace_calls&quot;</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">trace</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;calling glEnablei({:#X}, {:?});&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_atomic_ptr_2arg</span><span class=\"p\">(</span><span class=\"n\">glEnablei</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">glEnablei_p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(all(debug_assertions, feature = </span><span class=\"s\">&quot;debug_automatic_glGetError&quot;</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">report_error_as_necessary_from</span><span class=\"p\">(</span><span class=\"s\">&quot;glEnablei&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">glGetError</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203911323,
        "sender_full_name": "Lokathor",
        "timestamp": 1594780651
    },
    {
        "content": "<p>oops, forgot some double quotes</p>",
        "id": 203911332,
        "sender_full_name": "Lokathor",
        "timestamp": 1594780677
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rust-play/363cc0e57920da3216c648babc77afeb\">https://gist.github.com/rust-play/363cc0e57920da3216c648babc77afeb</a> with the generic arity system in place</p>",
        "id": 203912380,
        "sender_full_name": "Lokathor",
        "timestamp": 1594782125
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/S0Mi23W5a3-62nXnqkBWcOW3/chrome_profiler.zip\">chrome_profiler.zip</a></p>",
        "id": 203912543,
        "sender_full_name": "Lokathor",
        "timestamp": 1594782397
    },
    {
        "content": "<p>Okay so we actually took 0.4MB of source size off with these changes</p>",
        "id": 203912686,
        "sender_full_name": "Lokathor",
        "timestamp": 1594782626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> How long is your build (not check) time, and what does your normal workflow look like?</p>",
        "id": 203920077,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594793845
    },
    {
        "content": "<p>By the way, is there a guide to reading the crox output? E.g. I have a 15 LOC crate that takes 24 seconds to compile without debug info (because it's using generics from dependencies), but I'm not sure how to interpret the output.</p>",
        "id": 203920576,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594794587
    },
    {
        "content": "<p>It looks like LLVM thin-LTO takes too long, but that's not really actionable</p>",
        "id": 203920649,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594794660
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/7CUkLX-RlNTOcL98xnR0zUS5/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/7CUkLX-RlNTOcL98xnR0zUS5/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/7CUkLX-RlNTOcL98xnR0zUS5/image.png\"></a></div>",
        "id": 203920795,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594794892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> if <code>cargo check</code> times are not what you're worried about, I doubt <code>-Z self-profile</code> is that useful</p>",
        "id": 203924889,
        "sender_full_name": "eddyb",
        "timestamp": 1594799114
    },
    {
        "content": "<p>Nope, <code>cargo build --release</code>. I guess you're right, it doesn't seem too useful.</p>",
        "id": 203924908,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594799143
    },
    {
        "content": "<p>Shouldn't there be more parallelism in ThinLTO?</p>",
        "id": 203925098,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594799278
    },
    {
        "content": "<p>the LLVM parallelism is limited by two things: CGU partitioning, and single-threaded MIR -&gt; LLVM IR feeding it</p>",
        "id": 203925169,
        "sender_full_name": "eddyb",
        "timestamp": 1594799319
    },
    {
        "content": "<p>the latter is why there's staggering across time</p>",
        "id": 203925179,
        "sender_full_name": "eddyb",
        "timestamp": 1594799333
    },
    {
        "content": "<p>although maybe not, I just can't see enough of that</p>",
        "id": 203925197,
        "sender_full_name": "eddyb",
        "timestamp": 1594799358
    },
    {
        "content": "<p>but I believe that kind of shape with tiny threads indicates some of the CGUs are significantly smaller than others</p>",
        "id": 203925282,
        "sender_full_name": "eddyb",
        "timestamp": 1594799420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> it might be useful to take that screenshot making sure to include only 0 to 12000-13000 (wherever thread 37 starts)</p>",
        "id": 203925326,
        "sender_full_name": "eddyb",
        "timestamp": 1594799486
    },
    {
        "content": "<p>oh I see what you mean about ThinLTO, as it starts after all the CGUs are done</p>",
        "id": 203925346,
        "sender_full_name": "eddyb",
        "timestamp": 1594799516
    },
    {
        "content": "<p>I don't know about ThinLTO internals. cc <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span></p>",
        "id": 203925412,
        "sender_full_name": "eddyb",
        "timestamp": 1594799544
    },
    {
        "content": "<p>I think it single-threadedly combines the result of having optimized the CGUs in parallel?</p>",
        "id": 203925447,
        "sender_full_name": "eddyb",
        "timestamp": 1594799574
    },
    {
        "content": "<p>Thread 37 is <code>codegen_module_perform_lto</code></p>",
        "id": 203926278,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594800192
    },
    {
        "content": "<p>And the first threads are <code>codegen_module_optimize</code></p>",
        "id": 203926313,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594800233
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/GA1ABrMqj1_P4AmfjiQbR_lJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/GA1ABrMqj1_P4AmfjiQbR_lJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/GA1ABrMqj1_P4AmfjiQbR_lJ/image.png\"></a></div>",
        "id": 203926393,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594800277
    },
    {
        "content": "<p>ah at this zoom level you can see the MIR -&gt; LLVM IR :)</p>",
        "id": 203926436,
        "sender_full_name": "eddyb",
        "timestamp": 1594800313
    },
    {
        "content": "<p>I think it's the long purple sections between the green slivers, on thread 2 (we should probably categorize MIR -&gt; LLVM IR, and LLVM optimizations, differently, and therefore use different  colors)</p>",
        "id": 203926487,
        "sender_full_name": "eddyb",
        "timestamp": 1594800358
    },
    {
        "content": "<p>Yeah, thread 2 does all kinds of interesting stuff that's mostly fast :)</p>",
        "id": 203926576,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594800427
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/RSsqsnszoTMIsDachjdmZmEH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/RSsqsnszoTMIsDachjdmZmEH/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/RSsqsnszoTMIsDachjdmZmEH/image.png\"></a></div>",
        "id": 203926589,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594800445
    },
    {
        "content": "<p>This is from rust-analyzer, btw</p>",
        "id": 203926683,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594800504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Well <code>phosphorus</code> (the bindings generator) is fairly fast (~1.5 to 2 seconds, ish). When we take some generated output and put it into the <code>gl46</code> crate, which is what people will actually be depending on, we the the following sample build times:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt;cargo clean &amp;&amp; cargo build --features=global_loader\n    Finished dev [unoptimized + debuginfo] target(s) in 2.55s\n\n&gt;cargo clean &amp;&amp; cargo build --features=struct_loader\n    Finished dev [unoptimized + debuginfo] target(s) in 2.51s\n\n&gt;cargo clean &amp;&amp; cargo build --features=global_loader --release\n    Finished release [optimized] target(s) in 2.81s\n\n&gt;cargo clean &amp;&amp; cargo build --features=struct_loader --release\n    Finished release [optimized] target(s) in 2.89s\n</code></pre></div>",
        "id": 203949859,
        "sender_full_name": "Lokathor",
        "timestamp": 1594817013
    },
    {
        "content": "<p>the <code>lib.rs</code> is 2.24 mb of source</p>\n<ul>\n<li><code>rustc</code> seems to do what I'd call reasonably well with this much input. Not as fast as maybe a C compiler could do things, but you get a response quickly enough and I'm certainly doing things that I couldn't do in C.</li>\n<li><code>rust-analyzer</code> chokes and sputters and sometimes even dies. The checking takes seemingly 10+ seconds to perform, if it returns results at all. Frequently the enter key takes over 5 seconds to actually insert the newline because I guess it can't run the \"smart enter\" feature while also running the analysis. There's clearly a lot of work to be done before RA is ready for seriously large projects.</li>\n</ul>",
        "id": 203951161,
        "sender_full_name": "Lokathor",
        "timestamp": 1594817813
    },
    {
        "content": "<p>huh, I would've expected RA to do better, maybe they're not indexing something efficiently (like methods by name)</p>",
        "id": 203952696,
        "sender_full_name": "eddyb",
        "timestamp": 1594818525
    },
    {
        "content": "<p>please post an example project so we can look into this</p>",
        "id": 203952891,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594818631
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/5392\">https://github.com/rust-analyzer/rust-analyzer/issues/5392</a>. Look like pretty much everything is slow. For example some uncached slop in hover:</p>\n<div class=\"codehilite\"><pre><span></span><code>  128ms - handle_hover\n      127ms - Semantics::analyze2\n            0ms - crate_def_map:wait (2 calls)\n            0ms - infer:wait (1 calls)\n            0ms - module_to_def (1 calls)\n          127ms - ???\n        0ms - classify_name_ref (1 calls)\n        0ms - crate_def_map:wait (7 calls)\n</code></pre></div>",
        "id": 203953084,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594818765
    },
    {
        "content": "<p>there are some cases where Chalk still asks us to enumerate all impls for a trait, I suspect a lot of these problems come from that... maybe we should just stop doing that, at the cost of giving wrong results</p>",
        "id": 203953126,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594818797
    },
    {
        "content": "<p>ah, maybe not if it's just an abnormally big file</p>",
        "id": 203953260,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594818865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> do you ever have to iterate through e.g. <code>impl</code> methods, to find one by name?</p>",
        "id": 203953294,
        "sender_full_name": "eddyb",
        "timestamp": 1594818891
    },
    {
        "content": "<p>IIRC <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> optimized the rustc implementation to have a fancy name-keying system, where you can still iterate the children but also find all the ones with a specific name (there can be more than 1 because of type vs value namespace or macro hygiene)</p>",
        "id": 203953390,
        "sender_full_name": "eddyb",
        "timestamp": 1594818952
    },
    {
        "content": "<p>yeah, we don't index methods by name currently</p>",
        "id": 203953464,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594818967
    },
    {
        "content": "<p>no idea if it would help here, but there is an <code>impl</code> with <code>600*3</code> methods, so that could get painful to iterate over (especially if done <code>600*n</code> times, although I didn't check what <code>n</code> is)</p>",
        "id": 203953546,
        "sender_full_name": "eddyb",
        "timestamp": 1594819034
    },
    {
        "content": "<p>hmm I can stress test this pretty easily</p>",
        "id": 203953601,
        "sender_full_name": "eddyb",
        "timestamp": 1594819076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> <a href=\"https://github.com/Lokathor/gl46\">https://github.com/Lokathor/gl46</a> is the repo link</p>",
        "id": 203953885,
        "sender_full_name": "Lokathor",
        "timestamp": 1594819218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> try this out on RA and compare with <code>rustc</code> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f9848e4e13d12d4a6a9f3bc9dde714d3\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f9848e4e13d12d4a6a9f3bc9dde714d3</a></p>",
        "id": 203953955,
        "sender_full_name": "eddyb",
        "timestamp": 1594819270
    },
    {
        "content": "<blockquote>\n<p>Finished dev [unoptimized + debuginfo] target(s) in 0.75s</p>\n</blockquote>",
        "id": 203953999,
        "sender_full_name": "eddyb",
        "timestamp": 1594819292
    },
    {
        "content": "<p>LLVM LTO can be parallel but broadly its very prone to long tail problem</p>",
        "id": 203954012,
        "sender_full_name": "nagisa",
        "timestamp": 1594819303
    },
    {
        "content": "<p>checking that stress test shouldn't take longer than a second, really</p>",
        "id": 203954028,
        "sender_full_name": "eddyb",
        "timestamp": 1594819316
    },
    {
        "content": "<p>don’t think there's much actionable about it sadly T_T</p>",
        "id": 203954034,
        "sender_full_name": "nagisa",
        "timestamp": 1594819318
    },
    {
        "content": "<p>also no traits are involved so hopefully you don't hit Chalk</p>",
        "id": 203954098,
        "sender_full_name": "eddyb",
        "timestamp": 1594819329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/203953955\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> try this out on RA and compare with <code>rustc</code> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f9848e4e13d12d4a6a9f3bc9dde714d3\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f9848e4e13d12d4a6a9f3bc9dde714d3</a></p>\n</blockquote>\n<p>It's fast for me</p>",
        "id": 203954136,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594819350
    },
    {
        "content": "<p>intriguing</p>",
        "id": 203954158,
        "sender_full_name": "eddyb",
        "timestamp": 1594819362
    },
    {
        "content": "<p>maybe it's fields?</p>",
        "id": 203954189,
        "sender_full_name": "eddyb",
        "timestamp": 1594819380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> oh hey I don't think we index fields by name, do we? that might be something to look into, huh</p>",
        "id": 203954242,
        "sender_full_name": "eddyb",
        "timestamp": 1594819411
    },
    {
        "content": "<p>could be the task of indexing 3000 consts?</p>",
        "id": 203954243,
        "sender_full_name": "Lokathor",
        "timestamp": 1594819412
    },
    {
        "content": "<p>there's nothing in them though, other than literals</p>",
        "id": 203954273,
        "sender_full_name": "eddyb",
        "timestamp": 1594819431
    },
    {
        "content": "<p>you shouldn't go past 1s with O(n), it's likely quadratic behavior (possibly even for <code>rustc</code> still) that amplifies \"hundreds\" into \"close to a million\"</p>",
        "id": 203954506,
        "sender_full_name": "eddyb",
        "timestamp": 1594819537
    },
    {
        "content": "<p>this is slower but not that slow <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2c90d8c8b16bd07c175ff496893b5968\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2c90d8c8b16bd07c175ff496893b5968</a></p>",
        "id": 203954733,
        "sender_full_name": "eddyb",
        "timestamp": 1594819653
    },
    {
        "content": "<p>feel free to also try that in RA</p>",
        "id": 203954753,
        "sender_full_name": "eddyb",
        "timestamp": 1594819659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> is it faster if you disable inlay hints? (<code>rust-analyzer.inlayHints.enable</code>)</p>",
        "id": 203954875,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594819712
    },
    {
        "content": "<p>well idk if I can trust playground numbers. this should be even slower <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=199b6cfb28cdec72b671e04d9d4208aa\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=199b6cfb28cdec72b671e04d9d4208aa</a></p>",
        "id": 203954959,
        "sender_full_name": "eddyb",
        "timestamp": 1594819772
    },
    {
        "content": "<p>how is the performance of <code>rust-analyzer analysis-stats .</code> in the repository?</p>",
        "id": 203954972,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594819777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> can you try my last two links?</p>",
        "id": 203954979,
        "sender_full_name": "eddyb",
        "timestamp": 1594819786
    },
    {
        "content": "<p>/me should get around to installing RA</p>",
        "id": 203954996,
        "sender_full_name": "eddyb",
        "timestamp": 1594819795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/203954972\">said</a>:</p>\n<blockquote>\n<p>how is the performance of <code>rust-analyzer analysis-stats .</code> in the repository?</p>\n</blockquote>\n<p>2.7s item collection, 790ms inference</p>",
        "id": 203955068,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594819824
    },
    {
        "content": "<p>method resolution isn't optimized at all in RA and also has to be able to enumerate all methods for completion, so I wouldn't be surprised if it's slow, anyway</p>",
        "id": 203955282,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1594819945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/203954979\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> can you try my last two links?</p>\n</blockquote>\n<p>The one with fields is a bit slower, I think. It starts complaining about LSP requests taking too long, but it's not so bad overall</p>",
        "id": 203955328,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594819969
    },
    {
        "content": "<p>Maybe it's just slow on large files</p>",
        "id": 203955569,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594820103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> sadly i have left the house for work,  but i could check that later today</p>",
        "id": 203955586,
        "sender_full_name": "Lokathor",
        "timestamp": 1594820111
    },
    {
        "content": "<p>(and you can also disable the smart Enter thingy, at least on that project)</p>",
        "id": 203955638,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594820149
    },
    {
        "content": "<p>(but I guess you don't really edit that file)</p>",
        "id": 203955704,
        "sender_full_name": "Laurențiu",
        "timestamp": 1594820165
    },
    {
        "content": "<p>well it hasn't been an issue on any other project yet.</p>\n<p>I did try to do some editing in that file during the fix ups yesterday and i had to switch to editing in a notepad instance and then pasting a completed function into the file, because editing in vs code directly was too unresponsive</p>",
        "id": 203955800,
        "sender_full_name": "Lokathor",
        "timestamp": 1594820228
    },
    {
        "content": "<p>Is RA also slow on downstream creates or only when directly editing the generated one?</p>",
        "id": 203958447,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594821514
    },
    {
        "content": "<p>if you check out this fork of glow, <a href=\"https://github.com/Lokathor/glow\">https://github.com/Lokathor/glow</a>, and try the <code>gl46</code> branch you can have an example of using the large crate as a dependency of a smaller crate.</p>\n<p>The patch in that branch took a very short amount of time to write, so I wouldn't say I have a full sense of it, but the editing did seem to at least never block on the Enter key being pressed. I don't recall if the error info was consistently very responsive or not, I just used <code>cargo-watch</code> for that particular bit of work.</p>",
        "id": 203966493,
        "sender_full_name": "Lokathor",
        "timestamp": 1594825230
    },
    {
        "content": "<p>I played around with switching my crate to use Lokathor's fork/branch of <code>glow</code> and it didn't seem to make RA slow down, so I don't think downstream crates are affected</p>",
        "id": 203975354,
        "sender_full_name": "Joe Clay",
        "timestamp": 1594828931
    },
    {
        "content": "<p>So I have the same question for <a href=\"http://docs.rs\">docs.rs</a></p>",
        "id": 215049309,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023063
    },
    {
        "content": "<p>we have 19 second incremental compile times <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 215049315,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023071
    },
    {
        "content": "<p>here are the top 10 things from <code>-Z self-profile</code>: </p>\n<div class=\"codehilite\"><pre><span></span><code>+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| Item                                        | Self time | % of total time | Time     | Item count | Cache hits | Blocked time | Incremental load time |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| LLVM_module_codegen_emit_obj                | 19.08s    | 44.091          | 19.08s   | 256        | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| LLVM_passes                                 | 8.35s     | 19.293          | 8.35s    | 1          | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| codegen_module                              | 7.33s     | 16.945          | 8.32s    | 256        | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| typeck                                      | 900.86ms  | 2.082           | 1.13s    | 1294       | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| mir_borrowck                                | 659.97ms  | 1.525           | 1.46s    | 1294       | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| LLVM_module_codegen                         | 609.68ms  | 1.409           | 19.69s   | 256        | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| evaluate_obligation                         | 424.14ms  | 0.980           | 533.60ms | 17265      | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| LLVM_module_optimize_module_passes          | 372.71ms  | 0.861           | 372.71ms | 256        | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| expand_crate                                | 329.54ms  | 0.762           | 400.48ms | 1          | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| mir_built                                   | 283.94ms  | 0.656           | 373.03ms | 1294       | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n</code></pre></div>",
        "id": 215049372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023102
    },
    {
        "content": "<p>is there a way to say 'more debug than debug'? I don't care at <em>all</em> about optimizations for debug mode</p>",
        "id": 215049402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023140
    },
    {
        "content": "<p>and it looks like they're sucking up a good 10 seconds of the build</p>",
        "id": 215049431,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023175
    },
    {
        "content": "<p>here's <code>-Z print-mono-items</code> if it helps: <a href=\"https://gist.github.com/jyn514/909444d975dfd3b9ae5b5c5f4fdc36c0\">https://gist.github.com/jyn514/909444d975dfd3b9ae5b5c5f4fdc36c0</a></p>",
        "id": 215049618,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023363
    },
    {
        "content": "<p>Possibly <code>-C no-prepopulate-passes</code>?</p>",
        "id": 215049630,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1604023388
    },
    {
        "content": "<p>that already brought it down to 15 seconds :)</p>",
        "id": 215049733,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023521
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| Item                                        | Self time | % of total time | Time     | Item count | Cache hits | Blocked time | Incremental load time |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| LLVM_module_codegen_emit_obj                | 18.06s    | 44.331          | 18.06s   | 256        | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| LLVM_passes                                 | 7.97s     | 19.549          | 7.97s    | 1          | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| codegen_module                              | 6.90s     | 16.935          | 7.80s    | 256        | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| typeck                                      | 904.32ms  | 2.219           | 1.14s    | 1294       | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n| LLVM_module_codegen                         | 621.63ms  | 1.526           | 18.69s   | 256        | 0          | 0.00ns       | 0.00ns                |\n+---------------------------------------------+-----------+-----------------+----------+------------+------------+--------------+-----------------------+\n</code></pre></div>",
        "id": 215049740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023543
    },
    {
        "content": "<p>8 seconds on llvm is still a lot :/</p>",
        "id": 215049804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023608
    },
    {
        "content": "<p>is there a way to see if there's something being monomorphized over and over?</p>",
        "id": 215049810,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023620
    },
    {
        "content": "<p>cranelift?</p>",
        "id": 215049834,
        "sender_full_name": "Diggsey",
        "timestamp": 1604023666
    },
    {
        "content": "<p>lol well yes</p>",
        "id": 215049842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023676
    },
    {
        "content": "<p>and getting rid of some not-often used code brought it down another two seconds, let me feature-gate that</p>",
        "id": 215050018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604023849
    },
    {
        "content": "<p>let me try cargo-llvm lines too</p>",
        "id": 215050508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604024497
    },
    {
        "content": "<p>wow, that is ... significantly more than expected</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling docs-rs v0.6.0 (/home/joshua/src/rust/docs.rs)\n    Finished dev [unoptimized + debuginfo] target(s) in 34.50s\n  Lines          Copies        Function name\n  -----          ------        -------------\n  621273 (100%)  15169 (100%)  (TOTAL)\n   22828 (3.7%)   1224 (8.1%)  core::ptr::drop_in_place\n   10599 (1.7%)     17 (0.1%)  &lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct\n    7930 (1.3%)     26 (0.2%)  &lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed\n    6370 (1.0%)     35 (0.2%)  alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized\n    5399 (0.9%)     89 (0.6%)  core::result::Result&lt;T,E&gt;::map_err\n    5214 (0.8%)    105 (0.7%)  core::option::Option&lt;T&gt;::map\n    4845 (0.8%)     17 (0.1%)  &lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed\n    4680 (0.8%)     13 (0.1%)  docs_rs::web::page::web_page::WebPage::into_response\n</code></pre></div>",
        "id": 215050683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604024729
    },
    {
        "content": "<p>full log: <a href=\"https://gist.github.com/jyn514/3a99fca8e1d3a8048d6bba409b76b381\">https://gist.github.com/jyn514/3a99fca8e1d3a8048d6bba409b76b381</a></p>",
        "id": 215050731,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604024765
    },
    {
        "content": "<p>opened <a href=\"https://github.com/serde-rs/json/issues/727\">https://github.com/serde-rs/json/issues/727</a></p>",
        "id": 215051100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604025245
    },
    {
        "content": "<p>Also turning off debug info, if relevant</p>",
        "id": 215063032,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604043034
    },
    {
        "content": "<p>I'd like to have debug info if possible :/ maybe I can turn it down to <code>debuginfo = 1</code></p>",
        "id": 215065109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604045405
    },
    {
        "content": "<p>That helps. Also using <code>lld</code> instead of <code>ld</code></p>",
        "id": 215065154,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604045481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/215049402\">said</a>:</p>\n<blockquote>\n<p>is there a way to say 'more debug than debug'? I don't care at <em>all</em> about optimizations for debug mode</p>\n</blockquote>\n<p>FYI <code>LLVM_passes</code> includes both optimization passes as well as passes required to lower the IR to machine code. AFAIK, <code>debug</code> mode doesn't run any LLVM optimization passes.</p>",
        "id": 215093039,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1604064030
    },
    {
        "content": "<p>These are all general rust things though - is there any way to figure out why <a href=\"http://docs.rs\">docs.rs</a> takes so much <em>more</em> time than other projects?</p>",
        "id": 215093055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604064045
    },
    {
        "content": "<blockquote>\n<p>AFAIK debug mode doesn't run any LLVM optimization passes</p>\n</blockquote>\n<p>Hmm, ok. Maybe my benchmark was just off?</p>",
        "id": 215093100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604064082
    },
    {
        "content": "<p>Pass <code>-Z no-parallel-llvm -Z llvm-time-trace</code></p>",
        "id": 215093246,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1604064159
    },
    {
        "content": "<p>Then load <code>llvm_timings.json</code> up in chrome or speedscope</p>",
        "id": 215093273,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1604064177
    },
    {
        "content": "<p>That does the same thing as clang's <code>-ftime-trace</code> <a href=\"https://aras-p.info/blog/2019/01/16/time-trace-timeline-flame-chart-profiler-for-Clang/\">https://aras-p.info/blog/2019/01/16/time-trace-timeline-flame-chart-profiler-for-Clang/</a></p>",
        "id": 215093359,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1604064230
    },
    {
        "content": "<p>There's a lot of serde stuff in the llvm-lines output. Serde is surprisingly expensive in terms of downstream compile times. In rust-analyzer we've moved all the serde types and (de)serialization into a dedicated crate, maybe you can do something similar here?</p>",
        "id": 215093506,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604064298
    },
    {
        "content": "<blockquote>\n<p>In rust-analyzer we've moved all the serde types and (de)serialization into a dedicated crate</p>\n</blockquote>\n<p>We did? <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>. There are some <code>derive</code>s in <code>rust-analyzer</code>, <code>ide</code> and <code>project_model</code> (and also the proc macro stuff)</p>",
        "id": 215093822,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604064484
    },
    {
        "content": "<p>Hmm, or maybe not? I think <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> explained this to me once?</p>",
        "id": 215093965,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604064584
    },
    {
        "content": "<p>I don't think <em>everything</em> got moved to another crate though</p>",
        "id": 215093990,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604064598
    },
    {
        "content": "<p>Yeah, I guess so. There's also that LSP crate (<code>lsp-types</code>) which probably has most of the types that use <code>serde</code></p>",
        "id": 215094092,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604064642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/215093506\">said</a>:</p>\n<blockquote>\n<p>There's a lot of serde stuff in the llvm-lines output. Serde is surprisingly expensive in terms of downstream compile times. In rust-analyzer we've moved all the serde types and (de)serialization into a dedicated crate, maybe you can do something similar here?</p>\n</blockquote>\n<p>I'm hoping I can get rid of serde altogether: <a href=\"https://github.com/rust-lang/docs.rs/pull/1143\">https://github.com/rust-lang/docs.rs/pull/1143</a></p>",
        "id": 215095528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604065391
    },
    {
        "content": "<p>at least for most of the codebase</p>",
        "id": 215095542,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604065398
    },
    {
        "content": "<p>No, we didn't move serde types anywhere. They mostly were in the <code>lsp_types</code> crate from the start, and they do take absolutely unforgivable amount of time to compile.</p>",
        "id": 215103874,
        "sender_full_name": "matklad",
        "timestamp": 1604069218
    },
    {
        "content": "<p>Okay, then I'm just confused :D</p>",
        "id": 215103925,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604069244
    },
    {
        "content": "<p>I guess someone should red-eye a dynamically dispatched version of serde</p>",
        "id": 215103977,
        "sender_full_name": "matklad",
        "timestamp": 1604069272
    },
    {
        "content": "<p>there's a bunch of miniserdes out there, but they all feel like pocs mostly. I wonder what the optimized for compile-times serde would look like...</p>",
        "id": 215104110,
        "sender_full_name": "matklad",
        "timestamp": 1604069336
    },
    {
        "content": "<p>what's pocs?</p>",
        "id": 215104229,
        "sender_full_name": "oliver",
        "timestamp": 1604069397
    },
    {
        "content": "<p>proofs of concept</p>",
        "id": 215104281,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604069406
    },
    {
        "content": "<p>There's also <code>erased-serde</code>, but that's still <code>serde</code> underneath</p>",
        "id": 215104292,
        "sender_full_name": "cuviper",
        "timestamp": 1604069412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  so these are pocs aimed at reducing compile times?</p>",
        "id": 215104825,
        "sender_full_name": "oliver",
        "timestamp": 1604069667
    },
    {
        "content": "<p>Yup: <a href=\"https://github.com/dtolnay/miniserde\">https://github.com/dtolnay/miniserde</a>. And I think there was micro/nano/femto/pico serde or some such as well?</p>",
        "id": 215107606,
        "sender_full_name": "matklad",
        "timestamp": 1604070666
    },
    {
        "content": "<p>There are three factors here:</p>\n<ol>\n<li>the time it takes to build <code>serde</code> (mostly <code>syn</code> when using <code>#[derive]</code>)</li>\n<li>the time it takes for the serde proc macro to run</li>\n<li>the time it takes to compile the serde proc macro output</li>\n</ol>\n<p>For example, proc macros are now built in debug mode decreasing 1, but increasing 2</p>",
        "id": 215107788,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604070745
    },
    {
        "content": "<p>our issues are with 3.</p>",
        "id": 215107844,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604070770
    },
    {
        "content": "<p>fully 5% of all of <a href=\"http://docs.rs\">docs.rs</a> llvm-lines are from 3</p>",
        "id": 215107868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604070778
    },
    {
        "content": "<p>syn itself taking long to build is annoying but doesn't affect incremental a ton</p>",
        "id": 215107934,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604070814
    },
    {
        "content": "<p>with a trade-off of feature support</p>",
        "id": 215108049,
        "sender_full_name": "oliver",
        "timestamp": 1604070852
    },
    {
        "content": "<p>^(potential 4'th factor)</p>",
        "id": 215108087,
        "sender_full_name": "oliver",
        "timestamp": 1604070875
    },
    {
        "content": "<p>we don't need many features really</p>",
        "id": 215108153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604070899
    },
    {
        "content": "<p>I might check out miniserde</p>",
        "id": 215108168,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604070905
    },
    {
        "content": "<p>The <code>serde</code> deserialization code is quite flexible in what it accepts IIRC. I guess a hand-written version might compile faster.</p>",
        "id": 215108256,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604070954
    },
    {
        "content": "<p>It's also doing a lot of validations for e.g. repeated keys</p>",
        "id": 215108272,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604070964
    },
    {
        "content": "<p>my crate compiles faster because it is less seems obvious</p>",
        "id": 215108285,
        "sender_full_name": "oliver",
        "timestamp": 1604070967
    },
    {
        "content": "<p>not to interject ^.^</p>",
        "id": 215108394,
        "sender_full_name": "oliver",
        "timestamp": 1604071023
    },
    {
        "content": "<p>For 1, 2 you can also run <code>cargo expand</code> and check in the generated code</p>",
        "id": 215108414,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604071031
    },
    {
        "content": "<p>well, also switching to cargo_metadata is just a good idea</p>",
        "id": 215108472,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604071060
    },
    {
        "content": "<p>I discovered unwrap()s I didn't know I had because serde panics if the input is invalid</p>",
        "id": 215108502,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604071074
    },
    {
        "content": "<p>(or maybe returns an error?)</p>",
        "id": 215108560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604071087
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/docs.rs/pull/1143/files#diff-1f8c30ee3d5b1ac765c686840c3b659b0cb4fbc3245a0401f04eaaff939d8ae3R38-R40\">https://github.com/rust-lang/docs.rs/pull/1143/files#diff-1f8c30ee3d5b1ac765c686840c3b659b0cb4fbc3245a0401f04eaaff939d8ae3R38-R40</a></p>",
        "id": 215108633,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604071127
    },
    {
        "content": "<p>such that <code>failure</code> is never reached?</p>",
        "id": 215108908,
        "sender_full_name": "oliver",
        "timestamp": 1604071248
    },
    {
        "content": "<p>well I didn't realize <code>resolve</code> was optional</p>",
        "id": 215109017,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604071297
    },
    {
        "content": "<p>in our code it wasn't an <code>Option</code></p>",
        "id": 215109031,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604071302
    },
    {
        "content": "<p>code that resolves to <code>Option</code> is abstracted away in the compiler, no?</p>",
        "id": 215109652,
        "sender_full_name": "oliver",
        "timestamp": 1604071574
    },
    {
        "content": "<p>I don't understand the question</p>",
        "id": 215111323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604072334
    },
    {
        "content": "<p>the compiler can't check our types because this is in serialization</p>",
        "id": 215111342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604072342
    },
    {
        "content": "<p>the 'source of truth' is the documentation, not in rust code</p>",
        "id": 215111369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604072352
    },
    {
        "content": "<p>is there an expectation of a runtime cost to the <code>resolve</code> generating an <code>Option</code> type?</p>",
        "id": 215111656,
        "sender_full_name": "oliver",
        "timestamp": 1604072491
    },
    {
        "content": "<p>no ,there's a correctness issue</p>",
        "id": 215111865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604072573
    },
    {
        "content": "<p>we weren't checking for null</p>",
        "id": 215111876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604072579
    },
    {
        "content": "<p>huh, <code>ok_or</code> seems to be doing that</p>",
        "id": 215112277,
        "sender_full_name": "oliver",
        "timestamp": 1604072758
    },
    {
        "content": "<p>that's in the new code using cargo_metadata</p>",
        "id": 215112331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604072770
    },
    {
        "content": "<p>it wasn't htere before</p>",
        "id": 215112339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604072773
    },
    {
        "content": "<p>sorry it seemed like you linked to the update</p>",
        "id": 215112384,
        "sender_full_name": "oliver",
        "timestamp": 1604072802
    }
]