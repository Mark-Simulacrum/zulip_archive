[
    {
        "content": "<p>I am getting SIGSEGVs when building rustc during the stage 1 std build:</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0x73cac3)[0x7fd19f513ac3]\n/lib/x86_64-linux-gnu/libc.so.6(+0x3cef0)[0x7fd19eaa0ef0]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(_RNvMs1Q_NtNtCseIS259k75xz_12rustc_middle2ty7contextNtB6_6TyCtxt13intern_layout+0x24)[0x7fd1a1501b84]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0xade075)[0x7fd19f8b5075]\n[a lot of errors like this]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0xb851a4)[0x7fd19f95c1a4]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0xb9202e)[0x7fd19f96902e]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0xbd7c45)[0x7fd19f9aec45]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0xb851a4)[0x7fd19f95c1a4]\nrustc exited with signal: 11 (core dumped)\nerror: could not compile `core`\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/r/src/rust/rustc/build/bootstrap/debug/rustc --crate-name core --edition=2018 library/core/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C codegen-units=8 -C debuginfo=1 -C metadata=d2ad3ad0cb571346 -C extra-filename=-d2ad3ad0cb571346 --out-dir /home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -C incremental=/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/incremental -L dependency=/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps -L dependency=/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1-std/release/deps -Zsymbol-mangling-version=legacy -Zmacro-backtrace &#39;-Clink-args=-Wl,-rpath,$ORIGIN/../lib&#39; -Zsave-analysis -Cprefer-dynamic -Cllvm-args=-import-instr-limit=10 -Cembed-bitcode=yes &#39;-Zcrate-attr=doc(html_root_url=&quot;https://doc.rust-lang.org/nightly/&quot;)&#39; -Z binary-dep-depinfo` (exit status: 254)\nBuild completed unsuccessfully in 0:00:32\n</code></pre></div>\n<p>This is when doing <code>nice ./x.py test src/test/ui --test-args 89765 --bless</code>. The command previously worked fine, but now after switching back to the master branch and working on a different patch it always fails. I assume incremental is borked and somehow not able to fix itself?<br>\nAt this point all I want is to build rustc again but even <code>rm build/x86_64-unknown-linux-gnu/stage1* -rf</code> does not help... is there anything I can do short of <code>./x.py clean</code> (which I was trying to avoid due to the loooooong rebuild times)?</p>",
        "id": 261392764,
        "sender_full_name": "RalfJ",
        "timestamp": 1636856065
    },
    {
        "content": "<p>switching between branches used to work just fine, so even if this is borked incremental then there is a regression here since... the last time I did rustc work, i.e., quite a few months ago^^</p>",
        "id": 261392918,
        "sender_full_name": "RalfJ",
        "timestamp": 1636856366
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> have you seen this failure before?</p>",
        "id": 261392922,
        "sender_full_name": "RalfJ",
        "timestamp": 1636856387
    },
    {
        "content": "<p>CI has been failing with a similar error recently</p>",
        "id": 261393138,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636856706
    },
    {
        "content": "<p>we're seeing the same thing on CI as of recently</p>",
        "id": 261393139,
        "sender_full_name": "simulacrum",
        "timestamp": 1636856707
    },
    {
        "content": "<p>I wouldn't expect it to be related to incremental</p>",
        "id": 261393143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636856714
    },
    {
        "content": "<p>so in some sense this is great news</p>",
        "id": 261393146,
        "sender_full_name": "simulacrum",
        "timestamp": 1636856718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> it'd be great to snapshot your build directory as a first step -- but if we have a reproducer of any kind, it'd be useful to comment on <a href=\"https://github.com/rust-lang/rust/issues/90812\">https://github.com/rust-lang/rust/issues/90812</a></p>",
        "id": 261393205,
        "sender_full_name": "simulacrum",
        "timestamp": 1636856829
    },
    {
        "content": "<p>I am personally quite suspicious of <a href=\"https://github.com/rust-lang/rust/pull/89167\">https://github.com/rust-lang/rust/pull/89167</a> doing <em>something</em> to cause these</p>",
        "id": 261393271,
        "sender_full_name": "simulacrum",
        "timestamp": 1636856955
    },
    {
        "content": "<p>Hmm, I thought I remembered seeing this before simd landed</p>",
        "id": 261393346,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636857079
    },
    {
        "content": "<p>the so far earliest known is pointing at that PR, but yeah, if we can find something earlier seems good</p>",
        "id": 261393353,
        "sender_full_name": "simulacrum",
        "timestamp": 1636857108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/rustc.20SIGSEGV.20during.20'Building.20stage1.20std.20artifacts'/near/261393205\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> it'd be great to snapshot your build directory as a first step -- but if we have a reproducer of any kind, it'd be useful to comment on <a href=\"https://github.com/rust-lang/rust/issues/90812\">https://github.com/rust-lang/rust/issues/90812</a></p>\n</blockquote>\n<p>okay, I am putting it in a tarball</p>",
        "id": 261394202,
        "sender_full_name": "RalfJ",
        "timestamp": 1636858521
    },
    {
        "content": "<p>I dont really have any time to investigate this though... and I doubt this tarball is going to be useful on another machine</p>",
        "id": 261394209,
        "sender_full_name": "RalfJ",
        "timestamp": 1636858537
    },
    {
        "content": "<p>I saw that issue come up when I put the error I got into GH search, but since it only mentioned CI I didnt trust the hit...</p>",
        "id": 261394264,
        "sender_full_name": "RalfJ",
        "timestamp": 1636858585
    },
    {
        "content": "<p>uh wtf, in my 2nd build dir this is also happening even though I did <code>x.py clean</code> first...</p>",
        "id": 261394269,
        "sender_full_name": "RalfJ",
        "timestamp": 1636858614
    },
    {
        "content": "<p>maybe its a race condition, not something that depends on earlier state?</p>",
        "id": 261394275,
        "sender_full_name": "RalfJ",
        "timestamp": 1636858631
    },
    {
        "content": "<p>the only thing I did after the clean is <code>nice ./x.py test src/test/ui --test-args 89765 --bless</code></p>",
        "id": 261394336,
        "sender_full_name": "RalfJ",
        "timestamp": 1636858718
    },
    {
        "content": "<p>but I doubt that can reproduce the problem, since then more people would run into it^^</p>",
        "id": 261394341,
        "sender_full_name": "RalfJ",
        "timestamp": 1636858728
    },
    {
        "content": "<p>now I did an extra <code>rm build/x86_64-unknown-linux-gnu/ -rf</code> and I am still getting this. I just want to finish this PR and go to bed, but it seems I cant :(</p>",
        "id": 261394808,
        "sender_full_name": "RalfJ",
        "timestamp": 1636859444
    },
    {
        "content": "<p>very interesting, rustc master builds fine but my local commit 4869098d160 keeps failing...</p>",
        "id": 261395525,
        "sender_full_name": "RalfJ",
        "timestamp": 1636860549
    },
    {
        "content": "<p>that commit does nothing interesting, you can find it at <a href=\"https://github.com/RalfJung/rust/commit/4869098d160\">https://github.com/RalfJung/rust/commit/4869098d160</a></p>",
        "id": 261395584,
        "sender_full_name": "RalfJ",
        "timestamp": 1636860638
    },
    {
        "content": "<p>In the same build dir, without cleaning in between, I</p>\n<ul>\n<li>ran my x.py command on master (<a href=\"https://github.com/rust-lang/rust/commit/1b12d01903293453dd94aa170c82caf94415629f\">1b12d01903293453dd94aa170c82caf94415629f</a>), and it worked</li>\n<li>git reset to that commit, build again, and it failed</li>\n<li>git reset back to master, build again, and it worked</li>\n</ul>\n<p>wtf</p>",
        "id": 261395649,
        "sender_full_name": "RalfJ",
        "timestamp": 1636860743
    },
    {
        "content": "<p>I might suggest running under valgrind? But feels slow - it might help uncover root cause of whatever is going on since it looks like memory corruption of some sort</p>",
        "id": 261395811,
        "sender_full_name": "simulacrum",
        "timestamp": 1636861054
    },
    {
        "content": "<p>The problematic commit also <a href=\"https://github.com/rust-lang/rust/pull/90895#issuecomment-968199091\">fails on CI</a>.</p>",
        "id": 261396025,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861435
    },
    {
        "content": "<p>how do I run rustc (invoked from x.py) under valgrind?</p>",
        "id": 261396067,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861445
    },
    {
        "content": "<p>Hm</p>",
        "id": 261396076,
        "sender_full_name": "simulacrum",
        "timestamp": 1636861462
    },
    {
        "content": "<p>as I said I dont have time to really dig into this -- I can copy-paste commands you send me, but maybe if you have a Linux box (Debian testing, in case it matters) you could try reproducing with the commit that reliably cuases the issue for me?</p>",
        "id": 261396084,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861489
    },
    {
        "content": "<p>Yeah, I'll try tomorrow morning</p>",
        "id": 261396087,
        "sender_full_name": "simulacrum",
        "timestamp": 1636861501
    },
    {
        "content": "<p>CI failing on it too is promising</p>",
        "id": 261396094,
        "sender_full_name": "simulacrum",
        "timestamp": 1636861513
    },
    {
        "content": "<p>yeah</p>",
        "id": 261396098,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861520
    },
    {
        "content": "<p>meanwhile Ill just see what happens when I cherry-pick this commit on slightly older rustc master</p>",
        "id": 261396101,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861533
    },
    {
        "content": "<p>(right before and right after the core::simd PR)</p>",
        "id": 261396103,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861545
    },
    {
        "content": "<p>Thanks</p>",
        "id": 261396170,
        "sender_full_name": "simulacrum",
        "timestamp": 1636861613
    },
    {
        "content": "<p><a href=\"https://github.com/RalfJung/rust/commit/22df292893a3e927af4f87dc8e9f7df92bd85d1b\">https://github.com/RalfJung/rust/commit/22df292893a3e927af4f87dc8e9f7df92bd85d1b</a> also fails here and thats before the portable SIMD PR</p>",
        "id": 261396237,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861713
    },
    {
        "content": "<p>I did a <code>./x.py clean</code> before trying the build</p>",
        "id": 261396243,
        "sender_full_name": "RalfJ",
        "timestamp": 1636861730
    },
    {
        "content": "<p>I guess maybe try going earlier? I think our start point is probably around the 10th - but also I can [try to] do this tomorrow, I know it's late for you :)</p>",
        "id": 261396333,
        "sender_full_name": "simulacrum",
        "timestamp": 1636861882
    },
    {
        "content": "<p>I'm able to reproduce using Ralf's PR.  The seg fault happened while interning some value.</p>",
        "id": 261396491,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636862117
    },
    {
        "content": "<p>I reverted <a href=\"https://github.com/rust-lang/rust/issues/89167\">#89167</a> and it didn't help.</p>",
        "id": 261396509,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636862152
    },
    {
        "content": "<p>Is there some way to demangle the rustc symbols?  It looks like the new scheme was enabled for the compiler, but tools like gdb don't handle it.  Symbols like <code>_RINvXs0_NtNtNtCsk9xi4cc0683_4core4iter8adapters3mapINtB6_3MapINtNtNtBc_3ops5range5RangejENCNvYINtNtNtCsffFzDEjmlmy_16rustc_const_eval9interpret8validity15ValidityVisitorNtNtCscV2rBcrSvbv_19rustc_mir_transform10const_prop16ConstPropMachineEINtNtB1z_7visitor12ValueVisitorB2H_E10walk_value0ENtNtNtBa_6traits8iterator8Iterator4folduNCINvNvB4D_8for_each4callINtNtBc_6result6ResultNtNtB1z_7operand4OpTyNtNtNtNtCsgFSsypdB2z9_12rustc_middle3mir9interpret5error15InterpErrorInfoENCNvXs_NtNtCshGwxOtNdG9E_5alloc3vec11spec_extendINtB7I_3VecB5G_EINtB7G_10SpecExtendB5G_BN_E11spec_extend0E0EB2L_</code> are a bit hard to read.</p>",
        "id": 261396588,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636862240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/rustc.20SIGSEGV.20during.20'Building.20stage1.20std.20artifacts'/near/261396333\">said</a>:</p>\n<blockquote>\n<p>I know it's late for you :)</p>\n</blockquote>\n<p>(FWIW I live in Boston these days so it's not so late yet ;)</p>",
        "id": 261396820,
        "sender_full_name": "RalfJ",
        "timestamp": 1636862487
    },
    {
        "content": "<p>cherry-picked it on top of <a href=\"https://github.com/rust-lang/rust/commit/14a2fd640e0df9ee8cc1e04280b0c3aff93c42da\">14a2fd640e0df9ee8cc1e04280b0c3aff93c42da</a>, same error still</p>",
        "id": 261396881,
        "sender_full_name": "RalfJ",
        "timestamp": 1636862538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't think your PR is related to the CI issues.  It looks like it is entering an infinite loop, overflowing the stack.  it seems to be stuck on <code>read_discriminant_value</code> of <code>panicking::AssertKind</code>.</p>",
        "id": 261398907,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636865838
    },
    {
        "content": "<p>Good point, I almost forget that we are using segmented stacks so stack overflow exhibits as segfault</p>",
        "id": 261400014,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636867707
    },
    {
        "content": "<p>We could probably expose the functions that tell the segv handler where the stack guard is.</p>",
        "id": 261404712,
        "sender_full_name": "cuviper",
        "timestamp": 1636876370
    },
    {
        "content": "<p>cc <a href=\"#narrow/stream/242791-t-infra/topic/random.20segfaults.20and.20crashes\">https://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra/topic/random.20segfaults.20and.20crashes</a></p>",
        "id": 261408374,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1636882686
    },
    {
        "content": "<p>Even without segmented stacks the segv handler is a best effort kinda thing and may fail to report a stack overflow.</p>",
        "id": 261408785,
        "sender_full_name": "nagisa",
        "timestamp": 1636883406
    },
    {
        "content": "<p>I don't think it makes sense to expose the rust runtime's handler; rather stacker could set up one such handler by itself.</p>",
        "id": 261408796,
        "sender_full_name": "nagisa",
        "timestamp": 1636883456
    },
    {
        "content": "<p>I filled myself an issue at <a href=\"https://github.com/rust-lang/stacker/issues/59\">https://github.com/rust-lang/stacker/issues/59</a></p>",
        "id": 261409006,
        "sender_full_name": "nagisa",
        "timestamp": 1636883847
    },
    {
        "content": "<p>rustc-driver also install its own sigsegv handler to print stacktrace</p>",
        "id": 261413459,
        "sender_full_name": "tm",
        "timestamp": 1636890739
    },
    {
        "content": "<p>Anyway, this issue is separate since the validation in the failing commit is circular, i.e., reading discriminant checks validity of variant, which reads the discriminant, which checks validity ...</p>",
        "id": 261413639,
        "sender_full_name": "tm",
        "timestamp": 1636891075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/122651-general/topic/rustc.20SIGSEGV.20during.20'Building.20stage1.20std.20artifacts'/near/261398907\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> I don't think your PR is related to the CI issues.  It looks like it is entering an infinite loop, overflowing the stack.  it seems to be stuck on <code>read_discriminant_value</code> of <code>panicking::AssertKind</code>.</p>\n</blockquote>\n<p>oh I see... d'oh. yeah that makes sense.</p>",
        "id": 261423074,
        "sender_full_name": "RalfJ",
        "timestamp": 1636903769
    },
    {
        "content": "<p>but then why is it printing all those weird other things?</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0x73cac3)[0x7fd19f513ac3]\n/lib/x86_64-linux-gnu/libc.so.6(+0x3cef0)[0x7fd19eaa0ef0]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(_RNvMs1Q_NtNtCseIS259k75xz_12rustc_middle2ty7contextNtB6_6TyCtxt13intern_layout+0x24)[0x7fd1a1501b84]\n/home/r/src/rust/rustc/build/x86_64-unknown-linux-gnu/stage1/lib/librustc_driver-47d0b6818de97398.so(+0xade075)[0x7fd19f8b5075]\n</code></pre></div>",
        "id": 261423213,
        "sender_full_name": "RalfJ",
        "timestamp": 1636903979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I believe there is a sigsegv signal handler in rustc that attempts to dump the stack.  However, it seems to be failing to get the symbols.</p>",
        "id": 261423346,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636904214
    },
    {
        "content": "<p>also IMO if this is supposed to be a stack dump it should say so</p>",
        "id": 261423370,
        "sender_full_name": "RalfJ",
        "timestamp": 1636904280
    },
    {
        "content": "<p>like, it should say \"Stack dump:\\n\" and then print all this random-looking stuff</p>",
        "id": 261423420,
        "sender_full_name": "RalfJ",
        "timestamp": 1636904321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> run it through rustfilt: <code>&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;usize&gt;, &lt;rustc_const_eval::interpret::validity::ValidityVisitor&lt;rustc_mir_transform::const_prop::ConstPropMachine&gt; as rustc_const_eval::interpret::visitor::ValueVisitor&lt;rustc_mir_transform::const_prop::ConstPropMachine&gt;&gt;::walk_value::{closure#0}&gt; as core::iter::traits::iterator::Iterator&gt;::fold::&lt;(), core::iter::traits::iterator::Iterator::for_each::call&lt;core::result::Result&lt;rustc_const_eval::interpret::operand::OpTy, rustc_middle::mir::interpret::error::InterpErrorInfo&gt;, &lt;alloc::vec::Vec&lt;core::result::Result&lt;rustc_const_eval::interpret::operand::OpTy, rustc_middle::mir::interpret::error::InterpErrorInfo&gt;&gt; as alloc::vec::spec_extend::SpecExtend&lt;core::result::Result&lt;rustc_const_eval::interpret::operand::OpTy, rustc_middle::mir::interpret::error::InterpErrorInfo&gt;, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;usize&gt;, &lt;rustc_const_eval::interpret::validity::ValidityVisitor&lt;rustc_mir_transform::const_prop::ConstPropMachine&gt; as rustc_const_eval::interpret::visitor::ValueVisitor&lt;rustc_mir_transform::const_prop::ConstPropMachine&gt;&gt;::walk_value::{closure#0}&gt;&gt;&gt;::spec_extend::{closure#0}&gt;::{closure#0}&gt;</code></p>",
        "id": 261443582,
        "sender_full_name": "nnethercote",
        "timestamp": 1636931551
    },
    {
        "content": "<p>Quite the mouthful</p>",
        "id": 261443587,
        "sender_full_name": "nnethercote",
        "timestamp": 1636931562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> Thanks!</p>",
        "id": 261444077,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636932171
    }
]