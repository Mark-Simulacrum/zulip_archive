[
    {
        "content": "<p>I am doing an expensive calculation, and using threads isn't helping at all, so I am wondering if I am doing something wrong. <br>\nHere is the single threaded version:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn is_square_free(n: u128) -&gt; bool {\n    const MAX: u128 = 2_u128.pow(126);\n    if n &gt; MAX {\n        panic!(&quot;cannot work with numbers larger that {} \\r\\n&quot;, MAX);\n    }\n    // Enough to test 4 followed by all odd squares that are less than n.\n    !iter::once(2_u128)\n        .chain((3..n).into_iter().step_by(2))\n        .map(|i| i.pow(2))\n        .take_while(|i| i &lt;= &amp;n)\n        .any(|i| (n % i) == 0)\n}\n</code></pre></div>\n<p>and here is my attempt at making a threaded version:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn is_square_free_piece(n: u128, from: u128, to: u128) -&gt; bool {\n    if from &lt;= 2 &amp;&amp; ((n % 4) == 0) {\n        return false;\n    }\n    !(from..to)\n        .into_iter()\n        .step_by(2)\n        .map(|i| i.pow(2))\n        .take_while(|i| (i &lt;= &amp;n))\n        .any(|i| (n % i) == 0)\n}\n\n\npub fn concurrent_is_square_free(n: u128, num_threads: u32) -&gt; bool {\n    let num_threads = num_threads as u128;\n    let (sender, receiver) = std::sync::mpsc::channel();\n    let iter = (1_u128..=num_threads).into_iter();\n    let elements_per_thread = n/(num_threads);\n    for i in iter {\n        let from = (i-1) *elements_per_thread + 2;\n        let to = if i != num_threads {i * elements_per_thread + 2}else {n};\n        let sender_clone = sender.clone();\n        std::thread::spawn(move || {\n            if !is_square_free_piece(n, from, to){\n                sender_clone.send(false).unwrap();\n            }\n            drop(sender_clone);\n        });\n    }\n    drop(sender);\n\n    if receiver.recv().is_ok(){\n        false\n    } else {\n        true\n    }\n}\n</code></pre></div>\n<p>when n = 2_u128.pow(65) - 49, the single threaded and the multi-threaded take approximately the same amount of time (around 65 seconds on my computer), and this is the case no matter how few or many threads i choose. Can anyone please tell me what I am doing wrong, or explain why this task is not faster with threads?</p>",
        "id": 238981356,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1621174218
    },
    {
        "content": "<p>If it is of any help here is a snippet of what the <code>lscpu</code>command yields:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ lscpu\nArchitecture:                    x86_64\nCPU op-mode(s):                  32-bit, 64-bit\nByte Order:                      Little Endian\nAddress sizes:                   39 bits physical, 48 bits virtual\nCPU(s):                          8\nOn-line CPU(s) list:             0-7\nThread(s) per core:              2\nCore(s) per socket:              4\nSocket(s):                       1\nNUMA node(s):                    1\nVendor ID:                       GenuineIntel\nCPU family:                      6\nModel:                           142\nModel name:                      Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz\n</code></pre></div>",
        "id": 238981941,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1621174831
    },
    {
        "content": "<p>How many threads are you using?</p>",
        "id": 238982116,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621175042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Help.20with.20threads/near/238982116\">said</a>:</p>\n<blockquote>\n<p>How many threads are you using?</p>\n</blockquote>\n<p>I have tried with 2, 4 ,6 and 8. All take about the same amount of time.</p>",
        "id": 238982179,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1621175090
    },
    {
        "content": "<p>I also tried using the channel from crossbeam, but that didn't speed things up at all. When using par_iter from the rayon crate I get about 3x the performance, but those iterators don't allow me to call .step_by which is why I tried parallelizing my implementation myself.</p>",
        "id": 238982289,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1621175212
    },
    {
        "content": "<p>Your first thread does all the work</p>",
        "id": 238982746,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621175640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Help.20with.20threads/near/238982746\">said</a>:</p>\n<blockquote>\n<p>Your first thread does all the work</p>\n</blockquote>\n<p>Why?</p>",
        "id": 238982830,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1621175667
    },
    {
        "content": "<p>Because <code>i</code> goes only to <code>sqrt(n)</code>, while <code>from..to</code> covers <code>2..n</code></p>",
        "id": 238982850,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621175705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Help.20with.20threads/near/238982850\">said</a>:</p>\n<blockquote>\n<p>Because <code>i</code> goes only to <code>sqrt(n)</code>, while <code>from..to</code> covers <code>1..n</code></p>\n</blockquote>\n<p>Lol silly me. Thank you for your help :) Will try to think a bit harder before I ask the next time.</p>",
        "id": 238982884,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1621175743
    },
    {
        "content": "<p>So if <code>sqrt(n) &lt; n / num_threads</code> (or <code>num_threads &lt; sqrt(n)</code>), the first thread does everything, while the rest stop at the first number. You can see this easily if you add some log messages when a thread starts and stops.</p>",
        "id": 238982947,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621175768
    },
    {
        "content": "<p>Try splitting <code>[2; sqrt(n)]</code> into <code>num_threads</code> intervals</p>",
        "id": 238982992,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621175810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Help.20with.20threads/near/238982992\">said</a>:</p>\n<blockquote>\n<p>Try splitting <code>[2; sqrt(n)]</code> into <code>num_threads</code> intervals</p>\n</blockquote>\n<p>That made almost a 6 x improvement. Thank you :)</p>",
        "id": 238983269,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1621176092
    },
    {
        "content": "<p>Seems reasonable for a 4C8T CPU</p>",
        "id": 238983354,
        "sender_full_name": "Laurențiu",
        "timestamp": 1621176153
    },
    {
        "content": "<p>This is also a good reason to use something like rayon to do the split for you.</p>",
        "id": 239030609,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621224301
    }
]