[
    {
        "content": "<p>Hi everyone! I have a question and <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> told me this is the right place. I plan to make a crate to gamify the compiler, as per one of Esteban's old tweets. </p>\n<p>Every time the user would be doing an error, an achievement would be unlocked. It would be for example :<br>\n\"Congratulations, you unlocked Types differ in mutability <span aria-label=\"star\" class=\"emoji emoji-2b50\" role=\"img\" title=\"star\">:star:</span> <span aria-label=\"shooting star\" class=\"emoji emoji-1f320\" role=\"img\" title=\"shooting star\">:shooting_star:</span> !!!\". The achievements would be saved locally (in a first step), and the user could see how many achievement they unlocked, their progress, how many errors are left, how rare the error is.... Some Pokemon style fun.</p>\n<p>How can a crate interact with the compiler in this manner ?<br>\nI never tried this kind of project and I don't know how I can start. I would really appreciate any kind of pointers on system design on this one <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>.</p>",
        "id": 264634779,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639331516
    },
    {
        "content": "<p>want to help, but going offline today.</p>\n<p>if i forget this feel free to ping me in a few days. having that seems rly fun ^^</p>",
        "id": 264637816,
        "sender_full_name": "lcnr",
        "timestamp": 1639335140
    },
    {
        "content": "<p>I can't help with the compiler portion, but as a source of inspiration, I would suggest looking at Habitica, they really nail gamifying.</p>",
        "id": 264637883,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1639335226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/264637816\">said</a>:</p>\n<blockquote>\n<p>want to help, but going offline today.</p>\n<p>if i forget this feel free to ping me in a few days. having that seems rly fun ^^</p>\n</blockquote>\n<p>Thanks a lot!</p>\n<p><span class=\"user-mention\" data-user-id=\"252217\">@Khionu Sybiern</span> I will look at that for inspiration, I will of course do something super simple in the start...</p>",
        "id": 264638825,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639336452
    },
    {
        "content": "<p>Of course, iterative progress is best progress</p>",
        "id": 264638833,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1639336483
    },
    {
        "content": "<p>I think this could be implemented in cargo. Except for maybe keeping the achievements and errors in sync. Cargo can read the error code.</p>",
        "id": 264638991,
        "sender_full_name": "bjorn3",
        "timestamp": 1639336696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/264638991\">said</a>:</p>\n<blockquote>\n<p>I think this could be implemented in cargo. Except for maybe keeping the achievements and errors in sync. Cargo can read the error code.</p>\n</blockquote>\n<p>Do you mean that it would not be dependent on the compiler, but cargo?</p>",
        "id": 264639321,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639337165
    },
    {
        "content": "<p>ICE being the coolest achievement, of course</p>",
        "id": 264644684,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639344718
    },
    {
        "content": "<p>do we have an ICE index? :P</p>",
        "id": 264646019,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1639346547
    },
    {
        "content": "<p>except for glacier</p>",
        "id": 264646043,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1639346594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Also one of the quickest to achieve if you find the debugging aid: <code>break rust;</code>.</p>",
        "id": 264647412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639348204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461042\">@Ai Maiga</span> This reminds me of the \"achievement hunt\" mode of various games. Sounds like a fun thing to play, maybe even with something like the playground.</p>",
        "id": 264647450,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639348279
    },
    {
        "content": "<p>I do think it doesn't need to be in rustc directly. It seems sufficient to just read the error code.</p>",
        "id": 264647506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639348332
    },
    {
        "content": "<p>A long term idea (a.k.a. one I'll never do) I've had would be to anonymize/rollup errors from the playground and track them. \"Over the last 7 days, users have submitted 1000 programs that compiled, and 100000 that failed to compile {breakdown of error IDs here}\"</p>",
        "id": 264649247,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639350850
    },
    {
        "content": "<blockquote>\n<p>I do think it doesn't need to be in rustc directly. It seems sufficient to just read the error code.</p>\n</blockquote>\n<p>Yeah, I think this should be an external tool, not everyone may want the errors to be gamified.</p>",
        "id": 264650252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639352353
    },
    {
        "content": "<p>I <em>think</em> OP's idea was to have a sort of \"compiler plugin\" for this—i.e., a crate that invokes the compiler through <code>rustc_private</code>. I agree that it'd probably be easier to implement this as a tool that greps the rustc error output.</p>",
        "id": 264652498,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639355496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/264652498\">said</a>:</p>\n<blockquote>\n<p>I <em>think</em> OP's idea was to have a sort of \"compiler plugin\" for this—i.e., a crate that invokes the compiler through <code>rustc_private</code>. I agree that it'd probably be easier to implement this as a tool that greps the rustc error output.</p>\n</blockquote>\n<p>Yes exactly, I did not mean to interfere with the compiler, but find the best way to read from the compiler / interact with the compiler. I absoulutely want to implement it the easiest way possible.</p>",
        "id": 264684084,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639389822
    },
    {
        "content": "<p>Probably the most straight forward would be shelling out <code>rustc --error-format=json file.rs</code> then writing deriving deserialize for the blob, which rustc spits out in <code>\\n</code> separated chunks (pretty sure this is how it does it). <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_errors/src/json.rs#L188\">Here</a> is the relevant struct[s].</p>\n<p>That way you could avoid forcing users to have a specific version of the nightly compiler/toolchain to use <code>rustc_private</code> stuff if you impl'ed it that way.</p>",
        "id": 264759733,
        "sender_full_name": "DevinR528",
        "timestamp": 1639424796
    },
    {
        "content": "<p>You could also call cargo with <code>--message-format json</code>.</p>",
        "id": 264759885,
        "sender_full_name": "bjorn3",
        "timestamp": 1639424876
    },
    {
        "content": "<p>Yeah ^^ that would be easier, since you wouldn't have to figure out the package structure</p>",
        "id": 264759970,
        "sender_full_name": "DevinR528",
        "timestamp": 1639424906
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"243877\">@DevinR528</span> and everyone, thanks for the help!!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"243877\">DevinR528</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/264759733\">said</a>:</p>\n<blockquote>\n<p>Probably the most straight forward would be shelling out <code>rustc --error-format=json file.rs</code> then writing deriving deserialize for the blob, which rustc spits out in <code>\\n</code> separated chunks (pretty sure this is how it does it). <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_errors/src/json.rs#L188\">Here</a> is the relevant struct[s].</p>\n<p>That way you could avoid forcing users to have a specific version of the nightly compiler/toolchain to use <code>rustc_private</code> stuff if you impl'ed it that way.</p>\n</blockquote>\n<p>Yes this is basically what I did yesterday. <code>--error-format=json</code> does not seem to work anymore, so I did output filter with <code>--message-format json</code> and then serde to see what is the <a href=\"https://github.com/Dajamante/gamepiler/blob/244f10f98c5ecd9932ea56bc7a169146b9c0c08c/src/main.rs\">error</a>.</p>\n<p>But then I still don't know how I would process: shall I read the output of the terminal of another program? I can't really force the user  to use <code>json</code> formatting in their output?</p>",
        "id": 264821353,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639467453
    },
    {
        "content": "<p>You can use <code>--json-format=diagnostic-rendered-ansi</code> (or whatever the flag name is) and then reprint the text it shows while still being able to process the error code</p>",
        "id": 264821606,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639467714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/264821606\">said</a>:</p>\n<blockquote>\n<p>You can use <code>--json-format=diagnostic-rendered-ansi</code> (or whatever the flag name is) and then reprint the text it shows while still being able to process the error code</p>\n</blockquote>\n<p>Do you mean that the user would always need to do that? Or what do you mean exactly?<br>\nI think it is easier to read directly from compiler output but I did not manage to do that yesterday.</p>",
        "id": 264822484,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639468518
    },
    {
        "content": "<p>I think it should work something like the user runs <code>cargo game build</code> and then <code>cargo-game</code> would run <code>cargo build --message-format json</code>, pass through the actual error messages and check for achievements.</p>",
        "id": 264836330,
        "sender_full_name": "bjorn3",
        "timestamp": 1639477415
    },
    {
        "content": "<p>Well I don't know if the work is going forward but I am learning ... something <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"/user_uploads/4715/RvS23jy4pSxrOGr6nMZuNdhp/Screenshot-2021-12-14-at-15.20.36.png\">Screenshot-2021-12-14-at-15.20.36.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/RvS23jy4pSxrOGr6nMZuNdhp/Screenshot-2021-12-14-at-15.20.36.png\" title=\"Screenshot-2021-12-14-at-15.20.36.png\"><img src=\"/user_uploads/4715/RvS23jy4pSxrOGr6nMZuNdhp/Screenshot-2021-12-14-at-15.20.36.png\"></a></div>",
        "id": 264907904,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639508209
    },
    {
        "content": "<p>My guess is that <code>cargo run</code> compiles and runs your gamepiler, which in turn runs itself, which runs itself again, ... infinitely?</p>",
        "id": 264912784,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639510049
    },
    {
        "content": "<p>I wonder what prints that \"infinite recursion detected\" message...</p>",
        "id": 264915010,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639511155
    },
    {
        "content": "<p>maybe rustup? <a href=\"https://github.com/rust-lang/rustup/blob/c33cb5ed7fc2854eab7f3cfb1fa6d012b13a8f6c/src/bin/rustup-init.rs#L126\">https://github.com/rust-lang/rustup/blob/c33cb5ed7fc2854eab7f3cfb1fa6d012b13a8f6c/src/bin/rustup-init.rs#L126</a></p>",
        "id": 264915847,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639511598
    },
    {
        "content": "<p>the only relevant occurrence I saw from a github search</p>",
        "id": 264915908,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639511632
    },
    {
        "content": "<p>That sounds like it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 264916546,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639511918
    },
    {
        "content": "<blockquote>\n<p>How can a crate interact with the compiler in this manner ?</p>\n</blockquote>\n<p>I think maybe a language server protocol client is a nice candidate</p>",
        "id": 264964808,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1639543127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/264912784\">said</a>:</p>\n<blockquote>\n<p>My guess is that <code>cargo run</code> compiles and runs your gamepiler, which in turn runs itself, which runs itself again, ... infinitely?</p>\n</blockquote>\n<p>The gamepiler was supposed to call a file in another directory the <code>guessing_game</code>, so I am totally puzzled.</p>",
        "id": 264996036,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639567722
    },
    {
        "content": "<p>Good Folks of Rust, Progress <span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> <span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> </p>\n<p><a href=\"/user_uploads/4715/UhEV6N8ywQyL3-Uu_hoZK-80/Screenshot-2021-12-15-at-12.20.08.png\">Screenshot-2021-12-15-at-12.20.08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UhEV6N8ywQyL3-Uu_hoZK-80/Screenshot-2021-12-15-at-12.20.08.png\" title=\"Screenshot-2021-12-15-at-12.20.08.png\"><img src=\"/user_uploads/4715/UhEV6N8ywQyL3-Uu_hoZK-80/Screenshot-2021-12-15-at-12.20.08.png\"></a></div>",
        "id": 264996244,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639567842
    },
    {
        "content": "<p>Too bad I have classes this afternoon, I am super excited to start the graphs</p>",
        "id": 264996289,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639567887
    },
    {
        "content": "<p>Progress today, if somebody is game for code reviews soon... let me know :)</p>\n<p><a href=\"/user_uploads/4715/AFzEsENzykNFLJaaWcQYvznK/Screenshot-2021-12-15-at-15.20.46.png\">Screenshot-2021-12-15-at-15.20.46.png</a> <a href=\"/user_uploads/4715/L0XPZh4r8SRu46xhqpNPNojv/Screenshot-2021-12-15-at-15.21.19.png\">Screenshot-2021-12-15-at-15.21.19.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/AFzEsENzykNFLJaaWcQYvznK/Screenshot-2021-12-15-at-15.20.46.png\" title=\"Screenshot-2021-12-15-at-15.20.46.png\"><img src=\"/user_uploads/4715/AFzEsENzykNFLJaaWcQYvznK/Screenshot-2021-12-15-at-15.20.46.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/L0XPZh4r8SRu46xhqpNPNojv/Screenshot-2021-12-15-at-15.21.19.png\" title=\"Screenshot-2021-12-15-at-15.21.19.png\"><img src=\"/user_uploads/4715/L0XPZh4r8SRu46xhqpNPNojv/Screenshot-2021-12-15-at-15.21.19.png\"></a></div>",
        "id": 265019199,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639579300
    },
    {
        "content": "<p>Nice!!</p>\n<blockquote>\n<p>if somebody is game for code reviews soon</p>\n</blockquote>\n<p>Is it some where to check out?</p>",
        "id": 265028315,
        "sender_full_name": "DevinR528",
        "timestamp": 1639583032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243877\">DevinR528</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265028315\">said</a>:</p>\n<blockquote>\n<p>Nice!!</p>\n<blockquote>\n<p>if somebody is game for code reviews soon</p>\n</blockquote>\n<p>Is it some where to check out?</p>\n</blockquote>\n<p>Thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> ! Not yet, there is too much maintenance atm :) But I will remember when it is time :)</p>",
        "id": 265043652,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639588949
    },
    {
        "content": "<p>This really sounds fun, and I think that it could help ease the pain that is getting repeated errors when a user is starting out.</p>",
        "id": 265088170,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1639609058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451171\">Patrick Poitras</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265088170\">said</a>:</p>\n<blockquote>\n<p>This really sounds fun, and I think that it could help ease the pain that is getting repeated errors when a user is starting out.</p>\n</blockquote>\n<p>yeah you should get an achievement for 15 in a row and something cute</p>",
        "id": 265159843,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639663414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> Hello! Regarding your tips yesterday... how can I get the origin of an error? I am using <code>cargo_metadata</code>, I can't see anything that looks that the error source.</p>",
        "id": 265160425,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1639663675
    },
    {
        "content": "<p>With <code>--message-format=json</code>, you have access to an error's spans: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f119dc0dd19fecea1a654035fdcdbf5e\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f119dc0dd19fecea1a654035fdcdbf5e</a></p>",
        "id": 265303129,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639751782
    },
    {
        "content": "<p>I would take a look at how rustfix does too. Seems like it's kinda close to what you want in the end (identifying errors)</p>",
        "id": 265379005,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639786279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265303129\">said</a>:</p>\n<blockquote>\n<p>With <code>--message-format=json</code>, you have access to an error's spans: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f119dc0dd19fecea1a654035fdcdbf5e\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f119dc0dd19fecea1a654035fdcdbf5e</a></p>\n</blockquote>\n<p>I don't get it. Do you mean that one of those fields is giving the type error?</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n        &quot;suggestion_applicability&quot;: null,\n        &quot;line_start&quot;: 1,\n        &quot;file_name&quot;: &quot;src/lib.rs&quot;,\n        &quot;line_end&quot;: 1,\n        &quot;byte_start&quot;: 15,\n        &quot;expansion&quot;: null,\n        &quot;label&quot;: &quot;expected `()`, found integer&quot;,\n        &quot;text&quot;: [\n            {\n                &quot;text&quot;: &quot;const _ : () = 42 ;&quot;,\n                &quot;highlight_start&quot;: 16,\n                &quot;highlight_end&quot;: 18\n            }\n        ],\n        &quot;column_end&quot;: 18,\n        &quot;is_primary&quot;: true,\n        &quot;column_start&quot;: 16,\n        &quot;byte_end&quot;: 17,\n        &quot;suggested_replacement&quot;: null\n    }\n</code></pre></div>",
        "id": 265675006,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640086315
    },
    {
        "content": "<p>Oh, you mean the error code?</p>",
        "id": 265675099,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640086376
    },
    {
        "content": "<p>Yeah, it's in the JSON</p>",
        "id": 265675194,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640086452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265675099\">said</a>:</p>\n<blockquote>\n<p>Oh, you mean the error code?</p>\n</blockquote>\n<p>I have the error code, I mean that <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> suggested that I could get the error category. For example, what category is <code>E0004</code></p>",
        "id": 265675228,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640086495
    },
    {
        "content": "<p>Let me grab an old tweet :</p>\n<p><a href=\"/user_uploads/4715/DJ84nmYniugmrPEABcJsImuS/Screenshot-2021-12-16-at-14.51.08.png\">Screenshot-2021-12-16-at-14.51.08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/DJ84nmYniugmrPEABcJsImuS/Screenshot-2021-12-16-at-14.51.08.png\" title=\"Screenshot-2021-12-16-at-14.51.08.png\"><img src=\"/user_uploads/4715/DJ84nmYniugmrPEABcJsImuS/Screenshot-2021-12-16-at-14.51.08.png\"></a></div>",
        "id": 265675269,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640086522
    },
    {
        "content": "<p>It's one level higher, not the spans</p>",
        "id": 265675451,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640086660
    },
    {
        "content": "<p>message.code.code</p>",
        "id": 265675459,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640086672
    },
    {
        "content": "<p>But that's just the code, not the category. I don't think there's any category in there.</p>",
        "id": 265675523,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640086700
    },
    {
        "content": "<p>oh yeah, uh</p>",
        "id": 265675555,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640086732
    },
    {
        "content": "<p>Yeah I have the code in <code>message.code.code</code>, but if I categorise I need some more info.</p>\n<p><a href=\"/user_uploads/4715/vcYaCMNxTAzlSAIziCyjasXk/Screenshot-2021-12-21-at-12.42.11.png\">ex</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vcYaCMNxTAzlSAIziCyjasXk/Screenshot-2021-12-21-at-12.42.11.png\" title=\"ex\"><img src=\"/user_uploads/4715/vcYaCMNxTAzlSAIziCyjasXk/Screenshot-2021-12-21-at-12.42.11.png\"></a></div>",
        "id": 265675735,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640086895
    },
    {
        "content": "<p>You could probably make a table of Error Codes and map manually, if nothing else.</p>",
        "id": 265675847,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640086984
    },
    {
        "content": "<p>But there's about 800 of them: <a href=\"https://doc.rust-lang.org/error-index.html\">https://doc.rust-lang.org/error-index.html</a></p>",
        "id": 265675861,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640087005
    },
    {
        "content": "<p>Yes so I need to find a way to get big categories</p>",
        "id": 265676247,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640087314
    },
    {
        "content": "<p>What esteban _might_ have been saying, I'm not sure I understand it exactly (may be clearer with context) is that if you grep the rust source for an error code you'll get the crate where an error is defined</p>",
        "id": 265676731,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640087728
    },
    {
        "content": "<p>so e.g. E0124 is a typeck error:</p>\n<div class=\"codehilite\"><pre><span></span><code>compiler/rustc_typeck/src/errors.rs\n68:#[error = &quot;E0124&quot;]\n</code></pre></div>",
        "id": 265676767,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640087760
    },
    {
        "content": "<p>and E508 is from borrowck:</p>\n<div class=\"codehilite\"><pre><span></span><code>compiler/rustc_borrowck/src/borrowck_errors.rs\n299:            E0508,\n</code></pre></div>",
        "id": 265676858,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640087809
    },
    {
        "content": "<p>you can probably fairly easily write a script to make a categories mapping from the rust source at least</p>",
        "id": 265676995,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640087890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453559\">Félix Saparelli</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265676767\">said</a>:</p>\n<blockquote>\n<p>so e.g. E0124 is a typeck error:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>compiler/rustc_typeck/src/errors.rs\n68:#[error = &quot;E0124&quot;]\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>that's probably what he meant, but WHERE is that line? it is not in <code>message</code> and not in <code>message.code</code></p>",
        "id": 265677319,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640088104
    },
    {
        "content": "<p>No, I mean, literally, ahead-of-time, make a mapping from the rustc source</p>",
        "id": 265677438,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640088171
    },
    {
        "content": "<p>I don't think there's a mention of the file the error was defined in in the output</p>",
        "id": 265677474,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640088203
    },
    {
        "content": "<p>Unless EK was suggesting to contribute a feature to rustc that does that (add the filename)...</p>",
        "id": 265677561,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640088267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453559\">Félix Saparelli</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265677561\">said</a>:</p>\n<blockquote>\n<p>Unless EK was suggesting to contribute a feature to rustc that does that (add the filename)...</p>\n</blockquote>\n<p>I guess it <em>is</em> possible?</p>",
        "id": 265678348,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640088896
    },
    {
        "content": "<p>it sounds like an esteban thing to say</p>",
        "id": 265678402,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640088961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461042\">Ai Maiga</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265675735\">said</a>:</p>\n<blockquote>\n<p>Yeah I have the code in <code>message.code.code</code>, but if I categorise I need some more info.</p>\n</blockquote>\n<p>Ah, that's what you meant by spans. Maybe you could autogenerate the link to the error description, like the playground does</p>",
        "id": 265679220,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640089536
    },
    {
        "content": "<p>Or pipe/grep the <code>rustc --explain</code> command output</p>",
        "id": 265679306,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640089590
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/zoQP9hfPWRktIld65QELNkVN/Screen-Shot-2021-12-21-at-13.28.12.png\">Screen-Shot-2021-12-21-at-13.28.12.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/zoQP9hfPWRktIld65QELNkVN/Screen-Shot-2021-12-21-at-13.28.12.png\" title=\"Screen-Shot-2021-12-21-at-13.28.12.png\"><img src=\"/user_uploads/4715/zoQP9hfPWRktIld65QELNkVN/Screen-Shot-2021-12-21-at-13.28.12.png\"></a></div>",
        "id": 265679475,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640089699
    },
    {
        "content": "<p>For fully <em>categorized</em> errors, since that is exposed by neither the json diagnostics nor the <code>rustc --explain</code>, then indeed you'd have to perform a (memoized) pass of the rustc source <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265679677,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640089843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265679306\">said</a>:</p>\n<blockquote>\n<p>Or pipe/grep the <code>rustc --explain</code> command output</p>\n</blockquote>\n<p>Hmm I thought about doing that but it will give me a lot of custom errors like <code>\"You did {} with {} when I was expected {}\", a stupid, a vec, a String</code>, since the compiler is generating them on the fly I think.</p>",
        "id": 265679736,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640089899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265679677\">said</a>:</p>\n<blockquote>\n<p>For fully <em>categorized</em> errors, since that is exposed by neither the json diagnostics nor the <code>rustc --explain</code>, then indeed you'd have to perform a (memoized) pass of the rustc source <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Ok that will be for another day! I have no idea how to even start atm.</p>\n<p>I guess i should ask Esteban, maybe it is worth doing a bigger project to add that to the compiler json output.</p>",
        "id": 265679755,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640089918
    },
    {
        "content": "<p>Here's a start: <a href=\"https://gist.github.com/passcod/d31ddd1b81b0d3874ac64a4b300f51ca\">https://gist.github.com/passcod/d31ddd1b81b0d3874ac64a4b300f51ca</a><br>\nSome checking needed (aka probably want to rewrite more robustly): lots of codes are missing, and I'm unsure if it's failure of detection or if they don't exist (anymore) or if they're defined elsewhere. It's also in fish syntax, but treat it like pseudocode if you're not familiar / don't have the fish shell handy</p>",
        "id": 265681303,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1640091017
    },
    {
        "content": "<p>I don't think categorizing them is something that should be added to the compiler directly; it'll be kind of fuzzy what category the errors belong in anyway and it's only really useful for your tool. It seems like a high maintenance burden for the benefit it gives.</p>",
        "id": 265695525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640099637
    },
    {
        "content": "<p>Note that @ - <strong>Esteban Küber</strong>  is here on Zulip</p>",
        "id": 265734693,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1640121120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453559\">Félix Saparelli</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/265681303\">said</a>:</p>\n<blockquote>\n<p>Here's a start: <a href=\"https://gist.github.com/passcod/d31ddd1b81b0d3874ac64a4b300f51ca\">https://gist.github.com/passcod/d31ddd1b81b0d3874ac64a4b300f51ca</a><br>\nSome checking needed (aka probably want to rewrite more robustly): lots of codes are missing, and I'm unsure if it's failure of detection or if they don't exist (anymore) or if they're defined elsewhere. It's also in fish syntax, but treat it like pseudocode if you're not familiar / don't have the fish shell handy</p>\n</blockquote>\n<p>Did you went through the bothersome process of categorising all errors that currently exist in the rust compiler in <code>data.json</code>? Huge thanks! I can use that!!</p>\n<p>... what is the <code>.fish</code> code and how can I use that exactly?</p>\n<p>And merry Xmas <span aria-label=\"holiday tree\" class=\"emoji emoji-1f384\" role=\"img\" title=\"holiday tree\">:holiday_tree:</span> !!</p>",
        "id": 266124230,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640547010
    },
    {
        "content": "<p>It's the shell script (for Linux/MacOS) used to categorize the error codes.</p>",
        "id": 266124248,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640547092
    },
    {
        "content": "<p>And thank you <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> and <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> too, merry xmas <span aria-label=\"holiday tree\" class=\"emoji emoji-1f384\" role=\"img\" title=\"holiday tree\">:holiday_tree:</span> !</p>",
        "id": 266124255,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640547114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/266124248\">said</a>:</p>\n<blockquote>\n<p>It's the shell script (for Linux/MacOS) used to categorize the error codes.</p>\n</blockquote>\n<p>Ok, I did this part already, but I can add the <code>.json</code> file to make broader categories.</p>\n<p>Right now the project looks like that:</p>\n<p><a href=\"https://github.com/Dajamante/gamepiler\">https://github.com/Dajamante/gamepiler</a></p>",
        "id": 266124309,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640547197
    },
    {
        "content": "<p>It iterates over the numbers from 1 to 800, formats them as an error code (<code>E800</code>), searches for the first compiler crate with a file that contains the error code, then prints that as JSON</p>",
        "id": 266124327,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640547234
    },
    {
        "content": "<p><code>.fish</code> is a script for a shell called Fish: <a href=\"https://fishshell.com/\">https://fishshell.com/</a></p>",
        "id": 266124374,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640547269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/266124327\">said</a>:</p>\n<blockquote>\n<p>It iterates over the numbers from 1 to 800, formats them as an error code (<code>E800</code>), searches for the first compiler crate with a file that contains the error code, then prints that as JSON</p>\n</blockquote>\n<p>ah thanks a lot!<br>\nSo the json file at the top is the product?<br>\nThat's perfect.<br>\nExactly what I need.</p>",
        "id": 266124470,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640547464
    },
    {
        "content": "<p>What do you think about my docs <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<p><a href=\"/user_uploads/4715/JDMdwLkICsbPa2fyq_a44MMz/Screenshot-2021-12-26-at-20.39.02.png\">the docs</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/JDMdwLkICsbPa2fyq_a44MMz/Screenshot-2021-12-26-at-20.39.02.png\" title=\"the docs\"><img src=\"/user_uploads/4715/JDMdwLkICsbPa2fyq_a44MMz/Screenshot-2021-12-26-at-20.39.02.png\"></a></div>",
        "id": 266124537,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640547566
    },
    {
        "content": "<p>Yup it does need some more iterations as I have no idea what some of the errors mean.</p>\n<p>But it will be for after the holidays!</p>",
        "id": 266124616,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640547677
    },
    {
        "content": "<p>Fair enough. Merry Xmas!</p>",
        "id": 266124675,
        "sender_full_name": "Laurențiu",
        "timestamp": 1640547736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/266124675\">said</a>:</p>\n<blockquote>\n<p>Fair enough. Merry Xmas!</p>\n</blockquote>\n<p>most of the errors are very clear tho. \"Typecheck\" or \"trait selection\", I can totally work with classifying that.</p>",
        "id": 266124765,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1640547906
    },
    {
        "content": "<p>Hello again everyone:</p>\n<p>So those are the kind of errors that <span class=\"user-mention\" data-user-id=\"453559\">@Félix Saparelli</span> 's script <span aria-label=\"fish\" class=\"emoji emoji-1f41f\" role=\"img\" title=\"fish\">:fish:</span> identifies.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">{</span>\n<span class=\"go\">    \"attr\",</span>\n<span class=\"go\">    \"mir_transform\",</span>\n<span class=\"go\">    \"mir_build\",</span>\n<span class=\"go\">    \"trait_selection\",</span>\n<span class=\"go\">    \"data_structures\",</span>\n<span class=\"go\">    \"lint\",</span>\n<span class=\"go\">    \"session\",</span>\n<span class=\"go\">    \"macros\",</span>\n<span class=\"go\">    \"middle\",</span>\n<span class=\"go\">    \"passes\",</span>\n<span class=\"go\">    \"resolve\",</span>\n<span class=\"go\">    \"ast_passes\",</span>\n<span class=\"go\">    \"expand\",</span>\n<span class=\"go\">    \"ast_lowering\",</span>\n<span class=\"go\">    \"parse\",</span>\n<span class=\"go\">    \"privacy\",</span>\n<span class=\"go\">    \"const_eval\",</span>\n<span class=\"go\">    \"builtin_macros\",</span>\n<span class=\"go\">    \"query_system\",</span>\n<span class=\"go\">    \"borrowck\",</span>\n<span class=\"go\">    \"codegen_ssa\",</span>\n<span class=\"go\">    \"plugin_impl\",</span>\n<span class=\"go\">    \"metadata\",</span>\n<span class=\"go\">    \"feature\",</span>\n<span class=\"go\">    \"typeck\",</span>\n<span class=\"go\">    \"infer\",</span>\n<span class=\"go\">}</span>\n</code></pre></div>\n<p>Is there a place in one of the Rust books where you can read about those <em>types</em> of errors?</p>",
        "id": 267171179,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641549990
    },
    {
        "content": "<p>Hello! They're not exactly error categories, but compiler modules. So while <code>typeck</code> could very be a category (type checking), <code>data_structures</code> is a set of.. data structures used by the compiler. And it's surprising that there's an error assigned to it. <a href=\"https://doc.rust-lang.org/error-index.html#E0515\"><code>E0515</code></a> is more of a borrow-checker error.</p>",
        "id": 267171941,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641550503
    },
    {
        "content": "<p>Actually, it's both in <code>borrowck</code> and <code>data_structures</code>, but the shell script above only shows one</p>",
        "id": 267171998,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641550554
    },
    {
        "content": "<p>Hmmm.... I guess it's good enough for now.<br>\nIs there somewhere one can read about those things? I have like no idea what \"ast_passes\" can even mean.</p>",
        "id": 267172365,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641550779
    },
    {
        "content": "<p>Others are less clear-cut. <code>E0004</code> is in <code>mir_build</code>, which I assume does it's HIR to MIR lowering, but the error itself is about non-exhaustive <code>match</code> statements. I wouldn't even know what category to say that belongs to.</p>",
        "id": 267172518,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641550866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267172518\">said</a>:</p>\n<blockquote>\n<p>Others are less clear-cut. <code>E0004</code> is in <code>mir_build</code>, which I assume does it's HIR to MIR lowering, but the error itself is about non-exhaustive <code>match</code> statements. I wouldn't even know what category to say that belongs to.</p>\n</blockquote>\n<p>Sorry, what are HIR and MIR?</p>",
        "id": 267172844,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641551038
    },
    {
        "content": "<p><code>ast_passes</code> sounds like AST (syntax tree) validation. <code>E0198</code> is \"you used <code>unsafe</code> where it doesn't make sense\", so they're probably things like \"this piece of syntax could reasonably sit here, but it doesn't make sense\" -- a kind of \"I know the words you're saying, but you're making no sense\".</p>",
        "id": 267172900,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641551058
    },
    {
        "content": "<p>In broad terms, the compiler takes the code, turns it into a syntax tree (that AST) which is a another form of it, but without spaces, comments and so on, then turns the AST into a \"high-level intermediate representation\" (the HIR), which is like the AST but simpler. HIR gets assigned variable types (THIR, or typed HIR), then the THIR gets turned into MIR (medium-level IR), then MIR is turned into the LLVM IR in order to generate the binaries.</p>",
        "id": 267173310,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641551276
    },
    {
        "content": "<p>I think it probably doesn't make sense to use these categories for anything user-facing.</p>",
        "id": 267173474,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641551360
    },
    {
        "content": "<p>So the HIR and MIR are progressively simpler representations of the code. With <code>E0004</code>, I assume a <code>match</code> gets turned into a set of simpler <code>if-else</code> statements or whatever MIR is using, and there is a check that you haven't missed any cases. That's why it ends up in <code>mir_build</code>.</p>",
        "id": 267173521,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641551398
    },
    {
        "content": "<p>Like, whether an error gets caught by ast_passes or in ast_lowering isn't really relevant to me as a user. In fact, it's just an implementation detail.</p>",
        "id": 267173590,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641551421
    },
    {
        "content": "<p>It's a matter of which place the compiler developers found it more convenient to put it in.</p>",
        "id": 267173624,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641551449
    },
    {
        "content": "<p>But indeed, these are internal parts of the compiler and if this classification makes sense to a compiler dev, it's probably less relevant for the user</p>",
        "id": 267173632,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641551457
    },
    {
        "content": "<p>On the other hand, it's probably a good start. If an error is in <code>borrowck</code>, it's related to using variables when they are no longer valid, so you could make a category out of it.</p>",
        "id": 267173781,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641551543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267172900\">said</a>:</p>\n<blockquote>\n<p><code>ast_passes</code> sounds like AST (syntax tree) validation. <code>E0198</code> is \"you used <code>unsafe</code> where it doesn't make sense\", so they're probably things like \"this piece of syntax could reasonably sit here, but it doesn't make sense\" -- a kind of \"I know the words you're saying, but you're making no sense\".</p>\n</blockquote>\n<p>The category \"I hear the words you are saying, but they don't make sense!\" Would be such a great error category!</p>",
        "id": 267174043,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641551716
    },
    {
        "content": "<p>This is as utterly interesting as it is scary <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span>. How to identify the stuff that makes sense?</p>",
        "id": 267174175,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641551805
    },
    {
        "content": "<p>Without learning the language first? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267174234,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641551855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267174234\">said</a>:</p>\n<blockquote>\n<p>Without learning the language first? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Haha this is a never-ending task <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nWhat I meant now, how can I sort compiler errors vs relevant-to-the-user errors. And regarding that list, where can I read about those errors to properly (and approximately) classify compiler errors into user-useful errors?</p>",
        "id": 267174591,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641552101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461042\">Ai Maiga</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267174043\">said</a>:</p>\n<blockquote>\n<p>The category \"I hear the words you are saying, but they don't make sense!\" Would be such a great error category!</p>\n</blockquote>\n<p>Even that has its own subtleties. There's a difference between \"flies month water\" and \"colorless green ideas sleep\". The one above was rather like the latter.</p>",
        "id": 267174701,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641552158
    },
    {
        "content": "<p>I think you can start with that classification, but you still need to go through <a href=\"https://doc.rust-lang.org/error-index.html\">https://doc.rust-lang.org/error-index.html</a> and assign them manually to categories. And in order to do that, you'll have to know quite a bit about the language, so..</p>",
        "id": 267175080,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641552422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267175080\">said</a>:</p>\n<blockquote>\n<p>I think you can start with that classification, but you still need to go through <a href=\"https://doc.rust-lang.org/error-index.html\">https://doc.rust-lang.org/error-index.html</a> and assign them manually to categories. And in order to do that, you'll have to know quite a bit about the language, so..</p>\n</blockquote>\n<p>... is there a way to go the other way around? Take this list and check where does <code>ast</code> might appear, you know?</p>\n<p>It is looking very obtuse if I keep those categories as such. I mean even if it is not 100% correct (who am I kidding, if it's not 75% correct)(I should add \"use with caution\"), I need to assign better categories than \"resolve\" for example.<br>\nUnfortunately I cannot look up \"resolve\" in the error index.</p>\n<p><a href=\"/user_uploads/4715/gfARXRq9XDxX152a_dPzwer1/Screenshot-2022-01-07-at-11.52.14.png\">Screenshot-2022-01-07-at-11.52.14.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gfARXRq9XDxX152a_dPzwer1/Screenshot-2022-01-07-at-11.52.14.png\" title=\"Screenshot-2022-01-07-at-11.52.14.png\"><img src=\"/user_uploads/4715/gfARXRq9XDxX152a_dPzwer1/Screenshot-2022-01-07-at-11.52.14.png\"></a></div>",
        "id": 267175810,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641552912
    },
    {
        "content": "<p>If you know a bit of the language, you could skim e.g. <a href=\"https://rustc-dev-guide.rust-lang.org/name-resolution.html\">https://rustc-dev-guide.rust-lang.org/name-resolution.html</a> for <code>resolve</code>.</p>",
        "id": 267176000,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641553053
    },
    {
        "content": "<p>Name resolution is about \"what does the <code>x</code> identifier refer to?\"</p>",
        "id": 267176130,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641553158
    },
    {
        "content": "<p>You could have categories like:</p>\n<ul>\n<li>lexing (you forgot the closing quote of a string)</li>\n<li>parsing (you forgot a closing brace or a variable name)</li>\n<li>validation (you put an <code>unsafe</code> on a negative trait implementation)</li>\n<li>name resolution (you used a variable that doesn't exist)</li>\n<li>type checking (you assigned a number to a string)</li>\n<li>borrow checking (you tried to keep a reference to a variable after it went away)</li>\n<li>macro expansion pt. 1 / matching (you wrote <code>line!(123)</code>, but the <code>line!</code> macro takes no arguments)</li>\n<li>macro expansion pt. 2 (you called a proc macro which tried to connect to a databases that was stopped)</li>\n</ul>",
        "id": 267176660,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641553500
    },
    {
        "content": "<p>And probably others too</p>",
        "id": 267176675,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641553508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267176130\">said</a>:</p>\n<blockquote>\n<p>Name resolution is about \"what does the <code>x</code> identifier refer to?\"</p>\n</blockquote>\n<p>Ah! Of course! It's so obvious ... once you said it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> !</p>",
        "id": 267176722,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641553525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267176660\">said</a>:</p>\n<blockquote>\n<p>You could have categories like:</p>\n<ul>\n<li>lexing (you forgot the closing quote of a string)</li>\n<li>parsing (you forgot a closing brace or a variable name)</li>\n<li>validation (you put an <code>unsafe</code> on a negative trait implementation)</li>\n<li>name resolution (you used a variable that doesn't exist)</li>\n<li>type checking (you assigned a number to a string)</li>\n<li>borrow checking (you tried to keep a reference to a variable after it went away)</li>\n<li>macro expansion pt. 1 / matching (you wrote <code>line!(123)</code>, but the <code>line!</code> macro takes no arguments)</li>\n<li>macro expansion pt. 2 (you called a proc macro which tried to connect to a databases that was stopped)</li>\n</ul>\n</blockquote>\n<p>That's great, thank you so much!<br>\nI will have a look at the dev guide now.</p>",
        "id": 267176846,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641553593
    },
    {
        "content": "<p>But you can't assign errors to the nameres category if you don't know what an identifier, variable or function are. That's why I said you'll have to learn at least a little bit about the language.</p>",
        "id": 267176934,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641553659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267176934\">said</a>:</p>\n<blockquote>\n<p>But you can't assign errors to the nameres category if you don't know what an identifier, variable or function are. That's why I said you'll have to learn at least a little bit about the language.</p>\n</blockquote>\n<p>I know some of the language of course, but not as much as you and other eminent specialists on the Rust forum <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, so please excuse my ignorance while still learning.<br>\nThank you very much for your help, I will be back</p>",
        "id": 267177557,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641554154
    },
    {
        "content": "<p>Undoubtedly, you'll know more of it when you finish this project <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>. As for myself, I'm just learning it, but took some detours, and now I'm stuck somewhere in-between.</p>",
        "id": 267177683,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641554271
    },
    {
        "content": "<p>I guess I could use some input while eyes-parsing the rustc dev guide. <br>\n<span class=\"user-mention\" data-user-id=\"243877\">@DevinR528</span> do you still feel like code reviewing ? (happy new yeeeeear <span aria-label=\"snowflake\" class=\"emoji emoji-2744\" role=\"img\" title=\"snowflake\">:snowflake:</span> !)</p>",
        "id": 267177961,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641554512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267177683\">said</a>:</p>\n<blockquote>\n<p>Undoubtedly, you'll know more of it when you finish this project <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>. As for myself, I'm just learning it, but took some detours, and now I'm stuck somewhere in-between.</p>\n</blockquote>\n<p>I see (?).<br>\nSomebody very wise detours were necessary for a good learning experience in general.</p>",
        "id": 267178037,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641554555
    },
    {
        "content": "<p>I started contributing to (more or less) random projects in order to learn, but didn't really get into the more advanced parts.</p>",
        "id": 267178174,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641554651
    },
    {
        "content": "<p>If anyone else is bored on Friday and has some insights I gladly take them <span aria-label=\"pen\" class=\"emoji emoji-1f58a\" role=\"img\" title=\"pen\">:pen:</span> <span aria-label=\"document\" class=\"emoji emoji-1f4c4\" role=\"img\" title=\"document\">:document:</span> !<br>\n<a href=\"https://github.com/Dajamante/gamepiler\">https://github.com/Dajamante/gamepiler</a></p>",
        "id": 267178221,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641554685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267178174\">said</a>:</p>\n<blockquote>\n<p>I started contributing to (more or less) random projects in order to learn, but didn't really get into the more advanced parts.</p>\n</blockquote>\n<p>really? what did you do?</p>",
        "id": 267178239,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641554695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461042\">Ai Maiga</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267178239\">said</a>:</p>\n<blockquote>\n<p>really? what did you do?</p>\n</blockquote>\n<p>I started by writing an app I needed for myself, ended up submitting a couple of pull requests to various projects, and lately I've been working on rust-analyzer, but nothing too fancy there.</p>",
        "id": 267178463,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641554873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267178463\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461042\">Ai Maiga</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267178239\">said</a>:</p>\n<blockquote>\n<p>really? what did you do?</p>\n</blockquote>\n<p>I started by writing an app I needed for myself, ended up submitting a couple of pull requests to various projects, and lately I've been working on rust-analyzer, but nothing too fancy there.</p>\n</blockquote>\n<p>Well thank you for your work on Rust-analyzer. I don't know how we would do without it!</p>",
        "id": 267179490,
        "sender_full_name": "Ai Maiga",
        "timestamp": 1641555607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461042\">Ai Maiga</span> <a href=\"#narrow/stream/122651-general/topic/Gamifying.20the.20compiler/near/267177961\">said</a>:</p>\n<blockquote>\n<p>I guess I could use some input while eyes-parsing the rustc dev guide. <br>\n<span class=\"user-mention silent\" data-user-id=\"243877\">DevinR528</span> do you still feel like code reviewing ? (happy new yeeeeear <span aria-label=\"snowflake\" class=\"emoji emoji-2744\" role=\"img\" title=\"snowflake\">:snowflake:</span> !)</p>\n</blockquote>\n<p>Looks nice!! What kinda feed back are you most interested in? Rust idioms, best practice, or just more general 2 pairs of eyes are better and you end up learning more sorta thing? Would a PR be good, there wern't to many things.</p>",
        "id": 267213225,
        "sender_full_name": "DevinR528",
        "timestamp": 1641574729
    }
]