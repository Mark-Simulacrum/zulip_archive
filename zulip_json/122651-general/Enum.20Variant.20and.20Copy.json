[
    {
        "content": "<p>Is it <em>safe</em> to say that an enum can be copied if its runtime variant's fields are all <code>Copy</code>?</p>\n<p>Does Rust guarantee that it is safe to copy said enum, when I can prove that the program will always construct a variant that can be copied at compile time?</p>",
        "id": 260823315,
        "sender_full_name": "fee1-dead",
        "timestamp": 1636475606
    },
    {
        "content": "<p>It is <em>valid</em> to, <em>e.g</em>, <code>ptr::read(&amp;instance)</code>-copy a value whose runtime fields are all <code>Copy</code> (since <code>ptr::read(&amp;instance)</code> is always valid). Moreover, it must also be <em>safe</em>, since one could always do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ThatEnum</span>::<span class=\"n\">ThatVariant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fields</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ThatEnum</span>::<span class=\"n\">ThatVariant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fields</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">unreachable!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 260836144,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1636481225
    },
    {
        "content": "<p>If the fields are all <code>Copy</code> but the enum itself isn't, then it's <em>valid</em> but not generally <em>safe</em> to bit-copy it.</p>\n<p>The obvious example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">SillyVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OnlyVariant</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 260840552,
        "sender_full_name": "scottmcm",
        "timestamp": 1636483029
    },
    {
        "content": "<p>This is like how it's always <em>valid</em> to summon a ZST from the Ã¦ther, but they can be used as unique tokens (by not being <code>Default</code>+<code>Copy</code>, for example) so it's not always <em>safe</em> to do so.</p>",
        "id": 260840803,
        "sender_full_name": "scottmcm",
        "timestamp": 1636483118
    },
    {
        "content": "<p>You can destructure reconstruct that, though, can't you?</p>",
        "id": 260849973,
        "sender_full_name": "Connor Horman",
        "timestamp": 1636486921
    },
    {
        "content": "<p>Depends on privacy.  If you have access to the internals, then sure you can.  But whether that meets the safety invariants depends on the rest of the module.</p>",
        "id": 260861365,
        "sender_full_name": "scottmcm",
        "timestamp": 1636492043
    },
    {
        "content": "<p>enum variant fields are same visibility as the enum, aren't they?</p>",
        "id": 260862114,
        "sender_full_name": "Connor Horman",
        "timestamp": 1636492414
    },
    {
        "content": "<p>yes <del>sadly</del></p>",
        "id": 260862295,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636492471
    },
    {
        "content": "<p>that <code>SillyVec</code> example basically has a public ptr len and cap</p>",
        "id": 260862328,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636492490
    },
    {
        "content": "<p>that's fine, you'd just need to make every method <code>unsafe</code></p>",
        "id": 260883930,
        "sender_full_name": "cuviper",
        "timestamp": 1636504276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/122651-general/topic/Enum.20Variant.20and.20Copy/near/260862295\">said</a>:</p>\n<blockquote>\n<p>yes <del>sadly</del></p>\n</blockquote>\n<p>You didn't need to cross out the sadly.</p>\n<p>My bad.  I didn't realize it was like that.</p>\n<p>Something to fix over an edition...</p>",
        "id": 260888960,
        "sender_full_name": "scottmcm",
        "timestamp": 1636508394
    }
]