[
    {
        "content": "<p>Is it documented anywhere that <code>let a = Box::new(42); let b = a</code> is guaranteed to not change the pointer to <code>42</code>? I know we rely on this in places, but it's not listed in <code>std::box</code> or <code>std::box::Box</code>.</p>",
        "id": 216876512,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605536381
    },
    {
        "content": "<p>How could it change the pointer? Moves are always bitwise copies if they copy at all</p>",
        "id": 216877183,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605536677
    },
    {
        "content": "<p>(and we guarantee it is indeed a pointer, and there's no small-box magic going on; \"a Box&lt;T&gt; is guaranteed to be represented as a single pointer\")</p>",
        "id": 216877457,
        "sender_full_name": "simulacrum",
        "timestamp": 1605536807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Documentation.20that.20Box.20doesn't.20move.20the.20value.20in.20the.20heap.3F/near/216877183\">said</a>:</p>\n<blockquote>\n<p>How could it change the pointer? Moves are always bitwise copies if they copy at all</p>\n</blockquote>\n<p>I'm not saying it <em>could</em>, I'm just pointing out that it's not explicitly stated :-)</p>",
        "id": 216879105,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605537518
    },
    {
        "content": "<p>\"How could\" can always be answered by \"compiler magic\" after all</p>",
        "id": 216879153,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605537539
    },
    {
        "content": "<p>well ok, but I think 'compiler magic' only applies when we say it is happening <em>somehow</em> and we're evasive on how</p>",
        "id": 216879236,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605537581
    },
    {
        "content": "<p>'compiler magic' shouldn't make arbitrary changes to semantics</p>",
        "id": 216879251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605537591
    },
    {
        "content": "<p>otherwise you couldn't trust the language</p>",
        "id": 216879259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605537596
    },
    {
        "content": "<p>I would not be opposed to a brief note, but I think it basically comes down to \"moves are defined to not change the value of a struct\"</p>",
        "id": 216879407,
        "sender_full_name": "simulacrum",
        "timestamp": 1605537658
    },
    {
        "content": "<p>Another option to be explicit would be to move the StableDeref trait into std: &lt;<a href=\"https://docs.rs/stable_deref_trait/\">https://docs.rs/stable_deref_trait/</a>&gt;</p>",
        "id": 216879682,
        "sender_full_name": "Mara",
        "timestamp": 1605537794
    },
    {
        "content": "<p>I don't see what that has to do with this :/ where is deref involved?</p>",
        "id": 216880627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605538260
    },
    {
        "content": "<p>oh I see, it's makign a guarentee around Deref</p>",
        "id": 216880718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605538296
    },
    {
        "content": "<p>does <code>Pin</code>/etc. currently force this guarantee?</p>",
        "id": 216911454,
        "sender_full_name": "cuviper",
        "timestamp": 1605551144
    },
    {
        "content": "<p>maybe <code>Unpin for Box&lt;T&gt;</code>?</p>",
        "id": 216911640,
        "sender_full_name": "cuviper",
        "timestamp": 1605551225
    },
    {
        "content": "<p>that's not the guarantee that unpin provides, and Box is already unpin</p>",
        "id": 216911955,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1605551365
    },
    {
        "content": "<p>I know it's already there, but pinning still confuses me, so I wasn't sure what that actually promises</p>",
        "id": 216912174,
        "sender_full_name": "cuviper",
        "timestamp": 1605551459
    },
    {
        "content": "<p>(no need to go on that tangent here if it's not relevant)</p>",
        "id": 216912193,
        "sender_full_name": "cuviper",
        "timestamp": 1605551468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/Documentation.20that.20Box.20doesn't.20move.20the.20value.20in.20the.20heap.3F/near/216877183\">said</a>:</p>\n<blockquote>\n<p>Moves are always bitwise copies if they copy at all</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Documentation.20that.20Box.20doesn't.20move.20the.20value.20in.20the.20heap.3F/near/216879407\">said</a>:</p>\n<blockquote>\n<p>moves are defined to not change the value of a struct</p>\n</blockquote>\n<p>What's the best place to point to for that guarantee then? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 216936803,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1605563073
    },
    {
        "content": "<p>unclear. Maybe <a href=\"https://doc.rust-lang.org/stable/reference/expressions.html?highlight=move#moved-and-copied-types\">https://doc.rust-lang.org/stable/reference/expressions.html?highlight=move#moved-and-copied-types</a>? But that doesn't really head on address it.</p>",
        "id": 216937099,
        "sender_full_name": "simulacrum",
        "timestamp": 1605563231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/122651-general/topic/Documentation.20that.20Box.20doesn't.20move.20the.20value.20in.20the.20heap.3F/near/216911955\">said</a>:</p>\n<blockquote>\n<p>that's not the guarantee that unpin provides, and Box is already unpin</p>\n</blockquote>\n<p>To be fair, the fact that <code>for&lt;Pointee : !Unpin&gt; Box&lt;Pointee&gt; : Unpin + DerefMut&lt;Target = Pointee&gt;</code> does imply that moving / <code>swap</code> / <code>replace</code>-ing a <code>Box&lt;impl !Unpin&gt;</code> does not move its pointee.</p>",
        "id": 217121594,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605698140
    }
]