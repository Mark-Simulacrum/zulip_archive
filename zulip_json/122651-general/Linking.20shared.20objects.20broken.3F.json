[
    {
        "content": "<p>Hi,</p>\n<p>CC <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> whose work I'm extending.</p>\n<p>I'm trying to use a build script to link a shared object:</p>\n<div class=\"codehilite\"><pre><span></span><code>      println!(&quot;cargo:rustc-link-search=dylib={}/../ykrt_internal/target/release/&quot;,\n          env::current_dir().unwrap().to_str().unwrap());\n      println!(&quot;cargo:rustc-link-lib=dylib=ykrt_internal&quot;);\n</code></pre></div>\n<p>(I know this is weird, linking a rust shared object like that. I'm experimenting with building part of a project and its deps <em>with</em> optimisations, but other parts without)</p>\n<p>In the invocation of building the test binary we see:</p>\n<div class=\"codehilite\"><pre><span></span><code>cc ... &quot;-L&quot; &quot;dylib=/home/vext01/research/yorick/yk/ykrt/../ykrt_internal/target/release&quot; ... &quot;-lykrt_internal&quot; ...\n</code></pre></div>\n<p>And the library is in there alright:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ls /home/vext01/research/yorick/yk/ykrt/../ykrt_internal/target/release | grep so\nlibykrt_internal.so\n</code></pre></div>\n<p>Yet when I do <code>cargo test</code>, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: /usr/bin/ld: cannot find -lykrt_internal\n          collect2: error: ld returned 1 exit status\n</code></pre></div>\n<p>So we fail to link the test binary.</p>\n<p>This is on Debian 10/x86_64.</p>\n<p>Any ideas?</p>",
        "id": 222292150,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1610369095
    },
    {
        "content": "<p>What is the full linker invocation?</p>",
        "id": 222292233,
        "sender_full_name": "bjorn3",
        "timestamp": 1610369157
    },
    {
        "content": "<p>(You should probably use <code>CARGO_WORKSPACE_DIR</code> instead of <code>env::current_dir</code> by the way as I don't think there are any guarantees concerning the current dir used for build scripts)</p>",
        "id": 222292477,
        "sender_full_name": "bjorn3",
        "timestamp": 1610369283
    },
    {
        "content": "<p>Before I paste, I've just realised that the failing invocation is of <code>cc</code>, not <code>rustc</code> and that we pass <code>\"-L\" \"dylib=...</code> to <code>cc</code>. That's not right is it?</p>",
        "id": 222292481,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1610369284
    },
    {
        "content": "<p>The <code>dylib=</code> part of <code>rustc-link-search</code> needs to be removed then I think.</p>",
        "id": 222292540,
        "sender_full_name": "bjorn3",
        "timestamp": 1610369329
    },
    {
        "content": "<p>That works (now I get a runtime linkage problem, but I know how to fix that).</p>\n<p>So the cargo docs are wrong?</p>\n<blockquote>\n<p>cargo:rustc-link-search=[KIND=]PATH</p>\n</blockquote>\n<p><a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html#cargorustc-link-searchkindpath\">https://doc.rust-lang.org/cargo/reference/build-scripts.html#cargorustc-link-searchkindpath</a></p>",
        "id": 222292736,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1610369449
    },
    {
        "content": "<blockquote>\n<p>The optional KIND may be one of dependency, crate, native, framework, or all. See the rustc book for more detail.</p>\n</blockquote>",
        "id": 222292774,
        "sender_full_name": "bjorn3",
        "timestamp": 1610369484
    },
    {
        "content": "<p>Oops. I'd still expect it to choke if an invalid kind is supplied.</p>\n<p>So user error after all <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span> </p>\n<p>Thanks</p>",
        "id": 222292890,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1610369562
    }
]