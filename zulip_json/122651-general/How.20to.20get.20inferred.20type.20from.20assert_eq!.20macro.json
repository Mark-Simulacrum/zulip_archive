[
    {
        "content": "<p>I'd like some help on ways to get the inferred type from the assert_eq! macro, I'm particularly interested in finding whether the compared expressions are literals or const, First time posting on this forum, please redirect me to the right place just in case this is not the place for this question</p>",
        "id": 231544677,
        "sender_full_name": "Siva Renganathan",
        "timestamp": 1616533927
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"left\"><pre><span></span><code>    hir_id: HirId {\n        owner: DefId(0:14 ~ float_cmp[317d]::main),\n        local_id: 457,\n    },\n    kind: Unary(\n        Deref,\n        Expr {\n            hir_id: HirId {\n                owner: DefId(0:14 ~ float_cmp[317d]::main),\n                local_id: 456,\n            },\n            kind: Path(\n                Resolved(\n                    None,\n                    Path {\n                        span: /Users/srenganathan/.rustup/toolchains/nightly-2021-02-25-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:23: 39:31 (#7),\n                        res: Local(\n                            HirId {\n                                owner: DefId(0:14 ~ float_cmp[317d]::main),\n                                local_id: 451,\n                            },\n                        ),\n                        segments: [\n                            PathSegment {\n                                ident: left_val#7,\n                                hir_id: Some(\n                                    HirId {\n                                        owner: DefId(0:14 ~ float_cmp[317d]::main),\n                                        local_id: 455,\n                                    },\n                                ),\n                                res: Some(\n                                    Local(\n                                        HirId {\n                                            owner: DefId(0:14 ~ float_cmp[317d]::main),\n                                            local_id: 451,\n                                        },\n                                    ),\n                                ),\n                                args: None,\n                                infer_args: true,\n                            },\n                        ],\n                    },\n                ),\n            ),\n            attrs: ThinVec(\n                None,\n            ),\n            span: /Users/srenganathan/.rustup/toolchains/nightly-2021-02-25-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:23: 39:31 (#7),\n        },\n    ),\n    attrs: ThinVec(\n        None,\n    ),\n    span: /Users/srenganathan/.rustup/toolchains/nightly-2021-02-25-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:22: 39:31 (#7),\n}\n[clippy_lints/src/misc.rs:728] right = Expr {\n    hir_id: HirId {\n        owner: DefId(0:14 ~ float_cmp[317d]::main),\n        local_id: 460,\n    },\n    kind: Unary(\n        Deref,\n        Expr {\n            hir_id: HirId {\n                owner: DefId(0:14 ~ float_cmp[317d]::main),\n                local_id: 459,\n            },\n            kind: Path(\n                Resolved(\n                    None,\n                    Path {\n                        span: /Users/srenganathan/.rustup/toolchains/nightly-2021-02-25-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:36: 39:45 (#7),\n                        res: Local(\n                            HirId {\n                                owner: DefId(0:14 ~ float_cmp[317d]::main),\n                                local_id: 452,\n                            },\n                        ),\n                        segments: [\n                            PathSegment {\n                                ident: right_val#7,\n                                hir_id: Some(\n                                    HirId {\n                                        owner: DefId(0:14 ~ float_cmp[317d]::main),\n                                        local_id: 458,\n                                    },\n                                ),\n                                res: Some(\n                                    Local(\n                                        HirId {\n                                            owner: DefId(0:14 ~ float_cmp[317d]::main),\n                                            local_id: 452,\n                                        },\n                                    ),\n                                ),\n                                args: None,\n                                infer_args: true,\n                            },\n                        ],\n                    },\n                ),\n            ),\n            attrs: ThinVec(\n                None,\n            ),\n            span: /Users/srenganathan/.rustup/toolchains/nightly-2021-02-25-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:36: 39:45 (#7),\n        },\n    ),\n    attrs: ThinVec(\n        None,\n    ),\n    span: /Users/srenganathan/.rustup/toolchains/nightly-2021-02-25-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:35: 39:45 (#7),\n}\n</code></pre></div>",
        "id": 231545280,
        "sender_full_name": "Siva Renganathan",
        "timestamp": 1616534207
    },
    {
        "content": "<p>This is what I see in the HIR expression object, Is there some way to get type inference from this</p>",
        "id": 231545308,
        "sender_full_name": "Siva Renganathan",
        "timestamp": 1616534223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395250\">@Siva Renganathan</span> Can you elaborate on your use case? Are you writing a lint, or some tool that interacts with the compiler?</p>",
        "id": 233196218,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617640435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>  Yes I'm updating a lint, I was working on this issue on clippy, <a href=\"https://github.com/rust-lang/rust-clippy/issues/6817\">https://github.com/rust-lang/rust-clippy/issues/6817</a>, for the same I have to infer the type from a local.</p>",
        "id": 233452525,
        "sender_full_name": "Siva Renganathan",
        "timestamp": 1617785043
    },
    {
        "content": "<p>This might be useful  <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.type_of\">https://doc.rust-lang.org/stable/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.type_of</a></p>\n<p><a href=\"https://willcrichton.net/notes/type-directed-metaprogramming-in-rust/\">https://willcrichton.net/notes/type-directed-metaprogramming-in-rust/</a></p>",
        "id": 233470744,
        "sender_full_name": "BaSh",
        "timestamp": 1617794848
    }
]