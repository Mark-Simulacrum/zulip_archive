[
    {
        "content": "<p>Is there any way to make cargo skip all the sub-folders stuff in the target directory? I'd like the final output binary to just be at <code>target/name</code>, without a target folder or debug/release folder in the path.</p>",
        "id": 249194425,
        "sender_full_name": "Lokathor",
        "timestamp": 1628739251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> no, but you can use --message-format json to have it tell you where it puts the binary</p>",
        "id": 249194904,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628739989
    },
    {
        "content": "<p>well i do know where the bin is going, I'd just prefer it go some place shorter to type</p>",
        "id": 249195531,
        "sender_full_name": "Lokathor",
        "timestamp": 1628740847
    },
    {
        "content": "<p>You could add a symlink in target/ maybe</p>",
        "id": 249246565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628780562
    },
    {
        "content": "<p>It will get deleted if you run cargo clean but it's better than nothing <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 249246597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628780575
    },
    {
        "content": "<p>To avoid it being deleted you could use a fake target-dir (<code>target/</code>) and a true one nested within it (<code>target/artifacts</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>target/\n+- artifacts/ # &lt;- `target-dir`\n    +- debug/\n    +- release/ # &lt;--------+\n+- ./binary # --symlinked--+\n</code></pre></div>",
        "id": 249247358,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1628780910
    },
    {
        "content": "<p>But note that symlinks don't work for some stuff, such as <code>node.js</code> native modules; a hard link is required for that which is not robust to <code>cargo</code> rebuilds (not even incremental ones!). It would be nice if incremental builds attempted to overwrite the contents of the previous binary.</p>",
        "id": 249247521,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1628780982
    },
    {
        "content": "<blockquote>\n<p>It would be nice if incremental builds attempted to overwrite the contents of the previous binary.</p>\n</blockquote>\n<p>This is deliberately not done at least for rlibs and rmeta files to ensure that another rustc can never read it while it is still being written. I wouldn't be surprised if linkers don't overwrite the contents either for about the same reason.</p>",
        "id": 249253281,
        "sender_full_name": "bjorn3",
        "timestamp": 1628783583
    },
    {
        "content": "<p>Makes sense, thanks</p>",
        "id": 249258226,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1628786032
    }
]