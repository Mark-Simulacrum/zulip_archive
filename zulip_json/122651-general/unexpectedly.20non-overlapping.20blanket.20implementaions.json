[
    {
        "content": "<p>Why aren't these two impls overlapping? This works in at least Rust 1.30 / edition 2015, so it's not any recent change.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IntoResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IntoResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IntoResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218581538,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606926471
    },
    {
        "content": "<p>What prevents <code>T</code> in the second impl from being <code>Result&lt;T, E&gt;</code>?</p>",
        "id": 218581851,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606926593
    },
    {
        "content": "<p>those are different types</p>",
        "id": 218581987,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606926639
    },
    {
        "content": "<p>you'd have Result&lt;Result&lt;T, E&gt;, E&gt;</p>",
        "id": 218582007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606926647
    },
    {
        "content": "<p>I think</p>",
        "id": 218582058,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606926673
    },
    {
        "content": "<p>But I could substitute <code>T = i32</code> and <code>E = ()</code> for the first impl, or <code>T = Result&lt;i32, ()&gt;</code> and <code>E = ()</code> for the second.</p>",
        "id": 218583542,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606927291
    },
    {
        "content": "<p>Maybe because the <code>T</code> and <code>E</code> become part of the trait's types</p>",
        "id": 218583583,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606927315
    },
    {
        "content": "<p>you would still return <code>Result&lt;Result&lt;i32, ()&gt;, ()&gt;</code> in the second example though</p>",
        "id": 218583692,
        "sender_full_name": "lcnr",
        "timestamp": 1606927341
    },
    {
        "content": "<p>you can implement both <code>Trait&lt;A&gt;</code> and <code>Trait&lt;B&gt;</code> for the same type</p>",
        "id": 218583722,
        "sender_full_name": "lcnr",
        "timestamp": 1606927354
    },
    {
        "content": "<p>so there's never the same impl _of the trait_ for the type</p>",
        "id": 218583725,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606927356
    },
    {
        "content": "<p>as long as <code>A</code> and <code>B</code> are not overlapping</p>",
        "id": 218583742,
        "sender_full_name": "lcnr",
        "timestamp": 1606927363
    },
    {
        "content": "<p>Yeah, <code>IntoResult&lt;Result&lt;i32, ()&gt;, ()&gt;</code> is a different trait than <code>IntoResult&lt;i32, ()&gt;</code></p>",
        "id": 218583745,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1606927364
    },
    {
        "content": "<p>these are <em>different</em> T's and E's, they're scoped</p>",
        "id": 218583755,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606927369
    },
    {
        "content": "<p>You may want those parameters to be associated types instead since they're semantically outputs of the trait's method</p>",
        "id": 218583848,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1606927406
    },
    {
        "content": "<p>And </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IntoResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IntoResult</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IntoResult</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>fails because it's the same trait.</p>",
        "id": 218583900,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606927437
    },
    {
        "content": "<p>at which point you could only have one of those impls</p>",
        "id": 218583911,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1606927439
    },
    {
        "content": "<p>yeah</p>",
        "id": 218583976,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1606927452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/122651-general/topic/unexpectedly.20non-overlapping.20blanket.20implementaions/near/218583745\">said</a>:</p>\n<blockquote>\n<p>Yeah, <code>IntoResult&lt;Result&lt;i32, ()&gt;, ()&gt;</code> is a different trait than <code>IntoResult&lt;i32, ()&gt;</code></p>\n</blockquote>\n<p>I think this is the key point that I was forgetting.</p>",
        "id": 218584038,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606927480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/122651-general/topic/unexpectedly.20non-overlapping.20blanket.20implementaions/near/218583848\">said</a>:</p>\n<blockquote>\n<p>You may want those parameters to be associated types instead since they're semantically outputs of the trait's method</p>\n</blockquote>\n<p><em>I</em> don't want anything in this specific case <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. I think that <a href=\"https://stackoverflow.com/a/65111494/155423\">the original case</a> benefits from the current behavior.</p>",
        "id": 218584301,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606927600
    }
]