[
    {
        "content": "<p>Related to: <span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/I.2FO.20safety/near/235994486\">said</a>:</p>\n<blockquote>\n<p>I have a pair of traits in my chrono library, <code>TrivialClock</code> and <code>Monotonic</code>. Both are unsafe, and define the preconditions on implementations: <code>TrivialClock</code> states that if <code>T: TrivialClock</code>, then <code>&lt;T as Clock&gt;::now()</code> will not panic, ...</p>\n</blockquote>\n<p>Knowing what MIR looks like, it is obvious to me that the compiler would like to know when some functions don't throw, because then you don't have to generate a landing pad for the unwind. What would it take to support a general mechanism for declaring that functions can't throw? For concrete function implementations presumably the compiler already tries to figure this out, but for traits and function pointers this has to be attached to the type somehow. Perhaps an unsafe attribute, like in C++? It would be nice if implementing a no throw function in a trait is not unsafe provided that the compiler can prove that there is no unwind path.</p>",
        "id": 236034725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619323112
    },
    {
        "content": "<p>We have unwind(aborts) I think which isn't unsafe (iirc) and accomplishes almost this, but it's unstable and not really on a path towards stabilization, though I forget if there was an RFC for it</p>",
        "id": 236059836,
        "sender_full_name": "simulacrum",
        "timestamp": 1619351531
    }
]