[
    {
        "content": "<p>can we add an alias for <code>Result&lt;T, Box&lt;dyn std::error::Error&gt;&gt;</code> to std</p>",
        "id": 231548078,
        "sender_full_name": "devsnek",
        "timestamp": 1616535496
    },
    {
        "content": "<p>you want <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a></p>",
        "id": 231549732,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616536330
    },
    {
        "content": "<p><code>std::error::Result</code> seems ok, but also kind of confusing</p>",
        "id": 231549759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616536345
    },
    {
        "content": "<p>it's not clear just from the name why it would be different from <code>std::result::Result</code></p>",
        "id": 231549790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616536364
    },
    {
        "content": "<p>One thing to keep in mind with this polymorphic approach is that you lose Send + Sync info on the <code>Error</code> </p>\n<p>One issue is that this alias only models one form of lifetime: uniquely owned</p>\n<p>It does not include shared (<code>Arc&lt;dyn Error&gt;</code>) or non-owning (<code>&amp;'a dyn Error</code>)</p>",
        "id": 231552491,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1616537737
    },
    {
        "content": "<p>when would you want to return a borrowed <code>dyn Error</code>?</p>",
        "id": 231554284,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616538708
    },
    {
        "content": "<p>Hmm, good point.</p>\n<p>I suppose maybe one of the few places might be <code>&amp;'static</code>.</p>\n<p>Otherwise, you are correct, the use-case for borrowing does not seem strong</p>",
        "id": 231555599,
        "sender_full_name": "Christian Mazakas",
        "timestamp": 1616539505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219805\">devsnek</span> <a href=\"#narrow/stream/122651-general/topic/error.20result.20alias/near/231548078\">said</a>:</p>\n<blockquote>\n<p>can we add an alias for <code>Result&lt;T, Box&lt;dyn std::error::Error&gt;&gt;</code> to std</p>\n</blockquote>\n<p>we're trying to move away from <code>Box&lt;dyn Error&gt;</code> because it doesn't implement the <code>Error</code> trait so I'd be against adding this alias</p>",
        "id": 231563608,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616544882
    },
    {
        "content": "<p>\"we\" being the error handling wg</p>",
        "id": 231563675,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1616544940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399737\">Christian Mazakas</span> <a href=\"#narrow/stream/122651-general/topic/error.20result.20alias/near/231555599\">said</a>:</p>\n<blockquote>\n<p>I suppose maybe one of the few places might be <code>&amp;'static</code>.</p>\n<p>Otherwise, you are correct, the use-case for borrowing does not seem strong</p>\n</blockquote>\n<p><code>&amp;dyn Error + 'static</code> is for borrowed abstract errors</p>",
        "id": 232570364,
        "sender_full_name": "oliver",
        "timestamp": 1617188125
    }
]