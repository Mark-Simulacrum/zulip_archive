[
    {
        "content": "<p>Is it expected that these don't trigger any warning in both <code>rustc</code> and <code>clippy</code> and all have the effect of <code>#[forbid(clippy::empty_loop)]</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[forbid(clippy::foo::empty_loop)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">_foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[forbid(clippy::foo::bar::empty_loop)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">_foo_bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[forbid(clippy::foo::bar::baz::empty_loop)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">_foo_bar_baz</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[forbid(clippy::no::matter::how::many::useless::segments::here::it::always::works::empty_loop)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">_sigh</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Same happens for <code>rustdoc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![forbid(rustdoc::foo::all)]</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![forbid(rustdoc::foo::bar::all)]</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![forbid(rustdoc::foo::bar::baz::all)]</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![forbid(rustdoc::no::matter::how::many::useless::segments::here::it::always::works::all)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>None triggers any warning in <code>rustc</code> and all have the effect of <code>#![forbid(rustdoc::all)]</code>.<br>\n(Output of <code>#![forbid(rustdoc::foo::bar::all)]</code> in <code>rustdoc</code>:)</p>\n<div class=\"codehilite\"><pre><span></span><code>error: no documentation found for this crate&#39;s top-level module\n  |\nnote: the lint level is defined here\n --&gt; src/lib.rs:1:11\n  |\n1 | #![forbid(rustdoc::foo::bar::all)]\n  |           ^^^^^^^^^^^^^^^^^^^^^^\n  = note: `#[forbid(rustdoc::missing_crate_level_docs)]` implied by `#[forbid(rustdoc::all)]`\n  = help: The following guide may be of use:\n          https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n\nerror: missing code example in this documentation\n --&gt; src/lib.rs:1:1\n  |\n1 | #![forbid(rustdoc::foo::bar::all)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --&gt; src/lib.rs:1:11\n  |\n1 | #![forbid(rustdoc::foo::bar::all)]\n  |           ^^^^^^^^^^^^^^^^^^^^^^\n  = note: `#[forbid(rustdoc::missing_doc_code_examples)]` implied by `#[forbid(rustdoc::all)]`\n\nerror: aborting due to 2 previous errors\n</code></pre></div>\n<hr>\n<p>I discovered this through  rust-analyzer, which tries to auto-complete something like <code>#[allow(clippy::empty_loo</code> with <code>#[allow(clippy::clippy::empty_loop)]</code>, and then I found that syntax actually works.</p>",
        "id": 231764396,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616661822
    },
    {
        "content": "<p>Looks like a bug to me, I would file an issue.</p>",
        "id": 231819188,
        "sender_full_name": "Eric Huss",
        "timestamp": 1616685167
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83477\">#83477</a></p>",
        "id": 231828543,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616688152
    }
]