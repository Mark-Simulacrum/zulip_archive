[
    {
        "content": "<p>Hi, I'm writing a solution for <a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" title=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/\">LeetCode Problem 19 - Remove Nth Node From End of List</a>. I tried to use unsafe to implement a O(1) space-consuming O(n) time-consuming solution, however miri throws out an error and I found that this error means there is an illegal alias of a <code>Box</code>. How could I fix the <code>mut_safe_wrapper</code> function to pass miri's test? Thanks!<br>\nThe code is here: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0948f675999232949f3b0c37ecf4fde2\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0948f675999232949f3b0c37ecf4fde2\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0948f675999232949f3b0c37ecf4fde2</a></p>",
        "id": 165336124,
        "sender_full_name": "lovecs0079",
        "timestamp": 1557495096
    },
    {
        "content": "<p>Related: <a href=\"https://stackoverflow.com/q/53242052/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/53242052/155423\">How to remove the Nth node from the end of a linked list?</a></p>",
        "id": 165341625,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557499331
    },
    {
        "content": "<blockquote>\n<p>Related: <a href=\"https://stackoverflow.com/q/53242052/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/53242052/155423\">How to remove the Nth node from the end of a linked list?</a></p>\n</blockquote>\n<p>Thanks for the link, but I really want to write a fast-slow-link solution with an unsafe to safe wrapper.<br>\nBTW, my solution can be compiled and runs fine, however Miri indicates that there is an UB. I want to eliminate that.</p>",
        "id": 165343932,
        "sender_full_name": "lovecs0079",
        "timestamp": 1557500995
    },
    {
        "content": "<blockquote>\n<p>runs fine [...] there is an UB</p>\n</blockquote>\n<p>You can't have both ;-)</p>",
        "id": 165346190,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557502599
    },
    {
        "content": "<p>Miri said the UB comes from an alias of <code>Box</code>, I double checked my code dropping all const references before <code>transmute</code> to prevent aliases…</p>",
        "id": 165346407,
        "sender_full_name": "lovecs0079",
        "timestamp": 1557502772
    },
    {
        "content": "<p>the UB seems to be inside an implicit drop</p>",
        "id": 165353421,
        "sender_full_name": "RalfJ",
        "timestamp": 1557508301
    },
    {
        "content": "<p>you are casting a shared ref to a mutable ref? I am wondering why this doesnt explode earlier^^</p>",
        "id": 165353653,
        "sender_full_name": "RalfJ",
        "timestamp": 1557508499
    },
    {
        "content": "<p>FWIW, <code>drop(prev)</code> cannot possible help, it can only harm. Dropping a mutable ref is basically a NOP, but also counts as a \"use\" of the ref and hence checks that the ref is still valid. Removing that doesn't help here though.</p>",
        "id": 165354053,
        "sender_full_name": "RalfJ",
        "timestamp": 1557508800
    },
    {
        "content": "<p>I am not sure what concretely is the cause here, but transmuting a shared ref to a mutable is a no-go</p>",
        "id": 165354132,
        "sender_full_name": "RalfJ",
        "timestamp": 1557508840
    },
    {
        "content": "<p>you cannot have mutable access to a shared ref</p>",
        "id": 165354140,
        "sender_full_name": "RalfJ",
        "timestamp": 1557508853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> while I was writing a solution to this, I wanted to convert <code>Option&lt;Box&lt;T&gt;&gt;</code> into a <code>*mut T</code> — is there a straight-forward way of doing that?</p>",
        "id": 165355779,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557510165
    },
    {
        "content": "<p>hm. don't know. I'd start with <code>.map(Box::into_raw_non_null)</code></p>",
        "id": 165356360,
        "sender_full_name": "RalfJ",
        "timestamp": 1557510659
    },
    {
        "content": "<p>there might be things between <code>Option&lt;NonNull&lt;T&gt;&gt;</code> and raw ptrs</p>",
        "id": 165356381,
        "sender_full_name": "RalfJ",
        "timestamp": 1557510671
    },
    {
        "content": "<p><code>into_raw...</code> would take ownership, which I wouldn't want. I think that <code>transmute</code> may actually be the shortest point from A to B, which is rarely a good sign ;-)</p>",
        "id": 165370643,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557522114
    },
    {
        "content": "<p>Once you have a raw pointer, you can copy it and reconstruct the box back.</p>",
        "id": 165381121,
        "sender_full_name": "nagisa",
        "timestamp": 1557532535
    },
    {
        "content": "<p>true, but if I'm starting with e.g. <code>&amp;self</code> i'd run into a problem. I could use <code>as_ref</code> / <code>as_mut</code> of course</p>",
        "id": 165382105,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1557533618
    },
    {
        "content": "<blockquote>\n<p>you cannot have mutable access to a shared ref</p>\n</blockquote>\n<p>Thank you Ralf, just known <code>drop(prev)</code> is not helpful</p>",
        "id": 165383215,
        "sender_full_name": "lovecs0079",
        "timestamp": 1557535272
    },
    {
        "content": "<p>Ah, I think I finally understood why casting the shared ref to a mutable didn't explode earlier here... you are casting through a raw pointer, and this happens inside a <code>Box</code>. When you use the raw ptr to write to that <code>Box</code>, Miri thinks that this must be the raw ptr originally allocated by <code>exchange_malloc</code> (in <code>Box::new</code>) -- that is the only raw ptr in existence that you are allowed to use for writing. This of course invalidates all pointers created later, including the <code>Box</code> pointer that is later being used for dropping.</p>",
        "id": 165526513,
        "sender_full_name": "RalfJ",
        "timestamp": 1557753069
    }
]