[
    {
        "content": "<p>Hello! Whats the best way to construct the biggest value a <code>Duration</code> can hold? Using <code>Duration::new(u64::MAX, u32::MAX)</code> will panic because of seconds overflow.</p>",
        "id": 198310099,
        "sender_full_name": "marmeladema",
        "timestamp": 1590060221
    },
    {
        "content": "<p>I understand the panic, but it seems there is no easy way to build such <code>Duration::MAX</code> value</p>",
        "id": 198310170,
        "sender_full_name": "marmeladema",
        "timestamp": 1590060276
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/src/core/time.rs.html#562-579\">https://doc.rust-lang.org/src/core/time.rs.html#562-579</a> hmm</p>",
        "id": 198310220,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590060346
    },
    {
        "content": "<p><code>Duration::new(u64::MAX, 1_000_000_000 - 1);</code></p>",
        "id": 198310592,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590060717
    },
    {
        "content": "<p><code>Duration::new(u64::MAX, NANOS_PER_SEC-1)</code> seems to work but unfortunately i had to redefine <code>NANOS_PER_SEC</code> myself</p>",
        "id": 198310597,
        "sender_full_name": "marmeladema",
        "timestamp": 1590060720
    },
    {
        "content": "<p>yeah right we came up with the same answer</p>",
        "id": 198310639,
        "sender_full_name": "marmeladema",
        "timestamp": 1590060731
    },
    {
        "content": "<p>Would it be acceptable to have NANOS_PER_SEC (and probably the other related constants) as associated constants for Duration?</p>",
        "id": 198310696,
        "sender_full_name": "marmeladema",
        "timestamp": 1590060787
    },
    {
        "content": "<p>or just exported in the time module</p>",
        "id": 198310780,
        "sender_full_name": "marmeladema",
        "timestamp": 1590060854
    },
    {
        "content": "<p>Also <a href=\"https://github.com/rust-lang/rust/issues/32070\">https://github.com/rust-lang/rust/issues/32070</a></p>",
        "id": 198310952,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590061023
    },
    {
        "content": "<p>Apparently i am not the only trying to build such maximum duration</p>",
        "id": 198311156,
        "sender_full_name": "marmeladema",
        "timestamp": 1590061227
    },
    {
        "content": "<p><code>Duration</code> is a bit of a mess :-(</p>",
        "id": 198311885,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590061849
    },
    {
        "content": "<p>I'll do a PR that adds <code>Duration:::MAX</code> and we will see what happens :D</p>",
        "id": 198311970,
        "sender_full_name": "marmeladema",
        "timestamp": 1590061937
    },
    {
        "content": "<p>Unfortunately, <code>Duration::new</code> is not <code>const</code></p>",
        "id": 198312083,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590062040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/122651-general/topic/Maximum.20duration/near/198312083\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, <code>Duration::new</code> is not <code>const</code></p>\n</blockquote>\n<p>hm, as a start someone could experiment with making the <code>checked_*</code> arithmetic methods <code>const fn</code></p>",
        "id": 198312334,
        "sender_full_name": "RalfJ",
        "timestamp": 1590062225
    },
    {
        "content": "<p>that requires <code>const_if_match</code> but that's okay for unstable methods (and that feature will hopefully become stable Soon(TM) )</p>",
        "id": 198312358,
        "sender_full_name": "RalfJ",
        "timestamp": 1590062253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> i'd happy to help! What is required exactly to make <code>checked_*</code> function const? Only adding the feature gate + adding the const keyword?</p>",
        "id": 198320897,
        "sender_full_name": "marmeladema",
        "timestamp": 1590068096
    },
    {
        "content": "<p>well... I don't know for sure, I am only following constification at a distance</p>",
        "id": 198321284,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068312
    },
    {
        "content": "<p>so I'd start by adding <code>const fn</code> and <code>#[rustc_const_unstable]</code></p>",
        "id": 198321320,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068329
    },
    {
        "content": "<p>and then let the compiler errors guide me</p>",
        "id": 198321326,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068333
    },
    {
        "content": "<p>I dont know what our current story is for \"internal instability\" but that only really matters once we try to stabilize them -- so, not for now.</p>",
        "id": 198321506,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> ^</p>",
        "id": 198321605,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068467
    },
    {
        "content": "<p>Ok, i'll try to do something! Worst case scenario, reviewer screams at me :D</p>",
        "id": 198321803,
        "sender_full_name": "marmeladema",
        "timestamp": 1590068555
    },
    {
        "content": "<blockquote>\n<p>Worst case scenario, reviewer screams at me</p>\n</blockquote>\n<p>Isn't that also the best case scenario? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 198321864,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590068596
    },
    {
        "content": "<p>our reviewers should be more kind than that ;)</p>",
        "id": 198322282,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068799
    },
    {
        "content": "<p>oh and make sure to also add a testcase, otherwise the reviewer will definitely demand that :D</p>",
        "id": 198322303,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068819
    },
    {
        "content": "<p>we already have a bunch of const-int-arith test file in <code>src/test/ui/consts</code>, see if there's a good file to add these two or if it seems more sensible to add a new file</p>",
        "id": 198322364,
        "sender_full_name": "RalfJ",
        "timestamp": 1590068865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Maximum.20duration/near/198322282\">said</a>:</p>\n<blockquote>\n<p>our reviewers should be more kind than that ;)</p>\n</blockquote>\n<p>Just kidding :D</p>",
        "id": 198322883,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590069159
    },
    {
        "content": "<p>So checked_add is already const apparently</p>",
        "id": 198359157,
        "sender_full_name": "marmeladema",
        "timestamp": 1590086311
    },
    {
        "content": "<p><code>Duration::new</code> cannot be made const because of the call to <code>.expect(..)</code></p>",
        "id": 198359302,
        "sender_full_name": "marmeladema",
        "timestamp": 1590086402
    },
    {
        "content": "<p>Matching and calling panic manually seems to do the trick BUT new method is already tagged with <code>#[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]</code> which means i cannot just add <code>#[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]</code></p>",
        "id": 198360808,
        "sender_full_name": "marmeladema",
        "timestamp": 1590087181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/122651-general/topic/Maximum.20duration/near/198359157\">said</a>:</p>\n<blockquote>\n<p>So checked_add is already const apparently</p>\n</blockquote>\n<p>doesn't look like it: <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html#method.checked_add\">https://doc.rust-lang.org/nightly/std/primitive.i64.html#method.checked_add</a></p>",
        "id": 198363267,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088323
    },
    {
        "content": "<p>at last I think that would say <code>const</code> explicitly?</p>",
        "id": 198363343,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088362
    },
    {
        "content": "<p>yes it would</p>",
        "id": 198363365,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088374
    },
    {
        "content": "<blockquote>\n<p>new method is already tagged with #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]</p>\n</blockquote>\n<p>only <code>const</code> methods should be tagged with that...? which new method do you mean?</p>",
        "id": 198363387,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088391
    },
    {
        "content": "<p><code>Duration::new</code></p>",
        "id": 198363456,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590088427
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/src/core/time.rs.html#134\">https://doc.rust-lang.org/src/core/time.rs.html#134</a></p>",
        "id": 198363534,
        "sender_full_name": "Laurențiu",
        "timestamp": 1590088454
    },
    {
        "content": "<p>Afaik these attributes don't actually do anything if the given function is not const</p>",
        "id": 198363636,
        "sender_full_name": "lcnr",
        "timestamp": 1590088505
    },
    {
        "content": "<p>There was some issue on github for that</p>",
        "id": 198363650,
        "sender_full_name": "lcnr",
        "timestamp": 1590088513
    },
    {
        "content": "<p>that makes no sense... <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> any idea why it should have that attribute?</p>",
        "id": 198363702,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088536
    },
    {
        "content": "<p>It's <a href=\"https://github.com/rust-lang/rust/issues/69630\">https://github.com/rust-lang/rust/issues/69630</a></p>",
        "id": 198363859,
        "sender_full_name": "lcnr",
        "timestamp": 1590088620
    },
    {
        "content": "<p>well for now let's clean this one up: <a href=\"https://github.com/rust-lang/rust/pull/72434\">https://github.com/rust-lang/rust/pull/72434</a></p>",
        "id": 198364062,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> I'll close that PR if you have one that makes it actually const. (unstably).. feel free to just remove the existing attribute if it gets in your way.</p>",
        "id": 198364127,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088762
    },
    {
        "content": "<p>and yes you'll have to make <code>Option::except</code> unstably const as well</p>",
        "id": 198364162,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088797
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/num/mod.rs#L746\">https://github.com/rust-lang/rust/blob/master/src/libcore/num/mod.rs#L746</a><br>\nthis is the checked_add implem that I looked at</p>",
        "id": 198364296,
        "sender_full_name": "marmeladema",
        "timestamp": 1590088861
    },
    {
        "content": "<p>hm... maybe rustdoc does not render the <code>const</code> when it is unstable</p>",
        "id": 198364452,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088945
    },
    {
        "content": "<p>well that means less work for you then, nice :D</p>",
        "id": 198364460,
        "sender_full_name": "RalfJ",
        "timestamp": 1590088951
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...marmeladema:duration-new-const?expand=1\">https://github.com/rust-lang/rust/compare/master...marmeladema:duration-new-const?expand=1</a><br>\nthis is what i tried and the compiler does not seem to complain</p>",
        "id": 198364596,
        "sender_full_name": "marmeladema",
        "timestamp": 1590089039
    },
    {
        "content": "<p>sure that also works</p>",
        "id": 198365934,
        "sender_full_name": "RalfJ",
        "timestamp": 1590089688
    },
    {
        "content": "<p>though the constant <code>MAX</code> you added seems orthogonal, and should be a separate feature IMO</p>",
        "id": 198365964,
        "sender_full_name": "RalfJ",
        "timestamp": 1590089700
    },
    {
        "content": "<p>oh you made them separate :)</p>",
        "id": 198366011,
        "sender_full_name": "RalfJ",
        "timestamp": 1590089717
    },
    {
        "content": "<p>hm re-using \"const_checked_int_methods\" for <code>Duration::new</code> is a bit fishy though</p>",
        "id": 198366055,
        "sender_full_name": "RalfJ",
        "timestamp": 1590089739
    },
    {
        "content": "<p>I open-ed <a href=\"https://github.com/rust-lang/rust/pull/72436\">https://github.com/rust-lang/rust/pull/72436</a> for the sake of it</p>",
        "id": 198366637,
        "sender_full_name": "marmeladema",
        "timestamp": 1590090044
    },
    {
        "content": "<p>i've never modified any user visible code from standard library so it might be totally none sense^^</p>",
        "id": 198366683,
        "sender_full_name": "marmeladema",
        "timestamp": 1590090075
    },
    {
        "content": "<p>I'd also like to add <code>Duration::saturating_add</code> and <code>Duration::saturating_sub</code></p>",
        "id": 198367854,
        "sender_full_name": "marmeladema",
        "timestamp": 1590090740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> as mentioned above, usually new <code>const fn</code> come with a UI test ensuring their correct functionality</p>",
        "id": 198368822,
        "sender_full_name": "RalfJ",
        "timestamp": 1590091141
    },
    {
        "content": "<p>Oh yeah right sorry, i'll add one later tonight</p>",
        "id": 198369067,
        "sender_full_name": "marmeladema",
        "timestamp": 1590091235
    },
    {
        "content": "<p>\"tonight\" <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 198373253,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590093122
    },
    {
        "content": "<p>So i ran a bit more experiments, and most of non-trait <code>Duration</code> methods can be made const</p>",
        "id": 198382385,
        "sender_full_name": "marmeladema",
        "timestamp": 1590098260
    },
    {
        "content": "<p>I just have a question about feature and unstability. Why would it be wrong it use an already existing feature like <code>#[rustc_const_stable(feature = \"duration_consts\", since = \"1.45.0\")]</code> (using the version its going to be released of course) to get instantaneous stable const methods?</p>",
        "id": 198383047,
        "sender_full_name": "marmeladema",
        "timestamp": 1590098676
    },
    {
        "content": "<p>Its a bit stressful to create a 'tracking issue', it feels like a lot of responsibility now but here we go: <a href=\"https://github.com/rust-lang/rust/issues/72440\">https://github.com/rust-lang/rust/issues/72440</a><br>\nI hope i did not make such a bad job at it</p>",
        "id": 198385703,
        "sender_full_name": "marmeladema",
        "timestamp": 1590100276
    },
    {
        "content": "<p>that looks pretty good!</p>",
        "id": 198388206,
        "sender_full_name": "simulacrum",
        "timestamp": 1590101718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/122651-general/topic/Maximum.20duration/near/198385703\">said</a>:</p>\n<blockquote>\n<p>Its a bit stressful to create a 'tracking issue', it feels like a lot of responsibility now but here we go: <a href=\"https://github.com/rust-lang/rust/issues/72440\">https://github.com/rust-lang/rust/issues/72440</a><br>\nI hope i did not make such a bad job at it</p>\n</blockquote>\n<p>yeah I know it can feel intimidating. alternatively you can always ask a team member to do it for you. :)</p>",
        "id": 198488330,
        "sender_full_name": "RalfJ",
        "timestamp": 1590177613
    },
    {
        "content": "<p>but to tell you the truth, I am also somewhat intimidated by it. :D you did a great job!</p>",
        "id": 198488389,
        "sender_full_name": "RalfJ",
        "timestamp": 1590177637
    },
    {
        "content": "<p>Thanks :) i am writing tests right now and will open a PR soon</p>",
        "id": 198498217,
        "sender_full_name": "marmeladema",
        "timestamp": 1590183796
    }
]