[
    {
        "content": "<p>Is there a way to have a <code>dyn Anything</code> in the sense of an owned value but without the type id stuff (so downcasting is unsafe like a union)? This would usually be a <code>void*</code> in C, although I guess that's a bit ambiguous about ownership.</p>",
        "id": 217183892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605727395
    },
    {
        "content": "<p>So like a type for <code>mybox.into_raw().cast::&lt;()&gt;()</code>?</p>\n<p>I don't think I've ever seen a type for such a thing.</p>",
        "id": 217184144,
        "sender_full_name": "scottmcm",
        "timestamp": 1605727502
    },
    {
        "content": "<p>It's a bit awkward for that to be \"owned\" since it clearly can't free itself properly, but I guess that's no worse than <code>ManuallyDrop&lt;Vec&lt;_&gt;&gt;</code>.</p>",
        "id": 217184222,
        "sender_full_name": "scottmcm",
        "timestamp": 1605727545
    },
    {
        "content": "<p>I suppose it could track the size of the allocation, not sure how that stacks up compared to <code>TypeId</code> in terms of space &amp; efficiency</p>",
        "id": 217184450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605727625
    },
    {
        "content": "<p>actually I guess with drop glue you probably have to keep the type around if you want drop to work properly</p>",
        "id": 217184559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605727678
    },
    {
        "content": "<p>That'd still make it fat, yeah, so I don't think it's worth doing vs just having the vtable.</p>",
        "id": 217184611,
        "sender_full_name": "scottmcm",
        "timestamp": 1605727689
    },
    {
        "content": "<p>For the <code>void*</code> alternative, I recall folks using <code>*const ()</code> for a while and then going to extern types, although neither of those really expresses <code>union { Everything }</code></p>",
        "id": 217184835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605727790
    },
    {
        "content": "<p>yeah, an extern type would be better than <code>()</code>, but I don't remember if they exist yet :P</p>",
        "id": 217185032,
        "sender_full_name": "scottmcm",
        "timestamp": 1605727876
    },
    {
        "content": "<p>unstable</p>",
        "id": 217185038,
        "sender_full_name": "simulacrum",
        "timestamp": 1605727881
    },
    {
        "content": "<p>(due to the size_of_val mess)</p>",
        "id": 217185054,
        "sender_full_name": "simulacrum",
        "timestamp": 1605727889
    },
    {
        "content": "<p>Maybe it's just <code>Box&lt;dyn Whatever&gt;</code>, <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>, with <code>trait Whatever {} impl&lt;T&gt; Whatever for T {}</code>.</p>",
        "id": 217185162,
        "sender_full_name": "scottmcm",
        "timestamp": 1605727925
    },
    {
        "content": "<p>how do you downcast that?</p>",
        "id": 217185241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605727970
    },
    {
        "content": "<p><code>&amp;mut *(Box::into_raw(foo) as *mut MyType)</code>, for example</p>",
        "id": 217185320,
        "sender_full_name": "simulacrum",
        "timestamp": 1605727996
    },
    {
        "content": "<p>is it safe to just get the pointer and cast it, or would the vtable pointer make that unsound</p>",
        "id": 217185345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605728017
    },
    {
        "content": "<p>because it's a fat pointer, right?</p>",
        "id": 217185377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605728040
    },
    {
        "content": "<p>I <em>think</em> we guarantee that the pointer cast of an unsized to sized type gives you the data ptr, but I'm not sure on that</p>",
        "id": 217185421,
        "sender_full_name": "simulacrum",
        "timestamp": 1605728047
    },
    {
        "content": "<p>(and that example should be as_ptr(), not into_raw, I guess)</p>",
        "id": 217185449,
        "sender_full_name": "simulacrum",
        "timestamp": 1605728061
    },
    {
        "content": "<p>I can't find it immediately in reference</p>",
        "id": 217185582,
        "sender_full_name": "simulacrum",
        "timestamp": 1605728126
    },
    {
        "content": "<p>Certainly that's what we do with slice pointers; it's probably the same for other fat pointers too.  (Not something I've done.)</p>",
        "id": 217190168,
        "sender_full_name": "scottmcm",
        "timestamp": 1605730297
    }
]