[
    {
        "content": "<p>In a new <code>Write</code>-like trait in a library, what are cases where having an associated type for errors would be useful? As opposed to forcing the use of a single type defined in the library. <a href=\"https://github.com/japaric/ufmt/issues/27\">https://github.com/japaric/ufmt/issues/27</a></p>",
        "id": 223381943,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1611154179
    },
    {
        "content": "<p>For formatting traits specifically, I feel like the error types used by <code>Display</code> and <code>Debug</code> don't really add value since they throw away all info about the error</p>",
        "id": 223382234,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611154277
    },
    {
        "content": "<p>To make it more concrete, <a href=\"https://foss.heptapod.net/octobus/rust/format-bytes/\">https://foss.heptapod.net/octobus/rust/format-bytes/</a> formats to arbitrary bytes instead of Unicode. The two options I’m considering is a new trait with an associated error type, or <code>std::io::Write</code> which always uses <code>std::io::Error</code>.</p>",
        "id": 223382552,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1611154390
    },
    {
        "content": "<p>Do you want to be <code>#![no_std]</code> friendly? Then, <code>io::Error</code> and <code>io::Write</code> are not an option.</p>",
        "id": 223382721,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611154453
    },
    {
        "content": "<p>Will anything take a fallible closure? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223385707,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611155362
    },
    {
        "content": "<p>Good point <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>, fortunately not a concern for us</p>",
        "id": 223420291,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1611169913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> No, why?</p>",
        "id": 223420391,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1611169955
    },
    {
        "content": "<p>I haven’t thought deeply about the specific case, but one of the painful things is around composing error types when there’s the library error and “my” error.</p>",
        "id": 223423852,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611171418
    },
    {
        "content": "<p>With one true library error, I have to hope that you provided a way to construct your error from my error.</p>",
        "id": 223423941,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611171474
    },
    {
        "content": "<p>When things can be parametrized, then I have a shot at unifying the errors.</p>",
        "id": 223424130,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611171577
    }
]