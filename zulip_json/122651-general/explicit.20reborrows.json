[
    {
        "content": "<p>Does someone know why I have to explicitly reborrow here?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">walk_abstract_const</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span>: <span class=\"nc\">AbstractConst</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">recurse</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">recurse</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span>: <span class=\"nc\">AbstractConst</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Node</span>::<span class=\"n\">Leaf</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Node</span>::<span class=\"n\">Binop</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">walk_abstract_const</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">.</span><span class=\"n\">subtree</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">walk_abstract_const</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">.</span><span class=\"n\">subtree</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Node</span>::<span class=\"n\">UnaryOp</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">walk_abstract_const</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">.</span><span class=\"n\">subtree</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Node</span>::<span class=\"n\">FunctionCall</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">walk_abstract_const</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">.</span><span class=\"n\">subtree</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">walk_abstract_const</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"p\">.</span><span class=\"n\">subtree</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Not doing so results in \"error[E0382]: borrow of moved value: <code>f</code>\". Iirc we automatically reborrow implicitly in some cases, so I am surprised that this isn't happening here</p>",
        "id": 211518919,
        "sender_full_name": "lcnr",
        "timestamp": 1601312067
    },
    {
        "content": "<p>I ran into this issue with sqlx, apparently <code>F</code> being a trait means the compiler doesn't know to reborrow?</p>",
        "id": 211519039,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601312127
    },
    {
        "content": "<p>So the issue is that <code>f</code> is a trait object?</p>",
        "id": 211519146,
        "sender_full_name": "lcnr",
        "timestamp": 1601312164
    },
    {
        "content": "<p>I think so</p>",
        "id": 211519161,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601312178
    },
    {
        "content": "<p>wait, I just realized that this code is wrong</p>",
        "id": 211519182,
        "sender_full_name": "lcnr",
        "timestamp": 1601312189
    },
    {
        "content": "<p>uff</p>",
        "id": 211519188,
        "sender_full_name": "lcnr",
        "timestamp": 1601312190
    },
    {
        "content": "<p>well no - that <code>walk_abstract_const</code> <em>takes</em> a generic type implementing a trait</p>",
        "id": 211519195,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601312194
    },
    {
        "content": "<p><code>recurse</code> has to call <code>recurse</code> itself instead of <code>walk_abstract_const</code></p>",
        "id": 211519243,
        "sender_full_name": "lcnr",
        "timestamp": 1601312220
    },
    {
        "content": "<p>you'd have the same issue calling <code>walk_abstract_const</code> with a concrete type</p>",
        "id": 211519246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601312221
    },
    {
        "content": "<p>aaah, and now the reborrow happens implicitly</p>",
        "id": 211519309,
        "sender_full_name": "lcnr",
        "timestamp": 1601312252
    },
    {
        "content": "<p>Thank you <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 211519356,
        "sender_full_name": "lcnr",
        "timestamp": 1601312281
    },
    {
        "content": "<p>no problem :) thank @mehcode, they explained it to me the first time</p>",
        "id": 211519416,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601312294
    },
    {
        "content": "<p>See also <a href=\"https://stackoverflow.com/q/48143889/155423\">Why can't I reuse a &amp;mut reference after passing it to a function that accepts a generic type?</a></p>",
        "id": 211522159,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601313494
    },
    {
        "content": "<p>I would've loved an explanation in that SO answer on _why_ there's no implicit reborrow made by the compiler there</p>",
        "id": 211532649,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1601318704
    },
    {
        "content": "<p>I can add it if you find it!</p>",
        "id": 211532831,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601318788
    },
    {
        "content": "<p>because in the current compiler architecture, you only get a chance to do a coercion if both source and target type are known at the coercion site</p>",
        "id": 211532845,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601318793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> you feel confident enough about that that I should edit it in?</p>",
        "id": 211532990,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601318855
    },
    {
        "content": "<p>I think so, yeah</p>",
        "id": 211533140,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601318904
    },
    {
        "content": "<p>Added.</p>",
        "id": 211533731,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601319150
    }
]