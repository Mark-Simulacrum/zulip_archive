[
    {
        "content": "<p>I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>note: /usr/bin/ld: /workspace/dbg/target/x86_64-unknown-linux-musl/release/deps/shellcode-88fe6c8e70a1a077.shellcode.3db9e93b-cgu.0.rcgu.o: in function `_start&#39;:\n          shellcode.3db9e93b-cgu.0:(.text._start+0x0): multiple definition of `_start&#39;; /home/gitpod/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-musl/lib/self-contained/rcrt1.o:rcrt1.c:(.text+0x0): first defined here\n          /usr/bin/ld: /home/gitpod/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-musl/lib/self-contained/rcrt1.o: in function `__dls2&#39;:\n          /build/musl-cross-make/build/local/x86_64-linux-musl/obj_musl/../src_musl/crt/rcrt1.c:13: undefined reference to `main&#39;\n          /usr/bin/ld: /build/musl-cross-make/build/local/x86_64-linux-musl/obj_musl/../src_musl/crt/rcrt1.c:13: undefined reference to `__libc_start_main&#39;\n          collect2: error: ld returned 1 exit status\n</code></pre></div>",
        "id": 273416206,
        "sender_full_name": "AF",
        "timestamp": 1645984201
    },
    {
        "content": "<p>I think that is because rustc explicitly passes the libc.a and crt1.o shipped with rustc by default to ensure that you don't need musl installed. You could try <code>-Cself-contained=no</code>.</p>",
        "id": 273418400,
        "sender_full_name": "bjorn3",
        "timestamp": 1645986943
    },
    {
        "content": "<p>musl is statically linked with rcrt1.o. It is impossible to not use it. I probably just want to use nightly-x86_64-unknown-none</p>",
        "id": 273418448,
        "sender_full_name": "AF",
        "timestamp": 1645987001
    },
    {
        "content": "<p>I just figured let me know if I am wrong</p>",
        "id": 273418457,
        "sender_full_name": "AF",
        "timestamp": 1645987026
    },
    {
        "content": "<blockquote>\n<p>I probably just want to use nightly-x86_64-unknown-none</p>\n</blockquote>\n<p>I would guess so. You may be interested in rustix for performing syscalls. You will probably need to edit it's <a href=\"http://build.rs\">build.rs</a> to make it use linux syscalls rather than libc calls. It can't auto detect linux for a non <code>*-linux-*</code> triple.</p>",
        "id": 273418801,
        "sender_full_name": "bjorn3",
        "timestamp": 1645987458
    },
    {
        "content": "<p>Yah I think I am going to make a custom target and use the libc crate for the const values I need for the syscall. Btw I used ‘sc’ crate for the system calls up until now… you think rustix is better?</p>",
        "id": 273419259,
        "sender_full_name": "AF",
        "timestamp": 1645988165
    },
    {
        "content": "<p>On windows I am going to use the PEB to get the location of ntdll instead of making these syscalls</p>",
        "id": 273419275,
        "sender_full_name": "AF",
        "timestamp": 1645988217
    },
    {
        "content": "<p>Rustix has more high level bindings, most of which are safe. This may be an advantage (easier to program) or disadvantage (less control).</p>",
        "id": 273420504,
        "sender_full_name": "bjorn3",
        "timestamp": 1645989732
    },
    {
        "content": "<p>But they also implement the low level syscall as I see in the sources which is super cool… I like it. Thx! You helped me a lot</p>",
        "id": 273420598,
        "sender_full_name": "AF",
        "timestamp": 1645989868
    },
    {
        "content": "<p>No problem.</p>",
        "id": 273420608,
        "sender_full_name": "bjorn3",
        "timestamp": 1645989902
    }
]