[
    {
        "content": "<p>Is there a nice way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()]);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}, {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221042977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609138594
    },
    {
        "content": "<p>My current best alternative is convoluted, to say the least</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()]);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">into_vec</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">drain</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}, {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221043033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609138704
    },
    {
        "content": "<p>You could unsafely fiddle the box into being a vec.</p>",
        "id": 221046766,
        "sender_full_name": "Lokathor",
        "timestamp": 1609144507
    },
    {
        "content": "<p>(And then pop or into_iter or whatever)</p>",
        "id": 221046787,
        "sender_full_name": "Lokathor",
        "timestamp": 1609144542
    },
    {
        "content": "<p>I don't think the box -&gt; vec needs to be unsafe (I used <code>into_vec</code> to do just that in the second snippet)</p>",
        "id": 221047266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609145259
    },
    {
        "content": "<p>but the move out is quite painful; I thought that slice patterns would help here but maybe it's just not possible to use them with move</p>",
        "id": 221047323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609145314
    },
    {
        "content": "<p>(The fact that <code>Box&lt;[T]&gt;</code> doesn't get as much love in std as <code>Vec&lt;T&gt;</code> is a shame, since I use it widely in my codebase because it saves memory. But at least in settings like this it's generally no extra runtime cost to use <code>into_vec</code> and then immediately destructure it; at least I would hope that both versions above translate essentially to <code>let a = foo[0]; let b = foo[1];</code> in the assembly)</p>",
        "id": 221047522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609145591
    },
    {
        "content": "<p>Oh gosh, you're already using vec. Zulip was acting up and showed one post but not the other.</p>",
        "id": 221051584,
        "sender_full_name": "Lokathor",
        "timestamp": 1609150932
    },
    {
        "content": "<p>That seems like something warranting a <code>TryInto</code> implementation to go from a boxed slice to a boxed array</p>",
        "id": 221052286,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609151776
    },
    {
        "content": "<p>Unfortunately that doesn't work with the fancier features of slice patterns like <code>[a, b, .., c]</code> or having multiple matches like <code>match *foo { [a, b] =&gt; ..., [a, b, c] =&gt; ... }</code></p>",
        "id": 221053339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609153230
    },
    {
        "content": "<blockquote>\n<p>The fact that Box&lt;[T]&gt; doesn't get as much love in std as Vec&lt;T&gt; is a shame</p>\n</blockquote>\n<p>A <code>Box&lt;[T]&gt;</code> mostly makes sense if you have a huge amount of them and really need to save that extra usize compared to <code>Vec</code>. And if it's owned by structs then you can't move out of it or manipulate it in many of the ways you can manipulate a Vec anyway.</p>",
        "id": 221055490,
        "sender_full_name": "The 8472",
        "timestamp": 1609155817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> note that if instead of a <code>*</code>-move on the matchee, one uses a <code>box</code> wrapping pattern, it works: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fddda7a81c0e21594405dc91379c676e\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fddda7a81c0e21594405dc91379c676e</a></p>",
        "id": 221059891,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609161448
    },
    {
        "content": "<p>That only works because u64 is Copy though. You still can't move out of the Box that way <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ad349c656f5a96e8107a6750b0bc1084\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ad349c656f5a96e8107a6750b0bc1084</a></p>",
        "id": 221069816,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609171111
    },
    {
        "content": "<p>Makes me think of the DerefMove discussion. I'd want DerefMove to handle this case but no idea how to make it work since I'd want to move the unsized [Foo] out of the box</p>",
        "id": 221070209,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609171412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/move.20out.20of.20Box.3C.5BT.5D.3E/near/221055490\">said</a>:</p>\n<blockquote>\n<p>And if it's owned by structs then you can't move out of it or manipulate it in many of the ways you can manipulate a Vec anyway.</p>\n</blockquote>\n<p>Yes, that's my point. There isn't any good reason for this AFAIK; I don't think there is anything preventing <code>Box&lt;[T]&gt;</code> from having <code>drain</code>, <code>into_iter</code>, and other things like that just like <code>Vec&lt;T&gt;</code>.</p>",
        "id": 221073849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609174394
    },
    {
        "content": "<p>(Actually, on second thought <code>drain</code> doesn't really make sense on <code>Box&lt;[T]&gt;</code> unless you are draining everything in which case <code>into_iter</code> would be better - I could have used that instead in my code snippet above. And there is an issue with having <code>Box&lt;[T]&gt;::into_iter</code>, namely that <code>x.into_iter()</code> currently gives you <code>slice::IntoIter</code> via auto deref. I think we should do a crater run or something on this use though, because I can't think of any case where it's not a mistake to write that - <code>x.iter()</code> is the clearer and correct way to do that.)</p>",
        "id": 221074304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609174799
    },
    {
        "content": "<p>the exact same discussion happened about [T;N].into_iter() if you're interested: <a href=\"https://github.com/rust-lang/rust/pull/65819\">https://github.com/rust-lang/rust/pull/65819</a></p>",
        "id": 221074626,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609175070
    },
    {
        "content": "<p>Hm, since it was a year old I was expecting it to be stalled but it looks like there is some forward progress. Since the same future-compat issue blocks both  [T;N].into_iter() and Box&lt;[T]&gt;.into_iter(), is there a way to make them both blocked on the same issue?</p>",
        "id": 221080213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609179491
    },
    {
        "content": "<p>you should ask it there, it indeed feels like it could be solved at the same time</p>",
        "id": 221082081,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609181086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/122651-general/topic/move.20out.20of.20Box.3C.5BT.5D.3E/near/221069816\">said</a>:</p>\n<blockquote>\n<p>That only works because u64 is Copy though. You still can't move out of the Box that way <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ad349c656f5a96e8107a6750b0bc1084\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ad349c656f5a96e8107a6750b0bc1084</a></p>\n</blockquote>\n<p>Oh damn, that's so disappointing. I had a hunch that with <code>box</code> patterns it was gonna work ;_;</p>",
        "id": 221093247,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609191496
    },
    {
        "content": "<p>I suspect the original code doesn’t work because <code>*foo</code> has type <code>[String]</code> which is <code>!Sized</code>. Going through <code>Box&lt;[String; 2]&gt;</code> works: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d72300ce4eecb0f2b75cb7374e485f65\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d72300ce4eecb0f2b75cb7374e485f65</a></p>",
        "id": 221152309,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609264030
    },
    {
        "content": "<p>We could add <code>impl&lt;T; const N: usize&gt; TryFrom&lt;Box&lt;[T]&gt;&gt; for Box&lt;[T; N]&gt;</code></p>",
        "id": 221152361,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609264070
    },
    {
        "content": "<p>since we already have <code>&amp;[T]</code> → <code>&amp;[T; N]</code></p>",
        "id": 221152410,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609264089
    },
    {
        "content": "<p>wait, we do already have that impl</p>",
        "id": 221153679,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609265052
    },
    {
        "content": "<p>It’s more verbose than I’d hoped, but:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">convert</span>::<span class=\"n\">TryFrom</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">boxed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">boxed</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}, {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221153931,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609265241
    },
    {
        "content": "<p>Inference is confused without specifying the conversion target type</p>",
        "id": 221154007,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609265288
    },
    {
        "content": "<p>I'd love to be able to do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">???</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>though, and TryFrom doesn't solve that</p>",
        "id": 221154930,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609266020
    },
    {
        "content": "<p>Note, in my actual use case <code>foo: Box&lt;[NonCopy]&gt;</code> is a parameter; I wouldn't be using <code>Box&lt;[T]&gt;</code> if it had a fixed length</p>",
        "id": 221161691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609271578
    },
    {
        "content": "<p>(oh, you mean to use <code>[T; 2]</code> because that's the size of the pattern)</p>",
        "id": 221161865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609271738
    },
    {
        "content": "<p>I don't see why it matters that <code>*foo</code> is <code>!Sized</code> though, because it's an lvalue in the match statement</p>",
        "id": 221161959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609271792
    },
    {
        "content": "<p>we shouldn't be copying it to the stack in the first place</p>",
        "id": 221161991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609271812
    },
    {
        "content": "<p>I don’t know to what extent that lvalue reasoning applies when moving out of <code>Box</code>. Such moves are special cases in the language and the compiler since there’s no <code>DerefMove</code> trait, so I wouldn’t be surprised if the semantics are not completely well-specified and/or the implementation buggy when combining this with DST <code>[T]</code>. I think it’s worth filing a bug, maybe this can can be made to work?</p>",
        "id": 221194206,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609311303
    }
]