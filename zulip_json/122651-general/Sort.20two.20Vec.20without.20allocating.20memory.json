[
    {
        "content": "<p>I've started implementing iterators from lists, small vectors, etc. to learn how Iterator and their impls work. There is one thing I don't know how to do. In C++, I can just:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span> <span class=\"n\">v0</span><span class=\"p\">{</span><span class=\"sc\">'a'</span><span class=\"p\">,</span><span class=\"sc\">'b'</span><span class=\"p\">,</span><span class=\"sc\">'c'</span><span class=\"p\">};</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">v1</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">};</span>\n<span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">),</span> <span class=\"p\">[](</span><span class=\"k\">auto</span><span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"k\">auto</span><span class=\"o\">&amp;&amp;</span> <span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n<span class=\"c1\">// v0 = ['b', 'a', 'c']</span>\n<span class=\"c1\">// v1 = [1, 2, 3]</span>\n</code></pre></div>\n<p>and both vectors get sorted together, without allocating any extra memory, unnecessary memory transfers, etc. </p>\n<p>How can I do this in Rust?</p>\n<p>I don't seem to find a way to do this that doesn't require extra storage. I could allocate a third vector for storing a permutation, and then compute it, and then apply it twice, but that seems unnecessary. I could also allocate a vector of tuples, sort that, and then re-distribute the elements. </p>\n<p>But how do I do this without using O(N) extra space ?</p>",
        "id": 245437017,
        "sender_full_name": "hannahE2",
        "timestamp": 1625834323
    },
    {
        "content": "<p>zip isn't part of the c++ standard library, is it?</p>",
        "id": 245437878,
        "sender_full_name": "The 8472",
        "timestamp": 1625834847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Sort.20two.20Vec.20without.20allocating.20memory/near/245437878\">said</a>:</p>\n<blockquote>\n<p>zip isn't part of the c++ standard library, is it?</p>\n</blockquote>\n<p>I'm pretty sure it was added with the rest of ranges</p>",
        "id": 245438002,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625834905
    },
    {
        "content": "<p>I think it ended up postponed for C++23?</p>",
        "id": 245438159,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625834993
    },
    {
        "content": "<p>I checked cppreference and didn't see it there, that's why I'm asking.</p>\n<p>Anyway, the sort implementations in the rust standard library only operate on a single slice at a time. And rust iterators are single-pass (unless you clone them before use) so that wouldn't work great for sorting.</p>\n<p>If that kind of external sorting exists it's probably in some library.</p>",
        "id": 245438447,
        "sender_full_name": "The 8472",
        "timestamp": 1625835160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/122651-general/topic/Sort.20two.20Vec.20without.20allocating.20memory/near/245437878\">said</a>:</p>\n<blockquote>\n<p>zip isn't part of the c++ standard library, is it?</p>\n</blockquote>\n<p>Its available in range-v3 at least, I'm not really sure what's in C++17,20,23..</p>",
        "id": 245441684,
        "sender_full_name": "hannahE2",
        "timestamp": 1625836658
    },
    {
        "content": "<p>The basic thing to say is that C++ iterators are more like cursors / special slice ops than Rust iterators, which are a general-purpose state machine. I believe that <code>sort</code> implementation is taking advantage of arbitrary indexing, which is something not part of <code>Iterator</code>'s API.</p>",
        "id": 245453037,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1625842254
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/32564455/155423\">How can I co-sort two Vecs based on the values in one of the Vecs?</a></p>",
        "id": 245497124,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1625864411
    },
    {
        "content": "<p>That still allocates, doesn't it?</p>",
        "id": 245536388,
        "sender_full_name": "Laurențiu",
        "timestamp": 1625903445
    },
    {
        "content": "<p>Ah, I missed that original caveat.</p>",
        "id": 245676823,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626091650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/122651-general/topic/Sort.20two.20Vec.20without.20allocating.20memory/near/245453037\">said</a>:</p>\n<blockquote>\n<p>I believe that <code>sort</code> implementation is taking advantage of arbitrary indexing, which is something not part of <code>Iterator</code>'s API.</p>\n</blockquote>\n<p>You could probably cobble together a quicksort  with <code>where I: DoubleEndedIterator + ExactSizeIterator + Clone, &lt;I as Iterator&gt;::Item = &amp;mut T</code> and <code>advance_by</code> once that's stable. For each recursion level you clone to get two copies and then advance them so you have two halves on which you can perform the next recursion level.<br>\nIt could work fine for <code>slice::IterMut</code> iterators. But if you pass a <code>vec::IntoIter&lt;Item=&amp;mut T&gt;</code> into it you'd end up with terrible terrible overhead due to the cloning.</p>",
        "id": 245677394,
        "sender_full_name": "The 8472",
        "timestamp": 1626092016
    },
    {
        "content": "<p>A pity we don't implement <code>Copy</code> on by-ref iterators to distinguish them from the more expensive owning ones.</p>",
        "id": 245678339,
        "sender_full_name": "The 8472",
        "timestamp": 1626092584
    },
    {
        "content": "<p>Wait... can you even Clone &amp;mut iterators? No would have to be a split method on them :/</p>",
        "id": 245678516,
        "sender_full_name": "The 8472",
        "timestamp": 1626092692
    },
    {
        "content": "<p>Copying iterators has empirically led to all sorts of problems.</p>",
        "id": 245678757,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626092876
    },
    {
        "content": "<p>Yeah, I realized that this wouldn't help here anyway.</p>",
        "id": 245680144,
        "sender_full_name": "The 8472",
        "timestamp": 1626093725
    }
]