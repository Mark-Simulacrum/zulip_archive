[
    {
        "content": "<p>I recently heard someone say that Data Races in Go are Undefined Behavior. Is that true? I was unable to find a definite answer in the Go docs, but <a href=\"http://nil.csail.mit.edu/6.824/2016/notes/gomem.pdf\" target=\"_blank\" title=\"http://nil.csail.mit.edu/6.824/2016/notes/gomem.pdf\">this talk</a> says</p>\n<blockquote>\n<p>Races on interface, string, slice, map entries can still do arbitrarily bad things</p>\n</blockquote>\n<p>That is really surprising because Go is also widely considered a \"safe\" language! Java at least gives defined semantics to its data races to earn the \"safe\" label.<br>\nAnd then I checked Swift and the situation superficially seems similar? Does anyone know more?</p>",
        "id": 182113794,
        "sender_full_name": "RalfJ",
        "timestamp": 1574952127
    },
    {
        "content": "<p>I find it rather amusing (or concerning) that the <a href=\"https://golang.org/ref/mem\" target=\"_blank\" title=\"https://golang.org/ref/mem\">Go memory model</a> literally says nothing about data races...</p>",
        "id": 182114506,
        "sender_full_name": "RalfJ",
        "timestamp": 1574952793
    },
    {
        "content": "<p>\"The Swift language guarantees memory safety in single threaded environments. However, conflicting accesses in multithreaded code lead to data races. \"<br>\n<a href=\"https://swift.org/blog/tsan-support-on-linux/\" target=\"_blank\" title=\"https://swift.org/blog/tsan-support-on-linux/\">https://swift.org/blog/tsan-support-on-linux/</a></p>",
        "id": 182890595,
        "sender_full_name": "Muhammad Mominul Huque",
        "timestamp": 1575807810
    },
    {
        "content": "<p>sure, but are data races <em>UB</em> or are they handled gracefully (Java does the latter, AFAIK the same goes for C#)?</p>",
        "id": 183167770,
        "sender_full_name": "RalfJ",
        "timestamp": 1576078151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> did you ever answer this question to your satisfaction?</p>",
        "id": 183879984,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1576785701
    },
    {
        "content": "<p>I was pointed at this part of the Go docs:</p>\n<blockquote>\n<p>When multiple goroutines access a shared variable v, they must use synchronization events to establish happens-before conditions that ensure reads observe the desired writes. </p>\n</blockquote>\n<p>My conclusion is that data races in Go <em>are</em> UB, and that \"Go is a safe language\" is imprecise at best. One could also say it's really good marketing...</p>",
        "id": 184054304,
        "sender_full_name": "RalfJ",
        "timestamp": 1577020507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> This <a href=\"https://www.reddit.com/r/golang/comments/erjsks/im_aware_of_race_condition_but_should_i_care/ff4971p/\" target=\"_blank\" title=\"https://www.reddit.com/r/golang/comments/erjsks/im_aware_of_race_condition_but_should_i_care/ff4971p/\">Reddit comment</a> from a \"Go compiler engineer\" seems to agree with that assessment. There are other users in that thread stating the same thing as well.</p>",
        "id": 186526907,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1579895103
    },
    {
        "content": "<p>Thanks for the pointer!</p>",
        "id": 186629010,
        "sender_full_name": "RalfJ",
        "timestamp": 1580057998
    },
    {
        "content": "<p>I also got confirmation from a former Uber engineer that Swift has exactly the same issue -- they are compiling code assuming no data races, and if there are data races, arbitrary things can go wrong</p>",
        "id": 186629062,
        "sender_full_name": "RalfJ",
        "timestamp": 1580058024
    }
]