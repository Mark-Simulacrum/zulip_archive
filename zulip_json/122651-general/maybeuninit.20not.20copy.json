[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> why isn't MaybeUninit Copy ?</p>",
        "id": 178175240,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571131696
    },
    {
        "content": "<p>It is? (If T is)</p>",
        "id": 178175671,
        "sender_full_name": "RalfJ",
        "timestamp": 1571132120
    },
    {
        "content": "<p>Why the \"If T is\" constraint ?</p>",
        "id": 178175702,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571132141
    },
    {
        "content": "<p>(why isn't it unconditionally Copy?)</p>",
        "id": 178175723,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571132161
    },
    {
        "content": "<p>Feels like a footgun possibly</p>",
        "id": 178176202,
        "sender_full_name": "centril",
        "timestamp": 1571132599
    },
    {
        "content": "<p>Is there rationale for this somewhere?</p>",
        "id": 178177325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571133692
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53491#issuecomment-443477750\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53491#issuecomment-443477750\">https://github.com/rust-lang/rust/issues/53491#issuecomment-443477750</a></p>",
        "id": 178177830,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571134168
    },
    {
        "content": "<p>I wish there was a Copy wrapper type so that I could just write <code>MaybeUninit&lt;CopyWrapper&lt;NotCopy&gt;&gt;</code></p>",
        "id": 178177937,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571134242
    },
    {
        "content": "<p>Otherwise <code>MaybeUninit</code> cannot be used with <code>!Copy</code> types</p>",
        "id": 178177957,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571134260
    },
    {
        "content": "<p>The current warning that says that code should stop using <code>mem::uninitialized</code> and use <code>MaybeUninit</code> instead is therefore being emitted too early</p>",
        "id": 178177992,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571134306
    },
    {
        "content": "<p>Since if the type involved is not <code>Copy</code>, then you can't use <code>MaybeUninit</code> for it</p>",
        "id": 178178045,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571134328
    },
    {
        "content": "<p>Opened: <a href=\"https://github.com/rust-lang/rust/issues/65432\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65432\">https://github.com/rust-lang/rust/issues/65432</a></p>",
        "id": 178178392,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571134629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  yea we can add a \"note: ...\" to impl Copy</p>",
        "id": 178178667,
        "sender_full_name": "centril",
        "timestamp": 1571134858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> </p>\n<blockquote>\n<p>Otherwise MaybeUninit cannot be used with !Copy types</p>\n</blockquote>\n<p>Wait, but it can ?</p>",
        "id": 178179230,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135315
    },
    {
        "content": "<p><code>MaybeUninit&lt;NotCopy&gt;</code> works ?</p>",
        "id": 178179242,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135334
    },
    {
        "content": "<p><code>T: Copy =&gt; MaybeUninit&lt;T&gt;: Copy</code></p>",
        "id": 178179252,
        "sender_full_name": "centril",
        "timestamp": 1571135345
    },
    {
        "content": "<p>Sure, but MaybeUninit is a union, and if T is not Copy, then that would create an union with a NonCopy field</p>",
        "id": 178179272,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135365
    },
    {
        "content": "<p><code>WF(MaybeUninit&lt;T&gt;)</code> does not require <code>T: Copy</code></p>",
        "id": 178179273,
        "sender_full_name": "centril",
        "timestamp": 1571135366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  did you assume ^--- ?</p>",
        "id": 178179294,
        "sender_full_name": "centril",
        "timestamp": 1571135391
    },
    {
        "content": "<p>I was trying to play with my own maybeuninit, and got the mem::uninitialized warning</p>",
        "id": 178179363,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135418
    },
    {
        "content": "<p>(and with ManuallyDrop)</p>",
        "id": 178179388,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135443
    },
    {
        "content": "<p>So you only need <code>T: Copy</code> if you need the whole <code>MaybeUninit&lt;T&gt;</code> to also be <code>Copy</code></p>",
        "id": 178179403,
        "sender_full_name": "centril",
        "timestamp": 1571135458
    },
    {
        "content": "<p>is that what you need tho?</p>",
        "id": 178179418,
        "sender_full_name": "centril",
        "timestamp": 1571135476
    },
    {
        "content": "<p>I wanted the whole <code>MaybeUninit&lt;T&gt;</code> to be <code>Copy</code> even if <code>T</code> is not <code>Copy</code> to be able to put it into an union</p>",
        "id": 178179535,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135580
    },
    {
        "content": "<p>but that cannot work</p>",
        "id": 178179547,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135593
    },
    {
        "content": "<p>I've seen <a href=\"https://github.com/rust-lang/rust/issues/65432\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65432\">#65432</a> and I still don't understand why Copy would ever be relevant for replacing mem::uninit with MaybeUninit</p>",
        "id": 178179557,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571135610
    },
    {
        "content": "<p>yet somehow MaybeUninit makes it work</p>",
        "id": 178179559,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  I think the larger context might be missing here</p>",
        "id": 178179579,
        "sender_full_name": "centril",
        "timestamp": 1571135626
    },
    {
        "content": "<p>+/- some code</p>",
        "id": 178179588,
        "sender_full_name": "centril",
        "timestamp": 1571135635
    },
    {
        "content": "<p>^ Can you please take a step back and explain from the start, from first principles, what the problem is</p>",
        "id": 178179591,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571135639
    },
    {
        "content": "<p>I wanted to put a <code>MaybeUninit&lt;T: !Copy&gt;</code> in a field that requires <code>Copy</code></p>",
        "id": 178179694,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135721
    },
    {
        "content": "<p>that happened to be an <code>union</code> field</p>",
        "id": 178179700,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135732
    },
    {
        "content": "<p>that did not work on stable</p>",
        "id": 178179718,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135746
    },
    {
        "content": "<p>If T is not Copy, then you can't put the T there directly (using mem::uninitialized instead of MaybeUninit) either</p>",
        "id": 178179776,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571135799
    },
    {
        "content": "<p>I tried to use <code>ManuallyDrop</code> like <code>MaybeUninit</code> does but that did not work</p>",
        "id": 178179783,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135814
    },
    {
        "content": "<p>I concluded without checking that <code>MaybeUninit&lt;T&gt;</code> can therefore not work for <code>T: !Copy</code></p>",
        "id": 178179803,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135834
    },
    {
        "content": "<p>But it does, because its magic</p>",
        "id": 178179806,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> you can do that on unstable Rust with untagged unions</p>",
        "id": 178179820,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571135870
    },
    {
        "content": "<p>Exactly, MaybeUninit isn't magic, just using an unstable feature</p>",
        "id": 178179878,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571135904
    },
    {
        "content": "<p>(which is being worked on by Oliver atm)</p>",
        "id": 178179887,
        "sender_full_name": "centril",
        "timestamp": 1571135920
    },
    {
        "content": "<p>And once \"unions fields don't have to be Copy, just must not have drop glue\" is implemented and stabilized, you can do it on stable too (with ManuallyDrop)</p>",
        "id": 178179911,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571135951
    },
    {
        "content": "<p><code>union Foo&lt;T&gt; { t: T }</code>, by the way, won't work after that's implemented</p>",
        "id": 178179929,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571135987
    },
    {
        "content": "<p>Do we get a bound for <code>T</code> ?</p>",
        "id": 178179981,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136006
    },
    {
        "content": "<p>No</p>",
        "id": 178180005,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136041
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/2514-union-initialization-and-drop.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/2514-union-initialization-and-drop.html\">https://rust-lang.github.io/rfcs/2514-union-initialization-and-drop.html</a></p>",
        "id": 178180006,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136044
    },
    {
        "content": "<p>MaybeUninit is magic because it can use unstable features on stable, just like anything in libstd</p>",
        "id": 178180012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136051
    },
    {
        "content": "<p>There is quite a bit of code using <code>union Foo&lt;T&gt; { t: T }</code></p>",
        "id": 178180035,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136070
    },
    {
        "content": "<p>\"using unstable features\" is a very low threshold for \"magic\"</p>",
        "id": 178180037,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136072
    },
    {
        "content": "<p>That code is all on nightly and using an unstable feature</p>",
        "id": 178180053,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136093
    },
    {
        "content": "<p>Sure, and we can break it</p>",
        "id": 178180068,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136112
    },
    {
        "content": "<p>I'm just saying that the breakage might be massive</p>",
        "id": 178180075,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136121
    },
    {
        "content": "<p>Also doesn't seem very onerous to transition, rather mechanic?</p>",
        "id": 178180077,
        "sender_full_name": "centril",
        "timestamp": 1571136122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> just wait until specialization needs to be rearchitected :P</p>",
        "id": 178180128,
        "sender_full_name": "centril",
        "timestamp": 1571136138
    },
    {
        "content": "<p><code>union Foo&lt;T&gt; { t: ManuallyDrop&lt;T&gt; }</code> should work</p>",
        "id": 178180141,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136150
    },
    {
        "content": "<p>you ain't seen nothing yet... :D</p>",
        "id": 178180143,
        "sender_full_name": "centril",
        "timestamp": 1571136153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> aside: maybe you want in on reviewing <a href=\"https://github.com/rust-lang/rust/pull/62330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62330\">https://github.com/rust-lang/rust/pull/62330</a>? seems up your alley</p>",
        "id": 178180196,
        "sender_full_name": "centril",
        "timestamp": 1571136213
    },
    {
        "content": "<p>Like, there is quite a bit of code using <code>union U&lt;T, U&gt; { a: T, b: U }</code> as a way to do transmutes in statics</p>",
        "id": 178180200,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136217
    },
    {
        "content": "<p>Because <code>mem::transmute</code> isn't a <code>const fn</code></p>",
        "id": 178180225,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136239
    },
    {
        "content": "<p>A warning of the type \"don't use unions for transmutes, use <code>mem::transmute</code> instead\" would help</p>",
        "id": 178180299,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136273
    },
    {
        "content": "<p>I'm not a fan of making <code>mem::transmute</code> more magic than it already is</p>",
        "id": 178180349,
        "sender_full_name": "centril",
        "timestamp": 1571136317
    },
    {
        "content": "<p>Feel free to implement it but I can't honestly say that this is high on my list of priorities especially when everyone's going to get a reasonable clear compiler error in (hopefully) a few weeks anyway</p>",
        "id": 178180356,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136325
    },
    {
        "content": "<p>Starting by the standard library :D</p>",
        "id": 178180442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136381
    },
    {
        "content": "<p>Play stupid games, win stupid prizes</p>",
        "id": 178180470,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136408
    },
    {
        "content": "<p>(I assume \"it\" is referring to the warning and not reviewing <a href=\"https://github.com/rust-lang/rust/issues/62330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62330\">#62330</a>)</p>",
        "id": 178180520,
        "sender_full_name": "centril",
        "timestamp": 1571136457
    },
    {
        "content": "<p>Not really, since that probably isn't Olis fault, yet the PR that tries to land it will need to fix things there</p>",
        "id": 178180523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136461
    },
    {
        "content": "<p>(Yes, \"it\" = such a warning)</p>",
        "id": 178180622,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136524
    },
    {
        "content": "<p>I'm sure that Oliver would be happy to help if he has the time. He's quite a nice fellow! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 178180771,
        "sender_full_name": "centril",
        "timestamp": 1571136654
    },
    {
        "content": "<p>What I was trying to say is that PRs that change nightly features need to change all components that use them for the PR to be merged.</p>",
        "id": 178180900,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136803
    },
    {
        "content": "<p>You mentioned specialization before. Whoever tries to land a PR that changes the current semantics would need to workaround everything in the standard library that uses it.</p>",
        "id": 178180915,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136838
    },
    {
        "content": "<p>That can be done, but is a lot of work.</p>",
        "id": 178180958,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> oh; that seems like a given, yes</p>",
        "id": 178180987,
        "sender_full_name": "centril",
        "timestamp": 1571136887
    },
    {
        "content": "<p>The longer the feature remains unstable, particularly when the feature is useful, the larger the problem.</p>",
        "id": 178180989,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571136890
    },
    {
        "content": "<p>but that should mostly be \"boring mechanic work\"</p>",
        "id": 178180999,
        "sender_full_name": "centril",
        "timestamp": 1571136899
    },
    {
        "content": "<p>Yes, that is true. Why are you stressing it? You don't seem to advocate any alternative, or draw other consequences from it. It's a true observation, now what?</p>",
        "id": 178181033,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571136928
    },
    {
        "content": "<blockquote>\n<p>Otherwise MaybeUninit cannot be used with !Copy types<br>\nSure, but MaybeUninit is a union, and if T is not Copy, then that would create an union with a NonCopy field</p>\n</blockquote>\n<p>you didn't test this, did you? MaybeUninit works fine for all<code>T</code>. it's not always <code>Copy</code> but it works just fine. You rarely want to copy a <code>MaybeUninit</code>.</p>",
        "id": 178181099,
        "sender_full_name": "RalfJ",
        "timestamp": 1571136973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> what you are asking for is <a href=\"https://github.com/rust-lang/rust/pull/62330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62330\">https://github.com/rust-lang/rust/pull/62330</a></p>",
        "id": 178181156,
        "sender_full_name": "RalfJ",
        "timestamp": 1571137035
    },
    {
        "content": "<p>this has nothing to do with MaybeUninit, and only coincidentally anything to do with Copy</p>",
        "id": 178181168,
        "sender_full_name": "RalfJ",
        "timestamp": 1571137056
    },
    {
        "content": "<p>ah that has all been said, good :D</p>",
        "id": 178181226,
        "sender_full_name": "RalfJ",
        "timestamp": 1571137084
    },
    {
        "content": "<p>Yeah; Oliver just needs to do some $dayjob first :P</p>",
        "id": 178181242,
        "sender_full_name": "centril",
        "timestamp": 1571137100
    },
    {
        "content": "<p>(before fixing the stuff in the PR)</p>",
        "id": 178181251,
        "sender_full_name": "centril",
        "timestamp": 1571137106
    },
    {
        "content": "<blockquote>\n<p>It's a true observation, now what?</p>\n</blockquote>\n<p>Maybe be more conservative with which unstable features are used from within the toolchain ?</p>",
        "id": 178181257,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137113
    },
    {
        "content": "<p>The bar for that is now zero.</p>",
        "id": 178181262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137126
    },
    {
        "content": "<p>so let me just note in closing that <code>MaybeUninit</code> is actually not special-cased in the compiler; rather it's a union where the <code>init</code> field has type <code>ManuallyDrop&lt;T&gt;</code>. which will work in unions for any <code>T</code> once we stabilize it.</p>",
        "id": 178181275,
        "sender_full_name": "RalfJ",
        "timestamp": 1571137142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> well except for the <code>repr(transparent)</code> aspect... -ish</p>",
        "id": 178181297,
        "sender_full_name": "centril",
        "timestamp": 1571137168
    },
    {
        "content": "<p>yeah well that's a separate story</p>",
        "id": 178181306,
        "sender_full_name": "RalfJ",
        "timestamp": 1571137179
    },
    {
        "content": "<p>yep</p>",
        "id": 178181311,
        "sender_full_name": "centril",
        "timestamp": 1571137185
    },
    {
        "content": "<p>Why the \"-ish\" ?</p>",
        "id": 178181366,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137204
    },
    {
        "content": "<p>(muffled suppressed ranting about transparent unions)</p>",
        "id": 178181388,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571137218
    },
    {
        "content": "<p>I thought the RFC was merged</p>",
        "id": 178181406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137242
    },
    {
        "content": "<p>and implemented</p>",
        "id": 178181410,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> it is not completely true that it is special cased... it could ostensibly be stabilized for everyone</p>",
        "id": 178181418,
        "sender_full_name": "centril",
        "timestamp": 1571137255
    },
    {
        "content": "<p>it's the only thing using the feature tho atm</p>",
        "id": 178181433,
        "sender_full_name": "centril",
        "timestamp": 1571137270
    },
    {
        "content": "<p>Did it end up not working for MaybeUninit?</p>",
        "id": 178181434,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137272
    },
    {
        "content": "<p>I think it worked?</p>",
        "id": 178181442,
        "sender_full_name": "centril",
        "timestamp": 1571137285
    },
    {
        "content": "<p>That's why I thought too</p>",
        "id": 178181446,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137292
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>It's a true observation, now what?</p>\n</blockquote>\n<p>Maybe be more conservative with which unstable features are used from within the toolchain ?</p>\n</blockquote>\n<p>Sure, that is a thing you could advocate. I don't think you'd be very successful, though, absent hard evidence that the effort of updating parts of libstd/rustc when changing some unstable feature is a real problem outweighing the benefit of using that feature.</p>",
        "id": 178181447,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571137292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> @bjorn3 is trying to get <code>stdarch</code> to work on cranelift</p>",
        "id": 178181517,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137333
    },
    {
        "content": "<p>I would probably agree with <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>'s point when it comes to unordered</p>",
        "id": 178181525,
        "sender_full_name": "centril",
        "timestamp": 1571137342
    },
    {
        "content": "<p>let's just say trying to map thousands of <code>link_llvm_intrinsic</code> to cranelift isn't fun</p>",
        "id": 178181540,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137363
    },
    {
        "content": "<p>and in some cases I might require tests in tidy or something</p>",
        "id": 178181542,
        "sender_full_name": "centril",
        "timestamp": 1571137366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> we're careful about not exposing e.g. specialization in a problematic way tho</p>",
        "id": 178181572,
        "sender_full_name": "centril",
        "timestamp": 1571137414
    },
    {
        "content": "<p>and we can always remove those impls</p>",
        "id": 178181581,
        "sender_full_name": "centril",
        "timestamp": 1571137433
    },
    {
        "content": "<p>(from a semantic POV)</p>",
        "id": 178181588,
        "sender_full_name": "centril",
        "timestamp": 1571137439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> So that sucks, but what's the alternative there that's (1) easier on Cranelift and (2) would have been acceptable during development of std::arch?</p>",
        "id": 178181631,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571137444
    },
    {
        "content": "<p>We had \"platform-intrinsics\" before. That would have been easier on Cranelift, and probably miri as well.</p>",
        "id": 178181667,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571137490
    },
    {
        "content": "<p>I am extremely skeptical</p>",
        "id": 178181679,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571137503
    },
    {
        "content": "<p>In any case this is all hypothetical and I have better things to do</p>",
        "id": 178181695,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571137521
    },
    {
        "content": "<p>I dont see what intrinsics have to do with <code>MaybeUninit</code> using an unstable union feature though...</p>",
        "id": 178309392,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246362
    }
]