[
    {
        "content": "<p>I've found quite a strange thing in <code>ptr::write</code> source: <a href=\"https://doc.rust-lang.org/src/core/ptr/mod.rs.html#875\">https://doc.rust-lang.org/src/core/ptr/mod.rs.html#875</a>. In particular, I'm curious about <code>&amp;mut *dst</code> part and how does it handle a pointer to uninitialized memory, so consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">().</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mh\">0x12</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As far as I know, ref must always reference a properly initialized object. And in the <code>ptr::write</code> the pointer for uninitialized memory is dereferenced passing a mutable ref. So the unsafe block should be similar to <code>let y = &amp;mut *x; intrinsics::move_val_init(y, 0x12);</code>. Does it mean that either <code>ptr::write</code> has an undefined behavior (due to <code>y</code> creation is invalid), or it just exploits some internal knowledge regarding rvalue ref behavior?</p>",
        "id": 220857835,
        "sender_full_name": "Kitsu",
        "timestamp": 1608800512
    },
    {
        "content": "<p>You may want to ask at <a class=\"stream\" data-stream-id=\"136281\" href=\"/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines\">#t-lang/wg-unsafe-code-guidelines</a>.</p>",
        "id": 220858392,
        "sender_full_name": "bjorn3",
        "timestamp": 1608801279
    },
    {
        "content": "<p>Didn't find that stream, thanks for the hint, duped question there.</p>",
        "id": 220858926,
        "sender_full_name": "Kitsu",
        "timestamp": 1608802075
    }
]