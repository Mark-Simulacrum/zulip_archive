[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> what isn't clear about <a href=\"https://github.com/rust-lang/rust/issues/56292#issuecomment-442561265\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56292#issuecomment-442561265\">https://github.com/rust-lang/rust/issues/56292#issuecomment-442561265</a> ?<br>\nWASM does not have signed or unsigned integers, it just has bag of bits that are integers</p>",
        "id": 148738386,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543434761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130125\">@Dan Gohman</span> explained here <a href=\"https://github.com/rust-lang/rust/issues/56292#issuecomment-442561265\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56292#issuecomment-442561265\">https://github.com/rust-lang/rust/issues/56292#issuecomment-442561265</a> that WASM checks for overflow using <code>gt_u</code>, which means that this check interprets the bits as an unsigned integer</p>",
        "id": 148738425,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543434813
    },
    {
        "content": "<p>it has signed and unsigned integer <em>operations</em> (for those where it makes a difference)</p>",
        "id": 148738429,
        "sender_full_name": "RalfJ",
        "timestamp": 1543434817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  the operational semantics of WASM does not state whether <code>delta &lt; 0</code> is permitted or not</p>",
        "id": 148738436,
        "sender_full_name": "centril",
        "timestamp": 1543434828
    },
    {
        "content": "<p>If wasm interprets delta as unsigned, then it does not have to state that AFAICT because it always holds ?</p>",
        "id": 148738503,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543434871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  to frame it in <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s terms, I didn't see that it states whether the concatenation is interpreted in terms of signed or unsigned integer operations or not</p>",
        "id": 148738556,
        "sender_full_name": "centril",
        "timestamp": 1543434939
    },
    {
        "content": "<p>I would expect that it is unsigned; but there's doubt here imo</p>",
        "id": 148738620,
        "sender_full_name": "centril",
        "timestamp": 1543434985
    },
    {
        "content": "<p>I think that's what <span class=\"user-mention\" data-user-id=\"130125\">@Dan Gohman</span> was hinting at when they said <code>gt_u</code> is used.</p>",
        "id": 148738629,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435001
    },
    {
        "content": "<p>in particular the phrasing \"grow\" and \"append\" suggest &gt;= but that's not a formal semantics :P</p>",
        "id": 148738642,
        "sender_full_name": "centril",
        "timestamp": 1543435018
    },
    {
        "content": "<p><code>gt_u</code> is the \"greater-than unsigned\" operation</p>",
        "id": 148738644,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> ye; sadly I didn't find the OCaml code well documented or readable</p>",
        "id": 148738661,
        "sender_full_name": "centril",
        "timestamp": 1543435049
    },
    {
        "content": "<p>FWIW the spec isn't readable either, it's the only spec I actually had to send multiple PRs to because I had no idea what it was trying to say</p>",
        "id": 148738746,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435096
    },
    {
        "content": "<p>There are multiple sources of truth that sometimes are contradictory, etc.</p>",
        "id": 148738773,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> the notation wrt. operational semantics is somewhat nonstandard</p>",
        "id": 148738779,
        "sender_full_name": "centril",
        "timestamp": 1543435134
    },
    {
        "content": "<p>I'm so happy they even have a normative operational semantics</p>",
        "id": 148738801,
        "sender_full_name": "RalfJ",
        "timestamp": 1543435152
    },
    {
        "content": "<p>anyways; by keeping it <code>usize</code>, we at least can rule out some bugs even if WASM permits more</p>",
        "id": 148738806,
        "sender_full_name": "centril",
        "timestamp": 1543435156
    },
    {
        "content": "<p>Basically, the word of the implementors is worth a bit more than what's on the spec</p>",
        "id": 148738807,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  this is so true; it's much more than you can usually expect</p>",
        "id": 148738832,
        "sender_full_name": "centril",
        "timestamp": 1543435182
    },
    {
        "content": "<p>The problem is that, if the spec is ambiguous enough, people might decide to recycle these to allow for shrinking memory in the future</p>",
        "id": 148738845,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435196
    },
    {
        "content": "<p>would be nice to formalize this in Agda</p>",
        "id": 148738851,
        "sender_full_name": "centril",
        "timestamp": 1543435203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  we can add another function in such a case can we not?</p>",
        "id": 148738916,
        "sender_full_name": "centril",
        "timestamp": 1543435230
    },
    {
        "content": "<p>yeah, but honestly, if this is an issue, then we should just file a github issue with the wasm spec</p>",
        "id": 148738948,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435258
    },
    {
        "content": "<p><code>memory_grow_yolo</code></p>",
        "id": 148738978,
        "sender_full_name": "centril",
        "timestamp": 1543435281
    },
    {
        "content": "<p>they tend to clarify these things pretty quickly and amend the spec as necessary</p>",
        "id": 148738979,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> this is why I suggested talking to the WASM folks on the issue</p>",
        "id": 148739013,
        "sender_full_name": "centril",
        "timestamp": 1543435316
    },
    {
        "content": "<p>but if I can just file a GitHub issue then ill do that</p>",
        "id": 148739069,
        "sender_full_name": "centril",
        "timestamp": 1543435337
    },
    {
        "content": "<p>Reading the semantics: they say \"Either, try growing mem by n pages:\"</p>",
        "id": 148739200,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435464
    },
    {
        "content": "<p>growing seems to imply that the number of pages before has to be less or equal to the number of pages afterwards</p>",
        "id": 148739225,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> yes, however, \"append\" and \"grow\" are not defined terms</p>",
        "id": 148739232,
        "sender_full_name": "centril",
        "timestamp": 1543435523
    },
    {
        "content": "<p>in any case, if that fails, this returns -1</p>",
        "id": 148739240,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> sure, I agree that it implies that; but implication is not certainty</p>",
        "id": 148739243,
        "sender_full_name": "centril",
        "timestamp": 1543435540
    },
    {
        "content": "<p>still, for Rust this doesn't help much, it still doesn't really tell us whether this has to be a signed or unsigned integer type</p>",
        "id": 148739305,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435568
    },
    {
        "content": "<p><a href=\"https://webassembly.github.io/spec/core/exec/modules.html#grow-mem\" target=\"_blank\" title=\"https://webassembly.github.io/spec/core/exec/modules.html#grow-mem\">https://webassembly.github.io/spec/core/exec/modules.html#grow-mem</a></p>",
        "id": 148739336,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435621
    },
    {
        "content": "<blockquote>\n<p>If len is larger than 2^16, then fail.</p>\n</blockquote>\n<p>I guess that's where Dan meant that the ML implementation uses <code>gt_u</code></p>",
        "id": 148739370,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435659
    },
    {
        "content": "<blockquote>\n<p>Let len be n added to the length of meminst.ùñΩùñ∫ùóçùñ∫ divided by the page size 64Ki.</p>\n</blockquote>\n<p><del>The question is, how is this <code>len</code> added, is it a signed or unsigned add ? I don't remember if there was a difference here.</del> Add works for both signed and unsigned integers the same.</p>",
        "id": 148739442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543435728
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/spec/issues/924\" target=\"_blank\" title=\"https://github.com/WebAssembly/spec/issues/924\">https://github.com/WebAssembly/spec/issues/924</a></p>",
        "id": 148739851,
        "sender_full_name": "centril",
        "timestamp": 1543435924
    }
]