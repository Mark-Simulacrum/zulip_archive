[
    {
        "content": "<p>Given </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SDL_Cursor</span><span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Rust gives me a warning on an <code>extern \"C\"</code> declaration that uses pointers to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: `extern` block uses type `SDL_Cursor`, which is not FFI-safe\n   --&gt; src\\mouse.rs:214:33\n    |\n214 |   pub fn SDL_FreeCursor(cursor: *mut SDL_Cursor);\n    |                                 ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n</code></pre></div>\n<p>Is this just the warning being overly defensive? It seems like a pointer to a sized type is always itself FFI safe, regardless of what repr the type is.</p>",
        "id": 219120762,
        "sender_full_name": "Lokathor",
        "timestamp": 1607366820
    },
    {
        "content": "<p>C doesn't have zero sized types, and a pointer depends on the size of the pointee for pointer math</p>",
        "id": 219120974,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607366915
    },
    {
        "content": "<p>Ah, and <code>c_void</code> is actually size 1 instead of size 0. I follow now.</p>",
        "id": 219122316,
        "sender_full_name": "Lokathor",
        "timestamp": 1607367530
    },
    {
        "content": "<p>By the way, why are you using an empty array and not</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SDL_Cursor</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SDL_Cursor</span><span class=\"p\">(());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>if you want the type's constructor to be private?</p>",
        "id": 219125020,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607368628
    },
    {
        "content": "<p>It's still an overly defensive lint, provided the <code>C</code> side defines that type as an opaque one (in which case it will literally not be able to perform pointer arith)</p>",
        "id": 219132250,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607372067
    },
    {
        "content": "<p>You could make it a <code>#[repr(transparent)]</code> wrapper around <code>c_void</code> I think.</p>",
        "id": 219132975,
        "sender_full_name": "bjorn3",
        "timestamp": 1607372457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> I started with the empty array because that's what <code>bindgen</code> had output (in a previous version of the lib that used bindgen)</p>",
        "id": 219153082,
        "sender_full_name": "Lokathor",
        "timestamp": 1607383784
    },
    {
        "content": "<p>After the feedback from Steven F. I decided to go with this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SDL_Cursor</span><span class=\"p\">(</span><span class=\"n\">c_void</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which I think is much more obviously \"you will only use this as a pointer\".</p>",
        "id": 219153179,
        "sender_full_name": "Lokathor",
        "timestamp": 1607383846
    },
    {
        "content": "<p>As to what Daniel HM said: the C definition of the type is</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">SDL_Cursor</span> <span class=\"n\">SDL_Cursor</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 219153303,
        "sender_full_name": "Lokathor",
        "timestamp": 1607383933
    },
    {
        "content": "<p>Rather, that's the definition of the type as seen in the public API header file</p>",
        "id": 219153327,
        "sender_full_name": "Lokathor",
        "timestamp": 1607383961
    },
    {
        "content": "<p>That definition is equivalent to <code>extern { type SDL_Cursor; }</code> in rust, but that is currently unstable.</p>",
        "id": 219193441,
        "sender_full_name": "bjorn3",
        "timestamp": 1607424932
    }
]