[
    {
        "content": "<p>Is there a way I can automatically turn all lints that are <code>allow</code> into <code>warn</code>, as if <code>allow</code> was its own lint group? <br>\nlike <code>rustc  -Wallow</code>, without having to add all allow-lints one by one manually..</p>",
        "id": 267304067,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641659984
    },
    {
        "content": "<p>Not really.</p>\n<p>You can try this monstrosity: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span>rustc -W <span class=\"nb\">help</span> <span class=\"p\">|</span> rg -r <span class=\"s1\">'-W$1'</span> <span class=\"s1\">'^ +([a-z-]+) +allow.*'</span> <span class=\"p\">|</span> rg -v <span class=\"s1\">'must-not-suspend|non-exhaustive-omitted-patterns'</span> <span class=\"p\">|</span> paste -sd <span class=\"s1\">' '</span> -<span class=\"k\">)</span><span class=\"s2\">\"</span> cargo build\n</code></pre></div>\n<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>I'm guessing you might want this for clippy, in which case you can use clippy-driver instead of rustc.</p>",
        "id": 267305400,
        "sender_full_name": "Eric Huss",
        "timestamp": 1641661916
    },
    {
        "content": "<p>nah it was for rustc :P</p>",
        "id": 267306363,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641663248
    },
    {
        "content": "<p>Love it when a bash oneliner translates into 10-20 lines of rust, oh well <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"rustc\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"-Whelp\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"kt\">str</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">lines</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">l</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">\"  allow    \"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">l</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">trim</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">l</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">split_whitespace</span><span class=\"p\">().</span><span class=\"n\">next</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">l</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"-W{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267306399,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641663323
    },
    {
        "content": "<p>You can reuse the memory by using <code>String::from_utf8</code> instead.</p>",
        "id": 267308490,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1641666129
    },
    {
        "content": "<p>I would call this three lines instead of 10-20 lines.</p>",
        "id": 267308625,
        "sender_full_name": "fee1-dead",
        "timestamp": 1641666324
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"sh\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"-c\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"rustc -W help | rg -r '-W$1' '^ +([a-z-]+) +allow.*' | rg -v 'must-not-suspend|non-exhaustive-omitted-patterns' | paste -sd ' ' -)\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">stdout</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267309440,
        "sender_full_name": "bjorn3",
        "timestamp": 1641667556
    },
    {
        "content": "<p>yeah but then 10 years later one of these programs change their output of command line flags a bit and it breaks the code :P</p>",
        "id": 267312665,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641672361
    }
]