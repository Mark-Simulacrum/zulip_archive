[
    {
        "content": "<p>I've been doing some general reading on CS topics and I've come across multiple dispatch during dynamic dispatch where the compiler can dynamically dispatch a method call to an object based on the type of the object &amp; the type of the method arguments. After reading a little bit about it, it sounds very similar to specialization to me (or is an implementation detail of specialization I suppose). </p>\n<p>Am I correct in thinking this or are they two different things?</p>",
        "id": 257228721,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1634055061
    },
    {
        "content": "<p>I think specialization will be entirely at compile time.</p>",
        "id": 257230657,
        "sender_full_name": "Eh2406",
        "timestamp": 1634055755
    },
    {
        "content": "<p>I think of them as different concepts</p>",
        "id": 257231205,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1634055977
    },
    {
        "content": "<p>\"Static\" multiple dispatch is basically function overloading, or a similar thing with traits: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6bc7f6f13aec23bd45cc763e69f3574d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6bc7f6f13aec23bd45cc763e69f3574d</a></p>",
        "id": 257231381,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1634056048
    },
    {
        "content": "<p>\"Dynamic\" multiple dispatch is the runtime thing, which people often simulate with the visitor pattern</p>",
        "id": 257231492,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1634056083
    },
    {
        "content": "<p>Neither one is powerful enough to give you specialization</p>",
        "id": 257231624,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1634056131
    },
    {
        "content": "<p>Hmm okay I clearly need to read up on specialization then! I guess because we know the types of the methods &amp; arguments at compile time it's easy enough to do it statically which makes sense</p>",
        "id": 257232001,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1634056268
    },
    {
        "content": "<p>Yes, specialization only gets horrendously complicated when you really get to know it. :-) There's a reason it's not close to stabilizing.</p>",
        "id": 257233014,
        "sender_full_name": "Eh2406",
        "timestamp": 1634056644
    },
    {
        "content": "<p>Haha hopefully I can wrap my head around it a little better now - thanks for answering my question!</p>",
        "id": 257238711,
        "sender_full_name": "Tom Farmer",
        "timestamp": 1634058900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448036\">Tom Farmer</span> has marked this topic as resolved.</p>",
        "id": 257238725,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634058903
    }
]