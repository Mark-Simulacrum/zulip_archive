[
    {
        "content": "<p>Hi, I appear to have abstracted myself into a corner.<br>\nI have some struct S with some type parameter T like: <code>struct S&lt;T&gt; {t: T}</code> where <code>T</code> is some combination of traits including the serde ones, sized, debug, etc. Whatever I found myself needing.<br>\nHowever I find myself wanting to have an if-statement based on what <code>T</code> is to give it dynamic runtime behaviour. What are my options here? I could e.g. make a trait that reifies into an enum of the allowed <code>T</code> types? Just implement the runtime behaviour (i.e. the if-branch bodies) as a method in this new trait directly? I'm slowly inflating the number of trait bounds on <code>T</code> it's already up to _twelve_.<br>\nWhat kind of advice do people have for these situations?</p>",
        "id": 220711251,
        "sender_full_name": "David McGillicuddy",
        "timestamp": 1608656377
    },
    {
        "content": "<p>Do you know all the allowed types for <code>T</code> beforehand? In that case, maybe it is easier to work with an enum of all allowed types in general, instead of making <code>S</code> generic.</p>",
        "id": 220711443,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608656485
    },
    {
        "content": "<p>I do know all the allowed types for <code>T</code> before hand yes. At this point I can't even remember why I decided to make it an abstract type in the first place but it is nice being able to pass it around fearlessly i.e. compile time guarentees about which variant you have. I guess this is the tradeoff! Maybe once Rust gets dependant types I can get the best of both worlds, I'll get back to you in a decade...</p>\n<p>edit: or maybe something like <code>syn</code>'s design where you have enums each containing bespoke structs? Feels like a real deep rabbit hole.</p>",
        "id": 220711768,
        "sender_full_name": "David McGillicuddy",
        "timestamp": 1608656708
    },
    {
        "content": "<p>if it's 'static and you can ask for that in bound, you can dynamically downcast via casting to Any as long as you don't need ownership safely, and with a bit of unsafe code unsafely (but soundly) if you do need ownership</p>",
        "id": 220713960,
        "sender_full_name": "simulacrum",
        "timestamp": 1608658154
    },
    {
        "content": "<p>Is this recommended or at least fairly normal practice, or more of a nuclear option? I've never used <code>Any</code> before.</p>",
        "id": 220714068,
        "sender_full_name": "David McGillicuddy",
        "timestamp": 1608658214
    },
    {
        "content": "<p>If I have 'static it's probably what I'd reach for first if I have just one edge case but if there's going to be many then I'd add a trait and dispatch that way</p>",
        "id": 220714337,
        "sender_full_name": "simulacrum",
        "timestamp": 1608658377
    },
    {
        "content": "<p>I pretty rarely have 'static though :)</p>",
        "id": 220714381,
        "sender_full_name": "simulacrum",
        "timestamp": 1608658396
    },
    {
        "content": "<p>Thanks both for the suggestions, I'll have to think about it for sure. This is the first rust codebase I've worked in that ended up in the classic state of being worked on by a half dozen people, some of whom have been in a hurry, who aren't all perfectly aligned on idioms, with new requirements dropping in every month or so, etc, and I think that's part of the pain that I'm currently feeling.</p>",
        "id": 220717663,
        "sender_full_name": "David McGillicuddy",
        "timestamp": 1608660337
    },
    {
        "content": "<blockquote>\n<p>I'm slowly inflating the number of trait bounds on T it's already up to _twelve_.</p>\n</blockquote>\n<p>I'd probably make an almost-trait-alias like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Concept</span>: <span class=\"nc\">Twelve</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Traits</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Here</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new_thing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And then implement it for the types in question.</p>",
        "id": 220718218,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1608660695
    }
]