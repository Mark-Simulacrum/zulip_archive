[
    {
        "content": "<p>I've encountered this problem a few times already and every time I get stuck. Maybe someone here knows a solution? In short, I have a struct that carries a mut ref and I'd like a method that accesses its contents, but I get tripped by lifetimes.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">MyRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">do_a_thing</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">myref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyRef</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_a_thing</span><span class=\"p\">(</span><span class=\"n\">myref</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// works</span>\n<span class=\"w\">    </span><span class=\"c1\">// I want a method that does the same thing, like:</span>\n<span class=\"w\">    </span><span class=\"c1\">//do_a_thing(myref.contents());</span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">myref</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// I tried to relax lifetimes as much as possible. This works in the case of non-mut references;</span>\n<span class=\"c1\">// for mut-refs `drop(myref)` above gives an error.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">contents</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">c</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221234346,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609352934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> I think you have the bounds wrong: you want <code>'a: 'b</code> and <code>'b: 'c</code></p>",
        "id": 221234555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353077
    },
    {
        "content": "<p>currently your function says that '&amp;mut self must live at least as long as the entire <code>MyRef</code>'</p>",
        "id": 221234569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353092
    },
    {
        "content": "<p>hm this exact code compiles on the playground</p>",
        "id": 221234643,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353149
    },
    {
        "content": "<p>oh, your suggestion works!!</p>",
        "id": 221234666,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353188
    },
    {
        "content": "<p>I am so confused by lifetimes x)</p>",
        "id": 221234690,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353201
    },
    {
        "content": "<p>thanks a lot!</p>",
        "id": 221234696,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353207
    },
    {
        "content": "<p>you're welcome :)</p>",
        "id": 221234701,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353211
    },
    {
        "content": "<p>huh, after your suggestion I tried to simplify, and with lifetime elision I get the naivest solution possible, which works x)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">contents</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221235041,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353555
    },
    {
        "content": "<p>yeah, the <code>'b: 'c</code> bound wasn't actually helping you: it meant the lifetime was allowed to live <em>shorter</em> than the borrow of self. But if you have a <code>&amp;'b u64</code> already, you can always shorten the lifetime as much as you like by reborrowing.</p>",
        "id": 221235153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353638
    },
    {
        "content": "<p>and the <code>'a: 'b</code> bound is implicit here because <code>&amp;mut self</code> gets a new fresh lifetime, not the 'a from the type</p>",
        "id": 221235181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353661
    },
    {
        "content": "<p>rust makes it way too easy to write functions that restrict the lifetime unnecessarily <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221235229,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353703
    },
    {
        "content": "<p>speaking of which, <a href=\"https://github.com/raphlinus/pulldown-cmark/issues/509\">https://github.com/raphlinus/pulldown-cmark/issues/509</a> was an <em>adventure</em></p>",
        "id": 221235282,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/lost.20in.20lifetimes/near/221235181\">said</a>:</p>\n<blockquote>\n<p>and the <code>'a: 'b</code> bound is implicit here because <code>&amp;mut self</code> gets a new fresh lifetime, not the 'a from the type</p>\n</blockquote>\n<p>Yeah, I've stopped trusting implicit outlives relations from things like <code>&amp;'a Foo&lt;'b&gt;</code> because occasionally some <code>'tcx</code> doesn't get such a bound and I get confused</p>",
        "id": 221235325,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/lost.20in.20lifetimes/near/221235282\">said</a>:</p>\n<blockquote>\n<p>speaking of which, <a href=\"https://github.com/raphlinus/pulldown-cmark/issues/509\">https://github.com/raphlinus/pulldown-cmark/issues/509</a> was an <em>adventure</em></p>\n</blockquote>\n<p>wow, that's intense x)</p>",
        "id": 221235461,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353887
    },
    {
        "content": "<p>yeah I spent most of the day on it lol</p>",
        "id": 221235498,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/lost.20in.20lifetimes/near/221235153\">said</a>:</p>\n<blockquote>\n<p>yeah, the <code>'b: 'c</code> bound wasn't actually helping you: it meant the lifetime was allowed to live <em>shorter</em> than the borrow of self. But if you have a <code>&amp;'b u64</code> already, you can always shorten the lifetime as much as you like by reborrowing.</p>\n</blockquote>\n<p>I was under the impression that maybe <code>&amp;mut</code> references got less magically reborrowed than simple <code>&amp;</code> refs</p>",
        "id": 221235517,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353950
    },
    {
        "content": "<p>&amp;mut is not <code>Copy</code>, but I think it gets reborrowed in all the cases that matter</p>",
        "id": 221235582,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353978
    },
    {
        "content": "<p>what tripped me with the OP is that for plain <code>&amp;</code> my choice of lifetime bounds worked</p>",
        "id": 221235591,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609353987
    },
    {
        "content": "<p>I don't remember when the difference matters off the top of my head</p>",
        "id": 221235592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609353988
    },
    {
        "content": "<p>granted my choice of bounds was purely tetris x)</p>",
        "id": 221235626,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609354017
    },
    {
        "content": "<p>I repeat my assertion that explicit outlives bounds are always (\"99.999%\") either (a) unneeded (b) wrong</p>",
        "id": 221243828,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609360082
    },
    {
        "content": "<p>I'd love it if the compiler could tell me \"you could relax this bound, it's too restrictive\"</p>",
        "id": 221244638,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609360716
    },
    {
        "content": "<p>Would be nice, but I'd suppose it's hard and generally \"not wanted\", for much the same reason that top-level inference doesn't exist.</p>",
        "id": 221245164,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609361191
    },
    {
        "content": "<p>Easier shown with types:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>WARNING: types `i32` could be made more general:\n\n fn add&lt;T: Add&lt;Output = T&gt;&gt;(a: T, b: T) -&gt; T { a + b }\n</code></pre></div>",
        "id": 221245279,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609361291
    },
    {
        "content": "<p>I guess that's one step further than what you propose though.</p>",
        "id": 221245305,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609361333
    },
    {
        "content": "<p>More like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>WARNING: bound `Clone` is not used in this function\n</code></pre></div>",
        "id": 221245338,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609361371
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/issues/5719\">https://github.com/rust-lang/rust-clippy/issues/5719</a></p>",
        "id": 221245424,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609361416
    },
    {
        "content": "<p>not sure about the lifetime variants though</p>",
        "id": 221245460,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609361456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/lost.20in.20lifetimes/near/221245338\">said</a>:</p>\n<blockquote>\n<p>More like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><div class=\"codehilite\"><pre><span></span><code>WARNING: bound `Clone` is not used in this function\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Huh, I'd find that one quite useful</p>",
        "id": 221246472,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609362334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span>, regarding <code>&amp;</code> _vs._ <code>&amp;mut</code> with lifetimes: since <code>&amp;'long _</code> is <code>Copy</code>, one can go from <code>&amp;'short &amp;'long T</code> to <code>&amp;'long T</code> simply by dereferencing (also, by deref coercion, this can even happen implicitly).<br>\nFor a potentially non-<code>Copy</code> inner reference type (such as <code>&amp;'long mut _</code>), this is not possible, and the only \"smooth\" / easy way to flatten indirection is by reborrowing, so that <code>&amp;'short mut &amp;'long mut T</code> becomes <code>&amp;'short mut T</code> (note that the <code>Copy</code> counterpart of <code>&amp;mut</code> is <code>mem::replace</code>)</p>\n<p>So with <code>&amp;mut</code>s one has to \"get the nested lifetimes right\", whereas with <code>&amp;</code>s one often has the luxury of getting away with not doing it.</p>",
        "id": 221254590,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609369942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/lost.20in.20lifetimes/near/221245338\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>WARNING: bound `Clone` is not used in this function\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>That sounds awesome, though also potentially scary for some things -- like unsafe code that bounds on `Copy`.\n</code></pre></div>",
        "id": 221254844,
        "sender_full_name": "scottmcm",
        "timestamp": 1609370215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122651-general/topic/lost.20in.20lifetimes/near/221254844\">said</a>:</p>\n<blockquote>\n<p>That sounds awesome, though also potentially scary for some things -- like unsafe code that bounds on <code>Copy</code>.</p>\n</blockquote>\n<p>Yeah, and would need to be smart around \"regular\" things like a method in a trait that doesn't need the bound but the trait itself requires it.</p>",
        "id": 221259925,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1609376112
    }
]