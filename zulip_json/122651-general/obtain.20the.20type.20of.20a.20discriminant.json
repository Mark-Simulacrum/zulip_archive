[
    {
        "content": "<p>I am running into trouble of finding out the size of the discriminant of an enum type.</p>\n<p>for</p>\n<div class=\"codehilite\"><pre><span></span><code>ty::Adt(def, subst)\n</code></pre></div>\n\n\n<p>I find that </p>\n<div class=\"codehilite\"><pre><span></span><code>def.repr.discr_type()\n</code></pre></div>\n\n\n<p>to find out the discriminant type. but the problem is this information does not reach to the end. when is this tag replaced by a smaller type? how should I reliably fetch the type of discriminant (potentially from layout)?</p>",
        "id": 204143545,
        "sender_full_name": "Jason Hu",
        "timestamp": 1594933855
    },
    {
        "content": "<p>There are multiple ways to encode the discriminant into memory. You can directly put the discriminant somewhere, or you can use the so called niche filling where invalid values of variant fields are used to encode that the enum is a different variant.</p>",
        "id": 204179445,
        "sender_full_name": "bjorn3",
        "timestamp": 1594972423
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src/librustc_mir/interpret/place.rs#L1049\">https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src/librustc_mir/interpret/place.rs#L1049</a></p>",
        "id": 204179591,
        "sender_full_name": "bjorn3",
        "timestamp": 1594972535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> are you trying to figure out how a type is <em>represented</em>? \"discriminant\" is a high-level (type-checking) concept</p>",
        "id": 204188907,
        "sender_full_name": "eddyb",
        "timestamp": 1594979713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> like I was saying earlier, for any concrete representations you need to rely as much as possible on <code>Layout</code></p>",
        "id": 204188939,
        "sender_full_name": "eddyb",
        "timestamp": 1594979739
    },
    {
        "content": "<p>and assume the Rust types mean nothing (except for deciding some MIR semantics)</p>",
        "id": 204188946,
        "sender_full_name": "eddyb",
        "timestamp": 1594979754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> the following code might be an interesting read for you:<br>\n<a href=\"https://github.com/rust-lang/rust/blob/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src/librustc_mir/interpret/operand.rs#L607\">https://github.com/rust-lang/rust/blob/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50/src/librustc_mir/interpret/operand.rs#L607</a></p>",
        "id": 204196211,
        "sender_full_name": "RalfJ",
        "timestamp": 1594986209
    },
    {
        "content": "<p>basically I think you dont want the size of the <em>discriminant</em>, you want the size of the <em>tag</em></p>",
        "id": 204196287,
        "sender_full_name": "RalfJ",
        "timestamp": 1594986247
    },
    {
        "content": "<p>the tag is how the discriminant is represented in memory</p>",
        "id": 204196294,
        "sender_full_name": "RalfJ",
        "timestamp": 1594986257
    },
    {
        "content": "<p>also see <a href=\"https://rustc-dev-guide.rust-lang.org/appendix/glossary.html#discriminant\">https://rustc-dev-guide.rust-lang.org/appendix/glossary.html#discriminant</a></p>",
        "id": 204196331,
        "sender_full_name": "RalfJ",
        "timestamp": 1594986308
    },
    {
        "content": "<p>I am indeed trying to figure out how a type is implemented and am looking into TyAndLayout. but I am not able to just look at the layouts only as suggested by <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> because I am somewhat trying to interpret semantic information carried by the types, which forces me to look into type first. <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> does lots of work on verifying rust code. I am wondering how do you guys handle code like <a href=\"https://doc.rust-lang.org/beta/src/core/ptr/mod.rs.html#264-269\">https://doc.rust-lang.org/beta/src/core/ptr/mod.rs.html#264-269</a>?</p>",
        "id": 204443588,
        "sender_full_name": "Jason Hu",
        "timestamp": 1595262157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320010\">@Jason Hu</span> it doesn't matter that that uses an union btw, it could just as well <code>memcpy</code> the bytes around</p>",
        "id": 204443774,
        "sender_full_name": "eddyb",
        "timestamp": 1595262282
    },
    {
        "content": "<p>the union just happens to be convenient</p>",
        "id": 204443815,
        "sender_full_name": "eddyb",
        "timestamp": 1595262302
    },
    {
        "content": "<p>the important thing is the data, <em>not</em> the Rust type (which mostly boils down to how you can access the data. at least in this case, there are more interesting semantics like valid values, and references in stacked borrows etc.)</p>",
        "id": 204443903,
        "sender_full_name": "eddyb",
        "timestamp": 1595262343
    },
    {
        "content": "<p>but generally, something like a <code>struct</code> is nothing more than a grouping of its components. <code>*mut [T]</code> is \"just\" like a <code>struct</code> with <code>*mut T</code> and <code>usize</code> fields that interacts with the typesystem better</p>",
        "id": 204444074,
        "sender_full_name": "eddyb",
        "timestamp": 1595262413
    },
    {
        "content": "<p>so really, all that <code>union</code> does is overlap the <code>*mut T</code> of <code>*mut [T]</code> with the <code>data</code> field and the <code>usize</code> of the <code>*mut [T]</code> with the <code>len</code> field</p>",
        "id": 204444245,
        "sender_full_name": "eddyb",
        "timestamp": 1595262507
    },
    {
        "content": "<p>it's more or less just a colocated \"pointer and integer\" pair, and the <code>T</code> in that example doesn't affect the semantics until you actually want to refer to elements</p>",
        "id": 204444369,
        "sender_full_name": "eddyb",
        "timestamp": 1595262591
    },
    {
        "content": "<p>it's possible the model you're trying to fit Rust in is overly simplistic and only happens to work for C code that does little to no type punning</p>",
        "id": 204444503,
        "sender_full_name": "eddyb",
        "timestamp": 1595262645
    },
    {
        "content": "<p>in general, you can have many views to the same memory, and you have to somehow account for them (even if maybe just some patterns and not all of them)</p>",
        "id": 204444582,
        "sender_full_name": "eddyb",
        "timestamp": 1595262699
    },
    {
        "content": "<p>I guess you can have a more in-depth discussion with <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> about how far a model checker can theoretically go on Rust code without manual proofs (which I believe is what RustBelt has - manual proofs, that is)</p>",
        "id": 204444733,
        "sender_full_name": "eddyb",
        "timestamp": 1595262769
    }
]