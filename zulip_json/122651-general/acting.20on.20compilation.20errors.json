[
    {
        "content": "<p>Are there currently any RFCs for custom compilation error handling? I recently read a blog (which link I lost :( ) talking about the concept of library authors being able to generate custom compilation errors based on existing compilation errors. The idea would be to use a decorator on items, which if the item is used by a library consumer and the code results in a compilation error, the error can be inspected by the library authors code and possibly a better error may be returned.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![compile_err(my_handler)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">somethingVeryComplicated</span><span class=\"o\">&lt;</span><span class=\"n\">o</span>: <span class=\"nc\">OverSomeVeryStrangeGeneric</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">WowComplicated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#![compile_err_handler]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"n\">e</span>: <span class=\"nc\">rust_compiler</span>::<span class=\"n\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">rust_compiler</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"c1\">// check the error; if it is some common user programming error, emit a new error with a more useful help message</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Would this idea be crazy, aside from the non trivial implementation?</p>",
        "id": 211371442,
        "sender_full_name": "Karel Kubat",
        "timestamp": 1601142691
    },
    {
        "content": "<p>The problem is if not very well designed this might make it impossible to improve compiler errors later one.</p>\n<p>Furthermore errors appear on a later stage so exposing context information without exposing compiler internals is tricky.</p>\n<p>Furthermore which rustc error appears on a certain kind of \"programming error\" isn't always clear or stable. Like type inference might still work with the \"wrong\" code inferring the a wrong type <br>\nand create a error at a different place.</p>\n<p>Still a very interesting idea, just a bit tricky to stabilize this.</p>\n<p>Oh and as far as I remember for some errors user can provide a (static) hint which is then included in the error message, like for <code>#[must_use]</code> as far as I remember.</p>",
        "id": 211379295,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601149100
    },
    {
        "content": "<p>From the reference:</p>\n<blockquote>\n<p>The <code>must_use</code> attribute may include a message by using the <em>MetaNameValueStr</em> syntax such as <code>#[must_use = \"example message\"]</code>. The message will be given alongside the warning.</p>\n</blockquote>",
        "id": 211379399,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601149235
    },
    {
        "content": "<p>So my guess is: Possible (in some limits), Implementable but hard to get right and hard to stabilize.</p>",
        "id": 211379485,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601149382
    },
    {
        "content": "<p>Yeah, I haven't even started thinking about API stabilization etc, just throwing the idea in here. I'm mainly looking at such a feature because I am generating Rust code, and I am not able catch all errors on the front end (due to type inference etc). In my case, if a certain section of rust would not compile, I'd be able to retrace it to the original template, and point out the error.</p>\n<p>I might write a proposal, just to get such a feature documented. If properly supported, I think it would be a killer feature,  but also one that might unnecessarily pin down compiler errors to semver.</p>",
        "id": 211384497,
        "sender_full_name": "Karel Kubat",
        "timestamp": 1601157672
    },
    {
        "content": "<p>One random idea I just had for the case of  additional compiler error information in generated code (but not necessary for code using that generated code):</p>\n<ol>\n<li>\n<p>have some way to \"mark\" a thing which might have an error (e.g. using attributes as we can attach them syntax wise to a lot of things)  E.g. <code>#[additional_error_info(my_error_thingy)]</code> or so.</p>\n</li>\n<li>\n<p>Pass in a <em>non-exhoustive</em> enum of error kinds where each variant has a single opaque type instance which might provide methods with some metadata </p>\n</li>\n<li>\n<p>Allow the registered error function to emmit some additional error hint. I.e. you get the normal error message and any number of additional hint e.g. <code>\"hint: For the foobar code gen to work the type </code>MyType<code> need to implement </code>FooBar<code> with </code>FooBar::Yo<code> implementing </code>BarFoot<code>.\"</code></p>\n</li>\n</ol>\n<p>I thing something in this direction could have the best chance to work, but also would be the least useful as it probably can't do things like marking the wrong code or similar.</p>\n<p>Through another potential problem I found is compiler performance. Not because of the plugin being slow but because of how the compiler internal code might become constrained so that it can work. <em>But I don't know much about the compiler internals so thats just spekualtion that this might be another problem</em>.</p>",
        "id": 211385795,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1601159959
    },
    {
        "content": "<p>A big difference comparing this feature to proc-macros, is that the error does not necessarily need to be handled: compilation has failed anyway, we are just concerned with smarter formatting and better tips and hints. Old handler code which relies on perhaps an older rustc error type does not need to be able to parse the error, and may instead be omitted/return the original error.</p>",
        "id": 211388807,
        "sender_full_name": "Karel Kubat",
        "timestamp": 1601165266
    }
]