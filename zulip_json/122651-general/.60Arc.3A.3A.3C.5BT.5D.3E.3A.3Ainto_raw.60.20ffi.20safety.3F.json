[
    {
        "content": "<p>I have an <code>Arc&lt;[T]&gt;</code> that I'd like to expose through FFI but the other side would <em>not</em> access it, just pass it through another rust function that would be calling <code>Arc::from_raw</code> on it.<br>\nIs it \"safe\" to expose a <code>*const [T]</code> obtained from an <code>Arc::&lt;[T]&gt;::into_raw</code>? And would the memory layout really be a pointer?<br>\nMaybe my question seems stupid since a pointer should be a pointer, but with slices are involved, I want to be extra careful.</p>",
        "id": 246111553,
        "sender_full_name": "marmeladema",
        "timestamp": 1626363191
    },
    {
        "content": "<p>Fat pointers don't have a guaranteed layout, so <code>*const [T]</code> is not FFI safe. You can split it in a thin pointer and length though.</p>",
        "id": 246114982,
        "sender_full_name": "bjorn3",
        "timestamp": 1626364610
    },
    {
        "content": "<p>Ok that's what I thought. Unfortunate. Are their stable APIs to do the conversion from fat raw pointers to thin raw pointer + length?</p>",
        "id": 246115916,
        "sender_full_name": "marmeladema",
        "timestamp": 1626364962
    },
    {
        "content": "<p>And thanks a lot for helping <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 246115954,
        "sender_full_name": "marmeladema",
        "timestamp": 1626364979
    },
    {
        "content": "<p>Not stable I don't think. Not without going through a reference (which is very <em>fun</em>)</p>",
        "id": 246116070,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365021
    },
    {
        "content": "<p>You can get the first element pointer using a primitive cast, though <code>t as *const T</code>.</p>",
        "id": 246116288,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365101
    },
    {
        "content": "<p>Ok thanks! Unfortunate again^^</p>",
        "id": 246116309,
        "sender_full_name": "marmeladema",
        "timestamp": 1626365112
    },
    {
        "content": "<p>Length requires dereferencing and calling .len() on the slice reference.</p>",
        "id": 246116344,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365124
    },
    {
        "content": "<p>ok and rebuilding the fat raw pointer back seems fun too</p>",
        "id": 246116422,
        "sender_full_name": "marmeladema",
        "timestamp": 1626365156
    },
    {
        "content": "<p>Rebuilding is easy.</p>",
        "id": 246116474,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365165
    },
    {
        "content": "<p><code>core::ptr::slice_from_raw_parts</code></p>",
        "id": 246116495,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365179
    },
    {
        "content": "<p>Oh cool!</p>",
        "id": 246116671,
        "sender_full_name": "marmeladema",
        "timestamp": 1626365270
    },
    {
        "content": "<p>Anyways, since the pointer comes from an Arc, dereferencing to call <code>.len()</code> and then doing an <code>as</code> cast to get the <code>*const T</code> should be fine.</p>",
        "id": 246116825,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365328
    },
    {
        "content": "<p>Otherwise, what are my options? Have a <code>Arc&lt;Box&lt;[T]&gt;&gt;</code> instead and expose a <code>*const Box&lt;[T]&gt;</code> through ffi?</p>",
        "id": 246116845,
        "sender_full_name": "marmeladema",
        "timestamp": 1626365341
    },
    {
        "content": "<p>Pretty much.</p>",
        "id": 246116895,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365361
    },
    {
        "content": "<p>But that's going to do two heap allocations :(</p>",
        "id": 246116981,
        "sender_full_name": "marmeladema",
        "timestamp": 1626365402
    },
    {
        "content": "<p>Yes. As I say, though, that shouldn't be necessary. Note that dereferencing the pointer and using the slice .as_ptr() method is not a good idea, since the implications of the conversion to a reference are up in the air, IIRC.</p>",
        "id": 246117246,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365503
    },
    {
        "content": "<p>(But calling the len method won't cause any issues like that)</p>",
        "id": 246117399,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365550
    },
    {
        "content": "<p>Ok thanks!</p>",
        "id": 246117520,
        "sender_full_name": "marmeladema",
        "timestamp": 1626365611
    },
    {
        "content": "<p>maybe extract the length before doing into_raw? then you have length + fat pointer and can turn the fat pointer into a thin pointer</p>",
        "id": 246117563,
        "sender_full_name": "The 8472",
        "timestamp": 1626365626
    },
    {
        "content": "<p>That would work as well</p>",
        "id": 246117704,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626365661
    },
    {
        "content": "<p>Arc&lt;[T]&gt; has a set size, and its pretty small (one pointer?), don't cbindgen/cxx support passing opaque Sized objects around? you could make a <code>struct ToPassAround(Arc&lt;[T]&gt;)</code> and pass that around? maybe im misunderstanding the problems</p>",
        "id": 246127505,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1626369801
    },
    {
        "content": "<p>wait wait, how can .len be fine if .as_ptr is not fine, they both operate on &amp;self</p>",
        "id": 246128403,
        "sender_full_name": "Lokathor",
        "timestamp": 1626370203
    },
    {
        "content": "<p>cbindgen does not really work with my project. At least last time I tried it failed. I guess I could write those opaque struct myself though. With the proper tests on the rust side to ensure the size does not change, I guess that could work? Are their any alignment requirements or other constraints require by rust that would be lost by passing that opaque struct back and forth through ffi?</p>",
        "id": 246132782,
        "sender_full_name": "marmeladema",
        "timestamp": 1626372172
    },
    {
        "content": "<p>I think just the size, alignment, and other properties of it must be upheld (for example, if it had internal references, it cant be moved)<br>\nbut also i would check the ffi section of the nomicon</p>\n<p>my assumption is that cxx and cbindgen do the correct thing</p>",
        "id": 246134738,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1626373083
    },
    {
        "content": "<p>It sounds tricky to get right manually and since I cannot use cbindgen, I'll try something else</p>",
        "id": 246135105,
        "sender_full_name": "marmeladema",
        "timestamp": 1626373242
    },
    {
        "content": "<blockquote>\n<p>wait wait, how can .len be fine if .as_ptr is not fine, they both operate on &amp;self</p>\n</blockquote>\n<p>The issue isn't producing a reference, but using a pointer derived therefrom.</p>",
        "id": 246136438,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626373845
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// ```c</span>\n<span class=\"sd\">/// typedef struct raw_slice {</span>\n<span class=\"sd\">///     void const * ptr;</span>\n<span class=\"sd\">///     size_t len;</span>\n<span class=\"sd\">/// } raw_slice_t;</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"cp\">#[derive(Clone, Copy, Debug)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">thin</span><span class=\"p\">.</span><span class=\"n\">is_null</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[()])</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">RawSlice</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">thin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span>::<span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">slice_from_raw_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">new_arc</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nc\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Arc</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">].</span><span class=\"n\">into</span><span class=\"p\">()).</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">retain_arc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_slice</span>: <span class=\"nc\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Arc</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>::<span class=\"n\">increment_strong_count</span><span class=\"p\">(</span><span class=\"n\">raw_slice</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">release_arc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_slice</span>: <span class=\"nc\">RawSlice</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Arc</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>::<span class=\"n\">decrement_strong_count</span><span class=\"p\">(</span><span class=\"n\">raw_slice</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246162947,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626387017
    },
    {
        "content": "<p>That is, <code>unsafe { &amp;*(slice_ptr as *const [()]) }.len()</code> is the trick to extract the len part of a slice ptr <em>provided the thin pointer part is non-null</em>; it's currently impossible to extract the len in that case (so that, in my demo, round-tripping loses / discards the len metadata (replaced with <code>0</code>) if the ptr is null; but <code>Arc::&lt;[_]&gt;::into_raw(…)</code> shall never yield a null pointer, so it's a non-issue in practice).</p>",
        "id": 246163321,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626387342
    },
    {
        "content": "<p>Thanks a lot for all the help!</p>",
        "id": 246197006,
        "sender_full_name": "marmeladema",
        "timestamp": 1626423965
    },
    {
        "content": "<p>A stable function to do the extraction of ptr / len would be handy. Is there a reason there are none or it's just that no one needed it?</p>",
        "id": 246197171,
        "sender_full_name": "marmeladema",
        "timestamp": 1626424123
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/71146\">#71146</a> is the tracking issue for the unstable feature, there is some discussion about a potential blocker for stabilization.</p>",
        "id": 246197514,
        "sender_full_name": "The 8472",
        "timestamp": 1626424433
    },
    {
        "content": "<p>This is just for <code>len</code> right? I was thinking something like into_raw_parts but for raw slices</p>",
        "id": 246197748,
        "sender_full_name": "marmeladema",
        "timestamp": 1626424580
    },
    {
        "content": "<p>Kind of the opposite of the slice_from_raw_parts</p>",
        "id": 246197826,
        "sender_full_name": "marmeladema",
        "timestamp": 1626424646
    },
    {
        "content": "<p>That one is fairly new, stabilization takes time</p>",
        "id": 246198110,
        "sender_full_name": "The 8472",
        "timestamp": 1626424820
    },
    {
        "content": "<p>Sorry, I explained myself badly. What I wanted to say is that I don't think slice_into_raw_parts exist even as an unstable nightly feature ?</p>",
        "id": 246198276,
        "sender_full_name": "marmeladema",
        "timestamp": 1626424929
    },
    {
        "content": "<p>that exists too <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.to_raw_parts\">https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.to_raw_parts</a><br>\nbut specifically for slices it wouldn't be needed since you can build it from the thin pointer and the length</p>",
        "id": 246201950,
        "sender_full_name": "The 8472",
        "timestamp": 1626427647
    }
]