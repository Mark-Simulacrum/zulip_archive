[
    {
        "content": "<p>What are the prospects of (a subset of) auto_traits + negative_impls getting stabilized? I would like to design a Send-like trait but it seems these features are stuck in limbo. (Would there be a better place to ask this?)</p>",
        "id": 272254590,
        "sender_full_name": "mejrs",
        "timestamp": 1645102626
    },
    {
        "content": "<p><code>negative_impls</code> is pretty likely.  There's active work on them to integrate them into coherence, even: <a href=\"https://github.com/rust-lang/negative-impls-initiative/issues/1\">https://github.com/rust-lang/negative-impls-initiative/issues/1</a></p>",
        "id": 272261824,
        "sender_full_name": "scottmcm",
        "timestamp": 1645106051
    },
    {
        "content": "<p><code>auto trait</code>s, however, have some pretty fundamental ecosystem worries that might mean they're never stable: <a href=\"https://github.com/rust-lang/rust/issues/13231#event-5599097027\">https://github.com/rust-lang/rust/issues/13231#event-5599097027</a></p>",
        "id": 272262105,
        "sender_full_name": "scottmcm",
        "timestamp": 1645106162
    },
    {
        "content": "<p>(There's always <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a> for questions about language features which aren't about the implementation of them.)</p>",
        "id": 272262271,
        "sender_full_name": "scottmcm",
        "timestamp": 1645106234
    },
    {
        "content": "<p>Speaking of which, when experimenting a bit with <code>negative_impls</code> (as in, \"integrated into coherence\"), <em>vs.</em> the \"legacy\" negative impl of an auto-trait, I ended up with this code (that I was tweaking to also compare remote negative impl vs local negative impl):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls, trivial_bounds)]</span><span class=\"w\"></span>\n\n<span class=\"c1\">// use ::core::marker::PhantomPinned; /* test upstream negative impl */</span>\n<span class=\"k\">enum</span> <span class=\"nc\">PhantomPinned</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\">  </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">Unpin</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">PhantomPinned</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// type NotClone = &amp;'static mut (); /* test upstream negative impl */</span>\n<span class=\"k\">enum</span> <span class=\"nc\">NotClone</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\">       </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">NotClone</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PhantomPinned</span><span class=\"w\"> </span>: <span class=\"nb\">Unpin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">NotClone</span><span class=\"w\"> </span>: <span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d10bea262b0516326f0d7ada80023131\">Playground</a></li>\n</ul>\n<p>And it seems like that currently passes coherence, leading to a weird inference error later on:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">error[E0283]: type annotations needed</span>\n<span class=\"go\">  --&gt; src/lib.rs:12:6</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">12 | impl Trait for Foo</span>\n<span class=\"go\">   |      ^^^^^ cannot infer type for enum `Foo`</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">note: multiple `impl`s satisfying `Foo: Trait` found</span>\n<span class=\"go\">  --&gt; src/lib.rs:11:1</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">11 |   impl Trait for Foo {}</span>\n<span class=\"go\">   |   ^^^^^^^^^^^^^^^^^^</span>\n<span class=\"go\">12 | / impl Trait for Foo</span>\n<span class=\"go\">13 | | where</span>\n<span class=\"go\">14 | |     PhantomPinned : Unpin,</span>\n<span class=\"go\">15 | | {}</span>\n<span class=\"go\">   | |__^</span>\n</code></pre></div>\n<ul>\n<li>(same for <code>NotClone</code>).</li>\n</ul>\n<p>So there seems to be a misinteraction with <code>trivial_bounds</code>, and that shouldn't be dismissed since <code>trivial_bounds</code> is not really a feature in and of itself; injecting a dummy generic allows stable code to circumvent it, and by getting a bit creative using a HRTB, it is possible to have the generic not infect the implementor nor the trait (and thus hide it from downstream users), leading to <code>trivial_bounds</code> being <em>trivial</em> to circumvent.</p>\n<ul>\n<li>\n<p>Demo of \"use generics to avoid <code>trivial_bounds</code>\": <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c3d6296a100e35d93ba9291ff063dc4d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c3d6296a100e35d93ba9291ff063dc4d</a></p>\n</li>\n<li>\n<p>Demo of \"hide that generic within a hrtb to make the workaround invisible\": <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3cdcf2f451b33d3c6726a744eb36ca2f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3cdcf2f451b33d3c6726a744eb36ca2f</a></p>\n</li>\n</ul>",
        "id": 272392221,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645185154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> has marked this topic as resolved.</p>",
        "id": 272392339,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645185243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300586\">Lukas Wirth</span> has marked this topic as unresolved.</p>",
        "id": 272392367,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645185247
    }
]