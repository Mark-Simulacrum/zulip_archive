[
    {
        "content": "<p>What would be the easiest way to write out (to a <code>std::io::Write</code> instance) a compile-time-known constant string that consists of a fixed human-readable string of data (e.g. <code>\"abcdefg\"</code>) followed by NUL padding out to a fixed width (in this case, 64 bytes)?</p>",
        "id": 212867960,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602272866
    },
    {
        "content": "<p>I <em>could</em> write out a constant like <code>[b'a', b'b', b'c', b'd', b'e', b'f', b'g', 0, 0 ,0, ..., 0]</code>, which seems absurd.</p>",
        "id": 212868088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602272932
    },
    {
        "content": "<p>I don't know of any shorthand syntax for that.</p>",
        "id": 212868141,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602272975
    },
    {
        "content": "<p>I presume you want to avoid the copy? e.g., <code>let mut arr = [0; 64]; arr.copy_from_slice(b\"....\")</code></p>",
        "id": 212868212,
        "sender_full_name": "simulacrum",
        "timestamp": 1602273012
    },
    {
        "content": "<p>I wouldn't object to that if I can do it at compile time (such as via const eval).</p>",
        "id": 212868255,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273040
    },
    {
        "content": "<p>Also, since I'm writing to a <code>std::io::Write</code> instance, I <em>could</em> do something like <code>const S: &amp;[u8]= b\"abcdefg\"; w.write_all(S); w.write_all(&amp;[0; 64][S.len()..]);</code> , but that similarly seems awkward.</p>",
        "id": 212868468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273144
    },
    {
        "content": "<p>Though that's currently the best solution I can think of.</p>",
        "id": 212868478,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273154
    },
    {
        "content": "<p>format strings can pad arbitrary characters, e.g. <code>\"{:\\0&lt;64}\"</code></p>",
        "id": 212868489,
        "sender_full_name": "cuviper",
        "timestamp": 1602273160
    },
    {
        "content": "<p>/me tests to see if that works with <code>std::io::Write</code>...</p>",
        "id": 212868557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273209
    },
    {
        "content": "<p>I don't know what that padding translates to in <code>Write</code> calls -- I guess a <code>write_fmt</code> that's expected to deal with it?</p>",
        "id": 212868886,
        "sender_full_name": "cuviper",
        "timestamp": 1602273369
    },
    {
        "content": "<p>Interesting, I didn't realize you could do that when using <code>std::io::Write</code> rather than <code>std::fmt::Write</code>.</p>",
        "id": 212868974,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273426
    },
    {
        "content": "<p>padding is probably not going to optimize away, I suspect</p>",
        "id": 212868980,
        "sender_full_name": "simulacrum",
        "timestamp": 1602273434
    },
    {
        "content": "<p>Probably not, yeah.</p>",
        "id": 212868999,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273449
    },
    {
        "content": "<p>I suspect, though I haven't checked, that the approach of calling write_all with a constant and then with the remaining padding would be faster.</p>",
        "id": 212869034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273475
    },
    {
        "content": "<p>fwiw  <code>v.write_all(b\"test000000000000000000000000000000000000000000000000000000000000\")</code> compiles to directly loading a pointer into the write call</p>",
        "id": 212869153,
        "sender_full_name": "simulacrum",
        "timestamp": 1602273526
    },
    {
        "content": "<p>but I can't get</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn test1(v: &amp;mut dyn std::io::Write) -&gt; std::io::Result&lt;()&gt; {\n    let mut buf = [0u8; 64];\n    buf[..4].copy_from_slice(b&quot;test&quot;);\n    v.write_all(&amp;buf)\n}\n</code></pre></div>\n\n\n<p>to optimize away the copy</p>",
        "id": 212869180,
        "sender_full_name": "simulacrum",
        "timestamp": 1602273546
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/fTfEG4\">https://rust.godbolt.org/z/fTfEG4</a></p>",
        "id": 212869189,
        "sender_full_name": "simulacrum",
        "timestamp": 1602273553
    },
    {
        "content": "<p>Seems like it might be possible via a <code>const fn</code>, but I'm not sure if it's possible to write that const fn (on stable, or even on nightly).</p>",
        "id": 212869496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273716
    },
    {
        "content": "<p>if the string is a literal, you could <code>&amp;concat!(\"string\", \"...64 \\0...\")[..64]</code></p>",
        "id": 212869552,
        "sender_full_name": "cuviper",
        "timestamp": 1602273734
    },
    {
        "content": "<p>True. :)</p>",
        "id": 212869568,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273758
    },
    {
        "content": "<p>You can create the two parts easily enough:</p>\n<div class=\"codehilite\"><pre><span></span><code>const X: &amp;str = &quot;foo&quot;;\nconst Y: &amp;[u8] = &amp;[0u8; 10 - X.len()];\n</code></pre></div>",
        "id": 212869581,
        "sender_full_name": "Diggsey",
        "timestamp": 1602273773
    },
    {
        "content": "<p>no idea how to concat them in a const fn though</p>",
        "id": 212869607,
        "sender_full_name": "Diggsey",
        "timestamp": 1602273788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> If I have to write out the <code>64 - X.len()</code> that's no simpler.</p>",
        "id": 212869621,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273803
    },
    {
        "content": "<p>there's always a proc-macro possibility too</p>",
        "id": 212869661,
        "sender_full_name": "cuviper",
        "timestamp": 1602273825
    },
    {
        "content": "<p>That's <em>definitely</em> more complicated. :)</p>",
        "id": 212869679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273836
    },
    {
        "content": "<p>I think I'm going to stick with this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"the_string\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">zero_pad</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>(where <code>zero_pad</code> is just a wrapper around \"write that many zeroes\").</p>",
        "id": 212869803,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pad64</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212870267,
        "sender_full_name": "cuviper",
        "timestamp": 1602274201
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">PADDED_FOO</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pad64</span><span class=\"p\">(</span><span class=\"s\">b\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212870428,
        "sender_full_name": "cuviper",
        "timestamp": 1602274304
    },
    {
        "content": "<p>Not bad! Hadn't occurred to me to write out the loop longhand, but since it's const-evaled, it doesn't matter.</p>",
        "id": 212870519,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602274347
    },
    {
        "content": "<p>Is there any way to turn that into a <code>&amp;[u8]</code> rather than a <code>[u8; 64]</code> (where the 64 needs to be known and part of the signature)?</p>",
        "id": 212870545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602274370
    },
    {
        "content": "<p>It's unfortunate that const eval doesn't seem to be able to return a <code>&amp;'static [u8]</code> from a buf, even though whatever it computes can be known at compile time.</p>",
        "id": 212870607,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602274416
    },
    {
        "content": "<p>you can do it in the constant value, at least:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">PADDED_FOO</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">pad64</span><span class=\"p\">(</span><span class=\"s\">b\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212870688,
        "sender_full_name": "cuviper",
        "timestamp": 1602274455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pad</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212870734,
        "sender_full_name": "Diggsey",
        "timestamp": 1602274489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> Right, it's definitely possible with const generics. In theory, if that return value could be <code>&amp;[u8]</code>, it wouldn't <em>need</em> const generics, right?</p>",
        "id": 212870877,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602274576
    },
    {
        "content": "<p>Yeah but I think that would go against the way const-eval works: const eval code has to be valid in its own right, so the function could never return a static reference. IIRC you can return an \"owned thing\" that then devolves into a reference at the const/non-const boundary, but I don't remember the details.</p>",
        "id": 212871054,
        "sender_full_name": "Diggsey",
        "timestamp": 1602274699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$input</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"cp\">$input</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$input</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">buf</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">PADDED_FOO</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pad</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">b\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212871482,
        "sender_full_name": "cuviper",
        "timestamp": 1602274965
    },
    {
        "content": "<p>ah so close:</p>",
        "id": 212871483,
        "sender_full_name": "Diggsey",
        "timestamp": 1602274966
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">IndexMut</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pad</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">IndexMut</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I thought you could do this</p>",
        "id": 212871497,
        "sender_full_name": "Diggsey",
        "timestamp": 1602274980
    },
    {
        "content": "<p>but trait bounds in const functions are still unstable</p>",
        "id": 212871517,
        "sender_full_name": "Diggsey",
        "timestamp": 1602274996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> that's nice, might make sense to pass 64 in as a macro arg?</p>",
        "id": 212871634,
        "sender_full_name": "Diggsey",
        "timestamp": 1602275065
    },
    {
        "content": "<p>depends whether the goal is to make it configurable or hidden</p>",
        "id": 212871696,
        "sender_full_name": "cuviper",
        "timestamp": 1602275108
    }
]