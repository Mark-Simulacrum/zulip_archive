[
    {
        "content": "<p>I'm tickled that <a href=\"https://github.com/rust-lang/rust/pull/71269\" title=\"https://github.com/rust-lang/rust/pull/71269\">https://github.com/rust-lang/rust/pull/71269</a> is happening.  Are there plans for checked conversions, too?  Something like fn i32::checked_from(f64) -&gt; Result&lt;i32, DoesntFit&gt; ?</p>",
        "id": 194961231,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> had a pre-RFC for a bunch of such methods (I'm not sure if that particular one is in there).</p>",
        "id": 194961764,
        "sender_full_name": "simulacrum",
        "timestamp": 1587575236
    },
    {
        "content": "<p>ah, <a href=\"https://internals.rust-lang.org/t/pre-rfc-add-explicitly-named-numeric-conversion-apis/11395\" title=\"https://internals.rust-lang.org/t/pre-rfc-add-explicitly-named-numeric-conversion-apis/11395\">https://internals.rust-lang.org/t/pre-rfc-add-explicitly-named-numeric-conversion-apis/11395</a> ?</p>",
        "id": 194962204,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575404
    },
    {
        "content": "<p>I believe so yeah</p>",
        "id": 194962306,
        "sender_full_name": "simulacrum",
        "timestamp": 1587575446
    },
    {
        "content": "<p>excellent, thanks.  I'll subscribe to that.</p>",
        "id": 194962339,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575461
    },
    {
        "content": "<p>checked_from might be too simplistic (though could be a reasonable default). it's not very clear to me how rust will eventually support rounding modes etc in floating point well</p>",
        "id": 194962375,
        "sender_full_name": "simulacrum",
        "timestamp": 1587575484
    },
    {
        "content": "<p>(or whether we even want to)</p>",
        "id": 194962389,
        "sender_full_name": "simulacrum",
        "timestamp": 1587575489
    },
    {
        "content": "<p>oh, hmm, that topic is closed now</p>",
        "id": 194962584,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575573
    },
    {
        "content": "<p>yeah it's an old pre-rfc, I think Simon ran out of time for it</p>",
        "id": 194962647,
        "sender_full_name": "simulacrum",
        "timestamp": 1587575596
    },
    {
        "content": "<p>Yeah I still want to make a proper RFC, help gathering prior art would be appreciated</p>",
        "id": 194962748,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1587575642
    },
    {
        "content": "<p>given the length of <a href=\"https://github.com/rust-lang/rust/issues/10184\" title=\"https://github.com/rust-lang/rust/issues/10184\">#10184</a>, that's perfectly understandable :)</p>",
        "id": 194962793,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223500\">@Federico Mena Quintero</span> Do you mean checking for overflow and NaN? Or should non-integer values also return an error instead of rounding?</p>",
        "id": 194962853,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1587575675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> so I just ran into a bug in librsvg where a big positive\"f64 as i32\" gives back a negative number, and in that case I don't want saturation; I want to know that it won't fit so I can do something else</p>",
        "id": 194962973,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575737
    },
    {
        "content": "<p>But fractional values should still be rounded/truncated?</p>",
        "id": 194963111,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1587575783
    },
    {
        "content": "<p>I guess I want to check for overflow, as in not fitting within the int's range.  I'm not sure about NaNs; since this is a checked operation, they should probably also yield an error</p>",
        "id": 194963230,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> yeah, round to zero is sensible for my case</p>",
        "id": 194963304,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575867
    },
    {
        "content": "<p>Ok, I think this is \"Fallible approximate\" that I mention in future possibilites</p>",
        "id": 194963453,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1587575920
    },
    {
        "content": "<p>... I was looking at the docs, found the unstable approx_unchecked_to, got really happy that something there is happening already, and then went to look back at the issues/rfcs :)</p>",
        "id": 194963463,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587575925
    },
    {
        "content": "<p>ah, got it, indeed the \"fallible approximate\" case would cover this</p>",
        "id": 194963839,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587576096
    },
    {
        "content": "<p>Unchecked is the one that has Undefined Behavior, so probably not what you want :)</p>",
        "id": 194964167,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1587576242
    },
    {
        "content": "<p>It’s what <code>as</code> does in current Rust versions. <code>as</code> will likely be changed to saturate which has extra runtime cost. That cost is typically low, but for the few cases where it isn’t (and the values are known not to overflow) we’re adding <code>unsafe fn to_int_unchecked</code> with the old behavior (which also matches C and C++ casts)</p>",
        "id": 194964528,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1587576398
    },
    {
        "content": "<p>yeah, librsvg has a lot of <code>f64 as i32</code> stuff :(  Will start auditing it soon.  I think saturating casts could help that code in some cases; for some others I really want to know about overflow.  I can see that carefully-written pixel-crunching stuff would like the unchecked casts...</p>",
        "id": 194966618,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587577317
    },
    {
        "content": "<p>btw, let me thank you in passing for html5ever / kuchiki / all those.  They are super useful as crates and as examples of how to implement SVG lookalikes :)</p>",
        "id": 194966795,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587577393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223500\">Federico Mena Quintero</span> <a href=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/194962973\" title=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/194962973\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> so I just ran into a bug in librsvg where a big positive\"f64 as i32\" gives back a negative number, and in that case I don't want saturation; I want to know that it won't fit so I can do something else</p>\n</blockquote>\n<p>that sounds like you ran into UB, and cannot happen once <code>as</code> saturates (as in, once <a href=\"https://github.com/rust-lang/rust/pull/71269\" title=\"https://github.com/rust-lang/rust/pull/71269\">https://github.com/rust-lang/rust/pull/71269</a> lands)</p>",
        "id": 194988892,
        "sender_full_name": "RalfJ",
        "timestamp": 1587588201
    },
    {
        "content": "<p>a positive float is then guaranteed to give a positive int</p>",
        "id": 194989004,
        "sender_full_name": "RalfJ",
        "timestamp": 1587588255
    },
    {
        "content": "<p>(including pos. infinity, which returns <code>i32::MAX</code>)</p>",
        "id": 194989028,
        "sender_full_name": "RalfJ",
        "timestamp": 1587588270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223500\">@Federico Mena Quintero</span> you might also be interested in <a href=\"https://github.com/rust-lang/rfcs/pull/2484\" title=\"https://github.com/rust-lang/rfcs/pull/2484\">https://github.com/rust-lang/rfcs/pull/2484</a>, which hit the possibility explosion pretty hard</p>",
        "id": 195000660,
        "sender_full_name": "scottmcm",
        "timestamp": 1587595783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> oh yeah, that was definitely UB and a bug.  A carry-over from the C code, unfortunately.</p>",
        "id": 195000773,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587595851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> thanks, I'll read that</p>\n<p>someone just suggested using the <code>cast</code> crate which sounds like exactly the low-impact solution we need right now</p>",
        "id": 195000991,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587596034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223500\">Federico Mena Quintero</span> <a href=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195000773\" title=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195000773\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> oh yeah, that was definitely UB and a bug.  A carry-over from the C code, unfortunately.</p>\n</blockquote>\n<p>to be clear, this was/is a bug <em>in rustc</em>. we shouldn't have UB from safe <code>as</code> casts.</p>",
        "id": 195024251,
        "sender_full_name": "RalfJ",
        "timestamp": 1587625305
    },
    {
        "content": "<p>So I think your problem is solved by <a href=\"https://github.com/rust-lang/rust/pull/71269\" title=\"https://github.com/rust-lang/rust/pull/71269\">https://github.com/rust-lang/rust/pull/71269</a>. is your question how to get a fix without waiting for that PR?</p>",
        "id": 195024323,
        "sender_full_name": "RalfJ",
        "timestamp": 1587625345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195024323\" title=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195024323\">said</a>:</p>\n<blockquote>\n<p>So I think your problem is solved by <a href=\"https://github.com/rust-lang/rust/pull/71269\" title=\"https://github.com/rust-lang/rust/pull/71269\">https://github.com/rust-lang/rust/pull/71269</a>. is your question how to get a fix without waiting for that PR?</p>\n</blockquote>\n<p>Oh, no, the code in librsvg <em>is</em> wrong even with saturating casts; it really needs to check if there's an overflow.  I'm happy that \"as\" is being finally un-UBed with saturation.  As for my problem I'll audit our \"as\" casts (lots of them, unfortunately, from the initial C to Rust conversion when I didn't know what I was doing) and replace them with something correct, I hope.</p>",
        "id": 195085621,
        "sender_full_name": "Federico Mena Quintero",
        "timestamp": 1587659009
    },
    {
        "content": "<p>I dont know what an \"overflow\" means when casting float-to-int</p>",
        "id": 195183166,
        "sender_full_name": "RalfJ",
        "timestamp": 1587732904
    },
    {
        "content": "<p>but anyway it seems you have a plan forward so that's good :D</p>",
        "id": 195183187,
        "sender_full_name": "RalfJ",
        "timestamp": 1587732912
    },
    {
        "content": "<p>maybe you mean <code>200.0 as i8</code>? but the result is 127, I wouldnt say it \"overflows\" -- in the linked issue we say that it \"saturates\". sure the cast loses information, but then so does <code>1.5 as i8</code>.</p>",
        "id": 195183373,
        "sender_full_name": "RalfJ",
        "timestamp": 1587732973
    },
    {
        "content": "<p>I think they're asking for something like <code>fn checked_to_i32(self) -&gt; Option&lt;i32&gt;</code>, that never saturates but returns an error or <code>None</code>.</p>",
        "id": 195189048,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587735704
    },
    {
        "content": "<p>and then someone asked above what it should do on <code>1.5</code>, and indeed I have the same question</p>",
        "id": 195192028,
        "sender_full_name": "RalfJ",
        "timestamp": 1587737055
    },
    {
        "content": "<p>usually a \"checked\" cast should only succeed if the result is exactly representable</p>",
        "id": 195192051,
        "sender_full_name": "RalfJ",
        "timestamp": 1587737068
    },
    {
        "content": "<p>for int-int, overflow is the only concern; for float-int we need to consider saturation <em>and</em> rounding</p>",
        "id": 195192083,
        "sender_full_name": "RalfJ",
        "timestamp": 1587737083
    },
    {
        "content": "<p>\"Whatever <code>1.5 as i32</code> does\".</p>",
        "id": 195192545,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587737285
    },
    {
        "content": "<p>It's implied that an <code>f32</code> won't be exactly representable as an <code>i32</code> most of the time. But we could have it under a different name, I guess. I <em>think</em> \"exactly representable\" can be tested with <code>x as i32 as f32 == x</code>, while \"checked conversion without saturation\" is harder to express.</p>",
        "id": 195192620,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587737327
    },
    {
        "content": "<p>so... <code>127.99 as i8</code>, is that \"rounding\" or \"saturation\"?</p>",
        "id": 195194412,
        "sender_full_name": "RalfJ",
        "timestamp": 1587738060
    },
    {
        "content": "<p>also I am somewhat curious in which cases rounding would be okay but saturation undesired, that seems awfully specific to me</p>",
        "id": 195194468,
        "sender_full_name": "RalfJ",
        "timestamp": 1587738087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195194412\" title=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195194412\">said</a>:</p>\n<blockquote>\n<p>so... <code>127.99 as i8</code>, is that \"rounding\" or \"saturation\"?</p>\n</blockquote>\n<p>answering myself: probably rounding. I guess the rule is \"anything for which the unchecked cast has defined behavior returns <code>Some</code>; everything else returns <code>None</code>\".</p>",
        "id": 195194586,
        "sender_full_name": "RalfJ",
        "timestamp": 1587738128
    },
    {
        "content": "<p>Which is totally fine if you interpret <code>checked</code> as \"like <code>unchecked</code> but tell me instead of triggering UB\"</p>",
        "id": 195195303,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587738438
    },
    {
        "content": "<p>right, what remains is my question for a usecase</p>",
        "id": 195195370,
        "sender_full_name": "RalfJ",
        "timestamp": 1587738466
    },
    {
        "content": "<p>I can understand caring about information loss, but separating saturation from rounding seems really odd</p>",
        "id": 195195461,
        "sender_full_name": "RalfJ",
        "timestamp": 1587738489
    },
    {
        "content": "<p>Maybe some audio processing code where you want to detect and warn in case of saturation (because it might be audible)</p>",
        "id": 195195499,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587738506
    },
    {
        "content": "<p>the thing thats \"unchecked\" about the unchecked cast isn't motivated by some usecase, it's just how LLVM and C happen to work</p>",
        "id": 195195528,
        "sender_full_name": "RalfJ",
        "timestamp": 1587738520
    },
    {
        "content": "<p>If I'm processing audio as float, then converting it back to integer, rounding is perfectly normal, as I'm quantizing to my target domain. Saturation is \"okay\" (better than UB, for sure), but it's still useful to know when it happens.</p>",
        "id": 195195934,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587738685
    },
    {
        "content": "<p>I guess the workaround is to do the range check in float instead.</p>",
        "id": 195196161,
        "sender_full_name": "Laurențiu",
        "timestamp": 1587738766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195195934\" title=\"#narrow/stream/122651-general/topic/Float.20to.20int.20conversions/near/195195934\">said</a>:</p>\n<blockquote>\n<p>If I'm processing audio as float, then converting it back to integer, rounding is perfectly normal, as I'm quantizing to my target domain. Saturation is \"okay\" (better than UB, for sure), but it's still useful to know when it happens.</p>\n</blockquote>\n<p>sounds reasonable, but pretty niche</p>",
        "id": 195197064,
        "sender_full_name": "RalfJ",
        "timestamp": 1587739105
    },
    {
        "content": "<p>Perhaps a solution would be to have <code>checked</code> that will fail on saturation or rounding, and then something like <code>reporting</code> (bad name) that would return something like: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">FloatToIntReport</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">result</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">rounded</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">saturated</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 195207312,
        "sender_full_name": "Asa Zeren",
        "timestamp": 1587743312
    },
    {
        "content": "<p>FWIW, the conversions in <code>num-traits</code> are properly checked for float to int</p>",
        "id": 195444286,
        "sender_full_name": "cuviper",
        "timestamp": 1588006061
    }
]