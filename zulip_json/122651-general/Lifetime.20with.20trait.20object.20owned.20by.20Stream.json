[
    {
        "content": "<p>Hello, I am trying to wrap my head around what the lifetime annotations should be when my structure owns a pinned <code>impl Future</code> and implements <code>Stream</code>. When I get <code>self</code> as mutable reference, the compiler complains that the pinned future doesn't live long enough and that it wants the static lifetime. I give it a lifetime, and then it complains about... I'm not sure really? I would live to see something like <code>cargo expand</code> that works for lifetimes so that I can read some code where it is elided and inferred to understand it better.</p>\n<p>This code may be too long for Zulip, I have never used it before. The issue is where I try to unpin <code>self</code> in <code>poll_next</code>. The lifetimes here are probably all wrong. The only thing I am certain of is that <code>&amp;'p Client</code> must live as pong as the paginator (<code>'p</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This should help reduce complexity. Instead of keeping track of a paginator's,</span>\n<span class=\"c1\">// state with multiple fields, there are three states. The value of the `Error` state</span>\n<span class=\"c1\">// will be taken and returned, and the state changed to `Closed`.</span>\n<span class=\"k\">enum</span> <span class=\"nc\">RequestStreamState</span><span class=\"o\">&lt;'</span><span class=\"na\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Pending</span><span class=\"p\">(</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">f</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Closed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"na\">p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This paginator needs to have the same lifetime of the `Client`.</span>\n<span class=\"w\">    </span><span class=\"n\">client</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">p</span> <span class=\"nc\">Client</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// The paginator needs to own the parameters because it mutates on the first request,</span>\n<span class=\"w\">    </span><span class=\"c1\">// and we want to avoid the callee needing to wrap this with a smart pointer.</span>\n<span class=\"w\">    </span><span class=\"n\">params</span>: <span class=\"nc\">SearchParams</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// The initial offset of the `SearchParams` passed to the constructor.</span>\n<span class=\"w\">    </span><span class=\"n\">offset</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This keeps track of internal state.</span>\n<span class=\"w\">    </span><span class=\"n\">state</span>: <span class=\"nc\">RequestStreamState</span><span class=\"o\">&lt;'</span><span class=\"na\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SearchResults</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">VecDeque</span><span class=\"o\">&lt;</span><span class=\"n\">ProjectResult</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">surf</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This is not the total number of projects from the API,</span>\n<span class=\"w\">    </span><span class=\"c1\">// rather it is how many this iterator will yield.</span>\n<span class=\"w\">    </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This is an option because the value is only present if the first request succeeded.</span>\n<span class=\"w\">    </span><span class=\"n\">total</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"na\">p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">client</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">p</span> <span class=\"nc\">Client</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"nc\">SearchParams</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"na\">p</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">first_request</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">hits</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// The API returns the total number of projects that met the search criteria.</span>\n<span class=\"w\">                </span><span class=\"c1\">// ...</span>\n<span class=\"w\">                </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">total_hits</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">client</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">state</span>: <span class=\"nc\">status</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">count</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">total</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">first_request</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">client</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Client</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">params</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">SearchParams</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">surf</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">SearchResults</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// This is a hack to get the API to provide the correct total result count.</span>\n<span class=\"w\">        </span><span class=\"c1\">// The API seems to only return the correct number of projects when the initial limit is one.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">limit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">result</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">surf</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ProjectResult</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll_next</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Unpin `self` so that mutation is possible.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// At some point in the past, a new request was made. Check to see if it has delivered</span>\n<span class=\"w\">            </span><span class=\"c1\">// a result yet, if it has, and handle accordingly. Otherwise, we simply return `Pending`.</span>\n<span class=\"w\">            </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Pending</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// The future returned from the last page requested has resolved.</span>\n<span class=\"w\">                </span><span class=\"c1\">// Determine what to do with it, there are several situations.</span>\n<span class=\"w\">                </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// It is successful, so take the `ProjectResult`s and</span>\n<span class=\"w\">                    </span><span class=\"c1\">// save them to the current state.</span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">search</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">hits</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// Since the state has been changed, try to return a `ProjectResult`.</span>\n<span class=\"w\">                        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">poll_next</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// When an error is encountered after the first result,</span>\n<span class=\"w\">                    </span><span class=\"c1\">// we can pass the error to the callee directly,</span>\n<span class=\"w\">                    </span><span class=\"c1\">// rather than going through an iteration where the status is `Error`.</span>\n<span class=\"w\">                    </span><span class=\"c1\">// Also set `self.state` to `Closed`.</span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Closed</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Still waiting, just forward that state.</span>\n<span class=\"w\">                </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// There is already a queue. If it is empty, request the next page.</span>\n<span class=\"w\">            </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">projects</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">projects</span><span class=\"p\">.</span><span class=\"n\">pop_front</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Increment the counter and return this `ProjectResult`.</span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"c1\">// It is expected that if this is reached, the first page</span>\n<span class=\"w\">                    </span><span class=\"c1\">// of projects has been retrieved successfully. Unwrapping should be safe here.</span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">total</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// There are no more projects expected.</span>\n<span class=\"w\">                        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Closed</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Request the next page.</span>\n<span class=\"w\">                </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// Here an `if let` must be used because the state cannot be `PartialEq`.</span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Closed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// If an error has occurred this should already be</span>\n<span class=\"w\">                        </span><span class=\"c1\">// handled by the `Closed` branch. The same is true if there</span>\n<span class=\"w\">                        </span><span class=\"c1\">// are no more results, as the state is in the `Some` branch.</span>\n<span class=\"w\">                        </span><span class=\"fm\">unreachable!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// It must be time to request another page, because we have not closed.</span>\n<span class=\"w\">                        </span><span class=\"c1\">// Here the search offset is set to the sum of `self.offset` (which is the initial offset)</span>\n<span class=\"w\">                        </span><span class=\"c1\">// and `self.count` to get an absolute position at the start of the next page.</span>\n<span class=\"w\">                        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Pending</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">)));</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// This should generally only occur if the first request set the state to `Error`.</span>\n<span class=\"w\">            </span><span class=\"c1\">// If this happens in the middle of iteration, the error will have already been</span>\n<span class=\"w\">            </span><span class=\"c1\">// forwarded to the callee and the `self.state` set to `Closed`.</span>\n<span class=\"w\">            </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// Necessary to replace the value because it can't be moved.</span>\n<span class=\"w\">                </span><span class=\"c1\">// Set `self.status` to `Closed` and return `Ready` with the error.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Closed</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// Forward the error, the state has been set to `Closed`.</span>\n<span class=\"w\">                </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Either we have consumed all the results from all the pages, or the previous call</span>\n<span class=\"w\">            </span><span class=\"c1\">// returned an `Error`.</span>\n<span class=\"w\">            </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Closed</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">size_hint</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">total</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0495</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">appropriate</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">conflicting</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">220</span>:<span class=\"mi\">33</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">220</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                 </span><span class=\"o\">^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">anonymous</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">218</span>:<span class=\"mi\">28</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">218</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">poll_next</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                            </span><span class=\"o\">^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">compatible</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">220</span>:<span class=\"mi\">33</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">220</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                 </span><span class=\"o\">^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">215</span>:<span class=\"mi\">40</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">215</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                        </span><span class=\"o\">^^</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">assignable</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">277</span>:<span class=\"mi\">29</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">277</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">                   </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Pending</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">RequestStreamState</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">RequestStreamState</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277528254,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648904486
    },
    {
        "content": "<p>Also some comments were removed to allow it to pass the length limit requirement.</p>",
        "id": 277528306,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648904543
    },
    {
        "content": "<p>Unpinning sounds like the wrong thing. You more likely want pin projection</p>",
        "id": 277530427,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648907039
    },
    {
        "content": "<p>See the crates like <a href=\"https://docs.rs/pin-project/\">https://docs.rs/pin-project/</a> or <a href=\"https://docs.rs/pin-project-lite/\">https://docs.rs/pin-project-lite/</a></p>",
        "id": 277530478,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648907088
    },
    {
        "content": "<p>And practically you may want to avoid implementing future/stream by hand as much as possible. Using <a href=\"https://docs.rs/futures/latest/futures/stream/fn.unfold.html\">https://docs.rs/futures/latest/futures/stream/fn.unfold.html</a> may be easier</p>",
        "id": 277530606,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648907276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I already have the code written though and don't want to abandon it. I want access to all fields of the mutable reference to self, not just individual fields</p>",
        "id": 277531314,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648908120
    },
    {
        "content": "<p>What is the difference between <code>pin-project</code> and <code>pin-project-lite</code>?</p>",
        "id": 277531469,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648908319
    },
    {
        "content": "<p>I'm failing to understand why I can't use the <code>project()</code> method as the example shows</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">222</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">project</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">possible</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277531882,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648908772
    },
    {
        "content": "<p>I just removed it and put it back and now it is working. Not sure. But now I can't call methods that are implemented as the trait. I need to call <code>poll_next</code> from <code>poll_next</code> when the state changes during the \"iteration\".</p>",
        "id": 277532203,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648909288
    },
    {
        "content": "<p>None of this matters because I still have the same exact issue.</p>",
        "id": 277532615,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648909791
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0495</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">appropriate</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">p</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">conflicting</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">218</span>:<span class=\"mi\">25</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">218</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">project</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                         </span><span class=\"o\">^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">outlive</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">214</span>:<span class=\"mi\">40</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">214</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                        </span><span class=\"o\">^^</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">compatible</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">218</span>:<span class=\"mi\">25</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">218</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">project</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                         </span><span class=\"o\">^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">SearchResultsPaginator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">assignable</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">modrinth</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">275</span>:<span class=\"mi\">57</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">275</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">                   </span><span class=\"n\">RequestStreamState</span>::<span class=\"n\">Pending</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                   </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">SearchResults</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">surf</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">query</span>::<span class=\"n\">search</span>::<span class=\"n\">SearchResults</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">surf</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277532675,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648909842
    },
    {
        "content": "<p>For the most help, you should produce a reproducible example on the playground <a href=\"https://github.com/shepmaster/rust-mre\">https://github.com/shepmaster/rust-mre</a></p>",
        "id": 277538818,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648917048
    },
    {
        "content": "<p>I have created a MCVE on the playground. Notice that it doesn't look anything like what my real code is, and that's because I hit this error writing the example which did not show itself when writing my Stream impl.<br>\nThe lifetimes here are my attempt at resolving this.<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=144c7ffe882246b45df9ad293c0d828d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=144c7ffe882246b45df9ad293c0d828d</a></p>",
        "id": 277573830,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648961812
    },
    {
        "content": "<p>I agree that using the <code>async-stream</code> crate is much simpler, and much more readable. But this also generates code with minimum functionality.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">search_iter</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"nc\">SearchParams</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">surf</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">ProjectResult</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">try_stream</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">projects</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// The first search needs to have a limit of `1`,</span>\n<span class=\"w\">                </span><span class=\"c1\">// otherwise the API seems to return an incorrect `total_hits`.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">limit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">search</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">limit</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">hits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">projects</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">projects</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">hits</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">projects</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">projects</span><span class=\"p\">.</span><span class=\"n\">pop_front</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there a way to ensure that I provide the correct <code>size_hint()</code> with this macro?</p>",
        "id": 277588320,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648970136
    },
    {
        "content": "<p>Several issues. The size hint being one of them, but another is that if the callee keeps iterating, it will make another request every single time it returns <code>None</code> rather than keeping track of the number of expected results. This can be easily fixed, but I much prefer the manual state machine and would like to see the lifetimes fixed if only for my education.</p>",
        "id": 277588543,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648970272
    },
    {
        "content": "<p>Actually, this will work fine. As anything that is <code>Poll</code> should only return <code>Ready(None)</code> once, it is acceptable to use unwrap and crash the program here I suppose.</p>",
        "id": 277588685,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648970349
    },
    {
        "content": "<p>This is however not how an <code>Iterator</code> behaves. Is it different for <code>Stream</code> because <code>Poll</code> should only tell the callee that it has closed once?</p>",
        "id": 277588743,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1648970393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481816\">Jacob Birkett</span> <a href=\"#narrow/stream/122651-general/topic/Lifetime.20with.20trait.20object.20owned.20by.20Stream/near/277573830\">said</a>:</p>\n<blockquote>\n<p>I have created a MCVE on the playground.</p>\n</blockquote>\n<p>The future returned from the client references the client, so you can't have two different lifetimes <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=9cc7d91ad1f209d5f60dc35c072d7cd4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=9cc7d91ad1f209d5f60dc35c072d7cd4</a></p>",
        "id": 277634819,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648995824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481816\">Jacob Birkett</span> <a href=\"#narrow/stream/122651-general/topic/Lifetime.20with.20trait.20object.20owned.20by.20Stream/near/277588320\">said</a>:</p>\n<blockquote>\n<p>Is there a way to ensure that I provide the correct <code>size_hint()</code> with this macro?</p>\n</blockquote>\n<p>I don't think so.</p>",
        "id": 277635417,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648996123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481816\">Jacob Birkett</span> <a href=\"#narrow/stream/122651-general/topic/Lifetime.20with.20trait.20object.20owned.20by.20Stream/near/277588743\">said</a>:</p>\n<blockquote>\n<p>This is however not how an <code>Iterator</code> behaves.</p>\n</blockquote>\n<p>How so? If you keep calling <code>Iterator::next</code> on any <em>arbitrary</em> iterator, after it returns <code>None</code>, what happens?</p>",
        "id": 277635595,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648996228
    },
    {
        "content": "<blockquote>\n<p>Is there a way to ensure that I provide the correct size_hint() with this macro?<br>\nYou could create a wrapper stream that does, depending on what you need to access to get the size hint</p>\n</blockquote>",
        "id": 277655477,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1649012663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> If I'm just going to wrap the stream! with a Stream, there's no point to using the macro. I am also likely to have the same lifetime issues as well, I reckon. I was really asking for help with lifetimes here, not alternative solutions.</p>",
        "id": 277670463,
        "sender_full_name": "Jacob Birkett",
        "timestamp": 1649032882
    },
    {
        "content": "<p>Once you've got another MRE with the question at hand, you can get more help.</p>",
        "id": 277730630,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649078938
    }
]