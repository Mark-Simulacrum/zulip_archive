[
    {
        "content": "<p>I'm having trouble figuring out how to fix this function's compilation error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashSet</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">unicode_segmentation</span>::<span class=\"n\">UnicodeSegmentation</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">letters_as_set</span><span class=\"p\">(</span><span class=\"n\">word</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">graphemes</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For reference, this is the original <code>char</code> version that builds successfully:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">letters_as_set</span><span class=\"p\">(</span><span class=\"n\">word</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HashSet</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240367894,
        "sender_full_name": "miles",
        "timestamp": 1622053247
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a></p>\n<p><a href=\"https://stackoverflow.com/q/29428227/155423\">Return local String as a slice (&amp;str)</a></p>",
        "id": 240368598,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622053539
    },
    {
        "content": "<p>you create a <code>String</code> via <code>to_lowercase</code>. That string is dropped at the end of the function, invalidating the references</p>",
        "id": 240368694,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622053571
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">letters_as_set</span><span class=\"p\">(</span><span class=\"n\">word</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HashSet</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">graphemes</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">Into</span>::<span class=\"n\">into</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The simplest change to get it to work ^</p>",
        "id": 240368792,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622053618
    },
    {
        "content": "<p>Why does the <code>chars()</code> version work then? Is that because it's taking values from the original string, rather than references (assuming <code>graphemes()</code> takes references)?</p>",
        "id": 240369634,
        "sender_full_name": "miles",
        "timestamp": 1622053916
    },
    {
        "content": "<p>the <code>chars</code> are owned values, completely separate from the string.</p>",
        "id": 240370375,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622054229
    },
    {
        "content": "<p>And no need to assume when you <a href=\"https://docs.rs/unicode-segmentation/1.7.1/unicode_segmentation/trait.UnicodeSegmentation.html#tymethod.graphemes\">have the docs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">graphemes</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">is_extended</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Graphemes</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240370470,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622054278
    },
    {
        "content": "<p>I guess I meant to say \"assuming <code>graphemes()</code> <em>produces</em> references\" from the original string. Which wasn't clear to me in the docs.<br>\nAlso, found that this version works too - possibly less generic than using <code>Into::into</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">to_lowercase</span><span class=\"p\">().</span><span class=\"n\">graphemes</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240370937,
        "sender_full_name": "miles",
        "timestamp": 1622054476
    },
    {
        "content": "<p>depending on what you mean by \"generic\". Those do the same thing.</p>",
        "id": 240371157,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622054564
    },
    {
        "content": "<blockquote>\n<p>Which wasn't clear to me in the docs</p>\n</blockquote>\n<p>It's worth understanding that. The <code>'a</code> shows how lifetimes flow into and then out of the function.</p>",
        "id": 240371264,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1622054608
    }
]