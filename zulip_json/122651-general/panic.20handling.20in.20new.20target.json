[
    {
        "content": "<p>I'm currently implementing the Rust std for a target spec I'm working on (armv6k-nintendo-3ds, it's already in the compiler targets). I need help and insight in Rust's std code for panicking, because there is  a very peculiar issue I can't solve. Once a panic (normally called by panic! or unwrap) is triggered, the code checking the panic and printing all of the normal backtrace info actually crashes, due to a subtraction overflow in std/panicking.rs:277 (thanks to gdb and lots of digging I know this info is absolutely correct, for how absurd it may seem). This is very unexpected, but by checking the global/thread_local panic count variables, i noticed that they were in fact at 0 even during the panic cleanup (panicking.rs:382) from which they were called from. I both watched and used breakpoints on rust_panic to check for the use of the <code>panic_count::increase</code> function, that would cause the count to work correctly, but by my surprise this function isn't even mentioned in the <code>(gdb) info functions</code> (unlike <code>panic_count::decrease</code> which is the source of the crash and is mentioned). I can't wrap my head around it at all, so I'm guessing there may be an issue with linking for a new target. Asking to someone with more experience in the <code>std</code> then me: is there any way those functions (expecially <code>rust_panic_with_hook</code>) could be linked or used differently based on the target/architecture?</p>\n<p>My repo is <a href=\"https://github.com/Meziu/rust-horizon\">https://github.com/Meziu/rust-horizon</a>, though this won't be of much use since the  code in <code>panicking</code> and <code>panic</code> is basically unchanged.</p>",
        "id": 266495146,
        "sender_full_name": "Meziu",
        "timestamp": 1640946404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452421\">@Meziu</span> <code>armv6k-nintendo-3ds</code> doesn't have object file tls according to the target spec. This means that os tls support has to be used. Are <code>pthread_setspecific</code> and <code>pthread_getspecific</code> correctly implemented by the libc used by this target?</p>",
        "id": 266510341,
        "sender_full_name": "bjorn3",
        "timestamp": 1640965780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  Yes. It works (i tested it multiple times) and it also works in this specific case (since the LOCAL_PANIC_COUNT key is correctly retrieved and accessed). The issue is in some optimization of the code i think. The <code>panic_count::increase</code> call in <code>rust_panic_with_hook</code> is optimized away for some reason, even in a debug build. By editing the source and calling the function from another spot, the code actually links the function and works just as normal. Since my target is using gcc instead of llvm, do you have any suggestions for reducing optimization even in a debug build? Or maybe a flag to not optimize a function body in rust? I'd like to test these ipothesis, but I'm not experienced enough in either of those fields</p>",
        "id": 266510642,
        "sender_full_name": "Meziu",
        "timestamp": 1640966144
    },
    {
        "content": "<p>This idea is further suggested by the fact that debug symbols lack in <code>rust_panic_with_hook</code>  when compiling for my target, yet they are normally accessible in a linux x64 build</p>",
        "id": 266510794,
        "sender_full_name": "Meziu",
        "timestamp": 1640966308
    },
    {
        "content": "<blockquote>\n<p>Since my target is using gcc instead of llvm</p>\n</blockquote>\n<p>Are you using rustc_codegen_gcc?</p>",
        "id": 266510968,
        "sender_full_name": "bjorn3",
        "timestamp": 1640966461
    },
    {
        "content": "<p>isn't it automatically used when specifying a gcc linker in the target spec?</p>",
        "id": 266511044,
        "sender_full_name": "Meziu",
        "timestamp": 1640966540
    },
    {
        "content": "<p>No, you have to explicitly build rustc with support for the gcc backend and select it using a commandline argument. The gcc backend is currently experimental. By default the llvm backend is always used.</p>",
        "id": 266511080,
        "sender_full_name": "bjorn3",
        "timestamp": 1640966612
    },
    {
        "content": "<p>Ok, interesting. I'll look into it.</p>",
        "id": 266511131,
        "sender_full_name": "Meziu",
        "timestamp": 1640966658
    },
    {
        "content": "<p>Thank you</p>",
        "id": 266511134,
        "sender_full_name": "Meziu",
        "timestamp": 1640966666
    },
    {
        "content": "<p>You probably want to keep using the llvm backend. At least for now.</p>",
        "id": 266511151,
        "sender_full_name": "bjorn3",
        "timestamp": 1640966695
    },
    {
        "content": "<p>Yeah i guessed so, but I prefer a hard-to-use target to a non-working one <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 266511229,
        "sender_full_name": "Meziu",
        "timestamp": 1640966783
    },
    {
        "content": "<blockquote>\n<p>even in a debug build.</p>\n</blockquote>\n<p>If you are compiling rustc directly with support for a target, libstd will always be built in release mode.</p>",
        "id": 266511236,
        "sender_full_name": "bjorn3",
        "timestamp": 1640966792
    },
    {
        "content": "<p>Even with build-std?</p>",
        "id": 266511251,
        "sender_full_name": "Meziu",
        "timestamp": 1640966815
    },
    {
        "content": "<p>With build-std I think it only builds in release mode if you build your own code in release mode, but I am not sure.</p>",
        "id": 266511266,
        "sender_full_name": "bjorn3",
        "timestamp": 1640966853
    },
    {
        "content": "<p>Yeah, I'm using build-std since std support for my target hasn't yet been finalized (and also waiting for a libc PR to get merged)</p>",
        "id": 266511354,
        "sender_full_name": "Meziu",
        "timestamp": 1640966932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266511266\">said</a>:</p>\n<blockquote>\n<p>With build-std I think it only builds in release mode if you build your own code in release mode, but I am not sure.</p>\n</blockquote>\n<p>Just tried it and <code>cargo build -Zbuild-std</code> without <code>--release</code> indeed builds the standard library in debug mode.</p>",
        "id": 266511356,
        "sender_full_name": "bjorn3",
        "timestamp": 1640966937
    },
    {
        "content": "<p>Cool, i guessed so from my tests. You sure do help, you know way more about this than I could think of</p>",
        "id": 266511376,
        "sender_full_name": "Meziu",
        "timestamp": 1640966984
    },
    {
        "content": "<blockquote>\n<p>The panic_count::increase call in rust_panic_with_hook is optimized away for some reason</p>\n</blockquote>\n<p>It doesn't look like <code>increase</code> should even be inlined in debug mode. Can you build with the <code>RUSTFLAGS=\"--emit llvm-ir\"</code> env var and then look at the llvm ir of the <code>rust_panic_without_hook</code> function in the llvm ir file for libstd? You should find it in <code>target/debug/deps/</code> I think. The file extension is <code>.ll</code>.</p>",
        "id": 266511513,
        "sender_full_name": "bjorn3",
        "timestamp": 1640967129
    },
    {
        "content": "<p>I found the file, and also the function. Here <code>std::panicking::panic_count::increase</code> is mentioned:</p>\n<div class=\"codehilite\"><pre><span></span><code>invoke std::panicking::panic_count::increase\n  %5 = invoke { i8, i32 } @_ZN3std9panicking11panic_count8increase17h1991a94111aaad74E()\n          to label %bb1 unwind label %cleanup, !dbg !147223\n</code></pre></div>",
        "id": 266511803,
        "sender_full_name": "Meziu",
        "timestamp": 1640967581
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266511891,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640967692
    },
    {
        "content": "<p>And the disassembly of <code>rust_panic_with_hook</code> doesn't show the call?</p>",
        "id": 266511892,
        "sender_full_name": "bjorn3",
        "timestamp": 1640967692
    },
    {
        "content": "<p>What disassembly?</p>",
        "id": 266511947,
        "sender_full_name": "Meziu",
        "timestamp": 1640967730
    },
    {
        "content": "<p>Disassembly of the produced executable that crashes.</p>",
        "id": 266511966,
        "sender_full_name": "bjorn3",
        "timestamp": 1640967751
    },
    {
        "content": "<p>There aren't any debug symbols inside <code>rust_panic_with_hook</code>, if that's what you are asking.</p>",
        "id": 266511999,
        "sender_full_name": "Meziu",
        "timestamp": 1640967799
    },
    {
        "content": "<p>like any, at all</p>",
        "id": 266512016,
        "sender_full_name": "Meziu",
        "timestamp": 1640967812
    },
    {
        "content": "<p>No, I mean like <code>objdump -d /path/to/executable</code> (you probably need an <code>objdump</code> for arm executables)</p>",
        "id": 266512104,
        "sender_full_name": "bjorn3",
        "timestamp": 1640967907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  Just checked, not even once.</p>",
        "id": 266512425,
        "sender_full_name": "Meziu",
        "timestamp": 1640968266
    },
    {
        "content": "<p><code>decrease</code>, <code>GLOBAL_PANIC_COUNT</code>,<code>LOCAL_PANIC_COUNT</code> and the other members of the module are all mentioned</p>",
        "id": 266512442,
        "sender_full_name": "Meziu",
        "timestamp": 1640968312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452421\">@Meziu</span> Could you post the full disassembly of that function?</p>",
        "id": 266514322,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640970727
    },
    {
        "content": "<p>Huh, weird. Could you upload the executable somewhere so others could take a look? Note though that the executable will likely contain the full path to the rust toolchain, the executable you built and the full path to <code>~/.cargo</code> in case you don't want to leak that.</p>",
        "id": 266514396,
        "sender_full_name": "bjorn3",
        "timestamp": 1640970863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>00162ff8 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E&gt;:\n  162ff8:   e92d4ff0    push    {r4, r5, r6, r7, r8, r9, sl, fp, lr}\n  162ffc:   e24dd03c    sub sp, sp, #60 ; 0x3c\n  163000:   e59f5314    ldr r5, [pc, #788]  ; 16331c &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x324&gt;\n  163004:   e1a07003    mov r7, r3\n  163008:   e1a06002    mov r6, r2\n  16300c:   e1a08001    mov r8, r1\n  163010:   e1a0a000    mov sl, r0\n  163014:   e1954f9f    ldrex   r4, [r5]\n  163018:   e2840001    add r0, r4, #1\n  16301c:   e1851f90    strex   r1, r0, [r5]\n  163020:   e3510000    cmp r1, #0\n  163024:   1afffffa    bne 163014 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1c&gt;\n  163028:   eb00010f    bl  16346c &lt;_ZN3std9panicking11panic_count17LOCAL_PANIC_COUNT7__getit17h67982381b452f8daE.llvm.4592746386331816067&gt;\n  16302c:   e3500000    cmp r0, #0\n  163030:   1a000007    bne 163054 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x5c&gt;\n  163034:   e59f1314    ldr r1, [pc, #788]  ; 163350 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x358&gt;\n  163038:   e59f0308    ldr r0, [pc, #776]  ; 163348 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x350&gt;\n  16303c:   e59f3308    ldr r3, [pc, #776]  ; 16334c &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x354&gt;\n  163040:   e58d1000    str r1, [sp]\n  163044:   e28d2024    add r2, sp, #36 ; 0x24\n  163048:   e3a01046    mov r1, #70 ; 0x46\n  16304c:   ebff9862    bl  1491dc &lt;_ZN4core6result13unwrap_failed17h870f8ccd8aa02aecE&gt;\n  163050:   e7ffdefe    udf #65006  ; 0xfdee\n  163054:   e5901000    ldr r1, [r0]\n  163058:   e3540000    cmp r4, #0\n  16305c:   e2819001    add r9, r1, #1\n  163060:   e5809000    str r9, [r0]\n  163064:   4a000014    bmi 1630bc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0xc4&gt;\n  163068:   e3590002    cmp r9, #2\n  16306c:   8a000012    bhi 1630bc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0xc4&gt;\n  163070:   e59f02ac    ldr r0, [pc, #684]  ; 163324 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x32c&gt;\n  163074:   e28d1028    add r1, sp, #40 ; 0x28\n  163078:   e59f42a0    ldr r4, [pc, #672]  ; 163320 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x328&gt;\n  16307c:   e88100c1    stm r1, {r0, r6, r7}\n  163080:   e285600c    add r6, r5, #12\n  163084:   e1a00006    mov r0, r6\n  163088:   e58d4024    str r4, [sp, #36]   ; 0x24\n  16308c:   ebff3192    bl  12f6dc &lt;pthread_rwlock_destroy&gt;\n  163090:   e3500000    cmp r0, #0\n  163094:   0a000048    beq 1631bc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1c4&gt;\n  163098:   e350002d    cmp r0, #45 ; 0x2d\n  16309c:   0a000085    beq 1632b8 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x2c0&gt;\n  1630a0:   e350000b    cmp r0, #11\n  1630a4:   1a000047    bne 1631c8 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1d0&gt;\n  1630a8:   e59f0280    ldr r0, [pc, #640]  ; 163330 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x338&gt;\n  1630ac:   e59f2280    ldr r2, [pc, #640]  ; 163334 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x33c&gt;\n  1630b0:   e3a01024    mov r1, #36 ; 0x24\n  1630b4:   ebffffa6    bl  162f54 &lt;_ZN3std9panicking11begin_panic17h40742ce854623fc3E&gt;\n  1630b8:   e7ffdefe    udf #65006  ; 0xfdee\n  1630bc:   e3590003    cmp r9, #3\n  1630c0:   3a000014    bcc 163118 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x120&gt;\n  1630c4:   e59f0278    ldr r0, [pc, #632]  ; 163344 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x34c&gt;\n  1630c8:   e59f1250    ldr r1, [pc, #592]  ; 163320 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x328&gt;\n  1630cc:   e3a02000    mov r2, #0\n  1630d0:   e58d0024    str r0, [sp, #36]   ; 0x24\n  1630d4:   e58d1034    str r1, [sp, #52]   ; 0x34\n  1630d8:   e28d0024    add r0, sp, #36 ; 0x24\n  1630dc:   e28d1024    add r1, sp, #36 ; 0x24\n  1630e0:   e58d2038    str r2, [sp, #56]   ; 0x38\n  1630e4:   e58d2030    str r2, [sp, #48]   ; 0x30\n  1630e8:   e58d202c    str r2, [sp, #44]   ; 0x2c\n  1630ec:   e3a02001    mov r2, #1\n  1630f0:   e58d2028    str r2, [sp, #40]   ; 0x28\n  1630f4:   ebffd573    bl  1586c8 &lt;_ZN3std2io5Write9write_fmt17h213d423f6cc8735eE&gt;\n  1630f8:   e6ef0070    uxtb    r0, r0\n  1630fc:   e3500003    cmp r0, #3\n  163100:   1a00002b    bne 1631b4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1bc&gt;\n  163104:   e1a04001    mov r4, r1\n  163108:   e8910003    ldm r1, {r0, r1}\n  16310c:   e5911000    ldr r1, [r1]\n  163110:   e12fff31    blx r1\n  163114:   ea00001b    b   163188 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x190&gt;\n  163118:   e59f2200    ldr r2, [pc, #512]  ; 163320 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x328&gt;\n  16311c:   e59f0218    ldr r0, [pc, #536]  ; 16333c &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x344&gt;\n  163120:   e28dc008    add ip, sp, #8\n  163124:   e59f31f8    ldr r3, [pc, #504]  ; 163324 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x32c&gt;\n  163128:   e88c00cc    stm ip, {r2, r3, r6, r7}\n  16312c:   e3a02001    mov r2, #1\n  163130:   e58d2038    str r2, [sp, #56]   ; 0x38\n  163134:   e28d201c    add r2, sp, #28\n  163138:   e58d2034    str r2, [sp, #52]   ; 0x34\n  16313c:   e3a02000    mov r2, #0\n  163140:   e28d3020    add r3, sp, #32\n  163144:   e59f11f4    ldr r1, [pc, #500]  ; 163340 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x348&gt;\n  163148:   e58d2030    str r2, [sp, #48]   ; 0x30\n  16314c:   e58d202c    str r2, [sp, #44]   ; 0x2c\n  163150:   e3a02002    mov r2, #2\n  163154:   e8830007    stm r3, {r0, r1, r2}\n  163158:   e28d0008    add r0, sp, #8\n  16315c:   e58d001c    str r0, [sp, #28]\n  163160:   e28d0024    add r0, sp, #36 ; 0x24\n  163164:   e28d1024    add r1, sp, #36 ; 0x24\n  163168:   ebffd556    bl  1586c8 &lt;_ZN3std2io5Write9write_fmt17h213d423f6cc8735eE&gt;\n  16316c:   e6ef0070    uxtb    r0, r0\n  163170:   e3500003    cmp r0, #3\n  163174:   1a00000e    bne 1631b4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1bc&gt;\n  163178:   e1a04001    mov r4, r1\n  16317c:   e8910003    ldm r1, {r0, r1}\n  163180:   e5911000    ldr r1, [r1]\n  163184:   e12fff31    blx r1\n  163188:   e5942004    ldr r2, [r4, #4]\n  16318c:   e5921004    ldr r1, [r2, #4]\n  163190:   e3510000    cmp r1, #0\n  163194:   0a000002    beq 1631a4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1ac&gt;\n  163198:   e5940000    ldr r0, [r4]\n  16319c:   e5922008    ldr r2, [r2, #8]\n  1631a0:   ebfecd3e    bl  1166a0 &lt;__rust_dealloc&gt;\n  1631a4:   e1a00004    mov r0, r4\n  1631a8:   e3a0100c    mov r1, #12\n  1631ac:   e3a02004    mov r2, #4\n  1631b0:   ebfecd3a    bl  1166a0 &lt;__rust_dealloc&gt;\n  1631b4:   e7ffdefe    udf #65006  ; 0xfdee\n  1631b8:   e7ffdefe    udf #65006  ; 0xfdee\n  1631bc:   e5d50048    ldrb    r0, [r5, #72]   ; 0x48\n  1631c0:   e3500000    cmp r0, #0\n  1631c4:   1a000039    bne 1632b0 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x2b8&gt;\n  1631c8:   e2857044    add r7, r5, #68 ; 0x44\n  1631cc:   e1970f9f    ldrex   r0, [r7]\n  1631d0:   e2800001    add r0, r0, #1\n  1631d4:   e1871f90    strex   r1, r0, [r7]\n  1631d8:   e3510000    cmp r1, #0\n  1631dc:   1afffffa    bne 1631cc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1d4&gt;\n  1631e0:   e595b008    ldr fp, [r5, #8]\n  1631e4:   e58d6008    str r6, [sp, #8]\n  1631e8:   e35b0000    cmp fp, #0\n  1631ec:   1a000007    bne 163210 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x218&gt;\n  1631f0:   e5981010    ldr r1, [r8, #16]\n  1631f4:   e1a0000a    mov r0, sl\n  1631f8:   e12fff31    blx r1\n  1631fc:   e58d0024    str r0, [sp, #36]   ; 0x24\n  163200:   e58d1028    str r1, [sp, #40]   ; 0x28\n  163204:   e28d0024    add r0, sp, #36 ; 0x24\n  163208:   ebfffcf0    bl  1625d0 &lt;_ZN3std9panicking12default_hook17hae86c2924655bcc1E&gt;\n  16320c:   ea000009    b   163238 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x240&gt;\n  163210:   e5955004    ldr r5, [r5, #4]\n  163214:   e5981010    ldr r1, [r8, #16]\n  163218:   e1a0000a    mov r0, sl\n  16321c:   e12fff31    blx r1\n  163220:   e58d0024    str r0, [sp, #36]   ; 0x24\n  163224:   e59b2014    ldr r2, [fp, #20]\n  163228:   e58d1028    str r1, [sp, #40]   ; 0x28\n  16322c:   e28d1024    add r1, sp, #36 ; 0x24\n  163230:   e1a00005    mov r0, r5\n  163234:   e12fff32    blx r2\n  163238:   e1970f9f    ldrex   r0, [r7]\n  16323c:   e2400001    sub r0, r0, #1\n  163240:   e1871f90    strex   r1, r0, [r7]\n  163244:   e3510000    cmp r1, #0\n  163248:   1afffffa    bne 163238 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x240&gt;\n  16324c:   e1a00006    mov r0, r6\n  163250:   ebff3121    bl  12f6dc &lt;pthread_rwlock_destroy&gt;\n  163254:   e3590001    cmp r9, #1\n  163258:   9a00001b    bls 1632cc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x2d4&gt;\n  16325c:   e59f00d4    ldr r0, [pc, #212]  ; 163338 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x340&gt;\n  163260:   e3a01000    mov r1, #0\n  163264:   e58d1038    str r1, [sp, #56]   ; 0x38\n  163268:   e58d1030    str r1, [sp, #48]   ; 0x30\n  16326c:   e58d102c    str r1, [sp, #44]   ; 0x2c\n  163270:   e3a01001    mov r1, #1\n  163274:   e58d1028    str r1, [sp, #40]   ; 0x28\n  163278:   e58d0024    str r0, [sp, #36]   ; 0x24\n  16327c:   e28d0024    add r0, sp, #36 ; 0x24\n  163280:   e28d1024    add r1, sp, #36 ; 0x24\n  163284:   e58d4034    str r4, [sp, #52]   ; 0x34\n  163288:   ebffd50e    bl  1586c8 &lt;_ZN3std2io5Write9write_fmt17h213d423f6cc8735eE&gt;\n  16328c:   e58d0008    str r0, [sp, #8]\n  163290:   e6ef0070    uxtb    r0, r0\n  163294:   e3500004    cmp r0, #4\n  163298:   e58d100c    str r1, [sp, #12]\n  16329c:   0affffc4    beq 1631b4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x1bc&gt;\n  1632a0:   e28d0008    add r0, sp, #8\n  1632a4:   ebfff578    bl  16088c &lt;_ZN4core3ptr42drop_in_place$LT$std..io..error..Error$GT$17h875a5e8c62a92f5aE.llvm.4592746386331816067&gt;\n  1632a8:   e7ffdefe    udf #65006  ; 0xfdee\n  1632ac:   e7ffdefe    udf #65006  ; 0xfdee\n  1632b0:   e1a00006    mov r0, r6\n  1632b4:   ebff3108    bl  12f6dc &lt;pthread_rwlock_destroy&gt;\n  1632b8:   e59f0068    ldr r0, [pc, #104]  ; 163328 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x330&gt;\n  1632bc:   e59f2068    ldr r2, [pc, #104]  ; 16332c &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x334&gt;\n  1632c0:   e3a01029    mov r1, #41 ; 0x29\n  1632c4:   ebffff22    bl  162f54 &lt;_ZN3std9panicking11begin_panic17h40742ce854623fc3E&gt;\n  1632c8:   e7ffdefe    udf #65006  ; 0xfdee\n  1632cc:   e1a0000a    mov r0, sl\n  1632d0:   e1a01008    mov r1, r8\n</code></pre></div>",
        "id": 266514500,
        "sender_full_name": "Meziu",
        "timestamp": 1640971053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> sure, other than my weird path names, everything is uploaded on github already <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 266514566,
        "sender_full_name": "Meziu",
        "timestamp": 1640971088
    },
    {
        "content": "<p>It looks like <code>panic_count::increase</code> is inlined. Are you sure this is a debug mode build?</p>",
        "id": 266514592,
        "sender_full_name": "bjorn3",
        "timestamp": 1640971185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266514592\">said</a>:</p>\n<blockquote>\n<p>It looks like <code>panic_count::increase</code> is inlined. Are you sure this is a debug mode build?</p>\n</blockquote>\n<p>Yep, it surely is. A release build would work, funny enough, since the <code>subtraction overflow error</code> would be ignored</p>",
        "id": 266514678,
        "sender_full_name": "Meziu",
        "timestamp": 1640971302
    },
    {
        "content": "<p>Can you try adding <code>#[inline(never)]</code> to <code>fn increase</code>?</p>",
        "id": 266514750,
        "sender_full_name": "bjorn3",
        "timestamp": 1640971365
    },
    {
        "content": "<p>In particular, it looks like <code>GLOBAL_PANIC_COUNT.fetch_add</code> is getting inlined</p>",
        "id": 266514754,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640971372
    },
    {
        "content": "<p><a href=\"https://drive.google.com/file/d/12lJkRM-5NDfJAG0Nf6iyC_yNRHTEacu5/view?usp=sharing\">https://drive.google.com/file/d/12lJkRM-5NDfJAG0Nf6iyC_yNRHTEacu5/view?usp=sharing</a></p>",
        "id": 266514757,
        "sender_full_name": "Meziu",
        "timestamp": 1640971379
    },
    {
        "content": "<p>for the elf</p>",
        "id": 266514759,
        "sender_full_name": "Meziu",
        "timestamp": 1640971383
    },
    {
        "content": "<p>(the ldrex / strex loop)</p>",
        "id": 266514763,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640971393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266514750\">said</a>:</p>\n<blockquote>\n<p>Can you try adding <code>#[inline(never)]</code> to <code>fn increase</code>?</p>\n</blockquote>\n<p>I tried already, no change</p>",
        "id": 266514765,
        "sender_full_name": "Meziu",
        "timestamp": 1640971395
    },
    {
        "content": "<p>What's the exact command you're building with?</p>",
        "id": 266514829,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640971479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266514829\">said</a>:</p>\n<blockquote>\n<p>What's the exact command you're building with?</p>\n</blockquote>\n<p><code>cargo build -Z unstable-options -Z buid-std --target armv6k-nintendo-3ds -Clink-arg=-z -Clink-arg=muldefs -Clink-arg=-D__3DS__</code></p>\n<p>The link-args are needed for the toolchain libraries, I don't  know if they impact the <code>std</code> building too</p>",
        "id": 266514991,
        "sender_full_name": "Meziu",
        "timestamp": 1640971737
    },
    {
        "content": "<p>I looked at the disassembly and</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code>  <span class=\"err\">163000:</span>   <span class=\"nf\">e59f5314</span>    <span class=\"no\">ldr</span> <span class=\"no\">r5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">pc</span><span class=\"p\">,</span> <span class=\"mi\">#788</span><span class=\"p\">]</span>  <span class=\"c1\">; 16331c &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+0x324&gt;</span>\n</code></pre></div>\n<p>loads the address of <code>GLOBAL_PANIC_COUNT</code> into <code>r5</code>. And then</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code>  <span class=\"err\">163014:</span>   <span class=\"nf\">e1954f9f</span>    <span class=\"no\">ldrex</span>   <span class=\"no\">r4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">r5</span><span class=\"p\">]</span>\n  <span class=\"err\">163018:</span>   <span class=\"nf\">e2840001</span>    <span class=\"no\">add</span> <span class=\"no\">r0</span><span class=\"p\">,</span> <span class=\"no\">r4</span><span class=\"p\">,</span> <span class=\"mi\">#1</span>\n  <span class=\"err\">16301</span><span class=\"nl\">c:</span>   <span class=\"nf\">e1851f90</span>    <span class=\"no\">strex</span>   <span class=\"no\">r1</span><span class=\"p\">,</span> <span class=\"no\">r0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">r5</span><span class=\"p\">]</span>\n  <span class=\"err\">163020:</span>   <span class=\"nf\">e3510000</span>    <span class=\"no\">cmp</span> <span class=\"no\">r1</span><span class=\"p\">,</span> <span class=\"mi\">#0</span>\n  <span class=\"err\">163024:</span>   <span class=\"err\">1</span><span class=\"nf\">afffffa</span>    <span class=\"no\">bne</span> <span class=\"mh\">163014</span> <span class=\"p\">&lt;</span><span class=\"no\">_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E</span><span class=\"p\">+</span><span class=\"mi\">0x1c</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>atomically increments <code>GLOBAL_PANIC_COUNT</code> by 1.</p>",
        "id": 266515251,
        "sender_full_name": "bjorn3",
        "timestamp": 1640972122
    },
    {
        "content": "<p>The underflow is coming from LOCAL_PANIC_COUNT, right?</p>",
        "id": 266515260,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640972159
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/panicking.rs#L277\">https://github.com/rust-lang/rust/blob/master/library/std/src/panicking.rs#L277</a></p>",
        "id": 266515301,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640972173
    },
    {
        "content": "<p>Yeah the problem is from LOCAL_PANIC_COUNT, though GLOBAL_PANIC_COUNT doesn't change, in my tests, either. Neither manually checking the value in gdb nor putting an hardware watch noticed changes in GLOBAL_PANIC_COUNT</p>",
        "id": 266515325,
        "sender_full_name": "Meziu",
        "timestamp": 1640972233
    },
    {
        "content": "<p>Yeah, just wanted to check if the entirety of <code>panic_count::increase</code> was inlined and no part lost.</p>",
        "id": 266515335,
        "sender_full_name": "bjorn3",
        "timestamp": 1640972246
    },
    {
        "content": "<p>Do you have the LLVM IR for that function as well?</p>",
        "id": 266515389,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640972289
    },
    {
        "content": "<p>rust_panic_with_hook</p>",
        "id": 266515396,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640972315
    },
    {
        "content": "<p>it's the one i sent earlier. I can send it in its entirety if you want</p>",
        "id": 266515407,
        "sender_full_name": "Meziu",
        "timestamp": 1640972341
    },
    {
        "content": "<p>That would be useful. Could you send it in a gist?</p>",
        "id": 266515419,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640972376
    },
    {
        "content": "<p>Sure, brb</p>",
        "id": 266515423,
        "sender_full_name": "Meziu",
        "timestamp": 1640972396
    },
    {
        "content": "<p>Which libc do you use? The newlib libc provided by devkitARM 3DS?<br>\nEdit: just saw your libc pr. <a href=\"https://github.com/devkitPro/libctru\">https://github.com/devkitPro/libctru</a> right?</p>",
        "id": 266515618,
        "sender_full_name": "bjorn3",
        "timestamp": 1640972668
    },
    {
        "content": "<p>Never mind, libctru seems to be used in combination with devkitARM.</p>",
        "id": 266515729,
        "sender_full_name": "bjorn3",
        "timestamp": 1640972817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266515419\">said</a>:</p>\n<blockquote>\n<p>That would be useful. Could you send it in a gist?</p>\n</blockquote>\n<p><a href=\"https://gist.github.com/Meziu/c04f95f28e4a75ba1fc3c9d9d9bce0ca\">https://gist.github.com/Meziu/c04f95f28e4a75ba1fc3c9d9d9bce0ca</a></p>",
        "id": 266515876,
        "sender_full_name": "Meziu",
        "timestamp": 1640973024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266515618\">said</a>:</p>\n<blockquote>\n<p>Which libc do you use? The newlib libc provided by devkitARM 3DS?<br>\nEdit: just saw your libc pr. <a href=\"https://github.com/devkitPro/libctru\">https://github.com/devkitPro/libctru</a> right?</p>\n</blockquote>\n<p>My own fork of libc to add armv6k-horizon support: <a href=\"https://github.com/Meziu/libc\">https://github.com/Meziu/libc</a></p>",
        "id": 266515893,
        "sender_full_name": "Meziu",
        "timestamp": 1640973069
    },
    {
        "content": "<p>Libctru is what i want to <em>avoid</em> using, because of better unix compatibility among other things</p>",
        "id": 266515909,
        "sender_full_name": "Meziu",
        "timestamp": 1640973104
    },
    {
        "content": "<p>Still, I don't see how libc could be affecting this issue, but I will provide all info necessary</p>",
        "id": 266515959,
        "sender_full_name": "Meziu",
        "timestamp": 1640973130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452421\">Meziu</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266515893\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266515618\">said</a>:</p>\n<blockquote>\n<p>Which libc do you use? The newlib libc provided by devkitARM 3DS?<br>\nEdit: just saw your libc pr. <a href=\"https://github.com/devkitPro/libctru\">https://github.com/devkitPro/libctru</a> right?</p>\n</blockquote>\n<p>My own fork of libc to add armv6k-horizon support: <a href=\"https://github.com/Meziu/libc\">https://github.com/Meziu/libc</a></p>\n</blockquote>\n<p>I was actually referring to the libc implementation itself (written in C) rather than the rust bindings. This is <a href=\"https://github.com/devkitPro/newlib\">https://github.com/devkitPro/newlib</a>, right?</p>",
        "id": 266515961,
        "sender_full_name": "bjorn3",
        "timestamp": 1640973131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452421\">Meziu</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266515959\">said</a>:</p>\n<blockquote>\n<p>Still, I don't see how libc could be affecting this issue, but I will provide all info necessary</p>\n</blockquote>\n<p>libc is responsible for the tls implementation.</p>",
        "id": 266515968,
        "sender_full_name": "bjorn3",
        "timestamp": 1640973149
    },
    {
        "content": "<p>Yeah it should be there, though for the pthread tls stuff, you can look in my own version I'm using: <a href=\"https://github.com/Meziu/pthread-3ds\">https://github.com/Meziu/pthread-3ds</a></p>",
        "id": 266515985,
        "sender_full_name": "Meziu",
        "timestamp": 1640973181
    },
    {
        "content": "<p>It's still linked as a C lib</p>",
        "id": 266515992,
        "sender_full_name": "Meziu",
        "timestamp": 1640973188
    },
    {
        "content": "<p>(pthread isn't available for the target, but a working implementation of tls is possible)</p>",
        "id": 266516000,
        "sender_full_name": "Meziu",
        "timestamp": 1640973232
    },
    {
        "content": "<p>As I said, tls in both the <code>std::thread</code> and this specific case is working. As for why the function is inlined, that i don't know</p>",
        "id": 266516048,
        "sender_full_name": "Meziu",
        "timestamp": 1640973279
    },
    {
        "content": "<p>Does the crash happen in a single threaded or multi threaded program?</p>",
        "id": 266516049,
        "sender_full_name": "bjorn3",
        "timestamp": 1640973295
    },
    {
        "content": "<p>libctru calls threads, but they aren't related to the Rust <code>std</code>. In a general sense, it's a single threaded as far as the Rust runtime knows</p>",
        "id": 266516066,
        "sender_full_name": "Meziu",
        "timestamp": 1640973354
    },
    {
        "content": "<p>A nit though I doubt it is responsible for this issue is that pthread-3ds doesn't invoke the tls key destructors at the moment.</p>",
        "id": 266516136,
        "sender_full_name": "bjorn3",
        "timestamp": 1640973467
    },
    {
        "content": "<p>Oh yeah, guess you're right, though in most cases a thread key is there to stay for a long time, so memory leak is far in the horizon. Thanks for pointing it out though.</p>",
        "id": 266516198,
        "sender_full_name": "Meziu",
        "timestamp": 1640973530
    },
    {
        "content": "<p>Could you try with the following json target spec file:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"abi\"</span><span class=\"p\">:</span> <span class=\"s2\">\"eabihf\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"arch\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arm\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"cpu\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mpcore\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"data-layout\"</span><span class=\"p\">:</span> <span class=\"s2\">\"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"env\"</span><span class=\"p\">:</span> <span class=\"s2\">\"newlib\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"exe-suffix\"</span><span class=\"p\">:</span> <span class=\"s2\">\".elf\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"executables\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"features\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+vfp2\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"linker\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arm-none-eabi-gcc\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"llvm-target\"</span><span class=\"p\">:</span> <span class=\"s2\">\"armv6k-none-eabihf\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"os\"</span><span class=\"p\">:</span> <span class=\"s2\">\"horizon\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pre-link-args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"gcc\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s2\">\"-specs=3dsx.specs\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"-mtune=mpcore\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"-mfloat-abi=hard\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"-mtp=soft\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"relocation-model\"</span><span class=\"p\">:</span> <span class=\"s2\">\"static\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"target-family\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"unix\"</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"target-pointer-width\"</span><span class=\"p\">:</span> <span class=\"s2\">\"32\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"vendor\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nintendo\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"has-thread-local\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>? That is with the extra <code>\"has-thread-local\": true</code>. This should make <code>thread_local!</code> use <code>#[thread_local]</code> instead of <code>pthread_getspecific</code>.</p>",
        "id": 266516331,
        "sender_full_name": "bjorn3",
        "timestamp": 1640973675
    },
    {
        "content": "<p>Basically put that in a <code>.json</code> file and then pass the filename to <code>--target</code>.</p>",
        "id": 266516341,
        "sender_full_name": "bjorn3",
        "timestamp": 1640973695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266516341\">said</a>:</p>\n<blockquote>\n<p>Basically put that in a <code>.json</code> file and then pass the filename to <code>--target</code>.</p>\n</blockquote>\n<p>I've worked on the target spec for this target <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span><br>\nOk that I'm a noob, but I do know... something haha. Brb</p>",
        "id": 266516406,
        "sender_full_name": "Meziu",
        "timestamp": 1640973796
    },
    {
        "content": "<p>I assumed you changed the compiler itself rather than use the target spec json functionality. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 266516502,
        "sender_full_name": "bjorn3",
        "timestamp": 1640973940
    },
    {
        "content": "<p>Don't worry, I was joking. I'm just very grateful for your time spent on my issue.</p>",
        "id": 266516559,
        "sender_full_name": "Meziu",
        "timestamp": 1640973981
    },
    {
        "content": "<p>Hmm, looks like I'll have to implement some sort of <code>thread_local_dtor</code> in the <code>sys</code> module. I don't know how far I can go...</p>",
        "id": 266516812,
        "sender_full_name": "Meziu",
        "timestamp": 1640974359
    },
    {
        "content": "<p>You could stub it out for now I guess.</p>",
        "id": 266516954,
        "sender_full_name": "bjorn3",
        "timestamp": 1640974576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266516331\">said</a>:</p>\n<blockquote>\n<p>Could you try with the following json target spec file:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">\"abi\"</span><span class=\"p\">:</span> <span class=\"s2\">\"eabihf\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"arch\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arm\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"cpu\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mpcore\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"data-layout\"</span><span class=\"p\">:</span> <span class=\"s2\">\"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"env\"</span><span class=\"p\">:</span> <span class=\"s2\">\"newlib\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"exe-suffix\"</span><span class=\"p\">:</span> <span class=\"s2\">\".elf\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"executables\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"features\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+vfp2\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"linker\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arm-none-eabi-gcc\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"llvm-target\"</span><span class=\"p\">:</span> <span class=\"s2\">\"armv6k-none-eabihf\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"os\"</span><span class=\"p\">:</span> <span class=\"s2\">\"horizon\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"pre-link-args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"gcc\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s2\">\"-specs=3dsx.specs\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"-mtune=mpcore\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"-mfloat-abi=hard\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"-mtp=soft\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"relocation-model\"</span><span class=\"p\">:</span> <span class=\"s2\">\"static\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"target-family\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"unix\"</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"target-pointer-width\"</span><span class=\"p\">:</span> <span class=\"s2\">\"32\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"vendor\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nintendo\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"has-thread-local\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>? That is with the extra <code>\"has-thread-local\": true</code>. This should make <code>thread_local!</code> use <code>#[thread_local]</code> instead of <code>pthread_getspecific</code>.</p>\n</blockquote>\n<p>Nope, the function is still inlined, and it doesn't work too. Which is the weirdest part. I understand it being inlined, but it doesn't run at all, since GLOBAL_PANIC_COUNT is unchanged... I guess I could implement this parameter in my spec file though, since it's possible anyways.</p>",
        "id": 266518003,
        "sender_full_name": "Meziu",
        "timestamp": 1640976231
    },
    {
        "content": "<p>I know it doesn't run, because if I add the call to <code>panic_count::increase</code> in <code>panic_count::decrease</code>, right before the subtraction, it runs fine and everything goes well.</p>",
        "id": 266518141,
        "sender_full_name": "Meziu",
        "timestamp": 1640976473
    },
    {
        "content": "<p>Though that makes no sense, thinking about it</p>",
        "id": 266518185,
        "sender_full_name": "Meziu",
        "timestamp": 1640976486
    },
    {
        "content": "<p>I've also been working on this issue with <span class=\"user-mention\" data-user-id=\"452421\">@Meziu</span> (<a href=\"https://github.com/Meziu/rust-horizon/issues/2\">https://github.com/Meziu/rust-horizon/issues/2</a>). I just checked my release build and it does include the <code>increase</code> function:</p>\n<div class=\"codehilite\"><pre><span></span><code>(gdb) info functions\n...\nFile /home/mark/media/CLionProjects/rust-horizon/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/library/std/src/panicking.rs:\n279:    fn std::panicking::panic_count::decrease();\n266:    fn std::panicking::panic_count::increase();\n324:    fn std::panicking::panic_count::is_zero_slow_path();\n574:    fn std::panicking::rust_panic_with_hook();\n389:    fn std::panicking::try::cleanup();\n532:    static fn std::panicking::begin_panic::{closure#0}&lt;&amp;str&gt;();\n560:    static fn std::panicking::begin_panic::{impl#1}::get&lt;&amp;str&gt;();\n547:    static fn std::panicking::begin_panic::{impl#1}::take_box&lt;&amp;str&gt;();\n526:    static fn std::panicking::begin_panic&lt;&amp;str&gt;();\n183:    static fn std::panicking::default_hook();\n205:    static fn std::panicking::default_hook::{closure#1}();\n</code></pre></div>\n<p>Checking the disassembly of <code>rust_panic_with_hook</code> it does call the increase function, at least in the compiled ELF file:</p>\n<div class=\"codehilite\"><pre><span></span><code>(gdb) disassemble/s std::panicking::rust_panic_with_hook\nDump of assembler code for function _ZN3std9panicking20rust_panic_with_hook17h6cde0e001e1f79b1E:\n/home/mark/media/CLionProjects/rust-horizon/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/library/std/src/panicking.rs:\n574 fn rust_panic_with_hook(\n   0x0015bae0 &lt;+0&gt;: push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}\n   0x0015bae4 &lt;+4&gt;: sub sp, sp, #52 ; 0x34\n   0x0015bae8 &lt;+8&gt;: mov r4, r3\n   0x0015baec &lt;+12&gt;:    mov r7, r2\n   0x0015baf0 &lt;+16&gt;:    mov r8, r1\n   0x0015baf4 &lt;+20&gt;:    mov r11, r0\n\n575     payload: &amp;mut dyn BoxMeUp,\n576     message: Option&lt;&amp;fmt::Arguments&lt;&#39;_&gt;&gt;,\n577     location: &amp;Location&lt;&#39;_&gt;,\n578 ) -&gt; ! {\n579     let (must_abort, panics) = panic_count::increase();\n   0x0015baf8 &lt;+24&gt;:    bl  0x1694a4 &lt;std::panicking::panic_count::increase&gt;\n   0x0015bafc &lt;+28&gt;:    mov r6, r1\n</code></pre></div>\n<p>But once I load the ELF (Citra emulator) or 3DSX file (Citra or physical 3DS, generated via 3dsxtool: <a href=\"https://openctr.github.io/3DSX.html\">https://openctr.github.io/3DSX.html</a>) it looks very different:</p>\n<div class=\"codehilite\"><pre><span></span><code>0x144eb0 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E&gt;          push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}\n0x144eb4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+4&gt;        sub     sp, sp, #60     ; 0x3c\n0x144eb8 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+8&gt;        ldr     r5, [pc, #788]  ; 0x1451d4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+804&gt;\n0x144ebc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+12&gt;       mov     r7, r3\n0x144ec0 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+16&gt;       mov     r6, r2\n0x144ec4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+20&gt;       mov     r8, r1\n0x144ec8 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+24&gt;       mov     r10, r0\n0x144ecc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+28&gt;       ldrex   r4, [r5]\n0x144ed0 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+32&gt;       add     r0, r4, #1\n0x144ed4 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+36&gt;       strex   r1, r0, [r5]\n0x144ed8 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+40&gt;       cmp     r1, #0\n0x144edc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+44&gt;       bne     0x144ecc &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+28&gt;\n0x144ee0 &lt;_ZN3std9panicking20rust_panic_with_hook17ha2cca1609eb1f355E+48&gt;       bl      0x145324 &lt;_ZN3std9panicking11panic_count17LOCAL_PANIC_COUNT7__getit17h67982381b452f8daE.llvm.4592746386331816067&gt;\n</code></pre></div>",
        "id": 266570788,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641064255
    },
    {
        "content": "<p>Scrolling around in gdb (when running the code) I found the correct assembly at 0x15bae0, just as the ELF shows. So for some reason there's two copies of <code>rust_panic_with_hook</code> being made, and it's calling the \"wrong\" one.</p>",
        "id": 266571359,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641065256
    },
    {
        "content": "<p>Could you post the assembly of the two different copies in a gist?</p>",
        "id": 266571525,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641065476
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>But once I load the ELF (Citra emulator) or 3DSX file (Citra or physical 3DS, generated via 3dsxtool: https://openctr.github.io/3DSX.html) it looks very different:\n</code></pre></div>\n<p>Not wanting to spread chaos over the issue, but checking at my ELF file for the debug build through <code>gdb</code>  on runtime it shows me this version.</p>",
        "id": 266571528,
        "sender_full_name": "Meziu",
        "timestamp": 1641065481
    },
    {
        "content": "<p>Here's the \"correct\" function's assembly: <a href=\"https://gist.github.com/AzureMarker/c3293aab79351625acae55ef796ee4db\">https://gist.github.com/AzureMarker/c3293aab79351625acae55ef796ee4db</a><br>\nHere's the \"second\"/\"inlined\" function's assembly: <a href=\"https://gist.github.com/AzureMarker/4df0ac2d3364215002a7dd3987d24cf3\">https://gist.github.com/AzureMarker/4df0ac2d3364215002a7dd3987d24cf3</a></p>",
        "id": 266571814,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641065921
    },
    {
        "content": "<p>Here's also the backtrace during execution:</p>\n<div class=\"codehilite\"><pre><span></span><code>(gdb) where\n#0  0x00144ebc in std::panicking::rust_panic_with_hook ()\n#1  0x00115bb4 in std::panicking::begin_panic_handler::{{closure}} ()\n#2  0x00115804 in std::sys_common::backtrace::__rust_end_short_backtrace ()\n#3  0x00144c3c in rust_begin_unwind ()\n#4  0x0018c738 in core::panicking::panic_fmt () at /home/mark/media/CLionProjects/rust-horizon/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/library/core/src/panicking.rs:107\n#5  0x00100ec4 in n3ds_controller::main () at src/main.rs:24\n</code></pre></div>",
        "id": 266571827,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641065989
    },
    {
        "content": "<p>Wait, did you compile the pthreads-3ds lib against the <code>-Zbuild-std</code> libstd or the sysroot libstd?</p>",
        "id": 266572319,
        "sender_full_name": "bjorn3",
        "timestamp": 1641066743
    },
    {
        "content": "<p>I am pretty sure you will want to add <code>#![no_std]</code> to it's source.</p>",
        "id": 266572351,
        "sender_full_name": "bjorn3",
        "timestamp": 1641066810
    },
    {
        "content": "<p>It's referenced by the <code>ctru-sys</code> library as a static lib (<code>.a</code> file), which is depended on transitively (through <code>ctru-rs</code>) by the main binary.</p>",
        "id": 266572409,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641066872
    },
    {
        "content": "<p>What probably happens is that <code>libpthreads_3ds.a</code> contains a conflicting copy of libstd.</p>",
        "id": 266572415,
        "sender_full_name": "bjorn3",
        "timestamp": 1641066893
    },
    {
        "content": "<p>Is it possible to make it a regular rust dependency instead of a <code>.a</code> staticlib?</p>",
        "id": 266572447,
        "sender_full_name": "bjorn3",
        "timestamp": 1641066960
    },
    {
        "content": "<p>Yeah it does use some std stuff like BTreeMap. I tried making it a normal rust dependency, but only succeeded in transitioning a smaller fix lib: <a href=\"https://github.com/Meziu/ctru-rs/pull/5\">https://github.com/Meziu/ctru-rs/pull/5</a></p>",
        "id": 266572490,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641067003
    },
    {
        "content": "<p>This is the current status of trying to use it as a normal dependency: <a href=\"https://github.com/Meziu/ctru-rs/issues/2#issuecomment-1001216656\">https://github.com/Meziu/ctru-rs/issues/2#issuecomment-1001216656</a></p>",
        "id": 266572499,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641067037
    },
    {
        "content": "<p>It runs into this bug: <a href=\"https://github.com/rust-lang/rust/issues/47384\">https://github.com/rust-lang/rust/issues/47384</a></p>",
        "id": 266572507,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641067055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122651-general/topic/panic.20handling.20in.20new.20target/near/266572415\">said</a>:</p>\n<blockquote>\n<p>What probably happens is that <code>libpthreads_3ds.a</code> contains a conflicting copy of libstd.</p>\n</blockquote>\n<p>Hmm, I can see that happening, though it should have been compiled against a pretty similar source...</p>",
        "id": 266572552,
        "sender_full_name": "Meziu",
        "timestamp": 1641067087
    },
    {
        "content": "<p><code>BTreeMap</code> is part of liballoc.</p>",
        "id": 266572555,
        "sender_full_name": "bjorn3",
        "timestamp": 1641067095
    },
    {
        "content": "<p>Let's try making it no_std then</p>",
        "id": 266572559,
        "sender_full_name": "Meziu",
        "timestamp": 1641067104
    },
    {
        "content": "<p>It uses a BTreeMap to implement thread keys</p>",
        "id": 266572583,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641067174
    },
    {
        "content": "<p>If a different copy is getting used at all (even if the source is identical), then I think that could lead to the issue you're having</p>",
        "id": 266572737,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641067305
    },
    {
        "content": "<p>the panic starts in one copy of libstd, and increments that's copy's local panic count</p>",
        "id": 266572739,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641067314
    },
    {
        "content": "<p>the panic then gets caught (if only by the <code>catch_unwind</code> used to wrap the call to <code>main</code>) by a <em>different</em> copy of libstd, which tries to decrement <em>that</em> copy's local panic count</p>",
        "id": 266572790,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641067346
    },
    {
        "content": "<p>which will not have previously been incremented</p>",
        "id": 266572793,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641067352
    },
    {
        "content": "<p>What code is triggering the panic in the first place?</p>",
        "id": 266572818,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641067416
    },
    {
        "content": "<p><code>BTreeMap</code> can be used without libstd. You can use <code>extern crate alloc;</code> and then <code>alloc::collections::BTreeMap</code>.</p>",
        "id": 266572962,
        "sender_full_name": "bjorn3",
        "timestamp": 1641067587
    },
    {
        "content": "<p>We saw a panic during testing something else, then noticed the issue. I've just been testing with an explicit panic call.</p>",
        "id": 266573428,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641068294
    },
    {
        "content": "<p>which library did you put the panic call in?</p>",
        "id": 266573434,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641068317
    },
    {
        "content": "<p>My binary's main</p>",
        "id": 266573440,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641068335
    },
    {
        "content": "<p>Can you tell from gdb where the panic is being caught?</p>",
        "id": 266573469,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641068399
    },
    {
        "content": "<p>The original one I think was triggered by a call to std (TcpListener) when we were testing networking</p>",
        "id": 266573471,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641068401
    },
    {
        "content": "<p>I have the back trace above, but I think it's from the entry point's catch unwind</p>",
        "id": 266573520,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641068439
    },
    {
        "content": "<p>(I think there's another backtrace I could show where it calls the default hook, before unwinding, but I'm on mobile atm)</p>",
        "id": 266573544,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641068493
    },
    {
        "content": "<p>FYI I'm currently working on using the pthread-3ds fix via cargo dependency. Running into some linking issues (missing symbols) but theoretically they shouldn't be a problem. Also still running into the rust issue mentioned above (<a href=\"https://github.com/rust-lang/rust/issues/47384\">https://github.com/rust-lang/rust/issues/47384</a>), but I should be able to mitigate it as described in the issue.</p>",
        "id": 266586479,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641086260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> You were right, switching the pthread-3ds crate to a cargo dependency does fix the missing <code>increase</code> call AND the missing debug info. Thanks!</p>",
        "id": 266630496,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1641153737
    }
]