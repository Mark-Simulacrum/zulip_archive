[
    {
        "content": "<p>What is the easiest way to implement a trait for all types that have a specific function that I want to make use of inside the trait implementation?<br>\nWhat I could do is make a macro that manually generates that implementation for all types where I myself know that this type has the function I need, but is there a better way?</p>",
        "id": 256950646,
        "sender_full_name": "ruster",
        "timestamp": 1633868036
    },
    {
        "content": "<p>Have you considered a blanket implementation? see <a href=\"https://doc.rust-lang.org/book/ch10-02-traits.html\">https://doc.rust-lang.org/book/ch10-02-traits.html</a></p>",
        "id": 256950885,
        "sender_full_name": "Michael de Silva",
        "timestamp": 1633868257
    },
    {
        "content": "<p>Thanks, that might help me</p>",
        "id": 256951249,
        "sender_full_name": "ruster",
        "timestamp": 1633868626
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasLog10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">checked_log10</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">HasLog10</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">ToString</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">ToString</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm getting</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `string::ToString`\n    --&gt; library/alloc/src/string.rs:2385:1\n     |\n2370 | impl&lt;T: HasLog10&gt; ToString for T {\n     | -------------------------------- first implementation here\n...\n2385 | impl&lt;T: fmt::Display + ?Sized&gt; ToString for T {\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n</code></pre></div>\n<p>here.<br>\nHow can I solve the conflicts and overwrite the impls for T with <code>fmt::Display</code> with the impls for T with <code>HasLog10</code> in those cases?</p>",
        "id": 256952147,
        "sender_full_name": "ruster",
        "timestamp": 1633869556
    },
    {
        "content": "<p>Like, when the type to be converted to a string happens to have <code>checked_log10</code> available, I want to have a special implementation. In all other cases it's supposed to default to the other impl. How can I do that?</p>",
        "id": 256952224,
        "sender_full_name": "ruster",
        "timestamp": 1633869628
    },
    {
        "content": "<p>I think I need to make use of some specialization feature.</p>",
        "id": 256952471,
        "sender_full_name": "ruster",
        "timestamp": 1633869861
    }
]