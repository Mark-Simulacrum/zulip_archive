[
    {
        "content": "<p>I'm seeing this code in a test:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cm\">/* ... */</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"cm\">/* ... */</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I think <code>b</code> is dangling here, am I correct ?</p>",
        "id": 209329069,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1599514812
    },
    {
        "content": "<p>No, that would not compile</p>",
        "id": 209329090,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599514866
    },
    {
        "content": "<p>Isn't it like <code>CStr::new(\"some text\").as_ptr()</code> ?</p>",
        "id": 209329108,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1599514915
    },
    {
        "content": "<p>as_ptr() removes the lifetime, as it returns *const c_char. This has no such cast.</p>",
        "id": 209329155,
        "sender_full_name": "simulacrum",
        "timestamp": 1599514937
    },
    {
        "content": "<p>oh yeah, I forgot the implicit lifetime</p>",
        "id": 209329161,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1599514955
    },
    {
        "content": "<p>I shouldn't code when tired</p>",
        "id": 209329167,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1599514975
    },
    {
        "content": "<p>Note, however, that the <em>general</em> pattern might compile -- just this particular case probably does not, as Cell has UnsafeCell in it and as such should not be implicitly promoted I suspect.</p>",
        "id": 209329168,
        "sender_full_name": "simulacrum",
        "timestamp": 1599514979
    },
    {
        "content": "<p>The example I gave compiles just fine</p>",
        "id": 209329183,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1599515032
    },
    {
        "content": "<p>that should work fine, yeah</p>",
        "id": 209329224,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599515054
    },
    {
        "content": "<p>hm I would not have expected that to work, given that this does not:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209329254,
        "sender_full_name": "simulacrum",
        "timestamp": 1599515124
    },
    {
        "content": "<p>It doesn't create a static, the temporary is just made to live as long as the binding</p>",
        "id": 209329268,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599515159
    },
    {
        "content": "<p>ah, right</p>",
        "id": 209329311,
        "sender_full_name": "simulacrum",
        "timestamp": 1599515164
    },
    {
        "content": "<p>I forgot the binding influenced that (vs. just statement)</p>",
        "id": 209329318,
        "sender_full_name": "simulacrum",
        "timestamp": 1599515177
    },
    {
        "content": "<p>Well, I learned something new <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> thanks !</p>",
        "id": 209329328,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1599515211
    },
    {
        "content": "<p>Afaik</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">expr</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>gets lowered to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">_x</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>so this compiles as long as x is not moved out of the function. To do that <code>expr()</code> must get promoted to a constant, which does not work with method calls (I think <code>size_of</code> is an exception here)</p>",
        "id": 209356238,
        "sender_full_name": "lcnr",
        "timestamp": 1599552182
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md\">https://github.com/rust-lang/const-eval/blob/master/promotion.md</a></p>",
        "id": 209356298,
        "sender_full_name": "lcnr",
        "timestamp": 1599552232
    },
    {
        "content": "<p>I remember reading somewhere that temporaries created in an expression are destroyed \"at the next semicolon\". What determines which strategy it uses?</p>",
        "id": 209357328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599553020
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;doing something&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;dropping foo&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">.</span><span class=\"n\">do_something</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;done&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Prints:</span>\n<span class=\"w\">    </span><span class=\"c1\">// doing something</span>\n<span class=\"w\">    </span><span class=\"c1\">// dropping foo</span>\n<span class=\"w\">    </span><span class=\"c1\">// done</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// std::mem::drop(x); // borrowck error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209357905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599553484
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;doing something&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;dropping foo&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let x = Foo::do_something(&amp;Foo::new()); // error</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Foo</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;done&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Prints:</span>\n<span class=\"w\">    </span><span class=\"c1\">// done</span>\n<span class=\"w\">    </span><span class=\"c1\">// dropping foo</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209358152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599553657
    },
    {
        "content": "<p>Apparently storing a reference to a temporary directly to a local variable triggers promotion (not sure that's the right word, but the temp now acts as though it was declared with <code>let temp = ...; let x = &amp;temp;</code>), but passing it through a function  (even an identity function) causes it to be classified as local to the expression and promotion doesn't happen</p>",
        "id": 209358404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599553814
    },
    {
        "content": "<p>I am not sure, maybe assigning <code>&amp;expr</code> to a place adds an implicit temporary</p>",
        "id": 209359007,
        "sender_full_name": "lcnr",
        "timestamp": 1599554214
    },
    {
        "content": "<p>but promotion is not the right term here, as promotion only occurs is an expression is \"promoted\" to a constant, which is not hgappening with <code>Foo::new()</code> here. Maybe <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> can shine some more light on this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 209359187,
        "sender_full_name": "lcnr",
        "timestamp": 1599554318
    },
    {
        "content": "<p>No this is not promotion, this is what I call the \"enclosing scope\" rule: when there is an <code>&amp;expr</code> as the outermost operator in a <code>let</code>, then the temporary for <code>expr</code> gets put into the enclosing scope of this <code>let</code>, and only gets destroyed when that scope is left.</p>",
        "id": 209359437,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554474
    },
    {
        "content": "<p>This is completely orthogonal to constant promotion, which gives things the <code>'static</code> lifetime.</p>",
        "id": 209359461,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554492
    },
    {
        "content": "<p>yeah, I didn't demonstrate it but <code>let x: &amp;'static Foo = &amp;Foo::new();</code> doesn't work, so it's not promotion in the sense of constant promotion. Interestingly <code>let x: &amp;'static Foo = &amp;Foo;</code> also doesn't work so maybe I don't understand constant promotion rules</p>",
        "id": 209359465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599554494
    },
    {
        "content": "<p>maybe it's because <code>Foo</code> has a destructor</p>",
        "id": 209359482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599554510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/Is.20this.20a.20dangling.20Cell.20.3F/near/209357328\">said</a>:</p>\n<blockquote>\n<p>I remember reading somewhere that temporaries created in an expression are destroyed \"at the next semicolon\". What determines which strategy it uses?</p>\n</blockquote>\n<p>it's \"at the next semicolon, except if the enclosing scope rule applies, in which case it's at the end of that enclosing scope\".</p>",
        "id": 209359586,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554560
    },
    {
        "content": "<p>(except if promotion applies, in which case it's never...)</p>",
        "id": 209359597,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554576
    },
    {
        "content": "<p>and enclosing scope rule only applies if it has the literal form <code>let x = &amp;...</code>?</p>",
        "id": 209359610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599554589
    },
    {
        "content": "<p>the enclosing scope is a phenomenon general to <code>let</code> bindings, isn't it?</p>",
        "id": 209359630,
        "sender_full_name": "Jubilee",
        "timestamp": 1599554610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/Is.20this.20a.20dangling.20Cell.20.3F/near/209359610\">said</a>:</p>\n<blockquote>\n<p>and enclosing scope rule only applies if it has the literal form <code>let x = &amp;...</code>?</p>\n</blockquote>\n<p>I think so but... not sure</p>",
        "id": 209359633,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554612
    },
    {
        "content": "<p>I learned about this from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  and never dug deep enough to learn all the details</p>",
        "id": 209359663,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554641
    },
    {
        "content": "<p>is this not the thing where <code>let</code> implicitly creates a scope?</p>",
        "id": 209359709,
        "sender_full_name": "Jubilee",
        "timestamp": 1599554644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/122651-general/topic/Is.20this.20a.20dangling.20Cell.20.3F/near/209359709\">said</a>:</p>\n<blockquote>\n<p>is this not the thing where <code>let</code> implicitly creates a scope?</p>\n</blockquote>\n<p>maybe^^</p>",
        "id": 209359719,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554654
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nomicon/lifetimes.html?highlight=desugar#lifetimes\">https://doc.rust-lang.org/nomicon/lifetimes.html?highlight=desugar#lifetimes</a> this, ne?</p>",
        "id": 209359755,
        "sender_full_name": "Jubilee",
        "timestamp": 1599554693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307289\">Poliorcetics</span> <a href=\"#narrow/stream/122651-general/topic/Is.20this.20a.20dangling.20Cell.20.3F/near/209329108\">said</a>:</p>\n<blockquote>\n<p>Isn't it like <code>CStr::new(\"some text\").as_ptr()</code> ?</p>\n</blockquote>\n<p>this desugars to <code>&amp;(CStr::new(\"some text\")).as_ptr()</code>; notice how the <code>&amp;</code> is not on the outside, so the enclosing scope rule dos not apply</p>",
        "id": 209359775,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/122651-general/topic/Is.20this.20a.20dangling.20Cell.20.3F/near/209359755\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/nomicon/lifetimes.html?highlight=desugar#lifetimes\">https://doc.rust-lang.org/nomicon/lifetimes.html?highlight=desugar#lifetimes</a> this, ne?</p>\n</blockquote>\n<p>that looks suspiciously pre-NLL to me...</p>",
        "id": 209359812,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554749
    },
    {
        "content": "<p>I believe it is the way lifetimes desugar like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"na\">&#39;a</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"na\">&#39;b</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"na\">&#39;c</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209359817,
        "sender_full_name": "Jubilee",
        "timestamp": 1599554753
    },
    {
        "content": "<p>well yes, probably.</p>",
        "id": 209359824,
        "sender_full_name": "Jubilee",
        "timestamp": 1599554760
    },
    {
        "content": "<p>I don't think it's been _completely_ invalidated in principle, though, just complicated?</p>",
        "id": 209359881,
        "sender_full_name": "Jubilee",
        "timestamp": 1599554784
    },
    {
        "content": "<p>the fact that <code>y</code> and <code>z</code> get reordered is also odd</p>",
        "id": 209359930,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554834
    },
    {
        "content": "<p>that doesn't seem right</p>",
        "id": 209359955,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554851
    },
    {
        "content": "<p>anyway, I got to go... I don't think I can answer all the questions here, but I hope I was able to point in the right direction^^ One issue is that AFAIK the \"enclosing scope rule\" doesn't actually have a name (beyond me calling it like that) so it's rather hard to search for.</p>",
        "id": 209360048,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554899
    },
    {
        "content": "<p>another keyword to look for might be \"temporary\"; this is all about how rustc handles temporaries created by <code>&amp;expr</code> where <code>expr</code> is not a place expression (but a value expression)</p>",
        "id": 209360085,
        "sender_full_name": "RalfJ",
        "timestamp": 1599554944
    },
    {
        "content": "<p>In terms of scopes like that, the enclosing scope rule is what turns this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"na\">&#39;x</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"na\">&#39;temp</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">temp</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// temp destroyed here</span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// x destroyed here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>(which would not compile) into this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"na\">&#39;temp</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"na\">&#39;x</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">temp</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// x destroyed here</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// temp destroyed here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Note that the scopes are oppositely nested, and the destruction order is reversed</p>",
        "id": 209360210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599555012
    },
    {
        "content": "<p>My understanding is that NLL doesn't make the basic understanding of implicit scopes encircling each other completely invalid, it just lets rustc do magic tricks. <a href=\"https://www.youtube.com/watch?v=xb6rqAxkTK0\">https://www.youtube.com/watch?v=xb6rqAxkTK0</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"xb6rqAxkTK0\" href=\"https://www.youtube.com/watch?v=xb6rqAxkTK0\"><img src=\"https://i.ytimg.com/vi/xb6rqAxkTK0/default.jpg\"></a></div>",
        "id": 209360750,
        "sender_full_name": "Jubilee",
        "timestamp": 1599555405
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/reference/destructors.html#temporary-lifetime-extension\">https://doc.rust-lang.org/reference/destructors.html#temporary-lifetime-extension</a></p>",
        "id": 209386894,
        "sender_full_name": "cuviper",
        "timestamp": 1599572297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/Is.20this.20a.20dangling.20Cell.20.3F/near/209386894\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/reference/destructors.html#temporary-lifetime-extension\">https://doc.rust-lang.org/reference/destructors.html#temporary-lifetime-extension</a></p>\n</blockquote>\n<p>oh, it's in the destructor section. that is not at all where I would have expected it.<br>\nthis is observable not just through destructors but also through whether unsafe code working with pointers to temporaries is UB or not.</p>",
        "id": 209761636,
        "sender_full_name": "RalfJ",
        "timestamp": 1599818371
    }
]