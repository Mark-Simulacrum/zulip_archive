[
    {
        "content": "<p>Is there any way to expose pointers to rust data in FFI without converting my whole project to use <code>repr(C)</code> (and lose ADT magic) or making copies at the FFI boundary? How is this usually handled in big projects?</p>",
        "id": 207360864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799288
    },
    {
        "content": "<p>I guess this is an unsafe-code-guidelines question although it's pretty basic</p>",
        "id": 207360900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799356
    },
    {
        "content": "<p>You have to use <code>repr(C)</code>, yes</p>",
        "id": 207361004,
        "sender_full_name": "Lokathor",
        "timestamp": 1597799508
    },
    {
        "content": "<p>Note that you don't have to <code>repr(C)</code> <em>everything</em>, just the stuff that's exposed to FFI.</p>",
        "id": 207361049,
        "sender_full_name": "Lokathor",
        "timestamp": 1597799556
    },
    {
        "content": "<p>so do you have to roll your own ADTs then? Is there any <code>repr(C)</code> like standard for nontrivial enums</p>",
        "id": 207361052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799561
    },
    {
        "content": "<p>alternatively (and I'm sure this doesn't exist) it would be great to be able to assert that my type has a particular layout, with the understanding that rust can change the rules and I just want to know if they change rather than get UB</p>",
        "id": 207361132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799673
    },
    {
        "content": "<p>Are they <em>opaque</em> pointers? I think that's fine.</p>",
        "id": 207361154,
        "sender_full_name": "cuviper",
        "timestamp": 1597799711
    },
    {
        "content": "<p>so you mean like accessor methods for everything?</p>",
        "id": 207361158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> You'd need to make your own tagged-unions, yes.</p>",
        "id": 207361160,
        "sender_full_name": "Lokathor",
        "timestamp": 1597799737
    },
    {
        "content": "<p>There should be a crate for that :P</p>",
        "id": 207361210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799768
    },
    {
        "content": "<p>if the other side doesn't directly touch the pointer, then its layout doesn't matter</p>",
        "id": 207361215,
        "sender_full_name": "cuviper",
        "timestamp": 1597799776
    },
    {
        "content": "<p>You could do that with accessors, then cross-lang LTO to inline it all</p>",
        "id": 207361255,
        "sender_full_name": "cuviper",
        "timestamp": 1597799845
    },
    {
        "content": "<p>I'm thinking of the use case where I have a huge graph data structure, like an AST, and I don't really want to give up on ADTs but I also don't want to copy, and navigate the data structure from foreign code</p>",
        "id": 207361261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799868
    },
    {
        "content": "<p>Accessors would work for that although they would be a performance hit unless you could somehow inline them across languages</p>",
        "id": 207361317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799938
    },
    {
        "content": "<p>ah, you said that</p>",
        "id": 207361336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799979
    },
    {
        "content": "<p>I see, LTO can do this kind of thing</p>",
        "id": 207361341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597799990
    },
    {
        "content": "<p>Where's the RFC I can vote for to standardize a repr(C) tagged union</p>",
        "id": 207361444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597800115
    },
    {
        "content": "<p>\"be the change you want to see in the world\"</p>",
        "id": 207361488,
        "sender_full_name": "Lokathor",
        "timestamp": 1597800132
    },
    {
        "content": "<p>Specifically, open an MCP here: <a href=\"https://github.com/rust-lang/lang-team/issues\">https://github.com/rust-lang/lang-team/issues</a></p>",
        "id": 207361499,
        "sender_full_name": "Lokathor",
        "timestamp": 1597800159
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2195\">https://github.com/rust-lang/rfcs/pull/2195</a> (It's already implemented and stable)</p>",
        "id": 207364104,
        "sender_full_name": "isHavvy",
        "timestamp": 1597803981
    },
    {
        "content": "<p>Yeah, while setting up the MCP I tried doing some tests to see what current rust does and was surprised to find that repr(C) is completely working</p>",
        "id": 207364222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597804120
    },
    {
        "content": "<p>I'd point to the reference, but I tried adding it, got a lot of feedback my approach to documentation for it was in the wrong direction and never mustered the energy to do a second take. In the mean time, nobody else has. So if anybody wants to add those reprs to the reference, feel free to send in a PR. It's a definitely glaring hole.</p>",
        "id": 207364318,
        "sender_full_name": "isHavvy",
        "timestamp": 1597804246
    },
    {
        "content": "<p>Oh.</p>\n<p>Well, yet another reason to never trust the rust reference. you know, that one document that's supposed be authoritative. better not trust that.</p>",
        "id": 207365804,
        "sender_full_name": "Lokathor",
        "timestamp": 1597806274
    },
    {
        "content": "<p>I mean, it's not wrong, just incomplete.</p>",
        "id": 207366195,
        "sender_full_name": "isHavvy",
        "timestamp": 1597806657
    },
    {
        "content": "<p>well it covers a few cases and then goes out of the way to say that any other combination is unspecified.</p>",
        "id": 207366779,
        "sender_full_name": "Lokathor",
        "timestamp": 1597807585
    },
    {
        "content": "<p>So, since it is specified</p>",
        "id": 207366783,
        "sender_full_name": "Lokathor",
        "timestamp": 1597807596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296643\">@isHavvy</span> is there an open issue for the missing doc ? If no, do you think opening one and linking to your previous try is possible ? If yes, could you ping me on it (@poliorcetics), Iâ€™ll have a look before the week is over <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 207373285,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1597817074
    }
]