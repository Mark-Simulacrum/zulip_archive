[
    {
        "content": "<p>Hey all! I read through all discussions about stabilizing the <code>Error</code>, <code>Read</code>, and <code>Write</code> traits of <code>std::io</code> into <code>core::io</code>, and this is the last thread I found: <a href=\"https://github.com/rust-lang-nursery/portability-wg/issues/12\">https://github.com/rust-lang-nursery/portability-wg/issues/12</a><br>\nAre we all just waiting for someone to open a Pull Request? Or what is the actual blocker?</p>\n<p>Creating a generic <code>core::io::Error</code> that <code>std::io::Error</code> implements doesn't sound too difficult.<br>\nI could probably do that, but can't really believe it's that simple, after at least 5 years of discussion and 3 crates doing the same thing...</p>",
        "id": 228284042,
        "sender_full_name": "Colin Finck",
        "timestamp": 1614624169
    },
    {
        "content": "<p>same as always: core doesn't allocate.</p>",
        "id": 228301329,
        "sender_full_name": "Lokathor",
        "timestamp": 1614630846
    },
    {
        "content": "<p>i believe the error working group has some stuff in mind.</p>",
        "id": 228301401,
        "sender_full_name": "Lokathor",
        "timestamp": 1614630872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> Well, I imagine one could make <code>core::io::Error</code> a static enum with just enough options to cover <code>core::io::Read</code> and <code>core::io::Write</code>. The <code>std</code> versions could then map these error codes to their <code>std::io::Error</code> counterparts. What am I missing?</p>",
        "id": 228306760,
        "sender_full_name": "Colin Finck",
        "timestamp": 1614633107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350190\">@Colin Finck</span> does that actually help? that means <code>core::Error</code> and <code>std::Error</code> can't be used interchangeably</p>",
        "id": 228306904,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614633152
    },
    {
        "content": "<p>oh my apologies, i was thinking of std::error::Error, which is the offender here.</p>",
        "id": 228306935,
        "sender_full_name": "Lokathor",
        "timestamp": 1614633167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> I see. But then, what's the alternative?<br>\nNow that <code>std::io::Error</code> is stabilized and allocates, I don't think we can ever get a compatible error type to <code>core</code>, can we?</p>\n<p>This way, we could at least develop no_std crates against the same <code>Read</code> and <code>Write</code> traits, and easily make them std-compatible if we also stabilize the \"core-io to std-io\" conversion code.</p>",
        "id": 228308287,
        "sender_full_name": "Colin Finck",
        "timestamp": 1614633683
    }
]