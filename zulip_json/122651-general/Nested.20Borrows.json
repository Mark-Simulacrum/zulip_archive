[
    {
        "content": "<p>Is there a reason <code>A: Borrow&lt;B&gt;, B: Borrow&lt;C&gt;</code> doesn't imply <code>A: Borrow&lt;C&gt;</code>? This prevents using a <code>&amp;str</code> key for a <code>HashMap&lt;Rc&lt;String&gt;&gt;</code> and that kinda hurts :(</p>",
        "id": 263387828,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1638414042
    },
    {
        "content": "<p>I think <code>Borrow&lt;T&gt; for T</code> conflicts with such a transitive impl</p>",
        "id": 263388694,
        "sender_full_name": "cuviper",
        "timestamp": 1638415307
    },
    {
        "content": "<p>And it would also be ambiguous which <code>B</code> middleman to use</p>",
        "id": 263388740,
        "sender_full_name": "cuviper",
        "timestamp": 1638415342
    },
    {
        "content": "<p>But could you switch your map to <code>Rc&lt;str&gt;</code> keys? There's not much use in a read-only <code>String</code>.</p>",
        "id": 263388772,
        "sender_full_name": "cuviper",
        "timestamp": 1638415401
    },
    {
        "content": "<p>Yeah, definitely can do that in this case. I assumed it was an unconstrained intermediate type that can't be expressed like this</p>",
        "id": 263388834,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1638415454
    }
]