[
    {
        "content": "<p>Would it be possible for rustc to emit 32bit ELFs, but with x86_64 code?<br>\nIt would allow linking to elf32-i386, which QEMU wants for kernels passed with <code>-kernel</code> argument.</p>",
        "id": 213527720,
        "sender_full_name": "Soveu",
        "timestamp": 1602834141
    },
    {
        "content": "<p>or tell the linker to not worry about linking elf64 into elf32?</p>",
        "id": 213535080,
        "sender_full_name": "Soveu",
        "timestamp": 1602838945
    },
    {
        "content": "<p>Are you using the bzImage support, or multiboot?</p>",
        "id": 213591229,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602870019
    },
    {
        "content": "<p>In any case, it's common for an x86 kernel to contain 64-bit, 32-bit, and even 16-bit code in the same binary. I would just tell the linker to accept that.</p>",
        "id": 213591422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602870110
    },
    {
        "content": "<p>Oh, i haven't been on zulip for a while <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>The problem isn't with code inside ELFs, the problem is that compiling for 64bit targets produces ELFs with ELFCLASS64 - offsets are 64bit, so these don't match with 32bit class ELFs</p>\n<p>I'm using multiboot and currently writing a multiboot-to-longmode bootloader, since I'll need an elf loader anyways</p>\n<p>I've read somewhere, that people use <code>objcopy</code> for \"transforming\" elf32 to elf64, but i dont want to have problems with it later, especially with higher-half kernel</p>",
        "id": 215009227,
        "sender_full_name": "Soveu",
        "timestamp": 1603996266
    },
    {
        "content": "<p><a href=\"https://github.com/Soveu/osdev\">For anyone interested in code</a></p>",
        "id": 215009633,
        "sender_full_name": "Soveu",
        "timestamp": 1603996488
    }
]