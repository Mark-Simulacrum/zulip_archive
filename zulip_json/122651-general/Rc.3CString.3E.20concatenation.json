[
    {
        "content": "<p>Hey folks - I'm currently working on a blog post, and I ended up confusing myself with one of the examples I wanted to use. As far as I understand, <code>Rc&lt;T&gt;</code> should roughly behave the same as <code>T</code>, right?</p>\n<p>I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string_closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"String plus </span><span class=\"se\">\\\"</span><span class=\"s\">bar</span><span class=\"se\">\\\"</span><span class=\"s\"> is </span><span class=\"se\">\\\"</span><span class=\"s\">{}</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When I use <code>let string = Rc::new(String::from(\"foo\"));</code> for the first line, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0369</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">66</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"String plus </span><span class=\"se\">\\\"</span><span class=\"s\">bar</span><span class=\"se\">\\\"</span><span class=\"s\"> is </span><span class=\"se\">\\\"</span><span class=\"s\">{}</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                                                   </span><span class=\"o\">--------------</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"o\">-----</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                                                   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                                                   </span><span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm not sure what the right thing to do here in order to concatenate the string as usual, without needing to mess with mutability (not what I want for the example I'm writing)</p>",
        "id": 267816643,
        "sender_full_name": "Chris",
        "timestamp": 1642041500
    },
    {
        "content": "<blockquote>\n<p>As far as I understand, Rc&lt;T&gt; should roughly behave the same as T, right?</p>\n</blockquote>\n<p>Sort of. It behaves more like <code>&amp;T</code> and, even then, only in some situations.</p>",
        "id": 267821234,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642046459
    },
    {
        "content": "<p>Btw, your code doesn't match the error. In the code, <code>string</code> has type <code>String</code>, while in the error, <code>string: Rc&lt;String&gt;</code>.</p>",
        "id": 267821271,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642046516
    },
    {
        "content": "<p>I think replacing <code>string.clone()</code> with <code>string.as_ref().clone()</code> should solve your problem. This will convert <code>string</code> as follows:</p>\n<ul>\n<li><code>Rc&lt;String&gt;</code></li>\n<li><code>&amp;Rc&lt;String&gt;</code></li>\n<li><code>&amp;String</code></li>\n<li><code>String</code></li>\n</ul>",
        "id": 267821539,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642046702
    },
    {
        "content": "<p><code>string.clone()</code> by itself just makes a new <code>Rc&lt;String&gt;</code>, which is not what you want in this particular case; you need an owned <code>String</code>.</p>",
        "id": 267821558,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642046721
    },
    {
        "content": "<p>Thanks - <code>as_ref ()</code> works for the <code>Rc</code> case.<br>\n<span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/122651-general/topic/Rc.3CString.3E.20concatenation/near/267821271\">said</a>:</p>\n<blockquote>\n<p>Btw, your code doesn't match the error. In the code, <code>string</code> has type <code>String</code>, while in the error, <code>string: Rc&lt;String&gt;</code>.</p>\n</blockquote>\n<p>I mentioned that I changed the line, causing the error ;)</p>\n<blockquote>\n<p>When I use <code>let string = Rc::new(String::from(\"foo\"));</code> for the first line...</p>\n</blockquote>",
        "id": 267825919,
        "sender_full_name": "Chris",
        "timestamp": 1642051812
    },
    {
        "content": "<blockquote>\n<p>I mentioned that I changed the line, causing the error ;)</p>\n</blockquote>\n<p>Ah, I missed that part :)</p>",
        "id": 267914934,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642100582
    },
    {
        "content": "<p>I actually have another issue, in that <code>as_ref()</code> actually doesn't do what I want here, as I'd need to do <code>as_ref().clone()</code>, which allocates a new String. I'm trying to demonstrate that Rc lets you \"clone\" things without cloning the data.</p>",
        "id": 267941614,
        "sender_full_name": "Chris",
        "timestamp": 1642113517
    },
    {
        "content": "<p>Clone then deref, and don't add, just use a second format argument</p>",
        "id": 267955953,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1642123088
    },
    {
        "content": "<blockquote>\n<p>I'm trying to demonstrate that Rc lets you \"clone\" things without cloning the data.</p>\n</blockquote>\n<p>You need ownership of the left-hand string in order to concatenate it with something, so cloning an Rc is not sufficient</p>",
        "id": 267956495,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642123603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span>'s suggestion of just using another <code>format!</code> argument would be more idiomatic, but I suspect in your case you want to actually use concatenation</p>",
        "id": 267956571,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642123675
    }
]