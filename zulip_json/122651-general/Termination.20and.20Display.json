[
    {
        "content": "<p>Based on the discussion in <a href=\"https://github.com/rust-lang/rust/issues/43301\">https://github.com/rust-lang/rust/issues/43301</a>, it seems like the Termination::report implementations for Result&lt;_, T&gt; use Debug instead of Display for wider compatibility. However, Debug messages are (understandably) much less human-readable, especially with the proliferation of crates like thiserror that make it easy to create useful Display implementations. Would it be possible to change this in a non-breaking way?</p>",
        "id": 212836409,
        "sender_full_name": "leo60228",
        "timestamp": 1602255437
    },
    {
        "content": "<p>Of course, this couldn't be changed outright, but I wonder if it'd be possible to specialize on the Display trait or similar.</p>",
        "id": 212836459,
        "sender_full_name": "leo60228",
        "timestamp": 1602255468
    },
    {
        "content": "<p>compatibility? no, I'm pretty sure this is a design mistake</p>",
        "id": 212836804,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255618
    },
    {
        "content": "<p>Using specialization to fix this would unfortunately require more powerful specialization than we have today, so I don't think it's currently possible</p>",
        "id": 212836888,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255664
    },
    {
        "content": "<p>Well, for the return of main we could fix this with compiler magic, but yeah</p>",
        "id": 212836986,
        "sender_full_name": "simulacrum",
        "timestamp": 1602255718
    },
    {
        "content": "<p>True</p>",
        "id": 212837074,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255750
    },
    {
        "content": "<p>Question is whether the lang team would sign off on that, I think not</p>",
        "id": 212837141,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255787
    },
    {
        "content": "<p>I think it's not clear that debug/display <em>is</em> actually a design mistake, fwiw</p>",
        "id": 212837210,
        "sender_full_name": "simulacrum",
        "timestamp": 1602255814
    },
    {
        "content": "<p>like, certainly  for some cases, but when I hit errors I want as much info as possible (e.g., on headless servers where I can't even ssh so need maximal information in logs)</p>",
        "id": 212837326,
        "sender_full_name": "simulacrum",
        "timestamp": 1602255861
    },
    {
        "content": "<p>It's the reason I never use this language feature</p>",
        "id": 212837373,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255886
    },
    {
        "content": "<p>I can't name one off the top of my head, but I think I've seen a few cases where Debug is opaque and so Display actually has <em>more</em> information.</p>",
        "id": 212837432,
        "sender_full_name": "leo60228",
        "timestamp": 1602255910
    },
    {
        "content": "<p>I think anyhow actually works around this by forwarding Debug to Display, so I guess with that it would work</p>",
        "id": 212837436,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255911
    },
    {
        "content": "<p>Importantly Debug is not meant for user-facing output, but for developer-facing output</p>",
        "id": 212837489,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255941
    },
    {
        "content": "<p>Right, and it depends on the situation whether you are a developer seeing it or not</p>",
        "id": 212837513,
        "sender_full_name": "simulacrum",
        "timestamp": 1602255959
    },
    {
        "content": "<p>So if you write a CLI app that's supposed to be used by someone other than you, Display seems like the obvious choice</p>",
        "id": 212837565,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602255971
    },
    {
        "content": "<p>e.g. I don't really develop any applications with user-facing termination output</p>",
        "id": 212837569,
        "sender_full_name": "simulacrum",
        "timestamp": 1602255973
    },
    {
        "content": "<p>I tried prototyping this on the playground and, uh, <a href=\"/user_uploads/4715/xgFSNqFaeYDQE8ek-66uT4B_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/xgFSNqFaeYDQE8ek-66uT4B_/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/xgFSNqFaeYDQE8ek-66uT4B_/image.png\"></a></div>",
        "id": 212837770,
        "sender_full_name": "leo60228",
        "timestamp": 1602256077
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=59e3a3e7336bbf0dc5e6d2601f709be2\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=59e3a3e7336bbf0dc5e6d2601f709be2</a> This works but requires the type to implement Debug whether it implements Display or not. I'm guessing this isn't much of a problem since <code>Error: Debug</code>, and you could also argue that this is a good thing since it means we aren't committing to a specialization-based API.</p>",
        "id": 212838142,
        "sender_full_name": "leo60228",
        "timestamp": 1602256247
    },
    {
        "content": "<p>Hm, I don't think this is allowed under the always applicable rules (though this could be worked around using <code>default impl</code> once that's implemented). I'm also not sure whether or not this is <em>unsound</em>, because I don't entirely understand those rules in the first place...</p>",
        "id": 212838874,
        "sender_full_name": "leo60228",
        "timestamp": 1602256508
    },
    {
        "content": "<p>Okay, I <em>think</em> this is sound because there aren't any associated types involved. I could be completely wrong on that though, and I feel like I might be missing something.</p>",
        "id": 212839146,
        "sender_full_name": "leo60228",
        "timestamp": 1602256640
    },
    {
        "content": "<p>Does anyone here have the knowledge on specialization needed for determining whether this is sound or not?</p>",
        "id": 212840318,
        "sender_full_name": "leo60228",
        "timestamp": 1602257174
    },
    {
        "content": "<p>(Without saying that Display actually would be better) The <code>Termination</code> usage comes from the frontend, so it would be <em>possible</em> to just make <code>Termination2</code> and switch the desugaring based on edition.</p>",
        "id": 212855151,
        "sender_full_name": "scottmcm",
        "timestamp": 1602265096
    },
    {
        "content": "<p>that seemsâ€¦ ew.</p>",
        "id": 212855468,
        "sender_full_name": "nagisa",
        "timestamp": 1602265289
    },
    {
        "content": "<p>I'm much more partial to the ecosystem just deciding that Termination is not serving the purpose of being suitable for anything but toy programs and then people writing the glue that does what they need themselves when their codebases exceed whatever level of completeness at which they'd decide that it'd be worth their engineering time to do so.</p>",
        "id": 212855588,
        "sender_full_name": "nagisa",
        "timestamp": 1602265365
    },
    {
        "content": "<p>Termination seems exactly like a wrong thing for libstd to decide for general public to me. But its good enough as a convenient shortcut. And while it continues to be such a shortcut, whether it uses <code>Debug</code> or <code>Display</code> does not make much difference.</p>",
        "id": 212855790,
        "sender_full_name": "nagisa",
        "timestamp": 1602265476
    },
    {
        "content": "<p>I think that's what I'd prefer too.  It's not clear to me that \"the one true <code>Termination</code>\" can ever be good enough in <code>std</code>, so I'm fine to think of it as being more like an unwrap (thus debug) as an \"unhandled error\".</p>",
        "id": 212855800,
        "sender_full_name": "scottmcm",
        "timestamp": 1602265483
    },
    {
        "content": "<p>Hm. I do feel like <code>main()</code> being allowed to return a <code>Result</code> is a very useful feature, though I agree that a unified <code>Termination</code> trait might not be the best way to go about doing that.</p>",
        "id": 212857355,
        "sender_full_name": "leo60228",
        "timestamp": 1602266381
    },
    {
        "content": "<p>This is a very hacky prototype, though it's at least an <em>idea</em> of what might work: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ebbf690e309d3471de7ae2b947444841\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ebbf690e309d3471de7ae2b947444841</a></p>",
        "id": 212859316,
        "sender_full_name": "leo60228",
        "timestamp": 1602267517
    },
    {
        "content": "<p>At the very least, I feel like this should be changed in some way. In my opinion, being able to have Termination use Display, no matter what mechanism leads to this, would instantly make it much more useful.</p>",
        "id": 212859514,
        "sender_full_name": "leo60228",
        "timestamp": 1602267608
    },
    {
        "content": "<p>I think the problem here isn't necessarily the <code>Termination</code> trait, but that right now <code>Termination</code> and <code>Try</code> are unstable, so people can't make their own.  If we could have crates explore things like <code>fn main() -&gt; MyCoolNewErrorReporting {</code> that interoperated with <code>?</code>, then people could just pick their reporting choices.</p>\n<p>Of course, at that point it can also just be <code>main!</code> macros, so maybe that's not all that useful either...</p>",
        "id": 212861123,
        "sender_full_name": "scottmcm",
        "timestamp": 1602268528
    },
    {
        "content": "<p>My prototype for a customizable Termination feels worse the more I think about it. While I do agree that Termination can't ever be one-size-fits-all, I do feel like changing it in the next edition to use Display would instantly increase its utility by quite a wide magnitude.</p>",
        "id": 212861730,
        "sender_full_name": "leo60228",
        "timestamp": 1602268901
    },
    {
        "content": "<p>It's currently useful for toy projects and servers with no form of error reporting other than logs. Changing it to Display would slightly hurt the server usecase, but would make it much more useful for CLI apps. I feel like CLI apps make up a much wider amount of use than that small subset of servers.</p>",
        "id": 212862037,
        "sender_full_name": "leo60228",
        "timestamp": 1602269077
    },
    {
        "content": "<p>I feel like this change shouldn't require an edition, but it's not possible with min_specialization, and it isn't easy to find a sound way to do that.</p>",
        "id": 212862075,
        "sender_full_name": "leo60228",
        "timestamp": 1602269108
    },
    {
        "content": "<p>One of the reasons that Termination (intentionally, TTBOMK) uses Debug is that some crates' Error types print source/context backtraces on Debug but not on Display.</p>",
        "id": 212867870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602272782
    },
    {
        "content": "<p>That isn't the behavior I'd expect from those crates. I'd expect Debug to give a literal description of the error value (something like <code>Error { code: 5, backtrace: [Frame, Frame, Frame]}</code>) while Display would give an error message to be displayed to a user (which would include a backtrace, possibly depending on something like RUST_LIB_BACKTRACE=1).</p>",
        "id": 212868102,
        "sender_full_name": "leo60228",
        "timestamp": 1602272944
    },
    {
        "content": "<p>Also, it seems straightforward to create a wrapper type whose Debug shows anything you like, including the Display impl.</p>",
        "id": 212868222,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602273015
    },
    {
        "content": "<p>I did think of that, but at that point I don't really see a compelling benefit over a proc macro.</p>",
        "id": 212868261,
        "sender_full_name": "leo60228",
        "timestamp": 1602273050
    }
]