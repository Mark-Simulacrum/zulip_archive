[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> a crazy request: replace <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> with const fn.</p>",
        "id": 175853627,
        "sender_full_name": "nagisa",
        "timestamp": 1568668671
    },
    {
        "content": "<p>/me thinks… we would need to reimplement gcc in const-fn-rust.</p>",
        "id": 175853850,
        "sender_full_name": "nagisa",
        "timestamp": 1568668877
    },
    {
        "content": "<p>have fun implementing gcc without using conditionals :D</p>",
        "id": 175853926,
        "sender_full_name": "RalfJ",
        "timestamp": 1568668924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> well the context is <a href=\"https://www.youtube.com/watch?v=wkXNm_qo8aY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wkXNm_qo8aY\">https://www.youtube.com/watch?v=wkXNm_qo8aY</a> which I watched mostly because I like oli’s way of saying things.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wkXNm_qo8aY\" href=\"https://www.youtube.com/watch?v=wkXNm_qo8aY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=wkXNm_qo8aY\"><img src=\"https://i.ytimg.com/vi/wkXNm_qo8aY/default.jpg\"></a></div>",
        "id": 175853972,
        "sender_full_name": "nagisa",
        "timestamp": 1568668970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> also inline assembly replaced by a const fn would be dope :D</p>",
        "id": 175853998,
        "sender_full_name": "nagisa",
        "timestamp": 1568668995
    },
    {
        "content": "<p>I just searched for RustConf 2019 talks earlier today and couldnt find any... odd^^</p>",
        "id": 175854111,
        "sender_full_name": "RalfJ",
        "timestamp": 1568669064
    },
    {
        "content": "<p>Specifically Oli said y'all are working on it and was looking for things that we want to work.</p>",
        "id": 175854120,
        "sender_full_name": "nagisa",
        "timestamp": 1568669076
    },
    {
        "content": "<p>ah, published today. well then.^^</p>",
        "id": 175854130,
        "sender_full_name": "RalfJ",
        "timestamp": 1568669088
    },
    {
        "content": "<p>the talk recordings were only posted today, lol</p>",
        "id": 175854135,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1568669093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  throw up an issue in <a href=\"https://github.com/rust-lang/rust/issues/57563\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57563\">https://github.com/rust-lang/rust/issues/57563</a> or something</p>",
        "id": 175855490,
        "sender_full_name": "centril",
        "timestamp": 1568670140
    },
    {
        "content": "<blockquote>\n<p>gcc without using conditionals</p>\n</blockquote>\n<p>This is the True Deterministic Build</p>",
        "id": 175868054,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1568683149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> cool talk</p>",
        "id": 175890900,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568713786
    },
    {
        "content": "<p>thx</p>",
        "id": 175891011,
        "sender_full_name": "oli",
        "timestamp": 1568713878
    },
    {
        "content": "<p>it was a lot of fun to hold</p>",
        "id": 175891024,
        "sender_full_name": "oli",
        "timestamp": 1568713891
    },
    {
        "content": "<p>Just watched it last night. Compile time serde is a really neat idea!</p>",
        "id": 175891214,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568714085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I have a small prototype of packed_simd that uses the new <code>repr(simd) [T; N]</code>, but needs to use <code>-Zunleash-the-miri-inside-of-you</code> :/</p>",
        "id": 175894738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568717759
    },
    {
        "content": "<p>the feature is quite fun to play with</p>",
        "id": 175894821,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568717845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> what's the blocker for you? loops or conditionals?</p>",
        "id": 175898500,
        "sender_full_name": "oli",
        "timestamp": 1568721462
    },
    {
        "content": "<p>generics</p>",
        "id": 175898518,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721472
    },
    {
        "content": "<p>I want to be able to write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">SomeTrait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>:<span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">splat</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">SomeTrait</span>::<span class=\"n\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 175898590,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721530
    },
    {
        "content": "<p>that just needs <code>#![feature(const_fn)]</code></p>",
        "id": 175898591,
        "sender_full_name": "oli",
        "timestamp": 1568721533
    },
    {
        "content": "<p>oh</p>",
        "id": 175898611,
        "sender_full_name": "oli",
        "timestamp": 1568721561
    },
    {
        "content": "<p>wait that works!?!?</p>",
        "id": 175898613,
        "sender_full_name": "oli",
        "timestamp": 1568721566
    },
    {
        "content": "<p>No it doesn't</p>",
        "id": 175898616,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721572
    },
    {
        "content": "<p>That's commented out for me right now</p>",
        "id": 175898629,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721584
    },
    {
        "content": "<p>\"works\" with <code>-Zunleash-the-miri-inside-of-you</code>?</p>",
        "id": 175898631,
        "sender_full_name": "oli",
        "timestamp": 1568721585
    },
    {
        "content": "<p>it shouldn't</p>",
        "id": 175898634,
        "sender_full_name": "oli",
        "timestamp": 1568721590
    },
    {
        "content": "<p>you need <a href=\"https://github.com/rust-lang/rfcs/pull/2632\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2632\">https://github.com/rust-lang/rfcs/pull/2632</a> for that</p>",
        "id": 175898721,
        "sender_full_name": "oli",
        "timestamp": 1568721617
    },
    {
        "content": "<p>I tried using an associated <code>const MAP: fn(Self::Input) -&gt; Self</code></p>",
        "id": 175898728,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721627
    },
    {
        "content": "<p>that won't work either <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 175898732,
        "sender_full_name": "oli",
        "timestamp": 1568721636
    },
    {
        "content": "<p>to do pointer dispatch</p>",
        "id": 175898734,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721636
    },
    {
        "content": "<p>but it did not work</p>",
        "id": 175898742,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721641
    },
    {
        "content": "<p>yeah</p>",
        "id": 175898745,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721646
    },
    {
        "content": "<p>wait... that may work</p>",
        "id": 175898749,
        "sender_full_name": "oli",
        "timestamp": 1568721652
    },
    {
        "content": "<p>it did not work for me</p>",
        "id": 175898757,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721661
    },
    {
        "content": "<p>is the function you turn into a function pointer a <code>const fn</code>?</p>",
        "id": 175898759,
        "sender_full_name": "oli",
        "timestamp": 1568721664
    },
    {
        "content": "<p>yes, but I couldn't specify it in the trait as <code>const MAP: const fn(...)</code></p>",
        "id": 175898773,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721684
    },
    {
        "content": "<p>that's irrelevant I thought</p>",
        "id": 175898782,
        "sender_full_name": "oli",
        "timestamp": 1568721693
    },
    {
        "content": "<p>what's the error you're getting</p>",
        "id": 175898784,
        "sender_full_name": "oli",
        "timestamp": 1568721698
    },
    {
        "content": "<p>let me uncomment that and try</p>",
        "id": 175898796,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721706
    },
    {
        "content": "<p>let's move this to another stream, and I have a pizza in the oven</p>",
        "id": 175898818,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568721716
    },
    {
        "content": "<p>as long as the function is defined as <code>const fn</code>, <code>-Zunleash-the-miri-inside-of-you</code> should work</p>",
        "id": 175898825,
        "sender_full_name": "oli",
        "timestamp": 1568721721
    },
    {
        "content": "<p>yea, function pointers work: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f80d7c63f2cf2b91106a91860e80d219\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f80d7c63f2cf2b91106a91860e80d219\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f80d7c63f2cf2b91106a91860e80d219</a></p>",
        "id": 175899338,
        "sender_full_name": "oli",
        "timestamp": 1568722233
    },
    {
        "content": "<p>I love that I can test this on stable :D</p>",
        "id": 175899346,
        "sender_full_name": "oli",
        "timestamp": 1568722258
    },
    {
        "content": "<blockquote>\n<p>I love that I can test this on stable :D</p>\n</blockquote>\n<p>that's the <code>fib</code> thing from your talk, right? Isn't it a bug that we even attempt to compute this?^^</p>",
        "id": 175985875,
        "sender_full_name": "RalfJ",
        "timestamp": 1568798377
    },
    {
        "content": "<p>don't mess with my pretties</p>",
        "id": 175987311,
        "sender_full_name": "oli",
        "timestamp": 1568799415
    },
    {
        "content": "<p>but yes it's a bug</p>",
        "id": 175987338,
        "sender_full_name": "oli",
        "timestamp": 1568799437
    },
    {
        "content": "<p>though I'm not sure how fixable... something something typeck queries</p>",
        "id": 175987373,
        "sender_full_name": "oli",
        "timestamp": 1568799475
    },
    {
        "content": "<p>more to the wishlist, I needed a <code>is_const_eval</code> intrinsic for packed_simd</p>",
        "id": 176303208,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569145243
    },
    {
        "content": "<p>depending on the target we might want to dispatch to a dynamically-linked libmvec, and each libmvec has different symbol / function names</p>",
        "id": 176304635,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569147903
    },
    {
        "content": "<p>as well as precision, etc.</p>",
        "id": 176304641,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569147928
    },
    {
        "content": "<p>we also have lots of workarounds for llvm codegen bugs, that call different llvm.intrinsics instead of portable rustc intrinsics</p>",
        "id": 176304690,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569147977
    },
    {
        "content": "<p>on the different architectures</p>",
        "id": 176304693,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569147993
    },
    {
        "content": "<p>in constant evaluation none of that makes sense doing</p>",
        "id": 176304696,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569148009
    },
    {
        "content": "<p>i want const SIMD filling</p>",
        "id": 176324339,
        "sender_full_name": "Lokathor",
        "timestamp": 1569182821
    },
    {
        "content": "<p>I don't need the evaluation const, but i want to be able to declare PIx4 as a 128 bit const for example</p>",
        "id": 176324345,
        "sender_full_name": "Lokathor",
        "timestamp": 1569182848
    },
    {
        "content": "<p>You can already do that</p>",
        "id": 176342624,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218773
    },
    {
        "content": "<p>example code?</p>",
        "id": 176529824,
        "sender_full_name": "Lokathor",
        "timestamp": 1569381113
    },
    {
        "content": "<p>You can use an union</p>",
        "id": 176537346,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569393103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> this works on stable: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2743cb6a0f85f4992975eab5bffedc64\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2743cb6a0f85f4992975eab5bffedc64\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2743cb6a0f85f4992975eab5bffedc64</a></p>",
        "id": 176568589,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569420924
    },
    {
        "content": "<p>That's extremely sub-optimal</p>",
        "id": 176580961,
        "sender_full_name": "Lokathor",
        "timestamp": 1569428220
    },
    {
        "content": "<p>I agree that it works, but it's not fit for using in  a lib that you want end users to use</p>",
        "id": 176580994,
        "sender_full_name": "Lokathor",
        "timestamp": 1569428249
    },
    {
        "content": "<p>you can write a macro that does that</p>",
        "id": 176581861,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569428820
    },
    {
        "content": "<p>does your lib return <code>core::arch</code> types and does it require your users to put those in <code>const</code>s ?</p>",
        "id": 176582187,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569429015
    },
    {
        "content": "<p>I'd like to have <code>pub const Name: Newtype Wrapper = (whatever);</code></p>",
        "id": 176582930,
        "sender_full_name": "Lokathor",
        "timestamp": 1569429557
    },
    {
        "content": "<p>i guess it works out, i can just put the newtype into the union too</p>",
        "id": 176582994,
        "sender_full_name": "Lokathor",
        "timestamp": 1569429604
    },
    {
        "content": "<p>what's \"whatever\" ?</p>",
        "id": 176589223,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569433715
    },
    {
        "content": "<p>(is kind of important)</p>",
        "id": 176589237,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569433730
    },
    {
        "content": "<p>If you want something like <code>NewtypeWrapper::new(...)</code> in the rhs, then I don't think there is a way to do that</p>",
        "id": 176591752,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569435255
    },
    {
        "content": "<p>on stable at least</p>",
        "id": 176591767,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569435265
    },
    {
        "content": "<p>on nightly it is easy if you enable unions in const fn</p>",
        "id": 176591777,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569435272
    },
    {
        "content": "<p>on stable the only workaround is a macro</p>",
        "id": 176591799,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569435287
    },
    {
        "content": "<p>yeah it's a <code>new</code> method call, but using unions that call can be made const</p>",
        "id": 176608695,
        "sender_full_name": "Lokathor",
        "timestamp": 1569448432
    },
    {
        "content": "<p>oh wait, it can't be a const fn with the union trick, i see now what you mean.</p>\n<p>drat.</p>",
        "id": 177304806,
        "sender_full_name": "Lokathor",
        "timestamp": 1570154625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <code>const fn OsStr::new</code>!</p>",
        "id": 180688265,
        "sender_full_name": "nagisa",
        "timestamp": 1573691109
    },
    {
        "content": "<p>That requires <a href=\"https://github.com/rust-lang/rfcs/pull/2632\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2632\">https://github.com/rust-lang/rfcs/pull/2632</a> because <code>OsStr::new</code> has trait bounds</p>",
        "id": 180725211,
        "sender_full_name": "oli",
        "timestamp": 1573734206
    },
    {
        "content": "<p><code>core::mem::zeroed</code>, did we say that one yet?</p>\n<p>I hope you're keeping track of all these in an issue or something oli ;3</p>",
        "id": 180803435,
        "sender_full_name": "Lokathor",
        "timestamp": 1573794941
    },
    {
        "content": "<blockquote>\n<p>Thinking of other deprecated functions, will <code>thread::sleep</code> be const? :-)</p>\n<p>nah, it won't do a thing</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> why wouldn't it? Or do you just mean you'd deliberately make it so that it was a no-op?</p>",
        "id": 180876141,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1573854912
    },
    {
        "content": "<p>I expect defining 'time' as a thing in const fn is awkward</p>",
        "id": 180876449,
        "sender_full_name": "simulacrum",
        "timestamp": 1573855168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> building a model of concurrency compatible with deterministic execution is going to be a fun project <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 180878884,
        "sender_full_name": "centril",
        "timestamp": 1573857229
    },
    {
        "content": "<blockquote>\n<p><code>core::mem::zeroed</code>, did we say that one yet?</p>\n<p>I hope you're keeping track of all these in an issue or something oli ;3</p>\n</blockquote>\n<p>we have an issue or at least discussions specifically about <code>zeroed</code> somewhere</p>",
        "id": 180904795,
        "sender_full_name": "RalfJ",
        "timestamp": 1573896226
    },
    {
        "content": "<p>doing this \"right\" is blocked on <code>&amp;mut</code>-in-const</p>",
        "id": 180904827,
        "sender_full_name": "RalfJ",
        "timestamp": 1573896243
    },
    {
        "content": "<p>Is Vec::push possible at the moment?</p>",
        "id": 181210924,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1574259737
    },
    {
        "content": "<p>I believe no -- we need memory allocation</p>",
        "id": 181210961,
        "sender_full_name": "simulacrum",
        "timestamp": 1574259766
    },
    {
        "content": "<p>ArrayVec::push might be though</p>",
        "id": 181210970,
        "sender_full_name": "simulacrum",
        "timestamp": 1574259772
    },
    {
        "content": "<p>(modulo lack of <code>&amp;mut</code>)</p>",
        "id": 181210983,
        "sender_full_name": "simulacrum",
        "timestamp": 1574259785
    },
    {
        "content": "<p>In theory, <em>could</em> we support Vec::push?</p>",
        "id": 181211011,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1574259807
    },
    {
        "content": "<p>For that matter, would filling in a constant hash table be possible?</p>",
        "id": 181211030,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1574259822
    },
    {
        "content": "<p>I believe both are definitely possible (or so I understood in discussions with Centril)</p>",
        "id": 181211598,
        "sender_full_name": "simulacrum",
        "timestamp": 1574260117
    },
    {
        "content": "<p>See discussions in <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval</a> and <a href=\"https://github.com/rust-lang/const-eval/issues/20\" target=\"_blank\" title=\"https://github.com/rust-lang/const-eval/issues/20\">https://github.com/rust-lang/const-eval/issues/20</a></p>",
        "id": 181211908,
        "sender_full_name": "centril",
        "timestamp": 1574260309
    },
    {
        "content": "<p>it's a mess... <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 181211984,
        "sender_full_name": "centril",
        "timestamp": 1574260327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>’s talk linked at the beginning in this thread outlines a possible path forward for const-fn-izing functions that would otherwise require heap</p>",
        "id": 181216098,
        "sender_full_name": "nagisa",
        "timestamp": 1574262914
    },
    {
        "content": "<p>a lot happened since that talk ;) it wasn't that easy</p>",
        "id": 181217017,
        "sender_full_name": "centril",
        "timestamp": 1574263281
    },
    {
        "content": "<p>for monomorphic constants it's still that easy</p>",
        "id": 181218089,
        "sender_full_name": "oli",
        "timestamp": 1574264017
    },
    {
        "content": "<p>for anything else we can require users to use a special allocator</p>",
        "id": 181218115,
        "sender_full_name": "oli",
        "timestamp": 1574264039
    },
    {
        "content": "<p>well the whole <code>const(heap) fn</code> stuff...</p>",
        "id": 181219305,
        "sender_full_name": "centril",
        "timestamp": 1574264737
    }
]