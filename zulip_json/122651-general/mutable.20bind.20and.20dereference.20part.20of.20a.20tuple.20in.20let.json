[
    {
        "content": "<p>Hi! Is it possible to create a mutable binding to and simultaneously dereference part of a tuple in a let statement?<br>\nLike <code>let (mut &amp;last, rest): (usize, &amp;[usize]) = (&amp;0, &amp;[0, 0])</code> but actually working. The error in this case is:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: `mut` must be attached to each individual binding\n  --&gt; src/example.rs:15:10\n   |\n15 |     let (mut &amp;last, rest) = (&amp;0, &amp;[0, 0]);\n   |          ^^^^^^^^^ help: add `mut` to each binding: `&amp;mut last`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n</code></pre></div>\n<p>Either mutably bind the variable <code>let (mut last, rest) = …</code> or dereferencing <code>let (&amp;last, rest) = …</code> is possible, but can I do both in a single let statement?</p>\n<p>Of course it's not a problem to split this into two lines (<code>let mut last = last</code>), but I'd like to know whether it's in fact not possible or it's just me not discovering how to do it.</p>\n<p>Thanks!</p>",
        "id": 220045640,
        "sender_full_name": "Thomas Bahn",
        "timestamp": 1608067933
    },
    {
        "content": "<p>I think <code>let (&amp;(mut last), rest)</code> will work</p>",
        "id": 220045786,
        "sender_full_name": "cuviper",
        "timestamp": 1608067993
    },
    {
        "content": "<p><del>I think it has to be <code>let &amp;(mut last, ref rest)</code> instead right?</del> Oh nvm, I misread something</p>",
        "id": 220046072,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1608068145
    },
    {
        "content": "<p>Oh, this in fact does, thanks! I tried <code>let (mut (&amp;last), rest)</code> and <code>let (mut &amp;last, rest)</code> and <code>let (mut last @ &amp;_, rest)</code> but didn't think of reversing <code>mut</code> and <code>&amp;</code> in the pattern..</p>",
        "id": 220046289,
        "sender_full_name": "Thomas Bahn",
        "timestamp": 1608068271
    },
    {
        "content": "<p>right, the <code>mut</code> has to be directly on the binding name, and it needs parentheses to avoid parsing as <code>&amp;mut</code></p>",
        "id": 220046573,
        "sender_full_name": "cuviper",
        "timestamp": 1608068407
    },
    {
        "content": "<p>Now with your help I also understand the error message. I wasn't able to find a solution to \"<code>mut</code> must be attached to each individual binding\" but it's just about using parentheses to group it for the &amp; pattern, preventing it being parsed as <code>&amp;mut</code>.</p>",
        "id": 220047038,
        "sender_full_name": "Thomas Bahn",
        "timestamp": 1608068702
    },
    {
        "content": "<p>it's not helpful that it <em>suggested</em> the invalid <code>&amp;mut last</code> though -- we should get that to add parentheses too</p>",
        "id": 220050964,
        "sender_full_name": "cuviper",
        "timestamp": 1608070675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317596\">@Thomas Bahn</span> would you care to see if there's an open issue, and/or file one?</p>",
        "id": 220051167,
        "sender_full_name": "cuviper",
        "timestamp": 1608070774
    },
    {
        "content": "<p>I'll do that! My first contribution to rustc, despite being a small one :)</p>",
        "id": 220051761,
        "sender_full_name": "Thomas Bahn",
        "timestamp": 1608071095
    },
    {
        "content": "<p>The issue is open now: <a href=\"https://github.com/rust-lang/rust/issues/80186\">https://github.com/rust-lang/rust/issues/80186</a></p>",
        "id": 220466433,
        "sender_full_name": "Thomas Bahn",
        "timestamp": 1608378289
    },
    {
        "content": "<p>I found a solution and opened a PR: <a href=\"https://github.com/rust-lang/rust/pull/80205\">https://github.com/rust-lang/rust/pull/80205</a><br>\nIt was interesting and easier than I thought to locate the responsible code. I guess it was a good first issue :)</p>",
        "id": 220492119,
        "sender_full_name": "Thomas Bahn",
        "timestamp": 1608419217
    }
]