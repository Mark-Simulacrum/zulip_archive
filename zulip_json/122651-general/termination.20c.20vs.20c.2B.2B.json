[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> do you have a link to the differences in whether termination is an effect in C but not in C++ ? AFAIK it is also an effect in C++. At least a <code>pure</code>+<code>noreturn</code> function seems to be UB in both: <a href=\"https://gcc.godbolt.org/z/scPU2t\" target=\"_blank\" title=\"https://gcc.godbolt.org/z/scPU2t\">https://gcc.godbolt.org/z/scPU2t</a></p>",
        "id": 158049029,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549906905
    },
    {
        "content": "<p>well, non-termination is an effect in C, but not C++</p>",
        "id": 158049130,
        "sender_full_name": "nagisa",
        "timestamp": 1549907009
    },
    {
        "content": "<p>specifically because C++ allows optimising out empty loops, but not C.</p>",
        "id": 158049136,
        "sender_full_name": "nagisa",
        "timestamp": 1549907025
    },
    {
        "content": "<p>Did I write it wrong on the issue again?</p>",
        "id": 158049143,
        "sender_full_name": "nagisa",
        "timestamp": 1549907040
    },
    {
        "content": "<p>nah, it seems like whatever I wrote is right, given the ccontext.</p>",
        "id": 158049262,
        "sender_full_name": "nagisa",
        "timestamp": 1549907127
    },
    {
        "content": "<p>ah yes, that's correct</p>",
        "id": 158049809,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907566
    },
    {
        "content": "<p>LLVM is broken in that it treats C and Rust as C++</p>",
        "id": 158049819,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907578
    },
    {
        "content": "<p>I somehow read it the other way around</p>",
        "id": 158049844,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> i think that's only for for loops</p>",
        "id": 158049938,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907680
    },
    {
        "content": "<p>as in, in C++ infinite loops are UB, in C they are not, but the implementation can assume that they terminate</p>",
        "id": 158049984,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907717
    },
    {
        "content": "<p>In C <code>while(x)</code> is required to be considered a side-effect as long as <code>x</code> is constant-ish</p>",
        "id": 158049986,
        "sender_full_name": "nagisa",
        "timestamp": 1549907720
    },
    {
        "content": "<p>that is in C empty loops can be removed</p>",
        "id": 158050009,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907741
    },
    {
        "content": "<p>but if it is not [constant], it is fine if it is not considered as such [side-effect].</p>",
        "id": 158050011,
        "sender_full_name": "nagisa",
        "timestamp": 1549907744
    },
    {
        "content": "<p><code>while(x) { }</code> where <code>x</code> is not a constant expression can be assumed to terminate</p>",
        "id": 158050078,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907794
    },
    {
        "content": "<p>That’s what I said <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 158050118,
        "sender_full_name": "nagisa",
        "timestamp": 1549907834
    },
    {
        "content": "<p>this is different from it being undefined behavior</p>",
        "id": 158050120,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907838
    },
    {
        "content": "<p>which is what you meant, yes</p>",
        "id": 158050125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> so I guess the infinite loop example is ok for both C and C++</p>",
        "id": 158050179,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907882
    },
    {
        "content": "<p>in C++, it is UB, so anything is allowed</p>",
        "id": 158050212,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907890
    },
    {
        "content": "<p>in C, it can be assumed to terminate, but the function is <code>noreturn</code></p>",
        "id": 158050218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907901
    },
    {
        "content": "<p>so that would mean that it would return, which would be undefined behavior for a <code>noreturn</code> function</p>",
        "id": 158050228,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907918
    },
    {
        "content": "<p>side-effect and terminate are two distinct things.</p>",
        "id": 158050234,
        "sender_full_name": "nagisa",
        "timestamp": 1549907934
    },
    {
        "content": "<p>termination is a side-effect, but not the other way around.</p>",
        "id": 158050264,
        "sender_full_name": "nagisa",
        "timestamp": 1549907956
    },
    {
        "content": "<p>the function <code>foo</code> is <code>noreturn,pure</code>, that is, it is not allowed to return, and it is not allowed to have side-effects</p>",
        "id": 158050278,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549907983
    },
    {
        "content": "<p>right, and therefore <code>pure</code> function must not have an infinite loop in it.</p>",
        "id": 158050351,
        "sender_full_name": "nagisa",
        "timestamp": 1549908012
    },
    {
        "content": "<p>the question is whether calling it is always UB</p>",
        "id": 158050356,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908018
    },
    {
        "content": "<p>in both C and C++</p>",
        "id": 158050358,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908022
    },
    {
        "content": "<p>ah no, only in C</p>",
        "id": 158050376,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908047
    },
    {
        "content": "<p>My initial reaction is that it is, but I haven’t thought much about it. It applies to both C and C++.</p>",
        "id": 158050396,
        "sender_full_name": "nagisa",
        "timestamp": 1549908061
    },
    {
        "content": "<p>C++ has a <code>[[noreturn]]</code> attribute which means what you’d expect. And implementing such function requires a side-effect AFAICT.</p>",
        "id": 158050433,
        "sender_full_name": "nagisa",
        "timestamp": 1549908102
    },
    {
        "content": "<p>note that you don't have to use <code>while(x) {}</code>, one can also use <code>for(;;)</code> which in C has no effects AFAICT</p>",
        "id": 158050437,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908108
    },
    {
        "content": "<p>basically the question is: can a function be <code>noreturn</code> and also have no side-effects?</p>",
        "id": 158050511,
        "sender_full_name": "nagisa",
        "timestamp": 1549908168
    },
    {
        "content": "<p>to which my answer is \"probably no, but I haven’t thought about it that much to tell for sure”</p>",
        "id": 158050522,
        "sender_full_name": "nagisa",
        "timestamp": 1549908184
    },
    {
        "content": "<p>so what could such a function do? it could loop forever in C, but if it does that without side-effects, the compiler can remove the loop</p>",
        "id": 158050542,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908215
    },
    {
        "content": "<p>which would make it try to return, which would be UB</p>",
        "id": 158050549,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908229
    },
    {
        "content": "<p>it has to do something that does not return, even in the absence of side-effects</p>",
        "id": 158050601,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908250
    },
    {
        "content": "<p>I don't think that's possible in C (either you do something that has side-effects, or the function will return_</p>",
        "id": 158050614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549908274
    },
    {
        "content": "<p>right.</p>",
        "id": 158050618,
        "sender_full_name": "nagisa",
        "timestamp": 1549908286
    },
    {
        "content": "<p>I can't tell if this helps, but you can do local side effects while still being pure (see: Haskell, for example). The following is a program without UB in C++:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">do_no_effect</span><span class=\"p\">()</span> <span class=\"p\">[[</span><span class=\"n\">noreturn</span><span class=\"p\">]]</span> <span class=\"n\">__attribute</span><span class=\"p\">((</span><span class=\"k\">const</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"k\">volatile</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 158052325,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549909835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> non-escaping “side-effects” are permitted by the LLVM’s definition of \"const\" and \"pure\", not sure about C/C++/gcc, though.</p>",
        "id": 158052597,
        "sender_full_name": "nagisa",
        "timestamp": 1549910058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> they must be</p>",
        "id": 158052687,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549910142
    },
    {
        "content": "<p>The reason that __attribute((const)) and __attribute((pure)) exist is to allow the implementation to remove function calls</p>",
        "id": 158052750,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549910165
    },
    {
        "content": "<p>removing a function call which doesn't change global state in any way is totally reasonable</p>",
        "id": 158052775,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549910185
    },
    {
        "content": "<p>hmm...</p>",
        "id": 158052814,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549910235
    },
    {
        "content": "<p>no, I see what you're saying</p>",
        "id": 158052821,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549910241
    },
    {
        "content": "<p>I just genuinely don’t know to claim either way. I just know that LLVM specifically is just fine with that.</p>",
        "id": 158053024,
        "sender_full_name": "nagisa",
        "timestamp": 1549910389
    },
    {
        "content": "<p>i've posted a summary comment<br>\n<a href=\"https://github.com/rust-lang/rust/pull/58327#discussion_r\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58327#discussion_r\">https://github.com/rust-lang/rust/pull/58327#discussion_r</a></p>",
        "id": 158053401,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549910668
    },
    {
        "content": "<p>i'm not sure about the last part</p>",
        "id": 158053449,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549910722
    },
    {
        "content": "<p>whether abort, etc. are side-effects, but I think so</p>",
        "id": 158053455,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549910732
    },
    {
        "content": "<p><code>abort</code> is definitely considered to be a global side-effect.</p>",
        "id": 158053523,
        "sender_full_name": "nagisa",
        "timestamp": 1549910782
    },
    {
        "content": "<p><a href=\"https://twitter.com/GyrosGeier/status/1095037097533153280?s=19\" target=\"_blank\" title=\"https://twitter.com/GyrosGeier/status/1095037097533153280?s=19\">https://twitter.com/GyrosGeier/status/1095037097533153280?s=19</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/GyrosGeier/status/1095037097533153280?s=19\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/639998450/04545d6_normal.jpg\"></a><p><a href=\"https://twitter.com/ubsanitizer\" target=\"_blank\" title=\"https://twitter.com/ubsanitizer\">@ubsanitizer</a> My interpretation would be similar to #84210. Essentially, not UB, but no valid use case exists either.</p><span>- Simon Richter (@GyrosGeier)</span></div></div>",
        "id": 158059400,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549914852
    },
    {
        "content": "<blockquote>\n<p>can be assumed to terminate [...] this is different from it being undefined behavior</p>\n</blockquote>\n<p>I don't see the difference. \"x is UB\" is exactly the same statement as \"x can be assumed not to happen\"</p>",
        "id": 158063400,
        "sender_full_name": "RalfJ",
        "timestamp": 1549917679
    },
    {
        "content": "<p>so, \"can be assumed to terminate\" = \"non-termination is UB\"</p>",
        "id": 158063419,
        "sender_full_name": "RalfJ",
        "timestamp": 1549917688
    },
    {
        "content": "<p>This is the reading of the C++ standards committee</p>",
        "id": 158064390,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1549918425
    }
]