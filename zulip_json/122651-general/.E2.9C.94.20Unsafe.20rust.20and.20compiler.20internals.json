[
    {
        "content": "<p>I was hoping to get a pointer to any internal compiler documentation that clearly lists out the safety checks that are not enforced in unsafe code. The goal here is to guide a coding standard for Rust usage and the standard should look at unsafe Rust usage. I know the 'nomicon exists but I previously gotten the impression that it was not complete.</p>",
        "id": 276346669,
        "sender_full_name": "Tim Reed",
        "timestamp": 1648047831
    },
    {
        "content": "<p>I think defining that list is still a wip. I think the discussions is at <a href=\"https://github.com/rust-lang/unsafe-code-guidelines\">https://github.com/rust-lang/unsafe-code-guidelines</a></p>",
        "id": 276347095,
        "sender_full_name": "Eh2406",
        "timestamp": 1648047979
    },
    {
        "content": "<p>If you're asking for the specific restrictions that are lifted in unsafe, I believe the 5 listed <a href=\"https://doc.rust-lang.org/nightly/reference/unsafety.html\">here</a> are complete.</p>",
        "id": 276347915,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648048284
    },
    {
        "content": "<p>yep, that's the list basically</p>",
        "id": 276348140,
        "sender_full_name": "Lokathor",
        "timestamp": 1648048356
    },
    {
        "content": "<p>Thank you! This is great.</p>",
        "id": 276352688,
        "sender_full_name": "Tim Reed",
        "timestamp": 1648050143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488218\">Tim Reed</span> has marked this topic as resolved.</p>",
        "id": 276352963,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648050245
    },
    {
        "content": "<p>I believe that in the near future this list will need to be expanded to account for <a href=\"https://github.com/rust-lang/rust/issues/27060\">https://github.com/rust-lang/rust/issues/27060</a> , yes?</p>",
        "id": 276354006,
        "sender_full_name": "bstrie",
        "timestamp": 1648050654
    },
    {
        "content": "<p>even unsafe code can't take a reference to a mis-aligned field of a packed struct, it would be instant-UB. You'd have to use addr_of</p>",
        "id": 276359506,
        "sender_full_name": "Lokathor",
        "timestamp": 1648052381
    },
    {
        "content": "<p>That the compiler lets you do it in safe code today is just a bug</p>",
        "id": 276359556,
        "sender_full_name": "Lokathor",
        "timestamp": 1648052400
    },
    {
        "content": "<p>If the \"fix\" involves letting unsafe code take the reference and then letting stuff blow up in your face if you dynamically did it wrong that's probably a very bad design for the fix. You should really just use addr_of</p>",
        "id": 276359879,
        "sender_full_name": "Lokathor",
        "timestamp": 1648052512
    }
]