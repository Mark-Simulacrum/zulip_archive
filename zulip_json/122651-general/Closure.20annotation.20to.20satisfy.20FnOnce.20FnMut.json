[
    {
        "content": "<p>I'm a beginner and confused why this seemingly-unrelated annotation fixes this <code>FnOnce</code> compilation error.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sum_of_multiples</span><span class=\"p\">(</span><span class=\"n\">limit</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">factors</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Fails to compile:</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">is_multiple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">factors</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Fixed with annotation:</span>\n<span class=\"w\">    </span><span class=\"c1\">// let is_multiple = |x: &amp;u32| factors.iter().any(|y| x % y == 0);</span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..=</span><span class=\"n\">limit</span><span class=\"p\">).</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_multiple</span><span class=\"p\">).</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>3  |       let is_multiple = |x| factors.iter().any(|y| x % y == 0);\n   |                         --------------------------------------\n   |                         |\n   |                         doesn&#39;t satisfy `&lt;_ as FnOnce&lt;(&amp;u32,)&gt;&gt;::Output = bool`\n   |                         doesn&#39;t satisfy `_: FnMut&lt;(&amp;u32,)&gt;`\n</code></pre></div>\n<p>Still not sure what that annotation has to do with satisfying <code>FnOnce</code> / <code>FnMut</code>. Read though both these sections again too:<br>\n<a href=\"https://doc.rust-lang.org/rust-by-example/fn/closures/input_parameters.html?highlight=fnonce#as-input-parameters\">https://doc.rust-lang.org/rust-by-example/fn/closures/input_parameters.html?highlight=fnonce#as-input-parameters</a><br>\n<a href=\"https://doc.rust-lang.org/book/ch13-01-closures.html#capturing-the-environment-with-closures\">https://doc.rust-lang.org/book/ch13-01-closures.html#capturing-the-environment-with-closures</a></p>\n<p>Guessing I should be more focused on the <code>&amp;u32</code> part of the errors, rather than the <code>FnOnce</code> part.</p>",
        "id": 240264316,
        "sender_full_name": "miles",
        "timestamp": 1621986382
    },
    {
        "content": "<p>The syntax <code>x % y</code> desugars to <code>x.mod(y)</code>, and if the only way you use a variable is to call a method on it rust usually can't infer the type. I'm not sure to what extent rust can infer the type in the closure from the trait bound in <code>filter()</code></p>",
        "id": 240264633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621986673
    },
    {
        "content": "<p>Note that rust <em>can</em> infer the type if you inline <code>is_multiple</code>, which makes me think it has something to do with the lifetime arguments, since they are generalized differently for standalone closures compared to direct function arguments</p>",
        "id": 240264865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621986870
    },
    {
        "content": "<p>If you can inline a closure, it's far better to do so.</p>",
        "id": 240265552,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621987568
    },
    {
        "content": "<p>The compiler plays tricks when a closure is passed to the usage site and can more strongly perform type inference.</p>",
        "id": 240265574,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621987601
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/41078\">https://github.com/rust-lang/rust/issues/41078</a></p>",
        "id": 240265600,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621987640
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/36415348/155423\">https://stackoverflow.com/q/36415348/155423</a></p>",
        "id": 240265617,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621987669
    },
    {
        "content": "<p>Inlining the closures helps cut down on type annotations. Now I'm confused about how these are the same:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">limit</span><span class=\"p\">).</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">factors</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">d</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)).</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">limit</span><span class=\"p\">).</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">factors</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">d</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\">  </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)).</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm guessing this is due to auto-dereferencing. Not sure why dereferencing is mandatory for <code>*d != 0</code>, but optional for <code>*x % *d</code>.</p>",
        "id": 240273294,
        "sender_full_name": "miles",
        "timestamp": 1621996327
    },
    {
        "content": "<p>operator type matching seems to be more stringent than that of the corresponding trait</p>",
        "id": 240274150,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621997408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263479\">@miles</span> It's not autodereferencing, <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#impl-Rem%3C%26%27_%20u32%3E-1\"><code>&amp;u32</code> implements <code>Rem&lt;&amp;u32&gt;</code></a></p>",
        "id": 240275235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621998933
    },
    {
        "content": "<p>the arithmetic binary operator implementations have a <code>forward_ref_binop!</code> macro that i haven't been able to find yet</p>",
        "id": 240275319,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1621999081
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/src/core/internal_macros.rs.html#28\">https://doc.rust-lang.org/src/core/internal_macros.rs.html#28</a></p>",
        "id": 240275378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621999156
    },
    {
        "content": "<p>Is it possible to use the <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.rem\">.rem()</a> method directly?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>:<span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">rem</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Why doesn't this work?</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Would it be better zulip etiquette for me to create a new topic? Seems like this question is still somewhat related to the thread's existing discussion.</p>",
        "id": 240277228,
        "sender_full_name": "miles",
        "timestamp": 1622001668
    },
    {
        "content": "<p>It's a trait function so you need the trait in scope with <code>use std::ops::Rem;</code></p>",
        "id": 240277298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622001749
    },
    {
        "content": "<p>alternatively you can not import it but use <code>std::ops::Rem::rem(&amp;x, &amp;4)</code> instead</p>",
        "id": 240277339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622001823
    },
    {
        "content": "<p><code>(&amp;&amp;&amp;1u32).add(1u32)</code> works, presumably due to auto-deref</p>",
        "id": 240277347,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1622001841
    },
    {
        "content": "<p>but <code>Add::add(&amp;&amp;&amp;1u32, 1u32)</code> doesn't, because that bypasses method receiver coercion</p>",
        "id": 240277421,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1622001923
    }
]