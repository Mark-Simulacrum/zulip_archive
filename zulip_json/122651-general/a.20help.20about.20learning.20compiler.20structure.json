[
    {
        "content": "<p>Hi guys, sorry I guess I should not ask this question here but  I am a little confused about compiler structure, I decided to work on rust compiler since the last 2 months ago to make a contribution to open source and also learn how we write a compiler from scratch.<br>\nI could fix two issues (of course by asking for help not just by myself), then I decided to work on an issue that is related to parser about giving better diagnostics on some cases, and then I started it by debugging but I could not get success, because some tests fail, so I decided to read the lexer and parser codes from scratch and see what happens when we execute any program and see what is the path, but now I am a little hopeless that I can't do it, because I feel I am lost between many functions that each one calls many other functions and I can't understand completely what happens in each phase, so I wanted to ask you guys that do you think it is better that I first create a compiler by myself and then return back to working on rust,<br>\nor my current approach is correct?</p>",
        "id": 217017571,
        "sender_full_name": "hossein dindar",
        "timestamp": 1605627033
    },
    {
        "content": "<p>You don't need to create your own compiler from scratch just to understand how compilers work. That's certainly an approach, and it could be fun, but it's not the only way to learn compilers.</p>",
        "id": 217030648,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605632249
    },
    {
        "content": "<p>I would tend to suggest a more incremental approach, given what you're trying to do. If you'd like to learn how rust handles diagnostics and suggestions, you might look at an existing code suggestion for bad code, and see how rust generates that. In particular, look at the mechanisms for marking spans and similar.</p>",
        "id": 217030823,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605632321
    },
    {
        "content": "<p>You could also try experiments within the rust compiler, such as giving out a random suggestion within a bit of existing code, just to confirm that you know how that infrastructure works.</p>",
        "id": 217030958,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605632392
    },
    {
        "content": "<p>yeah I agree, it is a good approach, thanks for your suggestion <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 217031675,
        "sender_full_name": "hossein dindar",
        "timestamp": 1605632706
    },
    {
        "content": "<p>I don't want to discourage the \"experiment to learn\" approach that you started down; I would just highly recommend more incremental experiments with quick results each time.</p>",
        "id": 217039187,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605636083
    },
    {
        "content": "<p>Josh, I also think thatâ€™s a great approach and want to thank you for sharing.</p>",
        "id": 217040121,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1605636450
    }
]