[
    {
        "content": "<p>Hey!<br>\nI just wanted to ask a math/optimization question for anyone familiar with math optimization. I need to compute log_8 of an integer very fast, currently i convert to float then do the log and convert back.  However, llvm doesn't seem to turn this into anything special, so i'd rather not go through the entire logf function. I tried searching but i could not find anything on optimizing log_8 into something else, does anyone know if there is a way to rewrite log_8 so it does not need an entire float pipeline?</p>",
        "id": 272013645,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644948135
    },
    {
        "content": "<p>Maybe something along the lines of <code>T::bits() - val.leading_zeros() - 3</code>? I don't know if it is correct though.</p>",
        "id": 272014017,
        "sender_full_name": "bjorn3",
        "timestamp": 1644948277
    },
    {
        "content": "<p>For context, i am trying to figure out if an insertion into a sparse voxel octree requires an octree resize (i.e. incrementing the depth of the octree), the octree level needed for an axis length can be computed as <code>log_8(length)</code>, since the inverse is used for computing max axis length from octree depth (<code>8^(octree_depth)</code>)</p>",
        "id": 272014145,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644948325
    },
    {
        "content": "<p>You mean as in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">leading_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>?<br>\nif so, that does not seem to work, <code>512</code> yields <code>487</code>, but it should instead yield 3</p>",
        "id": 272014396,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644948425
    },
    {
        "content": "<p>Hmm i could probably just precompute the values for <code>0..OCTREE_DEPTH</code> then do a range check in a loop</p>",
        "id": 272014567,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644948496
    },
    {
        "content": "<p><code>log_8(u64::MAX)</code> is 21.3. You could probably list the points where it changes and do (binary) search pretty quickly.</p>",
        "id": 272014680,
        "sender_full_name": "Eh2406",
        "timestamp": 1644948562
    },
    {
        "content": "<p>my octree has a max depth of 8 currently, though usually i choose 6 (encoded in a <code>OCTREE_DEPTH</code> const), so yeah i could probably just binary search an array very quickly</p>",
        "id": 272014829,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644948616
    },
    {
        "content": "<p><code>(u32::BITS - a.leading_zeros() - 1) / 3</code></p>",
        "id": 272016388,
        "sender_full_name": "tm",
        "timestamp": 1644949314
    },
    {
        "content": "<p>try <code>(1u64.leading_bits() - v.leading_bits()) / 3</code></p>",
        "id": 272016521,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644949365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/122651-general/topic/fast.20integer.20log_8/near/272016521\">said</a>:</p>\n<blockquote>\n<p>try <code>(1u64.leading_bits() - v.leading_bits()) / 3</code></p>\n</blockquote>\n<p>This seems to yield zero</p>",
        "id": 272016771,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644949485
    },
    {
        "content": "<p>though i did leading_ones since leading_bits isn't a thing, do you mean leading_zeros?</p>",
        "id": 272016840,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644949510
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">log_8</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"k\">u32</span><span class=\"p\">.</span><span class=\"n\">leading_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">leading_zeros</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Seems to work in the one thing i tried, lemme see if it works in all cases</p>",
        "id": 272017020,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644949574
    },
    {
        "content": "<p>Hmm nope, it fails for <code>16</code></p>",
        "id": 272017234,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644949673
    },
    {
        "content": "<p>it yields 1 instead of 2</p>",
        "id": 272017334,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644949705
    },
    {
        "content": "<p>It calculates <code>floor(log8(x))</code>, are you looking for <code>ceil(log8(x))</code>?</p>",
        "id": 272017457,
        "sender_full_name": "tm",
        "timestamp": 1644949756
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2021&amp;gist=e56da8b79b7021bd235e9c9b4ef5bbe0\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2021&amp;gist=e56da8b79b7021bd235e9c9b4ef5bbe0</a></p>",
        "id": 272017521,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644949793
    },
    {
        "content": "<p>Or what is the float-based function you're trying to optimize?</p>",
        "id": 272017613,
        "sender_full_name": "Eh2406",
        "timestamp": 1644949826
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">depth_required_for_coordinate</span><span class=\"p\">(</span><span class=\"n\">coordinate</span>: <span class=\"nc\">Vec3</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">coordinate</span><span class=\"p\">.</span><span class=\"n\">max_element</span><span class=\"p\">().</span><span class=\"n\">ceil</span><span class=\"p\">().</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mf\">8.0</span><span class=\"p\">).</span><span class=\"n\">ceil</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272017686,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1644949860
    }
]