[
    {
        "content": "<p>Does anyone know if there is work on allowing generic associated constants? <br>\nI want to do something like this <br>\ntrait AbelianGroup {<br>\n    const IDENTITY;<br>\n} <br>\nand not specify what type IDENTITY is until the trait is implemented.</p>",
        "id": 238103676,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1620634944
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AbelianGroup</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IDENTITY</span>: <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This seems to compile on the Playground.</p>",
        "id": 238104141,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620635108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400735\">Pointerbender</span> <a href=\"#narrow/stream/122651-general/topic/Generic.20associated.20constants/near/238104141\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AbelianGroup</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IDENTITY</span>: <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This seems to compile on the Playground.</p>\n</blockquote>\n<p>But isn't it then possible to implement it on the same type several times with different parameters T?</p>",
        "id": 238104461,
        "sender_full_name": "Oliver E. Anderson",
        "timestamp": 1620635267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390743\">@Oliver E. Anderson</span>  indeed. If you want to limit it to one trait <code>impl</code> per type, then you can add an associated type like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AbelianGroup</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Type</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IDENTITY</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Type</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238105075,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620635563
    },
    {
        "content": "<p>Does it work to just use <code>const IDENTITY: Self;</code>?</p>",
        "id": 238164061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620661388
    }
]