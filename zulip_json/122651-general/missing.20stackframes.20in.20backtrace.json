[
    {
        "content": "<p>I'm having the following problem: in my backtrace dump (from backtrace-rs crate), certain frames that I expect to be present are not. Is it possible that opt-level 3 is optimizing certain functions away ?</p>",
        "id": 197152535,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207071
    },
    {
        "content": "<p>What if you set <code>[profile.release] debug = 2</code> in your <code>Cargo.toml</code>?</p>",
        "id": 197152760,
        "sender_full_name": "Laurențiu",
        "timestamp": 1589207177
    },
    {
        "content": "<p>Why profile.release? I'm currently trying:</p>\n<div class=\"codehilite\"><pre><span></span><code>[profile.dev]\nlto = false\nopt-level = 2\n\n[profile.test]\nlto = false\nopt-level = 2\n\n[profile.dev.overrides.&quot;*&quot;]\nlto = false\nopt-level = 2\n</code></pre></div>",
        "id": 197152905,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207248
    },
    {
        "content": "<p>(btw, on opt-level = 3, even the CodeLLDB debugger doesn't get the stack frame either, which makes me suspect it being inlined / optimized away.)</p>",
        "id": 197153040,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207292
    },
    {
        "content": "<p>(ps2: opt-level = 3 + #[inline(never)] ==&gt; stackframe still missing)</p>",
        "id": 197153083,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207314
    },
    {
        "content": "<p>opt-level = 2 ==&gt; missing some stackframe<br>\nopt-level = 0 ==&gt; all stackframes<br>\ntrying opt-level = 1 next</p>",
        "id": 197153261,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207397
    },
    {
        "content": "<p>Ah, never mind if you're not building with <code>--release</code></p>",
        "id": 197153360,
        "sender_full_name": "Laurențiu",
        "timestamp": 1589207429
    },
    {
        "content": "<p>It's running <code>cargo test --package .... </code></p>",
        "id": 197153447,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207466
    },
    {
        "content": "<p>The <code>test</code> profile already has <code>debug = 2</code></p>",
        "id": 197153541,
        "sender_full_name": "Laurențiu",
        "timestamp": 1589207517
    },
    {
        "content": "<p>opt-level = 3, 2, 1 =&gt; missing some stackframe<br>\nopt-level = 0 =&gt; all stackframes</p>",
        "id": 197153624,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207545
    },
    {
        "content": "<p>This is annoying, as I'm writing numerical code, and I want some optimization ; but I'm also doing tdd, so I want all my stackframes.</p>",
        "id": 197153668,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589207569
    },
    {
        "content": "<p>Your tests rely on knowing stackframes?</p>",
        "id": 197154442,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589207905
    },
    {
        "content": "<p>Even</p>\n<div class=\"codehilite\"><pre><span></span><code>[profile.dev]\nlto = false\nopt-level = 2\ndebuginfo=2\ndebug-assertions=true\nforce-frame-pointers = true\nforce-unwind-tables = true\n\n[profile.test]\nlto = false\nopt-level = 2\ndebuginfo=2\ndebug-assertions=true\nforce-frame-pointers = true\nforce-unwind-tables = true\n\n[profile.dev.overrides.&quot;*&quot;]\nlto = false\nopt-level = 2\ndebuginfo=2\ndebug-assertions=true\nforce-frame-pointers = true\nforce-unwind-tables = true\n</code></pre></div>\n\n\n<p>doesn't work</p>",
        "id": 197155827,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589208495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> : My code has lots of \"todo!()\"'s -- when a unit test fails, I'd like to be able to see the entire callstack. Currently some of the frames are being optimized away when opt-level &gt; 0.</p>",
        "id": 197155948,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589208546
    },
    {
        "content": "<p>Can't you just set <code>opt-level = 0</code> for tests and leave everything else alone?</p>",
        "id": 197156034,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589208588
    },
    {
        "content": "<p>There alot of code that operates on tensors of f32's. The tests run really really slow at opt-level = 0.</p>",
        "id": 197156187,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589208636
    },
    {
        "content": "<p>Unless there's a flag to avoid inlining, that sounds like your only option.</p>",
        "id": 197156399,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589208718
    },
    {
        "content": "<p>I've already tried #[inline(never)] and #[no_mangle].</p>",
        "id": 197156514,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589208752
    },
    {
        "content": "<p>Optimizations generally reduce the quality of stack traces</p>",
        "id": 197156702,
        "sender_full_name": "Laurențiu",
        "timestamp": 1589208835
    },
    {
        "content": "<p>I'm going to throw in the towel now. This was an interesting excuse to study rustc compiler flags. Thanks to everyone for patience / ideas / suggestions.</p>",
        "id": 197157174,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589209007
    },
    {
        "content": "<p>Could the missing stack frames have tail calls? (a call just before returning from a function without any destructors running afterwards) In that case LLVM likely replaced the call with a jump, which means that there is no way to recover the original call frame.</p>",
        "id": 197164272,
        "sender_full_name": "bjorn3",
        "timestamp": 1589211744
    },
    {
        "content": "<p>JIC, you can do <code>todo!(\"thing 1\")</code> instead of just <code>todo!()</code>. That text is printed out when triggered</p>",
        "id": 197170939,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589214588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> : I have no idea how you guessed this -- but it often is of the form:</p>\n<div class=\"codehilite\"><pre><span></span><code>panic!()\ntodo!()\nreturn Err(...)\n</code></pre></div>\n\n\n<p>and the last statement/expr in a function (if not directly, then the last in that particular match branch)[</p>",
        "id": 197174446,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1589216226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299970\">@zeroexcuses</span> Rust used to hide all libstd internal stack frames at the end of the backtrace. This unfortunately broke because LLVM decided to tail call from the function that indicated the start of the libstd internal stack frames (<code>__rust_begin_short_backtrace</code>) to the function it called. This meant that <code>__rust_begin_short_backtrace</code> wouldn't be part of the backtrace anymore. I remembered this problem, and thought that your problem may have been similar.</p>",
        "id": 197176630,
        "sender_full_name": "bjorn3",
        "timestamp": 1589217311
    }
]