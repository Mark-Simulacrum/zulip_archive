[
    {
        "content": "<p>So, introductions of a sort: I'm the dev lead at Microsoft for a team whose sole focus is enabling Rust development in Windows and Azure.  Compile times are one of our biggest blockers for major adoption.  Which is why I'm so interested in parallel builds right now.</p>",
        "id": 217944835,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606341985
    },
    {
        "content": "<p>In addition to being a Cargo team member and language team co-lead, I'm now the founder of a company making compile times faster for everyone. Nice to meet you. :)</p>",
        "id": 217944892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342049
    },
    {
        "content": "<p>Nice!  We'll probably have some design work in Cargo to share with you, in the coming months. Integrating stuff into the Windows build system has...  unique challenges.</p>",
        "id": 217944966,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342103
    },
    {
        "content": "<p>I'm looking forward to hearing about that.</p>",
        "id": 217944983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342115
    },
    {
        "content": "<p>What <em>is</em> the primary Windows build system these days?</p>",
        "id": 217944999,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342128
    },
    {
        "content": "<p>Er, one moment first.</p>",
        "id": 217945007,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342134
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/Making.20Symbol.20more.20efficient.3A.20PR.20feedback.3F\">#t-compiler &gt; Making Symbol more efficient: PR feedback?</a> by <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span></p>",
        "id": 217945094,
        "sender_full_name": "Notification Bot",
        "timestamp": 1606342181
    },
    {
        "content": "<p>OK, I split this branch of the discussion to avoid derailing your PR discussion thread.</p>",
        "id": 217945150,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342204
    },
    {
        "content": "<p>We just call it <code>build.exe</code>. It's the same <code>build.exe</code> that we publish with the Windows SDK / DDK (back when there was a DDK).  Maybe we don't publish it any more.  It is...  not a good build system.  I've actually designed a better build system, which was part of an internal project, and which morphed into what we called Domino. It's public name is BuildXL.</p>",
        "id": 217945239,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342235
    },
    {
        "content": "<p><code>build.exe</code> is mainly a scheduling front-end for <code>nmake.exe</code>. Again, these are not systems that I would recommend to _anyone_ these days, but we're stuck with it for a variety of reasons.</p>",
        "id": 217945325,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342274
    },
    {
        "content": "<p>I've seen buildxl.</p>",
        "id": 217945343,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342281
    },
    {
        "content": "<p>I can think of a few potential issues integrating Cargo into build.exe / nmake. What are you running into?</p>",
        "id": 217945456,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342349
    },
    {
        "content": "<p>Our main constraints involving Rust / Cargo are around supply chain security (binary provenance, not reaching out to the Internet for crate source, etc.).  That, and how to schedule Cargo in the middle of a much larger build schedule.</p>",
        "id": 217945488,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342377
    },
    {
        "content": "<p>We have an internal mirror of <a href=\"http://crates.io\">crates.io</a>, which solves some problems, but not all.</p>",
        "id": 217945516,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342405
    },
    {
        "content": "<p>Taking those one at a time...</p>",
        "id": 217945643,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342483
    },
    {
        "content": "<p>The other problems are in how to identify crates in our ecosystem, not just in <a href=\"http://crates.io\">crates.io</a>. The Windows codebase is spread among a number of Git repos, these days.  Most of it is in one massive mega-repo (the largest Git repo in existence, I think), plus a bunch of other repos.  So we need ways to say \"I need to refer to crate blar_blar from internal repo $REPO with credentials $C\", and things like that.  Some of that maps to existing Cargo concepts, some doesn't.</p>",
        "id": 217945674,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342508
    },
    {
        "content": "<p>If you use a monorepo, could you vendor all the crates into your repository, and then use <code>--offline --frozen</code>?</p>",
        "id": 217945698,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342522
    },
    {
        "content": "<p>(racing, there; interesting that it isn't <em>completely</em> a monorepo...)</p>",
        "id": 217945733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342548
    },
    {
        "content": "<p>Credentials <em>can</em> be handled out-of-band so you don't have to check them into the repository, if that helps.</p>",
        "id": 217945818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342588
    },
    {
        "content": "<p>Or you can refer to things by path, and/or use submodules.</p>",
        "id": 217945839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342604
    },
    {
        "content": "<p>Right. Some things are _mostly_ working the way we need.  I don't have a concrete list of \"we need Cargo to change in these ways\" yet, but I'd really like to work with you &amp; the community on how to meet these needs. We're making fairly serious commitments to Rust, internally, and I really want the full Rust experience: Cargo, <a href=\"http://crates.io\">crates.io</a>, etc. and not just \"well, we kinda have it working\".</p>",
        "id": 217945966,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342689
    },
    {
        "content": "<p>Absolutely, and I <em>really</em> appreciate that your first reaction is \"let's improve Cargo\" rather than \"let's replace Cargo\".</p>",
        "id": 217945982,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342709
    },
    {
        "content": "<p>That would potentially make you the largest company that <em>doesn't</em> have their custom build system almost completely bypass Cargo. :)</p>",
        "id": 217946005,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342737
    },
    {
        "content": "<p>Vendoring sources into our monorepo is similar to how we used to do things with C/C++, but we want to go in the opposite direction. We've been pulling C/C++ OSS sources _out_ of the Windows tree, and into separate repositories, for lots of good reasons.  Mainly de-dup'ing, license management, automatic upgrades or at least audits of new releases of code from the wild.</p>",
        "id": 217946042,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342781
    },
    {
        "content": "<p>That makes sense. So, you want to have a collection of adjacent repositories, and use crates from them, without having to vendor them.</p>",
        "id": 217946141,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342844
    },
    {
        "content": "<p>Our mono-repo is an artifact of Windows history. We used to run the largest cluster of P4-derived repos in the world. Then we moved that giant mess (I MEAN mass) to Git. We've been slowly \"undocking\" components by moving them into separate repos, and then wiring them together with CI pipelines.</p>",
        "id": 217946166,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342862
    },
    {
        "content": "<blockquote>\n<p>So, you want to have a collection of adjacent repositories</p>\n</blockquote>\n<p>Precisely.</p>",
        "id": 217946183,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342877
    },
    {
        "content": "<p>Submodules might help you, and might also substantially complicate your life.</p>",
        "id": 217946197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606342894
    },
    {
        "content": "<p>Ideally our internal ecosystem would look a lot like <a href=\"http://crates.io\">crates.io</a>. We want the experience for developers who come to Microsoft to be \"oh, this is just normal Rust, I feel productive immediately\".</p>",
        "id": 217946271,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342927
    },
    {
        "content": "<p>I think I might be unfamiliar with what you mean by submodules. Can you expand on that some?</p>",
        "id": 217946284,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606342944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"274471\">Arlie Davis</span> <a href=\"#narrow/stream/122651-general/topic/Build.20times.20and.20build.20systems/near/217946271\">said</a>:</p>\n<blockquote>\n<p>Ideally our internal ecosystem would look a lot like <a href=\"http://crates.io\">crates.io</a>. We want the experience for developers who come to Microsoft to be \"oh, this is just normal Rust, I feel productive immediately\".</p>\n</blockquote>\n<p>Then I think you did the right thing by <em>starting</em> with a private <a href=\"http://crates.io\">crates.io</a> mirror, and you may also want your own separate registry where you can upload custom internal crates (keep it separate from the mirror). We could definitely do better, but we could also do a <em>lot</em> worse, so I think that's a great start.</p>",
        "id": 217946379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"274471\">Arlie Davis</span> <a href=\"#narrow/stream/122651-general/topic/Build.20times.20and.20build.20systems/near/217946284\">said</a>:</p>\n<blockquote>\n<p>I think I might be unfamiliar with what you mean by submodules. Can you expand on that some?</p>\n</blockquote>\n<p>git submodules. Git supports adding, to a repository, an entry for \"this directory should contain commit hash abc123\". And then you can supply metadata saying \"get that from <code>https://.../foo/bar.git</code> if you don't have it\".</p>",
        "id": 217946442,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343094
    },
    {
        "content": "<p>Oh, Git submodules. I thought there was some Cargo notion of submodules.</p>",
        "id": 217946466,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606343122
    },
    {
        "content": "<p>Ah. No, none.</p>",
        "id": 217946475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343130
    },
    {
        "content": "<p>If you're splitting up a monorepo into separate repositories, git submodules would be one way to handle it. The upside is that <em>semantically</em> it's probably very close to what you want. The downside is that it substantially increases the amount of git expertise required to work on the repository successfully, plus you'd have to make sure your custom layers atop git work with it.</p>",
        "id": 217946629,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343256
    },
    {
        "content": "<p>Somewhat off topic but I think <span class=\"user-mention\" data-user-id=\"120054\">@Jon Gjengset</span> is working on similar things at amazon. So you should compare notes. If Microsoft and Amazon say \"adding fet x to Cargo will make are hacks less ugly\" that is a big push.</p>",
        "id": 217946640,
        "sender_full_name": "Eh2406",
        "timestamp": 1606343266
    },
    {
        "content": "<p>I've had mixed experiences with submodules. For $REASONS, they're also just not an option for our mono-repo. We'd also much rather manage semver references in Cargo.toml files than submodules.</p>",
        "id": 217946712,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606343302
    },
    {
        "content": "<p>I think \"mixed\" describes almost everyone's experience with submodules. ;)</p>",
        "id": 217946722,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343316
    },
    {
        "content": "<p>Heh!</p>",
        "id": 217946727,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606343322
    },
    {
        "content": "<p>And yeah, semver sounds better.</p>",
        "id": 217946732,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343330
    },
    {
        "content": "<p>So, it might be that a custom Cargo registry plus some git-based CI and links to repositories would help.</p>",
        "id": 217946773,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343367
    },
    {
        "content": "<p>Also, we're going to be stuck with our mono-repo for a very long time. We're slowly pulling components out of it, but whenever we do, we always find a long tail of dependencies. So it's a slow process, and a lot of things will probably never be pulled out. My wider team (the Windows Engineering Systems team) handles a lot of that.</p>",
        "id": 217946781,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606343376
    },
    {
        "content": "<blockquote>\n<p>So, it might be that a custom Cargo registry plus some git-based CI and links to repositories would help.</p>\n</blockquote>\n<p>Exactly.</p>",
        "id": 217946795,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606343395
    },
    {
        "content": "<p>One question we've had for a while: What's the thinking of the Cargo team on \"namespaces\" for <a href=\"http://crates.io\">crates.io</a>?  Namespaces tied to organizations, provenance, etc.</p>",
        "id": 217946866,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606343432
    },
    {
        "content": "<p>We're actually talking about that right now.</p>",
        "id": 217946876,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343445
    },
    {
        "content": "<p>There's a proposal on the table for very simple namespacing: if you own the crate <code>foo</code>, you can have crates named <code>foo/bar</code> and nobody else can.</p>",
        "id": 217946911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> is working on that.</p>",
        "id": 217946936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343499
    },
    {
        "content": "<p>Seems like a pure win.</p>",
        "id": 217946948,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606343517
    },
    {
        "content": "<p>The Cargo team's general thinking is that the set of problems it addresses need some thought, and we don't set <a href=\"http://crates.io\">crates.io</a> policy directly, but we're happy to provide the features in Cargo that enable new <a href=\"http://crates.io\">crates.io</a> policies.</p>",
        "id": 217946996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"274471\">Arlie Davis</span> <a href=\"#narrow/stream/122651-general/topic/Build.20times.20and.20build.20systems/near/217946948\">said</a>:</p>\n<blockquote>\n<p>Seems like a pure win.</p>\n</blockquote>\n<p>I agree.</p>",
        "id": 217947003,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606343551
    },
    {
        "content": "<p>Just to follow on from this, yes, I'll be fiddling a lot with Rust and Cargo integration at Amazon in the coming months, and like you <span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> my goals is for \"Rust at Amazon\" to be ~= \"Rust everywhere\" by working _with_ upstream, so I think it's likely we'll be pushing in similar directions. Yay! Your description of having a local mirror and trying to make that fit into your pipeline sounds like it fits some of the stuff I've been looking at too :) See also <a href=\"https://internals.rust-lang.org/t/alternate-registry-package-rebuilds/13409\">https://internals.rust-lang.org/t/alternate-registry-package-rebuilds/13409</a> and <a href=\"https://github.com/rust-lang/cargo/pull/8890\">https://github.com/rust-lang/cargo/pull/8890</a> for some relevant bits and pieces.</p>",
        "id": 217961641,
        "sender_full_name": "Jon Gjengset",
        "timestamp": 1606360184
    }
]