[
    {
        "content": "<p>Is the convention to have <code>mymodule/{mod, foo, bar}.rs</code> or <code>mymodule.rs</code> and <code>mymodule/{foo, bar}.rs</code>?</p>",
        "id": 209836440,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599859184
    },
    {
        "content": "<p>I usually go for the latter in new code</p>",
        "id": 209836536,
        "sender_full_name": "simulacrum",
        "timestamp": 1599859227
    },
    {
        "content": "<p>Huh, that's interesting. I thought that was the older version!</p>",
        "id": 209836748,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599859377
    },
    {
        "content": "<p>new as of 2018 Edition: <a href=\"https://doc.rust-lang.org/nightly/edition-guide/rust-2018/module-system/path-clarity.html\">https://doc.rust-lang.org/nightly/edition-guide/rust-2018/module-system/path-clarity.html</a></p>",
        "id": 209836837,
        "sender_full_name": "Jubilee",
        "timestamp": 1599859438
    },
    {
        "content": "<p>Yup. Formerly, you couldn't have <code>mymodule.rs</code> if you also had <code>mymodule/*.rs</code>, but 2018 added that.</p>",
        "id": 209837179,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599859649
    },
    {
        "content": "<p>In Rust 2015, you <em>had</em> to rename <code>mymodule.rs</code> to <code>mymodule/mod.rs</code> if you wanted to add submodules.</p>",
        "id": 209837214,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599859668
    },
    {
        "content": "<p>Is there a convention, or is it just a personal choice?</p>",
        "id": 209837471,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599859810
    },
    {
        "content": "<p>There is no lint for this, therefore: Personal choice</p>",
        "id": 209837516,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599859841
    },
    {
        "content": "<p>I like the \"new\" way so it means that in a level, the main module name in question _always_ exists as <code>name.rs</code>, and is not at <code>name/mod.rs</code>, but some people like it the other way around because it means a module is always complete in a folder.</p>",
        "id": 209838182,
        "sender_full_name": "Jubilee",
        "timestamp": 1599860214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/122651-general/topic/module.20files/near/209837471\">said</a>:</p>\n<blockquote>\n<p>Is there a convention, or is it just a personal choice?</p>\n</blockquote>\n<p>There's no convention. When we created the Rust 2018 module system and made that an option, we hoped that people would tend to use it, but we didn't want any kind of deprecation that would annoy people who used or preferred the old way.</p>",
        "id": 209838609,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599860475
    },
    {
        "content": "<p>Yeah, I learned Rust this year, but I prefer the old way because of the reason <code>@Jubilee</code> mentioned :)</p>",
        "id": 209838774,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599860569
    },
    {
        "content": "<p>imo this should totally be a warning</p>",
        "id": 209839495,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599861032
    },
    {
        "content": "<p>I really hope the new way can work together with <code>#[path=\"xxx.rs\"]</code>... This will be a language change though.</p>",
        "id": 209875417,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599907009
    },
    {
        "content": "<p>I'm not sure what you mean, I think it does?</p>",
        "id": 209877779,
        "sender_full_name": "simulacrum",
        "timestamp": 1599911075
    },
    {
        "content": "<p>good news!</p>\n<p>with inline modules, you don't need <a href=\"http://foo.rs\">foo.rs</a> next to foo/ <em>or</em> <a href=\"http://mod.rs\">mod.rs</a> within foo/</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// maps to folder foo/</span>\n<span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// maps to foo/bar.rs</span>\n<span class=\"w\">  </span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209883598,
        "sender_full_name": "Lokathor",
        "timestamp": 1599920795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/module.20files/near/209877779\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what you mean, I think it does?</p>\n</blockquote>\n<p>When <code>#[path=\"xxx.rs\"]</code> is specified, it always acts as if <code>xxx.rs</code> is <code>mod.rs</code>, and assumes its child module is in the same directory level instead of under <code>xxx/</code></p>",
        "id": 209887429,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599926474
    },
    {
        "content": "<p>That is surprising to me</p>",
        "id": 209888074,
        "sender_full_name": "simulacrum",
        "timestamp": 1599927090
    },
    {
        "content": "<p>I remember seeing that a little while ago too. That seems like a bug, though it might be a difficult one to fix compatibly.</p>",
        "id": 209894041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599935577
    },
    {
        "content": "<p>The new way can make file name based search easier and creates less  noise in git when adding the first/removing the last submodule which is why I started using it for new projects. But it's preference only. The part about the path attribute not working seems like a bug, I guess the code behind it just wasn't updated but I might be wrong.</p>",
        "id": 209895712,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1599938167
    },
    {
        "content": "<p>The <code>#[path]</code> behavior is more or less intentional. Its behavior was <a href=\"https://github.com/rust-lang/rust/pull/55108#issuecomment-430107039\">discovered</a> just before the 2018 edition was to be released.  Because <code>#[path]</code> had a specific behavior since 1.0, it wasn't feasible to change it in time. One problem is that interpreting it differently would require a tool like <code>rustfix</code> to be able to rename files, which it can't (assuming almost all changes should be rustfix-able).  Finishing the documentation for this has been on my todo list for over a year. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 209898540,
        "sender_full_name": "Eric Huss",
        "timestamp": 1599942550
    },
    {
        "content": "<p>aha, that does bring memories back, okay.</p>",
        "id": 209900328,
        "sender_full_name": "simulacrum",
        "timestamp": 1599945261
    },
    {
        "content": "<p>could it go on the 2021 list, or later edition?</p>",
        "id": 209904599,
        "sender_full_name": "Lokathor",
        "timestamp": 1599953407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> as an unfixable lint? I'm pretty hesitant to have file renames, but maybe that's a false fear</p>",
        "id": 209905182,
        "sender_full_name": "simulacrum",
        "timestamp": 1599954412
    },
    {
        "content": "<p>if <code>cargo fix</code> (or whatever it's called) performs arbitrary changes on the <em>content</em> of files, there's really no moral difference in renaming files too.</p>",
        "id": 209905261,
        "sender_full_name": "Lokathor",
        "timestamp": 1599954589
    },
    {
        "content": "<p>I think it's fine to keep default <code>#[path]</code> working the current way, but i wish there could be an argument that specifies that its submodules are in a subdirectory(2018 style) instead of same directory level (2015 style)</p>",
        "id": 209906700,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599957115
    }
]