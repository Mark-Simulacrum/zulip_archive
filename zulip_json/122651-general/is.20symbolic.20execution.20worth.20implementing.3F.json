[
    {
        "content": "<p>Hey Rustaceans,<br>\nI'm new to Rust, so, probably, I'm missing something.<br>\nI cannot figure out the status of the issue <a href=\"https://github.com/rust-lang/miri/issues/440\">https://github.com/rust-lang/miri/issues/440</a></p>\n<p>The issue is not resolved yet, but no active work has been done for quite a while.<br>\nAlso, in the issue SEER (Symbolic execution tool) is mentioned, but it looks unfinished. <br>\nSo, I wonder why is that?</p>\n<p>Has the Rust community shifted their attention towards other more important issues?<br>\nOr the amount of effort it requires is not reasonable to get little benefits?</p>\n<p>Can someone comment on the this?</p>",
        "id": 204148771,
        "sender_full_name": "Alex",
        "timestamp": 1594936730
    },
    {
        "content": "<p>I don't think symbolic execution was ever really in the focus of the Rust community, let alone the Rust team.</p>",
        "id": 204149474,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594937202
    },
    {
        "content": "<p>(as in, there was never a community group focused on working on symbolic execution)</p>",
        "id": 204149510,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594937240
    },
    {
        "content": "<p>There's also MIRAI (<a href=\"https://github.com/facebookexperimental/MIRAI\">https://github.com/facebookexperimental/MIRAI</a>), which does abstract interpretation and is actively developed. Not sure what the difference between that and symbolic execution are though.</p>",
        "id": 204149608,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594937307
    },
    {
        "content": "<p><a href=\"https://github.com/facebookexperimental/MIRAI/blob/master/documentation/Overview.md#verification-is-not-on-the-table\">https://github.com/facebookexperimental/MIRAI/blob/master/documentation/Overview.md#verification-is-not-on-the-table</a></p>",
        "id": 204149675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594937365
    },
    {
        "content": "<p>looks like they only want to do a subset of what's possible with symbolic execution</p>",
        "id": 204149684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594937376
    },
    {
        "content": "<p>btw at one point I tried to get klee working with #[no_std] crates but it crashed :( <a href=\"https://github.com/klee/klee/issues/1263\">https://github.com/klee/klee/issues/1263</a></p>",
        "id": 204149902,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594937522
    },
    {
        "content": "<p>It's not entirely unlikely that we'll be working on verification tooling (model checking, etc.) as part of Sealed Rust, but that's probably still many years off</p>",
        "id": 204150024,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594937609
    },
    {
        "content": "<p>That makes sense for me. Thanks!<br>\nI will look closer at MIRAI and monitor the issue in KLEE.</p>",
        "id": 204153796,
        "sender_full_name": "Alex",
        "timestamp": 1594940576
    },
    {
        "content": "<p>FWIW the KLEE issue is not specific to rust, it's just a general unimplemented feature that happens not to show up much in C</p>",
        "id": 204153890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594940648
    },
    {
        "content": "<p>there's also <a href=\"https://github.com/PLSysSec/haybale/\">https://github.com/PLSysSec/haybale/</a></p>",
        "id": 204154415,
        "sender_full_name": "lqd",
        "timestamp": 1594941129
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> (I think there was someone else working on symbolic execution, and it was based on miri itself)</p>",
        "id": 204640663,
        "sender_full_name": "eddyb",
        "timestamp": 1595406249
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span></p>",
        "id": 204640700,
        "sender_full_name": "oli",
        "timestamp": 1595406282
    },
    {
        "content": "<p>(sadly Zulip doesn't give me a full completion list, at least I did try <code>@C</code>)</p>",
        "id": 204640766,
        "sender_full_name": "eddyb",
        "timestamp": 1595406333
    },
    {
        "content": "<p>I'd like to have symbolic execution support in the miri engine, but I don't have a clear picture of how to do this without affecting CTFE performance and complexity yet</p>",
        "id": 204640842,
        "sender_full_name": "oli",
        "timestamp": 1595406373
    },
    {
        "content": "<p>I still believe it's possible, but that's mainly a model I have in my head and have never written down</p>",
        "id": 204640874,
        "sender_full_name": "oli",
        "timestamp": 1595406414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308841\">@Alex</span>, we've been using <a href=\"https://github.com/christianpoveda/sire\">sire</a> to do const-generics \"unification\" however the whole project is just a proof of concept</p>",
        "id": 204657418,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595420079
    },
    {
        "content": "<p>in particular, we cannot execute every possible Rust program yet, some stuff like loops or adts are just things that we've haven't implemented yet, other things like pointers I haven't thought how to handle that correctly</p>",
        "id": 204657674,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595420234
    },
    {
        "content": "<p>the other problem is that we need an SMT solver to do symbolic execution, we could probably move away from it but we aren't there yet.</p>",
        "id": 204657708,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595420267
    },
    {
        "content": "<p>I think symbolic execution benefits are great but we'd have to come up with a design that feels like an integral part of the compiler</p>",
        "id": 204657793,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595420307
    },
    {
        "content": "<p>and also most of the things we win with it feel like nice-to-haves rather than critical features</p>",
        "id": 204658861,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595421074
    },
    {
        "content": "<p>maybe when const generics get stabilized, it will make symbolic execution more relevant but maybe there are better ways to solve unification.</p>",
        "id": 204658971,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595421133
    },
    {
        "content": "<p>Did I get it right that const-generics \"unification\" can be further explored with sire? if it is the case I would be happy to implement new features or stabilize the existing ones as well as explore uncertain questions. <br>\nI find sire interesting to work on.</p>\n<p>Are there any reasons that block further development of sire?</p>\n<p>And if it's ok for me to work on the project, where is the best place to start? <span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span></p>",
        "id": 204874226,
        "sender_full_name": "Alex",
        "timestamp": 1595558438
    },
    {
        "content": "<p>Even though sire has a lot of room for improvement I wouldn't invest more effort in it right now, the project itself was more a proof of concept to see if it was possible to use symbolic execution to unify constants, and the answer is  \"yes you can\".</p>\n<p>The parts that need more work as <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> said is figuring out how to fit something like sire inside the compiler without compromising the performance of the constant evaluation engine. And to be honest I think nobody has any idea about how should we tackle that.</p>",
        "id": 204874761,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595559327
    },
    {
        "content": "<p>I hope my answer isn't too discouraging. I think the big blocker here is that we haven't been able to answer the same question you asked in this topic: \"is it even worth it to implement symbolic execution?\". </p>\n<p>It can be used for constant unification, and that's cool but that doesn't mean is the only solution (it isn't the first either: <a href=\"https://github.com/rust-lang/rfcs/issues/1930\">https://github.com/rust-lang/rfcs/issues/1930</a>)</p>",
        "id": 204874957,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595559674
    },
    {
        "content": "<p>let's add \"and without compromising the readability/maintainability of the CTFE engine\" to the list; personally I am even more worried about that than performance</p>",
        "id": 204887344,
        "sender_full_name": "RalfJ",
        "timestamp": 1595576604
    },
    {
        "content": "<p>yeah completely</p>",
        "id": 204926157,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1595602685
    }
]