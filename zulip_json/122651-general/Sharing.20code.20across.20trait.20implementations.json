[
    {
        "content": "<p>We have a trait with plenty of associated types, but several (well, 2) instances use most of the same choices for that type, plus a bunch of methods depending on that type are then implemented the same way. Is there a way to share that code, without having to repeat the entire rest of the trait signature? I couldn't find one, even specialization seems not enough due to the involved assoc types (but maybe I am misunderstanding). Does anyone here have an idea? See <a href=\"https://github.com/rust-lang/rust/issues/71129\" title=\"https://github.com/rust-lang/rust/issues/71129\">https://github.com/rust-lang/rust/issues/71129</a>.</p>",
        "id": 194592778,
        "sender_full_name": "RalfJ",
        "timestamp": 1587295533
    },
    {
        "content": "<p>Can you not use assoc. type defaults?</p>",
        "id": 194592829,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587295594
    },
    {
        "content": "<p>but then default method impls cannot use those, or can they? I admit I didnt try that.</p>",
        "id": 194592884,
        "sender_full_name": "RalfJ",
        "timestamp": 1587295699
    },
    {
        "content": "<p>No</p>",
        "id": 194592889,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587295720
    },
    {
        "content": "<p>I am reading <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\">https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md</a> and quite confused by the <code>add_assign</code> example, it seems to me that <code>default impl&lt;T: Clone, Rhs&gt; Add&lt;Rhs&gt; for T</code> should not typecheck because <code>Output</code> might be different from <code>Self</code>.</p>",
        "id": 194592895,
        "sender_full_name": "RalfJ",
        "timestamp": 1587295735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194592889\" title=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194592889\">said</a>:</p>\n<blockquote>\n<p>No</p>\n</blockquote>\n<p>then it doesnt help. the types themselves aren't annoying to repeat, but the methods depending on them are.</p>",
        "id": 194592905,
        "sender_full_name": "RalfJ",
        "timestamp": 1587295758
    },
    {
        "content": "<p>hm, specialization as described there should actually be able to do this, but I am not sure if it is already sufficiently implemented.</p>",
        "id": 194592967,
        "sender_full_name": "RalfJ",
        "timestamp": 1587295850
    },
    {
        "content": "<p>Specialization also doesn't allow normalizing specializable associated types</p>",
        "id": 194592982,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587295885
    },
    {
        "content": "<p>Here's some <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=dee3d9e025d86fbab6369e3bec7bd8cc\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=dee3d9e025d86fbab6369e3bec7bd8cc\">code to play with</a></p>",
        "id": 194593063,
        "sender_full_name": "RalfJ",
        "timestamp": 1587295998
    },
    {
        "content": "<p>I'd want <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ae4bb988ec211689df64534d17bb5e9c\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ae4bb988ec211689df64534d17bb5e9c\">something like this</a>, but it doesn't work. I am not sure why though since in the specialized impl we should be able to rely on the type being <code>i32</code>.</p>",
        "id": 194593185,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296160
    },
    {
        "content": "<p><code>default impl</code> makes all items <code>default</code>, so you cannot assume what the associated type normalizes to</p>",
        "id": 194593239,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587296234
    },
    {
        "content": "<p>I don't think I fully understand what you're trying to do here – <code>other</code> is never provided an implementation, is it a default trait method in the real code?</p>",
        "id": 194593295,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587296319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593239\" title=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593239\">said</a>:</p>\n<blockquote>\n<p><code>default impl</code> makes all items <code>default</code>, so you cannot assume what the associated type normalizes to</p>\n</blockquote>\n<p>ah... I want to make the items I give non-default though</p>",
        "id": 194593423,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296529
    },
    {
        "content": "<p>so there is no way to say \"this is a partial impl but some items are final\"? that seems like a big gap.</p>",
        "id": 194593445,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593295\" title=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593295\">said</a>:</p>\n<blockquote>\n<p>I don't think I fully understand what you're trying to do here – <code>other</code> is never provided an implementation, is it a default trait method in the real code?</p>\n</blockquote>\n<p>this is partial code. imagine <code>other</code> is implemented widely differently in the final implementations.</p>",
        "id": 194593453,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296561
    },
    {
        "content": "<p>default trait methods also exist. there's around a dozen \"other\" methods.</p>",
        "id": 194593456,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296579
    },
    {
        "content": "<p>(<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/trait.Machine.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/trait.Machine.html\">this is the trait I am talking about</a>, but most of what it does concretely does not matter)</p>",
        "id": 194593465,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593295\" title=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593295\">said</a>:</p>\n<blockquote>\n<p>I don't think I fully understand what you're trying to do here – <code>other</code> is never provided an implementation, is it a default trait method in the real code?</p>\n</blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=304bd81ee0e24ae99c21d887f3b07033\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=304bd81ee0e24ae99c21d887f3b07033\">here's some more code</a> if that helps</p>",
        "id": 194593524,
        "sender_full_name": "RalfJ",
        "timestamp": 1587296742
    },
    {
        "content": "<p>Hmm, yeah, not sure how to do this nicely...</p>",
        "id": 194593658,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587296975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593445\" title=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194593445\">said</a>:</p>\n<blockquote>\n<p>so there is no way to say \"this is a partial impl but some items are final\"? that seems like a big gap.</p>\n</blockquote>\n<p>this seems like a serious limitation. is that tracked somewhere? would the rfc1210 tracking issue be a good place to bring this up?</p>",
        "id": 194593732,
        "sender_full_name": "RalfJ",
        "timestamp": 1587297073
    },
    {
        "content": "<p>Maybe, yeah</p>",
        "id": 194593805,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587297157
    },
    {
        "content": "<p>I only skimmed the earlier discussion but AFAICT nobody has stated the obvious yet: a low-tech way to factor out duplication in trait impls that can't be quite abstracted over with the trait system is to have macros generate the impls. This is commonly done for numeric types' impls. It has downsides and may not be worth it for just two impls, but maybe give it a shot.</p>",
        "id": 194594207,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587297822
    },
    {
        "content": "<p>ah yes... I tend to not even consider macros for abstraction/code sharing so I forgot about that approach (same recently happened with floating-point tests, where libstd also has a bunch of them and they use macros^^ I'll likely copy those tests to miri as well soon-ish)</p>",
        "id": 194594352,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298046
    },
    {
        "content": "<p>With the intermediate trait, wouldn't you only need to write a single forwarding impl?</p>",
        "id": 194594402,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587298124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194594402\" title=\"#narrow/stream/122651-general/topic/Sharing.20code.20across.20trait.20implementations/near/194594402\">said</a>:</p>\n<blockquote>\n<p>With the intermediate trait, wouldn't you only need to write a single forwarding impl?</p>\n</blockquote>\n<p>the intermediate trait has to repeat all forwarded signatures though</p>",
        "id": 194594415,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298168
    },
    {
        "content": "<p>in this case, that kills any wins of code sharing we might get elsewhere</p>",
        "id": 194594436,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298179
    },
    {
        "content": "<p>Yes. Only once for each method though, and then all users don't have to deal with it.</p>",
        "id": 194594438,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587298196
    },
    {
        "content": "<p>there's 2 users <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 194594478,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298207
    },
    {
        "content": "<p>Yeah, I guess it doesn't matter much which workaround you use here :D</p>",
        "id": 194594482,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587298230
    },
    {
        "content": "<p>well a base requirement is that it has to actually save LOC ;)</p>",
        "id": 194594484,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298244
    },
    {
        "content": "<p>and the intermediate trait doesn't do that</p>",
        "id": 194594487,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298262
    },
    {
        "content": "<p>but the macro does?</p>",
        "id": 194594507,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587298298
    },
    {
        "content": "<p>I think it would, yes</p>",
        "id": 194594509,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298305
    },
    {
        "content": "<p>Well, it only has one copy of each common signature</p>",
        "id": 194594512,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587298314
    },
    {
        "content": "<p>\"it\"?</p>",
        "id": 194594549,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298324
    },
    {
        "content": "<p>The macro solution</p>",
        "id": 194594550,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587298330
    },
    {
        "content": "<p>more importantly, it has 0 copies of \"forwarded\" method's signatures (the ones that are not shared)</p>",
        "id": 194594553,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298348
    },
    {
        "content": "<p>that is what killed the intermediate trait</p>",
        "id": 194594584,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298382
    },
    {
        "content": "<p>so from all solutions so far that actually compile, I like the macro most :D</p>",
        "id": 194594646,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298447
    },
    {
        "content": "<p>specialization would be neat but the current implementation (even the current RFC) seem too limited for that</p>",
        "id": 194594651,
        "sender_full_name": "RalfJ",
        "timestamp": 1587298468
    },
    {
        "content": "<p>Honestly, with only two similar-ish implementations which serve different purposes, I am skeptical if merging the common code is a good idea at all. The macro approach saves LOC, but it creates extra work whenever something stops being shared by the two impls and gets less attractive the more they diverge. I don't know this code very well, but it seems both CTFE and ConstProp are only going to become more elaborate in the future, and probably in different ways.</p>",
        "id": 194594792,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587298685
    },
    {
        "content": "<p>If the duplication of signatures is the real thing bothering you, I'm almost tempted to suggest that the macro (if any) should focus on <em>those</em>, not supply any method bodies, and thus be applicable to all impls of <code>Machine</code>. But even this would probably be considered an unwise abuse of macros.</p>",
        "id": 194594816,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587298779
    },
    {
        "content": "<p>so far, of the things I plan to share, I find it really unlikely that anything in there will stop being shared between the two impls</p>",
        "id": 194596870,
        "sender_full_name": "RalfJ",
        "timestamp": 1587301686
    },
    {
        "content": "<p>in particular I dont think we'll ever use stacked-borrows-style ptr tagging in either of them</p>",
        "id": 194596883,
        "sender_full_name": "RalfJ",
        "timestamp": 1587301721
    },
    {
        "content": "<p><a href=\"https://github.com/hobofan/ambassador\" title=\"https://github.com/hobofan/ambassador\">https://github.com/hobofan/ambassador</a><br>\nThere's this crate that maybe helps and maybe not.</p>",
        "id": 194676014,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587390112
    }
]