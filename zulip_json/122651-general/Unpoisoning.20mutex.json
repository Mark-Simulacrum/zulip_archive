[
    {
        "content": "<p>Is this possible to force unpoisoning a poisoned mutex?</p>",
        "id": 194603705,
        "sender_full_name": "marmeladema",
        "timestamp": 1587311027
    },
    {
        "content": "<p>you can call <code>.into_inner()</code> on the <code>PoisonError</code></p>",
        "id": 194603770,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1587311110
    },
    {
        "content": "<p>yep, i tried that, but then i get back a mutexguard right? if i want to unlock that guard, i tried to <code>drop(guard);</code> but next <code>mutex.lock</code> still returned a poisoned guard</p>",
        "id": 194603855,
        "sender_full_name": "marmeladema",
        "timestamp": 1587311208
    },
    {
        "content": "<p>well i could use that guard to access again the underlying object, but since its poisoned its a very fragile thing to do i guess</p>",
        "id": 194603976,
        "sender_full_name": "marmeladema",
        "timestamp": 1587311383
    },
    {
        "content": "<p>no, poisoned mutexes aren't curable :)</p>",
        "id": 194604245,
        "sender_full_name": "simulacrum",
        "timestamp": 1587311713
    },
    {
        "content": "<p>Thats what i thought</p>",
        "id": 194604366,
        "sender_full_name": "marmeladema",
        "timestamp": 1587311815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Unpoisoning.20mutex/near/194604245\" title=\"#narrow/stream/122651-general/topic/Unpoisoning.20mutex/near/194604245\">said</a>:</p>\n<blockquote>\n<p>no, poisoned mutexes aren't curable :)</p>\n</blockquote>\n<p>that's susprisng, seems to me like the next regular unlock should cure them</p>",
        "id": 194606170,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313785
    },
    {
        "content": "<p>That would be interesting</p>",
        "id": 194606228,
        "sender_full_name": "simulacrum",
        "timestamp": 1587313828
    },
    {
        "content": "<p>But it's not what is implemented today at least</p>",
        "id": 194606329,
        "sender_full_name": "simulacrum",
        "timestamp": 1587313965
    },
    {
        "content": "<p>we never store false into the poison flag after setting it</p>",
        "id": 194606360,
        "sender_full_name": "simulacrum",
        "timestamp": 1587314019
    },
    {
        "content": "<p>hm. I guess there is no guarantee that the unlock indeed restored the invariant</p>",
        "id": 194606420,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314063
    },
    {
        "content": "<p>so maybe it should be explicit</p>",
        "id": 194606424,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314067
    },
    {
        "content": "<p>yeah -- we could provide a clear() on the mutexguard</p>",
        "id": 194606433,
        "sender_full_name": "simulacrum",
        "timestamp": 1587314097
    },
    {
        "content": "<p>I'm not sure how useful that would be given that poisoning is generally questionably useful anyway :)</p>",
        "id": 194606454,
        "sender_full_name": "simulacrum",
        "timestamp": 1587314134
    },
    {
        "content": "<p>at least in the code I've written I either don't care (and so always do the <code>unwrap_or_else(|e| e.into_guard())</code> dance) or just unwrap</p>",
        "id": 194606511,
        "sender_full_name": "simulacrum",
        "timestamp": 1587314173
    },
    {
        "content": "<p>It is very useful. Otherwise the main thread would likely continue after an unexpected panic of a background thread.</p>",
        "id": 194606523,
        "sender_full_name": "bjorn3",
        "timestamp": 1587314186
    },
    {
        "content": "<p>Hm, well, I mean, I guess it <em>can</em> be useful</p>",
        "id": 194606555,
        "sender_full_name": "simulacrum",
        "timestamp": 1587314236
    },
    {
        "content": "<p>but I'm just saying that it's not obvious that Mutex in std should enforce it</p>",
        "id": 194606575,
        "sender_full_name": "simulacrum",
        "timestamp": 1587314257
    },
    {
        "content": "<p>anyway I'd be unopposed to providing a clear_poison function or so</p>",
        "id": 194606587,
        "sender_full_name": "simulacrum",
        "timestamp": 1587314281
    },
    {
        "content": "<p>If std::sync::Mutex doesn't implement poison, it is very likely that most people won't bother to implement something to stop the program when a background thread panics.</p>",
        "id": 194606649,
        "sender_full_name": "bjorn3",
        "timestamp": 1587314324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Unpoisoning.20mutex/near/194606587\" title=\"#narrow/stream/122651-general/topic/Unpoisoning.20mutex/near/194606587\">said</a>:</p>\n<blockquote>\n<p>anyway I'd be unopposed to providing a clear_poison function or so</p>\n</blockquote>\n<p>me neither</p>",
        "id": 194606657,
        "sender_full_name": "bjorn3",
        "timestamp": 1587314334
    },
    {
        "content": "<p>Its not necessarily true that just ignoring poison makes the data actually valid.</p>",
        "id": 194614808,
        "sender_full_name": "nagisa",
        "timestamp": 1587325621
    },
    {
        "content": "<p>e.g. things like a print routine doesnâ€™t actually care if a structure is half updated, but an algorithm might</p>",
        "id": 194614827,
        "sender_full_name": "nagisa",
        "timestamp": 1587325650
    },
    {
        "content": "<p>Sorry for the thread resurrection, but I was just asked if this existed during a training, so it's not just you that wanted it!</p>",
        "id": 227663145,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614197291
    },
    {
        "content": "<p>It is very non-obvious to me how to review code to validate the correctness of a call to <code>Mutex::clear_poison</code>. You are basically in C++'s exception safety regime here: just about everything could panic, and so it's really hard to say what state the mutex is in. Seems easier to just mem::replace it with a new one</p>",
        "id": 227716098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614227425
    },
    {
        "content": "<p>That's a sane course of action, and if we're not going to add <code>clear_poison</code> then we should make an example for that in the docs.</p>",
        "id": 227720136,
        "sender_full_name": "Lokathor",
        "timestamp": 1614230809
    },
    {
        "content": "<p>Of course using mem::replace means that you have mutable access to the mutex, meaning that you have to stop all threads that have access to it, so the technique is not often applicable. If it's a global then you need to have a mutex to protect the mutex...</p>",
        "id": 227721486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614232134
    },
    {
        "content": "<p>oh right, that too</p>",
        "id": 227800828,
        "sender_full_name": "Lokathor",
        "timestamp": 1614272590
    },
    {
        "content": "<blockquote>\n<p>what state the mutex is in</p>\n</blockquote>\n<p>The <em>mutex</em> itself should always be in a defined state, but the data within in might not be, correct?</p>",
        "id": 227934999,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614349651
    },
    {
        "content": "<blockquote>\n<p>so it's really hard to say what state the mutex is in</p>\n</blockquote>\n<p>Given that view, then it should be completely disallowed to access the data after the mutex has been poisoned. There are cases where the state of the data can be re-established to a known-good condition, which is why an unpoison makes sense to me.</p>",
        "id": 227935359,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614349801
    },
    {
        "content": "<p>Not quite, because you don't even know if there <em>is</em> a bad state in the first place.</p>",
        "id": 227940135,
        "sender_full_name": "Lokathor",
        "timestamp": 1614351897
    },
    {
        "content": "<p>Not quite... what? Can you clarify which part you are responding to?</p>",
        "id": 227941329,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614352381
    },
    {
        "content": "<p>Mutex poisoning is useful for when the inner state may have violated a logic invariant. Even a poisoned mutex may not have inner state that violates a safety invariant. A logic invariant may still be restorable and as such the mutex should be unpoisonable. It can also sometimes be useful to access the data anyway despite the violated logic invariant. You just have to be more careful.</p>",
        "id": 227946603,
        "sender_full_name": "bjorn3",
        "timestamp": 1614354657
    },
    {
        "content": "<p>Right, I completely agree :-)</p>",
        "id": 227947364,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614354974
    },
    {
        "content": "<p>The example we were using during training was <code>Mutex&lt;(u8, u8)&gt;</code> where the first value must always be one less than the second value. It's easy to demonstrate how that can get into a logically-inconsistent form thanks to a panic.</p>",
        "id": 227947561,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614355076
    },
    {
        "content": "<p>Rust will prevent the data inside from being memory-unsafe, and it's conceivable for the application to be able to roll back or otherwise recover the state to a consistent point, at which point any future poison notification would be superfluous.</p>",
        "id": 227947772,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614355160
    },
    {
        "content": "<p>Right, as you two already covered, i was responding to the \"you can never recover from poison\" argument. Which is clearly wrong. You don't even know if the panic happened on protected data or if it happened with other code while the lock just happened to be held.</p>",
        "id": 227969555,
        "sender_full_name": "Lokathor",
        "timestamp": 1614363722
    },
    {
        "content": "<p>In complicated back-and-forth, Zulip allows you to quote / reply to a specific post to help track the threads of conversation:</p>\n<p><a href=\"/user_uploads/4715/iSRNXdGkAqQihGBmtWRqbSBt/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/iSRNXdGkAqQihGBmtWRqbSBt/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/iSRNXdGkAqQihGBmtWRqbSBt/image.png\"></a></div><p>May be helpful to avoid similar confusion in the future.</p>",
        "id": 227978907,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614367606
    },
    {
        "content": "<p>you actually can't do that on mobile</p>",
        "id": 227985710,
        "sender_full_name": "Lokathor",
        "timestamp": 1614370307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/Unpoisoning.20mutex/near/227985710\">said</a>:</p>\n<blockquote>\n<p>you actually can't do that on mobile</p>\n</blockquote>\n<p>You can, in the browser</p>",
        "id": 227992772,
        "sender_full_name": "LaurenÈ›iu",
        "timestamp": 1614373022
    },
    {
        "content": "<p>I mean, the site works well enough in a mobile browser that I skipped the app</p>",
        "id": 228038524,
        "sender_full_name": "LaurenÈ›iu",
        "timestamp": 1614408168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/122651-general/topic/Unpoisoning.20mutex/near/227969555\">said</a>:</p>\n<blockquote>\n<p>Right, as you two already covered, i was responding to the \"you can never recover from poison\" argument. Which is clearly wrong. You don't even know if the panic happened on protected data or if it happened with other code while the lock just happened to be held.</p>\n</blockquote>\n<p>I don't think that \"you can never recover from poison\" is correct, but if you could just unset the poison flag then you could get access to the data of type <code>T</code> again, which might violate library invariants on the data, which may or may not be promoted to safety invariants through the use of otherwise reasonable unsafe code behind a module abstraction. I think it should be okay to leverage the interior mutability to reset the state, i.e. reset the flag and replace the inner <code>T</code> with a provided value, but if you want to access the corrupted <code>T</code> value that should probably be an unsafe function</p>",
        "id": 228040228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614410247
    },
    {
        "content": "<p>but you can <em>already</em> do that with the error's into_inner method, as a safe function.</p>",
        "id": 228060395,
        "sender_full_name": "Lokathor",
        "timestamp": 1614434714
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/sync/struct.PoisonError.html#method.into_inner\">https://doc.rust-lang.org/std/sync/struct.PoisonError.html#method.into_inner</a></p>",
        "id": 228060472,
        "sender_full_name": "Lokathor",
        "timestamp": 1614434785
    },
    {
        "content": "<p>So any code that relies on a mutex invariant for safety is already wrong.</p>",
        "id": 228060518,
        "sender_full_name": "Lokathor",
        "timestamp": 1614434853
    },
    {
        "content": "<p>Those functions should have warnings on them similar to <code>AssertUnwindSafe</code>, which is also not actually unsafe</p>",
        "id": 228118763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614504873
    },
    {
        "content": "<p>In fact this might even be the exact same invariant as unwind safety</p>",
        "id": 228118855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614504974
    },
    {
        "content": "<p><code>AssertUnwindSafe</code> is a poorly named thing.</p>",
        "id": 228161939,
        "sender_full_name": "Lokathor",
        "timestamp": 1614551621
    }
]