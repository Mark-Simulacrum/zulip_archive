[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the <code>constinit</code> proposal states that iff the initializer would need to execute at run-time, the program is ill-formed</p>",
        "id": 159499385,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551265117
    },
    {
        "content": "<p>so maybe if you try to do that in C++ you just get a compilation error in the particular cases in which initializing a static variable from a constant-expression would need to heap-allocate.</p>",
        "id": 159499422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551265166
    },
    {
        "content": "<p>feels a bit brittle, but the proposals do not talk about each other yet - I've asked in the future_proposal channel of the C++ slack about it and pinged both authors</p>",
        "id": 159499501,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551265221
    },
    {
        "content": "<p>kk</p>",
        "id": 159499871,
        "sender_full_name": "RalfJ",
        "timestamp": 1551265677
    },
    {
        "content": "<p><code>constinit</code> seems closest to Rust's <code>const</code></p>",
        "id": 159499922,
        "sender_full_name": "RalfJ",
        "timestamp": 1551265712
    },
    {
        "content": "<p>I wonder if maybe it should have been more like <code>constexpr</code>, but I am not sure if that would actually help much here</p>",
        "id": 159499940,
        "sender_full_name": "RalfJ",
        "timestamp": 1551265738
    },
    {
        "content": "<p>(Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> )</p>",
        "id": 159499950,
        "sender_full_name": "RalfJ",
        "timestamp": 1551265745
    },
    {
        "content": "<p>honestly the more i look into it, the more I think those who want constinit should just use <code>constexpr</code></p>",
        "id": 159500628,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551266423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">constexpr</span> <span class=\"k\">auto</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">maybe_allocates</span><span class=\"p\">();</span>\n<span class=\"n\">constinit</span> <span class=\"k\">static</span> <span class=\"k\">auto</span> <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">;</span> <span class=\"c1\">// OK unless foo allocated at compile-time</span>\n</pre></div>\n\n\n<p>seems brittle.</p>",
        "id": 159500679,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551266516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> reading some of the minutes from the last C++ meeting, it seems that they just banned non-transient allocations</p>",
        "id": 159506142,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551271635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> from <code>constinit</code>, or entirely?</p>",
        "id": 159516399,
        "sender_full_name": "RalfJ",
        "timestamp": 1551276380
    },
    {
        "content": "<p>entirely</p>",
        "id": 159516414,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551276393
    },
    {
        "content": "<p>allocations cannot escape <code>constexpr</code> functions, e.g., you can return an empty vector or string from a <code>constexpr</code> function, but not one that refers to some memory during constant-evaluation (at run-time it would work)</p>",
        "id": 159516582,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551276456
    },
    {
        "content": "<p>oh, so that would mean the paper <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> referenced is obsolete?</p>",
        "id": 159516791,
        "sender_full_name": "RalfJ",
        "timestamp": 1551276559
    },
    {
        "content": "<p>could you post a link to that in the issue?</p>",
        "id": 159516822,
        "sender_full_name": "RalfJ",
        "timestamp": 1551276571
    },
    {
        "content": "<p>there is no link</p>",
        "id": 159519390,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551277975
    },
    {
        "content": "<p>the meeting was this week, that was agreed there<br>\nthere might be an updated paper in the post-meeting mailing , but those are not out yet</p>",
        "id": 159519451,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551278033
    },
    {
        "content": "<p>if non-transient allocations are allowed (in C++23), initializing a <code>constinit</code> from a constant-expression that refers to them would just be ill-formed</p>",
        "id": 159519523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551278064
    },
    {
        "content": "<blockquote>\n<p>there is no link</p>\n</blockquote>\n<p>wait where did you get the minutes then?</p>",
        "id": 159519549,
        "sender_full_name": "RalfJ",
        "timestamp": 1551278080
    },
    {
        "content": "<p><code>constinit</code> is useful so that you never get static initialization order fiasco</p>",
        "id": 159524937,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551281973
    },
    {
        "content": "<p>Rust doesn't have this problem, because it's statics are always initialized at compile time</p>",
        "id": 159525042,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551282014
    },
    {
        "content": "<p>but C++'s statics can be initialized at runtime</p>",
        "id": 159525056,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551282026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> doesnâ€™t constexpr already guarantee that?</p>",
        "id": 159525443,
        "sender_full_name": "nagisa",
        "timestamp": 1551282295
    },
    {
        "content": "<p><code>constexpr T myglobal { ... }</code> is what I used.</p>",
        "id": 159525482,
        "sender_full_name": "nagisa",
        "timestamp": 1551282313
    },
    {
        "content": "<p>I guess that makes <code>myglobal</code> const.</p>",
        "id": 159525500,
        "sender_full_name": "nagisa",
        "timestamp": 1551282322
    },
    {
        "content": "<p>yeah</p>",
        "id": 159526849,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551283299
    },
    {
        "content": "<p>you can't have non-const constexpr variables</p>",
        "id": 159526933,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551283340
    },
    {
        "content": "<blockquote>\n<p>wait where did you get the minutes then?</p>\n</blockquote>\n<p>Obviously gnzlbg has bugged the standards meeting.</p>",
        "id": 159530720,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1551285719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> Rust does not have C++ static, Rust statics are C++ <code>constinit</code></p>",
        "id": 159535582,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551289336
    },
    {
        "content": "<p>yes</p>",
        "id": 159535586,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551289347
    },
    {
        "content": "<p>that is what I said</p>",
        "id": 159535601,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551289359
    },
    {
        "content": "<p>i think it would be fine to just fail when trying to initialize a Rust variable with a const fn that allows allocations to escape</p>",
        "id": 159538171,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <a href=\"https://www.reddit.com/r/cpp/comments/au0c4x/201902_kona_iso_c_committee_trip_report_c20/\" target=\"_blank\" title=\"https://www.reddit.com/r/cpp/comments/au0c4x/201902_kona_iso_c_committee_trip_report_c20/\">https://www.reddit.com/r/cpp/comments/au0c4x/201902_kona_iso_c_committee_trip_report_c20/</a> makes it seem like <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r5.html\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r5.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r5.html</a> was accepted</p>",
        "id": 159538413,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551291285
    },
    {
        "content": "<p>it wasn't yet merged but that's editorial</p>",
        "id": 159538429,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551291298
    },
    {
        "content": "<p>it was accepted with modifications, in particular, non-transient allocations were removed</p>",
        "id": 159538450,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291309
    },
    {
        "content": "<p>\"Allow constexpr allocation, but disallow allocations that are not deleted at compile time.\" I think that's what they mean by \"disallow allocations not deleted at compile-time\"</p>",
        "id": 159538508,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291361
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 159538562,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551291373
    },
    {
        "content": "<p>the reason was \"there is not enough time\"</p>",
        "id": 159538581,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291391
    },
    {
        "content": "<p>well, I still think it's a useful thing to pay attention to, since I'm fairly certain that it will be added in 23, then</p>",
        "id": 159538586,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551291394
    },
    {
        "content": "<p>maybe they try to propose a good solution for the next meeting</p>",
        "id": 159538608,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291420
    },
    {
        "content": "<p>but they might do in a separate paper, to not block that one</p>",
        "id": 159538638,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291436
    },
    {
        "content": "<p>it seems that this meeting was the first time that this paper was really reviewed, and that a lot of people had problems trying to understand what the problem actually was</p>",
        "id": 159538675,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291470
    },
    {
        "content": "<p>I'm not sure I understand all the problems discussed, but I think this is the crux of it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">constexpr</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">();</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n</pre></div>",
        "id": 159538764,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291506
    },
    {
        "content": "<p>(note: if you replace <code>constexpr</code> with <code>const</code> this compiles and works fine in C++ today)</p>",
        "id": 159538829,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551291553
    },
    {
        "content": "<p>mmh</p>",
        "id": 159539252,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551291808
    },
    {
        "content": "<p>isn't that the point of <code>mark_immutable_in_constexpr</code>?</p>",
        "id": 159539268,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551291822
    },
    {
        "content": "<p>so that you can mark, say, <code>vector</code>'s buffer as immutable, but not <code>unique_ptr</code>s</p>",
        "id": 159539287,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551291839
    },
    {
        "content": "<p>if the <code>unique_ptr</code>s landed there, they must be pointing to immutable memory as well, right?<br>\nso one would somehow need to also mark the memory of the <code>unique_ptr</code> as immutable</p>",
        "id": 159561085,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551307957
    },
    {
        "content": "<p>also, the example above should error at compile-time, but for that you need to prove that the code modifies immutable memory at compile-time</p>",
        "id": 159561205,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551308059
    },
    {
        "content": "<p>that's not easy because <code>*v.get(0) = 42</code> is \"ok\" because <code>const</code> is shallow: the pointers in the vector are <code>const</code>, but the memory that they refer to does not get the <code>const</code> propagated to it in the type system</p>",
        "id": 159561353,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551308225
    },
    {
        "content": "<p>so AFAICT one would need to insert run-time checks for this, as in <code>*v.get(0) = 42</code> could try to modify read-only memory if it were to get executed</p>",
        "id": 159561438,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551308300
    },
    {
        "content": "<p>no, because you can also put stuff into rwmem</p>",
        "id": 159626849,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551369836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> but you can't free static rwmem</p>",
        "id": 159630201,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551372206
    },
    {
        "content": "<p>so if you have a <code>constexpr vector&lt;unique_ptr&lt;string&gt;&gt; v = ...;</code>, where the <code>string</code> and its contents are in read-write memory, you could write <code>*v.get(0) = to_string('on the heap\"); </code>, which would destroy the string in rw memory, and create a new one, whose content is now in the heap</p>",
        "id": 159630414,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551372341
    },
    {
        "content": "<p>the problem there is destroying the string, whose pointer points to the rw memory</p>",
        "id": 159630486,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551372384
    },
    {
        "content": "<p>if the destructor tries to free the memory, the behavior is undefined</p>",
        "id": 159630508,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551372411
    },
    {
        "content": "<p>so the destructor needs a way to tell, whether the memory should be freed or not</p>",
        "id": 159630524,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551372427
    },
    {
        "content": "<p>that's arguably a useful thing to allow, but at the same time every destructor now needs to do this</p>",
        "id": 159630562,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551372481
    },
    {
        "content": "<p>also, run-time code needs to be able to perform this check (given a pointer and a length, is that memory region completely or partially in rw static memory?), so now all code pays for this check</p>",
        "id": 159630703,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551372595
    },
    {
        "content": "<p>mmmmh</p>",
        "id": 159631260,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551373000
    },
    {
        "content": "<p>okay</p>",
        "id": 159631262,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551373003
    },
    {
        "content": "<p>yeah I see</p>",
        "id": 159631268,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551373005
    }
]