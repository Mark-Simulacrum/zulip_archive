[
    {
        "content": "<p>The <a href=\"https://docs.rs/safe_arch/0.3.0/safe_arch/\">safe_arch</a> crate is now at 0.3 and is ready for a good \"kick the tires\" test run.</p>\n<p>Supported:</p>\n<ul>\n<li>all the 128-bit SIMD</li>\n<li>AVX but not AVX2</li>\n<li>Many of the non-SIMD CPU special ops.</li>\n</ul>",
        "id": 197621375,
        "sender_full_name": "Lokathor",
        "timestamp": 1589492118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Just to make sure, the bit saying \"Intel (x86 / x86_64) \" is actually false, right? It supports AMD I assume as well?</p>",
        "id": 197621536,
        "sender_full_name": "simulacrum",
        "timestamp": 1589492191
    },
    {
        "content": "<p>oh yeah, i always forget about AMD being a thing XD.</p>\n<p>Yes it's all x86 / x86_64</p>",
        "id": 197621590,
        "sender_full_name": "Lokathor",
        "timestamp": 1589492228
    },
    {
        "content": "<p>Docs are fixed in <code>0.3.1</code> ;3</p>",
        "id": 197621751,
        "sender_full_name": "Lokathor",
        "timestamp": 1589492340
    },
    {
        "content": "<p>Technically, VIA is still a thing too, as are some other x86 vendors, they're just uncommon. You might consider \"x86 and x86-64 (Intel, AMD, etc)\".</p>",
        "id": 197627311,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589495942
    },
    {
        "content": "<p>&lt;/nit&gt;</p>",
        "id": 197627320,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589495948
    },
    {
        "content": "<p>Also, a request for the documentation:</p>",
        "id": 197627443,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496045
    },
    {
        "content": "<p>For the benefit of people who <em>do</em> know the instruction they want, and don't know the name of the corresponding function, would you consider systematically including the instruction mnemonic in the documentation?</p>",
        "id": 197627493,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496090
    },
    {
        "content": "<p>That way, people can find it by searching.</p>",
        "id": 197627624,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496179
    },
    {
        "content": "<p>And, if they need to know the precise instruction semantics, they can also more easily look up the instruction in the SDM.</p>",
        "id": 197627744,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496248
    },
    {
        "content": "<p>Also, in the phrase \"Compliment Flag\", I think you wanted \"complement\"? But also, that isn't the name of a flag on x86. I think you mean \"carry flag\".</p>",
        "id": 197627922,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496394
    },
    {
        "content": "<p><a href=\"https://docs.rs/safe_arch/0.3.1/safe_arch/fn.test_mixed_ones_and_zeroes_m128i.html\">https://docs.rs/safe_arch/0.3.1/safe_arch/fn.test_mixed_ones_and_zeroes_m128i.html</a> is one place I saw that, and the corresponding instruction, <code>ptest</code>, uses the carry flag.</p>",
        "id": 197627952,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589496428
    },
    {
        "content": "<p>ah, good catch, yeah i meant carry</p>",
        "id": 197629018,
        "sender_full_name": "Lokathor",
        "timestamp": 1589497149
    },
    {
        "content": "<p>and yeah putting instruction name into the docs so that a search shows it would be good. so far ive only been using actual searches in the files via my editor, which works accurately, but rustdoc doesn't search source of course.</p>",
        "id": 197629158,
        "sender_full_name": "Lokathor",
        "timestamp": 1589497216
    },
    {
        "content": "<p>The instructions aren't necessarily in the sources, either, as far as I can tell.</p>",
        "id": 197629200,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589497248
    },
    {
        "content": "<p><code>test_mixed_ones_and_zeroes_m128i</code>calls <code>_mm_test_mix_ones_zeros</code> (a name which might also want to be in the docs), but doesn't mention the underlying <code>ptest</code> instruction.</p>",
        "id": 197629236,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589497288
    },
    {
        "content": "<p>ahhh... did you mean you want the <em>assembly</em> as well as the intrinsic name?</p>",
        "id": 197629240,
        "sender_full_name": "Lokathor",
        "timestamp": 1589497290
    },
    {
        "content": "<p>okay, right, can probably do that over time.</p>",
        "id": 197629262,
        "sender_full_name": "Lokathor",
        "timestamp": 1589497310
    },
    {
        "content": "<p>Yeah, I meant the instruction mnemonic. The intrinsic name would be useful, but I was originally thinking of the instruction mnemonic. :)</p>",
        "id": 197629269,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589497314
    },
    {
        "content": "<p>For the intrinsic name and assembly op i opened a new issue here, <a href=\"https://github.com/Lokathor/safe_arch/issues/49\">https://github.com/Lokathor/safe_arch/issues/49</a>, but that particular thing will probably be a slow, slow task. I'll probably experiment with it some as I put in the new avx2 things and then go back and revise previous entries later.</p>",
        "id": 197629868,
        "sender_full_name": "Lokathor",
        "timestamp": 1589497716
    },
    {
        "content": "<p>I appreciate it, thank you. Would have helped me track down the flag that that instruction actually used. :)</p>",
        "id": 197629871,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589497719
    },
    {
        "content": "<p>This is something I <em>hope</em> you'd be able to partially automate.</p>",
        "id": 197629886,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589497733
    },
    {
        "content": "<p>Intrinsic name, yes, assembly instruction, probably not easily.</p>\n<p>At least right now the crate is 0% automated.</p>",
        "id": 197629932,
        "sender_full_name": "Lokathor",
        "timestamp": 1589497774
    },
    {
        "content": "<p>The data at <a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/</a> includes the names of the underlying instructions.</p>",
        "id": 197630065,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589497867
    },
    {
        "content": "<p>Right, that's what i've been using so far, but I don't have an easy way to scrape the page to associate an intrinsic name with an assembly op.</p>",
        "id": 197630153,
        "sender_full_name": "Lokathor",
        "timestamp": 1589497947
    },
    {
        "content": "<p>The raw data is around <em>somewhere</em>...</p>",
        "id": 197630187,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498009
    },
    {
        "content": "<p><a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/files/data-3.5.0.xml\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/files/data-3.5.0.xml</a></p>",
        "id": 197630290,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498073
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">&lt;intrinsic</span> <span class=\"na\">tech=</span><span class=\"s\">&quot;SSE4.1&quot;</span> <span class=\"na\">vexEq=</span><span class=\"s\">&quot;TRUE&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;_mm_test_mix_ones_zeros&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>Integer<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>Flag<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;CPUID&gt;</span>SSE4.1<span class=\"nt\">&lt;/CPUID&gt;</span>\n        <span class=\"nt\">&lt;category&gt;</span>Logical<span class=\"nt\">&lt;/category&gt;</span>\n        <span class=\"nt\">&lt;return</span> <span class=\"na\">type=</span><span class=\"s\">&quot;int&quot;</span> <span class=\"na\">varname=</span><span class=\"s\">&quot;dst&quot;</span> <span class=\"na\">etype=</span><span class=\"s\">&quot;UI32&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;parameter</span> <span class=\"na\">type=</span><span class=\"s\">&quot;__m128i&quot;</span> <span class=\"na\">varname=</span><span class=\"s\">&quot;a&quot;</span> <span class=\"na\">etype=</span><span class=\"s\">&quot;M128&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;parameter</span> <span class=\"na\">type=</span><span class=\"s\">&quot;__m128i&quot;</span> <span class=\"na\">varname=</span><span class=\"s\">&quot;mask&quot;</span> <span class=\"na\">etype=</span><span class=\"s\">&quot;M128&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;description&gt;</span>Compute the bitwise AND of 128 bits (representing integer data) in &quot;a&quot; and &quot;mask&quot;, and set &quot;ZF&quot; to 1 if the result is zero, otherwise set &quot;ZF&quot; to 0. Compute the bitwise NOT of &quot;a&quot; and then AND with &quot;mask&quot;, and set &quot;CF&quot; to 1 if the result is zero, otherwise set &quot;CF&quot; to 0. Return 1 if both the &quot;ZF&quot; and &quot;CF&quot; values are zero, otherwise return 0.<span class=\"nt\">&lt;/description&gt;</span>\n        <span class=\"nt\">&lt;operation&gt;</span>\nIF ((a[127:0] AND mask[127:0]) == 0)\n        ZF := 1\nELSE\n        ZF := 0\nFI\nIF (((NOT a[127:0]) AND mask[127:0]) == 0)\n        CF := 1\nELSE\n        CF := 0\nFI\nIF (ZF == 0 <span class=\"ni\">&amp;amp;&amp;amp;</span> CF == 0)\n        dst := 1\nELSE\n        dst := 0\nFI\n        <span class=\"nt\">&lt;/operation&gt;</span>\n        <span class=\"nt\">&lt;instruction</span> <span class=\"na\">name=</span><span class=\"s\">&quot;PTEST&quot;</span> <span class=\"na\">form=</span><span class=\"s\">&quot;xmm, xmm&quot;</span> <span class=\"na\">xed=</span><span class=\"s\">&quot;PTEST_XMMdq_XMMdq&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;header&gt;</span>smmintrin.h<span class=\"nt\">&lt;/header&gt;</span>\n<span class=\"nt\">&lt;/intrinsic&gt;</span>\n</code></pre></div>",
        "id": 197630350,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498138
    },
    {
        "content": "<p>iiiiiinteresting.</p>",
        "id": 197630393,
        "sender_full_name": "Lokathor",
        "timestamp": 1589498162
    },
    {
        "content": "<p>Digging around, I don't see any actual <em>license</em> attached to that data, unfortunately. So the descriptions shouldn't be directly reused. But you could at least get the mapping data from that.</p>",
        "id": 197630462,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498219
    },
    {
        "content": "<p>And you could <em>link</em> to the intrinsics guide, like the built-in intrinsics do.</p>",
        "id": 197630603,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498294
    },
    {
        "content": "<p>Hope that helps. :)</p>",
        "id": 197630681,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498361
    },
    {
        "content": "<p>Yeah, I mean in general their descriptions of the operations range between \"okay\" and \"what the heck?\", but being able to easily check the assembly helps.</p>",
        "id": 197630734,
        "sender_full_name": "Lokathor",
        "timestamp": 1589498398
    },
    {
        "content": "<p>Yeah, these are operational descriptions, which don't necessarily make good documentation. :)</p>",
        "id": 197630807,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498425
    },
    {
        "content": "<p>But the data would help you check the assembly instruction, as well as confirming the types and making sure they correspond to your naming scheme (because this kind of thing is <em>really</em> prone to copy-paste issues).</p>",
        "id": 197630995,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498589
    },
    {
        "content": "<p>tiny copy-paste bugs are knows as \"doing a loka\" in some parts of the Rust Discord universe.</p>",
        "id": 197631098,
        "sender_full_name": "Lokathor",
        "timestamp": 1589498656
    },
    {
        "content": "<p>My sympathies.</p>",
        "id": 197631121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498685
    },
    {
        "content": "<p>A few other bits of feedback:</p>",
        "id": 197631452,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589498980
    },
    {
        "content": "<p>The general term <code>blend</code> should be defined along with the other verbs you have a glossary for (and thank you for that glossary!).</p>",
        "id": 197631475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499001
    },
    {
        "content": "<p>The explicit <code>shift_left</code> and <code>shift_right</code> seem rather verbose; even Rust's own traits abbreviate those as <code>shl</code> and <code>shr</code>. I think as long as you have them both mentioned in the glossary, and keep them separated from other words in the name with <code>_</code>, they'll be quite readable to people. And avoiding that bit of verbosity seems likely to substantially help with over-wide lines that can themselves reduce readability.</p>",
        "id": 197631764,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499203
    },
    {
        "content": "<p>Defining <code>permute</code> and <code>shuffle</code> (and contrasting the differences) would help.</p>",
        "id": 197631848,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499251
    },
    {
        "content": "<p>yeah, shl and shr are probably better names. In 0.2 the names were even longer actually, because they also had \"immediate\" in there. The lib has enough macros at this point that people will probably end up coming to grips with \"macro means there's an immediate involved\" on their own, though i'd like to make that clearer probably. Some of the early macros said \"this is a macro because it needs to be a compile time const\" but the most recent macros started to shift away from that.</p>",
        "id": 197632030,
        "sender_full_name": "Lokathor",
        "timestamp": 1589499438
    },
    {
        "content": "<p>Also, a typo:</p>\n<div class=\"codehilite\"><pre><span></span><code>convert_i16_lower2_to_i64_m128i\n\nConvert the lower two i16 lanes to two i32 lanes.\n</code></pre></div>",
        "id": 197632289,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499679
    },
    {
        "content": "<p>That should be <code>two i64 lanes</code>, right?</p>",
        "id": 197632295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499686
    },
    {
        "content": "<p>ah, yes, doc text falls to copy-paste bugs the most because <code>cargo test</code> sadly doesn't (yet?) check your words themselves.</p>",
        "id": 197632452,
        "sender_full_name": "Lokathor",
        "timestamp": 1589499811
    },
    {
        "content": "<p>:)</p>",
        "id": 197632536,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499851
    },
    {
        "content": "<p>There's one thing you could probably check: if the summary line of your docs mention a type that the function name doesn't (counting the implicit things like <code>m128d</code> implying two <code>f64</code> values).</p>",
        "id": 197632581,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589499895
    },
    {
        "content": "<p>One future plan is to re-review every single function in <em>random</em> order (a few at a time) so that (hopefully) each individual function has to fully stand on its own without the brain just assuming the context from the previous similar function.</p>",
        "id": 197632725,
        "sender_full_name": "Lokathor",
        "timestamp": 1589499996
    },
    {
        "content": "<p>That might help. That's roughly how I caught this.</p>",
        "id": 197632747,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500016
    },
    {
        "content": "<p>(Also, as an aside, the whole <code>lower2</code> and <code>lower4</code> naming is a <em>great</em> clarification.)</p>",
        "id": 197632764,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500031
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/Lokathor/safe_arch/commit/24f28a9aa43493ec982967a7222fb0eaacf02d48\">https://github.com/Lokathor/safe_arch/commit/24f28a9aa43493ec982967a7222fb0eaacf02d48</a> , please don't link directly to the versioned XML; that's versioned, and there may be a newer version. If you're going to link to the versioned XML file, please at least include a note that there may be a newer version, and put in your release procedure to check for a newer version. :)</p>",
        "id": 197632910,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500180
    },
    {
        "content": "<p>ah, hmm, well how did you find the 3.5 version?</p>",
        "id": 197633001,
        "sender_full_name": "Lokathor",
        "timestamp": 1589500235
    },
    {
        "content": "<p>Browser console. :/</p>",
        "id": 197633014,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500247
    },
    {
        "content": "<p><a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/files/ReleaseNotes.html\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/files/ReleaseNotes.html</a> will tell you the current version number, though.</p>",
        "id": 197633025,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500260
    },
    {
        "content": "<p>And you can edit the URL accordingly.</p>",
        "id": 197633041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500267
    },
    {
        "content": "<p>There <em>really</em> should be a \"latest\" URL. :(</p>",
        "id": 197633159,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500336
    },
    {
        "content": "<p>alright readme should be better now.</p>",
        "id": 197633214,
        "sender_full_name": "Lokathor",
        "timestamp": 1589500391
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 197633266,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500440
    },
    {
        "content": "<p>I think that the naming gets easier the more you know about every single operation available, so i have a lot of sympathy for whoever had to name some of the early sse stuff without really knowing what would eventually exist later on.</p>",
        "id": 197633311,
        "sender_full_name": "Lokathor",
        "timestamp": 1589500450
    },
    {
        "content": "<p><a href=\"https://twitter.com/x86instructions\">https://twitter.com/x86instructions</a></p>",
        "id": 197633350,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589500496
    },
    {
        "content": "<p>0.4 published, up through avx2 now.</p>\n<p>Probably will need much more docs and some breaking changes on the names to bring it all together consistently, but file issues if you see them.</p>",
        "id": 201024442,
        "sender_full_name": "Lokathor",
        "timestamp": 1592318196
    }
]