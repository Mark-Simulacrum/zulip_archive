[
    {
        "content": "<p>Is there a way to have a version of the <code>env!</code> macro that returns a <code>&amp;'static OsStr</code> rather than a <code>&amp;'static str</code>? The purpose would be to avoid breaking if a compile-time environment variable contains invalid UTF-8.</p>",
        "id": 242970401,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623902675
    },
    {
        "content": "<p>There isn't right now, but it's been discussed. I'd happily support a PR adding that.</p>",
        "id": 242970644,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623902941
    },
    {
        "content": "<p>I originally noticed this because everyone seems to use <code>env!(\"OUT_DIR\")</code> to refer to outputs from a Cargo build script, which seems like it would completely break if someone has a home directory containing invalid UTF-8. To be clear, I have no particular reason to create a home directory with invalid UTF-8. But in general it seems like it's not great to have undocumented edge cases where everything suddenly breaks.</p>",
        "id": 242970647,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623902945
    },
    {
        "content": "<p><code>env_os!</code>, or perhaps <code>env_path!</code> for convenience.</p>",
        "id": 242970659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623902975
    },
    {
        "content": "<p>Hrm, this seems tricky. The representation of <code>OsStr</code> isn't always going to be the same on the host and the target, but a macro like <code>env!</code> can only spit out host stuff</p>",
        "id": 242972921,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623905826
    },
    {
        "content": "<p>That's true. Personally, in the case of <code>OUT_DIR</code>, I'm using <code>include_bytes!(concat!(env!(\"OUT_DIR\"), \"/foo\"))</code>, so I really do want a host <code>OsStr</code> since I'm trying to resolve paths on the host. (Although thinking about it more, it seems like that won't work with a hypothetical <code>env_os!</code> anyway since <code>include_bytes!</code> and <code>concat!</code> take strings.)</p>",
        "id": 242975629,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623908963
    },
    {
        "content": "<p>oh, since this is about building in non-unicode paths, IIRC that already doesn't work</p>",
        "id": 242978386,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623911935
    },
    {
        "content": "<p>something about path serialization in serde? i remember digging throuhg it a while ago</p>",
        "id": 242978437,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623911994
    },
    {
        "content": "<p>Given how widespread <code>env!(\"OUT_DIR\")</code> seems to be, I'm not surprised that lots of crates wouldn't work in that scenario (although I'm not sure of the cause of the specific issue you're referring to).</p>",
        "id": 242978626,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623912173
    },
    {
        "content": "<p>But ideally there would be a way to update those crates in the long term such that they wouldn't be broken for that case. (Whether it's worth the effort is still an open question.)</p>",
        "id": 242978716,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623912259
    },
    {
        "content": "<p>no, sorry, what i mean is, iirc just cargo breaks if you actually try this (that is, without any code performing <code>env!(\"OUT_DIR\")</code>). i dont remember all the details, but when i looked into it, it seemed like you needed a way to represent these paths in <code>toml</code>, which, well, toml strings need to be UTF-8.</p>",
        "id": 242978889,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623912427
    },
    {
        "content": "<p>I guess I would argue that that's a bug in cargo that would ideally be fixed (although it's very much an edge case and everyone understandably has more important things to work on).</p>",
        "id": 242979157,
        "sender_full_name": "Teddy Katz",
        "timestamp": 1623912643
    },
    {
        "content": "<p>that's probably true, but it indicates the relative priority here. Also, again, these macros probably can't produce OsStr/Path actually, since those refer to target paths. so fixing this could be pretty involved â€” you'd need a new path type that refers to paths on the host... it's probably easier just to use strings, and to expect that while users may have cursed directory trees, at least developers can be expected to clean theirs up</p>",
        "id": 242981297,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623914353
    },
    {
        "content": "<p>I was going to say that type returned probably doesn't matter all that much, as long as rustc is able to not lose information in the roundtrip.</p>",
        "id": 242995786,
        "sender_full_name": "nagisa",
        "timestamp": 1623924037
    },
    {
        "content": "<p>even if some new <code>env!</code> returns a byte literal, that'd be good enough, probably (and also wouldn't require wiring up the concept of OsStr as defined in libstd to the compiler implementation)</p>",
        "id": 242995846,
        "sender_full_name": "nagisa",
        "timestamp": 1623924087
    },
    {
        "content": "<p>Still needs some reasonable behaviour on Windows though. Does it produce UTF-16 bytes? wtf-8 bytes?</p>",
        "id": 242995928,
        "sender_full_name": "nagisa",
        "timestamp": 1623924126
    },
    {
        "content": "<p>The latter I think. Same as a command-line argument.</p>",
        "id": 243050269,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623949366
    },
    {
        "content": "<p>i thought exposing the encoding of WTF8 was forbidden (to the point where the crate for it on <a href=\"http://crates.io\">crates.io</a> adamantly refuses to do so as well)</p>",
        "id": 243073444,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623959060
    }
]