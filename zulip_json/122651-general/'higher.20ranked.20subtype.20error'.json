[
    {
        "content": "<p>I've run into this error a couple times in the last week and I'm trying to figure it out. The first time was <a href=\"https://github.com/raphlinus/pulldown-cmark/issues/509\">https://github.com/raphlinus/pulldown-cmark/issues/509</a>, and I figured out why my code didn't work, but not what the error was trying to tell me. The second time is just now, I made the following change to rustdoc:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/lib.rs b/src/librustdoc/lib.rs</span>\n<span class=\"gh\">index 286a29edd95..60aa6485c7a 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/lib.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/lib.rs</span>\n<span class=\"gu\">@@ -117,21 +117,9 @@ fn get_args() -&gt; Option&lt;Vec&lt;String&gt;&gt; {</span>\n         .collect()\n }\n\n<span class=\"gd\">-fn stable&lt;F&gt;(name: &amp;'static str, f: F) -&gt; RustcOptGroup</span>\n<span class=\"gd\">-where</span>\n<span class=\"gd\">-    F: Fn(&amp;mut getopts::Options) -&gt; &amp;mut getopts::Options + 'static,</span>\n<span class=\"gd\">-{</span>\n<span class=\"gd\">-    RustcOptGroup::stable(name, f)</span>\n<span class=\"gd\">-}</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-fn unstable&lt;F&gt;(name: &amp;'static str, f: F) -&gt; RustcOptGroup</span>\n<span class=\"gd\">-where</span>\n<span class=\"gd\">-    F: Fn(&amp;mut getopts::Options) -&gt; &amp;mut getopts::Options + 'static,</span>\n<span class=\"gd\">-{</span>\n<span class=\"gd\">-    RustcOptGroup::unstable(name, f)</span>\n<span class=\"gd\">-}</span>\n<span class=\"gd\">-</span>\n fn opts() -&gt; Vec&lt;RustcOptGroup&gt; {\n<span class=\"gi\">+    let stable: fn(_, fn(&amp;mut getopts::Options) -&gt; _) -&gt; _ = RustcOptGroup::stable;</span>\n<span class=\"gi\">+    let unstable: fn(_, fn(&amp;mut getopts::Options) -&gt; _) -&gt; _ = RustcOptGroup::unstable;</span>\n     vec![\n         stable(\"h\", |o| o.optflag(\"h\", \"help\", \"show this help message\")),\n         stable(\"V\", |o| o.optflag(\"V\", \"version\", \"print rustdoc's version\")),\n</code></pre></div>\n<p>(I can't just <code>use</code> the functions because they're associated on a type, booo).</p>\n<p>That gives errors like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: lifetime may not live long enough\n   --&gt; src/librustdoc/lib.rs:436:31\n    |\n436 |         unstable(&quot;check&quot;, |o| o.optflag(&quot;&quot;, &quot;check&quot;, &quot;Run rustdoc checks&quot;)),\n    |                            -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `&#39;1` must outlive `&#39;2`\n    |                            ||\n    |                            |return type of closure is &amp;&#39;2 mut rustc_session::getopts::Options\n    |                            has type `&amp;&#39;1 mut rustc_session::getopts::Options`\nerror: higher-ranked subtype error\n   --&gt; src/librustdoc/lib.rs:139:64\n    |\n139 |     let unstable: fn(_, fn(&amp;mut getopts::Options) -&gt; _) -&gt; _ = RustcOptGroup::unstable;\n    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>(plus another 64 times for each <code>unstable</code> call)</p>\n<p>What does this actually mean? Clearly it's not wrong code because it worked before. Is this a borrow checker limitation?</p>\n<p>For comparison, here's the error if I don't specify the type of the <code>let</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0282]: type annotations needed\n   --&gt; src/librustdoc/lib.rs:124:22\n    |\n124 |         stable(&quot;h&quot;, |o| o.optflag(&quot;h&quot;, &quot;help&quot;, &quot;show this help message&quot;)),\n    |                      ^ consider giving this closure parameter a type\n    |\n    = note: type must be known at this point\n</code></pre></div>",
        "id": 219771785,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607882034
    },
    {
        "content": "<p>I think the lifetime desugaring for <code>fn(&amp;mut getopts::Options) -&gt; _</code> is different than with the freestanding functions</p>",
        "id": 219776502,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1607887813
    },
    {
        "content": "<p>with the freestanding functions, the argument and return type of the <code>F</code> function get desugared to the same lifetime</p>",
        "id": 219776542,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1607887880
    },
    {
        "content": "<p>e.g. <code>F: for&lt;'a&gt; Fn(&amp;'a mut _) -&gt; &amp;'a mut _</code></p>",
        "id": 219776557,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1607887905
    },
    {
        "content": "<p>with the local variable function pointer, you're left the return type of the <code>fn(&amp;mut getopts::Options)</code> to be inferred</p>",
        "id": 219776621,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1607887970
    },
    {
        "content": "<p>which means that it won't get desugared to the higher-ranked lifetime used with the freestanding functions</p>",
        "id": 219776651,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1607888012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> What happens if you change the return type to <code>&amp;mut _</code></p>",
        "id": 219776721,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1607888077
    },
    {
        "content": "<p>(matthew is working on turning those inscrutable errors back to what they were prior to the universes and leak-check changes)</p>",
        "id": 219777830,
        "sender_full_name": "lqd",
        "timestamp": 1607889263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/122651-general/topic/'higher.20ranked.20subtype.20error'/near/219776721\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> What happens if you change the return type to <code>&amp;mut _</code></p>\n</blockquote>\n<p>omg that fixed it</p>",
        "id": 219778767,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607890342
    },
    {
        "content": "<p>ahhhh</p>",
        "id": 219778769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607890344
    },
    {
        "content": "<p>thank you so much!</p>",
        "id": 219778771,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607890347
    }
]