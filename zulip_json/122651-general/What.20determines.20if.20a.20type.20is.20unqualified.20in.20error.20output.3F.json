[
    {
        "content": "<p>If you run this on nightly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(auto_traits, negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">NotFeline</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Cat</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">CatCafe</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Cat</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Dog</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">NotFeline</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Cat</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">no_cats_allowed</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nc\">NotFeline</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">animal</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">no_cats_allowed</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">);</span><span class=\"w\">             </span><span class=\"c1\">// Should fail</span>\n<span class=\"w\">    </span><span class=\"n\">no_cats_allowed</span><span class=\"p\">(</span><span class=\"n\">CatCafe</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[]));</span><span class=\"w\"> </span><span class=\"c1\">// Should fail</span>\n<span class=\"w\">    </span><span class=\"n\">no_cats_allowed</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">);</span><span class=\"w\">             </span><span class=\"c1\">// Should be OK</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>You'll get this in the error output:</p>\n<div class=\"codehilite\" data-code-language=\"none\"><pre><span></span><code>   = note: required because it appears within the type `*const Cat`\n   = note: required because it appears within the type `Unique&lt;Cat&gt;`\n   = note: required because it appears within the type `alloc::raw_vec::RawVec&lt;Cat&gt;`\n   = note: required because it appears within the type `Vec&lt;Cat&gt;`\n   = note: required because it appears within the type `CatCafe`\n</code></pre></div>\n<p>Why is <code>Unique</code> unqualified here (second line of that error snippet)? It's not in scope for my code.</p>",
        "id": 231253391,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616375778
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73996\">https://github.com/rust-lang/rust/pull/73996</a> says</p>\n<blockquote>\n<p>If a symbol name can only be imported from one place, and as long as it was not glob-imported anywhere in the current crate, we can trim its printed path to the last component.</p>\n</blockquote>",
        "id": 231253474,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616375929
    },
    {
        "content": "<p>so it looks like it's because there's only one <code>Unique</code> in the standard library (<code>std::ptr::Unique</code>)</p>",
        "id": 231253487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616375964
    },
    {
        "content": "<p>hmm</p>",
        "id": 231253490,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616375972
    },
    {
        "content": "<p>I guess we'll see how that plays out.</p>",
        "id": 231253491,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616375993
    },
    {
        "content": "<p>And there are multiple <code>RawVec</code>?</p>",
        "id": 231253536,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616376009
    },
    {
        "content": "<p>probably <code>std::</code> and <code>alloc::</code> if I had to guess</p>",
        "id": 231253557,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616376038
    },
    {
        "content": "<p>maybe â€” yeah, that</p>",
        "id": 231253563,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616376047
    },
    {
        "content": "<p>although it seems weird since it's private in both</p>",
        "id": 231253583,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616376071
    },
    {
        "content": "<p>I'm a little surprised that <code>Unique</code> isn't lower than <code>std</code>.</p>",
        "id": 231253599,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1616376090
    },
    {
        "content": "<p>oh yeah I'm totally wrong, Unique is defined in <code>core</code></p>",
        "id": 231253611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616376112
    },
    {
        "content": "<p>I don't know why RawVec isn't abbreviated then</p>",
        "id": 231253614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616376118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ rg &#39;struct RawVec&#39; library/\nlibrary/alloc/src/raw_vec.rs\n49:pub struct RawVec&lt;T, A: Allocator = Global&gt; {\n$ rg &#39;struct Unique&#39; library/\nlibrary/core/src/ptr/unique.rs\n36:pub struct Unique&lt;T: ?Sized&gt; {\n</code></pre></div>",
        "id": 231253662,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616376163
    },
    {
        "content": "<p>Adding <code>extern crate alloc</code> can make it unqualified: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=829cde47d47e7f5027c302c5240f4ad9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=829cde47d47e7f5027c302c5240f4ad9</a><br>\nIt seems <code>RawVec</code> is not re-exported in <code>std</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">[library/std/src] $ </span>rg -F alloc::\n<span class=\"go\">alloc.rs</span>\n<span class=\"go\">17://! use std::alloc::{GlobalAlloc, System, Layout};</span>\n<span class=\"go\">70:pub use alloc_crate::alloc::*;</span>\n<span class=\"go\">81:/// use std::alloc::System;</span>\n<span class=\"go\">96:/// use std::alloc::{System, GlobalAlloc, Layout};</span>\n\n<span class=\"go\">error.rs</span>\n<span class=\"go\">22:use crate::alloc::{AllocError, LayoutError};</span>\n<span class=\"go\">591:impl Error for alloc::collections::TryReserveError {}</span>\n\n<span class=\"go\">lib.rs</span>\n<span class=\"go\">519:    pub use alloc::task::*;</span>\n\n<span class=\"go\">ffi/c_str.rs</span>\n<span class=\"go\">885:                //   - `alloc::Layout&lt;NonZeroU8&gt; == alloc::Layout&lt;u8&gt;`.</span>\n\n<span class=\"go\">io/impls.rs</span>\n<span class=\"go\">4:use crate::alloc::Allocator;</span>\n\n<span class=\"go\">sys_common/alloc.rs</span>\n<span class=\"go\">3:use crate::alloc::{GlobalAlloc, Layout, System};</span>\n\n<span class=\"go\">os/fortanix_sgx/mod.rs</span>\n<span class=\"go\">19:        pub use crate::sys::abi::usercalls::alloc::*;</span>\n\n<span class=\"go\">sys/hermit/alloc.rs</span>\n<span class=\"go\">1:use crate::alloc::{GlobalAlloc, Layout, System};</span>\n\n<span class=\"go\">sys/sgx/alloc.rs</span>\n<span class=\"go\">1:use crate::alloc::{GlobalAlloc, Layout, System};</span>\n<span class=\"go\">16:static DLMALLOC: SpinMutex&lt;dlmalloc::Dlmalloc&lt;Sgx&gt;&gt; =</span>\n<span class=\"go\">17:    SpinMutex::new(dlmalloc::Dlmalloc::new_with_allocator(Sgx {}));</span>\n<span class=\"go\">21:unsafe impl dlmalloc::Allocator for Sgx {</span>\n<span class=\"go\">91:    unsafe { crate::alloc::alloc(Layout::from_size_align_unchecked(size, align)) }</span>\n<span class=\"go\">97:    unsafe { crate::alloc::dealloc(ptr, Layout::from_size_align_unchecked(size, align)) }</span>\n\n<span class=\"go\">sys/sgx/args.rs</span>\n<span class=\"go\">16:        let args = unsafe { alloc::User::&lt;[ByteBuffer]&gt;::from_raw_parts(argv as _, argc as _) };</span>\n\n<span class=\"go\">sys/unix/alloc.rs</span>\n<span class=\"go\">1:use crate::alloc::{GlobalAlloc, Layout, System};</span>\n<span class=\"go\">3:use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};</span>\n\n<span class=\"go\">sys/unsupported/alloc.rs</span>\n<span class=\"go\">1:use crate::alloc::{GlobalAlloc, Layout, System};</span>\n\n<span class=\"go\">sys/wasm/alloc.rs</span>\n<span class=\"go\">19:use crate::alloc::{GlobalAlloc, Layout, System};</span>\n<span class=\"go\">21:static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::Dlmalloc::new();</span>\n\n<span class=\"go\">sys/windows/alloc.rs</span>\n<span class=\"go\">1:use crate::alloc::{GlobalAlloc, Layout, System};</span>\n<span class=\"go\">3:use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};</span>\n\n<span class=\"go\">sys/sgx/abi/panic.rs</span>\n<span class=\"go\">1:use super::usercalls::alloc::UserRef;</span>\n\n<span class=\"go\">sys/sgx/abi/usercalls/mod.rs</span>\n<span class=\"go\">21:        let mut userbuf = alloc::User::&lt;[u8]&gt;::uninitialized(total_len);</span>\n<span class=\"go\">43:        let mut userbuf = alloc::User::new_from_enclave(&amp;userbuf);</span>\n<span class=\"go\">57:        let mut userbuf = alloc::User::&lt;[u8]&gt;::uninitialized(total_len);</span>\n<span class=\"go\">84:fn string_from_bytebuffer(buf: &amp;alloc::UserRef&lt;ByteBuffer&gt;, usercall: &amp;str, arg: &amp;str) -&gt; String {</span>\n<span class=\"go\">93:        let addr_user = alloc::User::new_from_enclave(addr.as_bytes());</span>\n<span class=\"go\">94:        let mut local = alloc::User::&lt;ByteBuffer&gt;::uninitialized();</span>\n<span class=\"go\">106:        let mut bufs = alloc::User::&lt;[ByteBuffer; 2]&gt;::uninitialized();</span>\n<span class=\"go\">107:        let mut buf_it = alloc::UserRef::iter_mut(&amp;mut *bufs); // FIXME: can this be done</span>\n<span class=\"go\">122:        let addr_user = alloc::User::new_from_enclave(addr.as_bytes());</span>\n<span class=\"go\">123:        let mut bufs = alloc::User::&lt;[ByteBuffer; 2]&gt;::uninitialized();</span>\n<span class=\"go\">124:        let mut buf_it = alloc::UserRef::iter_mut(&amp;mut *bufs); // FIXME: can this be done</span>\n</code></pre></div>",
        "id": 231271577,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616398096
    }
]