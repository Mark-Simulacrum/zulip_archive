[
    {
        "content": "<p>Is there a <code>needs_drop</code> RFC somewhere ? I can't find it.</p>",
        "id": 175610528,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> you said:</p>\n<blockquote>\n<p>For types without a Drop impl it isn't correct as these types may have recursive drop glue due to fields having Drop impls (or at any level transitively).</p>\n</blockquote>\n<p>But <code>needs_drop</code> returns <code>true</code> for such types, and we guarantee that</p>",
        "id": 175610739,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370344
    },
    {
        "content": "<p>As in, <code>needs_drop</code> returns true if a type _needs drop glue_, independently of whether the type itself is <code>Drop</code> or not</p>",
        "id": 175610786,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370374
    },
    {
        "content": "<p>we don't guarantee <code>false</code> :P</p>",
        "id": 175610802,
        "sender_full_name": "centril",
        "timestamp": 1568370398
    },
    {
        "content": "<p>no?</p>",
        "id": 175610813,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370414
    },
    {
        "content": "<p>For which type does that fail ?</p>",
        "id": 175610826,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370425
    },
    {
        "content": "<p>how can we guarantee true and false at the same time?</p>",
        "id": 175610833,
        "sender_full_name": "centril",
        "timestamp": 1568370434
    },
    {
        "content": "<p>(I can't find an RFC)</p>",
        "id": 175610834,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370434
    },
    {
        "content": "<p>I don't understand the question</p>",
        "id": 175610852,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370461
    },
    {
        "content": "<p>If a type does not need drop glue, we return false, if it does, we return true</p>",
        "id": 175610863,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370478
    },
    {
        "content": "<p>are there types that both need and don't need drop glue, or types for which that cannot be computed ?</p>",
        "id": 175610927,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370499
    },
    {
        "content": "<p>The nomicon specifically defines types that need drop glue as \"needs drop\" types, so I'd supposed that <code>needs_drop</code> would implement the nomicon semantics</p>",
        "id": 175610952,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370546
    },
    {
        "content": "<p>The docs of <code>std::mem::needs_drop</code> do indeed say that the answer doesn't need to be accurate:</p>\n<blockquote>\n<p>This is purely an optimization hint, and may be implemented conservatively: it may return true for types that don't actually need to be dropped.</p>\n</blockquote>",
        "id": 175611057,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370646
    },
    {
        "content": "<p>This is the only place I can find with any discussion about this: <a href=\"https://github.com/rust-lang/rust/pull/41892\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/41892\">https://github.com/rust-lang/rust/pull/41892</a></p>",
        "id": 175611181,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> seems to suggest here that this is an implementation bug: <a href=\"https://github.com/rust-lang/rust/pull/41892#discussion_r116155381\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/41892#discussion_r116155381\">https://github.com/rust-lang/rust/pull/41892#discussion_r116155381</a></p>",
        "id": 175611214,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370839
    },
    {
        "content": "<p>No idea if there is an open issue tracking that bug</p>",
        "id": 175611275,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568370868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> we do not guarantee that a type with drop glue has <code>needs_drop::&lt;Type&gt;() == false</code></p>",
        "id": 175611620,
        "sender_full_name": "centril",
        "timestamp": 1568371297
    },
    {
        "content": "<p>why</p>",
        "id": 175611626,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371309
    },
    {
        "content": "<p>wait, that's correct</p>",
        "id": 175611680,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  I think you were mixing up true &amp; false</p>",
        "id": 175611691,
        "sender_full_name": "centril",
        "timestamp": 1568371347
    },
    {
        "content": "<p>types with drop glue should always have <code>needs_drop::&lt;Type&gt;() == true</code></p>",
        "id": 175611693,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371348
    },
    {
        "content": "<p>yes, correct</p>",
        "id": 175611698,
        "sender_full_name": "centril",
        "timestamp": 1568371354
    },
    {
        "content": "<p>which is what I was saying in the thing you quoted</p>",
        "id": 175611703,
        "sender_full_name": "centril",
        "timestamp": 1568371365
    },
    {
        "content": "<p>we don't guarantee that types _without_ drop glue have <code>needs_drop::&lt;Type&gt;() == false</code></p>",
        "id": 175611711,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371380
    },
    {
        "content": "<p>also correct</p>",
        "id": 175611722,
        "sender_full_name": "centril",
        "timestamp": 1568371393
    },
    {
        "content": "<p><code>needs_drop</code> can return <code>true</code> for them, and that isn't a correctness issue</p>",
        "id": 175611728,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371397
    },
    {
        "content": "<p>the question is why don't we guarantee that</p>",
        "id": 175611731,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371402
    },
    {
        "content": "<p>why don't we guarantee that for types without drop glue <code>needs_drop</code> always returns <code>false</code> ?</p>",
        "id": 175611736,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371426
    },
    {
        "content": "<p>well if you do that then you have guaranteed this as a matter of semver for all crates</p>",
        "id": 175611785,
        "sender_full_name": "centril",
        "timestamp": 1568371443
    },
    {
        "content": "<p>doing it for <code>Copy</code> is a more explicit commitment which already has semver implications</p>",
        "id": 175611797,
        "sender_full_name": "centril",
        "timestamp": 1568371463
    },
    {
        "content": "<p>sure, so are many other things</p>",
        "id": 175611798,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371465
    },
    {
        "content": "<p>AFAICT, we could have a <code>NeedsDrop</code> auto-trait, and then <code>mem::needs_drop</code> can be implemented using specialization: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">NeedsDrop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">NeedsDrop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Drop</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">_ComputeNeedsDrop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">default</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">_ComputeNeedsDrop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">NeedsDrop</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">_ComputeNeedsDrop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">needs_drop</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">_ComputeNeedsDrop</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">VALUE</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 175611806,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371481
    },
    {
        "content": "<p>It's not a question of \"can\", it's a question of \"want\".</p>",
        "id": 175611818,
        "sender_full_name": "centril",
        "timestamp": 1568371504
    },
    {
        "content": "<p>so where is the rationale that says that doing so is a bad idea</p>",
        "id": 175611825,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371515
    },
    {
        "content": "<p>the only rationale I can find is that given by @eddyb on that issue</p>",
        "id": 175611833,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371529
    },
    {
        "content": "<p>which says, we can't do this on the compiler two years ago because of associated types</p>",
        "id": 175611844,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371550
    },
    {
        "content": "<p>it doesn't say anything about it being a good or bad idea</p>",
        "id": 175611850,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371561
    },
    {
        "content": "<p>and i mean, the compiler has to be able to know precisely whether a type needs drop glue or not..</p>",
        "id": 175611914,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568371612
    },
    {
        "content": "<p>(specialization isn't stable)</p>",
        "id": 175611937,
        "sender_full_name": "centril",
        "timestamp": 1568371652
    },
    {
        "content": "<blockquote>\n<p>it doesn't say anything about it being a good or bad idea</p>\n</blockquote>\n<p>I'm saying that we should be careful with more auto traits and such semver commitments</p>",
        "id": 175611943,
        "sender_full_name": "centril",
        "timestamp": 1568371677
    },
    {
        "content": "<p>I do think it's probably a bad idea</p>",
        "id": 175611989,
        "sender_full_name": "centril",
        "timestamp": 1568371698
    },
    {
        "content": "<p><code>Copy</code> is still quite a lot of types</p>",
        "id": 175612002,
        "sender_full_name": "centril",
        "timestamp": 1568371719
    },
    {
        "content": "<p>it's a bug because it's not computed by the trait system</p>",
        "id": 175626717,
        "sender_full_name": "eddyb",
        "timestamp": 1568383558
    },
    {
        "content": "<p>that's it</p>",
        "id": 175626719,
        "sender_full_name": "eddyb",
        "timestamp": 1568383559
    },
    {
        "content": "<p>that's all  there is to it</p>",
        "id": 175626754,
        "sender_full_name": "eddyb",
        "timestamp": 1568383563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> might have more info</p>",
        "id": 175626782,
        "sender_full_name": "eddyb",
        "timestamp": 1568383575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> ah I see you mention specialization. I hope that doesn't work, I don't think I've heard anything about autotraits being sound wrt specialization</p>",
        "id": 175626831,
        "sender_full_name": "eddyb",
        "timestamp": 1568383605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I don't specialize an auto trait, I just use them in bounds</p>",
        "id": 175630528,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568385729
    },
    {
        "content": "<p>is that unsound?</p>",
        "id": 175630532,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568385733
    },
    {
        "content": "<p>that might work</p>",
        "id": 175630562,
        "sender_full_name": "eddyb",
        "timestamp": 1568385752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> </p>\n<blockquote>\n<p>(specialization isn't stable)</p>\n</blockquote>\n<p><code>needs_drop</code> is already a <code>#[lang_item]</code> - how we implement it internally doesn't really matter</p>",
        "id": 175630593,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568385781
    },
    {
        "content": "<p>surprises me that you can do that, I thought you needed Copy to change the auto trait behavior</p>",
        "id": 175630602,
        "sender_full_name": "eddyb",
        "timestamp": 1568385787
    },
    {
        "content": "<p>wait you don't have Copy in there. so it's not the whole story</p>",
        "id": 175630635,
        "sender_full_name": "eddyb",
        "timestamp": 1568385815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=411c333b1681a2893d187a847364c4bb\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=411c333b1681a2893d187a847364c4bb\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=411c333b1681a2893d187a847364c4bb</a></p>",
        "id": 175631111,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386114
    },
    {
        "content": "<p>yeah sure I think that's fine, the problem is that a non-Copy type wrapping a Copy type, needs to be !NeedsDrop</p>",
        "id": 175631189,
        "sender_full_name": "eddyb",
        "timestamp": 1568386170
    },
    {
        "content": "<p>so like <code>Cell&lt;T&gt;</code> where <code>T: Copy</code></p>",
        "id": 175631227,
        "sender_full_name": "eddyb",
        "timestamp": 1568386194
    },
    {
        "content": "<p>your version would work if you knew the type fully, I guess?</p>",
        "id": 175631284,
        "sender_full_name": "eddyb",
        "timestamp": 1568386210
    },
    {
        "content": "<p>one can only call <code>needs_drop</code> will a full type</p>",
        "id": 175631312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386235
    },
    {
        "content": "<p>well, yes, but what is being run on the compiler doesn't need to be fully concrete</p>",
        "id": 175631359,
        "sender_full_name": "eddyb",
        "timestamp": 1568386270
    },
    {
        "content": "<p>it's how we avoid generating drops for locals in MIR</p>",
        "id": 175631380,
        "sender_full_name": "eddyb",
        "timestamp": 1568386286
    },
    {
        "content": "<p>having two computations seems risky</p>",
        "id": 175631434,
        "sender_full_name": "eddyb",
        "timestamp": 1568386315
    },
    {
        "content": "<p>Ah gotcha</p>",
        "id": 175631523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386360
    },
    {
        "content": "<p><code>Copy</code> is kind of <code>Copy: !NeedsDrop</code></p>",
        "id": 175631575,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386390
    },
    {
        "content": "<p>also, pretty sure miri can evaluate <em>and constant-fold</em> needs_drop already (cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>)</p>",
        "id": 175631582,
        "sender_full_name": "eddyb",
        "timestamp": 1568386395
    },
    {
        "content": "<p>yes <code>needs_drop</code> is <code>const fn</code></p>",
        "id": 175631606,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386408
    },
    {
        "content": "<p>even when the type is generic</p>",
        "id": 175631636,
        "sender_full_name": "eddyb",
        "timestamp": 1568386423
    },
    {
        "content": "<p>actually I can test this</p>",
        "id": 175631649,
        "sender_full_name": "eddyb",
        "timestamp": 1568386431
    },
    {
        "content": "<p>ah wow</p>",
        "id": 175631691,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386444
    },
    {
        "content": "<p>in all cases ?</p>",
        "id": 175631731,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386456
    },
    {
        "content": "<p>or only if the type is copy ?</p>",
        "id": 175631738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386463
    },
    {
        "content": "<p>oh wait maybe I'm wrong</p>",
        "id": 175631783,
        "sender_full_name": "eddyb",
        "timestamp": 1568386504
    },
    {
        "content": "<p>The <code>needs_drop</code> in </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">needs_drop</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>can always be folded to <code>false</code>.</p>",
        "id": 175631795,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386510
    },
    {
        "content": "<p>but without the <code>T: Copy</code> bound I don't think one can do anything</p>",
        "id": 175631832,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386533
    },
    {
        "content": "<p>it certainly <em>could</em> but it's not obvious that the answer is only guaranteed if it's <code>false</code></p>",
        "id": 175631841,
        "sender_full_name": "eddyb",
        "timestamp": 1568386541
    },
    {
        "content": "<p>if it's <code>true</code> the real answer might be <code>false</code>. so we're missing an explicit \"unknowable\" result</p>",
        "id": 175631916,
        "sender_full_name": "eddyb",
        "timestamp": 1568386565
    },
    {
        "content": "<p>the trait system has a way to represent \"not sure\"</p>",
        "id": 175631933,
        "sender_full_name": "eddyb",
        "timestamp": 1568386576
    },
    {
        "content": "<p>so does <code>layout_of</code> (<code>Err(LayoutError::Unknown(_))</code>)</p>",
        "id": 175631966,
        "sender_full_name": "eddyb",
        "timestamp": 1568386596
    },
    {
        "content": "<p>well sure</p>",
        "id": 175631969,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386598
    },
    {
        "content": "<p>if we had a <code>NeedsDrop</code> trait we could constant fold it to true (T: NeedsDrop) or false (T: !NeedsDrop or T: Copy) or maybe (T - no bounds)</p>",
        "id": 175632018,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386643
    },
    {
        "content": "<p>Maybe is just an unknown that is resolved later if the function is ever monomorphized</p>",
        "id": 175632103,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386702
    },
    {
        "content": "<p>Ah i think I see the problem now</p>",
        "id": 175632214,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386780
    },
    {
        "content": "<p>How does this work for <code>Send</code> and <code>Sync</code> ?</p>",
        "id": 175632367,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568386844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can we reliably compute needs_drop for unsized trait objects?</p>",
        "id": 175640077,
        "sender_full_name": "nagisa",
        "timestamp": 1568391912
    },
    {
        "content": "<p>(to me it soulds like it will have to return <code>true</code> regardless of the concrete type behind the object)</p>",
        "id": 175640114,
        "sender_full_name": "nagisa",
        "timestamp": 1568391942
    },
    {
        "content": "<p>Yes but that's not really an inaccuracy. The trait object does have drop glue (stored in the vtable), it just happens to be trivial for some values of that type. Not entirely unlike how <code>Option&lt;T&gt;</code> needs_drop if <code>T</code> does but dropping <code>None</code> does nothing.</p>",
        "id": 175640768,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568392400
    },
    {
        "content": "<p>we probably need a new \"drop-like\" trait for const anyway... something to attach <code>const</code> to to say \"dropping this type is possible in const context\"</p>",
        "id": 175747531,
        "sender_full_name": "RalfJ",
        "timestamp": 1568551837
    },
    {
        "content": "<p>I wanted to repurpose <code>Drop</code> for this but most likely it is way too late for this... we should not have stabilized <code>Drop</code> trait bounds :/</p>",
        "id": 175747532,
        "sender_full_name": "RalfJ",
        "timestamp": 1568551837
    },
    {
        "content": "<p>why not?</p>",
        "id": 175761939,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568574778
    },
    {
        "content": "<p>We could say that, if a field of an aggregate implements <code>Drop</code>, and the aggregate has no user-provided <code>Drop</code> impl, the compiler auto-generates a <code>Drop</code> impl for you</p>",
        "id": 175761996,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568574851
    },
    {
        "content": "<p>That is, a type with a field that is <code>Drop</code> is always <code>Drop</code></p>",
        "id": 175761998,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568574865
    },
    {
        "content": "<p>If the <code>Drop</code> impl for the field is <code>const</code>, the <code>Drop</code> impl for the aggregate might be able to be <code>const</code> as well</p>",
        "id": 175762003,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568574899
    },
    {
        "content": "<p>This would mean that <code>needs_drop&lt;T&gt;</code> would just return whether a type is <code>Drop</code></p>",
        "id": 175762060,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568574973
    },
    {
        "content": "<p>(true if it is, false if it isn't, and in generic code a \"maybe\" until the answer is known)</p>",
        "id": 175762070,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568575044
    },
    {
        "content": "<blockquote>\n<p>We could say that, if a field of an aggregate implements <code>Drop</code>, and the aggregate has no user-provided <code>Drop</code> impl, the compiler auto-generates a <code>Drop</code> impl for you</p>\n</blockquote>\n<p>that's not backwards-compatible: <a href=\"https://github.com/rust-lang/rfcs/pull/2632#issuecomment-528461395\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2632#issuecomment-528461395\">https://github.com/rust-lang/rfcs/pull/2632#issuecomment-528461395</a></p>",
        "id": 175765531,
        "sender_full_name": "RalfJ",
        "timestamp": 1568580672
    },
    {
        "content": "<p>that's bad</p>",
        "id": 175767566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568584075
    },
    {
        "content": "<p>yes :(</p>",
        "id": 175797778,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627129
    }
]