[
    {
        "content": "<p>I have a very odd issue with a codegen i am working on, this codegen targets the cuda libnvvm library to allow you to write gpu kernels in rust. I have been working on trying to get panics to spit out nice messages, but i am running into issues i am incredibly confused on and someone may be able to shed more light on. </p>\n<p>For background, CUDA has both the ability to malloc memory on the gpu and the ability to print from it.<br>\nThe former is done by linking to <code>fn malloc(size: usize) -&gt; *mut u8;</code> as well as a free function, and the latter is the same but with a vprintf function that takes a format string and a var list. The printed data is put into a circular buffer of about 1mb, then this buffer is flushed on kernel launches, synchronization, module load/unloads, or context destruction. </p>\n<p>Using these functions normally works great with no issues, but for some reason, they simply do not work when put inside of a panic handler, well, i am able to do <code>print!(\"a\")</code> and malloc some memory manually, but for some odd reason, trying to format stuff into strings does not work, here is the full code to the panic handler: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5fb2d772757b1da5b7146f56e8777cae\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5fb2d772757b1da5b7146f56e8777cae</a></p>\n<p>It results in an <code>InvalidAddress</code> error when the cuda stream tries to synchronize. Curiously, the first two things work great (the <code>thread_str</code> and <code>block_str</code>), printing that by itself works. But the locstr and overall msg does not work. But the thing that makes this really confusing, is that using <code>ManuallyDrop::new(loc.file().to_string())</code> does in fact work. But this makes no sense, format should have made a new buffer that does not reference the old stuff. So i see no reason why manuallydrop would make a difference. </p>\n<p>I could not get <code>msg</code> to work in any way, no matter the amount of manuallydrops i put on that thing.</p>",
        "id": 253521547,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631761470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> Could you link to the implementation of <code>println!</code>?</p>",
        "id": 253629793,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631817640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// CUDA syscalls implicitly defined by nvvm you can link to.</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[doc(hidden)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">vprintf</span><span class=\"p\">(</span><span class=\"n\">format</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valist</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ffi</span>::<span class=\"n\">c_void</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[doc(hidden)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">__assertfail</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">message</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">file</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">line</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">function</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">char_size</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Alternative to [`print!`](std::print) which works on CUDA. See [`print`](self) for more info.</span>\n<span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$($arg</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>::<span class=\"n\">alloc</span>::<span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"cp\">$($arg</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$crate</span>::<span class=\"n\">io</span>::<span class=\"n\">vprintf</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span>::<span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null_mut</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Alternative to [`println!`](std::println) which works on CUDA. See [`print`](self) for more info.</span>\n<span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$crate</span>::<span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$fmt</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$crate</span>::<span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"cp\">$fmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$fmt</span>:<span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($arg</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$crate</span>::<span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"cp\">$fmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"cp\">$($arg</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253630199,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631817815
    },
    {
        "content": "<p>Is this in a public repository?</p>",
        "id": 253630230,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631817827
    },
    {
        "content": "<p>Not currently but i could</p>",
        "id": 253630262,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631817842
    },
    {
        "content": "<p>That would be really helpful</p>",
        "id": 253630321,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631817853
    },
    {
        "content": "<p>I could put the crate with the printing in a temp public repo, the whole thing has like 7+ crates ill release eventually</p>",
        "id": 253630413,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631817894
    },
    {
        "content": "<p>but the other crates are mostly irrelevant</p>",
        "id": 253630445,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631817903
    },
    {
        "content": "<p>Just give me about 15 min and ill go ahead and do it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 253630533,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631817938
    },
    {
        "content": "<p>or actually, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> the crate is pretty small, would u rather i just send it as a zip file?</p>",
        "id": 253631012,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818133
    },
    {
        "content": "<p>A git repository would be easier for me, personally</p>",
        "id": 253631289,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818236
    },
    {
        "content": "<p>Alright</p>",
        "id": 253631310,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818246
    },
    {
        "content": "<p>The CUDA docs seem to imply that pointer arguments will get read from the host side: <a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#limitations\">https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#limitations</a></p>",
        "id": 253631360,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818267
    },
    {
        "content": "<p>\"This means that the format string must be understood by the host-system's compiler and C library.\"</p>",
        "id": 253631387,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818281
    },
    {
        "content": "<p>e.g. a  <code>%s</code> will get interpreted by the host libc, causing it to read a string from the provided pointer</p>",
        "id": 253631418,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818300
    },
    {
        "content": "<p>which would explain why using <code>ManuallyDrop</code> fixes the issue</p>",
        "id": 253631465,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818320
    },
    {
        "content": "<p>But that doesnt make sense because if that were true, then formatting, printing, then trapping in a kernel wouldnt work</p>",
        "id": 253631508,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818324
    },
    {
        "content": "<p>and im pretty sure (but not certain) that cuda cleans up kernel allocated memory automatically when a kernel is finished</p>",
        "id": 253631662,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818390
    },
    {
        "content": "<p>wouldn't the buffer get flushed (and processed?) by the trap?</p>",
        "id": 253631807,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818443
    },
    {
        "content": "<p>i don't think trapping flushes the buffer, synchronizing on the cpu does flush it however</p>",
        "id": 253631865,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818465
    },
    {
        "content": "<p>hmm</p>",
        "id": 253631873,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818469
    },
    {
        "content": "<p>I mean i guess maybe i could preallocate a static global buffer then write into that? but that does not seem very practical or safe...</p>",
        "id": 253631995,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818521
    },
    {
        "content": "<p>well, we've reached the limit of my cuda knowledge :)</p>",
        "id": 253631999,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818523
    },
    {
        "content": "<p>However, I think the combination of the docs and the <code>ManuallyDrop</code> behavior strongly suggests that cuda is requiring the pointer to be valid beyond the actual end of the <code>vprintf</code> call</p>",
        "id": 253632053,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818547
    },
    {
        "content": "<p>Yeah that could be it, but im not sure how to solve that</p>",
        "id": 253632149,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818570
    },
    {
        "content": "<p>e.g. after <code>vprintf</code> returns, it's not necessarily safe to deallocate the memory used by any of the pointers you passed in as an argument</p>",
        "id": 253632166,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818579
    },
    {
        "content": "<p>but manuallydropping the formatted msg in the print macro does not fix it</p>",
        "id": 253632216,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818596
    },
    {
        "content": "<p>Have you tried running <code>cuda-memcheck</code>?</p>",
        "id": 253632483,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1631818686
    },
    {
        "content": "<p>i havent, that might be helpful</p>",
        "id": 253632530,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818703
    },
    {
        "content": "<p>hmmm no memcheck doesnt seem to give any insights :/</p>",
        "id": 253633078,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818878
    },
    {
        "content": "<p>because i presume this is a cpu-side fault</p>",
        "id": 253633115,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818892
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/btvO2dU8ggUXwKR9Q8DQzA0o/Screenshot_375.png\">Screenshot_375.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/btvO2dU8ggUXwKR9Q8DQzA0o/Screenshot_375.png\" title=\"Screenshot_375.png\"><img src=\"/user_uploads/4715/btvO2dU8ggUXwKR9Q8DQzA0o/Screenshot_375.png\"></a></div>",
        "id": 253633357,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631818977
    },
    {
        "content": "<p>the synchronization call yields <code>IllegalAddress</code></p>",
        "id": 253633620,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819060
    },
    {
        "content": "<p>and illegaladdress is</p>\n<div class=\"codehilite\"><pre><span></span><code>The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistent state and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched.\n</code></pre></div>",
        "id": 253633811,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819130
    },
    {
        "content": "<p>but this implies its a gpu-side fault... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 253633867,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819152
    },
    {
        "content": "<p>I wonder if you're missing a null terminator.</p>",
        "id": 253634246,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631819288
    },
    {
        "content": "<p>oh my god if that is it i am going to cry</p>",
        "id": 253634328,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819323
    },
    {
        "content": "<p>you're passing String::as_ptr to a function that I presume accepts a C string.</p>",
        "id": 253634335,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631819326
    },
    {
        "content": "<p>alloc::string::String isn't null-terminated.</p>",
        "id": 253634387,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631819347
    },
    {
        "content": "<p>yeah</p>",
        "id": 253634399,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819352
    },
    {
        "content": "<p>hmm no that did not fix it :/</p>",
        "id": 253634684,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819469
    },
    {
        "content": "<p>I think CUDA knows how big every single memory allocation on the gpu is, thats why it can just take a pointer and free it</p>",
        "id": 253634841,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819532
    },
    {
        "content": "<p>the other thing i can think of is that maybe the data thats given in panicinfo is corrupted somehow</p>",
        "id": 253635289,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819721
    },
    {
        "content": "<p>If the nul terminator is missing, vprintf doesn't know where the format string ends.</p>",
        "id": 253635359,
        "sender_full_name": "bjorn3",
        "timestamp": 1631819758
    },
    {
        "content": "<p>but then it wouldnt work when printing anything, it can print stuff like thread_str just fine</p>",
        "id": 253635483,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819795
    },
    {
        "content": "<p>It may be the case that there just so happens to be a null byte after the allocated memory in some cases.</p>",
        "id": 253635568,
        "sender_full_name": "bjorn3",
        "timestamp": 1631819832
    },
    {
        "content": "<p>and the fact that cuda's <code>free()</code> only takes a pointer makes me think cuda automagically knows how big any allocated memory buffer is</p>",
        "id": 253635570,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819833
    },
    {
        "content": "<p>Yes, the allocator does, but vprintf doesn't.</p>",
        "id": 253635623,
        "sender_full_name": "bjorn3",
        "timestamp": 1631819858
    },
    {
        "content": "<p>right</p>",
        "id": 253635638,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819864
    },
    {
        "content": "<p>although adding a nul to the format in vprintf doesnt seem to fix it</p>",
        "id": 253635658,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819873
    },
    {
        "content": "<p>even core doesnt add a nul in the example <a href=\"https://doc.rust-lang.org/core/arch/nvptx/fn.vprintf.html\">https://doc.rust-lang.org/core/arch/nvptx/fn.vprintf.html</a></p>",
        "id": 253635804,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631819934
    },
    {
        "content": "<p>Maybe try adding <code>core::mem::forget(msg)</code> after the vprintf?</p>",
        "id": 253635834,
        "sender_full_name": "bjorn3",
        "timestamp": 1631819951
    },
    {
        "content": "<blockquote>\n<p>even core doesnt add a nul in the example <a href=\"https://doc.rust-lang.org/core/arch/nvptx/fn.vprintf.html\">https://doc.rust-lang.org/core/arch/nvptx/fn.vprintf.html</a></p>\n</blockquote>\n<p>That is probably a mistranslation of the nvidia docs. C implicitly adds the nul terminator, rust doesn't.</p>",
        "id": 253636040,
        "sender_full_name": "bjorn3",
        "timestamp": 1631820022
    },
    {
        "content": "<p>yeah that could also happen</p>",
        "id": 253636082,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631820037
    },
    {
        "content": "<p>no that did not seem to fix it</p>",
        "id": 253636109,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631820056
    },
    {
        "content": "<p><span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 253636166,
        "sender_full_name": "bjorn3",
        "timestamp": 1631820088
    },
    {
        "content": "<p>I am afraid I won't be able to help you with debugging this.</p>",
        "id": 253636294,
        "sender_full_name": "bjorn3",
        "timestamp": 1631820128
    },
    {
        "content": "<p>yeah i think i might open a thread on the cuda forums because i'm pretty confused on this</p>",
        "id": 253636339,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631820147
    },
    {
        "content": "<p>Lemme try something, ill allocate a buffer manually and get cuda to print it and see if it expects a nul</p>",
        "id": 253636482,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631820219
    },
    {
        "content": "<p>actually, it seems like vprintf does in fact expect a nul</p>",
        "id": 253637070,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631820469
    },
    {
        "content": "<p>because</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cuda_std</span>::<span class=\"n\">mem</span>::<span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"abcdefgh</span><span class=\"se\">\\0</span><span class=\"s\">u\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cuda_std</span>::<span class=\"n\">io</span>::<span class=\"n\">vprintf</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null_mut</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>prints </p>\n<div class=\"codehilite\"><pre><span></span><code>abcdefgh\n</code></pre></div>",
        "id": 253637156,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631820495
    },
    {
        "content": "<p>so thats <em>one</em> of the issues, but it seems like stuff is failing before it even gets to the vprintf call</p>",
        "id": 253637231,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631820528
    },
    {
        "content": "<p>Where does PanicInfo get allocated? is everything static or does it come from somewhere else?</p>",
        "id": 253638358,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631821012
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c5cbf7852a7692c7c51df64c09a59e7838b55202/library/core/src/panicking.rs#L93\">https://github.com/rust-lang/rust/blob/c5cbf7852a7692c7c51df64c09a59e7838b55202/library/core/src/panicking.rs#L93</a></p>",
        "id": 253641956,
        "sender_full_name": "bjorn3",
        "timestamp": 1631822453
    },
    {
        "content": "<p>hmm thats odd, ill just trap normally for now and try to figure it out in the future, gpus shouldnt really be panicking anyways</p>",
        "id": 253649360,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631825632
    }
]