[
    {
        "content": "<p>I was wondering if adding an integer counterpart for <code>{f32, f64}::sqrt</code> to the std crate made sense.</p>\n<p>Currently, the best way (I am aware of) to compute the square root of an integer without adding external crates is to either write a custom isqrt function or convert the number back and forth between int and float (i.e <code>(n as f32).sqrt().floor() as u32</code>), both of which aren't nearly as elegant as writing <code>n.sqrt()</code>. In addition to that, the function could also be implemented as a <code>const fn</code>, since it doesn't have to touch floats in its calculation.</p>",
        "id": 218902793,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1607123280
    },
    {
        "content": "<p>Hmm, that seems very confusing to me. Doing <code>14.sqrt()</code> and getting back <code>3</code> is quite surprising.</p>",
        "id": 218902952,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607123388
    },
    {
        "content": "<p>If we're going to do this, I think we should definitely have the function be <code>isqrt</code></p>",
        "id": 218903005,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607123408
    },
    {
        "content": "<p>Which would also match up with the mathematical name</p>",
        "id": 218903103,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607123489
    },
    {
        "content": "<p>I originally suggested \"sqrt\" to maximize discoverability, but that's a fair point</p>",
        "id": 218903212,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1607123553
    },
    {
        "content": "<p>Does any language provide that function? C++, C, Java, Go don't at the very least afaict</p>",
        "id": 218903613,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1607123930
    },
    {
        "content": "<p>Not that I'm aware, but I also don't think that should stop Rust from having it. Afaik, none of these languages have a <code>pow</code> function that operates on integers, but Rust has it.</p>",
        "id": 218903925,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1607124204
    },
    {
        "content": "<p>Wow, looks like <code>isqrt</code> first came up in 2015: <a href=\"https://users.rust-lang.org/t/integer-square-root/96?u=scottmcm\">https://users.rust-lang.org/t/integer-square-root/96?u=scottmcm</a></p>\n<p>(Slightly) more recently there was one in <a href=\"https://users.rust-lang.org/t/integer-square-root-algorithm/13529?u=scottmcm\">https://users.rust-lang.org/t/integer-square-root-algorithm/13529?u=scottmcm</a></p>\n<p>Based on that second thread, Ruby does, <span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> <a href=\"https://bugs.ruby-lang.org/issues/13219\">https://bugs.ruby-lang.org/issues/13219</a></p>\n<p>But ruby has built-in bignum, right?  Seems much clearer that it'd be useful there than on fixed-width integers.</p>\n<p>Given that LLVM doesn't appear to have an integer square root, I think it's probably fine for this to live in <code>num</code>, with <code>div_ceiling</code> and friends.</p>",
        "id": 218904400,
        "sender_full_name": "scottmcm",
        "timestamp": 1607124582
    },
    {
        "content": "<p>python has it</p>",
        "id": 218904917,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607124886
    },
    {
        "content": "<p><code>num-integer</code> does have this already</p>",
        "id": 218906220,
        "sender_full_name": "cuviper",
        "timestamp": 1607126244
    },
    {
        "content": "<p><del>A potential problem I see is that's not necessary fully clear if it's equivalent to sqrt + floor , ceil or nearest internet rounding.</del></p>\n<p>Is what I wanted to say, but then realized that  integer versions of floating point operations like e.g. integer division always use flooring.</p>\n<p>(I'm just posting for the case someone is wondering about the same thing.)</p>",
        "id": 218952210,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1607200288
    }
]