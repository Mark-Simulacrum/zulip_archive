[
    {
        "content": "<p>I have some assembly copied from a C project that has relies on an array defined as such<br>\n<code>const int8_t ALIGN(dav1d_mc_subpel_filters[5][15][8], 8) = ...</code><br>\nand I want to make sure that I'm not triggering undefined behavior.</p>\n<p>Is the following rust code defined to have the same effect as <code>const int8_t ALIGN(FOO[16], 8) = { 42, 42, 42, ... };</code></p>\n<div class=\"codehilite\"><pre><span></span>#[repr(C, align(8))]\npub struct Aligned([i8; 16]);\n#[no_mangle]\npub static FOO: Aligned = Aligned([42; 16]);\n</pre></div>",
        "id": 154218877,
        "sender_full_name": "Kyle Siefring",
        "timestamp": 1546488371
    },
    {
        "content": "<p>Depends on what <code>ALIGN</code> is, but on most platforms, yes. To be extra pedantic it is the same as <code>struct { int8_t [16]; } __attribute__((align(8)))</code>, and there may be platforms where this is not exactly the same as an aligned array with 16 elements.</p>",
        "id": 154233224,
        "sender_full_name": "nagisa",
        "timestamp": 1546513750
    }
]