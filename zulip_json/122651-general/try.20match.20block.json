[
    {
        "content": "<p>I was running into the problem of repeated Ok(...) wrappings in my match blocks recently. I could not just wrap the whole thing in Ok, as when none of the patterns matched and it fell to the default case, I wanted the block to result in Err(...). This repetition is something I've seen often with Option as well, and so I thought the language may benefit from a solution to this, for the sake of code readability. Seeing as how try is already a reserved keyword, I thought of the try match block, which would work very similarly to match. It would be something like below where x would attempt to be matched to the patterns, resulting in Ok(value) if the pattern is matched. If all patterns fail to match, then Err(TryMatchError) (or maybe Err(x)?) would be returned. This would be similar for Option, where it would return Some(value) on a successful match, and None when failing to match. Would this be a worthwhile addition to the language?</p>\n<div class=\"codehilite\"><pre><span></span><code>let temp: Result = try match x {\n    /*Pattern*/ =&gt; /*value*/,\n    /*Pattern*/ =&gt; /*value*/,\n   ...\n};\n</code></pre></div>",
        "id": 243834861,
        "sender_full_name": "Stefano Cefalu",
        "timestamp": 1624562954
    },
    {
        "content": "<p>What about something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">temp</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Pattern</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Pattern</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243837847,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624564433
    },
    {
        "content": "<p>Effectively, use <code>?</code> as an early-return in the try block. (Or, in the future, you could use whatever <code>yeet</code>/<code>fail</code>/<code>throw</code> syntax we settle on instead of <code>Err(y)?</code>.)</p>",
        "id": 243837960,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624564472
    },
    {
        "content": "<p>By the way, I've been using \"try blocks\" on stable for a while, spelled as <code>(|| -&gt; Result&lt;_, _&gt; { Ok({ ... }) })()</code>. Inside such blocks you can use <code>return Err(e)</code> to return an error to the block, or <code>x?</code> to try-unwrap an error targeting the block</p>",
        "id": 243839554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624565358
    },
    {
        "content": "<p><code>try { ... }</code> will of course be a welcome simplification, but you can basically do the same thing without it</p>",
        "id": 243839704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624565425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I'm currently doing the same. And in async code, I'm using <code>let result: Result&lt;_, _&gt; = async { ... }.await</code> for the same purpose.</p>",
        "id": 243841018,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624566132
    },
    {
        "content": "<p>I've definitely also done the </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>routine before.  I still can't decide how I feel about it.</p>",
        "id": 243954630,
        "sender_full_name": "scottmcm",
        "timestamp": 1624646573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/try.20match.20block/near/243837847\">said</a>:</p>\n<blockquote>\n<p>What about something like this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">temp</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Pattern</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Pattern</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>the problem with having <code>Err(e)?</code> be the \"solution\" is that its not known to the compiler (specifically typechecker I think?) to diverge, so you end up needing to do stuff like <code>{ Err(e)?; unreachable!(); }</code> which feels pretty gross.</p>",
        "id": 243958230,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624648486
    },
    {
        "content": "<p>You could make a macro for that</p>",
        "id": 243969657,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624654463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> That'll be an advantage of the <code>yeet</code> construct: it'll be known to diverge.</p>",
        "id": 243984374,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624667321
    },
    {
        "content": "<p><code>match Err::&lt;!, _&gt;(y)? {}</code> works without the <code>unreachable!</code></p>",
        "id": 243997588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624688038
    },
    {
        "content": "<p>it's not really something you want to write though</p>",
        "id": 243997627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624688071
    },
    {
        "content": "<p><code>Err(y)?</code> could work if inference started treating it as <code>Err::&lt;!, _&gt;(y)</code> instead of <code>Err::&lt;(), _&gt;(y)</code>.  I don't know if that's one of the changes in the never type stabilization plan, though.</p>",
        "id": 244000140,
        "sender_full_name": "scottmcm",
        "timestamp": 1624692236
    },
    {
        "content": "<p><code>match x { } else yeet Err</code></p>",
        "id": 244046453,
        "sender_full_name": "Jubilee",
        "timestamp": 1624762465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/122651-general/topic/try.20match.20block/near/244046453\">said</a>:</p>\n<blockquote>\n<p><code>match x { } else yeet Err</code></p>\n</blockquote>\n<p>i like this even though its no different than just having a <code>_ =&gt; yeet Err</code> branch</p>",
        "id": 244046574,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624762738
    }
]