[
    {
        "content": "<p>So I totally expect the answer to be \"nothing can be done\", but I ran into an issue where I have a recursive type that is causing a stack overflow. Here is a minimal reproducible example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Nil</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">List</span>::<span class=\"n\">Nil</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"mi\">2_</span><span class=\"k\">usize</span><span class=\"p\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">List</span>::<span class=\"n\">Cons</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Finished loop\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"won't see me!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(It fails at some point between 2^16 and 2^17). I have an actual use case for this (representing a very tall AST in a parser for a really large file), what can be done?</p>",
        "id": 234194803,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1618247068
    },
    {
        "content": "<p>This is covered in the too many linked lists book</p>",
        "id": 234195497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618247361
    },
    {
        "content": "<p>you have to manually implement the destructor</p>",
        "id": 234195522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618247373
    },
    {
        "content": "<p><a href=\"https://rust-unofficial.github.io/too-many-lists/first-drop.html\">https://rust-unofficial.github.io/too-many-lists/first-drop.html</a></p>",
        "id": 234195655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618247418
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 234196026,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1618247579
    },
    {
        "content": "<p>Except it isn't a plain old simple linked list but a more complicated graph...</p>",
        "id": 234196220,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1618247659
    },
    {
        "content": "<p>You still should either try to find a way to perform the destruction without a deep recursion, or else use something like <a href=\"https://docs.rs/stacker/0.1.13/stacker/\"><code>stacker</code></a> to give yourself a huge stack for this problem</p>",
        "id": 234196877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618247943
    },
    {
        "content": "<p>I see. Thank you!</p>",
        "id": 234197464,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1618248199
    }
]