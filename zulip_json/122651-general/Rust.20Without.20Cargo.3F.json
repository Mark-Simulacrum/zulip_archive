[
    {
        "content": "<p>Are there recommended \"best practices\" or standards for developing Rust in a Cargo-less environment?</p>\n<p>I'm familiar with a handful of projects that enable this -- Bazel's rules_rust/cargo_raze approach, Fuchsia's approach (using GN and avoiding Cargo altogether) but I was kinda curious about these techniques from people more embedded within the rust community</p>",
        "id": 194356132,
        "sender_full_name": "Sean Klein",
        "timestamp": 1587065646
    },
    {
        "content": "<p>I think I'm particularly interested in environments where multiple programming languages are used together -- which I suppose would be the first motivation for \"hey, it's a pain to build my C++/Go/Rust libraries/binaries from Cargo alone\"</p>",
        "id": 194356756,
        "sender_full_name": "Sean Klein",
        "timestamp": 1587065962
    },
    {
        "content": "<p>(also, maybe the answer is \"you should still use Cargo in those cases! You should just invoke it by another build system, or whatever!\" - just curious to hear what has / hasn't worked well in this space)</p>",
        "id": 194357132,
        "sender_full_name": "Sean Klein",
        "timestamp": 1587066154
    },
    {
        "content": "<p>That's definitely the small-scale recommendation, yes.</p>",
        "id": 194369941,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587072581
    },
    {
        "content": "<p>Doing without Cargo has less to do with mixing languages, and more to do with \"we have an existing all-encompassing build system of doom, and everything must fit into that\".</p>",
        "id": 194370011,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587072608
    },
    {
        "content": "<p>If Rust isn't the primary project language you can set cargo to produce a staticlib and then have the larger build process grab that and make use of it, for example.</p>",
        "id": 194371119,
        "sender_full_name": "Lokathor",
        "timestamp": 1587073328
    },
    {
        "content": "<p>So, I wanted to start a rant about Cargo being an opaque non-divisible non-cooperative blob inside of a dependency graph of any actual build system, including off the shelf CMake, not only \"all-encompassing build systems of doom\", causing build performance issues once the project size grows.<br>\nHowever, I've just found that Cargo can actually inherit the outer build system's jobserver now, so it's not so uncooperative anymore, just non-divisible and opaque.</p>",
        "id": 194373293,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587074653
    },
    {
        "content": "<p>I personally don't feel like Cargo is that much more indivisible than rustc, or than the use of LTO.</p>",
        "id": 194373790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587074950
    },
    {
        "content": "<p>I don't think it's necessarily a great assumption that all programs should be able to compile like C, where each source file becomes one object, for instance.</p>",
        "id": 194373820,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587074970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Agreed, that seems like the easiest solution.</p>",
        "id": 194373845,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587074986
    },
    {
        "content": "<p>Hm, AFAIK the \"inherit a jobserver\" has been true for ... years now? Basically since we started doing it</p>",
        "id": 194374426,
        "sender_full_name": "simulacrum",
        "timestamp": 1587075306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/122651-general/topic/Rust.20Without.20Cargo.3F/near/194374426\" title=\"#narrow/stream/122651-general/topic/Rust.20Without.20Cargo.3F/near/194374426\">said</a>:</p>\n<blockquote>\n<p>Hm, AFAIK the \"inherit a jobserver\" has been true for ... years now? Basically since we started doing it</p>\n</blockquote>\n<p>Perhaps the \"indivisibility\" was resolved as well?<br>\nIIRC, if CMake run multiple instances of Cargo in parallel, they started competing with each other for various locks, both global and in the workspace build directory, serializing the build anyway.</p>\n<p>(Assume I have a workspace with multiple packages producing staticlibs, cdylibs and executables for consumption by the outer CMake. If each package is made a separate node (target) in CMake build graph, then CMake can build the packages when it's necessary for the larger build, possibly in parallel.)</p>",
        "id": 194402701,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587108188
    },
    {
        "content": "<p>No, I think that hasn't been resolved. Cargo still expects to roughly be the only cargo running (and enforces that). Crater currently creates N target directories as a workaround.</p>",
        "id": 194422353,
        "sender_full_name": "simulacrum",
        "timestamp": 1587120136
    }
]