[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>struct Foo(i32);\n\nimpl Foo {\n    fn action(mut self) {\n        self.0 += 1;\n    }\n}\n\nfn main() {\n    let mut list: Vec&lt;Foo&gt; = vec![Foo(1), Foo(2), Foo(3)];\n    list.iter_mut().for_each(|item| {\n        item.action();\n        println!(&quot;{}&quot;, item.0);\n    });\n}\n</code></pre></div>\n<p>Error: <br>\n Compiling playground v0.0.1 (/playground)<br>\nerror[E0507]: cannot move out of <code>*item</code> which is behind a mutable reference<br>\n  --&gt; src/main.rs:13:9<br>\n   |<br>\n13 |         item.action();<br>\n   |         ^^^^^^^^^^^^^ move occurs because <code>*item</code> has type <code>Foo</code>, which does not implement the <code>Copy</code> trait</p>\n<p>For more information about this error, try <code>rustc --explain E0507</code>.<br>\nerror: could not compile <code>playground</code> due to previous error</p>",
        "id": 270181683,
        "sender_full_name": "Uniconductive",
        "timestamp": 1643710170
    },
    {
        "content": "<p>You are missing an <code>&amp;</code> in your function signature <code>fn action(mut self)</code> -&gt; <code>fn action(&amp;mut self)</code></p>",
        "id": 270182321,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1643710443
    },
    {
        "content": "<p>Your <code>action</code> method takes ownership of the <code>Foo</code></p>",
        "id": 270182336,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643710451
    },
    {
        "content": "<p>The fix is what <span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span>  said</p>",
        "id": 270182349,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643710460
    },
    {
        "content": "<p>Ok, but what to do in this case?</p>\n<div class=\"codehilite\"><pre><span></span><code>    let mut list: Vec&lt;tokio::sync::oneshot::Sender&lt;()&gt;&gt;;\n    list.iter_mut().for_each(|item| {\n        list.send(());\n    });\n</code></pre></div>",
        "id": 270182687,
        "sender_full_name": "Uniconductive",
        "timestamp": 1643710665
    },
    {
        "content": "<p>The iterator <code>iter_mut</code> produces an iterator of mutable references</p>",
        "id": 270182814,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643710711
    },
    {
        "content": "<p>which is why you can't call <code>send</code> which consumes your <code>Sender</code></p>",
        "id": 270182834,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643710722
    },
    {
        "content": "<p>(which makes sense since <em>after</em> the iterator you recover your <code>list</code> and could do the whole thing again, defeating the one-shotness of <code>Sender</code></p>",
        "id": 270182884,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643710754
    },
    {
        "content": "<p>the solution is to use a consuming iterator</p>",
        "id": 270182896,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643710763
    },
    {
        "content": "<p>you can do this using <code>list.into_iter()</code> which produces an iterator which consumes the vector</p>",
        "id": 270182919,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643710780
    }
]