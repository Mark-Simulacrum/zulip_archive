[
    {
        "content": "<p>Hey, I think there is probably already an issue for this so I don't want to open a new one,<br>\nbut is there something preventing the following</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">).</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><em>edit: zulip doesn't seem to like tables</em></p>\n<p>afaict we should be able to set the first <code>std::mem::size_of&lt;&amp;'static ()&gt;()</code> bytes to 0 for <code>Foo::A</code></p>",
        "id": 203566059,
        "sender_full_name": "lcnr",
        "timestamp": 1594421452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> yeah that's a thing I've been wanting to get to for years :(</p>",
        "id": 203575811,
        "sender_full_name": "eddyb",
        "timestamp": 1594433918
    },
    {
        "content": "<p>there's issues open for it, and some people have taken a stab, but it probably requires a redesign of some stuff to make sense</p>",
        "id": 203575817,
        "sender_full_name": "eddyb",
        "timestamp": 1594433937
    },
    {
        "content": "<p>there's just too much spaghetti right now in the layout decision logic and it's probably 90% my fault</p>",
        "id": 203575824,
        "sender_full_name": "eddyb",
        "timestamp": 1594433963
    },
    {
        "content": "<p>(the 10% is what I inherited and tried to preserve, from the old pre-<code>ty::layout</code> stuff that went straight to LLVM)</p>",
        "id": 203575864,
        "sender_full_name": "eddyb",
        "timestamp": 1594433997
    },
    {
        "content": "<p>Thanks, I found <a href=\"https://github.com/rust-lang/rust/issues/46213\">https://github.com/rust-lang/rust/issues/46213</a></p>",
        "id": 203585243,
        "sender_full_name": "lcnr",
        "timestamp": 1594452428
    }
]