[
    {
        "content": "<p>Hi,</p>\n<p>I'd like to build a static analysis tool for MIR (checking for memory bugs when unsafe code messes up things). Is someone kind enough to point me to some tool support for building analysis tools for Rust?</p>\n<p>I've been looking at <code>clippy</code>, but  <a href=\"https://rust-lang.github.io/rfcs/1211-mir.html#which-analyses-are-well-suited-to-the-mir\">it seems to be \"ill-suited\" for MIR analysis</a>. I might need to store state, and refer back to the original Rust code too. </p>\n<p>Thanks!</p>",
        "id": 237134839,
        "sender_full_name": "Andreea",
        "timestamp": 1620034145
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"409570\">@Andreea</span> , you could checkout how <a href=\"https://github.com/rust-lang/miri\">Miri</a> does it for inspiration. Miri is also quite good at checking memory bugs that way.</p>",
        "id": 237138019,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620035936
    },
    {
        "content": "<p>There is even a <a href=\"https://publikationen.sulb.uni-saarland.de/handle/20.500.11880/29647\">cool thesis</a> available about how the memory safety is checked by Miri in case you're interested (heads up, it's pretty complicated stuff and about ~300 pages). The model described there is called Stacked Borrows, you can find higher level explanations about how it works <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\">here</a>.</p>",
        "id": 237139901,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620037041
    },
    {
        "content": "<p>Thanks for all the pointers, <span class=\"user-mention\" data-user-id=\"400735\">@Pointerbender</span> . I did check Stack Borrows and its implementation in Miri. Good inspiration! However, these are dynamic approaches, while I am searching for static solutions.</p>",
        "id": 237165190,
        "sender_full_name": "Andreea",
        "timestamp": 1620050568
    },
    {
        "content": "<p>Hmm I know of only one tool that can do that so far (there might be others, though? I just stumbled into this part of Rust very recently), it's called <a href=\"https://plv.mpi-sws.org/rustbelt/#project\">RustBelt</a> and takes an academic approach of proving that a program can't contain undefined behavior through static analysis. I think it's very promising, but it currently also has some drawbacks. For example, it is only suitable for researchers because it requires a lot of theoretical knowledge to work with (the earlier linked thesis also gives a nice introduction to RustBelt, by the way). Another thing to keep in mind is that it only works on a limited subset of the Rust language (called λRust). I believe that quite recently support for <code>Arc</code>, <code>RefCell</code>, <code>Rc</code> and <code>RwLock</code> was added, and it already had support for <code>Mutex</code> and <code>Cell</code>. They also have a provably safe type of their own which is called <code>GhostCell</code> (<a href=\"https://plv.mpi-sws.org/rustbelt/ghostcell/paper.pdf\">paper</a>), which is very interesting stuff.</p>",
        "id": 237169875,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620052497
    },
    {
        "content": "<p>it's not really a static analysis, proofs in rustbelt (in iris) are fully manual</p>",
        "id": 237170259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620052632
    },
    {
        "content": "<p>Ah that is good to know. So currently it's not yet possible to automatically convert Rust code into a RustBelt representation and run the prover? Rather we would write the manual proof in RustBelt and then manually transcribe that to Rust code once the proof passes?</p>",
        "id": 237171395,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620053070
    },
    {
        "content": "<p>(for Rust code that falls inside λRust, that is)</p>",
        "id": 237172910,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620053636
    },
    {
        "content": "<p>It's not really a tool per se, but you might want to have a look at <a href=\"https://hackmd.io/RiztubvfT4eOk4-4nM8Y7Q?view\">these slides</a> from the Rust Verification workshop a few weeks ago. They describe how one could use rustc to build analysis/linting/etc. tools using callbacks. I hope that helps.</p>",
        "id": 237335673,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1620139183
    },
    {
        "content": "<p>Are any of the rust verification workshop talks online? I was not able to attend but there seemed to be a bunch of interesting things</p>",
        "id": 237441074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620190514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/analysis.20on.20MIR/near/237441074\">said</a>:</p>\n<blockquote>\n<p>Are any of the rust verification workshop talks online? I was not able to attend but there seemed to be a bunch of interesting things</p>\n</blockquote>\n<p>The talks were indeed quite interesting and IIRC all talks were recorded as well. But I don't think that they are already available online. You might need to ask <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about that.</p>",
        "id": 237475256,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1620212127
    },
    {
        "content": "<p>the talks have apparently been published today on youtube <a href=\"https://www.youtube.com/playlist?list=PL85XCvVPmGQiF26DB84AK3i1yjKu52fq_\">https://www.youtube.com/playlist?list=PL85XCvVPmGQiF26DB84AK3i1yjKu52fq_</a></p>",
        "id": 238355294,
        "sender_full_name": "lqd",
        "timestamp": 1620755801
    }
]