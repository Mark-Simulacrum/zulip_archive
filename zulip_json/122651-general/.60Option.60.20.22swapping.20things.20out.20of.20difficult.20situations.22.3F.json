[
    {
        "content": "<p>i'm revising the <code>Option</code> and <code>Result</code> documentation and am trying to figure out what \"swapping things out of difficult situations\" means in <a href=\"https://doc.rust-lang.org/std/option/index.html\">https://doc.rust-lang.org/std/option/index.html</a><br>\ni'm wondering if it's related to this section of the source: <a href=\"https://doc.rust-lang.org/src/core/option.rs.html#853-855\">https://doc.rust-lang.org/src/core/option.rs.html#853-855</a> or maybe the <code>take</code> and <code>replace</code> methods? interestingly enough there's no <code>swap</code> method.<br>\nare these meant to provide a way to swap owned but non-<code>Copy</code> items out of larger structures, or to manipulate them in-place?</p>",
        "id": 242364329,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1623426644
    },
    {
        "content": "<p>That documentation was written 7 years ago: <a href=\"https://github.com/rust-lang/rust/commit/8fcb8dd06506d2a371ef12eec6db855d18f32e17\">https://github.com/rust-lang/rust/commit/8fcb8dd06506d2a371ef12eec6db855d18f32e17</a></p>",
        "id": 242365236,
        "sender_full_name": "bjorn3",
        "timestamp": 1623427081
    },
    {
        "content": "<p>I am not sure what was meant with it.</p>",
        "id": 242365282,
        "sender_full_name": "bjorn3",
        "timestamp": 1623427090
    },
    {
        "content": "<p>I'd say that the example would be complex containers that can't or don't feature <code>get_multiple_mut()</code> APIs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">â€¦</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">fst</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">container</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It's not pretty, but it does get the job done for an otherwise impossible or costlier swap.</p>",
        "id": 242365479,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623427193
    },
    {
        "content": "<p>Well, there's <code>mem::swap</code>. I think Option::replace and take are more recent convenience methods?</p>\n<p>For example when you are borrowing a collection owned by a struct, then <code>take</code> out an owned value from that collection, temporarily replacing it with a <code>None</code>, release the borrow on the collection so you can mutably borrow the whole struct again and call a  <code>&amp;mut self</code> function together with the extracted value... and when done put it back in the end.</p>",
        "id": 242365486,
        "sender_full_name": "The 8472",
        "timestamp": 1623427197
    }
]