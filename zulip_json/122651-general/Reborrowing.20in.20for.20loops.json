[
    {
        "content": "<p>A friend of mine who has been learning rust just stumbled on this surprising behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// doesn't move x</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// doesn't move x</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">into_iter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// doesn't move x</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// moves x</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// fail</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(My friend is pretty new to rust and lifetimes, so the concept of consuming a <code>&amp;mut T</code> is all sorts of weird.) What is the reason for suppressing the reborrow when it is used as an argument to a for loop?</p>",
        "id": 259763915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635647615
    },
    {
        "content": "<p>Wow, this is really subtle.  If I take out that type annotation, the third loop starts being a move:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// doesn't move x</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// doesn't move x</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span>::<span class=\"n\">into_iter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// now this actually moves x</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// fail</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7ae16f7c030377c7254412eab4a8df0e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7ae16f7c030377c7254412eab4a8df0e</a>&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0382]: use of moved value: `x`\n   --&gt; src/main.rs:6:15\n    |\n2   |     let x = &amp;mut vec![1];\n    |         - move occurs because `x` has type `&amp;mut Vec&lt;i32&gt;`, which does not implement the `Copy` trait\n...\n5   |     for _i in &lt;_&gt;::into_iter(x) {} // now this actually moves x\n    |               ----------------- `x` moved due to this method call\n6   |     for _i in x {} // fail\n    |               ^ value used here after move\n</code></pre></div>",
        "id": 259773771,
        "sender_full_name": "scottmcm",
        "timestamp": 1635664751
    },
    {
        "content": "<p>The actual desugar is to <code>IntoIterator::into_iter(...)</code>: <a href=\"https://github.com/rust-lang/rust/blob/0a09858b05bb0d92e87077c76fcb0648d32d44db/compiler/rustc_ast_lowering/src/expr.rs#L1446-L1453\">https://github.com/rust-lang/rust/blob/0a09858b05bb0d92e87077c76fcb0648d32d44db/compiler/rustc_ast_lowering/src/expr.rs#L1446-L1453</a></p>",
        "id": 259774037,
        "sender_full_name": "scottmcm",
        "timestamp": 1635664986
    },
    {
        "content": "<p>I think this is another instance of <a href=\"https://github.com/rust-lang/rust/issues/89966\">https://github.com/rust-lang/rust/issues/89966</a>, just more hidden</p>",
        "id": 259792799,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1635694127
    },
    {
        "content": "<p>This is yet another case for the good old \"type inference inhibits coercion\"</p>",
        "id": 259800050,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635703378
    },
    {
        "content": "<p>This is pretty intended much behaviour, but we should surely have better documentation: <a href=\"https://github.com/rust-lang/reference/issues/788\">rust-lang/reference#788</a></p>",
        "id": 259800150,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635703539
    },
    {
        "content": "<p>Note that <code>&amp;'a mut T</code> to <code>&amp;'b mut T</code> (if a != b) are different types. So when type inference happens no coercion can be performed. Coercion happens when both the expression type and the expected type are known. Reborrowing is essentially a subtyping coercion.</p>",
        "id": 259800385,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635703871
    },
    {
        "content": "<p>From a teaching perspective, I don't think it helps to say that this is a consequence of the interaction between type inference and coercion. Is this a <em>desired</em> behavior, and if not what can be done to fix it? One solution that comes to mind is to postprocess the elaborated expression and insert reborrows on every term of type <code>&amp;mut T</code>, so as to ensure the property that every source level term of type &amp;mut T is reborrowed. Are there undesirable consequences of a transformation like this?</p>",
        "id": 259801515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635705288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338379\">Giacomo Stevanato</span> <a href=\"#narrow/stream/122651-general/topic/Reborrowing.20in.20for.20loops/near/259792799\">said</a>:</p>\n<blockquote>\n<p>I think this is another instance of <a href=\"https://github.com/rust-lang/rust/issues/89966\">https://github.com/rust-lang/rust/issues/89966</a>, just more hidden</p>\n</blockquote>\n<p>I wonder why this edge case keeps being stumbled upon recently. I don't think anything changed...</p>",
        "id": 259801524,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635705299
    },
    {
        "content": "<p>Oh, the issue mentions <a href=\"https://www.reddit.com/r/rust/comments/464jge/lifetime_issues_turning_tail_recursion_into_a_loop/\">https://www.reddit.com/r/rust/comments/464jge/lifetime_issues_turning_tail_recursion_into_a_loop/</a> where moving (not reborrowing) a mutable reference is necessary</p>",
        "id": 259801784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635705642
    }
]