[
    {
        "content": "<p>I just ran into an interesting issue with type inference.</p>",
        "id": 206412551,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008754
    },
    {
        "content": "<p>I wrote this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">waitid_pidfd</span><span class=\"p\">(</span><span class=\"n\">pidfd</span>: <span class=\"nc\">RawFd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wnohang</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">libc</span>::<span class=\"n\">siginfo_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">libc</span>::<span class=\"n\">rusage</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">siginfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rusage</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">wnohang</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">libc</span>::<span class=\"n\">WNOHANG</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">syscall_result</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">libc</span>::<span class=\"n\">syscall</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">libc</span>::<span class=\"n\">SYS_waitid</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">P_PIDFD</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">pidfd</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">siginfo</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">flags</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">rusage</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">siginfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">siginfo</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">wnohang</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">siginfo</span><span class=\"p\">.</span><span class=\"n\">si_pid</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">io</span>::<span class=\"n\">ErrorKind</span>::<span class=\"n\">WouldBlock</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">siginfo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">rusage</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206412555,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008767
    },
    {
        "content": "<p>And I got this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0282</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">annotations</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">41</span>:<span class=\"mi\">31</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">27</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">siginfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">-------</span><span class=\"w\"> </span><span class=\"n\">consider</span><span class=\"w\"> </span><span class=\"n\">giving</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">siginfo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">parameters</span><span class=\"w\"> </span><span class=\"n\">specified</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">wnohang</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">siginfo</span><span class=\"p\">.</span><span class=\"n\">si_pid</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                               </span><span class=\"o\">^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"k\">type</span>\n   <span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206412564,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008799
    },
    {
        "content": "<p>In theory, shouldn't Rust be able to infer the type?</p>",
        "id": 206412565,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008806
    },
    {
        "content": "<p>It knows the <code>siginfo</code> in the return value is a <code>libc::siginfo_t</code>.</p>",
        "id": 206412576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008833
    },
    {
        "content": "<p>Which means the previous <code>siginfo.assume_init()</code> must return <code>libc::siginfo_t</code>, so the previous <code>siginfo</code> has type <code>MaybeUninit&lt;libc::siginfo_t&gt;</code>.</p>",
        "id": 206412617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008878
    },
    {
        "content": "<p>What prevents Rust from inferring that?</p>",
        "id": 206412619,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008886
    },
    {
        "content": "<p>field accesses and inherent method calls will stall type inference</p>",
        "id": 206412620,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597008898
    },
    {
        "content": "<p>It's a limitation of the current type inference engine</p>",
        "id": 206412630,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597008914
    },
    {
        "content": "<p>Ah. So, it isn't that Rust <em>couldn't</em>, it's that it assumes at the point of <code>siginfo.si_pid</code> that if it doesn't know at that point something must have gone wrong?</p>",
        "id": 206412633,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597008936
    },
    {
        "content": "<p>Not so much \"gone wrong\", but it has no concept of deferring type-checking a field access, so if the type is not already inferred at that point it will fail</p>",
        "id": 206412679,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1597009012
    },
    {
        "content": "<p>Got it.</p>",
        "id": 206412695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597009053
    },
    {
        "content": "<p>Easy enough to fill in a type signature there.</p>",
        "id": 206412696,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597009061
    },
    {
        "content": "<p>...now to figure out why there's no <code>si_pid</code> field...</p>",
        "id": 206412800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597009285
    },
    {
        "content": "<p>Ah. Sigh.</p>",
        "id": 206412804,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597009300
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/libc/issues/1381\">https://github.com/rust-lang/libc/issues/1381</a></p>",
        "id": 206412990,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597009675
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/libc/pull/1858\">https://github.com/rust-lang/libc/pull/1858</a></p>",
        "id": 206413898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597011296
    }
]