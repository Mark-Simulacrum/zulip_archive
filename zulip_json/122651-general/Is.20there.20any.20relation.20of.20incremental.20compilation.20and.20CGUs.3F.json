[
    {
        "content": "<p>During a training, someone asked if incremental compilation occurs at the granularity of codegen units. I don't know the answer to that, but my guess would be that the two are orthogonal.</p>",
        "id": 227463788,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614099164
    },
    {
        "content": "<p>they are pretty related <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/partitioning/index.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/partitioning/index.html</a></p>",
        "id": 227463914,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614099211
    },
    {
        "content": "<p>incremental before LLVM is very granular, but during codegen it's only as granular as a CGU</p>",
        "id": 227464078,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614099255
    },
    {
        "content": "<p>So in debug, we default to CGU=256; does that mean that the granularity of incremental (and thus the effectiveness)  is increased?</p>",
        "id": 227464225,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614099313
    },
    {
        "content": "<p>I think so</p>",
        "id": 227464309,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614099346
    },
    {
        "content": "<blockquote>\n<p>From that point of view it would make sense to maximize the number of codegen units by,</p>\n</blockquote>",
        "id": 227464318,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614099350
    },
    {
        "content": "<blockquote>\n<p>The bigger the codegen units, the better LLVM's optimizer can do its work, but also the smaller the compilation time reduction we get from incremental compilation.</p>\n</blockquote>",
        "id": 227464398,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614099371
    },
    {
        "content": "<p>Note that making the amount of codegen units too high increases overhead inside LLVM and the linker, negating any benefits of increasing the amount of codegen units.</p>",
        "id": 227464412,
        "sender_full_name": "bjorn3",
        "timestamp": 1614099381
    },
    {
        "content": "<p>Makes sense. I think the part I was missing was that incremental extends beyond \"just rustc\" (but in retrospect it must)</p>",
        "id": 227464481,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614099410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> which is why it's 256 and not 9999999999, I guess?</p>",
        "id": 227464581,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1614099442
    },
    {
        "content": "<p>I believe so. Let me find the PR that added the 256 cgu cap.</p>",
        "id": 227464688,
        "sender_full_name": "bjorn3",
        "timestamp": 1614099479
    },
    {
        "content": "<p>That is <a href=\"https://github.com/rust-lang/rust/issues/70156\">#70156</a>.</p>",
        "id": 227465336,
        "sender_full_name": "bjorn3",
        "timestamp": 1614099710
    }
]