[
    {
        "content": "<p>I just had the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">map_yaml</span><span class=\"p\">.</span><span class=\"n\">as_hash</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Yaml</span>::<span class=\"n\">Real</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Yaml</span>::<span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Yaml</span>::<span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"true\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"false\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Yaml</span>::<span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Yaml</span>::<span class=\"n\">Null</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"null\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Unknown key type\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But when it run into the <code>Yaml::Boolean</code> case the for loop just ended (no error message or anything). After switching it out to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Yaml</span>::<span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"true\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"false\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>\n<p>everything runs as expected. Can anyone tell me why the first code just ended the for loop?</p>",
        "id": 218653306,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1606970492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369173\">Florian Krauthan</span> <a href=\"#narrow/stream/122651-general/topic/Strange.20Error.20with.20Enum.20and.20for.20loop/near/218653306\">said</a>:</p>\n<p>I just had the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">Yaml</span>::<span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"true\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"false\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In the above snippet, you are <code>return</code>ing the <code>()</code> value. That short-circuits the for loop, and returns.</p>",
        "id": 218654117,
        "sender_full_name": "nyms",
        "timestamp": 1606971632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354190\">@nyms</span>  Just learned about () this week.  It’s actually called a unit</p>",
        "id": 218654546,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1606972266
    },
    {
        "content": "<p>Oh interesting. But how can I return the <code>()</code> value if the match expects an <code>Option&lt;String&gt;</code>? It might have been IDEA's fault since I had it as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">Yaml</span>::<span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"true\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"false\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and it suggested to refactor it to the other style?</p>",
        "id": 218655137,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1606973238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369173\">@Florian Krauthan</span> Can you explain to me the purpose of the return statement?  Thanks.</p>",
        "id": 218657582,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1606976687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> I am still pretty new to Rust. In theory I don't need the return at all (as the important part os the <code>config.insert</code> but the rust compiler didn't let me not return a value as all other arms are returning an Option (since that is what hashMap.insert is returning).</p>",
        "id": 218657756,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1606976985
    },
    {
        "content": "<p>I'm pretty new to Rust as well.  Since you didn't have a semicolon at the end of the expression(s), I just didn't think the return was needed.  So, you're returning either \"true\" or \"false\".  I'm not caught up on the Option&lt;String&gt;</p>",
        "id": 218658042,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1606977401
    },
    {
        "content": "<p>All of the arms of a match expression, or all of the branches of an if/then/else, need to line up. If you have some arms which are evaluating to a value of a different type (like Option&lt;String&gt;) but you're not using them, my recommendation would be to wrap those arms in braces and then stick a semicolon at the end of the expression to explicitly discard that value. Then every arm will evaluate to the same type, unit <code>()</code></p>",
        "id": 218692329,
        "sender_full_name": "Michael Snoyman",
        "timestamp": 1607002199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"368558\">@Michael Snoyman</span> if you drop <em>both</em> the <code>return</code> keyword <em>and</em> the <code>;</code> at the end of both <code>if … else </code> branches, then your code should be equivalent to the second one with the <code>match</code></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>                Yaml::Boolean(b) =&gt; {\n<span class=\"gd\">-                   return if *b == true {</span>\n<span class=\"gi\">+                   if *b {</span>\n<span class=\"gd\">-                       config.insert(String::from(key.as_str().unwrap()), String::from(\"true\"));</span>\n<span class=\"gi\">+                       config.insert(String::from(key.as_str().unwrap()), String::from(\"true\"))</span>\n                    } else {\n<span class=\"gd\">-                       config.insert(String::from(key.as_str().unwrap()), String::from(\"false\"));</span>\n<span class=\"gi\">+                       config.insert(String::from(key.as_str().unwrap()), String::from(\"false\"))</span>\n<span class=\"gd\">-                   };</span>\n<span class=\"gi\">+                   }</span>\n                }\n</code></pre></div>",
        "id": 218695505,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607003906
    },
    {
        "content": "<p>Also note that you can bundle the <code>bool</code> check inside the <code>match</code> arms:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Yaml</span>::<span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"true\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Yaml</span>::<span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"false\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or use the <code>if … else …</code> as a ternary:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Yaml</span>::<span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"true\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"false\"</span><span class=\"w\"> </span><span class=\"p\">})),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218696223,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607004235
    },
    {
        "content": "<p>Oh cool. The more I learn about Rust the more I like a lot of the features it offers.</p>",
        "id": 218731627,
        "sender_full_name": "Florian Krauthan",
        "timestamp": 1607018524
    }
]