[
    {
        "content": "<p>Is it possible to obtain the current target tuple without using a build script?</p>",
        "id": 220672562,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608629360
    },
    {
        "content": "<p>Not that I know of :(</p>",
        "id": 220691124,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608645400
    },
    {
        "content": "<p>You do have to use a build script, and then there's an environment variable with the target.</p>",
        "id": 220847611,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608783397
    },
    {
        "content": "<p>What are you looking to use it for?</p>",
        "id": 220847615,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608783407
    },
    {
        "content": "<p>It might be neat if there were something like <code>cfg_str!(name)</code> giving you a <code>&amp;'static str</code>, just like <code>cfg!(foo)</code> gives a <code>bool</code></p>",
        "id": 220848054,
        "sender_full_name": "cuviper",
        "timestamp": 1608784117
    },
    {
        "content": "<p>Of course not all are strings, and some have multiple values</p>",
        "id": 220848061,
        "sender_full_name": "cuviper",
        "timestamp": 1608784145
    },
    {
        "content": "<p>They don't <em>need</em> to return all the same type though (after all, it's a macro, not a function)! We could have <code>cfg_value!(name)</code> (where name is just a textual symbol – i.e., not a string) and then it would return whatever type was appropriate for the value. So <code>cfg_value!(target_triple)</code> could return a value of type <code>(&amp;'static str, &amp;'static str, &amp;'static str)</code> or something.</p>",
        "id": 220848274,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608784469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/Getting.20the.20target.20tuple/near/220847615\">said</a>:</p>\n<blockquote>\n<p>What are you looking to use it for?</p>\n</blockquote>\n<p>Not anything terribly important. In rust-analyzer there's a helper program that produces the release artifacts and I've recently updated it to support cross-compilation by getting a target from the environment. But if you don't pass the target, it will compile the project for the host platform, for convenience. So I wanted the current target tuple to append it to the release artifacts name.</p>",
        "id": 220856384,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608798246
    },
    {
        "content": "<p>Basically to avoid this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/25a9877/xtask/src/dist.rs#L96-L111\">https://github.com/rust-analyzer/rust-analyzer/blob/25a9877/xtask/src/dist.rs#L96-L111</a>.</p>",
        "id": 220856573,
        "sender_full_name": "Laurențiu",
        "timestamp": 1608798559
    },
    {
        "content": "<p>I believe the TARGET environment variable is only set when running the build script. It has been a source of major headaches to me in the past.</p>",
        "id": 220869791,
        "sender_full_name": "nagisa",
        "timestamp": 1608816358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> I really like that idea. That would also allow for cfg values (including features) with non-boolean values.</p>",
        "id": 220940429,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608938172
    },
    {
        "content": "<p>In <span class=\"user-group-mention\" data-user-group-id=\"3139\">@T-cargo</span>, we've talked about cargo \"capabilities\", which would be like features but with a value.</p>",
        "id": 220940432,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608938206
    },
    {
        "content": "<p>For instance, a runtime or backend selection from a set of mutually exclusive options.</p>",
        "id": 220940439,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608938251
    },
    {
        "content": "<p>Being able to get that value as a string would allow for more options than just statically comparing it with a string to get a boolean.</p>",
        "id": 220940481,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1608938287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/122651-general/topic/Getting.20the.20target.20tuple/near/220940432\">said</a>:</p>\n<blockquote>\n<p>In <span class=\"user-group-mention\" data-user-group-id=\"3139\">@T-cargo</span>, we've talked about cargo \"capabilities\", which would be like features but with a value.</p>\n</blockquote>\n<p>Are these like top-level values, such as <code>link-type</code> for C libs?</p>",
        "id": 220944316,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1608946639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> They'd have a single value throughout the dependency tree.</p>",
        "id": 221027367,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609110509
    }
]