[
    {
        "content": "<p>I'm looking to create a function which boxes a type I have for dynamic dispatch- but I'm trying to avoid the BoxFuture / LocalBoxFuture scheme and make a <code>.boxed</code> that is polymorphic over Send / Sync status. Is there a way to be polymorphic over these traits, so I can just say \"anything dyn, and matching the Send-ness or Sync-ness of the input\"?</p>",
        "id": 249790540,
        "sender_full_name": "Zoey",
        "timestamp": 1629241756
    },
    {
        "content": "<p>i don't think so. often if i use generics its just to propagate send/sync.</p>",
        "id": 249790652,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1629241850
    },
    {
        "content": "<p>Oof. Okay, so there's currently no way to avoid distinguishing <code>.boxed()</code>, <code>.boxed_local()</code> paths?</p>",
        "id": 249790680,
        "sender_full_name": "Zoey",
        "timestamp": 1629241903
    },
    {
        "content": "<p>I'm thinking maaaybe there's a way to make a <code>Boxable</code> trait and where-<code>impl</code> such that it has an associated type for the result of Boxed... But that requires a !Send constraint to ensure the trait is allowed to be implemented without specialization</p>",
        "id": 249790872,
        "sender_full_name": "Zoey",
        "timestamp": 1629242052
    },
    {
        "content": "<p>Okay, I had an idea for how to do it but I'm stuck on something:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Boxable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Boxed</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">into_box</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Boxed</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This <em>almost</em> works, but when I try to implement it for a trait of mine which takes a generic, I don't know how to properly constrain the impl over that trait.</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f93def82dce350fe7a6cb6cb269789da\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f93def82dce350fe7a6cb6cb269789da</a></p>\n<p>(<code>Client</code> normally has more content; I stripped it down a bit for this repro)</p>\n<p>I run into:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0207]: the type parameter `TStream` is not constrained by the impl trait, self type, or predicates\n  --&gt; src/lib.rs:14:15\n   |\n14 | impl&lt;TClient, TStream&gt; Boxable for TClient\n   |               ^^^^^^^ unconstrained type parameter\n</code></pre></div>\n<p>But TStream is the generic parameter to Client in TClient; is there a way I can avoid passing the generic parameter to Client at all, or a way to say <code>TClient: for&lt;TStream&gt; Client&lt;TStream&gt;</code>?</p>",
        "id": 249793450,
        "sender_full_name": "Zoey",
        "timestamp": 1629244579
    },
    {
        "content": "<p>Simplifying the question: If I have a generic trait and want to implement a trait over all instances of that trait, what do I provide to the generic to actually constrain it?</p>",
        "id": 249793778,
        "sender_full_name": "Zoey",
        "timestamp": 1629244879
    },
    {
        "content": "<p>Oof. Okay, working around that reduces to two other issues:</p>\n<ul>\n<li>Traits with GATs are not object-safe (Is there a plan to eventually change this?)</li>\n<li>Traits with methods that have type parameters are not object-safe</li>\n</ul>",
        "id": 249795281,
        "sender_full_name": "Zoey",
        "timestamp": 1629246316
    },
    {
        "content": "<p>I think you could do this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsSend</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_SEND</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsSend</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsSend</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsSendFuture</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_SEND</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">IsSend</span><span class=\"o\">&lt;</span><span class=\"n\">IS_SEND</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_SEND</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IsSendFuture</span><span class=\"o\">&lt;</span><span class=\"n\">IS_SEND</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">IsSend</span><span class=\"o\">&lt;</span><span class=\"n\">IS_SEND</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">box_future</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_SEND</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">future</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">IsSendFuture</span><span class=\"o\">&lt;</span><span class=\"n\">IS_SEND</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">IsSend</span><span class=\"o\">&lt;</span><span class=\"n\">IS_SEND</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">pin</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249822855,
        "sender_full_name": "Kestrer",
        "timestamp": 1629276892
    },
    {
        "content": "<p>Ah, you would need some <code>unsafe</code> there because <code>T: IsSend&lt;true&gt;</code> doesn't imply <code>T: Send</code> to the compiler, even though you know that will always be the case</p>",
        "id": 249823005,
        "sender_full_name": "Kestrer",
        "timestamp": 1629277042
    },
    {
        "content": "<p>so your containers might have to use a <code>unsafe impl Send for Container&lt;true&gt; {}</code></p>",
        "id": 249823027,
        "sender_full_name": "Kestrer",
        "timestamp": 1629277069
    },
    {
        "content": "<p>Note, that definition would permit <code>T: Send+IsSend&lt;false&gt;</code>.</p>",
        "id": 249838869,
        "sender_full_name": "Connor Horman",
        "timestamp": 1629288290
    },
    {
        "content": "<p>I think that's desired, it's perfectly OK to box a Send future as a <code>LocalBoxFuture</code> after all.</p>",
        "id": 249910473,
        "sender_full_name": "Kestrer",
        "timestamp": 1629320190
    },
    {
        "content": "<p>I've toyed with some such proptotypes here: <a href=\"https://docs.rs/stackbox/0.1.2/stackbox/dyn_traits/any/struct.StackBoxDynAny.html\">https://docs.rs/stackbox/0.1.2/stackbox/dyn_traits/any/struct.StackBoxDynAny.html</a></p>\n<p>Feel free to check the tests to see that it's always using <code>.into_dyn()</code>: <a href=\"https://github.dev/danielhenrymantilla/stackbox.rs/blob/v0.1.2/src/dyn_traits/tests.rs\">https://github.dev/danielhenrymantilla/stackbox.rs/blob/v0.1.2/src/dyn_traits/tests.rs</a></p>",
        "id": 249970401,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1629371625
    }
]