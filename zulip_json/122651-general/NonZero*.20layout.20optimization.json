[
    {
        "content": "<p>Hello everyone!</p>\n<p>Is there a specific reason for an enum with two variants where each is holding  a <code>NonZeroUsize</code> to not be optimized to the same size as a <code>usize</code>?<br>\nIn my mind, we could use 1bit for the discriminant and the rest of the bits for the <code>NonZeroUsize</code>: <br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2dbd99c0afe54fbf07fea63a54a5aa62\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2dbd99c0afe54fbf07fea63a54a5aa62</a></p>",
        "id": 213435613,
        "sender_full_name": "marmeladema",
        "timestamp": 1602772780
    },
    {
        "content": "<p>there isn't any free bit in there, just the value 0 is free</p>",
        "id": 213435751,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602772829
    },
    {
        "content": "<p>ah<br>\nsilly me</p>",
        "id": 213435892,
        "sender_full_name": "marmeladema",
        "timestamp": 1602772904
    },
    {
        "content": "<p>of course</p>",
        "id": 213435909,
        "sender_full_name": "marmeladema",
        "timestamp": 1602772912
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 213440220,
        "sender_full_name": "marmeladema",
        "timestamp": 1602774603
    },
    {
        "content": "<p>Even if there were free bits with some data type, references need to work normally. A <code>&amp;T</code> may look corrupt if some bits were set for the discriminator, and <code>&amp;mut T</code> could clobber it.</p>",
        "id": 213441563,
        "sender_full_name": "cuviper",
        "timestamp": 1602775056
    },
    {
        "content": "<p>Oh ok that make sense</p>",
        "id": 213443906,
        "sender_full_name": "marmeladema",
        "timestamp": 1602776019
    },
    {
        "content": "<p>Is there an equivalent to NonZero for  maximum? Like <code>NonMaxUsize</code>. It happens sometime that I store some indexes and such index can never be usize::MAX because that would mean we have allocated usize+1 elements (if I am correct).</p>",
        "id": 213444234,
        "sender_full_name": "marmeladema",
        "timestamp": 1602776161
    },
    {
        "content": "<p>do you mind using nightly for this?</p>",
        "id": 213445110,
        "sender_full_name": "lcnr",
        "timestamp": 1602776521
    },
    {
        "content": "<p>there is <code>#[rustc_layout_scalar_valid_range_end(...)]</code> which does this, but we don't yet have a stable alternative here</p>",
        "id": 213445234,
        "sender_full_name": "lcnr",
        "timestamp": 1602776562
    },
    {
        "content": "<p>i think that we will probably end up with something like <code>UsizeValidRange&lt;const L: usize, const H: usize&gt;(usize)</code> in the distant future</p>",
        "id": 213445435,
        "sender_full_name": "lcnr",
        "timestamp": 1602776645
    },
    {
        "content": "<p>Would be cool to have a <code>Index&lt;T&gt;</code> type that's <code>[0, usize::MAX / max(1, sizeof(T))]</code>.  Because for non-ZSTs it's not just <code>usize::MAX</code> that's impossible.</p>",
        "id": 213448204,
        "sender_full_name": "scottmcm",
        "timestamp": 1602777761
    },
    {
        "content": "<p>Yeah that would be really great!</p>",
        "id": 213451867,
        "sender_full_name": "marmeladema",
        "timestamp": 1602779527
    },
    {
        "content": "<p>Could such a type rely internally (ie: in std) to some unstable feature, but being exposed at some point in stable without actually stabilizing the underlying feature?</p>",
        "id": 213452901,
        "sender_full_name": "marmeladema",
        "timestamp": 1602780024
    },
    {
        "content": "<p>And could it be implemented like that:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct BoundedIndex&lt;T&gt;(\n     #[rustc_layout_scalar_valid_range_end(usize::MAX / max(1, sizeof(T)))]\n    index: usize,\n);\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 213453397,
        "sender_full_name": "marmeladema",
        "timestamp": 1602780224
    },
    {
        "content": "<p>I tried to get that into <code>[T]::len</code> itself as a hint, not a type, but that lead to some compile time regressions.<br>\nMight be interesting to see if those regressions disappear if the repr were a different type instead of <code>assume</code> on load.</p>",
        "id": 213454564,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1602780680
    },
    {
        "content": "<p>A stricter limit is <code>isize::MAX / size_of::&lt;T&gt;()</code> for sized types, and <code>usize::MAX</code> for ZSTs.</p>",
        "id": 213454717,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1602780747
    },
    {
        "content": "<p><code>rustc_index</code> defines <code>u32</code>-based newtype indexes, and uses that valid range attribute to expose a niche:<br>\n<a href=\"https://github.com/rust-lang/rust/blob/7f587168102498a488abf608a86c7fdfa62fb7bb/compiler/rustc_index/src/vec.rs#L108-L111\">https://github.com/rust-lang/rust/blob/7f587168102498a488abf608a86c7fdfa62fb7bb/compiler/rustc_index/src/vec.rs#L108-L111</a></p>",
        "id": 213455009,
        "sender_full_name": "cuviper",
        "timestamp": 1602780894
    },
    {
        "content": "<p>Does the attribute work with non-literal arguments?</p>",
        "id": 213455435,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1602781077
    },
    {
        "content": "<p>I don't know</p>",
        "id": 213455588,
        "sender_full_name": "cuviper",
        "timestamp": 1602781128
    },
    {
        "content": "<p>BTW, <code>MAX</code> <em>is</em> a valid index for ZSTs when slicing is involved, as the exclusive end of a range</p>",
        "id": 213455715,
        "sender_full_name": "cuviper",
        "timestamp": 1602781197
    },
    {
        "content": "<p>Does not seem so:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: expected unsuffixed literal or identifier, found `&lt;`\n --&gt; src/main.rs:9:57\n  |\n9 |      #[rustc_layout_scalar_valid_range_end(compute_len::&lt;T&gt;())]\n  |                                                         ^\n</code></pre></div>\n\n\n<p>for <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=44061c06bce0973eb7b55e602334a198\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=44061c06bce0973eb7b55e602334a198</a></p>",
        "id": 213455958,
        "sender_full_name": "marmeladema",
        "timestamp": 1602781284
    },
    {
        "content": "<p>Oh, is the attribute not inclusive?</p>",
        "id": 213455959,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1602781285
    },
    {
        "content": "<p>I think the attribute is inclusive</p>",
        "id": 213456122,
        "sender_full_name": "cuviper",
        "timestamp": 1602781349
    },
    {
        "content": "<p>I just meant that in general, when considering the limits of your indices, the exclusive end may matter too</p>",
        "id": 213456204,
        "sender_full_name": "cuviper",
        "timestamp": 1602781396
    },
    {
        "content": "<p>Such a type would be very useful</p>",
        "id": 213456526,
        "sender_full_name": "marmeladema",
        "timestamp": 1602781542
    },
    {
        "content": "<p>Those inclusive bounds were accepted once, except for the compile time regression: <a href=\"https://github.com/rust-lang/rust/pull/77023/files#diff-e8ccaf64ce21f955ccebef33b52158631493a6f0966815a2ebc142d7cd2b5e06R84-R90\">https://github.com/rust-lang/rust/pull/77023/files#diff-e8ccaf64ce21f955ccebef33b52158631493a6f0966815a2ebc142d7cd2b5e06R84-R90</a></p>",
        "id": 213457547,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1602782010
    },
    {
        "content": "<p>That's not exactly the same thing though?</p>",
        "id": 213459179,
        "sender_full_name": "marmeladema",
        "timestamp": 1602782762
    },
    {
        "content": "<p>In my case, I want a usize-like type that does not use all the possible values, to be able to store a <code>Option&lt;BoundedIndex&lt;T&gt;&gt;</code> to fit in 8 bytes like a <code>usize</code></p>",
        "id": 213459291,
        "sender_full_name": "marmeladema",
        "timestamp": 1602782813
    },
    {
        "content": "<p>The type is not the same but the bound should be.<br>\nThe possible value range of <code>len()</code> is the same as that of indices.</p>",
        "id": 213459843,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1602783050
    },
    {
        "content": "<p>I'm curious about the blockers for stable layout optimizations; I'll start a new thread for it, though.</p>",
        "id": 213473502,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602788948
    }
]