[
    {
        "content": "<p>I'm passing <code>&amp;[T]</code> from one API to another via C FFI, but I'm calling these APIs a lot and I'm getting hit by the wrapping &amp; unwrapping of from_raw_parts.</p>",
        "id": 252148617,
        "sender_full_name": "hannahE2",
        "timestamp": 1630919756
    },
    {
        "content": "<p>I'd like to just pass it as a <code>#[repr(C)] struct(....????....);</code> that has the exact same layout as <code>&amp;[T]</code></p>",
        "id": 252148772,
        "sender_full_name": "hannahE2",
        "timestamp": 1630919827
    },
    {
        "content": "<p>I've tried <code>#[repr(C)] struct S(*mut u8, usize)</code> and <code>#[repr(C)] struct S(usize, *mut u8)</code> without luck. </p>\n<p>What's the actual layout of <code>&amp;[T]</code>? Can it be expressed in Rust ?</p>\n<hr>\n<p>Not sure if the errors that I am seeing might be because the <code>repr(C)</code> layout differs from that of the <code>&amp;[T]</code>, but it appears that they do indeed differ. Is there a way to dump their layouts from their compiler for comparison?</p>",
        "id": 252148833,
        "sender_full_name": "hannahE2",
        "timestamp": 1630919872
    },
    {
        "content": "<p>The layout of <code>&amp;[T]</code> is unstable.</p>",
        "id": 252149425,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920215
    },
    {
        "content": "<p>In any case the <strong>current</strong> layout is a separate pointer and length argument without wrapping it in a struct.</p>",
        "id": 252149505,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920252
    },
    {
        "content": "<p>So there is no way to express that in Rust ?</p>",
        "id": 252149527,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920275
    },
    {
        "content": "<p>No</p>",
        "id": 252149575,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920302
    },
    {
        "content": "<p>i.e. there is no <code>repr(slice)</code> or something ?</p>",
        "id": 252149593,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920309
    },
    {
        "content": "<p>No</p>",
        "id": 252149610,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920319
    },
    {
        "content": "<p>so that's bad, thanks</p>",
        "id": 252149624,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920326
    },
    {
        "content": "<p>from_raw_parts is the way to go for now.</p>",
        "id": 252149632,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920330
    },
    {
        "content": "<p>that sucks because its unsafe</p>",
        "id": 252149811,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920422
    },
    {
        "content": "<p>I think the unsafe code guidelines are wrong</p>",
        "id": 252149998,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920543
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html\">https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html</a></p>",
        "id": 252150037,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920577
    },
    {
        "content": "<p>If you see the pointer to the slice section, it says that the</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C)]\nstruct Slice&lt;T&gt; {\n  ptr: *const T,\n  len: usize,\n}\n</code></pre></div>\n<p>has the same layout as <code>*const [T]</code>/<code>&amp;[T]</code></p>",
        "id": 252150121,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920609
    },
    {
        "content": "<p>But that is incorrect because the \"call ABI\" of these differ.</p>",
        "id": 252150148,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920626
    },
    {
        "content": "<p>The UCG talks about memory layout and not call ABI.</p>",
        "id": 252150159,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920637
    },
    {
        "content": "<p>The UCG defines call ABI as part of layout, with niches, and many other things.</p>",
        "id": 252150178,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920652
    },
    {
        "content": "<p><code>rustc</code> also considers \"call ABI\" to be part of Layout</p>",
        "id": 252150198,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920666
    },
    {
        "content": "<p>In that case the UCG is indeed wrong.</p>",
        "id": 252150236,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920690
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#layout\">https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#layout</a></p>",
        "id": 252150259,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920709
    },
    {
        "content": "<blockquote>\n<p>Moreover, the layout of a type records its function call ABI (or just ABI for short): how the type is passed by value across a function boundary.</p>\n</blockquote>",
        "id": 252150318,
        "sender_full_name": "hannahE2",
        "timestamp": 1630920727
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/unsafe-code-guidelines/introduction.html\">https://rust-lang.github.io/unsafe-code-guidelines/introduction.html</a></p>\n<blockquote>\n<p>Unless we state otherwise, the information in the guide is mostly a \"recommendation\" and still subject to change.</p>\n</blockquote>\n<p>Also, in the page for pointers, where the layout of <code>&amp;[T]</code> is described:<br>\n<a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html#layout-of-reference-and-pointer-types\">https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html#layout-of-reference-and-pointer-types</a></p>\n<blockquote>\n<p>Disclaimer: Everything this section says about pointers to dynamically sized types represents the consensus from issue <a href=\"https://github.com/rust-lang/rust/issues/16\">#16</a>, but has not been stabilized through an RFC. As such, this is preliminary information.</p>\n</blockquote>",
        "id": 252242222,
        "sender_full_name": "matt1992",
        "timestamp": 1630981254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409057\">hannahE2</span> <a href=\"#narrow/stream/122651-general/topic/what's.20the.20layout.20of.20.26.5BT.5D.20.3F/near/252148617\">said</a>:</p>\n<blockquote>\n<p>I'm passing <code>&amp;[T]</code> from one API to another via C FFI, but I'm calling these APIs a lot and I'm getting hit by the wrapping &amp; unwrapping of from_raw_parts.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://docs.rs/safer-ffi/0.0.6/safer_ffi/slice/struct.slice_ref.html\">https://docs.rs/safer-ffi/0.0.6/safer_ffi/slice/struct.slice_ref.html</a></li>\n<li><a href=\"https://docs.rs/abi_stable/0.10.1/abi_stable/std_types/struct.RSlice.html\">https://docs.rs/abi_stable/0.10.1/abi_stable/std_types/struct.RSlice.html</a></li>\n<li><a href=\"https://docs.rs/chromium/0.0.2/chromium/struct.SharedSlice.html\">https://docs.rs/chromium/0.0.2/chromium/struct.SharedSlice.html</a></li>\n</ul>",
        "id": 252283918,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1631011230
    },
    {
        "content": "<p>Love to get a mention &lt;3</p>",
        "id": 252323797,
        "sender_full_name": "Lokathor",
        "timestamp": 1631028730
    }
]