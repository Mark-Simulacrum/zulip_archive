[
    {
        "content": "<p>Can attribute macros affect <code>for</code> loops?<br>\nIn C++ the equivalent would be the use of OpenMP pragmas like:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#pragma omp parallel for</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1024</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 212221649,
        "sender_full_name": "Sergio Sánchez",
        "timestamp": 1601815266
    },
    {
        "content": "<p>what does it do in C++ ?</p>",
        "id": 212221807,
        "sender_full_name": "lzutao",
        "timestamp": 1601815481
    },
    {
        "content": "<p>Attributes can annotate loops, see the <code>#[for_await]</code> in <a href=\"https://github.com/taiki-e/futures-async-stream#stream\">https://github.com/taiki-e/futures-async-stream#stream</a> for an example</p>",
        "id": 212222198,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1601816116
    },
    {
        "content": "<p>Requires <code>#![feature(stmt_expr_attributes)]</code></p>",
        "id": 212224765,
        "sender_full_name": "cuviper",
        "timestamp": 1601820374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span>  forks and parallelizes chunks of the loop to a group of threads. joins all the threads when the loop finishes. i put it as an example</p>",
        "id": 212226086,
        "sender_full_name": "Sergio Sánchez",
        "timestamp": 1601822605
    },
    {
        "content": "<p>thanks! <span class=\"user-mention\" data-user-id=\"300586\">@veykril</span> <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span></p>",
        "id": 212226131,
        "sender_full_name": "Sergio Sánchez",
        "timestamp": 1601822645
    },
    {
        "content": "<p>thought you want to find the similar parallel feature in Rust, I was going to suggest rayon.</p>",
        "id": 212226377,
        "sender_full_name": "lzutao",
        "timestamp": 1601823108
    },
    {
        "content": "<p>i know rayon but it is not as performant as OpenMP and there is a lot of HPC tooling around it too. i want to experiment if something could be done here.</p>",
        "id": 212226708,
        "sender_full_name": "Sergio Sánchez",
        "timestamp": 1601823629
    },
    {
        "content": "<p>OpenMP could be reimplemented through procs macros I think, but I don’t know if the performances would be here</p>",
        "id": 212226937,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1601823975
    },
    {
        "content": "<p>I think each month about a implementing the MPI spec in rust but it’s so big</p>",
        "id": 212226946,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1601824016
    },
    {
        "content": "<p>well, you have <a href=\"https://github.com/rsmpi/rsmpi\">https://github.com/rsmpi/rsmpi</a> ;)</p>",
        "id": 212227136,
        "sender_full_name": "Sergio Sánchez",
        "timestamp": 1601824335
    },
    {
        "content": "<p>why performance wouldn't be there?</p>",
        "id": 212227139,
        "sender_full_name": "Sergio Sánchez",
        "timestamp": 1601824348
    },
    {
        "content": "<p>There are two crates for transforming a <code>for</code> loop to a rayon <code>for_each</code>:</p>\n<ul>\n<li>a <code>#[parallel]</code> attribute: <a href=\"https://crates.io/crates/rayon-attr\">https://crates.io/crates/rayon-attr</a></li>\n<li>a <code>parallel!(for ...)</code> macro: <a href=\"https://crates.io/crates/rayon-macro\">https://crates.io/crates/rayon-macro</a></li>\n</ul>",
        "id": 212228570,
        "sender_full_name": "cuviper",
        "timestamp": 1601826730
    },
    {
        "content": "<p>The latter works on stable Rust</p>",
        "id": 212228577,
        "sender_full_name": "cuviper",
        "timestamp": 1601826746
    },
    {
        "content": "<p>But in the end those are pretty limited tricks, no real advantage over writing the iterator in <code>for_each</code> style yourself</p>",
        "id": 212228747,
        "sender_full_name": "cuviper",
        "timestamp": 1601826968
    },
    {
        "content": "<p>I think you'd need deeper compiler integration to get closer to OpenMP,  more than the syntax-level access of proc-macros</p>",
        "id": 212228869,
        "sender_full_name": "cuviper",
        "timestamp": 1601827153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/attribute.20macros.20on.20for.20loops.3F/near/212224765\">said</a>:</p>\n<blockquote>\n<p>Requires <code>#![feature(stmt_expr_attributes)]</code></p>\n</blockquote>\n<p>Note that that isn't needed provided you use a preprocessor on, for instance, the whole function. See <a href=\"https://docs.rs/with_locals\">https://docs.rs/with_locals</a> for an example</p>",
        "id": 212232845,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601833276
    },
    {
        "content": "<p>Interesting, I hadn't thought of applying that at the function level.</p>",
        "id": 212233465,
        "sender_full_name": "cuviper",
        "timestamp": 1601834061
    }
]