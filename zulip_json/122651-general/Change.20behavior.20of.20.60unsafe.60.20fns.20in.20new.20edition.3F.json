[
    {
        "content": "<p>Many people are not happy with the fact that <code>unsafe fn</code>s can do unsafe things inside the function body. Many would prefer if explicit <code>unsafe</code> blocks were required, like in normal functions. But let's not talk about <em>if</em> we want that. My question is: can this behavior be changed in a new edition? <br>\nSeems like a surface level change to me. It does not change APIs in any way and is crate local. Should be possible, right?</p>",
        "id": 185429654,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1578827055
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2585\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2585\">https://github.com/rust-lang/rfcs/pull/2585</a></p>",
        "id": 185433358,
        "sender_full_name": "kennytm",
        "timestamp": 1578833634
    },
    {
        "content": "<p>Thanks! That's great</p>",
        "id": 185434551,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1578835811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span> yes, it can be changed in a new edition</p>",
        "id": 185447581,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578858665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span> I'd be happy for any support in reviving that RFC and pushing it over the finish line -- assuming we can get the conesus for that :)</p>",
        "id": 185645016,
        "sender_full_name": "RalfJ",
        "timestamp": 1579039106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> That would be great. I will take a look soon, but I'm currently having lots of other stuff in my queue. Trying to get used to T-libs life :P</p>",
        "id": 185645737,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1579039523
    },
    {
        "content": "<p>I still think that it would be a very bad idea, very detrimental to unsafe code authors.</p>",
        "id": 185650427,
        "sender_full_name": "Lokathor",
        "timestamp": 1579042484
    },
    {
        "content": "<p>I would be fine with accepting the RFC if we also allow <code>fn foo() -&gt; R = expr;</code></p>",
        "id": 185676150,
        "sender_full_name": "centril",
        "timestamp": 1579075115
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <code>fn foo: fn() -&gt; R = expr;</code> for symmetry with other globals</p>",
        "id": 185676933,
        "sender_full_name": "oli",
        "timestamp": 1579076036
    },
    {
        "content": "<p>(I know arguments and such make this impossible, I am not actually suggesting this)</p>",
        "id": 185676986,
        "sender_full_name": "oli",
        "timestamp": 1579076067
    },
    {
        "content": "<blockquote>\n<p>I still think that it would be a very bad idea, very detrimental to unsafe code authors.</p>\n</blockquote>\n<p>I'm not opposed to having some syntactic sugar that makes it easy to define an unsafe fn with unsafe body when you want to. But I think the current status is indeed more detrimental to unsafe code authors -- I have met plenty of people that fundamentally misunderstood the \"proof obligation\" nature of unsafe blocks because of the way <code>unsafe fn</code> makes everything inconsistent.</p>",
        "id": 185679635,
        "sender_full_name": "RalfJ",
        "timestamp": 1579078924
    },
    {
        "content": "<p>(the <code>= expr;</code> stuff is intended as the sugar, e.g. <code>unsafe fn foo() = unsafe { ... };</code>)</p>",
        "id": 185679699,
        "sender_full_name": "centril",
        "timestamp": 1579079020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the fact that rust does not let you even attempt to properly describe the proof obligations in a checked way is its own whole other problem</p>",
        "id": 185680364,
        "sender_full_name": "Lokathor",
        "timestamp": 1579079664
    },
    {
        "content": "<p>I think there's absolutely an educational gap when it comes to <code>unsafe</code> code</p>",
        "id": 185680465,
        "sender_full_name": "Lokathor",
        "timestamp": 1579079744
    },
    {
        "content": "<p>I don't think that making people fill their functions with more <code>unsafe { ... }</code> around expressions will fix that gap.</p>",
        "id": 185680685,
        "sender_full_name": "Lokathor",
        "timestamp": 1579079896
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> the fact that rust does not let you even attempt to properly describe the proof obligations in a checked way is its own whole other problem</p>\n</blockquote>\n<p>indeed it is, which is why I dont understand why you are even mentioning it</p>",
        "id": 185714306,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105440
    },
    {
        "content": "<p>when I am talking about people misunderstanding <code>unsafe</code>, that has nothing to do with making rustc understand the involved proof obligations any better</p>",
        "id": 185714381,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105472
    },
    {
        "content": "<blockquote>\n<p>I still think that it would be a very bad idea, very detrimental to unsafe code authors.</p>\n</blockquote>\n<p>ISTM it would allow unsafe code authors to make a cleaner separation between <code>unsafe</code> as in implementation details and <code>unsafe</code> as in a contract between an API and its users. That seems like a reasonable thing to have (at the cost of some verbosity), so I wouldn't call it _detrimental_.</p>",
        "id": 185719629,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1579108211
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 185789280,
        "sender_full_name": "Lokathor",
        "timestamp": 1579155940
    }
]