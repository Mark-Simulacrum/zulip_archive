[
    {
        "content": "<p>Could someone with SIMD knowledge please take a look at <a href=\"https://github.com/rust-lang/rust/issues/77477\">https://github.com/rust-lang/rust/issues/77477</a>? Thanks :)</p>",
        "id": 212165420,
        "sender_full_name": "RalfJ",
        "timestamp": 1601721808
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> ?</p>",
        "id": 212169764,
        "sender_full_name": "pachi",
        "timestamp": 1601728750
    },
    {
        "content": "<p>I saw that for a moment last night and I was actually confused on how the llvm intrinsics are supposed to work here.</p>\n<p>Usually I use the vendor intrinsics when I do simd stuff.</p>",
        "id": 212174954,
        "sender_full_name": "Lokathor",
        "timestamp": 1601735456
    },
    {
        "content": "<p>so how do those work, does rustc do static bounds checking there?</p>",
        "id": 212214575,
        "sender_full_name": "RalfJ",
        "timestamp": 1601803370
    },
    {
        "content": "<p>Using llvm intrinsics directly can easily be unsound. There are no correctness checks, as rustc doesn't know which llvm intrinsics exist.</p>",
        "id": 212214689,
        "sender_full_name": "bjorn3",
        "timestamp": 1601803569
    },
    {
        "content": "<p>so \"using vendor intrinsis\" is an alias for \"using llvm intrinsics directly\"?</p>",
        "id": 212214704,
        "sender_full_name": "RalfJ",
        "timestamp": 1601803617
    },
    {
        "content": "<p>The intrinsics in <code>core::arch</code> are wrappers around llvm intrinsics that handle out-of-bound indexes. Often by masking the index.</p>",
        "id": 212214761,
        "sender_full_name": "bjorn3",
        "timestamp": 1601803724
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdarch/blob/027680f3ad857fb1ce2994b1e088f0655d9b3a58/crates/core_arch/src/macros.rs#L7\">https://github.com/rust-lang/stdarch/blob/027680f3ad857fb1ce2994b1e088f0655d9b3a58/crates/core_arch/src/macros.rs#L7</a></p>",
        "id": 212214779,
        "sender_full_name": "bjorn3",
        "timestamp": 1601803787
    },
    {
        "content": "<p>oO</p>",
        "id": 212215392,
        "sender_full_name": "RalfJ",
        "timestamp": 1601804870
    },
    {
        "content": "<p>and the underlying intrinsic then is <code>simd_extract</code>/<code>simd_insert</code>?</p>",
        "id": 212215440,
        "sender_full_name": "RalfJ",
        "timestamp": 1601804905
    },
    {
        "content": "<p>In this case yes, there are also vendor intrinsics that directly use llvm intrinsics.</p>",
        "id": 212215925,
        "sender_full_name": "bjorn3",
        "timestamp": 1601805709
    },
    {
        "content": "<p>so the vendor intrinsics are not really intrinsics in a rustc or LLVM sense? this is all very confusing^^</p>",
        "id": 212217915,
        "sender_full_name": "RalfJ",
        "timestamp": 1601808924
    },
    {
        "content": "<p>Even for C compilers vendor intrinsics may not even be implemented as compiler intrinsics. This includes functions like <code>_mm_cvtsi64_m64</code> (implemented as <code>(__m64)__i</code> in clang), <code>_mm256_add_pd</code> (implemented as <code>(__m256d)((__v4df)__a+(__v4df)__b)</code> in clang), ... In addition every vendor intrinsic for clang that does actually use a real compiler intrinsic is a wrapper around a <code>__builtin_*</code> compiler intrinsic.</p>",
        "id": 212218410,
        "sender_full_name": "bjorn3",
        "timestamp": 1601809846
    },
    {
        "content": "<p>Take a look at for example <code>/usr/include/clang/7.0.1/include/avxintrin.h</code>.</p>",
        "id": 212218414,
        "sender_full_name": "bjorn3",
        "timestamp": 1601809865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> so the answer to my question is \"yes\"?</p>",
        "id": 212219322,
        "sender_full_name": "RalfJ",
        "timestamp": 1601811450
    },
    {
        "content": "<p>Correct</p>",
        "id": 212219326,
        "sender_full_name": "bjorn3",
        "timestamp": 1601811468
    },
    {
        "content": "<p>no wonder I am confused then :D terminology seems to be somewhat overloaded</p>",
        "id": 212219369,
        "sender_full_name": "RalfJ",
        "timestamp": 1601811501
    }
]