[
    {
        "content": "<p>Is there an unwrap-free way to write this code?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">an_option</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">compute_thing</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">an_option</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 197060603,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589123744
    },
    {
        "content": "<p>Semantically, \"put a value into an <code>Option</code> and give me a reference to that value\".</p>",
        "id": 197060634,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589123762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.get_or_insert\" title=\"https://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.get_or_insert\">https://doc.rust-lang.org/nightly/std/option/enum.Option.html#method.get_or_insert</a> I think?</p>",
        "id": 197060796,
        "sender_full_name": "simulacrum",
        "timestamp": 1589123924
    },
    {
        "content": "<p>but not in the language -- that has to use unreachable_unchecked to avoid an unwrap <a href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#865\" title=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#865\">https://doc.rust-lang.org/nightly/src/core/option.rs.html#865</a></p>",
        "id": 197060860,
        "sender_full_name": "simulacrum",
        "timestamp": 1589123965
    },
    {
        "content": "<p>That's a really nice problem <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> I don't think so as the value has to be moved into <code>Some</code>, during which it can't be referenced</p>",
        "id": 197060864,
        "sender_full_name": "lcnr",
        "timestamp": 1589123967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Interesting. Wouldn't have thought of using <code>get_or_insert</code> for a case where I <em>know</em> the value is <code>None</code>.</p>",
        "id": 197060969,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124067
    },
    {
        "content": "<p>Thanks, that should work.</p>",
        "id": 197060978,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124091
    },
    {
        "content": "<p><code>None.get_or_insert(value)</code> looks really weird <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 197061028,
        "sender_full_name": "lcnr",
        "timestamp": 1589124126
    },
    {
        "content": "<p>We <em>could</em> expose a <code>set(&amp;mut self, value: T) -&gt; &amp;mut T</code> API as well which would avoid the initial branch, but I doubt you care</p>",
        "id": 197061031,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> 1) I really don't, and 2) in an ideal world, rust can just inline <code>get_or_insert</code> and notice statically that the value must be None, and thus avoid the branch.</p>",
        "id": 197061067,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124180
    },
    {
        "content": "<p>ah, well, presuming that's statically known then yes</p>",
        "id": 197061104,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124199
    },
    {
        "content": "<p>(generally my code where I \"know\" such things it's because there's code far away that \"knows\" them)</p>",
        "id": 197061121,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124213
    },
    {
        "content": "<p>It does look like in the trivial case at least we do skip the branch <a href=\"https://rust.godbolt.org/z/hEAyqw\" title=\"https://rust.godbolt.org/z/hEAyqw\">https://rust.godbolt.org/z/hEAyqw</a></p>",
        "id": 197061269,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124305
    },
    {
        "content": "<p>The pattern here is \"get thing out of LRU cache if it's there, if not, go get the uncached thing expensively, either way I need a reference, then later I want to stuff any uncached thing into the LRU cache\".</p>",
        "id": 197061271,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124308
    },
    {
        "content": "<p>So <code>an_option</code> here is <code>uncached_thing</code>, which I've just created, and which contains <code>None</code> unless I had to go expensively retrieve the thing.</p>",
        "id": 197061354,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124374
    },
    {
        "content": "<p>makes sense</p>",
        "id": 197061356,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124376
    },
    {
        "content": "<p>Also, thanks for testing the optimization there. I'm always impressed with the degree to which Rust makes sensible code patterns work well without having to make them less sensible.</p>",
        "id": 197061379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124438
    },
    {
        "content": "<p>fwiw it looks like the as_ref().unwrap() also optimizes away to same assembly</p>",
        "id": 197061491,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124514
    },
    {
        "content": "<p>I had little doubt that it would, but I don't like writing <code>unwrap</code> if I don't absolutely have to.</p>",
        "id": 197061576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124582
    },
    {
        "content": "<p>As far as I'm concerned, <code>unwrap</code> has a proof obligation just like <code>unsafe</code> does.</p>",
        "id": 197061597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124598
    },
    {
        "content": "<p>yeah, totally can understand that :)</p>",
        "id": 197061643,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124622
    },
    {
        "content": "<p>Thanks for the help! I'm going to go with the <code>get_or_insert</code> solution.</p>",
        "id": 197061650,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124650
    },
    {
        "content": "<p>It helps that I can avoid <code>get_or_insert_with</code> because I know the function would <em>always</em> be called.</p>",
        "id": 197061664,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124674
    },
    {
        "content": "<p>I sort of wish that we had a way to express this in the language itself -- essentially getting access to the \"slot\" of <code>Some(T)</code> after storing into it -- but there's no nice way to express that even syntax wise</p>",
        "id": 197061665,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I know what you mean, and I was thinking the same thing when I posted this question. Hard to articulate what it <em>means</em>, but there's an intuitive notion.</p>",
        "id": 197061721,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124742
    },
    {
        "content": "<p>I guess <code>&amp;mut T</code> is pretty close to \"give me access to the \"slot\" of a <code>Some</code>.\"</p>",
        "id": 197061791,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124812
    },
    {
        "content": "<p>An exclusive reference to a location.</p>",
        "id": 197061800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124823
    },
    {
        "content": "<p>Yes, I've contemplated some syntax to give you <code>&amp;mut uninit T</code> basically to an Option's Some slot such that you can write to it and then the Option becomes Some and you can just &amp;* your prior reference to get a &amp;T to the slot</p>",
        "id": 197061916,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124892
    },
    {
        "content": "<p>but there's no way today to get a pointer to the Some slot of an Option without actually, well, making it Some and doing a match or w/e</p>",
        "id": 197061938,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124924
    },
    {
        "content": "<p>That's interesting!</p>",
        "id": 197061941,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124934
    },
    {
        "content": "<p>this is very specifically tailored to option, in some sense, and it gets into the enum-variants-as-types rfc(s), too</p>",
        "id": 197061998,
        "sender_full_name": "simulacrum",
        "timestamp": 1589124976
    },
    {
        "content": "<p>In theory, we could easily add this function to <code>Option&lt;T&gt;</code>: <code>fn (&amp;mut self) -&gt; &amp;mut MaybeUninit&lt;T&gt;</code>.</p>",
        "id": 197062004,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589124996
    },
    {
        "content": "<p>yes, but that doesn't do what you need it to -- the key bit is that initialization would <em>also</em> write the enum tag bit/byte</p>",
        "id": 197062018,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125042
    },
    {
        "content": "<p>Ah. Such that if you <em>don't</em> write to the value, it isn't a <code>Some</code>?</p>",
        "id": 197062025,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125058
    },
    {
        "content": "<p>right, yes</p>",
        "id": 197062034,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125065
    },
    {
        "content": "<p>Now that's fascinating.</p>",
        "id": 197062043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125072
    },
    {
        "content": "<p>How would that even work? That would mean that it isn't an ordinary \"place\", because assigning to it would also have a side effect.</p>",
        "id": 197062101,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125093
    },
    {
        "content": "<p>it's basically something like \"DerefMut\" but with a \"destructor\" on the returned mut</p>",
        "id": 197062119,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125106
    },
    {
        "content": "<p>\"destructor\", or \"constructor\"? It takes effect when given a value, right?</p>",
        "id": 197062173,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125155
    },
    {
        "content": "<p>well, perhaps, or perhaps when the &amp;mut T ends</p>",
        "id": 197062191,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125169
    },
    {
        "content": "<p>(I guess it wouldn't really be possible to observe which of those it is)</p>",
        "id": 197062264,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125210
    },
    {
        "content": "<p>in some sense you can get this today with DerefMut if your option has a default value you're willing to let it take on if you fail to actually write</p>",
        "id": 197062281,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125259
    },
    {
        "content": "<p>e.g. we could do <code>DerefMut for Option</code> that returned &amp;mut T and initialized to T::default() prior to returning that ref</p>",
        "id": 197062289,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125286
    },
    {
        "content": "<p>if we had such \"guaranteed write\" references we'd also be able to use them I think with some work for Read's uninitialized buffers problem</p>",
        "id": 197062340,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125326
    },
    {
        "content": "<p>but I have no sense of how we'd actually encode what they <em>meant</em></p>",
        "id": 197062361,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125363
    },
    {
        "content": "<p>i.e. what conditions  they impose -- just saying \"you must write to this\" seems easy but what that actually means in a more spec-y way I haven't been able to come up with</p>",
        "id": 197062371,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125399
    },
    {
        "content": "<p>A \"guaranteed write\" reference would have similar obligations to an uninitialized <code>let</code>?</p>",
        "id": 197062445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125494
    },
    {
        "content": "<p>\"the compiler must statically know you write to this before you read it\"?</p>",
        "id": 197062460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125517
    },
    {
        "content": "<p>kind of, but it's harder in the sense that you probably want to be able to pass it to some function</p>",
        "id": 197062461,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125518
    },
    {
        "content": "<p>you can't actually do <em>anything</em> pretty much with an uninitalized let</p>",
        "id": 197062471,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125538
    },
    {
        "content": "<p>whereas here you want to be able to carry that proof obligation downwards for a bit</p>",
        "id": 197062479,
        "sender_full_name": "simulacrum",
        "timestamp": 1589125549
    },
    {
        "content": "<p>Well, in the meantime, hyperfine thanks you for your incremental contribution to performance. :)</p>",
        "id": 197062624,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125744
    },
    {
        "content": "<p>Not having to pop a value out of the LRU cache and put it back later seems to have saved a few tens of milliseconds over my standard six-second run.</p>",
        "id": 197062647,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589125800
    },
    {
        "content": "<p>It's fun doing performance optimization on software that runs operations millions of times. Tiny tweaks give huge wins.</p>",
        "id": 197062856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589126099
    },
    {
        "content": "<p>On a separate note, I'm <em>eagerly</em> awaiting the ability to write <code>if condition &amp;&amp; let Some(x) = y {</code>.</p>",
        "id": 197063162,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589126518
    },
    {
        "content": "<p>Because right now I have to write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">cached_thing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thing_cache</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cached_thing</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">uncached_thing</span><span class=\"p\">.</span><span class=\"n\">get_or_insert</span><span class=\"p\">(</span><span class=\"n\">complex_get_thing</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">uncached_thing</span><span class=\"p\">.</span><span class=\"n\">get_or_insert</span><span class=\"p\">(</span><span class=\"n\">complex_get_thing</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 197063226,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589126597
    },
    {
        "content": "<p>You can simplify this with a match (though not sure if it's important that the condition is evaluated before the option):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Some &amp;&amp; condition&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;None || !condition&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a10d5ef9a4495efcc1c3433eef2eb09\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a10d5ef9a4495efcc1c3433eef2eb09\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a10d5ef9a4495efcc1c3433eef2eb09</a></p>",
        "id": 197066145,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589130199
    }
]