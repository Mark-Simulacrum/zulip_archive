[
    {
        "content": "<p>Hey folks, I'm interested in contributing to the security of Rust's build scripts. Specifically, I'd like to push forward a way to lock down the build scripts to restrict network and/or file IO. I think there's both immediate and long term value in this, such as the ability to audit crates that should (or shouldn't) need access to your filesystem or network and later on, the ability to restrict the build environment to further add a layer of defense of security, especially in high-security contexts.</p>\n<p>I tried looking around but I haven't seen much prior discussion here after a bit of searching. I assume an RFC would be needed, but before even considering writing one up I wanted to collect thoughts on this idea or join an existing conversation. Is there a conversation already going for this? If not, are there any existing thoughts on this?</p>",
        "id": 264115484,
        "sender_full_name": "Edward Shen",
        "timestamp": 1638943317
    },
    {
        "content": "<p>I think a possible avenue that already has some discussion is the \"webassembly proc macro\" experiments, that could be extended to builds, probably a direction/group of people to explore?</p>",
        "id": 264115829,
        "sender_full_name": "FÃ©lix Saparelli",
        "timestamp": 1638943720
    },
    {
        "content": "<p><a href=\"https://github.com/dtolnay/watt\">https://github.com/dtolnay/watt</a></p>",
        "id": 264116056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638944037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462933\">@Edward Shen</span> There's been quite a bit of discussion and interest in the topic. At the moment, the biggest concern is backwards compatibility; build scripts currently detect files all over the system, for instance.</p>",
        "id": 264116530,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638944624
    },
    {
        "content": "<p>But there's also interest in doing it for reasons going beyond security: even if you don't sandbox <em>what</em> scripts have access to, you can sandbox their access so that you know what they accessed, and enforce that they declare everything they depend on (or alternatively make the dependencies implicit).</p>",
        "id": 264116578,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638944659
    },
    {
        "content": "<blockquote>\n<p>There's been quite a bit of discussion and interest in the topic.</p>\n</blockquote>\n<p>Are these consolidated anywhere? By chance, do you have a link to them? I'd love to catch up on them and not repeat existing arguments.</p>\n<blockquote>\n<p>At the moment, the biggest concern is backwards compatibility; build scripts currently detect files all over the system, for instance.</p>\n</blockquote>\n<p>Not potentially repeating existing arguments aside (oops!) and under the assumption that we have working sandboxing, can this not be a opt-in choice for each crate? I was imaging something akin to something where dependencies can declare their build strictness (or is inferred, e.g. via lack of build script entirely or just by taking the minimum strictness of itself and its dependencies), and the crate that we're directly compiling for could have a limit on minimum strictness for its recursive dependencies. An exclusion list of crate and semver specification tuples could be configured as well, globally (maybe in the xdg_config folder?) where users can trust what they decide is known good and can bypass the strictness restrictions.</p>",
        "id": 264118961,
        "sender_full_name": "Edward Shen",
        "timestamp": 1638947205
    },
    {
        "content": "<p>You could also add to / follow the pattern of tools that show if a crate has <code>unsafe</code> to show if a crate uses \"unrestricted\" build scripts and hope for a community pull.</p>",
        "id": 264159622,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1638972504
    },
    {
        "content": "<p>Finding the crates that use build scripts and figuring out what they need them for to see if you can encapsulate those needs in something safer would also be useful.</p>",
        "id": 264159754,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1638972590
    },
    {
        "content": "<p>For example, some crates use tools like <a href=\"https://docs.rs/rustc_version/\">https://docs.rs/rustc_version/</a>. However, I bet a lot of them could use <a href=\"https://rust-lang.github.io/rfcs/2523-cfg-path-version.html\">https://rust-lang.github.io/rfcs/2523-cfg-path-version.html</a> if it were finished / stabilized</p>",
        "id": 264160190,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1638972763
    },
    {
        "content": "<blockquote>\n<p>Finding the crates that use build scripts and figuring out what they need them for to see if you can encapsulate those needs in something safer would also be useful.</p>\n</blockquote>\n<p>Oh yeah speaking of which I've been meaning to get Cargo to pass <code>TARGET</code> to the main build; right now it's only passed to the build script and you end up with silly situations where the build script just sets that variable for the library</p>",
        "id": 264162090,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638973627
    },
    {
        "content": "<blockquote>\n<p>You could also add to / follow the pattern of tools that show if a crate has <code>unsafe</code> to show if a crate uses \"unrestricted\" build scripts and hope for a community pull.</p>\n</blockquote>\n<p>Ah, such as cargo-geiger and safety dance? Sounds like a great way to iterate on improving the situation after a sandbox implementation is supported.</p>",
        "id": 264195878,
        "sender_full_name": "Edward Shen",
        "timestamp": 1638986955
    },
    {
        "content": "<p>For anyone reading this, the correct search keyword is \"sandboxing\" and not \"isolation\". I've found some prior art:</p>\n<p><a href=\"https://github.com/rust-secure-code/cargo-sandbox\">https://github.com/rust-secure-code/cargo-sandbox</a><br>\n<a href=\"https://github.com/rust-secure-code/wg/issues/29\">https://github.com/rust-secure-code/wg/issues/29</a><br>\n<a href=\"https://old.reddit.com/r/rust/comments/hjxh2a/partially_sandbox_your_rust_builds/\">https://old.reddit.com/r/rust/comments/hjxh2a/partially_sandbox_your_rust_builds/</a></p>",
        "id": 264198167,
        "sender_full_name": "Edward Shen",
        "timestamp": 1638987827
    },
    {
        "content": "<p>just don't conflate <code>unsafe</code> itself with security</p>",
        "id": 264199543,
        "sender_full_name": "cuviper",
        "timestamp": 1638988362
    },
    {
        "content": "<p>safe code is still trusted in terms of the system actions it can perform</p>",
        "id": 264199621,
        "sender_full_name": "cuviper",
        "timestamp": 1638988410
    },
    {
        "content": "<p>Yeah, I think <code>untrusted</code> would be a better keyword than <code>unsafe</code> here.</p>",
        "id": 264204603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638990497
    },
    {
        "content": "<p>So it sounds like there could be maybe 2-3 separate features that could be implemented here, a rustup component for a sandboxing implementation, a way for crates to set and infer their strictness level, and maybe one for long term default behavior changes.</p>\n<p>Should this be part of one RFC? Or three smaller one? Sounds like three separate ones might be better, but it feels weird if only a subset get accepted.</p>",
        "id": 264245874,
        "sender_full_name": "Edward Shen",
        "timestamp": 1639013780
    },
    {
        "content": "<p>I think one RFC that mentions all 3 possibilities is fine - if people don't like one part it can be deferred</p>",
        "id": 264245896,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639013818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462933\">@Edward Shen</span> I also wouldn't go as far as writing a full RFC, rather than starting the equivalent of a cross-team MCP.</p>",
        "id": 264251169,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639019163
    },
    {
        "content": "<p>As in, \"we want to work on this problem, here are the teams that'd be involved, here is a rough sketch of goals\".</p>",
        "id": 264251207,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639019179
    },
    {
        "content": "<p>Sounds reasonable. What would be the order of communication for this process then? Buy-in from relevant stakeholders first before writing up an MCP for general feedback? Or write the MCP first for feedback from stakeholders? Just want to double check as to not step on any toes.</p>",
        "id": 264252076,
        "sender_full_name": "Edward Shen",
        "timestamp": 1639020182
    },
    {
        "content": "<p>I assume this sort of change would need support from the Dev-tools/Cargo/rustup team, the Compiler team, and maybe the Secure code working group? Any others?</p>",
        "id": 264252171,
        "sender_full_name": "Edward Shen",
        "timestamp": 1639020272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> hmm, this is exactly the sort of thing I think would be good for an RFC - it crosses teams and has many possible  solutions with different tradeoffs</p>",
        "id": 264253062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639021357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> To clarify, I think it <em>absolutely</em> needs an RFC eventually, but I think it needs some buy-in and requirements-gathering first.</p>",
        "id": 264253260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021568
    },
    {
        "content": "<p>I think this is the kind of thing that should go, roughly: MCP, approval, working group, RFC drafts, full RFC, approval, implementation.</p>",
        "id": 264253299,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021609
    },
    {
        "content": "<p>I think trying to jump straight to an RFC would result in too much front-loaded work before team feedback, and make iteration more painful.</p>",
        "id": 264253326,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462933\">Edward Shen</span> <a href=\"#narrow/stream/122651-general/topic/Build.20script.20security.20and.20isolation/near/264252171\">said</a>:</p>\n<blockquote>\n<p>I assume this sort of change would need support from the Dev-tools/Cargo/rustup team, the Compiler team, and maybe the Secure code working group? Any others?</p>\n</blockquote>\n<p>Primarily Cargo and Compiler, I think.</p>",
        "id": 264253337,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021670
    },
    {
        "content": "<p>yeah, from rustup's perspective this might not even be any work - it gets the available components from the published manifest</p>",
        "id": 264253382,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639021699
    },
    {
        "content": "<p>Possibly libs-api as well.</p>",
        "id": 264253386,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021701
    },
    {
        "content": "<p>Would depend on where the APIs and hooks for sandboxing end up.</p>",
        "id": 264253395,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021714
    },
    {
        "content": "<p>I would definitely run this by the secure code working group too, that was a good idea :)</p>",
        "id": 264253402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639021722
    },
    {
        "content": "<p>Definitely. I was trying to distinguish between \"groups that would need to approve/charter the effort\" vs \"groups who would have valuable input\".</p>",
        "id": 264253438,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021764
    },
    {
        "content": "<p>Sorry, I should have been clearer about that; I wasn't suggesting talking to fewer groups. :)</p>",
        "id": 264253452,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639021787
    },
    {
        "content": "<p>Sounds like a plan forward. Let me know if there's any other teams. In the meantime, I'll be working on that MCP in my free time.</p>",
        "id": 264354123,
        "sender_full_name": "Edward Shen",
        "timestamp": 1639078281
    },
    {
        "content": "<p>Posted a MCP here: <a href=\"https://github.com/rust-lang/compiler-team/issues/475\">https://github.com/rust-lang/compiler-team/issues/475</a></p>",
        "id": 265726777,
        "sender_full_name": "Edward Shen",
        "timestamp": 1640115953
    }
]