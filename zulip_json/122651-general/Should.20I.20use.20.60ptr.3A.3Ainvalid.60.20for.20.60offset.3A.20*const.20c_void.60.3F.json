[
    {
        "content": "<p>Hey! I'm writing a game that interfaces directly with OpenGL through <code>gl33</code> (I've made several questionable life choices), so I've decided to opt in to the strict provenance experiment to make sure I wasn't totally dropping the ball. As expected, <code>fuzzy_provenance casts</code> linted against a few calls to <code>gl33::glVertexAttribPointer</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">gl33</span>::<span class=\"n\">glVertexAttribPointer</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gl33</span>::<span class=\"n\">GL_FLOAT</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Vertex</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// from `memoffset`</span>\n<span class=\"w\">    </span><span class=\"n\">offset_of</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Vertex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">normal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"c1\">//~ WARN strict provenance disallows</span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glVertexAttribPointer.xhtml\">Khronos's docs for <code>glVertexAttribPointer</code></a> proclaim that the last argument, <code>pointer</code>, is an offset:</p>\n<blockquote>\n<p>Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.</p>\n</blockquote>\n<p>I believe this is the use case for <a href=\"https://doc.rust-lang.org/nightly/std/ptr/fn.invalid.html\"><code>ptr::invalid</code></a>, whose docs state:</p>\n<blockquote>\n<p>essentially this expresses that the pointer is not associated with any actual allocation and is little more than a usize address in disguise.</p>\n</blockquote>\n<p>... but just to make sure I'm not committing Undefined Behaviourâ„¢, should I use <code>ptr::invalid</code> here, or is there a better way?</p>",
        "id": 278508144,
        "sender_full_name": "Ruby Lazuli",
        "timestamp": 1649652029
    },
    {
        "content": "<p>You might find more help in <a class=\"stream\" data-stream-id=\"136281\" href=\"/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines\">#t-lang/wg-unsafe-code-guidelines</a> or perhaps a mod could move this thread over</p>",
        "id": 278516339,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1649661806
    },
    {
        "content": "<p>This is just a mistake on OpenGL's part, an offset is not a pointer, it cannot be dereferenced (nor can any pointer derived from it). So for your end, yes using <code>invalid</code> is fine here</p>",
        "id": 278543471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649678927
    }
]