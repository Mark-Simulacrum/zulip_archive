[
    {
        "content": "<p>I have some code of the form</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug, PartialEq, Eq, Hash)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Key</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Value</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">values</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[track_caller]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">value_for</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Key</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"no value for key {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As you can see, there's a <code>Context</code> struct that holds a mapping (in reality it<br>\nholds multiple maps) and I have a utility function that gets the value for a key<br>\nand unwraps the <code>Option</code>. I use <code>#[track_caller]</code> because it's the fault of the<br>\ncaller (or at least it's not the fault of the utility function) if the key is<br>\nnot there.</p>\n<p>However, Clippy is not happy about this:</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: use of `expect` followed by a function call\n  --&gt; src/lib.rs:15:30\n   |\n15 |         self.values.get(key).expect(&amp;format!(&quot;no value for key {:?}&quot;, key))\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(&quot;no value for key {:?}&quot;, key))`\n   |\n   = note: `#[warn(clippy::expect_fun_call)]` on by default\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n</code></pre></div>\n<p>Unfortunately, applying the suggestion is not possible because then<br>\n<code>#[track_caller]</code> won't work. Maybe that's because the panic happens inside a<br>\nclosure, and so the \"caller\" is actually the utility function?</p>\n<p>What should I do to make the string formatting lazy <em>and</em> have <code>#[track_caller]</code><br>\nwork? Ideally it wouldn't be too complicated since I have several of these<br>\nutility functions.</p>\n<p>Thanks!</p>",
        "id": 230921171,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616094372
    },
    {
        "content": "<p>Is this a bug in <code>#[track_caller]</code> or is it intended behavior?</p>",
        "id": 230921224,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616094399
    },
    {
        "content": "<p>I don't think it's a bug, you would need to annotate the closure with <code>track_caller</code> somehow, not <code>unwrap_or_else</code></p>",
        "id": 230921525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616094523
    },
    {
        "content": "<p>not sure that's possible in this case because <code>unwrap_or_else</code> doesn't pass a parameter to the function, so you do need to capture local state</p>",
        "id": 230921796,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616094641
    },
    {
        "content": "<p>Yeah, it seems like <a href=\"https://doc.rust-lang.org/reference/attributes/codegen.html#examples\"><code>#[track_caller]</code> is supposed to work recursively</a> but there's no way to apply it to a closure.</p>",
        "id": 230921803,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616094643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0737]: `#[track_caller]` requires Rust ABI\n  --&gt; src/lib.rs:15:45\n   |\n15 |         self.values.get(key).unwrap_or_else(#[track_caller] || panic!(&quot;no value for key {:?}&quot;, key))\n   |                                             ^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 230921864,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616094667
    },
    {
        "content": "<p>I guess because closures have <code>rust-call</code> ABI?</p>",
        "id": 230921894,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616094679
    },
    {
        "content": "<p>now <em>that</em> seems like a bug</p>",
        "id": 230921917,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616094694
    },
    {
        "content": "<p><code>#[track_caller]</code> does not work on closures. There's an issue about that: <a href=\"https://github.com/rust-lang/rust/issues/74042\">#74042</a>.</p>",
        "id": 230922015,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616094725
    },
    {
        "content": "<p>you can <code>ok_or_else(|| format!(...)).unwrap()</code></p>",
        "id": 230922063,
        "sender_full_name": "cuviper",
        "timestamp": 1616094751
    },
    {
        "content": "<p>should make clippy happy because the <code>format!</code> will be conditional, and then <code>track_caller</code> can do its thing for the <code>unwrap</code></p>",
        "id": 230922181,
        "sender_full_name": "cuviper",
        "timestamp": 1616094816
    },
    {
        "content": "<p>it could be interesting to add <code>expect_with(msg_fn)</code> as a lazier <code>expect</code> here</p>",
        "id": 230922670,
        "sender_full_name": "cuviper",
        "timestamp": 1616095034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/track_caller.20with.20unwrap_or_else.20is.20not.20working.20as.20intended/near/230922063\">said</a>:</p>\n<blockquote>\n<p>you can <code>ok_or_else(|| format!(...)).unwrap()</code></p>\n</blockquote>\n<p>Thanks! The intent is a little less clear but it's good enough :)</p>",
        "id": 230922871,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616095138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/122651-general/topic/track_caller.20with.20unwrap_or_else.20is.20not.20working.20as.20intended/near/230922670\">said</a>:</p>\n<blockquote>\n<p>it could be interesting to add <code>expect_with(msg_fn)</code> as a lazier <code>expect</code> here</p>\n</blockquote>\n<p>Yeah, that sounds like it might be nice.</p>",
        "id": 230922890,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616095145
    },
    {
        "content": "<p>I'll give it a shot</p>",
        "id": 230923589,
        "sender_full_name": "cuviper",
        "timestamp": 1616095470
    },
    {
        "content": "<p>Ping me if you open a PR :)</p>",
        "id": 230930667,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616098628
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/rust-lang/rust/issues/74042\">https://github.com/rust-lang/rust/issues/74042</a></p>",
        "id": 231144924,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1616245142
    }
]