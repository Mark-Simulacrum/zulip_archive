[
    {
        "content": "<p>Is there a name for the generic transformation that is used by the compiler for async/await, generators, etc. when a piece of sequential code is transformed into a state machine?</p>",
        "id": 214256537,
        "sender_full_name": "Diggsey",
        "timestamp": 1603406388
    },
    {
        "content": "<p>we usually call it \"state machine transform\" or \"generator lowering\"</p>",
        "id": 214256654,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603406473
    },
    {
        "content": "<p>ah ok, I thought there might be specific terminology, as it's not unique to Rust</p>",
        "id": 214256782,
        "sender_full_name": "Diggsey",
        "timestamp": 1603406572
    },
    {
        "content": "<p>the Y-combinator <span aria-label=\"joking\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"joking\">:joking:</span></p>",
        "id": 214257073,
        "sender_full_name": "Jubilee",
        "timestamp": 1603406879
    },
    {
        "content": "<p>...actually let me check my notes on lambda compilation, I think there might be a formal name for it there.</p>",
        "id": 214257141,
        "sender_full_name": "Jubilee",
        "timestamp": 1603406930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggory Blake</span> I don't remember a common name for it in C# either (which also uses it for await and yield)</p>",
        "id": 214260922,
        "sender_full_name": "scottmcm",
        "timestamp": 1603410400
    },
    {
        "content": "<p>I was thinking of this and the transformation of lambda terms via abstraction elimination / term rewriting to SK combinators (which can form a graph, which can then be evaluated via graph reduction). <a href=\"https://en.wikipedia.org/wiki/SKI_combinator_calculus\">https://en.wikipedia.org/wiki/SKI_combinator_calculus</a></p>",
        "id": 214409082,
        "sender_full_name": "Jubilee",
        "timestamp": 1603514523
    }
]