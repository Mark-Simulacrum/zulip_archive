[
    {
        "content": "<p>'immutable variable' is a contradiction if you hear it in English, but comes up a lot in rust. Would it be better to document this as 'immutable binding' instead?</p>\n<p>I don't have a specific place where this is said, I'm sure it's throughout the Book and standard library. But it seems like 'binding' is more clear even if it's less familiar when coming from another language.</p>",
        "id": 208727039,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984480
    },
    {
        "content": "<p>strawman example: <a href=\"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html?highlight=variable#variables-and-mutability\">Chapter 3</a> starts with</p>\n<blockquote>\n<p>As mentioned in Chapter 2, by default variables are immutable</p>\n</blockquote>",
        "id": 208727169,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984525
    },
    {
        "content": "<p>\"binding\" has some existing usage w.r.t. patterns</p>",
        "id": 208727315,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598984588
    },
    {
        "content": "<p>A tricky thing is that immutable variables <em>do</em> vary.</p>",
        "id": 208727352,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598984611
    },
    {
        "content": "<p>you mean like interior mutability?</p>",
        "id": 208727388,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984633
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html?highlight=binding#-bindings\">Bindings</a></p>\n<p>The at operator (@) lets us create a variable</p>\n</blockquote>\n<p>this seems like the same concept to me really, just without <code>let</code> or <code>static</code></p>",
        "id": 208727460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984655
    },
    {
        "content": "<p><code>fn example(foo: i32) {}</code>. The <code>foo</code> variable cannot be mutated, but it varies from call-to-call</p>",
        "id": 208727519,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598984692
    },
    {
        "content": "<p>I mean, sure, but I don't think that makes 'binding' a worse name for the parameter</p>",
        "id": 208727572,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984730
    },
    {
        "content": "<p>you're binding an input argument to a name</p>",
        "id": 208727629,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984752
    },
    {
        "content": "<p>it sidesteps the whole issue <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 208727695,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984770
    },
    {
        "content": "<p>I'm not particularly arguing for or against anything, just providing points that occur to me.</p>",
        "id": 208727717,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598984784
    },
    {
        "content": "<p>\"immutable variable\" isn't a Rust-specific term</p>",
        "id": 208727737,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598984800
    },
    {
        "content": "<p>(I have a tendency to seek out internet arguments :P)</p>",
        "id": 208727769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984817
    },
    {
        "content": "<p>Even if it had been called \"binding\" forever and consistently, would we still have a teachability problem for anyone coming from another language? Would we have to say \"bindings are what other languages call variables\"? If so, would the magnitude of problem be greater or less?</p>",
        "id": 208727866,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598984876
    },
    {
        "content": "<p>Arguably, it is the programming sense of \"variable\" that is incorrect here. Variables are symbols that can denote a range of values, as used in mathematics. Variables meaning storage locations should be called something like \"assignables\" instead, but I'm not the king of english and I think that it's too late to change usage</p>",
        "id": 208727928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598984895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/MCP.3A.20document.20'variables'.20as.20'bindings'.20instead.3F/near/208727866\">said</a>:</p>\n<blockquote>\n<p>Even if it had been called \"binding\" forever and consistently, would we still have a teachability problem for anyone coming from another language? Would we have to say \"bindings are what other languages call variables\"? If so, would the magnitude of problem be greater or less?</p>\n</blockquote>\n<p>I don't think it would be more confusing than e.g. 'place expressions' instead of 'lval'</p>",
        "id": 208727994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984929
    },
    {
        "content": "<p>I guess 'lval' is much less common than 'variable' outside of the compiler world though</p>",
        "id": 208728018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598984946
    },
    {
        "content": "<blockquote>\n<p>e.g. 'place expressions' instead of 'lval'</p>\n</blockquote>\n<p>I think the audience for... yeah â€” the people who care is much smaller.</p>",
        "id": 208728042,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598984963
    },
    {
        "content": "<p>And I expect compiler writers to be further along the \"accept pain for pedantry\"  scale</p>",
        "id": 208728127,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598985004
    },
    {
        "content": "<blockquote>\n<p>Variables meaning storage locations should be called something like \"assignables\" instead, but I'm not the king of english</p>\n</blockquote>\n<p>rust calls these 'place expressions'</p>",
        "id": 208728139,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985010
    },
    {
        "content": "<p>which is more broad than a variable, it includes things like <code>vec[0]</code></p>",
        "id": 208728182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985044
    },
    {
        "content": "<p>place expressions are ways to denote storage locations (or subparts thereof)</p>",
        "id": 208728187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598985047
    },
    {
        "content": "<p>I think \"place expression\" is a narrow and precise term that is less confusing than C's \"lvalue\"</p>",
        "id": 208728263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598985106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/122651-general/topic/MCP.3A.20document.20'variables'.20as.20'bindings'.20instead.3F/near/208727866\">said</a>:</p>\n<blockquote>\n<p>Even if it had been called \"binding\" forever and consistently, would we still have a teachability problem for anyone coming from another language? Would we have to say \"bindings are what other languages call variables\"? If so, would the magnitude of problem be greater or less?</p>\n</blockquote>\n<p>for context, this came up in #beginners with someone from javascript confused between <code>let</code> and <code>const</code></p>",
        "id": 208728416,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985170
    },
    {
        "content": "<p>since JS has the same keywords that mean very different things</p>",
        "id": 208728440,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985183
    },
    {
        "content": "<p>but to denote a symbol introduced by <code>let</code>, I would suggest \"variable binding\" over just \"binding\" because otherwise it's not clear what is being bound</p>",
        "id": 208728475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598985202
    },
    {
        "content": "<p>I'm not sure I follow ... what else could be a binding?</p>",
        "id": 208728524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985231
    },
    {
        "content": "<p>One thing I've always disliked about \"binding\" is that it's a verb and a noun</p>",
        "id": 208728599,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598985259
    },
    {
        "content": "<p>well the variables bound by a quantifier or lambda are also called bindings sometimes</p>",
        "id": 208728637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598985295
    },
    {
        "content": "<p>\"variable binding\" makes it sound like \"bound variable\", which is kind of confusing if you consider <a href=\"https://en.wikipedia.org/wiki/Free_variables_and_bound_variables\">https://en.wikipedia.org/wiki/Free_variables_and_bound_variables</a></p>",
        "id": 208728675,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598985318
    },
    {
        "content": "<p>It is a bound variable</p>",
        "id": 208728686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598985326
    },
    {
        "content": "<p>ahh I see the confusion</p>",
        "id": 208728706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> that's a feature, not a bug</p>",
        "id": 208728789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598985364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/122651-general/topic/MCP.3A.20document.20'variables'.20as.20'bindings'.20instead.3F/near/208728637\">said</a>:</p>\n<blockquote>\n<p>well the variables bound by a quantifier or lambda are also called bindings sometimes</p>\n</blockquote>\n<p>'bound variable' sounds somewhat similar to the formal logic version of this? <a href=\"https://en.wikipedia.org/wiki/Bounded_quantifier\">https://en.wikipedia.org/wiki/Bounded_quantifier</a></p>",
        "id": 208729542,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985710
    },
    {
        "content": "<p>I don't know any type theory though and very little formal logic</p>",
        "id": 208729737,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598985787
    },
    {
        "content": "<p>If there's one thing users of programming languages love, it's knowing deep computer science theory in order to store the age of a cat.</p>",
        "id": 208730354,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598986081
    },
    {
        "content": "<p>well, I don't think we need to teach bound quantifiers at the same time <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 208731068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598986365
    },
    {
        "content": "<p>Actually, a bounded quantifier is a conflicting usage of the word \"bound\", since that is derived from usage like \"bounded above\" rather than \"bound variable\". Ultimately they come from the same linguistic usage though. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 208731269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986451
    },
    {
        "content": "<p>in PL theory this shows up in things like type bounds, in rust that means things like <code>'a: 'b</code> and <code>T: Copy</code></p>",
        "id": 208731372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986500
    },
    {
        "content": "<p>which don't so much create a new symbol in a scope as constrain an existing symbol</p>",
        "id": 208731493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986556
    },
    {
        "content": "<p>ah hmm what does rust call the restriction for <code>T: Copy</code> ? is that also a binding?</p>",
        "id": 208731546,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598986565
    },
    {
        "content": "<p>I'd argue that this is more of a non-issue since \"variable\" in the context of computer science means a rather different thing than \"variable\" in common english</p>\n<p>From <a href=\"https://en.wikipedia.org/wiki/Variable_(computer_science)\">Wikipedia</a>:</p>\n<blockquote>\n<p>In computer programming, a variable or scalar is a storage location (identified by a memory address) paired with an associated symbolic name, which contains some known or unknown quantity of information referred to as a value</p>\n</blockquote>",
        "id": 208731573,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1598986574
    },
    {
        "content": "<p>it's a bound, not a binding</p>",
        "id": 208731580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986576
    },
    {
        "content": "<p>ooh, \"scalar\"</p>",
        "id": 208731611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986588
    },
    {
        "content": "<p>haven't heard that in a while</p>",
        "id": 208731625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986593
    },
    {
        "content": "<p>let's not start calling aggregates scalars lol</p>",
        "id": 208731647,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598986607
    },
    {
        "content": "<p>In all seriousness, the debate over what to call these things ended long ago. They are variables</p>",
        "id": 208731911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986729
    },
    {
        "content": "<p>it's a bit annoying that the bad name confuses every new generation with the difference between the sense of \"vary\" in use in CS variables vs math variables, but there's nothing that can be done about it besides more education</p>",
        "id": 208732179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598986850
    },
    {
        "content": "<p>I agree with the end result of keeping it \"variable\", but will quibble with the path taken to get there :-)</p>\n<p>Rust likes to do the impossible, so I wouldn't want to say \"thus it was once, forever shall it be\" (if that's what we followed, there' wouldn't even be a Rust). It's mostly a matter of cost-benefit analysis to me.</p>",
        "id": 208732665,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598987040
    },
    {
        "content": "<p>I think it is useful to note that <code>let x = 5;</code> is sometimes called a \"let-binding\" because it binds a value to a name, but otherwise there isn't much sense in harping on the distinction in a weakly functional language like rust</p>",
        "id": 208733286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598987277
    },
    {
        "content": "<p>And the book <a href=\"https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html?highlight=binding#storing-values-with-variables\">uses that sense as well</a>:</p>\n<blockquote>\n<p>This line creates a new variable named foo and binds it to the value of the bar variable</p>\n</blockquote>",
        "id": 208733481,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598987360
    },
    {
        "content": "<p>binding is correct, for both mutable and immutable. variable is silly for both. it'll be called variables anyway. oh well.</p>",
        "id": 208749202,
        "sender_full_name": "Lokathor",
        "timestamp": 1598994653
    },
    {
        "content": "<blockquote>\n<p>At that point, the <strong>binding</strong> for state will be the value UsState::Alaska. We can then use that <strong>binding</strong> in the println! expression, thus getting the inner state value out of the Coin enum variant for Quarter.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/ch06-02-match.html?highlight=binding#patterns-that-bind-to-values\">The Rust Programming Language</a></li>\n</ul>\n<blockquote>\n<p>The pattern in the second match arm introduces a new <strong>variable</strong> named y that will match any value inside a Some value. Because weâ€™re in a new scope inside the match expression, this is <strong>a new y variable</strong>, not the y we <strong>declared</strong> at the beginning with the value 10. This new <strong>y binding</strong> will match any value inside a Some, which is what we have in x. Therefore, this <strong>new y binds</strong> to the inner value of the Some in x. That value is 5, so the expression for that arm executes and prints Matched, y = 5.</p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p>@ <strong>Bindings</strong><br>\nThe at operator (@) lets us create a <strong>variable</strong> that <strong>holds</strong> a value at the same time weâ€™re testing that value to see whether it matches a pattern. </p>\n</blockquote>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html?highlight=binding#matching-named-variables\">The Rust Programming Language</a></li>\n</ul>\n<p>These are a little confusing to me as someone from an... eccentric programming background.</p>\n<p>I think that backing up a little and introducing more formally the concept of \"here is an identifier, here is an expression that evaluates to a value, this statement binds the two, this is the concept of 'variable' you may be familiar with from programming or math class but it works Differently in Rust\" is not a bad idea. I think pressing more things to go in a specific terminological direction in documentation would be a good idea. I often use \"declaration\" because I hesitate between (binding/variable), actually.</p>",
        "id": 208762487,
        "sender_full_name": "Jubilee",
        "timestamp": 1599003406
    },
    {
        "content": "<p>Like... does a \"variable\" really \"hold\" a value? Or does it identify the value? What about ownership? How do you want to express the transfers of ownership that occur? I think backing up a step and really thinking about how to express it from first principles is actually best here because basically the concept is not terribly consistently named in any contextso any way you move will conflict with another definition. As such, it might be best to EÌ¶MÌ¸BÌ¸RÌ¸AÌµCÌµEÌµ Ì¶CÌ¸OÌ´NÌ·FÌµLÌ´IÌµCÌ´TÌ´, even if it feels like reinventing the wheel w/r/t basic computer science, even if you wind up agreeing in a certain direction, <em>because</em> Rust <em>does</em> have the ownership system that is only indirect in other languages, so starting off with \"Yes, you may have to reevaluate the basics\" is not a bad idea.</p>",
        "id": 208763568,
        "sender_full_name": "Jubilee",
        "timestamp": 1599004433
    },
    {
        "content": "<p>To stir the pot some more, the names are normally called 'identifiers' in compilers</p>",
        "id": 208763884,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599004698
    },
    {
        "content": "<p>But that refers to the actual name, not the value bound to that name</p>",
        "id": 208763913,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599004726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122651-general/topic/MCP.3A.20document.20'variables'.20as.20'bindings'.20instead.3F/near/208763884\">said</a>:</p>\n<blockquote>\n<p>To stir the pot some more, the names are normally called 'identifiers' in compilers</p>\n</blockquote>\n<p>I don't know that's a fruitful direction, as <code>foo::bar::&lt;Baz&gt;()</code> has three identifiers, none of which are relevant to variables.</p>",
        "id": 208763971,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599004779
    },
    {
        "content": "<p>\"Variable\" is jargon, but it's jargon that every language uses. \"Binding\" has the same meaning but it's not in widespread usage. Yes, it has a meaning separate from the mathematical meaning, but that's fine. So does <code>Vec</code>.</p>",
        "id": 208764467,
        "sender_full_name": "isHavvy",
        "timestamp": 1599005101
    },
    {
        "content": "<blockquote>\n<p>but it's jargon that every language uses</p>\n</blockquote>\n<p>I think that's the original point. Every language uses it, but mostly uses it the same. The claim is that Rust uses it differently enough that maybe it shouldn't be called that.</p>",
        "id": 208764660,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599005227
    },
    {
        "content": "<p>Similarly, if I could, I'd go back and rename \"lifetime\" because it conflicts with the existing meaning (of those people that have thought about it before).</p>",
        "id": 208764747,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599005286
    },
    {
        "content": "<p>As a silly/strawman example, if we called functions \"variables\", then you could apply the \"jargon\" argument equally to say it should stay that way <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 208764843,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599005395
    },
    {
        "content": "<p>If for some reason, the entire programming field decided to do so, sure. Also note that what we call \"function\"s are also not mathematical functions as well.</p>",
        "id": 208764986,
        "sender_full_name": "isHavvy",
        "timestamp": 1599005492
    },
    {
        "content": "<p>I dunno, I think talking about idents is kinda useful because users grow up and write macros which can reference an <code>$ident</code>, and that is one of the few things the language formally specifies in the Reference! And programmers _do_ read the Reference!</p>\n<p>I basically think the JS programmer (hi!) is helped most by a definition that can be actually read and written to HD, even if it reiterates \"common knowledge\", instead of relying on their type inference.</p>",
        "id": 208765393,
        "sender_full_name": "Jubilee",
        "timestamp": 1599005853
    },
    {
        "content": "<p>Don't open the \"naming functions\" box too! Otherwise I might have to explain why they should be called procedures instead</p>",
        "id": 208766424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599006732
    },
    {
        "content": "<p>I think you mean routines. Or subroutines.</p>",
        "id": 208766620,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599006902
    },
    {
        "content": "<p>programming functions are totally functions, they just take the global state as an implicit arg :^)</p>",
        "id": 208766801,
        "sender_full_name": "Jubilee",
        "timestamp": 1599007074
    },
    {
        "content": "<p>they are also not deterministic even once you give them the global state, unless you believe in determinism of the universe</p>",
        "id": 208766873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599007126
    },
    {
        "content": "<p>Another can of worms: I wish Rust had pure functions. I think it used to have something like that with <code>pred</code>, right?</p>",
        "id": 208766997,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599007232
    },
    {
        "content": "<p>I actually am epistemically skeptical that even math is deterministic over the entire domain of universes.</p>",
        "id": 208767000,
        "sender_full_name": "Jubilee",
        "timestamp": 1599007236
    },
    {
        "content": "<p>Haha wikipedia calls them \"callable units\" to avoid the naming war <a href=\"https://en.wikipedia.org/wiki/Subroutine\">https://en.wikipedia.org/wiki/Subroutine</a></p>",
        "id": 208767140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599007420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> <code>const fn</code> is pretty close to a pure function, although maybe it is a bit restricted</p>",
        "id": 208767330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599007611
    },
    {
        "content": "<p>then again, the restrictions are all in places where functional programming is actually non-functional under the hood</p>",
        "id": 208767349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599007648
    },
    {
        "content": "<p>and the places in which it allows impurity are the places in which nonfunctional programming doesn't significantly vary from functional programming.</p>",
        "id": 208767498,
        "sender_full_name": "Jubilee",
        "timestamp": 1599007798
    },
    {
        "content": "<p>There was a <code>pure</code> keyword, pre-1.0. Because nobody could actually agree on what they wanted out of purity, it was removed. <code>const purity</code> was one such definition that people considered.</p>",
        "id": 208767653,
        "sender_full_name": "isHavvy",
        "timestamp": 1599007930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296643\">@isHavvy</span> Huh, I've never heard of the <code>pure</code> keyword. Thanks for bringing it up, I'm going to look into it!</p>",
        "id": 208773267,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599013625
    },
    {
        "content": "<p>I think it's interesting how Rust reverted from the <code>ret</code> keyword to the standard <code>return</code> keyword given that other parts of Rust (<code>fn</code>, <code>mut</code>, <code>mod</code>, etc.) use a shortened form. Can anyone point me to when that happened?</p>",
        "id": 208773644,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599014116
    },
    {
        "content": "<p>Ah, it looks maybe in <a href=\"https://github.com/rust-lang/rust/issues/3063\">#3063</a>.</p>",
        "id": 208773787,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599014296
    },
    {
        "content": "<p>I love <code>@brson</code>'s <a href=\"https://github.com/rust-lang/rust/issues/3063#issuecomment-7564850\">comment</a>:</p>\n<blockquote>\n<p>ret and alt are done. I refused to do the mod change and nobody seemed to mind.</p>\n</blockquote>",
        "id": 208773817,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599014348
    },
    {
        "content": "<p>Commit <a href=\"https://github.com/rust-lang/rust/commit/b355936b4da0831f47afe8f251daee503c8caa32\">b355936b4da0831f47afe8f251daee503c8caa32</a> is where ret was changed to return. This is kind of OT, so I'll move this to another topic</p>",
        "id": 208774012,
        "sender_full_name": "Noah Lev",
        "timestamp": 1599014586
    },
    {
        "content": "<p>FWIW, \"immutable variable\" seems completely reasonable to me. In mathematics we have \"variables\" all the time and <em>of course</em> they are all immutable.</p>",
        "id": 208801033,
        "sender_full_name": "RalfJ",
        "timestamp": 1599040256
    },
    {
        "content": "<p>It's the mutable variables that are the odd ones out, really. ;)</p>",
        "id": 208801048,
        "sender_full_name": "RalfJ",
        "timestamp": 1599040265
    },
    {
        "content": "<p>In programming languages research, these things are always called variables, whether they are mutable or not. I have never heard the noun \"binding\" used in a research context (Rust may have made that up?), but there is such a thing as a \"binder\", which is the syntactic place where a variable name gets bound (i.e., it is the declaration, as opposed to a use).</p>",
        "id": 208801157,
        "sender_full_name": "RalfJ",
        "timestamp": 1599040335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// here the name x gets &quot;bound&quot; to value 15. So the `x` here is a binder. (&quot;binding occurrence&quot; of &quot;x&quot;)</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// here the name x that was bound above is used. this is not a binder.</span>\n</code></pre></div>",
        "id": 208801424,
        "sender_full_name": "RalfJ",
        "timestamp": 1599040561
    },
    {
        "content": "<p>FWIW <a href=\"https://fasterthanli.me/articles/i-am-a-java-csharp-c-or-cplusplus-dev-time-to-do-some-rust\">https://fasterthanli.me/articles/i-am-a-java-csharp-c-or-cplusplus-dev-time-to-do-some-rust</a> also distinguishes between 'variables' and 'bindings'</p>",
        "id": 209246038,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599434220
    },
    {
        "content": "<p>hmm maybe that's what we should document: 'variable' is the whole thing, identifier, memory address, and value, but 'binding' is specifically the identifier</p>",
        "id": 209246048,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599434271
    },
    {
        "content": "<p>I agree, obviously.</p>",
        "id": 209246233,
        "sender_full_name": "Jubilee",
        "timestamp": 1599434588
    },
    {
        "content": "<p>That article contains a snippet of \"Rust as written by a C#/Java/C++ programmer\", which I find quite valuable as a metric for error message quality. In particular, this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">App</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">title</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ticks_left</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">running</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">update</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">ticks_left</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">ticks_left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Generates the error <code>expected identifier, found keyword `fn` </code>, which is correct but not as helpful as it could be. The error message should suggest an <code>impl App { fn update() ... }</code> block here. (Adding in a <code>&amp;self</code> parameter in the suggestion is possible but probably too ambitious.)</p>",
        "id": 209252362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599446174
    },
    {
        "content": "<p>Yeah, if you just write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">App</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">title</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ticks_left</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">running</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">App</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">update</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">ticks_left</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">ticks_left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>the error on use of <code>this</code> both suggests to change it to <code>self</code> and add a <code>self</code> argument to the function, so the guidance there looks good</p>",
        "id": 209252444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599446327
    },
    {
        "content": "<p>I opened an issue for this: <a href=\"https://github.com/rust-lang/rust/issues/76421\">https://github.com/rust-lang/rust/issues/76421</a></p>",
        "id": 209252451,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599446375
    }
]