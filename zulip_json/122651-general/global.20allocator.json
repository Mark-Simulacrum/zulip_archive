[
    {
        "content": "<p>Hello folks... I have a question about the Global Allocator. I'm implementing my own, and the docs suggest this example: <a href=\"https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html\">https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html</a></p>",
        "id": 202885651,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887061
    },
    {
        "content": "<p>However, I cannot use <code>std</code></p>",
        "id": 202885653,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887070
    },
    {
        "content": "<p>Can one call <code>alloc</code> from within crate <code>core</code>?</p>",
        "id": 202885659,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887088
    },
    {
        "content": "<p>If I switch that example to use <code>core</code> then the compiler says <code>alloc</code> does not exist</p>",
        "id": 202885674,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887112
    },
    {
        "content": "<p>std, core and alloc are all separate crates but std re-exports them both.</p>",
        "id": 202885682,
        "sender_full_name": "mental",
        "timestamp": 1593887136
    },
    {
        "content": "<p>I can't quite remember how to enable alloc however</p>",
        "id": 202885694,
        "sender_full_name": "mental",
        "timestamp": 1593887160
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![no_std]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"p\">{</span><span class=\"n\">alloc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">alloc_fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">GlobalAlloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Layout</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null_mut</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyAllocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GlobalAlloc</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyAllocator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_layout</span>: <span class=\"nc\">Layout</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">null_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dealloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_layout</span>: <span class=\"nc\">Layout</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[global_allocator]</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">MyAllocator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyAllocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">alloc_fn</span><span class=\"p\">(</span><span class=\"n\">Layout</span>::<span class=\"n\">new</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">()).</span><span class=\"n\">is_null</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202885748,
        "sender_full_name": "lcnr",
        "timestamp": 1593887221
    },
    {
        "content": "<p>Ah yes ^^</p>",
        "id": 202885757,
        "sender_full_name": "mental",
        "timestamp": 1593887248
    },
    {
        "content": "<p><code>extern crate alloc</code> magically imports the <code>alloc</code> crate</p>",
        "id": 202885763,
        "sender_full_name": "lcnr",
        "timestamp": 1593887270
    },
    {
        "content": "<p>Its just a regular <code>extern crate alloc</code> and It'll be implied.</p>",
        "id": 202885767,
        "sender_full_name": "mental",
        "timestamp": 1593887273
    },
    {
        "content": "<p>Yeah I was looking at the features I was using instead like <code>allocator_api</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202885809,
        "sender_full_name": "mental",
        "timestamp": 1593887289
    },
    {
        "content": "<p>Ah, many thanks.</p>",
        "id": 202885887,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887441
    },
    {
        "content": "<p>I was wondering what happened to it...</p>",
        "id": 202885890,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887451
    },
    {
        "content": "<p><code>alloc as alloc_fn</code> this is needed... because <code>alloc</code> is ambiguous (either the crate or this symbol)?</p>",
        "id": 202885989,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887608
    },
    {
        "content": "<p>yeah, somewhat unfortunate <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202886000,
        "sender_full_name": "lcnr",
        "timestamp": 1593887629
    },
    {
        "content": "<p>Can we rename the crate instead?</p>",
        "id": 202886040,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887644
    },
    {
        "content": "<p>you can also use <code>alloc::alloc::alloc</code></p>",
        "id": 202886043,
        "sender_full_name": "lcnr",
        "timestamp": 1593887650
    },
    {
        "content": "<p>Ah I'll just do that</p>",
        "id": 202886044,
        "sender_full_name": "Alex Merritt",
        "timestamp": 1593887657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318622\">Alex Merritt</span> <a href=\"#narrow/stream/122651-general/topic/global.20allocator/near/202886040\">said</a>:</p>\n<blockquote>\n<p>Can we rename the crate instead?</p>\n</blockquote>\n<p>yeah</p>",
        "id": 202886047,
        "sender_full_name": "lcnr",
        "timestamp": 1593887660
    },
    {
        "content": "<p>It seems like borderline \"a bug\" that the docs for alloc refer to things being imported through std.</p>",
        "id": 202991497,
        "sender_full_name": "Lokathor",
        "timestamp": 1594043143
    },
    {
        "content": "<p>Hi. guys, I am suffering this error.<br>\nWho can help me?<br>\n<code>error: the `#[global_allocator]` in this crate conflicts with global allocator in: pyth_client</code></p>",
        "id": 272396535,
        "sender_full_name": "Anan",
        "timestamp": 1645188072
    },
    {
        "content": "<p>Seems you already got an answer in the issue you opened: <a href=\"https://github.com/pyth-network/pyth-client-rs/issues/20\">https://github.com/pyth-network/pyth-client-rs/issues/20</a></p>",
        "id": 272398588,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1645189343
    }
]