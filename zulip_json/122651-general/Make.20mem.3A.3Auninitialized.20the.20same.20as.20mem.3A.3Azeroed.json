[
    {
        "content": "<p>Hey, I was wondering if anyone has proposed this change before.<br>\nBasically, <code>mem::uninitialized</code> cannot be used correctly. In practice, it usually results in undefined behavior that then breaks the rest of the function where it's used.</p>\n<p>It's been deprecated since 1.39, but some crates (especially ones that haven't been updated in a long time), still use it.<br>\nIn my experience, every such use results in broken behavior on recent Rust versions, but the function can't just be removed because of backwards compatibility.</p>\n<p>However, since the function is defined to return memory in any possible state, it should not be a breaking change to replace it with <code>mem::zeroed</code>. This should prevent some behavior from being broken in crates that still use <code>mem::uninitialized</code> (as long as they only use it on types for which zeroed memory is a valid state).</p>\n<p>This would also prevent anyone from being tempted to use it, since it won't have any potentially better performance.</p>",
        "id": 256492795,
        "sender_full_name": "K.R. Zentner",
        "timestamp": 1633558338
    },
    {
        "content": "<p>This was discussed at some length at <a href=\"#narrow/stream/219381-t-libs/topic/disarming.20mem.3A.3Auninitialized\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/disarming.20mem.3A.3Auninitialized</a></p>",
        "id": 256496259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633560284
    }
]