[
    {
        "content": "<p>Is there a mechanism to distinguish whether a type is an enum and that can be statically asserted? If not statically asserted, then non-statically is also acceptable.</p>",
        "id": 204321951,
        "sender_full_name": "Brendan Molloy",
        "timestamp": 1595113797
    },
    {
        "content": "<p>You want the equivalent of <code>where T: IsEnum</code> in regular Rust code? Or in the compiler?</p>\n<p>If the former, not AFAIK. Perhaps if you share why you need this, someone might have an alternative for you.</p>",
        "id": 204322510,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595114958
    },
    {
        "content": "<p>I donâ€™t think you can abuse <a href=\"https://doc.rust-lang.org/std/mem/fn.discriminant.html\">https://doc.rust-lang.org/std/mem/fn.discriminant.html</a> for this either.</p>",
        "id": 204322555,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595115008
    },
    {
        "content": "<p>Yes, it cannot be abused even unsafely because 0 is the result for things that aren't enums and some valid cases for enums. I'm experimenting with garbage collection in Rust, and one situation I'm considering is manipulating enums based on their discriminator, so I would like to special case enums. Specialisation would work but isn't going to be stabilised any time soon so not realistic, same goes for auto traits. I can already have the enums be opt-in with a special trait but then comes other complexity.</p>",
        "id": 204322712,
        "sender_full_name": "Brendan Molloy",
        "timestamp": 1595115363
    },
    {
        "content": "<p>so right now I do have a <code>TaggedUnion</code> trait being used for manipulating enums that have opted in, with <code>#[repr(C, uXXX)]</code> so tags and discriminants can be accessed \"safely\"</p>",
        "id": 204322739,
        "sender_full_name": "Brendan Molloy",
        "timestamp": 1595115435
    },
    {
        "content": "<p>given that any type that wishes to function in my GC model requires a <code>Trace</code> trait to be implemented anyway, I could just have something like <code>fn is_enum() -&gt; bool { false }</code> and have the enums opt into it but it feels ... not nice</p>",
        "id": 204322781,
        "sender_full_name": "Brendan Molloy",
        "timestamp": 1595115519
    },
    {
        "content": "<p>I realised I _can_ get away with just using <code>std::mem::discriminant</code>! Comparing equality for discriminants on any given T will return true always if it's not an enum, and if it's an enum, will return false on an equality check if the value has changed. Turns out that's all I actually need to solve my immediate problem, so I got lucky, haha</p>",
        "id": 204323731,
        "sender_full_name": "Brendan Molloy",
        "timestamp": 1595117463
    },
    {
        "content": "<p>Uhm, is it stable that <code>mem::discriminant</code> returns _the same_ value? The doc says the value of a discriminant can not change in the same compilation, is the same true for the indeterminate value of non-enum types?</p>",
        "id": 204325982,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595121685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209548\">Brendan Molloy</span> <a href=\"#narrow/stream/122651-general/topic/Distinguishing.20enums.20from.20other.20types.20at.20compile.20time/near/204323731\">said</a>:</p>\n<blockquote>\n<p>I realised I _can_ get away with just using <code>std::mem::discriminant</code>! Comparing equality for discriminants on any given T will return true always if it's not an enum, and if it's an enum, will return false on an equality check if the value has changed. Turns out that's all I actually need to solve my immediate problem, so I got lucky, haha</p>\n</blockquote>\n<p>That's very thin ice you are walking on here. It certainly isn't true of generators (which might be fine, as they are just enums in disguise) and really is not guaranteed for any type</p>",
        "id": 204337675,
        "sender_full_name": "lcnr",
        "timestamp": 1595144591
    }
]