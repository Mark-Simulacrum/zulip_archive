[
    {
        "content": "<p>Hi there, I am working on a PR to add aarch64-unknown-linux-musl support as a host enviroment.<br>\nAfter I got musl to install fine inside the CI Dockerfile that I made, I'm now running into a weird error with the x.py script inside the server.<br>\nFor debugging, this is what it (the <a href=\"http://run.sh\">run.sh</a> script) runs: <code>docker run --workdir /checkout/obj --env SRC=/checkout --env SCCACHE_DIR=/sccache --volume /home/jens/.cache/sccache:/sccache --privileged --volume /home/jens/rustsrc:/checkout:ro --volume /home/jens/rustsrc/obj:/checkout/obj --volume /home/jens/.cargo:/cargo --volume /home/jens/rustsrc:/home/jens/rustsrc --volume /tmp/toolstate:/tmp/toolstate --env LOCAL_USER_ID=1000 --env CARGO_HOME=/cargo --env DEPLOY --env DEPLOY_ALT --env CI --env TF_BUILD --env BUILD_SOURCEBRANCHNAME --env GITHUB_ACTIONS --env GITHUB_REF --env TOOLSTATE_REPO_ACCESS_TOKEN --env TOOLSTATE_REPO --env TOOLSTATE_PUBLISH --env CI_JOB_NAME= --init --rm rust-ci /checkout/src/ci/run.sh</code><br>\nIt keeps running into the following error (though when I run the container interactive and touch any file, it works fine):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">configure</span><span class=\"p\">:</span> <span class=\"n\">writing</span> <span class=\"err\">`</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">toml</span><span class=\"err\">`</span> <span class=\"ow\">in</span> <span class=\"n\">current</span> <span class=\"n\">directory</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/checkout/src/bootstrap/configure.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">455</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"k\">with</span> <span class=\"n\">bootstrap</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">&#39;config.toml&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/usr/lib/python3.8/contextlib.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">113</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__enter__</span>\n    <span class=\"k\">return</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gen</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/checkout/src/bootstrap/bootstrap.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">325</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">output</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"ne\">PermissionError</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">Errno</span> <span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"n\">Permission</span> <span class=\"n\">denied</span><span class=\"p\">:</span> <span class=\"s1\">&#39;config.toml.tmp&#39;</span>\n</code></pre></div>\n\n\n<p>Does anyone have an idea what could help here? (I've disabled selinux inside the container, my host is a raspberry pi running fedora rawhide)</p>",
        "id": 209223548,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599395572
    },
    {
        "content": "<blockquote>\n<p>--volume /home/jens/rustsrc:/checkout:ro</p>\n</blockquote>\n<p>This seems like the issue</p>",
        "id": 209223572,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599395616
    },
    {
        "content": "<p>is that a flag <a href=\"http://run.sh\">run.sh</a> adds?</p>",
        "id": 209223575,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599395621
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/rust-lang/rust/blob/master/src/ci/docker/run.sh#L205\">https://github.com/rust-lang/rust/blob/master/src/ci/docker/run.sh#L205</a></p>",
        "id": 209223622,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599395643
    },
    {
        "content": "<p>hmm maybe bootstrap should be using <code>/tmp</code> instead of the source directory</p>",
        "id": 209223667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599395747
    },
    {
        "content": "<p>actually this would break anyway when it tries to replace the file, so that won't make a difference</p>",
        "id": 209223670,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599395762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> any ideas?</p>",
        "id": 209223714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599395783
    },
    {
        "content": "<p>uh, I am a bit confused, what exactly are you running?</p>",
        "id": 209223828,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395978
    },
    {
        "content": "<p>src/ci/run.sh or src/ci/docker/run.sh?</p>",
        "id": 209223831,
        "sender_full_name": "simulacrum",
        "timestamp": 1599395984
    },
    {
        "content": "<p>./src/ci/docker/run.sh aarch64-musl</p>",
        "id": 209223874,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599396010
    },
    {
        "content": "<p>that docker container isn't in tree yet right?</p>",
        "id": 209223885,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396053
    },
    {
        "content": "<p>I've added a new Dockerfile under host-aarch64 and the base image built successfully<br>\nIt is pretty much a copy of the dist-x86_64-musl one with a small GCC fix</p>",
        "id": 209223942,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599396144
    },
    {
        "content": "<p>hm, what is the SCRIPT you're setting?</p>",
        "id": 209223960,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396200
    },
    {
        "content": "<p>python3 ../x.py dist --build $HOSTS<br>\nHOSTS is aarch64-unknown-linux-musl</p>",
        "id": 209223964,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599396230
    },
    {
        "content": "<p>hm yeah that looks right</p>",
        "id": 209223992,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396242
    },
    {
        "content": "<p>I am trying to figure out why you're hitting this with musl but not gnu</p>",
        "id": 209224009,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396270
    },
    {
        "content": "<p>(or any other docker)</p>",
        "id": 209224010,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396273
    },
    {
        "content": "<p>or is that a wrong assumption, and you hit this always?</p>",
        "id": 209224011,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396282
    },
    {
        "content": "<p>I did not test the other ones as a build of the base image to run takes a long while (about 5h?) on my poor raspberry pi. I would bet that I hit it with any of them</p>",
        "id": 209224027,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599396334
    },
    {
        "content": "<p>hm okay</p>",
        "id": 209224037,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396357
    },
    {
        "content": "<p>presumably it's the read only mount causing problems, I guess</p>",
        "id": 209224120,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396453
    },
    {
        "content": "<p>but it really shouldn't because configure is invoked in the top-level working directory which isn't mounted readonly</p>",
        "id": 209224175,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396492
    },
    {
        "content": "<p>I wonder if this is a bug in docker or something on some platforms?</p>",
        "id": 209224179,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396508
    },
    {
        "content": "<p>but I don't have any good ideas on how to debug</p>",
        "id": 209224184,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396517
    },
    {
        "content": "<p>I think I've also tried removing the ro and it still wouldn't do it. I've added a <code>p(os.getcwd())</code> and that says /checkout/obj, means that /checkout/obj/config.toml.tmp should not be creatable? From what I see, <a href=\"http://run.sh\">run.sh</a> inside the container is switching user? Maybe that's the issue</p>",
        "id": 209224250,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599396609
    },
    {
        "content": "<p>I know it \"works\" on CI and for me personally locally</p>",
        "id": 209224289,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396713
    },
    {
        "content": "<p>it might be that something about the pi environment is just sufficiently different though</p>",
        "id": 209224337,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"338253\">@Jens Reidel</span> could you try the -gnu target and see if it works?</p>",
        "id": 209224348,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599396756
    },
    {
        "content": "<p>that would help debug</p>",
        "id": 209224349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599396758
    },
    {
        "content": "<p>I guess you can try NO_CHANGE_USER=1</p>",
        "id": 209224350,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396762
    },
    {
        "content": "<p>Seems the UID it runs as in the container is 1000 (mine on the host) yet the /checkout/obj is owned by root, that's it I guess</p>",
        "id": 209224353,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599396781
    },
    {
        "content": "<p>huh, interesting</p>",
        "id": 209224357,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396795
    },
    {
        "content": "<p>so maybe the problem is that it <em>isn't</em> changing users</p>",
        "id": 209224361,
        "sender_full_name": "simulacrum",
        "timestamp": 1599396802
    },
    {
        "content": "<p>It is changing user, but the mount permission is a bit weird. I guess I might know a fix, I'll try that</p>",
        "id": 209224375,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599396831
    },
    {
        "content": "<p>If I tell it to keep the user in the container the same as on the host, the mount permissions are fine and NO_CHANGE_USER makes it not try to create a user that it is already. I guess that's good enough for me to test if this actually works :)</p>",
        "id": 209224505,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599397076
    },
    {
        "content": "<p>May I ask one more thing? In the build process it tries to download <a href=\"https://static.rust-lang.org/dist/2020-08-26/rustc-beta-aarch64-unknown-linux-musl.tar.xz.sha256\">https://static.rust-lang.org/dist/2020-08-26/rustc-beta-aarch64-unknown-linux-musl.tar.xz.sha256</a> (which is 404 because as of now only std is available), tries again 5 times and exits. Why does it attempt that?</p>",
        "id": 209224611,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599397213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338253\">Jens Reidel</span> <a href=\"#narrow/stream/122651-general/topic/Building.20with.20CI.20scripts.20yields.20configure.20permission.20errors/near/209224611\">said</a>:</p>\n<blockquote>\n<p>May I ask one more thing? In the build process it tries to download <a href=\"https://static.rust-lang.org/dist/2020-08-26/rustc-beta-aarch64-unknown-linux-musl.tar.xz.sha256\">https://static.rust-lang.org/dist/2020-08-26/rustc-beta-aarch64-unknown-linux-musl.tar.xz.sha256</a> (which is 404 because as of now only std is available), tries again 5 times and exits. Why does it attempt that?</p>\n</blockquote>\n<p>it needs a bootstrap beta compiler</p>",
        "id": 209224648,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599397302
    },
    {
        "content": "<p>hmm this might be tricky ... you may need to cross-compile the first time</p>",
        "id": 209224688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599397328
    },
    {
        "content": "<p>I am trying to add support for exactly such compiler <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> <br>\nAre there instructions on cross compiling from an x86_64-unknown-linux-gnu host for aarch64-unknown-linux-musl?<br>\nOverall I did not find a guideline for adding support for new architectures as host, i.e. more than stdlib. I initially asked this on the Discord yesterday and jynelson told me to start with this Docker image for CI and ask here on Zulip if I have more questions.</p>",
        "id": 209224769,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599397485
    },
    {
        "content": "<p>well I wouldn't recommend cross-compiling on a raspberry pi lol</p>",
        "id": 209224860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599397651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you have a write-up anywhere of how to do this?</p>",
        "id": 209224913,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599397728
    },
    {
        "content": "<p>Yeah cross compiling would speed this up a lot; I went with the Pi since the folder is called \"host-aarch64\" so I assumed it'd be required to compile it on aarch64 hosts to get approval <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>. I probably thought wrong, getting instructions on the proper way of doing this would be awesome!</p>",
        "id": 209225114,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599398073
    },
    {
        "content": "<p>In theory, you need a linker and the musl library, and you can then pass host and target flags for whatever triple and it should just work</p>",
        "id": 209225400,
        "sender_full_name": "simulacrum",
        "timestamp": 1599398554
    },
    {
        "content": "<p>I don't have a handy write-up though</p>",
        "id": 209225404,
        "sender_full_name": "simulacrum",
        "timestamp": 1599398566
    },
    {
        "content": "<p>hmm ... <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> when you did this for the new MacOS target, did you do host builds? or cross-compiling only?</p>",
        "id": 209225410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599398590
    },
    {
        "content": "<p>Both</p>",
        "id": 209225461,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599398672
    },
    {
        "content": "<p>ok neat! do you happen to have instructions written down for that anywhere? ;) or even some shell scripts you came up with would be handy</p>",
        "id": 209225478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599398709
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/rust/blob/silicon-ci/silicon/README.md\">https://github.com/shepmaster/rust/blob/silicon-ci/silicon/README.md</a></p>",
        "id": 209225482,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1599398713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"338253\">@Jens Reidel</span> note that this will involve compiling rustc from source on your raspberry pi, which will probably take ... days</p>",
        "id": 209225530,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599398789
    },
    {
        "content": "<p>(if your pis are anywhere near as slow as the pis at my work)</p>",
        "id": 209225538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599398825
    },
    {
        "content": "<p>Compiling GCC on my Pi takes about 4-5h so I guess that's reasonable time</p>",
        "id": 209225719,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599399141
    },
    {
        "content": "<p>Hi again, the cross compile worked fine until it errored now.</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo:root=/rust/build/aarch64-unknown-linux-musl/llvm\n    finished in 1290.724\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; aarch64-unknown-linux-musl)\nerror: cannot produce dylib for `rustc_driver v0.0.0 (/rust/compiler/rustc_driver)` as the target `aarch64-unknown-linux-musl` does not support these crate types\ncommand did not execute successfully: &quot;/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;aarch64-unknown-linux-musl&quot; &quot;-Zdual-proc-macros&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;24&quot; &quot;--release&quot; &quot;--features&quot; &quot; llvm&quot; &quot;--manifest-path&quot; &quot;/rust/compiler/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\n</code></pre></div>\n\n\n<p>I use the default config.toml and made these changes:</p>\n<div class=\"codehilite\"><pre><span></span><code>assertions = true\ndebug = true\nincremental = true\nhost = [&quot;aarch64-unknown-linux-musl&quot;]\ntarget = [&quot;aarch64-unknown-linux-musl&quot;]\nmusl-root = &quot;/usr/local/aarch64-linux-musl/&quot;\n</code></pre></div>\n\n\n<p>How do I fix this? musl does not support dylibs, but I wonder how the x86_64 musl target does this</p>",
        "id": 209229495,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599405609
    },
    {
        "content": "<p>Musl does support dynamic linking if you dynamically link to musl itself.</p>",
        "id": 209229560,
        "sender_full_name": "bjorn3",
        "timestamp": 1599405742
    },
    {
        "content": "<p>I used the <a href=\"https://github.com/richfelker/musl-cross-make/\">https://github.com/richfelker/musl-cross-make/</a> thing to get a full aarch64 musl toolchain (just like the CI uses it). Does it have support for that?</p>",
        "id": 209229584,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599405801
    },
    {
        "content": "<p>Try adding</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">[target.aarch64-unknown-linux-gnu]</span>\n<span class=\"n\">crt-static</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n</code></pre></div>\n\n\n<p>That may fix the problem.</p>",
        "id": 209229689,
        "sender_full_name": "bjorn3",
        "timestamp": 1599405966
    },
    {
        "content": "<p>Thanks! I had tried with the env var value set before but apparently it did not apply :) It seems to continue the compile now</p>",
        "id": 209229725,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599406054
    },
    {
        "content": "<p>rustc is done building in stage1 now, but I think I have a config logic issue. As I'm cross compiling, i need to build all the components for aarch64 on the x86 host (or is that wrong?). I seem to have a rustc binary now that is for aarch64, but it tries to build the stdlib for x86 with aarch64 rustc now.<br>\nIs this the point where I just switch to the Pi with only rustc and try to compile the rest or can I somehow get this done as on x86 as well?</p>\n<div class=\"codehilite\"><pre><span></span><code>build = &quot;x86_64-unknown-linux-gnu&quot;\nhost = [&quot;aarch64-unknown-linux-musl&quot;]\ntarget = [&quot;aarch64-unknown-linux-musl&quot;]\n</code></pre></div>\n\n\n<p>Might also be a logic issue here. It says it tries to compile each target with each host, but I do not have the x86 as a host. If I add x86 to the host list, it still tries to use the aarch64 rustc to build x86 stdlib</p>\n<div class=\"codehilite\"><pre><span></span><code>    Finished release [optimized + debuginfo] target(s) in 0.11s\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / aarch64-unknown-linux-musl)\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; aarch64-unknown-linux-musl)\n    Finished release [optimized + debuginfo] target(s) in 0.17s\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / aarch64-unknown-linux-musl)\nAssembling stage1 compiler (aarch64-unknown-linux-musl)\nBuilding stage1 std artifacts (aarch64-unknown-linux-musl -&gt; x86_64-unknown-linux-gnu)\nerror: process didn&#39;t exit successfully: `/rust/build/bootstrap/debug/rustc -vV` (exit code: 101)\n--- stderr\nthread &#39;main&#39; panicked at &#39;\nFailed to run:\n&quot;/rust/build/aarch64-unknown-linux-musl/stage1/bin/rustc&quot; &quot;-vV&quot; &quot;-Wrust_2018_idioms&quot; &quot;-Wunused_lifetimes&quot; &quot;-Dwarnings&quot; &quot;-Clinker=aarch64-linux-musl-gcc&quot; &quot;-C&quot; &quot;target-feature=-crt-static&quot; &quot;-Z&quot; &quot;force-unstable-if-unmarked&quot;\n-------------: Os { code: 8, kind: Other, message: &quot;Exec format error&quot; }&#39;, src/bootstrap/bin/rustc.rs:152:22\n</code></pre></div>",
        "id": 209230140,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599406789
    },
    {
        "content": "<p>Are you passing --stage 2?</p>",
        "id": 209231113,
        "sender_full_name": "simulacrum",
        "timestamp": 1599408325
    },
    {
        "content": "<p>it's probably <a href=\"https://github.com/rust-lang/rust/issues/76333\">https://github.com/rust-lang/rust/issues/76333</a> which I'm working on a patch set for now</p>",
        "id": 209231119,
        "sender_full_name": "simulacrum",
        "timestamp": 1599408339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I am only invoking ./x.py build without any further arguments and incremental enabled (my options are somewhere above this thread)</p>",
        "id": 209231348,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599408716
    },
    {
        "content": "<p>--stage 2 seems to be doing <em>something</em>, not sure what</p>",
        "id": 209231391,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599408758
    },
    {
        "content": "<p>yes, stage 2 is what you probably want, or stage 1 but with src/rustc explicitly passed</p>",
        "id": 209231730,
        "sender_full_name": "simulacrum",
        "timestamp": 1599409367
    },
    {
        "content": "<p>I saw the file Jake linked earlier that explains how to build rust natively with the earlier cross compiled binaries. What would be the proper steps after cross compiling and then doing a native build to get this into upstream (i.e. rustup)?</p>",
        "id": 209231848,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599409595
    },
    {
        "content": "<p>If we want to distribute with rustup, we'll need to find a builder to add this build to (i.e., one that has sufficient capacity currently).<br>\nPresumably dist-arm-linux might be a good candidate -- it looks like it takes ~40 minutes right now.</p>\n<p>You can submit a PR to rust-lang/rust adjusting the configuration of that builder to compile for this target as well.</p>",
        "id": 209231944,
        "sender_full_name": "simulacrum",
        "timestamp": 1599409800
    },
    {
        "content": "<p>Once we're building for the target you'll want to edit <a href=\"https://github.com/rust-lang/rust/blob/4b65872d272875adb298b6dc12d5e4e79cf8e263/src/tools/build-manifest/src/main.rs#L17\">https://github.com/rust-lang/rust/blob/4b65872d272875adb298b6dc12d5e4e79cf8e263/src/tools/build-manifest/src/main.rs#L17</a> to include the triple in both hosts and targets</p>",
        "id": 209232146,
        "sender_full_name": "simulacrum",
        "timestamp": 1599410098
    },
    {
        "content": "<p>Just to clarify: It would require changing <a href=\"https://github.com/rust-lang/rust/blob/9a13ef2251531d5856ca62dd8822c9b8139f479a/src/ci/docker/host-x86_64/dist-arm-linux/Dockerfile\">https://github.com/rust-lang/rust/blob/9a13ef2251531d5856ca62dd8822c9b8139f479a/src/ci/docker/host-x86_64/dist-arm-linux/Dockerfile</a> or would it require adding a new file (and if so, under host-aarch64 or host-x86_64)?<br>\nAs I see it, the Dockerfiles seem to provide the base required to run the SCRIPT enviroment variable that then builds the binaries, so I assume a new one would be required</p>",
        "id": 209232156,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599410130
    },
    {
        "content": "<p>no, you want to adjust dist-arm-linux/Dockerfile</p>",
        "id": 209232164,
        "sender_full_name": "simulacrum",
        "timestamp": 1599410159
    },
    {
        "content": "<p>each new docker file is a new builder and we don't have infinite parallelism, so we pack multiple things into one builder when possible</p>",
        "id": 209232206,
        "sender_full_name": "simulacrum",
        "timestamp": 1599410180
    },
    {
        "content": "<p>host-x86_64 is also good because that has much more capacity -- we currently only have one aarch64 host.</p>",
        "id": 209232211,
        "sender_full_name": "simulacrum",
        "timestamp": 1599410216
    },
    {
        "content": "<p>Right - that means I'll have to add the musl installation and change the env vars, I assume. Is there any way I could test these changes (or are they automatically tested)? I don't have a 1:1 CI setup locally and I would like to make sure that the PR would actually work</p>",
        "id": 209232329,
        "sender_full_name": "Jens Reidel",
        "timestamp": 1599410408
    },
    {
        "content": "<p>You should be able to run src/ci/docker/run.sh dist-arm-linux locally, and inspect/test the artifacts</p>",
        "id": 209232332,
        "sender_full_name": "simulacrum",
        "timestamp": 1599410435
    }
]